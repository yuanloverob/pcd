{
  "cve_id": "CVE-2019-10642",
  "cve_desc": "Contao 4.7 allows CSRF.",
  "repo": "contao/contao",
  "patch_hash": "ee2c8130c2e68a1d0d2e75bd6b774c4393942b15",
  "patch_info": {
    "commit_hash": "ee2c8130c2e68a1d0d2e75bd6b774c4393942b15",
    "repo": "contao/contao",
    "commit_url": "https://github.com/contao/contao/commit/ee2c8130c2e68a1d0d2e75bd6b774c4393942b15",
    "files": [
      "CHANGELOG.md",
      "core-bundle/src/EventListener/RequestTokenListener.php",
      "core-bundle/src/Framework/ContaoFramework.php",
      "core-bundle/src/Resources/config/listener.yml",
      "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
      "core-bundle/tests/EventListener/RequestTokenListenerTest.php",
      "core-bundle/tests/Framework/ContaoFrameworkTest.php"
    ],
    "message": "Fix the request token check in the front end (see CVE-2019-10642)",
    "before_after_code_files": [
      "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
      "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
      "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
      "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php",
      "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
    ]
  },
  "patch_diff": {
    "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php": [
      "File: core-bundle/src/EventListener/RequestTokenListener.php -> core-bundle/src/EventListener/RequestTokenListener.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "13: namespace Contao\\CoreBundle\\EventListener;",
      "15: use Contao\\Config;",
      "16: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
      "17: use Contao\\CoreBundle\\Framework\\ContaoFramework;",
      "18: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
      "19: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
      "20: use Symfony\\Component\\Security\\Csrf\\CsrfToken;",
      "21: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;",
      "26: class RequestTokenListener",
      "27: {",
      "31:     private $framework;",
      "36:     private $scopeMatcher;",
      "41:     private $csrfTokenManager;",
      "46:     private $csrfTokenName;",
      "48:     public function __construct(ContaoFramework $framework, ScopeMatcher $scopeMatcher, CsrfTokenManagerInterface $csrfTokenManager, string $csrfTokenName)",
      "49:     {",
      "50:         $this->framework = $framework;",
      "51:         $this->scopeMatcher = $scopeMatcher;",
      "52:         $this->csrfTokenManager = $csrfTokenManager;",
      "53:         $this->csrfTokenName = $csrfTokenName;",
      "54:     }",
      "59:     public function onKernelRequest(GetResponseEvent $event): void",
      "60:     {",
      "61:         $request = $event->getRequest();",
      "67:         if (",
      "68:             'POST' !== $request->getRealMethod()",
      "69:             || $request->isXmlHttpRequest()",
      "70:             || false === $request->attributes->get('_token_check')",
      "71:             || (!$request->attributes->has('_token_check') && !$this->scopeMatcher->isContaoRequest($request))",
      "72:         ) {",
      "73:             return;",
      "74:         }",
      "77:         $config = $this->framework->getAdapter(Config::class);",
      "79:         if (\\defined('BYPASS_TOKEN_CHECK')) {",
      "80:             @trigger_error('Defining the BYPASS_TOKEN_CHECK constant has been deprecated and will no longer work in Contao 5.0.', E_USER_DEPRECATED);",
      "82:             return;",
      "83:         }",
      "85:         if ($config->get('disableRefererCheck')) {",
      "86:             @trigger_error('Using the \"disableRefererCheck\" setting has been deprecated and will no longer work in Contao 5.0.', E_USER_DEPRECATED);",
      "88:             return;",
      "89:         }",
      "91:         if ($config->get('requestTokenWhitelist')) {",
      "92:             @trigger_error('Using the \"requestTokenWhitelist\" setting has been deprecated and will no longer work in Contao 5.0.', E_USER_DEPRECATED);",
      "94:             $hostname = gethostbyaddr($request->getClientIp());",
      "96:             foreach ($config->get('requestTokenWhitelist') as $domain) {",
      "97:                 if ($domain === $hostname || preg_match('/\\.' . preg_quote($domain, '/') . '$/', $hostname)) {",
      "98:                     return;",
      "99:                 }",
      "100:             }",
      "101:         }",
      "103:         $token = new CsrfToken($this->csrfTokenName, $request->request->get('REQUEST_TOKEN'));",
      "105:         if ($this->csrfTokenManager->isTokenValid($token)) {",
      "106:             return;",
      "107:         }",
      "109:         throw new InvalidRequestTokenException('Invalid CSRF token. Please reload the page and try again.');",
      "110:     }",
      "111: }",
      "",
      "---------------"
    ],
    "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php": [
      "File: core-bundle/src/Framework/ContaoFramework.php -> core-bundle/src/Framework/ContaoFramework.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: use Contao\\ClassLoader;",
      "16: use Contao\\Config;",
      "17: use Contao\\CoreBundle\\Exception\\IncompleteInstallationException;",
      "19: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
      "20: use Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker;",
      "21: use Contao\\CoreBundle\\Session\\LazySessionAccess;",
      "",
      "[Removed Lines]",
      "18: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "395:         if (!\\defined('REQUEST_TOKEN')) {",
      "396:             \\define('REQUEST_TOKEN', 'cli' === \\PHP_SAPI ? null : $requestToken->get());",
      "397:         }",
      "404:     }",
      "406:     private function iniSet(string $key, string $value): void",
      "",
      "[Removed Lines]",
      "399:         if ($this->canSkipTokenCheck() || $requestToken->validate($this->request->request->get('REQUEST_TOKEN'))) {",
      "400:             return;",
      "401:         }",
      "403:         throw new InvalidRequestTokenException('Invalid request token. Please reload the page and try again.');",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "419:         return $this->request->getSession();",
      "420:     }",
      "432:     private function registerHookListeners(): void",
      "433:     {",
      "434:         foreach ($this->hookListeners as $hookName => $priorities) {",
      "",
      "[Removed Lines]",
      "422:     private function canSkipTokenCheck(): bool",
      "423:     {",
      "424:         return null === $this->request",
      "425:             || 'POST' !== $this->request->getRealMethod()",
      "426:             || $this->request->isXmlHttpRequest()",
      "427:             || !$this->request->attributes->has('_token_check')",
      "428:             || false === $this->request->attributes->get('_token_check')",
      "429:         ;",
      "430:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
      "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: use Contao\\CoreBundle\\EventListener\\MergeHttpHeadersListener;",
      "50: use Contao\\CoreBundle\\EventListener\\PrettyErrorScreenListener;",
      "51: use Contao\\CoreBundle\\EventListener\\RefererIdListener;",
      "52: use Contao\\CoreBundle\\EventListener\\ResponseExceptionListener;",
      "53: use Contao\\CoreBundle\\EventListener\\StoreRefererListener;",
      "54: use Contao\\CoreBundle\\EventListener\\SwitchUserListener;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: use Contao\\CoreBundle\\EventListener\\RequestTokenListener;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119: use Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBag;",
      "120: use Symfony\\Component\\DependencyInjection\\ServiceLocator;",
      "121: use Symfony\\Component\\HttpFoundation\\RequestMatcher;",
      "122: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManager;",
      "124: class ContaoCoreExtensionTest extends TestCase",
      "125: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123: use Symfony\\Component\\HttpKernel\\EventListener\\AbstractSessionListener;",
      "124: use Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener;",
      "125: use Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener as BaseLocaleListener;",
      "126: use Symfony\\Component\\HttpKernel\\EventListener\\RouterListener;",
      "128: use Symfony\\Component\\Security\\Http\\Firewall;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:         $this->assertSame('contao', $extension->getAlias());",
      "162:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "170:     public function testValidatesTheSymfonyListenerPriorities(): void",
      "171:     {",
      "172:         $events = AbstractSessionListener::getSubscribedEvents();",
      "174:         $this->assertSame('onKernelResponse', $events['kernel.response'][0]);",
      "175:         $this->assertSame(-1000, $events['kernel.response'][1]);",
      "177:         $events = BaseLocaleListener::getSubscribedEvents();",
      "179:         $this->assertSame('onKernelRequest', $events['kernel.request'][0][0]);",
      "180:         $this->assertSame(16, $events['kernel.request'][0][1]);",
      "182:         $events = ExceptionListener::getSubscribedEvents();",
      "184:         $this->assertSame('onKernelException', $events['kernel.exception'][1][0]);",
      "185:         $this->assertSame(-128, $events['kernel.exception'][1][1]);",
      "187:         $events = Firewall::getSubscribedEvents();",
      "189:         $this->assertSame('onKernelRequest', $events['kernel.request'][0]);",
      "190:         $this->assertSame(8, $events['kernel.request'][1]);",
      "192:         $events = RouterListener::getSubscribedEvents();",
      "194:         $this->assertSame('onKernelRequest', $events['kernel.request'][0][0]);",
      "195:         $this->assertSame(32, $events['kernel.request'][0][1]);",
      "196:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "508:         $this->assertSame(20, $tags['kernel.event_listener'][0]['priority']);",
      "509:     }",
      "511:     public function testRegistersTheResponseExceptionListener(): void",
      "512:     {",
      "513:         $this->assertTrue($this->container->has('contao.listener.response_exception'));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545:     public function testRegistersTheRequestTokenListener(): void",
      "546:     {",
      "547:         $this->assertTrue($this->container->has('contao.listener.request_token'));",
      "549:         $definition = $this->container->getDefinition('contao.listener.request_token');",
      "551:         $this->assertSame(RequestTokenListener::class, $definition->getClass());",
      "552:         $this->assertTrue($definition->isPrivate());",
      "553:         $this->assertSame('contao.framework', (string) $definition->getArgument(0));",
      "554:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
      "555:         $this->assertSame('contao.csrf.token_manager', (string) $definition->getArgument(2));",
      "556:         $this->assertSame('%contao.csrf_token_name%', (string) $definition->getArgument(3));",
      "558:         $tags = $definition->getTags();",
      "560:         $this->assertArrayHasKey('kernel.event_listener', $tags);",
      "561:         $this->assertSame('kernel.request', $tags['kernel.event_listener'][0]['event']);",
      "562:         $this->assertSame('onKernelRequest', $tags['kernel.event_listener'][0]['method']);",
      "563:         $this->assertSame(30, $tags['kernel.event_listener'][0]['priority']);",
      "564:     }",
      "",
      "---------------"
    ],
    "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php": [
      "File: core-bundle/tests/EventListener/RequestTokenListenerTest.php -> core-bundle/tests/EventListener/RequestTokenListenerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "3: declare(strict_types=1);",
      "13: namespace Contao\\CoreBundle\\Tests\\EventListener;",
      "15: use Contao\\Config;",
      "16: use Contao\\CoreBundle\\EventListener\\RequestTokenListener;",
      "17: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
      "18: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
      "19: use Contao\\CoreBundle\\Tests\\TestCase;",
      "20: use Symfony\\Component\\HttpFoundation\\Request;",
      "21: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
      "22: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;",
      "24: class RequestTokenListenerTest extends TestCase",
      "25: {",
      "26:     public function testValidatesTheRequestToken(): void",
      "27:     {",
      "28:         $config = $this->mockConfiguredAdapter(['get' => false]);",
      "29:         $framework = $this->mockContaoFramework([Config::class => $config]);",
      "30:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "32:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "33:         $csrfTokenManager",
      "34:             ->expects($this->once())",
      "35:             ->method('isTokenValid')",
      "36:             ->willReturn(true)",
      "37:         ;",
      "39:         $request = Request::create('/account.html');",
      "40:         $request->setMethod('POST');",
      "41:         $request->attributes->set('_token_check', true);",
      "43:         $event = $this->createMock(GetResponseEvent::class);",
      "44:         $event",
      "45:             ->expects($this->once())",
      "46:             ->method('getRequest')",
      "47:             ->willReturn($request)",
      "48:         ;",
      "50:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "51:         $listener->onKernelRequest($event);",
      "52:     }",
      "54:     public function testValidatesTheRequestTokenUponContaoRequests(): void",
      "55:     {",
      "56:         $config = $this->mockConfiguredAdapter(['get' => false]);",
      "57:         $framework = $this->mockContaoFramework([Config::class => $config]);",
      "59:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "60:         $scopeMatcher",
      "61:             ->expects($this->once())",
      "62:             ->method('isContaoRequest')",
      "63:             ->willReturn(true)",
      "64:         ;",
      "66:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "67:         $csrfTokenManager",
      "68:             ->expects($this->once())",
      "69:             ->method('isTokenValid')",
      "70:             ->willReturn(true)",
      "71:         ;",
      "73:         $request = Request::create('/account.html');",
      "74:         $request->setMethod('POST');",
      "76:         $event = $this->createMock(GetResponseEvent::class);",
      "77:         $event",
      "78:             ->expects($this->once())",
      "79:             ->method('getRequest')",
      "80:             ->willReturn($request)",
      "81:         ;",
      "83:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "84:         $listener->onKernelRequest($event);",
      "85:     }",
      "87:     public function testFailsIfTheRequestTokenIsInvalid(): void",
      "88:     {",
      "89:         $config = $this->mockConfiguredAdapter(['get' => false]);",
      "90:         $framework = $this->mockContaoFramework([Config::class => $config]);",
      "91:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "93:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "94:         $csrfTokenManager",
      "95:             ->expects($this->once())",
      "96:             ->method('isTokenValid')",
      "97:             ->willReturn(false)",
      "98:         ;",
      "100:         $request = Request::create('/account.html');",
      "101:         $request->setMethod('POST');",
      "102:         $request->attributes->set('_token_check', true);",
      "104:         $event = $this->createMock(GetResponseEvent::class);",
      "105:         $event",
      "106:             ->expects($this->once())",
      "107:             ->method('getRequest')",
      "108:             ->willReturn($request)",
      "109:         ;",
      "111:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "113:         $this->expectException(InvalidRequestTokenException::class);",
      "115:         $listener->onKernelRequest($event);",
      "116:     }",
      "118:     public function testDoesNotValidateTheRequestTokenUponNonPostRequests(): void",
      "119:     {",
      "120:         $framework = $this->mockContaoFramework();",
      "121:         $framework",
      "122:             ->expects($this->never())",
      "123:             ->method('getAdapter')",
      "124:         ;",
      "126:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "127:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "129:         $request = Request::create('/account.html');",
      "130:         $request->setMethod('GET');",
      "131:         $request->attributes->set('_token_check', true);",
      "133:         $event = $this->createMock(GetResponseEvent::class);",
      "134:         $event",
      "135:             ->expects($this->once())",
      "136:             ->method('getRequest')",
      "137:             ->willReturn($request)",
      "138:         ;",
      "140:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "141:         $listener->onKernelRequest($event);",
      "142:     }",
      "144:     public function testDoesNotValidateTheRequestTokenUponAjaxRequests(): void",
      "145:     {",
      "146:         $framework = $this->mockContaoFramework();",
      "147:         $framework",
      "148:             ->expects($this->never())",
      "149:             ->method('getAdapter')",
      "150:         ;",
      "152:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "153:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "155:         $request = Request::create('/account.html');",
      "156:         $request->setMethod('POST');",
      "157:         $request->attributes->set('_token_check', true);",
      "158:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
      "160:         $event = $this->createMock(GetResponseEvent::class);",
      "161:         $event",
      "162:             ->expects($this->once())",
      "163:             ->method('getRequest')",
      "164:             ->willReturn($request)",
      "165:         ;",
      "167:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "168:         $listener->onKernelRequest($event);",
      "169:     }",
      "171:     public function testDoesNotValidateTheRequestTokenIfTheRequestAttributeIsFalse(): void",
      "172:     {",
      "173:         $framework = $this->mockContaoFramework();",
      "174:         $framework",
      "175:             ->expects($this->never())",
      "176:             ->method('getAdapter')",
      "177:         ;",
      "179:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "180:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "182:         $request = Request::create('/account.html');",
      "183:         $request->setMethod('POST');",
      "184:         $request->attributes->set('_token_check', false);",
      "186:         $event = $this->createMock(GetResponseEvent::class);",
      "187:         $event",
      "188:             ->expects($this->once())",
      "189:             ->method('getRequest')",
      "190:             ->willReturn($request)",
      "191:         ;",
      "193:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "194:         $listener->onKernelRequest($event);",
      "195:     }",
      "197:     public function testDoesNotValidateTheRequestTokenIfNoRequestAttributeAndNotAContaoRequest(): void",
      "198:     {",
      "199:         $framework = $this->mockContaoFramework();",
      "200:         $framework",
      "201:             ->expects($this->never())",
      "202:             ->method('getAdapter')",
      "203:         ;",
      "205:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
      "206:         $scopeMatcher",
      "207:             ->expects($this->once())",
      "208:             ->method('isContaoRequest')",
      "209:             ->willReturn(false)",
      "210:         ;",
      "212:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
      "214:         $request = Request::create('/account.html');",
      "215:         $request->setMethod('POST');",
      "217:         $event = $this->createMock(GetResponseEvent::class);",
      "218:         $event",
      "219:             ->expects($this->once())",
      "220:             ->method('getRequest')",
      "221:             ->willReturn($request)",
      "222:         ;",
      "224:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
      "225:         $listener->onKernelRequest($event);",
      "226:     }",
      "227: }",
      "",
      "---------------"
    ],
    "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
      "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:         error_reporting($errorReporting);",
      "329:     }",
      "",
      "[Removed Lines]",
      "331:     public function testValidatesTheRequestToken(): void",
      "332:     {",
      "333:         $request = Request::create('/contao/login');",
      "334:         $request->attributes->set('_route', 'dummy');",
      "335:         $request->attributes->set('_token_check', true);",
      "336:         $request->setMethod('POST');",
      "337:         $request->request->set('REQUEST_TOKEN', 'foobar');",
      "339:         $framework = $this->mockFramework($request);",
      "340:         $framework->setContainer($this->mockContainer());",
      "341:         $framework->initialize();",
      "343:         $this->addToAssertionCount(1);  // does not throw an exception",
      "344:     }",
      "350:     public function testFailsIfTheRequestTokenIsInvalid(): void",
      "351:     {",
      "352:         $request = Request::create('/contao/login');",
      "353:         $request->attributes->set('_route', 'dummy');",
      "354:         $request->attributes->set('_token_check', true);",
      "355:         $request->setMethod('POST');",
      "356:         $request->request->set('REQUEST_TOKEN', 'invalid');",
      "358:         $requestStack = new RequestStack();",
      "359:         $requestStack->push($request);",
      "361:         $framework = new ContaoFramework(",
      "362:             $requestStack,",
      "363:             $this->mockScopeMatcher(),",
      "364:             $this->createMock(TokenChecker::class),",
      "365:             $this->getTempDir(),",
      "366:             error_reporting()",
      "367:         );",
      "369:         $framework->setContainer($this->mockContainer());",
      "371:         $adapters = [",
      "372:             Config::class => $this->mockConfigAdapter(),",
      "373:             RequestToken::class => $this->mockRequestTokenAdapter(false),",
      "374:         ];",
      "376:         $ref = new \\ReflectionObject($framework);",
      "377:         $adapterCache = $ref->getProperty('adapterCache');",
      "378:         $adapterCache->setAccessible(true);",
      "379:         $adapterCache->setValue($framework, $adapters);",
      "381:         $this->expectException(InvalidRequestTokenException::class);",
      "383:         $framework->initialize();",
      "384:     }",
      "386:     public function testDoesNotValidateTheRequestTokenUponAjaxRequests(): void",
      "387:     {",
      "388:         $request = Request::create('/contao/login');",
      "389:         $request->attributes->set('_route', 'dummy');",
      "390:         $request->attributes->set('_token_check', true);",
      "391:         $request->setMethod('POST');",
      "392:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
      "394:         $requestStack = new RequestStack();",
      "395:         $requestStack->push($request);",
      "397:         $framework = new ContaoFramework(",
      "398:             $requestStack,",
      "399:             $this->mockScopeMatcher(),",
      "400:             $this->createMock(TokenChecker::class),",
      "401:             $this->getTempDir(),",
      "402:             error_reporting()",
      "403:         );",
      "405:         $framework->setContainer($this->mockContainer());",
      "407:         $adapters = [",
      "408:             Config::class => $this->mockConfigAdapter(),",
      "409:             RequestToken::class => $this->mockRequestTokenAdapter(false),",
      "410:         ];",
      "412:         $ref = new \\ReflectionObject($framework);",
      "413:         $adapterCache = $ref->getProperty('adapterCache');",
      "414:         $adapterCache->setAccessible(true);",
      "415:         $adapterCache->setValue($framework, $adapters);",
      "417:         $framework->initialize();",
      "419:         $this->addToAssertionCount(1);  // does not throw an exception",
      "420:     }",
      "422:     public function testDoesNotValidateTheRequestTokenIfTheRequestAttributeIsFalse(): void",
      "423:     {",
      "424:         $request = Request::create('/contao/login');",
      "425:         $request->attributes->set('_route', 'dummy');",
      "426:         $request->attributes->set('_token_check', false);",
      "427:         $request->setMethod('POST');",
      "428:         $request->request->set('REQUEST_TOKEN', 'foobar');",
      "430:         $requestStack = new RequestStack();",
      "431:         $requestStack->push($request);",
      "433:         $framework = new ContaoFramework(",
      "434:             $requestStack,",
      "435:             $this->mockScopeMatcher(),",
      "436:             $this->createMock(TokenChecker::class),",
      "437:             $this->getTempDir(),",
      "438:             error_reporting()",
      "439:         );",
      "441:         $framework->setContainer($this->mockContainer());",
      "443:         $adapter = $this->mockAdapter(['get', 'validate']);",
      "444:         $adapter",
      "445:             ->method('get')",
      "446:             ->willReturn('foobar')",
      "447:         ;",
      "449:         $adapter",
      "450:             ->expects($this->never())",
      "451:             ->method('validate')",
      "452:         ;",
      "454:         $adapters = [",
      "455:             Config::class => $this->mockConfigAdapter(),",
      "456:             RequestToken::class => $adapter,",
      "457:         ];",
      "459:         $ref = new \\ReflectionObject($framework);",
      "460:         $adapterCache = $ref->getProperty('adapterCache');",
      "461:         $adapterCache->setAccessible(true);",
      "462:         $adapterCache->setValue($framework, $adapters);",
      "464:         $framework->initialize();",
      "465:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4118d8fac40a4b51fbf85f91caf6ce92e02a2322",
      "candidate_info": {
        "commit_hash": "4118d8fac40a4b51fbf85f91caf6ce92e02a2322",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/4118d8fac40a4b51fbf85f91caf6ce92e02a2322",
        "files": [
          "core-bundle/src/DependencyInjection/Configuration.php",
          "core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "core-bundle/src/EventListener/CsrfTokenCookieListener.php",
          "core-bundle/src/EventListener/RequestTokenListener.php",
          "core-bundle/src/Resources/config/listener.yml",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php",
          "core-bundle/tests/EventListener/RequestTokenListenerTest.php"
        ],
        "message": "Disable CSRF if the request has no cookies (see #515)\n\nDescription\n-----------\n\nIf there are no cookies:\n\n- [x] Don\u2019t send CSRF cookie\n- [x] Remove existing CSRF cookies\n- [x] Disable CSRF validation\n\n***\n\n- [x] Unit tests\n\nCommits\n-------\n\n1ed17954 Only store CSRF token cookie if nessecary\n4304bb8f Disable CSRF token check for cookie-less requests\n64c14ca9 Fix tests\ndae6faa6 Test request token listener\n24ed9a45 Test CSRF token cookie listener\n5636c5ef Add contao.csrf_cookie_prefix parameter\n15aafd2b Improve comment\n92c2c4b8 Improve comment\n027fd938 Coding style",
        "before_after_code_files": [
          "core-bundle/src/DependencyInjection/Configuration.php||core-bundle/src/DependencyInjection/Configuration.php",
          "core-bundle/src/DependencyInjection/ContaoCoreExtension.php||core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "core-bundle/src/EventListener/CsrfTokenCookieListener.php||core-bundle/src/EventListener/CsrfTokenCookieListener.php",
          "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php||core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php",
          "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php"
          ],
          "candidate": [
            "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/src/DependencyInjection/Configuration.php||core-bundle/src/DependencyInjection/Configuration.php": [
          "File: core-bundle/src/DependencyInjection/Configuration.php -> core-bundle/src/DependencyInjection/Configuration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:                         ->thenInvalid('%s')",
          "80:                     ->end()",
          "81:                 ->end()",
          "82:                 ->scalarNode('csrf_token_name')",
          "83:                     ->cannotBeEmpty()",
          "84:                     ->defaultValue('contao_csrf_token')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:                 ->scalarNode('csrf_cookie_prefix')",
          "83:                     ->cannotBeEmpty()",
          "84:                     ->defaultValue('csrf_')",
          "85:                 ->end()",
          "",
          "---------------"
        ],
        "core-bundle/src/DependencyInjection/ContaoCoreExtension.php||core-bundle/src/DependencyInjection/ContaoCoreExtension.php": [
          "File: core-bundle/src/DependencyInjection/ContaoCoreExtension.php -> core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         $container->setParameter('contao.encryption_key', $config['encryption_key']);",
          "75:         $container->setParameter('contao.url_suffix', $config['url_suffix']);",
          "76:         $container->setParameter('contao.upload_path', $config['upload_path']);",
          "77:         $container->setParameter('contao.csrf_token_name', $config['csrf_token_name']);",
          "78:         $container->setParameter('contao.pretty_error_screens', $config['pretty_error_screens']);",
          "79:         $container->setParameter('contao.error_level', $config['error_level']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         $container->setParameter('contao.csrf_cookie_prefix', $config['csrf_cookie_prefix']);",
          "",
          "---------------"
        ],
        "core-bundle/src/EventListener/CsrfTokenCookieListener.php||core-bundle/src/EventListener/CsrfTokenCookieListener.php": [
          "File: core-bundle/src/EventListener/CsrfTokenCookieListener.php -> core-bundle/src/EventListener/CsrfTokenCookieListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\CoreBundle\\Csrf\\MemoryTokenStorage;",
          "16: use Symfony\\Component\\HttpFoundation\\Cookie;",
          "17: use Symfony\\Component\\HttpFoundation\\ParameterBag;",
          "18: use Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;",
          "19: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use Symfony\\Component\\HttpFoundation\\Request;",
          "19: use Symfony\\Component\\HttpFoundation\\Response;",
          "20: use Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         $request = $event->getRequest();",
          "61:         $response = $event->getResponse();",
          "62:         $isSecure = $request->isSecure();",
          "63:         $basePath = $request->getBasePath() ?: '/';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         if ($this->requiresCsrf($request, $response)) {",
          "67:             $this->setCookies($request, $response);",
          "68:         } else {",
          "69:             $this->removeCookies($request, $response);",
          "70:         }",
          "71:     }",
          "73:     private function requiresCsrf(Request $request, Response $response): bool",
          "74:     {",
          "75:         foreach ($request->cookies as $key => $value) {",
          "76:             if (!$this->isCsrfCookie($key, $value)) {",
          "77:                 return true;",
          "78:             }",
          "79:         }",
          "81:         if (\\count($response->headers->getCookies(ResponseHeaderBag::COOKIES_ARRAY))) {",
          "82:             return true;",
          "83:         }",
          "85:         if ($request->getUserInfo()) {",
          "86:             return true;",
          "87:         }",
          "89:         if ($request->hasSession() && $request->getSession()->isStarted()) {",
          "90:             return true;",
          "91:         }",
          "93:         return false;",
          "94:     }",
          "96:     private function setCookies(Request $request, Response $response): void",
          "97:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         }",
          "79:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     private function removeCookies(Request $request, Response $response): void",
          "118:     {",
          "119:         $isSecure = $request->isSecure();",
          "120:         $basePath = $request->getBasePath() ?: '/';",
          "122:         foreach ($request->cookies as $key => $value) {",
          "123:             if ($this->isCsrfCookie($key, $value)) {",
          "124:                 $response->headers->clearCookie($key, $basePath, null, $isSecure, true);",
          "125:             }",
          "126:         }",
          "127:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:         $tokens = [];",
          "88:         foreach ($cookies as $key => $value) {",
          "94:                 $tokens[substr($key, \\strlen($this->cookiePrefix))] = $value;",
          "95:             }",
          "96:         }",
          "98:         return $tokens;",
          "99:     }",
          "100: }",
          "",
          "[Removed Lines]",
          "89:             if (!\\is_string($key)) {",
          "90:                 continue;",
          "91:             }",
          "93:             if (0 === strpos($key, $this->cookiePrefix) && preg_match('/^[a-z0-9_-]+$/i', $value)) {",
          "",
          "[Added Lines]",
          "137:             if ($this->isCsrfCookie($key, $value)) {",
          "145:     private function isCsrfCookie($key, string $value): bool",
          "146:     {",
          "147:         if (!\\is_string($key)) {",
          "148:             return false;",
          "149:         }",
          "151:         return 0 === strpos($key, $this->cookiePrefix) && preg_match('/^[a-z0-9_-]+$/i', $value);",
          "152:     }",
          "",
          "---------------"
        ],
        "core-bundle/src/EventListener/RequestTokenListener.php||core-bundle/src/EventListener/RequestTokenListener.php": [
          "File: core-bundle/src/EventListener/RequestTokenListener.php -> core-bundle/src/EventListener/RequestTokenListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     private $csrfTokenName;",
          "49:     {",
          "50:         $this->framework = $framework;",
          "51:         $this->scopeMatcher = $scopeMatcher;",
          "52:         $this->csrfTokenManager = $csrfTokenManager;",
          "53:         $this->csrfTokenName = $csrfTokenName;",
          "54:     }",
          "",
          "[Removed Lines]",
          "48:     public function __construct(ContaoFramework $framework, ScopeMatcher $scopeMatcher, CsrfTokenManagerInterface $csrfTokenManager, string $csrfTokenName)",
          "",
          "[Added Lines]",
          "51:     private $csrfCookiePrefix;",
          "53:     public function __construct(ContaoFramework $framework, ScopeMatcher $scopeMatcher, CsrfTokenManagerInterface $csrfTokenManager, string $csrfTokenName, string $csrfCookiePrefix = 'csrf_')",
          "59:         $this->csrfCookiePrefix = $csrfCookiePrefix;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         if (",
          "68:             'POST' !== $request->getRealMethod()",
          "69:             || $request->isXmlHttpRequest()",
          "70:             || false === $request->attributes->get('_token_check')",
          "71:             || (!$request->attributes->has('_token_check') && !$this->scopeMatcher->isContaoRequest($request))",
          "72:         ) {",
          "73:             return;",
          "74:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:             || (",
          "80:                 (0 === $request->cookies->count() || $request->cookies->keys() === [$this->csrfCookiePrefix.$this->csrfTokenName])",
          "81:                 && !$request->getUserInfo()",
          "82:                 && !($request->hasSession() && $request->getSession()->isStarted())",
          "83:             )",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
          "547:         $this->assertSame('contao.csrf.token_manager', (string) $definition->getArgument(2));",
          "548:         $this->assertSame('%contao.csrf_token_name%', (string) $definition->getArgument(3));",
          "550:         $tags = $definition->getTags();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:         $this->assertSame('%contao.csrf_cookie_prefix%', (string) $definition->getArgument(4));",
          "",
          "---------------"
        ],
        "core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php||core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php": [
          "File: core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php -> core-bundle/tests/EventListener/CsrfTokenCookieListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     public function testAddsTheTokenCookiesToTheResponse(): void",
          "85:     {",
          "89:         $request = $this->createMock(Request::class);",
          "92:         $request",
          "93:             ->method('isSecure')",
          "",
          "[Removed Lines]",
          "86:         $bag = new ParameterBag();",
          "87:         $bag->set('csrf_foo', '');",
          "90:         $request->cookies = $bag;",
          "",
          "[Added Lines]",
          "87:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:     {",
          "149:         $bag = new ParameterBag();",
          "150:         $bag->set('csrf_foo', 'bar');",
          "152:         $request = $this->createMock(Request::class);",
          "153:         $request->cookies = $bag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:         $bag->set('unrelated-cookie', 'to-activate-csrf');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:             ->method('setCookie')",
          "182:         ;",
          "184:         $response->headers = $responseHeaders;",
          "186:         $tokenStorage = $this->createMock(MemoryTokenStorage::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:         $responseHeaders",
          "183:             ->method('getCookies')",
          "184:             ->willReturn([])",
          "185:         ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194:         $listener->onKernelResponse($responseEvent);",
          "195:     }",
          "197:     public function testDoesNotAddTheTokenCookiesToTheResponseUponSubrequests(): void",
          "198:     {",
          "199:         $responseEvent = $this->createMock(FilterResponseEvent::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:     public function testRemovesTheTokenCookiesIfNoOtherCookiesArePresent(): void",
          "201:     {",
          "202:         $bag = new ParameterBag();",
          "203:         $bag->set('csrf_foo', 'bar');",
          "205:         $request = $this->createMock(Request::class);",
          "206:         $request->cookies = $bag;",
          "208:         $request",
          "209:             ->method('isSecure')",
          "210:             ->willReturn(true)",
          "211:         ;",
          "213:         $response = $this->createMock(Response::class);",
          "215:         $responseEvent = $this->createMock(FilterResponseEvent::class);",
          "216:         $responseEvent",
          "217:             ->method('isMasterRequest')",
          "218:             ->willReturn(true)",
          "219:         ;",
          "221:         $responseEvent",
          "222:             ->method('getRequest')",
          "223:             ->willReturn($request)",
          "224:         ;",
          "226:         $responseEvent",
          "227:             ->method('getResponse')",
          "228:             ->willReturn($response)",
          "229:         ;",
          "231:         $responseHeaders = $this->createMock(ResponseHeaderBag::class);",
          "232:         $responseHeaders",
          "233:             ->expects($this->never())",
          "234:             ->method('setCookie')",
          "235:         ;",
          "237:         $responseHeaders",
          "238:             ->method('getCookies')",
          "239:             ->willReturn([])",
          "240:         ;",
          "242:         $responseHeaders",
          "243:             ->expects($this->once())",
          "244:             ->method('clearCookie')",
          "245:             ->with('csrf_foo')",
          "246:         ;",
          "248:         $response->headers = $responseHeaders;",
          "250:         $tokenStorage = $this->createMock(MemoryTokenStorage::class);",
          "252:         $listener = new CsrfTokenCookieListener($tokenStorage);",
          "253:         $listener->onKernelResponse($responseEvent);",
          "254:     }",
          "",
          "---------------"
        ],
        "core-bundle/tests/EventListener/RequestTokenListenerTest.php||core-bundle/tests/EventListener/RequestTokenListenerTest.php": [
          "File: core-bundle/tests/EventListener/RequestTokenListenerTest.php -> core-bundle/tests/EventListener/RequestTokenListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
          "18: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
          "19: use Contao\\CoreBundle\\Tests\\TestCase;",
          "20: use Symfony\\Component\\HttpFoundation\\Request;",
          "21: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
          "22: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use Symfony\\Component\\HttpFoundation\\ParameterBag;",
          "22: use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: {",
          "26:     public function testValidatesTheRequestToken(): void",
          "27:     {",
          "36:             ->willReturn(true)",
          "37:         ;",
          "39:         $request = Request::create('/account.html');",
          "40:         $request->setMethod('POST');",
          "41:         $request->attributes->set('_token_check', true);",
          "52:     }",
          "54:     public function testValidatesTheRequestTokenUponContaoRequests(): void",
          "",
          "[Removed Lines]",
          "28:         $config = $this->mockConfiguredAdapter(['get' => false]);",
          "29:         $framework = $this->mockContaoFramework([Config::class => $config]);",
          "30:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
          "32:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
          "33:         $csrfTokenManager",
          "34:             ->expects($this->once())",
          "35:             ->method('isTokenValid')",
          "43:         $event = $this->createMock(GetResponseEvent::class);",
          "44:         $event",
          "45:             ->expects($this->once())",
          "46:             ->method('getRequest')",
          "47:             ->willReturn($request)",
          "48:         ;",
          "50:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
          "51:         $listener->onKernelRequest($event);",
          "",
          "[Added Lines]",
          "30:         $request = Request::create('/account.html', 'POST');",
          "31:         $request->setMethod('POST');",
          "32:         $request->attributes->set('_token_check', true);",
          "33:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "35:         $this->validateRequestTokenForRequest($request);",
          "36:     }",
          "38:     public function testValidatesTheRequestTokenUponAuthenticatedRequest(): void",
          "39:     {",
          "40:         $request = Request::create('/account.html');",
          "41:         $request->setMethod('POST');",
          "42:         $request->attributes->set('_token_check', true);",
          "43:         $request->headers->set('PHP_AUTH_USER', 'user');",
          "45:         $this->validateRequestTokenForRequest($request);",
          "46:     }",
          "48:     public function testValidatesTheRequestTokenUponRunningSession(): void",
          "49:     {",
          "50:         $session = $this->createMock(SessionInterface::class);",
          "51:         $session",
          "52:             ->method('isStarted')",
          "59:         $request->setSession($session);",
          "61:         $this->validateRequestTokenForRequest($request);",
          "62:     }",
          "64:     public function testDoesNotValidateTheRequestTokenWithoutCookies(): void",
          "65:     {",
          "66:         $request = Request::create('/account.html');",
          "67:         $request->setMethod('POST');",
          "68:         $request->attributes->set('_token_check', true);",
          "70:         $this->validateRequestTokenForRequest($request, false);",
          "71:     }",
          "73:     public function testDoesNotValidateTheRequestTokenWithCsrfCookiesOnly(): void",
          "74:     {",
          "75:         $request = Request::create('/account.html');",
          "76:         $request->setMethod('POST');",
          "77:         $request->attributes->set('_token_check', true);",
          "78:         $request->cookies = new ParameterBag(['csrf_contao_csrf_token' => 'value']);",
          "80:         $this->validateRequestTokenForRequest($request, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         $request = Request::create('/account.html');",
          "74:         $request->setMethod('POST');",
          "76:         $event = $this->createMock(GetResponseEvent::class);",
          "77:         $event",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         $request = Request::create('/account.html');",
          "101:         $request->setMethod('POST');",
          "102:         $request->attributes->set('_token_check', true);",
          "104:         $event = $this->createMock(GetResponseEvent::class);",
          "105:         $event",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:         $request = Request::create('/account.html');",
          "130:         $request->setMethod('GET');",
          "131:         $request->attributes->set('_token_check', true);",
          "133:         $event = $this->createMock(GetResponseEvent::class);",
          "134:         $event",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:         $request = Request::create('/account.html');",
          "156:         $request->setMethod('POST');",
          "157:         $request->attributes->set('_token_check', true);",
          "158:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
          "160:         $event = $this->createMock(GetResponseEvent::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "182:         $request = Request::create('/account.html');",
          "183:         $request->setMethod('POST');",
          "184:         $request->attributes->set('_token_check', false);",
          "186:         $event = $this->createMock(GetResponseEvent::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214:         $request = Request::create('/account.html');",
          "215:         $request->setMethod('POST');",
          "217:         $event = $this->createMock(GetResponseEvent::class);",
          "218:         $event",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:         $request->cookies = new ParameterBag(['unrelated-cookie' => 'to-activate-csrf']);",
          "252:         $event = $this->createMock(GetResponseEvent::class);",
          "253:         $event",
          "254:             ->expects($this->once())",
          "255:             ->method('getRequest')",
          "256:             ->willReturn($request)",
          "257:         ;",
          "259:         $listener = new RequestTokenListener($framework, $scopeMatcher, $csrfTokenManager, 'contao_csrf_token');",
          "260:         $listener->onKernelRequest($event);",
          "261:     }",
          "263:     private function validateRequestTokenForRequest(Request $request, bool $shouldValidate = true): void",
          "264:     {",
          "265:         $config = $this->mockConfiguredAdapter(['get' => false]);",
          "266:         $framework = $this->mockContaoFramework([Config::class => $config]);",
          "267:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
          "269:         $csrfTokenManager = $this->createMock(CsrfTokenManagerInterface::class);",
          "270:         $csrfTokenManager",
          "271:             ->expects($shouldValidate ? $this->once() : $this->never())",
          "272:             ->method('isTokenValid')",
          "273:             ->willReturn(true)",
          "274:         ;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93b6ba28dbcc510ff3c3e86aff7e8ff6ab7fa512",
      "candidate_info": {
        "commit_hash": "93b6ba28dbcc510ff3c3e86aff7e8ff6ab7fa512",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/93b6ba28dbcc510ff3c3e86aff7e8ff6ab7fa512",
        "files": [
          ".travis.yml",
          "CHANGELOG.md",
          "core-bundle/src/DependencyInjection/Configuration.php",
          "core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "core-bundle/src/Framework/ContaoFramework.php",
          "core-bundle/src/Resources/config/services.yml",
          "core-bundle/src/Resources/contao/controllers/FrontendIndex.php",
          "core-bundle/src/Resources/contao/dca/tl_member.php",
          "core-bundle/src/Resources/contao/models/PageModel.php",
          "core-bundle/src/Resources/contao/widgets/InputUnit.php",
          "core-bundle/src/Resources/contao/widgets/TimePeriod.php",
          "core-bundle/src/Resources/contao/widgets/TrblField.php",
          "core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "core-bundle/src/Routing/Matcher/LegacyMatcher.php",
          "core-bundle/src/Routing/RouteProvider.php",
          "core-bundle/tests/Contao/TemplateTest.php",
          "core-bundle/tests/DependencyInjection/ConfigurationTest.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/Functional/RoutingTest.php",
          "core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php",
          "core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php",
          "core-bundle/tests/Routing/RouteProviderTest.php"
        ],
        "message": "Add more unit tests, CS fixes and inject parameters instead of using a config adapter",
        "before_after_code_files": [
          "core-bundle/src/DependencyInjection/Configuration.php||core-bundle/src/DependencyInjection/Configuration.php",
          "core-bundle/src/DependencyInjection/ContaoCoreExtension.php||core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
          "core-bundle/src/Resources/contao/controllers/FrontendIndex.php||core-bundle/src/Resources/contao/controllers/FrontendIndex.php",
          "core-bundle/src/Resources/contao/dca/tl_member.php||core-bundle/src/Resources/contao/dca/tl_member.php",
          "core-bundle/src/Resources/contao/models/PageModel.php||core-bundle/src/Resources/contao/models/PageModel.php",
          "core-bundle/src/Resources/contao/widgets/InputUnit.php||core-bundle/src/Resources/contao/widgets/InputUnit.php",
          "core-bundle/src/Resources/contao/widgets/TimePeriod.php||core-bundle/src/Resources/contao/widgets/TimePeriod.php",
          "core-bundle/src/Resources/contao/widgets/TrblField.php||core-bundle/src/Resources/contao/widgets/TrblField.php",
          "core-bundle/src/Routing/Enhancer/InputEnhancer.php||core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "core-bundle/src/Routing/Matcher/LegacyMatcher.php||core-bundle/src/Routing/Matcher/LegacyMatcher.php",
          "core-bundle/src/Routing/RouteProvider.php||core-bundle/src/Routing/RouteProvider.php",
          "core-bundle/tests/Contao/TemplateTest.php||core-bundle/tests/Contao/TemplateTest.php",
          "core-bundle/tests/DependencyInjection/ConfigurationTest.php||core-bundle/tests/DependencyInjection/ConfigurationTest.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/Functional/RoutingTest.php||core-bundle/tests/Functional/RoutingTest.php",
          "core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php||core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php",
          "core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php||core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php",
          "core-bundle/tests/Routing/RouteProviderTest.php||core-bundle/tests/Routing/RouteProviderTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ],
          "candidate": [
            "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/src/DependencyInjection/Configuration.php||core-bundle/src/DependencyInjection/Configuration.php": [
          "File: core-bundle/src/DependencyInjection/Configuration.php -> core-bundle/src/DependencyInjection/Configuration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: class Configuration implements ConfigurationInterface",
          "22: {",
          "",
          "[Removed Lines]",
          "26:     private $debug;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     private $defaultLocale;",
          "39:     {",
          "41:         $this->projectDir = $projectDir;",
          "42:         $this->defaultLocale = $defaultLocale;",
          "43:     }",
          "",
          "[Removed Lines]",
          "38:     public function __construct(bool $debug, string $projectDir, string $defaultLocale)",
          "40:         $this->debug = $debug;",
          "",
          "[Added Lines]",
          "33:     public function __construct(string $projectDir, string $defaultLocale)",
          "",
          "---------------"
        ],
        "core-bundle/src/DependencyInjection/ContaoCoreExtension.php||core-bundle/src/DependencyInjection/ContaoCoreExtension.php": [
          "File: core-bundle/src/DependencyInjection/ContaoCoreExtension.php -> core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         parent::getConfiguration($config, $container);",
          "42:         return new Configuration(",
          "44:             $container->getParameter('kernel.project_dir'),",
          "45:             $container->getParameter('kernel.default_locale')",
          "46:         );",
          "",
          "[Removed Lines]",
          "43:             $container->getParameter('kernel.debug'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php": [
          "File: core-bundle/src/Framework/ContaoFramework.php -> core-bundle/src/Framework/ContaoFramework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;",
          "26: use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;",
          "27: use Symfony\\Component\\HttpFoundation\\Request;",
          "29: use Symfony\\Component\\Routing\\RouterInterface;",
          "",
          "[Removed Lines]",
          "28: use Symfony\\Component\\HttpFoundation\\RequestStack;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     private $hookListeners = [];",
          "82:     {",
          "87:         $this->router = $router;",
          "88:         $this->scopeMatcher = $scopeMatcher;",
          "89:         $this->rootDir = $rootDir;",
          "",
          "[Removed Lines]",
          "81:     public function __construct(?RequestStack $requestStack, RouterInterface $router, ScopeMatcher $scopeMatcher, string $rootDir, int $errorLevel)",
          "83:         if (null !== $requestStack) {",
          "84:             @trigger_error('Injecting the request stack in the Contao framework is no longer supported since Contao 4.7. Use ContaoFramework::setRequest() instead.', E_USER_DEPRECATED);",
          "85:         }",
          "",
          "[Added Lines]",
          "77:     public function __construct(RouterInterface $router, ScopeMatcher $scopeMatcher, string $rootDir, int $errorLevel)",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/controllers/FrontendIndex.php||core-bundle/src/Resources/contao/controllers/FrontendIndex.php": [
          "File: core-bundle/src/Resources/contao/controllers/FrontendIndex.php -> core-bundle/src/Resources/contao/controllers/FrontendIndex.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  public function run()",
          "53:  {",
          "56:   $pageId = $this->getPageIdFromUrl();",
          "57:   $objRootPage = null;",
          "",
          "[Removed Lines]",
          "54:   @trigger_error('Using FrontendIndex::run() has been deprecated and will no longer work Contao 5.0. Use the Symfony routing instead.', E_USER_DEPRECATED);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/dca/tl_member.php||core-bundle/src/Resources/contao/dca/tl_member.php": [
          "File: core-bundle/src/Resources/contao/dca/tl_member.php -> core-bundle/src/Resources/contao/dca/tl_member.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "413: );",
          "417: {",
          "418:  $GLOBALS['TL_DCA']['tl_member']['fields']['groups']['options_callback'] = array('tl_member', 'getActiveGroups');",
          "419: }",
          "",
          "[Removed Lines]",
          "416: if (TL_MODE == 'FE')",
          "",
          "[Added Lines]",
          "416: if (\\defined('TL_MODE') && TL_MODE == 'FE')",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/models/PageModel.php||core-bundle/src/Resources/contao/models/PageModel.php": [
          "File: core-bundle/src/Resources/contao/models/PageModel.php -> core-bundle/src/Resources/contao/models/PageModel.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:  public static function findByAliases($arrAliases, array $arrOptions=array())",
          "525:  {",
          "528:   if (empty($arrAliases) || !\\is_array($arrAliases))",
          "529:   {",
          "530:    return null;",
          "",
          "[Removed Lines]",
          "526:   @trigger_error('Using PageModel::findByAliases() has been deprecated and will no longer work Contao 5.0.', E_USER_DEPRECATED);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:  public static function findPublishedByIdOrAlias($varId, array $arrOptions=array())",
          "571:  {",
          "574:   $t = static::$strTable;",
          "575:   $arrColumns = !preg_match('/^[1-9]\\d*$/', $varId) ? array(\"$t.alias=?\") : array(\"$t.id=?\");",
          "",
          "[Removed Lines]",
          "572:   @trigger_error('Using PageModel::findPublishedByIdOrAlias() has been deprecated and will no longer work Contao 5.0.', E_USER_DEPRECATED);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:  public static function findPublishedRootPages(array $arrOptions=array())",
          "727:  {",
          "730:   $t = static::$strTable;",
          "731:   $arrColumns = array(\"$t.type=?\");",
          "",
          "[Removed Lines]",
          "728:   @trigger_error('Using PageModel::findPublishedRootPages() has been deprecated and will no longer work Contao 5.0.', E_USER_DEPRECATED);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/widgets/InputUnit.php||core-bundle/src/Resources/contao/widgets/InputUnit.php": [
          "File: core-bundle/src/Resources/contao/widgets/InputUnit.php -> core-bundle/src/Resources/contao/widgets/InputUnit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  {",
          "116:   if (empty($this->varValue) && empty($_POST) && $arrOption['default'])",
          "117:   {",
          "119:   }",
          "121:   if (empty($this->varValue) || !\\is_array($this->varValue))",
          "",
          "[Removed Lines]",
          "118:    return parent::optionSelected(1, 1);",
          "",
          "[Added Lines]",
          "118:    return $this->optionSelected(1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:    return '';",
          "124:   }",
          "127:  }",
          "",
          "[Removed Lines]",
          "126:   return parent::optionSelected($arrOption['value'], $this->varValue['unit']);",
          "",
          "[Added Lines]",
          "126:   return $this->optionSelected($arrOption['value'], $this->varValue['unit']);",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/widgets/TimePeriod.php||core-bundle/src/Resources/contao/widgets/TimePeriod.php": [
          "File: core-bundle/src/Resources/contao/widgets/TimePeriod.php -> core-bundle/src/Resources/contao/widgets/TimePeriod.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  {",
          "111:   if (empty($this->varValue) && empty($_POST) && $arrOption['default'])",
          "112:   {",
          "114:   }",
          "116:   if (empty($this->varValue) || !\\is_array($this->varValue))",
          "",
          "[Removed Lines]",
          "113:    return parent::optionSelected(1, 1);",
          "",
          "[Added Lines]",
          "113:    return $this->optionSelected(1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:    return '';",
          "119:   }",
          "122:  }",
          "",
          "[Removed Lines]",
          "121:   return parent::optionSelected($arrOption['value'], $this->varValue['unit']);",
          "",
          "[Added Lines]",
          "121:   return $this->optionSelected($arrOption['value'], $this->varValue['unit']);",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/widgets/TrblField.php||core-bundle/src/Resources/contao/widgets/TrblField.php": [
          "File: core-bundle/src/Resources/contao/widgets/TrblField.php -> core-bundle/src/Resources/contao/widgets/TrblField.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:  {",
          "98:   if (empty($this->varValue) && empty($_POST) && $arrOption['default'])",
          "99:   {",
          "101:   }",
          "103:   if (empty($this->varValue) || !\\is_array($this->varValue))",
          "",
          "[Removed Lines]",
          "100:    return parent::optionSelected(1, 1);",
          "",
          "[Added Lines]",
          "100:    return $this->optionSelected(1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:    return '';",
          "106:   }",
          "109:  }",
          "",
          "[Removed Lines]",
          "108:   return parent::optionSelected($arrOption['value'], $this->varValue['unit']);",
          "",
          "[Added Lines]",
          "108:   return $this->optionSelected($arrOption['value'], $this->varValue['unit']);",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/Enhancer/InputEnhancer.php||core-bundle/src/Routing/Enhancer/InputEnhancer.php": [
          "File: core-bundle/src/Routing/Enhancer/InputEnhancer.php -> core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: namespace Contao\\CoreBundle\\Routing\\Enhancer;",
          "15: use Contao\\Config;",
          "17: use Contao\\CoreBundle\\Framework\\ContaoFrameworkInterface;",
          "18: use Contao\\Input;",
          "19: use Contao\\PageModel;",
          "",
          "[Removed Lines]",
          "16: use Contao\\CoreBundle\\Framework\\Adapter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     private $framework;",
          "42:     {",
          "43:         $this->framework = $framework;",
          "46:     }",
          "",
          "[Removed Lines]",
          "34:     private $inputAdapter;",
          "39:     private $configAdapter;",
          "41:     public function __construct(ContaoFrameworkInterface $framework)",
          "44:         $this->inputAdapter = $framework->getAdapter(Input::class);",
          "45:         $this->configAdapter = $framework->getAdapter(Config::class);",
          "",
          "[Added Lines]",
          "33:     private $prependLocale;",
          "35:     public function __construct(ContaoFrameworkInterface $framework, bool $prependLocale)",
          "38:         $this->prependLocale = $prependLocale;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:         $this->framework->initialize();",
          "61:         }",
          "63:         if (empty($defaults['parameters'])) {",
          "64:             return $defaults;",
          "65:         }",
          "67:         $fragments = explode('/', substr($defaults['parameters'], 1));",
          "71:             array_unshift($fragments, 'auto_item');",
          "72:         }",
          "",
          "[Removed Lines]",
          "59:         if (!empty($defaults['_locale']) && $this->configAdapter->get('addLanguageToUrl')) {",
          "60:             $this->inputAdapter->setGet('language', $defaults['_locale']);",
          "70:         if ($this->configAdapter->get('useAutoItem') && 0 !== \\count($fragments) % 2) {",
          "",
          "[Added Lines]",
          "53:         $input = $this->framework->getAdapter(Input::class);",
          "55:         if ($this->prependLocale && !empty($defaults['_locale'])) {",
          "56:             $input->setGet('language', $defaults['_locale']);",
          "64:         $config = $this->framework->getAdapter(Config::class);",
          "68:         if ($config->get('useAutoItem') && 0 !== \\count($fragments) % 2) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:             if (",
          "88:                 isset($GLOBALS['TL_AUTO_ITEM'])",
          "90:                 && \\in_array($fragments[$i], $GLOBALS['TL_AUTO_ITEM'], true)",
          "91:             ) {",
          "92:                 throw new ResourceNotFoundException(",
          "",
          "[Removed Lines]",
          "89:                 && $this->configAdapter->get('useAutoItem')",
          "",
          "[Added Lines]",
          "87:                 && $config->get('useAutoItem')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:                 );",
          "95:             }",
          "98:         }",
          "100:         return $defaults;",
          "",
          "[Removed Lines]",
          "97:             $this->inputAdapter->setGet(urldecode($fragments[$i]), urldecode($fragments[$i + 1] ?? ''), true);",
          "",
          "[Added Lines]",
          "95:             $input->setGet(urldecode($fragments[$i]), urldecode($fragments[$i + 1] ?? ''), true);",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/Matcher/LegacyMatcher.php||core-bundle/src/Routing/Matcher/LegacyMatcher.php": [
          "File: core-bundle/src/Routing/Matcher/LegacyMatcher.php -> core-bundle/src/Routing/Matcher/LegacyMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: namespace Contao\\CoreBundle\\Routing\\Matcher;",
          "15: use Contao\\Config;",
          "17: use Contao\\CoreBundle\\Framework\\ContaoFrameworkInterface;",
          "18: use Contao\\Input;",
          "19: use Contao\\PageModel;",
          "",
          "[Removed Lines]",
          "16: use Contao\\CoreBundle\\Framework\\Adapter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     private $requestMatcher;",
          "53:     {",
          "54:         $this->framework = $framework;",
          "55:         $this->requestMatcher = $requestMatcher;",
          "59:     }",
          "",
          "[Removed Lines]",
          "40:     private $systemAdapter;",
          "45:     private $inputAdapter;",
          "50:     private $configAdapter;",
          "52:     public function __construct(ContaoFrameworkInterface $framework, RequestMatcherInterface $requestMatcher)",
          "56:         $this->systemAdapter = $framework->getAdapter(System::class);",
          "57:         $this->inputAdapter = $framework->getAdapter(Input::class);",
          "58:         $this->configAdapter = $framework->getAdapter(Config::class);",
          "",
          "[Added Lines]",
          "39:     private $urlSuffix;",
          "44:     private $prependLocale;",
          "46:     public function __construct(ContaoFrameworkInterface $framework, RequestMatcherInterface $requestMatcher, string $urlSuffix, bool $prependLocale)",
          "50:         $this->urlSuffix = $urlSuffix;",
          "51:         $this->prependLocale = $prependLocale;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:         $locale = null;",
          "75:         $fragments = null;",
          "78:             try {",
          "79:                 $match = $this->requestMatcher->matchRequest($request);",
          "80:                 $fragments = $this->createFragmentsFromMatch($match);",
          "",
          "[Removed Lines]",
          "77:         if ($this->configAdapter->get('folderUrl')) {",
          "",
          "[Added Lines]",
          "71:         $config = $this->framework->getAdapter(Config::class);",
          "73:         if ($config->get('folderUrl')) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:             $fragments = $this->createFragmentsFromPath($pathInfo);",
          "90:         }",
          "93:             if (null === $locale) {",
          "94:                 throw new ResourceNotFoundException('Locale is missing');",
          "95:             }",
          "98:         }",
          "100:         $fragments = $this->executeLegacyHook($fragments);",
          "",
          "[Removed Lines]",
          "92:         if ($this->configAdapter->get('addLanguageToUrl')) {",
          "97:             $this->inputAdapter->setGet('language', $locale);",
          "",
          "[Added Lines]",
          "88:         if ($this->prependLocale) {",
          "94:             $input = $this->framework->getAdapter(Input::class);",
          "95:             $input->setGet('language', $locale);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:         $parameters = $match['parameters'] ?? '';",
          "111:         if (!$page instanceof PageModel) {",
          "113:         }",
          "115:         if ('' === $parameters) {",
          "116:             return [$page->alias];",
          "117:         }",
          "119:         $fragments = array_merge([$page->alias], explode('/', substr($parameters, 1)));",
          "123:             array_splice($fragments, 1, 0, ['auto_item']);",
          "124:         }",
          "",
          "[Removed Lines]",
          "112:             throw new ResourceNotFoundException();",
          "122:         if ($this->configAdapter->get('useAutoItem') && 0 === \\count($fragments) % 2) {",
          "",
          "[Added Lines]",
          "110:             throw new ResourceNotFoundException('Resource not found');",
          "118:         $config = $this->framework->getAdapter(Config::class);",
          "122:         if ($config->get('useAutoItem') && 0 === \\count($fragments) % 2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:     private function createFragmentsFromPath(string $pathInfo): array",
          "130:     {",
          "131:         $fragments = explode('/', $pathInfo);",
          "135:             array_splice($fragments, 1, 0, ['auto_item']);",
          "136:         }",
          "",
          "[Removed Lines]",
          "134:         if ($this->configAdapter->get('useAutoItem') && 0 === \\count($fragments) % 2) {",
          "",
          "[Added Lines]",
          "132:         $config = $this->framework->getAdapter(Config::class);",
          "136:         if ($config->get('useAutoItem') && 0 === \\count($fragments) % 2) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:     private function executeLegacyHook(array $fragments): array",
          "142:     {",
          "143:         foreach ($GLOBALS['TL_HOOKS']['getPageIdFromUrl'] as $callback) {",
          "145:         }",
          "",
          "[Removed Lines]",
          "144:             $fragments = $this->systemAdapter->importStatic($callback[0])->{$callback[1]}($fragments);",
          "",
          "[Added Lines]",
          "146:         $system = $this->framework->getAdapter(System::class);",
          "149:             $fragments = $system->importStatic($callback[0])->{$callback[1]}($fragments);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "155:     private function createPathFromFragments(array $fragments, ?string $locale): string",
          "156:     {",
          "158:             unset($fragments[1]);",
          "159:         }",
          "164:             $pathInfo = $locale.'/'.$pathInfo;",
          "165:         }",
          "",
          "[Removed Lines]",
          "157:         if (isset($fragments[1]) && 'auto_item' === $fragments[1] && $this->configAdapter->get('useAutoItem')) {",
          "161:         $pathInfo = implode('/', $fragments).$this->configAdapter->get('urlSuffix');",
          "163:         if ($this->configAdapter->get('addLanguageToUrl')) {",
          "",
          "[Added Lines]",
          "163:         $config = $this->framework->getAdapter(Config::class);",
          "165:         if (isset($fragments[1]) && 'auto_item' === $fragments[1] && $config->get('useAutoItem')) {",
          "169:         $pathInfo = implode('/', $fragments).$this->urlSuffix;",
          "171:         if ($this->prependLocale) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "170:     private function parseSuffixAndLanguage(string $pathInfo, ?string &$locale): string",
          "171:     {",
          "175:         if (0 !== $suffixLength) {",
          "177:                 throw new ResourceNotFoundException('URL suffix does not match');",
          "178:             }",
          "",
          "[Removed Lines]",
          "172:         $urlSuffix = $this->configAdapter->get('urlSuffix');",
          "173:         $suffixLength = \\strlen($urlSuffix);",
          "176:             if (substr($pathInfo, -$suffixLength) !== $urlSuffix) {",
          "",
          "[Added Lines]",
          "180:         $suffixLength = \\strlen($this->urlSuffix);",
          "183:             if (substr($pathInfo, -$suffixLength) !== $this->urlSuffix) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "184:             $pathInfo = substr($pathInfo, 1);",
          "185:         }",
          "188:             $matches = [];",
          "190:             if (!preg_match('@^([a-z]{2}(-[A-Z]{2})?)/(.+)$@', $pathInfo, $matches)) {",
          "",
          "[Removed Lines]",
          "187:         if ($this->configAdapter->get('addLanguageToUrl')) {",
          "",
          "[Added Lines]",
          "194:         if ($this->prependLocale) {",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/RouteProvider.php||core-bundle/src/Routing/RouteProvider.php": [
          "File: core-bundle/src/Routing/RouteProvider.php -> core-bundle/src/Routing/RouteProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\Config;",
          "16: use Contao\\CoreBundle\\ContaoCoreBundle;",
          "18: use Contao\\CoreBundle\\Framework\\ContaoFrameworkInterface;",
          "19: use Contao\\Model;",
          "20: use Contao\\Model\\Collection;",
          "",
          "[Removed Lines]",
          "17: use Contao\\CoreBundle\\Framework\\Adapter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     private $database;",
          "53:     {",
          "54:         $this->framework = $framework;",
          "55:         $this->database = $database;",
          "58:     }",
          "",
          "[Removed Lines]",
          "45:     private $pageAdapter;",
          "50:     private $configAdapter;",
          "52:     public function __construct(ContaoFrameworkInterface $framework, Connection $database)",
          "56:         $this->pageAdapter = $framework->getAdapter(PageModel::class);",
          "57:         $this->configAdapter = $framework->getAdapter(Config::class);",
          "",
          "[Added Lines]",
          "44:     private $urlSuffix;",
          "49:     private $prependLocale;",
          "51:     public function __construct(ContaoFrameworkInterface $framework, Connection $database, string $urlSuffix, bool $prependLocale)",
          "55:         $this->urlSuffix = $urlSuffix;",
          "56:         $this->prependLocale = $prependLocale;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:             return new RouteCollection();",
          "71:         }",
          "79:             $this->addRoutesForRootPages($this->findRootPages(), $routes);",
          "81:             return $this->createCollectionForRoutes($routes, $request->getLanguages());",
          "",
          "[Removed Lines]",
          "73:         if (",
          "74:             '/' === $pathInfo",
          "75:             || ($this->configAdapter->get('addLanguageToUrl') && preg_match('@^/([a-z]{2}(-[A-Z]{2})?)/$@', $pathInfo))",
          "76:         ) {",
          "77:             $routes = [];",
          "",
          "[Added Lines]",
          "73:         $routes = [];",
          "75:         if ('/' === $pathInfo || ($this->prependLocale && preg_match('@^/([a-z]{2}(-[A-Z]{2})?)/$@', $pathInfo))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:             return new RouteCollection();",
          "88:         }",
          "91:         $candidates = $this->getAliasCandidates($pathInfo);",
          "92:         $pages = $this->findPages($candidates);",
          "",
          "[Removed Lines]",
          "90:         $routes = [];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:             throw new RouteNotFoundException('Route name does not match a page ID');",
          "110:         }",
          "115:         if (null === $page) {",
          "116:             throw new RouteNotFoundException(sprintf('Page ID \"%s\" not found', $ids[0]));",
          "117:         }",
          "119:         $this->addRoutesForPage($page, $routes);",
          "121:         return $routes[$name];",
          "",
          "[Removed Lines]",
          "112:         $routes = [];",
          "113:         $page = $this->pageAdapter->findByPk($ids[0]);",
          "",
          "[Added Lines]",
          "109:         $pageModel = $this->framework->getAdapter(PageModel::class);",
          "110:         $page = $pageModel->findByPk($ids[0]);",
          "116:         $routes = [];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:     {",
          "129:         $this->framework->initialize();",
          "131:         if (null === $names) {",
          "133:         } else {",
          "142:         }",
          "144:         if (!$pages instanceof Collection) {",
          "",
          "[Removed Lines]",
          "132:             $pages = $this->pageAdapter->findAll();",
          "134:             $ids = $this->getPageIdsFromNames($names);",
          "136:             if (empty($ids)) {",
          "137:                 return [];",
          "138:             }",
          "140:             $table = $this->pageAdapter->getTable();",
          "141:             $pages = $this->pageAdapter->findBy(\"$table.id IN (\".implode(',', $ids).')', []);",
          "",
          "[Added Lines]",
          "131:         $pageModel = $this->framework->getAdapter(PageModel::class);",
          "134:             $pages = $pageModel->findAll();",
          "136:             $pages = $pageModel->findMultipleByIds($this->getPageIdsFromNames($names));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "156:     private function removeSuffixAndLanguage(string $pathInfo): ?string",
          "157:     {",
          "161:         if (0 !== $suffixLength) {",
          "163:                 return null;",
          "164:             }",
          "",
          "[Removed Lines]",
          "158:         $urlSuffix = $this->configAdapter->get('urlSuffix');",
          "159:         $suffixLength = \\strlen($urlSuffix);",
          "162:             if (substr($pathInfo, -$suffixLength) !== $urlSuffix) {",
          "",
          "[Added Lines]",
          "153:         $suffixLength = \\strlen($this->urlSuffix);",
          "156:             if (substr($pathInfo, -$suffixLength) !== $this->urlSuffix) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "170:             $pathInfo = substr($pathInfo, 1);",
          "171:         }",
          "174:             $matches = [];",
          "176:             if (!preg_match('@^([a-z]{2}(-[A-Z]{2})?)/(.+)$@', $pathInfo, $matches)) {",
          "",
          "[Removed Lines]",
          "173:         if ($this->configAdapter->get('addLanguageToUrl')) {",
          "",
          "[Added Lines]",
          "167:         if ($this->prependLocale) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "196:             return [$pathInfo];",
          "197:         }",
          "200:             return [substr($pathInfo, 0, $pos)];",
          "201:         }",
          "",
          "[Removed Lines]",
          "199:         if (!$this->configAdapter->get('folderUrl')) {",
          "",
          "[Added Lines]",
          "194:         $config = $this->framework->getAdapter(Config::class);",
          "196:         if (!$config->get('folderUrl')) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "254:         $defaults = $this->getRouteDefaults($page);",
          "255:         $defaults['parameters'] = '';",
          "256:         $requirements = ['parameters' => '(/.+)?'];",
          "261:             $path = '/{_locale}'.$path;",
          "262:             $requirements['_locale'] = $page->rootLanguage;",
          "263:         }",
          "266:             $path,",
          "267:             $defaults,",
          "268:             $requirements,",
          "",
          "[Removed Lines]",
          "257:         $path = sprintf('/%s{parameters}%s', $page->alias ?: $page->id, $this->configAdapter->get('urlSuffix'));",
          "258:         $table = $this->pageAdapter->getTable();",
          "260:         if ($this->configAdapter->get('addLanguageToUrl')) {",
          "265:         $routes[$table.'.'.$page->id] = new Route(",
          "",
          "[Added Lines]",
          "255:         $path = sprintf('/%s{parameters}%s', $page->alias ?: $page->id, $this->urlSuffix);",
          "257:         if ($this->prependLocale) {",
          "262:         $routes['tl_page.'.$page->id] = new Route(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "285:         $path = '/';",
          "286:         $requirements = [];",
          "287:         $defaults = $this->getRouteDefaults($page);",
          "291:             $path = '/{_locale}'.$path;",
          "292:             $requirements['_locale'] = $page->rootLanguage;",
          "293:         }",
          "296:             $path,",
          "297:             $defaults,",
          "298:             $requirements,",
          "",
          "[Removed Lines]",
          "288:         $table = $this->pageAdapter->getTable();",
          "290:         if ($this->configAdapter->get('addLanguageToUrl')) {",
          "295:         $routes[$table.'.'.$page->id.'.root'] = new Route(",
          "",
          "[Added Lines]",
          "286:         if ($this->prependLocale) {",
          "291:         $routes['tl_page.'.$page->id.'.root'] = new Route(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "301:             null",
          "302:         );",
          "319:         }",
          "320:     }",
          "",
          "[Removed Lines]",
          "304:         if ($page->rootIsFallback && $this->configAdapter->get('addLanguageToUrl')) {",
          "305:             if (!$this->configAdapter->get('doNotRedirectEmpty')) {",
          "306:                 $defaults['_controller'] = 'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction';",
          "307:                 $defaults['path'] = '/'.$page->language.'/';",
          "308:                 $defaults['permanent'] = true;",
          "309:             }",
          "311:             $routes[$table.'.'.$page->id.'.fallback'] = new Route(",
          "312:                 '/',",
          "313:                 $defaults,",
          "314:                 [],",
          "315:                 [],",
          "316:                 $page->domain,",
          "317:                 null",
          "318:             );",
          "",
          "[Added Lines]",
          "300:         if (!$page->rootIsFallback || !$this->prependLocale) {",
          "301:             return;",
          "302:         }",
          "305:         $config = $this->framework->getAdapter(Config::class);",
          "307:         if (!$config->get('doNotRedirectEmpty')) {",
          "308:             $defaults['_controller'] = 'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction';",
          "309:             $defaults['path'] = '/'.$page->language.'/';",
          "310:             $defaults['permanent'] = true;",
          "313:         $routes['tl_page.'.$page->id.'.fallback'] = new Route(",
          "314:             '/',",
          "315:             $defaults,",
          "316:             [],",
          "317:             [],",
          "318:             $page->domain,",
          "319:             null",
          "320:         );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "339:     private function getPageIdsFromNames(array $names): array",
          "340:     {",
          "341:         $ids = [];",
          "344:         foreach ($names as $name) {",
          "346:                 continue;",
          "347:             }",
          "",
          "[Removed Lines]",
          "342:         $table = $this->pageAdapter->getTable();",
          "345:             if (0 !== strncmp($name, $table.'.', 8)) {",
          "",
          "[Added Lines]",
          "345:             if (0 !== strncmp($name, 'tl_page.', 8)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "444:             }",
          "445:         }",
          "448:         $conditions = [];",
          "450:         if (!empty($ids)) {",
          "452:         }",
          "454:         if (!empty($aliases)) {",
          "456:         }",
          "460:         if ($pages instanceof Collection) {",
          "461:             return $pages->getModels();",
          "",
          "[Removed Lines]",
          "447:         $table = $this->pageAdapter->getTable();",
          "451:             $conditions[] = $table.'.id IN ('.implode(',', $ids).')';",
          "455:             $conditions[] = $table.'.alias IN ('.implode(',', $aliases).')';",
          "458:         $pages = $this->pageAdapter->findBy([implode(' OR ', $conditions)], []);",
          "",
          "[Added Lines]",
          "450:             $conditions[] = 'tl_page.id IN ('.implode(',', $ids).')';",
          "454:             $conditions[] = 'tl_page.alias IN ('.implode(',', $aliases).')';",
          "458:         $pageModel = $this->framework->getAdapter(PageModel::class);",
          "459:         $pages = $pageModel->findBy([implode(' OR ', $conditions)], []);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "473:             !empty($GLOBALS['TL_HOOKS']['getRootPageFromUrl'])",
          "474:             && \\is_array($GLOBALS['TL_HOOKS']['getRootPageFromUrl'])",
          "475:         ) {",
          "479:             foreach ($GLOBALS['TL_HOOKS']['getRootPageFromUrl'] as $callback) {",
          "482:                 if ($page instanceof PageModel) {",
          "483:                     return [$page];",
          "",
          "[Removed Lines]",
          "477:             $systemAdapter = $this->framework->getAdapter(System::class);",
          "480:                 $page = $systemAdapter->importStatic($callback[0])->{$callback[1]}();",
          "",
          "[Added Lines]",
          "478:             $system = $this->framework->getAdapter(System::class);",
          "481:                 $page = $system->importStatic($callback[0])->{$callback[1]}();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "485:             }",
          "486:         }",
          "492:         if ($pages instanceof Collection) {",
          "493:             return $pages->getModels();",
          "",
          "[Removed Lines]",
          "489:         $table = $this->pageAdapter->getTable();",
          "490:         $pages = $this->pageAdapter->findBy([\"$table.type='root' OR $table.alias='index' OR $table.alias='/'\"], []);",
          "",
          "[Added Lines]",
          "490:         $pageModel = $this->framework->getAdapter(PageModel::class);",
          "493:         $pages = $pageModel->findBy([\"tl_page.type='root' OR tl_page.alias='index' OR tl_page.alias='/'\"], []);",
          "",
          "---------------"
        ],
        "core-bundle/tests/Contao/TemplateTest.php||core-bundle/tests/Contao/TemplateTest.php": [
          "File: core-bundle/tests/Contao/TemplateTest.php -> core-bundle/tests/Contao/TemplateTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:         $container = $this->mockContainer();",
          "222:         $container->set('assets.packages', $packages);",
          "226:         $template = new FrontendTemplate();",
          "227:         $template->asset('/path/to/asset', 'package_name');",
          "",
          "[Removed Lines]",
          "224:         \\System::setContainer($container);",
          "",
          "[Added Lines]",
          "224:         System::setContainer($container);",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ConfigurationTest.php||core-bundle/tests/DependencyInjection/ConfigurationTest.php": [
          "File: core-bundle/tests/DependencyInjection/ConfigurationTest.php -> core-bundle/tests/DependencyInjection/ConfigurationTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     {",
          "32:         parent::setUp();",
          "35:     }",
          "37:     public function testAddsTheImagineService(): void",
          "",
          "[Removed Lines]",
          "34:         $this->configuration = new Configuration(false, $this->getTempDir(), 'en');",
          "",
          "[Added Lines]",
          "34:         $this->configuration = new Configuration($this->getTempDir(), 'en');",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: use Contao\\CoreBundle\\Picker\\PagePickerProvider;",
          "76: use Contao\\CoreBundle\\Picker\\PickerBuilder;",
          "77: use Contao\\CoreBundle\\Referer\\TokenGenerator;",
          "78: use Contao\\CoreBundle\\Routing\\FrontendLoader;",
          "79: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
          "80: use Contao\\CoreBundle\\Routing\\UrlGenerator;",
          "81: use Contao\\CoreBundle\\Security\\Authentication\\AuthenticationEntryPoint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: use Contao\\CoreBundle\\Routing\\Enhancer\\InputEnhancer;",
          "80: use Contao\\CoreBundle\\Routing\\LegacyRouteProvider;",
          "81: use Contao\\CoreBundle\\Routing\\Matcher\\LegacyMatcher;",
          "82: use Contao\\CoreBundle\\Routing\\Matcher\\PublishingFilter;",
          "83: use Contao\\CoreBundle\\Routing\\RouteProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: use Contao\\ImagineSvg\\Imagine as ImagineSvg;",
          "105: use Knp\\Menu\\Matcher\\Matcher;",
          "106: use Knp\\Menu\\Renderer\\ListRenderer;",
          "107: use Symfony\\Component\\Config\\FileLocator;",
          "108: use Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;",
          "109: use Symfony\\Component\\DependencyInjection\\ContainerBuilder;",
          "110: use Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBag;",
          "111: use Symfony\\Component\\DependencyInjection\\ServiceLocator;",
          "112: use Symfony\\Component\\HttpFoundation\\RequestMatcher;",
          "113: use Symfony\\Component\\Security\\Csrf\\CsrfTokenManager;",
          "115: class ContaoCoreExtensionTest extends TestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: use Symfony\\Cmf\\Component\\Routing\\DynamicRouter;",
          "113: use Symfony\\Cmf\\Component\\Routing\\NestedMatcher\\NestedMatcher;",
          "114: use Symfony\\Cmf\\Component\\Routing\\NestedMatcher\\UrlMatcher;",
          "115: use Symfony\\Cmf\\Component\\Routing\\ProviderBasedGenerator;",
          "122: use Symfony\\Component\\Routing\\RequestContext;",
          "123: use Symfony\\Component\\Routing\\RouteCollection;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "857:         $this->assertSame(ContaoFramework::class, $definition->getClass());",
          "858:         $this->assertTrue($definition->isPublic());",
          "865:         $conditionals = $definition->getInstanceofConditionals();",
          "",
          "[Removed Lines]",
          "859:         $this->assertNull($definition->getArgument(0));",
          "860:         $this->assertSame('router', (string) $definition->getArgument(1));",
          "861:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(2));",
          "862:         $this->assertSame('%kernel.project_dir%', (string) $definition->getArgument(3));",
          "863:         $this->assertSame('%contao.error_level%', (string) $definition->getArgument(4));",
          "",
          "[Added Lines]",
          "870:         $this->assertSame('router', (string) $definition->getArgument(0));",
          "871:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
          "872:         $this->assertSame('%kernel.project_dir%', (string) $definition->getArgument(2));",
          "873:         $this->assertSame('%contao.error_level%', (string) $definition->getArgument(3));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1221:         $this->assertSame('%contao.resources_paths%', $definition->getArgument(0));",
          "1222:     }",
          "1224:     public function testRegistersTheRoutingFrontendLoader(): void",
          "1225:     {",
          "1226:         $this->assertTrue($this->container->has('contao.routing.frontend_loader'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234:     public function testRegistersTheRoutingBackendMatcher(): void",
          "1235:     {",
          "1236:         $this->assertTrue($this->container->has('contao.routing.backend_matcher'));",
          "1238:         $definition = $this->container->getDefinition('contao.routing.backend_matcher');",
          "1240:         $this->assertSame(RequestMatcher::class, $definition->getClass());",
          "1241:         $this->assertTrue($definition->isPrivate());",
          "1243:         $methodCalls = $definition->getMethodCalls();",
          "1245:         $this->assertSame('matchAttribute', $methodCalls[0][0]);",
          "1246:         $this->assertSame(['_scope', 'backend'], $methodCalls[0][1]);",
          "1247:     }",
          "1249:     public function testRegistersTheRoutingDummyCollection(): void",
          "1250:     {",
          "1251:         $this->assertTrue($this->container->has('contao.routing.dummy_collection'));",
          "1253:         $definition = $this->container->getDefinition('contao.routing.dummy_collection');",
          "1255:         $this->assertSame(RouteCollection::class, $definition->getClass());",
          "1256:         $this->assertTrue($definition->isPrivate());",
          "1257:     }",
          "1259:     public function testRegistersTheRoutingDummyContext(): void",
          "1260:     {",
          "1261:         $this->assertTrue($this->container->has('contao.routing.dummy_context'));",
          "1263:         $definition = $this->container->getDefinition('contao.routing.dummy_context');",
          "1265:         $this->assertSame(RequestContext::class, $definition->getClass());",
          "1266:         $this->assertTrue($definition->isPrivate());",
          "1267:     }",
          "1269:     public function testRegistersTheRoutingFinalMatcher(): void",
          "1270:     {",
          "1271:         $this->assertTrue($this->container->has('contao.routing.final_matcher'));",
          "1273:         $definition = $this->container->getDefinition('contao.routing.final_matcher');",
          "1275:         $this->assertSame(UrlMatcher::class, $definition->getClass());",
          "1276:         $this->assertTrue($definition->isPrivate());",
          "1277:         $this->assertSame('contao.routing.dummy_collection', (string) $definition->getArgument(0));",
          "1278:         $this->assertSame('contao.routing.dummy_context', (string) $definition->getArgument(1));",
          "1279:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1230:         $this->assertSame(FrontendLoader::class, $definition->getClass());",
          "1231:         $this->assertTrue($definition->isPrivate());",
          "1234:         $tags = $definition->getTags();",
          "1236:         $this->assertArrayHasKey('routing.loader', $tags);",
          "1237:     }",
          "1240:     {",
          "1250:     }",
          "1253:     {",
          "1262:     }",
          "1265:     {",
          "1271:         $this->assertTrue($definition->isPrivate());",
          "1273:         $methodCalls = $definition->getMethodCalls();",
          "1277:     }",
          "1280:     {",
          "1286:         $this->assertTrue($definition->isPrivate());",
          "1288:         $methodCalls = $definition->getMethodCalls();",
          "1292:     }",
          "1294:     public function testRegistersTheSecurityAuthenticationFailureHandler(): void",
          "",
          "[Removed Lines]",
          "1232:         $this->assertSame('%contao.prepend_locale%', $definition->getArgument(0));",
          "1239:     public function testRegistersTheRoutingUrlGenerator(): void",
          "1241:         $this->assertTrue($this->container->has('contao.routing.url_generator'));",
          "1243:         $definition = $this->container->getDefinition('contao.routing.url_generator');",
          "1245:         $this->assertSame(UrlGenerator::class, $definition->getClass());",
          "1246:         $this->assertTrue($definition->isPublic());",
          "1247:         $this->assertSame('router', (string) $definition->getArgument(0));",
          "1248:         $this->assertSame('contao.framework', (string) $definition->getArgument(1));",
          "1249:         $this->assertSame('%contao.prepend_locale%', (string) $definition->getArgument(2));",
          "1252:     public function testRegistersTheRoutingScopeMatcher(): void",
          "1254:         $this->assertTrue($this->container->has('contao.routing.scope_matcher'));",
          "1256:         $definition = $this->container->getDefinition('contao.routing.scope_matcher');",
          "1258:         $this->assertSame(ScopeMatcher::class, $definition->getClass());",
          "1259:         $this->assertTrue($definition->isPublic());",
          "1260:         $this->assertSame('contao.routing.backend_matcher', (string) $definition->getArgument(0));",
          "1261:         $this->assertSame('contao.routing.frontend_matcher', (string) $definition->getArgument(1));",
          "1264:     public function testRegistersTheRoutingBackendMatcher(): void",
          "1266:         $this->assertTrue($this->container->has('contao.routing.backend_matcher'));",
          "1268:         $definition = $this->container->getDefinition('contao.routing.backend_matcher');",
          "1270:         $this->assertSame(RequestMatcher::class, $definition->getClass());",
          "1275:         $this->assertSame('matchAttribute', $methodCalls[0][0]);",
          "1276:         $this->assertSame(['_scope', 'backend'], $methodCalls[0][1]);",
          "1279:     public function testRegistersTheRoutingFrontendMatcher(): void",
          "1281:         $this->assertTrue($this->container->has('contao.routing.frontend_matcher'));",
          "1283:         $definition = $this->container->getDefinition('contao.routing.frontend_matcher');",
          "1285:         $this->assertSame(RequestMatcher::class, $definition->getClass());",
          "1290:         $this->assertSame('matchAttribute', $methodCalls[0][0]);",
          "1291:         $this->assertSame(['_scope', 'frontend'], $methodCalls[0][1]);",
          "",
          "[Added Lines]",
          "1289:         $this->assertSame('%contao.prepend_locale%', (string) $definition->getArgument(0));",
          "1296:     public function testRegistersTheRoutingFrontendMatcher(): void",
          "1298:         $this->assertTrue($this->container->has('contao.routing.frontend_matcher'));",
          "1300:         $definition = $this->container->getDefinition('contao.routing.frontend_matcher');",
          "1302:         $this->assertSame(RequestMatcher::class, $definition->getClass());",
          "1303:         $this->assertTrue($definition->isPrivate());",
          "1305:         $methodCalls = $definition->getMethodCalls();",
          "1307:         $this->assertSame('matchAttribute', $methodCalls[0][0]);",
          "1308:         $this->assertSame(['_scope', 'frontend'], $methodCalls[0][1]);",
          "1311:     public function testRegistersTheRoutingInputEnhancer(): void",
          "1313:         $this->assertTrue($this->container->has('contao.routing.input_enhancer'));",
          "1315:         $definition = $this->container->getDefinition('contao.routing.input_enhancer');",
          "1317:         $this->assertSame(InputEnhancer::class, $definition->getClass());",
          "1318:         $this->assertTrue($definition->isPrivate());",
          "1319:         $this->assertSame('contao.framework', (string) $definition->getArgument(0));",
          "1320:         $this->assertSame('%contao.prepend_locale%', (string) $definition->getArgument(1));",
          "1323:     public function testRegistersTheRoutingLegacyMatcher(): void",
          "1325:         $this->assertTrue($this->container->has('contao.routing.legacy_matcher'));",
          "1327:         $definition = $this->container->getDefinition('contao.routing.legacy_matcher');",
          "1329:         $this->assertSame(LegacyMatcher::class, $definition->getClass());",
          "1330:         $this->assertTrue($definition->isPrivate());",
          "1331:         $this->assertSame('contao.routing.nested_matcher', $definition->getDecoratedService()[0]);",
          "1332:         $this->assertSame('contao.framework', (string) $definition->getArgument(0));",
          "1333:         $this->assertSame('contao.routing.legacy_matcher.inner', (string) $definition->getArgument(1));",
          "1334:         $this->assertSame('%contao.url_suffix%', (string) $definition->getArgument(2));",
          "1335:         $this->assertSame('%contao.prepend_locale%', (string) $definition->getArgument(3));",
          "1336:     }",
          "1338:     public function testRegistersTheRoutingLegacyRouteProvider(): void",
          "1339:     {",
          "1340:         $this->assertTrue($this->container->has('contao.routing.legacy_route_provider'));",
          "1342:         $definition = $this->container->getDefinition('contao.routing.legacy_route_provider');",
          "1344:         $this->assertSame(LegacyRouteProvider::class, $definition->getClass());",
          "1346:         $this->assertSame('contao.routing.frontend_loader', (string) $definition->getArgument(0));",
          "1347:         $this->assertSame('contao.routing.legacy_route_provider.inner', (string) $definition->getArgument(1));",
          "1348:     }",
          "1350:     public function testRegistersTheRoutingNestedMatcher(): void",
          "1351:     {",
          "1352:         $this->assertTrue($this->container->has('contao.routing.nested_matcher'));",
          "1354:         $definition = $this->container->getDefinition('contao.routing.nested_matcher');",
          "1356:         $this->assertSame(NestedMatcher::class, $definition->getClass());",
          "1357:         $this->assertTrue($definition->isPublic());",
          "1358:         $this->assertSame('contao.routing.route_provider', (string) $definition->getArgument(0));",
          "1359:         $this->assertSame('contao.routing.final_matcher', (string) $definition->getArgument(1));",
          "1363:         $this->assertSame('addRouteFilter', $methodCalls[0][0]);",
          "1364:         $this->assertSame('contao.routing.publishing_filter', (string) $methodCalls[0][1][0]);",
          "1367:     public function testRegistersTheRoutingPageRouter(): void",
          "1369:         $this->assertTrue($this->container->has('contao.routing.page_router'));",
          "1371:         $definition = $this->container->getDefinition('contao.routing.page_router');",
          "1373:         $this->assertSame(DynamicRouter::class, $definition->getClass());",
          "1375:         $this->assertSame('router.request_context', (string) $definition->getArgument(0));",
          "1376:         $this->assertSame('contao.routing.nested_matcher', (string) $definition->getArgument(1));",
          "1377:         $this->assertSame('contao.routing.route_generator', (string) $definition->getArgument(2));",
          "1378:         $this->assertSame('', (string) $definition->getArgument(3));",
          "1379:         $this->assertSame('event_dispatcher', (string) $definition->getArgument(4));",
          "1380:         $this->assertSame('contao.routing.route_provider', (string) $definition->getArgument(5));",
          "1384:         $this->assertSame('addRouteEnhancer', $methodCalls[0][0]);",
          "1385:         $this->assertSame('contao.routing.input_enhancer', (string) $methodCalls[0][1][0]);",
          "1387:         $tags = $definition->getTags();",
          "1389:         $this->assertArrayHasKey('router', $tags);",
          "1390:         $this->assertSame(20, $tags['router'][0]['priority']);",
          "1391:     }",
          "1393:     public function testRegistersTheRoutingPublishingFilter(): void",
          "1394:     {",
          "1395:         $this->assertTrue($this->container->has('contao.routing.publishing_filter'));",
          "1397:         $definition = $this->container->getDefinition('contao.routing.publishing_filter');",
          "1399:         $this->assertSame(PublishingFilter::class, $definition->getClass());",
          "1400:         $this->assertTrue($definition->isPrivate());",
          "1401:         $this->assertSame('contao.security.token_checker', (string) $definition->getArgument(0));",
          "1402:     }",
          "1404:     public function testRegistersTheRoutingRouteGenerator(): void",
          "1405:     {",
          "1406:         $this->assertTrue($this->container->has('contao.routing.route_generator'));",
          "1408:         $definition = $this->container->getDefinition('contao.routing.route_generator');",
          "1410:         $this->assertSame(ProviderBasedGenerator::class, $definition->getClass());",
          "1411:         $this->assertTrue($definition->isPrivate());",
          "1412:         $this->assertSame('contao.routing.route_provider', (string) $definition->getArgument(0));",
          "1413:         $this->assertSame('logger', (string) $definition->getArgument(1));",
          "1414:     }",
          "1416:     public function testRegistersTheRoutingRouteProvider(): void",
          "1417:     {",
          "1418:         $this->assertTrue($this->container->has('contao.routing.route_provider'));",
          "1420:         $definition = $this->container->getDefinition('contao.routing.route_provider');",
          "1422:         $this->assertSame(RouteProvider::class, $definition->getClass());",
          "1423:         $this->assertTrue($definition->isPrivate());",
          "1424:         $this->assertSame('contao.framework', (string) $definition->getArgument(0));",
          "1425:         $this->assertSame('database_connection', (string) $definition->getArgument(1));",
          "1426:         $this->assertSame('%contao.url_suffix%', (string) $definition->getArgument(2));",
          "1427:         $this->assertSame('%contao.prepend_locale%', (string) $definition->getArgument(3));",
          "1428:     }",
          "1430:     public function testRegistersTheRoutingScopeMatcher(): void",
          "1431:     {",
          "1432:         $this->assertTrue($this->container->has('contao.routing.scope_matcher'));",
          "1434:         $definition = $this->container->getDefinition('contao.routing.scope_matcher');",
          "1436:         $this->assertSame(ScopeMatcher::class, $definition->getClass());",
          "1437:         $this->assertTrue($definition->isPublic());",
          "1438:         $this->assertSame('contao.routing.backend_matcher', (string) $definition->getArgument(0));",
          "1439:         $this->assertSame('contao.routing.frontend_matcher', (string) $definition->getArgument(1));",
          "1440:     }",
          "1442:     public function testRegistersTheRoutingUrlGenerator(): void",
          "1443:     {",
          "1444:         $this->assertTrue($this->container->has('contao.routing.url_generator'));",
          "1446:         $definition = $this->container->getDefinition('contao.routing.url_generator');",
          "1448:         $this->assertSame(UrlGenerator::class, $definition->getClass());",
          "1449:         $this->assertTrue($definition->isPublic());",
          "1450:         $this->assertSame('router', (string) $definition->getArgument(0));",
          "1451:         $this->assertSame('contao.framework', (string) $definition->getArgument(1));",
          "1452:         $this->assertSame('%contao.prepend_locale%', (string) $definition->getArgument(2));",
          "",
          "---------------"
        ],
        "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
          "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:         $request->request->set('REQUEST_TOKEN', 'invalid');",
          "340:         $framework = new ContaoFramework(",
          "342:             $this->mockRouter('/contao/login'),",
          "343:             $this->mockScopeMatcher(),",
          "344:             $this->getTempDir(),",
          "",
          "[Removed Lines]",
          "341:             null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:         $request->headers->set('X-Requested-With', 'XMLHttpRequest');",
          "378:         $framework = new ContaoFramework(",
          "380:             $this->mockRouter('/contao/login'),",
          "381:             $this->mockScopeMatcher(),",
          "382:             $this->getTempDir(),",
          "",
          "[Removed Lines]",
          "379:             null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:         $request->request->set('REQUEST_TOKEN', 'foobar');",
          "416:         $framework = new ContaoFramework(",
          "418:             $this->mockRouter('/contao/login'),",
          "419:             $this->mockScopeMatcher(),",
          "420:             $this->getTempDir(),",
          "",
          "[Removed Lines]",
          "417:             null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458:         $request->attributes->set('_route', 'dummy');",
          "460:         $framework = new ContaoFramework(",
          "462:             $this->mockRouter('/contao/login'),",
          "463:             $this->mockScopeMatcher(),",
          "464:             $this->getTempDir(),",
          "",
          "[Removed Lines]",
          "461:             null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:         $request->attributes->set('_route', $route);",
          "497:         $framework = new ContaoFramework(",
          "499:             $this->mockRouter('/contao/login'),",
          "500:             $this->mockScopeMatcher(),",
          "501:             $this->getTempDir(),",
          "",
          "[Removed Lines]",
          "498:             null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "749:     private function mockFramework(RouterInterface $router = null, Request $request = null, ScopeMatcher $scopeMatcher = null): ContaoFramework",
          "750:     {",
          "751:         $framework = new ContaoFramework(",
          "753:             $router ?? $this->mockRouter('/'),",
          "754:             $scopeMatcher ?? $this->mockScopeMatcher(),",
          "755:             $this->getTempDir(),",
          "",
          "[Removed Lines]",
          "752:             null,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/tests/Functional/RoutingTest.php||core-bundle/tests/Functional/RoutingTest.php": [
          "File: core-bundle/tests/Functional/RoutingTest.php -> core-bundle/tests/Functional/RoutingTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:         ];",
          "909:     }",
          "915:     {",
          "916:         static::getConnection()->exec('TRUNCATE tl_page');",
          "",
          "[Removed Lines]",
          "914:     public function testRendersNotRootPageFoundWithoutPageEntries(): void",
          "",
          "[Added Lines]",
          "911:     public function testThrowsANotRootPageFoundExceptionsIfThereAreNoPages(): void",
          "",
          "---------------"
        ],
        "core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php||core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php": [
          "File: core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php -> core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: namespace Contao\\CoreBundle\\Tests\\Routing\\Enhancer;",
          "15: use Contao\\Config;",
          "18: use Contao\\CoreBundle\\Routing\\Enhancer\\InputEnhancer;",
          "19: use Contao\\CoreBundle\\Tests\\TestCase;",
          "20: use Contao\\Input;",
          "21: use Contao\\PageModel;",
          "23: use Symfony\\Component\\HttpFoundation\\Request;",
          "24: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
          "26: class InputEnhancerTest extends TestCase",
          "27: {",
          "28:     protected function setUp(): void",
          "29:     {",
          "30:         parent::setUp();",
          "",
          "[Removed Lines]",
          "16: use Contao\\CoreBundle\\Framework\\Adapter;",
          "17: use Contao\\CoreBundle\\Framework\\ContaoFrameworkInterface;",
          "22: use PHPUnit\\Framework\\MockObject\\MockObject;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:             ->method('initialize')",
          "41:         ;",
          "44:         $enhancer->enhance([], $this->createMock(Request::class));",
          "45:     }",
          "51:     {",
          "52:         $input = $this->mockAdapter(['setGet']);",
          "53:         $input",
          "55:             ->method('setGet')",
          "56:             ->with('language', $locale)",
          "57:         ;",
          "61:         $defaults = [",
          "62:             'pageModel' => $this->createMock(PageModel::class),",
          "63:             '_locale' => $locale,",
          "64:         ];",
          "67:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "68:     }",
          "74:     {",
          "75:         return [",
          "76:             [false, 'en'],",
          "",
          "[Removed Lines]",
          "43:         $enhancer = new InputEnhancer($framework);",
          "50:     public function testAddsLocaleToInputIfEnabled(bool $addLanguageToUrl, string $locale): void",
          "54:             ->expects($addLanguageToUrl ? $this->once() : $this->never())",
          "59:         $framework = $this->mockContaoFrameworkWithInputAndConfig($input, $addLanguageToUrl);",
          "66:         $enhancer = new InputEnhancer($framework);",
          "73:     public function localeInUrlProvider(): array",
          "",
          "[Added Lines]",
          "43:         $enhancer = new InputEnhancer($framework, false);",
          "50:     public function testAddsLocaleToInputIfEnabled(bool $prependLocale, string $locale): void",
          "54:             ->expects($prependLocale ? $this->once() : $this->never())",
          "59:         $framework = $this->mockContaoFramework([Input::class => $input]);",
          "66:         $enhancer = new InputEnhancer($framework, $prependLocale);",
          "73:     public function getLocales(): array",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:             ->method('setGet')",
          "89:         ;",
          "93:         $defaults = [",
          "94:             'pageModel' => $this->createMock(PageModel::class),",
          "95:         ];",
          "98:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "99:     }",
          "104:     public function testAddsParametersToInput(string $parameters, bool $useAutoItem, array ...$setters): void",
          "105:     {",
          "",
          "[Removed Lines]",
          "91:         $framework = $this->mockContaoFrameworkWithInputAndConfig($input, true);",
          "97:         $enhancer = new InputEnhancer($framework);",
          "",
          "[Added Lines]",
          "91:         $framework = $this->mockContaoFramework([Input::class => $input]);",
          "97:         $enhancer = new InputEnhancer($framework, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:             ->withConsecutive(...$setters)",
          "119:         ;",
          "123:         $defaults = [",
          "124:             'pageModel' => $this->createMock(PageModel::class),",
          "125:             'parameters' => $parameters,",
          "126:         ];",
          "129:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "130:     }",
          "136:     {",
          "137:         return [",
          "138:             ['/foo/bar', false, ['foo', 'bar']],",
          "",
          "[Removed Lines]",
          "121:         $framework = $this->mockContaoFrameworkWithInputAndConfig($input, false, $useAutoItem);",
          "128:         $enhancer = new InputEnhancer($framework);",
          "135:     public function parameterProvider(): array",
          "",
          "[Added Lines]",
          "121:         $adapters = [",
          "122:             Input::class => $input,",
          "123:             Config::class => $this->mockConfiguredAdapter(['get' => $useAutoItem]),",
          "124:         ];",
          "126:         $framework = $this->mockContaoFramework($adapters);",
          "133:         $enhancer = new InputEnhancer($framework, false);",
          "140:     public function getParameters(): array",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:     public function testThrowsExceptionIfParameterIsInQuery(): void",
          "149:     {",
          "152:         $defaults = [",
          "153:             'pageModel' => $this->createMock(PageModel::class),",
          "",
          "[Removed Lines]",
          "150:         $framework = $this->mockContaoFrameworkWithInputAndConfig();",
          "",
          "[Added Lines]",
          "155:         $framework = $this->mockContaoFramework();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:         $_GET = ['foo' => 'baz'];",
          "159:         $this->expectException(ResourceNotFoundException::class);",
          "160:         $this->expectExceptionMessage('Duplicate parameter \"foo\" in path');",
          "163:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "164:     }",
          "166:     public function testThrowsExceptionOnDuplicateAutoItem(): void",
          "167:     {",
          "170:         $defaults = [",
          "171:             'pageModel' => $this->createMock(PageModel::class),",
          "",
          "[Removed Lines]",
          "162:         $enhancer = new InputEnhancer($framework);",
          "168:         $framework = $this->mockContaoFrameworkWithInputAndConfig(null, false, true);",
          "",
          "[Added Lines]",
          "164:         $enhancer = new InputEnhancer($framework, false);",
          "174:         $input = $this->mockAdapter(['setGet']);",
          "175:         $input",
          "176:             ->expects($this->once())",
          "177:             ->method('setGet')",
          "178:             ->with('auto_item', 'foo')",
          "179:         ;",
          "181:         $framework = $this->mockContaoFramework([Input::class => $input]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "175:         $GLOBALS['TL_AUTO_ITEM'] = ['bar'];",
          "177:         $this->expectException(ResourceNotFoundException::class);",
          "178:         $this->expectExceptionMessage('\"bar\" is an auto_item keyword (duplicate content)');",
          "181:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "182:     }",
          "219: }",
          "",
          "[Removed Lines]",
          "180:         $enhancer = new InputEnhancer($framework);",
          "187:     private function mockContaoFrameworkWithInputAndConfig(Adapter $input = null, bool $addLanguageToUrl = false, bool $useAutoItem = false): ContaoFrameworkInterface",
          "188:     {",
          "189:         $config = $this->mockAdapter(['get']);",
          "190:         $config",
          "191:             ->method('get')",
          "192:             ->willReturnCallback(",
          "193:                 function ($param) use ($addLanguageToUrl, $useAutoItem) {",
          "194:                     if ('addLanguageToUrl' === $param) {",
          "195:                         return $addLanguageToUrl;",
          "196:                     }",
          "198:                     if ('useAutoItem' === $param) {",
          "199:                         return $useAutoItem;",
          "200:                     }",
          "202:                     return null;",
          "203:                 }",
          "204:             )",
          "205:         ;",
          "207:         if (null === $input) {",
          "208:             $input = $this->mockAdapter(['get', 'setGet', 'post', 'setPost']);",
          "209:         }",
          "211:         $framework = $this->mockContaoFramework([Input::class => $input, Config::class => $config]);",
          "212:         $framework",
          "213:             ->expects($this->once())",
          "214:             ->method('initialize')",
          "215:         ;",
          "217:         return $framework;",
          "218:     }",
          "",
          "[Added Lines]",
          "190:         $enhancer = new InputEnhancer($framework, false);",
          "",
          "---------------"
        ],
        "core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php||core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php": [
          "File: core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php -> core-bundle/tests/Routing/Matcher/LegacyMatcherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     {",
          "36:         unset($GLOBALS['TL_HOOKS']['getPageIdFromUrl']);",
          "44:         $matcher = new LegacyMatcher(",
          "47:         );",
          "49:         $matcher->matchRequest($this->createMock(Request::class));",
          "50:     }",
          "55:     public function testMatchesRequestWithoutFolderUrl(string $requestPath, ?string $language, string $urlSuffix, bool $useAutoItem, string $resultPath, ...$hooks): void",
          "56:     {",
          "70:         $request = $this->createMock(Request::class);",
          "71:         $request",
          "72:             ->expects($this->once())",
          "",
          "[Removed Lines]",
          "38:         $config = $this->mockAdapter(['get']);",
          "39:         $config",
          "40:             ->expects($this->never())",
          "41:             ->method('get')",
          "42:         ;",
          "45:             $this->mockFrameworkWithAdapters($config),",
          "46:             $this->mockRequestMatcher($this->once())",
          "57:         $config = [",
          "58:             'folderUrl' => false,",
          "59:             'useAutoItem' => $useAutoItem,",
          "60:             'addLanguageToUrl' => null !== $language,",
          "61:             'urlSuffix' => $urlSuffix,",
          "62:         ];",
          "64:         $framework = $this->mockFrameworkWithAdapters(",
          "65:             $this->mockConfigAdapter($config),",
          "66:             $language,",
          "67:             $hooks",
          "68:         );",
          "",
          "[Added Lines]",
          "39:             $this->mockContaoFramework(),",
          "40:             $this->mockRequestMatcher($this->once()),",
          "41:             '.html',",
          "42:             false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = $hooks;",
          "79:         $matcher = new LegacyMatcher(",
          "80:             $framework,",
          "82:         );",
          "84:         $matcher->matchRequest($request);",
          "",
          "[Removed Lines]",
          "81:             $this->mockRequestMatcher($this->once(), $resultPath)",
          "",
          "[Added Lines]",
          "62:         $config = [",
          "63:             'folderUrl' => false,",
          "64:             'useAutoItem' => $useAutoItem,",
          "65:         ];",
          "67:         $framework = $this->mockFrameworkWithAdapters($this->mockConfigAdapter($config), $language, $hooks);",
          "71:             $this->mockRequestMatcher($this->once(), $resultPath),",
          "72:             $urlSuffix,",
          "73:             null !== $language",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:     {",
          "98:         yield [",
          "99:             '/foo.html',",
          "",
          "[Removed Lines]",
          "96:     public function matchRequestWithoutFolderUrlProvider(): \\Generator",
          "",
          "[Added Lines]",
          "88:     public function getRequestData(): \\Generator",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:         $config = [",
          "202:             'folderUrl' => true,",
          "203:             'useAutoItem' => false,",
          "206:         ];",
          "208:         $framework = $this->mockFrameworkWithAdapters(",
          "",
          "[Removed Lines]",
          "204:             'addLanguageToUrl' => false,",
          "205:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "250:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [['foo', 'bar']];",
          "253:         $matcher->matchRequest($request);",
          "254:     }",
          "",
          "[Removed Lines]",
          "252:         $matcher = new LegacyMatcher($framework, $matcher);",
          "",
          "[Added Lines]",
          "242:         $matcher = new LegacyMatcher($framework, $matcher, '.html', false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:         $config = [",
          "259:             'folderUrl' => true,",
          "260:             'useAutoItem' => false,",
          "263:         ];",
          "265:         $framework = $this->mockFrameworkWithAdapters(",
          "",
          "[Removed Lines]",
          "261:             'addLanguageToUrl' => false,",
          "262:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [['foo', 'bar']];",
          "311:         $matcher->matchRequest($request);",
          "312:     }",
          "",
          "[Removed Lines]",
          "310:         $matcher = new LegacyMatcher($framework, $matcher);",
          "",
          "[Added Lines]",
          "298:         $matcher = new LegacyMatcher($framework, $matcher, '.html', false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "316:         $config = [",
          "317:             'folderUrl' => true,",
          "318:             'useAutoItem' => false,",
          "321:         ];",
          "323:         $framework = $this->mockFrameworkWithAdapters(",
          "",
          "[Removed Lines]",
          "319:             'addLanguageToUrl' => false,",
          "320:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "367:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [['foo', 'bar']];",
          "370:         $matcher->matchRequest($request);",
          "371:     }",
          "",
          "[Removed Lines]",
          "369:         $matcher = new LegacyMatcher($framework, $matcher);",
          "",
          "[Added Lines]",
          "355:         $matcher = new LegacyMatcher($framework, $matcher, '.html', false);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "375:         $config = [",
          "376:             'folderUrl' => true,",
          "377:             'useAutoItem' => false,",
          "380:         ];",
          "382:         $framework = $this->mockFrameworkWithAdapters(",
          "",
          "[Removed Lines]",
          "378:             'addLanguageToUrl' => false,",
          "379:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "427:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [['foo', 'bar']];",
          "430:         $matcher->matchRequest($request);",
          "431:     }",
          "",
          "[Removed Lines]",
          "429:         $matcher = new LegacyMatcher($framework, $matcher);",
          "",
          "[Added Lines]",
          "413:         $matcher = new LegacyMatcher($framework, $matcher, '.html', false);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "435:         $config = [",
          "436:             'folderUrl' => true,",
          "437:             'useAutoItem' => true,",
          "440:         ];",
          "442:         $framework = $this->mockFrameworkWithAdapters(",
          "",
          "[Removed Lines]",
          "438:             'addLanguageToUrl' => false,",
          "439:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "487:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [['foo', 'bar']];",
          "490:         $matcher->matchRequest($request);",
          "491:     }",
          "493:     public function testThrowsExceptionIfUrlSuffixDoesNotMatch(): void",
          "494:     {",
          "498:         $config = [",
          "499:             'folderUrl' => false,",
          "500:             'useAutoItem' => false,",
          "503:         ];",
          "505:         $framework = $this->mockFrameworkWithAdapters($this->mockConfigAdapter($config));",
          "",
          "[Removed Lines]",
          "489:         $matcher = new LegacyMatcher($framework, $matcher);",
          "495:         $this->expectException(ResourceNotFoundException::class);",
          "496:         $this->expectExceptionMessage('URL suffix does not match');",
          "501:             'addLanguageToUrl' => false,",
          "502:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "471:         $matcher = new LegacyMatcher($framework, $matcher, '.html', false);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "514:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [[]];",
          "517:         $matcher->matchRequest($request);",
          "518:     }",
          "520:     public function testThrowsExceptionIfLanguageIsMissing(): void",
          "521:     {",
          "525:         $config = [",
          "526:             'folderUrl' => false,",
          "527:             'useAutoItem' => false,",
          "530:         ];",
          "532:         $framework = $this->mockFrameworkWithAdapters($this->mockConfigAdapter($config));",
          "",
          "[Removed Lines]",
          "516:         $matcher = new LegacyMatcher($framework, $this->mockRequestMatcher($this->never()));",
          "522:         $this->expectException(ResourceNotFoundException::class);",
          "523:         $this->expectExceptionMessage('Locale does not match');",
          "528:             'addLanguageToUrl' => true,",
          "529:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "493:         $matcher = new LegacyMatcher($framework, $this->mockRequestMatcher($this->never()), '.html', false);",
          "495:         $this->expectException(ResourceNotFoundException::class);",
          "496:         $this->expectExceptionMessage('URL suffix does not match');",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "541:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [[]];",
          "544:         $matcher->matchRequest($request);",
          "545:     }",
          "547:     public function testThrowsExceptionIfHookReturnsAnEmptyAlias(): void",
          "548:     {",
          "552:         $config = [",
          "553:             'folderUrl' => false,",
          "554:             'useAutoItem' => false,",
          "557:         ];",
          "559:         $framework = $this->mockFrameworkWithAdapters(",
          "",
          "[Removed Lines]",
          "543:         $matcher = new LegacyMatcher($framework, $this->mockRequestMatcher($this->never()));",
          "549:         $this->expectException(ResourceNotFoundException::class);",
          "550:         $this->expectExceptionMessage('Page alias is empty');",
          "555:             'addLanguageToUrl' => false,",
          "556:             'urlSuffix' => '.html',",
          "",
          "[Added Lines]",
          "519:         $matcher = new LegacyMatcher($framework, $this->mockRequestMatcher($this->never()), '.html', true);",
          "521:         $this->expectException(ResourceNotFoundException::class);",
          "522:         $this->expectExceptionMessage('Locale does not match');",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "572:         $GLOBALS['TL_HOOKS']['getPageIdFromUrl'] = [['foo', 'bar']];",
          "575:         $matcher->matchRequest($request);",
          "576:     }",
          "",
          "[Removed Lines]",
          "574:         $matcher = new LegacyMatcher($framework, $this->mockRequestMatcher($this->never()));",
          "",
          "[Added Lines]",
          "549:         $matcher = new LegacyMatcher($framework, $this->mockRequestMatcher($this->never()), '.html', false);",
          "551:         $this->expectException(ResourceNotFoundException::class);",
          "552:         $this->expectExceptionMessage('Page alias is empty');",
          "",
          "---------------"
        ],
        "core-bundle/tests/Routing/RouteProviderTest.php||core-bundle/tests/Routing/RouteProviderTest.php": [
          "File: core-bundle/tests/Routing/RouteProviderTest.php -> core-bundle/tests/Routing/RouteProviderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     {",
          "32:         $page = $this->mockClassWithProperties(PageModel::class, ['id' => 17]);",
          "35:         $pageAdapter",
          "36:             ->expects($this->once())",
          "37:             ->method('findByPk')",
          "",
          "[Removed Lines]",
          "34:         $pageAdapter = $this->mockPageAdapter();",
          "",
          "[Added Lines]",
          "34:         $pageAdapter = $this->mockAdapter(['findByPk']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:             ->willReturn($page)",
          "40:         ;",
          "46:         $this->assertSame($page, $route->getDefault('pageModel'));",
          "47:     }",
          "49:     public function testThrowsExceptionIfRouteNameHasNoId(): void",
          "50:     {",
          "51:         $this->expectException(RouteNotFoundException::class);",
          "52:         $this->expectExceptionMessage('Route name does not match a page ID');",
          "55:         $provider->getRouteByName('foobar');",
          "56:     }",
          "58:     public function testThrowsExceptionIfPageIsNotFoundFromRouteName(): void",
          "59:     {",
          "64:         $pageAdapter",
          "65:             ->expects($this->once())",
          "66:             ->method('findByPk')",
          "67:             ->with(17)",
          "68:         ;",
          "73:         $provider->getRouteByName('tl_page.17');",
          "74:     }",
          "76:     public function testGetsRoutesByNames(): void",
          "77:     {",
          "79:         $pageAdapter",
          "80:             ->expects($this->once())",
          "83:             ->willReturn(",
          "84:                 new Collection(",
          "85:                     [",
          "",
          "[Removed Lines]",
          "42:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter);",
          "43:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "44:         $route = $provider->getRouteByName('tl_page.17');",
          "54:         $provider = new RouteProvider($this->mockContaoFrameworkWithAdapters(), $this->createMock(Connection::class));",
          "60:         $this->expectException(RouteNotFoundException::class);",
          "61:         $this->expectExceptionMessage('Page ID \"17\" not found');",
          "63:         $pageAdapter = $this->mockPageAdapter();",
          "70:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter);",
          "72:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "78:         $pageAdapter = $this->mockPageAdapter();",
          "81:             ->method('findBy')",
          "82:             ->with('tl_page.id IN (17,21)')",
          "",
          "[Added Lines]",
          "42:         $framework = $this->mockFramework($pageAdapter);",
          "43:         $route = $this->mockRouteProvider($framework)->getRouteByName('tl_page.17');",
          "50:         $provider = $this->mockRouteProvider();",
          "60:         $pageAdapter = $this->mockAdapter(['findByPk']);",
          "67:         $provider = $this->mockRouteProvider($this->mockFramework($pageAdapter));",
          "69:         $this->expectException(RouteNotFoundException::class);",
          "70:         $this->expectExceptionMessage('Page ID \"17\" not found');",
          "77:         $pageAdapter = $this->mockAdapter(['findMultipleByIds']);",
          "80:             ->method('findMultipleByIds')",
          "81:             ->with([17, 21])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:             )",
          "92:         ;",
          "97:         $routes = $provider->getRoutesByNames(['tl_page.17', 'tl_page.21']);",
          "99:         $this->assertCount(2, $routes);",
          "",
          "[Removed Lines]",
          "94:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter);",
          "96:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "",
          "[Added Lines]",
          "93:         $provider = $this->mockRouteProvider($this->mockFramework($pageAdapter));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:     public function testFindsAllPagesForGetRoutesByNamesWithNullArgument(): void",
          "103:     {",
          "105:         $pageAdapter",
          "106:             ->expects($this->once())",
          "107:             ->method('findAll')",
          "108:         ;",
          "113:         $provider->getRoutesByNames(null);",
          "114:     }",
          "116:     public function testReturnsEmptyArrayForGetRoutesByNamesWithoutPageIds(): void",
          "117:     {",
          "119:         $pageAdapter",
          "122:         ;",
          "127:         $this->assertSame([], $provider->getRoutesByNames(['foo', 'bar']));",
          "128:     }",
          "",
          "[Removed Lines]",
          "104:         $pageAdapter = $this->mockPageAdapter();",
          "110:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter);",
          "112:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "118:         $pageAdapter = $this->mockPageAdapter();",
          "120:             ->expects($this->never())",
          "121:             ->method('findBy')",
          "124:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter);",
          "125:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "",
          "[Added Lines]",
          "101:         $pageAdapter = $this->mockAdapter(['findAll']);",
          "107:         $provider = $this->mockRouteProvider($this->mockFramework($pageAdapter));",
          "113:         $pageAdapter = $this->mockAdapter(['findMultipleByIds']);",
          "115:             ->expects($this->once())",
          "116:             ->method('findMultipleByIds')",
          "117:             ->with([])",
          "118:             ->willReturn(null)",
          "121:         $provider = $this->mockRouteProvider($this->mockFramework($pageAdapter));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:     public function testReturnsEmptyCollectionIfPathContainsAutoItem(): void",
          "131:     {",
          "132:         $request = $this->mockRequestWithPath('/foo/auto_item/bar.html');",
          "136:     }",
          "138:     public function testReturnsEmptyCollectionIfUrlSuffixDoesNotMatch(): void",
          "139:     {",
          "140:         $request = $this->mockRequestWithPath('/foo.php');",
          "150:     }",
          "152:     public function testReturnsEmptyCollectionIfLanguageIsNotInUrl(): void",
          "153:     {",
          "154:         $request = $this->mockRequestWithPath('/foo.html');",
          "163:         $this->assertEmpty($provider->getRouteCollectionForRequest($request));",
          "164:     }",
          "170:     {",
          "171:         $conditions = [];",
          "",
          "[Removed Lines]",
          "133:         $provider = new RouteProvider($this->mockContaoFrameworkWithAdapters(), $this->createMock(Connection::class));",
          "135:         $this->assertEmpty($provider->getRouteCollectionForRequest($request));",
          "142:         $framework = $this->mockContaoFrameworkWithAdapters(",
          "143:             null,",
          "144:             $this->mockConfigAdapter(['urlSuffix' => '.html'])",
          "145:         );",
          "147:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "149:         $this->assertEmpty($provider->getRouteCollectionForRequest($request));",
          "156:         $framework = $this->mockContaoFrameworkWithAdapters(",
          "157:             null,",
          "158:             $this->mockConfigAdapter(['urlSuffix' => '.html', 'addLanguageToUrl' => true])",
          "159:         );",
          "161:         $provider = new RouteProvider($framework, $this->createMock(Connection::class));",
          "169:     public function testFindsPagesByAliasCandidates(string $path, string $urlSuffix, bool $addLanguageToUrl, bool $folderUrl, array $aliases, array $ids = []): void",
          "",
          "[Added Lines]",
          "130:         $this->assertEmpty($this->mockRouteProvider()->getRouteCollectionForRequest($request));",
          "137:         $this->assertEmpty($this->mockRouteProvider()->getRouteCollectionForRequest($request));",
          "143:         $provider = $this->mockRouteProvider(null, '.html', true);",
          "151:     public function testFindsPagesByAliasCandidates(string $path, string $urlSuffix, bool $prependLocale, bool $folderUrl, array $aliases, array $ids = []): void",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:             $conditions[] = 'tl_page.alias IN ('.implode(',', $aliases).')';",
          "179:         }",
          "182:         $pageAdapter",
          "183:             ->expects($this->once())",
          "184:             ->method('findBy')",
          "",
          "[Removed Lines]",
          "181:         $pageAdapter = $this->mockPageAdapter();",
          "",
          "[Added Lines]",
          "163:         $pageAdapter = $this->mockAdapter(['findBy']);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:             ->willReturn(null)",
          "187:         ;",
          "198:         $request = $this->mockRequestWithPath($path);",
          "201:         $provider->getRouteCollectionForRequest($request);",
          "202:     }",
          "205:     {",
          "206:         yield [",
          "207:             '/foo.html',",
          "",
          "[Removed Lines]",
          "189:         $configAdapter = $this->mockConfigAdapter(compact('urlSuffix', 'addLanguageToUrl', 'folderUrl'));",
          "190:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter, $configAdapter);",
          "192:         $connection = $this->createMock(Connection::class);",
          "193:         $connection",
          "194:             ->method('quote')",
          "195:             ->willReturnArgument(0)",
          "196:         ;",
          "200:         $provider = new RouteProvider($framework, $connection);",
          "204:     public function aliasCandidatesProvider(): \\Generator",
          "",
          "[Added Lines]",
          "171:         $configAdapter = $this->mockConfigAdapter(compact('folderUrl'));",
          "172:         $framework = $this->mockFramework($pageAdapter, $configAdapter);",
          "175:         $provider = $this->mockRouteProvider($framework, $urlSuffix, $prependLocale);",
          "179:     public function getAliasCandidates(): \\Generator",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "296:     }",
          "301:     public function testSortsRoutes(array $pages, array $languages): void",
          "302:     {",
          "304:         $pageAdapter",
          "305:             ->expects($this->once())",
          "306:             ->method('findBy')",
          "307:             ->willReturn(new Collection(array_values($pages), 'tl_page'))",
          "308:         ;",
          "326:         $request = $this->mockRequestWithPath('/foo.html', $languages);",
          "329:         $collection = $provider->getRouteCollectionForRequest($request);",
          "331:         $this->assertCount(\\count($pages), $collection);",
          "334:         ksort($pages);",
          "336:         foreach ($collection as $name => $route) {",
          "341:             $routedPage = $route->getDefault('pageModel');",
          "343:             $this->assertInstanceOf(PageModel::class, $routedPage);",
          "344:             $this->assertSame('tl_page.'.$routedPage->id, $name);",
          "346:         }",
          "347:     }",
          "350:     {",
          "351:         yield 'Sorts host first (1)' => [",
          "352:             [",
          "",
          "[Removed Lines]",
          "303:         $pageAdapter = $this->mockPageAdapter();",
          "310:         $configAdapter = $this->mockConfigAdapter(",
          "311:             [",
          "312:                 'urlSuffix' => '.html',",
          "313:                 'addLanguageToUrl' => false,",
          "314:                 'folderUrl' => false,",
          "315:             ]",
          "316:         );",
          "318:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter, $configAdapter);",
          "320:         $connection = $this->createMock(Connection::class);",
          "321:         $connection",
          "322:             ->method('quote')",
          "323:             ->willReturnArgument(0)",
          "324:         ;",
          "328:         $provider = new RouteProvider($framework, $connection);",
          "332:         $i = 0;",
          "338:             $expectedPage = $pages[$i++];",
          "345:             $this->assertSame($expectedPage, $routedPage);",
          "349:     public function sortRoutesProvider(): \\Generator",
          "",
          "[Added Lines]",
          "278:         $pageAdapter = $this->mockAdapter(['findBy']);",
          "285:         $configAdapter = $this->mockConfigAdapter(['folderUrl' => false]);",
          "286:         $framework = $this->mockFramework($pageAdapter, $configAdapter);",
          "289:         $provider = $this->mockRouteProvider($framework);",
          "294:         $i = 0;",
          "303:             $this->assertSame($pages[$i++], $routedPage);",
          "307:     public function getRoutes(): \\Generator",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "426:     }",
          "432:     {",
          "433:         $page = $this->createPage($language, $alias, true, $domain);",
          "436:         $pageAdapter",
          "437:             ->expects($this->once())",
          "438:             ->method('findBy')",
          "439:             ->willReturn(new Collection([$page], 'tl_page'))",
          "440:         ;",
          "461:         $collection = $provider->getRouteCollectionForRequest($request);",
          "463:         $this->assertCount(1, $collection);",
          "",
          "[Removed Lines]",
          "431:     public function testAddsRouteForPage(string $alias, string $language, string $domain, string $urlSuffix, bool $addLanguageToUrl): void",
          "435:         $pageAdapter = $this->mockPageAdapter();",
          "442:         $configAdapter = $this->mockConfigAdapter(",
          "443:             [",
          "444:                 'urlSuffix' => $urlSuffix,",
          "445:                 'addLanguageToUrl' => $addLanguageToUrl,",
          "446:                 'folderUrl' => false,",
          "447:             ]",
          "448:         );",
          "450:         $framework = $this->mockContaoFrameworkWithAdapters($pageAdapter, $configAdapter);",
          "452:         $connection = $this->createMock(Connection::class);",
          "453:         $connection",
          "454:             ->method('quote')",
          "455:             ->willReturnArgument(0)",
          "456:         ;",
          "458:         $request = $this->mockRequestWithPath(($addLanguageToUrl ? \"/$language\" : '').\"/foo$urlSuffix\");",
          "460:         $provider = new RouteProvider($framework, $connection);",
          "",
          "[Added Lines]",
          "389:     public function testAddsRouteForPage(string $alias, string $language, string $domain, string $urlSuffix, bool $prependLocale): void",
          "393:         $pageAdapter = $this->mockAdapter(['findBy']);",
          "400:         $configAdapter = $this->mockConfigAdapter(['folderUrl' => false]);",
          "401:         $framework = $this->mockFramework($pageAdapter, $configAdapter);",
          "402:         $request = $this->mockRequestWithPath(($prependLocale ? '/'.$language : '').'/foo'.$urlSuffix);",
          "404:         $provider = $this->mockRouteProvider($framework, $urlSuffix, $prependLocale);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "468:         $this->assertTrue($route->getOption('utf8'));",
          "469:         $this->assertSame($domain, $route->getHost());",
          "473:             $this->assertSame($language, $route->getRequirement('_locale'));",
          "474:         } else {",
          "476:         }",
          "477:     }",
          "480:     {",
          "481:         foreach (['foo', 'foo/bar'] as $alias) {",
          "482:             foreach (['en', 'de'] as $language) {",
          "",
          "[Removed Lines]",
          "471:         if ($addLanguageToUrl) {",
          "472:             $this->assertSame(\"/{_locale}/$alias{parameters}$urlSuffix\", $route->getPath());",
          "475:             $this->assertSame(\"/$alias{parameters}$urlSuffix\", $route->getPath());",
          "479:     public function routeForPageProvider(): \\Generator",
          "",
          "[Added Lines]",
          "415:         if ($prependLocale) {",
          "416:             $this->assertSame('/{_locale}/'.$alias.'{parameters}'.$urlSuffix, $route->getPath());",
          "419:             $this->assertSame('/'.$alias.'{parameters}'.$urlSuffix, $route->getPath());",
          "423:     public function getPageRoutes(): \\Generator",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "523:     {",
          "528:         return $this->mockContaoFramework([PageModel::class => $pageAdapter, Config::class => $configAdapter]);",
          "529:     }",
          "",
          "[Removed Lines]",
          "522:     private function mockContaoFrameworkWithAdapters(Adapter $pageAdapter = null, Adapter $configAdapter = null): ContaoFrameworkInterface",
          "524:         if (null === $pageAdapter) {",
          "525:             $pageAdapter = $this->mockPageAdapter();",
          "526:         }",
          "",
          "[Added Lines]",
          "466:     private function mockFramework(Adapter $pageAdapter = null, Adapter $configAdapter = null): ContaoFrameworkInterface",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "546:         return $configAdapter;",
          "547:     }",
          "",
          "[Removed Lines]",
          "552:     private function mockPageAdapter(): Adapter",
          "553:     {",
          "554:         $pageAdapter = $this->mockAdapter(['getTable', 'findAll', 'findByPk', 'findBy']);",
          "555:         $pageAdapter",
          "556:             ->method('getTable')",
          "557:             ->willReturn('tl_page')",
          "558:         ;",
          "560:         return $pageAdapter;",
          "561:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "577:             ]",
          "578:         );",
          "579:     }",
          "580: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:     private function mockRouteProvider(ContaoFrameworkInterface $framework = null, string $urlSuffix = '.html', bool $prependLocale = false): RouteProvider",
          "508:     {",
          "509:         if (null === $framework) {",
          "510:             $framework = $this->mockContaoFramework();",
          "511:         }",
          "513:         $connection = $this->createMock(Connection::class);",
          "514:         $connection",
          "515:             ->method('quote')",
          "516:             ->willReturnArgument(0)",
          "517:         ;",
          "519:         return new RouteProvider($framework, $connection, $urlSuffix, $prependLocale);",
          "520:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a33cd4e7bb8e6bb9fc2dbb4b81d6124547468b4",
      "candidate_info": {
        "commit_hash": "2a33cd4e7bb8e6bb9fc2dbb4b81d6124547468b4",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/2a33cd4e7bb8e6bb9fc2dbb4b81d6124547468b4",
        "files": [
          "core-bundle/src/EventListener/ExceptionConverterListener.php",
          "core-bundle/src/EventListener/LocaleListener.php",
          "core-bundle/src/Resources/config/listener.yml",
          "core-bundle/src/Translation/Translator.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/EventListener/LocaleListenerTest.php",
          "core-bundle/tests/Translation/TranslatorTest.php"
        ],
        "message": "Set the request and translator locale in case of an exception (see #453)",
        "before_after_code_files": [
          "core-bundle/src/EventListener/ExceptionConverterListener.php||core-bundle/src/EventListener/ExceptionConverterListener.php",
          "core-bundle/src/EventListener/LocaleListener.php||core-bundle/src/EventListener/LocaleListener.php",
          "core-bundle/src/Translation/Translator.php||core-bundle/src/Translation/Translator.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/EventListener/LocaleListenerTest.php||core-bundle/tests/EventListener/LocaleListenerTest.php",
          "core-bundle/tests/Translation/TranslatorTest.php||core-bundle/tests/Translation/TranslatorTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php"
          ],
          "candidate": [
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/src/EventListener/ExceptionConverterListener.php||core-bundle/src/EventListener/ExceptionConverterListener.php": [
          "File: core-bundle/src/EventListener/ExceptionConverterListener.php -> core-bundle/src/EventListener/ExceptionConverterListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: use Contao\\CoreBundle\\Exception\\NoRootPageFoundException;",
          "26: use Contao\\CoreBundle\\Exception\\PageNotFoundException;",
          "27: use Contao\\CoreBundle\\Exception\\ServiceUnavailableException as ContaoServiceUnavailableException;",
          "28: use Doctrine\\DBAL\\Connection;",
          "29: use Lexik\\Bundle\\MaintenanceBundle\\Exception\\ServiceUnavailableException;",
          "30: use Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: use Contao\\Date;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     private function hasRootPages(): bool",
          "126:     {",
          "136:     }",
          "137: }",
          "",
          "[Removed Lines]",
          "127:         $qb = $this->connection->createQueryBuilder();",
          "128:         $qb",
          "129:             ->select('COUNT(*)')",
          "130:             ->from('tl_page')",
          "131:             ->where('type = :type')",
          "132:             ->setParameter('type', 'root')",
          "133:         ;",
          "135:         return $qb->execute()->fetchColumn() > 0;",
          "",
          "[Added Lines]",
          "128:         $time = Date::floorToMinute();",
          "131:         $statement = $this->connection->prepare(\"",
          "132:             SELECT",
          "133:                 COUNT(*)",
          "134:             FROM",
          "135:                 tl_page",
          "136:             WHERE",
          "137:                 type = 'root'",
          "138:                 AND (start = '' OR start <= :start)",
          "139:                 AND (stop = '' OR stop > :stop)",
          "140:                 AND published = '1'",
          "141:         \");",
          "143:         $statement->execute([':start' => $time, ':stop' => $time + 60]);",
          "145:         return $statement->fetchColumn() > 0;",
          "",
          "---------------"
        ],
        "core-bundle/src/EventListener/LocaleListener.php||core-bundle/src/EventListener/LocaleListener.php": [
          "File: core-bundle/src/EventListener/LocaleListener.php -> core-bundle/src/EventListener/LocaleListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
          "16: use Symfony\\Component\\HttpFoundation\\Request;",
          "17: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
          "19: class LocaleListener",
          "20: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;",
          "19: use Symfony\\Component\\Translation\\TranslatorInterface;",
          "26:     private $translator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     private $availableLocales;",
          "32:     {",
          "33:         $this->scopeMatcher = $scopeMatcher;",
          "34:         $this->availableLocales = $availableLocales;",
          "35:     }",
          "40:     public function onKernelRequest(GetResponseEvent $event): void",
          "41:     {",
          "",
          "[Removed Lines]",
          "31:     public function __construct(ScopeMatcher $scopeMatcher, array $availableLocales)",
          "",
          "[Added Lines]",
          "38:     public function __construct(TranslatorInterface $translator, ScopeMatcher $scopeMatcher, array $availableLocales)",
          "40:         $this->translator = $translator;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     }",
          "53:     private function getLocale(Request $request): string",
          "54:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     public function onKernelException(GetResponseForExceptionEvent $event): void",
          "63:     {",
          "64:         $request = $event->getRequest();",
          "65:         $locale = $request->attributes->get('_locale') ?? $this->getLocale($request);",
          "67:         $request->setLocale($locale);",
          "68:         $this->translator->setLocale($locale);",
          "69:     }",
          "",
          "---------------"
        ],
        "core-bundle/src/Translation/Translator.php||core-bundle/src/Translation/Translator.php": [
          "File: core-bundle/src/Translation/Translator.php -> core-bundle/src/Translation/Translator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:             return $this->translator->trans($id, $parameters, $domain, $locale);",
          "50:         }",
          "52:         $this->framework->initialize();",
          "53:         $this->loadLanguageFile(substr($domain, 7), $locale);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         if (null === $locale) {",
          "53:             $locale = $this->translator->getLocale();",
          "54:         }",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:         $this->assertSame(LocaleListener::class, $definition->getClass());",
          "489:         $this->assertTrue($definition->isPrivate());",
          "493:         $tags = $definition->getTags();",
          "",
          "[Removed Lines]",
          "490:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(0));",
          "491:         $this->assertSame('%contao.locales%', (string) $definition->getArgument(1));",
          "",
          "[Added Lines]",
          "490:         $this->assertSame('translator', (string) $definition->getArgument(0));",
          "491:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
          "492:         $this->assertSame('%contao.locales%', (string) $definition->getArgument(2));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496:         $this->assertSame('kernel.request', $tags['kernel.event_listener'][0]['event']);",
          "497:         $this->assertSame('onKernelRequest', $tags['kernel.event_listener'][0]['method']);",
          "498:         $this->assertSame(20, $tags['kernel.event_listener'][0]['priority']);",
          "499:     }",
          "501:     public function testRegistersTheMergeHttpHeadersListener(): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500:         $this->assertSame('kernel.exception', $tags['kernel.event_listener'][1]['event']);",
          "501:         $this->assertSame('onKernelException', $tags['kernel.event_listener'][1]['method']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576:         $this->assertArrayHasKey('kernel.event_listener', $tags);",
          "577:         $this->assertSame('kernel.request', $tags['kernel.event_listener'][0]['event']);",
          "578:         $this->assertSame('onKernelRequest', $tags['kernel.event_listener'][0]['method']);",
          "580:     }",
          "582:     public function testRegistersTheResponseExceptionListener(): void",
          "",
          "[Removed Lines]",
          "579:         $this->assertSame(30, $tags['kernel.event_listener'][0]['priority']);",
          "",
          "[Added Lines]",
          "582:         $this->assertSame(14, $tags['kernel.event_listener'][0]['priority']);",
          "",
          "---------------"
        ],
        "core-bundle/tests/EventListener/LocaleListenerTest.php||core-bundle/tests/EventListener/LocaleListenerTest.php": [
          "File: core-bundle/tests/EventListener/LocaleListenerTest.php -> core-bundle/tests/EventListener/LocaleListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\CoreBundle\\ContaoCoreBundle;",
          "16: use Contao\\CoreBundle\\EventListener\\LocaleListener;",
          "17: use Contao\\CoreBundle\\Tests\\TestCase;",
          "18: use Symfony\\Component\\HttpFoundation\\ParameterBag;",
          "19: use Symfony\\Component\\HttpFoundation\\Request;",
          "20: use Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;",
          "21: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "22: use Symfony\\Component\\HttpKernel\\KernelInterface;",
          "24: class LocaleListenerTest extends TestCase",
          "25: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: use Contao\\CoreBundle\\Exception\\NoRootPageFoundException;",
          "22: use Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;",
          "25: use Symfony\\Component\\Translation\\TranslatorInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         $kernel = $this->createMock(KernelInterface::class);",
          "36:         $event = new GetResponseEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST);",
          "39:         $listener->onKernelRequest($event);",
          "41:         $this->assertSame($expected, $request->attributes->get('_locale'));",
          "",
          "[Removed Lines]",
          "38:         $listener = new LocaleListener($this->mockScopeMatcher(), ['en']);",
          "",
          "[Added Lines]",
          "41:         $listener = new LocaleListener(",
          "42:             $this->createMock(TranslatorInterface::class),",
          "43:             $this->mockScopeMatcher(),",
          "44:             ['en']",
          "45:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         $request->headers->set('Accept-Language', $locale);",
          "61:         $request->attributes->set('_scope', ContaoCoreBundle::SCOPE_FRONTEND);",
          "66:         $listener->onKernelRequest($event);",
          "68:         $this->assertSame($expected, $request->attributes->get('_locale'));",
          "",
          "[Removed Lines]",
          "63:         $event = new GetResponseEvent($this->createMock(KernelInterface::class), $request, HttpKernelInterface::MASTER_REQUEST);",
          "65:         $listener = new LocaleListener($this->mockScopeMatcher(), $available);",
          "",
          "[Added Lines]",
          "71:         $event = new GetResponseEvent(",
          "72:             $this->createMock(KernelInterface::class),",
          "73:             $request,",
          "74:             HttpKernelInterface::MASTER_REQUEST",
          "75:         );",
          "77:         $listener = new LocaleListener(",
          "78:             $this->createMock(TranslatorInterface::class),",
          "79:             $this->mockScopeMatcher(),",
          "80:             $available",
          "81:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:             ->method('set')",
          "88:         ;",
          "94:         $listener->onKernelRequest($event);",
          "95:     }",
          "",
          "[Removed Lines]",
          "90:         $request = Request::create('/', Request::METHOD_GET, [$attributes]);",
          "91:         $event = new GetResponseEvent($this->createMock(KernelInterface::class), $request, HttpKernelInterface::MASTER_REQUEST);",
          "93:         $listener = new LocaleListener($this->mockScopeMatcher(), ['en']);",
          "",
          "[Added Lines]",
          "107:         $event = new GetResponseEvent(",
          "108:             $this->createMock(KernelInterface::class),",
          "109:             Request::create('/', Request::METHOD_GET, [$attributes]),",
          "110:             HttpKernelInterface::MASTER_REQUEST",
          "111:         );",
          "113:         $listener = new LocaleListener(",
          "114:             $this->createMock(TranslatorInterface::class),",
          "115:             $this->mockScopeMatcher(),",
          "116:             ['en']",
          "117:         );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:         $request->attributes->set('_locale', 'invalid');",
          "101:         $request->attributes->set('_scope', ContaoCoreBundle::SCOPE_FRONTEND);",
          "106:         $this->expectException('InvalidArgumentException');",
          "108:         $listener->onKernelRequest($event);",
          "109:     }",
          "110: }",
          "",
          "[Removed Lines]",
          "103:         $event = new GetResponseEvent($this->createMock(KernelInterface::class), $request, HttpKernelInterface::MASTER_REQUEST);",
          "104:         $listener = new LocaleListener($this->mockScopeMatcher(), ['en']);",
          "",
          "[Added Lines]",
          "128:         $event = new GetResponseEvent(",
          "129:             $this->createMock(KernelInterface::class),",
          "130:             $request,",
          "131:             HttpKernelInterface::MASTER_REQUEST",
          "132:         );",
          "134:         $listener = new LocaleListener(",
          "135:             $this->createMock(TranslatorInterface::class),",
          "136:             $this->mockScopeMatcher(),",
          "137:             ['en']",
          "138:         );",
          "145:     public function testSetsTheDefaultLocaleInCaseOfAnException(): void",
          "146:     {",
          "147:         $request = Request::create('/');",
          "148:         $request->headers->set('Accept-Language', 'de');",
          "150:         $event = new GetResponseForExceptionEvent(",
          "151:             $this->createMock(KernelInterface::class),",
          "152:             $request,",
          "153:             HttpKernelInterface::MASTER_REQUEST,",
          "154:             new NoRootPageFoundException('No root page found')",
          "155:         );",
          "157:         $translator = $this->createMock(TranslatorInterface::class);",
          "158:         $translator",
          "159:             ->expects($this->once())",
          "160:             ->method('setLocale')",
          "161:             ->with('de')",
          "162:         ;",
          "164:         $listener = new LocaleListener($translator, $this->mockScopeMatcher(), ['en', 'de']);",
          "165:         $listener->onKernelException($event);",
          "167:         $this->assertSame('de', $request->getLocale());",
          "168:     }",
          "",
          "---------------"
        ],
        "core-bundle/tests/Translation/TranslatorTest.php||core-bundle/tests/Translation/TranslatorTest.php": [
          "File: core-bundle/tests/Translation/TranslatorTest.php -> core-bundle/tests/Translation/TranslatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:             $GLOBALS['TL_LANG']['MSC']['foo\\\\']['bar\\\\baz.']",
          "109:         );",
          "110:     }",
          "111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:     public function testUsesTheLocaleOfTheDecoratedTranslatorIfNoneIsGiven(): void",
          "113:     {",
          "114:         $originalTranslator = $this->createMock(TranslatorInterface::class);",
          "115:         $originalTranslator",
          "116:             ->expects($this->once())",
          "117:             ->method('getLocale')",
          "118:             ->willReturn('de')",
          "119:         ;",
          "121:         $adapter = $this->mockAdapter(['loadLanguageFile']);",
          "122:         $adapter",
          "123:             ->expects($this->atLeastOnce())",
          "124:             ->method('loadLanguageFile')",
          "125:             ->with('default', 'de')",
          "126:         ;",
          "128:         $framework = $this->mockContaoFramework([System::class => $adapter]);",
          "129:         $framework",
          "130:             ->expects($this->atLeastOnce())",
          "131:             ->method('initialize')",
          "132:         ;",
          "134:         $translator = new Translator($originalTranslator, $framework);",
          "136:         $this->assertSame('MSC.foo', $translator->trans('MSC.foo', [], 'contao_default'));",
          "137:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "084119782d7827e98e76911866f9bd39fd33fc88",
      "candidate_info": {
        "commit_hash": "084119782d7827e98e76911866f9bd39fd33fc88",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/084119782d7827e98e76911866f9bd39fd33fc88",
        "files": [
          "core-bundle/.travis.yml",
          "core-bundle/composer.json",
          "core-bundle/phpstan.neon.dist",
          "core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php",
          "core-bundle/src/EventListener/BackendMenuListener.php",
          "core-bundle/src/EventListener/SwitchUserListener.php",
          "core-bundle/src/EventListener/UserSessionListener.php",
          "core-bundle/src/Monolog/ContaoTableHandler.php",
          "core-bundle/src/Security/User/ContaoUserProvider.php",
          "core-bundle/tests/Command/UserPasswordCommandTest.php",
          "core-bundle/tests/Contao/ImageTest.php",
          "core-bundle/tests/EventListener/BackendMenuListenerTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/Image/ImageSizesTest.php"
        ],
        "message": "[Core] Use PHPStan on level 2 (see #1636)\n\nDescription\n-----------\n\nPHPStan on level 2 needs to know about return types from `$container->get()` calls.\n\nTo extend the features of PHPSTan I've created an extension for PHPStan: [oneup/phpstan-contao](https://github.com/1up-lab/phpstan-contao).\nThis extension parses the `services.yml` file of the `contao/core-bundle` to provide the right return types for PHPStan.\n\nMoreover this extension also requires `phpstan/phpstan-symfony` and provides the XML file containing the container definitions from Symfony to the Symfony extension for PHPStan.\n\nCommits\n-------\n\n1ab120e4 Update the branch alias.\nd7ee317e Merge branch '4.6'\n\n# Conflicts:\n#\tcomposer.json\n0eb8b52f Add phpstan/phpstan-phpunit\n06bcd34d Run PHPStan on level 2\n9d2ed927 Require friendsofsymfony/http-cache-bundle\n84e42b66 Fix dependencies for prefer-lowest\nebc59cc0 CS\nc8465663 Fixes\n972fde5e Fix branch alias\n7f83ef2e Fixes",
        "before_after_code_files": [
          "core-bundle/phpstan.neon.dist||core-bundle/phpstan.neon.dist",
          "core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php||core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php",
          "core-bundle/src/EventListener/BackendMenuListener.php||core-bundle/src/EventListener/BackendMenuListener.php",
          "core-bundle/src/EventListener/SwitchUserListener.php||core-bundle/src/EventListener/SwitchUserListener.php",
          "core-bundle/src/EventListener/UserSessionListener.php||core-bundle/src/EventListener/UserSessionListener.php",
          "core-bundle/src/Monolog/ContaoTableHandler.php||core-bundle/src/Monolog/ContaoTableHandler.php",
          "core-bundle/src/Security/User/ContaoUserProvider.php||core-bundle/src/Security/User/ContaoUserProvider.php",
          "core-bundle/tests/Command/UserPasswordCommandTest.php||core-bundle/tests/Command/UserPasswordCommandTest.php",
          "core-bundle/tests/Contao/ImageTest.php||core-bundle/tests/Contao/ImageTest.php",
          "core-bundle/tests/EventListener/BackendMenuListenerTest.php||core-bundle/tests/EventListener/BackendMenuListenerTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/Image/ImageSizesTest.php||core-bundle/tests/Image/ImageSizesTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ],
          "candidate": [
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/phpstan.neon.dist||core-bundle/phpstan.neon.dist": [
          "File: core-bundle/phpstan.neon.dist -> core-bundle/phpstan.neon.dist",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: parameters:",
          "2:     bootstrap: %currentWorkingDirectory%/vendor/autoload.php",
          "4:     excludes_analyse:",
          "5:         - %currentWorkingDirectory%/src/Resources/*",
          "6:         - %currentWorkingDirectory%/tests/Fixtures/*",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: includes:",
          "2:     - vendor/phpstan/phpstan-phpunit/extension.neon",
          "3:     - vendor/phpstan/phpstan-phpunit/rules.neon",
          "4:     - vendor/oneup/phpstan-contao/extension.neon",
          "5:     - vendor/phpstan/phpstan-symfony/extension.neon",
          "10:     contao:",
          "11:         services_yml_path: %currentWorkingDirectory%/src/Resources/config/services.yml",
          "13:     symfony:",
          "14:         container_xml_path: %currentWorkingDirectory%/vendor/oneup/phpstan-contao/var/cache/dev/appDevPHPStanProjectContainer.xml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         - '#Class Nelmio\\\\SecurityBundle\\\\NelmioSecurityBundle not found\\.#'",
          "25:         - '#Class Contao\\\\ManagerBundle\\\\ContaoManagerBundle not found\\.#'",
          "27:     reportUnmatchedIgnoredErrors: false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         # Ignore Symfony Configuration errors",
          "40:         - '#Call to an undefined method Symfony\\\\Component\\\\Config\\\\Definition\\\\Builder\\\\NodeDefinition::children\\(\\)\\.#'",
          "42:         # Ignore missing method test",
          "43:         - '#Call to an undefined method Contao\\\\CoreBundle\\\\Framework\\\\Adapter::missingMethod\\(\\)\\.#'",
          "",
          "---------------"
        ],
        "core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php||core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php": [
          "File: core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php -> core-bundle/src/Controller/FrontendModule/AbstractFrontendModuleController.php"
        ],
        "core-bundle/src/EventListener/BackendMenuListener.php||core-bundle/src/EventListener/BackendMenuListener.php": [
          "File: core-bundle/src/EventListener/BackendMenuListener.php -> core-bundle/src/EventListener/BackendMenuListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     {",
          "38:         $token = $this->tokenStorage->getToken();",
          "41:             return;",
          "42:         }",
          "",
          "[Removed Lines]",
          "40:         if (null === $token || !($user = $token->getUser()) instanceof BackendUser) {",
          "",
          "[Added Lines]",
          "40:         if (null === $token) {",
          "41:             return;",
          "42:         }",
          "44:         $user = $token->getUser();",
          "46:         if (!$user instanceof BackendUser) {",
          "",
          "---------------"
        ],
        "core-bundle/src/EventListener/SwitchUserListener.php||core-bundle/src/EventListener/SwitchUserListener.php": [
          "File: core-bundle/src/EventListener/SwitchUserListener.php -> core-bundle/src/EventListener/SwitchUserListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\CoreBundle\\Monolog\\ContaoContext;",
          "16: use Psr\\Log\\LoggerInterface;",
          "17: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;",
          "18: use Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent;",
          "20: class SwitchUserListener",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:             throw new \\RuntimeException('The token storage did not contain a token.');",
          "49:         }",
          "54:         $this->logger->info(",
          "55:             sprintf('User \"%s\" has switched to user \"%s\"', $sourceUser, $targetUser),",
          "",
          "[Removed Lines]",
          "51:         $sourceUser = $token->getUser()->getUsername();",
          "52:         $targetUser = $event->getTargetUser()->getUsername();",
          "",
          "[Added Lines]",
          "52:         $sourceUser = $token->getUser();",
          "54:         if ($sourceUser instanceof UserInterface) {",
          "55:             $sourceUser = $sourceUser->getUsername();",
          "56:         }",
          "58:         $targetUser = $event->getTargetUser();",
          "60:         if ($targetUser instanceof UserInterface) {",
          "61:             $targetUser = $targetUser->getUsername();",
          "62:         }",
          "",
          "---------------"
        ],
        "core-bundle/src/EventListener/UserSessionListener.php||core-bundle/src/EventListener/UserSessionListener.php": [
          "File: core-bundle/src/EventListener/UserSessionListener.php -> core-bundle/src/EventListener/UserSessionListener.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         $session = $user->session;",
          "87:         if (\\is_array($session)) {",
          "89:         }",
          "",
          "[Removed Lines]",
          "88:             $this->getSessionBag($event->getRequest())->replace($session);",
          "",
          "[Added Lines]",
          "89:             $sessionBag = $this->getSessionBag($event->getRequest());",
          "90:             $sessionBag->replace($session);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             return;",
          "114:         }",
          "118:         $this->connection->update($user->getTable(), ['session' => serialize($data)], ['id' => $user->id]);",
          "119:     }",
          "",
          "[Removed Lines]",
          "116:         $data = $this->getSessionBag($event->getRequest())->all();",
          "",
          "[Added Lines]",
          "119:         $sessionBag = $this->getSessionBag($event->getRequest());",
          "120:         $data = $sessionBag->all();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     {",
          "130:         if (!$request->hasSession() || null === ($session = $request->getSession())) {",
          "131:             throw new \\RuntimeException('The request did not contain a session.');",
          "",
          "[Removed Lines]",
          "128:     private function getSessionBag(Request $request): AttributeBagInterface",
          "",
          "[Added Lines]",
          "130:     private function getSessionBag(Request $request): SessionBagInterface",
          "",
          "---------------"
        ],
        "core-bundle/src/Monolog/ContaoTableHandler.php||core-bundle/src/Monolog/ContaoTableHandler.php": [
          "File: core-bundle/src/Monolog/ContaoTableHandler.php -> core-bundle/src/Monolog/ContaoTableHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\StringUtil;",
          "16: use Contao\\System;",
          "17: use Doctrine\\DBAL\\Statement;",
          "18: use Monolog\\Formatter\\LineFormatter;",
          "19: use Monolog\\Handler\\AbstractProcessingHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: use Doctrine\\DBAL\\Connection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:             throw new \\RuntimeException('The container has not been injected or the database service is missing');",
          "119:         }",
          "122:             INSERT INTO",
          "123:                 tl_log",
          "124:                     (tstamp, source, action, username, text, func, browser)",
          "",
          "[Removed Lines]",
          "121:         $this->statement = $this->container->get($this->dbalServiceName)->prepare('",
          "",
          "[Added Lines]",
          "123:         $connection = $this->container->get($this->dbalServiceName);",
          "125:         $this->statement = $connection->prepare('",
          "",
          "---------------"
        ],
        "core-bundle/src/Security/User/ContaoUserProvider.php||core-bundle/src/Security/User/ContaoUserProvider.php": [
          "File: core-bundle/src/Security/User/ContaoUserProvider.php -> core-bundle/src/Security/User/ContaoUserProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         }",
          "96:         $this->validateSessionLifetime($user);",
          "97:         $this->triggerPostAuthenticateHook($user);",
          "",
          "[Removed Lines]",
          "94:         $user = $this->loadUserByUsername($user->username);",
          "",
          "[Added Lines]",
          "94:         $user = $this->loadUserByUsername($user->getUsername());",
          "",
          "---------------"
        ],
        "core-bundle/tests/Command/UserPasswordCommandTest.php||core-bundle/tests/Command/UserPasswordCommandTest.php": [
          "File: core-bundle/tests/Command/UserPasswordCommandTest.php -> core-bundle/tests/Command/UserPasswordCommandTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\CoreBundle\\Command\\UserPasswordCommand;",
          "16: use Contao\\CoreBundle\\Tests\\TestCase;",
          "17: use Doctrine\\DBAL\\Connection;",
          "18: use Symfony\\Component\\Console\\Application;",
          "19: use Symfony\\Component\\Console\\Exception\\InvalidArgumentException;",
          "20: use Symfony\\Component\\Console\\Exception\\RuntimeException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use PHPUnit\\Framework\\MockObject\\MockObject;",
          "",
          "---------------"
        ],
        "core-bundle/tests/Contao/ImageTest.php||core-bundle/tests/Contao/ImageTest.php": [
          "File: core-bundle/tests/Contao/ImageTest.php -> core-bundle/tests/Contao/ImageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1150:         $doc = new \\DOMDocument();",
          "1151:         $doc->loadXML($resultFile->getContent());",
          "1158:     }",
          "",
          "[Removed Lines]",
          "1153:         $this->assertSame('100 100 400 200', $doc->documentElement->firstChild->getAttribute('viewBox'));",
          "1154:         $this->assertSame('-50', $doc->documentElement->firstChild->getAttribute('x'));",
          "1155:         $this->assertSame('0', $doc->documentElement->firstChild->getAttribute('y'));",
          "1156:         $this->assertSame('200', $doc->documentElement->firstChild->getAttribute('width'));",
          "1157:         $this->assertSame('100', $doc->documentElement->firstChild->getAttribute('height'));",
          "",
          "[Added Lines]",
          "1154:         $firstChild = $doc->documentElement->firstChild;",
          "1156:         $this->assertSame('100 100 400 200', $firstChild->getAttribute('viewBox'));",
          "1157:         $this->assertSame('-50', $firstChild->getAttribute('x'));",
          "1158:         $this->assertSame('0', $firstChild->getAttribute('y'));",
          "1159:         $this->assertSame('200', $firstChild->getAttribute('width'));",
          "1160:         $this->assertSame('100', $firstChild->getAttribute('height'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191:         $doc = new \\DOMDocument();",
          "1192:         $doc->loadXML($resultFile->getContent());",
          "1199:     }",
          "",
          "[Removed Lines]",
          "1194:         $this->assertSame('100 100 400 200', $doc->documentElement->firstChild->getAttribute('viewBox'));",
          "1195:         $this->assertSame('-50', $doc->documentElement->firstChild->getAttribute('x'));",
          "1196:         $this->assertSame('0', $doc->documentElement->firstChild->getAttribute('y'));",
          "1197:         $this->assertSame('200', $doc->documentElement->firstChild->getAttribute('width'));",
          "1198:         $this->assertSame('100', $doc->documentElement->firstChild->getAttribute('height'));",
          "",
          "[Added Lines]",
          "1198:         $firstChild = $doc->documentElement->firstChild;",
          "1200:         $this->assertSame('100 100 400 200', $firstChild->getAttribute('viewBox'));",
          "1201:         $this->assertSame('-50', $firstChild->getAttribute('x'));",
          "1202:         $this->assertSame('0', $firstChild->getAttribute('y'));",
          "1203:         $this->assertSame('200', $firstChild->getAttribute('width'));",
          "1204:         $this->assertSame('100', $firstChild->getAttribute('height'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1230:         $doc = new \\DOMDocument();",
          "1231:         $doc->loadXML($resultFile->getContent());",
          "1238:     }",
          "",
          "[Removed Lines]",
          "1233:         $this->assertSame('100 100 400 200', $doc->documentElement->firstChild->getAttribute('viewBox'));",
          "1234:         $this->assertSame('-50', $doc->documentElement->firstChild->getAttribute('x'));",
          "1235:         $this->assertSame('0', $doc->documentElement->firstChild->getAttribute('y'));",
          "1236:         $this->assertSame('200', $doc->documentElement->firstChild->getAttribute('width'));",
          "1237:         $this->assertSame('100', $doc->documentElement->firstChild->getAttribute('height'));",
          "",
          "[Added Lines]",
          "1240:         $firstChild = $doc->documentElement->firstChild;",
          "1242:         $this->assertSame('100 100 400 200', $firstChild->getAttribute('viewBox'));",
          "1243:         $this->assertSame('-50', $firstChild->getAttribute('x'));",
          "1244:         $this->assertSame('0', $firstChild->getAttribute('y'));",
          "1245:         $this->assertSame('200', $firstChild->getAttribute('width'));",
          "1246:         $this->assertSame('100', $firstChild->getAttribute('height'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1270:         $doc = new \\DOMDocument();",
          "1271:         $doc->loadXML($resultFile->getContent());",
          "1278:     }",
          "",
          "[Removed Lines]",
          "1273:         $this->assertSame('0 0 200.1 100.1', $doc->documentElement->firstChild->getAttribute('viewBox'));",
          "1274:         $this->assertSame('-50', $doc->documentElement->firstChild->getAttribute('x'));",
          "1275:         $this->assertSame('0', $doc->documentElement->firstChild->getAttribute('y'));",
          "1276:         $this->assertSame('200', $doc->documentElement->firstChild->getAttribute('width'));",
          "1277:         $this->assertSame('100', $doc->documentElement->firstChild->getAttribute('height'));",
          "",
          "[Added Lines]",
          "1283:         $firstChild = $doc->documentElement->firstChild;",
          "1285:         $this->assertSame('0 0 200.1 100.1', $firstChild->getAttribute('viewBox'));",
          "1286:         $this->assertSame('-50', $firstChild->getAttribute('x'));",
          "1287:         $this->assertSame('0', $firstChild->getAttribute('y'));",
          "1288:         $this->assertSame('200', $firstChild->getAttribute('width'));",
          "1289:         $this->assertSame('100', $firstChild->getAttribute('height'));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1340:         $doc = new \\DOMDocument();",
          "1341:         $doc->loadXML(gzdecode($resultFile->getContent()));",
          "1348:     }",
          "",
          "[Removed Lines]",
          "1343:         $this->assertSame('100 100 400 200', $doc->documentElement->firstChild->getAttribute('viewBox'));",
          "1344:         $this->assertSame('-50', $doc->documentElement->firstChild->getAttribute('x'));",
          "1345:         $this->assertSame('0', $doc->documentElement->firstChild->getAttribute('y'));",
          "1346:         $this->assertSame('200', $doc->documentElement->firstChild->getAttribute('width'));",
          "1347:         $this->assertSame('100', $doc->documentElement->firstChild->getAttribute('height'));",
          "",
          "[Added Lines]",
          "1356:         $firstChild = $doc->documentElement->firstChild;",
          "1358:         $this->assertSame('100 100 400 200', $firstChild->getAttribute('viewBox'));",
          "1359:         $this->assertSame('-50', $firstChild->getAttribute('x'));",
          "1360:         $this->assertSame('0', $firstChild->getAttribute('y'));",
          "1361:         $this->assertSame('200', $firstChild->getAttribute('width'));",
          "1362:         $this->assertSame('100', $firstChild->getAttribute('height'));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1395:         unset($GLOBALS['TL_HOOKS']);",
          "1396:     }",
          "1404:     {",
          "1406:         $path = 'assets/'",
          "",
          "[Removed Lines]",
          "1403:     public static function executeResizeHookCallback($imageObj): string",
          "",
          "[Added Lines]",
          "1413:     public static function executeResizeHookCallback(Image $imageObj): string",
          "",
          "---------------"
        ],
        "core-bundle/tests/EventListener/BackendMenuListenerTest.php||core-bundle/tests/EventListener/BackendMenuListenerTest.php": [
          "File: core-bundle/tests/EventListener/BackendMenuListenerTest.php -> core-bundle/tests/EventListener/BackendMenuListenerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use PHPUnit\\Framework\\TestCase;",
          "20: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;",
          "21: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
          "23: class BackendMenuListenerTest extends TestCase",
          "24: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         $this->assertSame('node2', $childNode->getAttribute('class'));",
          "131:     }",
          "134:     {",
          "135:         $tokenStorage = $this->createMock(TokenStorageInterface::class);",
          "136:         $tokenStorage",
          "",
          "[Removed Lines]",
          "133:     public function testDoesNotModifyTheTreeIfNoUserOrTokenIsGiven(): void",
          "",
          "[Added Lines]",
          "134:     public function testDoesNotModifyTheTreeIfNoTokenIsGiven(): void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:         $this->assertCount(0, $tree->getChildren());",
          "150:     }",
          "151: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     public function testDoesNotModifyTheTreeIfNoBackendUserIsGiven(): void",
          "154:     {",
          "155:         $user = $this->createMock(UserInterface::class);",
          "157:         $token = $this->createMock(TokenInterface::class);",
          "158:         $token",
          "159:             ->method('getUser')",
          "160:             ->willReturn($user)",
          "161:         ;",
          "163:         $tokenStorage = $this->createMock(TokenStorageInterface::class);",
          "164:         $tokenStorage",
          "165:             ->method('getToken')",
          "166:             ->willReturn($token)",
          "167:         ;",
          "169:         $nodeFactory = new MenuFactory();",
          "170:         $event = new MenuEvent($nodeFactory, $nodeFactory->createItem('root'));",
          "172:         $listener = new BackendMenuListener($tokenStorage);",
          "173:         $listener->onBuild($event);",
          "175:         $tree = $event->getTree();",
          "177:         $this->assertCount(0, $tree->getChildren());",
          "178:     }",
          "",
          "---------------"
        ],
        "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
          "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php"
        ],
        "core-bundle/tests/Image/ImageSizesTest.php||core-bundle/tests/Image/ImageSizesTest.php": [
          "File: core-bundle/tests/Image/ImageSizesTest.php -> core-bundle/tests/Image/ImageSizesTest.php"
        ]
      }
    },
    {
      "candidate_hash": "7f84bd1e714131caf4ef81d288885146a0fd517c",
      "candidate_info": {
        "commit_hash": "7f84bd1e714131caf4ef81d288885146a0fd517c",
        "repo": "contao/contao",
        "commit_url": "https://github.com/contao/contao/commit/7f84bd1e714131caf4ef81d288885146a0fd517c",
        "files": [
          "core-bundle/src/Controller/FrontendController.php",
          "core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "core-bundle/src/Framework/ContaoFramework.php",
          "core-bundle/src/Resources/config/services.yml",
          "core-bundle/src/Resources/contao/classes/Frontend.php",
          "core-bundle/src/Resources/contao/classes/FrontendTemplate.php",
          "core-bundle/src/Resources/contao/controllers/FrontendCron.php",
          "core-bundle/src/Resources/contao/controllers/FrontendIndex.php",
          "core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "core-bundle/tests/Controller/FrontendControllerTest.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php"
        ],
        "message": "Fix the routing",
        "before_after_code_files": [
          "core-bundle/src/Controller/FrontendController.php||core-bundle/src/Controller/FrontendController.php",
          "core-bundle/src/DependencyInjection/ContaoCoreExtension.php||core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
          "core-bundle/src/Resources/contao/classes/Frontend.php||core-bundle/src/Resources/contao/classes/Frontend.php",
          "core-bundle/src/Resources/contao/classes/FrontendTemplate.php||core-bundle/src/Resources/contao/classes/FrontendTemplate.php",
          "core-bundle/src/Resources/contao/controllers/FrontendCron.php||core-bundle/src/Resources/contao/controllers/FrontendCron.php",
          "core-bundle/src/Resources/contao/controllers/FrontendIndex.php||core-bundle/src/Resources/contao/controllers/FrontendIndex.php",
          "core-bundle/src/Routing/Enhancer/InputEnhancer.php||core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "core-bundle/tests/Controller/FrontendControllerTest.php||core-bundle/tests/Controller/FrontendControllerTest.php",
          "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php||core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ],
          "candidate": [
            "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php",
            "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
            "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php"
          ]
        }
      },
      "candidate_diff": {
        "core-bundle/src/Controller/FrontendController.php||core-bundle/src/Controller/FrontendController.php": [
          "File: core-bundle/src/Controller/FrontendController.php -> core-bundle/src/Controller/FrontendController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:             throw new UnauthorizedHttpException('Not authorized');",
          "79:         }",
          "87:         $pageHandler = new $GLOBALS['TL_PTY']['error_401']();",
          "",
          "[Removed Lines]",
          "81:         $tokenChecker = $this->get('contao.security.token_checker');",
          "83:         \\define('FE_USER_LOGGED_IN', $tokenChecker->hasFrontendUser());",
          "84:         \\define('BE_USER_LOGGED_IN', $tokenChecker->hasBackendUser() && $tokenChecker->isPreviewMode());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/DependencyInjection/ContaoCoreExtension.php||core-bundle/src/DependencyInjection/ContaoCoreExtension.php": [
          "File: core-bundle/src/DependencyInjection/ContaoCoreExtension.php -> core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         return 'contao';",
          "32:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     public function getConfiguration(array $config, ContainerBuilder $container): Configuration",
          "38:     {",
          "39:         return new Configuration(",
          "40:              $container->getParameter('kernel.project_dir'),",
          "41:              $container->getParameter('kernel.default_locale')",
          "42:          );",
          "43:     }",
          "",
          "---------------"
        ],
        "core-bundle/src/Framework/ContaoFramework.php||core-bundle/src/Framework/ContaoFramework.php": [
          "File: core-bundle/src/Framework/ContaoFramework.php -> core-bundle/src/Framework/ContaoFramework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: use Contao\\CoreBundle\\Exception\\IncompleteInstallationException;",
          "18: use Contao\\CoreBundle\\Exception\\InvalidRequestTokenException;",
          "19: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
          "20: use Contao\\CoreBundle\\Session\\LazySessionAccess;",
          "21: use Contao\\Input;",
          "22: use Contao\\RequestToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: use Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;",
          "27: use Symfony\\Component\\HttpFoundation\\Request;",
          "28: use Symfony\\Component\\HttpFoundation\\RequestStack;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     private $scopeMatcher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     private $tokenChecker;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:     private $hookListeners = [];",
          "83:     {",
          "84:         $this->requestStack = $requestStack;",
          "85:         $this->scopeMatcher = $scopeMatcher;",
          "86:         $this->rootDir = $rootDir;",
          "87:         $this->errorLevel = $errorLevel;",
          "88:     }",
          "",
          "[Removed Lines]",
          "82:     public function __construct(RequestStack $requestStack, ScopeMatcher $scopeMatcher, string $rootDir, int $errorLevel)",
          "",
          "[Added Lines]",
          "89:     public function __construct(RequestStack $requestStack, ScopeMatcher $scopeMatcher, TokenChecker $tokenChecker, string $rootDir, int $errorLevel)",
          "93:         $this->tokenChecker = $tokenChecker;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:             \\define('TL_SCRIPT', $this->getRoute());",
          "169:         }",
          "173:             \\define('BE_USER_LOGGED_IN', false);",
          "174:             \\define('FE_USER_LOGGED_IN', false);",
          "175:         }",
          "",
          "[Removed Lines]",
          "172:         if (null === $this->request || !$this->scopeMatcher->isFrontendRequest($this->request)) {",
          "",
          "[Added Lines]",
          "180:         if ('FE' === $this->getMode() && ($session = $this->getSession()) && $this->request->hasPreviousSession()) {",
          "181:             $session->start();",
          "183:             \\define('BE_USER_LOGGED_IN', $this->tokenChecker->hasBackendUser() && $this->tokenChecker->isPreviewMode());",
          "184:             \\define('FE_USER_LOGGED_IN', $this->tokenChecker->hasFrontendUser());",
          "185:         } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:     private function initializeLegacySessionAccess(): void",
          "296:     {",
          "298:             return;",
          "299:         }",
          "303:         if (!$session->isStarted()) {",
          "304:             $_SESSION = new LazySessionAccess($session);",
          "305:         } else {",
          "",
          "[Removed Lines]",
          "297:         if (null === $this->request || !$this->request->hasSession()) {",
          "301:         $session = $this->request->getSession();",
          "",
          "[Added Lines]",
          "310:         if (!$session = $this->getSession()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "399:         }",
          "400:     }",
          "402:     private function canSkipTokenCheck(): bool",
          "403:     {",
          "404:         return null === $this->request",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:     private function getSession(): ?SessionInterface",
          "414:     {",
          "415:         if (null === $this->request || !$this->request->hasSession()) {",
          "416:             return null;",
          "417:         }",
          "419:         return $this->request->getSession();",
          "420:     }",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/classes/Frontend.php||core-bundle/src/Resources/contao/classes/Frontend.php": [
          "File: core-bundle/src/Resources/contao/classes/Frontend.php -> core-bundle/src/Resources/contao/classes/Frontend.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:    }",
          "364:   }",
          "366:   return $objRootPage;",
          "367:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:   if ($objRootPage->type != 'root')",
          "367:   {",
          "368:    return PageModel::findByPk($objRootPage->rootId);",
          "369:   }",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/classes/FrontendTemplate.php||core-bundle/src/Resources/contao/classes/FrontendTemplate.php": [
          "File: core-bundle/src/Resources/contao/classes/FrontendTemplate.php -> core-bundle/src/Resources/contao/classes/FrontendTemplate.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:   if ($this->blnCheckRequest && Input::hasUnusedGet())",
          "144:   {",
          "146:   }",
          "",
          "[Removed Lines]",
          "145:    throw new \\UnusedArgumentsException();",
          "",
          "[Added Lines]",
          "145:    throw new \\UnusedArgumentsException('Unused arguments: '.implode(', ', Input::getUnusedGet()));",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/controllers/FrontendCron.php||core-bundle/src/Resources/contao/controllers/FrontendCron.php": [
          "File: core-bundle/src/Resources/contao/controllers/FrontendCron.php -> core-bundle/src/Resources/contao/controllers/FrontendCron.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: class FrontendCron extends Frontend",
          "21: {",
          "",
          "[Removed Lines]",
          "26:  public function __construct()",
          "27:  {",
          "28:   parent::__construct();",
          "31:   if (!\\defined('BE_USER_LOGGED_IN'))",
          "32:   {",
          "33:    \\define('BE_USER_LOGGED_IN', false);",
          "34:   }",
          "36:   if (!\\defined('FE_USER_LOGGED_IN'))",
          "37:   {",
          "38:    \\define('FE_USER_LOGGED_IN', false);",
          "39:   }",
          "40:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/src/Resources/contao/controllers/FrontendIndex.php||core-bundle/src/Resources/contao/controllers/FrontendIndex.php": [
          "File: core-bundle/src/Resources/contao/controllers/FrontendIndex.php -> core-bundle/src/Resources/contao/controllers/FrontendIndex.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  public function __construct()",
          "31:  {",
          "34:   parent::__construct();",
          "41:  }",
          "",
          "[Removed Lines]",
          "33:   $this->import(BackendUser::class, 'User');",
          "36:   $objTokenChecker = System::getContainer()->get('contao.security.token_checker');",
          "39:   \\define('BE_USER_LOGGED_IN', $objTokenChecker->hasBackendUser() && $objTokenChecker->isPreviewMode());",
          "40:   \\define('FE_USER_LOGGED_IN', $objTokenChecker->hasFrontendUser());",
          "",
          "[Added Lines]",
          "33:   $this->import(FrontendUser::class, 'User');",
          "",
          "---------------"
        ],
        "core-bundle/src/Routing/Enhancer/InputEnhancer.php||core-bundle/src/Routing/Enhancer/InputEnhancer.php": [
          "File: core-bundle/src/Routing/Enhancer/InputEnhancer.php -> core-bundle/src/Routing/Enhancer/InputEnhancer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use Symfony\\Cmf\\Component\\Routing\\Enhancer\\RouteEnhancerInterface;",
          "20: use Symfony\\Component\\HttpFoundation\\Request;",
          "21: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
          "23: class InputEnhancer implements RouteEnhancerInterface",
          "24: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: use Terminal42\\HeaderReplay\\EventListener\\HeaderReplayListener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:             return $defaults;",
          "48:         }",
          "50:         $this->framework->initialize(true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         if (\\in_array(HeaderReplayListener::CONTENT_TYPE, $request->getAcceptableContentTypes(), true)) {",
          "53:             return $defaults;",
          "54:         }",
          "",
          "---------------"
        ],
        "core-bundle/tests/Controller/FrontendControllerTest.php||core-bundle/tests/Controller/FrontendControllerTest.php": [
          "File: core-bundle/tests/Controller/FrontendControllerTest.php -> core-bundle/tests/Controller/FrontendControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Contao\\CoreBundle\\Controller\\FrontendController;",
          "16: use Contao\\CoreBundle\\Fixtures\\Controller\\PageError401Controller;",
          "17: use Contao\\CoreBundle\\Fixtures\\Exception\\PageError401Exception;",
          "19: use Contao\\CoreBundle\\Tests\\TestCase;",
          "20: use Symfony\\Component\\HttpKernel\\Exception\\UnauthorizedHttpException;",
          "21: use Symfony\\Component\\Security\\Core\\Exception\\LogoutException;",
          "",
          "[Removed Lines]",
          "18: use Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:             ->method('initialize')",
          "54:         ;",
          "75:         $container = $this->mockContainer();",
          "76:         $container->set('contao.framework', $framework);",
          "79:         $controller = new FrontendController();",
          "80:         $controller->setContainer($container);",
          "",
          "[Removed Lines]",
          "56:         $tokenChecker = $this->createMock(TokenChecker::class);",
          "57:         $tokenChecker",
          "58:             ->expects($this->once())",
          "59:             ->method('hasFrontendUser')",
          "60:             ->willReturn(true)",
          "61:         ;",
          "63:         $tokenChecker",
          "64:             ->expects($this->once())",
          "65:             ->method('hasBackendUser')",
          "66:             ->willReturn(true)",
          "67:         ;",
          "69:         $tokenChecker",
          "70:             ->expects($this->once())",
          "71:             ->method('isPreviewMode')",
          "72:             ->willReturn(false)",
          "73:         ;",
          "77:         $container->set('contao.security.token_checker', $tokenChecker);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         $response = $controller->loginAction();",
          "86:         $this->assertSame(401, $response->getStatusCode());",
          "92:         unset($GLOBALS['TL_PTY']);",
          "93:     }",
          "",
          "[Removed Lines]",
          "87:         $this->assertTrue(\\defined('FE_USER_LOGGED_IN'));",
          "88:         $this->assertTrue(FE_USER_LOGGED_IN);",
          "89:         $this->assertTrue(\\defined('BE_USER_LOGGED_IN'));",
          "90:         $this->assertFalse(BE_USER_LOGGED_IN);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:             ->method('initialize')",
          "105:         ;",
          "126:         $container = $this->mockContainer();",
          "127:         $container->set('contao.framework', $framework);",
          "130:         $controller = new FrontendController();",
          "131:         $controller->setContainer($container);",
          "",
          "[Removed Lines]",
          "107:         $tokenChecker = $this->createMock(TokenChecker::class);",
          "108:         $tokenChecker",
          "109:             ->expects($this->once())",
          "110:             ->method('hasFrontendUser')",
          "111:             ->willReturn(true)",
          "112:         ;",
          "114:         $tokenChecker",
          "115:             ->expects($this->once())",
          "116:             ->method('hasBackendUser')",
          "117:             ->willReturn(true)",
          "118:         ;",
          "120:         $tokenChecker",
          "121:             ->expects($this->once())",
          "122:             ->method('isPreviewMode')",
          "123:             ->willReturn(false)",
          "124:         ;",
          "128:         $container->set('contao.security.token_checker', $tokenChecker);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php||core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php": [
          "File: core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php -> core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:         $this->assertTrue($definition->isPublic());",
          "871:         $this->assertSame('request_stack', (string) $definition->getArgument(0));",
          "872:         $this->assertSame('contao.routing.scope_matcher', (string) $definition->getArgument(1));",
          "876:         $conditionals = $definition->getInstanceofConditionals();",
          "",
          "[Removed Lines]",
          "873:         $this->assertSame('%kernel.project_dir%', (string) $definition->getArgument(2));",
          "874:         $this->assertSame('%contao.error_level%', (string) $definition->getArgument(3));",
          "",
          "[Added Lines]",
          "873:         $this->assertSame('contao.security.token_checker', (string) $definition->getArgument(2));",
          "874:         $this->assertSame('%kernel.project_dir%', (string) $definition->getArgument(3));",
          "875:         $this->assertSame('%contao.error_level%', (string) $definition->getArgument(4));",
          "",
          "---------------"
        ],
        "core-bundle/tests/Framework/ContaoFrameworkTest.php||core-bundle/tests/Framework/ContaoFrameworkTest.php": [
          "File: core-bundle/tests/Framework/ContaoFrameworkTest.php -> core-bundle/tests/Framework/ContaoFrameworkTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use Contao\\CoreBundle\\Framework\\Adapter;",
          "21: use Contao\\CoreBundle\\Framework\\ContaoFramework;",
          "22: use Contao\\CoreBundle\\Routing\\ScopeMatcher;",
          "23: use Contao\\CoreBundle\\Session\\Attribute\\ArrayAttributeBag;",
          "24: use Contao\\CoreBundle\\Session\\LazySessionAccess;",
          "25: use Contao\\CoreBundle\\Session\\MockNativeSessionStorage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: use Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         $session = new Session(new MockNativeSessionStorage());",
          "48:         $session->registerBag($beBag);",
          "49:         $session->registerBag($feBag);",
          "52:         $request = Request::create('/index.html');",
          "53:         $request->attributes->set('_route', 'dummy');",
          "54:         $request->attributes->set('_scope', 'frontend');",
          "55:         $request->setSession($session);",
          "58:         $framework->setContainer($this->mockContainer());",
          "59:         $framework->initialize();",
          "",
          "[Removed Lines]",
          "50:         $session->start();",
          "57:         $framework = $this->mockFramework($request);",
          "",
          "[Added Lines]",
          "55:         $request->cookies->set($session->getName(), 'foobar');",
          "58:         $tokenChecker = $this->createMock(TokenChecker::class);",
          "59:         $tokenChecker",
          "60:             ->expects($this->once())",
          "61:             ->method('hasBackendUser')",
          "62:             ->willReturn(true)",
          "63:         ;",
          "65:         $tokenChecker",
          "66:             ->expects($this->once())",
          "67:             ->method('isPreviewMode')",
          "68:             ->willReturn(true)",
          "69:         ;",
          "71:         $tokenChecker",
          "72:             ->expects($this->once())",
          "73:             ->method('hasFrontendUser')",
          "74:             ->willReturn(true)",
          "75:         ;",
          "77:         $framework = $this->mockFramework($request, null, $tokenChecker);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:         $this->assertTrue(\\defined('TL_ROOT'));",
          "64:         $this->assertTrue(\\defined('TL_REFERER_ID'));",
          "65:         $this->assertTrue(\\defined('TL_SCRIPT'));",
          "68:         $this->assertTrue(\\defined('TL_PATH'));",
          "69:         $this->assertSame('FE', TL_MODE);",
          "70:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "71:         $this->assertSame('', TL_REFERER_ID);",
          "72:         $this->assertSame('index.html', TL_SCRIPT);",
          "73:         $this->assertSame('', TL_PATH);",
          "74:         $this->assertSame('en', $GLOBALS['TL_LANGUAGE']);",
          "75:         $this->assertInstanceOf(ArrayAttributeBag::class, $_SESSION['BE_DATA']);",
          "",
          "[Removed Lines]",
          "66:         $this->assertFalse(\\defined('BE_USER_LOGGED_IN'));",
          "67:         $this->assertFalse(\\defined('FE_USER_LOGGED_IN'));",
          "",
          "[Added Lines]",
          "86:         $this->assertTrue(\\defined('BE_USER_LOGGED_IN'));",
          "87:         $this->assertTrue(\\defined('FE_USER_LOGGED_IN'));",
          "93:         $this->assertTrue(BE_USER_LOGGED_IN);",
          "94:         $this->assertTrue(FE_USER_LOGGED_IN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "105:         $this->assertSame('foobar', TL_REFERER_ID);",
          "106:         $this->assertSame('contao/login', TL_SCRIPT);",
          "107:         $this->assertSame('', TL_PATH);",
          "108:         $this->assertSame('de', $GLOBALS['TL_LANGUAGE']);",
          "109:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:         $this->assertFalse(BE_USER_LOGGED_IN);",
          "130:         $this->assertFalse(FE_USER_LOGGED_IN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "139:         $this->assertNull(TL_REFERER_ID);",
          "140:         $this->assertNull(TL_SCRIPT);",
          "141:         $this->assertNull(TL_PATH);",
          "142:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:         $this->assertFalse(BE_USER_LOGGED_IN);",
          "166:         $this->assertFalse(FE_USER_LOGGED_IN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "172:         $this->assertNull(TL_REFERER_ID);",
          "173:         $this->assertNull(TL_SCRIPT);",
          "174:         $this->assertNull(TL_PATH);",
          "175:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:         $this->assertFalse(BE_USER_LOGGED_IN);",
          "201:         $this->assertFalse(FE_USER_LOGGED_IN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "209:         $this->assertSame('', TL_REFERER_ID);",
          "210:         $this->assertSame('app_dev.php/index.html', TL_SCRIPT);",
          "211:         $this->assertSame('/contao4/web', TL_PATH);",
          "212:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:         $this->assertFalse(BE_USER_LOGGED_IN);",
          "240:         $this->assertFalse(FE_USER_LOGGED_IN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "237:         $this->assertSame($this->getTempDir(), TL_ROOT);",
          "238:         $this->assertSame('foobar', TL_REFERER_ID);",
          "239:         $this->assertSame('contao/login', TL_SCRIPT);",
          "240:         $this->assertSame('', TL_PATH);",
          "241:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:         $this->assertFalse(BE_USER_LOGGED_IN);",
          "271:         $this->assertFalse(FE_USER_LOGGED_IN);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "248:     {",
          "249:         $scopeMatcher = $this->createMock(ScopeMatcher::class);",
          "250:         $scopeMatcher",
          "252:             ->method('isBackendRequest')",
          "253:             ->willReturn(false)",
          "254:         ;",
          "",
          "[Removed Lines]",
          "251:             ->expects($this->once())",
          "",
          "[Added Lines]",
          "283:             ->expects($this->exactly(2))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "329:         $framework = new ContaoFramework(",
          "330:             $requestStack,",
          "331:             $this->mockScopeMatcher(),",
          "332:             $this->getTempDir(),",
          "333:             error_reporting()",
          "334:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:             $this->createMock(TokenChecker::class),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "364:         $framework = new ContaoFramework(",
          "365:             $requestStack,",
          "366:             $this->mockScopeMatcher(),",
          "367:             $this->getTempDir(),",
          "368:             error_reporting()",
          "369:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:             $this->createMock(TokenChecker::class),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "399:         $framework = new ContaoFramework(",
          "400:             $requestStack,",
          "401:             $this->mockScopeMatcher(),",
          "402:             $this->getTempDir(),",
          "403:             error_reporting()",
          "404:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:             $this->createMock(TokenChecker::class),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "444:         $framework = new ContaoFramework(",
          "445:             $requestStack,",
          "446:             $this->mockScopeMatcher(),",
          "447:             $this->getTempDir(),",
          "448:             error_reporting()",
          "449:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:             $this->createMock(TokenChecker::class),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "479:         $framework = new ContaoFramework(",
          "480:             $requestStack,",
          "481:             $this->mockScopeMatcher(),",
          "482:             $this->getTempDir(),",
          "483:             error_reporting()",
          "484:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:             $this->createMock(TokenChecker::class),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "706:         );",
          "707:     }",
          "710:     {",
          "711:         $requestStack = new RequestStack();",
          "",
          "[Removed Lines]",
          "709:     private function mockFramework(Request $request = null, ScopeMatcher $scopeMatcher = null): ContaoFramework",
          "",
          "[Added Lines]",
          "746:     private function mockFramework(Request $request = null, ScopeMatcher $scopeMatcher = null, TokenChecker $tokenChecker = null): ContaoFramework",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "717:         $framework = new ContaoFramework(",
          "718:             $requestStack,",
          "719:             $scopeMatcher ?? $this->mockScopeMatcher(),",
          "720:             $this->getTempDir(),",
          "721:             error_reporting()",
          "722:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:             $tokenChecker ?? $this->createMock(TokenChecker::class),",
          "",
          "---------------"
        ],
        "core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php||core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php": [
          "File: core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php -> core-bundle/tests/Routing/Enhancer/InputEnhancerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use Contao\\PageModel;",
          "20: use Symfony\\Component\\HttpFoundation\\Request;",
          "21: use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;",
          "23: class InputEnhancerTest extends TestCase",
          "24: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: use Terminal42\\HeaderReplay\\EventListener\\HeaderReplayListener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         unset($_GET, $GLOBALS['TL_AUTO_ITEM']);",
          "33:     }",
          "36:     {",
          "37:         $framework = $this->mockContaoFramework();",
          "38:         $framework",
          "",
          "[Removed Lines]",
          "35:     public function testDoesNotInitializeFrameworkWithoutPageModel(): void",
          "",
          "[Added Lines]",
          "36:     public function testReturnsTheDefaultsIfThereIsNoPageModel(): void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:         ;",
          "43:         $enhancer = new InputEnhancer($framework, false);",
          "45:     }",
          "51:     {",
          "52:         $input = $this->mockAdapter(['setGet']);",
          "53:         $input",
          "",
          "[Removed Lines]",
          "44:         $enhancer->enhance([], $this->createMock(Request::class));",
          "50:     public function testAddsLocaleToInputIfEnabled(bool $prependLocale, string $locale): void",
          "",
          "[Added Lines]",
          "45:         $enhancer->enhance([], Request::create('/'));",
          "46:     }",
          "48:     public function testReturnsTheDefaultsUponHeaderReplay(): void",
          "49:     {",
          "50:         $framework = $this->mockContaoFramework();",
          "51:         $framework",
          "52:             ->expects($this->never())",
          "53:             ->method('initialize')",
          "54:         ;",
          "56:         $defaults = [",
          "57:             'pageModel' => $this->createMock(PageModel::class),",
          "58:         ];",
          "60:         $request = Request::create('/');",
          "61:         $request->headers->set('Accept', HeaderReplayListener::CONTENT_TYPE);",
          "63:         $enhancer = new InputEnhancer($framework, false);",
          "64:         $enhancer->enhance($defaults, $request);",
          "70:     public function testAddsTheLocaleIfEnabled(bool $prependLocale, string $locale): void",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:         ];",
          "66:         $enhancer = new InputEnhancer($framework, $prependLocale);",
          "68:     }",
          "",
          "[Removed Lines]",
          "67:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "",
          "[Added Lines]",
          "87:         $enhancer->enhance($defaults, Request::create('/'));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "80:         ];",
          "81:     }",
          "84:     {",
          "85:         $input = $this->mockAdapter(['setGet']);",
          "86:         $input",
          "",
          "[Removed Lines]",
          "83:     public function testDoesNotAddInputLanguageIfLocaleIsMissing(): void",
          "",
          "[Added Lines]",
          "103:     public function testDoesNotAddTheLocaleIfItIsNotPresent(): void",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "95:         ];",
          "97:         $enhancer = new InputEnhancer($framework, true);",
          "99:     }",
          "105:     {",
          "107:         array_walk(",
          "",
          "[Removed Lines]",
          "98:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "104:     public function testAddsParametersToInput(string $parameters, bool $useAutoItem, array ...$setters): void",
          "",
          "[Added Lines]",
          "118:         $enhancer->enhance($defaults, Request::create('/'));",
          "124:     public function testAddsParameters(string $parameters, bool $useAutoItem, array ...$setters): void",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "131:         ];",
          "133:         $enhancer = new InputEnhancer($framework, false);",
          "135:     }",
          "",
          "[Removed Lines]",
          "134:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "",
          "[Added Lines]",
          "154:         $enhancer->enhance($defaults, Request::create('/'));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "150:         ];",
          "151:     }",
          "154:     {",
          "155:         $framework = $this->mockContaoFramework();",
          "",
          "[Removed Lines]",
          "153:     public function testThrowsExceptionIfParameterIsInQuery(): void",
          "",
          "[Added Lines]",
          "173:     public function testThrowsAnExceptionUponDuplicateParameters(): void",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "166:         $this->expectException(ResourceNotFoundException::class);",
          "167:         $this->expectExceptionMessage('Duplicate parameter \"foo\" in path');",
          "170:     }",
          "173:     {",
          "174:         $input = $this->mockAdapter(['setGet']);",
          "175:         $input",
          "",
          "[Removed Lines]",
          "169:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "172:     public function testThrowsExceptionOnDuplicateAutoItem(): void",
          "",
          "[Added Lines]",
          "189:         $enhancer->enhance($defaults, Request::create('/'));",
          "192:     public function testThrowsAnExceptionIfAnAutoItemKeywordIsPresent(): void",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "192:         $this->expectException(ResourceNotFoundException::class);",
          "193:         $this->expectExceptionMessage('\"bar\" is an auto_item keyword (duplicate content)');",
          "196:     }",
          "197: }",
          "",
          "[Removed Lines]",
          "195:         $enhancer->enhance($defaults, $this->createMock(Request::class));",
          "",
          "[Added Lines]",
          "215:         $enhancer->enhance($defaults, Request::create('/'));",
          "",
          "---------------"
        ]
      }
    }
  ]
}