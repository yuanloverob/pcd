{
  "cve_id": "CVE-2022-1929",
  "cve_desc": "An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the devcert npm package, when an attacker is able to supply arbitrary input to the certificateFor method",
  "repo": "davewasmer/devcert",
  "patch_hash": "b0763215f6683271d296fda98f7ef7bcd4a55977",
  "patch_info": {
    "commit_hash": "b0763215f6683271d296fda98f7ef7bcd4a55977",
    "repo": "davewasmer/devcert",
    "commit_url": "https://github.com/davewasmer/devcert/commit/b0763215f6683271d296fda98f7ef7bcd4a55977",
    "files": [
      "package-lock.json",
      "package.json",
      "src/constants.ts",
      "src/index.ts"
    ],
    "message": "switch from vulnerable VALID_DOMAIN regex to is-valid-domain lib (#79)",
    "before_after_code_files": [
      "src/constants.ts||src/constants.ts",
      "src/index.ts||src/index.ts"
    ]
  },
  "patch_diff": {
    "src/constants.ts||src/constants.ts": [
      "File: src/constants.ts -> src/constants.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: import eol from 'eol';",
      "7: import {mktmp, numericHash} from './utils';",
      "13: export const isMac = process.platform === 'darwin';",
      "14: export const isLinux = process.platform === 'linux';",
      "",
      "[Removed Lines]",
      "9: export const VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;",
      "10: export const VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/index.ts||src/index.ts": [
      "File: src/index.ts -> src/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:   domainsDir,",
      "12:   rootCAKeyPath,",
      "13:   rootCACertPath,",
      "16: } from './constants';",
      "17: import currentPlatform from './platforms';",
      "18: import installCertificateAuthority, { ensureCACertReadable, uninstall } from './certificate-authority';",
      "19: import generateDomainCertificate from './certificates';",
      "20: import UI, { UserInterface } from './user-interface';",
      "21: export { uninstall };",
      "23: const debug = createDebug('devcert');",
      "",
      "[Removed Lines]",
      "14:   VALID_DOMAIN,",
      "15:   VALID_IP",
      "",
      "[Added Lines]",
      "19: import isValidDomain from 'is-valid-domain';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70: export async function certificateFor<O extends Options>(requestedDomains: string | string[], options: O = {} as O): Promise<IReturnData<O>> {",
      "71:   const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];",
      "75:   domains.forEach((domain) => {",
      "77:       throw new Error(`\"${domain}\" is not a valid domain name.`);",
      "78:     }",
      "79:   });",
      "",
      "[Removed Lines]",
      "72:   if (domains.some((d) => VALID_IP.test(d))) {",
      "73:     throw new Error('IP addresses are not supported currently');",
      "74:   }",
      "76:     if (!VALID_DOMAIN.test(domain)) {",
      "",
      "[Added Lines]",
      "72:     if (!isValidDomain(domain, { subdomain: false, wildcard: false, allowUnicode: true, topLevel: false })) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89fe0c910255979c466d8dddc6196e9f4647e483",
      "candidate_info": {
        "commit_hash": "89fe0c910255979c466d8dddc6196e9f4647e483",
        "repo": "davewasmer/devcert",
        "commit_url": "https://github.com/davewasmer/devcert/commit/89fe0c910255979c466d8dddc6196e9f4647e483",
        "files": [
          "package-lock.json",
          "package.json",
          "src/constants.ts",
          "src/index.ts"
        ],
        "message": "switch from vulnerable VALID_DOMAIN regex to is-valid-domain lib",
        "before_after_code_files": [
          "src/constants.ts||src/constants.ts",
          "src/index.ts||src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/davewasmer/devcert/pull/79"
        ],
        "olp_code_files": {
          "patch": [
            "src/constants.ts||src/constants.ts",
            "src/index.ts||src/index.ts"
          ],
          "candidate": [
            "src/constants.ts||src/constants.ts",
            "src/index.ts||src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/constants.ts||src/constants.ts": [
          "File: src/constants.ts -> src/constants.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import eol from 'eol';",
          "7: import {mktmp, numericHash} from './utils';",
          "13: export const isMac = process.platform === 'darwin';",
          "14: export const isLinux = process.platform === 'linux';",
          "",
          "[Removed Lines]",
          "9: export const VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;",
          "10: export const VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   domainsDir,",
          "12:   rootCAKeyPath,",
          "13:   rootCACertPath,",
          "16: } from './constants';",
          "17: import currentPlatform from './platforms';",
          "18: import installCertificateAuthority, { ensureCACertReadable, uninstall } from './certificate-authority';",
          "19: import generateDomainCertificate from './certificates';",
          "20: import UI, { UserInterface } from './user-interface';",
          "21: export { uninstall };",
          "23: const debug = createDebug('devcert');",
          "",
          "[Removed Lines]",
          "14:   VALID_DOMAIN,",
          "15:   VALID_IP",
          "",
          "[Added Lines]",
          "19: import isValidDomain from 'is-valid-domain';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: export async function certificateFor<O extends Options>(requestedDomains: string | string[], options: O = {} as O): Promise<IReturnData<O>> {",
          "71:   const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];",
          "75:   domains.forEach((domain) => {",
          "77:       throw new Error(`\"${domain}\" is not a valid domain name.`);",
          "78:     }",
          "79:   });",
          "",
          "[Removed Lines]",
          "72:   if (domains.some((d) => VALID_IP.test(d))) {",
          "73:     throw new Error('IP addresses are not supported currently');",
          "74:   }",
          "76:     if (!VALID_DOMAIN.test(domain)) {",
          "",
          "[Added Lines]",
          "72:     if (!isValidDomain(domain, { subdomain: false, wildcard: false, allowUnicode: true, topLevel: false })) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83dd84111b4e61201c1a44cb6b94f384563e3a8a",
      "candidate_info": {
        "commit_hash": "83dd84111b4e61201c1a44cb6b94f384563e3a8a",
        "repo": "davewasmer/devcert",
        "commit_url": "https://github.com/davewasmer/devcert/commit/83dd84111b4e61201c1a44cb6b94f384563e3a8a",
        "files": [
          "src/index.ts"
        ],
        "message": "Allow subdomains and localhost in new domain validator (#84)\n\n* fix subdomain\n\n* add localhost",
        "before_after_code_files": [
          "src/index.ts||src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/index.ts||src/index.ts"
          ],
          "candidate": [
            "src/index.ts||src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: export async function certificateFor<O extends Options>(requestedDomains: string | string[], options: O = {} as O): Promise<IReturnData<O>> {",
          "70:   const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];",
          "71:   domains.forEach((domain) => {",
          "73:       throw new Error(`\"${domain}\" is not a valid domain name.`);",
          "74:     }",
          "75:   });",
          "",
          "[Removed Lines]",
          "72:     if (!isValidDomain(domain, { subdomain: false, wildcard: false, allowUnicode: true, topLevel: false })) {",
          "",
          "[Added Lines]",
          "72:     if (domain !== \"localhost\" && !isValidDomain(domain, { subdomain: true, wildcard: false, allowUnicode: true, topLevel: false })) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be273aada69eef077a1c931936145176c1bf4c2f",
      "candidate_info": {
        "commit_hash": "be273aada69eef077a1c931936145176c1bf4c2f",
        "repo": "davewasmer/devcert",
        "commit_url": "https://github.com/davewasmer/devcert/commit/be273aada69eef077a1c931936145176c1bf4c2f",
        "files": [
          "README.md",
          "openssl-configurations/domain-certificate-signing-requests.conf",
          "openssl-configurations/domain-certificates.conf",
          "package-lock.json",
          "package.json",
          "src/certificates.ts",
          "src/constants.ts",
          "src/index.ts",
          "src/utils.ts"
        ],
        "message": "Feature: Allow multiple Subject Alternative Name (SAN) extensions (#52)\n\n* Feature: Adding multiple domains using subject alternative name (SAN)\n\n* Update README with Docker and SAN instructions\n\n* Update readme\n\n* Readme polish\n\n* Tweaks\n\n* Formatting fixes\n\n* Adjust pathForDomain\n\n* Create a stable hash for directory path of SAN listed domains\n\n* Merge SAN with validation features\n\n* Tweak for latest typescript",
        "before_after_code_files": [
          "openssl-configurations/domain-certificate-signing-requests.conf||openssl-configurations/domain-certificate-signing-requests.conf",
          "openssl-configurations/domain-certificates.conf||openssl-configurations/domain-certificates.conf",
          "src/certificates.ts||src/certificates.ts",
          "src/constants.ts||src/constants.ts",
          "src/index.ts||src/index.ts",
          "src/utils.ts||src/utils.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/constants.ts||src/constants.ts",
            "src/index.ts||src/index.ts"
          ],
          "candidate": [
            "src/constants.ts||src/constants.ts",
            "src/index.ts||src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "openssl-configurations/domain-certificate-signing-requests.conf||openssl-configurations/domain-certificate-signing-requests.conf": [
          "File: openssl-configurations/domain-certificate-signing-requests.conf -> openssl-configurations/domain-certificate-signing-requests.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: subjectKeyIdentifier = hash",
          "23: [ subject_alt_names ]",
          "",
          "[Removed Lines]",
          "24: DNS.1 = <%= domain %>",
          "25: DNS.2 = *.<%= domain %>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "openssl-configurations/domain-certificates.conf||openssl-configurations/domain-certificates.conf": [
          "File: openssl-configurations/domain-certificates.conf -> openssl-configurations/domain-certificates.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: subjectAltName = @subject_alt_names",
          "37: [ subject_alt_names ]",
          "",
          "[Removed Lines]",
          "38: DNS.1 = <%= domain %>",
          "39: DNS.2 = *.<%= domain %>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/certificates.ts||src/certificates.ts": [
          "File: src/certificates.ts -> src/certificates.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import createDebug from 'debug';",
          "3: import { sync as mkdirp } from 'mkdirp';",
          "4: import { chmodSync as chmod } from 'fs';",
          "6: import { openssl } from './utils';",
          "7: import { withCertificateAuthorityCredentials } from './certificate-authority';",
          "9: const debug = createDebug('devcert:certificates');",
          "",
          "[Removed Lines]",
          "5: import { pathForDomain, withDomainSigningRequestConfig, withDomainCertificateConfig } from './constants';",
          "",
          "[Added Lines]",
          "7: import {pathForDomain, getStableDomainPath, withDomainSigningRequestConfig, withDomainCertificateConfig} from './constants';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:   generateKey(domainKeyPath);",
          "28:     openssl(['req', '-new', '-config', configpath, '-key', domainKeyPath, '-out', csrFile]);",
          "29:   });",
          "36:       openssl(['ca', '-config', domainCertConfigPath, '-in', csrFile, '-out', domainCertPath, '-keyfile', caKeyPath, '-cert', caCertPath, '-days', '825', '-batch'])",
          "37:     });",
          "38:   });",
          "",
          "[Removed Lines]",
          "18: export default async function generateDomainCertificate(domain: string): Promise<void> {",
          "19:   mkdirp(pathForDomain(domain));",
          "21:   debug(`Generating private key for ${ domain }`);",
          "22:   let domainKeyPath = pathForDomain(domain, 'private-key.key');",
          "25:   debug(`Generating certificate signing request for ${ domain }`);",
          "26:   let csrFile = pathForDomain(domain, `certificate-signing-request.csr`);",
          "27:   withDomainSigningRequestConfig(domain, (configpath) => {",
          "31:   debug(`Generating certificate for ${ domain } from signing request and signing with root CA`);",
          "32:   let domainCertPath = pathForDomain(domain, `certificate.crt`);",
          "34:   await withCertificateAuthorityCredentials(({ caKeyPath, caCertPath }) => {",
          "35:     withDomainCertificateConfig(domain, (domainCertConfigPath) => {",
          "",
          "[Added Lines]",
          "18: export default async function generateDomainCertificate(domains: string[]): Promise<void> {",
          "19:   const domainPath = getStableDomainPath(domains);",
          "20:   mkdirp(pathForDomain(domainPath));",
          "22:   debug(`Generating private key for ${domains}`);",
          "23:   let domainKeyPath = pathForDomain(domainPath, 'private-key.key');",
          "26:   debug(`Generating certificate signing request for ${domains}`);",
          "27:   let csrFile = pathForDomain(domainPath, `certificate-signing-request.csr`);",
          "28:   withDomainSigningRequestConfig(domains, (configpath) => {",
          "32:   debug(`Generating certificate for ${domains} from signing request and signing with root CA`);",
          "33:   let domainCertPath = pathForDomain(domainPath, `certificate.crt`);",
          "35:   await withCertificateAuthorityCredentials(({caKeyPath, caCertPath}) => {",
          "36:     withDomainCertificateConfig(domains, (domainCertConfigPath) => {",
          "",
          "---------------"
        ],
        "src/constants.ts||src/constants.ts": [
          "File: src/constants.ts -> src/constants.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { template as makeTemplate } from 'lodash';",
          "5: import applicationConfigPath = require('application-config-path');",
          "6: import eol from 'eol';",
          "9: export const VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;",
          "10: export const VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;",
          "",
          "[Removed Lines]",
          "7: import { mktmp } from './utils';",
          "",
          "[Added Lines]",
          "7: import {mktmp, numericHash} from './utils';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: export const configDir = applicationConfigPath('devcert');",
          "19: export const configPath: (...pathSegments: string[]) => string = path.join.bind(path, configDir);",
          "21: export const domainsDir = configPath('domains');",
          "22: export const pathForDomain: (domain: string, ...pathSegments: string[]) => string = path.join.bind(path, domainsDir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: const getFilteredDomains = (domains: string[]) =>",
          "22:   Array.from(",
          "23:     domains",
          "24:       .sort((a, b) => b.length - a.length)",
          "25:       .reduce((filteredList, domain) =>",
          "26:         Array.from(filteredList)",
          "27:           .reduce((matches, item) => {",
          "28:             if (item.indexOf(domain) > -1) {",
          "29:               matches.add(domain);",
          "30:             } else if (domain.indexOf(item) === -1 && item.indexOf(domain) === -1) {",
          "31:               matches.add(item);",
          "32:               matches.add(domain);",
          "33:             } else {",
          "34:               matches.add(item);",
          "35:             }",
          "37:             return matches;",
          "38:           }, new Set()",
          "39:           ), new Set([domains[0]])",
          "40:       )",
          "41:   ).sort();",
          "43: export const getStableDomainPath = (domains: string[]) =>",
          "44:   domains.length === 1 ?",
          "45:     domains[0] :",
          "46:     'san-' + numericHash(getFilteredDomains(domains).join(''));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26: export const opensslDatabaseFilePath = configPath('certificate-authority', 'index.txt');",
          "27: export const caSelfSignConfig = path.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');",
          "30:   let tmpFile = mktmp();",
          "31:   let source = readFile(path.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');",
          "32:   let template = makeTemplate(source);",
          "34:   writeFile(tmpFile, eol.auto(result));",
          "35:   cb(tmpFile);",
          "36:   rm(tmpFile);",
          "37: }",
          "40:   let tmpFile = mktmp();",
          "41:   let source = readFile(path.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');",
          "42:   let template = makeTemplate(source);",
          "43:   let result = template({",
          "45:     serialFile: opensslSerialFilePath,",
          "46:     databaseFile: opensslDatabaseFilePath,",
          "48:   });",
          "49:   writeFile(tmpFile, eol.auto(result));",
          "50:   cb(tmpFile);",
          "",
          "[Removed Lines]",
          "29: export function withDomainSigningRequestConfig(domain: string, cb: (filepath: string) => void) {",
          "33:   let result = template({ domain });",
          "39: export function withDomainCertificateConfig(domain: string, cb: (filepath: string) => void) {",
          "44:     domain,",
          "47:     domainDir: pathForDomain(domain)",
          "",
          "[Added Lines]",
          "55: function generateSubjectAltNames(domains: string[]): string {",
          "56:   return domains",
          "57:     .reduce((dnsEntries, domain) =>",
          "58:       dnsEntries.concat([",
          "59:         `DNS.${dnsEntries.length + 1} = ${domain}`,",
          "60:         `DNS.${dnsEntries.length + 2} = *.${domain}`,",
          "61:       ]), [] as string[])",
          "62:     .join(\"\\r\\n\");",
          "63: }",
          "65: export function withDomainSigningRequestConfig(domains: string[], cb: (filepath: string) => void) {",
          "66:   const domain = domains[0];",
          "67:   const subjectAltNames = generateSubjectAltNames(domains);",
          "71:   let result = template({domain, subjectAltNames});",
          "77: export function withDomainCertificateConfig(domains: string[], cb: (filepath: string) => void) {",
          "78:   const domainPath = getStableDomainPath(domains);",
          "79:   const subjectAltNames = generateSubjectAltNames(domains);",
          "84:     subjectAltNames,",
          "87:     domainDir: pathForDomain(domainPath)",
          "",
          "---------------"
        ],
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   isLinux,",
          "8:   isWindows,",
          "9:   pathForDomain,",
          "10:   domainsDir,",
          "11:   rootCAKeyPath,",
          "12:   rootCACertPath,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:   getStableDomainPath,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: const debug = createDebug('devcert');",
          "26:   getCaBuffer?: boolean;",
          "",
          "[Removed Lines]",
          "24: export interface Options /* extends Partial<ICaBufferOpts & ICaPathOpts>  */{",
          "",
          "[Added Lines]",
          "25: export interface Options /* extends Partial<ICaBufferOpts & ICaPathOpts>  */ {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     throw new Error('IP addresses are not supported currently');",
          "72:   }",
          "78:   if (options.ui) {",
          "79:     Object.assign(UI, options.ui);",
          "80:   }",
          "82:   if (!isMac && !isLinux && !isWindows) {",
          "84:   }",
          "86:   if (!commandExists('openssl')) {",
          "87:     throw new Error('OpenSSL not found: OpenSSL is required to generate SSL certificates - make sure it is installed and available in your PATH');",
          "88:   }",
          "93:   if (!exists(rootCAKeyPath)) {",
          "94:     debug('Root CA is not installed yet, so it must be our first run. Installing root CA ...');",
          "",
          "[Removed Lines]",
          "69: export async function certificateFor<O extends Options>(domain: string, options: O = {} as O): Promise<IReturnData<O>> {",
          "70:   if (VALID_IP.test(domain)) {",
          "73:   if (!VALID_DOMAIN.test(domain)) {",
          "74:     throw new Error(`\"${domain}\" is not a valid domain name.`);",
          "75:   }",
          "76:   debug(`Certificate requested for ${ domain }. Skipping certutil install: ${ Boolean(options.skipCertutilInstall) }. Skipping hosts file: ${ Boolean(options.skipHostsFile) }`);",
          "83:     throw new Error(`Platform not supported: \"${ process.platform }\"`);",
          "90:   let domainKeyPath = pathForDomain(domain, `private-key.key`);",
          "91:   let domainCertPath = pathForDomain(domain, `certificate.crt`);",
          "",
          "[Added Lines]",
          "70: export async function certificateFor<O extends Options>(requestedDomains: string | string[], options: O = {} as O): Promise<IReturnData<O>> {",
          "71:   const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];",
          "72:   if (domains.some((d) => VALID_IP.test(d))) {",
          "75:   domains.forEach((domain) => {",
          "76:     if (!VALID_DOMAIN.test(domain)) {",
          "77:       throw new Error(`\"${domain}\" is not a valid domain name.`);",
          "78:     }",
          "79:   });",
          "81:   const domainPath = getStableDomainPath(domains);",
          "82:   debug(`Certificate requested for ${domains}. Skipping certutil install: ${Boolean(options.skipCertutilInstall)}. Skipping hosts file: ${Boolean(options.skipHostsFile)}`);",
          "89:     throw new Error(`Platform not supported: \"${process.platform}\"`);",
          "96:   let domainKeyPath = pathForDomain(domainPath, `private-key.key`);",
          "97:   let domainCertPath = pathForDomain(domainPath, `certificate.crt`);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:     await ensureCACertReadable(options);",
          "99:   }",
          "104:   }",
          "106:   if (!options.skipHostsFile) {",
          "108:   }",
          "110:   debug(`Returning domain certificate`);",
          "",
          "[Removed Lines]",
          "101:   if (!exists(pathForDomain(domain, `certificate.crt`))) {",
          "102:     debug(`Can't find certificate file for ${ domain }, so it must be the first request for ${ domain }. Generating and caching ...`);",
          "103:     await generateDomainCertificate(domain);",
          "107:     await currentPlatform.addDomainToHostFileIfMissing(domain);",
          "",
          "[Added Lines]",
          "107:   if (!exists(pathForDomain(domainPath, `certificate.crt`))) {",
          "108:     debug(`Can't find certificate file for ${domains}, so it must be the first request for ${domains}. Generating and caching ...`);",
          "109:     await generateDomainCertificate(domains);",
          "113:     domains.forEach(async (domain) => {",
          "114:       await currentPlatform.addDomainToHostFileIfMissing(domain);",
          "115:     })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:     key: readFile(domainKeyPath),",
          "114:     cert: readFile(domainCertPath)",
          "115:   } as IReturnData<O>;",
          "119:   return ret;",
          "120: }",
          "124: }",
          "126: export function configuredDomains() {",
          "127:   return readdir(domainsDir);",
          "128: }",
          "132: }",
          "",
          "[Removed Lines]",
          "116:   if (options.getCaBuffer) (ret as ICaBuffer).ca = readFile(rootCACertPath);",
          "117:   if (options.getCaPath) (ret as ICaPath).caPath = rootCACertPath;",
          "122: export function hasCertificateFor(domain: string) {",
          "123:   return exists(pathForDomain(domain, `certificate.crt`));",
          "130: export function removeDomain(domain: string) {",
          "131:   return rimraf.sync(pathForDomain(domain));",
          "",
          "[Added Lines]",
          "124:   if (options.getCaBuffer) (ret as unknown as ICaBuffer).ca = readFile(rootCACertPath);",
          "125:   if (options.getCaPath) (ret as unknown as ICaPath).caPath = rootCACertPath;",
          "130: export function hasCertificateFor(requestedDomains: string | string[]) {",
          "131:   const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];",
          "132:   const domainPath = getStableDomainPath(domains);",
          "133:   return exists(pathForDomain(domainPath, `certificate.crt`));",
          "140: export function removeDomain(requestedDomains: string | string[]) {",
          "141:   const domains = Array.isArray(requestedDomains) ? requestedDomains : [requestedDomains];",
          "142:   const domainPath = getStableDomainPath(domains);",
          "143:   return rimraf.sync(pathForDomain(domainPath));",
          "",
          "---------------"
        ],
        "src/utils.ts||src/utils.ts": [
          "File: src/utils.ts -> src/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     });",
          "54:   });",
          "55: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: export const numericHash = (str: string): number => {",
          "58:   let hash = 5381;",
          "59:   let i = str.length;",
          "61:   while (i) {",
          "62:     hash = hash * 33 ^ str.charCodeAt(--i);",
          "63:   }",
          "65:   return hash >>> 0;",
          "66: };",
          "",
          "---------------"
        ]
      }
    }
  ]
}