{
  "cve_id": "CVE-2021-3805",
  "cve_desc": "object-path is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
  "repo": "mariocasciaro/object-path",
  "patch_hash": "4f0903fd7c832d12ccbe0d9c3d7e25d985e9e884",
  "patch_info": {
    "commit_hash": "4f0903fd7c832d12ccbe0d9c3d7e25d985e9e884",
    "repo": "mariocasciaro/object-path",
    "commit_url": "https://github.com/mariocasciaro/object-path/commit/4f0903fd7c832d12ccbe0d9c3d7e25d985e9e884",
    "files": [
      "README.md",
      "SECURITY.md",
      "index.js",
      "test.js"
    ],
    "message": "Fix prototype pollution vulnerability",
    "before_after_code_files": [
      "index.js||index.js",
      "test.js||test.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "5:   if (typeof module === 'object' && typeof module.exports === 'object') {",
      "7:   } else if (typeof define === 'function' && define.amd) {",
      "10:   } else {",
      "13:   }",
      "20:       return false",
      "21:     }",
      "23:     return Object.prototype.hasOwnProperty.call(obj, prop)",
      "24:   }",
      "27:     if (!value) {",
      "29:     }",
      "30:     if (isArray(value) && value.length === 0) {",
      "32:     } else if (typeof value !== 'string') {",
      "37:         }",
      "39:     }",
      "41:   }",
      "45:   }",
      "49:   }",
      "54:   }",
      "58:   }",
      "62:     if (intKey.toString() === key) {",
      "64:     }",
      "66:   }",
      "69:     options = options || {}",
      "75:         }",
      "78:         if (typeof objectPath[prop] === 'function') {",
      "80:         }",
      "86:     var hasShallowProperty",
      "87:     if (options.includeInheritedProps) {",
      "",
      "[Removed Lines]",
      "1: (function (root, factory){",
      "2:   'use strict';",
      "6:     module.exports = factory();",
      "9:     define([], factory);",
      "12:     root.objectPath = factory();",
      "14: })(this, function(){",
      "15:   'use strict';",
      "17:   var toStr = Object.prototype.toString;",
      "18:   function hasOwnProperty(obj, prop) {",
      "19:     if(obj == null) {",
      "26:   function isEmpty(value){",
      "28:       return true;",
      "31:         return true;",
      "33:         for (var i in value) {",
      "34:             if (hasOwnProperty(value, i)) {",
      "35:                 return false;",
      "36:             }",
      "38:         return true;",
      "40:     return false;",
      "43:   function toString(type){",
      "44:     return toStr.call(type);",
      "47:   function isObject(obj){",
      "48:     return typeof obj === 'object' && toString(obj) === \"[object Object]\";",
      "51:   var isArray = Array.isArray || function(obj){",
      "53:     return toStr.call(obj) === '[object Array]';",
      "56:   function isBoolean(obj){",
      "57:     return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';",
      "60:   function getKey(key){",
      "61:     var intKey = parseInt(key);",
      "63:       return intKey;",
      "65:     return key;",
      "68:   function factory(options) {",
      "71:     var objectPath = function(obj) {",
      "72:       return Object.keys(objectPath).reduce(function(proxy, prop) {",
      "73:         if(prop === 'create') {",
      "74:           return proxy;",
      "79:           proxy[prop] = objectPath[prop].bind(objectPath, obj);",
      "82:         return proxy;",
      "83:       }, {});",
      "84:     };",
      "",
      "[Added Lines]",
      "1: (function (root, factory) {",
      "2:   'use strict'",
      "6:     module.exports = factory()",
      "9:     define([], factory)",
      "12:     root.objectPath = factory()",
      "14: })(this, function () {",
      "15:   'use strict'",
      "17:   var toStr = Object.prototype.toString",
      "19:   function hasOwnProperty (obj, prop) {",
      "20:     if (obj == null) {",
      "27:   function isEmpty (value) {",
      "29:       return true",
      "32:       return true",
      "34:       for (var i in value) {",
      "35:         if (hasOwnProperty(value, i)) {",
      "36:           return false",
      "38:       }",
      "39:       return true",
      "41:     return false",
      "44:   function toString (type) {",
      "45:     return toStr.call(type)",
      "48:   function isObject (obj) {",
      "49:     return typeof obj === 'object' && toString(obj) === '[object Object]'",
      "52:   var isArray = Array.isArray || function (obj) {",
      "54:     return toStr.call(obj) === '[object Array]'",
      "57:   function isBoolean (obj) {",
      "58:     return typeof obj === 'boolean' || toString(obj) === '[object Boolean]'",
      "61:   function getKey (key) {",
      "62:     var intKey = parseInt(key)",
      "64:       return intKey",
      "66:     return key",
      "69:   function factory (options) {",
      "72:     var objectPath = function (obj) {",
      "73:       return Object.keys(objectPath).reduce(function (proxy, prop) {",
      "74:         if (prop === 'create') {",
      "75:           return proxy",
      "80:           proxy[prop] = objectPath[prop].bind(objectPath, obj)",
      "83:         return proxy",
      "84:       }, {})",
      "85:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "94:       }",
      "95:     }",
      "98:       if (hasShallowProperty(obj, prop)) {",
      "100:       }",
      "101:     }",
      "104:       if (typeof path === 'number') {",
      "106:       }",
      "107:       if (!path || path.length === 0) {",
      "109:       }",
      "110:       if (typeof path === 'string') {",
      "121:       }",
      "122:       if (path.length === 1) {",
      "123:         if (currentValue === void 0 || !doNotReplace) {",
      "125:         }",
      "127:       }",
      "129:       if (currentValue === void 0) {",
      "133:         } else {",
      "135:         }",
      "136:       }",
      "139:     }",
      "141:     objectPath.has = function (obj, path) {",
      "142:       if (typeof path === 'number') {",
      "144:       } else if (typeof path === 'string') {",
      "146:       }",
      "148:       if (!path || path.length === 0) {",
      "150:       }",
      "152:       for (var i = 0; i < path.length; i++) {",
      "156:           (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {",
      "158:         } else {",
      "160:         }",
      "161:       }",
      "177:       if (!isArray(arr)) {",
      "180:       }",
      "185:       if (isEmpty(path)) {",
      "187:       }",
      "188:       if (obj == null) {",
      "190:       }",
      "193:       if (!(value = objectPath.get(obj, path))) {",
      "195:       }",
      "197:       if (typeof value === 'string') {",
      "199:       } else if (isBoolean(value)) {",
      "201:       } else if (typeof value === 'number') {",
      "203:       } else if (isArray(value)) {",
      "205:       } else if (isObject(value)) {",
      "206:         for (i in value) {",
      "207:           if (hasShallowProperty(value, i)) {",
      "209:           }",
      "210:         }",
      "211:       } else {",
      "213:       }",
      "218:       if (!isArray(arr)) {",
      "221:       }",
      "226:     objectPath.coalesce = function (obj, paths, defaultValue) {",
      "229:       for (var i = 0, len = paths.length; i < len; i++) {",
      "230:         if ((value = objectPath.get(obj, paths[i])) !== void 0) {",
      "232:         }",
      "233:       }",
      "239:       if (typeof path === 'number') {",
      "241:       }",
      "242:       if (!path || path.length === 0) {",
      "244:       }",
      "245:       if (obj == null) {",
      "247:       }",
      "248:       if (typeof path === 'string') {",
      "250:       }",
      "254:       if (nextObj === void 0) {",
      "256:       }",
      "258:       if (path.length === 1) {",
      "260:       }",
      "266:       if (typeof path === 'number') {",
      "268:       }",
      "270:       if (obj == null) {",
      "272:       }",
      "274:       if (isEmpty(path)) {",
      "276:       }",
      "279:       }",
      "282:       if (!hasShallowProperty(obj, currentPath)) {",
      "284:       }",
      "287:         if (isArray(obj)) {",
      "289:         } else {",
      "291:         }",
      "292:       } else {",
      "294:       }",
      "297:     }",
      "300:   }",
      "304:   mod.withInheritedProps = factory({includeInheritedProps: true})",
      "",
      "[Removed Lines]",
      "97:     function getShallowProperty(obj, prop) {",
      "99:         return obj[prop];",
      "103:     function set(obj, path, value, doNotReplace){",
      "105:         path = [path];",
      "108:         return obj;",
      "111:         return set(obj, path.split('.').map(getKey), value, doNotReplace);",
      "112:       }",
      "113:       var currentPath = path[0];",
      "114:       if (typeof currentPath !== 'string' && typeof currentPath !== 'number') {",
      "115:         currentPath = String(currentPath)",
      "116:       }",
      "117:       var currentValue = getShallowProperty(obj, currentPath);",
      "118:       if (options.includeInheritedProps && (currentPath === '__proto__' ||",
      "119:         (currentPath === 'constructor' && typeof currentValue === 'function'))) {",
      "120:         throw new Error('For security reasons, object\\'s magic properties cannot be set')",
      "124:           obj[currentPath] = value;",
      "126:         return currentValue;",
      "131:         if(typeof path[1] === 'number') {",
      "132:           obj[currentPath] = [];",
      "134:           obj[currentPath] = {};",
      "138:       return set(obj[currentPath], path.slice(1), value, doNotReplace);",
      "143:         path = [path];",
      "145:         path = path.split('.');",
      "149:         return !!obj;",
      "153:         var j = getKey(path[i]);",
      "155:         if((typeof j === 'number' && isArray(obj) && j < obj.length) ||",
      "157:           obj = obj[j];",
      "159:           return false;",
      "163:       return true;",
      "164:     };",
      "166:     objectPath.ensureExists = function (obj, path, value){",
      "167:       return set(obj, path, value, true);",
      "168:     };",
      "170:     objectPath.set = function (obj, path, value, doNotReplace){",
      "171:       return set(obj, path, value, doNotReplace);",
      "172:     };",
      "174:     objectPath.insert = function (obj, path, value, at){",
      "175:       var arr = objectPath.get(obj, path);",
      "176:       at = ~~at;",
      "178:         arr = [];",
      "179:         objectPath.set(obj, path, arr);",
      "181:       arr.splice(at, 0, value);",
      "182:     };",
      "184:     objectPath.empty = function(obj, path) {",
      "186:         return void 0;",
      "189:         return void 0;",
      "192:       var value, i;",
      "194:         return void 0;",
      "198:         return objectPath.set(obj, path, '');",
      "200:         return objectPath.set(obj, path, false);",
      "202:         return objectPath.set(obj, path, 0);",
      "204:         value.length = 0;",
      "208:             delete value[i];",
      "212:         return objectPath.set(obj, path, null);",
      "214:     };",
      "216:     objectPath.push = function (obj, path /*, values */){",
      "217:       var arr = objectPath.get(obj, path);",
      "219:         arr = [];",
      "220:         objectPath.set(obj, path, arr);",
      "223:       arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));",
      "224:     };",
      "227:       var value;",
      "231:           return value;",
      "235:       return defaultValue;",
      "236:     };",
      "238:     objectPath.get = function (obj, path, defaultValue){",
      "240:         path = [path];",
      "243:         return obj;",
      "246:         return defaultValue;",
      "249:         return objectPath.get(obj, path.split('.'), defaultValue);",
      "252:       var currentPath = getKey(path[0]);",
      "253:       var nextObj = getShallowProperty(obj, currentPath)",
      "255:         return defaultValue;",
      "259:         return nextObj;",
      "262:       return objectPath.get(obj[currentPath], path.slice(1), defaultValue);",
      "263:     };",
      "265:     objectPath.del = function del(obj, path) {",
      "267:         path = [path];",
      "271:         return obj;",
      "275:         return obj;",
      "277:       if(typeof path === 'string') {",
      "278:         return objectPath.del(obj, path.split('.'));",
      "281:       var currentPath = getKey(path[0]);",
      "283:         return obj;",
      "286:       if(path.length === 1) {",
      "288:           obj.splice(currentPath, 1);",
      "290:           delete obj[currentPath];",
      "293:         return objectPath.del(obj[currentPath], path.slice(1));",
      "296:       return obj;",
      "299:     return objectPath;",
      "302:   var mod = factory();",
      "303:   mod.create = factory;",
      "305:   return mod;",
      "306: });",
      "",
      "[Added Lines]",
      "98:     function getShallowProperty (obj, prop) {",
      "100:         return obj[prop]",
      "101:       }",
      "102:     }",
      "104:     var getShallowPropertySafely",
      "105:     if (options.includeInheritedProps) {",
      "106:       getShallowPropertySafely = function (obj, currentPath) {",
      "107:         if (typeof currentPath !== 'string' && typeof currentPath !== 'number') {",
      "108:           currentPath = String(currentPath)",
      "109:         }",
      "110:         var currentValue = getShallowProperty(obj, currentPath)",
      "111:         if (currentPath === '__proto__' || currentPath === 'prototype' ||",
      "112:           (currentPath === 'constructor' && typeof currentValue === 'function')) {",
      "113:           throw new Error('For security reasons, object\\'s magic properties cannot be set')",
      "114:         }",
      "115:         return currentValue",
      "116:       }",
      "117:     } else {",
      "118:       getShallowPropertySafely = function (obj, currentPath) {",
      "119:         return getShallowProperty(obj, currentPath)",
      "123:     function set (obj, path, value, doNotReplace) {",
      "125:         path = [path]",
      "128:         return obj",
      "131:         return set(obj, path.split('.').map(getKey), value, doNotReplace)",
      "133:       var currentPath = path[0]",
      "134:       var currentValue = getShallowPropertySafely(obj, currentPath)",
      "137:           obj[currentPath] = value",
      "139:         return currentValue",
      "144:         if (typeof path[1] === 'number') {",
      "145:           obj[currentPath] = []",
      "147:           obj[currentPath] = {}",
      "151:       return set(obj[currentPath], path.slice(1), value, doNotReplace)",
      "156:         path = [path]",
      "158:         path = path.split('.')",
      "162:         return !!obj",
      "166:         var j = getKey(path[i])",
      "168:         if ((typeof j === 'number' && isArray(obj) && j < obj.length) ||",
      "170:           obj = obj[j]",
      "172:           return false",
      "176:       return true",
      "177:     }",
      "179:     objectPath.ensureExists = function (obj, path, value) {",
      "180:       return set(obj, path, value, true)",
      "181:     }",
      "183:     objectPath.set = function (obj, path, value, doNotReplace) {",
      "184:       return set(obj, path, value, doNotReplace)",
      "185:     }",
      "187:     objectPath.insert = function (obj, path, value, at) {",
      "188:       var arr = objectPath.get(obj, path)",
      "189:       at = ~~at",
      "191:         arr = []",
      "192:         objectPath.set(obj, path, arr)",
      "194:       arr.splice(at, 0, value)",
      "195:     }",
      "197:     objectPath.empty = function (obj, path) {",
      "199:         return void 0",
      "202:         return void 0",
      "205:       var value, i",
      "207:         return void 0",
      "211:         return objectPath.set(obj, path, '')",
      "213:         return objectPath.set(obj, path, false)",
      "215:         return objectPath.set(obj, path, 0)",
      "217:         value.length = 0",
      "221:             delete value[i]",
      "225:         return objectPath.set(obj, path, null)",
      "227:     }",
      "229:     objectPath.push = function (obj, path /*, values */) {",
      "230:       var arr = objectPath.get(obj, path)",
      "232:         arr = []",
      "233:         objectPath.set(obj, path, arr)",
      "236:       arr.push.apply(arr, Array.prototype.slice.call(arguments, 2))",
      "237:     }",
      "240:       var value",
      "244:           return value",
      "248:       return defaultValue",
      "249:     }",
      "251:     objectPath.get = function (obj, path, defaultValue) {",
      "253:         path = [path]",
      "256:         return obj",
      "259:         return defaultValue",
      "262:         return objectPath.get(obj, path.split('.'), defaultValue)",
      "265:       var currentPath = getKey(path[0])",
      "266:       var nextObj = getShallowPropertySafely(obj, currentPath)",
      "268:         return defaultValue",
      "272:         return nextObj",
      "275:       return objectPath.get(obj[currentPath], path.slice(1), defaultValue)",
      "276:     }",
      "278:     objectPath.del = function del (obj, path) {",
      "280:         path = [path]",
      "284:         return obj",
      "288:         return obj",
      "290:       if (typeof path === 'string') {",
      "291:         return objectPath.del(obj, path.split('.'))",
      "294:       var currentPath = getKey(path[0])",
      "295:       getShallowPropertySafely(obj, currentPath)",
      "297:         return obj",
      "300:       if (path.length === 1) {",
      "302:           obj.splice(currentPath, 1)",
      "304:           delete obj[currentPath]",
      "307:         return objectPath.del(obj[currentPath], path.slice(1))",
      "310:       return obj",
      "313:     return objectPath",
      "316:   var mod = factory()",
      "317:   mod.create = factory",
      "319:   return mod",
      "320: })",
      "",
      "---------------"
    ],
    "test.js||test.js": [
      "File: test.js -> test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:     expect(objectPath.get(extended, 'enabled')).to.be.equal(true)",
      "134:     expect(objectPath.get(extended, 'one')).to.be.equal(undefined)",
      "135:   })",
      "136: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "137:   it('[security] should not get magic properties in default mode', function () {",
      "138:     expect(objectPath.get({}, '__proto__')).to.be.undefined",
      "139:     expect(objectPath.get({}, [['__proto__']])).to.be.undefined",
      "141:     function Clazz() {}",
      "142:     Clazz.prototype.test = []",
      "144:     expect(objectPath.get(new Clazz(), '__proto__')).to.be.undefined",
      "145:     expect(objectPath.get(new Clazz(), [['__proto__']])).to.be.undefined",
      "146:     expect(objectPath.get(new Clazz(), ['constructor', 'prototype'])).to.be.undefined",
      "147:   })",
      "149:   it('[security] should not get magic properties in inheritedProps mode', function () {",
      "150:     expect(function() {",
      "151:       objectPath.withInheritedProps.get({}, '__proto__')",
      "152:     }).to.throw('For security reasons')",
      "154:     expect(function() {",
      "155:       objectPath.withInheritedProps.get({}, [['__proto__']])",
      "156:     }).to.throw('For security reasons')",
      "158:     function Clazz() {}",
      "159:     Clazz.prototype.test = 'original'",
      "161:     expect(function() {",
      "162:       objectPath.withInheritedProps.get(new Clazz(), '__proto__')",
      "163:     }).to.throw('For security reasons')",
      "165:     expect(function() {",
      "166:       objectPath.withInheritedProps.get(new Clazz(), [['__proto__']])",
      "167:     }).to.throw('For security reasons')",
      "169:     expect(function() {",
      "170:       objectPath.withInheritedProps.get(new Clazz(), ['constructor', 'prototype'])",
      "171:     }).to.throw('For security reasons')",
      "172:   })",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "244:     objectPath.set({}, [['__proto__'], 'injected'], 'this is bad')",
      "245:     expect(Object.prototype.injected).to.be.undefined",
      "247:     function Clazz() {}",
      "248:     Clazz.prototype.test = 'original'",
      "250:     objectPath.set(new Clazz(), '__proto__.test', 'this is bad')",
      "251:     expect(Clazz.prototype.test).to.be.equal('original')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "284:     objectPath.set({}, ['__proto__'], {})",
      "285:     expect(Object.prototype.toString).to.be.a('function')",
      "290:     objectPath.set({}, ['__proto__'], {test: 'this is bad'})",
      "291:     expect(Clazz.prototype.test).to.be.equal('original')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "258:   })",
      "260:   it('[security] should throw an exception if trying to set magic properties in inheritedProps mode', function () {",
      "265:     expect(function() {",
      "266:       objectPath.withInheritedProps.set({}, [['__proto__'], 'injected'], 'this is bad')",
      "",
      "[Removed Lines]",
      "261:     expect(function() {objectPath.withInheritedProps.set({}, '__proto__.injected', 'this is bad')})",
      "262:       .to.throw('For security reasons')",
      "263:     expect(Object.prototype.injected).to.be.undefined",
      "",
      "[Added Lines]",
      "304:     expect(function() {",
      "305:       objectPath.withInheritedProps.set({}, '__proto__.injected', 'this is bad')",
      "306:       expect(Object.prototype.injected).to.be.undefined",
      "307:     }).to.throw('For security reasons')",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "270:     function Clazz() {}",
      "271:     Clazz.prototype.test = 'original'",
      "288:   })",
      "289: })",
      "",
      "[Removed Lines]",
      "273:     expect(function() {objectPath.withInheritedProps.set(new Clazz(), '__proto__.test', 'this is bad')})",
      "274:       .to.throw('For security reasons')",
      "275:     expect(Clazz.prototype.test).to.be.equal('original')",
      "277:     expect(function() {objectPath.withInheritedProps.set(new Clazz(), 'constructor.prototype.test', 'this is bad')})",
      "278:       .to.throw('For security reasons')",
      "279:     expect(Clazz.prototype.test).to.be.equal('original')",
      "281:     expect(function() {objectPath.withInheritedProps.set({}, 'constructor.prototype.injected', 'this is OK')})",
      "282:       .to.throw('For security reasons')",
      "283:     expect(Object.prototype.injected).to.be.undefined",
      "285:     expect(function() {objectPath.withInheritedProps.set({}, [['constructor'], 'prototype', 'injected'], 'this is bad')})",
      "286:       .to.throw('For security reasons')",
      "287:     expect(Object.prototype.injected).to.be.undefined",
      "",
      "[Added Lines]",
      "317:     expect(function() {",
      "318:       objectPath.withInheritedProps.set(new Clazz(), '__proto__.test', 'this is bad')",
      "319:       expect(Clazz.prototype.test).to.be.equal('original')",
      "320:     }).to.throw('For security reasons')",
      "322:     expect(function() {",
      "323:       objectPath.withInheritedProps.set(new Clazz(), 'constructor.prototype.test', 'this is bad')",
      "324:       expect(Clazz.prototype.test).to.be.equal('original')",
      "325:     }).to.throw('For security reasons')",
      "327:     expect(function() {",
      "328:       objectPath.withInheritedProps.set({}, 'constructor.prototype.injected', 'this is OK')",
      "329:       expect(Object.prototype.injected).to.be.undefined",
      "330:     }).to.throw('For security reasons')",
      "332:     expect(function() {",
      "333:       objectPath.withInheritedProps.set({}, [['constructor'], 'prototype', 'injected'], 'this is bad')",
      "334:       expect(Object.prototype.injected).to.be.undefined",
      "335:     }).to.throw('For security reasons')",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "328:     expect(obj).to.have.nested.property('b.e.0.0', 'l')",
      "329:   })",
      "331: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   it('[security] should not push within prototype properties in default mode', function () {",
      "380:     function Clazz() {}",
      "381:     Clazz.prototype.test = []",
      "383:     objectPath.push(new Clazz(), '__proto__.test', 'pushed')",
      "384:     expect(Clazz.prototype.test).to.be.deep.equal([])",
      "386:     objectPath.push(new Clazz(), [['__proto__'], 'test'], 'pushed')",
      "387:     expect(Clazz.prototype.test).to.be.deep.equal([])",
      "389:     objectPath.push(new Clazz(), 'constructor.prototype.test', 'pushed')",
      "390:     expect(Clazz.prototype.test).to.be.deep.equal([])",
      "391:   })",
      "393:   it('[security] should not push within prototype properties in inheritedProps mode', function () {",
      "394:     function Clazz() {}",
      "395:     Clazz.prototype.test = []",
      "397:     expect(function() {",
      "398:       objectPath.withInheritedProps.push(new Clazz(), '__proto__.test', 'pushed')",
      "399:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "400:     }).to.throw('For security reasons')",
      "402:     expect(function() {",
      "403:       objectPath.withInheritedProps.push(new Clazz(), [['__proto__'], 'test'], 'pushed')",
      "404:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "405:     }).to.throw('For security reasons')",
      "407:     expect(function() {",
      "408:       objectPath.withInheritedProps.push(new Clazz(), 'constructor.prototype.test', 'pushed')",
      "409:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "410:     }).to.throw('For security reasons')",
      "411:   })",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "361:     expect(any[1]).to.be.an('object')",
      "362:     expect(any[1][1]).to.be.an('object')",
      "363:   })",
      "364: })",
      "366: describe('coalesce', function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "446:   it('[security] should not set magic properties in default mode', function () {",
      "447:     objectPath.ensureExists({}, '__proto__.injected', 'this is bad')",
      "448:     expect(Object.prototype.injected).to.be.undefined",
      "450:     objectPath.ensureExists({}, [['__proto__'], 'injected'], 'this is bad')",
      "451:     expect(Object.prototype.injected).to.be.undefined",
      "453:     objectPath.ensureExists({}, ['__proto__'], {})",
      "454:     expect(Object.prototype.toString).to.be.a('function')",
      "456:     function Clazz() {}",
      "457:     Clazz.prototype.test = 'original'",
      "459:     objectPath.ensureExists({}, ['__proto__'], {test: 'this is bad'})",
      "460:     expect(Clazz.prototype.test).to.be.equal('original')",
      "462:     objectPath.ensureExists(new Clazz(), '__proto__.test', 'this is bad')",
      "463:     expect(Clazz.prototype.test).to.be.equal('original')",
      "465:     objectPath.ensureExists(new Clazz(), [['__proto__'], 'test'], 'this is bad')",
      "466:     expect(Clazz.prototype.test).to.be.equal('original')",
      "468:     objectPath.ensureExists(new Clazz(), 'constructor.prototype.test', 'this is bad')",
      "469:     expect(Clazz.prototype.test).to.be.equal('original')",
      "470:   })",
      "472:   it('[security] should throw an exception if trying to set magic properties in inheritedProps mode', function () {",
      "473:     expect(function() {objectPath.withInheritedProps.ensureExists({}, '__proto__.injected', 'this is bad')})",
      "474:       .to.throw('For security reasons')",
      "475:     expect(Object.prototype.injected).to.be.undefined",
      "477:     expect(function() {",
      "478:       objectPath.withInheritedProps.ensureExists({}, [['__proto__'], 'injected'], 'this is bad')",
      "479:       expect(Object.prototype.injected).to.be.undefined",
      "480:     }).to.throw('For security reasons')",
      "482:     function Clazz() {}",
      "483:     Clazz.prototype.test = 'original'",
      "485:     expect(function() {",
      "486:       objectPath.withInheritedProps.ensureExists(new Clazz(), '__proto__.test', 'this is bad')",
      "487:       expect(Clazz.prototype.test).to.be.equal('original')",
      "488:     }).to.throw('For security reasons')",
      "491:     expect(function() {",
      "492:       objectPath.withInheritedProps.ensureExists(new Clazz(), 'constructor.prototype.test', 'this is bad')",
      "493:       expect(Clazz.prototype.test).to.be.equal('original')",
      "494:     }).to.throw('For security reasons')",
      "496:     expect(function() {",
      "497:       objectPath.withInheritedProps.ensureExists({}, 'constructor.prototype.injected', 'this is OK')",
      "498:       expect(Object.prototype.injected).to.be.undefined",
      "499:     }).to.throw('For security reasons')",
      "501:     expect(function() {",
      "502:       objectPath.withInheritedProps.ensureExists({}, [['constructor'], 'prototype', 'injected'], 'this is bad')",
      "503:       expect(Object.prototype.injected).to.be.undefined",
      "504:     }).to.throw('For security reasons')",
      "505:   })",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "512:     expect(obj.instance.arr).to.be.an('array')",
      "513:     expect(obj['function']).to.equal(null)",
      "514:   })",
      "515: })",
      "517: describe('del', function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "658:   it('[security] should not empty prototype properties in default mode', function () {",
      "659:     function Clazz() {}",
      "660:     Clazz.prototype.test = 'original'",
      "662:     objectPath.empty(new Clazz(), '__proto__')",
      "663:     expect(Clazz.prototype.test).to.be.equal('original')",
      "665:     objectPath.empty(new Clazz(), [['__proto__']])",
      "666:     expect(Clazz.prototype.test).to.be.equal('original')",
      "668:     objectPath.empty(new Clazz(), 'constructor.prototype')",
      "669:     expect(Clazz.prototype.test).to.be.equal('original')",
      "670:   })",
      "672:   it('[security] should throw an exception if trying to delete prototype properties in inheritedProps mode', function () {",
      "673:     function Clazz() {}",
      "674:     Clazz.prototype.test = 'original'",
      "676:     expect(function() {",
      "677:       objectPath.withInheritedProps.empty(new Clazz(), '__proto__')",
      "678:       expect(Clazz.prototype.test).to.be.equal('original')",
      "679:     }).to.throw('For security reasons')",
      "681:     expect(function() {",
      "682:       objectPath.withInheritedProps.empty(new Clazz(), 'constructor.prototype')",
      "683:       expect(Clazz.prototype.test).to.be.equal('original')",
      "684:     }).to.throw('For security reasons')",
      "686:     expect(function() {",
      "687:       objectPath.withInheritedProps.empty({}, [['constructor'], 'prototype'])",
      "688:       expect(Clazz.prototype.test).to.be.equal('original')",
      "689:     }).to.throw('For security reasons')",
      "690:   })",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "588:     expect(obj.b.d).to.have.length(0)",
      "589:     expect(obj.b.d).to.be.deep.equal([])",
      "590:   })",
      "591: })",
      "593: describe('insert', function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "768:   it('[security] should not delete prototype properties in default mode', function () {",
      "769:     objectPath.del({}, '__proto__.valueOf')",
      "770:     expect(Object.prototype.valueOf).to.be.a('function')",
      "772:     objectPath.del({}, [['__proto__'], 'valueOf'])",
      "773:     expect(Object.prototype.valueOf).to.be.a('function')",
      "775:     function Clazz() {}",
      "776:     Clazz.prototype.test = 'original'",
      "778:     objectPath.del(new Clazz(), '__proto__.test')",
      "779:     expect(Clazz.prototype.test).to.be.equal('original')",
      "781:     objectPath.del(new Clazz(), [['__proto__'], 'test'])",
      "782:     expect(Clazz.prototype.test).to.be.equal('original')",
      "784:     objectPath.del(new Clazz(), 'constructor.prototype.test')",
      "785:     expect(Clazz.prototype.test).to.be.equal('original')",
      "786:   })",
      "788:   it('[security] should throw an exception if trying to delete prototype properties in inheritedProps mode', function () {",
      "789:     expect(function() {",
      "790:       objectPath.withInheritedProps.del({}, '__proto__.valueOf')",
      "791:       expect(Object.prototype.valueOf).to.be.a('function')",
      "792:     }).to.throw('For security reasons')",
      "794:     expect(function() {",
      "795:       objectPath.withInheritedProps.del({}, [['__proto__'], 'valueOf'])",
      "796:       expect(Object.prototype.valueOf).to.be.a('function')",
      "797:     }).to.throw('For security reasons')",
      "799:     function Clazz() {}",
      "800:     Clazz.prototype.test = 'original'",
      "802:     expect(function() {",
      "803:       objectPath.withInheritedProps.del(new Clazz(), '__proto__.test')",
      "804:       expect(Clazz.prototype.test).to.be.equal('original')",
      "805:     }).to.throw('For security reasons')",
      "807:     expect(function() {",
      "808:       objectPath.withInheritedProps.del(new Clazz(), 'constructor.prototype.test', 'this is bad')",
      "809:       expect(Clazz.prototype.test).to.be.equal('original')",
      "810:     }).to.throw('For security reasons')",
      "812:     expect(function() {",
      "813:       objectPath.withInheritedProps.del({}, [['constructor'], 'prototype', 'test'])",
      "814:       expect(Clazz.prototype.test).to.be.equal('original')",
      "815:     }).to.throw('For security reasons')",
      "816:   })",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "630:       'asdf'",
      "631:     ])",
      "632:   })",
      "633: })",
      "635: describe('has', function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "860:   it('[security] should not insert within prototype properties in default mode', function () {",
      "861:     function Clazz() {}",
      "862:     Clazz.prototype.test = []",
      "864:     objectPath.insert(new Clazz(), '__proto__.test', 'inserted', 0)",
      "865:     expect(Clazz.prototype.test).to.be.deep.equal([])",
      "867:     objectPath.insert(new Clazz(), [['__proto__'], 'test'], 'inserted', 0)",
      "868:     expect(Clazz.prototype.test).to.be.deep.equal([])",
      "870:     objectPath.insert(new Clazz(), 'constructor.prototype.test', 'inserted', 0)",
      "871:     expect(Clazz.prototype.test).to.be.deep.equal([])",
      "872:   })",
      "874:   it('[security] should not insert within prototype properties in inheritedProps mode', function () {",
      "875:     function Clazz() {}",
      "876:     Clazz.prototype.test = []",
      "878:     expect(function() {",
      "879:       objectPath.withInheritedProps.insert(new Clazz(), '__proto__.test', 'inserted', 0)",
      "880:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "881:     }).to.throw('For security reasons')",
      "883:     expect(function() {",
      "884:       objectPath.withInheritedProps.insert(new Clazz(), [['__proto__'], 'test'], 'inserted', 0)",
      "885:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "886:     }).to.throw('For security reasons')",
      "888:     expect(function() {",
      "889:       objectPath.withInheritedProps.insert(new Clazz(), 'constructor.prototype.test', 'inserted', 0)",
      "890:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "891:     }).to.throw('For security reasons')",
      "893:     expect(function() {",
      "894:       objectPath.withInheritedProps.insert(new Clazz().constructor, 'prototype.test', 'inserted', 0)",
      "895:       expect(Clazz.prototype.test).to.be.deep.equal([])",
      "896:     }).to.throw('For security reasons')",
      "897:   })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2be3354c6c46215c7635eb1b76d80f1319403c68",
      "candidate_info": {
        "commit_hash": "2be3354c6c46215c7635eb1b76d80f1319403c68",
        "repo": "mariocasciaro/object-path",
        "commit_url": "https://github.com/mariocasciaro/object-path/commit/2be3354c6c46215c7635eb1b76d80f1319403c68",
        "files": [
          "index.js",
          "test.js"
        ],
        "message": "Fix prototype pollution in set()",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test.js||test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test.js||test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:       }",
          "113:       var currentPath = path[0];",
          "114:       var currentValue = getShallowProperty(obj, currentPath);",
          "115:       if (path.length === 1) {",
          "116:         if (currentValue === void 0 || !doNotReplace) {",
          "117:           obj[currentPath] = value;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:       if (options.includeInheritedProps && (currentPath === '__proto__' ||",
          "116:         (currentPath === 'constructor' && typeof currentValue === 'function'))) {",
          "117:         throw new Error('For security reasons, object\\'s magic properties cannot be set')",
          "118:       }",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: var expect = require('chai').expect,",
          "7:   return {",
          "8:     a: 'b',",
          "9:     b: {",
          "10:       c: [],",
          "11:       d: ['a', 'b'],",
          "13:       f: 'i'",
          "14:     }",
          "16: }",
          "20:     var obj = {",
          "21:       '15\\u00f8C': {",
          "22:         '3\\u0111': 1",
          "23:       }",
          "30:     var obj = {",
          "31:       'a.b': {",
          "32:         'looks.like': 1",
          "33:       }",
          "105:   it(",
          "106:     'should not fail on an object with a null prototype',",
          "112:     }",
          "117:     Base.prototype = {",
          "118:       one: {",
          "119:         two: true",
          "120:       }",
          "140:     var obj = {",
          "141:       '15\\u00f8C': {",
          "142:         '3\\u0111': 1",
          "143:       }",
          "152:     var obj = {",
          "153:       'a.b': {",
          "154:         'looks.like': 1",
          "155:       }",
          "193:     obj = {}",
          "317:     var obj = {",
          "318:       should: {have: 'prop'}",
          "321:     expect(objectPath.coalesce(obj, [",
          "322:       'doesnt.exist',",
          "324:       'should.have'",
          "329:     var obj = {",
          "330:       is: {",
          "331:         false: false,",
          "",
          "[Removed Lines]",
          "1: 'use strict';",
          "3: objectPath = require('./index.js');",
          "6: function getTestObj() {",
          "12:       e: [{},{f: 'g'}],",
          "15:   };",
          "18: describe('get', function() {",
          "19:   it('should return the value using unicode key', function() {",
          "24:     };",
          "25:     expect(objectPath.get(obj, '15\\u00f8C.3\\u0111')).to.be.equal(1);",
          "26:     expect(objectPath.get(obj, ['15\\u00f8C','3\\u0111'])).to.be.equal(1);",
          "27:   });",
          "29:   it('should return the value using dot in key', function() {",
          "34:     };",
          "35:     expect(objectPath.get(obj, 'a.b.looks.like')).to.be.equal(void 0);",
          "36:     expect(objectPath.get(obj, ['a.b','looks.like'])).to.be.equal(1);",
          "37:   });",
          "39:   it('should return the value under shallow object', function() {",
          "40:     var obj = getTestObj();",
          "41:     expect(objectPath.get(obj, 'a')).to.be.equal('b');",
          "42:     expect(objectPath.get(obj, ['a'])).to.be.equal('b');",
          "43:   });",
          "45:   it('should work with number path', function() {",
          "46:     var obj = getTestObj();",
          "47:     expect(objectPath.get(obj.b.d, 0)).to.be.equal('a');",
          "48:     expect(objectPath.get(obj.b, 0)).to.be.equal(void 0);",
          "49:   });",
          "51:   it('should return the value under deep object', function() {",
          "52:     var obj = getTestObj();",
          "53:     expect(objectPath.get(obj, 'b.f')).to.be.equal('i');",
          "54:     expect(objectPath.get(obj, ['b','f'])).to.be.equal('i');",
          "55:   });",
          "57:   it('should return the value under array', function() {",
          "58:     var obj = getTestObj();",
          "59:     expect(objectPath.get(obj, 'b.d.0')).to.be.equal('a');",
          "60:     expect(objectPath.get(obj, ['b','d',0])).to.be.equal('a');",
          "61:   });",
          "63:   it('should return the value under array deep', function() {",
          "64:     var obj = getTestObj();",
          "65:     expect(objectPath.get(obj, 'b.e.1.f')).to.be.equal('g');",
          "66:     expect(objectPath.get(obj, ['b','e',1,'f'])).to.be.equal('g');",
          "67:   });",
          "69:   it('should return undefined for missing values under object', function() {",
          "70:     var obj = getTestObj();",
          "71:     expect(objectPath.get(obj, 'a.b')).to.not.exist;",
          "72:     expect(objectPath.get(obj, ['a','b'])).to.not.exist;",
          "73:   });",
          "75:   it('should return undefined for missing values under array', function() {",
          "76:     var obj = getTestObj();",
          "77:     expect(objectPath.get(obj, 'b.d.5')).to.not.exist;",
          "78:     expect(objectPath.get(obj, ['b','d','5'])).to.not.exist;",
          "79:   });",
          "81:   it('should return the value under integer-like key', function() {",
          "82:     var obj = { '1a': 'foo' };",
          "83:     expect(objectPath.get(obj, '1a')).to.be.equal('foo');",
          "84:     expect(objectPath.get(obj, ['1a'])).to.be.equal('foo');",
          "85:   });",
          "87:   it('should return the default value when the key doesnt exist', function() {",
          "88:     var obj = { '1a': 'foo' };",
          "89:     expect(objectPath.get(obj, '1b', null)).to.be.equal(null);",
          "90:     expect(objectPath.get(obj, ['1b'], null)).to.be.equal(null);",
          "91:   });",
          "93:   it('should return the default value when path is empty', function() {",
          "94:     var obj = { '1a': 'foo' };",
          "95:     expect(objectPath.get(obj, '', null)).to.be.deep.equal({ '1a': 'foo' });",
          "96:     expect(objectPath.get(obj, [])).to.be.deep.equal({ '1a': 'foo' });",
          "97:     expect(objectPath.get({  }, ['1'])).to.be.equal(undefined);",
          "98:   });",
          "100:   it('should return the default value when object is null or undefined', function() {",
          "101:     expect(objectPath.get(null, 'test', 'a')).to.be.deep.equal('a');",
          "102:     expect(objectPath.get(undefined, 'test', 'a')).to.be.deep.equal('a');",
          "103:   });",
          "107:     function assertSuccessForObjWithNullProto(){",
          "108:       var foo = 'FOO';",
          "109:       var objWithNullProto = Object.create(null);",
          "110:       objWithNullProto.foo = foo;",
          "111:       expect(objectPath.get(objWithNullProto, 'foo')).to.equal(foo);",
          "113:   );",
          "115:   it('should skip non own properties', function() {",
          "116:     var Base = function(enabled){ };",
          "121:     };",
          "122:     var Extended = function(){",
          "123:       Base.call(this,  true);",
          "124:     };",
          "125:     Extended.prototype = Object.create(Base.prototype);",
          "127:     var extended = new Extended();",
          "129:     expect(objectPath.get(extended, ['one','two'])).to.be.equal(undefined);",
          "130:     extended.enabled = true;",
          "132:     expect(objectPath.get(extended, 'enabled')).to.be.equal(true);",
          "133:     expect(objectPath.get(extended, 'one')).to.be.equal(undefined);",
          "134:   });",
          "135: });",
          "138: describe('set', function() {",
          "139:   it('should set the value using unicode key', function() {",
          "144:     };",
          "145:     objectPath.set(obj, '15\\u00f8C.3\\u0111', 2);",
          "146:     expect(objectPath.get(obj, '15\\u00f8C.3\\u0111')).to.be.equal(2);",
          "147:     objectPath.set(obj, '15\\u00f8C.3\\u0111', 3);",
          "148:     expect(objectPath.get(obj, ['15\\u00f8C','3\\u0111'])).to.be.equal(3);",
          "149:   });",
          "151:   it('should set the value using dot in key', function() {",
          "156:     };",
          "157:     objectPath.set(obj, ['a.b','looks.like'], 2);",
          "158:     expect(objectPath.get(obj, ['a.b','looks.like'])).to.be.equal(2);",
          "159:   });",
          "161:   it('should set value under shallow object', function() {",
          "162:     var obj = getTestObj();",
          "163:     objectPath.set(obj, 'c', {m: 'o'});",
          "164:     expect(obj).to.include.nested.property('c.m', 'o');",
          "165:     obj = getTestObj();",
          "166:     objectPath.set(obj, ['c'], {m: 'o'});",
          "167:     expect(obj).to.include.nested.property('c.m', 'o');",
          "168:   });",
          "170:   it('should set value using number path', function() {",
          "171:     var obj = getTestObj();",
          "172:     objectPath.set(obj.b.d, 0, 'o');",
          "173:     expect(obj).to.have.nested.property('b.d.0', 'o');",
          "174:   });",
          "176:   it('should set value under deep object', function() {",
          "177:     var obj = getTestObj();",
          "178:     objectPath.set(obj, 'b.c', 'o');",
          "179:     expect(obj).to.have.nested.property('b.c', 'o');",
          "180:     obj = getTestObj();",
          "181:     objectPath.set(obj, ['b','c'], 'o');",
          "182:     expect(obj).to.have.nested.property('b.c', 'o');",
          "183:   });",
          "185:   it('should set value under array', function() {",
          "186:     var obj = getTestObj();",
          "187:     objectPath.set(obj, 'b.e.1.g', 'f');",
          "188:     expect(obj).to.have.nested.property('b.e.1.g', 'f');",
          "189:     obj = getTestObj();",
          "190:     objectPath.set(obj, ['b','e',1,'g'], 'f');",
          "191:     expect(obj).to.have.nested.property('b.e.1.g', 'f');",
          "194:     objectPath.set(obj, 'b.0', 'a');",
          "195:     objectPath.set(obj, 'b.1', 'b');",
          "196:     expect(obj.b).to.be.deep.equal(['a', 'b']);",
          "197:   });",
          "199:   it('should create intermediate objects', function() {",
          "200:     var obj = getTestObj();",
          "201:     objectPath.set(obj, 'c.d.e.f', 'l');",
          "202:     expect(obj).to.have.nested.property('c.d.e.f', 'l');",
          "203:     obj = getTestObj();",
          "204:     objectPath.set(obj, ['c','d','e','f'], 'l');",
          "205:     expect(obj).to.have.nested.property('c.d.e.f', 'l');",
          "206:   });",
          "208:   it('should create intermediate arrays', function() {",
          "209:     var obj = getTestObj();",
          "210:     objectPath.set(obj, 'c.0.1.m', 'l');",
          "211:     expect(obj.c).to.be.an('array');",
          "212:     expect(obj.c[0]).to.be.an('array');",
          "213:     expect(obj).to.have.nested.property('c.0.1.m', 'l');",
          "214:     obj = getTestObj();",
          "215:     objectPath.set(obj, ['c','0', 1,'m'], 'l');",
          "216:     expect(obj.c).to.be.an('object');",
          "217:     expect(obj.c[0]).to.be.an('array');",
          "218:     expect(obj).to.have.nested.property('c.0.1.m', 'l');",
          "219:   });",
          "221:   it('should set value under integer-like key', function() {",
          "222:     var obj = getTestObj();",
          "223:     objectPath.set(obj, '1a', 'foo');",
          "224:     expect(obj).to.have.nested.property('1a', 'foo');",
          "225:     obj = getTestObj();",
          "226:     objectPath.set(obj, ['1a'], 'foo');",
          "227:     expect(obj).to.have.nested.property('1a', 'foo');",
          "228:   });",
          "230:   it('should set value under empty array', function() {",
          "231:     var obj = [];",
          "232:     objectPath.set(obj, [0], 'foo');",
          "233:     expect(obj[0]).to.be.equal('foo');",
          "234:     obj = [];",
          "235:     objectPath.set(obj, '0', 'foo');",
          "236:     expect(obj[0]).to.be.equal('foo');",
          "237:   });",
          "238: });",
          "241: describe('push', function() {",
          "242:   it('should push value to existing array using unicode key', function() {",
          "243:     var obj = getTestObj();",
          "244:     objectPath.push(obj, 'b.\\u1290c', 'l');",
          "245:     expect(obj).to.have.nested.property('b.\\u1290c.0', 'l');",
          "246:     objectPath.push(obj, ['b','\\u1290c'], 'l');",
          "247:     expect(obj).to.have.nested.property('b.\\u1290c.1', 'l');",
          "248:   });",
          "250:   it('should push value to existing array using dot key', function() {",
          "251:     var obj = getTestObj();",
          "252:     objectPath.push(obj, ['b','z.d'], 'l');",
          "253:     expect(objectPath.get(obj, ['b','z.d', 0])).to.be.equal('l');",
          "254:   });",
          "256:   it('should push value to existing array', function() {",
          "257:     var obj = getTestObj();",
          "258:     objectPath.push(obj, 'b.c', 'l');",
          "259:     expect(obj).to.have.nested.property('b.c.0', 'l');",
          "260:     obj = getTestObj();",
          "261:     objectPath.push(obj, ['b','c'], 'l');",
          "262:     expect(obj).to.have.nested.property('b.c.0', 'l');",
          "263:   });",
          "265:   it('should push value to new array', function() {",
          "266:     var obj = getTestObj();",
          "267:     objectPath.push(obj, 'b.h', 'l');",
          "268:     expect(obj).to.have.nested.property('b.h.0', 'l');",
          "269:     obj = getTestObj();",
          "270:     objectPath.push(obj, ['b','h'], 'l');",
          "271:     expect(obj).to.have.nested.property('b.h.0', 'l');",
          "272:   });",
          "274:   it('should push value to existing array using number path', function() {",
          "275:     var obj = getTestObj();",
          "276:     objectPath.push(obj.b.e, 0, 'l');",
          "277:     expect(obj).to.have.nested.property('b.e.0.0', 'l');",
          "278:   });",
          "280: });",
          "283: describe('ensureExists', function() {",
          "284:   it('should create the path if it does not exists', function() {",
          "285:     var obj = getTestObj();",
          "286:     var oldVal = objectPath.ensureExists(obj, 'b.g.1.l', 'test');",
          "287:     expect(oldVal).to.not.exist;",
          "288:     expect(obj).to.have.nested.property('b.g.1.l', 'test');",
          "289:     oldVal = objectPath.ensureExists(obj, 'b.g.1.l', 'test1');",
          "290:     expect(oldVal).to.be.equal('test');",
          "291:     expect(obj).to.have.nested.property('b.g.1.l', 'test');",
          "292:     oldVal = objectPath.ensureExists(obj, 'b.\\u8210', 'ok');",
          "293:     expect(oldVal).to.not.exist;",
          "294:     expect(obj).to.have.nested.property('b.\\u8210', 'ok');",
          "295:     oldVal = objectPath.ensureExists(obj, ['b','dot.dot'], 'ok');",
          "296:     expect(oldVal).to.not.exist;",
          "297:     expect(objectPath.get(obj, ['b','dot.dot'])).to.be.equal('ok');",
          "298:   });",
          "301:   it('should return the object if path is empty', function() {",
          "302:     var obj = getTestObj();",
          "303:     expect(objectPath.ensureExists(obj, [], 'test')).to.have.property('a', 'b');",
          "304:   });",
          "306:   it('Issue #26', function() {",
          "307:     var any = {};",
          "308:     objectPath.ensureExists(any, ['1','1'], {});",
          "309:     expect(any).to.be.an('object');",
          "310:     expect(any[1]).to.be.an('object');",
          "311:     expect(any[1][1]).to.be.an('object');",
          "312:   });",
          "313: });",
          "315: describe('coalesce', function(){",
          "316:   it('should return the first non-undefined value', function(){",
          "319:     };",
          "323:       ['might','not','exist'],",
          "325:     ])).to.equal('prop');",
          "326:   });",
          "328:   it('should work with falsy values (null, 0, \\'\\', false)', function(){",
          "",
          "[Added Lines]",
          "1: 'use strict'",
          "3:   objectPath = require('./index.js')",
          "6: function getTestObj () {",
          "12:       e: [{}, {f: 'g'}],",
          "15:   }",
          "18: describe('get', function () {",
          "19:   it('should return the value using unicode key', function () {",
          "24:     }",
          "25:     expect(objectPath.get(obj, '15\\u00f8C.3\\u0111')).to.be.equal(1)",
          "26:     expect(objectPath.get(obj, ['15\\u00f8C', '3\\u0111'])).to.be.equal(1)",
          "27:   })",
          "29:   it('should return the value using dot in key', function () {",
          "34:     }",
          "35:     expect(objectPath.get(obj, 'a.b.looks.like')).to.be.equal(void 0)",
          "36:     expect(objectPath.get(obj, ['a.b', 'looks.like'])).to.be.equal(1)",
          "37:   })",
          "39:   it('should return the value under shallow object', function () {",
          "40:     var obj = getTestObj()",
          "41:     expect(objectPath.get(obj, 'a')).to.be.equal('b')",
          "42:     expect(objectPath.get(obj, ['a'])).to.be.equal('b')",
          "43:   })",
          "45:   it('should work with number path', function () {",
          "46:     var obj = getTestObj()",
          "47:     expect(objectPath.get(obj.b.d, 0)).to.be.equal('a')",
          "48:     expect(objectPath.get(obj.b, 0)).to.be.equal(void 0)",
          "49:   })",
          "51:   it('should return the value under deep object', function () {",
          "52:     var obj = getTestObj()",
          "53:     expect(objectPath.get(obj, 'b.f')).to.be.equal('i')",
          "54:     expect(objectPath.get(obj, ['b', 'f'])).to.be.equal('i')",
          "55:   })",
          "57:   it('should return the value under array', function () {",
          "58:     var obj = getTestObj()",
          "59:     expect(objectPath.get(obj, 'b.d.0')).to.be.equal('a')",
          "60:     expect(objectPath.get(obj, ['b', 'd', 0])).to.be.equal('a')",
          "61:   })",
          "63:   it('should return the value under array deep', function () {",
          "64:     var obj = getTestObj()",
          "65:     expect(objectPath.get(obj, 'b.e.1.f')).to.be.equal('g')",
          "66:     expect(objectPath.get(obj, ['b', 'e', 1, 'f'])).to.be.equal('g')",
          "67:   })",
          "69:   it('should return undefined for missing values under object', function () {",
          "70:     var obj = getTestObj()",
          "71:     expect(objectPath.get(obj, 'a.b')).to.not.exist",
          "72:     expect(objectPath.get(obj, ['a', 'b'])).to.not.exist",
          "73:   })",
          "75:   it('should return undefined for missing values under array', function () {",
          "76:     var obj = getTestObj()",
          "77:     expect(objectPath.get(obj, 'b.d.5')).to.not.exist",
          "78:     expect(objectPath.get(obj, ['b', 'd', '5'])).to.not.exist",
          "79:   })",
          "81:   it('should return the value under integer-like key', function () {",
          "82:     var obj = {'1a': 'foo'}",
          "83:     expect(objectPath.get(obj, '1a')).to.be.equal('foo')",
          "84:     expect(objectPath.get(obj, ['1a'])).to.be.equal('foo')",
          "85:   })",
          "87:   it('should return the default value when the key doesnt exist', function () {",
          "88:     var obj = {'1a': 'foo'}",
          "89:     expect(objectPath.get(obj, '1b', null)).to.be.equal(null)",
          "90:     expect(objectPath.get(obj, ['1b'], null)).to.be.equal(null)",
          "91:   })",
          "93:   it('should return the default value when path is empty', function () {",
          "94:     var obj = {'1a': 'foo'}",
          "95:     expect(objectPath.get(obj, '', null)).to.be.deep.equal({'1a': 'foo'})",
          "96:     expect(objectPath.get(obj, [])).to.be.deep.equal({'1a': 'foo'})",
          "97:     expect(objectPath.get({}, ['1'])).to.be.equal(undefined)",
          "98:   })",
          "100:   it('should return the default value when object is null or undefined', function () {",
          "101:     expect(objectPath.get(null, 'test', 'a')).to.be.deep.equal('a')",
          "102:     expect(objectPath.get(undefined, 'test', 'a')).to.be.deep.equal('a')",
          "103:   })",
          "107:     function assertSuccessForObjWithNullProto () {",
          "108:       var foo = 'FOO'",
          "109:       var objWithNullProto = Object.create(null)",
          "110:       objWithNullProto.foo = foo",
          "111:       expect(objectPath.get(objWithNullProto, 'foo')).to.equal(foo)",
          "113:   )",
          "115:   it('should skip non own properties', function () {",
          "116:     var Base = function (enabled) {",
          "117:     }",
          "122:     }",
          "123:     var Extended = function () {",
          "124:       Base.call(this, true)",
          "125:     }",
          "126:     Extended.prototype = Object.create(Base.prototype)",
          "128:     var extended = new Extended()",
          "130:     expect(objectPath.get(extended, ['one', 'two'])).to.be.equal(undefined)",
          "131:     extended.enabled = true",
          "133:     expect(objectPath.get(extended, 'enabled')).to.be.equal(true)",
          "134:     expect(objectPath.get(extended, 'one')).to.be.equal(undefined)",
          "135:   })",
          "136: })",
          "139: describe('set', function () {",
          "140:   it('should set the value using unicode key', function () {",
          "145:     }",
          "146:     objectPath.set(obj, '15\\u00f8C.3\\u0111', 2)",
          "147:     expect(objectPath.get(obj, '15\\u00f8C.3\\u0111')).to.be.equal(2)",
          "148:     objectPath.set(obj, '15\\u00f8C.3\\u0111', 3)",
          "149:     expect(objectPath.get(obj, ['15\\u00f8C', '3\\u0111'])).to.be.equal(3)",
          "150:   })",
          "152:   it('should set the value using dot in key', function () {",
          "157:     }",
          "158:     objectPath.set(obj, ['a.b', 'looks.like'], 2)",
          "159:     expect(objectPath.get(obj, ['a.b', 'looks.like'])).to.be.equal(2)",
          "160:   })",
          "162:   it('should set value under shallow object', function () {",
          "163:     var obj = getTestObj()",
          "164:     objectPath.set(obj, 'c', {m: 'o'})",
          "165:     expect(obj).to.include.nested.property('c.m', 'o')",
          "166:     obj = getTestObj()",
          "167:     objectPath.set(obj, ['c'], {m: 'o'})",
          "168:     expect(obj).to.include.nested.property('c.m', 'o')",
          "169:   })",
          "171:   it('should set value using number path', function () {",
          "172:     var obj = getTestObj()",
          "173:     objectPath.set(obj.b.d, 0, 'o')",
          "174:     expect(obj).to.have.nested.property('b.d.0', 'o')",
          "175:   })",
          "177:   it('should set value under deep object', function () {",
          "178:     var obj = getTestObj()",
          "179:     objectPath.set(obj, 'b.c', 'o')",
          "180:     expect(obj).to.have.nested.property('b.c', 'o')",
          "181:     obj = getTestObj()",
          "182:     objectPath.set(obj, ['b', 'c'], 'o')",
          "183:     expect(obj).to.have.nested.property('b.c', 'o')",
          "184:   })",
          "186:   it('should set value under array', function () {",
          "187:     var obj = getTestObj()",
          "188:     objectPath.set(obj, 'b.e.1.g', 'f')",
          "189:     expect(obj).to.have.nested.property('b.e.1.g', 'f')",
          "190:     obj = getTestObj()",
          "191:     objectPath.set(obj, ['b', 'e', 1, 'g'], 'f')",
          "192:     expect(obj).to.have.nested.property('b.e.1.g', 'f')",
          "195:     objectPath.set(obj, 'b.0', 'a')",
          "196:     objectPath.set(obj, 'b.1', 'b')",
          "197:     expect(obj.b).to.be.deep.equal(['a', 'b'])",
          "198:   })",
          "200:   it('should create intermediate objects', function () {",
          "201:     var obj = getTestObj()",
          "202:     objectPath.set(obj, 'c.d.e.f', 'l')",
          "203:     expect(obj).to.have.nested.property('c.d.e.f', 'l')",
          "204:     obj = getTestObj()",
          "205:     objectPath.set(obj, ['c', 'd', 'e', 'f'], 'l')",
          "206:     expect(obj).to.have.nested.property('c.d.e.f', 'l')",
          "207:   })",
          "209:   it('should create intermediate arrays', function () {",
          "210:     var obj = getTestObj()",
          "211:     objectPath.set(obj, 'c.0.1.m', 'l')",
          "212:     expect(obj.c).to.be.an('array')",
          "213:     expect(obj.c[0]).to.be.an('array')",
          "214:     expect(obj).to.have.nested.property('c.0.1.m', 'l')",
          "215:     obj = getTestObj()",
          "216:     objectPath.set(obj, ['c', '0', 1, 'm'], 'l')",
          "217:     expect(obj.c).to.be.an('object')",
          "218:     expect(obj.c[0]).to.be.an('array')",
          "219:     expect(obj).to.have.nested.property('c.0.1.m', 'l')",
          "220:   })",
          "222:   it('should set value under integer-like key', function () {",
          "223:     var obj = getTestObj()",
          "224:     objectPath.set(obj, '1a', 'foo')",
          "225:     expect(obj).to.have.nested.property('1a', 'foo')",
          "226:     obj = getTestObj()",
          "227:     objectPath.set(obj, ['1a'], 'foo')",
          "228:     expect(obj).to.have.nested.property('1a', 'foo')",
          "229:   })",
          "231:   it('should set value under empty array', function () {",
          "232:     var obj = []",
          "233:     objectPath.set(obj, [0], 'foo')",
          "234:     expect(obj[0]).to.be.equal('foo')",
          "235:     obj = []",
          "236:     objectPath.set(obj, '0', 'foo')",
          "237:     expect(obj[0]).to.be.equal('foo')",
          "238:   })",
          "240:   it('[security] should not set magic properties in default mode', function () {",
          "241:     objectPath.set({}, '__proto__.injected', 'this is bad')",
          "242:     expect(Object.prototype.injected).to.be.undefined",
          "244:     function Clazz() {}",
          "245:     Clazz.prototype.test = 'original'",
          "247:     objectPath.set(new Clazz(), '__proto__.test', 'this is bad')",
          "248:     expect(Clazz.prototype.test).to.be.equal('original')",
          "250:     objectPath.set(new Clazz(), 'constructor.prototype.test', 'this is bad')",
          "251:     expect(Clazz.prototype.test).to.be.equal('original')",
          "252:   })",
          "254:   it('[security] should throw an exception if trying to set magic properties in inheritedProps mode', function () {",
          "255:     expect(function() {objectPath.withInheritedProps.set({}, '__proto__.injected', 'this is bad')})",
          "256:       .to.throw('For security reasons')",
          "257:     expect(Object.prototype.injected).to.be.undefined",
          "259:     function Clazz() {}",
          "260:     Clazz.prototype.test = 'original'",
          "262:     expect(function() {objectPath.withInheritedProps.set(new Clazz(), '__proto__.test', 'this is bad')})",
          "263:       .to.throw('For security reasons')",
          "264:     expect(Clazz.prototype.test).to.be.equal('original')",
          "266:     expect(function() {objectPath.withInheritedProps.set(new Clazz(), 'constructor.prototype.test', 'this is bad')})",
          "267:       .to.throw('For security reasons')",
          "268:     expect(Clazz.prototype.test).to.be.equal('original')",
          "270:     const obj = {}",
          "271:     expect(function() {objectPath.withInheritedProps.set(obj, 'constructor.prototype.injected', 'this is OK')})",
          "272:       .to.throw('For security reasons')",
          "273:     expect(Object.prototype.injected).to.be.undefined",
          "274:   })",
          "275: })",
          "278: describe('push', function () {",
          "279:   it('should push value to existing array using unicode key', function () {",
          "280:     var obj = getTestObj()",
          "281:     objectPath.push(obj, 'b.\\u1290c', 'l')",
          "282:     expect(obj).to.have.nested.property('b.\\u1290c.0', 'l')",
          "283:     objectPath.push(obj, ['b', '\\u1290c'], 'l')",
          "284:     expect(obj).to.have.nested.property('b.\\u1290c.1', 'l')",
          "285:   })",
          "287:   it('should push value to existing array using dot key', function () {",
          "288:     var obj = getTestObj()",
          "289:     objectPath.push(obj, ['b', 'z.d'], 'l')",
          "290:     expect(objectPath.get(obj, ['b', 'z.d', 0])).to.be.equal('l')",
          "291:   })",
          "293:   it('should push value to existing array', function () {",
          "294:     var obj = getTestObj()",
          "295:     objectPath.push(obj, 'b.c', 'l')",
          "296:     expect(obj).to.have.nested.property('b.c.0', 'l')",
          "297:     obj = getTestObj()",
          "298:     objectPath.push(obj, ['b', 'c'], 'l')",
          "299:     expect(obj).to.have.nested.property('b.c.0', 'l')",
          "300:   })",
          "302:   it('should push value to new array', function () {",
          "303:     var obj = getTestObj()",
          "304:     objectPath.push(obj, 'b.h', 'l')",
          "305:     expect(obj).to.have.nested.property('b.h.0', 'l')",
          "306:     obj = getTestObj()",
          "307:     objectPath.push(obj, ['b', 'h'], 'l')",
          "308:     expect(obj).to.have.nested.property('b.h.0', 'l')",
          "309:   })",
          "311:   it('should push value to existing array using number path', function () {",
          "312:     var obj = getTestObj()",
          "313:     objectPath.push(obj.b.e, 0, 'l')",
          "314:     expect(obj).to.have.nested.property('b.e.0.0', 'l')",
          "315:   })",
          "317: })",
          "320: describe('ensureExists', function () {",
          "321:   it('should create the path if it does not exists', function () {",
          "322:     var obj = getTestObj()",
          "323:     var oldVal = objectPath.ensureExists(obj, 'b.g.1.l', 'test')",
          "324:     expect(oldVal).to.not.exist",
          "325:     expect(obj).to.have.nested.property('b.g.1.l', 'test')",
          "326:     oldVal = objectPath.ensureExists(obj, 'b.g.1.l', 'test1')",
          "327:     expect(oldVal).to.be.equal('test')",
          "328:     expect(obj).to.have.nested.property('b.g.1.l', 'test')",
          "329:     oldVal = objectPath.ensureExists(obj, 'b.\\u8210', 'ok')",
          "330:     expect(oldVal).to.not.exist",
          "331:     expect(obj).to.have.nested.property('b.\\u8210', 'ok')",
          "332:     oldVal = objectPath.ensureExists(obj, ['b', 'dot.dot'], 'ok')",
          "333:     expect(oldVal).to.not.exist",
          "334:     expect(objectPath.get(obj, ['b', 'dot.dot'])).to.be.equal('ok')",
          "335:   })",
          "338:   it('should return the object if path is empty', function () {",
          "339:     var obj = getTestObj()",
          "340:     expect(objectPath.ensureExists(obj, [], 'test')).to.have.property('a', 'b')",
          "341:   })",
          "343:   it('Issue #26', function () {",
          "344:     var any = {}",
          "345:     objectPath.ensureExists(any, ['1', '1'], {})",
          "346:     expect(any).to.be.an('object')",
          "347:     expect(any[1]).to.be.an('object')",
          "348:     expect(any[1][1]).to.be.an('object')",
          "349:   })",
          "350: })",
          "352: describe('coalesce', function () {",
          "353:   it('should return the first non-undefined value', function () {",
          "356:     }",
          "360:       ['might', 'not', 'exist'],",
          "362:     ])).to.equal('prop')",
          "363:   })",
          "365:   it('should work with falsy values (null, 0, \\'\\', false)', function () {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:         empty: '',",
          "334:         zero: 0",
          "335:       }",
          "338:     expect(objectPath.coalesce(obj, [",
          "339:       'doesnt.exist',",
          "340:       'is.zero'",
          "343:     expect(objectPath.coalesce(obj, [",
          "344:       'doesnt.exist',",
          "345:       'is.false'",
          "348:     expect(objectPath.coalesce(obj, [",
          "349:       'doesnt.exist',",
          "350:       'is.null'",
          "353:     expect(objectPath.coalesce(obj, [",
          "354:       'doesnt.exist',",
          "355:       'is.empty'",
          "360:     var obj = {",
          "361:       doesnt: 'matter'",
          "368:     var obj = {",
          "369:       '\\u7591': true,",
          "370:       'dot.dot': false",
          "396:     }",
          "403:     var",
          "404:       obj = {",
          "405:         string: 'some string',",
          "407:         number: 21,",
          "408:         boolean: true,",
          "409:         object: {",
          "411:           sub: {",
          "412:             'property': true",
          "413:           },",
          "",
          "[Removed Lines]",
          "336:     };",
          "341:     ])).to.equal(0);",
          "346:     ])).to.equal(false);",
          "351:     ])).to.equal(null);",
          "356:     ])).to.equal('');",
          "357:   });",
          "359:   it('returns defaultValue if no paths found', function(){",
          "362:     };",
          "364:     expect(objectPath.coalesce(obj, ['some.inexistant','path',['on','object']], 'false')).to.equal('false');",
          "365:   });",
          "367:   it('works with unicode and dot keys', function(){",
          "371:     };",
          "373:     expect(objectPath.coalesce(obj, ['1', '\\u7591', 'a.b'])).to.equal(true);",
          "374:     expect(objectPath.coalesce(obj, ['1', ['dot.dot'], '\\u7591'])).to.equal(false);",
          "375:   });",
          "376: });",
          "378: describe('empty', function(){",
          "379:   it('should ignore invalid arguments safely', function(){",
          "380:     var obj = {};",
          "381:     expect(objectPath.empty()).to.equal(void 0);",
          "382:     expect(objectPath.empty(obj, 'path')).to.equal(void 0);",
          "383:     expect(objectPath.empty(obj, '')).to.equal(void 0);",
          "385:     obj.path = true;",
          "387:     expect(objectPath.empty(obj, 'inexistant')).to.equal(void 0);",
          "389:     expect(objectPath.empty(null, 'path')).to.equal(void 0);",
          "390:     expect(objectPath.empty(void 0, 'path')).to.equal(void 0);",
          "391:   });",
          "393:   it('should empty each path according to their types', function(){",
          "394:     function Instance(){",
          "395:       this.notOwn = true;",
          "399:     Instance.prototype.test = function(){};",
          "401:     Instance.prototype.arr = [];",
          "406:         array: ['some','array',[1,2,3]],",
          "410:           some:'property',",
          "",
          "[Added Lines]",
          "373:     }",
          "378:     ])).to.equal(0)",
          "383:     ])).to.equal(false)",
          "388:     ])).to.equal(null)",
          "393:     ])).to.equal('')",
          "394:   })",
          "396:   it('returns defaultValue if no paths found', function () {",
          "399:     }",
          "401:     expect(objectPath.coalesce(obj, ['some.inexistant', 'path', ['on', 'object']], 'false')).to.equal('false')",
          "402:   })",
          "404:   it('works with unicode and dot keys', function () {",
          "408:     }",
          "410:     expect(objectPath.coalesce(obj, ['1', '\\u7591', 'a.b'])).to.equal(true)",
          "411:     expect(objectPath.coalesce(obj, ['1', ['dot.dot'], '\\u7591'])).to.equal(false)",
          "412:   })",
          "413: })",
          "415: describe('empty', function () {",
          "416:   it('should ignore invalid arguments safely', function () {",
          "417:     var obj = {}",
          "418:     expect(objectPath.empty()).to.equal(void 0)",
          "419:     expect(objectPath.empty(obj, 'path')).to.equal(void 0)",
          "420:     expect(objectPath.empty(obj, '')).to.equal(void 0)",
          "422:     obj.path = true",
          "424:     expect(objectPath.empty(obj, 'inexistant')).to.equal(void 0)",
          "426:     expect(objectPath.empty(null, 'path')).to.equal(void 0)",
          "427:     expect(objectPath.empty(void 0, 'path')).to.equal(void 0)",
          "428:   })",
          "430:   it('should empty each path according to their types', function () {",
          "431:     function Instance () {",
          "432:       this.notOwn = true",
          "436:     Instance.prototype.test = function () {",
          "437:     }",
          "439:     Instance.prototype.arr = []",
          "444:         array: ['some', 'array', [1, 2, 3]],",
          "448:           some: 'property',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:           undefinedProp: void 0",
          "416:         },",
          "417:         instance: new Instance()",
          "572:     expect(obj.b.d).to.have.members([",
          "573:       'a',",
          "574:       'b',",
          "575:       ,",
          "576:       ,",
          "577:       'asdf'",
          "582: describe('has', function () {",
          "583:   it('should return false for empty object', function () {",
          "587:   it('should handle empty paths properly', function () {",
          "591:     obj[''] = 1",
          "624:     var obj = {",
          "625:       b: ['a']",
          "627:     obj.b[3] = {o: 'a'}",
          "664:     obj.sparseArray = [1, undefined, 3]",
          "671: describe('bind object', function () {",
          "714:     var obj = {",
          "715:       should: {have: 'prop'}",
          "719:     expect(model.coalesce([",
          "720:       'doesnt.exist',",
          "722:       'should.have'",
          "729:     }",
          "736:     var",
          "737:       obj = {",
          "738:         string: 'some string',",
          "740:         number: 21,",
          "741:         boolean: true,",
          "742:         object: {",
          "744:           sub: {",
          "745:             'property': true",
          "746:           }",
          "747:         },",
          "748:         instance: new Instance()",
          "835: describe('Don\\'t access not own properties [default]', function () {",
          "841:     expect(objectPath.get(obj, 'notOwn')).to.be.undefined",
          "845:     var proto = {",
          "846:       notOwn: {}",
          "847:     }",
          "848:     var obj = Object.create(proto)",
          "856:     var proto = {",
          "857:       notOwn: {a: 'a'}",
          "858:     }",
          "859:     var obj = Object.create(proto)",
          "867:     var proto = {",
          "868:       notOwn: {a: 'a'}",
          "869:     }",
          "878:     var proto = {",
          "879:       notOwn: {a: 'a'}",
          "880:     }",
          "892: describe('Access own properties [optional]', function () {",
          "898:     expect(objectPath.withInheritedProps.get(obj, 'notOwn.a')).to.be.equal('a')",
          "902:     var proto = {",
          "903:       notOwn: {}",
          "904:     }",
          "905:     var obj = Object.create(proto)",
          "914:     var proto = {",
          "915:       notOwn: {a: 'a'}",
          "916:     }",
          "917:     var obj = Object.create(proto)",
          "924:     var proto = {",
          "925:       notOwn: {a: 'a'}",
          "926:     }",
          "935:     var proto = {",
          "936:       notOwn: {a: 'a'}",
          "937:     }",
          "",
          "[Removed Lines]",
          "418:       };",
          "421:     obj['function'] = function(){};",
          "423:     objectPath.empty(obj, ['array','2']);",
          "424:     expect(obj.array[2]).to.deep.equal([]);",
          "426:     objectPath.empty(obj, 'object.sub');",
          "427:     expect(obj.object.sub).to.deep.equal({});",
          "429:     objectPath.empty(obj, 'object.nullProp');",
          "430:     expect(obj.object.nullProp).to.equal(null);",
          "432:     objectPath.empty(obj, 'object.undefinedProp');",
          "433:     expect(obj.object.undefinedProp).to.equal(void 0);",
          "434:     expect(obj.object).to.have.property('undefinedProp');",
          "436:     objectPath.empty(obj, 'object.notAProp');",
          "437:     expect(obj.object.notAProp).to.equal(void 0);",
          "438:     expect(obj.object).to.not.have.property('notAProp');",
          "440:     objectPath.empty(obj, 'instance.test');",
          "442:     expect(obj.instance.test).to.be.a('function');",
          "443:     expect(Instance.prototype.test).to.be.a('function');",
          "445:     objectPath.empty(obj, 'string');",
          "446:     objectPath.empty(obj, 'number');",
          "447:     objectPath.empty(obj, 'boolean');",
          "448:     objectPath.empty(obj, 'function');",
          "449:     objectPath.empty(obj, 'array');",
          "450:     objectPath.empty(obj, 'object');",
          "451:     objectPath.empty(obj, 'instance');",
          "453:     expect(obj.string).to.equal('');",
          "454:     expect(obj.array).to.deep.equal([]);",
          "455:     expect(obj.number).to.equal(0);",
          "456:     expect(obj.boolean).to.equal(false);",
          "457:     expect(obj.object).to.deep.equal({});",
          "458:     expect(obj.instance.notOwn).to.be.an('undefined');",
          "459:     expect(obj.instance.arr).to.be.an('array');",
          "460:     expect(obj['function']).to.equal(null);",
          "461:   });",
          "462: });",
          "464: describe('del', function(){",
          "465:   it('should work with number path', function(){",
          "466:     var obj = getTestObj();",
          "467:     objectPath.del(obj.b.d, 1);",
          "468:     expect(obj.b.d).to.deep.equal(['a']);",
          "469:   });",
          "471:   it('should remove null and undefined props (but not explode on nested)', function(){",
          "472:     var obj = { nullProp: null, undefinedProp: void 0 };",
          "473:     expect(obj).to.have.property('nullProp');",
          "474:     expect(obj).to.have.property('undefinedProp');",
          "476:     objectPath.del(obj, 'nullProp.foo');",
          "477:     objectPath.del(obj, 'undefinedProp.bar');",
          "478:     expect(obj).to.have.property('nullProp');",
          "479:     expect(obj).to.have.property('undefinedProp');",
          "480:     expect(obj).to.deep.equal({ nullProp: null, undefinedProp: void 0 });",
          "482:     objectPath.del(obj, 'nullProp');",
          "483:     objectPath.del(obj, 'undefinedProp');",
          "484:     expect(obj).to.not.have.property('nullProp');",
          "485:     expect(obj).to.not.have.property('undefinedProp');",
          "486:     expect(obj).to.deep.equal({});",
          "487:   });",
          "489:   it('should delete deep paths', function(){",
          "490:     var obj = getTestObj();",
          "492:     expect(objectPath.del(obj)).to.be.equal(obj);",
          "494:     objectPath.set(obj, 'b.g.1.0', 'test');",
          "495:     objectPath.set(obj, 'b.g.1.1', 'test');",
          "496:     objectPath.set(obj, 'b.h.az', 'test');",
          "497:     objectPath.set(obj, 'b.\\ubeef', 'test');",
          "498:     objectPath.set(obj, ['b','dot.dot'], 'test');",
          "500:     expect(obj).to.have.nested.property('b.g.1.0','test');",
          "501:     expect(obj).to.have.nested.property('b.g.1.1','test');",
          "502:     expect(obj).to.have.nested.property('b.h.az','test');",
          "503:     expect(obj).to.have.nested.property('b.\\ubeef','test');",
          "505:     objectPath.del(obj, 'b.h.az');",
          "506:     expect(obj).to.not.have.nested.property('b.h.az');",
          "507:     expect(obj).to.have.nested.property('b.h');",
          "509:     objectPath.del(obj, 'b.g.1.1');",
          "510:     expect(obj).to.not.have.nested.property('b.g.1.1');",
          "511:     expect(obj).to.have.nested.property('b.g.1.0','test');",
          "513:     objectPath.del(obj, 'b.\\ubeef');",
          "514:     expect(obj).to.not.have.nested.property('b.\\ubeef');",
          "516:     objectPath.del(obj, ['b','dot.dot']);",
          "517:     expect(objectPath.get(obj, ['b','dot.dot'])).to.be.equal(void 0);",
          "519:     objectPath.del(obj, ['b','g','1','0']);",
          "520:     expect(obj).to.not.have.nested.property('b.g.1.0');",
          "521:     expect(obj).to.have.nested.property('b.g.1');",
          "523:     expect(objectPath.del(obj, ['b'])).to.not.have.nested.property('b.g');",
          "524:     expect(obj).to.be.deep.equal({'a':'b'});",
          "525:   });",
          "527:   it('should remove items from existing array', function(){",
          "528:     var obj = getTestObj();",
          "530:     objectPath.del(obj, 'b.d.0');",
          "531:     expect(obj.b.d).to.have.length(1);",
          "532:     expect(obj.b.d).to.be.deep.equal(['b']);",
          "534:     objectPath.del(obj, 'b.d.0');",
          "535:     expect(obj.b.d).to.have.length(0);",
          "536:     expect(obj.b.d).to.be.deep.equal([]);",
          "537:   });",
          "538: });",
          "540: describe('insert', function(){",
          "541:   it('should insert value into existing array', function(){",
          "542:     var obj = getTestObj();",
          "544:     objectPath.insert(obj, 'b.c', 'asdf');",
          "545:     expect(obj).to.have.nested.property('b.c.0', 'asdf');",
          "546:     expect(obj).to.not.have.nested.property('b.c.1');",
          "547:   });",
          "549:   it('should create intermediary array', function(){",
          "550:     var obj = getTestObj();",
          "552:     objectPath.insert(obj, 'b.c.0', 'asdf');",
          "553:     expect(obj).to.have.nested.property('b.c.0.0', 'asdf');",
          "554:   });",
          "556:   it('should insert in another index', function(){",
          "557:     var obj = getTestObj();",
          "559:     objectPath.insert(obj, 'b.d', 'asdf', 1);",
          "560:     expect(obj).to.have.nested.property('b.d.1', 'asdf');",
          "561:     expect(obj).to.have.nested.property('b.d.0', 'a');",
          "562:     expect(obj).to.have.nested.property('b.d.2', 'b');",
          "563:   });",
          "565:   it('should handle sparse array', function(){",
          "566:     var obj = getTestObj();",
          "567:     obj.b.d = new Array(4);",
          "568:     obj.b.d[0] = 'a';",
          "569:     obj.b.d[1] = 'b';",
          "571:     objectPath.insert(obj, 'b.d', 'asdf', 3);",
          "578:     ]);",
          "579:   });",
          "580: });",
          "584:     expect(objectPath.has({}, 'a')).to.be.equal(false);",
          "585:   });",
          "588:     var obj = getTestObj();",
          "589:     expect(objectPath.has(obj, '')).to.be.equal(false);",
          "590:     expect(objectPath.has(obj, [''])).to.be.equal(false);",
          "592:     expect(objectPath.has(obj, '')).to.be.equal(true);",
          "593:     expect(objectPath.has(obj, [''])).to.be.equal(true);",
          "595:     expect(objectPath.has(obj, [])).to.be.equal(true);",
          "596:     expect(objectPath.has(null, [])).to.be.equal(false);",
          "597:   });",
          "599:   it('should test under shallow object', function() {",
          "600:     var obj = getTestObj();",
          "601:     expect(objectPath.has(obj, 'a')).to.be.equal(true);",
          "602:     expect(objectPath.has(obj, ['a'])).to.be.equal(true);",
          "603:     expect(objectPath.has(obj, 'z')).to.be.equal(false);",
          "604:     expect(objectPath.has(obj, ['z'])).to.be.equal(false);",
          "605:   });",
          "607:   it('should work with number path', function() {",
          "608:     var obj = getTestObj();",
          "609:     expect(objectPath.has(obj.b.d, 0)).to.be.equal(true);",
          "610:     expect(objectPath.has(obj.b, 0)).to.be.equal(false);",
          "611:     expect(objectPath.has(obj.b.d, 10)).to.be.equal(false);",
          "612:     expect(objectPath.has(obj.b, 10)).to.be.equal(false);",
          "613:   });",
          "615:   it('should test under deep object', function() {",
          "616:     var obj = getTestObj();",
          "617:     expect(objectPath.has(obj, 'b.f')).to.be.equal(true);",
          "618:     expect(objectPath.has(obj, ['b','f'])).to.be.equal(true);",
          "619:     expect(objectPath.has(obj, 'b.g')).to.be.equal(false);",
          "620:     expect(objectPath.has(obj, ['b','g'])).to.be.equal(false);",
          "621:   });",
          "623:   it('should test value under array', function() {",
          "626:     };",
          "628:     expect(objectPath.has(obj, 'b.0')).to.be.equal(true);",
          "629:     expect(objectPath.has(obj, 'b.1')).to.be.equal(true);",
          "630:     expect(objectPath.has(obj, 'b.3.o')).to.be.equal(true);",
          "631:     expect(objectPath.has(obj, 'b.3.qwe')).to.be.equal(false);",
          "632:     expect(objectPath.has(obj, 'b.4')).to.be.equal(false);",
          "633:   });",
          "635:   it('should test the value under array deep', function() {",
          "636:     var obj = getTestObj();",
          "637:     expect(objectPath.has(obj, 'b.e.1.f')).to.be.equal(true);",
          "638:     expect(objectPath.has(obj, ['b','e',1,'f'])).to.be.equal(true);",
          "639:     expect(objectPath.has(obj, 'b.e.1.f.g.h.i')).to.be.equal(false);",
          "640:     expect(objectPath.has(obj, ['b','e',1,'f','g','h','i'])).to.be.equal(false);",
          "641:   });",
          "643:   it('should test the value under integer-like key', function() {",
          "644:     var obj = { '1a': 'foo' };",
          "645:     expect(objectPath.has(obj, '1a')).to.be.equal(true);",
          "646:     expect(objectPath.has(obj, ['1a'])).to.be.equal(true);",
          "647:   });",
          "649:   it('should distinct nonexistent key and key = undefined', function() {",
          "650:     var obj = {};",
          "651:     expect(objectPath.has(obj, 'key')).to.be.equal(false);",
          "653:     obj.key = undefined;",
          "654:     expect(objectPath.has(obj, 'key')).to.be.equal(true);",
          "655:   });",
          "657:   it('should work with deep undefined/null values', function() {",
          "658:     var obj = {};",
          "659:     expect(objectPath.has(obj, 'missing.test')).to.be.equal(false);",
          "661:     obj.missing = null;",
          "662:     expect(objectPath.has(obj, 'missing.test')).to.be.equal(false);",
          "665:     expect(objectPath.has(obj, 'sparseArray.1.test')).to.be.equal(false);",
          "666:   });",
          "667: });",
          "673:   it('should return the value under shallow object', function() {",
          "674:     var obj = getTestObj();",
          "675:     var model = objectPath(obj);",
          "676:     expect(model.get('a')).to.be.equal('b');",
          "677:     expect(model.get(['a'])).to.be.equal('b');",
          "678:   });",
          "680:   it('should set value under shallow object', function() {",
          "681:     var obj = getTestObj();",
          "682:     var model = objectPath(obj);",
          "683:     model.set('c', {m: 'o'});",
          "684:     expect(obj).to.have.nested.property('c.m', 'o');",
          "685:     obj = getTestObj();",
          "686:     model = objectPath(obj);",
          "687:     model.set(['c'], {m: 'o'});",
          "688:     expect(obj).to.have.nested.property('c.m', 'o');",
          "689:   });",
          "691:   it('should push value to existing array', function() {",
          "692:     var obj = getTestObj();",
          "693:     var model = objectPath(obj);",
          "694:     model.push('b.c', 'l');",
          "695:     expect(obj).to.have.nested.property('b.c.0', 'l');",
          "696:     obj = getTestObj();",
          "697:     model = objectPath(obj);",
          "698:     model.push(['b','c'], 'l');",
          "699:     expect(obj).to.have.nested.property('b.c.0', 'l');",
          "700:   });",
          "702:   it('should create the path if it does not exists', function() {",
          "703:     var obj = getTestObj();",
          "704:     var model = objectPath(obj);",
          "705:     var oldVal = model.ensureExists('b.g.1.l', 'test');",
          "706:     expect(oldVal).to.not.exist;",
          "707:     expect(obj).to.have.nested.property('b.g.1.l', 'test');",
          "708:     oldVal = model.ensureExists('b.g.1.l', 'test1');",
          "709:     expect(oldVal).to.be.equal('test');",
          "710:     expect(obj).to.have.nested.property('b.g.1.l', 'test');",
          "711:   });",
          "713:   it('should return the first non-undefined value', function(){",
          "716:     };",
          "717:     var model = objectPath(obj);",
          "721:       ['might','not','exist'],",
          "723:     ])).to.equal('prop');",
          "724:   });",
          "726:   it('should empty each path according to their types', function(){",
          "727:     function Instance(){",
          "728:       this.notOwn = true;",
          "732:     Instance.prototype.test = function(){};",
          "734:     Instance.prototype.arr = [];",
          "739:         array: ['some','array',[1,2,3]],",
          "743:           some:'property',",
          "749:       };",
          "752:     obj['function'] = function(){};",
          "754:     var model = objectPath(obj);",
          "756:     model.empty(['array','2']);",
          "757:     expect(obj.array[2]).to.deep.equal([]);",
          "759:     model.empty('object.sub');",
          "760:     expect(obj.object.sub).to.deep.equal({});",
          "762:     model.empty('instance.test');",
          "764:     expect(obj.instance.test).to.be.a('function');",
          "765:     expect(Instance.prototype.test).to.be.a('function');",
          "767:     model.empty('string');",
          "768:     model.empty('number');",
          "769:     model.empty('boolean');",
          "770:     model.empty('function');",
          "771:     model.empty('array');",
          "772:     model.empty('object');",
          "773:     model.empty('instance');",
          "775:     expect(obj.string).to.equal('');",
          "776:     expect(obj.array).to.deep.equal([]);",
          "777:     expect(obj.number).to.equal(0);",
          "778:     expect(obj.boolean).to.equal(false);",
          "779:     expect(obj.object).to.deep.equal({});",
          "780:     expect(obj.instance.notOwn).to.be.an('undefined');",
          "781:     expect(obj.instance.arr).to.be.an('array');",
          "782:     expect(obj['function']).to.equal(null);",
          "783:   });",
          "785:   it('should delete deep paths', function(){",
          "786:     var obj = getTestObj();",
          "787:     var model = objectPath(obj);",
          "789:     expect(model.del()).to.be.equal(obj);",
          "791:     model.set('b.g.1.0', 'test');",
          "792:     model.set('b.g.1.1', 'test');",
          "793:     model.set('b.h.az', 'test');",
          "795:     expect(obj).to.have.nested.property('b.g.1.0','test');",
          "796:     expect(obj).to.have.nested.property('b.g.1.1','test');",
          "797:     expect(obj).to.have.nested.property('b.h.az','test');",
          "799:     model.del('b.h.az');",
          "800:     expect(obj).to.not.have.nested.property('b.h.az');",
          "801:     expect(obj).to.have.nested.property('b.h');",
          "803:     model.del('b.g.1.1');",
          "804:     expect(obj).to.not.have.nested.property('b.g.1.1');",
          "805:     expect(obj).to.have.nested.property('b.g.1.0','test');",
          "807:     model.del(['b','g','1','0']);",
          "808:     expect(obj).to.not.have.nested.property('b.g.1.0');",
          "809:     expect(obj).to.have.nested.property('b.g.1');",
          "811:     expect(model.del(['b'])).to.not.have.nested.property('b.g');",
          "812:     expect(obj).to.be.deep.equal({'a':'b'});",
          "813:   });",
          "815:   it('should insert value into existing array', function(){",
          "816:     var obj = getTestObj();",
          "817:     var model = objectPath(obj);",
          "819:     model.insert('b.c', 'asdf');",
          "820:     expect(obj).to.have.nested.property('b.c.0', 'asdf');",
          "821:     expect(obj).to.not.have.nested.property('b.c.1');",
          "822:   });",
          "824:   it('should test under shallow object', function() {",
          "825:     var obj = getTestObj();",
          "826:     var model = objectPath(obj);",
          "828:     expect(model.has('a')).to.be.equal(true);",
          "829:     expect(model.has(['a'])).to.be.equal(true);",
          "830:     expect(model.has('z')).to.be.equal(false);",
          "831:     expect(model.has(['z'])).to.be.equal(false);",
          "832:   });",
          "833: });",
          "836:   it('should not get a not own property', function() {",
          "837:     var Obj = function() {};",
          "838:     Obj.prototype.notOwn = {a: 'a'};",
          "839:     var obj = new Obj();",
          "842:   });",
          "844:   it('should set a not own property on the instance (not the prototype)', function() {",
          "850:     objectPath.set(obj, 'notOwn.test', 'a');",
          "851:     expect(obj.notOwn.test).to.be.equal('a');",
          "852:     expect(proto.notOwn).to.be.deep.equal({});",
          "853:   });",
          "855:   it('has should return false on a not own property', function() {",
          "862:     expect(objectPath.has(obj, 'notOwn')).to.be.false;",
          "863:     expect(objectPath.has(obj, 'notOwn.a')).to.be.false;",
          "864:   });",
          "866:   it('empty should not empty on a not own property', function() {",
          "870:     var obj = Object.create(proto);",
          "872:     objectPath.empty(obj, 'notOwn');",
          "873:     expect(proto.notOwn).to.be.deep.equal({a: 'a'});",
          "874:     expect(obj.notOwn).to.be.deep.equal({a: 'a'});",
          "875:   });",
          "877:   it('del should not delete not own property', function() {",
          "881:     var obj = Object.create(proto);",
          "883:     objectPath.del(obj, 'notOwn.a');",
          "884:     expect(proto.notOwn).to.be.deep.equal({a: 'a'});",
          "889:   });",
          "890: });",
          "893:   it('should get a not own property', function() {",
          "894:     var Obj = function() {};",
          "895:     Obj.prototype.notOwn = {a: 'a'};",
          "896:     var obj = new Obj();",
          "899:   });",
          "901:   it('should set a deep not own property on the prototype (if exists)', function() {",
          "907:     objectPath.withInheritedProps.set(obj, 'notOwn.test', 'a');",
          "908:     expect(obj.notOwn.test).to.be.equal('a');",
          "909:     expect(proto.notOwn).to.be.deep.equal({test: 'a'});",
          "910:   });",
          "913:   it('has should return true on a not own property', function() {",
          "919:     expect(objectPath.withInheritedProps.has(obj, 'notOwn')).to.be.true;",
          "920:     expect(objectPath.withInheritedProps.has(obj, 'notOwn.a')).to.be.true;",
          "921:   });",
          "923:   it('empty should empty a not own property', function() {",
          "927:     var obj = Object.create(proto);",
          "929:     objectPath.withInheritedProps.empty(obj, 'notOwn');",
          "930:     expect(proto.notOwn).to.be.deep.equal({});",
          "931:     expect(obj.notOwn).to.be.deep.equal({});",
          "932:   });",
          "934:   it('del should delete a not own property', function() {",
          "938:     var obj = Object.create(proto);",
          "940:     objectPath.withInheritedProps.del(obj, 'notOwn.a');",
          "941:     expect(proto.notOwn).to.be.deep.equal({});",
          "943:     objectPath.withInheritedProps.del(obj, 'notOwn');",
          "946:   });",
          "947: });",
          "",
          "[Added Lines]",
          "456:       }",
          "459:     obj['function'] = function () {",
          "460:     }",
          "462:     objectPath.empty(obj, ['array', '2'])",
          "463:     expect(obj.array[2]).to.deep.equal([])",
          "465:     objectPath.empty(obj, 'object.sub')",
          "466:     expect(obj.object.sub).to.deep.equal({})",
          "468:     objectPath.empty(obj, 'object.nullProp')",
          "469:     expect(obj.object.nullProp).to.equal(null)",
          "471:     objectPath.empty(obj, 'object.undefinedProp')",
          "472:     expect(obj.object.undefinedProp).to.equal(void 0)",
          "473:     expect(obj.object).to.have.property('undefinedProp')",
          "475:     objectPath.empty(obj, 'object.notAProp')",
          "476:     expect(obj.object.notAProp).to.equal(void 0)",
          "477:     expect(obj.object).to.not.have.property('notAProp')",
          "479:     objectPath.empty(obj, 'instance.test')",
          "481:     expect(obj.instance.test).to.be.a('function')",
          "482:     expect(Instance.prototype.test).to.be.a('function')",
          "484:     objectPath.empty(obj, 'string')",
          "485:     objectPath.empty(obj, 'number')",
          "486:     objectPath.empty(obj, 'boolean')",
          "487:     objectPath.empty(obj, 'function')",
          "488:     objectPath.empty(obj, 'array')",
          "489:     objectPath.empty(obj, 'object')",
          "490:     objectPath.empty(obj, 'instance')",
          "492:     expect(obj.string).to.equal('')",
          "493:     expect(obj.array).to.deep.equal([])",
          "494:     expect(obj.number).to.equal(0)",
          "495:     expect(obj.boolean).to.equal(false)",
          "496:     expect(obj.object).to.deep.equal({})",
          "497:     expect(obj.instance.notOwn).to.be.an('undefined')",
          "498:     expect(obj.instance.arr).to.be.an('array')",
          "499:     expect(obj['function']).to.equal(null)",
          "500:   })",
          "501: })",
          "503: describe('del', function () {",
          "504:   it('should work with number path', function () {",
          "505:     var obj = getTestObj()",
          "506:     objectPath.del(obj.b.d, 1)",
          "507:     expect(obj.b.d).to.deep.equal(['a'])",
          "508:   })",
          "510:   it('should remove null and undefined props (but not explode on nested)', function () {",
          "511:     var obj = {nullProp: null, undefinedProp: void 0}",
          "512:     expect(obj).to.have.property('nullProp')",
          "513:     expect(obj).to.have.property('undefinedProp')",
          "515:     objectPath.del(obj, 'nullProp.foo')",
          "516:     objectPath.del(obj, 'undefinedProp.bar')",
          "517:     expect(obj).to.have.property('nullProp')",
          "518:     expect(obj).to.have.property('undefinedProp')",
          "519:     expect(obj).to.deep.equal({nullProp: null, undefinedProp: void 0})",
          "521:     objectPath.del(obj, 'nullProp')",
          "522:     objectPath.del(obj, 'undefinedProp')",
          "523:     expect(obj).to.not.have.property('nullProp')",
          "524:     expect(obj).to.not.have.property('undefinedProp')",
          "525:     expect(obj).to.deep.equal({})",
          "526:   })",
          "528:   it('should delete deep paths', function () {",
          "529:     var obj = getTestObj()",
          "531:     expect(objectPath.del(obj)).to.be.equal(obj)",
          "533:     objectPath.set(obj, 'b.g.1.0', 'test')",
          "534:     objectPath.set(obj, 'b.g.1.1', 'test')",
          "535:     objectPath.set(obj, 'b.h.az', 'test')",
          "536:     objectPath.set(obj, 'b.\\ubeef', 'test')",
          "537:     objectPath.set(obj, ['b', 'dot.dot'], 'test')",
          "539:     expect(obj).to.have.nested.property('b.g.1.0', 'test')",
          "540:     expect(obj).to.have.nested.property('b.g.1.1', 'test')",
          "541:     expect(obj).to.have.nested.property('b.h.az', 'test')",
          "542:     expect(obj).to.have.nested.property('b.\\ubeef', 'test')",
          "544:     objectPath.del(obj, 'b.h.az')",
          "545:     expect(obj).to.not.have.nested.property('b.h.az')",
          "546:     expect(obj).to.have.nested.property('b.h')",
          "548:     objectPath.del(obj, 'b.g.1.1')",
          "549:     expect(obj).to.not.have.nested.property('b.g.1.1')",
          "550:     expect(obj).to.have.nested.property('b.g.1.0', 'test')",
          "552:     objectPath.del(obj, 'b.\\ubeef')",
          "553:     expect(obj).to.not.have.nested.property('b.\\ubeef')",
          "555:     objectPath.del(obj, ['b', 'dot.dot'])",
          "556:     expect(objectPath.get(obj, ['b', 'dot.dot'])).to.be.equal(void 0)",
          "558:     objectPath.del(obj, ['b', 'g', '1', '0'])",
          "559:     expect(obj).to.not.have.nested.property('b.g.1.0')",
          "560:     expect(obj).to.have.nested.property('b.g.1')",
          "562:     expect(objectPath.del(obj, ['b'])).to.not.have.nested.property('b.g')",
          "563:     expect(obj).to.be.deep.equal({'a': 'b'})",
          "564:   })",
          "566:   it('should remove items from existing array', function () {",
          "567:     var obj = getTestObj()",
          "569:     objectPath.del(obj, 'b.d.0')",
          "570:     expect(obj.b.d).to.have.length(1)",
          "571:     expect(obj.b.d).to.be.deep.equal(['b'])",
          "573:     objectPath.del(obj, 'b.d.0')",
          "574:     expect(obj.b.d).to.have.length(0)",
          "575:     expect(obj.b.d).to.be.deep.equal([])",
          "576:   })",
          "577: })",
          "579: describe('insert', function () {",
          "580:   it('should insert value into existing array', function () {",
          "581:     var obj = getTestObj()",
          "583:     objectPath.insert(obj, 'b.c', 'asdf')",
          "584:     expect(obj).to.have.nested.property('b.c.0', 'asdf')",
          "585:     expect(obj).to.not.have.nested.property('b.c.1')",
          "586:   })",
          "588:   it('should create intermediary array', function () {",
          "589:     var obj = getTestObj()",
          "591:     objectPath.insert(obj, 'b.c.0', 'asdf')",
          "592:     expect(obj).to.have.nested.property('b.c.0.0', 'asdf')",
          "593:   })",
          "595:   it('should insert in another index', function () {",
          "596:     var obj = getTestObj()",
          "598:     objectPath.insert(obj, 'b.d', 'asdf', 1)",
          "599:     expect(obj).to.have.nested.property('b.d.1', 'asdf')",
          "600:     expect(obj).to.have.nested.property('b.d.0', 'a')",
          "601:     expect(obj).to.have.nested.property('b.d.2', 'b')",
          "602:   })",
          "604:   it('should handle sparse array', function () {",
          "605:     var obj = getTestObj()",
          "606:     obj.b.d = new Array(4)",
          "607:     obj.b.d[0] = 'a'",
          "608:     obj.b.d[1] = 'b'",
          "610:     objectPath.insert(obj, 'b.d', 'asdf', 3)",
          "617:     ])",
          "618:   })",
          "619: })",
          "623:     expect(objectPath.has({}, 'a')).to.be.equal(false)",
          "624:   })",
          "627:     var obj = getTestObj()",
          "628:     expect(objectPath.has(obj, '')).to.be.equal(false)",
          "629:     expect(objectPath.has(obj, [''])).to.be.equal(false)",
          "631:     expect(objectPath.has(obj, '')).to.be.equal(true)",
          "632:     expect(objectPath.has(obj, [''])).to.be.equal(true)",
          "634:     expect(objectPath.has(obj, [])).to.be.equal(true)",
          "635:     expect(objectPath.has(null, [])).to.be.equal(false)",
          "636:   })",
          "638:   it('should test under shallow object', function () {",
          "639:     var obj = getTestObj()",
          "640:     expect(objectPath.has(obj, 'a')).to.be.equal(true)",
          "641:     expect(objectPath.has(obj, ['a'])).to.be.equal(true)",
          "642:     expect(objectPath.has(obj, 'z')).to.be.equal(false)",
          "643:     expect(objectPath.has(obj, ['z'])).to.be.equal(false)",
          "644:   })",
          "646:   it('should work with number path', function () {",
          "647:     var obj = getTestObj()",
          "648:     expect(objectPath.has(obj.b.d, 0)).to.be.equal(true)",
          "649:     expect(objectPath.has(obj.b, 0)).to.be.equal(false)",
          "650:     expect(objectPath.has(obj.b.d, 10)).to.be.equal(false)",
          "651:     expect(objectPath.has(obj.b, 10)).to.be.equal(false)",
          "652:   })",
          "654:   it('should test under deep object', function () {",
          "655:     var obj = getTestObj()",
          "656:     expect(objectPath.has(obj, 'b.f')).to.be.equal(true)",
          "657:     expect(objectPath.has(obj, ['b', 'f'])).to.be.equal(true)",
          "658:     expect(objectPath.has(obj, 'b.g')).to.be.equal(false)",
          "659:     expect(objectPath.has(obj, ['b', 'g'])).to.be.equal(false)",
          "660:   })",
          "662:   it('should test value under array', function () {",
          "665:     }",
          "667:     expect(objectPath.has(obj, 'b.0')).to.be.equal(true)",
          "668:     expect(objectPath.has(obj, 'b.1')).to.be.equal(true)",
          "669:     expect(objectPath.has(obj, 'b.3.o')).to.be.equal(true)",
          "670:     expect(objectPath.has(obj, 'b.3.qwe')).to.be.equal(false)",
          "671:     expect(objectPath.has(obj, 'b.4')).to.be.equal(false)",
          "672:   })",
          "674:   it('should test the value under array deep', function () {",
          "675:     var obj = getTestObj()",
          "676:     expect(objectPath.has(obj, 'b.e.1.f')).to.be.equal(true)",
          "677:     expect(objectPath.has(obj, ['b', 'e', 1, 'f'])).to.be.equal(true)",
          "678:     expect(objectPath.has(obj, 'b.e.1.f.g.h.i')).to.be.equal(false)",
          "679:     expect(objectPath.has(obj, ['b', 'e', 1, 'f', 'g', 'h', 'i'])).to.be.equal(false)",
          "680:   })",
          "682:   it('should test the value under integer-like key', function () {",
          "683:     var obj = {'1a': 'foo'}",
          "684:     expect(objectPath.has(obj, '1a')).to.be.equal(true)",
          "685:     expect(objectPath.has(obj, ['1a'])).to.be.equal(true)",
          "686:   })",
          "688:   it('should distinct nonexistent key and key = undefined', function () {",
          "689:     var obj = {}",
          "690:     expect(objectPath.has(obj, 'key')).to.be.equal(false)",
          "692:     obj.key = undefined",
          "693:     expect(objectPath.has(obj, 'key')).to.be.equal(true)",
          "694:   })",
          "696:   it('should work with deep undefined/null values', function () {",
          "697:     var obj = {}",
          "698:     expect(objectPath.has(obj, 'missing.test')).to.be.equal(false)",
          "700:     obj.missing = null",
          "701:     expect(objectPath.has(obj, 'missing.test')).to.be.equal(false)",
          "704:     expect(objectPath.has(obj, 'sparseArray.1.test')).to.be.equal(false)",
          "705:   })",
          "706: })",
          "711:   it('should return the value under shallow object', function () {",
          "712:     var obj = getTestObj()",
          "713:     var model = objectPath(obj)",
          "714:     expect(model.get('a')).to.be.equal('b')",
          "715:     expect(model.get(['a'])).to.be.equal('b')",
          "716:   })",
          "718:   it('should set value under shallow object', function () {",
          "719:     var obj = getTestObj()",
          "720:     var model = objectPath(obj)",
          "721:     model.set('c', {m: 'o'})",
          "722:     expect(obj).to.have.nested.property('c.m', 'o')",
          "723:     obj = getTestObj()",
          "724:     model = objectPath(obj)",
          "725:     model.set(['c'], {m: 'o'})",
          "726:     expect(obj).to.have.nested.property('c.m', 'o')",
          "727:   })",
          "729:   it('should push value to existing array', function () {",
          "730:     var obj = getTestObj()",
          "731:     var model = objectPath(obj)",
          "732:     model.push('b.c', 'l')",
          "733:     expect(obj).to.have.nested.property('b.c.0', 'l')",
          "734:     obj = getTestObj()",
          "735:     model = objectPath(obj)",
          "736:     model.push(['b', 'c'], 'l')",
          "737:     expect(obj).to.have.nested.property('b.c.0', 'l')",
          "738:   })",
          "740:   it('should create the path if it does not exists', function () {",
          "741:     var obj = getTestObj()",
          "742:     var model = objectPath(obj)",
          "743:     var oldVal = model.ensureExists('b.g.1.l', 'test')",
          "744:     expect(oldVal).to.not.exist",
          "745:     expect(obj).to.have.nested.property('b.g.1.l', 'test')",
          "746:     oldVal = model.ensureExists('b.g.1.l', 'test1')",
          "747:     expect(oldVal).to.be.equal('test')",
          "748:     expect(obj).to.have.nested.property('b.g.1.l', 'test')",
          "749:   })",
          "751:   it('should return the first non-undefined value', function () {",
          "754:     }",
          "755:     var model = objectPath(obj)",
          "759:       ['might', 'not', 'exist'],",
          "761:     ])).to.equal('prop')",
          "762:   })",
          "764:   it('should empty each path according to their types', function () {",
          "765:     function Instance () {",
          "766:       this.notOwn = true",
          "770:     Instance.prototype.test = function () {",
          "771:     }",
          "773:     Instance.prototype.arr = []",
          "778:         array: ['some', 'array', [1, 2, 3]],",
          "782:           some: 'property',",
          "788:       }",
          "791:     obj['function'] = function () {",
          "792:     }",
          "794:     var model = objectPath(obj)",
          "796:     model.empty(['array', '2'])",
          "797:     expect(obj.array[2]).to.deep.equal([])",
          "799:     model.empty('object.sub')",
          "800:     expect(obj.object.sub).to.deep.equal({})",
          "802:     model.empty('instance.test')",
          "804:     expect(obj.instance.test).to.be.a('function')",
          "805:     expect(Instance.prototype.test).to.be.a('function')",
          "807:     model.empty('string')",
          "808:     model.empty('number')",
          "809:     model.empty('boolean')",
          "810:     model.empty('function')",
          "811:     model.empty('array')",
          "812:     model.empty('object')",
          "813:     model.empty('instance')",
          "815:     expect(obj.string).to.equal('')",
          "816:     expect(obj.array).to.deep.equal([])",
          "817:     expect(obj.number).to.equal(0)",
          "818:     expect(obj.boolean).to.equal(false)",
          "819:     expect(obj.object).to.deep.equal({})",
          "820:     expect(obj.instance.notOwn).to.be.an('undefined')",
          "821:     expect(obj.instance.arr).to.be.an('array')",
          "822:     expect(obj['function']).to.equal(null)",
          "823:   })",
          "825:   it('should delete deep paths', function () {",
          "826:     var obj = getTestObj()",
          "827:     var model = objectPath(obj)",
          "829:     expect(model.del()).to.be.equal(obj)",
          "831:     model.set('b.g.1.0', 'test')",
          "832:     model.set('b.g.1.1', 'test')",
          "833:     model.set('b.h.az', 'test')",
          "835:     expect(obj).to.have.nested.property('b.g.1.0', 'test')",
          "836:     expect(obj).to.have.nested.property('b.g.1.1', 'test')",
          "837:     expect(obj).to.have.nested.property('b.h.az', 'test')",
          "839:     model.del('b.h.az')",
          "840:     expect(obj).to.not.have.nested.property('b.h.az')",
          "841:     expect(obj).to.have.nested.property('b.h')",
          "843:     model.del('b.g.1.1')",
          "844:     expect(obj).to.not.have.nested.property('b.g.1.1')",
          "845:     expect(obj).to.have.nested.property('b.g.1.0', 'test')",
          "847:     model.del(['b', 'g', '1', '0'])",
          "848:     expect(obj).to.not.have.nested.property('b.g.1.0')",
          "849:     expect(obj).to.have.nested.property('b.g.1')",
          "851:     expect(model.del(['b'])).to.not.have.nested.property('b.g')",
          "852:     expect(obj).to.be.deep.equal({'a': 'b'})",
          "853:   })",
          "855:   it('should insert value into existing array', function () {",
          "856:     var obj = getTestObj()",
          "857:     var model = objectPath(obj)",
          "859:     model.insert('b.c', 'asdf')",
          "860:     expect(obj).to.have.nested.property('b.c.0', 'asdf')",
          "861:     expect(obj).to.not.have.nested.property('b.c.1')",
          "862:   })",
          "864:   it('should test under shallow object', function () {",
          "865:     var obj = getTestObj()",
          "866:     var model = objectPath(obj)",
          "868:     expect(model.has('a')).to.be.equal(true)",
          "869:     expect(model.has(['a'])).to.be.equal(true)",
          "870:     expect(model.has('z')).to.be.equal(false)",
          "871:     expect(model.has(['z'])).to.be.equal(false)",
          "872:   })",
          "873: })",
          "876:   it('should not get a not own property', function () {",
          "877:     var Obj = function () {",
          "878:     }",
          "879:     Obj.prototype.notOwn = {a: 'a'}",
          "880:     var obj = new Obj()",
          "883:   })",
          "885:   it('should set a not own property on the instance (not the prototype)', function () {",
          "891:     objectPath.set(obj, 'notOwn.test', 'a')",
          "892:     expect(obj.notOwn.test).to.be.equal('a')",
          "893:     expect(proto.notOwn).to.be.deep.equal({})",
          "894:   })",
          "896:   it('has should return false on a not own property', function () {",
          "903:     expect(objectPath.has(obj, 'notOwn')).to.be.false",
          "904:     expect(objectPath.has(obj, 'notOwn.a')).to.be.false",
          "905:   })",
          "907:   it('empty should not empty on a not own property', function () {",
          "911:     var obj = Object.create(proto)",
          "913:     objectPath.empty(obj, 'notOwn')",
          "914:     expect(proto.notOwn).to.be.deep.equal({a: 'a'})",
          "915:     expect(obj.notOwn).to.be.deep.equal({a: 'a'})",
          "916:   })",
          "918:   it('del should not delete not own property', function () {",
          "922:     var obj = Object.create(proto)",
          "924:     objectPath.del(obj, 'notOwn.a')",
          "925:     expect(proto.notOwn).to.be.deep.equal({a: 'a'})",
          "930:   })",
          "931: })",
          "934:   it('should get a not own property', function () {",
          "935:     var Obj = function () {",
          "936:     }",
          "937:     Obj.prototype.notOwn = {a: 'a'}",
          "938:     var obj = new Obj()",
          "941:   })",
          "943:   it('should set a deep not own property on the prototype (if exists)', function () {",
          "949:     objectPath.withInheritedProps.set(obj, 'notOwn.test', 'a')",
          "950:     expect(obj.notOwn.test).to.be.equal('a')",
          "951:     expect(proto.notOwn).to.be.deep.equal({test: 'a'})",
          "952:   })",
          "955:   it('has should return true on a not own property', function () {",
          "961:     expect(objectPath.withInheritedProps.has(obj, 'notOwn')).to.be.true",
          "962:     expect(objectPath.withInheritedProps.has(obj, 'notOwn.a')).to.be.true",
          "963:   })",
          "965:   it('empty should empty a not own property', function () {",
          "969:     var obj = Object.create(proto)",
          "971:     objectPath.withInheritedProps.empty(obj, 'notOwn')",
          "972:     expect(proto.notOwn).to.be.deep.equal({})",
          "973:     expect(obj.notOwn).to.be.deep.equal({})",
          "974:   })",
          "976:   it('del should delete a not own property', function () {",
          "980:     var obj = Object.create(proto)",
          "982:     objectPath.withInheritedProps.del(obj, 'notOwn.a')",
          "983:     expect(proto.notOwn).to.be.deep.equal({})",
          "985:     objectPath.withInheritedProps.del(obj, 'notOwn')",
          "988:   })",
          "989: })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bdf4abefd102d16c163d633e8994ef154cab9eb",
      "candidate_info": {
        "commit_hash": "7bdf4abefd102d16c163d633e8994ef154cab9eb",
        "repo": "mariocasciaro/object-path",
        "commit_url": "https://github.com/mariocasciaro/object-path/commit/7bdf4abefd102d16c163d633e8994ef154cab9eb",
        "files": [
          "index.js",
          "test.js"
        ],
        "message": "Fix prototype pollution when path components are not strings",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js",
            "test.js||test.js"
          ],
          "candidate": [
            "index.js||index.js",
            "test.js||test.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         return set(obj, path.split('.').map(getKey), value, doNotReplace);",
          "112:       }",
          "113:       var currentPath = path[0];",
          "114:       var currentValue = getShallowProperty(obj, currentPath);",
          "115:       if (options.includeInheritedProps && (currentPath === '__proto__' ||",
          "116:         (currentPath === 'constructor' && typeof currentValue === 'function'))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:       if (typeof currentPath !== 'string' && typeof currentPath !== 'number') {",
          "115:         currentPath = String(currentPath)",
          "116:       }",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     objectPath.set({}, '__proto__.injected', 'this is bad')",
          "242:     expect(Object.prototype.injected).to.be.undefined",
          "244:     function Clazz() {}",
          "245:     Clazz.prototype.test = 'original'",
          "247:     objectPath.set(new Clazz(), '__proto__.test', 'this is bad')",
          "248:     expect(Clazz.prototype.test).to.be.equal('original')",
          "250:     objectPath.set(new Clazz(), 'constructor.prototype.test', 'this is bad')",
          "251:     expect(Clazz.prototype.test).to.be.equal('original')",
          "252:   })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     objectPath.set({}, [['__proto__'], 'injected'], 'this is bad')",
          "245:     expect(Object.prototype.injected).to.be.undefined",
          "253:     objectPath.set(new Clazz(), [['__proto__'], 'test'], 'this is bad')",
          "254:     expect(Clazz.prototype.test).to.be.equal('original')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:       .to.throw('For security reasons')",
          "257:     expect(Object.prototype.injected).to.be.undefined",
          "259:     function Clazz() {}",
          "260:     Clazz.prototype.test = 'original'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     expect(function() {",
          "266:       objectPath.withInheritedProps.set({}, [['__proto__'], 'injected'], 'this is bad')",
          "267:       expect(Object.prototype.injected).to.be.undefined",
          "268:     }).to.throw('For security reasons')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:       .to.throw('For security reasons')",
          "268:     expect(Clazz.prototype.test).to.be.equal('original')",
          "272:       .to.throw('For security reasons')",
          "273:     expect(Object.prototype.injected).to.be.undefined",
          "274:   })",
          "",
          "[Removed Lines]",
          "270:     const obj = {}",
          "271:     expect(function() {objectPath.withInheritedProps.set(obj, 'constructor.prototype.injected', 'this is OK')})",
          "",
          "[Added Lines]",
          "281:     expect(function() {objectPath.withInheritedProps.set({}, 'constructor.prototype.injected', 'this is OK')})",
          "282:       .to.throw('For security reasons')",
          "283:     expect(Object.prototype.injected).to.be.undefined",
          "285:     expect(function() {objectPath.withInheritedProps.set({}, [['constructor'], 'prototype', 'injected'], 'this is bad')})",
          "",
          "---------------"
        ]
      }
    }
  ]
}