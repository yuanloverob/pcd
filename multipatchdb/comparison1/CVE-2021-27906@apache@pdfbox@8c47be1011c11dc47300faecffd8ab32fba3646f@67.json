{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e18a4e54183ba159349f7f5023a81ee9806c6b1",
      "candidate_info": {
        "commit_hash": "4e18a4e54183ba159349f7f5023a81ee9806c6b1",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4e18a4e54183ba159349f7f5023a81ee9806c6b1",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java"
        ],
        "message": "PDFBOX-4892: fix javadoc, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891619 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java||fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java||fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java -> fontbox/src/main/java/org/apache/fontbox/ttf/TTFDataStream.java"
        ]
      }
    },
    {
      "candidate_hash": "40bd3e62474a4f27b56519485bfe0058823a8f0a",
      "candidate_info": {
        "commit_hash": "40bd3e62474a4f27b56519485bfe0058823a8f0a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/40bd3e62474a4f27b56519485bfe0058823a8f0a",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"
        ],
        "message": "PDFBOX-5155: add logging when identity is used\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889504 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:                 {",
          "160:                     cmap = CMapManager.getPredefinedCMap(COSName.IDENTITY_H.getName());",
          "161:                 }",
          "162:             }",
          "163:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:                     LOG.warn(\"Using predefined identity CMap instead\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "927a744a56c459f6a684370856fa1078cced61d2",
      "candidate_info": {
        "commit_hash": "927a744a56c459f6a684370856fa1078cced61d2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/927a744a56c459f6a684370856fa1078cced61d2",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java"
        ],
        "message": "PDFBOX-4892: simplify code + performance improvement, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887626 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java -> preflight/src/main/java/org/apache/pdfbox/preflight/process/TrailerValidationProcess.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         if (idFirst != null && idLast != null)",
          "195:         {",
          "198:             COSArray af = COSUtils.getAsArray(idFirst, cosDocument);",
          "199:             COSArray al = COSUtils.getAsArray(idLast, cosDocument);",
          "203:             {",
          "204:                 return false;",
          "205:             }",
          "208:             boolean isEqual = true;",
          "210:             {",
          "211:                 boolean oneIsEquals = false;",
          "213:                 {",
          "221:                     {",
          "222:                         break;",
          "223:                     }",
          "224:                 }",
          "225:                 isEqual = isEqual && oneIsEquals;",
          "226:                 if (!isEqual)",
          "",
          "[Removed Lines]",
          "202:             if ((af == null) || (al == null))",
          "209:             for (Object of : af.toList())",
          "212:                 for (Object ol : al.toList())",
          "216:                     if (!oneIsEquals)",
          "217:                     {",
          "218:                         oneIsEquals = ((COSString) ol).getString().equals(((COSString) of).getString());",
          "219:                     }",
          "220:                     else",
          "",
          "[Added Lines]",
          "201:             if (af == null || al == null)",
          "208:             for (Object of : af)",
          "211:                 String ofString = ((COSString) of).getString();",
          "212:                 for (Object ol : al)",
          "215:                     if (oneIsEquals)",
          "219:                     oneIsEquals = ((COSString) ol).getString().equals(ofString);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51a0d6b388b8c0c09ddc2a2a87cb1cdf5d9d32e1",
      "candidate_info": {
        "commit_hash": "51a0d6b388b8c0c09ddc2a2a87cb1cdf5d9d32e1",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/51a0d6b388b8c0c09ddc2a2a87cb1cdf5d9d32e1",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java"
        ],
        "message": "PDFBOX-3683: handle setting/getting of value if /Opt exists and In Unison flag is false\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883436 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         COSBase value = getInheritableAttribute(COSName.V);",
          "147:         if (value instanceof COSName)",
          "148:         {",
          "150:         }",
          "151:         else",
          "152:         {",
          "",
          "[Removed Lines]",
          "149:             return ((COSName)value).getName();",
          "",
          "[Added Lines]",
          "149:             String stringValue = ((COSName)value).getName();",
          "150:             List<String> exportValues = getExportValues();",
          "151:             if (!exportValues.isEmpty())",
          "152:             {",
          "153:                 try",
          "154:                 {",
          "155:                     int idx = Integer.parseInt(stringValue, 10);",
          "156:                     if (idx >= 0 && idx < exportValues.size())",
          "157:                     {",
          "158:                         return exportValues.get(idx);",
          "159:                     }",
          "160:                 }",
          "161:                 catch (NumberFormatException nfe)",
          "162:                 {",
          "163:                     return stringValue;",
          "164:                 }",
          "165:             }",
          "166:             return stringValue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:         applyChange();",
          "185:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     public void setValue(int index) throws IOException",
          "215:     {",
          "216:         if (getExportValues().isEmpty() || index < 0 || index >= getExportValues().size())",
          "217:         {",
          "218:             throw new IllegalArgumentException(\"index '\" + index",
          "219:                     + \"' is not a valid index for the field \" + getFullyQualifiedName()",
          "220:                     + \", valid indizes are from 0 to \" + (getExportValues().size() - 1));",
          "221:         }",
          "223:         updateByValue(String.valueOf(index));",
          "225:         applyChange();",
          "226:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/TestRadioButtons.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import java.io.IOException;",
          "20: import java.util.ArrayList;",
          "21: import java.util.List;",
          "27: import org.apache.pdfbox.cos.COSArray;",
          "28: import org.apache.pdfbox.cos.COSDictionary;",
          "29: import org.apache.pdfbox.cos.COSName;",
          "30: import org.apache.pdfbox.pdmodel.PDDocument;",
          "31: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "32: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;",
          "33: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry;",
          "34: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
          "40: {",
          "78:     public void testRadioButtonPDModel() throws IOException",
          "79:     {",
          "80:         PDDocument doc = null;",
          "",
          "[Removed Lines]",
          "23: import junit.framework.Test;",
          "24: import junit.framework.TestCase;",
          "25: import junit.framework.TestSuite;",
          "39: public class TestRadioButtons extends TestCase",
          "47:     public TestRadioButtons( String name )",
          "48:     {",
          "49:         super( name );",
          "50:     }",
          "57:     public static Test suite()",
          "58:     {",
          "59:         return new TestSuite( TestRadioButtons.class );",
          "60:     }",
          "67:     public static void main( String[] args )",
          "68:     {",
          "69:         String[] arg = {TestRadioButtons.class.getName() };",
          "70:         junit.textui.TestRunner.main( arg );",
          "71:     }",
          "",
          "[Added Lines]",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertFalse;",
          "21: import static org.junit.Assert.assertNotNull;",
          "22: import static org.junit.Assert.assertNull;",
          "23: import static org.junit.Assert.assertTrue;",
          "24: import static org.junit.Assert.fail;",
          "27: import java.net.URL;",
          "34: import org.apache.pdfbox.io.IOUtils;",
          "41: import org.junit.Test;",
          "47: public class TestRadioButtons",
          "54:     @Test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:             assertNotNull(radioButton.getCOSObject().getItem(COSName.OPT));",
          "143:             assertEquals(options.get(0), optItem.getString(0));",
          "146:             List<String> retrievedOptions = radioButton.getExportValues();",
          "148:             assertEquals(retrievedOptions, options);",
          "",
          "[Removed Lines]",
          "142:             assertEquals(optItem.size(),2);",
          "147:             assertEquals(retrievedOptions.size(),2);",
          "",
          "[Added Lines]",
          "119:             assertEquals(2, optItem.size());",
          "124:             assertEquals(2, retrievedOptions.size());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:         }",
          "156:         finally",
          "157:         {",
          "159:             {",
          "161:             }",
          "162:         }",
          "163:     }",
          "164: }",
          "",
          "[Removed Lines]",
          "158:             if( doc != null )",
          "160:                 doc.close();",
          "",
          "[Added Lines]",
          "136:                 IOUtils.closeQuietly(doc);",
          "137:             }",
          "138:         }",
          "139:     }",
          "146:     @Test",
          "147:     public void testPDFBox3656NotInUnison() throws IOException",
          "148:     {",
          "150:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12848122/SF1199AEG%20%28Complete%29.pdf\";",
          "152:         PDDocument testPdf = null;",
          "153:         try",
          "154:         {",
          "155:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "157:             PDAcroForm acroForm = testPdf.getDocumentCatalog().getAcroForm();",
          "158:             PDRadioButton field = (PDRadioButton) acroForm.getField(\"Checking/Savings\");",
          "159:             assertFalse(\"the radio buttons can be selected individually although having the same ON value\", field.isRadiosInUnison());",
          "160:         }",
          "161:         finally",
          "162:         {",
          "163:             IOUtils.closeQuietly(testPdf);",
          "164:         }",
          "165:     }",
          "175:     @Test",
          "176:     public void testPDFBox3656ByValidExportValue() throws IOException",
          "177:     {",
          "178:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12848122/SF1199AEG%20%28Complete%29.pdf\";",
          "180:         PDDocument testPdf = null;",
          "181:         try",
          "182:         {",
          "183:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "184:             PDAcroForm acroForm = testPdf.getDocumentCatalog().getAcroForm();",
          "185:             PDRadioButton field = (PDRadioButton) acroForm.getField(\"Checking/Savings\");",
          "187:             assertFalse(\"the radio buttons can be selected individually although having the same ON value\", field.isRadiosInUnison());",
          "188:             assertEquals(\"initially no option shall be selected\", \"Off\", field.getValue());",
          "190:             field.setValue(\"Checking\");",
          "191:             assertEquals(\"setting by the export value should also return that\", \"Checking\", field.getValue());",
          "192:         }",
          "193:         finally",
          "194:         {",
          "195:             IOUtils.closeQuietly(testPdf);",
          "196:         }",
          "197:     }",
          "204:     @Test",
          "205:     public void testPDFBox3656ByInvalidExportValue() throws IOException",
          "206:     {",
          "207:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12848122/SF1199AEG%20%28Complete%29.pdf\";",
          "209:         PDDocument testPdf = null;",
          "210:         try",
          "211:         {",
          "212:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "213:             PDAcroForm acroForm = testPdf.getDocumentCatalog().getAcroForm();",
          "214:             PDRadioButton field = (PDRadioButton) acroForm.getField(\"Checking/Savings\");",
          "216:             assertFalse(\"the radio buttons can be selected individually although having the same ON value\", field.isRadiosInUnison());",
          "217:             assertEquals(\"initially no option shall be selected\", \"Off\", field.getValue());",
          "219:             try {",
          "220:                 field.setValue(\"Invalid\");",
          "221:                 fail(\"Expected an IndexOutOfBoundsException to be thrown\");",
          "222:             } catch (Exception ex) {",
          "224:                 String expectedMessage = \"value 'Invalid' is not a valid option for the field Checking/Savings, valid values are: [Checking, Savings] and Off\";",
          "225:                 String actualMessage = ex.getMessage();",
          "226:                 assertTrue(actualMessage.contains(expectedMessage));",
          "229:             assertEquals(\"no option shall be selected\", \"Off\", field.getValue());",
          "230:             assertTrue(\"no export values are selected\", field.getSelectedExportValues().isEmpty());",
          "231:         }",
          "232:         finally",
          "233:         {",
          "234:             IOUtils.closeQuietly(testPdf);",
          "246:     @Test",
          "247:     public void testPDFBox3656ByValidIndex() throws IOException",
          "248:     {",
          "249:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12848122/SF1199AEG%20%28Complete%29.pdf\";",
          "251:         PDDocument testPdf = null;",
          "252:         try",
          "253:         {",
          "254:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "255:             PDAcroForm acroForm = testPdf.getDocumentCatalog().getAcroForm();",
          "256:             PDRadioButton field = (PDRadioButton) acroForm.getField(\"Checking/Savings\");",
          "258:             assertFalse(\"the radio buttons can be selected individually although having the same ON value\", field.isRadiosInUnison());",
          "259:             assertEquals(\"initially no option shall be selected\", \"Off\", field.getValue());",
          "261:             field.setValue(4);",
          "262:             assertEquals(\"setting by the index value should return the corresponding export\", \"Checking\", field.getValue());",
          "263:         }",
          "264:         finally",
          "265:         {",
          "266:             IOUtils.closeQuietly(testPdf);",
          "267:         }",
          "268:     }",
          "278:     @Test",
          "279:     public void testPDFBox3656ByInvalidIndex() throws IOException",
          "280:     {",
          "282:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12848122/SF1199AEG%20%28Complete%29.pdf\";",
          "284:         PDDocument testPdf = null;",
          "285:         try",
          "286:         {",
          "287:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "288:             PDAcroForm acroForm = testPdf.getDocumentCatalog().getAcroForm();",
          "289:             PDRadioButton field = (PDRadioButton) acroForm.getField(\"Checking/Savings\");",
          "291:             assertFalse(\"the radio buttons can be selected individually although having the same ON value\", field.isRadiosInUnison());",
          "292:             assertEquals(\"initially no option shall be selected\", \"Off\", field.getValue());",
          "294:             try {",
          "295:                 field.setValue(6);",
          "296:                 fail(\"Expected an IndexOutOfBoundsException to be thrown\");",
          "297:             } catch (Exception ex) {",
          "299:                 String expectedMessage = \"index '6' is not a valid index for the field Checking/Savings, valid indizes are from 0 to 5\";",
          "300:                 String actualMessage = ex.getMessage();",
          "301:                 assertTrue(actualMessage.contains(expectedMessage));",
          "302:             }",
          "304:             assertEquals(\"no option shall be selected\", \"Off\", field.getValue());",
          "305:             assertTrue(\"no export values are selected\", field.getSelectedExportValues().isEmpty());",
          "306:         }",
          "307:         finally",
          "308:         {",
          "309:             IOUtils.closeQuietly(testPdf);",
          "310:         }",
          "311:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e607bddeaaf2cf29e0b3de5cdd35e7b1834322a",
      "candidate_info": {
        "commit_hash": "5e607bddeaaf2cf29e0b3de5cdd35e7b1834322a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5e607bddeaaf2cf29e0b3de5cdd35e7b1834322a",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ],
        "message": "PDFBOX-4892: remove unused\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890107 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.pdfbox.cos.COSBase;",
          "40: import org.apache.pdfbox.cos.COSDictionary;",
          "41: import org.apache.pdfbox.cos.COSDocument;",
          "43: import org.apache.pdfbox.cos.COSName;",
          "44: import org.apache.pdfbox.cos.COSNull;",
          "45: import org.apache.pdfbox.cos.COSNumber;",
          "",
          "[Removed Lines]",
          "42: import org.apache.pdfbox.cos.COSInputStream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2000:                 readExpectedString(OBJ_MARKER, true);",
          "2001:                 int nrOfObjects = 0;",
          "2002:                 COSStream stream = null;",
          "2004:                 List<Long> objectNumbers = null;",
          "2005:                 try",
          "2006:                 {",
          "",
          "[Removed Lines]",
          "2003:                 COSInputStream is = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2033:                 }",
          "2034:                 finally",
          "2035:                 {",
          "2040:                     if (stream != null)",
          "2041:                     {",
          "2042:                         stream.close();",
          "",
          "[Removed Lines]",
          "2036:                     if (is != null)",
          "2037:                     {",
          "2038:                         is.close();",
          "2039:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}