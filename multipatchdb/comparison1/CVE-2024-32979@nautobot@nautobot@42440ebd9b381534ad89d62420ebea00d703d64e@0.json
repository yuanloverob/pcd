{
  "cve_id": "CVE-2024-32979",
  "cve_desc": "Nautobot is a Network Source of Truth and Network Automation Platform built as a web application atop the Django Python framework with a PostgreSQL or MySQL database. It was discovered that due to improper handling and escaping of user-provided query parameters, a maliciously crafted Nautobot URL could potentially be used to execute a Reflected Cross-Site Scripting (Reflected XSS) attack against users. All filterable object-list views in Nautobot are vulnerable. This issue has been fixed in Nautobot versions 1.6.20 and 2.2.3. There are no known workarounds for this vulnerability.\n",
  "repo": "nautobot/nautobot",
  "patch_hash": "42440ebd9b381534ad89d62420ebea00d703d64e",
  "patch_info": {
    "commit_hash": "42440ebd9b381534ad89d62420ebea00d703d64e",
    "repo": "nautobot/nautobot",
    "commit_url": "https://github.com/nautobot/nautobot/commit/42440ebd9b381534ad89d62420ebea00d703d64e",
    "files": [
      "changes/5646.security",
      "nautobot/core/templates/generic/object_list.html",
      "nautobot/core/tests/test_views.py",
      "nautobot/project-static/js/forms.js"
    ],
    "message": "Fix quoting of query parameters in list view (#5646)\n\n* Add proper quoting of object-list filters\n\n* Add unit test\n\n* Change fragment\n\n* Fix new bug caught by integration tests\n\n* Use location.assign rather than location.replace, close modal on form submit",
    "before_after_code_files": [
      "changes/5646.security||changes/5646.security",
      "nautobot/core/templates/generic/object_list.html||nautobot/core/templates/generic/object_list.html",
      "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py",
      "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
    ]
  },
  "patch_diff": {
    "changes/5646.security||changes/5646.security": [
      "File: changes/5646.security -> changes/5646.security",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: Fixed a reflected-XSS vulnerability ([GHSA-jxgr-gcj5-cqqg](https://github.com/nautobot/nautobot/security/advisories/GHSA-jxgr-gcj5-cqqg)) in object-list view rendering of user-provided query parameters.",
      "",
      "---------------"
    ],
    "nautobot/core/templates/generic/object_list.html||nautobot/core/templates/generic/object_list.html": [
      "File: nautobot/core/templates/generic/object_list.html -> nautobot/core/templates/generic/object_list.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:                     class=\"remove-filter-param\"",
      "75:                     title=\"Remove all items\"",
      "76:                     data-field-type=\"parent\"",
      "78:             >\u00d7</span>",
      "79:             <ul class=\"filter-selection-rendered\">",
      "80:                 {% for value in field.values %}",
      "",
      "[Removed Lines]",
      "77:                     data-field-value={{ field.name }}",
      "",
      "[Added Lines]",
      "77:                     data-field-value=\"{{ field.name }}\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:                     <span",
      "86:                             class=\"filter-selection-choice-remove remove-filter-param\"",
      "87:                             data-field-type=\"child\"",
      "90:                     >\u00d7</span>{{ value.display }}",
      "91:                 </li>",
      "92:                 {% endfor %}",
      "",
      "[Removed Lines]",
      "88:                             data-field-parent={{ field.name }}",
      "89:                             data-field-value={{ value.name }}",
      "",
      "[Added Lines]",
      "88:                             data-field-parent=\"{{ field.name }}\"",
      "89:                             data-field-value=\"{{ value.name }}\"",
      "",
      "---------------"
    ],
    "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py": [
      "File: nautobot/core/tests/test_views.py -> nautobot/core/tests/test_views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:         self.assertInHTML(locations[0].name, response_content)",
      "243:         self.assertInHTML(locations[1].name, response_content)",
      "246: class ForceScriptNameTestcase(TestCase):",
      "247:     \"\"\"Basic test to assert that `settings.FORCE_SCRIPT_NAME` works as intended.\"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:     def test_filtering_crafted_query_params(self):",
      "246:         \"\"\"Test for reflected-XSS vulnerability GHSA-jxgr-gcj5-cqqg.\"\"\"",
      "247:         self.add_permissions(\"dcim.view_location\")",
      "248:         query_param = \"?location_type=1 onmouseover=alert('hi') foo=bar\"",
      "249:         url = reverse(\"dcim:location_list\") + query_param",
      "250:         response = self.client.get(url)",
      "251:         self.assertHttpStatus(response, 200)",
      "252:         response_content = response.content.decode(response.charset)",
      "253:         # The important thing here is that the data-field-parent and data-field-value are correctly quoted",
      "254:         self.assertInHTML(",
      "255:             \"\"\"",
      "256: <span class=\"filter-selection-choice-remove remove-filter-param\"",
      "257:       data-field-type=\"child\"",
      "258:       data-field-parent=\"location_type\"",
      "259:       data-field-value=\"1 onmouseover=alert(&#x27;hi&#x27;) foo=bar\"",
      "260: >\u00d7</span>\"\"\",  # noqa: RUF001 - ambiguous-unicode-character-string",
      "261:             response_content,",
      "262:         )",
      "",
      "---------------"
    ],
    "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js": [
      "File: nautobot/project-static/js/forms.js -> nautobot/project-static/js/forms.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "634:     this_context.find(\".remove-filter-param\").on(\"click\", function(){",
      "636:         let type = $(this).attr(\"data-field-type\");",
      "637:         let field_value = $(this).attr(\"data-field-value\");",
      "640:         if (type === \"parent\") {",
      "642:         } else {",
      "643:             let parent = $(this).attr(\"data-field-parent\");",
      "645:         }",
      "647:     })",
      "",
      "[Removed Lines]",
      "635:         let query_params = location.search;",
      "638:         let query_string = location.search.substr(1).split(\"&\");",
      "641:             query_string = query_string.filter(item => item.search(field_value) < 0);",
      "644:             query_string = query_string.filter(item => item.search(parent + \"=\" + field_value) < 0)",
      "646:         location.replace(\"?\" + query_string.join(\"&\"))",
      "",
      "[Added Lines]",
      "635:         let query_params = new URLSearchParams(location.search);",
      "641:             query_params.delete(field_value);",
      "645:             query_params.delete(parent, field_value);",
      "647:         location.assign(\"?\" + query_params);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "657:         q_field_phantom.val(q_field.val())",
      "658:         dynamic_form.append(q_field_phantom);",
      "666:     })",
      "",
      "[Removed Lines]",
      "661:         let dynamic_filter_form_query = $(\"#dynamic-filter-form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1]?.length || 0 )",
      "662:         let default_filter_form_query = $(\"#default-filter form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1]?.length || 0 )",
      "664:         let search_query = [...new Set([...default_filter_form_query, ...dynamic_filter_form_query])].join(\"&\")",
      "665:         location.replace(\"?\" + search_query)",
      "",
      "[Added Lines]",
      "664:         let search_query = new URLSearchParams();",
      "665:         let dynamic_query = new URLSearchParams(new FormData(document.getElementById(\"dynamic-filter-form\")));",
      "666:         dynamic_query.forEach((value, key) => { if (value != \"\") { search_query.append(key, value); }});",
      "667:         let default_query = new URLSearchParams(new FormData(document.getElementById(\"default-filter\").firstElementChild));",
      "668:         default_query.forEach((value, key) => {",
      "669:             if (value != \"\" && !search_query.has(key, value)) { search_query.append(key, value); }",
      "670:         });",
      "671:         $(\"#FilterForm_modal\").modal(\"hide\");",
      "672:         location.assign(\"?\" + search_query);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e3bd3b6b7f95d0a3fb9e2f40b88f5bcfd55adc9",
      "candidate_info": {
        "commit_hash": "1e3bd3b6b7f95d0a3fb9e2f40b88f5bcfd55adc9",
        "repo": "nautobot/nautobot",
        "commit_url": "https://github.com/nautobot/nautobot/commit/1e3bd3b6b7f95d0a3fb9e2f40b88f5bcfd55adc9",
        "files": [
          "changes/5690.added",
          "changes/5690.fixed",
          "changes/5690.removed",
          "nautobot/circuits/forms.py",
          "nautobot/circuits/views.py",
          "nautobot/core/testing/views.py",
          "nautobot/dcim/filters/__init__.py",
          "nautobot/dcim/forms.py",
          "nautobot/dcim/tables/devicetypes.py",
          "nautobot/dcim/views.py",
          "nautobot/extras/forms/forms.py",
          "nautobot/extras/forms/mixins.py",
          "nautobot/extras/tests/test_forms.py",
          "nautobot/extras/views.py",
          "nautobot/ipam/forms.py",
          "nautobot/ipam/views.py",
          "nautobot/project-static/js/forms.js",
          "nautobot/tenancy/forms.py",
          "nautobot/tenancy/views.py",
          "nautobot/virtualization/forms.py",
          "nautobot/virtualization/views.py"
        ],
        "message": "Fix JS error in list views lacking filter forms (#5714)",
        "before_after_code_files": [
          "changes/5690.added||changes/5690.added",
          "changes/5690.fixed||changes/5690.fixed",
          "changes/5690.removed||changes/5690.removed",
          "nautobot/circuits/forms.py||nautobot/circuits/forms.py",
          "nautobot/circuits/views.py||nautobot/circuits/views.py",
          "nautobot/core/testing/views.py||nautobot/core/testing/views.py",
          "nautobot/dcim/filters/__init__.py||nautobot/dcim/filters/__init__.py",
          "nautobot/dcim/forms.py||nautobot/dcim/forms.py",
          "nautobot/dcim/tables/devicetypes.py||nautobot/dcim/tables/devicetypes.py",
          "nautobot/dcim/views.py||nautobot/dcim/views.py",
          "nautobot/extras/forms/forms.py||nautobot/extras/forms/forms.py",
          "nautobot/extras/forms/mixins.py||nautobot/extras/forms/mixins.py",
          "nautobot/extras/tests/test_forms.py||nautobot/extras/tests/test_forms.py",
          "nautobot/extras/views.py||nautobot/extras/views.py",
          "nautobot/ipam/forms.py||nautobot/ipam/forms.py",
          "nautobot/ipam/views.py||nautobot/ipam/views.py",
          "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js",
          "nautobot/tenancy/forms.py||nautobot/tenancy/forms.py",
          "nautobot/tenancy/views.py||nautobot/tenancy/views.py",
          "nautobot/virtualization/forms.py||nautobot/virtualization/forms.py",
          "nautobot/virtualization/views.py||nautobot/virtualization/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
          ],
          "candidate": [
            "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
          ]
        }
      },
      "candidate_diff": {
        "changes/5690.added||changes/5690.added": [
          "File: changes/5690.added -> changes/5690.added",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Added a generic test case that asserts that all list views provide an appropriate FilterForm class.",
          "",
          "---------------"
        ],
        "changes/5690.fixed||changes/5690.fixed": [
          "File: changes/5690.fixed -> changes/5690.fixed",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fixed a Javascript error when attempting to filter certain list views.",
          "2: Added missing \"default\" filter forms for a number of list views.",
          "",
          "---------------"
        ],
        "changes/5690.removed||changes/5690.removed": [
          "File: changes/5690.removed -> changes/5690.removed",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Removed deprecated `CustomFieldFilterForm` alias of `CustomFieldModelFilterFormMixin` as this would have caused confusion with the newly added `CustomFieldFilterForm` class providing filtering support for the Custom Fields list view.",
          "",
          "---------------"
        ],
        "nautobot/circuits/forms.py||nautobot/circuits/forms.py": [
          "File: nautobot/circuits/forms.py -> nautobot/circuits/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         ]",
          "148: #",
          "149: # Circuits",
          "150: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: class CircuitTypeFilterForm(NautobotFilterForm):",
          "149:     model = CircuitType",
          "150:     q = forms.CharField(required=False, label=\"Search\")",
          "151:     name = forms.CharField(required=False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:         widgets = {",
          "263:             \"term_side\": forms.HiddenInput(),",
          "264:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: class CircuitTerminationFilterForm(LocatableModelFilterFormMixin, NautobotFilterForm):",
          "274:     model = CircuitTermination",
          "275:     q = forms.CharField(required=False, label=\"Search\")",
          "276:     circuit = DynamicModelMultipleChoiceField(queryset=Circuit.objects.all(), to_field_name=\"cid\", required=False)",
          "277:     provider_network = DynamicModelMultipleChoiceField(",
          "278:         queryset=ProviderNetwork.objects.all(), to_field_name=\"name\", required=False",
          "279:     )",
          "",
          "---------------"
        ],
        "nautobot/circuits/views.py||nautobot/circuits/views.py": [
          "File: nautobot/circuits/views.py -> nautobot/circuits/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     view_mixins.ObjectNotesViewMixin,",
          "28: ):",
          "29:     filterset_class = filters.CircuitTypeFilterSet",
          "30:     form_class = forms.CircuitTypeForm",
          "31:     queryset = CircuitType.objects.annotate(circuit_count=count_related(Circuit, \"circuit_type\"))",
          "32:     serializer_class = serializers.CircuitTypeSerializer",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     filterset_form_class = forms.CircuitTypeFilterForm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: ):",
          "68:     action_buttons = (\"import\", \"export\")",
          "69:     filterset_class = filters.CircuitTerminationFilterSet",
          "70:     form_class = forms.CircuitTerminationForm",
          "71:     queryset = CircuitTermination.objects.all()",
          "72:     serializer_class = serializers.CircuitTerminationSerializer",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     filterset_form_class = forms.CircuitTerminationFilterForm",
          "",
          "---------------"
        ],
        "nautobot/core/testing/views.py||nautobot/core/testing/views.py": [
          "File: nautobot/core/testing/views.py -> nautobot/core/testing/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:         def get_list_view(self):",
          "741:             return lookup.get_view_for_model(self.model, view_type=\"List\")",
          "743:         def test_table_with_indentation_is_removed_on_filter_or_sort(self):",
          "744:             self.user.is_superuser = True",
          "745:             self.user.save()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "743:         def test_list_view_has_filter_form(self):",
          "744:             view = self.get_list_view()",
          "745:             if hasattr(view, \"filterset_form\"):  # ObjectListView",
          "746:                 self.assertIsNotNone(view.filterset_form, \"List view lacks a FilterForm\")",
          "747:             if hasattr(view, \"filterset_form_class\"):  # ObjectListViewMixin",
          "748:                 self.assertIsNotNone(view.filterset_form_class, \"List viewset lacks a FilterForm\")",
          "",
          "---------------"
        ],
        "nautobot/dcim/filters/__init__.py||nautobot/dcim/filters/__init__.py": [
          "File: nautobot/dcim/filters/__init__.py -> nautobot/dcim/filters/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     \"ControllerManagedDeviceGroupFilterSet\",",
          "103:     \"DeviceBayFilterSet\",",
          "104:     \"DeviceBayTemplateFilterSet\",",
          "105:     \"DeviceFilterSet\",",
          "106:     \"DeviceRedundancyGroupFilterSet\",",
          "107:     \"DeviceTypeFilterSet\",",
          "108:     \"DeviceTypeToSoftwareImageFileFilterSet\",",
          "109:     \"FrontPortFilterSet\",",
          "110:     \"FrontPortTemplateFilterSet\",",
          "112:     \"InterfaceConnectionFilterSet\",",
          "113:     \"InterfaceFilterSet\",",
          "114:     \"InterfaceRedundancyGroupFilterSet\",",
          "",
          "[Removed Lines]",
          "111:     \"DeviceFamilyFilterSet\",",
          "",
          "[Added Lines]",
          "105:     \"DeviceFamilyFilterSet\",",
          "",
          "---------------"
        ],
        "nautobot/dcim/forms.py||nautobot/dcim/forms.py": [
          "File: nautobot/dcim/forms.py -> nautobot/dcim/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "728:         ]",
          "731: #",
          "732: # Device Family",
          "733: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731: class ManufacturerFilterForm(NautobotFilterForm):",
          "732:     model = Manufacturer",
          "733:     q = forms.CharField(required=False, label=\"Search\")",
          "734:     device_types = DynamicModelMultipleChoiceField(",
          "735:         queryset=DeviceType.objects.all(), to_field_name=\"model\", required=False",
          "736:     )",
          "737:     platforms = DynamicModelMultipleChoiceField(queryset=Platform.objects.all(), to_field_name=\"name\", required=False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745: class DeviceFamilyFilterForm(NautobotFilterForm):",
          "746:     model = DeviceFamily",
          "747:     q = forms.CharField(required=False, label=\"Search\")",
          "748:     tags = TagFilterField(model)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:     device_types = DynamicModelMultipleChoiceField(",
          "758:         queryset=DeviceType.objects.all(), to_field_name=\"model\", required=False",
          "759:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1582:         }",
          "1585: #",
          "1586: # Devices",
          "1587: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1597: class PlatformFilterForm(NautobotFilterForm):",
          "1598:     model = Platform",
          "1599:     q = forms.CharField(required=False, label=\"Search\")",
          "1600:     name = forms.CharField(required=False)",
          "1601:     network_driver = forms.CharField(required=False)",
          "",
          "---------------"
        ],
        "nautobot/dcim/tables/devicetypes.py||nautobot/dcim/tables/devicetypes.py": [
          "File: nautobot/dcim/tables/devicetypes.py -> nautobot/dcim/tables/devicetypes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: class ManufacturerTable(BaseTable):",
          "46:     pk = ToggleColumn()",
          "47:     name = tables.LinkColumn()",
          "51:     actions = ButtonsColumn(Manufacturer)",
          "53:     class Meta(BaseTable.Meta):",
          "",
          "[Removed Lines]",
          "48:     device_type_count = tables.Column(verbose_name=\"Device Types\")",
          "49:     inventory_item_count = tables.Column(verbose_name=\"Inventory Items\")",
          "50:     platform_count = tables.Column(verbose_name=\"Platforms\")",
          "",
          "[Added Lines]",
          "48:     device_type_count = LinkedCountColumn(",
          "49:         viewname=\"dcim:devicetype_list\", url_params={\"manufacturer\": \"name\"}, verbose_name=\"Device Types\"",
          "50:     )",
          "51:     inventory_item_count = LinkedCountColumn(",
          "52:         viewname=\"dcim:inventoryitem_list\", url_params={\"manufacturer\": \"name\"}, verbose_name=\"Inventory Items\"",
          "53:     )",
          "54:     platform_count = LinkedCountColumn(",
          "55:         viewname=\"dcim:platform_list\", url_params={\"manufacturer\": \"name\"}, verbose_name=\"Platforms\"",
          "56:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: class DeviceFamilyTable(BaseTable):",
          "72:     pk = ToggleColumn()",
          "73:     name = tables.Column(linkify=True)",
          "75:     actions = ButtonsColumn(DeviceFamily)",
          "76:     tags = TagColumn(url_name=\"dcim:devicefamily_list\")",
          "",
          "[Removed Lines]",
          "74:     device_type_count = tables.Column(verbose_name=\"Device Types\")",
          "",
          "[Added Lines]",
          "80:     device_type_count = LinkedCountColumn(",
          "81:         viewname=\"dcim:devicetype_list\", url_params={\"device_family\": \"name\"}, verbose_name=\"Device Types\"",
          "82:     )",
          "",
          "---------------"
        ],
        "nautobot/dcim/views.py||nautobot/dcim/views.py": [
          "File: nautobot/dcim/views.py -> nautobot/dcim/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         platform_count=count_related(Platform, \"manufacturer\"),",
          "711:     )",
          "712:     filterset = filters.ManufacturerFilterSet",
          "713:     table = tables.ManufacturerTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     filterset_form = forms.ManufacturerFilterForm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1212:         virtual_machine_count=count_related(VirtualMachine, \"platform\"),",
          "1213:     )",
          "1214:     filterset = filters.PlatformFilterSet",
          "1215:     table = tables.PlatformTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1216:     filterset_form = forms.PlatformFilterForm",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3104: class DeviceFamilyUIViewSet(NautobotUIViewSet):",
          "3105:     filterset_class = filters.DeviceFamilyFilterSet",
          "3106:     form_class = forms.DeviceFamilyForm",
          "3107:     bulk_update_form_class = forms.DeviceFamilyBulkEditForm",
          "3108:     queryset = DeviceFamily.objects.annotate(device_type_count=count_related(DeviceType, \"device_family\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3108:     filterset_form_class = forms.DeviceFamilyFilterForm",
          "",
          "---------------"
        ],
        "nautobot/extras/forms/forms.py||nautobot/extras/forms/forms.py": [
          "File: nautobot/extras/forms/forms.py -> nautobot/extras/forms/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     \"ConfigContextSchemaBulkEditForm\",",
          "105:     \"ConfigContextSchemaFilterForm\",",
          "106:     \"CustomFieldForm\",",
          "107:     \"CustomFieldModelCSVForm\",",
          "108:     \"CustomFieldBulkCreateForm\",  # 2.0 TODO remove this deprecated class",
          "109:     \"CustomFieldChoiceFormSet\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     \"CustomFieldFilterForm\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     \"DynamicGroupMembershipFormSet\",",
          "115:     \"ExportTemplateForm\",",
          "116:     \"ExportTemplateFilterForm\",",
          "117:     \"ExternalIntegrationForm\",",
          "118:     \"ExternalIntegrationBulkEditForm\",",
          "119:     \"GitRepositoryForm\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     \"ExternalIntegrationFilterForm\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     \"RelationshipFilterForm\",",
          "145:     \"RelationshipAssociationFilterForm\",",
          "146:     \"RoleBulkEditForm\",",
          "147:     \"RoleForm\",",
          "148:     \"ScheduledJobFilterForm\",",
          "149:     \"SecretForm\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:     \"RoleFilterForm\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421:             self.fields[\"key\"].widget.attrs[\"readonly\"] = True",
          "424: class CustomFieldModelCSVForm(CSVModelForm, CustomFieldModelFormMixin):",
          "425:     \"\"\"",
          "426:     Base class for CSV/JSON/YAML import of models that support custom fields.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: class CustomFieldFilterForm(NautobotFilterForm):",
          "428:     model = CustomField",
          "429:     q = forms.CharField(required=False, label=\"Search\")",
          "430:     content_types = MultipleContentTypeField(",
          "431:         queryset=ContentType.objects.filter(FeatureQuery(\"custom_fields\").get_query()),",
          "432:         choices_as_strings=True,",
          "433:         required=False,",
          "434:         label=\"Content Type(s)\",",
          "435:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "638:         nullable_fields = [\"extra_config\", \"secrets_group\", \"headers\"]",
          "641: #",
          "642: # Git repositories and other data sources",
          "643: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: class ExternalIntegrationFilterForm(NautobotFilterForm):",
          "656:     model = ExternalIntegration",
          "657:     q = forms.CharField(required=False, label=\"Search\")",
          "658:     secrets_group = DynamicModelMultipleChoiceField(",
          "659:         queryset=SecretsGroup.objects.all(), to_field_name=\"name\", required=False",
          "660:     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1429:         nullable_fields = [\"weight\"]",
          "1432: #",
          "1433: # Secrets",
          "1434: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1454: class RoleFilterForm(NautobotFilterForm):",
          "1455:     model = Role",
          "1456:     q = forms.CharField(required=False, label=\"Search\")",
          "1457:     content_types = MultipleContentTypeField(",
          "1458:         queryset=RoleModelsQuery().as_queryset(),",
          "1459:         required=False,",
          "1460:         choices_as_strings=True,",
          "1461:         label=\"Content Type(s)\",",
          "1462:     )",
          "",
          "---------------"
        ],
        "nautobot/extras/forms/mixins.py||nautobot/extras/forms/mixins.py": [
          "File: nautobot/extras/forms/mixins.py -> nautobot/extras/forms/mixins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     # 2.0 TODO: remove the below deprecated aliases",
          "46:     \"AddRemoveTagsForm\",",
          "47:     \"CustomFieldBulkEditForm\",",
          "49:     \"CustomFieldModelForm\",",
          "50:     \"RelationshipModelForm\",",
          "51:     \"RoleModelBulkEditFormMixin\",",
          "",
          "[Removed Lines]",
          "48:     \"CustomFieldFilterForm\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "767:     pass",
          "775: @class_deprecated_in_favor_of(CustomFieldModelFormMixin)",
          "776: class CustomFieldModelForm(CustomFieldModelFormMixin):",
          "777:     pass",
          "",
          "[Removed Lines]",
          "770: @class_deprecated_in_favor_of(CustomFieldModelFilterFormMixin)",
          "771: class CustomFieldFilterForm(CustomFieldModelFilterFormMixin):",
          "772:     pass",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nautobot/extras/tests/test_forms.py||nautobot/extras/tests/test_forms.py": [
          "File: nautobot/extras/tests/test_forms.py -> nautobot/extras/tests/test_forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     ConfigContextFilterForm,",
          "15:     ConfigContextForm,",
          "16:     CustomFieldModelBulkEditFormMixin,",
          "18:     CustomFieldModelFormMixin,",
          "19:     JobButtonForm,",
          "20:     JobEditForm,",
          "",
          "[Removed Lines]",
          "17:     CustomFieldModelFilterFormMixin,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1089:             AddRemoveTagsForm,",
          "1090:             CustomFieldBulkCreateForm,",
          "1091:             CustomFieldBulkEditForm,",
          "1093:             CustomFieldModelForm,",
          "1094:             RelationshipModelForm,",
          "1095:             StatusBulkEditFormMixin,",
          "",
          "[Removed Lines]",
          "1092:             CustomFieldFilterForm,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1100:             (AddRemoveTagsForm, TagsBulkEditFormMixin),",
          "1101:             (CustomFieldBulkEditForm, CustomFieldModelBulkEditFormMixin),",
          "1102:             (CustomFieldBulkCreateForm, CustomFieldModelBulkEditFormMixin),",
          "1104:             (CustomFieldModelForm, CustomFieldModelFormMixin),",
          "1105:             (RelationshipModelForm, RelationshipModelFormMixin),",
          "1106:             (StatusBulkEditFormMixin, StatusModelBulkEditFormMixin),",
          "",
          "[Removed Lines]",
          "1103:             (CustomFieldFilterForm, CustomFieldModelFilterFormMixin),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nautobot/extras/views.py||nautobot/extras/views.py": [
          "File: nautobot/extras/views.py -> nautobot/extras/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     enqueue_pull_git_repository_and_refresh_data,",
          "57:     get_datasource_contents,",
          "58: )",
          "61: from .jobs import get_job",
          "62: from .models import (",
          "63:     ComputedField,",
          "",
          "[Removed Lines]",
          "59: from .filters import RoleFilterSet",
          "60: from .forms import RoleBulkEditForm, RoleForm",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     Webhook,",
          "95: )",
          "96: from .registry import registry",
          "99: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "97: from .tables import AssociatedContactsTable, RoleTable",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:     filterset_class = filters.ContactAssociationFilterSet",
          "399:     queryset = ContactAssociation.objects.all()",
          "400:     serializer_class = serializers.ContactAssociationSerializer",
          "402:     non_filter_params = (\"export\", \"page\", \"per_page\", \"sort\")",
          "",
          "[Removed Lines]",
          "401:     table_class = AssociatedContactsTable",
          "",
          "[Added Lines]",
          "398:     table_class = tables.AssociatedContactsTable",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "506:     queryset = CustomField.objects.all()",
          "507:     table = tables.CustomFieldTable",
          "508:     filterset = filters.CustomFieldFilterSet",
          "509:     action_buttons = (\"add\",)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:     filterset_form = forms.CustomFieldFilterForm",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "950: class ExternalIntegrationUIViewSet(NautobotUIViewSet):",
          "951:     bulk_update_form_class = forms.ExternalIntegrationBulkEditForm",
          "952:     filterset_class = filters.ExternalIntegrationFilterSet",
          "953:     form_class = forms.ExternalIntegrationForm",
          "954:     queryset = ExternalIntegration.objects.select_related(\"secrets_group\")",
          "955:     serializer_class = serializers.ExternalIntegrationSerializer",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "951:     filterset_form_class = forms.ExternalIntegrationFilterForm",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2048:     \"\"\"`Roles` UIViewSet.\"\"\"",
          "2050:     queryset = Role.objects.all()",
          "2054:     serializer_class = serializers.RoleSerializer",
          "2057:     def get_extra_context(self, request, instance):",
          "2058:         context = super().get_extra_context(request, instance)",
          "",
          "[Removed Lines]",
          "2051:     bulk_update_form_class = RoleBulkEditForm",
          "2052:     filterset_class = RoleFilterSet",
          "2053:     form_class = RoleForm",
          "2055:     table_class = RoleTable",
          "",
          "[Added Lines]",
          "2050:     bulk_update_form_class = forms.RoleBulkEditForm",
          "2051:     filterset_class = filters.RoleFilterSet",
          "2052:     filterset_form_class = forms.RoleFilterForm",
          "2053:     form_class = forms.RoleForm",
          "2055:     table_class = tables.RoleTable",
          "",
          "---------------"
        ],
        "nautobot/ipam/forms.py||nautobot/ipam/forms.py": [
          "File: nautobot/ipam/forms.py -> nautobot/ipam/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         ]",
          "97: #",
          "98: # VRFs",
          "99: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: class NamespaceFilterForm(LocatableModelFilterFormMixin, NautobotFilterForm):",
          "98:     model = Namespace",
          "99:     q = forms.CharField(required=False, label=\"Search\")",
          "100:     name = forms.CharField(required=False)",
          "",
          "---------------"
        ],
        "nautobot/ipam/views.py||nautobot/ipam/views.py": [
          "File: nautobot/ipam/views.py -> nautobot/ipam/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     form_class = forms.NamespaceForm",
          "81:     bulk_update_form_class = forms.NamespaceBulkEditForm",
          "82:     filterset_class = filters.NamespaceFilterSet",
          "83:     queryset = Namespace.objects.all()",
          "84:     serializer_class = serializers.NamespaceSerializer",
          "85:     table_class = tables.NamespaceTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     filterset_form_class = forms.NamespaceFilterForm",
          "",
          "---------------"
        ],
        "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js": [
          "File: nautobot/project-static/js/forms.js -> nautobot/project-static/js/forms.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:         let search_query = new URLSearchParams();",
          "665:         let dynamic_query = new URLSearchParams(new FormData(document.getElementById(\"dynamic-filter-form\")));",
          "666:         dynamic_query.forEach((value, key) => { if (value != \"\") { search_query.append(key, value); }});",
          "668:         default_query.forEach((value, key) => {",
          "669:             if (value != \"\" && !search_query.has(key, value)) { search_query.append(key, value); }",
          "670:         });",
          "",
          "[Removed Lines]",
          "667:         let default_query = new URLSearchParams(new FormData(document.getElementById(\"default-filter\").firstElementChild));",
          "",
          "[Added Lines]",
          "668:         let default_query = new URLSearchParams(new FormData(document.getElementById(\"default-filter\")?.firstElementChild));",
          "",
          "---------------"
        ],
        "nautobot/tenancy/forms.py||nautobot/tenancy/forms.py": [
          "File: nautobot/tenancy/forms.py -> nautobot/tenancy/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     CommentField,",
          "5:     DynamicModelChoiceField,",
          "6:     DynamicModelMultipleChoiceField,",
          "7:     TagFilterField,",
          "8: )",
          "9: from nautobot.extras.forms import (",
          "10:     NautobotBulkEditForm,",
          "11:     NautobotFilterForm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:     StaticSelect2,",
          "10: from nautobot.core.forms.constants import BOOLEAN_WITH_BLANK_CHOICES",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         ]",
          "35: #",
          "36: # Tenants",
          "37: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: class TenantGroupFilterForm(NautobotFilterForm):",
          "38:     model = TenantGroup",
          "39:     q = forms.CharField(required=False, label=\"Search\")",
          "40:     parent = DynamicModelMultipleChoiceField(queryset=TenantGroup.objects.all(), to_field_name=\"name\", required=False)",
          "41:     has_tenants = forms.NullBooleanField(required=\"False\", widget=StaticSelect2(choices=BOOLEAN_WITH_BLANK_CHOICES))",
          "",
          "---------------"
        ],
        "nautobot/tenancy/views.py||nautobot/tenancy/views.py": [
          "File: nautobot/tenancy/views.py -> nautobot/tenancy/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: class TenantGroupListView(generic.ObjectListView):",
          "20:     queryset = TenantGroup.objects.annotate(tenant_count=count_related(Tenant, \"tenant_group\"))",
          "21:     filterset = filters.TenantGroupFilterSet",
          "22:     table = tables.TenantGroupTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     filterset_form = forms.TenantGroupFilterForm",
          "",
          "---------------"
        ],
        "nautobot/virtualization/forms.py||nautobot/virtualization/forms.py": [
          "File: nautobot/virtualization/forms.py -> nautobot/virtualization/forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         ]",
          "65: #",
          "66: # Cluster groups",
          "67: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: class ClusterTypeFilterForm(NautobotFilterForm):",
          "66:     model = ClusterType",
          "67:     q = forms.CharField(required=False, label=\"Search\")",
          "68:     clusters = DynamicModelMultipleChoiceField(queryset=Cluster.objects.all(), to_field_name=\"name\", required=False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         ]",
          "79: #",
          "80: # Clusters",
          "81: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: class ClusterGroupFilterForm(NautobotFilterForm):",
          "86:     model = ClusterGroup",
          "87:     q = forms.CharField(required=False, label=\"Search\")",
          "88:     clusters = DynamicModelMultipleChoiceField(queryset=Cluster.objects.all(), to_field_name=\"name\", required=False)",
          "",
          "---------------"
        ],
        "nautobot/virtualization/views.py||nautobot/virtualization/views.py": [
          "File: nautobot/virtualization/views.py -> nautobot/virtualization/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: class ClusterTypeListView(generic.ObjectListView):",
          "28:     queryset = ClusterType.objects.annotate(cluster_count=count_related(Cluster, \"cluster_type\"))",
          "29:     filterset = filters.ClusterTypeFilterSet",
          "30:     table = tables.ClusterTypeTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:     filterset_form = forms.ClusterTypeFilterForm",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: class ClusterGroupListView(generic.ObjectListView):",
          "85:     queryset = ClusterGroup.objects.annotate(cluster_count=count_related(Cluster, \"cluster_group\"))",
          "86:     filterset = filters.ClusterGroupFilterSet",
          "87:     table = tables.ClusterGroupTable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     filterset_form = forms.ClusterGroupFilterForm",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "949e631d20dfebca1309ac4f60f389d42207a087",
      "candidate_info": {
        "commit_hash": "949e631d20dfebca1309ac4f60f389d42207a087",
        "repo": "nautobot/nautobot",
        "commit_url": "https://github.com/nautobot/nautobot/commit/949e631d20dfebca1309ac4f60f389d42207a087",
        "files": [
          "changes/4572.fixed",
          "nautobot/project-static/js/forms.js"
        ],
        "message": "Fixed a JS crash when using list view search box to filter objects in legacy UI. (#4578)",
        "before_after_code_files": [
          "changes/4572.fixed||changes/4572.fixed",
          "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
          ],
          "candidate": [
            "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
          ]
        }
      },
      "candidate_diff": {
        "changes/4572.fixed||changes/4572.fixed": [
          "File: changes/4572.fixed -> changes/4572.fixed",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fixed a JS crash when using list view search box to filter objects in legacy UI.",
          "",
          "---------------"
        ],
        "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js": [
          "File: nautobot/project-static/js/forms.js -> nautobot/project-static/js/forms.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         dynamic_form.append(q_field_phantom);",
          "617:         let search_query = [...new Set([...default_filter_form_query, ...dynamic_filter_form_query])].join(\"&\")",
          "618:         location.replace(\"?\" + search_query)",
          "",
          "[Removed Lines]",
          "614:         let dynamic_filter_form_query = $(\"#dynamic-filter-form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1].length)",
          "615:         let default_filter_form_query = $(\"#default-filter form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1].length)",
          "",
          "[Added Lines]",
          "614:         let dynamic_filter_form_query = $(\"#dynamic-filter-form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1]?.length || 0 )",
          "615:         let default_filter_form_query = $(\"#default-filter form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1]?.length || 0 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3906b16648dd97fa0d03faf3983a98da86adf26",
      "candidate_info": {
        "commit_hash": "d3906b16648dd97fa0d03faf3983a98da86adf26",
        "repo": "nautobot/nautobot",
        "commit_url": "https://github.com/nautobot/nautobot/commit/d3906b16648dd97fa0d03faf3983a98da86adf26",
        "files": [
          "changes/3574.fixed",
          "nautobot/core/tests/integration/test_filters.py",
          "nautobot/core/tests/test_views.py",
          "nautobot/core/utils/filtering.py",
          "nautobot/extras/filters/customfields.py",
          "nautobot/extras/filters/mixins.py",
          "nautobot/extras/forms/mixins.py",
          "nautobot/extras/models/customfields.py",
          "nautobot/extras/tests/test_customfields.py",
          "nautobot/project-static/js/forms.js"
        ],
        "message": "Fix advance filter error on multiple custom filter (#3574)\n\n* fix custom filter error\n\n* change logs\n\n* change CustomFieldMultiSelectFilter to inherit from MultipleChoiceFilter\n\n* revert changes to CustomFieldMultiSelectFilter\n\n* fix fillter error\n\n* Make CustomField select filter multiple selct\n\n* Add logic to return a customfield filter field\n\n* flake8\n\n* Add test case\n\n* Check for blank choice removal\n\n* Check for blank choice removal\n\n* Remove blank choice\n\n* Use multi char instead\n\n* Fix failing test\n\n* Attempt to fix Timizuo's by setting the filter field/widget in core (#3644)\n\n* remove breaking change\n\n* fix unittest\n\n* fix black\n\n* add to filter form test case\n\n* fix integration test\n\n* fix black\n\n---------\n\nCo-authored-by: Jathan McCollum <jathan@gmail.com>",
        "before_after_code_files": [
          "changes/3574.fixed||changes/3574.fixed",
          "nautobot/core/tests/integration/test_filters.py||nautobot/core/tests/integration/test_filters.py",
          "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py",
          "nautobot/core/utils/filtering.py||nautobot/core/utils/filtering.py",
          "nautobot/extras/filters/customfields.py||nautobot/extras/filters/customfields.py",
          "nautobot/extras/filters/mixins.py||nautobot/extras/filters/mixins.py",
          "nautobot/extras/forms/mixins.py||nautobot/extras/forms/mixins.py",
          "nautobot/extras/models/customfields.py||nautobot/extras/models/customfields.py",
          "nautobot/extras/tests/test_customfields.py||nautobot/extras/tests/test_customfields.py",
          "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py",
            "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
          ],
          "candidate": [
            "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py",
            "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js"
          ]
        }
      },
      "candidate_diff": {
        "changes/3574.fixed||changes/3574.fixed": [
          "File: changes/3574.fixed -> changes/3574.fixed",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fixed Inability to select multiple entries on (Multiple) selection custom fields in filter.",
          "",
          "---------------"
        ],
        "nautobot/core/tests/integration/test_filters.py||nautobot/core/tests/integration/test_filters.py": [
          "File: nautobot/core/tests/integration/test_filters.py -> nautobot/core/tests/integration/test_filters.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         self.cf_text_field_label = \"Text Field\"",
          "42:         self.cf_integer_field_label = \"Integer Field\"",
          "43:         self.cf_select_field_label = \"Select Field\"",
          "44:         self.custom_fields = (",
          "45:             CustomField.objects.create(type=CustomFieldTypeChoices.TYPE_TEXT, label=self.cf_text_field_label),",
          "46:             CustomField.objects.create(type=CustomFieldTypeChoices.TYPE_INTEGER, label=self.cf_integer_field_label),",
          "47:             CustomField.objects.create(type=CustomFieldTypeChoices.TYPE_SELECT, label=self.cf_select_field_label),",
          "48:         )",
          "49:         for custom_field in self.custom_fields:",
          "50:             custom_field.content_types.set([ContentType.objects.get_for_model(Location)])",
          "52:         for x in [\"A\", \"B\", \"C\"]:",
          "55:     def tearDown(self):",
          "56:         self.logout()",
          "",
          "[Removed Lines]",
          "53:             CustomFieldChoice.objects.create(custom_field=self.custom_fields[2], value=f\"Option {x}\")",
          "",
          "[Added Lines]",
          "44:         self.cf_multi_select_field_label = \"Multi Select Field\"",
          "49:             CustomField.objects.create(",
          "50:                 type=CustomFieldTypeChoices.TYPE_MULTISELECT, label=self.cf_multi_select_field_label",
          "51:             ),",
          "57:             CustomFieldChoice.objects.create(custom_field=self.custom_fields[2], value=f\"SingleSelect Option {x}\")",
          "58:             CustomFieldChoice.objects.create(custom_field=self.custom_fields[3], value=f\"MultiSelect Option {x}\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:         text_field_name = self.custom_fields[0].add_prefix_to_cf_key()",
          "151:         integer_field_name = self.custom_fields[1].add_prefix_to_cf_key()",
          "152:         select_field_name = self.custom_fields[2].add_prefix_to_cf_key()",
          "153:         apply_btn_xpath = \"//div[@id='default-filter']//button[@type='submit']\"",
          "155:         # Open the filter modal, configure filter and apply filter",
          "156:         self.browser.find_by_id(\"id__filterbtn\").click()",
          "157:         self.change_field_value(text_field_name, \"example-text\")",
          "158:         self.change_field_value(integer_field_name, 4356)",
          "160:         self.browser.find_by_xpath(apply_btn_xpath).click()  # Click on apply filter button",
          "161:         self.assertTrue(self.browser.is_text_present(\"example-text\"))",
          "162:         self.assertTrue(self.browser.is_text_present(\"4356\"))",
          "165:         # Assert on update of field in Default Filter the update is replicated on Advanced Filter",
          "166:         self.browser.find_by_id(\"id__filterbtn\").click()",
          "167:         self.change_field_value(text_field_name, \"test new\", idx=1)",
          "168:         self.change_field_value(integer_field_name, 1111, idx=1)",
          "170:         self.browser.find_by_xpath(\"//a[@href='#advanced-filter']\").click()",
          "171:         self.assertEqual(self.browser.find_by_name(text_field_name)[2].value, \"test new\")",
          "172:         self.assertEqual(self.browser.find_by_name(integer_field_name)[2].value, \"1111\")",
          "175:         # Assert on update of field in Advanced Filter the update is replicated on Default Filter",
          "176:         self.change_field_value(text_field_name, \"test new update\", idx=2)",
          "177:         self.change_field_value(integer_field_name, 8888, idx=2)",
          "178:         self.change_field_value(",
          "180:         )",
          "181:         self.browser.find_by_xpath(\"//a[@href='#default-filter']\").click()",
          "182:         self.assertEqual(self.browser.find_by_name(text_field_name)[1].value, \"test new update\")",
          "183:         self.assertEqual(self.browser.find_by_name(integer_field_name)[1].value, \"8888\")",
          "186:         # Assert on update of filter, the new filter is applied",
          "187:         self.browser.find_by_xpath(apply_btn_xpath).click()  # Click on apply filter button",
          "188:         self.assertTrue(self.browser.is_text_present(\"test new update\"))",
          "189:         self.assertTrue(self.browser.is_text_present(\"8888\"))",
          "",
          "[Removed Lines]",
          "159:         self.change_field_value(select_field_name, \"Option A\", field_type=\"select\")",
          "163:         self.assertTrue(self.browser.is_text_present(\"Option A\"))",
          "169:         self.change_field_value(select_field_name, \"Option B\", field_type=\"select\")",
          "173:         self.assertEqual(self.browser.find_by_name(select_field_name)[2].value, \"Option B\")",
          "179:             select_field_name, \"Option C\", field_type=\"select\", idx=1, select2_field_name=\"form-1-lookup_value\"",
          "184:         self.assertEqual(self.browser.find_by_name(select_field_name)[1].value, \"Option C\")",
          "190:         self.assertTrue(self.browser.is_text_present(\"Option C\"))",
          "",
          "[Added Lines]",
          "158:         multi_select_field_name = self.custom_fields[3].add_prefix_to_cf_key()",
          "165:         self.change_field_value(select_field_name, \"SingleSelect Option A\", field_type=\"select\")",
          "166:         self.change_field_value(multi_select_field_name, \"MultiSelect Option A\", field_type=\"select\")",
          "170:         self.assertTrue(self.browser.is_text_present(\"SingleSelect Option A\"))",
          "171:         self.assertTrue(self.browser.is_text_present(\"MultiSelect Option A\"))",
          "177:         self.change_field_value(select_field_name, \"SingleSelect Option B\", field_type=\"select\")",
          "178:         self.change_field_value(multi_select_field_name, \"MultiSelect Option B\", field_type=\"select\")",
          "182:         # CustomSelect Field is a MultiValueCharField, and the only way to get its values is using this approach.",
          "183:         # Its values are the  options available on the select field",
          "184:         custom_select_field = self.browser.find_by_name(select_field_name)[2].find_by_tag(\"option\")",
          "185:         self.assertEqual(custom_select_field[0].value, \"SingleSelect Option A\")",
          "186:         self.assertEqual(custom_select_field[1].value, \"SingleSelect Option B\")",
          "187:         custom_multi_select_field = self.browser.find_by_name(multi_select_field_name)[2].find_by_tag(\"option\")",
          "188:         self.assertEqual(custom_multi_select_field[0].value, \"MultiSelect Option A\")",
          "189:         self.assertEqual(custom_multi_select_field[1].value, \"MultiSelect Option B\")",
          "195:             select_field_name,",
          "196:             \"SingleSelect Option C\",",
          "197:             field_type=\"select\",",
          "198:             idx=1,",
          "199:             select2_field_name=\"form-2-lookup_value\",",
          "200:         )",
          "201:         self.change_field_value(",
          "202:             multi_select_field_name,",
          "203:             \"MultiSelect Option C\",",
          "204:             field_type=\"select\",",
          "205:             idx=1,",
          "206:             select2_field_name=\"form-1-lookup_value\",",
          "211:         custom_select_values = self.browser.find_by_name(select_field_name)[1].find_by_tag(\"option\")",
          "212:         self.assertEqual(custom_select_values[0].value, \"SingleSelect Option A\")",
          "213:         self.assertEqual(custom_select_values[1].value, \"SingleSelect Option B\")",
          "214:         self.assertEqual(custom_select_values[2].value, \"SingleSelect Option C\")",
          "215:         multi_custom_select_values = self.browser.find_by_name(multi_select_field_name)[1].find_by_tag(\"option\")",
          "216:         self.assertEqual(multi_custom_select_values[0].value, \"MultiSelect Option A\")",
          "217:         self.assertEqual(multi_custom_select_values[1].value, \"MultiSelect Option B\")",
          "218:         self.assertEqual(multi_custom_select_values[2].value, \"MultiSelect Option C\")",
          "224:         self.assertTrue(self.browser.is_text_present(\"SingleSelect Option C\"))",
          "225:         self.assertTrue(self.browser.is_text_present(\"MultiSelect Option C\"))",
          "",
          "---------------"
        ],
        "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py": [
          "File: nautobot/core/tests/test_views.py -> nautobot/core/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import re",
          "2: import urllib.parse",
          "4: from django.test import override_settings",
          "5: from django.test.utils import override_script_prefix",
          "6: from django.urls import get_script_prefix, reverse",
          "7: from prometheus_client.parser import text_string_to_metric_families",
          "9: from nautobot.core.testing import TestCase",
          "10: from nautobot.extras.registry import registry",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from django.contrib.contenttypes.models import ContentType",
          "11: from nautobot.dcim.models.locations import Location",
          "12: from nautobot.extras.choices import CustomFieldTypeChoices",
          "13: from nautobot.extras.models.customfields import CustomField, CustomFieldChoice",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:             response.content.decode(response.charset),",
          "151:         )",
          "154: class ForceScriptNameTestcase(TestCase):",
          "155:     \"\"\"Basic test to assert that `settings.FORCE_SCRIPT_NAME` works as intended.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     def test_filtering_on_custom_select_filter_field(self):",
          "158:         \"\"\"Assert CustomField select and multiple select fields can be filtered using multiple entries\"\"\"",
          "159:         self.add_permissions(\"dcim.view_location\")",
          "161:         multi_select_cf = CustomField.objects.create(",
          "162:             type=CustomFieldTypeChoices.TYPE_MULTISELECT, label=\"Multiple Choice\"",
          "163:         )",
          "164:         select_cf = CustomField.objects.create(type=CustomFieldTypeChoices.TYPE_SELECT, label=\"choice\")",
          "165:         choices = [\"Foo\", \"Bar\", \"FooBar\"]",
          "166:         for cf in [multi_select_cf, select_cf]:",
          "167:             cf.content_types.set([ContentType.objects.get_for_model(Location)])",
          "168:             CustomFieldChoice.objects.create(custom_field=cf, value=choices[0])",
          "169:             CustomFieldChoice.objects.create(custom_field=cf, value=choices[1])",
          "170:             CustomFieldChoice.objects.create(custom_field=cf, value=choices[2])",
          "172:         locations = Location.objects.all()[:3]",
          "173:         for idx, location in enumerate(locations):",
          "174:             location.cf[multi_select_cf.key] = choices[:2]",
          "175:             location.cf[select_cf.key] = choices[idx]",
          "176:             location.save()",
          "178:         query_param = (",
          "179:             f\"?cf_{multi_select_cf.key}={choices[0]}&cf_{multi_select_cf.key}={choices[1]}\"",
          "180:             f\"&cf_{select_cf.key}={choices[0]}&cf_{select_cf.key}={choices[1]}\"",
          "181:         )",
          "182:         url = reverse(\"dcim:location_list\") + query_param",
          "183:         response = self.client.get(url)",
          "184:         response_content = response.content.decode(response.charset).replace(\"\\n\", \"\")",
          "185:         self.assertInHTML(locations[0].name, response_content)",
          "186:         self.assertInHTML(locations[1].name, response_content)",
          "",
          "---------------"
        ],
        "nautobot/core/utils/filtering.py||nautobot/core/utils/filtering.py": [
          "File: nautobot/core/utils/filtering.py -> nautobot/core/utils/filtering.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     \"\"\"",
          "89:     # Avoid circular import",
          "90:     from nautobot.dcim.models import Device",
          "92:     from nautobot.extras.models import ConfigContext, Role, Status, Tag",
          "93:     from nautobot.extras.utils import ChangeLoggedModelsQuery, RoleModelsQuery, TaggableClassesQuery",
          "94:     from nautobot.core.filters import MultiValueDecimalFilter, MultiValueFloatFilter",
          "",
          "[Removed Lines]",
          "91:     from nautobot.extras.filters import ContentTypeMultipleChoiceFilter, StatusFilter",
          "",
          "[Added Lines]",
          "91:     from nautobot.extras.filters import ContentTypeMultipleChoiceFilter, CustomFieldFilterMixin, StatusFilter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     form_field = field.field",
          "107:     # TODO(Culver): We are having to replace some widgets here because multivalue_field_factory that generates these isn't smart enough",
          "109:         form_field = forms.DecimalField()",
          "110:     elif isinstance(field, NumberFilter):",
          "111:         form_field = forms.IntegerField()",
          "",
          "[Removed Lines]",
          "108:     if isinstance(field, (MultiValueDecimalFilter, MultiValueFloatFilter)):",
          "",
          "[Added Lines]",
          "108:     if isinstance(field, CustomFieldFilterMixin):",
          "109:         form_field = field.custom_field.to_filter_form_field(lookup_expr=field.lookup_expr)",
          "110:     elif isinstance(field, (MultiValueDecimalFilter, MultiValueFloatFilter)):",
          "",
          "---------------"
        ],
        "nautobot/extras/filters/customfields.py||nautobot/extras/filters/customfields.py": [
          "File: nautobot/extras/filters/customfields.py -> nautobot/extras/filters/customfields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     MultiValueNumberFilter,",
          "9: )",
          "10: from nautobot.core.forms import NullableDateField",
          "11: from nautobot.extras.choices import CustomFieldFilterLogicChoices, CustomFieldTypeChoices",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from nautobot.core.forms.widgets import StaticSelect2Multiple",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         # Return custom fields that don't match the value and null custom fields",
          "49:         if self.exclude:",
          "50:             qs_null_custom_fields = qs.filter(**{f\"{self.field_name}__isnull\": True}).distinct()",
          "53:         return super().filter(qs, value)",
          "",
          "[Removed Lines]",
          "51:             return super().filter(qs, value) | qs_null_custom_fields",
          "",
          "[Added Lines]",
          "52:             return super().filter(qs, value).distinct() | qs_null_custom_fields",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     \"\"\"Custom field single value filter for backwards compatibility\"\"\"",
          "77:     def __init__(self, *args, **kwargs):",
          "78:         kwargs.setdefault(\"lookup_expr\", \"contains\")",
          "79:         super().__init__(*args, **kwargs)",
          "82: class CustomFieldNumberFilter(CustomFieldFilterMixin, django_filters.Filter):",
          "83:     \"\"\"Custom field single value filter for backwards compatibility\"\"\"",
          "",
          "[Removed Lines]",
          "74: class CustomFieldMultiSelectFilter(CustomFieldFilterMixin, django_filters.Filter):",
          "75:     \"\"\"Custom field single value filter for backwards compatibility\"\"\"",
          "",
          "[Added Lines]",
          "75: class CustomFieldMultiSelectFilter(CustomFieldFilterMixin, MultiValueCharFilter):",
          "76:     \"\"\"This provides functionality for filtering custom fields with multiple  select type\"\"\"",
          "83: class CustomFieldMultiValueSelectFilter(CustomFieldFilterMixin, django_filters.MultipleChoiceFilter):",
          "84:     \"\"\"This provides functionality for filtering custom fields with select type\"\"\"",
          "86:     def __init__(self, *args, **kwargs):",
          "87:         self.field_class.widget = StaticSelect2Multiple",
          "88:         super().__init__(*args, **kwargs)",
          "",
          "---------------"
        ],
        "nautobot/extras/filters/mixins.py||nautobot/extras/filters/mixins.py": [
          "File: nautobot/extras/filters/mixins.py -> nautobot/extras/filters/mixins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from nautobot.core.constants import (",
          "7:     FILTER_CHAR_BASED_LOOKUP_MAP,",
          "8:     FILTER_NUMERIC_BASED_LOOKUP_MAP,",
          "9: )",
          "10: from nautobot.core.filters import (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:     FILTER_NEGATION_LOOKUP_MAP,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:             CustomFieldTypeChoices.TYPE_INTEGER: CustomFieldNumberFilter,",
          "67:             CustomFieldTypeChoices.TYPE_JSON: CustomFieldJSONFilter,",
          "68:             CustomFieldTypeChoices.TYPE_MULTISELECT: CustomFieldMultiSelectFilter,",
          "69:         }",
          "71:         custom_fields = CustomField.objects.filter(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:             CustomFieldTypeChoices.TYPE_SELECT: CustomFieldMultiSelectFilter,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     def _get_custom_field_filter_lookup_dict(filter_type):",
          "90:         # Choose the lookup expression map based on the filter type",
          "91:         if issubclass(filter_type, (CustomFieldMultiValueNumberFilter, CustomFieldMultiValueDateFilter)):",
          "93:         else:",
          "98:     # TODO 2.0: Transition CustomField filters to nautobot.core.filters.MultiValue* filters and",
          "99:     # leverage BaseFilterSet to add dynamic lookup expression filters. Remove CustomField.filter_logic field",
          "",
          "[Removed Lines]",
          "92:             lookup_map = FILTER_NUMERIC_BASED_LOOKUP_MAP",
          "94:             lookup_map = FILTER_CHAR_BASED_LOOKUP_MAP",
          "96:         return lookup_map",
          "",
          "[Added Lines]",
          "94:             return FILTER_NUMERIC_BASED_LOOKUP_MAP",
          "95:         elif issubclass(filter_type, CustomFieldMultiSelectFilter):",
          "96:             return FILTER_NEGATION_LOOKUP_MAP",
          "98:             return FILTER_CHAR_BASED_LOOKUP_MAP",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:             CustomFieldTypeChoices.TYPE_DATE: CustomFieldMultiValueDateFilter,",
          "110:             CustomFieldTypeChoices.TYPE_INTEGER: CustomFieldMultiValueNumberFilter,",
          "111:             CustomFieldTypeChoices.TYPE_SELECT: CustomFieldMultiValueCharFilter,",
          "112:             CustomFieldTypeChoices.TYPE_TEXT: CustomFieldMultiValueCharFilter,",
          "113:             CustomFieldTypeChoices.TYPE_URL: CustomFieldMultiValueCharFilter,",
          "114:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:             CustomFieldTypeChoices.TYPE_MULTISELECT: CustomFieldMultiSelectFilter,",
          "",
          "---------------"
        ],
        "nautobot/extras/forms/mixins.py||nautobot/extras/forms/mixins.py": [
          "File: nautobot/extras/forms/mixins.py -> nautobot/extras/forms/mixins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:                     set_initial=False, enforce_required=False, simple_json_filter=True",
          "79:                 )",
          "80:             else:",
          "82:             self.custom_fields.append(field_name)",
          "",
          "[Removed Lines]",
          "81:                 self.fields[field_name] = cf.to_form_field(set_initial=False, enforce_required=False)",
          "",
          "[Added Lines]",
          "81:                 self.fields[field_name] = cf.to_filter_form_field(set_initial=False, enforce_required=False)",
          "",
          "---------------"
        ],
        "nautobot/extras/models/customfields.py||nautobot/extras/models/customfields.py": [
          "File: nautobot/extras/models/customfields.py -> nautobot/extras/models/customfields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: from django.utils.safestring import mark_safe",
          "16: from nautobot.core.forms import (",
          "17:     CSVChoiceField,",
          "18:     CSVMultipleChoiceField,",
          "19:     DatePicker,",
          "20:     JSONField,",
          "21:     LaxURLField,",
          "22:     NullableDateField,",
          "23:     StaticSelect2,",
          "24:     StaticSelect2Multiple,",
          "26: )",
          "27: from nautobot.core.models import BaseManager, BaseModel",
          "28: from nautobot.core.models.fields import AutoSlugField, slugify_dashes_to_underscores",
          "",
          "[Removed Lines]",
          "25:     add_blank_choice,",
          "",
          "[Added Lines]",
          "17:     add_blank_choice,",
          "23:     MultiValueCharInput,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:             choices = [(cfc.value, cfc.value) for cfc in self.custom_field_choices.all()]",
          "527:             default_choice = self.custom_field_choices.filter(value=self.default).first()",
          "532:             # Set the initial value to the first available choice (if any)",
          "536:             if self.type == CustomFieldTypeChoices.TYPE_SELECT:",
          "537:                 field_class = CSVChoiceField if for_csv_import else forms.ChoiceField",
          "538:                 field = field_class(",
          "539:                     choices=choices,",
          "",
          "[Removed Lines]",
          "529:             if not required or default_choice is None:",
          "530:                 choices = add_blank_choice(choices)",
          "533:             if set_initial and default_choice:",
          "534:                 initial = default_choice.value",
          "",
          "[Added Lines]",
          "532:                 if not required or default_choice is None:",
          "533:                     choices = add_blank_choice(choices)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "558:         return field",
          "560:     def validate(self, value):",
          "561:         \"\"\"",
          "562:         Validate a value according to the field's type validation rules.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:     def to_filter_form_field(self, lookup_expr=\"exact\", *args, **kwargs):",
          "558:         \"\"\"Return a filter form field suitable for filtering a CustomField's value for an object.\"\"\"",
          "559:         form_field = self.to_form_field(*args, **kwargs)",
          "560:         # We would handle type selection differently because:",
          "561:         # 1. We'd need to use StaticSelect2Multiple for lookup_type 'exact' because self.type `select` uses StaticSelect2 by default.",
          "562:         # 2. Remove the blank choice since StaticSelect2Multiple is always blank and interprets the blank choice as an extra option.",
          "563:         # 3. If lookup_type is not the same as exact, use MultiValueCharInput",
          "564:         if self.type == CustomFieldTypeChoices.TYPE_SELECT:",
          "565:             if lookup_expr in [\"exact\", \"contains\"]:",
          "566:                 choices = form_field.choices[1:]",
          "567:                 form_field.widget = StaticSelect2Multiple(choices=choices)",
          "568:             else:",
          "569:                 form_field.widget = MultiValueCharInput()",
          "570:         return form_field",
          "",
          "---------------"
        ],
        "nautobot/extras/tests/test_customfields.py||nautobot/extras/tests/test_customfields.py": [
          "File: nautobot/extras/tests/test_customfields.py -> nautobot/extras/tests/test_customfields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from django.contrib.contenttypes.models import ContentType",
          "5: from django.core.exceptions import ValidationError",
          "6: from django.db.models import ProtectedError",
          "7: from django.urls import reverse",
          "8: from rest_framework import status",
          "10: from nautobot.core.models.fields import slugify_dashes_to_underscores",
          "11: from nautobot.core.tables import CustomFieldColumn",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from django.forms import ChoiceField, IntegerField, NumberInput",
          "10: from nautobot.core.forms.widgets import MultiValueCharInput, StaticSelect2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: from nautobot.core.testing.models import ModelTestCases",
          "14: from nautobot.core.testing.utils import post_data",
          "15: from nautobot.dcim.filters import LocationFilterSet",
          "16: from nautobot.dcim.models import Device, Location, LocationType, Rack",
          "17: from nautobot.dcim.tables import LocationTable",
          "18: from nautobot.extras.choices import CustomFieldTypeChoices, CustomFieldFilterLogicChoices",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: from nautobot.dcim.forms import RackFilterForm",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:             # Delete the custom field",
          "342:             cf.delete()",
          "345: class CustomFieldManagerTest(TestCase):",
          "346:     def setUp(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:     def test_to_filter_field(self):",
          "348:         with self.subTest(\"Assert CustomField Select Type renders the correct filter form field and widget\"):",
          "349:             # Assert a Select Choice Field",
          "350:             ct = ContentType.objects.get_for_model(Device)",
          "351:             custom_field_select = CustomField(",
          "352:                 type=CustomFieldTypeChoices.TYPE_SELECT,",
          "353:                 label=\"Select Field\",",
          "354:             )",
          "355:             custom_field_select.save()",
          "356:             custom_field_select.content_types.set([ct])",
          "357:             CustomFieldChoice.objects.create(custom_field=custom_field_select, value=\"Foo\")",
          "358:             CustomFieldChoice.objects.create(custom_field=custom_field_select, value=\"Bar\")",
          "359:             CustomFieldChoice.objects.create(custom_field=custom_field_select, value=\"Baz\")",
          "360:             filter_field = custom_field_select.to_filter_form_field()",
          "361:             self.assertIsInstance(filter_field, ChoiceField)",
          "362:             self.assertIsInstance(filter_field.widget, StaticSelect2)",
          "363:             self.assertEqual(filter_field.widget.choices, [(\"Bar\", \"Bar\"), (\"Baz\", \"Baz\"), (\"Foo\", \"Foo\")])",
          "364:             # Assert Choice Custom Field with lookup-expr other than exact returns a",
          "365:             filter_field_with_lookup_expr = custom_field_select.to_filter_form_field(lookup_expr=\"icontains\")",
          "366:             self.assertIsInstance(filter_field_with_lookup_expr, ChoiceField)",
          "367:             self.assertIsInstance(filter_field_with_lookup_expr.widget, MultiValueCharInput)",
          "369:         with self.subTest(\"Assert CustomField Integer Type renders the correct filter form field and widget\"):",
          "370:             custom_field_integer = CustomField(",
          "371:                 type=CustomFieldTypeChoices.TYPE_INTEGER,",
          "372:                 label=\"integer_field\",",
          "373:             )",
          "374:             custom_field_integer.save()",
          "375:             custom_field_integer.content_types.set([ct])",
          "376:             filter_field = custom_field_integer.to_filter_form_field()",
          "377:             self.assertIsInstance(filter_field, IntegerField)",
          "378:             self.assertIsInstance(filter_field.widget, NumberInput)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1664:     def test_filter_select(self):",
          "1665:         self.assertQuerysetEqual(",
          "1668:         )",
          "1669:         self.assertQuerysetEqual(",
          "1670:             self.filterset({\"cf_cf8__n\": [\"Foo\"]}, self.queryset).qs,",
          "",
          "[Removed Lines]",
          "1666:             self.filterset({\"cf_cf8\": \"Foo\"}, self.queryset).qs,",
          "1667:             self.queryset.filter(_custom_field_data__cf8=\"Foo\"),",
          "",
          "[Added Lines]",
          "1702:             self.filterset({\"cf_cf8\": [\"Foo\", \"AR\"]}, self.queryset).qs,",
          "1703:             self.queryset.filter(_custom_field_data__cf8__in=[\"Foo\", \"AR\"]),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1736:             self.queryset.filter(_custom_field_data__cf9__contains=\"Bar\"),",
          "1737:         )",
          "1750: class CustomFieldChoiceTest(ModelTestCases.BaseModelTestCase):",
          "1751:     model = CustomFieldChoice",
          "",
          "[Removed Lines]",
          "1739:     def test_filter_null_values(self):",
          "1740:         self.assertQuerysetEqual(",
          "1741:             self.filterset({\"cf_cf8\": \"null\"}, self.queryset).qs,",
          "1742:             self.queryset.filter(_custom_field_data__cf8__isnull=True),",
          "1743:         )",
          "1744:         self.assertQuerysetEqual(",
          "1745:             self.filterset({\"cf_cf9\": \"null\"}, self.queryset).qs,",
          "1746:             self.queryset.filter(_custom_field_data__cf9__isnull=True),",
          "1747:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2025:             rendered_value = bound_row.get_cell(internal_col_name)",
          "2026:             self.assertEqual(rendered_value, col_expected_value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055: class CustomFieldFilterFormTest(TestCase):",
          "2056:     def test_custom_filter_form(self):",
          "2057:         \"\"\"Assert CustomField renders the appropriate filter form field\"\"\"",
          "2058:         rack_ct = ContentType.objects.get_for_model(Rack)",
          "2059:         ct_field = CustomField.objects.create(type=CustomFieldTypeChoices.TYPE_SELECT, label=\"Select Field\")",
          "2060:         ct_field.content_types.set([rack_ct])",
          "2061:         CustomFieldChoice.objects.create(custom_field=ct_field, value=\"Foo\")",
          "2062:         CustomFieldChoice.objects.create(custom_field=ct_field, value=\"Bar\")",
          "2063:         CustomFieldChoice.objects.create(custom_field=ct_field, value=\"Baz\")",
          "2064:         filterform = RackFilterForm()",
          "2065:         self.assertIsInstance(filterform[\"cf_select_field\"].field, ChoiceField)",
          "2066:         self.assertIsInstance(filterform[\"cf_select_field\"].field.widget, StaticSelect2)",
          "",
          "---------------"
        ],
        "nautobot/project-static/js/forms.js||nautobot/project-static/js/forms.js": [
          "File: nautobot/project-static/js/forms.js -> nautobot/project-static/js/forms.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         q_field_phantom.val(q_field.val())",
          "612:         dynamic_form.append(q_field_phantom);",
          "617:         location.replace(\"?\" + search_query)",
          "618:     })",
          "",
          "[Removed Lines]",
          "614:         let search_query = $(\"#dynamic-filter-form, #default-filter form\").serialize()",
          "616:         search_query = \"&\" + search_query.replace(/([^&]+=[^&]+&)(?=.*\\1)/g, \"\")",
          "",
          "[Added Lines]",
          "615:         let dynamic_filter_form_query = $(\"#dynamic-filter-form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1].length)",
          "616:         let default_filter_form_query = $(\"#default-filter form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1].length)",
          "618:         let search_query = [...new Set([...default_filter_form_query, ...dynamic_filter_form_query])].join(\"&\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b025d8e1d0a2e9b317cc149dd8cd050f66d8ed09",
      "candidate_info": {
        "commit_hash": "b025d8e1d0a2e9b317cc149dd8cd050f66d8ed09",
        "repo": "nautobot/nautobot",
        "commit_url": "https://github.com/nautobot/nautobot/commit/b025d8e1d0a2e9b317cc149dd8cd050f66d8ed09",
        "files": [
          "changes/2784.added",
          "changes/2784.housekeeping",
          "nautobot/circuits/tests/test_views.py",
          "nautobot/core/templates/inc/javascript.html",
          "nautobot/core/templates/inc/nav_menu.html",
          "nautobot/core/testing/mixins.py",
          "nautobot/core/testing/views.py",
          "nautobot/core/tests/test_paginator.py",
          "nautobot/core/tests/test_views.py",
          "nautobot/dcim/tests/test_views.py",
          "nautobot/extras/tests/test_customfields.py",
          "nautobot/extras/tests/test_plugins.py",
          "nautobot/extras/tests/test_views.py",
          "nautobot/ipam/tests/test_api.py",
          "nautobot/ipam/tests/test_views.py",
          "nautobot/project-static/js/nav_menu.js",
          "nautobot/users/tests/test_views.py",
          "nautobot/virtualization/tests/test_views.py"
        ],
        "message": "Improve view test failure output (#6366)\n\n* Extract nav menu JS to a separate file\n\n* Add and adopt assertBodyContains test helper function\n\n* Have assertHttpStatus also use extract_page_body\n\n---------\n\nCo-authored-by: Timizuo <94907097+timizuoebideri1@users.noreply.github.com>",
        "before_after_code_files": [
          "changes/2784.added||changes/2784.added",
          "changes/2784.housekeeping||changes/2784.housekeeping",
          "nautobot/circuits/tests/test_views.py||nautobot/circuits/tests/test_views.py",
          "nautobot/core/templates/inc/javascript.html||nautobot/core/templates/inc/javascript.html",
          "nautobot/core/templates/inc/nav_menu.html||nautobot/core/templates/inc/nav_menu.html",
          "nautobot/core/testing/mixins.py||nautobot/core/testing/mixins.py",
          "nautobot/core/testing/views.py||nautobot/core/testing/views.py",
          "nautobot/core/tests/test_paginator.py||nautobot/core/tests/test_paginator.py",
          "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py",
          "nautobot/dcim/tests/test_views.py||nautobot/dcim/tests/test_views.py",
          "nautobot/extras/tests/test_customfields.py||nautobot/extras/tests/test_customfields.py",
          "nautobot/extras/tests/test_plugins.py||nautobot/extras/tests/test_plugins.py",
          "nautobot/extras/tests/test_views.py||nautobot/extras/tests/test_views.py",
          "nautobot/ipam/tests/test_api.py||nautobot/ipam/tests/test_api.py",
          "nautobot/ipam/tests/test_views.py||nautobot/ipam/tests/test_views.py",
          "nautobot/project-static/js/nav_menu.js||nautobot/project-static/js/nav_menu.js",
          "nautobot/users/tests/test_views.py||nautobot/users/tests/test_views.py",
          "nautobot/virtualization/tests/test_views.py||nautobot/virtualization/tests/test_views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py"
          ],
          "candidate": [
            "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py"
          ]
        }
      },
      "candidate_diff": {
        "changes/2784.added||changes/2784.added": [
          "File: changes/2784.added -> changes/2784.added",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Added `assertBodyContains()` test helper API to `NautobotTestCaseMixin`.",
          "",
          "---------------"
        ],
        "changes/2784.housekeeping||changes/2784.housekeeping": [
          "File: changes/2784.housekeeping -> changes/2784.housekeeping",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Added usage of `extract_page_body()` to many view-related test cases in order to make their failure output more readable.",
          "2: Modified many view-related test cases to use new `assertBodyContains()` test helper method for brevity.",
          "",
          "---------------"
        ],
        "nautobot/circuits/tests/test_views.py||nautobot/circuits/tests/test_views.py": [
          "File: nautobot/circuits/tests/test_views.py -> nautobot/circuits/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     Provider,",
          "11:     ProviderNetwork,",
          "12: )",
          "14: from nautobot.extras.models import Status, Tag",
          "",
          "[Removed Lines]",
          "13: from nautobot.core.testing import post_data, TestCase as NautobotTestCase, ViewTestCases",
          "",
          "[Added Lines]",
          "13: from nautobot.core.testing import post_data, TestCase as NautobotTestCase, utils, ViewTestCases",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:         # Visit the termination detail page and assert responses:",
          "178:         response = self.client.get(reverse(\"circuits:circuittermination\", kwargs={\"pk\": termination.pk}))",
          "183:         # Visit the circuit object detail page and check there is no connect button present:",
          "184:         response = self.client.get(reverse(\"circuits:circuit\", kwargs={\"pk\": circuit.pk}))",
          "188: class CircuitSwapTerminationsTestCase(NautobotTestCase):",
          "",
          "[Removed Lines]",
          "179:         self.assertEqual(200, response.status_code)",
          "180:         self.assertIn(\"Test Provider Network\", str(response.content))",
          "181:         self.assertNotIn(\"</span> Connect\", str(response.content))",
          "185:         self.assertNotIn(\"</span> Connect\", str(response.content))",
          "",
          "[Added Lines]",
          "179:         self.assertBodyContains(response, \"Test Provider Network\")",
          "180:         self.assertNotIn(\"</span> Connect\", utils.extract_page_body(response.content.decode(response.charset)))",
          "184:         self.assertNotIn(\"</span> Connect\", utils.extract_page_body(response.content.decode(response.charset)))",
          "",
          "---------------"
        ],
        "nautobot/core/templates/inc/javascript.html||nautobot/core/templates/inc/javascript.html": [
          "File: nautobot/core/templates/inc/javascript.html -> nautobot/core/templates/inc/javascript.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         onerror=\"window.location='{% url 'media_failure' %}?filename=highlight.js-11.9.0/highlight.min.js'\"></script>",
          "19: <script src=\"{% versioned_static 'js/forms.js' %}\"",
          "20:         onerror=\"window.location='{% url 'media_failure' %}?filename=js/forms.js'\"></script>",
          "21: <script src=\"{% versioned_static 'js/theme.js' %}\"",
          "22:         onerror=\"window.location='{% url 'media_failure' %}?filename=js/theme.js'\"></script>",
          "23: <script src=\"{% versioned_static 'js/table_sorting_indicator.js' %}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: <script src=\"{% versioned_static 'js/nav_menu.js' %}\"",
          "22:         onerror=\"window.location='{% url 'media_failure' %}?filename=js/nav_menu.js'\"></script>",
          "",
          "---------------"
        ],
        "nautobot/core/templates/inc/nav_menu.html||nautobot/core/templates/inc/nav_menu.html": [
          "File: nautobot/core/templates/inc/nav_menu.html -> nautobot/core/templates/inc/nav_menu.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: <button type=\"button\" class=\"btn btn-xs btn-warning navbar-toggler\" aria-label=\"Collapse navbar\">",
          "118:     <span class=\"mdi mdi-chevron-up mdi-rotate-270 navbar-toggler-arrow\"></span>",
          "119: </button>",
          "",
          "[Removed Lines]",
          "121: <script>",
          "122:     document.addEventListener('DOMContentLoaded', function() {",
          "123:         const navbar = document.querySelector('.navbar-fixed-left');",
          "124:         const navbarHeader = document.querySelector('.navbar-header');",
          "125:         const mainContent = document.querySelector('#main-content');",
          "126:         const footer = document.querySelector('#footer');",
          "127:         const dropdownToggles = document.querySelectorAll('.navbar-fixed-left .navbar-nav > .dropdown > a[data-toggle=\"collapse\"]');",
          "128:         const dropdowns = document.querySelectorAll('.navbar-fixed-left .navbar-nav .collapse');",
          "129:         const toggler = document.querySelector('.navbar-toggler');",
          "130:         const togglerIcon = toggler.querySelector('.navbar-toggler-arrow');",
          "131:         let lastDropdownId = sessionStorage.getItem('lastOpenedDropdown');",
          "132:         let savedScrollPosition = sessionStorage.getItem('navbarScrollPosition');",
          "133:         let activeLink = sessionStorage.getItem('activeLink');",
          "134:         let expandedByHover = false;",
          "135:         let manuallyToggled = sessionStorage.getItem('manuallyToggled') === 'true';",
          "138:         function resetNavbarState() {",
          "139:             sessionStorage.removeItem('lastOpenedDropdown');",
          "140:             sessionStorage.removeItem('savedScrollPosition');",
          "141:             sessionStorage.removeItem('activeLink');",
          "142:             sessionStorage.removeItem('navbarCollapsed');",
          "143:             expandedByHover = false;",
          "144:         }",
          "146:         toggler.addEventListener('click', function() {",
          "147:             let isNowCollapsed;",
          "148:             if (expandedByHover) {",
          "149:                 expandedByHover = false;",
          "150:                 isNowCollapsed = false;",
          "151:             } else {",
          "152:                 isNowCollapsed = navbar.classList.toggle('collapsed');",
          "153:             }",
          "154:             sessionStorage.setItem('navbarCollapsed', isNowCollapsed ? 'true' : 'false');",
          "156:             sessionStorage.setItem('navbarManuallyToggled', 'true');",
          "158:             sessionStorage.setItem('navbarExpanded', !isNowCollapsed ? 'true' : 'false');",
          "159:             if (isNowCollapsed) {",
          "160:                 togglerIcon.classList.add(\"mdi-rotate-90\");",
          "161:                 togglerIcon.classList.remove(\"mdi-rotate-270\");",
          "162:             } else {",
          "163:                 togglerIcon.classList.remove(\"mdi-rotate-90\");",
          "164:                 togglerIcon.classList.add(\"mdi-rotate-270\");",
          "165:             }",
          "166:             adjustElementsForNavbarState(isNowCollapsed);",
          "167:         });",
          "170:         const navbarCollapsed = sessionStorage.getItem('navbarCollapsed') === 'true';",
          "171:         if (navbarCollapsed) {",
          "172:             navbar.classList.add('collapsed');",
          "173:             togglerIcon.classList.remove(\"mdi-rotate-270\");",
          "174:             togglerIcon.classList.add(\"mdi-rotate-90\");",
          "175:             adjustElementsForNavbarState(true);",
          "176:         }",
          "178:         function adjustElementsForNavbarState(isCollapsed) {",
          "179:             const marginLeftValue = isCollapsed ? '-240px' : '0px';",
          "180:             mainContent.style.marginLeft = marginLeftValue;",
          "181:             if(footer) footer.style.marginLeft = marginLeftValue;",
          "182:             toggler.style.left = isCollapsed ? '-5px' : '225px';",
          "183:         }",
          "186:         document.addEventListener('mousemove', function(e) {",
          "187:             if (",
          "188:                 e.clientX < 20  // 20px from the left edge",
          "189:                 && (e.clientY < 20 || e.clientY > 50) // not near the toggle button",
          "190:                 && navbar.classList.contains('collapsed')",
          "191:             ) {",
          "192:                 navbar.classList.remove('collapsed');",
          "193:                 toggler.style.left = '225px';",
          "194:                 expandedByHover = true; // Set flag when expanded by hover",
          "195:             } else if (expandedByHover && e.clientX > 240) {",
          "196:                 navbar.classList.add('collapsed');",
          "197:                 toggler.style.left = '-5px';",
          "198:                 expandedByHover = false; // Reset flag after auto-collapse",
          "199:             }",
          "200:         });",
          "202:         function collapseNavbarIfNeeded() {",
          "203:             const windowWidth = window.innerWidth;",
          "204:             const navbarManuallyToggled = sessionStorage.getItem('navbarManuallyToggled') === 'true';",
          "205:             const navbarExpanded = sessionStorage.getItem('navbarExpanded') === 'true';",
          "206:             const isCollapsed = navbar.classList.contains('collapsed');",
          "208:             if (windowWidth < 1007) {",
          "209:                 if (!isCollapsed) {",
          "210:                     navbar.classList.add('collapsed');",
          "211:                     togglerIcon.classList.remove(\"mdi-rotate-270\");",
          "212:                     togglerIcon.classList.add(\"mdi-rotate-90\");",
          "213:                     adjustElementsForNavbarState(true);",
          "214:                     sessionStorage.setItem('navbarCollapsed', 'true');",
          "215:                 }",
          "216:             } else if (windowWidth >= 1007) {",
          "218:                 if (isCollapsed && (navbarManuallyToggled && navbarExpanded)) {",
          "219:                     navbar.classList.remove('collapsed');",
          "220:                     togglerIcon.classList.add(\"mdi-rotate-270\");",
          "221:                     togglerIcon.classList.remove(\"mdi-rotate-90\");",
          "222:                     adjustElementsForNavbarState(false);",
          "223:                     sessionStorage.setItem('navbarCollapsed', 'false');",
          "224:                 }",
          "226:             }",
          "227:         }",
          "230:         function toggleNavbarOnResize() {",
          "231:             collapseNavbarIfNeeded(); // Use the new function to decide whether to collapse",
          "232:         }",
          "234:         let debouncedToggleNavbarOnResize = debounce(toggleNavbarOnResize, 50);",
          "235:         window.addEventListener('resize', debouncedToggleNavbarOnResize);",
          "238:         let navbarItems = document.querySelectorAll('.navbar-fixed-left .navbar-nav > .dropdown > .dropdown-toggle > #dropdown_title');",
          "241:         navbarItems.forEach(function(item) {",
          "243:             if (item.scrollWidth > item.clientWidth) {",
          "245:                 item.setAttribute('title', item.innerText);",
          "248:                 $(item).tooltip();",
          "249:             }",
          "250:         });",
          "253:         const homeLink = document.querySelector('.navbar-fixed-left .navbar-brand');",
          "254:         if (homeLink) {",
          "255:             homeLink.addEventListener('click', function() {",
          "256:                 resetNavbarState();",
          "257:             });",
          "258:         }",
          "261:         function closeAllDropdownsExcept(exceptId) {",
          "262:             dropdowns.forEach(function(collapse) {",
          "263:                 if (collapse.id !== exceptId && collapse.classList.contains('in')) {",
          "264:                     $(collapse).collapse('hide');",
          "265:                 }",
          "266:             });",
          "267:         }",
          "270:         function addLinkClickListeners() {",
          "271:             const dropdownLinks = document.querySelectorAll('.navbar-fixed-left .navbar-nav > .dropdown > .nav-dropdown-menu > li > a');",
          "273:             dropdownLinks.forEach(function(link) {",
          "274:                 link.addEventListener('click', function() {",
          "275:                     sessionStorage.setItem('activeLink', link.getAttribute('href'));",
          "276:                 });",
          "277:             });",
          "278:             collapseNavbarIfNeeded();",
          "279:         }",
          "282:         dropdownToggles.forEach(function(toggle) {",
          "283:             toggle.addEventListener('click', function(event) {",
          "284:                 event.preventDefault();",
          "285:                 const collapseElement = document.getElementById(this.getAttribute('href').substring(1));",
          "287:                 if (!collapseElement.classList.contains('in')) {",
          "288:                     closeAllDropdownsExcept(collapseElement.id);",
          "289:                     $(collapseElement).collapse('show');",
          "290:                     sessionStorage.setItem('lastOpenedDropdown', collapseElement.id);",
          "291:                 } else {",
          "292:                     $(collapseElement).collapse('hide');",
          "293:                     sessionStorage.removeItem('lastOpenedDropdown');",
          "294:                 }",
          "295:             });",
          "296:         });",
          "299:         if (lastDropdownId) {",
          "300:             let lastDropdownMenu = document.getElementById(lastDropdownId);",
          "301:             if (lastDropdownMenu && !lastDropdownMenu.classList.contains('in')) {",
          "302:                 $(lastDropdownMenu).collapse('show');",
          "303:             }",
          "304:         }",
          "307:         if (savedScrollPosition) {",
          "308:             navbar.scrollTop = savedScrollPosition;",
          "309:         }",
          "312:         function adjustNavbarHeaderVisibility() {",
          "314:             if (navbar.classList.contains('collapsed') && mainContent) {",
          "315:                 const mainContentTop = mainContent.getBoundingClientRect().top;",
          "317:                 if (mainContentTop < 0) {",
          "319:                     navbarHeader.style.top = '-60px'; // height of navbar header",
          "320:                 } else {",
          "322:                     navbarHeader.style.top = '0';",
          "323:                 }",
          "324:             }",
          "325:         }",
          "328:         window.addEventListener('scroll', adjustNavbarHeaderVisibility);",
          "331:         adjustNavbarHeaderVisibility();",
          "334:         function debounce(func, wait, immediate) {",
          "335:             let timeout;",
          "336:             return function() {",
          "337:                 const context = this, args = arguments;",
          "338:                 const later = function() {",
          "339:                     timeout = null;",
          "340:                     if (!immediate) func.apply(context, args);",
          "341:                 };",
          "342:                 const callNow = immediate && !timeout;",
          "343:                 clearTimeout(timeout);",
          "344:                 timeout = setTimeout(later, wait);",
          "345:                 if (callNow) func.apply(context, args);",
          "346:             };",
          "347:         }",
          "350:         navbar.addEventListener('scroll', debounce(function() {",
          "351:             sessionStorage.setItem('navbarScrollPosition', navbar.scrollTop);",
          "352:         }, 250));",
          "355:         addLinkClickListeners();",
          "358:         if (activeLink) {",
          "359:             let previouslyClickedLink = document.querySelector('.navbar-fixed-left .navbar-nav > .dropdown > .nav-dropdown-menu > li > a[href=\"' + activeLink + '\"]');",
          "360:             let currentLocation = window.location.pathname + window.location.search;",
          "362:             if (previouslyClickedLink && currentLocation.includes(previouslyClickedLink.getAttribute('href'))) {",
          "363:                 previouslyClickedLink.parentElement.classList.add('active');",
          "364:             }",
          "365:             else {",
          "366:                 sessionStorage.removeItem('activeLink');",
          "367:             }",
          "368:         }",
          "369:     });",
          "370: </script>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nautobot/core/testing/mixins.py||nautobot/core/testing/mixins.py": [
          "File: nautobot/core/testing/mixins.py -> nautobot/core/testing/mixins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from django.db import connections, DEFAULT_DB_ALIAS",
          "10: from django.db.models import JSONField, ManyToManyField, ManyToManyRel",
          "11: from django.forms.models import model_to_dict",
          "12: from django.test.utils import CaptureQueriesContext",
          "13: from netaddr import IPNetwork",
          "14: from rest_framework.test import APIClient, APIRequestFactory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from django.test.testcases import assert_and_parse_html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:                 # REST API response; pass the response data through directly",
          "173:                 err_message += f\"\\n{response.data}\"",
          "174:             # Attempt to extract form validation errors from the response HTML",
          "177:             if msg:",
          "178:                 err_message = f\"{msg}\\n{err_message}\"",
          "179:         self.assertIn(response.status_code, expected_status, err_message)",
          "",
          "[Removed Lines]",
          "175:             form_errors = utils.extract_form_failures(response.content.decode(response.charset))",
          "176:             err_message += \"\\n\" + str(form_errors or response.content.decode(response.charset) or \"No data\")",
          "",
          "[Added Lines]",
          "176:             elif form_errors := utils.extract_form_failures(response.content.decode(response.charset)):",
          "177:                 err_message += f\"\\n{form_errors}\"",
          "178:             elif body_content := utils.extract_page_body(response.content.decode(response.charset)):",
          "179:                 err_message += f\"\\n{body_content}\"",
          "180:             else:",
          "181:                 err_message += \"No data\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:         return None",
          "280:     #",
          "281:     # Convenience methods",
          "282:     #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:     def assertBodyContains(self, response, text, count=None, status_code=200, msg_prefix=\"\", html=False):",
          "286:         \"\"\"",
          "287:         Like Django's `assertContains`, but uses `extract_page_body` utility function to scope the check more narrowly.",
          "289:         Args:",
          "290:             response (HttpResponse): The response to inspect",
          "291:             text (str): Plaintext or HTML to check for in the response body",
          "292:             count (int, optional): Number of times the `text` should occur, or None if we don't care as long as",
          "293:                 it's present at all.",
          "294:             status_code (int): HTTP status code expected",
          "295:             html (bool): If True, handle `text` as HTML, ignoring whitespace etc, as in Django's `assertHTMLEqual()`.",
          "296:         \"\"\"",
          "297:         # The below is copied from SimpleTestCase._assert_contains and SimpleTestCase.assertContains",
          "298:         # If the response supports deferred rendering and hasn't been rendered",
          "299:         # yet, then ensure that it does get rendered before proceeding further.",
          "300:         if hasattr(response, \"render\") and callable(response.render) and not response.is_rendered:",
          "301:             response.render()",
          "303:         if msg_prefix:",
          "304:             msg_prefix += \": \"",
          "306:         self.assertHttpStatus(  # Nautobot-specific, original uses simple assertEqual()",
          "307:             response, status_code, msg_prefix",
          "308:         )",
          "310:         if response.streaming:",
          "311:             content = b\"\".join(response.streaming_content)",
          "312:         else:",
          "313:             content = response.content",
          "315:         if not isinstance(text, bytes) or html:",
          "316:             text = str(text)",
          "317:             content = content.decode(response.charset)",
          "318:             content = utils.extract_page_body(content)  # Nautobot-specific",
          "319:             text_repr = f\"'{text}'\"",
          "320:         else:",
          "321:             text_repr = repr(text)",
          "323:         if html:",
          "324:             content = assert_and_parse_html(self, content, None, \"Response's content is not valid HTML:\")",
          "325:             text = assert_and_parse_html(self, text, None, \"Second argument is not valid HTML:\")",
          "326:         real_count = content.count(text)",
          "328:         if count is not None:",
          "329:             self.assertEqual(",
          "330:                 real_count,",
          "331:                 count,",
          "332:                 msg_prefix + f\"Found {real_count} instances of {text_repr} in response (expected {count}):\\n{content}\",",
          "333:             )",
          "334:         else:",
          "335:             self.assertTrue(real_count != 0, msg_prefix + f\"Couldn't find {text_repr} in response:\\n{content}\")",
          "",
          "---------------"
        ],
        "nautobot/core/testing/views.py||nautobot/core/testing/views.py": [
          "File: nautobot/core/testing/views.py -> nautobot/core/testing/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:             self.client.logout()",
          "145:             response = self.client.get(self._get_queryset().first().get_absolute_url())",
          "146:             self.assertHttpStatus(response, 200)",
          "147:             response_body = response.content.decode(response.charset)",
          "148:             self.assertIn(",
          "149:                 \"/login/?next=\" + self._get_queryset().first().get_absolute_url(), response_body, msg=response_body",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:             # TODO: all this is doing is checking that a login link appears somewhere on the page (i.e. in the nav).",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:             # The \"Change Log\" tab should appear in the response since we have all exempt permissions",
          "153:             if issubclass(self.model, extras_models.ChangeLoggedModel):",
          "157:         @override_settings(EXEMPT_VIEW_PERMISSIONS=[])",
          "158:         def test_get_object_without_permission(self):",
          "",
          "[Removed Lines]",
          "154:                 response_body = utils.extract_page_body(response.content.decode(response.charset))",
          "155:                 self.assertIn(\"Change Log\", response_body, msg=response_body)",
          "",
          "[Added Lines]",
          "155:                 self.assertBodyContains(response, \"Change Log\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:             # Try GET with model-level permission",
          "179:             response = self.client.get(instance.get_absolute_url())",
          "187:             # If any Relationships are defined, they should appear in the response",
          "188:             if self.relationships is not None:",
          "189:                 for relationship in self.relationships:  # false positive pylint: disable=not-an-iterable",
          "190:                     content_type = ContentType.objects.get_for_model(instance)",
          "191:                     if content_type == relationship.source_type:",
          "193:                             escape(relationship.get_label(extras_choices.RelationshipSideChoices.SIDE_SOURCE)),",
          "196:                         )",
          "197:                     if content_type == relationship.destination_type:",
          "199:                             escape(relationship.get_label(extras_choices.RelationshipSideChoices.SIDE_DESTINATION)),",
          "202:                         )",
          "204:             # If any Custom Fields are defined, they should appear in the response",
          "205:             if self.custom_fields is not None:",
          "206:                 for custom_field in self.custom_fields:  # false positive pylint: disable=not-an-iterable",
          "208:                     if custom_field.type == extras_choices.CustomFieldTypeChoices.TYPE_MULTISELECT:",
          "209:                         for value in instance.cf.get(custom_field.key):",
          "211:                     else:",
          "216:             return response  # for consumption by child test cases if desired",
          "",
          "[Removed Lines]",
          "180:             self.assertHttpStatus(response, 200)",
          "182:             response_body = utils.extract_page_body(response.content.decode(response.charset))",
          "184:             # The object's display name or string representation should appear in the response",
          "185:             self.assertIn(escape(getattr(instance, \"display\", str(instance))), response_body, msg=response_body)",
          "192:                         self.assertIn(",
          "194:                             response_body,",
          "195:                             msg=response_body,",
          "198:                         self.assertIn(",
          "200:                             response_body,",
          "201:                             msg=response_body,",
          "207:                     self.assertIn(escape(str(custom_field)), response_body, msg=response_body)",
          "210:                             self.assertIn(escape(str(value)), response_body, msg=response_body)",
          "212:                         self.assertIn(",
          "213:                             escape(str(instance.cf.get(custom_field.key) or \"\")), response_body, msg=response_body",
          "214:                         )",
          "",
          "[Added Lines]",
          "180:             # The object's display name or string representation should appear in the response body",
          "181:             self.assertBodyContains(response, escape(getattr(instance, \"display\", str(instance))))",
          "188:                         self.assertBodyContains(",
          "189:                             response,",
          "193:                         self.assertBodyContains(",
          "194:                             response,",
          "201:                     self.assertBodyContains(response, escape(str(custom_field)))",
          "204:                             self.assertBodyContains(response, escape(str(value)))",
          "206:                         self.assertBodyContains(response, escape(str(instance.cf.get(custom_field.key) or \"\")))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:             obj_perm.object_types.add(ContentType.objects.get_for_model(self.model))",
          "253:             response = self.client.get(instance.get_absolute_url())",
          "260:     class GetObjectChangelogViewTestCase(ModelViewTestCase):",
          "261:         \"\"\"",
          "",
          "[Removed Lines]",
          "254:             response_body = utils.extract_page_body(response.content.decode(response.charset))",
          "255:             advanced_tab_href = f\"{instance.get_absolute_url()}#advanced\"",
          "257:             self.assertIn(advanced_tab_href, response_body)",
          "258:             self.assertIn(\"Advanced\", response_body)",
          "",
          "[Added Lines]",
          "246:             self.assertBodyContains(response, f\"{instance.get_absolute_url()}#advanced\")",
          "247:             self.assertBodyContains(response, \"Advanced\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:             url = self._get_url(\"changelog\", obj)",
          "269:             response = self.client.get(url)",
          "270:             self.assertHttpStatus(response, 200)",
          "272:             if getattr(obj, \"is_contact_associable_model\", False):",
          "274:                     f'<a href=\"{obj.get_absolute_url()}#contacts\" onclick=\"switch_tab(this.href)\" aria-controls=\"contacts\" role=\"tab\" data-toggle=\"tab\">Contacts</a>',",
          "276:                 )",
          "278:     class GetObjectNotesViewTestCase(ModelViewTestCase):",
          "279:         \"\"\"",
          "",
          "[Removed Lines]",
          "271:             response_data = response.content.decode(response.charset)",
          "273:                 self.assertInHTML(",
          "275:                     response_data,",
          "",
          "[Added Lines]",
          "261:             # Test for https://github.com/nautobot/nautobot/issues/5214",
          "263:                 self.assertBodyContains(",
          "264:                     response,",
          "266:                     html=True,",
          "268:             else:",
          "269:                 self.assertNotContains(response, f\"{obj.get_absolute_url()}#contacts\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "287:                 url = self._get_url(\"notes\", obj)",
          "288:                 response = self.client.get(url)",
          "289:                 self.assertHttpStatus(response, 200)",
          "291:                 if getattr(obj, \"is_contact_associable_model\", False):",
          "293:                         f'<a href=\"{obj.get_absolute_url()}#contacts\" onclick=\"switch_tab(this.href)\" aria-controls=\"contacts\" role=\"tab\" data-toggle=\"tab\">Contacts</a>',",
          "295:                     )",
          "297:     class CreateObjectViewTestCase(ModelViewTestCase):",
          "298:         \"\"\"",
          "",
          "[Removed Lines]",
          "290:                 response_data = response.content.decode(response.charset)",
          "292:                     self.assertInHTML(",
          "294:                         response_data,",
          "",
          "[Added Lines]",
          "284:                 # Test for https://github.com/nautobot/nautobot/issues/5214",
          "286:                     self.assertBodyContains(",
          "287:                         response,",
          "289:                         html=True,",
          "291:                 else:",
          "292:                     self.assertNotContains(response, f\"{obj.get_absolute_url()}#contacts\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "366:                     detail_url = instance.get_absolute_url()",
          "367:                     validate(detail_url)",
          "368:                     response = self.client.get(detail_url)",
          "374:                 except (AttributeError, ValidationError):",
          "375:                     # Instance does not have a valid detail view, do nothing here.",
          "376:                     pass",
          "",
          "[Removed Lines]",
          "369:                     response_body = utils.extract_page_body(response.content.decode(response.charset))",
          "370:                     advanced_tab_href = f\"{detail_url}#advanced\"",
          "371:                     self.assertIn(advanced_tab_href, response_body)",
          "372:                     self.assertIn(\"<td>Created By</td>\", response_body)",
          "373:                     self.assertIn(\"<td>nautobotuser</td>\", response_body)",
          "",
          "[Added Lines]",
          "366:                     self.assertBodyContains(response, f\"{detail_url}#advanced\")",
          "367:                     self.assertBodyContains(response, \"<td>Created By</td>\", html=True)",
          "368:                     self.assertBodyContains(response, f\"<td>{self.user.username}</td>\", html=True)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "522:                     detail_url = instance.get_absolute_url()",
          "523:                     validate(detail_url)",
          "524:                     response = self.client.get(detail_url)",
          "530:                 except (AttributeError, ValidationError):",
          "531:                     # Instance does not have a valid detail view, do nothing here.",
          "532:                     pass",
          "",
          "[Removed Lines]",
          "525:                     response_body = utils.extract_page_body(response.content.decode(response.charset))",
          "526:                     advanced_tab_href = f\"{detail_url}#advanced\"",
          "527:                     self.assertIn(advanced_tab_href, response_body)",
          "528:                     self.assertIn(\"<td>Last Updated By</td>\", response_body)",
          "529:                     self.assertIn(\"<td>nautobotuser</td>\", response_body)",
          "",
          "[Added Lines]",
          "520:                     self.assertBodyContains(response, f\"{detail_url}#advanced\")",
          "521:                     self.assertBodyContains(response, \"<td>Last Updated By</td>\", html=True)",
          "522:                     self.assertBodyContains(response, f\"<td>{self.user.username}</td>\", html=True)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "764:             with self.subTest(\"Assert indentation is present\"):",
          "765:                 response = self.client.get(f\"{self._get_url('list')}\")",
          "769:             with self.subTest(\"Assert indentation is removed on filter\"):",
          "770:                 queryset = (",
          "",
          "[Removed Lines]",
          "766:                 response_body = response.content.decode(response.charset)",
          "767:                 self.assertInHTML('<i class=\"mdi mdi-circle-small\"></i>', response_body)",
          "",
          "[Added Lines]",
          "759:                 self.assertBodyContains(response, '<i class=\"mdi mdi-circle-small\"></i>', html=True)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "786:             self.client.logout()",
          "787:             response = self.client.get(self._get_url(\"list\"))",
          "788:             self.assertHttpStatus(response, 200)",
          "789:             response_body = response.content.decode(response.charset)",
          "790:             self.assertIn(\"/login/?next=\" + self._get_url(\"list\"), response_body, msg=response_body)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:             # TODO: all this is doing is checking that a login link appears somewhere on the page (i.e. in the nav).",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "799:             response = self.client.get(f\"{self._get_url('list')}?id={instance1.pk}\")",
          "800:             self.assertHttpStatus(response, 200)",
          "801:             content = utils.extract_page_body(response.content.decode(response.charset))",
          "803:             if hasattr(self.model, \"name\"):",
          "804:                 self.assertRegex(content, r\">\\s*\" + re.escape(escape(instance1.name)) + r\"\\s*<\", msg=content)",
          "805:                 self.assertNotRegex(content, r\">\\s*\" + re.escape(escape(instance2.name)) + r\"\\s*<\", msg=content)",
          "",
          "[Removed Lines]",
          "802:             # TODO: it'd make test failures more readable if we strip the page headers/footers from the content",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "810:         def test_list_objects_unknown_filter_strict_filtering(self):",
          "811:             \"\"\"Verify that with STRICT_FILTERING, an unknown filter results in an error message and no matches.\"\"\"",
          "812:             response = self.client.get(f\"{self._get_url('list')}?ice_cream_flavor=chocolate\")",
          "817:             # There should be no table rows displayed except for the empty results row",
          "820:         @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"], STRICT_FILTERING=False)",
          "821:         def test_list_objects_unknown_filter_no_strict_filtering(self):",
          "",
          "[Removed Lines]",
          "813:             self.assertHttpStatus(response, 200)",
          "814:             content = utils.extract_page_body(response.content.decode(response.charset))",
          "815:             # TODO: it'd make test failures more readable if we strip the page headers/footers from the content",
          "816:             self.assertIn(\"Unknown filter field\", content, msg=content)",
          "818:             self.assertIn(\"None\", content, msg=content)",
          "",
          "[Added Lines]",
          "805:             self.assertBodyContains(response, \"Unknown filter field\")",
          "807:             self.assertBodyContains(response, \"None\")",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "842:             )",
          "843:             self.assertHttpStatus(response, 200)",
          "844:             content = utils.extract_page_body(response.content.decode(response.charset))",
          "846:             self.assertNotIn(\"Unknown filter field\", content, msg=content)",
          "847:             self.assertIn(\"None\", content, msg=content)",
          "848:             if hasattr(self.model, \"name\"):",
          "",
          "[Removed Lines]",
          "845:             # TODO: it'd make test failures more readable if we strip the page headers/footers from the content",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "871:             # Try GET with model-level permission",
          "872:             response = self.client.get(self._get_url(\"list\"))",
          "873:             self.assertHttpStatus(response, 200)",
          "876:             list_url = self.get_list_url()",
          "877:             title = self.get_title()",
          "879:             # Check if breadcrumb is rendered correctly",
          "885:             # Check if import button is absent due to user permissions",
          "886:             self.assertNotIn(",
          "",
          "[Removed Lines]",
          "874:             response_body = response.content.decode(response.charset)",
          "880:             self.assertIn(",
          "881:                 f'<a href=\"{list_url}\">{title}</a>',",
          "882:                 response_body,",
          "883:             )",
          "",
          "[Added Lines]",
          "862:             response_body = utils.extract_page_body(response.content.decode(response.charset))",
          "868:             self.assertBodyContains(response, f'<a href=\"{list_url}\">{title}</a>', html=True)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "909:             response = self.client.get(self._get_url(\"list\"))",
          "910:             self.assertHttpStatus(response, 200)",
          "911:             content = utils.extract_page_body(response.content.decode(response.charset))",
          "913:             if hasattr(self.model, \"name\"):",
          "914:                 self.assertRegex(content, r\">\\s*\" + re.escape(escape(instance1.name)) + r\"\\s*<\", msg=content)",
          "915:                 self.assertNotRegex(content, r\">\\s*\" + re.escape(escape(instance2.name)) + r\"\\s*<\", msg=content)",
          "",
          "[Removed Lines]",
          "912:             # TODO: it'd make test failures more readable if we strip the page headers/footers from the content",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "954:             # Try GET with model-level permission",
          "955:             response = self.client.get(self._get_url(\"list\"))",
          "959:             # Check app banner is rendered correctly",
          "962:             )",
          "964:     class CreateMultipleObjectsViewTestCase(ModelViewTestCase):",
          "",
          "[Removed Lines]",
          "956:             self.assertHttpStatus(response, 200)",
          "957:             response_body = response.content.decode(response.charset)",
          "960:             self.assertIn(",
          "961:                 f\"<div>You are viewing a table of {self.model._meta.verbose_name_plural}</div>\", response_body",
          "",
          "[Added Lines]",
          "942:             self.assertBodyContains(",
          "943:                 response,",
          "944:                 f\"<div>You are viewing a table of {self.model._meta.verbose_name_plural}</div>\",",
          "945:                 html=True,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1596:                     f\"Renaming {len(objects)} {helpers.bettertitle(verbose_name_plural)} \"",
          "1597:                     f\"on {self.selected_objects_parent_name}\"",
          "1598:                 )",
          "1601:             with self.subTest(\"Assert update successfully\"):",
          "1602:                 data[\"_apply\"] = True  # Form Apply button",
          "",
          "[Removed Lines]",
          "1599:                 self.assertInHTML(message, response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "1583:                 self.assertBodyContains(response, message)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1611:                     data[\"pk\"] = values",
          "1612:                     response = self.client.post(self._get_url(\"bulk_rename\"), data, follow=True)",
          "1613:                     expected_message = f\"No valid {verbose_name_plural} were selected.\"",
          "",
          "[Removed Lines]",
          "1614:                     self.assertIn(expected_message, response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "1598:                     self.assertBodyContains(response, expected_message)",
          "",
          "---------------"
        ],
        "nautobot/core/tests/test_paginator.py||nautobot/core/tests/test_paginator.py": [
          "File: nautobot/core/tests/test_paginator.py -> nautobot/core/tests/test_paginator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from nautobot.circuits import models as circuits_models",
          "10: from nautobot.core import testing",
          "11: from nautobot.core.views import paginator",
          "12: from nautobot.dcim import models as dcim_models",
          "13: from nautobot.extras import models as extras_models",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from nautobot.core.testing.utils import extract_page_body",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:             warning_message = (",
          "76:                 \"Requested &quot;per_page&quot; is too large. No more than 10 items may be displayed at a time.\"",
          "77:             )",
          "79:         with self.subTest(\"query parameter per_page=5 returns 5 rows\"):",
          "80:             response = self.client.get(url, {\"per_page\": 5})",
          "81:             self.assertHttpStatus(response, 200)",
          "",
          "[Removed Lines]",
          "78:             self.assertIn(warning_message, response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "79:             self.assertIn(warning_message, extract_page_body(response.content.decode(response.charset)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:             warning_message = (",
          "98:                 \"Requested &quot;per_page&quot; is too large. No more than 10 items may be displayed at a time.\"",
          "99:             )",
          "102:     @override_settings(MAX_PAGE_SIZE=0)",
          "103:     def test_error_warning_not_shown_when_max_page_size_is_0(self):",
          "",
          "[Removed Lines]",
          "100:             self.assertIn(warning_message, response.content.decode(response.charset).replace(\"\\n\", \"\"))",
          "",
          "[Added Lines]",
          "101:             self.assertIn(warning_message, extract_page_body(response.content.decode(response.charset)))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:             self.assertEqual(response.context[\"paginator\"].per_page, 20)",
          "119:             self.assertEqual(len(response.context[\"table\"].page), 20)",
          "120:             warning_message = \"Requested &quot;per_page&quot; is too large.\"",
          "",
          "[Removed Lines]",
          "121:             self.assertNotIn(warning_message, response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "122:             self.assertNotIn(warning_message, extract_page_body(response.content.decode(response.charset)))",
          "",
          "---------------"
        ],
        "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py": [
          "File: nautobot/core/tests/test_views.py -> nautobot/core/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: from nautobot.core.constants import GLOBAL_SEARCH_EXCLUDE_LIST",
          "15: from nautobot.core.testing import TestCase",
          "16: from nautobot.core.testing.api import APITestCase",
          "17: from nautobot.core.utils.permissions import get_permission_for_model",
          "18: from nautobot.core.views import NautobotMetricsView",
          "19: from nautobot.core.views.mixins import GetReturnURLMixin",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: from nautobot.core.testing.utils import extract_page_body",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:             BANNER_BOTTOM=\"[info](https://nautobot.com)\",",
          "155:         ):",
          "156:             response = self.client.get(url)",
          "161:         )",
          "163:         with override_settings(BANNER_LOGIN=\"_Welcome to Nautobot!_\"):",
          "164:             self.client.logout()",
          "165:             response = self.client.get(reverse(\"login\"))",
          "168:     def test_banners_no_xss(self):",
          "169:         url = reverse(\"home\")",
          "",
          "[Removed Lines]",
          "157:         self.assertInHTML(\"<h1>Hello world</h1>\", response.content.decode(response.charset))",
          "158:         self.assertInHTML(",
          "159:             '<a href=\"https://nautobot.com\" rel=\"noopener noreferrer\">info</a>',",
          "160:             response.content.decode(response.charset),",
          "166:         self.assertInHTML(\"<em>Welcome to Nautobot!</em>\", response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "158:         self.assertBodyContains(response, \"<h1>Hello world</h1>\", html=True)",
          "159:         self.assertBodyContains(",
          "160:             response, '<a href=\"https://nautobot.com\" rel=\"noopener noreferrer\">info</a>', html=True",
          "166:         self.assertBodyContains(response, \"<em>Welcome to Nautobot!</em>\", html=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:         # Assert model search bar present in list UI",
          "197:         response = self.client.get(reverse(\"dcim:location_list\"))",
          "199:             '<input type=\"text\" name=\"q\" class=\"form-control\" required placeholder=\"Search Locations\" id=\"id_q\">',",
          "201:         )",
          "203:         response = self.client.get(reverse(\"dcim:device_list\"))",
          "205:             '<input type=\"text\" name=\"q\" class=\"form-control\" required placeholder=\"Search Devices\" id=\"id_q\">',",
          "207:         )",
          "209:         # Assert global search bar present in UI",
          "211:             '<input type=\"text\" name=\"q\" class=\"form-control\" placeholder=\"Search Nautobot\">',",
          "213:         )",
          "",
          "[Removed Lines]",
          "198:         self.assertInHTML(",
          "200:             response.content.decode(response.charset),",
          "204:         self.assertInHTML(",
          "206:             response.content.decode(response.charset),",
          "210:         self.assertInHTML(",
          "212:             response.content.decode(response.charset),",
          "",
          "[Added Lines]",
          "198:         self.assertBodyContains(",
          "199:             response,",
          "201:             html=True,",
          "205:         self.assertBodyContains(",
          "206:             response,",
          "208:             html=True,",
          "212:         self.assertContains(  # not using assertBodyContains because this is in the nav",
          "213:             response,",
          "215:             html=True,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:             \"\"\"",
          "235:         response = self.client.get(reverse(\"dcim:location_list\"))",
          "241:         response = self.client.get(reverse(\"circuits:circuit_list\"))",
          "247:     def test_filtering_on_custom_select_filter_field(self):",
          "248:         \"\"\"Assert CustomField select and multiple select fields can be filtered using multiple entries\"\"\"",
          "",
          "[Removed Lines]",
          "236:         self.assertInHTML(",
          "237:             filter_tabs,",
          "238:             response.content.decode(response.charset),",
          "239:         )",
          "242:         self.assertInHTML(",
          "243:             filter_tabs,",
          "244:             response.content.decode(response.charset),",
          "245:         )",
          "",
          "[Added Lines]",
          "239:         self.assertBodyContains(response, filter_tabs, html=True)",
          "242:         self.assertBodyContains(response, filter_tabs, html=True)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:         )",
          "272:         url = reverse(\"dcim:location_list\") + query_param",
          "273:         response = self.client.get(url)",
          "279:     def test_filtering_crafted_query_params(self):",
          "280:         \"\"\"Test for reflected-XSS vulnerability GHSA-jxgr-gcj5-cqqg.\"\"\"",
          "",
          "[Removed Lines]",
          "274:         self.assertHttpStatus(response, 200)",
          "275:         response_content = response.content.decode(response.charset).replace(\"\\n\", \"\")",
          "276:         self.assertInHTML(locations[0].name, response_content)",
          "277:         self.assertInHTML(locations[1].name, response_content)",
          "",
          "[Added Lines]",
          "271:         self.assertBodyContains(response, locations[0].name, html=True)",
          "272:         self.assertBodyContains(response, locations[1].name, html=True)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "282:         query_param = \"?location_type=1 onmouseover=alert('hi') foo=bar\"",
          "283:         url = reverse(\"dcim:location_list\") + query_param",
          "284:         response = self.client.get(url)",
          "287:         # The important thing here is that the data-field-parent and data-field-value are correctly quoted",
          "289:             \"\"\"",
          "290: <span class=\"filter-selection-choice-remove remove-filter-param\"",
          "291:       data-field-type=\"child\"",
          "292:       data-field-parent=\"location_type\"",
          "293:       data-field-value=\"1 onmouseover=alert(&#x27;hi&#x27;) foo=bar\"",
          "294: >\u00d7</span>\"\"\",  # noqa: RUF001 - ambiguous-unicode-character-string",
          "296:         )",
          "",
          "[Removed Lines]",
          "285:         self.assertHttpStatus(response, 200)",
          "286:         response_content = response.content.decode(response.charset)",
          "288:         self.assertInHTML(",
          "295:             response_content,",
          "",
          "[Added Lines]",
          "281:         self.assertBodyContains(",
          "282:             response,",
          "289:             html=True,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "327:         self.url = reverse(\"apps:apps_list\")",
          "328:         self.item_weight = 100  # TODO: not easy to introspect from the nav menu struct, so hard-code it here for now",
          "334:     def test_installed_apps_visible(self):",
          "335:         \"\"\"The \"Installed Apps\" menu item should be available to an authenticated user regardless of permissions.\"\"\"",
          "338:             f\"\"\"",
          "339:             <a href=\"{self.url}\"",
          "340:                 data-item-weight=\"{self.item_weight}\">",
          "341:                 Installed Apps",
          "342:             </a>",
          "343:             \"\"\",",
          "345:         )",
          "",
          "[Removed Lines]",
          "330:     def make_request(self):",
          "331:         response = self.client.get(reverse(\"home\"))",
          "332:         return response.content.decode(response.charset)",
          "336:         response_content = self.make_request()",
          "337:         self.assertInHTML(",
          "344:             response_content,",
          "",
          "[Added Lines]",
          "326:         response = self.client.get(reverse(\"home\"))",
          "327:         self.assertContains(",
          "328:             response,",
          "335:             html=True,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "361:     def make_request(self):",
          "362:         response = self.client.get(reverse(\"login\"))",
          "363:         sso_login_pattern = re.compile('<a href=\".*\">Continue with SSO</a>')",
          "366:     def test_sso_login_button_not_visible(self):",
          "367:         \"\"\"Test Continue with SSO button not visible if SSO is enabled\"\"\"",
          "",
          "[Removed Lines]",
          "364:         return sso_login_pattern.search(response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "355:         return sso_login_pattern.search(extract_page_body(response.content.decode(response.charset)))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "458:         \"\"\"Nautobot's custom 404 page should be used and should include a default support message.\"\"\"",
          "459:         with self.assertTemplateUsed(\"404.html\"):",
          "460:             response = self.client.get(\"/foo/bar\")",
          "464:             \"If further assistance is required, please join the <code>#nautobot</code> channel on \"",
          "465:             '<a href=\"https://slack.networktocode.com/\" rel=\"noopener noreferrer\">Network to Code\\'s '",
          "466:             \"Slack community</a> and post your question.\",",
          "468:         )",
          "470:     @override_settings(DEBUG=False, SUPPORT_MESSAGE=\"Hello world!\")",
          "",
          "[Removed Lines]",
          "461:         self.assertContains(response, \"Network to Code\", status_code=404)",
          "462:         response_content = response.content.decode(response.charset)",
          "463:         self.assertInHTML(",
          "467:             response_content,",
          "",
          "[Added Lines]",
          "452:         self.assertBodyContains(",
          "453:             response,",
          "457:             html=True,",
          "458:             status_code=404,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "473:         with self.assertTemplateUsed(\"404.html\"):",
          "474:             response = self.client.get(\"/foo/bar\")",
          "475:         self.assertNotContains(response, \"Network to Code\", status_code=404)",
          "479:     @override_settings(DEBUG=False)",
          "480:     @mock.patch(\"nautobot.core.views.HomeView.get\", side_effect=Exception)",
          "",
          "[Removed Lines]",
          "476:         response_content = response.content.decode(response.charset)",
          "477:         self.assertInHTML(\"Hello world!\", response_content)",
          "",
          "[Added Lines]",
          "467:         self.assertBodyContains(response, \"Hello world!\", status_code=404)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "484:         self.client.raise_request_exception = False",
          "485:         response = self.client.get(url)",
          "486:         self.assertTemplateUsed(response, \"500.html\")",
          "490:             \"If further assistance is required, please join the <code>#nautobot</code> channel on \"",
          "491:             '<a href=\"https://slack.networktocode.com/\" rel=\"noopener noreferrer\">Network to Code\\'s '",
          "492:             \"Slack community</a> and post your question.\",",
          "494:         )",
          "496:     @override_settings(DEBUG=False, SUPPORT_MESSAGE=\"Hello world!\")",
          "",
          "[Removed Lines]",
          "487:         self.assertContains(response, \"Network to Code\", status_code=500)",
          "488:         response_content = response.content.decode(response.charset)",
          "489:         self.assertInHTML(",
          "493:             response_content,",
          "",
          "[Added Lines]",
          "477:         self.assertBodyContains(",
          "478:             response,",
          "482:             html=True,",
          "483:             status_code=500,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "502:         response = self.client.get(url)",
          "503:         self.assertTemplateUsed(response, \"500.html\")",
          "504:         self.assertNotContains(response, \"Network to Code\", status_code=500)",
          "509: class DBFileStorageViewTestCase(TestCase):",
          "",
          "[Removed Lines]",
          "505:         response_content = response.content.decode(response.charset)",
          "506:         self.assertInHTML(\"Hello world!\", response_content)",
          "",
          "[Added Lines]",
          "495:         self.assertBodyContains(response, \"Hello world!\", status_code=500)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "591:         self.client.logout()",
          "592:         url = reverse(\"plugins:example_app:view_with_custom_permissions\")",
          "593:         response = self.client.get(url, follow=True)",
          "596:         # check if the user is redirected to the login page",
          "599:         # Test IsAdmin permission",
          "600:         self.client.force_login(self.user)",
          "601:         response = self.client.get(url, follow=True)",
          "604:         # check if the users have to have the permission to access the page",
          "607:         # View should be successfully accessed",
          "608:         self.user.is_staff = True",
          "609:         self.user.save()",
          "610:         response = self.client.get(url)",
          "",
          "[Removed Lines]",
          "594:         self.assertHttpStatus(response, 200)",
          "595:         response_body = response.content.decode(response.charset)",
          "597:         self.assertIn(f'<input type=\"hidden\" name=\"next\" value=\"{url}\" />', response_body)",
          "602:         self.assertHttpStatus(response, 403)",
          "603:         response_body = response.content.decode(response.charset)",
          "605:         self.assertIn(\"You do not have permission to access this page.\", response_body)",
          "611:         self.assertHttpStatus(response, 200)",
          "612:         response_body = response.content.decode(response.charset)",
          "613:         self.assertIn(\"You are viewing a table of example models\", response_body)",
          "",
          "[Added Lines]",
          "584:         self.assertBodyContains(response, f'<input type=\"hidden\" name=\"next\" value=\"{url}\" />', html=True)",
          "590:         self.assertBodyContains(response, \"You do not have permission to access this page\", status_code=403)",
          "596:         self.assertBodyContains(response, \"You are viewing a table of example models\")",
          "",
          "---------------"
        ],
        "nautobot/dcim/tests/test_views.py||nautobot/dcim/tests/test_views.py": [
          "File: nautobot/dcim/tests/test_views.py -> nautobot/dcim/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:             \"data\": post_data(test_form_data),",
          "285:         }",
          "286:         response = self.client.post(**request)",
          "290:         test_form_data[\"parent\"] = site_1.pk",
          "291:         request[\"data\"] = post_data(test_form_data)",
          "292:         self.assertHttpStatus(self.client.post(**request), 302)",
          "",
          "[Removed Lines]",
          "287:         self.assertHttpStatus(response, 200)",
          "288:         response_body = response.content.decode(response.charset)",
          "289:         self.assertIn(\"\u201cGeneric Site\u201d is not a valid UUID.\", response_body)",
          "",
          "[Added Lines]",
          "287:         self.assertBodyContains(response, \"\u201cGeneric Site\u201d is not a valid UUID.\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1172:         }",
          "1174:         response = self.client.post(url, data)",
          "1179: class ModuleTypeTestCase(",
          "",
          "[Removed Lines]",
          "1175:         self.assertHttpStatus(response, 200)",
          "1176:         self.assertIn(\"failed validation\", response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "1173:         self.assertBodyContains(response, \"failed validation\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2280:         url = reverse(\"dcim:device_interfaces\", kwargs={\"pk\": device.pk})",
          "2281:         response = self.client.get(url)",
          "2286:         # Assert that \"Add IP address\" appears for each of the three interfaces",
          "2289:     def test_device_interface_assign_ipaddress(self):",
          "2290:         device = Device.objects.first()",
          "",
          "[Removed Lines]",
          "2282:         self.assertHttpStatus(response, 200)",
          "2283:         response_body = response.content.decode(response.charset)",
          "2284:         # Count the number of occurrences of \"Add IP address\" in the response_body",
          "2285:         count = response_body.count(\"Add IP address\")",
          "2287:         self.assertEqual(count, 3)",
          "",
          "[Added Lines]",
          "2280:         self.assertBodyContains(response, \"Add IP address\", count=3)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2322:             \"data\": post_data(assign_ip_form_data),",
          "2323:         }",
          "2326:             # Assert Add new IPAddress",
          "2327:             response = self.client.post(**add_new_ip_request, follow=True)",
          "2330:             self.interfaces[0].refresh_from_db()",
          "2331:             self.assertEqual(self.interfaces[0].ip_addresses.all().count(), 0)",
          "2338:             # Assert Assign Exsisting IPAddress",
          "2339:             response = self.client.post(**assign_ip_request, follow=True)",
          "2342:             self.interfaces[1].refresh_from_db()",
          "2343:             self.assertEqual(self.interfaces[1].ip_addresses.all().count(), 0)",
          "2349:         self.add_permissions(\"dcim.change_interface\", \"ipam.view_ipaddress\")",
          "",
          "[Removed Lines]",
          "2325:         with self.subTest(\"Assert Cannnot assign IPAddress('Add New') without permission\"):",
          "2328:             response_body = response.content.decode(response.charset)",
          "2329:             self.assertHttpStatus(response, 200)",
          "2332:             self.assertIn(",
          "2333:                 f\"Interface with id &quot;{self.interfaces[0].pk}&quot; not found\",",
          "2334:                 response_body,",
          "2335:             )",
          "2337:         with self.subTest(\"Assert Cannnot assign IPAddress(Exsisting IP) without permission\"):",
          "2340:             response_body = response.content.decode(response.charset)",
          "2341:             self.assertHttpStatus(response, 200)",
          "2344:             self.assertIn(",
          "2345:                 f\"Interface with id &quot;{self.interfaces[1].pk}&quot; not found\",",
          "2346:                 response_body,",
          "2347:             )",
          "",
          "[Added Lines]",
          "2318:         with self.subTest(\"Assert Cannot assign IPAddress('Add New') without permission\"):",
          "2321:             self.assertBodyContains(response, f\"Interface with id &quot;{self.interfaces[0].pk}&quot; not found\")",
          "2325:         with self.subTest(\"Assert Cannot assign IPAddress(Existing IP) without permission\"):",
          "2328:             self.assertBodyContains(response, f\"Interface with id &quot;{self.interfaces[1].pk}&quot; not found\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2375:                 \"data\": post_data(assign_ip_form_data),",
          "2376:             }",
          "2377:             response = self.client.post(**assign_ip_request, follow=True)",
          "2383:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "2384:     def test_device_rearports(self):",
          "",
          "[Removed Lines]",
          "2378:             self.assertHttpStatus(response, 200)",
          "2379:             self.assertIn(",
          "2380:                 \"Please select at least one IP Address from the table.\", response.content.decode(response.charset)",
          "2381:             )",
          "",
          "[Added Lines]",
          "2361:             self.assertBodyContains(response, \"Please select at least one IP Address from the table.\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2684:         url = reverse(\"dcim:module_interfaces\", kwargs={\"pk\": module.pk})",
          "2685:         response = self.client.get(url)",
          "2690:         # Assert that \"Add IP address\" appears for each of the three interfaces",
          "2693:     def test_module_interface_assign_ipaddress(self):",
          "2694:         module = Module.objects.first()",
          "",
          "[Removed Lines]",
          "2686:         self.assertHttpStatus(response, 200)",
          "2687:         response_body = response.content.decode(response.charset)",
          "2688:         # Count the number of occurrences of \"Add IP address\" in the response_body",
          "2689:         count = response_body.count(\"Add IP address\")",
          "2691:         self.assertEqual(count, 3)",
          "",
          "[Added Lines]",
          "2667:         self.assertBodyContains(response, \"Add IP address\", count=3)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2726:             \"data\": post_data(assign_ip_form_data),",
          "2727:         }",
          "2730:             # Assert Add new IPAddress",
          "2731:             response = self.client.post(**add_new_ip_request, follow=True)",
          "2734:             self.interfaces[0].refresh_from_db()",
          "2735:             self.assertEqual(self.interfaces[0].ip_addresses.all().count(), 0)",
          "2742:             # Assert Assign Exsisting IPAddress",
          "2743:             response = self.client.post(**assign_ip_request, follow=True)",
          "2746:             self.interfaces[1].refresh_from_db()",
          "2747:             self.assertEqual(self.interfaces[1].ip_addresses.all().count(), 0)",
          "2753:         self.add_permissions(\"dcim.change_interface\", \"ipam.view_ipaddress\")",
          "",
          "[Removed Lines]",
          "2729:         with self.subTest(\"Assert Cannnot assign IPAddress('Add New') without permission\"):",
          "2732:             response_body = response.content.decode(response.charset)",
          "2733:             self.assertHttpStatus(response, 200)",
          "2736:             self.assertIn(",
          "2737:                 f\"Interface with id &quot;{self.interfaces[0].pk}&quot; not found\",",
          "2738:                 response_body,",
          "2739:             )",
          "2741:         with self.subTest(\"Assert Cannnot assign IPAddress(Exsisting IP) without permission\"):",
          "2744:             response_body = response.content.decode(response.charset)",
          "2745:             self.assertHttpStatus(response, 200)",
          "2748:             self.assertIn(",
          "2749:                 f\"Interface with id &quot;{self.interfaces[1].pk}&quot; not found\",",
          "2750:                 response_body,",
          "2751:             )",
          "",
          "[Added Lines]",
          "2705:         with self.subTest(\"Assert Cannot assign IPAddress('Add New') without permission\"):",
          "2708:             self.assertBodyContains(response, f\"Interface with id &quot;{self.interfaces[0].pk}&quot; not found\")",
          "2712:         with self.subTest(\"Assert Cannot assign IPAddress(Existing IP) without permission\"):",
          "2715:             self.assertBodyContains(response, f\"Interface with id &quot;{self.interfaces[1].pk}&quot; not found\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3228:         invalid_ipaddress_link = reverse(\"ipam:ipaddress_edit\", args=(ipaddress.pk,))",
          "3229:         valid_ipaddress_link = ipaddress.get_absolute_url()",
          "3230:         response = self.client.get(interface.get_absolute_url() + \"?tab=main\")",
          "3233:         self.assertNotIn(invalid_ipaddress_link, response_content)",
          "",
          "[Removed Lines]",
          "3231:         response_content = response.content.decode(response.charset)",
          "3232:         self.assertIn(valid_ipaddress_link, response_content)",
          "",
          "[Added Lines]",
          "3197:         self.assertBodyContains(response, valid_ipaddress_link)",
          "3198:         response_content = extract_page_body(response.content.decode(response.charset))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4113:         response = self.client.get(f\"{self._get_url('list')}?id={instance1.pk}\")",
          "4114:         self.assertHttpStatus(response, 200)",
          "4115:         content = extract_page_body(response.content.decode(response.charset))",
          "4117:         if hasattr(self.model, \"name\"):",
          "4118:             self.assertIn(instance1.name, content, msg=content)",
          "4119:             self.assertNotIn(instance2.name, content, msg=content)",
          "",
          "[Removed Lines]",
          "4116:         # TODO: it'd make test failures more readable if we strip the page headers/footers from the content",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4209:         Interface.objects.create(device=self.devices[2], name=\"device 2 interface 1\", status=interface_status)",
          "4210:         Interface.objects.create(device=self.devices[2], name=\"device 2 interface 2\", status=interface_status)",
          "4211:         response = self.client.get(reverse(\"dcim:device_interfaces\", kwargs={\"pk\": self.devices[0].pk}))",
          "4218:     def test_device_column_visible(self):",
          "4219:         \"\"\"",
          "",
          "[Removed Lines]",
          "4212:         self.assertIn('Interfaces <span class=\"badge\">6</span>', str(response.content))",
          "4213:         self.assertIn(\"device 1 interface 1\", str(response.content))",
          "4214:         self.assertIn(\"device 1 interface 2\", str(response.content))",
          "4215:         self.assertIn(\"device 2 interface 1\", str(response.content))",
          "4216:         self.assertIn(\"device 2 interface 2\", str(response.content))",
          "",
          "[Added Lines]",
          "4177:         self.assertBodyContains(response, 'Interfaces <span class=\"badge\">6</span>')",
          "4178:         self.assertBodyContains(response, \"device 1 interface 1\")",
          "4179:         self.assertBodyContains(response, \"device 1 interface 2\")",
          "4180:         self.assertBodyContains(response, \"device 2 interface 1\")",
          "4181:         self.assertBodyContains(response, \"device 2 interface 2\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4226:         Interface.objects.create(device=self.devices[0], name=\"eth0\", status=interface_status)",
          "4227:         Interface.objects.create(device=self.devices[0], name=\"eth1\", status=interface_status)",
          "4228:         response = self.client.get(reverse(\"dcim:device_interfaces\", kwargs={\"pk\": self.devices[0].pk}))",
          "4231:     def test_device_column_not_visible(self):",
          "4232:         \"\"\"",
          "",
          "[Removed Lines]",
          "4229:         self.assertIn(\"<th >Device</th>\", str(response.content))",
          "",
          "[Added Lines]",
          "4194:         self.assertBodyContains(response, \"<th>Device</th>\", html=True)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4239:         Interface.objects.create(device=self.devices[1], name=\"eth2\", status=interface_status)",
          "4240:         Interface.objects.create(device=self.devices[1], name=\"eth3\", status=interface_status)",
          "4241:         response = self.client.get(reverse(\"dcim:device_interfaces\", kwargs={\"pk\": self.devices[1].pk}))",
          "4243:         # Sanity check:",
          "4247: class PowerPanelTestCase(ViewTestCases.PrimaryObjectViewTestCase):",
          "",
          "[Removed Lines]",
          "4242:         self.assertNotIn(\"<th >Device</th>\", str(response.content))",
          "4244:         self.assertIn(\"<th >Name</th>\", str(response.content))",
          "",
          "[Added Lines]",
          "4207:         self.assertNotIn(\"<th >Device</th>\", extract_page_body(response.content.decode(response.charset)))",
          "4209:         self.assertBodyContains(response, \"<th>Name</th>\", html=True)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4408:         url = reverse(\"dcim:rearport_trace\", args=[obj.pk])",
          "4409:         cablepath_id = CablePath.objects.first().id",
          "4410:         response = self.client.get(url + f\"?cablepath_id={cablepath_id}\")",
          "4416: class DeviceRedundancyGroupTestCase(ViewTestCases.PrimaryObjectViewTestCase):",
          "",
          "[Removed Lines]",
          "4411:         self.assertHttpStatus(response, 200)",
          "4412:         content = extract_page_body(response.content.decode(response.charset))",
          "4413:         self.assertInHTML(\"<h1>Cable Trace for Rear Port Rear Port 1</h1>\", content)",
          "",
          "[Added Lines]",
          "4376:         self.assertBodyContains(response, \"<h1>Cable Trace for Rear Port Rear Port 1</h1>\", html=True)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4621:             \"_confirm\": True,  # Form button",
          "4622:         }",
          "4623:         response = self.client.post(self._get_url(\"bulk_delete\"), data, follow=True)",
          "4626:         # Assert protected error message included in the response body",
          "4630: class SoftwareVersionTestCase(ViewTestCases.PrimaryObjectViewTestCase):",
          "",
          "[Removed Lines]",
          "4624:         self.assertHttpStatus(response, 200)",
          "4625:         response_body = response.content.decode(response.charset)",
          "4627:         self.assertInHTML(f\"<span>{device_type_to_software_image_file}</span>\", response_body)",
          "",
          "[Added Lines]",
          "4588:         self.assertBodyContains(response, f\"<span>{device_type_to_software_image_file}</span>\", html=True)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4701:             \"_confirm\": True,  # Form button",
          "4702:         }",
          "4703:         response = self.client.post(self._get_url(\"bulk_delete\"), data, follow=True)",
          "4706:         # Assert protected error message included in the response body",
          "4710: class ControllerTestCase(ViewTestCases.PrimaryObjectViewTestCase):",
          "",
          "[Removed Lines]",
          "4704:         self.assertHttpStatus(response, 200)",
          "4705:         response_body = response.content.decode(response.charset)",
          "4707:         self.assertInHTML(f\"<span>{device_type_to_software_image_file}</span>\", response_body)",
          "",
          "[Added Lines]",
          "4666:         self.assertBodyContains(response, f\"<span>{device_type_to_software_image_file}</span>\", html=True)",
          "",
          "---------------"
        ],
        "nautobot/extras/tests/test_customfields.py||nautobot/extras/tests/test_customfields.py": [
          "File: nautobot/extras/tests/test_customfields.py -> nautobot/extras/tests/test_customfields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: from nautobot.core.tables import CustomFieldColumn",
          "16: from nautobot.core.testing import APITestCase, TestCase, TransactionTestCase",
          "17: from nautobot.core.testing.models import ModelTestCases",
          "19: from nautobot.core.utils.lookup import get_changes_for_model",
          "20: from nautobot.dcim.filters import LocationFilterSet",
          "21: from nautobot.dcim.forms import RackFilterForm",
          "",
          "[Removed Lines]",
          "18: from nautobot.core.testing.utils import post_data",
          "",
          "[Added Lines]",
          "18: from nautobot.core.testing.utils import extract_page_body, post_data",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "995:             },",
          "996:         }",
          "997:         response = self.client.post(self.list_url, data, format=\"json\", **self.header)",
          "1001:         data[\"custom_fields\"].update({self.cf_text.key: 2})",
          "1002:         response = self.client.post(self.list_url, data, format=\"json\", **self.header)",
          "1006:         data[\"custom_fields\"].update({self.cf_text.key: True})",
          "1007:         response = self.client.post(self.list_url, data, format=\"json\", **self.header)",
          "1011:     def test_create_without_required_field(self):",
          "1012:         self.cf_text.default = None",
          "",
          "[Removed Lines]",
          "998:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "999:         self.assertIn(\"Value must be a string\", str(response.content))",
          "1003:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "1004:         self.assertIn(\"Value must be a string\", str(response.content))",
          "1008:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "1009:         self.assertIn(\"Value must be a string\", str(response.content))",
          "",
          "[Added Lines]",
          "998:         self.assertContains(response, \"Value must be a string\", status_code=status.HTTP_400_BAD_REQUEST)",
          "1002:         self.assertContains(response, \"Value must be a string\", status_code=status.HTTP_400_BAD_REQUEST)",
          "1006:         self.assertContains(response, \"Value must be a string\", status_code=status.HTTP_400_BAD_REQUEST)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1019:             \"status\": self.statuses[0].pk,",
          "1020:         }",
          "1021:         response = self.client.post(self.list_url, data, format=\"json\", **self.header)",
          "1025:         # Try in CSV format too",
          "1026:         csvdata = \"\\n\".join(",
          "",
          "[Removed Lines]",
          "1022:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "1023:         self.assertIn(\"Required field cannot be empty\", str(response.content))",
          "",
          "[Added Lines]",
          "1019:         self.assertContains(response, \"Required field cannot be empty\", status_code=status.HTTP_400_BAD_REQUEST)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1030:             ]",
          "1031:         )",
          "1032:         response = self.client.post(self.list_url, csvdata, content_type=\"text/csv\", **self.header)",
          "1036:     def test_create_invalid_select_choice(self):",
          "1037:         data = {",
          "",
          "[Removed Lines]",
          "1033:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "1034:         self.assertIn(\"Required field cannot be empty\", str(response.content))",
          "",
          "[Added Lines]",
          "1029:         self.assertContains(response, \"Required field cannot be empty\", status_code=status.HTTP_400_BAD_REQUEST)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1043:             },",
          "1044:         }",
          "1045:         response = self.client.post(self.list_url, data, format=\"json\", **self.header)",
          "1049:         # Try in CSV format too",
          "1050:         csvdata = \"\\n\".join(",
          "",
          "[Removed Lines]",
          "1046:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "1047:         self.assertIn(\"Invalid choice\", str(response.content))",
          "",
          "[Added Lines]",
          "1041:         self.assertContains(response, \"Invalid choice\", status_code=status.HTTP_400_BAD_REQUEST)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1054:             ]",
          "1055:         )",
          "1056:         response = self.client.post(self.list_url, csvdata, content_type=\"text/csv\", **self.header)",
          "1061: class CustomFieldImportTest(TestCase):",
          "",
          "[Removed Lines]",
          "1057:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "1058:         self.assertIn(\"Invalid choice\", str(response.content))",
          "",
          "[Added Lines]",
          "1051:         self.assertContains(response, \"Invalid choice\", status_code=status.HTTP_400_BAD_REQUEST)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1157:         try:",
          "1158:             location1 = Location.objects.get(name=\"Location 1\")",
          "1159:         except Location.DoesNotExist:",
          "1161:         self.assertEqual(len(location1.cf), 8)",
          "1162:         self.assertEqual(location1.cf[\"text\"], \"ABC\")",
          "1163:         self.assertEqual(location1.cf[\"integer\"], 123)",
          "",
          "[Removed Lines]",
          "1160:             self.fail(str(response.content))",
          "",
          "[Added Lines]",
          "1153:             self.fail(extract_page_body(response.content.decode(response.charset)))",
          "",
          "---------------"
        ],
        "nautobot/extras/tests/test_plugins.py||nautobot/extras/tests/test_plugins.py": [
          "File: nautobot/extras/tests/test_plugins.py -> nautobot/extras/tests/test_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:     def test_views_are_overridden(self):",
          "696:         response = self.client.get(reverse(\"plugins:example_app:view_to_be_overridden\"))",
          "699:         response = self.client.get(",
          "700:             f'{reverse(\"plugins:plugin_detail\", kwargs={\"plugin\": \"example_app_with_view_override\"})}'",
          "701:         )",
          "702:         self.assertIn(",
          "708:         )",
          "",
          "[Removed Lines]",
          "697:         self.assertEqual(b\"Hello world! I'm an overridden view.\", response.content)",
          "703:             (",
          "704:                 b\"plugins:example_app:view_to_be_overridden <code>\"",
          "705:                 b\"example_app_with_view_override.views.ViewOverride</code>\"",
          "706:             ),",
          "707:             response.content,",
          "",
          "[Added Lines]",
          "697:         self.assertEqual(\"Hello world! I'm an overridden view.\", response.content.decode(response.charset))",
          "703:             \"plugins:example_app:view_to_be_overridden <code>\"",
          "704:             \"example_app_with_view_override.views.ViewOverride</code>\",",
          "705:             extract_page_body(response.content.decode(response.charset)),",
          "",
          "---------------"
        ],
        "nautobot/extras/tests/test_views.py||nautobot/extras/tests/test_views.py": [
          "File: nautobot/extras/tests/test_views.py -> nautobot/extras/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:         url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.first().pk})",
          "865:         self.add_permissions(\"dcim.view_device\", \"extras.view_dynamicgroup\")",
          "866:         response = self.client.get(url)",
          "873:     def test_get_object_dynamic_groups_with_constrained_permission(self):",
          "874:         obj_perm = ObjectPermission(",
          "",
          "[Removed Lines]",
          "867:         self.assertHttpStatus(response, 200)",
          "868:         response_body = response.content.decode(response.charset)",
          "869:         self.assertIn(\"DG 1\", response_body, msg=response_body)",
          "870:         self.assertIn(\"DG 2\", response_body, msg=response_body)",
          "871:         self.assertIn(\"DG 3\", response_body, msg=response_body)",
          "",
          "[Added Lines]",
          "867:         self.assertBodyContains(response, \"DG 1\")",
          "868:         self.assertBodyContains(response, \"DG 2\")",
          "869:         self.assertBodyContains(response, \"DG 3\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:         url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.first().pk})",
          "892:         response = self.client.get(url)",
          "893:         self.assertHttpStatus(response, 200)",
          "895:         self.assertIn(\"DG 1\", response_body, msg=response_body)",
          "896:         self.assertNotIn(\"DG 2\", response_body, msg=response_body)",
          "897:         self.assertNotIn(\"DG 3\", response_body, msg=response_body)",
          "",
          "[Removed Lines]",
          "894:         response_body = response.content.decode(response.charset)",
          "",
          "[Added Lines]",
          "892:         response_body = extract_page_body(response.content.decode(response.charset))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1334:         # Try GET with model-level permission",
          "1335:         # SavedView detail view should redirect to the View from which it is derived",
          "1336:         response = self.client.get(instance.get_absolute_url(), follow=True)",
          "1341:         query_strings = [\"&table_changes_pending=true\", \"&per_page=1234\", \"&status=active\", \"&sort=name\"]",
          "1342:         for string in query_strings:",
          "1343:             view_url = self.get_view_url_for_saved_view(instance) + string",
          "1344:             response = self.client.get(view_url)",
          "1347:             # Assert that the star sign is rendered on the page since there are unsaved changes",
          "1350:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[])",
          "1351:     def test_get_object_with_constrained_permission(self):",
          "",
          "[Removed Lines]",
          "1337:         self.assertHttpStatus(response, 200)",
          "1338:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1339:         self.assertIn(escape(instance.name), response_body, msg=response_body)",
          "1345:             self.assertHttpStatus(response, 200)",
          "1346:             response_body = extract_page_body(response.content.decode(response.charset))",
          "1348:             self.assertIn('<i title=\"Pending changes not saved\">', response_body, msg=response_body)",
          "",
          "[Added Lines]",
          "1335:         self.assertBodyContains(response, escape(instance.name))",
          "1342:             self.assertBodyContains(response, '<i title=\"Pending changes not saved\">')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1383:         # Try update the saved view with a different user from the owner of the saved view",
          "1384:         self.client.force_login(different_user)",
          "1385:         response = self.client.get(update_url, follow=True)",
          "1389:             f\"You do not have the required permission to modify this Saved View owned by {instance.owner}\",",
          "1392:         )",
          "1394:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "",
          "[Removed Lines]",
          "1386:         self.assertHttpStatus(response, 200)",
          "1387:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1388:         self.assertIn(",
          "1390:             response_body,",
          "1391:             msg=response_body,",
          "",
          "[Added Lines]",
          "1380:         self.assertBodyContains(",
          "1381:             response,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1424:         # Try delete the saved view with a different user from the owner of the saved view",
          "1425:         self.client.force_login(different_user)",
          "1426:         response = self.client.post(delete_url, follow=True)",
          "1430:             f\"You do not have the required permission to delete this Saved View owned by {instance.owner}\",",
          "1433:         )",
          "1435:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "",
          "[Removed Lines]",
          "1427:         self.assertHttpStatus(response, 200)",
          "1428:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1429:         self.assertIn(",
          "1431:             response_body,",
          "1432:             msg=response_body,",
          "",
          "[Added Lines]",
          "1418:         self.assertBodyContains(",
          "1419:             response,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1450:         instance.owner.save()",
          "1451:         self.client.force_login(instance.owner)",
          "1452:         response = self.client.post(delete_url, follow=True)",
          "1461:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "1462:     def test_create_saved_view(self):",
          "",
          "[Removed Lines]",
          "1453:         self.assertHttpStatus(response, 200)",
          "1454:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1455:         self.assertIn(",
          "1456:             \"Are you sure you want to delete saved view\",",
          "1457:             response_body,",
          "1458:             msg=response_body,",
          "1459:         )",
          "",
          "[Added Lines]",
          "1441:         self.assertBodyContains(response, \"Are you sure you want to delete saved view\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1499:         )",
          "1500:         response = self.client.get(reverse(view_name), follow=True)",
          "1501:         # Assert that Location List View got redirected to Saved View set as global default",
          "1513:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "1514:     def test_user_default(self):",
          "",
          "[Removed Lines]",
          "1502:         self.assertHttpStatus(response, 200)",
          "1503:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1504:         self.assertInHTML(",
          "1505:             \"\"\"",
          "1506:             <strong>",
          "1507:                 Global Location Default View",
          "1508:             </strong>",
          "1509:             \"\"\",",
          "1510:             response_body,",
          "1511:         )",
          "",
          "[Added Lines]",
          "1484:         self.assertBodyContains(response, \"<strong>Global Location Default View</strong>\", html=True)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1522:         UserSavedViewAssociation.objects.create(user=self.user, saved_view=sv, view_name=sv.view)",
          "1523:         response = self.client.get(reverse(view_name), follow=True)",
          "1524:         # Assert that Location List View got redirected to Saved View set as user default",
          "1536:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "1537:     def test_user_default_precedes_global_default(self):",
          "",
          "[Removed Lines]",
          "1525:         self.assertHttpStatus(response, 200)",
          "1526:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1527:         self.assertInHTML(",
          "1528:             \"\"\"",
          "1529:             <strong>",
          "1530:                 User Location Default View",
          "1531:             </strong>",
          "1532:             \"\"\",",
          "1533:             response_body,",
          "1534:         )",
          "",
          "[Added Lines]",
          "1498:         self.assertBodyContains(response, \"<strong>User Location Default View</strong>\", html=True)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1550:         UserSavedViewAssociation.objects.create(user=self.user, saved_view=sv, view_name=sv.view)",
          "1551:         response = self.client.get(reverse(view_name), follow=True)",
          "1552:         # Assert that Location List View got redirected to Saved View set as user default",
          "1564:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[])",
          "1565:     def test_is_shared(self):",
          "",
          "[Removed Lines]",
          "1553:         self.assertHttpStatus(response, 200)",
          "1554:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1555:         self.assertInHTML(",
          "1556:             \"\"\"",
          "1557:             <strong>",
          "1558:                 User Location Default View",
          "1559:             </strong>",
          "1560:             \"\"\",",
          "1561:             response_body,",
          "1562:         )",
          "",
          "[Added Lines]",
          "1517:         self.assertBodyContains(response, \"<strong>User Location Default View</strong>\", html=True)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1915:         # Try GET with model-level permission",
          "1916:         response = self.client.get(self._get_url(\"view\", instance))",
          "1921:         # The object's display name or string representation should appear in the response",
          "1924:         # skip GetObjectViewTestCase checks for Relationships and Custom Fields since this isn't actually a detail view",
          "",
          "[Removed Lines]",
          "1917:         self.assertHttpStatus(response, 200)",
          "1919:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1922:         self.assertIn(getattr(instance, \"display\", str(instance)), response_body, msg=response_body)",
          "",
          "[Added Lines]",
          "1873:         self.assertBodyContains(response, getattr(instance, \"display\", str(instance)))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1954:         \"\"\"Anonymous users may not take any action with regard to job approval requests.\"\"\"",
          "1955:         self.client.logout()",
          "1956:         response = self.client.post(self._get_url(\"view\", self._get_queryset().first()))",
          "1960:         # No job was submitted",
          "1961:         self.assertFalse(JobResult.objects.filter(name=self.job_model.name).exists())",
          "",
          "[Removed Lines]",
          "1957:         self.assertHttpStatus(response, 200)",
          "1958:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1959:         self.assertIn(\"You do not have permission to run jobs\", response_body)",
          "",
          "[Added Lines]",
          "1908:         self.assertBodyContains(response, \"You do not have permission to run jobs\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1968:         data = {\"_dry_run\": True}",
          "1970:         response = self.client.post(self._get_url(\"view\", instance), data)",
          "1974:         # No job was submitted",
          "1975:         self.assertFalse(JobResult.objects.filter(name=instance.job_model.name).exists())",
          "",
          "[Removed Lines]",
          "1971:         self.assertHttpStatus(response, 200)",
          "1972:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1973:         self.assertIn(\"This job cannot be run at this time\", response_body)",
          "",
          "[Added Lines]",
          "1920:         self.assertBodyContains(response, \"This job cannot be run at this time\")",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1984:         data = {\"_dry_run\": True}",
          "1986:         response = self.client.post(self._get_url(\"view\", instance), data)",
          "1990:         # No job was submitted",
          "1991:         self.assertFalse(JobResult.objects.filter(name=instance.job_model.name).exists())",
          "",
          "[Removed Lines]",
          "1987:         self.assertHttpStatus(response, 200)",
          "1988:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1989:         self.assertIn(\"You do not have permission to run this job\", response_body)",
          "",
          "[Added Lines]",
          "1934:         self.assertBodyContains(response, \"You do not have permission to run this job\")",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2006:         instance2.job_model.save()",
          "2008:         response = self.client.post(self._get_url(\"view\", instance2), data)",
          "2012:         # No job was submitted",
          "2013:         job_names = [instance1.job_model.name, instance2.job_model.name]",
          "2014:         self.assertFalse(JobResult.objects.filter(name__in=job_names).exists())",
          "",
          "[Removed Lines]",
          "2009:         self.assertHttpStatus(response, 200)",
          "2010:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2011:         self.assertIn(\"You do not have permission to run this job\", response_body)",
          "",
          "[Added Lines]",
          "1954:         self.assertBodyContains(response, \"You do not have permission to run this job\")",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2085:         for user in (user1, user2):",
          "2086:             self.client.force_login(user)",
          "2087:             response = self.client.post(self._get_url(\"view\", instance), data)",
          "2091:             # Request was not deleted",
          "2092:             self.assertEqual(1, len(ScheduledJob.objects.filter(pk=instance.pk)), msg=str(user))",
          "",
          "[Removed Lines]",
          "2088:             self.assertHttpStatus(response, 200, msg=str(user))",
          "2089:             response_body = extract_page_body(response.content.decode(response.charset))",
          "2090:             self.assertIn(\"You do not have permission\", response_body, msg=str(user))",
          "",
          "[Added Lines]",
          "2031:             self.assertBodyContains(response, \"You do not have permission\")",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2120:         # Check object-based permissions are enforced for a different instance",
          "2121:         instance = self._get_queryset().first()",
          "2122:         response = self.client.post(self._get_url(\"view\", instance), data)",
          "2126:         # Request was not deleted",
          "2127:         self.assertEqual(1, len(ScheduledJob.objects.filter(pk=instance.pk)), msg=str(user))",
          "",
          "[Removed Lines]",
          "2123:         self.assertHttpStatus(response, 200, msg=str(user))",
          "2124:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2125:         self.assertIn(\"You do not have permission\", response_body, msg=str(user))",
          "",
          "[Added Lines]",
          "2064:         self.assertBodyContains(response, \"You do not have permission\")",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2134:         data = {\"_approve\": True}",
          "2136:         response = self.client.post(self._get_url(\"view\", instance), data)",
          "2140:         # Job was not approved",
          "2141:         instance.refresh_from_db()",
          "2142:         self.assertIsNone(instance.approved_by_user)",
          "",
          "[Removed Lines]",
          "2137:         self.assertHttpStatus(response, 200)",
          "2138:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2139:         self.assertIn(\"You cannot approve your own job request\", response_body)",
          "",
          "[Added Lines]",
          "2076:         self.assertBodyContains(response, \"You cannot approve your own job request\")",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2171:         for user in (user1, user2):",
          "2172:             self.client.force_login(user)",
          "2173:             response = self.client.post(self._get_url(\"view\", instance), data)",
          "2177:             # Job was not approved",
          "2178:             instance.refresh_from_db()",
          "2179:             self.assertIsNone(instance.approved_by_user)",
          "",
          "[Removed Lines]",
          "2174:             self.assertHttpStatus(response, 200, msg=str(user))",
          "2175:             response_body = extract_page_body(response.content.decode(response.charset))",
          "2176:             self.assertIn(\"You do not have permission\", response_body, msg=str(user))",
          "",
          "[Added Lines]",
          "2111:             self.assertBodyContains(response, \"You do not have permission\")",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2208:         # Check object-based permissions are enforced for a different instance",
          "2209:         instance = self._get_queryset().last()",
          "2210:         response = self.client.post(self._get_url(\"view\", instance), data)",
          "2214:         # Job was not scheduled",
          "2215:         instance.refresh_from_db()",
          "2216:         self.assertIsNone(instance.approved_by_user)",
          "",
          "[Removed Lines]",
          "2211:         self.assertHttpStatus(response, 200, msg=str(user))",
          "2212:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2213:         self.assertIn(\"You do not have permission\", response_body, msg=str(user))",
          "",
          "[Added Lines]",
          "2146:         self.assertBodyContains(response, \"You do not have permission\")",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2251:         url = reverse(\"extras:jobresult_log-table\", kwargs={\"pk\": JobResult.objects.first().pk})",
          "2252:         self.add_permissions(\"extras.view_jobresult\", \"extras.view_joblogentry\")",
          "2253:         response = self.client.get(url)",
          "2258:     # TODO test with constrained permissions on both JobResult and JobLogEntry records",
          "",
          "[Removed Lines]",
          "2254:         self.assertHttpStatus(response, 200)",
          "2255:         response_body = response.content.decode(response.charset)",
          "2256:         self.assertIn(\"This is a test\", response_body)",
          "",
          "[Added Lines]",
          "2187:         self.assertBodyContains(response, \"This is a test\")",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2394:         # Try delete with delete job permission",
          "2395:         self.add_permissions(\"extras.delete_job\")",
          "2396:         response = self.client.post(**request, follow=True)",
          "2400:         # assert Job still exists",
          "2401:         self.assertTrue(self._get_queryset().filter(name=job_name).exists())",
          "2403:         # Try delete as a superuser",
          "2404:         self.user.is_superuser = True",
          "2405:         response = self.client.post(**request, follow=True)",
          "2409:         # assert Job still exists",
          "2410:         self.assertTrue(self._get_queryset().filter(name=job_name).exists())",
          "",
          "[Removed Lines]",
          "2397:         self.assertHttpStatus(response, 403)",
          "2398:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2399:         self.assertIn(f\"Unable to delete Job {instance}. System Job cannot be deleted\", response_body)",
          "2406:         self.assertHttpStatus(response, 403)",
          "2407:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2408:         self.assertIn(f\"Unable to delete Job {instance}. System Job cannot be deleted\", response_body)",
          "",
          "[Added Lines]",
          "2328:         self.assertBodyContains(",
          "2329:             response, f\"Unable to delete Job {instance}. System Job cannot be deleted\", status_code=403",
          "2330:         )",
          "2337:         self.assertBodyContains(",
          "2338:             response, f\"Unable to delete Job {instance}. System Job cannot be deleted\", status_code=403",
          "2339:         )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2421:         # Try bulk delete with delete job permission",
          "2422:         self.add_permissions(\"extras.delete_job\")",
          "2423:         response = self.client.post(self._get_url(\"bulk_delete\"), data, follow=True)",
          "2429:         )",
          "2431:         # Try bulk delete as a superuser",
          "2432:         self.user.is_superuser = True",
          "2433:         response = self.client.post(self._get_url(\"bulk_delete\"), data, follow=True)",
          "2439:         )",
          "2441:     def validate_job_data_after_bulk_edit(self, pk_list, old_data):",
          "2442:         # Name is bulk-editable",
          "",
          "[Removed Lines]",
          "2424:         self.assertHttpStatus(response, 403)",
          "2425:         self.assertEqual(self._get_queryset().count(), initial_count)",
          "2426:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2427:         self.assertIn(",
          "2428:             f\"Unable to delete Job {system_job_queryset.first()}. System Job cannot be deleted\", response_body",
          "2434:         self.assertHttpStatus(response, 403)",
          "2435:         self.assertEqual(self._get_queryset().count(), initial_count)",
          "2436:         response_body = extract_page_body(response.content.decode(response.charset))",
          "2437:         self.assertIn(",
          "2438:             f\"Unable to delete Job {system_job_queryset.first()}. System Job cannot be deleted\", response_body",
          "",
          "[Added Lines]",
          "2355:         self.assertBodyContains(",
          "2356:             response,",
          "2357:             f\"Unable to delete Job {system_job_queryset.first()}. System Job cannot be deleted\",",
          "2358:             status_code=403,",
          "2360:         self.assertEqual(self._get_queryset().count(), initial_count)",
          "2365:         self.assertBodyContains(",
          "2366:             response,",
          "2367:             f\"Unable to delete Job {system_job_queryset.first()}. System Job cannot be deleted\",",
          "2368:             status_code=403,",
          "2370:         self.assertEqual(self._get_queryset().count(), initial_count)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2502:         self.add_permissions(\"extras.run_job\")",
          "2503:         for run_url in self.run_urls:",
          "2504:             response = self.client.get(run_url)",
          "2510:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[])",
          "2511:     def test_get_run_with_constrained_permission(self):",
          "",
          "[Removed Lines]",
          "2505:             self.assertHttpStatus(response, 200, msg=run_url)",
          "2507:             response_body = extract_page_body(response.content.decode(response.charset))",
          "2508:             self.assertIn(\"TestPass\", response_body)",
          "",
          "[Added Lines]",
          "2436:             self.assertBodyContains(response, \"TestPass\")",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2549:         for run_url in self.run_urls:",
          "2550:             response = self.client.post(run_url, self.data_run_immediately)",
          "2556:     @mock.patch(\"nautobot.extras.views.get_worker_count\", return_value=1)",
          "2557:     def test_run_now(self, _):",
          "",
          "[Removed Lines]",
          "2551:             self.assertHttpStatus(response, 200, msg=run_url)",
          "2553:             content = extract_page_body(response.content.decode(response.charset))",
          "2554:             self.assertIn(\"Celery worker process not running.\", content)",
          "",
          "[Added Lines]",
          "2479:             self.assertBodyContains(response, \"Celery worker process not running.\")",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2598:             reverse(\"extras:job_run\", kwargs={\"pk\": self.test_not_installed.pk}),",
          "2599:         ):",
          "2600:             response = self.client.post(run_url, self.data_run_immediately)",
          "2605:             self.assertFalse(JobResult.objects.filter(name=self.test_not_installed.name).exists())",
          "",
          "[Removed Lines]",
          "2601:             self.assertEqual(response.status_code, 200, msg=run_url)",
          "2602:             response_body = extract_page_body(response.content.decode(response.charset))",
          "2603:             self.assertIn(\"Job is not presently installed\", response_body)",
          "",
          "[Added Lines]",
          "2526:             self.assertBodyContains(response, \"Job is not presently installed\")",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2613:             reverse(\"extras:job_run\", kwargs={\"pk\": Job.objects.get(job_class_name=\"TestFail\").pk}),",
          "2614:         ):",
          "2615:             response = self.client.post(run_url, self.data_run_immediately)",
          "2619:             self.assertFalse(JobResult.objects.filter(name=\"fail.TestFail\").exists())",
          "2621:     def test_run_now_missing_args(self):",
          "",
          "[Removed Lines]",
          "2616:             self.assertEqual(response.status_code, 200, msg=run_url)",
          "2617:             response_body = extract_page_body(response.content.decode(response.charset))",
          "2618:             self.assertIn(\"Job is not enabled to be run\", response_body)",
          "",
          "[Added Lines]",
          "2539:             self.assertBodyContains(response, \"Job is not enabled to be run\")",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2773:         for i, run_url in enumerate(self.run_urls):",
          "2774:             data[\"_schedule_name\"] = f\"test {i}\"",
          "2775:             response = self.client.post(run_url, data)",
          "2781:     @mock.patch(\"nautobot.extras.views.get_worker_count\", return_value=1)",
          "2782:     def test_run_job_with_invalid_task_queue(self, _):",
          "",
          "[Removed Lines]",
          "2776:             self.assertHttpStatus(response, 200, msg=self.run_urls[1])",
          "2778:             content = extract_page_body(response.content.decode(response.charset))",
          "2779:             self.assertIn(\"Unable to schedule job: Job may have sensitive input variables.\", content)",
          "",
          "[Added Lines]",
          "2697:             self.assertBodyContains(response, \"Unable to schedule job: Job may have sensitive input variables.\")",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2817:         for run_url in self.run_urls:",
          "2818:             # Assert warning message shows in get",
          "2819:             response = self.client.get(run_url)",
          "2822:                 \"This job is flagged as possibly having sensitive variables but is also flagged as requiring approval.\",",
          "2824:             )",
          "2826:             # Assert run button is disabled",
          "2828:                 \"\"\"",
          "2829:                 <button type=\"submit\" name=\"_run\" id=\"id__run\" class=\"btn btn-primary\" disabled=\"disabled\">",
          "2830:                     <i class=\"mdi mdi-play\"></i> Run Job Now",
          "2831:                 </button>",
          "2832:                 \"\"\",",
          "2834:             )",
          "2835:             # Assert error message shows after post",
          "2836:             response = self.client.post(run_url, data)",
          "2841:                 \"Unable to run or schedule job: \"",
          "2842:                 \"This job is flagged as possibly having sensitive variables but is also flagged as requiring approval.\"",
          "2843:                 \"One of these two flags must be removed before this job can be scheduled or run.\",",
          "2845:             )",
          "2847:     def test_job_object_change_log_view(self):",
          "",
          "[Removed Lines]",
          "2820:             content = extract_page_body(response.content.decode(response.charset))",
          "2821:             self.assertIn(",
          "2823:                 content,",
          "2827:             self.assertInHTML(",
          "2833:                 content,",
          "2837:             self.assertHttpStatus(response, 200, msg=self.run_urls[1])",
          "2839:             content = extract_page_body(response.content.decode(response.charset))",
          "2840:             self.assertIn(",
          "2844:                 content,",
          "",
          "[Added Lines]",
          "2738:             self.assertBodyContains(",
          "2739:                 response,",
          "2744:             self.assertBodyContains(",
          "2745:                 response,",
          "2751:                 html=True,",
          "2755:             self.assertBodyContains(",
          "2756:                 response,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2849:         instance = self.test_pass",
          "2850:         self.add_permissions(\"extras.view_objectchange\", \"extras.view_job\")",
          "2851:         response = self.client.get(instance.get_changelog_url())",
          "2858: class JobButtonTestCase(",
          "",
          "[Removed Lines]",
          "2852:         content = extract_page_body(response.content.decode(response.charset))",
          "2854:         self.assertHttpStatus(response, 200)",
          "2855:         self.assertIn(f\"{instance.name} - Change Log\", content)",
          "",
          "[Added Lines]",
          "2767:         self.assertBodyContains(response, f\"{instance.name} - Change Log\")",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2949:     def test_view_object_with_job_button(self):",
          "2950:         \"\"\"Ensure that the job button is rendered.\"\"\"",
          "2951:         response = self.client.get(self.location_type.get_absolute_url(), follow=True)",
          "2957:     def test_task_queue_hidden_input_is_present(self):",
          "2958:         \"\"\"",
          "",
          "[Removed Lines]",
          "2952:         self.assertEqual(response.status_code, 200)",
          "2953:         content = extract_page_body(response.content.decode(response.charset))",
          "2954:         self.assertIn(f\"JobButton {self.location_type.name}\", content, content)",
          "2955:         self.assertIn(\"Click me!\", content, content)",
          "",
          "[Added Lines]",
          "2864:         self.assertBodyContains(response, f\"JobButton {self.location_type.name}\")",
          "2865:         self.assertBodyContains(response, \"Click me!\")",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2962:         self.job.task_queues = [\"overriden_queue\", \"default\", \"priority\"]",
          "2963:         self.job.save()",
          "2964:         response = self.client.get(self.location_type.get_absolute_url(), follow=True)",
          "2968:         self.job.task_queues_override = False",
          "2969:         self.job.save()",
          "2970:         response = self.client.get(self.location_type.get_absolute_url(), follow=True)",
          "2975:         )",
          "2977:     def test_view_object_with_unsafe_text(self):",
          "",
          "[Removed Lines]",
          "2965:         self.assertEqual(response.status_code, 200)",
          "2966:         content = extract_page_body(response.content.decode(response.charset))",
          "2967:         self.assertIn(f'<input type=\"hidden\" name=\"_task_queue\" value=\"{self.job.task_queues[0]}\">', content, content)",
          "2971:         self.assertEqual(response.status_code, 200)",
          "2972:         content = extract_page_body(response.content.decode(response.charset))",
          "2973:         self.assertIn(",
          "2974:             f'<input type=\"hidden\" name=\"_task_queue\" value=\"{settings.CELERY_TASK_DEFAULT_QUEUE}\">', content, content",
          "",
          "[Added Lines]",
          "2875:         self.assertBodyContains(response, f'<input type=\"hidden\" name=\"_task_queue\" value=\"{self.job.task_queues[0]}\">')",
          "2879:         self.assertBodyContains(",
          "2880:             response, f'<input type=\"hidden\" name=\"_task_queue\" value=\"{settings.CELERY_TASK_DEFAULT_QUEUE}\">'",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3426:         response = self.client.get(self._get_url(\"list\"))",
          "3427:         self.assertHttpStatus(response, 200)",
          "3428:         content = extract_page_body(response.content.decode(response.charset))",
          "3430:         self.assertIn(instance1.source.name, content, msg=content)",
          "3431:         self.assertIn(instance1.destination.name, content, msg=content)",
          "3432:         self.assertNotIn(instance2.source.name, content, msg=content)",
          "",
          "[Removed Lines]",
          "3429:         # TODO: it'd make test failures more readable if we strip the page headers/footers from the content",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3471:         self.add_permissions(\"extras.view_staticgroupassociation\")",
          "3472:         response = self.client.get(f\"{self._get_url('list')}?dynamic_group={sga1.dynamic_group.pk}\")",
          "3479: class StatusTestCase(",
          "",
          "[Removed Lines]",
          "3473:         self.assertHttpStatus(response, 200)",
          "3474:         content = extract_page_body(response.content.decode(response.charset))",
          "3476:         self.assertIn(sga1.get_absolute_url(), content, msg=content)",
          "",
          "[Added Lines]",
          "3378:         self.assertBodyContains(response, sga1.get_absolute_url())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3610:         response = self.client.post(**request)",
          "3611:         tag = Tag.objects.filter(name=self.form_data[\"name\"])",
          "3612:         self.assertFalse(tag.exists())",
          "3615:     def test_update_tags_remove_content_type(self):",
          "3616:         \"\"\"Test removing a tag content_type that is been tagged to a model\"\"\"",
          "",
          "[Removed Lines]",
          "3613:         self.assertIn(\"content_types: Select a valid choice\", str(response.content))",
          "",
          "[Added Lines]",
          "3515:         self.assertBodyContains(response, \"content_types: Select a valid choice\")",
          "",
          "---------------"
        ],
        "nautobot/ipam/tests/test_api.py||nautobot/ipam/tests/test_api.py": [
          "File: nautobot/ipam/tests/test_api.py -> nautobot/ipam/tests/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:         }",
          "201:         self.add_permissions(\"ipam.add_vrfdeviceassignment\")",
          "202:         response = self.client.post(self._get_list_url(), duplicate_device_create_data, format=\"json\", **self.header)",
          "205:         response = self.client.post(self._get_list_url(), duplicate_vm_create_data, format=\"json\", **self.header)",
          "208:         response = self.client.post(self._get_list_url(), invalid_create_data, format=\"json\", **self.header)",
          "213: class VRFPrefixAssignmentTest(APIViewTestCases.APIViewTestCase):",
          "",
          "[Removed Lines]",
          "203:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "204:         self.assertIn(\"The fields device, vrf must make a unique set.\", str(response.content))",
          "206:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "207:         self.assertIn(\"The fields virtual_machine, vrf must make a unique set.\", str(response.content))",
          "209:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "210:         self.assertIn(\"A VRF cannot be associated with both a device and a virtual machine.\", str(response.content))",
          "",
          "[Added Lines]",
          "203:         self.assertContains(",
          "204:             response, \"The fields device, vrf must make a unique set.\", status_code=status.HTTP_400_BAD_REQUEST",
          "205:         )",
          "207:         self.assertContains(",
          "208:             response, \"The fields virtual_machine, vrf must make a unique set.\", status_code=status.HTTP_400_BAD_REQUEST",
          "209:         )",
          "211:         self.assertContains(",
          "212:             response,",
          "213:             \"A VRF cannot be associated with both a device and a virtual machine.\",",
          "214:             status_code=status.HTTP_400_BAD_REQUEST,",
          "215:         )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:         }",
          "267:         self.add_permissions(\"ipam.add_vrfprefixassignment\")",
          "268:         response = self.client.post(self._get_list_url(), duplicate_create_data, format=\"json\", **self.header)",
          "271:         response = self.client.post(self._get_list_url(), wrong_namespace_create_data, format=\"json\", **self.header)",
          "274:         response = self.client.post(self._get_list_url(), missing_field_create_data, format=\"json\", **self.header)",
          "279: class RouteTargetTest(APIViewTestCases.APIViewTestCase):",
          "",
          "[Removed Lines]",
          "269:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "270:         self.assertIn(\"The fields vrf, prefix must make a unique set.\", str(response.content))",
          "272:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "273:         self.assertIn(\"Prefix must be in same namespace as VRF\", str(response.content))",
          "275:         self.assertHttpStatus(response, status.HTTP_400_BAD_REQUEST)",
          "276:         self.assertIn(\"This field may not be null.\", str(response.content))",
          "",
          "[Added Lines]",
          "274:         self.assertContains(",
          "275:             response, \"The fields vrf, prefix must make a unique set.\", status_code=status.HTTP_400_BAD_REQUEST",
          "276:         )",
          "278:         self.assertContains(",
          "279:             response, \"Prefix must be in same namespace as VRF\", status_code=status.HTTP_400_BAD_REQUEST",
          "280:         )",
          "282:         self.assertContains(response, \"This field may not be null.\", status_code=status.HTTP_400_BAD_REQUEST)",
          "",
          "---------------"
        ],
        "nautobot/ipam/tests/test_views.py||nautobot/ipam/tests/test_views.py": [
          "File: nautobot/ipam/tests/test_views.py -> nautobot/ipam/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:         url = reverse(\"ipam:prefix_ipaddresses\", args=(instance.pk,))",
          "357:         response = self.client.get(url)",
          "358:         self.assertHttpStatus(response, 200)",
          "360:         # This validates that both parent prefix and child prefix IPAddresses are present in parent prefix IPAddresses list",
          "361:         self.assertIn(\"5.5.10.1/23\", strip_tags(content))",
          "362:         self.assertIn(\"5.5.10.4/23\", strip_tags(content))",
          "364:         ip_address_tab = (",
          "365:             f'<li role=\"presentation\" class=\"active\"><a href=\"{url}\">IP Addresses <span class=\"badge\">2</span></a></li>'",
          "366:         )",
          "",
          "[Removed Lines]",
          "359:         content = response.content.decode(response.charset)",
          "363:         print(response.content.decode(response.charset))",
          "",
          "[Added Lines]",
          "359:         content = extract_page_body(response.content.decode(response.charset))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:             \"data\": post_data(self.form_data),",
          "441:         }",
          "442:         response = self.client.post(**request)",
          "446:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "447:     def test_move_ip_addresses_between_namespaces(self):",
          "",
          "[Removed Lines]",
          "443:         self.assertEqual(200, response.status_code)",
          "444:         self.assertIn(\"Host address cannot be changed once created\", str(response.content))",
          "",
          "[Added Lines]",
          "442:         self.assertBodyContains(response, \"Host address cannot be changed once created\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:             \"data\": post_data(form_data),",
          "462:         }",
          "463:         response = self.client.post(**request)",
          "466:         # Create an exact copy of the parent prefix but in a different namespace. See if the re-parenting is successful",
          "467:         new_parent = Prefix.objects.create(",
          "468:             prefix=instance.parent.prefix,",
          "",
          "[Removed Lines]",
          "464:         self.assertEqual(200, response.status_code)",
          "465:         self.assertIn(\"No suitable parent Prefix exists in this Namespace\", str(response.content))",
          "",
          "[Added Lines]",
          "462:         self.assertBodyContains(response, \"No suitable parent Prefix exists in this Namespace\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1151:             \"data\": post_data(self.form_data),",
          "1152:         }",
          "1153:         response = self.client.post(**request)",
          "1158:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "1159:     def test_service_cannot_be_assigned_to_both_device_and_vm(self):",
          "",
          "[Removed Lines]",
          "1154:         self.assertHttpStatus(response, 200)",
          "1155:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1156:         self.assertIn(\"Service with this Name and Device already exists.\", response_body)",
          "",
          "[Added Lines]",
          "1151:         self.assertBodyContains(response, \"Service with this Name and Device already exists.\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1173:             \"data\": post_data(self.form_data),",
          "1174:         }",
          "1175:         response = self.client.post(**request)",
          "1180:     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
          "1181:     def test_service_cannot_be_assigned_to_neither_device_nor_vm(self):",
          "",
          "[Removed Lines]",
          "1176:         self.assertHttpStatus(response, 200)",
          "1177:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1178:         self.assertIn(\"A service cannot be associated with both a device and a virtual machine.\", response_body)",
          "",
          "[Added Lines]",
          "1171:         self.assertBodyContains(response, \"A service cannot be associated with both a device and a virtual machine.\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1195:             \"data\": post_data(self.form_data),",
          "1196:         }",
          "1197:         response = self.client.post(**request)",
          "",
          "[Removed Lines]",
          "1198:         self.assertHttpStatus(response, 200)",
          "1199:         response_body = extract_page_body(response.content.decode(response.charset))",
          "1200:         self.assertIn(\"A service must be associated with either a device or a virtual machine.\", response_body)",
          "",
          "[Added Lines]",
          "1191:         self.assertBodyContains(response, \"A service must be associated with either a device or a virtual machine.\")",
          "",
          "---------------"
        ],
        "nautobot/project-static/js/nav_menu.js||nautobot/project-static/js/nav_menu.js": [
          "File: nautobot/project-static/js/nav_menu.js -> nautobot/project-static/js/nav_menu.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: document.addEventListener('DOMContentLoaded', function() {",
          "2:     const navbar = document.querySelector('.navbar-fixed-left');",
          "3:     const navbarHeader = document.querySelector('.navbar-header');",
          "4:     const mainContent = document.querySelector('#main-content');",
          "5:     const footer = document.querySelector('#footer');",
          "6:     const dropdownToggles = document.querySelectorAll('.navbar-fixed-left .navbar-nav > .dropdown > a[data-toggle=\"collapse\"]');",
          "7:     const dropdowns = document.querySelectorAll('.navbar-fixed-left .navbar-nav .collapse');",
          "8:     const toggler = document.querySelector('.navbar-toggler');",
          "9:     const togglerIcon = toggler.querySelector('.navbar-toggler-arrow');",
          "10:     let lastDropdownId = sessionStorage.getItem('lastOpenedDropdown');",
          "11:     let savedScrollPosition = sessionStorage.getItem('navbarScrollPosition');",
          "12:     let activeLink = sessionStorage.getItem('activeLink');",
          "13:     let expandedByHover = false;",
          "14:     let manuallyToggled = sessionStorage.getItem('manuallyToggled') === 'true';",
          "17:     function resetNavbarState() {",
          "18:         sessionStorage.removeItem('lastOpenedDropdown');",
          "19:         sessionStorage.removeItem('savedScrollPosition');",
          "20:         sessionStorage.removeItem('activeLink');",
          "21:         sessionStorage.removeItem('navbarCollapsed');",
          "22:         expandedByHover = false;",
          "23:     }",
          "25:     toggler.addEventListener('click', function() {",
          "26:         let isNowCollapsed;",
          "27:         if (expandedByHover) {",
          "28:             expandedByHover = false;",
          "29:             isNowCollapsed = false;",
          "30:         } else {",
          "31:             isNowCollapsed = navbar.classList.toggle('collapsed');",
          "32:         }",
          "33:         sessionStorage.setItem('navbarCollapsed', isNowCollapsed ? 'true' : 'false');",
          "35:         sessionStorage.setItem('navbarManuallyToggled', 'true');",
          "37:         sessionStorage.setItem('navbarExpanded', !isNowCollapsed ? 'true' : 'false');",
          "38:         if (isNowCollapsed) {",
          "39:             togglerIcon.classList.add(\"mdi-rotate-90\");",
          "40:             togglerIcon.classList.remove(\"mdi-rotate-270\");",
          "41:         } else {",
          "42:             togglerIcon.classList.remove(\"mdi-rotate-90\");",
          "43:             togglerIcon.classList.add(\"mdi-rotate-270\");",
          "44:         }",
          "45:         adjustElementsForNavbarState(isNowCollapsed);",
          "46:     });",
          "49:     const navbarCollapsed = sessionStorage.getItem('navbarCollapsed') === 'true';",
          "50:     if (navbarCollapsed) {",
          "51:         navbar.classList.add('collapsed');",
          "52:         togglerIcon.classList.remove(\"mdi-rotate-270\");",
          "53:         togglerIcon.classList.add(\"mdi-rotate-90\");",
          "54:         adjustElementsForNavbarState(true);",
          "55:     }",
          "57:     function adjustElementsForNavbarState(isCollapsed) {",
          "58:         const marginLeftValue = isCollapsed ? '-240px' : '0px';",
          "59:         mainContent.style.marginLeft = marginLeftValue;",
          "60:         if(footer) footer.style.marginLeft = marginLeftValue;",
          "61:         toggler.style.left = isCollapsed ? '-5px' : '225px';",
          "62:     }",
          "65:     document.addEventListener('mousemove', function(e) {",
          "66:         if (",
          "67:             e.clientX < 20  // 20px from the left edge",
          "68:             && (e.clientY < 20 || e.clientY > 50) // not near the toggle button",
          "69:             && navbar.classList.contains('collapsed')",
          "70:         ) {",
          "71:             navbar.classList.remove('collapsed');",
          "72:             toggler.style.left = '225px';",
          "73:             expandedByHover = true; // Set flag when expanded by hover",
          "74:         } else if (expandedByHover && e.clientX > 240) {",
          "75:             navbar.classList.add('collapsed');",
          "76:             toggler.style.left = '-5px';",
          "77:             expandedByHover = false; // Reset flag after auto-collapse",
          "78:         }",
          "79:     });",
          "81:     function collapseNavbarIfNeeded() {",
          "82:         const windowWidth = window.innerWidth;",
          "83:         const navbarManuallyToggled = sessionStorage.getItem('navbarManuallyToggled') === 'true';",
          "84:         const navbarExpanded = sessionStorage.getItem('navbarExpanded') === 'true';",
          "85:         const isCollapsed = navbar.classList.contains('collapsed');",
          "87:         if (windowWidth < 1007) {",
          "88:             if (!isCollapsed) {",
          "89:                 navbar.classList.add('collapsed');",
          "90:                 togglerIcon.classList.remove(\"mdi-rotate-270\");",
          "91:                 togglerIcon.classList.add(\"mdi-rotate-90\");",
          "92:                 adjustElementsForNavbarState(true);",
          "93:                 sessionStorage.setItem('navbarCollapsed', 'true');",
          "94:             }",
          "95:         } else if (windowWidth >= 1007) {",
          "97:             if (isCollapsed && (navbarManuallyToggled && navbarExpanded)) {",
          "98:                 navbar.classList.remove('collapsed');",
          "99:                 togglerIcon.classList.add(\"mdi-rotate-270\");",
          "100:                 togglerIcon.classList.remove(\"mdi-rotate-90\");",
          "101:                 adjustElementsForNavbarState(false);",
          "102:                 sessionStorage.setItem('navbarCollapsed', 'false');",
          "103:             }",
          "105:         }",
          "106:     }",
          "109:     function toggleNavbarOnResize() {",
          "110:         collapseNavbarIfNeeded(); // Use the new function to decide whether to collapse",
          "111:     }",
          "113:     let debouncedToggleNavbarOnResize = debounce(toggleNavbarOnResize, 50);",
          "114:     window.addEventListener('resize', debouncedToggleNavbarOnResize);",
          "117:     let navbarItems = document.querySelectorAll('.navbar-fixed-left .navbar-nav > .dropdown > .dropdown-toggle > #dropdown_title');",
          "120:     navbarItems.forEach(function(item) {",
          "122:         if (item.scrollWidth > item.clientWidth) {",
          "124:             item.setAttribute('title', item.innerText);",
          "127:             $(item).tooltip();",
          "128:         }",
          "129:     });",
          "132:     const homeLink = document.querySelector('.navbar-fixed-left .navbar-brand');",
          "133:     if (homeLink) {",
          "134:         homeLink.addEventListener('click', function() {",
          "135:             resetNavbarState();",
          "136:         });",
          "137:     }",
          "140:     function closeAllDropdownsExcept(exceptId) {",
          "141:         dropdowns.forEach(function(collapse) {",
          "142:             if (collapse.id !== exceptId && collapse.classList.contains('in')) {",
          "143:                 $(collapse).collapse('hide');",
          "144:             }",
          "145:         });",
          "146:     }",
          "149:     function addLinkClickListeners() {",
          "150:         const dropdownLinks = document.querySelectorAll('.navbar-fixed-left .navbar-nav > .dropdown > .nav-dropdown-menu > li > a');",
          "152:         dropdownLinks.forEach(function(link) {",
          "153:             link.addEventListener('click', function() {",
          "154:                 sessionStorage.setItem('activeLink', link.getAttribute('href'));",
          "155:             });",
          "156:         });",
          "157:         collapseNavbarIfNeeded();",
          "158:     }",
          "161:     dropdownToggles.forEach(function(toggle) {",
          "162:         toggle.addEventListener('click', function(event) {",
          "163:             event.preventDefault();",
          "164:             const collapseElement = document.getElementById(this.getAttribute('href').substring(1));",
          "166:             if (!collapseElement.classList.contains('in')) {",
          "167:                 closeAllDropdownsExcept(collapseElement.id);",
          "168:                 $(collapseElement).collapse('show');",
          "169:                 sessionStorage.setItem('lastOpenedDropdown', collapseElement.id);",
          "170:             } else {",
          "171:                 $(collapseElement).collapse('hide');",
          "172:                 sessionStorage.removeItem('lastOpenedDropdown');",
          "173:             }",
          "174:         });",
          "175:     });",
          "178:     if (lastDropdownId) {",
          "179:         let lastDropdownMenu = document.getElementById(lastDropdownId);",
          "180:         if (lastDropdownMenu && !lastDropdownMenu.classList.contains('in')) {",
          "181:             $(lastDropdownMenu).collapse('show');",
          "182:         }",
          "183:     }",
          "186:     if (savedScrollPosition) {",
          "187:         navbar.scrollTop = savedScrollPosition;",
          "188:     }",
          "191:     function adjustNavbarHeaderVisibility() {",
          "193:         if (navbar.classList.contains('collapsed') && mainContent) {",
          "194:             const mainContentTop = mainContent.getBoundingClientRect().top;",
          "196:             if (mainContentTop < 0) {",
          "198:                 navbarHeader.style.top = '-60px'; // height of navbar header",
          "199:             } else {",
          "201:                 navbarHeader.style.top = '0';",
          "202:             }",
          "203:         }",
          "204:     }",
          "207:     window.addEventListener('scroll', adjustNavbarHeaderVisibility);",
          "210:     adjustNavbarHeaderVisibility();",
          "213:     function debounce(func, wait, immediate) {",
          "214:         let timeout;",
          "215:         return function() {",
          "216:             const context = this, args = arguments;",
          "217:             const later = function() {",
          "218:                 timeout = null;",
          "219:                 if (!immediate) func.apply(context, args);",
          "220:             };",
          "221:             const callNow = immediate && !timeout;",
          "222:             clearTimeout(timeout);",
          "223:             timeout = setTimeout(later, wait);",
          "224:             if (callNow) func.apply(context, args);",
          "225:         };",
          "226:     }",
          "229:     navbar.addEventListener('scroll', debounce(function() {",
          "230:         sessionStorage.setItem('navbarScrollPosition', navbar.scrollTop);",
          "231:     }, 250));",
          "234:     addLinkClickListeners();",
          "237:     if (activeLink) {",
          "238:         let previouslyClickedLink = document.querySelector('.navbar-fixed-left .navbar-nav > .dropdown > .nav-dropdown-menu > li > a[href=\"' + activeLink + '\"]');",
          "239:         let currentLocation = window.location.pathname + window.location.search;",
          "241:         if (previouslyClickedLink && currentLocation.includes(previouslyClickedLink.getAttribute('href'))) {",
          "242:             previouslyClickedLink.parentElement.classList.add('active');",
          "243:         }",
          "244:         else {",
          "245:             sessionStorage.removeItem('activeLink');",
          "246:         }",
          "247:     }",
          "249: });",
          "",
          "---------------"
        ],
        "nautobot/users/tests/test_views.py||nautobot/users/tests/test_views.py": [
          "File: nautobot/users/tests/test_views.py -> nautobot/users/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from django.urls import reverse",
          "8: from social_django.utils import load_backend, load_strategy",
          "12: User = get_user_model()",
          "",
          "[Removed Lines]",
          "10: from nautobot.core.testing import TestCase",
          "",
          "[Added Lines]",
          "10: from nautobot.core.testing import TestCase, utils",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         preferences_response = self.client.get(reverse(\"user:preferences\"))",
          "22:         api_tokens_response = self.client.get(reverse(\"user:token_list\"))",
          "23:         for response in [profile_response, preferences_response, api_tokens_response]:",
          "26:         # Check GET change_password functionality",
          "27:         get_response = self.client.get(reverse(\"user:change_password\"))",
          "30:         # Check POST change_password functionality",
          "31:         post_response = self.client.post(",
          "",
          "[Removed Lines]",
          "24:             self.assertIn(\"Change Password\", str(response.content))",
          "28:         self.assertIn(\"New password confirmation\", str(get_response.content))",
          "",
          "[Added Lines]",
          "24:             self.assertBodyContains(response, \"Change Password\")",
          "28:         self.assertBodyContains(get_response, \"New password confirmation\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:                 \"new_password2\": \"baz\",",
          "37:             },",
          "38:         )",
          "41:     @override_settings(",
          "42:         AUTHENTICATION_BACKENDS=[",
          "",
          "[Removed Lines]",
          "39:         self.assertIn(\"The two password fields\", str(post_response.content))",
          "",
          "[Added Lines]",
          "39:         self.assertBodyContains(post_response, \"The two password fields\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:             preferences_response = self.client.get(reverse(\"user:preferences\"))",
          "78:             api_tokens_response = self.client.get(reverse(\"user:token_list\"))",
          "79:             for response in [profile_response, preferences_response, api_tokens_response]:",
          "82:             # Check GET and POST change_password functionality",
          "83:             get_response = self.client.get(reverse(\"user:change_password\"), follow=True)",
          "84:             post_response = self.client.post(reverse(\"user:change_password\"), follow=True)",
          "85:             for response in [get_response, post_response]:",
          "87:                 # Check redirect",
          "89:                 # Check warning message",
          "96: class AdvancedProfileSettingsViewTest(TestCase):",
          "",
          "[Removed Lines]",
          "80:                 self.assertNotIn(\"Change Password\", str(response.content))",
          "86:                 self.assertNotIn(\"New password confirmation\", str(response.content))",
          "88:                 self.assertIn(\"User Profile\", str(response.content))",
          "90:                 self.assertIn(",
          "91:                     \"Remotely authenticated user credentials cannot be changed within Nautobot.\",",
          "92:                     str(response.content),",
          "93:                 )",
          "",
          "[Added Lines]",
          "80:                 self.assertNotIn(\"Change Password\", utils.extract_page_body(response.content.decode(response.charset)))",
          "86:                 content = utils.extract_page_body(response.content.decode(response.charset))",
          "87:                 self.assertNotIn(\"New password confirmation\", content)",
          "89:                 self.assertIn(\"User Profile\", content)",
          "91:                 self.assertIn(\"Remotely authenticated user credentials cannot be changed within Nautobot.\", content)",
          "",
          "---------------"
        ],
        "nautobot/virtualization/tests/test_views.py||nautobot/virtualization/tests/test_views.py": [
          "File: nautobot/virtualization/tests/test_views.py -> nautobot/virtualization/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         self.add_permissions(\"virtualization.view_virtualmachine\")",
          "240:         url = self._get_url(\"list\") + \"?sort=primary_ip\"",
          "241:         response = self.client.get(url)",
          "249: class VMInterfaceTestCase(ViewTestCases.DeviceComponentViewTestCase):",
          "",
          "[Removed Lines]",
          "242:         self.assertEqual(response.status_code, 200)",
          "243:         response = response.content.decode(response.charset)",
          "244:         self.assertInHTML(\"Virtual Machine 1\", response)",
          "245:         self.assertInHTML(\"Virtual Machine 2\", response)",
          "246:         self.assertInHTML(\"Virtual Machine 3\", response)",
          "",
          "[Added Lines]",
          "242:         self.assertBodyContains(response, \"Virtual Machine 1\")",
          "243:         self.assertBodyContains(response, \"Virtual Machine 2\")",
          "244:         self.assertBodyContains(response, \"Virtual Machine 3\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ea5797ea43646d5d8b29433e4c707b5a9758146",
      "candidate_info": {
        "commit_hash": "2ea5797ea43646d5d8b29433e4c707b5a9758146",
        "repo": "nautobot/nautobot",
        "commit_url": "https://github.com/nautobot/nautobot/commit/2ea5797ea43646d5d8b29433e4c707b5a9758146",
        "files": [
          "changes/5647.security",
          "nautobot/core/templates/generic/object_list.html",
          "nautobot/core/tests/test_views.py"
        ],
        "message": "[LTM] Fix quoting of query parameters in list view (#5647)\n\n* Add proper quoting of object-list filters\n\n* Add unit test\n\n* Change fragment\n\n* Fix removal of filter params\n\n* Use location.assign rather than location.replace, close modal on form submit",
        "before_after_code_files": [
          "changes/5647.security||changes/5647.security",
          "nautobot/core/templates/generic/object_list.html||nautobot/core/templates/generic/object_list.html",
          "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "nautobot/core/templates/generic/object_list.html||nautobot/core/templates/generic/object_list.html",
            "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py"
          ],
          "candidate": [
            "nautobot/core/templates/generic/object_list.html||nautobot/core/templates/generic/object_list.html",
            "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py"
          ]
        }
      },
      "candidate_diff": {
        "changes/5647.security||changes/5647.security": [
          "File: changes/5647.security -> changes/5647.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fixed a reflected-XSS vulnerability ([GHSA-jxgr-gcj5-cqqg](https://github.com/nautobot/nautobot/security/advisories/GHSA-jxgr-gcj5-cqqg)) in object-list view rendering of user-provided query parameters.",
          "",
          "---------------"
        ],
        "nautobot/core/templates/generic/object_list.html||nautobot/core/templates/generic/object_list.html": [
          "File: nautobot/core/templates/generic/object_list.html -> nautobot/core/templates/generic/object_list.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                     class=\"remove-filter-param\"",
          "69:                     title=\"Remove all items\"",
          "70:                     data-field-type=\"parent\"",
          "72:             >\u00d7</span>",
          "73:             <ul class=\"filter-selection-rendered\">",
          "74:                 {% for value in field.values %}",
          "",
          "[Removed Lines]",
          "71:                     data-field-value={{ field.name }}",
          "",
          "[Added Lines]",
          "71:                     data-field-value=\"{{ field.name }}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:                     <span",
          "80:                             class=\"filter-selection-choice-remove remove-filter-param\"",
          "81:                             data-field-type=\"child\"",
          "84:                     >\u00d7</span>{{ value.display }}",
          "85:                 </li>",
          "86:                 {% endfor %}",
          "",
          "[Removed Lines]",
          "82:                             data-field-parent={{ field.name }}",
          "83:                             data-field-value={{ value.name }}",
          "",
          "[Added Lines]",
          "82:                             data-field-parent=\"{{ field.name }}\"",
          "83:                             data-field-value=\"{{ value.name }}\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:     $(\".remove-filter-param\").on(\"click\", function(){",
          "189:         let type = $(this).attr(\"data-field-type\");",
          "190:         let field_value = $(this).attr(\"data-field-value\");",
          "193:         if (type === \"parent\") {",
          "195:         } else {",
          "196:             let parent = $(this).attr(\"data-field-parent\");",
          "198:         }",
          "200:     })",
          "",
          "[Removed Lines]",
          "188:         let query_params = location.search;",
          "191:         let query_string = location.search.substr(1).split(\"&\");",
          "194:             query_string = query_string.filter(item => item.search(field_value) < 0);",
          "197:             query_string = query_string.filter(item => item.search(parent + \"=\" + field_value) < 0)",
          "199:         location.replace(\"?\" + query_string.join(\"&\"))",
          "",
          "[Added Lines]",
          "188:         let query_params = new URLSearchParams(location.search);",
          "194:             query_params.delete(field_value);",
          "198:             query_params.delete(parent, field_value);",
          "200:         location.assign(\"?\" + query_params);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:         q_field_phantom.val(q_field.val())",
          "211:         dynamic_form.append(q_field_phantom);",
          "217:     })",
          "",
          "[Removed Lines]",
          "213:         let search_query = $(\"#dynamic-filter-form, #default-filter form\").serialize()",
          "215:         search_query = \"&\" + search_query.replace(/([^&]+=[^&]+&)(?=.*\\1)/g, \"\")",
          "216:         location.replace(\"?\" + search_query)",
          "",
          "[Added Lines]",
          "217:         let search_query = new URLSearchParams()",
          "218:         let dynamic_query = new URLSearchParams(new FormData(document.getElementById(\"dynamic-filter-form\")));",
          "219:         dynamic_query.forEach((value, key) => { if (value != \"\") { search_query.append(key, value); }});",
          "220:         let default_query = new URLSearchParams(new FormData(document.getElementById(\"default-filter\").firstElementChild));",
          "221:         default_query.forEach((value, key) => {",
          "222:             if (value != \"\" && !search_query.has(key, value)) { search_query.append(key, value); }",
          "223:         });",
          "224:         $(\"#FilterForm_modal\").modal(\"hide\");",
          "225:         location.assign(\"?\" + search_query);",
          "",
          "---------------"
        ],
        "nautobot/core/tests/test_views.py||nautobot/core/tests/test_views.py": [
          "File: nautobot/core/tests/test_views.py -> nautobot/core/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:             response.content.decode(response.charset),",
          "164:         )",
          "167: class ForceScriptNameTestcase(TestCase):",
          "168:     \"\"\"Basic test to assert that `settings.FORCE_SCRIPT_NAME` works as intended.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     def test_filtering_crafted_query_params(self):",
          "167:         \"\"\"Test for reflected-XSS vulnerability GHSA-jxgr-gcj5-cqqg.\"\"\"",
          "168:         self.add_permissions(\"dcim.view_location\")",
          "169:         query_param = \"?location_type=1 onmouseover=alert('hi') foo=bar\"",
          "170:         url = reverse(\"dcim:location_list\") + query_param",
          "171:         response = self.client.get(url)",
          "172:         self.assertHttpStatus(response, 200)",
          "173:         response_content = response.content.decode(response.charset)",
          "174:         # The important thing here is that the data-field-parent and data-field-value are correctly quoted",
          "175:         self.assertInHTML(",
          "176:             \"\"\"",
          "177: <span class=\"filter-selection-choice-remove remove-filter-param\"",
          "178:       data-field-type=\"child\"",
          "179:       data-field-parent=\"location_type\"",
          "180:       data-field-value=\"1 onmouseover=alert(&#x27;hi&#x27;) foo=bar\"",
          "181: >\u00d7</span>\"\"\",  # noqa: RUF001 - ambiguous-unicode-character-string",
          "182:             response_content,",
          "183:         )",
          "",
          "---------------"
        ]
      }
    }
  ]
}