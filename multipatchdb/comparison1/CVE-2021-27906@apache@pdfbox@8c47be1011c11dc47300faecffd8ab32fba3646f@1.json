{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9501f581e364a172ba38f6a2a15d7eca46845f34",
      "candidate_info": {
        "commit_hash": "9501f581e364a172ba38f6a2a15d7eca46845f34",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9501f581e364a172ba38f6a2a15d7eca46845f34",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ],
        "message": "PDFBOX-4964: add warn log message when skipping unexpected dir objects\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882000 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "928:                 {",
          "929:                     seqSource.unread(badString.getBytes(ISO_8859_1));",
          "930:                 }",
          "931:             }",
          "932:         }",
          "933:         return null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:                 else",
          "932:                 {",
          "933:                     LOG.warn(\"Skipped unexpected dir object = '\" + badString + \"' at offset \"",
          "934:                             + seqSource.getPosition());",
          "935:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5e47f032d46bdd0feb7c3fd91d60934350b8617",
      "candidate_info": {
        "commit_hash": "a5e47f032d46bdd0feb7c3fd91d60934350b8617",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a5e47f032d46bdd0feb7c3fd91d60934350b8617",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java"
        ],
        "message": "PDFBOX-5122: optimize by not using RGB loop, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887326 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:                 float[] rgbFloat = alternateColorSpace.toRGB(result);",
          "334:                 map1.put(key, rgb.clone());",
          "",
          "[Removed Lines]",
          "328:                 for (int s = 0; s < 3; s++)",
          "329:                 {",
          "331:                     rgb[s] = (int) (rgbFloat[s] * 255f);",
          "332:                 }",
          "",
          "[Added Lines]",
          "329:                 rgb[0] = (int) (rgbFloat[0] * 255f);",
          "330:                 rgb[1] = (int) (rgbFloat[1] * 255f);",
          "331:                 rgb[2] = (int) (rgbFloat[2] * 255f);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaa74f94dd782bafc4eae9a1375278b1d19f74e0",
      "candidate_info": {
        "commit_hash": "aaa74f94dd782bafc4eae9a1375278b1d19f74e0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/aaa74f94dd782bafc4eae9a1375278b1d19f74e0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ],
        "message": "PDFBOX-4892: reset the currentPageNumber for a case if the split method will be used several times + optimize processAnnotations, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888352 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     private int endPage = Integer.MAX_VALUE;",
          "47:     private List<PDDocument> destinationDocuments;",
          "51:     private MemoryUsageSetting memoryUsageSetting = null;",
          "",
          "[Removed Lines]",
          "49:     private int currentPageNumber = 0;",
          "",
          "[Added Lines]",
          "49:     private int currentPageNumber;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     public List<PDDocument> split(PDDocument document) throws IOException",
          "81:     {",
          "82:         destinationDocuments = new ArrayList<PDDocument>();",
          "83:         sourceDocument = document;",
          "84:         processPages();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         currentPageNumber = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239:             {",
          "240:                 PDAnnotationLink link = (PDAnnotationLink)annotation;",
          "241:                 PDDestination destination = link.getDestination();",
          "243:                 {",
          "249:                 }",
          "250:                 if (destination instanceof PDPageDestination)",
          "251:                 {",
          "",
          "[Removed Lines]",
          "242:                 if (destination == null && link.getAction() != null)",
          "244:                     PDAction action = link.getAction();",
          "245:                     if (action instanceof PDActionGoTo)",
          "246:                     {",
          "247:                         destination = ((PDActionGoTo)action).getDestination();",
          "248:                     }",
          "",
          "[Added Lines]",
          "244:                 PDAction action = link.getAction();",
          "245:                 if (destination == null && action instanceof PDActionGoTo)",
          "247:                     destination = ((PDActionGoTo) action).getDestination();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d1e5913a92ba554d5519cdff0f8070bd66ba129",
      "candidate_info": {
        "commit_hash": "7d1e5913a92ba554d5519cdff0f8070bd66ba129",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7d1e5913a92ba554d5519cdff0f8070bd66ba129",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ],
        "message": "PDFBOX-4985: better name for default fixup applied to AcroForm\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883030 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import org.apache.pdfbox.debugger.ui.ImageTypeMenu;",
          "54: import org.apache.pdfbox.debugger.ui.RenderDestinationMenu;",
          "55: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "57: import org.apache.pdfbox.pdmodel.fixup.PDDocumentFixup;",
          "58: import org.apache.pdfbox.pdmodel.interactive.action.PDAction;",
          "59: import org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo;",
          "",
          "[Removed Lines]",
          "56: import org.apache.pdfbox.pdmodel.fixup.AcroFormFixup;",
          "",
          "[Added Lines]",
          "56: import org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     {",
          "166:         boolean repairSelected = PDFDebugger.repairAcroFormMenuItem.isSelected();",
          "168:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(fixup);",
          "170:         if (acroForm == null)",
          "",
          "[Removed Lines]",
          "167:         PDDocumentFixup fixup = repairSelected ? new AcroFormFixup(document) : null;",
          "",
          "[Added Lines]",
          "167:         PDDocumentFixup fixup = repairSelected ? new AcroFormDefaultFixup(document) : null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240:         if (actionEvent.getSource() == PDFDebugger.repairAcroFormMenuItem)",
          "241:         {",
          "242:             boolean repairSelected = PDFDebugger.repairAcroFormMenuItem.isSelected();",
          "244:             document.getDocumentCatalog().getAcroForm(fixup);",
          "245:             startRendering();",
          "246:         }",
          "",
          "[Removed Lines]",
          "243:             PDDocumentFixup fixup = repairSelected ? new AcroFormFixup(document) : null;",
          "",
          "[Added Lines]",
          "243:             PDDocumentFixup fixup = repairSelected ? new AcroFormDefaultFixup(document) : null;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.pdfbox.pdmodel.common.PDPageLabels;",
          "37: import org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo;",
          "38: import org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot;",
          "40: import org.apache.pdfbox.pdmodel.fixup.PDDocumentFixup;",
          "41: import org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent;",
          "42: import org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties;",
          "",
          "[Removed Lines]",
          "39: import org.apache.pdfbox.pdmodel.fixup.AcroFormFixup;",
          "",
          "[Added Lines]",
          "39: import org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     public PDAcroForm getAcroForm()",
          "112:     {",
          "114:     }",
          "",
          "[Removed Lines]",
          "113:         return getAcroForm(new AcroFormFixup(document));",
          "",
          "[Added Lines]",
          "113:         return getAcroForm(new AcroFormDefaultFixup(document));",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormDefaultFixup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor;",
          "22: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor;",
          "25: {",
          "27:     {",
          "28:         super(document);",
          "29:     }",
          "",
          "[Removed Lines]",
          "24: public class AcroFormFixup extends AbstractFixup",
          "26:     public AcroFormFixup(PDDocument document)",
          "",
          "[Added Lines]",
          "24: public class AcroFormDefaultFixup extends AbstractFixup",
          "26:     public AcroFormDefaultFixup(PDDocument document)",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.pdfbox.io.IOUtils;",
          "28: import org.apache.pdfbox.pdmodel.PDDocument;",
          "29: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "31: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "30: import org.apache.pdfbox.pdmodel.fixup.AcroFormFixup;",
          "",
          "[Added Lines]",
          "30: import org.apache.pdfbox.pdmodel.fixup.AcroFormDefaultFixup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "120:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "121:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "123:             assertEquals(\"After rebuild there shall be \" + numFormFieldsByAcrobat + \" fields\", numFormFieldsByAcrobat, acroForm.getFields().size());",
          "124:         }",
          "125:         finally",
          "",
          "[Removed Lines]",
          "122:             PDAcroForm acroForm = catalog.getAcroForm(new AcroFormFixup(testPdf));",
          "",
          "[Added Lines]",
          "122:             PDAcroForm acroForm = catalog.getAcroForm(new AcroFormDefaultFixup(testPdf));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03546518344d69722f9b65d70d3b100ef1eddb07",
      "candidate_info": {
        "commit_hash": "03546518344d69722f9b65d70d3b100ef1eddb07",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/03546518344d69722f9b65d70d3b100ef1eddb07",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"
        ],
        "message": "PDFBOX-4892: avoid ClassCastException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888052 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:                     while ((nextToken = parseNextToken()) instanceof COSName)",
          "261:                     {",
          "262:                         Object value = parseNextToken();",
          "263:                         imageParams.setItem((COSName) nextToken, (COSBase) value);",
          "264:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:                         if (!(value instanceof COSBase))",
          "264:                         {",
          "265:                             LOG.warn(\"Unexpected token in inline image dictionary at offset \" +",
          "266:                                     seqSource.getPosition());",
          "267:                             break;",
          "268:                         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}