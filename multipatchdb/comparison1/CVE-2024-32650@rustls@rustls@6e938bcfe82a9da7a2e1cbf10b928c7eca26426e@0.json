{
  "cve_id": "CVE-2024-32650",
  "cve_desc": "Rustls is a modern TLS library written in Rust. `rustls::ConnectionCommon::complete_io` could fall into an infinite loop based on network input. When using a blocking rustls server, if a client send a `close_notify` message immediately after `client_hello`, the server's `complete_io` will get in an infinite loop. This vulnerability is fixed in 0.23.5, 0.22.4, and 0.21.11.",
  "repo": "rustls/rustls",
  "patch_hash": "6e938bcfe82a9da7a2e1cbf10b928c7eca26426e",
  "patch_info": {
    "commit_hash": "6e938bcfe82a9da7a2e1cbf10b928c7eca26426e",
    "repo": "rustls/rustls",
    "commit_url": "https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e",
    "files": [
      "rustls/src/conn.rs",
      "rustls/tests/api.rs"
    ],
    "message": "complete_io: bail out if progress is impossible\n\nHave a test that demonstrates another route to reaching this\nstate: a fully & cleanly closed connection.",
    "before_after_code_files": [
      "rustls/src/conn.rs||rustls/src/conn.rs",
      "rustls/tests/api.rs||rustls/tests/api.rs"
    ]
  },
  "patch_diff": {
    "rustls/src/conn.rs||rustls/src/conn.rs": [
      "File: rustls/src/conn.rs -> rustls/src/conn.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "553:         loop {",
      "554:             let until_handshaked = self.is_handshaking();",
      "556:             while self.wants_write() {",
      "557:                 wrlen += self.write_tls(io)?;",
      "558:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "556:             if !self.wants_write() && !self.wants_read() {",
      "558:                 return Ok((rdlen, wrlen));",
      "559:             }",
      "",
      "---------------"
    ],
    "rustls/tests/api.rs||rustls/tests/api.rs": [
      "File: rustls/tests/api.rs -> rustls/tests/api.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "6335:     );",
      "6336: }",
      "6338: struct FakeStream<'a>(&'a [u8]);",
      "6340: impl<'a> io::Read for FakeStream<'a> {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6338: #[test]",
      "6339: fn test_complete_io_with_no_io_needed() {",
      "6340:     let (mut client, mut server) = make_pair(KeyType::Rsa2048);",
      "6341:     do_handshake(&mut client, &mut server);",
      "6342:     client",
      "6343:         .writer()",
      "6344:         .write_all(b\"hello\")",
      "6345:         .unwrap();",
      "6346:     client.send_close_notify();",
      "6347:     transfer(&mut client, &mut server);",
      "6348:     server.process_new_packets().unwrap();",
      "6349:     server",
      "6350:         .writer()",
      "6351:         .write_all(b\"hello\")",
      "6352:         .unwrap();",
      "6353:     server.send_close_notify();",
      "6354:     transfer(&mut server, &mut client);",
      "6355:     client.process_new_packets().unwrap();",
      "6358:     assert!(!client.wants_write());",
      "6359:     assert!(!client.wants_read());",
      "6360:     assert!(!server.wants_write());",
      "6361:     assert!(!server.wants_read());",
      "6362:     assert_eq!(",
      "6363:         client",
      "6364:             .complete_io(&mut FakeStream(&[]))",
      "6365:             .unwrap(),",
      "6366:         (0, 0)",
      "6367:     );",
      "6368:     assert_eq!(",
      "6369:         server",
      "6370:             .complete_io(&mut FakeStream(&[]))",
      "6371:             .unwrap(),",
      "6372:         (0, 0)",
      "6373:     );",
      "6374: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14cb5d2eac709f6c9bd46c697f090bb1f1543db1",
      "candidate_info": {
        "commit_hash": "14cb5d2eac709f6c9bd46c697f090bb1f1543db1",
        "repo": "rustls/rustls",
        "commit_url": "https://github.com/rustls/rustls/commit/14cb5d2eac709f6c9bd46c697f090bb1f1543db1",
        "files": [
          "Cargo.lock",
          "fuzz/Cargo.lock",
          "rustls/Cargo.toml"
        ],
        "message": "Prepare 0.23.5",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock",
          "fuzz/Cargo.lock||fuzz/Cargo.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rustls/rustls/pull/1905"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "2176: [[package]]",
          "2177: name = \"rustls\"",
          "2179: dependencies = [",
          "2180:  \"aws-lc-rs\",",
          "2181:  \"base64 0.22.0\",",
          "",
          "[Removed Lines]",
          "2178: version = \"0.23.4\"",
          "",
          "[Added Lines]",
          "2178: version = \"0.23.5\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2209:  \"fxhash\",",
          "2210:  \"itertools\",",
          "2211:  \"rayon\",",
          "2213:  \"rustls-pemfile 2.1.2\",",
          "2214:  \"rustls-pki-types\",",
          "2215:  \"tikv-jemallocator\",",
          "",
          "[Removed Lines]",
          "2212:  \"rustls 0.23.4\",",
          "",
          "[Added Lines]",
          "2212:  \"rustls 0.23.5\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2222:  \"hickory-resolver\",",
          "2223:  \"regex\",",
          "2224:  \"ring\",",
          "2226: ]",
          "2228: [[package]]",
          "",
          "[Removed Lines]",
          "2225:  \"rustls 0.23.4\",",
          "",
          "[Added Lines]",
          "2225:  \"rustls 0.23.5\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2235:  \"log\",",
          "2236:  \"mio\",",
          "2237:  \"rcgen\",",
          "2239:  \"rustls-pemfile 2.1.2\",",
          "2240:  \"rustls-pki-types\",",
          "2241:  \"serde\",",
          "",
          "[Removed Lines]",
          "2238:  \"rustls 0.23.4\",",
          "",
          "[Added Lines]",
          "2238:  \"rustls 0.23.5\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2253:  \"num-bigint\",",
          "2254:  \"once_cell\",",
          "2255:  \"openssl\",",
          "2257:  \"rustls-pemfile 2.1.2\",",
          "2258:  \"rustls-pki-types\",",
          "2259: ]",
          "",
          "[Removed Lines]",
          "2256:  \"rustls 0.23.4\",",
          "",
          "[Added Lines]",
          "2256:  \"rustls 0.23.5\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2289: dependencies = [",
          "2290:  \"aws-lc-rs\",",
          "2291:  \"env_logger\",",
          "2293:  \"webpki-roots 0.26.1\",",
          "2294: ]",
          "",
          "[Removed Lines]",
          "2292:  \"rustls 0.23.4\",",
          "",
          "[Added Lines]",
          "2292:  \"rustls 0.23.5\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2311:  \"rand_core\",",
          "2312:  \"rcgen\",",
          "2313:  \"rsa\",",
          "2315:  \"rustls-pki-types\",",
          "2316:  \"rustls-webpki 0.102.2\",",
          "2317:  \"serde\",",
          "",
          "[Removed Lines]",
          "2314:  \"rustls 0.23.4\",",
          "",
          "[Added Lines]",
          "2314:  \"rustls 0.23.5\",",
          "",
          "---------------"
        ],
        "fuzz/Cargo.lock||fuzz/Cargo.lock": [
          "File: fuzz/Cargo.lock -> fuzz/Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "361: [[package]]",
          "362: name = \"rustls\"",
          "364: dependencies = [",
          "365:  \"aws-lc-rs\",",
          "366:  \"log\",",
          "",
          "[Removed Lines]",
          "363: version = \"0.23.4\"",
          "",
          "[Added Lines]",
          "363: version = \"0.23.5\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5374108df698e78c3e9ef8265cac311556be24af",
      "candidate_info": {
        "commit_hash": "5374108df698e78c3e9ef8265cac311556be24af",
        "repo": "rustls/rustls",
        "commit_url": "https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af",
        "files": [
          "rustls/src/conn.rs",
          "rustls/tests/api.rs"
        ],
        "message": "complete_io: bail out if progress is impossible\n\nHave a test that demonstrates another route to reaching this\nstate: a fully & cleanly closed connection.",
        "before_after_code_files": [
          "rustls/src/conn.rs||rustls/src/conn.rs",
          "rustls/tests/api.rs||rustls/tests/api.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rustls/src/conn.rs||rustls/src/conn.rs",
            "rustls/tests/api.rs||rustls/tests/api.rs"
          ],
          "candidate": [
            "rustls/src/conn.rs||rustls/src/conn.rs",
            "rustls/tests/api.rs||rustls/tests/api.rs"
          ]
        }
      },
      "candidate_diff": {
        "rustls/src/conn.rs||rustls/src/conn.rs": [
          "File: rustls/src/conn.rs -> rustls/src/conn.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:         loop {",
          "392:             let until_handshaked = self.is_handshaking();",
          "394:             while self.wants_write() {",
          "395:                 wrlen += self.write_tls(io)?;",
          "396:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:             if !self.wants_write() && !self.wants_read() {",
          "396:                 return Ok((rdlen, wrlen));",
          "397:             }",
          "",
          "---------------"
        ],
        "rustls/tests/api.rs||rustls/tests/api.rs": [
          "File: rustls/tests/api.rs -> rustls/tests/api.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5855:     );",
          "5856: }",
          "5858: struct FakeStream<'a>(&'a [u8]);",
          "5860: impl<'a> io::Read for FakeStream<'a> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5858: #[test]",
          "5859: fn test_complete_io_with_no_io_needed() {",
          "5860:     let (mut client, mut server) = make_pair(KeyType::Rsa);",
          "5861:     do_handshake(&mut client, &mut server);",
          "5862:     client",
          "5863:         .writer()",
          "5864:         .write_all(b\"hello\")",
          "5865:         .unwrap();",
          "5866:     client.send_close_notify();",
          "5867:     transfer(&mut client, &mut server);",
          "5868:     server.process_new_packets().unwrap();",
          "5869:     server",
          "5870:         .writer()",
          "5871:         .write_all(b\"hello\")",
          "5872:         .unwrap();",
          "5873:     server.send_close_notify();",
          "5874:     transfer(&mut server, &mut client);",
          "5875:     client.process_new_packets().unwrap();",
          "5878:     assert!(!client.wants_write());",
          "5879:     assert!(!client.wants_read());",
          "5880:     assert!(!server.wants_write());",
          "5881:     assert!(!server.wants_read());",
          "5882:     assert_eq!(",
          "5883:         client",
          "5884:             .complete_io(&mut FakeStream(&[]))",
          "5885:             .unwrap(),",
          "5886:         (0, 0)",
          "5887:     );",
          "5888:     assert_eq!(",
          "5889:         server",
          "5890:             .complete_io(&mut FakeStream(&[]))",
          "5891:             .unwrap(),",
          "5892:         (0, 0)",
          "5893:     );",
          "5894: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebcb4782f23b4edf9b10a7065d9e8d4362439d9c",
      "candidate_info": {
        "commit_hash": "ebcb4782f23b4edf9b10a7065d9e8d4362439d9c",
        "repo": "rustls/rustls",
        "commit_url": "https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c",
        "files": [
          "rustls/src/conn.rs",
          "rustls/tests/api.rs"
        ],
        "message": "complete_io: bail out if progress is impossible\n\nHave a test that demonstrates another route to reaching this\nstate: a fully & cleanly closed connection.",
        "before_after_code_files": [
          "rustls/src/conn.rs||rustls/src/conn.rs",
          "rustls/tests/api.rs||rustls/tests/api.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rustls/src/conn.rs||rustls/src/conn.rs",
            "rustls/tests/api.rs||rustls/tests/api.rs"
          ],
          "candidate": [
            "rustls/src/conn.rs||rustls/src/conn.rs",
            "rustls/tests/api.rs||rustls/tests/api.rs"
          ]
        }
      },
      "candidate_diff": {
        "rustls/src/conn.rs||rustls/src/conn.rs": [
          "File: rustls/src/conn.rs -> rustls/src/conn.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         loop {",
          "379:             let until_handshaked = self.is_handshaking();",
          "381:             while self.wants_write() {",
          "382:                 wrlen += self.write_tls(io)?;",
          "383:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:             if !self.wants_write() && !self.wants_read() {",
          "383:                 return Ok((rdlen, wrlen));",
          "384:             }",
          "",
          "---------------"
        ],
        "rustls/tests/api.rs||rustls/tests/api.rs": [
          "File: rustls/tests/api.rs -> rustls/tests/api.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4976:     );",
          "4977: }",
          "4979: struct FakeStream<'a>(&'a [u8]);",
          "4981: impl<'a> io::Read for FakeStream<'a> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4979: #[test]",
          "4980: fn test_complete_io_with_no_io_needed() {",
          "4981:     let (mut client, mut server) = make_pair(KeyType::Rsa);",
          "4982:     do_handshake(&mut client, &mut server);",
          "4983:     client",
          "4984:         .writer()",
          "4985:         .write_all(b\"hello\")",
          "4986:         .unwrap();",
          "4987:     client.send_close_notify();",
          "4988:     transfer(&mut client, &mut server);",
          "4989:     server.process_new_packets().unwrap();",
          "4990:     server",
          "4991:         .writer()",
          "4992:         .write_all(b\"hello\")",
          "4993:         .unwrap();",
          "4994:     server.send_close_notify();",
          "4995:     transfer(&mut server, &mut client);",
          "4996:     client.process_new_packets().unwrap();",
          "4999:     assert!(!client.wants_write());",
          "5000:     assert!(!client.wants_read());",
          "5001:     assert!(!server.wants_write());",
          "5002:     assert!(!server.wants_read());",
          "5003:     assert_eq!(",
          "5004:         client",
          "5005:             .complete_io(&mut FakeStream(&[]))",
          "5006:             .unwrap(),",
          "5007:         (0, 0)",
          "5008:     );",
          "5009:     assert_eq!(",
          "5010:         server",
          "5011:             .complete_io(&mut FakeStream(&[]))",
          "5012:             .unwrap(),",
          "5013:         (0, 0)",
          "5014:     );",
          "5015: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}