{
  "cve_id": "CVE-2023-22730",
  "cve_desc": "Shopware is an open source commerce platform based on Symfony Framework and Vue js. In affected versions It was possible to put the same line item multiple times in the cart using the AP. The Cart Validators checked the line item's individuality and the user was able to bypass quantity limits in sales. This problem has been fixed with version 6.4.18.1. Users on major versions 6.1, 6.2, and 6.3 may also obtain this fix via a plugin. \n",
  "repo": "shopware/platform",
  "patch_hash": "4fce12096e54b2033832d9104fa2e68888c2b4e9",
  "patch_info": {
    "commit_hash": "4fce12096e54b2033832d9104fa2e68888c2b4e9",
    "repo": "shopware/platform",
    "commit_url": "https://github.com/shopware/platform/commit/4fce12096e54b2033832d9104fa2e68888c2b4e9",
    "files": [
      "changelog/_unreleased/2022-12-12-fix-quantity-issues-on-duplicate-product-line-items.md",
      "src/Core/Checkout/DependencyInjection/cart.xml",
      "src/Core/Content/Product/Cart/ProductLineItemValidator.php",
      "src/Core/Content/Product/Cart/ProductStockReachedError.php",
      "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php"
    ],
    "message": "NEXT-23325 - Add product line item validator for duplicate line items with stock issues",
    "before_after_code_files": [
      "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php",
      "src/Core/Content/Product/Cart/ProductStockReachedError.php||src/Core/Content/Product/Cart/ProductStockReachedError.php",
      "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php||tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php"
    ]
  },
  "patch_diff": {
    "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php": [
      "File: src/Core/Content/Product/Cart/ProductLineItemValidator.php -> src/Core/Content/Product/Cart/ProductLineItemValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php declare(strict_types=1);",
      "3: namespace Shopware\\Core\\Content\\Product\\Cart;",
      "5: use Shopware\\Core\\Checkout\\Cart\\Cart;",
      "6: use Shopware\\Core\\Checkout\\Cart\\CartValidatorInterface;",
      "7: use Shopware\\Core\\Checkout\\Cart\\Error\\ErrorCollection;",
      "8: use Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;",
      "9: use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;",
      "14: class ProductLineItemValidator implements CartValidatorInterface",
      "15: {",
      "16:     public function validate(Cart $cart, ErrorCollection $errors, SalesChannelContext $context): void",
      "17:     {",
      "18:         $productLineItems = array_filter($cart->getLineItems()->getFlat(), static function (LineItem $lineItem) {",
      "19:             return $lineItem->getType() === LineItem::PRODUCT_LINE_ITEM_TYPE;",
      "20:         });",
      "22:         foreach ($productLineItems as $lineItem) {",
      "23:             $productId = $lineItem->getReferencedId();",
      "24:             if ($productId === null) {",
      "25:                 continue;",
      "26:             }",
      "27:             $totalQuantity = $this->getTotalQuantity($productId, $productLineItems);",
      "29:             $quantityInformation = $lineItem->getQuantityInformation();",
      "30:             if ($quantityInformation === null) {",
      "31:                 continue;",
      "32:             }",
      "34:             $minPurchase = $quantityInformation->getMinPurchase();",
      "35:             $available = $quantityInformation->getMaxPurchase() ?? 0;",
      "36:             $steps = $quantityInformation->getPurchaseSteps() ?? 1;",
      "38:             if ($available >= $totalQuantity) {",
      "39:                 continue;",
      "40:             }",
      "42:             $maxAvailable = (int) (floor(($available - $minPurchase) / $steps) * $steps + $minPurchase);",
      "44:             $cart->addErrors(",
      "45:                 new ProductStockReachedError($productId, (string) $lineItem->getLabel(), $maxAvailable, false),",
      "46:             );",
      "47:         }",
      "48:     }",
      "53:     private function getTotalQuantity(string $productId, array $productLineItems): int",
      "54:     {",
      "55:         $totalQuantity = 0;",
      "56:         foreach ($productLineItems as $lineItem) {",
      "57:             if ($lineItem->getReferencedId() === $productId) {",
      "58:                 $totalQuantity += $lineItem->getQuantity();",
      "59:             }",
      "60:         }",
      "62:         return $totalQuantity;",
      "63:     }",
      "64: }",
      "",
      "---------------"
    ],
    "src/Core/Content/Product/Cart/ProductStockReachedError.php||src/Core/Content/Product/Cart/ProductStockReachedError.php": [
      "File: src/Core/Content/Product/Cart/ProductStockReachedError.php -> src/Core/Content/Product/Cart/ProductStockReachedError.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:     protected $quantity;",
      "26:     {",
      "27:         $this->id = $id;",
      "",
      "[Removed Lines]",
      "25:     public function __construct(string $id, string $name, int $quantity)",
      "",
      "[Added Lines]",
      "25:     protected bool $resolved;",
      "27:     public function __construct(string $id, string $name, int $quantity, bool $resolved = true)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:         parent::__construct($this->message);",
      "36:         $this->name = $name;",
      "37:         $this->quantity = $quantity;",
      "38:     }",
      "40:     public function getParameters(): array",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:         $this->resolved = $resolved;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:     public function getLevel(): int",
      "66:     {",
      "68:     }",
      "70:     public function blockOrder(): bool",
      "71:     {",
      "72:         return true;",
      "73:     }",
      "74: }",
      "",
      "[Removed Lines]",
      "67:         return self::LEVEL_WARNING;",
      "",
      "[Added Lines]",
      "70:         return $this->resolved ? self::LEVEL_WARNING : self::LEVEL_ERROR;",
      "78:     public function isPersistent(): bool",
      "79:     {",
      "80:         return $this->resolved;",
      "81:     }",
      "",
      "---------------"
    ],
    "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php||tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php": [
      "File: tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php -> tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php declare(strict_types=1);",
      "3: namespace Shopware\\Tests\\Unit\\Core\\Content\\Product\\Cart;",
      "5: use PHPUnit\\Framework\\TestCase;",
      "6: use Shopware\\Core\\Checkout\\Cart\\Cart;",
      "7: use Shopware\\Core\\Checkout\\Cart\\LineItem\\QuantityInformation;",
      "8: use Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemFactory;",
      "9: use Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemValidator;",
      "10: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
      "11: use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;",
      "17: class ProductLineItemValidatorTest extends TestCase",
      "18: {",
      "19:     public function testValidateOnDuplicateProductsAtMaxPurchase(): void",
      "20:     {",
      "21:         $cart = new Cart(Uuid::randomHex(), Uuid::randomHex());",
      "22:         $builder = new ProductLineItemFactory();",
      "23:         $cart->add(",
      "24:             $builder",
      "25:             ->create('product-1')",
      "26:             ->setQuantityInformation(",
      "27:                 (new QuantityInformation())",
      "28:                 ->setMinPurchase(1)",
      "29:                 ->setMaxPurchase(1)",
      "30:                 ->setPurchaseSteps(1)",
      "31:             )",
      "32:         );",
      "33:         $cart->add(",
      "34:             $builder",
      "35:             ->create('product-2')",
      "36:             ->setReferencedId('product-1')",
      "37:             ->setQuantityInformation(",
      "38:                 (new QuantityInformation())",
      "39:                 ->setMinPurchase(1)",
      "40:                 ->setMaxPurchase(1)",
      "41:                 ->setPurchaseSteps(1)",
      "42:             )",
      "43:         );",
      "45:         static::assertCount(0, $cart->getErrors());",
      "47:         $validator = new ProductLineItemValidator();",
      "48:         $validator->validate($cart, $cart->getErrors(), $this->createMock(SalesChannelContext::class));",
      "50:         static::assertCount(1, $cart->getErrors());",
      "51:     }",
      "53:     public function testValidateOnDuplicateProductsWithSafeQuantity(): void",
      "54:     {",
      "55:         $cart = new Cart(Uuid::randomHex(), Uuid::randomHex());",
      "56:         $builder = new ProductLineItemFactory();",
      "57:         $cart->add(",
      "58:             $builder",
      "59:             ->create('product-1')",
      "60:             ->setQuantityInformation(",
      "61:                 (new QuantityInformation())",
      "62:                 ->setMinPurchase(1)",
      "63:                 ->setMaxPurchase(3)",
      "64:                 ->setPurchaseSteps(1)",
      "65:             )",
      "66:         );",
      "67:         $cart->add(",
      "68:             $builder",
      "69:             ->create('product-2')",
      "70:             ->setReferencedId('product-1')",
      "71:             ->setQuantityInformation(",
      "72:                 (new QuantityInformation())",
      "73:                 ->setMinPurchase(1)",
      "74:                 ->setMaxPurchase(3)",
      "75:                 ->setPurchaseSteps(1)",
      "76:             )",
      "77:         );",
      "79:         static::assertCount(0, $cart->getErrors());",
      "81:         $validator = new ProductLineItemValidator();",
      "82:         $validator->validate($cart, $cart->getErrors(), $this->createMock(SalesChannelContext::class));",
      "84:         static::assertCount(0, $cart->getErrors());",
      "85:     }",
      "87:     public function testValidateOnDuplicateProductsWithoutQuantityInformation(): void",
      "88:     {",
      "89:         $cart = new Cart(Uuid::randomHex(), Uuid::randomHex());",
      "90:         $builder = new ProductLineItemFactory();",
      "91:         $cart->add($builder->create('product-1'));",
      "92:         $cart->add($builder->create('product-2')->setReferencedId('product-1'));",
      "94:         static::assertCount(0, $cart->getErrors());",
      "96:         $validator = new ProductLineItemValidator();",
      "97:         $validator->validate($cart, $cart->getErrors(), $this->createMock(SalesChannelContext::class));",
      "99:         static::assertCount(0, $cart->getErrors());",
      "100:     }",
      "101: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f82c1afb59a43c037fbc2729b47a7c37f8b694b3",
      "candidate_info": {
        "commit_hash": "f82c1afb59a43c037fbc2729b47a7c37f8b694b3",
        "repo": "shopware/platform",
        "commit_url": "https://github.com/shopware/platform/commit/f82c1afb59a43c037fbc2729b47a7c37f8b694b3",
        "files": [
          "src/Core/Content/Product/Cart/ProductLineItemValidator.php"
        ],
        "message": "NEXT-23325 - Performance improvements",
        "before_after_code_files": [
          "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php"
          ],
          "candidate": [
            "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php": [
          "File: src/Core/Content/Product/Cart/ProductLineItemValidator.php -> src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:             return $lineItem->getType() === LineItem::PRODUCT_LINE_ITEM_TYPE;",
          "20:         });",
          "22:         foreach ($productLineItems as $lineItem) {",
          "23:             $productId = $lineItem->getReferencedId();",
          "24:             if ($productId === null) {",
          "25:                 continue;",
          "26:             }",
          "29:             $quantityInformation = $lineItem->getQuantityInformation();",
          "30:             if ($quantityInformation === null) {",
          "31:                 continue;",
          "",
          "[Removed Lines]",
          "27:             $totalQuantity = $this->getTotalQuantity($productId, $productLineItems);",
          "",
          "[Added Lines]",
          "22:         $quantities = [];",
          "23:         $refs = [];",
          "30:             $quantities[$productId] = $lineItem->getQuantity() + ($quantities[$productId] ?? 0);",
          "33:             $refs[$productId] = $lineItem;",
          "34:         }",
          "36:         foreach ($quantities as $productId => $quantity) {",
          "37:             $lineItem = $refs[$productId];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:             $available = $quantityInformation->getMaxPurchase() ?? 0;",
          "36:             $steps = $quantityInformation->getPurchaseSteps() ?? 1;",
          "39:                 continue;",
          "40:             }",
          "",
          "[Removed Lines]",
          "38:             if ($available >= $totalQuantity) {",
          "",
          "[Added Lines]",
          "47:             if ($available >= $quantity) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:             );",
          "47:         }",
          "48:     }",
          "64: }",
          "",
          "[Removed Lines]",
          "53:     private function getTotalQuantity(string $productId, array $productLineItems): int",
          "54:     {",
          "55:         $totalQuantity = 0;",
          "56:         foreach ($productLineItems as $lineItem) {",
          "57:             if ($lineItem->getReferencedId() === $productId) {",
          "58:                 $totalQuantity += $lineItem->getQuantity();",
          "59:             }",
          "60:         }",
          "62:         return $totalQuantity;",
          "63:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "900b05340816744834824994d22f6f5319670a55",
      "candidate_info": {
        "commit_hash": "900b05340816744834824994d22f6f5319670a55",
        "repo": "shopware/platform",
        "commit_url": "https://github.com/shopware/platform/commit/900b05340816744834824994d22f6f5319670a55",
        "files": [
          "src/Core/Content/Flow/Dispatching/Action/SendMailAction.php",
          "src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php",
          "src/Core/Framework/DataAbstractionLayer/EntityGenerator.php",
          "src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php",
          "src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php",
          "src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php",
          "src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php",
          "src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php",
          "tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php",
          "tests/integration/php/Storefront/Controller/AuthControllerTest.php",
          "tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailSentTest.php",
          "tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php"
        ],
        "message": "NEXT-24688 - Replace @package annotations",
        "before_after_code_files": [
          "src/Core/Content/Flow/Dispatching/Action/SendMailAction.php||src/Core/Content/Flow/Dispatching/Action/SendMailAction.php",
          "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php||src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php",
          "src/Core/Framework/DataAbstractionLayer/EntityGenerator.php||src/Core/Framework/DataAbstractionLayer/EntityGenerator.php",
          "src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php||src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php",
          "src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php||src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php",
          "src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php||src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php",
          "src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php||src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php",
          "src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php||src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php",
          "tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php||tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php",
          "tests/integration/php/Storefront/Controller/AuthControllerTest.php||tests/integration/php/Storefront/Controller/AuthControllerTest.php",
          "tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php||tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php||tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php||tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php||tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php",
          "tests/unit/php/Core/Content/MailTemplate/MailSentTest.php||tests/unit/php/Core/Content/MailTemplate/MailSentTest.php",
          "tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php||tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php"
          ],
          "candidate": [
            "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Core/Content/Flow/Dispatching/Action/SendMailAction.php||src/Core/Content/Flow/Dispatching/Action/SendMailAction.php": [
          "File: src/Core/Content/Flow/Dispatching/Action/SendMailAction.php -> src/Core/Content/Flow/Dispatching/Action/SendMailAction.php"
        ],
        "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php": [
          "File: src/Core/Content/Product/Cart/ProductLineItemValidator.php -> src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use Shopware\\Core\\Checkout\\Cart\\CartValidatorInterface;",
          "7: use Shopware\\Core\\Checkout\\Cart\\Error\\ErrorCollection;",
          "8: use Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;",
          "9: use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;",
          "14: class ProductLineItemValidator implements CartValidatorInterface",
          "15: {",
          "16:     public function validate(Cart $cart, ErrorCollection $errors, SalesChannelContext $context): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: use Shopware\\Core\\Framework\\Log\\Package;",
          "12: #[Package('checkout')]",
          "",
          "---------------"
        ],
        "src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php||src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php": [
          "File: src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php -> src/Core/Content/Test/MailTemplate/Subscriber/MailSendSubscriberTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: use Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader;",
          "36: use Shopware\\Core\\Test\\TestDefaults;",
          "37: use Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;",
          "",
          "[Removed Lines]",
          "38: use Symfony\\Component\\Mime\\Email;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Core/Framework/DataAbstractionLayer/EntityGenerator.php||src/Core/Framework/DataAbstractionLayer/EntityGenerator.php": [
          "File: src/Core/Framework/DataAbstractionLayer/EntityGenerator.php -> src/Core/Framework/DataAbstractionLayer/EntityGenerator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: class #entity#Collection extends EntityCollection",
          "102: {",
          "103:     protected function getExpectedClass(): string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:  #[Package('core')]",
          "",
          "---------------"
        ],
        "src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php||src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php": [
          "File: src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php -> src/Core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\DataStack\\KeyValuePair;",
          "10: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityExistence;",
          "11: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteParameterBag;",
          "12: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
          "13: use Symfony\\Component\\Validator\\Constraints\\Length;",
          "15: use Symfony\\Component\\Validator\\Constraints\\NotBlank;",
          "16: use Symfony\\Component\\Validator\\Constraints\\Type;",
          "17: use Symfony\\Component\\Validator\\Validator\\ValidatorInterface;",
          "",
          "[Removed Lines]",
          "14: use Shopware\\Core\\Framework\\Log\\Package;",
          "",
          "[Added Lines]",
          "12: use Shopware\\Core\\Framework\\Log\\Package;",
          "",
          "---------------"
        ],
        "src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php||src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php": [
          "File: src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php -> src/Core/Framework/Log/Monolog/ExcludeFlowEventHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Monolog\\Handler\\AbstractHandler;",
          "6: use Monolog\\Handler\\HandlerInterface;",
          "11: class ExcludeFlowEventHandler extends AbstractHandler",
          "12: {",
          "13:     private HandlerInterface $handler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use Shopware\\Core\\Framework\\Log\\Package;",
          "9: #[Package('core')]",
          "",
          "---------------"
        ],
        "src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php||src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php": [
          "File: src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php -> src/Core/Migration/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMail.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Doctrine\\DBAL\\Connection;",
          "6: use Shopware\\Core\\Content\\MailTemplate\\MailTemplateTypes;",
          "7: use Shopware\\Core\\Framework\\Migration\\MigrationStep;",
          "8: use Shopware\\Core\\Migration\\Traits\\MailUpdate;",
          "9: use Shopware\\Core\\Migration\\Traits\\UpdateMailTrait;",
          "16: class Migration1672164687FixTypoInUserRecoveryPasswordResetMail extends MigrationStep",
          "17: {",
          "18:     use UpdateMailTrait;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use Shopware\\Core\\Framework\\Log\\Package;",
          "15: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php||src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php": [
          "File: src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php -> src/Core/Migration/V6_4/Migration1672743034AddDefaultAdminUserPasswordMinLength.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Doctrine\\DBAL\\Connection;",
          "6: use Shopware\\Core\\Defaults;",
          "7: use Shopware\\Core\\Framework\\Migration\\MigrationStep;",
          "8: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "15: class Migration1672743034AddDefaultAdminUserPasswordMinLength extends MigrationStep",
          "16: {",
          "17:     private const CONFIG_KEY = 'core.userPermission.passwordMinLength';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: use Shopware\\Core\\Framework\\Log\\Package;",
          "14: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php||src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php": [
          "File: src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php -> src/Core/Migration/V6_4/Migration1673001912AddUserPermissionRolePrivilege.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Shopware\\Core\\Migration\\V6_4;",
          "5: use Doctrine\\DBAL\\Connection;",
          "6: use Shopware\\Core\\Framework\\Migration\\MigrationStep;",
          "13: class Migration1673001912AddUserPermissionRolePrivilege extends MigrationStep",
          "14: {",
          "15:     public const NEW_PRIVILEGES = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: use Shopware\\Core\\Framework\\Log\\Package;",
          "12: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php||tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php": [
          "File: tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php -> tests/integration/php/Core/System/User/Api/UserRecoveryControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\OrFilter;",
          "10: use Shopware\\Core\\Framework\\Log\\Monolog\\DoctrineSQLHandler;",
          "11: use Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler;",
          "12: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\AdminFunctionalTestBehaviour;",
          "13: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\EventDispatcherBehaviour;",
          "14: use Shopware\\Core\\System\\User\\Recovery\\UserRecoveryRequestEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: use Shopware\\Core\\Framework\\Log\\Package;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: class UserRecoveryControllerTest extends TestCase",
          "23: {",
          "24:     use AdminFunctionalTestBehaviour;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/integration/php/Storefront/Controller/AuthControllerTest.php||tests/integration/php/Storefront/Controller/AuthControllerTest.php": [
          "File: tests/integration/php/Storefront/Controller/AuthControllerTest.php -> tests/integration/php/Storefront/Controller/AuthControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: use Shopware\\Core\\Framework\\Feature;",
          "25: use Shopware\\Core\\Framework\\Log\\Monolog\\DoctrineSQLHandler;",
          "26: use Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler;",
          "27: use Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces;",
          "28: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;",
          "29: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelLifecycleManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: use Shopware\\Core\\Framework\\Log\\Package;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: use Symfony\\Component\\HttpFoundation\\Session\\Session;",
          "67: class AuthControllerTest extends TestCase",
          "68: {",
          "69:     use IntegrationTestBehaviour;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: #[Package('customer-order')]",
          "",
          "---------------"
        ],
        "tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php||tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php": [
          "File: tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php -> tests/migration/Core/V6_4/Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Doctrine\\DBAL\\Connection;",
          "6: use PHPUnit\\Framework\\TestCase;",
          "7: use Shopware\\Core\\Content\\MailTemplate\\MailTemplateTypes;",
          "8: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelLifecycleManager;",
          "9: use Shopware\\Core\\Migration\\V6_4\\Migration1672164687FixTypoInUserRecoveryPasswordResetMail;",
          "17: class Migration1672164687FixTypoInUserRecoveryPasswordResetMailTest extends TestCase",
          "18: {",
          "19:     public function testEnUserRecoveryRequestTemplateIsUpdated(): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use Shopware\\Core\\Framework\\Log\\Package;",
          "16: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php||tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php": [
          "File: tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php -> tests/unit/php/Core/Content/MailTemplate/MailBeforeSentTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent;",
          "7: use Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailBeforeSentEvent;",
          "8: use Shopware\\Core\\Framework\\Context;",
          "9: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "10: use Symfony\\Component\\Mime\\Address;",
          "11: use Symfony\\Component\\Mime\\Email;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: use Shopware\\Core\\Framework\\Log\\Package;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: class MailBeforeSentTest extends TestCase",
          "20: {",
          "21:     public function testInstantiate(): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php||tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php": [
          "File: tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php -> tests/unit/php/Core/Content/MailTemplate/MailBeforeValidateEventTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent;",
          "7: use Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailBeforeValidateEvent;",
          "8: use Shopware\\Core\\Framework\\Context;",
          "9: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "17: class MailBeforeValidateEventTest extends TestCase",
          "18: {",
          "19:     public function testInstantiate(): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: use Shopware\\Core\\Framework\\Log\\Package;",
          "16: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php||tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php": [
          "File: tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php -> tests/unit/php/Core/Content/MailTemplate/MailErrorEventTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent;",
          "8: use Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailErrorEvent;",
          "9: use Shopware\\Core\\Framework\\Context;",
          "17: class MailErrorEventTest extends TestCase",
          "18: {",
          "19:     public function testInstantiate(): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: use Shopware\\Core\\Framework\\Log\\Package;",
          "16: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/unit/php/Core/Content/MailTemplate/MailSentTest.php||tests/unit/php/Core/Content/MailTemplate/MailSentTest.php": [
          "File: tests/unit/php/Core/Content/MailTemplate/MailSentTest.php -> tests/unit/php/Core/Content/MailTemplate/MailSentTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent;",
          "7: use Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailSentEvent;",
          "8: use Shopware\\Core\\Framework\\Context;",
          "16: class MailSentTest extends TestCase",
          "17: {",
          "18:     public function testInstantiate(): void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: use Shopware\\Core\\Framework\\Log\\Package;",
          "15: #[Package('system-settings')]",
          "",
          "---------------"
        ],
        "tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php||tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php": [
          "File: tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php -> tests/unit/php/Core/Framework/Log/Monolog/DoctrineSQLHandlerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use PHPUnit\\Framework\\MockObject\\MockObject;",
          "8: use PHPUnit\\Framework\\TestCase;",
          "9: use Shopware\\Core\\Framework\\Log\\Monolog\\DoctrineSQLHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: use Shopware\\Core\\Framework\\Log\\Package;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: class DoctrineSQLHandlerTest extends TestCase",
          "21: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #[Package('core')]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "252edff8b51b2c3cded35f4a270fe50173003836",
      "candidate_info": {
        "commit_hash": "252edff8b51b2c3cded35f4a270fe50173003836",
        "repo": "shopware/platform",
        "commit_url": "https://github.com/shopware/platform/commit/252edff8b51b2c3cded35f4a270fe50173003836",
        "files": [
          "changelog/_unreleased/2022-12-12-fix-quantity-issues-on-duplicate-product-line-items.md",
          "src/Core/Checkout/DependencyInjection/cart.xml",
          "src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "src/Core/Content/Product/Cart/ProductStockReachedError.php",
          "src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php",
          "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php"
        ],
        "message": "NEXT-23325 - Add product line item validator for duplicate line items with stock issues",
        "before_after_code_files": [
          "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "src/Core/Content/Product/Cart/ProductStockReachedError.php||src/Core/Content/Product/Cart/ProductStockReachedError.php",
          "src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php||src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php",
          "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php||tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php",
            "src/Core/Content/Product/Cart/ProductStockReachedError.php||src/Core/Content/Product/Cart/ProductStockReachedError.php",
            "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php||tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php"
          ],
          "candidate": [
            "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php",
            "src/Core/Content/Product/Cart/ProductStockReachedError.php||src/Core/Content/Product/Cart/ProductStockReachedError.php",
            "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php||tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Core/Content/Product/Cart/ProductLineItemValidator.php||src/Core/Content/Product/Cart/ProductLineItemValidator.php": [
          "File: src/Core/Content/Product/Cart/ProductLineItemValidator.php -> src/Core/Content/Product/Cart/ProductLineItemValidator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php declare(strict_types=1);",
          "3: namespace Shopware\\Core\\Content\\Product\\Cart;",
          "5: use Shopware\\Core\\Checkout\\Cart\\Cart;",
          "6: use Shopware\\Core\\Checkout\\Cart\\CartValidatorInterface;",
          "7: use Shopware\\Core\\Checkout\\Cart\\Error\\ErrorCollection;",
          "8: use Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;",
          "9: use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;",
          "14: class ProductLineItemValidator implements CartValidatorInterface",
          "15: {",
          "16:     public function validate(Cart $cart, ErrorCollection $errors, SalesChannelContext $context): void",
          "17:     {",
          "18:         $productLineItems = array_filter($cart->getLineItems()->getFlat(), static function (LineItem $lineItem) {",
          "19:             return $lineItem->getType() === LineItem::PRODUCT_LINE_ITEM_TYPE;",
          "20:         });",
          "22:         foreach ($productLineItems as $lineItem) {",
          "23:             $productId = $lineItem->getReferencedId();",
          "24:             if ($productId === null) {",
          "25:                 continue;",
          "26:             }",
          "27:             $totalQuantity = $this->getTotalQuantity($productId, $productLineItems);",
          "29:             $quantityInformation = $lineItem->getQuantityInformation();",
          "30:             if ($quantityInformation === null) {",
          "31:                 continue;",
          "32:             }",
          "34:             $minPurchase = $quantityInformation->getMinPurchase();",
          "35:             $available = $quantityInformation->getMaxPurchase() ?? 0;",
          "36:             $steps = $quantityInformation->getPurchaseSteps() ?? 1;",
          "38:             if ($available >= $totalQuantity) {",
          "39:                 continue;",
          "40:             }",
          "42:             $maxAvailable = (int) (floor(($available - $minPurchase) / $steps) * $steps + $minPurchase);",
          "44:             $cart->addErrors(",
          "45:                 new ProductStockReachedError($productId, (string) $lineItem->getLabel(), $maxAvailable, false),",
          "46:             );",
          "47:         }",
          "48:     }",
          "53:     private function getTotalQuantity(string $productId, array $productLineItems): int",
          "54:     {",
          "55:         $totalQuantity = 0;",
          "56:         foreach ($productLineItems as $lineItem) {",
          "57:             if ($lineItem->getReferencedId() === $productId) {",
          "58:                 $totalQuantity += $lineItem->getQuantity();",
          "59:             }",
          "60:         }",
          "62:         return $totalQuantity;",
          "63:     }",
          "64: }",
          "",
          "---------------"
        ],
        "src/Core/Content/Product/Cart/ProductStockReachedError.php||src/Core/Content/Product/Cart/ProductStockReachedError.php": [
          "File: src/Core/Content/Product/Cart/ProductStockReachedError.php -> src/Core/Content/Product/Cart/ProductStockReachedError.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     protected $quantity;",
          "29:     {",
          "30:         $this->id = $id;",
          "",
          "[Removed Lines]",
          "28:     public function __construct(string $id, string $name, int $quantity)",
          "",
          "[Added Lines]",
          "28:     protected bool $resolved;",
          "30:     public function __construct(string $id, string $name, int $quantity, bool $resolved = true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         parent::__construct($this->message);",
          "39:         $this->name = $name;",
          "40:         $this->quantity = $quantity;",
          "41:     }",
          "43:     public function getParameters(): array",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:         $this->resolved = $resolved;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:     public function getLevel(): int",
          "69:     {",
          "71:     }",
          "73:     public function blockOrder(): bool",
          "74:     {",
          "75:         return true;",
          "76:     }",
          "77: }",
          "",
          "[Removed Lines]",
          "70:         return self::LEVEL_WARNING;",
          "",
          "[Added Lines]",
          "73:         return $this->resolved ? self::LEVEL_WARNING : self::LEVEL_ERROR;",
          "81:     public function isPersistent(): bool",
          "82:     {",
          "83:         return $this->resolved;",
          "84:     }",
          "",
          "---------------"
        ],
        "src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php||src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php": [
          "File: src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php -> src/Core/Content/Test/Product/Cart/ProductCartProcessorTest.php"
        ],
        "tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php||tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php": [
          "File: tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php -> tests/unit/php/Core/Content/Product/Cart/ProductLineItemValidatorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php declare(strict_types=1);",
          "3: namespace Shopware\\Tests\\Unit\\Core\\Content\\Product\\Cart;",
          "5: use PHPUnit\\Framework\\TestCase;",
          "6: use Shopware\\Core\\Checkout\\Cart\\Cart;",
          "7: use Shopware\\Core\\Checkout\\Cart\\LineItem\\QuantityInformation;",
          "8: use Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemFactory;",
          "9: use Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemValidator;",
          "10: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "11: use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;",
          "17: class ProductLineItemValidatorTest extends TestCase",
          "18: {",
          "19:     public function testValidateOnDuplicateProductsAtMaxPurchase(): void",
          "20:     {",
          "21:         $cart = new Cart(Uuid::randomHex(), Uuid::randomHex());",
          "22:         $builder = new ProductLineItemFactory();",
          "23:         $cart->add(",
          "24:             $builder",
          "25:             ->create('product-1')",
          "26:             ->setQuantityInformation(",
          "27:                 (new QuantityInformation())",
          "28:                 ->setMinPurchase(1)",
          "29:                 ->setMaxPurchase(1)",
          "30:                 ->setPurchaseSteps(1)",
          "31:             )",
          "32:         );",
          "33:         $cart->add(",
          "34:             $builder",
          "35:             ->create('product-2')",
          "36:             ->setReferencedId('product-1')",
          "37:             ->setQuantityInformation(",
          "38:                 (new QuantityInformation())",
          "39:                 ->setMinPurchase(1)",
          "40:                 ->setMaxPurchase(1)",
          "41:                 ->setPurchaseSteps(1)",
          "42:             )",
          "43:         );",
          "45:         static::assertCount(0, $cart->getErrors());",
          "47:         $validator = new ProductLineItemValidator();",
          "48:         $validator->validate($cart, $cart->getErrors(), $this->createMock(SalesChannelContext::class));",
          "50:         static::assertCount(1, $cart->getErrors());",
          "51:     }",
          "53:     public function testValidateOnDuplicateProductsWithSafeQuantity(): void",
          "54:     {",
          "55:         $cart = new Cart(Uuid::randomHex(), Uuid::randomHex());",
          "56:         $builder = new ProductLineItemFactory();",
          "57:         $cart->add(",
          "58:             $builder",
          "59:             ->create('product-1')",
          "60:             ->setQuantityInformation(",
          "61:                 (new QuantityInformation())",
          "62:                 ->setMinPurchase(1)",
          "63:                 ->setMaxPurchase(3)",
          "64:                 ->setPurchaseSteps(1)",
          "65:             )",
          "66:         );",
          "67:         $cart->add(",
          "68:             $builder",
          "69:             ->create('product-2')",
          "70:             ->setReferencedId('product-1')",
          "71:             ->setQuantityInformation(",
          "72:                 (new QuantityInformation())",
          "73:                 ->setMinPurchase(1)",
          "74:                 ->setMaxPurchase(3)",
          "75:                 ->setPurchaseSteps(1)",
          "76:             )",
          "77:         );",
          "79:         static::assertCount(0, $cart->getErrors());",
          "81:         $validator = new ProductLineItemValidator();",
          "82:         $validator->validate($cart, $cart->getErrors(), $this->createMock(SalesChannelContext::class));",
          "84:         static::assertCount(0, $cart->getErrors());",
          "85:     }",
          "87:     public function testValidateOnDuplicateProductsWithoutQuantityInformation(): void",
          "88:     {",
          "89:         $cart = new Cart(Uuid::randomHex(), Uuid::randomHex());",
          "90:         $builder = new ProductLineItemFactory();",
          "91:         $cart->add($builder->create('product-1'));",
          "92:         $cart->add($builder->create('product-2')->setReferencedId('product-1'));",
          "94:         static::assertCount(0, $cart->getErrors());",
          "96:         $validator = new ProductLineItemValidator();",
          "97:         $validator->validate($cart, $cart->getErrors(), $this->createMock(SalesChannelContext::class));",
          "99:         static::assertCount(0, $cart->getErrors());",
          "100:     }",
          "101: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}