{
  "cve_id": "CVE-2023-50943",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
  "patch_info": {
    "commit_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "files": [
      "airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py"
    ],
    "message": "Stop deserializing pickle when enable_xcom_pickling is False (#36255)\n\n* Stop deserializing pickle when enable_xcom_pickling is False\n\n* Fix unit tests\n\n(cherry picked from commit 63e97abec5d56bc62a293c93f5227f364561e51c)",
    "before_after_code_files": [
      "airflow/models/xcom.py||airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py||tests/models/test_xcom.py"
    ]
  },
  "patch_diff": {
    "airflow/models/xcom.py||airflow/models/xcom.py": [
      "File: airflow/models/xcom.py -> airflow/models/xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "685:             except pickle.UnpicklingError:",
      "686:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "687:         else:",
      "693:     @staticmethod",
      "694:     def deserialize_value(result: XCom) -> Any:",
      "",
      "[Removed Lines]",
      "688:             try:",
      "689:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "690:             except (json.JSONDecodeError, UnicodeDecodeError):",
      "691:                 return pickle.loads(result.value)",
      "",
      "[Added Lines]",
      "688:             # Since xcom_pickling is disabled, we should only try to deserialize with JSON",
      "689:             return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "",
      "---------------"
    ],
    "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py": [
      "File: tests/api_connexion/schemas/test_xcom_schema.py -> tests/api_connexion/schemas/test_xcom_schema.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from airflow.models import DagRun, XCom",
      "31: from airflow.utils.dates import parse_execution_date",
      "32: from airflow.utils.session import create_session",
      "34: pytestmark = pytest.mark.db_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     default_time = \"2016-04-02T21:00:00+00:00\"",
      "189:     default_time_parsed = parse_execution_date(default_time)",
      "191:     def test_serialize(self, create_xcom, session):",
      "192:         create_xcom(",
      "193:             dag_id=\"test_dag\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208:             \"map_index\": -1,",
      "209:         }",
      "211:     def test_deserialize(self):",
      "212:         xcom_dump = {",
      "213:             \"key\": \"test_key\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------"
    ],
    "tests/models/test_xcom.py||tests/models/test_xcom.py": [
      "File: tests/models/test_xcom.py -> tests/models/test_xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:             ret_value = XCom.get_value(key=\"xcom_test3\", ti_key=ti_key, session=session)",
      "141:         assert ret_value == {\"key\": \"value\"}",
      "144:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"}):",
      "145:             XCom.set(",
      "146:                 key=\"xcom_test3\",",
      "",
      "[Removed Lines]",
      "143:     def test_xcom_deserialize_with_pickle_to_json_switch(self, task_instance, session):",
      "",
      "[Added Lines]",
      "143:     def test_xcom_deserialize_pickle_when_xcom_pickling_is_disabled(self, task_instance, session):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:                 session=session,",
      "152:             )",
      "153:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"False\"}):",
      "163:     @conf_vars({(\"core\", \"xcom_enable_pickling\"): \"False\"})",
      "164:     def test_xcom_disable_pickle_type_fail_on_non_json(self, task_instance, session):",
      "",
      "[Removed Lines]",
      "154:             ret_value = XCom.get_one(",
      "155:                 key=\"xcom_test3\",",
      "156:                 dag_id=task_instance.dag_id,",
      "157:                 task_id=task_instance.task_id,",
      "158:                 run_id=task_instance.run_id,",
      "159:                 session=session,",
      "160:             )",
      "161:         assert ret_value == {\"key\": \"value\"}",
      "",
      "[Added Lines]",
      "154:             with pytest.raises(UnicodeDecodeError):",
      "155:                 XCom.get_one(",
      "156:                     key=\"xcom_test3\",",
      "157:                     dag_id=task_instance.dag_id,",
      "158:                     task_id=task_instance.task_id,",
      "159:                     run_id=task_instance.run_id,",
      "160:                     session=session,",
      "161:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63e97abec5d56bc62a293c93f5227f364561e51c",
      "candidate_info": {
        "commit_hash": "63e97abec5d56bc62a293c93f5227f364561e51c",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/63e97abec5d56bc62a293c93f5227f364561e51c",
        "files": [
          "airflow/models/xcom.py",
          "tests/api_connexion/schemas/test_xcom_schema.py",
          "tests/models/test_xcom.py"
        ],
        "message": "Stop deserializing pickle when enable_xcom_pickling is False (#36255)\n\n* Stop deserializing pickle when enable_xcom_pickling is False\n\n* Fix unit tests",
        "before_after_code_files": [
          "airflow/models/xcom.py||airflow/models/xcom.py",
          "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
          "tests/models/test_xcom.py||tests/models/test_xcom.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/models/xcom.py||airflow/models/xcom.py",
            "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
            "tests/models/test_xcom.py||tests/models/test_xcom.py"
          ],
          "candidate": [
            "airflow/models/xcom.py||airflow/models/xcom.py",
            "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
            "tests/models/test_xcom.py||tests/models/test_xcom.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/models/xcom.py||airflow/models/xcom.py": [
          "File: airflow/models/xcom.py -> airflow/models/xcom.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "685:             except pickle.UnpicklingError:",
          "686:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
          "687:         else:",
          "693:     @staticmethod",
          "694:     def deserialize_value(result: XCom) -> Any:",
          "",
          "[Removed Lines]",
          "688:             try:",
          "689:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
          "690:             except (json.JSONDecodeError, UnicodeDecodeError):",
          "691:                 return pickle.loads(result.value)",
          "",
          "[Added Lines]",
          "688:             # Since xcom_pickling is disabled, we should only try to deserialize with JSON",
          "689:             return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
          "",
          "---------------"
        ],
        "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py": [
          "File: tests/api_connexion/schemas/test_xcom_schema.py -> tests/api_connexion/schemas/test_xcom_schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from airflow.models import DagRun, XCom",
          "31: from airflow.utils.dates import parse_execution_date",
          "32: from airflow.utils.session import create_session",
          "34: pytestmark = pytest.mark.db_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: from tests.test_utils.config import conf_vars",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     default_time = \"2016-04-02T21:00:00+00:00\"",
          "189:     default_time_parsed = parse_execution_date(default_time)",
          "191:     def test_serialize(self, create_xcom, session):",
          "192:         create_xcom(",
          "193:             dag_id=\"test_dag\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:             \"map_index\": -1,",
          "209:         }",
          "211:     def test_deserialize(self):",
          "212:         xcom_dump = {",
          "213:             \"key\": \"test_key\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
          "",
          "---------------"
        ],
        "tests/models/test_xcom.py||tests/models/test_xcom.py": [
          "File: tests/models/test_xcom.py -> tests/models/test_xcom.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:             ret_value = XCom.get_value(key=\"xcom_test3\", ti_key=ti_key, session=session)",
          "141:         assert ret_value == {\"key\": \"value\"}",
          "144:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"}):",
          "145:             XCom.set(",
          "146:                 key=\"xcom_test3\",",
          "",
          "[Removed Lines]",
          "143:     def test_xcom_deserialize_with_pickle_to_json_switch(self, task_instance, session):",
          "",
          "[Added Lines]",
          "143:     def test_xcom_deserialize_pickle_when_xcom_pickling_is_disabled(self, task_instance, session):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:                 session=session,",
          "152:             )",
          "153:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"False\"}):",
          "163:     @conf_vars({(\"core\", \"xcom_enable_pickling\"): \"False\"})",
          "164:     def test_xcom_disable_pickle_type_fail_on_non_json(self, task_instance, session):",
          "",
          "[Removed Lines]",
          "154:             ret_value = XCom.get_one(",
          "155:                 key=\"xcom_test3\",",
          "156:                 dag_id=task_instance.dag_id,",
          "157:                 task_id=task_instance.task_id,",
          "158:                 run_id=task_instance.run_id,",
          "159:                 session=session,",
          "160:             )",
          "161:         assert ret_value == {\"key\": \"value\"}",
          "",
          "[Added Lines]",
          "154:             with pytest.raises(UnicodeDecodeError):",
          "155:                 XCom.get_one(",
          "156:                     key=\"xcom_test3\",",
          "157:                     dag_id=task_instance.dag_id,",
          "158:                     task_id=task_instance.task_id,",
          "159:                     run_id=task_instance.run_id,",
          "160:                     session=session,",
          "161:                 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c7032513e7dadfaaad93efd47922f0d84bdfda2",
      "candidate_info": {
        "commit_hash": "3c7032513e7dadfaaad93efd47922f0d84bdfda2",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/3c7032513e7dadfaaad93efd47922f0d84bdfda2",
        "files": [
          "airflow/operators/python.py",
          "tests/operators/test_python.py"
        ],
        "message": "Allow PythonVirtualenvOperator.skip_on_exit_code to be zero (#36361)\n\n(cherry picked from commit b2f1882c584feceda02d3ee5af086b5098701518)",
        "before_after_code_files": [
          "airflow/operators/python.py||airflow/operators/python.py",
          "tests/operators/test_python.py||tests/operators/test_python.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/operators/python.py||airflow/operators/python.py": [
          "File: airflow/operators/python.py -> airflow/operators/python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:             skip_on_exit_code",
          "387:             if isinstance(skip_on_exit_code, Container)",
          "388:             else [skip_on_exit_code]",
          "390:             else []",
          "391:         )",
          "",
          "[Removed Lines]",
          "389:             if skip_on_exit_code",
          "",
          "[Added Lines]",
          "389:             if skip_on_exit_code is not None",
          "",
          "---------------"
        ],
        "tests/operators/test_python.py||tests/operators/test_python.py": [
          "File: tests/operators/test_python.py -> tests/operators/test_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:         assert set(context) == declared_keys",
          "849:     @pytest.mark.parametrize(",
          "851:         [",
          "853:             ({\"skip_on_exit_code\": 100}, 100, TaskInstanceState.SKIPPED),",
          "856:             ({\"skip_on_exit_code\": 100}, 101, TaskInstanceState.FAILED),",
          "857:             ({\"skip_on_exit_code\": [100, 102]}, 101, TaskInstanceState.FAILED),",
          "859:         ],",
          "860:     )",
          "862:         def f(exit_code):",
          "863:             if exit_code != 0:",
          "864:                 raise SystemExit(exit_code)",
          "866:         if expected_state == TaskInstanceState.FAILED:",
          "867:             with pytest.raises(CalledProcessError):",
          "869:         else:",
          "870:             ti = self.run_as_task(",
          "871:                 f,",
          "872:                 return_ti=True,",
          "873:                 op_kwargs={\"exit_code\": actual_exit_code},",
          "875:             )",
          "876:             assert ti.state == expected_state",
          "",
          "[Removed Lines]",
          "850:         \"extra_kwargs, actual_exit_code, expected_state\",",
          "852:             (None, 99, TaskInstanceState.FAILED),",
          "854:             ({\"skip_on_exit_code\": [100]}, 100, TaskInstanceState.SKIPPED),",
          "855:             ({\"skip_on_exit_code\": (100, 101)}, 100, TaskInstanceState.SKIPPED),",
          "858:             ({\"skip_on_exit_code\": None}, 0, TaskInstanceState.SUCCESS),",
          "861:     def test_on_skip_exit_code(self, extra_kwargs, actual_exit_code, expected_state):",
          "868:                 self.run_as_task(f, op_kwargs={\"exit_code\": actual_exit_code}, **(extra_kwargs or {}))",
          "",
          "[Added Lines]",
          "850:         \"kwargs, actual_exit_code, expected_state\",",
          "852:             ({}, 0, TaskInstanceState.SUCCESS),",
          "853:             ({}, 100, TaskInstanceState.FAILED),",
          "854:             ({}, 101, TaskInstanceState.FAILED),",
          "855:             ({\"skip_on_exit_code\": None}, 0, TaskInstanceState.SUCCESS),",
          "856:             ({\"skip_on_exit_code\": None}, 100, TaskInstanceState.FAILED),",
          "857:             ({\"skip_on_exit_code\": None}, 101, TaskInstanceState.FAILED),",
          "858:             ({\"skip_on_exit_code\": 100}, 0, TaskInstanceState.SUCCESS),",
          "861:             ({\"skip_on_exit_code\": 0}, 0, TaskInstanceState.SKIPPED),",
          "862:             ({\"skip_on_exit_code\": [100]}, 0, TaskInstanceState.SUCCESS),",
          "863:             ({\"skip_on_exit_code\": [100]}, 100, TaskInstanceState.SKIPPED),",
          "864:             ({\"skip_on_exit_code\": [100]}, 101, TaskInstanceState.FAILED),",
          "866:             ({\"skip_on_exit_code\": (100,)}, 0, TaskInstanceState.SUCCESS),",
          "867:             ({\"skip_on_exit_code\": (100,)}, 100, TaskInstanceState.SKIPPED),",
          "868:             ({\"skip_on_exit_code\": (100,)}, 101, TaskInstanceState.FAILED),",
          "871:     def test_on_skip_exit_code(self, kwargs, actual_exit_code, expected_state):",
          "878:                 self.run_as_task(f, op_kwargs={\"exit_code\": actual_exit_code}, **kwargs)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1d2e7f3b52c40e34a5b947fc64cc6e641841c81",
      "candidate_info": {
        "commit_hash": "e1d2e7f3b52c40e34a5b947fc64cc6e641841c81",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/e1d2e7f3b52c40e34a5b947fc64cc6e641841c81",
        "files": [
          "BREEZE.rst",
          "TESTING.rst",
          "scripts/ci/pre_commit/common_precommit_utils.py"
        ],
        "message": "Update BREEZE.rst with different test example (#36234)\n\nUpdating the breeze docs with different pytest example as the function mentioned in the example is removed from the test_core.py\n\n(cherry picked from commit 71c726d52d5a8a30f59268cc175560a4244c8016)",
        "before_after_code_files": [
          "scripts/ci/pre_commit/common_precommit_utils.py||scripts/ci/pre_commit/common_precommit_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/ci/pre_commit/common_precommit_utils.py||scripts/ci/pre_commit/common_precommit_utils.py": [
          "File: scripts/ci/pre_commit/common_precommit_utils.py -> scripts/ci/pre_commit/common_precommit_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     if os.environ.get(\"SKIP_BREEZE_PRE_COMMITS\"):",
          "81:         console.print(\"[yellow]Skipping breeze pre-commit as SKIP_BREEZE_PRE_COMMIT is set\")",
          "83:     if shutil.which(\"breeze\") is None:",
          "84:         console.print(",
          "85:             \"[red]The `breeze` command is not on path.[/]\\n\\n\"",
          "",
          "[Removed Lines]",
          "82:         sys.exit(1)",
          "",
          "[Added Lines]",
          "82:         sys.exit(0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "975ddce2ef214794befffadb430fdb1199aeabe0",
      "candidate_info": {
        "commit_hash": "975ddce2ef214794befffadb430fdb1199aeabe0",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/975ddce2ef214794befffadb430fdb1199aeabe0",
        "files": [
          "airflow/providers/apache/beam/provider.yaml",
          "generated/provider_dependencies.json",
          "setup.py"
        ],
        "message": "Get rid of pyarrow-hotfix for CVE-2023-47248 (#36697)\n\nThe #35650 introduced a hotfix for Pyarrow CVE-2023-47248. So far\nwe have been blocked from removing it by Apache Beam that limited\nAirflow from bumping pyarrow to a version that was not vulnerable.\n\nThis is now possible since Apache Beam relesed 2.53.0 version on\n4th of January 2023 that allows to use non-vulnerable pyarrow.\n\nWe are now bumping both Pyarrow and Beam minimum versions to\nreflect that and remove pyarrow hotfix.\n\n(cherry picked from commit d105c7115f56f88d48a2888484a0ed7d1c01576f)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: otel = [\"opentelemetry-exporter-prometheus\"]",
          "350: pandas = [",
          "351:     \"pandas>=0.17.1\",",
          "356: ]",
          "357: password = [",
          "358:     \"bcrypt>=2.0.0\",",
          "",
          "[Removed Lines]",
          "352:     # Use pyarrow-hotfix to fix https://nvd.nist.gov/vuln/detail/CVE-2023-47248.",
          "353:     # We should remove it once Apache Beam frees us to upgrade to pyarrow 14.0.1",
          "354:     \"pyarrow-hotfix\",",
          "355:     \"pyarrow>=9.0.0\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfce9a4f20168001c1faec679e0baf9b051076dd",
      "candidate_info": {
        "commit_hash": "bfce9a4f20168001c1faec679e0baf9b051076dd",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/bfce9a4f20168001c1faec679e0baf9b051076dd",
        "files": [
          "Dockerfile",
          "dev/breeze/src/airflow_breeze/global_constants.py",
          "docs/docker-stack/build-arg-ref.rst",
          "images/breeze/output_prod-image_build.svg",
          "images/breeze/output_prod-image_build.txt"
        ],
        "message": "Remove common.io from chicken-egg providers. (#36284)\n\nNow that Airflow 2.8.0 is released, we can remove common.io from\nchicken-egg providers.\n\n(cherry picked from commit 34d500158769d1d197911a2cd4ac5818bcd117d2)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py": [
          "File: dev/breeze/src/airflow_breeze/global_constants.py -> dev/breeze/src/airflow_breeze/global_constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:     \"async\",",
          "431:     \"celery\",",
          "432:     \"cncf.kubernetes\",",
          "433:     \"docker\",",
          "434:     \"elasticsearch\",",
          "435:     \"ftp\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     \"common.io\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:     # END OF EXTRAS LIST UPDATED BY PRE COMMIT",
          "457: ]",
          "466: def _exclusion(providers: Iterable[str]) -> str:",
          "",
          "[Removed Lines]",
          "459: CHICKEN_EGG_PROVIDERS = \" \".join(",
          "460:     [",
          "461:         \"common.io\",",
          "462:     ]",
          "463: )",
          "",
          "[Added Lines]",
          "460: CHICKEN_EGG_PROVIDERS = \" \".join([])",
          "",
          "---------------"
        ]
      }
    }
  ]
}