{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9afc97e6c51d2de9b98d923b908894222088fa32",
      "candidate_info": {
        "commit_hash": "9afc97e6c51d2de9b98d923b908894222088fa32",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9afc97e6c51d2de9b98d923b908894222088fa32",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java"
        ],
        "message": "PDFBOX-4958 apply changes from trunk to 2.0 branch\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882149 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import java.io.IOException;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import java.awt.geom.GeneralPath;",
          "20: import java.awt.geom.Rectangle2D;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.apache.commons.logging.Log;",
          "30: import org.apache.commons.logging.LogFactory;",
          "33: import org.apache.pdfbox.cos.COSArray;",
          "34: import org.apache.pdfbox.cos.COSBase;",
          "35: import org.apache.pdfbox.cos.COSDictionary;",
          "36: import org.apache.pdfbox.cos.COSName;",
          "37: import org.apache.pdfbox.cos.COSNumber;",
          "39: import org.apache.pdfbox.pdmodel.PDDocument;",
          "40: import org.apache.pdfbox.pdmodel.PDPage;",
          "41: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "",
          "[Removed Lines]",
          "31: import org.apache.pdfbox.contentstream.operator.Operator;",
          "32: import org.apache.pdfbox.contentstream.operator.OperatorName;",
          "38: import org.apache.pdfbox.pdfparser.PDFStreamParser;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: import org.apache.pdfbox.pdmodel.fdf.FDFDocument;",
          "50: import org.apache.pdfbox.pdmodel.fdf.FDFField;",
          "51: import org.apache.pdfbox.pdmodel.font.PDType1Font;",
          "53: import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
          "54: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
          "55: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "",
          "[Removed Lines]",
          "52: import org.apache.pdfbox.pdmodel.graphics.PDXObject;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:                     contentStream.saveGraphicsState();",
          "385:                     contentStream.drawForm(fieldObject);",
          "386:                     contentStream.restoreGraphicsState();",
          "387:                     contentStream.close();",
          "",
          "[Removed Lines]",
          "337:                     boolean needsTranslation = resolveNeedsTranslation(appearanceStream);",
          "341:                     boolean needsScaling = resolveNeedsScaling(annotation, page.getRotation());",
          "343:                     Matrix transformationMatrix = new Matrix();",
          "344:                     boolean transformed = false;",
          "346:                     if (needsTranslation)",
          "347:                     {",
          "348:                         transformationMatrix.translate(annotation.getRectangle().getLowerLeftX(),",
          "349:                                 annotation.getRectangle().getLowerLeftY());",
          "350:                         transformed = true;",
          "351:                     }",
          "354:                     Matrix m = appearanceStream.getMatrix();",
          "355:                     int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY())));",
          "356:                     int rotation = (angle + 360) % 360;",
          "358:                     if (needsScaling)",
          "359:                     {",
          "360:                         PDRectangle bbox = appearanceStream.getBBox();",
          "361:                         PDRectangle fieldRect = annotation.getRectangle();",
          "363:                         float xScale;",
          "364:                         float yScale;",
          "365:                         if (rotation == 90 || rotation == 270)",
          "366:                         {",
          "367:                             xScale = fieldRect.getWidth() / bbox.getHeight();",
          "368:                             yScale = fieldRect.getHeight() / bbox.getWidth();",
          "369:                         }",
          "370:                         else",
          "371:                         {",
          "372:                             xScale = fieldRect.getWidth() / bbox.getWidth();",
          "373:                             yScale = fieldRect.getHeight() / bbox.getHeight();",
          "374:                         }",
          "375:                         Matrix scalingMatrix = Matrix.getScaleInstance(xScale, yScale);",
          "376:                         transformationMatrix.concatenate(scalingMatrix);",
          "377:                         transformed = true;",
          "378:                     }",
          "380:                     if (transformed)",
          "381:                     {",
          "382:                         contentStream.transform(transformationMatrix);",
          "383:                     }",
          "",
          "[Added Lines]",
          "338:                     Matrix transformationMatrix = resolveTransformationMatrix(annotation, appearanceStream);",
          "339:                     contentStream.transform(transformationMatrix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "758:         dictionary.setFlag(COSName.SIG_FLAGS, FLAG_APPEND_ONLY, appendOnly);",
          "759:     }",
          "768:     {",
          "824:     }",
          "854:     }",
          "856:     private Map<COSDictionary,Set<COSDictionary>> buildPagesWidgetsMap(List<PDField> fields) throws IOException",
          "",
          "[Removed Lines]",
          "767:     private boolean resolveNeedsTranslation(PDAppearanceStream appearanceStream)",
          "769:         PDResources resources = appearanceStream.getResources();",
          "770:         if (resources == null || !resources.getXObjectNames().iterator().hasNext())",
          "771:         {",
          "772:             return true;",
          "773:         }",
          "774:         Iterator<COSName> xObjectNames = resources.getXObjectNames().iterator();",
          "775:         List<Object> tokens;",
          "776:         try",
          "777:         {",
          "778:             PDFStreamParser pdfStreamParser = new PDFStreamParser(appearanceStream);",
          "779:             pdfStreamParser.parse();",
          "780:             tokens = pdfStreamParser.getTokens();",
          "781:         }",
          "782:         catch (IOException ex)",
          "783:         {",
          "784:             LOG.debug(\"Couldn't not parse appearance content stream - content might be misplaced\", ex);",
          "785:             return true;",
          "786:         }",
          "787:         while (xObjectNames.hasNext())",
          "788:         {",
          "789:             try",
          "790:             {",
          "793:                 COSName name = xObjectNames.next();",
          "794:                 PDXObject xObject = resources.getXObject(name);",
          "795:                 if (xObject instanceof PDFormXObject)",
          "796:                 {",
          "797:                     PDRectangle bbox = ((PDFormXObject) xObject).getBBox();",
          "798:                     float llX = bbox.getLowerLeftX();",
          "799:                     float llY = bbox.getLowerLeftY();",
          "800:                     if (Float.compare(llX, 0) != 0 && Float.compare(llY, 0) != 0)",
          "801:                     {",
          "803:                         for (int i = 0; i < tokens.size(); ++i)",
          "804:                         {",
          "805:                             if (tokens.get(i).equals(name) && i < tokens.size() - 1 &&",
          "806:                                 tokens.get(i + 1).equals(Operator.getOperator(OperatorName.DRAW_OBJECT)))",
          "807:                             {",
          "808:                                 return false;",
          "809:                             }",
          "810:                         }",
          "811:                     }",
          "812:                 }",
          "813:             }",
          "814:             catch (IOException e)",
          "815:             {",
          "818:             }",
          "819:         }",
          "823:         return true;",
          "833:     private boolean resolveNeedsScaling(PDAnnotation annotation, int rotation)",
          "834:     {",
          "835:         PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
          "837:         PDResources resources = appearanceStream.getResources();",
          "838:         if (resources != null && resources.getXObjectNames().iterator().hasNext())",
          "839:         {",
          "840:             return true;",
          "841:         }",
          "842:         PDRectangle bbox = appearanceStream.getBBox();",
          "843:         PDRectangle fieldRect = annotation.getRectangle();",
          "844:         if (rotation == 90 || rotation == 270)",
          "845:         {",
          "846:             return Float.compare(bbox.getWidth(),  fieldRect.getHeight()) != 0 ||",
          "847:                    Float.compare(bbox.getHeight(), fieldRect.getWidth()) != 0;",
          "848:         }",
          "849:         else",
          "850:         {",
          "851:             return Float.compare(bbox.getWidth(),  fieldRect.getWidth()) != 0 ||",
          "852:                    Float.compare(bbox.getHeight(), fieldRect.getHeight()) != 0;",
          "853:         }",
          "",
          "[Added Lines]",
          "716:     private Matrix resolveTransformationMatrix(PDAnnotation annotation, PDAppearanceStream appearanceStream)",
          "719:         Rectangle2D transformedAppearanceBox = getTransformedAppearanceBBox(appearanceStream);",
          "720:         PDRectangle annotationRect = annotation.getRectangle();",
          "723:         Matrix transformationMatrix = new Matrix();",
          "724:         transformationMatrix.translate((float) (annotationRect.getLowerLeftX()-transformedAppearanceBox.getX()), (float) (annotationRect.getLowerLeftY()-transformedAppearanceBox.getY()));",
          "725:         transformationMatrix.scale((float) (annotationRect.getWidth()/transformedAppearanceBox.getWidth()), (float) (annotationRect.getHeight()/transformedAppearanceBox.getHeight()));",
          "726:         return transformationMatrix;",
          "738:     private Rectangle2D getTransformedAppearanceBBox(PDAppearanceStream appearanceStream)",
          "739:     {",
          "740:         Matrix appearanceStreamMatrix = appearanceStream.getMatrix();",
          "741:         PDRectangle appearanceStreamBBox = appearanceStream.getBBox();",
          "742:         GeneralPath transformedAppearanceBox = appearanceStreamBBox.transform(appearanceStreamMatrix);",
          "743:         return transformedAppearanceBox.getBounds2D();",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     public void testFlattenPDFBOX563() throws IOException",
          "76:     {",
          "77:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12425859/TestFax_56972.pdf\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     @Test",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     public void testFlattenPDFBOX2469Filled() throws IOException",
          "100:     {",
          "101:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12678455/testPDF_acroForm.pdf\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     @Test",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     public void testFlattenOpenOfficeForm() throws IOException",
          "196:     {",
          "197:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12839977/OpenOfficeForm.pdf\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     @Test",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:     public void testFlattenPDFBox4615() throws IOException",
          "244:     {",
          "245:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12976452/resetboundingbox-filled.pdf\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     @Test",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:         flattenAndCompare(sourceUrl, targetFileName);",
          "302:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:     @Test",
          "305:     public void testFlattenPDFBox4958() throws IOException",
          "306:     {",
          "307:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13012242/PDFBOX-4958.pdf\";",
          "308:         String targetFileName = \"PDFBOX-4958-flattened.pdf\";",
          "310:         flattenAndCompare(sourceUrl, targetFileName);",
          "311:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4cc2a2ec371bd74ee4b881090bcbcca6d55c8152",
      "candidate_info": {
        "commit_hash": "4cc2a2ec371bd74ee4b881090bcbcca6d55c8152",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4cc2a2ec371bd74ee4b881090bcbcca6d55c8152",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java"
        ],
        "message": "PDFBOX-4958 disable tests failing on ci-builds because of minimal non visual differences\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882153 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     public void testFlattenPDFBOX563() throws IOException",
          "76:     {",
          "77:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12425859/TestFax_56972.pdf\";",
          "",
          "[Removed Lines]",
          "74:     @Test",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:     public void testFlattenPDFBox4615() throws IOException",
          "244:     {",
          "245:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12976452/resetboundingbox-filled.pdf\";",
          "",
          "[Removed Lines]",
          "242:     @Test",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:         flattenAndCompare(sourceUrl, targetFileName);",
          "302:     }",
          "305:     public void testFlattenPDFBox4958() throws IOException",
          "306:     {",
          "307:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13012242/PDFBOX-4958.pdf\";",
          "",
          "[Removed Lines]",
          "304:     @Test",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a40013000629272a86bd877aca264cf7a83a8805",
      "candidate_info": {
        "commit_hash": "a40013000629272a86bd877aca264cf7a83a8805",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a40013000629272a86bd877aca264cf7a83a8805",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"
        ],
        "message": "PDFBOX-5201: add some Adobe Illustrator names\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890249 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     public static final COSName AESV2 = new COSName(\"AESV2\");",
          "59:     public static final COSName AESV3 = new COSName(\"AESV3\");",
          "60:     public static final COSName AFTER = new COSName(\"After\");",
          "61:     public static final COSName AIS = new COSName(\"AIS\");",
          "62:     public static final COSName ALL_OFF = new COSName(\"AllOff\");",
          "63:     public static final COSName ALL_ON = new COSName(\"AllOn\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     public static final COSName AI_META_DATA = new COSName(\"AIMetaData\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:     public static final COSName IDENTITY_H = new COSName(\"Identity-H\");",
          "304:     public static final COSName IDENTITY_V = new COSName(\"Identity-V\");",
          "305:     public static final COSName IF = new COSName(\"IF\");",
          "306:     public static final COSName IM = new COSName(\"IM\");",
          "307:     public static final COSName IMAGE = new COSName(\"Image\");",
          "308:     public static final COSName IMAGE_MASK = new COSName(\"ImageMask\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:     public static final COSName ILLUSTRATOR = new COSName(\"Illustrator\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447:     public static final COSName PDF_DOC_ENCODING = new COSName(\"PDFDocEncoding\");",
          "448:     public static final COSName PERMS = new COSName(\"Perms\");",
          "449:     public static final COSName PERCEPTUAL = new COSName(\"Perceptual\");",
          "450:     public static final COSName PG = new COSName(\"Pg\");",
          "451:     public static final COSName PRE_RELEASE = new COSName(\"PreRelease\");",
          "452:     public static final COSName PREDICTOR = new COSName(\"Predictor\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     public static final COSName PIECE_INFO = new COSName(\"PieceInfo\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "454:     public static final COSName PRINT_AREA = new COSName(\"PrintArea\");",
          "455:     public static final COSName PRINT_CLIP = new COSName(\"PrintClip\");",
          "456:     public static final COSName PRINT_SCALING = new COSName(\"PrintScaling\");",
          "457:     public static final COSName PROC_SET = new COSName(\"ProcSet\");",
          "458:     public static final COSName PROCESS = new COSName(\"Process\");",
          "459:     public static final COSName PRODUCER = new COSName(\"Producer\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:     public static final COSName PRIVATE = new COSName(\"Private\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6c53ca8dcfe3b319841fef08b9ab06aa0ed759e",
      "candidate_info": {
        "commit_hash": "d6c53ca8dcfe3b319841fef08b9ab06aa0ed759e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d6c53ca8dcfe3b319841fef08b9ab06aa0ed759e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ],
        "message": "PDFBOX-4892: optimize + fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890957 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java||pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:         {",
          "718:             while (x < xRefLength)",
          "719:             {",
          "723:                 {",
          "724:                     writeXrefEntry(xRefEntries.get(j++));",
          "725:                 }",
          "",
          "[Removed Lines]",
          "720:                 writeXrefRange(xRefRanges[x], xRefRanges[x + 1]);",
          "722:                 for (int i = 0; i < xRefRanges[x + 1]; ++i)",
          "",
          "[Added Lines]",
          "720:                 long xRefRangeX1 = xRefRanges[x + 1];",
          "721:                 writeXrefRange(xRefRanges[x], xRefRangeX1);",
          "723:                 for (int i = 0; i < xRefRangeX1; ++i)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efa8fd76c68a13ced02921148ea81ea40bf795d9",
      "candidate_info": {
        "commit_hash": "efa8fd76c68a13ced02921148ea81ea40bf795d9",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/efa8fd76c68a13ced02921148ea81ea40bf795d9",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ],
        "message": "PDFBOX-5163: stop reading corrupted dictionaries to avoid a stack overflow exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888706 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/BaseParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:         COSBase value = parseDirObject();",
          "155:         skipSpaces();",
          "158:         {",
          "159:             return value;",
          "160:         }",
          "",
          "[Removed Lines]",
          "157:         if (!(value instanceof COSNumber) || !isDigit())",
          "",
          "[Added Lines]",
          "157:         if ((!(value instanceof COSNumber) || !isDigit()))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:             }",
          "214:             else if (c == '/')",
          "215:             {",
          "217:             }",
          "218:             else",
          "219:             {",
          "",
          "[Removed Lines]",
          "216:                 parseCOSDictionaryNameValuePair(obj);",
          "",
          "[Added Lines]",
          "218:                 if (!parseCOSDictionaryNameValuePair(obj))",
          "219:                 {",
          "220:                     return obj;",
          "221:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:         return false;",
          "278:     }",
          "281:     {",
          "282:         COSName key = parseCOSName();",
          "283:         COSBase value = parseCOSDictionaryValue();",
          "",
          "[Removed Lines]",
          "280:     private void parseCOSDictionaryNameValuePair(COSDictionary obj) throws IOException",
          "",
          "[Added Lines]",
          "285:     private boolean parseCOSDictionaryNameValuePair(COSDictionary obj) throws IOException",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:         if (value == null)",
          "301:         {",
          "302:             LOG.warn(\"Bad dictionary declaration at offset \" + seqSource.getPosition());",
          "303:         }",
          "304:         else",
          "305:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:             return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:             value.setDirect(true);",
          "308:             obj.setItem(key, value);",
          "309:         }",
          "310:     }",
          "312:     protected void skipWhiteSpaces() throws IOException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:         return true;",
          "",
          "---------------"
        ]
      }
    }
  ]
}