{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af099b484cf6271cb91c7149b57851772c4c16c3",
      "candidate_info": {
        "commit_hash": "af099b484cf6271cb91c7149b57851772c4c16c3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/af099b484cf6271cb91c7149b57851772c4c16c3",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.5beta+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_BETA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018042500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5beta (Build: 20180425)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018042700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5beta+ (Build: 20180427)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "800c81dc387c8b0b3a544a8df6f55c7e86625a9a",
      "candidate_info": {
        "commit_hash": "800c81dc387c8b0b3a544a8df6f55c7e86625a9a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/800c81dc387c8b0b3a544a8df6f55c7e86625a9a",
        "files": [
          "version.php"
        ],
        "message": "MDL-61876 admin: Bump version",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018050200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018050800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ec50178161574928d89f3074e53a5740a052d5",
      "candidate_info": {
        "commit_hash": "09ec50178161574928d89f3074e53a5740a052d5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/09ec50178161574928d89f3074e53a5740a052d5",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-63548 core_message: added mark_all_conversation_messages_as_read WS",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:         'ajax' => true,",
          "1066:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1067:     ),",
          "1068:     'core_message_mark_message_read' => array(",
          "1069:         'classname' => 'core_message_external',",
          "1070:         'methodname' => 'mark_message_read',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:     'core_message_mark_all_conversation_messages_as_read' => array(",
          "1069:         'classname' => 'core_message_external',",
          "1070:         'methodname' => 'mark_all_conversation_messages_as_read',",
          "1071:         'classpath' => 'message/externallib.php',",
          "1072:         'description' => 'Mark all conversation messages as read for a given user',",
          "1073:         'type' => 'write',",
          "1074:         'ajax' => true,",
          "1075:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1076:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2513:         return true;",
          "2514:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2522:     public static function mark_all_conversation_messages_as_read_parameters() {",
          "2523:         return new external_function_parameters(",
          "2524:             array(",
          "2525:                 'userid' => new external_value(PARAM_INT, 'The user id who who we are marking the messages as read for'),",
          "2526:                 'conversationid' =>",
          "2527:                     new external_value(PARAM_INT, 'The conversation id who who we are marking the messages as read for')",
          "2528:             )",
          "2529:         );",
          "2530:     }",
          "2539:     public static function mark_all_conversation_messages_as_read(int $userid, int $conversationid) {",
          "2540:         global $CFG;",
          "2543:         if (empty($CFG->messaging)) {",
          "2544:             throw new moodle_exception('disabled', 'message');",
          "2545:         }",
          "2547:         $params = array(",
          "2548:             'userid' => $userid,",
          "2549:             'conversationid' => $conversationid,",
          "2550:         );",
          "2551:         $params = self::validate_parameters(self::mark_all_conversation_messages_as_read_parameters(), $params);",
          "2553:         $context = context_system::instance();",
          "2554:         self::validate_context($context);",
          "2556:         $user = core_user::get_user($params['userid'], '*', MUST_EXIST);",
          "2557:         core_user::require_active_user($user);",
          "2559:         if (\\core_message\\api::can_mark_all_messages_as_read($userid, $conversationid)) {",
          "2560:             \\core_message\\api::mark_all_messages_as_read($userid, $conversationid);",
          "2561:         } else {",
          "2562:             throw new moodle_exception('accessdenied', 'admin');",
          "2563:         }",
          "2564:     }",
          "2572:     public static function mark_all_conversation_messages_as_read_returns() {",
          "2573:         return new external_warnings();",
          "2574:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3245:         $this->assertEquals(6, $DB->count_records('message_user_actions'));",
          "3246:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3251:     public function test_mark_all_conversation_messages_as_read_invalid_user_exception() {",
          "3252:         $this->resetAfterTest(true);",
          "3254:         $user1 = self::getDataGenerator()->create_user();",
          "3255:         $user2 = self::getDataGenerator()->create_user();",
          "3258:         $time = time();",
          "3259:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3260:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3261:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3262:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3264:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3266:         $this->expectException('moodle_exception');",
          "3267:         core_message_external::mark_all_conversation_messages_as_read(-2132131, $conversationid);",
          "3268:     }",
          "3273:     public function test_mark_all_conversation_messages_as_read_access_denied_exception() {",
          "3274:         $this->resetAfterTest(true);",
          "3276:         $user1 = self::getDataGenerator()->create_user();",
          "3277:         $user2 = self::getDataGenerator()->create_user();",
          "3278:         $user3 = self::getDataGenerator()->create_user();",
          "3281:         $time = time();",
          "3282:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3283:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3284:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3285:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3287:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3290:         $this->expectException('moodle_exception');",
          "3291:         core_message_external::mark_all_conversation_messages_as_read($user3->id, $conversationid);",
          "3292:     }",
          "3297:     public function test_mark_all_conversation_messages_as_read_wrong_user() {",
          "3298:         $this->resetAfterTest(true);",
          "3300:         $user1 = self::getDataGenerator()->create_user();",
          "3301:         $user2 = self::getDataGenerator()->create_user();",
          "3304:         $time = time();",
          "3305:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3306:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3307:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3308:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3310:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3313:         $this->setUser($user1);",
          "3314:         $this->expectException('moodle_exception');",
          "3315:         core_message_external::mark_all_conversation_messages_as_read($user2->id, $conversationid);",
          "3316:     }",
          "3321:     public function test_mark_all_conversation_messages_as_admin() {",
          "3322:         global $DB;",
          "3324:         $this->resetAfterTest(true);",
          "3326:         $user1 = self::getDataGenerator()->create_user();",
          "3327:         $user2 = self::getDataGenerator()->create_user();",
          "3330:         $time = time();",
          "3331:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3332:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3333:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3334:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3336:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3339:         $this->setAdminUser();",
          "3340:         core_message_external::mark_all_conversation_messages_as_read($user2->id, $conversationid);",
          "3341:         $this->assertEquals(2, $DB->count_records('message_user_actions'));",
          "3342:     }",
          "3347:     public function test_mark_all_conversation_messages_as_read() {",
          "3348:         global $DB;",
          "3350:         $this->resetAfterTest(true);",
          "3352:         $user1 = self::getDataGenerator()->create_user();",
          "3353:         $user2 = self::getDataGenerator()->create_user();",
          "3356:         $time = time();",
          "3357:         $this->send_message($user1, $user2, 'Yo!', 0, $time);",
          "3358:         $this->send_message($user2, $user1, 'Sup mang?', 0, $time + 1);",
          "3359:         $this->send_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 2);",
          "3360:         $this->send_message($user2, $user1, 'Word.', 0, $time + 3);",
          "3362:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3365:         $this->setUser($user1);",
          "3366:         core_message_external::mark_all_conversation_messages_as_read($user1->id, $conversationid);",
          "3367:         $this->assertEquals(2, $DB->count_records('message_user_actions'));",
          "3368:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6482734681b431df79d0e0e407d226d343a0f67d",
      "candidate_info": {
        "commit_hash": "6482734681b431df79d0e0e407d226d343a0f67d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6482734681b431df79d0e0e407d226d343a0f67d",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-64786 analytics: Add a new name field to the models table",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2988:         upgrade_main_savepoint(true, 2019041000.02);",
          "2989:     }",
          "2991:     return true;",
          "2992: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2991:     if ($oldversion < 2019041300.01) {",
          "2993:         $table = new xmldb_table('analytics_models');",
          "2994:         $field = new xmldb_field('name', XMLDB_TYPE_CHAR, '1333', null, null, null, null, 'trained');",
          "2996:         if (!$dbman->field_exists($table, $field)) {",
          "2997:             $dbman->add_field($table, $field);",
          "2998:         }",
          "3000:         upgrade_main_savepoint(true, 2019041300.01);",
          "3001:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019041300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ac4ea89d945c2ba9d104e7f3de34bd911e1633d",
      "candidate_info": {
        "commit_hash": "2ac4ea89d945c2ba9d104e7f3de34bd911e1633d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2ac4ea89d945c2ba9d104e7f3de34bd911e1633d",
        "files": [
          "favourites/classes/local/entity/favourite.php",
          "favourites/classes/local/repository/favourite_repository.php",
          "favourites/classes/local/repository/favourite_repository_interface.php",
          "favourites/classes/local/service/user_favourite_service.php",
          "favourites/classes/privacy/provider.php",
          "favourites/classes/service_factory.php",
          "favourites/tests/privacy_test.php",
          "favourites/tests/repository_test.php",
          "favourites/tests/service_test.php",
          "lang/en/favourites.php",
          "lib/classes/component.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/tests/component_test.php",
          "phpunit.xml.dist",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63658-master-2' of https://github.com/snake/moodle",
        "before_after_code_files": [
          "favourites/classes/local/entity/favourite.php||favourites/classes/local/entity/favourite.php",
          "favourites/classes/local/repository/favourite_repository.php||favourites/classes/local/repository/favourite_repository.php",
          "favourites/classes/local/repository/favourite_repository_interface.php||favourites/classes/local/repository/favourite_repository_interface.php",
          "favourites/classes/local/service/user_favourite_service.php||favourites/classes/local/service/user_favourite_service.php",
          "favourites/classes/privacy/provider.php||favourites/classes/privacy/provider.php",
          "favourites/classes/service_factory.php||favourites/classes/service_factory.php",
          "favourites/tests/privacy_test.php||favourites/tests/privacy_test.php",
          "favourites/tests/repository_test.php||favourites/tests/repository_test.php",
          "favourites/tests/service_test.php||favourites/tests/service_test.php",
          "lang/en/favourites.php||lang/en/favourites.php",
          "lib/classes/component.php||lib/classes/component.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/tests/component_test.php||lib/tests/component_test.php",
          "phpunit.xml.dist||phpunit.xml.dist",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "favourites/classes/local/entity/favourite.php||favourites/classes/local/entity/favourite.php": [
          "File: favourites/classes/local/entity/favourite.php -> favourites/classes/local/entity/favourite.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core_favourites\\local\\entity;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "34: class favourite {",
          "36:     public $id;",
          "39:     public $component;",
          "42:     public $itemtype;",
          "45:     public $itemid;",
          "48:     public $contextid;",
          "51:     public $userid;",
          "54:     public $ordering;",
          "57:     public $timecreated;",
          "60:     public $timemodified;",
          "70:     public function __construct(string $component, string $itemtype, int $itemid, int $contextid, int $userid) {",
          "71:         $this->component = $component;",
          "72:         $this->itemtype = $itemtype;",
          "73:         $this->itemid = $itemid;",
          "74:         $this->contextid = $contextid;",
          "75:         $this->userid = $userid;",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ],
        "favourites/classes/local/repository/favourite_repository.php||favourites/classes/local/repository/favourite_repository.php": [
          "File: favourites/classes/local/repository/favourite_repository.php -> favourites/classes/local/repository/favourite_repository.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "23: namespace core_favourites\\local\\repository;",
          "24: use \\core_favourites\\local\\entity\\favourite;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "36: class favourite_repository implements favourite_repository_interface {",
          "41:     protected $favouritetable = 'favourite';",
          "48:     protected function get_favourite_from_record(\\stdClass $record) : favourite {",
          "49:         $favourite = new favourite(",
          "50:             $record->component,",
          "51:             $record->itemtype,",
          "52:             $record->itemid,",
          "53:             $record->contextid,",
          "54:             $record->userid",
          "55:         );",
          "56:         $favourite->id = $record->id;",
          "57:         $favourite->ordering = $record->ordering ?? null;",
          "58:         $favourite->timecreated = $record->timecreated ?? null;",
          "59:         $favourite->timemodified = $record->timemodified ?? null;",
          "61:         return $favourite;",
          "62:     }",
          "69:     protected function get_list_of_favourites_from_records(array $records) {",
          "70:         $list = [];",
          "71:         foreach ($records as $index => $record) {",
          "72:             $list[$index] = $this->get_favourite_from_record($record);",
          "73:         }",
          "74:         return $list;",
          "75:     }",
          "85:     public function add(favourite $favourite) : favourite {",
          "86:         global $DB;",
          "87:         $this->validate($favourite);",
          "88:         $favourite = (array)$favourite;",
          "89:         $time = time();",
          "90:         $favourite['timecreated'] = $time;",
          "91:         $favourite['timemodified'] = $time;",
          "92:         $id = $DB->insert_record($this->favouritetable, $favourite);",
          "93:         return $this->find($id);",
          "94:     }",
          "104:     public function add_all(array $items) : array {",
          "105:         global $DB;",
          "106:         $time = time();",
          "107:         foreach ($items as $item) {",
          "108:             $this->validate($item);",
          "109:             $favourite = (array)$item;",
          "110:             $favourite['timecreated'] = $time;",
          "111:             $favourite['timemodified'] = $time;",
          "112:             $ids[] = $DB->insert_record($this->favouritetable, $favourite);",
          "113:         }",
          "114:         list($insql, $params) = $DB->get_in_or_equal($ids);",
          "115:         $records = $DB->get_records_select($this->favouritetable, \"id $insql\", $params);",
          "116:         return $this->get_list_of_favourites_from_records($records);",
          "117:     }",
          "126:     public function find(int $id) : favourite {",
          "127:         global $DB;",
          "128:         $record = $DB->get_record($this->favouritetable, ['id' => $id], '*', MUST_EXIST);",
          "129:         return $this->get_favourite_from_record($record);",
          "130:     }",
          "141:     public function find_by(array $criteria, int $limitfrom = 0, int $limitnum = 0) : array {",
          "142:         global $DB;",
          "143:         $records = $DB->get_records($this->favouritetable, $criteria, '', '*', $limitfrom, $limitnum);",
          "144:         return $this->get_list_of_favourites_from_records($records);",
          "145:     }",
          "155:     public function find_all(int $limitfrom = 0, int $limitnum = 0) : array {",
          "156:         global $DB;",
          "157:         $records = $DB->get_records($this->favouritetable, null, '', '*', $limitfrom, $limitnum);",
          "158:         return $this->get_list_of_favourites_from_records($records);",
          "159:     }",
          "174:     public function find_favourite(int $userid, string $component, string $itemtype, int $itemid, int $contextid) : favourite {",
          "175:         global $DB;",
          "177:         $record = $DB->get_record($this->favouritetable, [",
          "178:             'userid' => $userid,",
          "179:             'component' => $component,",
          "180:             'itemtype' => $itemtype,",
          "181:             'itemid' => $itemid,",
          "182:             'contextid' => $contextid",
          "183:         ], '*', MUST_EXIST);",
          "184:         return $this->get_favourite_from_record($record);",
          "185:     }",
          "194:     public function exists(int $id) : bool {",
          "195:         global $DB;",
          "196:         return $DB->record_exists($this->favouritetable, ['id' => $id]);",
          "197:     }",
          "206:     public function update(favourite $favourite) : favourite {",
          "207:         global $DB;",
          "208:         $time = time();",
          "209:         $favourite->timemodified = $time;",
          "210:         $DB->update_record($this->favouritetable, $favourite);",
          "211:         return $this->find($favourite->id);",
          "212:     }",
          "220:     public function delete(int $id) {",
          "221:         global $DB;",
          "222:         $DB->delete_records($this->favouritetable, ['id' => $id]);",
          "223:     }",
          "231:     public function count() : int {",
          "232:         global $DB;",
          "233:         return $DB->count_records($this->favouritetable);",
          "234:     }",
          "250:     public function exists_by_area(int $userid, string $component, string $itemtype, int $itemid, int $contextid) : bool {",
          "251:         global $DB;",
          "252:         return $DB->record_exists($this->favouritetable,",
          "253:             [",
          "254:                 'userid' => $userid,",
          "255:                 'component' => $component,",
          "256:                 'itemtype' => $itemtype,",
          "257:                 'itemid' => $itemid,",
          "258:                 'contextid' => $contextid",
          "259:             ]",
          "260:         );",
          "261:     }",
          "271:     public function delete_by_area(int $userid, string $component, string $itemtype) {",
          "272:         global $DB;",
          "273:         $DB->delete_records($this->favouritetable,",
          "274:             [",
          "275:                 'userid' => $userid,",
          "276:                 'component' => $component,",
          "277:                 'itemtype' => $itemtype",
          "278:             ]",
          "279:         );",
          "280:     }",
          "289:     public function count_by(array $criteria) : int {",
          "290:         global $DB;",
          "291:         return $DB->count_records($this->favouritetable, $criteria);",
          "292:     }",
          "300:     protected function validate(favourite $favourite) {",
          "302:         $favourite = (array)$favourite;",
          "306:         $allowedfields = [",
          "307:             'userid' => true,",
          "308:             'component' => true,",
          "309:             'itemtype' => true,",
          "310:             'itemid' => true,",
          "311:             'contextid' => true,",
          "312:             'ordering' => false,",
          "313:             'timecreated' => false,",
          "314:             'timemodified' => false,",
          "315:             'id' => false",
          "316:         ];",
          "318:         $requiredfields = array_filter($allowedfields, function($field) {",
          "319:             return $field;",
          "320:         });",
          "322:         if ($missingfields = array_keys(array_diff_key($requiredfields, $favourite))) {",
          "323:             throw new \\moodle_exception(\"Missing object property(s) '\" . join(', ', $missingfields) . \"'.\");",
          "324:         }",
          "327:         if ($unsupportedfields = array_keys(array_diff_key($favourite, $allowedfields))) {",
          "328:             throw new \\moodle_exception(\"Unexpected object property(s) '\" . join(', ', $unsupportedfields) . \"'.\");",
          "329:         }",
          "330:     }",
          "331: }",
          "",
          "---------------"
        ],
        "favourites/classes/local/repository/favourite_repository_interface.php||favourites/classes/local/repository/favourite_repository_interface.php": [
          "File: favourites/classes/local/repository/favourite_repository_interface.php -> favourites/classes/local/repository/favourite_repository_interface.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "23: namespace core_favourites\\local\\repository;",
          "24: use \\core_favourites\\local\\entity\\favourite;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "31: interface favourite_repository_interface {",
          "38:     public function add(favourite $item) : favourite;",
          "46:     public function add_all(array $items) : array;",
          "54:     public function find(int $id) : favourite;",
          "63:     public function find_all(int $limitfrom = 0, int $limitnum = 0) : array;",
          "73:     public function find_by(array $criteria, int $limitfrom = 0, int $limitnum = 0) : array;",
          "81:     public function exists(int $id) : bool;",
          "88:     public function count() : int;",
          "96:     public function update(favourite $item) : favourite;",
          "104:     public function delete(int $id);",
          "116:     public function find_favourite(int $userid, string $component, string $itemtype, int $itemid, int $contextid) : favourite;",
          "117: }",
          "",
          "---------------"
        ],
        "favourites/classes/local/service/user_favourite_service.php||favourites/classes/local/service/user_favourite_service.php": [
          "File: favourites/classes/local/service/user_favourite_service.php -> favourites/classes/local/service/user_favourite_service.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core_favourites\\local\\service;",
          "25: use \\core_favourites\\local\\entity\\favourite;",
          "26: use \\core_favourites\\local\\repository\\favourite_repository_interface;",
          "28: defined('MOODLE_INTERNAL') || die();",
          "41: class user_favourite_service {",
          "44:     protected $repo;",
          "47:     protected $userid;",
          "55:     public function __construct(\\context_user $usercontext, favourite_repository_interface $repository) {",
          "56:         $this->repo = $repository;",
          "57:         $this->userid = $usercontext->instanceid;",
          "58:     }",
          "71:     public function create_favourite(string $component, string $itemtype, int $itemid, \\context $context,",
          "72:             int $ordering = null) : favourite {",
          "76:         if (!in_array($component, \\core_component::get_component_names())) {",
          "77:             throw new \\moodle_exception(\"Invalid component name '$component'\");",
          "78:         }",
          "80:         $favourite = new favourite($component, $itemtype, $itemid, $context->id, $this->userid);",
          "81:         $favourite->ordering = $ordering > 0 ? $ordering : null;",
          "82:         return $this->repo->add($favourite);",
          "83:     }",
          "98:     public function find_favourites_by_type(string $component, string $itemtype, int $limitfrom = 0, int $limitnum = 0) : array {",
          "99:         if (!in_array($component, \\core_component::get_component_names())) {",
          "100:             throw new \\moodle_exception(\"Invalid component name '$component'\");",
          "101:         }",
          "102:         return $this->repo->find_by(",
          "103:             [",
          "104:                 'userid' => $this->userid,",
          "105:                 'component' => $component,",
          "106:                 'itemtype' => $itemtype",
          "107:             ],",
          "108:             $limitfrom,",
          "109:             $limitnum",
          "110:         );",
          "111:     }",
          "124:     public function delete_favourite(string $component, string $itemtype, int $itemid, \\context $context) {",
          "125:         if (!in_array($component, \\core_component::get_component_names())) {",
          "126:             throw new \\moodle_exception(\"Invalid component name '$component'\");",
          "127:         }",
          "130:         try {",
          "131:             $favourite = $this->repo->find_favourite($this->userid, $component, $itemtype, $itemid, $context->id);",
          "132:         } catch (\\moodle_exception $e) {",
          "133:             throw new \\moodle_exception(\"Favourite does not exist for the user. Cannot delete.\");",
          "134:         }",
          "136:         $this->repo->delete($favourite->id);",
          "137:     }",
          "138: }",
          "",
          "---------------"
        ],
        "favourites/classes/privacy/provider.php||favourites/classes/privacy/provider.php": [
          "File: favourites/classes/privacy/provider.php -> favourites/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_favourites\\privacy;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: use \\core_privacy\\local\\metadata\\collection;",
          "30: use \\core_privacy\\local\\request\\context;",
          "31: use \\core_privacy\\local\\request\\approved_contextlist;",
          "39: class provider implements \\core_privacy\\local\\metadata\\provider, \\core_privacy\\local\\request\\subsystem\\plugin_provider {",
          "47:     public static function get_metadata(collection $collection) : collection {",
          "48:         return $collection->add_database_table('favourite', [",
          "49:             'userid' => 'privacy:metadata:favourite:userid',",
          "50:             'component' => 'privacy:metadata:favourite:component',",
          "51:             'itemtype' => 'privacy:metadata:favourite:itemtype',",
          "52:             'itemid' => 'privacy:metadata:favourite:itemid',",
          "53:             'ordering' => 'privacy:metadata:favourite:ordering',",
          "54:             'timecreated' => 'privacy:metadata:favourite:timecreated',",
          "55:             'timemodified' => 'privacy:metadata:favourite:timemodified',",
          "56:         ], 'privacy:metadata:favourite');",
          "57:     }",
          "83:     public static function add_contexts_for_userid(\\core_privacy\\local\\request\\contextlist $contextlist, int $userid,",
          "84:                                                    string $component, string $itemtype = null) {",
          "85:         $sql = \"SELECT contextid",
          "86:                   FROM {favourite} f",
          "87:                  WHERE userid = :userid",
          "88:                    AND component = :component\";",
          "89:         if (!is_null($itemtype)) {",
          "90:             $sql .= \"AND itemtype = :itemtype\";",
          "91:         }",
          "92:         $params = ['userid' => $userid, 'component' => $component, 'itemtype' => $itemtype];",
          "93:         $contextlist->add_from_sql($sql, $params);",
          "94:     }",
          "104:     public static function delete_favourites_for_all_users(\\context $context, string $component, string $itemtype) {",
          "105:         global $DB;",
          "107:         $params = [",
          "108:             'component' => $component,",
          "109:             'itemtype' => $itemtype,",
          "110:             'contextid' => $context->id",
          "111:         ];",
          "113:         $select = \"component = :component AND itemtype =:itemtype AND contextid = :contextid\";",
          "114:         $DB->delete_records_select('favourite', $select, $params);",
          "115:     }",
          "126:     public static function delete_favourites_for_user(approved_contextlist $contextlist, string $component, string $itemtype) {",
          "127:         global $DB;",
          "129:         $userid = $contextlist->get_user()->id;",
          "131:         list($insql, $inparams) = $DB->get_in_or_equal($contextlist->get_contextids(), SQL_PARAMS_NAMED);",
          "133:         $params = [",
          "134:             'userid' => $userid,",
          "135:             'component' => $component,",
          "136:             'itemtype' => $itemtype,",
          "137:         ];",
          "138:         $params += $inparams;",
          "140:         $select = \"userid = :userid AND component = :component AND itemtype =:itemtype AND contextid $insql\";",
          "141:         $DB->delete_records_select('favourite', $select, $params);",
          "142:     }",
          "143: }",
          "",
          "---------------"
        ],
        "favourites/classes/service_factory.php||favourites/classes/service_factory.php": [
          "File: favourites/classes/service_factory.php -> favourites/classes/service_factory.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_favourites;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class service_factory {",
          "45:     public static function get_service_for_user_context(\\context_user $context) : local\\service\\user_favourite_service {",
          "46:         return new local\\service\\user_favourite_service($context, new local\\repository\\favourite_repository());",
          "47:     }",
          "48: }",
          "",
          "---------------"
        ],
        "favourites/tests/privacy_test.php||favourites/tests/privacy_test.php": [
          "File: favourites/tests/privacy_test.php -> favourites/tests/privacy_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use \\core_privacy\\tests\\provider_testcase;",
          "29: use \\core_favourites\\privacy\\provider;",
          "37: class privacy_test extends provider_testcase {",
          "39:     public function setUp() {",
          "40:         $this->resetAfterTest(true);",
          "41:     }",
          "46:     protected function set_up_courses_and_users() {",
          "47:         $user1 = self::getDataGenerator()->create_user();",
          "48:         $user1context = \\context_user::instance($user1->id);",
          "49:         $user2 = self::getDataGenerator()->create_user();",
          "50:         $user2context = \\context_user::instance($user2->id);",
          "51:         $course1 = self::getDataGenerator()->create_course();",
          "52:         $course2 = self::getDataGenerator()->create_course();",
          "53:         $course1context = context_course::instance($course1->id);",
          "54:         $course2context = context_course::instance($course2->id);",
          "55:         return [$user1, $user2, $user1context, $user2context, $course1context, $course2context];",
          "56:     }",
          "61:     public function test_add_contexts_for_userid() {",
          "62:         list($user1, $user2, $user1context, $user2context, $course1context, $course2context) = $this->set_up_courses_and_users();",
          "65:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "66:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "67:         $systemcontext = context_system::instance();",
          "68:         $ufservice1->create_favourite('core_course', 'course', $course1context->instanceid, $systemcontext);",
          "69:         $ufservice1->create_favourite('core_course', 'course', $course2context->instanceid, $systemcontext);",
          "70:         $ufservice2->create_favourite('core_course', 'course', $course2context->instanceid, $systemcontext);",
          "71:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'course'));",
          "72:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'course'));",
          "75:         $ufservice1->create_favourite('core_course', 'course', $course1context->instanceid, $user1context);",
          "78:         $contextlist = new \\core_privacy\\local\\request\\contextlist();",
          "79:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $user1->id, 'core_course', 'course');",
          "82:         $this->assertCount(2, $contextlist->get_contextids());",
          "85:         $contextlist = new \\core_privacy\\local\\request\\contextlist();",
          "86:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $user2->id, 'core_course', 'course');",
          "87:         $this->assertCount(1, $contextlist->get_contextids());",
          "88:     }",
          "93:     public function test_delete_favourites_for_user() {",
          "94:         list($user1, $user2, $user1context, $user2context, $course1context, $course2context) = $this->set_up_courses_and_users();",
          "97:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "98:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "99:         $ufservice1->create_favourite('core_course', 'course', $course1context->instanceid, $user1context);",
          "100:         $ufservice1->create_favourite('core_course', 'course', $course2context->instanceid, $user1context);",
          "101:         $ufservice2->create_favourite('core_course', 'course', $course2context->instanceid, $user2context);",
          "102:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'course'));",
          "103:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'course'));",
          "106:         $approvedcontextlist = new \\core_privacy\\local\\request\\approved_contextlist($user1, 'core_course', [$user1context->id]);",
          "107:         provider::delete_favourites_for_user($approvedcontextlist, 'core_course', 'course');",
          "110:         $this->assertCount(0, $ufservice1->find_favourites_by_type('core_course', 'course'));",
          "111:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'course'));",
          "112:     }",
          "114:     public function test_delete_favourites_for_all_users() {",
          "115:         list($user1, $user2, $user1context, $user2context, $course1context, $course2context) = $this->set_up_courses_and_users();",
          "118:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "119:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "120:         $ufservice1->create_favourite('core_course', 'modules', 1, $course1context);",
          "121:         $ufservice1->create_favourite('core_course', 'modules', 2, $course1context);",
          "122:         $ufservice2->create_favourite('core_course', 'modules', 3, $course1context);",
          "125:         $ufservice2->create_favourite('core_course', 'modules', 5, $course2context);",
          "127:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'modules'));",
          "128:         $this->assertCount(2, $ufservice2->find_favourites_by_type('core_course', 'modules'));",
          "131:         provider::delete_favourites_for_all_users($course1context, 'core_course', 'modules');",
          "134:         $this->assertCount(0, $ufservice1->find_favourites_by_type('core_course', 'modules'));",
          "135:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'modules'));",
          "136:     }",
          "137: }",
          "",
          "---------------"
        ],
        "favourites/tests/repository_test.php||favourites/tests/repository_test.php": [
          "File: favourites/tests/repository_test.php -> favourites/tests/repository_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use \\core_favourites\\local\\repository\\favourite_repository;",
          "29: use \\core_favourites\\local\\entity\\favourite;",
          "37: class favourite_repository_testcase extends advanced_testcase {",
          "39:     public function setUp() {",
          "40:         $this->resetAfterTest();",
          "41:     }",
          "44:     protected function setup_users_and_courses() {",
          "45:         $user1 = self::getDataGenerator()->create_user();",
          "46:         $user1context = \\context_user::instance($user1->id);",
          "47:         $user2 = self::getDataGenerator()->create_user();",
          "48:         $user2context = \\context_user::instance($user2->id);",
          "49:         $course1 = self::getDataGenerator()->create_course();",
          "50:         $course2 = self::getDataGenerator()->create_course();",
          "51:         $course1context = context_course::instance($course1->id);",
          "52:         $course2context = context_course::instance($course2->id);",
          "53:         return [$user1context, $user2context, $course1context, $course2context];",
          "54:     }",
          "59:     public function test_add() {",
          "60:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "63:         $favouritesrepo = new favourite_repository($user1context);",
          "65:         $favcourse = new favourite(",
          "66:             'core_course',",
          "67:             'course',",
          "68:             $course1context->instanceid,",
          "69:             $course1context->id,",
          "70:             $user1context->instanceid",
          "71:         );",
          "72:         $timenow = time(); // Reference only, to check that the created item has a time equal to or greater than this.",
          "73:         $favourite = $favouritesrepo->add($favcourse);",
          "76:         $this->assertInstanceOf(favourite::class, $favourite);",
          "77:         $this->assertObjectHasAttribute('id', $favourite);",
          "78:         $this->assertEquals('core_course', $favourite->component);",
          "79:         $this->assertEquals('course', $favourite->itemtype);",
          "82:         $this->assertObjectHasAttribute('ordering', $favourite);",
          "83:         $this->assertObjectHasAttribute('timecreated', $favourite);",
          "84:         $this->assertGreaterThanOrEqual($timenow, $favourite->timecreated);",
          "87:         $this->expectException('dml_write_exception');",
          "88:         $favouritesrepo->add($favcourse);",
          "89:     }",
          "94:     public function test_add_malformed_favourite() {",
          "95:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "98:         $favouritesrepo = new favourite_repository($user1context);",
          "100:         $favcourse = new favourite(",
          "101:             'core_course',",
          "102:             'course',",
          "103:             $course1context->instanceid,",
          "104:             $course1context->id,",
          "105:             $user1context->instanceid",
          "106:         );",
          "107:         $favcourse->something = 'something';",
          "109:         $this->expectException('moodle_exception');",
          "110:         $favouritesrepo->add($favcourse);",
          "111:     }",
          "116:     public function test_add_incomplete_favourite() {",
          "117:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "120:         $favouritesrepo = new favourite_repository($user1context);",
          "122:         $favcourse = new favourite(",
          "123:             'core_course',",
          "124:             'course',",
          "125:             $course1context->instanceid,",
          "126:             $course1context->id,",
          "127:             $user1context->instanceid",
          "128:         );",
          "129:         unset($favcourse->userid);",
          "131:         $this->expectException('moodle_exception');",
          "132:         $favouritesrepo->add($favcourse);",
          "133:     }",
          "135:     public function test_add_all_basic() {",
          "136:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "139:         $favouritesrepo = new favourite_repository($user1context);",
          "140:         $favcourses = [];",
          "142:         $favcourses[] = new favourite(",
          "143:             'core_course',",
          "144:             'course',",
          "145:             $course1context->instanceid,",
          "146:             $course1context->id,",
          "147:             $user1context->instanceid",
          "148:         );",
          "149:         $favcourses[] = new favourite(",
          "150:             'core_course',",
          "151:             'course',",
          "152:             $course2context->instanceid,",
          "153:             $course2context->id,",
          "154:             $user1context->instanceid",
          "155:         );",
          "157:         $timenow = time(); // Reference only, to check that the created item has a time equal to or greater than this.",
          "158:         $favourites = $favouritesrepo->add_all($favcourses);",
          "160:         $this->assertInternalType('array', $favourites);",
          "161:         $this->assertCount(2, $favourites);",
          "162:         foreach ($favourites as $favourite) {",
          "164:             $this->assertInstanceOf(favourite::class, $favourite);",
          "165:             $this->assertEquals('core_course', $favourite->component);",
          "166:             $this->assertEquals('course', $favourite->itemtype);",
          "169:             $this->assertObjectHasAttribute('ordering', $favourite);",
          "170:             $this->assertObjectHasAttribute('timecreated', $favourite);",
          "171:             $this->assertGreaterThanOrEqual($timenow, $favourite->timecreated);",
          "172:         }",
          "175:         $this->expectException('dml_write_exception');",
          "176:         $favouritesrepo->add_all($favcourses);",
          "177:     }",
          "182:     public function test_find() {",
          "183:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "186:         $favouritesrepo = new favourite_repository($user1context);",
          "187:         $favourite = new favourite(",
          "188:             'core_course',",
          "189:             'course',",
          "190:             $course1context->instanceid,",
          "191:             $course1context->id,",
          "192:             $user1context->instanceid",
          "193:         );",
          "194:         $favourite = $favouritesrepo->add($favourite);",
          "197:         $userfavourite = $favouritesrepo->find($favourite->id);",
          "198:         $this->assertInstanceOf(favourite::class, $userfavourite);",
          "199:         $this->assertObjectHasAttribute('timecreated', $userfavourite);",
          "203:         $this->expectException(dml_exception::class);",
          "204:         $favouritesrepo->find(1);",
          "205:     }",
          "210:     public function test_find_all() {",
          "211:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "213:         $favouritesrepo = new favourite_repository($user1context);",
          "216:         $this->assertEquals([], $favouritesrepo->find_all());",
          "219:         $favourite = new favourite(",
          "220:             'core_course',",
          "221:             'course',",
          "222:             $course1context->instanceid,",
          "223:             $course1context->id,",
          "224:             $user1context->instanceid",
          "225:         );",
          "226:         $favourite2 = new favourite(",
          "227:             'core_course',",
          "228:             'course',",
          "229:             $course2context->instanceid,",
          "230:             $course2context->id,",
          "231:             $user1context->instanceid",
          "232:         );",
          "233:         $favouritesrepo->add($favourite);",
          "234:         $favouritesrepo->add($favourite2);",
          "237:         $favourites = $favouritesrepo->find_all();",
          "238:         $this->assertCount(2, $favourites);",
          "239:         foreach ($favourites as $fav) {",
          "240:             $this->assertInstanceOf(favourite::class, $fav);",
          "241:             $this->assertObjectHasAttribute('id', $fav);",
          "242:             $this->assertObjectHasAttribute('timecreated', $fav);",
          "243:         }",
          "244:     }",
          "249:     public function test_find_all_pagination() {",
          "250:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "252:         $favouritesrepo = new favourite_repository($user1context);",
          "255:         $this->assertEquals([], $favouritesrepo->find_all(0, 0));",
          "256:         $this->assertEquals([], $favouritesrepo->find_all(0, 10));",
          "257:         $this->assertEquals([], $favouritesrepo->find_all(1, 0));",
          "258:         $this->assertEquals([], $favouritesrepo->find_all(1, 10));",
          "261:         foreach (range(1, 10) as $i) {",
          "262:             $favourite = new favourite(",
          "263:                 'core_course',",
          "264:                 'course',",
          "265:                 $i,",
          "266:                 $course1context->id,",
          "267:                 $user1context->instanceid",
          "268:             );",
          "269:             $favouritesrepo->add($favourite);",
          "270:         }",
          "273:         $this->assertEquals(10, $favouritesrepo->count());",
          "276:         $favourites = $favouritesrepo->find_all(0, 5);",
          "277:         $this->assertCount(5, $favourites);",
          "280:         $favourites = $favouritesrepo->find_all(5, 5);",
          "281:         $this->assertCount(5, $favourites);",
          "284:         $favourites = $favouritesrepo->find_all(10, 5);",
          "285:         $this->assertCount(0, $favourites);",
          "286:     }",
          "291:     public function test_find_by() {",
          "292:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "295:         $favouritesrepo = new favourite_repository($user1context);",
          "296:         $favourite = new favourite(",
          "297:             'core_course',",
          "298:             'course',",
          "299:             $course1context->instanceid,",
          "300:             $course1context->id,",
          "301:             $user1context->instanceid",
          "302:         );",
          "303:         $favouritesrepo->add($favourite);",
          "306:         $userfavourites = $favouritesrepo->find_by(['component' => 'core_course', 'itemtype' => 'course']);",
          "307:         $this->assertInternalType('array', $userfavourites);",
          "308:         $this->assertCount(1, $userfavourites);",
          "311:         $userfavourites = $favouritesrepo->find_by(['component' => 'core_cannibalism', 'itemtype' => 'course']);",
          "312:         $this->assertInternalType('array', $userfavourites);",
          "313:         $this->assertCount(0, $userfavourites);",
          "314:     }",
          "319:     public function test_find_by_pagination() {",
          "320:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "322:         $favouritesrepo = new favourite_repository($user1context);",
          "325:         $this->assertEquals([], $favouritesrepo->find_by([], 0, 0));",
          "326:         $this->assertEquals([], $favouritesrepo->find_by([], 0, 10));",
          "327:         $this->assertEquals([], $favouritesrepo->find_by([], 1, 0));",
          "328:         $this->assertEquals([], $favouritesrepo->find_by([], 1, 10));",
          "331:         foreach (range(1, 10) as $i) {",
          "332:             $favourite = new favourite(",
          "333:                 'core_course',",
          "334:                 'course',",
          "335:                 $i,",
          "336:                 $course1context->id,",
          "337:                 $user1context->instanceid",
          "338:             );",
          "339:             $favouritesrepo->add($favourite);",
          "340:         }",
          "343:         $this->assertEquals(10, $favouritesrepo->count());",
          "346:         $favourites = $favouritesrepo->find_by(['component' => 'core_message'], 0, 5);",
          "347:         $this->assertCount(0, $favourites);",
          "350:         $favourites = $favouritesrepo->find_by(['component' => 'core_course'], 0, 5);",
          "351:         $this->assertCount(5, $favourites);",
          "354:         $favourites = $favouritesrepo->find_by(['component' => 'core_course'], 5, 5);",
          "355:         $this->assertCount(5, $favourites);",
          "358:         $favourites = $favouritesrepo->find_by(['component' => 'core_course'], 10, 5);",
          "359:         $this->assertCount(0, $favourites);",
          "360:     }",
          "365:     public function test_count_by() {",
          "366:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "369:         $favouritesrepo = new favourite_repository($user1context);",
          "370:         $favourite = new favourite(",
          "371:             'core_course',",
          "372:             'course',",
          "373:             $course1context->instanceid,",
          "374:             $course1context->id,",
          "375:             $user1context->instanceid",
          "376:         );",
          "377:         $favourite2 = new favourite(",
          "378:             'core_course',",
          "379:             'anothertype',",
          "380:             $course2context->instanceid,",
          "381:             $course2context->id,",
          "382:             $user1context->instanceid",
          "383:         );",
          "384:         $favouritesrepo->add($favourite);",
          "385:         $favouritesrepo->add($favourite2);",
          "388:         $this->assertEquals(1, $favouritesrepo->count_by(['userid' => $user1context->instanceid, 'component' => 'core_course',",
          "389:                 'itemtype' => 'course']));",
          "390:         $this->assertEquals(1, $favouritesrepo->count_by(['userid' => $user1context->instanceid, 'component' => 'core_course',",
          "391:             'itemtype' => 'anothertype']));",
          "392:         $this->assertEquals(0, $favouritesrepo->count_by(['userid' => $user1context->instanceid, 'component' => 'core_course',",
          "393:             'itemtype' => 'nonexistenttype']));",
          "394:     }",
          "396:     public function test_exists() {",
          "397:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "400:         $favouritesrepo = new favourite_repository($user1context);",
          "401:         $favourite = new favourite(",
          "402:             'core_course',",
          "403:             'course',",
          "404:             $course1context->instanceid,",
          "405:             $course1context->id,",
          "406:             $user1context->instanceid",
          "407:         );",
          "408:         $createdfavourite = $favouritesrepo->add($favourite);",
          "411:         $this->assertTrue($favouritesrepo->exists($createdfavourite->id));",
          "414:         $this->assertFalse($favouritesrepo->exists(1));",
          "415:     }",
          "417:     public function test_exists_by_area() {",
          "418:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "421:         $favouritesrepo = new favourite_repository($user1context);",
          "422:         $favourite = new favourite(",
          "423:             'core_course',",
          "424:             'course',",
          "425:             $course1context->instanceid,",
          "426:             $course1context->id,",
          "427:             $user1context->instanceid",
          "428:         );",
          "429:         $favourite2 = new favourite(",
          "430:             'core_course',",
          "431:             'anothertype',",
          "432:             $course2context->instanceid,",
          "433:             $course2context->id,",
          "434:             $user1context->instanceid",
          "435:         );",
          "436:         $favourite1 = $favouritesrepo->add($favourite);",
          "437:         $favourite2 = $favouritesrepo->add($favourite2);",
          "440:         $this->assertTrue($favouritesrepo->exists_by_area($user1context->instanceid, 'core_course', 'course', $favourite1->itemid,",
          "441:             $favourite1->contextid));",
          "442:         $this->assertTrue($favouritesrepo->exists_by_area($user1context->instanceid, 'core_course', 'anothertype',",
          "443:             $favourite2->itemid, $favourite2->contextid));",
          "446:         $this->assertFalse($favouritesrepo->exists_by_area($user1context->instanceid, 'core_course', 'anothertype',",
          "447:             $favourite1->itemid, $favourite1->contextid));",
          "448:     }",
          "453:     public function test_update() {",
          "454:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "457:         $favouritesrepo = new favourite_repository($user1context);",
          "458:         $favourite = new favourite(",
          "459:             'core_course',",
          "460:             'course',",
          "461:             $course1context->instanceid,",
          "462:             $course1context->id,",
          "463:             $user1context->instanceid",
          "464:         );",
          "465:         $favourite1 = $favouritesrepo->add($favourite);",
          "466:         $this->assertNull($favourite1->ordering);",
          "469:         $favourite1->ordering = 1;",
          "470:         $favourite1 = $favouritesrepo->update($favourite1);",
          "471:         $this->assertInstanceOf(favourite::class, $favourite1);",
          "472:         $this->assertAttributeEquals('1', 'ordering', $favourite1);",
          "473:     }",
          "475:     public function test_delete() {",
          "476:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "479:         $favouritesrepo = new favourite_repository($user1context);",
          "480:         $favourite = new favourite(",
          "481:             'core_course',",
          "482:             'course',",
          "483:             $course1context->instanceid,",
          "484:             $course1context->id,",
          "485:             $user1context->instanceid",
          "486:         );",
          "487:         $favourite = $favouritesrepo->add($favourite);",
          "490:         $this->assertTrue($favouritesrepo->exists($favourite->id));",
          "493:         $favouritesrepo->delete($favourite->id);",
          "494:         $this->assertFalse($favouritesrepo->exists($favourite->id));",
          "495:     }",
          "497:     public function test_delete_by_area() {",
          "498:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "501:         $favouritesrepo = new favourite_repository($user1context);",
          "502:         $favourite = new favourite(",
          "503:             'core_course',",
          "504:             'course',",
          "505:             $course1context->instanceid,",
          "506:             $course1context->id,",
          "507:             $user1context->instanceid",
          "508:         );",
          "509:         $favourite2 = new favourite(",
          "510:             'core_course',",
          "511:             'anothertype',",
          "512:             $course1context->instanceid,",
          "513:             $course1context->id,",
          "514:             $user1context->instanceid",
          "515:         );",
          "516:         $favourite1 = $favouritesrepo->add($favourite);",
          "517:         $favourite2 = $favouritesrepo->add($favourite2);",
          "520:         $this->assertEquals(2, $favouritesrepo->count());",
          "523:         $favouritesrepo->delete_by_area($user1context->instanceid, 'core_course', 'donaldduck');",
          "524:         $this->assertEquals(2, $favouritesrepo->count());",
          "527:         $favouritesrepo->delete_by_area($user1context->instanceid, 'core_course', 'cat');",
          "528:         $this->assertEquals(2, $favouritesrepo->count());",
          "531:         $favouritesrepo->delete_by_area($user1context->instanceid, 'core_course', 'course');",
          "532:         $this->assertEquals(1, $favouritesrepo->count());",
          "533:         $this->assertFalse($favouritesrepo->exists($favourite1->id));",
          "534:         $this->assertTrue($favouritesrepo->exists($favourite2->id));",
          "535:     }",
          "536: }",
          "",
          "---------------"
        ],
        "favourites/tests/service_test.php||favourites/tests/service_test.php": [
          "File: favourites/tests/service_test.php -> favourites/tests/service_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: use \\core_favourites\\local\\entity\\favourite;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "34: class user_favourite_service_testcase extends advanced_testcase {",
          "36:     public function setUp() {",
          "37:         $this->resetAfterTest();",
          "38:     }",
          "41:     protected function setup_users_and_courses() {",
          "42:         $user1 = self::getDataGenerator()->create_user();",
          "43:         $user1context = \\context_user::instance($user1->id);",
          "44:         $user2 = self::getDataGenerator()->create_user();",
          "45:         $user2context = \\context_user::instance($user2->id);",
          "46:         $course1 = self::getDataGenerator()->create_course();",
          "47:         $course2 = self::getDataGenerator()->create_course();",
          "48:         $course1context = context_course::instance($course1->id);",
          "49:         $course2context = context_course::instance($course2->id);",
          "50:         return [$user1context, $user2context, $course1context, $course2context];",
          "51:     }",
          "59:     protected function get_mock_repository(array $mockstore) {",
          "61:         $mockrepo = $this->getMockBuilder(\\core_favourites\\local\\repository\\favourite_repository_interface::class)",
          "62:             ->setMethods([])",
          "63:             ->getMock();",
          "64:         $mockrepo->expects($this->any())",
          "65:             ->method('add')",
          "66:             ->will($this->returnCallback(function(favourite $favourite) use (&$mockstore) {",
          "69:                 $key = $favourite->userid . $favourite->component . $favourite->itemtype . $favourite->itemid",
          "70:                     . $favourite->contextid;",
          "73:                 foreach ($mockstore as $item) {",
          "74:                     if ($item->uniquekey == $key) {",
          "75:                         throw new \\moodle_exception('Favourite already exists');",
          "76:                     }",
          "77:                 }",
          "78:                 $index = count($mockstore);     // Integer index.",
          "79:                 $favourite->uniquekey = $key;   // Simulate the unique key constraint.",
          "80:                 $favourite->id = $index;",
          "81:                 $mockstore[$index] = $favourite;",
          "82:                 return $mockstore[$index];",
          "83:             })",
          "84:         );",
          "85:         $mockrepo->expects($this->any())",
          "86:             ->method('find_by')",
          "87:             ->will($this->returnCallback(function(array $criteria, int $limitfrom = 0, int $limitnum = 0) use (&$mockstore) {",
          "89:                 foreach ($mockstore as $index => $mockrow) {",
          "90:                     $mockrowarr = (array)$mockrow;",
          "91:                     if (array_diff($criteria, $mockrowarr) == []) {",
          "92:                         $returns[$index] = $mockrow;",
          "93:                     }",
          "94:                 }",
          "96:                 if ($limitnum != 0) {",
          "97:                     return array_slice($returns, $limitfrom, $limitnum);",
          "98:                 }",
          "100:                 return $returns;",
          "101:             })",
          "102:         );",
          "103:         $mockrepo->expects($this->any())",
          "104:             ->method('find_favourite')",
          "105:             ->will($this->returnCallback(function(int $userid, string $comp, string $type, int $id, int $ctxid) use (&$mockstore) {",
          "107:                 $crit = ['userid' => $userid, 'component' => $comp, 'itemtype' => $type, 'itemid' => $id, 'contextid' => $ctxid];",
          "108:                 foreach ($mockstore as $fakerow) {",
          "109:                     $fakerowarr = (array)$fakerow;",
          "110:                     if (array_diff($crit, $fakerowarr) == []) {",
          "111:                         return $fakerow;",
          "112:                     }",
          "113:                 }",
          "114:                 throw new \\moodle_exception(\"Item not found\");",
          "115:             })",
          "116:         );",
          "117:         $mockrepo->expects($this->any())",
          "118:             ->method('find')",
          "119:             ->will($this->returnCallback(function(int $id) use (&$mockstore) {",
          "120:                 return $mockstore[$id];",
          "121:             })",
          "122:         );",
          "123:         $mockrepo->expects($this->any())",
          "124:             ->method('exists')",
          "125:             ->will($this->returnCallback(function(int $id) use (&$mockstore) {",
          "126:                 return array_key_exists($id, $mockstore);",
          "127:             })",
          "128:         );",
          "129:         $mockrepo->expects($this->any())",
          "130:             ->method('delete')",
          "131:             ->will($this->returnCallback(function(int $id) use (&$mockstore) {",
          "132:                 foreach ($mockstore as $mockrow) {",
          "133:                     if ($mockrow->id == $id) {",
          "134:                         unset($mockstore[$id]);",
          "135:                     }",
          "136:                 }",
          "137:             })",
          "138:         );",
          "139:         return $mockrepo;",
          "140:     }",
          "145:     public function test_get_service_for_user_context() {",
          "146:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "147:         $userservice = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "148:         $this->assertInstanceOf(\\core_favourites\\local\\service\\user_favourite_service::class, $userservice);",
          "149:     }",
          "154:     public function test_create_favourite_basic() {",
          "155:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "158:         $repo = $this->get_mock_repository([]); // Mock repository, using the array as a mock DB.",
          "159:         $user1service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "162:         $favourite1 = $user1service->create_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "163:         $this->assertObjectHasAttribute('id', $favourite1);",
          "166:         $this->expectException('moodle_exception');",
          "167:         $user1service->create_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "168:     }",
          "173:     public function test_create_favourite_nonexistent_component() {",
          "174:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "177:         $repo = $this->get_mock_repository([]); // Mock repository, using the array as a mock DB.",
          "178:         $user1service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "181:         $this->expectException('moodle_exception');",
          "182:         $user1service->create_favourite('core_cccourse', 'my_area', $course1context->instanceid, $course1context);",
          "183:     }",
          "188:     public function test_find_favourites_by_type_single_user() {",
          "189:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "192:         $repo = $this->get_mock_repository([]); // Mock repository, using the array as a mock DB.",
          "193:         $service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "196:         $fav1 = $service->create_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "197:         $fav2 = $service->create_favourite('core_course', 'anothertype', $course2context->instanceid, $course2context);",
          "200:         $favourites = $service->find_favourites_by_type('core_course', 'course');",
          "201:         $this->assertInternalType('array', $favourites);",
          "202:         $this->assertCount(1, $favourites); // We only get favourites for the 'core_course/course' area.",
          "203:         $this->assertAttributeEquals($fav1->id, 'id', $favourites[$fav1->id]);",
          "205:         $favourites = $service->find_favourites_by_type('core_course', 'anothertype');",
          "206:         $this->assertInternalType('array', $favourites);",
          "207:         $this->assertCount(1, $favourites); // We only get favourites for the 'core_course/course' area.",
          "208:         $this->assertAttributeEquals($fav2->id, 'id', $favourites[$fav2->id]);",
          "209:     }",
          "214:     public function test_find_favourites_by_type_multiple_users() {",
          "215:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "218:         $repo = $this->get_mock_repository([]);",
          "219:         $user1service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "220:         $user2service = new \\core_favourites\\local\\service\\user_favourite_service($user2context, $repo);",
          "223:         $fav1 = $user1service->create_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "224:         $fav2 = $user2service->create_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "227:         $user1favourites = $user1service->find_favourites_by_type('core_course', 'course');",
          "228:         $this->assertInternalType('array', $user1favourites);",
          "229:         $this->assertCount(1, $user1favourites); // We only get favourites for the 'core_course/course' area for $user1.",
          "230:         $this->assertAttributeEquals($fav1->id, 'id', $user1favourites[$fav1->id]);",
          "232:         $user2favourites = $user2service->find_favourites_by_type('core_course', 'course');",
          "233:         $this->assertInternalType('array', $user2favourites);",
          "234:         $this->assertCount(1, $user2favourites); // We only get favourites for the 'core_course/course' area for $user2.",
          "235:         $this->assertAttributeEquals($fav2->id, 'id', $user2favourites[$fav2->id]);",
          "236:     }",
          "241:     public function test_find_favourites_by_type_nonexistent_component() {",
          "242:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "245:         $repo = $this->get_mock_repository([]);",
          "246:         $service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "249:         $this->expectException('moodle_exception');",
          "250:         $service->find_favourites_by_type('cccore_notreal', 'something');",
          "251:     }",
          "256:     public function test_find_favourites_by_type_pagination() {",
          "257:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "260:         $repo = $this->get_mock_repository([]);",
          "261:         $service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "264:         foreach (range(1, 10) as $i) {",
          "265:             $service->create_favourite('core_course', 'course', $i, $course1context);",
          "266:         }",
          "269:         $this->assertCount(10, $service->find_favourites_by_type('core_course', 'course'));",
          "272:         $favourites = $service->find_favourites_by_type('core_course', 'course', 0, 5);",
          "273:         $this->assertCount(5, $favourites);",
          "276:         $favourites = $service->find_favourites_by_type('core_course', 'course', 5, 5);",
          "277:         $this->assertCount(5, $favourites);",
          "280:         $favourites = $service->find_favourites_by_type('core_course', 'course', 10, 5);",
          "281:         $this->assertCount(0, $favourites);",
          "282:     }",
          "287:     public function test_delete_favourite_basic() {",
          "288:         list($user1context, $user2context, $course1context, $course2context) = $this->setup_users_and_courses();",
          "291:         $repo = $this->get_mock_repository([]);",
          "292:         $service = new \\core_favourites\\local\\service\\user_favourite_service($user1context, $repo);",
          "295:         $fav1 = $service->create_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "296:         $this->assertTrue($repo->exists($fav1->id));",
          "299:         $service->delete_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "302:         $this->assertFalse($repo->exists($fav1->id));",
          "305:         $this->expectException(\\moodle_exception::class);",
          "306:         $service->delete_favourite('core_course', 'course', $course1context->instanceid, $course1context);",
          "307:     }",
          "308: }",
          "",
          "---------------"
        ],
        "lang/en/favourites.php||lang/en/favourites.php": [
          "File: lang/en/favourites.php -> lang/en/favourites.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "23: $string['privacy:metadata:favourite'] = 'Stores references to items which have been marked as favourites.';",
          "24: $string['privacy:metadata:favourite:component'] = 'The component to which the favourite belongs to. E.g. core_user.';",
          "25: $string['privacy:metadata:favourite:itemid'] = 'The identifier for the item being marked as a favourite.';",
          "26: $string['privacy:metadata:favourite:itemtype'] = 'The type of the favourite item. E.g. course.';",
          "27: $string['privacy:metadata:favourite:ordering'] = 'A number used to order the favourites of the same type.';",
          "28: $string['privacy:metadata:favourite:timecreated'] = 'The time at which the item was marked as a favourite.';",
          "29: $string['privacy:metadata:favourite:timemodified'] = 'The time at which favourite was last modified.';",
          "30: $string['privacy:metadata:favourite:userid'] = 'The user who created the favourite.';",
          "",
          "---------------"
        ],
        "lib/classes/component.php||lib/classes/component.php": [
          "File: lib/classes/component.php -> lib/classes/component.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:             'edufields'   => null,",
          "443:             'enrol'       => $CFG->dirroot.'/enrol',",
          "444:             'error'       => null,",
          "445:             'filepicker'  => null,",
          "446:             'fileconverter' => $CFG->dirroot.'/files/converter',",
          "447:             'files'       => $CFG->dirroot.'/files',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:             'favourites'  => $CFG->dirroot . '/favourites',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1277:         }",
          "1278:         return $components;",
          "1279:     }",
          "1280: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1294:     public static function get_component_names() : array {",
          "1295:         $componentnames = [];",
          "1297:         foreach (self::get_plugin_types() as $plugintype => $typedir) {",
          "1298:             foreach (self::get_plugin_list($plugintype) as $pluginname => $plugindir) {",
          "1299:                 $componentnames[] = $plugintype . '_' . $pluginname;",
          "1300:             }",
          "1301:         }",
          "1303:         foreach (self::get_core_subsystems() as $subsystemname => $subsystempath) {",
          "1304:             $componentnames[] = 'core_' . $subsystemname;",
          "1305:         }",
          "1306:         return $componentnames;",
          "1307:     }",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2533:         upgrade_main_savepoint(true, 2018101700.01);",
          "2534:     }",
          "2536:     return true;",
          "2537: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2536:     if ($oldversion < 2018101800.00) {",
          "2538:         $table = new xmldb_table('favourite');",
          "2541:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2542:         $table->add_field('component', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2543:         $table->add_field('itemtype', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2544:         $table->add_field('itemid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2545:         $table->add_field('contextid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2546:         $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2547:         $table->add_field('ordering', XMLDB_TYPE_INTEGER, 10, null, null, null, null);",
          "2548:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2549:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2552:         $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));",
          "2553:         $table->add_key('contextid', XMLDB_KEY_FOREIGN, array('contextid'), 'context', array('id'));",
          "2554:         $table->add_key('userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));",
          "2557:         if (!$dbman->table_exists($table)) {",
          "2558:             $dbman->create_table($table);",
          "2559:         }",
          "2562:         $index = new xmldb_index('uniqueuserfavouriteitem', XMLDB_INDEX_UNIQUE,",
          "2563:             ['component', 'itemtype', 'itemid', 'contextid', 'userid']);",
          "2565:         if (!$dbman->index_exists($table, $index)) {",
          "2566:             $dbman->add_index($table, $index);",
          "2567:         }",
          "2570:         upgrade_main_savepoint(true, 2018101800.00);",
          "2571:     }",
          "",
          "---------------"
        ],
        "lib/tests/component_test.php||lib/tests/component_test.php": [
          "File: lib/tests/component_test.php -> lib/tests/component_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     public function setUp() {",
          "42:         $psr0namespaces = new ReflectionProperty('core_component', 'psr0namespaces');",
          "",
          "[Removed Lines]",
          "39:     const SUBSYSTEMCOUNT = 66;",
          "",
          "[Added Lines]",
          "39:     const SUBSYSTEMCOUNT = 67;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "805:         $this->assertEquals($componentslist['mod']['mod_forum'], $CFG->dirroot . '/mod/forum');",
          "806:         $this->assertEquals($componentslist['tool']['tool_usertours'], $CFG->dirroot . '/' . $CFG->admin . '/tool/usertours');",
          "807:     }",
          "808: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:     public function test_get_component_names() {",
          "813:         global $CFG;",
          "814:         $componentnames = \\core_component::get_component_names();",
          "817:         $plugintypes = \\core_component::get_plugin_types();",
          "818:         $numplugintypes = 0;",
          "819:         foreach ($plugintypes as $type => $typedir) {",
          "820:             foreach (\\core_component::get_plugin_list($type) as $plugin) {",
          "821:                 $numplugintypes++;",
          "822:             }",
          "823:         }",
          "825:         $numcomponents = $numplugintypes + count(\\core_component::get_core_subsystems());",
          "827:         $this->assertEquals($numcomponents, count($componentnames));",
          "830:         $this->assertContains('core_comment', $componentnames);",
          "831:         $this->assertContains('mod_forum', $componentnames);",
          "832:         $this->assertContains('tool_usertours', $componentnames);",
          "833:         $this->assertContains('core_favourites', $componentnames);",
          "834:     }",
          "",
          "---------------"
        ],
        "phpunit.xml.dist||phpunit.xml.dist": [
          "File: phpunit.xml.dist -> phpunit.xml.dist",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:             <directory suffix=\"_test.php\">lib/tests</directory>",
          "48:             <directory suffix=\"_test.php\">lib/ajax/tests</directory>",
          "49:         </testsuite>",
          "50:         <testsuite name=\"core_form_testsuite\">",
          "51:             <directory suffix=\"_test.php\">lib/form/tests</directory>",
          "52:         </testsuite>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         <testsuite name=\"core_favourites_testsuite\">",
          "51:             <directory suffix=\"_test.php\">favourites/tests</directory>",
          "52:         </testsuite>",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}