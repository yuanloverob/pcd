{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f301c4a2df88af3b6eb15a5c30fc0d242e2ed653",
      "candidate_info": {
        "commit_hash": "f301c4a2df88af3b6eb15a5c30fc0d242e2ed653",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/f301c4a2df88af3b6eb15a5c30fc0d242e2ed653",
        "files": [
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/table/src/util.js"
        ],
        "message": "\u89e3\u51b3\u865a\u62df\u6eda\u52a8\u914d\u5408keep-alive\uff0cactive\u6570\u636e\u6062\u590d\u540e\u9875\u9762\u5361\u987f\u3001\u5185\u5b58\u98d9\u5347\u7684\u95ee\u9898",
        "before_after_code_files": [
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/table/src/util.js||packages/table/src/util.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1684:     const { lastScrollLeft, lastScrollTop } = this",
          "1685:     const { $refs } = this",
          "1686:     const { tableBody, leftBody, rightBody, tableFooter } = $refs",
          "",
          "[Removed Lines]",
          "1683:   refreshScroll () {",
          "",
          "[Added Lines]",
          "1683:   refreshScroll (clearVirtualScroll = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1690:     const tableFooterElem = tableFooter ? tableFooter.$el : null",
          "1692:     if (lastScrollLeft || lastScrollTop) {",
          "1694:     }",
          "1696:     setScrollTop(tableBodyElem, lastScrollTop)",
          "",
          "[Removed Lines]",
          "1693:       return restoreScrollLocation(this, lastScrollLeft, lastScrollTop)",
          "",
          "[Added Lines]",
          "1693:       return restoreScrollLocation(this, lastScrollLeft, lastScrollTop, clearVirtualScroll)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4357:     const { $refs, scrollXStore, scrollYStore } = this",
          "4358:     const { tableBody, rightBody, tableFooter } = $refs",
          "4359:     const tableBodyElem = tableBody ? tableBody.$el : null",
          "",
          "[Removed Lines]",
          "4356:   clearScroll () {",
          "",
          "[Added Lines]",
          "4356:   clearScroll (clearVirtualScroll = true) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4371:       tableBodyElem.scrollTop = 0",
          "4372:       tableBodyElem.scrollLeft = 0",
          "4373:     }",
          "4376:     return this.$nextTick()",
          "4377:   },",
          "",
          "[Removed Lines]",
          "4374:     scrollXStore.startIndex = 0",
          "4375:     scrollYStore.startIndex = 0",
          "",
          "[Added Lines]",
          "4374:     if (clearVirtualScroll) {",
          "4375:       scrollXStore.startIndex = 0",
          "4376:       scrollYStore.startIndex = 0",
          "4377:     }",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:     this.preventEvent(null, 'mounted')",
          "914:   },",
          "915:   activated () {",
          "917:     this.preventEvent(null, 'activated')",
          "918:   },",
          "919:   deactivated () {",
          "",
          "[Removed Lines]",
          "916:     this.recalculate().then(() => this.refreshScroll())",
          "",
          "[Added Lines]",
          "916:     this.recalculate().then(() => this.refreshScroll(false))",
          "",
          "---------------"
        ],
        "packages/table/src/util.js||packages/table/src/util.js": [
          "File: packages/table/src/util.js -> packages/table/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   medium: 1",
          "9: }",
          "13:     if (scrollLeft || scrollTop) {",
          "15:       _vm.lastScrollLeft = 0",
          "",
          "[Removed Lines]",
          "11: export function restoreScrollLocation (_vm, scrollLeft, scrollTop) {",
          "12:   return _vm.clearScroll().then(() => {",
          "",
          "[Added Lines]",
          "11: export function restoreScrollLocation (_vm, scrollLeft, scrollTop, clearVirtualScroll = true) {",
          "12:   return _vm.clearScroll(clearVirtualScroll).then(() => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c9f603ea840ec262c56f244d5f493a5532791a0",
      "candidate_info": {
        "commit_hash": "2c9f603ea840ec262c56f244d5f493a5532791a0",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/2c9f603ea840ec262c56f244d5f493a5532791a0",
        "files": [
          "packages/export/src/mixin.js",
          "packages/icon/src/icon.js"
        ],
        "message": "icon \u4fee\u590d roll \u53c2\u6570\u65e0\u6548\u95ee\u9898",
        "before_after_code_files": [
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/icon/src/icon.js||packages/icon/src/icon.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     footLabelMethod = columnOpts.footerExportMethod",
          "241:   }",
          "242:   const _columnIndex = $xetable.getVTColumnIndex(column)",
          "244:   return cellValue",
          "245: }",
          "",
          "[Removed Lines]",
          "243:   const cellValue = footLabelMethod ? footLabelMethod({ $table: $xetable, items, itemIndex: _columnIndex, _columnIndex, column, options: opts }) : XEUtils.toValueString(items[_columnIndex])",
          "",
          "[Added Lines]",
          "243:   const cellValue = footLabelMethod ? footLabelMethod({ $table: $xetable, items, itemIndex: _columnIndex, row: items, _columnIndex, column, options: opts }) : XEUtils.toValueString(items[_columnIndex])",
          "",
          "---------------"
        ],
        "packages/icon/src/icon.js||packages/icon/src/icon.js": [
          "File: packages/icon/src/icon.js -> packages/icon/src/icon.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   render (h) {",
          "9:     const { name, roll, status } = this",
          "10:     return h('i', {",
          "12:       on: {",
          "13:         click: this.clickEvent",
          "14:       }",
          "",
          "[Removed Lines]",
          "11:       class: [`vxe-icon-${name}`, roll || '', status ? [`theme--${status}`] : ''],",
          "",
          "[Added Lines]",
          "11:       class: [`vxe-icon-${name}`, roll ? 'roll' : '', status ? [`theme--${status}`] : ''],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd563aa0d45e7523a56050a7019b7e31b964c0c1",
      "candidate_info": {
        "commit_hash": "bd563aa0d45e7523a56050a7019b7e31b964c0c1",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/bd563aa0d45e7523a56050a7019b7e31b964c0c1",
        "files": [
          "README.md",
          "package.json",
          "packages/button/src/button.js",
          "packages/button/src/group.js",
          "packages/grid/src/grid.js"
        ],
        "message": "fix \u4fee\u590d\u663e\u793a\u591a\u4e2a\u6821\u9a8c\u6d88\u606f\u63d0\u793a\u65e0\u6548\u95ee\u9898",
        "before_after_code_files": [
          "packages/button/src/button.js||packages/button/src/button.js",
          "packages/button/src/group.js||packages/button/src/group.js",
          "packages/grid/src/grid.js||packages/grid/src/grid.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:       return false",
          "53:     },",
          "54:     btnMode () {",
          "57:     }",
          "58:   },",
          "59:   created () {",
          "",
          "[Removed Lines]",
          "55:       const { mode, type } = this",
          "56:       return (mode === 'text' || type === 'text') ? 'text' : 'button'",
          "",
          "[Added Lines]",
          "55:       const { $xebuttonggroup, mode, type } = this",
          "56:       if (mode === 'text' || type === 'text' || ($xebuttonggroup && $xebuttonggroup.mode === 'text')) {",
          "57:         return 'text'",
          "58:       }",
          "59:       return 'button'",
          "60:     },",
          "61:     btnStatus () {",
          "62:       const { $xebuttonggroup, status } = this",
          "63:       if (status) {",
          "64:         return status",
          "65:       }",
          "66:       if ($xebuttonggroup) {",
          "67:         return $xebuttonggroup.status",
          "68:       }",
          "69:       return ''",
          "70:     },",
          "71:     btnRound () {",
          "72:       const { $xebuttonggroup, round } = this",
          "73:       if (round) {",
          "74:         return round",
          "75:       }",
          "76:       if ($xebuttonggroup) {",
          "77:         return $xebuttonggroup.round",
          "78:       }",
          "79:       return false",
          "80:     },",
          "81:     btnCircle () {",
          "82:       const { $xebuttonggroup, circle } = this",
          "83:       if (circle) {",
          "84:         return circle",
          "85:       }",
          "86:       if ($xebuttonggroup) {",
          "87:         return $xebuttonggroup.circle",
          "88:       }",
          "89:       return false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     GlobalEvent.off(this, 'mousewheel')",
          "76:   },",
          "77:   render (h) {",
          "79:     const downsSlot = $scopedSlots.dropdowns",
          "80:     return downsSlot ? h('div', {",
          "81:       class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "[Removed Lines]",
          "78:     const { $scopedSlots, className, popupClassName, title, inited, type, destroyOnClose, isFormBtn, status, btnMode, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "",
          "[Added Lines]",
          "111:     const { $scopedSlots, className, popupClassName, title, inited, type, destroyOnClose, isFormBtn, btnMode, btnStatus, btnRound, btnCircle, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         ref: 'xBtn',",
          "88:         class: ['vxe-button', `type--${btnMode}`, {",
          "89:           [`size--${vSize}`]: vSize,",
          "93:           'is--disabled': disabled || loading,",
          "94:           'is--loading': loading",
          "95:         }],",
          "",
          "[Removed Lines]",
          "90:           [`theme--${status}`]: status,",
          "91:           'is--round': this.round,",
          "92:           'is--circle': this.circle,",
          "",
          "[Added Lines]",
          "123:           [`theme--${btnStatus}`]: btnStatus,",
          "124:           'is--round': btnRound,",
          "125:           'is--circle': btnCircle,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:       ref: 'xBtn',",
          "136:       class: ['vxe-button', `type--${btnMode}`, className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "137:         [`size--${vSize}`]: vSize,",
          "141:         'is--disabled': disabled || loading,",
          "142:         'is--loading': loading",
          "143:       }],",
          "",
          "[Removed Lines]",
          "138:         [`theme--${status}`]: status,",
          "139:         'is--round': this.round,",
          "140:         'is--circle': this.circle,",
          "",
          "[Added Lines]",
          "171:         [`theme--${btnStatus}`]: btnStatus,",
          "172:         'is--round': btnRound,",
          "173:         'is--circle': btnCircle,",
          "",
          "---------------"
        ],
        "packages/button/src/group.js||packages/button/src/group.js": [
          "File: packages/button/src/group.js -> packages/button/src/group.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "3: export default {",
          "4:   name: 'VxeButtonGroup',",
          "5:   props: {",
          "6:     options: Array,",
          "7:     disabled: Boolean,",
          "8:     size: { type: String, default: () => GlobalConfig.buttonGroup.size || GlobalConfig.size }",
          "9:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import XEUtils from 'xe-utils'",
          "8:     mode: String,",
          "9:     status: String,",
          "10:     round: Boolean,",
          "11:     circle: Boolean,",
          "12:     className: [String, Function],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     }",
          "19:   },",
          "20:   render (h) {",
          "22:     const defaultSlot = $scopedSlots.default",
          "23:     return h('div', {",
          "25:     }, defaultSlot ? defaultSlot.cell(this, {}) : (options ? options.map(item => h('vxe-button', { props: item })) : []))",
          "26:   },",
          "27:   methods: {",
          "",
          "[Removed Lines]",
          "21:     const { $scopedSlots, options } = this",
          "24:       class: 'vxe-button-group'",
          "",
          "[Added Lines]",
          "27:     const { $scopedSlots, className, options } = this",
          "30:       class: ['vxe-button-group', className ? (XEUtils.isFunction(className) ? className({ $buttonGroup: this }) : className) : '']",
          "",
          "---------------"
        ],
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:     commitProxy (proxyTarget, ...args) {",
          "528:       const { beforeQuery, afterQuery, beforeDelete, afterDelete, beforeSave, afterSave, ajax = {}, props: proxyProps = {} } = proxyOpts",
          "529:       const $xetable = $refs.xTable",
          "530:       let button",
          "",
          "[Removed Lines]",
          "527:       const { $refs, toolbar, toolbarConfig, toolbarOpts, proxyOpts, tablePage, pagerConfig, editRules, formData, isMsg } = this",
          "",
          "[Added Lines]",
          "527:       const { $refs, toolbar, toolbarConfig, toolbarOpts, proxyOpts, tablePage, pagerConfig, editRules, formData, isMsg, validConfig } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:             let restPromise = Promise.resolve()",
          "746:             if (editRules) {",
          "749:             }",
          "750:             return restPromise.then((errMap) => {",
          "751:               if (errMap) {",
          "",
          "[Removed Lines]",
          "748:               restPromise = this.validate(body.insertRecords.concat(updateRecords))",
          "",
          "[Added Lines]",
          "748:               restPromise = this[validConfig && validConfig.msgMode === 'full' ? 'fullValidate' : 'validate'](body.insertRecords.concat(updateRecords))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7f6c1cfefaefab65253c1001e5bf2d588dd0d7b",
      "candidate_info": {
        "commit_hash": "a7f6c1cfefaefab65253c1001e5bf2d588dd0d7b",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/a7f6c1cfefaefab65253c1001e5bf2d588dd0d7b",
        "files": [
          "package.json",
          "packages/list/src/list.js",
          "packages/pager/src/pager.js",
          "packages/table/src/methods.js"
        ],
        "message": "\u4fee\u6539\u590d\u9009\u6846\u3001\u5355\u9009\u6846\u7981\u7528\u540e\u65e0\u6cd5\u8bbe\u7f6e\u95ee\u9898",
        "before_after_code_files": [
          "packages/list/src/list.js||packages/list/src/list.js",
          "packages/pager/src/pager.js||packages/pager/src/pager.js",
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/list/src/list.js||packages/list/src/list.js": [
          "File: packages/list/src/list.js -> packages/list/src/list.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:       this.$resize = resizeObserver",
          "77:     }",
          "78:   },",
          "79:   beforeDestroy () {",
          "80:     if (this.$resize) {",
          "81:       this.$resize.disconnect()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   activated () {",
          "80:     this.recalculate().then(() => this.refreshScroll())",
          "81:   },",
          "",
          "---------------"
        ],
        "packages/pager/src/pager.js||packages/pager/src/pager.js": [
          "File: packages/pager/src/pager.js -> packages/pager/src/pager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:       }",
          "401:     },",
          "402:     triggerJumpEvent (evnt) {",
          "404:       const current = value <= 0 ? 1 : value >= this.pageCount ? this.pageCount : value",
          "405:       evnt.target.value = current",
          "406:       this.jumpPage(current)",
          "",
          "[Removed Lines]",
          "403:       const value = XEUtils.toNumber(evnt.target.value)",
          "",
          "[Added Lines]",
          "403:       const value = XEUtils.toInteger(evnt.target.value)",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2738:     const { fullDataRowIdData, checkboxOpts } = this",
          "2739:     const { checkAll, checkRowKeys } = checkboxOpts",
          "2740:     if (checkAll) {",
          "2742:     } else if (checkRowKeys) {",
          "2743:       const defSelection = []",
          "2744:       checkRowKeys.forEach(rowid => {",
          "",
          "[Removed Lines]",
          "2741:       this.setAllCheckboxRow(true)",
          "",
          "[Added Lines]",
          "2741:       this.handleCheckedAllCheckboxRow(true, true)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2746:           defSelection.push(fullDataRowIdData[rowid].row)",
          "2747:         }",
          "2748:       })",
          "2750:     }",
          "2751:   },",
          "2757:   setCheckboxRow (rows, value) {",
          "2763:   },",
          "2764:   isCheckedByCheckboxRow (row) {",
          "2765:     const { selection } = this",
          "",
          "[Removed Lines]",
          "2749:       this.setCheckboxRow(defSelection, true)",
          "2758:     if (rows && !XEUtils.isArray(rows)) {",
          "2759:       rows = [rows]",
          "2760:     }",
          "2761:     rows.forEach(row => this.handleSelectRow({ row }, !!value))",
          "2762:     return this.$nextTick()",
          "",
          "[Added Lines]",
          "2749:       this.handleCheckedCheckboxRow(defSelection, true, true)",
          "2752:   handleCheckedCheckboxRow (rows, value, isForce) {",
          "2753:     if (rows && !XEUtils.isArray(rows)) {",
          "2754:       rows = [rows]",
          "2755:     }",
          "2756:     rows.forEach(row => this.handleSelectRow({ row }, !!value, isForce))",
          "2757:     return this.$nextTick()",
          "2758:   },",
          "2765:     return this.handleCheckedCheckboxRow(rows, value, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2781:     const { selection, afterFullData, treeConfig, treeOpts, treeIndeterminates, checkboxOpts } = this",
          "2782:     const { checkField, checkStrictly, checkMethod } = checkboxOpts",
          "2783:     if (checkField) {",
          "",
          "[Removed Lines]",
          "2780:   handleSelectRow ({ row }, value) {",
          "",
          "[Added Lines]",
          "2783:   handleSelectRow ({ row }, value, isForce) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2790:         } else {",
          "2792:           XEUtils.eachTree([row], (item) => {",
          "2794:               XEUtils.set(item, checkField, value)",
          "2795:               XEUtils.remove(treeIndeterminates, half => this.eqRow(half, item))",
          "2796:               this.handleCheckboxReserveRow(row, value)",
          "",
          "[Removed Lines]",
          "2793:             if (this.eqRow(item, row) || (!checkMethod || checkMethod({ row: item }))) {",
          "",
          "[Added Lines]",
          "2796:             if (this.eqRow(item, row) || (isForce || (!checkMethod || checkMethod({ row: item })))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2801:         const matchObj = XEUtils.findTree(afterFullData, item => this.eqRow(item, row), treeOpts)",
          "2802:         if (matchObj && matchObj.parent) {",
          "2803:           let parentStatus",
          "2805:           const indeterminatesItem = XEUtils.find(matchObj.items, item => this.findRowIndexOf(treeIndeterminates, item) > -1)",
          "2806:           if (indeterminatesItem) {",
          "2807:             parentStatus = -1",
          "",
          "[Removed Lines]",
          "2804:           const vItems = checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items",
          "",
          "[Added Lines]",
          "2807:           const vItems = !isForce && checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2809:             const selectItems = matchObj.items.filter(item => XEUtils.get(item, checkField))",
          "2810:             parentStatus = selectItems.filter(item => this.findRowIndexOf(vItems, item) > -1).length === vItems.length ? true : (selectItems.length || value === -1 ? -1 : false)",
          "2811:           }",
          "2813:         }",
          "2814:       } else {",
          "2816:           XEUtils.set(row, checkField, value)",
          "2817:           this.handleCheckboxReserveRow(row, value)",
          "2818:         }",
          "",
          "[Removed Lines]",
          "2812:           return this.handleSelectRow({ row: matchObj.parent }, parentStatus)",
          "2815:         if (!checkMethod || checkMethod({ row })) {",
          "",
          "[Added Lines]",
          "2815:           return this.handleSelectRow({ row: matchObj.parent }, parentStatus, isForce)",
          "2818:         if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2827:         } else {",
          "2829:           XEUtils.eachTree([row], (item) => {",
          "2831:               if (value) {",
          "2832:                 selection.push(item)",
          "2833:               } else {",
          "",
          "[Removed Lines]",
          "2830:             if (this.eqRow(item, row) || (!checkMethod || checkMethod({ row: item }))) {",
          "",
          "[Added Lines]",
          "2833:             if (this.eqRow(item, row) || (isForce && (!checkMethod || checkMethod({ row: item })))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2842:         const matchObj = XEUtils.findTree(afterFullData, item => this.eqRow(item, row), treeOpts)",
          "2843:         if (matchObj && matchObj.parent) {",
          "2844:           let parentStatus",
          "2846:           const indeterminatesItem = XEUtils.find(matchObj.items, item => this.findRowIndexOf(treeIndeterminates, item) > -1)",
          "2847:           if (indeterminatesItem) {",
          "2848:             parentStatus = -1",
          "",
          "[Removed Lines]",
          "2845:           const vItems = checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items",
          "",
          "[Added Lines]",
          "2848:           const vItems = !isForce && checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2850:             const selectItems = matchObj.items.filter(item => this.findRowIndexOf(selection, item) > -1)",
          "2851:             parentStatus = selectItems.filter(item => this.findRowIndexOf(vItems, item) > -1).length === vItems.length ? true : (selectItems.length || value === -1 ? -1 : false)",
          "2852:           }",
          "2854:         }",
          "2855:       } else {",
          "2857:           if (value) {",
          "2858:             if (this.findRowIndexOf(selection, row) === -1) {",
          "2859:               selection.push(row)",
          "",
          "[Removed Lines]",
          "2853:           return this.handleSelectRow({ row: matchObj.parent }, parentStatus)",
          "2856:         if (!checkMethod || checkMethod({ row })) {",
          "",
          "[Added Lines]",
          "2856:           return this.handleSelectRow({ row: matchObj.parent }, parentStatus, isForce)",
          "2859:         if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2896:   toggleCheckboxRow (row) {",
          "2898:     return this.$nextTick()",
          "2899:   },",
          "2905:     const { afterFullData, treeConfig, treeOpts, selection, checkboxReserveRowMap, checkboxOpts } = this",
          "2906:     const { checkField, reserve, checkStrictly, checkMethod } = checkboxOpts",
          "2907:     let selectRows = []",
          "",
          "[Removed Lines]",
          "2897:     this.handleToggleCheckRowEvent(null, { row })",
          "2904:   setAllCheckboxRow (value) {",
          "",
          "[Added Lines]",
          "2900:     const { selection, checkboxOpts } = this",
          "2901:     const { checkField } = checkboxOpts",
          "2902:     const value = checkField ? !XEUtils.get(row, checkField) : this.findRowIndexOf(selection, row) === -1",
          "2903:     this.handleSelectRow({ row }, value, true)",
          "2906:   handleCheckedAllCheckboxRow (value, isForce) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2916:       if (checkField) {",
          "2917:         const checkValFn = (row) => {",
          "2919:             if (value) {",
          "2920:               selectRows.push(row)",
          "2921:             }",
          "",
          "[Removed Lines]",
          "2918:           if (!checkMethod || checkMethod({ row })) {",
          "",
          "[Added Lines]",
          "2920:           if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2943:             XEUtils.eachTree(afterFullData, (row) => {",
          "2945:                 selectRows.push(row)",
          "2946:               }",
          "2947:             }, treeOpts)",
          "",
          "[Removed Lines]",
          "2944:               if (!checkMethod || checkMethod({ row })) {",
          "",
          "[Added Lines]",
          "2946:               if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2954:               XEUtils.eachTree(afterFullData, (row) => {",
          "2955:                 if (checkMethod({ row }) ? 0 : this.findRowIndexOf(selection, row) > -1) {",
          "2956:                   selectRows.push(row)",
          "",
          "[Removed Lines]",
          "2953:             if (checkMethod) {",
          "",
          "[Added Lines]",
          "2955:             if (!isForce && checkMethod) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2969:               selectRows = afterFullData.filter((row) => this.findRowIndexOf(selection, row) > -1 || checkMethod({ row }))",
          "2970:             } else {",
          "2971:               selectRows = afterFullData.slice(0)",
          "",
          "[Removed Lines]",
          "2968:             if (checkMethod) {",
          "",
          "[Added Lines]",
          "2970:             if (!isForce && checkMethod) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2980:               selectRows = afterFullData.filter((row) => checkMethod({ row }) ? 0 : this.findRowIndexOf(selection, row) > -1)",
          "2981:             }",
          "2982:           }",
          "",
          "[Removed Lines]",
          "2979:             if (checkMethod) {",
          "",
          "[Added Lines]",
          "2981:             if (!isForce && checkMethod) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2995:     }",
          "2996:     this.treeIndeterminates = []",
          "2997:     this.checkSelectionStatus()",
          "2998:   },",
          "2999:   checkSelectionStatus () {",
          "3000:     const { afterFullData, selection, treeIndeterminates, checkboxOpts, treeConfig } = this",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3000:     return this.$nextTick()",
          "3001:   },",
          "3006:   setAllCheckboxRow (value) {",
          "3007:     return this.handleCheckedAllCheckboxRow(value, true)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3073:     if (radioOpts.reserve && radioReserveRow) {",
          "3074:       const rowid = getRowid(this, radioReserveRow)",
          "3075:       if (fullDataRowIdData[rowid]) {",
          "3077:       }",
          "3078:     }",
          "3080:     this.selection = getRecoverRow(this, selection) // \u5237\u65b0\u591a\u9009\u884c\u72b6\u6001",
          "3082:     if (checkboxOpts.reserve) {",
          "3084:     }",
          "3085:     if (currentRow && !fullAllDataRowMap.has(currentRow)) {",
          "3086:       this.currentRow = null // \u5237\u65b0\u5f53\u524d\u884c\u72b6\u6001",
          "",
          "[Removed Lines]",
          "3076:         this.setRadioRow(fullDataRowIdData[rowid].row)",
          "3083:       this.setCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true)",
          "",
          "[Added Lines]",
          "3086:         this.handleCheckedRadioRow(fullDataRowIdData[rowid].row, true)",
          "3093:       this.handleCheckedCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true, true)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3188:   triggerCheckAllEvent (evnt, value) {",
          "3190:     this.emitEvent('checkbox-all', { records: this.getCheckboxRecords(), reserves: this.getCheckboxReserveRecords(), indeterminates: this.getCheckboxIndeterminateRecords(), checked: value }, evnt)",
          "3191:   },",
          "",
          "[Removed Lines]",
          "3189:     this.setAllCheckboxRow(value)",
          "",
          "[Added Lines]",
          "3199:     this.handleCheckedAllCheckboxRow(value)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3227:     const { checkRowKey: rowid, reserve } = radioOpts",
          "3228:     if (rowid) {",
          "3229:       if (fullDataRowIdData[rowid]) {",
          "3231:       }",
          "3232:       if (reserve) {",
          "3233:         const rowkey = getRowkey(this)",
          "",
          "[Removed Lines]",
          "3230:         this.setRadioRow(fullDataRowIdData[rowid].row)",
          "",
          "[Added Lines]",
          "3240:         this.handleCheckedRadioRow(fullDataRowIdData[rowid].row, true)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3244:     let newValue = row",
          "3245:     let isChange = oldValue !== newValue",
          "3246:     if (isChange) {",
          "3248:     } else if (!radioOpts.strict) {",
          "3249:       isChange = oldValue === newValue",
          "3250:       if (isChange) {",
          "",
          "[Removed Lines]",
          "3247:       this.setRadioRow(newValue)",
          "",
          "[Added Lines]",
          "3257:       this.handleCheckedRadioRow(newValue)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3284:   isCheckedByRadioRow (row) {",
          "3285:     return this.selectRow === row",
          "3286:   },",
          "3292:     const { radioOpts } = this",
          "3293:     const { checkMethod } = radioOpts",
          "3295:       this.selectRow = row",
          "3296:       this.handleRadioReserveRow(row)",
          "3297:     }",
          "3298:     return this.$nextTick()",
          "3299:   },",
          "",
          "[Removed Lines]",
          "3291:   setRadioRow (row) {",
          "3294:     if (row && (!checkMethod || checkMethod({ row }))) {",
          "",
          "[Added Lines]",
          "3297:   handleCheckedRadioRow (row, isForce) {",
          "3300:     if (row && (isForce || (!checkMethod || checkMethod({ row })))) {",
          "3310:   setRadioRow (row) {",
          "3311:     return this.handleCheckedRadioRow(row, true)",
          "3312:   },",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4005:             }",
          "4007:             if (!checkStrictly && this.isCheckedByCheckboxRow(row)) {",
          "4009:             }",
          "4010:             return this.$nextTick().then(() => {",
          "4011:               if (transform) {",
          "",
          "[Removed Lines]",
          "4008:               this.setCheckboxRow(childRows, true)",
          "",
          "[Added Lines]",
          "4021:               this.handleCheckedCheckboxRow(childRows, true, true)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86438bea7881261bb5cb6f77c6b5a6595ce7473a",
      "candidate_info": {
        "commit_hash": "86438bea7881261bb5cb6f77c6b5a6595ce7473a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/86438bea7881261bb5cb6f77c6b5a6595ce7473a",
        "files": [
          "packages/pager/src/pager.js"
        ],
        "message": "\u4fee\u590d\u5207\u6362\u6bcf\u9875\u5927\u5c0f\u5f53\u524d\u9875\u663e\u793a\u9519\u8bef\u95ee\u9898",
        "before_after_code_files": [
          "packages/pager/src/pager.js||packages/pager/src/pager.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/pager/src/pager.js||packages/pager/src/pager.js": [
          "File: packages/pager/src/pager.js -> packages/pager/src/pager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "376:       }",
          "377:     },",
          "378:     pageSizeEvent (pageSize) {",
          "385:       }",
          "386:     },",
          "387:     jumpInputEvent (evnt) {",
          "388:       this.inpCurrPage = evnt.target.value",
          "",
          "[Removed Lines]",
          "379:       this.changePageSize(pageSize)",
          "380:     },",
          "381:     changePageSize (pageSize) {",
          "382:       if (pageSize !== this.pageSize) {",
          "383:         this.$emit('update:pageSize', pageSize)",
          "384:         this.$emit('page-change', { type: 'size', pageSize, currentPage: Math.min(this.currentPage, this.getPageCount(this.total, pageSize)) })",
          "",
          "[Added Lines]",
          "379:       const pageCount = this.getPageCount(this.total, pageSize)",
          "380:       let currentPage = this.currentPage",
          "381:       if (currentPage > pageCount) {",
          "382:         currentPage = pageCount",
          "383:         this.$emit('update:currentPage', pageCount)",
          "385:       this.$emit('update:pageSize', pageSize)",
          "386:       this.$emit('page-change', { type: 'size', pageSize, currentPage })",
          "",
          "---------------"
        ]
      }
    }
  ]
}