{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b36410e46bfe1a746215ffdd8bed5e9404e17c45",
      "candidate_info": {
        "commit_hash": "b36410e46bfe1a746215ffdd8bed5e9404e17c45",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b36410e46bfe1a746215ffdd8bed5e9404e17c45",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889414 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java||preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java||preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java -> preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConstants.java"
        ]
      }
    },
    {
      "candidate_hash": "31ea0e291a6fab0d025cd01a97d0e9ab2b543851",
      "candidate_info": {
        "commit_hash": "31ea0e291a6fab0d025cd01a97d0e9ab2b543851",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/31ea0e291a6fab0d025cd01a97d0e9ab2b543851",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java"
        ],
        "message": "PDFBOX-4892: avoid NPE, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890288 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:         if (nonTerminalFieldsMap.get(parent.getString(COSName.T)) == null)",
          "186:         {",
          "187:             PDField field = PDFieldFactory.createField(acroForm, parent, null);",
          "190:             return field;",
          "191:         }",
          "",
          "[Removed Lines]",
          "188:             nonTerminalFieldsMap.put(field.getFullyQualifiedName(),field);",
          "",
          "[Added Lines]",
          "188:             if (field != null)",
          "189:             {",
          "190:                 nonTerminalFieldsMap.put(field.getFullyQualifiedName(), field);",
          "191:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdf0211bb8a9eddd6ef8fbc73d76477578ae88a6",
      "candidate_info": {
        "commit_hash": "fdf0211bb8a9eddd6ef8fbc73d76477578ae88a6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fdf0211bb8a9eddd6ef8fbc73d76477578ae88a6",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java"
        ],
        "message": "PDFBOX-5043: avoid StringIndexOutOfBoundsException; skip generation for PMD widgets\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884362 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:         }",
          "172:         for (PDAnnotationWidget widget : field.getWidgets()) {",
          "175:             PDDefaultAppearanceString acroFormAppearance = defaultAppearance;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:             if (widget.getCOSObject().containsKey(\"PMD\"))",
          "175:             {",
          "176:                 LOG.warn(\"widget of field \" + field.getFullyQualifiedName() + \" is a PaperMetaData widet, no appearance stream created\");",
          "177:                 continue;",
          "178:             }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:                     while (true)",
          "207:                     {",
          "208:                         splitOffset--;",
          "210:                         float substringWidth = font.getStringWidth(substring) * scale;",
          "211:                         if (substringWidth < width)",
          "212:                         {",
          "",
          "[Removed Lines]",
          "209:                         String substring = word.trim().substring(0, splitOffset);",
          "",
          "[Added Lines]",
          "209:                         String substring = word.substring(0, splitOffset);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:             IOUtils.closeQuietly(testPdf);",
          "94:         }",
          "95:     }",
          "96: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     @Test",
          "102:     public void test5043PaperMetaData() throws IOException",
          "103:     {",
          "104:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13016992/PDFBOX-3891-5.pdf\";",
          "106:         PDDocument testPdf = null;",
          "107:         try",
          "108:         {",
          "109:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "110:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "111:             boolean thrown = false;",
          "112:             try",
          "113:             {",
          "114:                 catalog.getAcroForm();",
          "115:             }",
          "116:             catch (Exception e)",
          "117:             {",
          "118:                 thrown = true;",
          "119:             }",
          "120:             assertFalse(\"There shall be no exception when getting the AcroForm\", thrown);",
          "121:         }",
          "122:         finally",
          "123:         {",
          "124:             IOUtils.closeQuietly(testPdf);",
          "125:         }",
          "126:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11dd7a532443a26e80e316c01bf4278efad8c9a3",
      "candidate_info": {
        "commit_hash": "11dd7a532443a26e80e316c01bf4278efad8c9a3",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/11dd7a532443a26e80e316c01bf4278efad8c9a3",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java"
        ],
        "message": "PDFBOX-3017: improve parameter handling of previous commit so that -tsa is possible without image\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882887 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java||examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:         CreateVisibleSignature2 signing = new CreateVisibleSignature2(keystore, pin.clone());",
          "548:         {",
          "549:             signing.setImageFile(new File(args[3]));",
          "550:         }",
          "",
          "[Removed Lines]",
          "547:         if (args.length >= 4)",
          "",
          "[Added Lines]",
          "547:         if (args.length >= 4 && !\"-tsa\".equals(args[3]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c682f73503e78332c14fec5f88f2003ba4a04328",
      "candidate_info": {
        "commit_hash": "c682f73503e78332c14fec5f88f2003ba4a04328",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c682f73503e78332c14fec5f88f2003ba4a04328",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ],
        "message": "PDFBOX-4892: use current position for loop detection due to skipped spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889317 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:         {",
          "320:             source.seek(prev);",
          "323:             skipSpaces();",
          "325:             if (source.peek() == X)",
          "326:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:             prevSet.add(source.getPosition());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:             {",
          "399:                 throw new IOException(\"/Prev loop at offset \" + prev);",
          "400:             }",
          "402:         }",
          "404:         xrefTrailerResolver.setStartxref(startXrefOffset);",
          "",
          "[Removed Lines]",
          "401:             prevSet.add(prev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}