{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45ac4476c4d467eeb8df2d63419ceb59acd41387",
      "candidate_info": {
        "commit_hash": "45ac4476c4d467eeb8df2d63419ceb59acd41387",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/45ac4476c4d467eeb8df2d63419ceb59acd41387",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ],
        "message": "AMBARI-24473. Ambari upgrade fails due to NPE when processing Ambari Infra kerberos descriptor changes (#2070)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1283:       for (KerberosServiceDescriptor serviceDescriptor : kerberosDescriptor.getServices().values()) {",
          "1284:         updateKerberosIdentities(serviceDescriptor);",
          "1287:         }",
          "1288:       }",
          "",
          "[Removed Lines]",
          "1285:         for (KerberosComponentDescriptor componentDescriptor : serviceDescriptor.getComponents().values()) {",
          "1286:           updateKerberosIdentities(componentDescriptor);",
          "",
          "[Added Lines]",
          "1285:         if (MapUtils.isNotEmpty(serviceDescriptor.getComponents())) {",
          "1286:           for (KerberosComponentDescriptor componentDescriptor : serviceDescriptor.getComponents().values()) {",
          "1287:             updateKerberosIdentities(componentDescriptor);",
          "1288:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c6667ae31ef099d87afe7330e17f557ccd0c262",
      "candidate_info": {
        "commit_hash": "8c6667ae31ef099d87afe7330e17f557ccd0c262",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8c6667ae31ef099d87afe7330e17f557ccd0c262",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts"
        ],
        "message": "[AMBARI-23890] [Logsearch UI] Column headers are missing in service logs tabular view (#1781)\n\n* [AMBARI-23890] [Logsearch UI] Column headers are missing in service logs tabular view\n\n(cherry picked from commit b328b483080a842b73cda00e00da07675a0dd7b0)\n\n* [AMBARI-23890] [Logsearch UI] Column headers are missing in service logs tabular view\n\n(cherry picked from commit fae6289cddb91f0e6d33a4caa39d6128e6a3f53a)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:           <col *ngIf=\"isColumnDisplayed('path')\" class=\"log-path\">",
          "59:           <col *ngIf=\"isColumnDisplayed('log_message')\" class=\"log-message\">",
          "60:         </colgroup>",
          "61:         <tbody>",
          "62:           <ng-container *ngFor=\"let log of logs; let i = index\">",
          "63:             <tr *ngIf=\"i === 0 || isDifferentDates(log.logtime, logs[i - 1].logtime)\" class=\"log-date-row\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         <thead>",
          "62:           <tr>",
          "63:             <th class=\"log-action\"></th>",
          "64:             <th *ngIf=\"isColumnDisplayed('logtime')\">{{getLabelForField('logtime') | translate}}</th>",
          "65:             <th *ngIf=\"isColumnDisplayed('level')\">{{getLabelForField('level') | translate}}</th>",
          "66:             <th *ngIf=\"isColumnDisplayed('type')\">{{getLabelForField('type') | translate}}</th>",
          "67:             <ng-container *ngFor=\"let column of displayedColumns\">",
          "68:               <th *ngIf=\"customStyledColumns.indexOf(column.value) === -1\">{{getLabelForField(column.value) | translate}}</th>",
          "69:             </ng-container>",
          "70:             <th *ngIf=\"isColumnDisplayed('path')\">{{getLabelForField('path') | translate}}</th>",
          "71:             <th *ngIf=\"isColumnDisplayed('log_message')\">{{getLabelForField('log_message') | translate}}</th>",
          "72:           </tr>",
          "73:         </thead>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     background: none transparent;",
          "111:   }",
          "135:       text-transform: uppercase;",
          "144:     }",
          "147:     }",
          "148:   }",
          "",
          "[Removed Lines]",
          "113:   table td {",
          "114:     text-overflow: ellipsis;",
          "115:     overflow: hidden;",
          "116:     word-wrap: break-word;",
          "117:     &.log-action {",
          "118:       overflow: visible;",
          "119:       padding-left: .25em;",
          "120:       padding-right: 0;",
          "121:       width: 1em;",
          "122:       /deep/ .btn, /deep/ .filter-label {",
          "123:         font-size: 1em;",
          "124:         height: auto;",
          "125:         line-height: 1em;",
          "126:         padding: 0;",
          "127:       }",
          "128:     }",
          "129:     &.log-time {",
          "130:       min-width: 7em;",
          "131:       padding-left: 0;",
          "132:       text-align: right;",
          "133:     }",
          "134:     &.log-level {",
          "136:       min-width: 8em;",
          "137:       .log-colors;",
          "138:     }",
          "139:     &.log-type {",
          "140:       color: @link-color;",
          "141:     }",
          "142:     &.log-message {",
          "143:       width: 100%;",
          "145:     &.log-event_count {",
          "146:       width: 3em;",
          "",
          "[Added Lines]",
          "113:   table {",
          "114:     thead th {",
          "117:     td {",
          "118:       text-overflow: ellipsis;",
          "119:       overflow: hidden;",
          "120:       word-wrap: break-word;",
          "121:       &.log-action {",
          "122:         overflow: visible;",
          "123:         padding-left: .25em;",
          "124:         padding-right: 0;",
          "125:         width: 1em;",
          "126:         /deep/ .btn, /deep/ .filter-label {",
          "127:           font-size: 1em;",
          "128:           height: auto;",
          "129:           line-height: 1em;",
          "130:           padding: 0;",
          "131:         }",
          "132:       }",
          "133:       &.log-time {",
          "134:         min-width: 7em;",
          "135:         padding-left: 0;",
          "136:         text-align: right;",
          "137:       }",
          "138:       &.log-level {",
          "139:         text-transform: uppercase;",
          "140:         min-width: 8em;",
          "141:         .log-colors;",
          "142:       }",
          "143:       &.log-type {",
          "144:         color: @link-color;",
          "145:       }",
          "146:       &.log-message {",
          "147:         width: 100%;",
          "148:       }",
          "149:       &.log-event_count {",
          "150:         width: 3em;",
          "151:       }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:   private getLabelForField(field: string): string {",
          "308:   }",
          "",
          "[Removed Lines]",
          "306:     const column: ListItem = this.columns.find(column => column.value === field);",
          "307:     return column && column.label;",
          "",
          "[Added Lines]",
          "306:     const column: ListItem = this.columns.find(currentColumn => currentColumn.value === field);",
          "307:     return column && (column.label || column.value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e3d86b92fc5cc95275e384c94d98940ac973c17",
      "candidate_info": {
        "commit_hash": "5e3d86b92fc5cc95275e384c94d98940ac973c17",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/5e3d86b92fc5cc95275e384c94d98940ac973c17",
        "files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java"
        ],
        "message": "[AMBARI-24367] Fix integration test regressions in AMS collector due to scale changes (#2011)\n\n* AMBARI-24367 : Fix integration test regressions in AMS collector due to scale changes.\n\n* AMBARI-24367 : Fix integration test regressions in AMS collector due to scale changes (2).",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     }",
          "138:     if (existingMetric != null) {",
          "140:       hostAggregate.setNumberOfSamples(Math.round((float)hostAggregate.getNumberOfSamples() / (float)perMetricCount));",
          "141:     }",
          "",
          "[Removed Lines]",
          "139:       hostAggregate.setSum(hostAggregate.getSum() / perMetricCount);",
          "",
          "[Added Lines]",
          "139:       hostAggregate.setSum(hostAggregate.getSum() / (perMetricCount - 1));",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.SERVER_SIDE_TIMESIFT_ADJUSTMENT;",
          "22: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.TIMELINE_METRICS_CLUSTER_AGGREGATOR_INTERPOLATION_ENABLED;",
          "23: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.TIMELINE_METRICS_EVENT_METRIC_PATTERNS;",
          "24: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.TIMELINE_METRIC_AGGREGATION_SQL_FILTERS;",
          "25: import static org.apache.ambari.metrics.core.timeline.aggregators.AggregatorUtils.getTimeSlices;",
          "26: import static org.apache.ambari.metrics.core.timeline.aggregators.AggregatorUtils.sliceFromTimelineMetric;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.TIMELINE_METRICS_SUPPORT_MULTIPLE_CLUSTERS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:       skipInterpolationMetricPatterns.addAll(getJavaMetricPatterns(skipInterpolationMetricPatternStrings));",
          "100:     }",
          "103:   }",
          "105:   @Override",
          "",
          "[Removed Lines]",
          "102:     this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager);",
          "",
          "[Added Lines]",
          "103:     if (Boolean.valueOf(metricsConf.get(TIMELINE_METRICS_SUPPORT_MULTIPLE_CLUSTERS, \"false\"))) {",
          "104:       this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager, true);",
          "105:     } else {",
          "106:       this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager);",
          "107:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:     Map<String, MutableInt> hostedAppCounter = new HashMap<>();",
          "154:     if (rs.next()) {",
          "155:       metric = timelineMetricReadHelper.getTimelineMetricFromResultSet(rs);",
          "158:       while (rs.next()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:       while (metric == null && rs.next()) {",
          "162:         metric = timelineMetricReadHelper.getTimelineMetricFromResultSet(rs);",
          "163:       }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:       }",
          "186:     }",
          "190:     if (scheduleMetadateSync) {",
          "191:       executorService.scheduleWithFixedDelay(metricMetadataSync,",
          "195:     }",
          "197:     try {",
          "",
          "[Removed Lines]",
          "188:       metricMetadataSync = new TimelineMetricMetadataSync(this);",
          "192:           metricsConf.getInt(METRICS_METADATA_SYNC_INIT_DELAY, 120), // 2 minutes",
          "193:           metricsConf.getInt(METRICS_METADATA_SYNC_SCHEDULE_DELAY, 300), // 5 minutes",
          "194:           TimeUnit.SECONDS);",
          "",
          "[Added Lines]",
          "188:     metricMetadataSync = new TimelineMetricMetadataSync(this);",
          "192:         metricsConf.getInt(METRICS_METADATA_SYNC_INIT_DELAY, 120), // 2 minutes",
          "193:         metricsConf.getInt(METRICS_METADATA_SYNC_SCHEDULE_DELAY, 300), // 5 minutes",
          "194:         TimeUnit.SECONDS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:       timelineMetric.setInstanceId(key.instanceId);",
          "594:       byte[] hostUuid = ArrayUtils.subarray(uuid, TIMELINE_METRIC_UUID_LENGTH, HOSTNAME_UUID_LENGTH + TIMELINE_METRIC_UUID_LENGTH);",
          "596:       return timelineMetric;",
          "597:     }",
          "598:   }",
          "",
          "[Removed Lines]",
          "595:       timelineMetric.setHostName(uuidHostMap.get(new TimelineMetricUuid(hostUuid)));",
          "",
          "[Added Lines]",
          "595:       String hostname = uuidHostMap.get(new TimelineMetricUuid(hostUuid));",
          "596:       if (hostname == null) {",
          "597:         return null;",
          "598:       }",
          "599:       timelineMetric.setHostName(hostname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "738:   public Map<String, List<TimelineMetricMetadata>> getTimelineMetricMetadataByAppId(String appId, String metricPattern,",
          "741:     Map<TimelineMetricMetadataKey, TimelineMetricMetadata> metadata = getMetadataCache();",
          "",
          "[Removed Lines]",
          "739:                                                                              boolean includeBlacklistedMetrics) throws SQLException, IOException {",
          "",
          "[Added Lines]",
          "743:                                                                                     boolean includeBlacklistedMetrics) throws SQLException, IOException {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:           cacheValue.setType(oldValue.getType());",
          "840:           cacheValue.setIsWhitelisted(oldValue.isWhitelisted());",
          "841:         } else if (oldValue.getSeriesStartTime() < cacheValue.getSeriesStartTime() &&",
          "844:         {",
          "845:           LOG.info(String.format(\"Updating startTime for %s\", key));",
          "846:           cacheValue.setSeriesStartTime(oldValue.getSeriesStartTime());",
          "",
          "[Removed Lines]",
          "842:                    cacheValue.getSeriesStartTime() != 0L &&",
          "843:                    cacheValue.isWhitelisted())",
          "",
          "[Added Lines]",
          "846:           cacheValue.getSeriesStartTime() != 0L &&",
          "847:           cacheValue.isWhitelisted())",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/AbstractMiniHBaseClusterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.OUT_OFF_BAND_DATA_TIME_ALLOWANCE;",
          "21: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.METRICS_CLUSTER_AGGREGATE_TABLE_NAME;",
          "22: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.METRICS_RECORD_TABLE_NAME;",
          "23: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.UPSERT_METRICS_SQL;",
          "24: import static org.apache.phoenix.end2end.ParallelStatsDisabledIT.tearDownMiniCluster;",
          "25: import static org.apache.phoenix.util.TestUtil.TEST_PROPERTIES;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.PHOENIX_TABLES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import java.util.Map;",
          "39: import java.util.Properties;",
          "41: import org.apache.commons.logging.Log;",
          "42: import org.apache.commons.logging.LogFactory;",
          "43: import org.apache.hadoop.conf.Configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import javax.annotation.Nonnull;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   protected Connection conn;",
          "71:   protected PhoenixHBaseAccessor hdb;",
          "72:   protected TimelineMetricMetadataManager metadataManager;",
          "74:   public final Log LOG;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   private static StandaloneHBaseTestingUtility utility;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     LOG = LogFactory.getLog(this.getClass());",
          "78:   }",
          "80:   @BeforeClass",
          "81:   public static void doSetup() throws Exception {",
          "82:     Map<String, String> props = getDefaultProps();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:   protected static void setUpTestDriver(ReadOnlyProps props) throws Exception {",
          "86:     setUpTestDriver(props, props);",
          "87:   }",
          "89:   protected static void setUpTestDriver(ReadOnlyProps serverProps, ReadOnlyProps clientProps) throws Exception {",
          "90:     if (driver == null) {",
          "91:       String url = checkClusterInitialized(serverProps);",
          "92:       driver = initAndRegisterTestDriver(url, clientProps);",
          "93:     }",
          "94:   }",
          "96:   private static String checkClusterInitialized(ReadOnlyProps serverProps) throws Exception {",
          "97:     if(!clusterInitialized) {",
          "98:       url = setUpTestCluster(config, serverProps);",
          "99:       clusterInitialized = true;",
          "100:     }",
          "102:     return url;",
          "103:   }",
          "105:   protected static String setUpTestCluster(@Nonnull Configuration conf, ReadOnlyProps overrideProps) throws Exception {",
          "106:     return initEmbeddedMiniCluster(conf, overrideProps);",
          "107:   }",
          "109:   private static String initEmbeddedMiniCluster(Configuration conf, ReadOnlyProps overrideProps) throws Exception {",
          "110:     setUpConfigForMiniCluster(conf, overrideProps);",
          "111:     utility = new StandaloneHBaseTestingUtility(conf);",
          "113:     try {",
          "114:       utility.startStandaloneHBaseCluster();",
          "115:       return getLocalClusterUrl(utility);",
          "116:     } catch (Throwable var3) {",
          "117:       throw new RuntimeException(var3);",
          "118:     }",
          "119:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "310:       }",
          "311:     }",
          "312:   }",
          "313: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:   @After",
          "356:   public void cleanup() throws SQLException {",
          "357:     for (String table : PHOENIX_TABLES) {",
          "358:       executeUpdate(\"DELETE FROM \" + table);",
          "359:     }",
          "360:   }",
          "362:   private void executeUpdate(String query) throws SQLException {",
          "363:     Connection conn = getConnection(getUrl());",
          "364:     Statement stmt = conn.createStatement();",
          "365:     stmt.executeUpdate(query);",
          "366:   }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/ITPhoenixHBaseAccessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: import org.apache.hadoop.hbase.client.ColumnFamilyDescriptor;",
          "53: import org.apache.hadoop.hbase.client.Durability;",
          "54: import org.apache.hadoop.hbase.client.TableDescriptor;",
          "56: import org.apache.hadoop.metrics2.sink.timeline.ContainerMetric;",
          "57: import org.apache.hadoop.metrics2.sink.timeline.MetricClusterAggregate;",
          "58: import org.apache.hadoop.metrics2.sink.timeline.MetricHostAggregate;",
          "",
          "[Removed Lines]",
          "55: import org.apache.hadoop.metrics2.lib.MetricsTestHelper;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:     long startTime = System.currentTimeMillis();",
          "227:     long ctime = startTime + 1;",
          "228:     long minute = 60 * 1000;",
          "230:       \"disk_free\", 1), true);",
          "232:       \"disk_free\", 2), true);",
          "233:     ctime += minute;",
          "235:       \"disk_free\", 2), true);",
          "237:       \"disk_free\", 1), true);",
          "239:     long endTime = ctime + minute + 1;",
          "",
          "[Removed Lines]",
          "229:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local1\",",
          "231:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local2\",",
          "234:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local1\",",
          "236:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local2\",",
          "",
          "[Added Lines]",
          "226:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local_c1\",",
          "228:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local_c2\",",
          "231:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local_c1\",",
          "233:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local_c2\",",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/MetricTestHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   }",
          "40:   public static TimelineMetrics prepareSingleTimelineMetric(long startTime,",
          "44:     return prepareSingleTimelineMetric(startTime, host, null, metricName, val);",
          "45:   }",
          "47:   public static TimelineMetrics prepareSingleTimelineMetric(long startTime,",
          "52:     TimelineMetrics m = new TimelineMetrics();",
          "53:     m.setMetrics(Arrays.asList(",
          "56:     return m;",
          "57:   }",
          "",
          "[Removed Lines]",
          "41:                                                         String host,",
          "42:                                                         String metricName,",
          "43:                                                         double val) {",
          "48:                                                         String host,",
          "49:                                                         String instanceId,",
          "50:                                                         String metricName,",
          "51:                                                         double val) {",
          "54:         createTimelineMetric(startTime, metricName, host, null, instanceId, val)));",
          "",
          "[Added Lines]",
          "41:                                                             String host,",
          "42:                                                             String metricName,",
          "43:                                                             double val) {",
          "48:                                                             String host,",
          "49:                                                             String instanceId,",
          "50:                                                             String metricName,",
          "51:                                                             double val) {",
          "54:       createTimelineMetric(startTime, metricName, host, null, instanceId, val)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   public static TimelineMetric createTimelineMetric(long startTime,",
          "79:     TimelineMetric m = new TimelineMetric();",
          "80:     m.setHostName(host);",
          "81:     m.setAppId(appId != null ? appId : \"host\");",
          "",
          "[Removed Lines]",
          "74:                                                 String metricName,",
          "75:                                                 String host,",
          "76:                                                 String appId,",
          "77:                                                 String instanceId,",
          "78:                                                 double val) {",
          "",
          "[Added Lines]",
          "74:                                                     String metricName,",
          "75:                                                     String host,",
          "76:                                                     String appId,",
          "77:                                                     String instanceId,",
          "78:                                                     double val) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:     return metric;",
          "105:   }",
          "107:   public static TimelineClusterMetric createEmptyTimelineClusterMetric(",
          "109:     TimelineClusterMetric metric = new TimelineClusterMetric(name,",
          "112:     return metric;",
          "113:   }",
          "115:   public static TimelineClusterMetric createEmptyTimelineClusterMetric(",
          "117:     return createEmptyTimelineClusterMetric(\"disk_used\", startTime);",
          "118:   }",
          "119: }",
          "",
          "[Removed Lines]",
          "108:       String name, long startTime) {",
          "110:         \"test_app\", \"instance_id\", startTime);",
          "116:       long startTime) {",
          "",
          "[Added Lines]",
          "107:   public static TimelineMetric createEmptyTimelineMetric(String metricName, long startTime) {",
          "108:     TimelineMetric metric = new TimelineMetric();",
          "109:     metric.setMetricName(metricName);",
          "110:     metric.setAppId(\"test_app\");",
          "111:     metric.setInstanceId(\"test_instance\");",
          "112:     metric.setHostName(\"test_host\");",
          "113:     metric.setStartTime(startTime);",
          "115:     return metric;",
          "116:   }",
          "119:     String name, long startTime) {",
          "121:       \"test_app\", \"instance_id\", startTime);",
          "127:     long startTime) {",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/StandaloneHBaseTestingUtility.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.metrics.core.timeline;",
          "20: import java.util.List;",
          "22: import org.apache.hadoop.conf.Configuration;",
          "23: import org.apache.hadoop.hbase.HBaseTestingUtility;",
          "24: import org.apache.hadoop.hbase.MiniHBaseCluster;",
          "26: public class StandaloneHBaseTestingUtility extends HBaseTestingUtility {",
          "28:   public StandaloneHBaseTestingUtility(Configuration configuration) {",
          "29:     super(configuration);",
          "30:   }",
          "32:   public MiniHBaseCluster startStandaloneHBaseCluster() throws Exception {",
          "33:     if (this.getZkCluster() == null) {",
          "34:       this.startMiniZKCluster();",
          "35:     }",
          "36:     return this.startMiniHBaseCluster(1, 1, (List) null, null, null, true, true);",
          "37:   }",
          "39: }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITClusterAggregator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static junit.framework.Assert.assertNotNull;",
          "23: import static junit.framework.Assert.assertTrue;",
          "24: import static junit.framework.Assert.fail;",
          "27: import static org.apache.ambari.metrics.core.timeline.TimelineMetricConfiguration.CLUSTER_AGGREGATOR_APP_IDS;",
          "28: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.GET_CLUSTER_AGGREGATE_SQL;",
          "29: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME;",
          "30: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.METRICS_CLUSTER_AGGREGATE_TABLE_NAME;",
          "",
          "[Removed Lines]",
          "25: import static org.apache.ambari.metrics.core.timeline.MetricTestHelper.createEmptyTimelineClusterMetric;",
          "26: import static org.apache.ambari.metrics.core.timeline.MetricTestHelper.prepareSingleTimelineMetric;",
          "",
          "[Added Lines]",
          "27: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.GET_CLUSTER_AGGREGATE_TIME_SQL;",
          "28: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: import junit.framework.Assert;",
          "58: public class ITClusterAggregator extends AbstractMiniHBaseClusterTest {",
          "61:   private Configuration getConfigurationForTest(boolean useGroupByAggregators) {",
          "62:     Configuration configuration = new Configuration();",
          "",
          "[Removed Lines]",
          "59:   private final TimelineMetricReadHelper metricReader = new TimelineMetricReadHelper(metadataManager, false);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     TimelineMetricAggregator agg =",
          "71:       TimelineMetricAggregatorFactory.createTimelineClusterAggregatorSecond(hdb,",
          "72:         getConfigurationForTest(false), metadataManager, null, null);",
          "74:     long startTime = System.currentTimeMillis();",
          "75:     long ctime = startTime;",
          "76:     long minute = 60 * 1000;",
          "77:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local1\",",
          "79:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local2\",",
          "81:     ctime += 2*minute;",
          "82:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local1\",",
          "84:     hdb.insertMetricRecords(MetricTestHelper.prepareSingleTimelineMetric(ctime, \"local2\",",
          "88:     long endTime = ctime + minute + 1;",
          "89:     boolean success = agg.doWork(startTime, endTime);",
          "93:       endTime, null, null, true);",
          "94:     condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_SQL,",
          "95:       METRICS_CLUSTER_AGGREGATE_TABLE_NAME));",
          "",
          "[Removed Lines]",
          "78:       \"disk_free\", 1));",
          "80:       \"disk_free\", 2));",
          "83:       \"disk_free\", 2));",
          "85:       \"disk_free\", 1));",
          "92:     Condition condition = new DefaultCondition(null, null, null, null, startTime,",
          "",
          "[Added Lines]",
          "72:     TimelineMetricReadHelper readHelper = new TimelineMetricReadHelper(metadataManager, false);",
          "78:       \"disk_free\", 1), true);",
          "80:       \"disk_free\", 2), true);",
          "83:       \"disk_free\", 2), true);",
          "85:       \"disk_free\", 1), true);",
          "92:     byte[] uuid = metadataManager.getUuid(\"disk_free\", \"host\", null, null, true);",
          "94:     Condition condition = new DefaultCondition(Collections.singletonList(uuid), Collections.singletonList(\"disk_free\"), null, \"host\", null, startTime,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     int recordCount = 0;",
          "101:     while (rs.next()) {",
          "103:       MetricClusterAggregate currentHostAggregate =",
          "106:       if (\"disk_free\".equals(currentMetric.getMetricName())) {",
          "107:         assertEquals(2, currentHostAggregate.getNumberOfHosts());",
          "",
          "[Removed Lines]",
          "102:       TimelineClusterMetric currentMetric = metricReader.fromResultSet(rs);",
          "104:         metricReader.getMetricClusterAggregateFromResultSet(rs);",
          "",
          "[Added Lines]",
          "104:       TimelineClusterMetric currentMetric = readHelper.fromResultSet(rs);",
          "106:         readHelper.getMetricClusterAggregateFromResultSet(rs);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:         fail(\"Unexpected entry\");",
          "114:       }",
          "115:     }",
          "116:   }",
          "118:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     assertTrue(recordCount == 5);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:     boolean success = agg.doWork(startTime - 1000, endTime + 1000);",
          "168:     condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_SQL,",
          "169:       METRICS_CLUSTER_AGGREGATE_TABLE_NAME));",
          "",
          "[Removed Lines]",
          "166:     Condition condition = new DefaultCondition(null, null, null, null, startTime,",
          "167:       endTime, null, null, true);",
          "",
          "[Added Lines]",
          "169:     Condition condition = new DefaultCondition(null, null, null, null, startTime - 1000,",
          "170:       endTime + 1000, null, null, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "177:       MetricClusterAggregate currentHostAggregate =",
          "178:         readHelper.getMetricClusterAggregateFromResultSet(rs);",
          "180:       if (\"disk_free\".equals(currentMetric.getMetricName())) {",
          "181:         System.out.println(\"OUTPUT: \" + currentMetric + \" - \" + currentHostAggregate);",
          "182:         assertEquals(2, currentHostAggregate.getNumberOfHosts());",
          "184:         recordCount++;",
          "185:       } else {",
          "186:         if (!currentMetric.getMetricName().equals(\"live_hosts\")) {",
          "",
          "[Removed Lines]",
          "183:         assertEquals(5.0, Math.floor(currentHostAggregate.getSum()));",
          "",
          "[Added Lines]",
          "183:       if (currentMetric == null) {",
          "184:         continue;",
          "185:       }",
          "189:         double sum = Math.floor(currentHostAggregate.getSum());",
          "190:         assertTrue(sum >= 2.0 && sum <= 8);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "189:       }",
          "190:     }",
          "193:   }",
          "195:   @Test",
          "",
          "[Removed Lines]",
          "192:     Assert.assertEquals(6, recordCount); //Interpolation adds 1 record.",
          "",
          "[Added Lines]",
          "199:     Assert.assertEquals(14, recordCount); //Interpolation adds 1 record.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "238:       MetricClusterAggregate currentHostAggregate =",
          "239:         readHelper.getMetricClusterAggregateFromResultSet(rs);",
          "241:       if (\"disk_free\".equals(currentMetric.getMetricName())) {",
          "242:         assertEquals(2, currentHostAggregate.getNumberOfHosts());",
          "243:         assertEquals(2.0, currentHostAggregate.getMax());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if (currentMetric == null) {",
          "249:         continue;",
          "250:       }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "288:     hdb.saveClusterAggregateRecordsSecond(records, METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME);",
          "295:     int count = 0;",
          "296:     while (rs.next()) {",
          "297:       TimelineMetric metric = metadataManager.getMetricFromUuid(rs.getBytes(\"UUID\"));",
          "298:       assertEquals(\"METRIC_NAME\", \"disk_used\", metric.getMetricName());",
          "299:       assertEquals(\"APP_ID\", \"test_app\", metric.getAppId());",
          "302:       assertEquals(\"METRIC_MAX\", 4.0, rs.getDouble(\"METRIC_MAX\"));",
          "303:       assertEquals(\"METRIC_MIN\", 0.0, rs.getDouble(\"METRIC_MIN\"));",
          "304:       count++;",
          "",
          "[Removed Lines]",
          "291:     agg.doWork(startTime, ctime + hour + 1000);",
          "294:     ResultSet rs = executeQuery(\"SELECT * FROM METRIC_AGGREGATE_DAILY_UUID\");",
          "300:       assertEquals(\"METRIC_SUM\", 16.0, rs.getDouble(\"METRIC_SUM\"));",
          "301:       assertEquals(\"METRIC_COUNT\", 8, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "[Added Lines]",
          "301:     agg.doWork(startTime - 1000, ctime + hour + 1000);",
          "304:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(new ArrayList<String>() {{ add(\"disk_used\"); }},",
          "305:       null, \"test_app\", null);",
          "307:     Condition condition = new DefaultCondition(uuids, new ArrayList<String>() {{ add(\"disk_used\"); }},",
          "308:       null, \"test_app\", null, startTime - 1000,",
          "309:       ctime + hour + 2000, null, null, true);",
          "310:     condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_TIME_SQL,",
          "311:       METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME));",
          "313:     PreparedStatement pstmt = PhoenixTransactSQL.prepareGetMetricsSqlStmt(conn, condition);",
          "314:     ResultSet rs = pstmt.executeQuery();",
          "321:       assertEquals(\"METRIC_SUM\", 4.0, rs.getDouble(\"METRIC_SUM\"));",
          "322:       assertEquals(\"METRIC_COUNT\", 2, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "360:       TimelineMetric metric = metadataManager.getMetricFromUuid(rs.getBytes(\"UUID\"));",
          "361:       assertEquals(\"METRIC_NAME\", \"disk_used\", metric.getMetricName());",
          "362:       assertEquals(\"APP_ID\", \"test_app\", metric.getAppId());",
          "365:       assertEquals(\"METRIC_MAX\", 4.0, rs.getDouble(\"METRIC_MAX\"));",
          "366:       assertEquals(\"METRIC_MIN\", 0.0, rs.getDouble(\"METRIC_MIN\"));",
          "367:       if (count == 0) {",
          "",
          "[Removed Lines]",
          "363:       assertEquals(\"METRIC_SUM\", 16.0, rs.getDouble(\"METRIC_SUM\"));",
          "364:       assertEquals(\"METRIC_COUNT\", 8, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "[Added Lines]",
          "384:       assertEquals(\"METRIC_SUM\", 4.0, rs.getDouble(\"METRIC_SUM\"));",
          "385:       assertEquals(\"METRIC_COUNT\", 2, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "397:     Map<TimelineClusterMetric, MetricClusterAggregate> records =",
          "398:       new HashMap<TimelineClusterMetric, MetricClusterAggregate>();",
          "401:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "403:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "405:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "407:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "409:     hdb.saveClusterAggregateRecords(records);",
          "",
          "[Removed Lines]",
          "400:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(ctime),",
          "402:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(ctime += minute),",
          "404:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(ctime += minute),",
          "406:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(ctime += minute),",
          "",
          "[Added Lines]",
          "421:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h\", ctime),",
          "423:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h\", ctime += minute),",
          "425:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h\", ctime += minute),",
          "427:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h\", ctime += minute),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "412:     agg.doWork(startTime, ctime + minute);",
          "416:     int count = 0;",
          "417:     while (rs.next()) {",
          "418:       TimelineMetric metric = metadataManager.getMetricFromUuid(rs.getBytes(\"UUID\"));",
          "420:       assertEquals(\"APP_ID\", \"test_app\", metric.getAppId());",
          "423:       assertEquals(\"METRIC_MAX\", 4.0, rs.getDouble(\"METRIC_MAX\"));",
          "424:       assertEquals(\"METRIC_MIN\", 0.0, rs.getDouble(\"METRIC_MIN\"));",
          "425:       count++;",
          "",
          "[Removed Lines]",
          "415:     ResultSet rs = executeQuery(\"SELECT * FROM METRIC_AGGREGATE_HOURLY_UUID\");",
          "419:       assertEquals(\"METRIC_NAME\", \"disk_used\", metric.getMetricName());",
          "421:       assertEquals(\"METRIC_SUM\", 16.0, rs.getDouble(\"METRIC_SUM\"));",
          "422:       assertEquals(\"METRIC_COUNT\", 8, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "[Added Lines]",
          "436:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(new ArrayList<String>() {{ add(\"disk_used_h\"); }},",
          "437:       null, \"test_app\", null);",
          "439:     Condition condition = new DefaultCondition(uuids, new ArrayList<String>() {{ add(\"disk_used_h\"); }},",
          "440:       null, \"test_app\", null, startTime - 1000,",
          "441:       ctime + minute + 2000, null, null, true);",
          "442:     condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_TIME_SQL,",
          "443:       METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME));",
          "445:     PreparedStatement pstmt = PhoenixTransactSQL.prepareGetMetricsSqlStmt(conn, condition);",
          "446:     ResultSet rs = pstmt.executeQuery();",
          "451:       assertEquals(\"METRIC_NAME\", \"disk_used_h\", metric.getMetricName());",
          "453:       assertEquals(\"METRIC_SUM\", 4.0, rs.getDouble(\"METRIC_SUM\"));",
          "454:       assertEquals(\"METRIC_COUNT\", 2, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "445:     Map<TimelineClusterMetric, MetricClusterAggregate> records =",
          "446:       new HashMap<TimelineClusterMetric, MetricClusterAggregate>();",
          "449:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "451:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "454:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "456:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "459:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "461:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "464:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "466:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "468:     hdb.saveClusterAggregateRecords(records);",
          "",
          "[Removed Lines]",
          "448:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime),",
          "450:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "453:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "455:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "458:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "460:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "463:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "465:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "",
          "[Added Lines]",
          "480:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h2\", ctime),",
          "482:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_h2\", ctime),",
          "485:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h2\", ctime += minute),",
          "487:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_h2\", ctime),",
          "490:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h2\", ctime += minute),",
          "492:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_h2\", ctime),",
          "495:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_h2\", ctime += minute),",
          "497:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_h2\", ctime),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "471:     agg.doWork(startTime, ctime + minute);",
          "475:     int count = 0;",
          "476:     while (rs.next()) {",
          "477:       TimelineMetric metric = metadataManager.getMetricFromUuid(rs.getBytes(\"UUID\"));",
          "",
          "[Removed Lines]",
          "474:     ResultSet rs = executeQuery(\"SELECT * FROM METRIC_AGGREGATE_HOURLY_UUID\");",
          "",
          "[Added Lines]",
          "506:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(new ArrayList<String>() {{ add(\"disk_used_h2\"); add(\"disk_free_h2\"); }},",
          "507:       null, \"test_app\", null);",
          "509:     Condition condition = new DefaultCondition(uuids, new ArrayList<String>() {{ add(\"disk_used_h\"); add(\"disk_free_h2\");}},",
          "510:       null, \"test_app\", null, startTime - 1000,",
          "511:       ctime + minute + 2000, null, null, true);",
          "512:     condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_TIME_SQL,",
          "513:       METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME));",
          "515:     PreparedStatement pstmt = PhoenixTransactSQL.prepareGetMetricsSqlStmt(conn, condition);",
          "516:     ResultSet rs = pstmt.executeQuery();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "611:     agg.doWork(startTime, endTime);",
          "614:       endTime, null, null, true);",
          "615:     condition.setStatement(String.format(GET_CLUSTER_AGGREGATE_SQL,",
          "616:       METRICS_CLUSTER_AGGREGATE_TABLE_NAME));",
          "",
          "[Removed Lines]",
          "613:     Condition condition = new DefaultCondition(null, null, null, null, startTime,",
          "",
          "[Added Lines]",
          "656:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(new ArrayList<String>() {{ add(\"yarn.ClusterMetrics.NumActiveNMs\"); }},",
          "657:       null, \"resourcemanager\", null);",
          "659:     Condition condition = new DefaultCondition(uuids,new ArrayList<String>() {{ add(\"yarn.ClusterMetrics.NumActiveNMs\"); }},",
          "660:       null, \"resourcemanager\", null, startTime,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "655:     Map<TimelineClusterMetric, MetricClusterAggregate> records =",
          "656:       new HashMap<TimelineClusterMetric, MetricClusterAggregate>();",
          "659:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "661:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "664:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "666:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "669:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "671:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "674:       new MetricClusterAggregate(4.0, 2, 0.0, 4.0, 0.0));",
          "676:       new MetricClusterAggregate(1.0, 2, 0.0, 1.0, 1.0));",
          "678:     hdb.saveClusterAggregateRecords(records);",
          "",
          "[Removed Lines]",
          "658:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "660:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "663:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "665:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "668:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "670:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "673:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used\", ctime += minute),",
          "675:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free\", ctime),",
          "",
          "[Added Lines]",
          "705:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_gb\", ctime += minute),",
          "707:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_gb\", ctime),",
          "710:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_gb\", ctime += minute),",
          "712:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_gb\", ctime),",
          "715:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_gb\", ctime += minute),",
          "717:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_gb\", ctime),",
          "720:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_used_gb\", ctime += minute),",
          "722:     records.put(MetricTestHelper.createEmptyTimelineClusterMetric(\"disk_free_gb\", ctime),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "685:     int count = 0;",
          "686:     while (rs.next()) {",
          "687:       TimelineMetric metric = metadataManager.getMetricFromUuid(rs.getBytes(\"UUID\"));",
          "689:         assertEquals(\"APP_ID\", \"test_app\", metric.getAppId());",
          "690:         assertEquals(\"METRIC_SUM\", 4.0, rs.getDouble(\"METRIC_SUM\"));",
          "691:         assertEquals(\"METRIC_COUNT\", 2, rs.getLong(\"METRIC_COUNT\"));",
          "692:         assertEquals(\"METRIC_MAX\", 4.0, rs.getDouble(\"METRIC_MAX\"));",
          "693:         assertEquals(\"METRIC_MIN\", 0.0, rs.getDouble(\"METRIC_MIN\"));",
          "695:         assertEquals(\"APP_ID\", \"test_app\", metric.getAppId());",
          "696:         assertEquals(\"METRIC_SUM\", 1.0, rs.getDouble(\"METRIC_SUM\"));",
          "697:         assertEquals(\"METRIC_COUNT\", 2, rs.getLong(\"METRIC_COUNT\"));",
          "",
          "[Removed Lines]",
          "688:       if (\"disk_used\".equals(metric.getMetricName())) {",
          "694:       } else if (\"disk_free\".equals(metric.getMetricName())) {",
          "",
          "[Added Lines]",
          "735:       if (metric == null) {",
          "736:         continue;",
          "737:       }",
          "738:       if (\"disk_used_gb\".equals(metric.getMetricName())) {",
          "744:       } else if (\"disk_free_gb\".equals(metric.getMetricName())) {",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/aggregators/ITMetricAggregator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import java.sql.PreparedStatement;",
          "32: import java.sql.ResultSet;",
          "33: import java.util.Arrays;",
          "34: import java.util.Collections;",
          "35: import java.util.Comparator;",
          "36: import java.util.HashMap;",
          "37: import java.util.Map;",
          "38: import java.util.TreeMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.util.ArrayList;",
          "38: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import static org.apache.ambari.metrics.core.timeline.query.PhoenixTransactSQL.METRICS_AGGREGATE_MINUTE_TABLE_NAME;",
          "48: import static org.assertj.core.api.Assertions.assertThat;",
          "50: public class ITMetricAggregator extends AbstractMiniHBaseClusterTest {",
          "52:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import com.google.common.collect.ArrayListMultimap;",
          "53: import com.google.common.collect.Multimap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     TimelineMetrics metricsSent = prepareTimelineMetrics(startTime, \"local\");",
          "59:     hdb.insertMetricRecords(metricsSent, true);",
          "67:     assertThat(recordRead.getMetrics()).hasSize(2)",
          "",
          "[Removed Lines]",
          "61:     Condition queryCondition = new DefaultCondition(null,",
          "62:         Collections.singletonList(\"local\"), null, null, startTime,",
          "63:         startTime + (15 * 60 * 1000), null, null, false);",
          "64:     TimelineMetrics recordRead = hdb.getMetricRecords(queryCondition, null);",
          "",
          "[Added Lines]",
          "66:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(new ArrayList<String>() {{ add(\"disk_free\"); add(\"mem_free\");}},",
          "67:       Collections.singletonList(\"local\"),",
          "68:       \"host\", null);",
          "70:     Condition queryCondition = new DefaultCondition(uuids, Arrays.asList(\"disk_free\", \"mem_free\"),",
          "71:       Collections.singletonList(\"local\"), \"host\", null, startTime,",
          "72:       startTime + (15 * 60 * 1000), null, null, false);",
          "73:     TimelineMetrics recordRead = hdb.getMetricRecords(queryCondition, singletonValueFunctionMap(Arrays.asList(\"disk_free\", \"mem_free\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:     return configuration;",
          "80:   }",
          "82:   @Test",
          "83:   public void testShouldAggregateMinuteProperly() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   private Multimap<String, List<Function>> singletonValueFunctionMap(List<String> metricNames) {",
          "92:     Multimap<String, List<Function>> mmap = ArrayListMultimap.create();",
          "93:     for (String metricName : metricNames) {",
          "94:       mmap.put(metricName, Collections.singletonList(new Function()));",
          "95:     }",
          "96:     return mmap;",
          "97:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:   }",
          "142:   @Test",
          "145:     TimelineMetricAggregator aggregator =",
          "146:       TimelineMetricAggregatorFactory.createTimelineMetricAggregatorHourly(hdb,",
          "",
          "[Removed Lines]",
          "143:    public void testShouldAggregateHourProperly() throws Exception {",
          "",
          "[Added Lines]",
          "159:   public void testShouldAggregateHourProperly() throws Exception {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214:     Map<TimelineMetric, MetricHostAggregate>",
          "215:       aggMap = new HashMap<TimelineMetric, MetricHostAggregate>();",
          "217:     int min_5 = 5 * 60 * 1000;",
          "218:     long ctime = startTime - min_5;",
          "232:     hdb.saveHostAggregateRecords(aggMap, METRICS_AGGREGATE_HOURLY_TABLE_NAME);",
          "",
          "[Removed Lines]",
          "219:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "220:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "221:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "222:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "223:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "224:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "225:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "226:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "227:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "228:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "229:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "230:     aggMap.put(createEmptyTimelineMetric(ctime += min_5), expectedAggregate);",
          "",
          "[Added Lines]",
          "233:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(new ArrayList<String>() {{ add(\"disk_used_daily\");}},",
          "234:       Collections.singletonList(\"test_host\"),",
          "235:       \"test_app\", null);",
          "239:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "240:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "241:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "242:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "243:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "244:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "245:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "246:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "247:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "248:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "249:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "250:     aggMap.put(createEmptyTimelineMetric(\"disk_used_daily\", ctime += min_5), expectedAggregate);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:     assertTrue(success);",
          "241:       endTime + 1, null, null, true);",
          "242:     condition.setStatement(String.format(GET_METRIC_AGGREGATE_ONLY_SQL, METRICS_AGGREGATE_DAILY_TABLE_NAME));",
          "",
          "[Removed Lines]",
          "240:     Condition condition = new DefaultCondition(null, null, null, null, startTime,",
          "",
          "[Added Lines]",
          "260:     Condition condition = new DefaultCondition(uuids, Collections.singletonList(\"disk_used_daily\"),",
          "261:       Collections.singletonList(\"test_host\"), \"test_app\", null, startTime,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "250:       MetricHostAggregate currentHostAggregate =",
          "251:         readHelper.getMetricHostAggregateFromResultSet(rs);",
          "254:         assertEquals(2.0, currentHostAggregate.getMax());",
          "255:         assertEquals(0.0, currentHostAggregate.getMin());",
          "256:         assertEquals(12 * 20, currentHostAggregate.getNumberOfSamples());",
          "",
          "[Removed Lines]",
          "253:       if (\"disk_used\".equals(currentMetric.getMetricName())) {",
          "",
          "[Added Lines]",
          "274:       if (\"disk_used_daily\".equals(currentMetric.getMetricName())) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "263:   @Test",
          "264:   public void testAggregationUsingGroupByQuery() throws Exception {",
          "266:     TimelineMetricAggregator aggregatorMinute =",
          "267:       TimelineMetricAggregatorFactory.createTimelineMetricAggregatorMinute(hdb,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:     List<String> metricNames = new ArrayList<String>() {{ add(\"disk_free_g\"); add(\"mem_free_g\");}};",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "271:     long startTime = System.currentTimeMillis();",
          "272:     long ctime = startTime;",
          "273:     long minute = 60 * 1000;",
          "280:     long endTime = startTime + 1000 * 60 * 4;",
          "281:     boolean success = aggregatorMinute.doWork(startTime - 1, endTime);",
          "282:     assertTrue(success);",
          "285:       endTime + 1, null, null, true);",
          "286:     condition.setStatement(String.format(GET_METRIC_AGGREGATE_ONLY_SQL, METRICS_AGGREGATE_MINUTE_TABLE_NAME));",
          "",
          "[Removed Lines]",
          "274:     hdb.insertMetricRecords(prepareTimelineMetrics(startTime, \"local\"), true);",
          "275:     hdb.insertMetricRecords(prepareTimelineMetrics(ctime += minute, \"local\"), true);",
          "276:     hdb.insertMetricRecords(prepareTimelineMetrics(ctime += minute, \"local\"), true);",
          "277:     hdb.insertMetricRecords(prepareTimelineMetrics(ctime += minute, \"local\"), true);",
          "278:     hdb.insertMetricRecords(prepareTimelineMetrics(ctime += minute, \"local\"), true);",
          "284:     Condition condition = new DefaultCondition(null, null, null, null, startTime,",
          "",
          "[Added Lines]",
          "297:     hdb.insertMetricRecords(prepareTimelineMetrics(metricNames, startTime, \"local\"), true);",
          "298:     hdb.insertMetricRecords(prepareTimelineMetrics(metricNames, ctime += minute, \"local\"), true);",
          "299:     hdb.insertMetricRecords(prepareTimelineMetrics(metricNames, ctime += minute, \"local\"), true);",
          "300:     hdb.insertMetricRecords(prepareTimelineMetrics(metricNames, ctime += minute, \"local\"), true);",
          "301:     hdb.insertMetricRecords(prepareTimelineMetrics(metricNames, ctime += minute, \"local\"), true);",
          "303:     List<byte[]> uuids = metadataManager.getUuidsForGetMetricQuery(metricNames, Collections.singletonList(\"local\"),",
          "304:       \"host\", null);",
          "310:     Condition condition = new DefaultCondition(uuids, metricNames, Collections.singletonList(\"local\"), \"host\", null, startTime,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "297:       MetricHostAggregate currentHostAggregate =",
          "298:         readHelper.getMetricHostAggregateFromResultSet(rs);",
          "301:         assertEquals(2.0, currentHostAggregate.getMax());",
          "302:         assertEquals(0.0, currentHostAggregate.getMin());",
          "303:         assertEquals(20, currentHostAggregate.getNumberOfSamples());",
          "304:         assertEquals(15.0, currentHostAggregate.getSum());",
          "305:         assertEquals(15.0 / 20, currentHostAggregate.calculateAverage());",
          "306:         count++;",
          "308:         assertEquals(2.0, currentHostAggregate.getMax());",
          "309:         assertEquals(0.0, currentHostAggregate.getMin());",
          "310:         assertEquals(20, currentHostAggregate.getNumberOfSamples());",
          "",
          "[Removed Lines]",
          "300:       if (\"disk_free\".equals(currentMetric.getMetricName())) {",
          "307:       } else if (\"mem_free\".equals(currentMetric.getMetricName())) {",
          "",
          "[Added Lines]",
          "326:       if (\"disk_free_g\".equals(currentMetric.getMetricName())) {",
          "333:       } else if (\"mem_free_g\".equals(currentMetric.getMetricName())) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "335:     return metrics;",
          "336:   }",
          "338:   private TimelineMetric createMetric(long startTime, String metricName, String host) {",
          "339:     TimelineMetric m = new TimelineMetric();",
          "340:     m.setAppId(\"host\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:   private TimelineMetrics prepareTimelineMetrics(List<String> metricNames, long startTime, String host) {",
          "365:     TimelineMetrics metrics = new TimelineMetrics();",
          "366:     for (String metricName : metricNames) {",
          "367:       metrics.getMetrics().add(createMetric(startTime, metricName, host));",
          "368:     }",
          "369:     return metrics;",
          "370:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "177dd195f6248c54e94104bb25476e42ae9da72d",
      "candidate_info": {
        "commit_hash": "177dd195f6248c54e94104bb25476e42ae9da72d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/177dd195f6248c54e94104bb25476e42ae9da72d",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java"
        ],
        "message": "AMBARI-25382 Issues with Views in ambari when User Logs In from KNOX/LDAP and the username has spaces and Camel Case Letters (#3092)\n\n* AMBARI-25382 Issues with Views in ambari when User Logs In from KNOX/LDAP and the username has spaces and Camel Case Letters (asnaik)\n\n* AMBARI-25382 Issues with Views in ambari when User Logs In from KNOX/LDAP and the username has spaces and Camel Case Letters -UT Fix (asnaik)\n\n* AMBARI-25382 Issues with Views in ambari when User Logs In from KNOX/LDAP and the username has spaces and Camel Case Letters -- review comments (asnaik)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java||ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: import org.apache.ambari.server.security.SecurityHelper;",
          "50: import org.apache.ambari.server.security.SecurityHelperImpl;",
          "51: import org.apache.ambari.server.security.authorization.AmbariAuthorizationFilter;",
          "52: import org.apache.ambari.server.view.ViewContextImpl;",
          "53: import org.apache.ambari.server.view.ViewRegistry;",
          "54: import org.apache.ambari.server.view.configuration.InstanceConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.apache.ambari.server.security.authorization.AuthorizationHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "813:   public String getUsername() {",
          "815:   }",
          "",
          "[Removed Lines]",
          "814:     return securityHelper.getCurrentUserName();",
          "",
          "[Added Lines]",
          "815:     return AuthorizationHelper.resolveLoginAliasToUserName(securityHelper.getCurrentUserName());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java||ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.ambari.server.security.authentication.AmbariUserDetailsImpl;",
          "30: import org.apache.ambari.server.security.authentication.TooManyLoginFailuresException;",
          "31: import org.apache.ambari.server.security.authentication.UserNotFoundException;",
          "32: import org.apache.ambari.server.security.authorization.UserAuthenticationType;",
          "33: import org.apache.ambari.server.security.authorization.Users;",
          "34: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.ambari.server.security.authorization.AuthorizationHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:       }",
          "122:       AmbariUserDetails userDetails = new AmbariUserDetailsImpl(users.getUser(userEntity), null, users.getUserAuthorities(userEntity));",
          "123:       return new AmbariUserAuthentication(authentication.getCredentials().toString(), userDetails, true);",
          "124:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:       String jwtTokenName = userDetails.getUsername().trim();",
          "127:       if(!userName.equals(jwtTokenName)){",
          "128:         AuthorizationHelper.addLoginNameAlias(userName,jwtTokenName);",
          "129:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:       LOG.warn(\"The user data does not contain a value for {}.\", ldapServerProperties.getUsernameAttribute());",
          "86:     } else if (ldapUserName.isEmpty()) {",
          "87:       LOG.warn(\"The user data contains an empty value for {}.\", ldapServerProperties.getUsernameAttribute());",
          "",
          "[Removed Lines]",
          "88:     } else if (!ldapUserName.equals(loginName)) {",
          "",
          "[Added Lines]",
          "88:     } else {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:       } else {",
          "101:         processedLdapUserName = ldapUserName;",
          "102:       }",
          "105:     }",
          "107:     return user;",
          "",
          "[Removed Lines]",
          "104:       AuthorizationHelper.addLoginNameAlias(processedLdapUserName, loginName);",
          "",
          "[Added Lines]",
          "103:       if (!processedLdapUserName.equals(loginName.toLowerCase()))",
          "104:       {",
          "105:         AuthorizationHelper.addLoginNameAlias(processedLdapUserName, loginName.toLowerCase());",
          "106:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AuthorizationHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:   public static void addLoginNameAlias(String ambariUserName, String loginAlias) {",
          "331:     ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();",
          "332:     if (attr != null) {",
          "333:       LOG.info(\"Adding login alias '{}' for user name '{}'\", loginAlias, ambariUserName);",
          "334:       attr.setAttribute(loginAlias, ambariUserName, RequestAttributes.SCOPE_SESSION);",
          "335:     }",
          "336:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:       attr.setAttribute(ambariUserName, loginAlias, RequestAttributes.SCOPE_SESSION);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authentication/jwt/AmbariJwtAuthenticationFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:     Users users = createMock(Users.class);",
          "410:     expect(users.getUserEntity(\"test-user\")).andReturn(userEntity).once();",
          "411:     expect(users.getUser(userEntity)).andReturn(user).once();",
          "412:     expect(users.getUserAuthorities(userEntity)).andReturn(Collections.emptyList()).once();",
          "413:     users.validateLogin(userEntity, \"test-user\");",
          "414:     expectLastCall().once();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:     expect(user.getUserName()).andReturn(\"test-user\").atLeastOnce();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     if (!StringUtils.isEmpty(ldapUsername) && !ambariUsername.equals(ldapUsername)) {",
          "180:       servletRequestAttributes.setAttribute(eq(ambariUsername), eq(forceUsernameToLower ? ldapUsername.toLowerCase() : ldapUsername), eq(RequestAttributes.SCOPE_SESSION));",
          "181:       expectLastCall().once();",
          "182:     }",
          "184:     setupDatabaseConfigurationExpectations(true, forceUsernameToLower);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:       servletRequestAttributes.setAttribute(eq(forceUsernameToLower ? ldapUsername.toLowerCase() : ldapUsername),eq(ambariUsername), eq(RequestAttributes.SCOPE_SESSION));",
          "183:       expectLastCall().once();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "182304c6b481cc8a88d27e2aae658108195fa745",
      "candidate_info": {
        "commit_hash": "182304c6b481cc8a88d27e2aae658108195fa745",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/182304c6b481cc8a88d27e2aae658108195fa745",
        "files": [
          "contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java"
        ],
        "message": "AMBARI-25288 [views][Filesview] Copy File Operation in Filesview is overwriting the file (asnaik) (#2989)",
        "before_after_code_files": [
          "contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java||contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java||contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java": [
          "File: contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java -> contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:   public void copy(final String src, final String dest) throws IOException, InterruptedException, HdfsApiException {",
          "464:     boolean result = execute(new PrivilegedExceptionAction<Boolean>() {",
          "465:       public Boolean run() throws Exception {",
          "467:       }",
          "468:     });",
          "",
          "[Removed Lines]",
          "466:         return FileUtil.copy(fs, new Path(src), fs, new Path(dest), false, conf);",
          "",
          "[Added Lines]",
          "466:         return FileUtil.copy(fs, new Path(src), fs, new Path(dest), false,false, conf);",
          "",
          "---------------"
        ]
      }
    }
  ]
}