{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "100ad2f08f3cfdce9386c249e3d7bf9ca5f38507",
      "candidate_info": {
        "commit_hash": "100ad2f08f3cfdce9386c249e3d7bf9ca5f38507",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/100ad2f08f3cfdce9386c249e3d7bf9ca5f38507",
        "files": [
          "ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js"
        ],
        "message": "AMBARI-25055 JS error after starting stack downgrade",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js||ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js||ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js": [
          "File: ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js -> ambari-web/app/controllers/main/admin/stack_and_upgrade_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2283:     this.initDBProperties();",
          "2284:     App.set('upgradeState', lastUpgradeData.Upgrade.request_status);",
          "2285:     this.loadRepoVersionsToModel().done(function () {",
          "2295:       self.setDBProperty('upgradeVersion', upgradeVersion);",
          "2296:       self.set('upgradeVersion', upgradeVersion);",
          "2297:     });",
          "",
          "[Removed Lines]",
          "2286:       var upgradeVersion;",
          "2287:       if (isDowngrade) {",
          "2288:         var services = Object.keys(lastUpgradeData.versions);",
          "2289:         upgradeVersion = services[0].from_repository_version;",
          "2290:       } else {",
          "2291:         var toVersion = App.RepositoryVersion.find().findProperty('repositoryVersion', lastUpgradeData.Upgrade.associated_version);",
          "2292:         upgradeVersion = toVersion && toVersion.get('displayName');",
          "2293:       }",
          "2294:       lastUpgradeData.versions",
          "",
          "[Added Lines]",
          "2286:       var version = App.RepositoryVersion.find().findProperty('repositoryVersion', lastUpgradeData.Upgrade.associated_version);",
          "2287:       var upgradeVersion = version && version.get('displayName');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cc4ef0c49681e8c61adce99c7cadec1ccd83550",
      "candidate_info": {
        "commit_hash": "0cc4ef0c49681e8c61adce99c7cadec1ccd83550",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0cc4ef0c49681e8c61adce99c7cadec1ccd83550",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ],
        "message": "AMBARI-24254 - Refactor renaming service ambari infra to ambari infra solr when upgrading to ambari 2.7.0 (#1695)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.orm.DBAccessor;",
          "57: import org.apache.ambari.server.orm.dao.AmbariConfigurationDAO;",
          "58: import org.apache.ambari.server.orm.dao.ArtifactDAO;",
          "59: import org.apache.ambari.server.orm.dao.DaoUtils;",
          "60: import org.apache.ambari.server.orm.dao.HostComponentStateDAO;",
          "61: import org.apache.ambari.server.orm.dao.RequestDAO;",
          "62: import org.apache.ambari.server.orm.entities.AlertDefinitionEntity;",
          "63: import org.apache.ambari.server.orm.entities.AlertGroupEntity;",
          "64: import org.apache.ambari.server.orm.entities.AlertHistoryEntity;",
          "65: import org.apache.ambari.server.orm.entities.ArtifactEntity;",
          "66: import org.apache.ambari.server.orm.entities.HostComponentStateEntity;",
          "67: import org.apache.ambari.server.orm.entities.RequestEntity;",
          "68: import org.apache.ambari.server.orm.entities.ServiceConfigEntity;",
          "69: import org.apache.ambari.server.orm.entities.StageEntity;",
          "70: import org.apache.ambari.server.security.authorization.UserAuthenticationType;",
          "71: import org.apache.ambari.server.serveraction.kerberos.KerberosServerAction;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.orm.dao.ClusterServiceDAO;",
          "61: import org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO;",
          "64: import org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO;",
          "65: import org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO;",
          "70: import org.apache.ambari.server.orm.entities.ClusterServiceEntity;",
          "71: import org.apache.ambari.server.orm.entities.ClusterServiceEntityPK;",
          "72: import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;",
          "75: import org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity;",
          "77: import org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1055:     updateStormConfigs();",
          "1056:   }",
          "1059:     LOG.info(\"Renaming service AMBARI_INFRA to AMBARI_INFRA_SOLR\");",
          "1082:     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);",
          "1083:     Clusters clusters = ambariManagementController.getClusters();",
          "1084:     if (clusters == null)",
          "",
          "[Removed Lines]",
          "1058:   protected void renameAmbariInfra() throws SQLException {",
          "1060:     dbAccessor.dropFKConstraint(SERVICE_COMPONENT_DESIRED_STATE_TABLE, SERVICE_COMPONENT_DESIRED_STATES_CLUSTER_SERVICES_FK);",
          "1061:     dbAccessor.dropFKConstraint(SERVICE_DESIRED_STATE_TABLE, SERVICE_DESIRED_STATE_CLUSTER_SERVICES_FK);",
          "1062:     dbAccessor.dropFKConstraint(COMPONENT_DESIRED_STATE_TABLE, COMPONENT_DESIRED_STATE_SERVICE_COMPONENT_DESIRED_STATE_FK);",
          "1063:     dbAccessor.dropFKConstraint(COMPONENT_STATE_TABLE, COMPONENT_STATE_SERVICE_COMPONENT_DESIRED_STATE_FK);",
          "1064:     try {",
          "1065:       dbAccessor.updateTable(SERVICE_COMPONENT_DESIRED_STATE_TABLE, SERVICE_NAME_COLUMN, AMBARI_INFRA_NEW_NAME, String.format(\"WHERE %s = '%s'\", SERVICE_NAME_COLUMN, AMBARI_INFRA_OLD_NAME));",
          "1066:       dbAccessor.updateTable(COMPONENT_DESIRED_STATE_TABLE, SERVICE_NAME_COLUMN, AMBARI_INFRA_NEW_NAME, String.format(\"WHERE %s = '%s'\", SERVICE_NAME_COLUMN, AMBARI_INFRA_OLD_NAME));",
          "1067:       dbAccessor.updateTable(COMPONENT_STATE_TABLE, SERVICE_NAME_COLUMN, AMBARI_INFRA_NEW_NAME, String.format(\"WHERE %s = '%s'\", SERVICE_NAME_COLUMN, AMBARI_INFRA_OLD_NAME));",
          "1068:       dbAccessor.updateTable(SERVICE_DESIRED_STATE_TABLE, SERVICE_NAME_COLUMN, AMBARI_INFRA_NEW_NAME, String.format(\"WHERE %s = '%s'\", SERVICE_NAME_COLUMN, AMBARI_INFRA_OLD_NAME));",
          "1069:       dbAccessor.updateTable(CLUSTER_SERVICES_TABLE, SERVICE_NAME_COLUMN, AMBARI_INFRA_NEW_NAME, String.format(\"WHERE %s = '%s'\", SERVICE_NAME_COLUMN, AMBARI_INFRA_OLD_NAME));",
          "1070:     } finally {",
          "1071:       dbAccessor.addFKConstraint(SERVICE_COMPONENT_DESIRED_STATE_TABLE, SERVICE_COMPONENT_DESIRED_STATES_CLUSTER_SERVICES_FK,",
          "1072:         SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, CLUSTER_SERVICES_TABLE, SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, false);",
          "1073:       dbAccessor.addFKConstraint(SERVICE_DESIRED_STATE_TABLE, SERVICE_DESIRED_STATE_CLUSTER_SERVICES_FK,",
          "1074:         SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, CLUSTER_SERVICES_TABLE, SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, false);",
          "1075:       dbAccessor.addFKConstraint(COMPONENT_DESIRED_STATE_TABLE, COMPONENT_DESIRED_STATE_SERVICE_COMPONENT_DESIRED_STATE_FK,",
          "1076:         COMPONENT_NAME_SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, SERVICE_COMPONENT_DESIRED_STATE_TABLE, COMPONENT_NAME_SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, false);",
          "1077:       dbAccessor.addFKConstraint(COMPONENT_STATE_TABLE, COMPONENT_STATE_SERVICE_COMPONENT_DESIRED_STATE_FK,",
          "1078:         COMPONENT_NAME_SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, SERVICE_COMPONENT_DESIRED_STATE_TABLE, COMPONENT_NAME_SERVICE_NAME_CLUSTER_ID_KEY_COLUMNS, false);",
          "1079:     }",
          "",
          "[Added Lines]",
          "1067:   protected void renameAmbariInfra() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1088:     if (MapUtils.isEmpty(clusterMap))",
          "1089:       return;",
          "1091:     executeInTransaction(() -> {",
          "1093:               \"UPDATE ServiceConfigEntity SET serviceName = :newServiceName WHERE serviceName = :oldServiceName\", ServiceConfigEntity.class);",
          "1094:       serviceConfigUpdate.setParameter(\"newServiceName\", AMBARI_INFRA_NEW_NAME);",
          "1095:       serviceConfigUpdate.setParameter(\"oldServiceName\", AMBARI_INFRA_OLD_NAME);",
          "",
          "[Removed Lines]",
          "1092:       TypedQuery<ServiceConfigEntity> serviceConfigUpdate = getEntityManagerProvider().get().createQuery(",
          "",
          "[Added Lines]",
          "1078:     EntityManager entityManager = getEntityManagerProvider().get();",
          "1079:     ClusterServiceDAO clusterServiceDAO = injector.getInstance(ClusterServiceDAO.class);",
          "1080:     HostComponentStateDAO hostComponentStateDAO = injector.getInstance(HostComponentStateDAO.class);",
          "1081:     HostComponentDesiredStateDAO hostComponentDesiredStateDAO = injector.getInstance(HostComponentDesiredStateDAO.class);",
          "1082:     ServiceDesiredStateDAO serviceDesiredStateDAO = injector.getInstance(ServiceDesiredStateDAO.class);",
          "1083:     ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO = injector.getInstance(ServiceComponentDesiredStateDAO.class);",
          "1085:     for (final Cluster cluster : clusterMap.values()) {",
          "1086:       ClusterServiceEntityPK clusterServiceEntityPK = new ClusterServiceEntityPK();",
          "1087:       clusterServiceEntityPK.setClusterId(cluster.getClusterId());",
          "1088:       clusterServiceEntityPK.setServiceName(AMBARI_INFRA_OLD_NAME);",
          "1089:       ClusterServiceEntity clusterServiceEntity = clusterServiceDAO.findByPK(clusterServiceEntityPK);",
          "1090:       if (clusterServiceEntity == null)",
          "1091:         continue;",
          "1093:       List<ServiceComponentDesiredStateEntity> serviceComponentDesiredStateEntities =",
          "1094:               new ArrayList<>(clusterServiceEntity.getServiceComponentDesiredStateEntities());",
          "1095:       ServiceDesiredStateEntity serviceDesiredStateEntity = clusterServiceEntity.getServiceDesiredStateEntity();",
          "1096:       List<HostComponentStateEntity> hostComponentStateEntities = hostComponentStateDAO.findByService(AMBARI_INFRA_OLD_NAME);",
          "1097:       List<HostComponentDesiredStateEntity> hostComponentDesiredStateEntities = new ArrayList<>();",
          "1098:       for (ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : clusterServiceEntity.getServiceComponentDesiredStateEntities()) {",
          "1099:         hostComponentDesiredStateEntities.addAll(",
          "1100:                 hostComponentDesiredStateDAO.findByIndex(cluster.getClusterId(), AMBARI_INFRA_OLD_NAME, serviceComponentDesiredStateEntity.getComponentName()));",
          "1101:       }",
          "1103:       for (HostComponentStateEntity hostComponentStateEntity : hostComponentStateEntities) {",
          "1104:         hostComponentStateDAO.remove(hostComponentStateEntity);",
          "1105:         entityManager.detach(hostComponentStateEntity);",
          "1106:         hostComponentStateEntity.setServiceName(AMBARI_INFRA_NEW_NAME);",
          "1107:       }",
          "1109:       for (HostComponentDesiredStateEntity hostComponentDesiredStateEntity : hostComponentDesiredStateEntities) {",
          "1110:         hostComponentDesiredStateDAO.remove(hostComponentDesiredStateEntity);",
          "1111:         entityManager.detach(hostComponentDesiredStateEntity);",
          "1112:         hostComponentDesiredStateEntity.setServiceName(AMBARI_INFRA_NEW_NAME);",
          "1113:       }",
          "1115:       clusterServiceEntity.getServiceComponentDesiredStateEntities().clear();",
          "1116:       for (ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {",
          "1117:         serviceComponentDesiredStateDAO.remove(serviceComponentDesiredStateEntity);",
          "1118:         entityManager.detach(serviceComponentDesiredStateEntity);",
          "1119:         serviceComponentDesiredStateEntity.setServiceName(AMBARI_INFRA_NEW_NAME);",
          "1120:       }",
          "1122:       if (serviceDesiredStateEntity != null) {",
          "1123:         clusterServiceEntity.setServiceDesiredStateEntity(null);",
          "1124:         serviceDesiredStateDAO.remove(serviceDesiredStateEntity);",
          "1125:         entityManager.detach(serviceDesiredStateEntity);",
          "1126:         serviceDesiredStateEntity.setServiceName(AMBARI_INFRA_NEW_NAME);",
          "1127:       }",
          "1129:       clusterServiceDAO.remove(clusterServiceEntity);",
          "1130:       entityManager.detach(clusterServiceEntity);",
          "1132:       clusterServiceEntity.setServiceName(AMBARI_INFRA_NEW_NAME);",
          "1133:       clusterServiceEntity.setServiceDesiredStateEntity(serviceDesiredStateEntity);",
          "1134:       clusterServiceDAO.create(clusterServiceEntity);",
          "1136:       for (ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities)",
          "1137:         serviceComponentDesiredStateDAO.create(serviceComponentDesiredStateEntity);",
          "1138:       for (HostComponentStateEntity hostComponentStateEntity : hostComponentStateEntities)",
          "1139:         hostComponentStateDAO.create(hostComponentStateEntity);",
          "1140:       for (HostComponentDesiredStateEntity hostComponentDesiredStateEntity : hostComponentDesiredStateEntities)",
          "1141:         hostComponentDesiredStateDAO.create(hostComponentDesiredStateEntity);",
          "1142:     }",
          "1145:       TypedQuery<ServiceConfigEntity> serviceConfigUpdate = entityManager.createQuery(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1099:     executeInTransaction(() -> {",
          "1100:       for (final Cluster cluster : clusterMap.values()) {",
          "1102:                 \"UPDATE AlertDefinitionEntity SET serviceName = :newServiceName WHERE serviceName = :oldServiceName AND clusterId = :clusterId\", AlertDefinitionEntity.class);",
          "1103:         alertDefinitionUpdate.setParameter(\"clusterId\", cluster.getClusterId());",
          "1104:         alertDefinitionUpdate.setParameter(\"newServiceName\", AMBARI_INFRA_NEW_NAME);",
          "",
          "[Removed Lines]",
          "1101:         TypedQuery<AlertDefinitionEntity> alertDefinitionUpdate = getEntityManagerProvider().get().createQuery(",
          "",
          "[Added Lines]",
          "1154:         TypedQuery<AlertDefinitionEntity> alertDefinitionUpdate = entityManager.createQuery(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1108:     });",
          "1110:     executeInTransaction(() -> {",
          "1112:       alertGroupUpdate.setParameter(\"newServiceName\", AMBARI_INFRA_NEW_NAME);",
          "1113:       alertGroupUpdate.setParameter(\"oldServiceName\", AMBARI_INFRA_OLD_NAME);",
          "1114:       alertGroupUpdate.executeUpdate();",
          "1115:     });",
          "1117:     executeInTransaction(() -> {",
          "1119:       alertHistoryUpdate.setParameter(\"newServiceName\", AMBARI_INFRA_NEW_NAME);",
          "1120:       alertHistoryUpdate.setParameter(\"oldServiceName\", AMBARI_INFRA_OLD_NAME);",
          "1121:       alertHistoryUpdate.executeUpdate();",
          "1122:     });",
          "1126:     clusters.invalidateAllClusters();",
          "1127:   }",
          "",
          "[Removed Lines]",
          "1111:       TypedQuery<AlertGroupEntity> alertGroupUpdate = getEntityManagerProvider().get().createQuery(\"UPDATE AlertGroupEntity SET serviceName = :newServiceName, groupName = :newServiceName WHERE serviceName = :oldServiceName\", AlertGroupEntity.class);",
          "1118:       TypedQuery<AlertHistoryEntity> alertHistoryUpdate = getEntityManagerProvider().get().createQuery(\"UPDATE AlertHistoryEntity SET serviceName = :newServiceName WHERE serviceName = :oldServiceName\", AlertHistoryEntity.class);",
          "1125:     getEntityManagerProvider().get().getEntityManagerFactory().getCache().evictAll();",
          "",
          "[Added Lines]",
          "1164:       TypedQuery<AlertGroupEntity> alertGroupUpdate = entityManager.createQuery(\"UPDATE AlertGroupEntity SET serviceName = :newServiceName, groupName = :newServiceName WHERE serviceName = :oldServiceName\", AlertGroupEntity.class);",
          "1171:       TypedQuery<AlertHistoryEntity> alertHistoryUpdate = entityManager.createQuery(\"UPDATE AlertHistoryEntity SET serviceName = :newServiceName WHERE serviceName = :oldServiceName\", AlertHistoryEntity.class);",
          "1178:     entityManager.getEntityManagerFactory().getCache().evictAll();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4295bb16c439cbc8fb0e7362f19768dde1477868",
      "candidate_info": {
        "commit_hash": "4295bb16c439cbc8fb0e7362f19768dde1477868",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4295bb16c439cbc8fb0e7362f19768dde1477868",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts"
        ],
        "message": "[AMBARI-24887] [Log Search UI] The component filter dropdown does not select any item (#2599)\n\nChange-Id: I9ef62c6e77e3d89d6548734793dc246a7342e80e",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/cluster-filter/cluster-filter.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:         .filter((state: DataAvailabilityValues) => state === DataAvailabilityValues.AVAILABLE)",
          "129:         .first()",
          "130:         .subscribe(() => {",
          "132:         });",
          "133:     } else {",
          "135:     }",
          "136:   }",
          "",
          "[Removed Lines]",
          "131:           this.filterDropdown.updateSelection(clusterSelection);",
          "134:       this.filterDropdown.updateSelection(null);",
          "",
          "[Added Lines]",
          "131:           this.filterDropdown.writeValue(clusterSelection);",
          "134:       this.filterDropdown.clearSelection();",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/filter-button/filter-button.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import {Component, forwardRef} from '@angular/core';",
          "20: import {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';",
          "21: import {ListItem} from '@app/classes/list-item';",
          "23: import {MenuButtonComponent} from '@app/components/menu-button/menu-button.component';",
          "25: @Component({",
          "",
          "[Removed Lines]",
          "22: import {UtilsService} from '@app/services/utils.service';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: })",
          "37: export class FilterButtonComponent extends MenuButtonComponent implements ControlValueAccessor {",
          "41:   private onChange: (fn: any) => void;",
          "55:     }",
          "56:   }",
          "84:     }",
          "85:   }",
          "87:   writeValue(items: ListItem[]) {",
          "98:   }",
          "100:   registerOnChange(callback: any): void {",
          "",
          "[Removed Lines]",
          "39:   private selectedItems: ListItem[] = [];",
          "43:   constructor(private utils: UtilsService) {",
          "44:     super();",
          "45:   }",
          "47:   get selection(): ListItem[] {",
          "48:     return this.selectedItems;",
          "49:   }",
          "51:   set selection(items: ListItem[]) {",
          "52:     this.selectedItems = items;",
          "53:     if (this.onChange) {",
          "54:       this.onChange(items);",
          "58:   updateSelection(updates: ListItem | ListItem[]): void {",
          "59:     if (updates && (!Array.isArray(updates) || updates.length)) {",
          "60:       const items: ListItem[] = Array.isArray(updates) ? updates : [updates];",
          "61:       if (this.isMultipleChoice) {",
          "62:         items.forEach((item: ListItem) => {",
          "63:           if (this.subItems && this.subItems.length) {",
          "64:             const itemToUpdate: ListItem = this.subItems.find((option: ListItem) => this.utils.isEqual(option.value, item.value));",
          "65:             if (itemToUpdate) {",
          "66:               itemToUpdate.isChecked = item.isChecked;",
          "67:             }",
          "68:           }",
          "69:         });",
          "70:       } else {",
          "71:         const selectedItem: ListItem = items.find((item: ListItem) => item.isChecked);",
          "72:         this.subItems.forEach((item: ListItem) => {",
          "73:           item.isChecked = !!selectedItem && this.utils.isEqual(item.value, selectedItem.value);",
          "74:         });",
          "75:       }",
          "76:     } else {",
          "77:       this.subItems.forEach((item: ListItem) => item.isChecked = false);",
          "78:     }",
          "79:     const checkedItems = this.subItems.filter((option: ListItem): boolean => option.isChecked);",
          "80:     this.selection = checkedItems;",
          "81:     this.selectItem.emit(checkedItems.map((option: ListItem): any => option.value));",
          "82:     if (this.dropdownList) {",
          "83:       this.dropdownList.doItemsCheck();",
          "88:     let listItems: ListItem[] = [];",
          "89:     if (items && items.length) {",
          "90:       listItems = items.map((item: ListItem) => {",
          "91:         return {",
          "92:           ...item,",
          "93:           isChecked: true",
          "94:         };",
          "95:       });",
          "96:     }",
          "97:     this.updateSelection(listItems);",
          "",
          "[Added Lines]",
          "40:   updateSelection(items: ListItem | ListItem[], callOnChange = true): void {",
          "41:     super.updateSelection(items);",
          "42:     if (callOnChange) {",
          "43:       this._onChange(this.selection);",
          "47:   private _onChange(value) {",
          "48:     if (this.onChange) {",
          "49:       this.onChange(value);",
          "54:     this.selection = items;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/log-index-filter/log-index-filter.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   writeValue(filters: HomogeneousObject<LogIndexFilterComponentConfig[]>): void {",
          "194:     this.configs = filters;",
          "196:   }",
          "198:   registerOnChange(callback: any): void {",
          "",
          "[Removed Lines]",
          "195:     this.updateValue();",
          "",
          "[Added Lines]",
          "195:     this.setCurrentConfig();",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import {AuthService} from '@app/services/auth.service';",
          "42: import {MenuButtonComponent} from './menu-button.component';",
          "44: describe('MenuButtonComponent', () => {",
          "45:   let component: MenuButtonComponent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import { UtilsService } from '@app/services/utils.service';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:           useValue: httpClient",
          "94:         },",
          "95:         LogsContainerService,",
          "97:       ],",
          "98:       schemas: [NO_ERRORS_SCHEMA]",
          "99:     })",
          "",
          "[Removed Lines]",
          "96:         AuthService",
          "",
          "[Added Lines]",
          "97:         AuthService,",
          "98:         UtilsService",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/menu-button/menu-button.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import {Component, Input, Output, ViewChild, ElementRef, EventEmitter} from '@angular/core';",
          "20: import {ListItem} from '@app/classes/list-item';",
          "21: import {DropdownListComponent} from '@modules/shared/components/dropdown-list/dropdown-list.component';",
          "23: @Component({",
          "24:   selector: 'menu-button',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import {UtilsService} from '@app/services/utils.service';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   subItems?: ListItem[];",
          "48:   @Input()",
          "51:   @Input()",
          "54:   @Input()",
          "57:   @Input()",
          "58:   additionalLabelComponentSetter?: string;",
          "",
          "[Removed Lines]",
          "49:   isMultipleChoice: boolean = false;",
          "52:   hideCaret: boolean = false;",
          "55:   isRightAlign: boolean = false;",
          "",
          "[Added Lines]",
          "50:   isMultipleChoice = false;",
          "53:   hideCaret = false;",
          "56:   isRightAlign = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   badge: string;",
          "63:   @Input()",
          "66:   @Input()",
          "",
          "[Removed Lines]",
          "64:   caretClass: string = 'fa-caret-down';",
          "67:   useDropDownLocalFilter: boolean = false;",
          "",
          "[Added Lines]",
          "65:   caretClass = 'fa-caret-down';",
          "68:   useDropDownLocalFilter = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:   @Input()",
          "",
          "[Removed Lines]",
          "75:   minLongClickDelay: number = 500;",
          "",
          "[Added Lines]",
          "76:   minLongClickDelay = 500;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "82:   @Input()",
          "85:   @Input()",
          "88:   @Input()",
          "91:   @Output()",
          "92:   buttonClick: EventEmitter<void> = new EventEmitter();",
          "",
          "[Removed Lines]",
          "83:   maxLongClickDelay: number = 0;",
          "86:   isDisabled: boolean = false;",
          "89:   listClass: string = '';",
          "",
          "[Added Lines]",
          "84:   maxLongClickDelay = 0;",
          "87:   isDisabled = false;",
          "90:   listClass = '';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:   get hasSubItems(): boolean {",
          "110:     return Boolean(this.subItems && this.subItems.length);",
          "",
          "[Removed Lines]",
          "107:   private dropdownIsOpen: boolean = false;",
          "",
          "[Added Lines]",
          "108:   private dropdownIsOpen = false;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "114:     return this.hasSubItems && !this.hideCaret;",
          "115:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:   set selection(items: ListItem[] | null) {",
          "119:     const selectedItems = items ? (Array.isArray(items) ? items : [items]) : [];",
          "120:     this.subItems.forEach((subItem: ListItem) => {",
          "121:       const indexInSelection = this.findItemIndexInList(subItem, selectedItems);",
          "122:       subItem.isChecked = indexInSelection > -1;",
          "123:     });",
          "124:     this.refreshDropdownList();",
          "125:   }",
          "126:   get selection(): ListItem[] {",
          "127:     return this.subItems && this.subItems.filter((option: ListItem): boolean => option.isChecked);",
          "128:   }",
          "130:   constructor(private utils: UtilsService) {}",
          "132:   findItemIndexInList(item: ListItem, itemList: ListItem[] = this.subItems): number {",
          "133:     return itemList.findIndex((subItem) => (",
          "134:       item === subItem || this.utils.isEqual(item.value, subItem.value)",
          "135:     ));",
          "136:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224:     }",
          "225:   }",
          "229:     if (this.dropdownList) {",
          "230:       this.dropdownList.doItemsCheck();",
          "231:     }",
          "232:   }",
          "234: }",
          "",
          "[Removed Lines]",
          "227:   updateSelection(item: ListItem | ListItem[]) {",
          "228:     this.selectItem.emit(item);",
          "",
          "[Added Lines]",
          "248:   refreshDropdownList() {",
          "254:   updateSelection(item: ListItem | ListItem[]) {",
          "255:     const changes = Array.isArray(item) ? item : [item];",
          "256:     changes.forEach((change: ListItem): void => {",
          "257:       const subItemIndex = this.findItemIndexInList(change);",
          "258:       if (subItemIndex > -1) {",
          "259:         this.subItems[subItemIndex].isChecked = change.isChecked;",
          "260:       }",
          "261:     });",
          "262:     this.selectItem.emit(item);",
          "263:     this.refreshDropdownList();",
          "264:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/pagination-controls/pagination-controls.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     if (this.isValidValue(newValue)) { // this is the last validation check",
          "55:       this.currentPage = newValue;",
          "56:       this.currentPageChange.emit(newValue);",
          "60:     } else {",
          "61:       throw new Error(`Invalid value ${newValue}. The currentPage should be between 0 and ${this.pagesCount}.`);",
          "62:     }",
          "",
          "[Removed Lines]",
          "57:       if (this.onChange) {",
          "58:         this.onChange(newValue);",
          "59:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   setFirstPage(): void {",
          "79:   }",
          "84:   setLastPage(): void {",
          "86:   }",
          "",
          "[Removed Lines]",
          "78:     this.value = 0;",
          "85:     this.value = this.pagesCount - 1;",
          "",
          "[Added Lines]",
          "75:     this._setValueByUserInput(0);",
          "82:     this._setValueByUserInput(this.pagesCount - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   setPreviousPage(): number {",
          "93:     if (this.hasPreviousPage()) {",
          "95:     }",
          "96:     return this.value;",
          "97:   }",
          "",
          "[Removed Lines]",
          "94:       this.value -= 1;",
          "",
          "[Added Lines]",
          "91:       this._setValueByUserInput(this.value - 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:   setNextPage(): number {",
          "106:     }",
          "107:     return this.value;",
          "108:   }",
          "",
          "[Removed Lines]",
          "104:     if (this.hasNextPage()){",
          "105:       this.value += 1;",
          "",
          "[Added Lines]",
          "101:     if (this.hasNextPage()) {",
          "102:       this._setValueByUserInput(this.value + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:     return this.pagesCount > 0 && this.value > 0;",
          "124:   }",
          "126:   writeValue(value: number) {",
          "127:     this.value = value;",
          "128:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   private _setValueByUserInput(value) {",
          "124:     this.value = value;",
          "125:     this._onChange(this.value);",
          "126:   }",
          "128:   private _onChange(value) {",
          "129:     if (this.onChange) {",
          "130:       this.onChange(value);",
          "131:     }",
          "132:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   @Input()",
          "102:   @ViewChild('parameterInput')",
          "103:   parameterInputRef: ElementRef;",
          "",
          "[Removed Lines]",
          "100:   updateValueImmediately: boolean = true;",
          "",
          "[Added Lines]",
          "100:   updateValueImmediately = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:   parameters: SearchBoxParameterProcessed[] = [];",
          "126:   constructor(private utils: UtilsService) {}",
          "128:   ngOnInit(): void {",
          "129:     this.parameterInput = this.parameterInputRef.nativeElement;",
          "130:     this.valueInput = this.valueInputRef.nativeElement;",
          "140:   }",
          "142:   ngOnDestroy(): void {",
          "144:   }",
          "",
          "[Removed Lines]",
          "124:   private subscriptions: Subscription[] = [];",
          "131:     this.subscriptions.push(",
          "132:       this.parameterNameChangeSubject.subscribe(this.onParameterNameChange)",
          "133:     );",
          "134:     this.subscriptions.push(",
          "135:       this.parameterAddSubject.subscribe(this.onParameterAdd)",
          "136:     );",
          "137:     this.subscriptions.push(",
          "138:       this.updateValueSubject.subscribe(this.updateValue)",
          "139:     );",
          "143:     this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());",
          "",
          "[Added Lines]",
          "124:   private onChange;",
          "126:   private destroyed$ = new Subject();",
          "133:     this.parameterNameChangeSubject.takeUntil(this.destroyed$).subscribe(this.onParameterNameChange);",
          "134:     this.parameterAddSubject.takeUntil(this.destroyed$).subscribe(this.onParameterAdd);",
          "135:     this.updateValueSubject.takeUntil(this.destroyed$).subscribe(this.updateValue);",
          "139:     this.destroyed$.next(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:       this.itemsOptions[this.activeItem.value] : [];",
          "153:   }",
          "157:   @HostListener('click')",
          "158:   private onRootClick(): void {",
          "159:     if (!this.isActive) {",
          "",
          "[Removed Lines]",
          "155:   private onChange: (fn: any) => void;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "310:   updateValue = (): void => {",
          "311:     this.currentValue = '';",
          "312:     if (this.onChange) {",
          "314:     }",
          "315:   }",
          "",
          "[Removed Lines]",
          "313:       this.onChange(this.parameters.slice());",
          "",
          "[Added Lines]",
          "307:       this.onChange([...this.parameters]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "331:   }",
          "333:   writeValue(parameters: SearchBoxParameterProcessed[] = []): void {",
          "336:   }",
          "338:   registerOnChange(callback: any): void {",
          "",
          "[Removed Lines]",
          "334:     this.parameters = parameters.slice();",
          "335:     this.updateValueSubject.next();",
          "",
          "[Added Lines]",
          "328:     this.currentValue = '';",
          "329:     this.parameters = [...parameters];",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/time-range-picker/time-range-picker.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   set selection(newValue: TimeUnitListItem) {",
          "63:     this.timeRange = newValue;",
          "67:     this.setEndTime(this.logsFilteringUtilsService.getEndTimeMomentFromTimeUnitListItem(newValue, this.logsContainer.timeZone));",
          "68:     this.setStartTime(this.logsFilteringUtilsService.getStartTimeMomentFromTimeUnitListItem(",
          "69:       newValue, this.endTime, this.logsContainer.timeZone",
          "",
          "[Removed Lines]",
          "64:     if (this.onChange) {",
          "65:       this.onChange(newValue);",
          "66:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   setTimeRange(value: any, label: string): void {",
          "82:     this.selection = {label, value};",
          "83:   }",
          "85:   setCustomTimeRange(): void {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     this._onChange(this.selection);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:         end: this.endTime",
          "92:       }",
          "93:     };",
          "94:   }",
          "96:   writeValue(selection: TimeUnitListItem): void {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     this._onChange(this.selection);",
          "93:   }",
          "95:   private _onChange(value: TimeUnitListItem): void {",
          "96:     if (this.onChange) {",
          "97:       this.onChange(value);",
          "98:     }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   constructor(protected utils: UtilsService) {}",
          "93:     if (updates && (!Array.isArray(updates) || updates.length)) {",
          "94:       const items: ListItem[] = Array.isArray(updates) ? updates : [updates];",
          "95:       if (this.isMultipleChoice) {",
          "",
          "[Removed Lines]",
          "92:   updateSelection(updates: ListItem | ListItem[]): void {",
          "",
          "[Added Lines]",
          "92:   clearSelection(silent: boolean = false) {",
          "93:     let hasChange = false;",
          "94:     this.options.forEach((item: ListItem) => {",
          "95:       hasChange = hasChange || item.isChecked;",
          "96:       item.isChecked = false;",
          "97:     });",
          "98:     if (!silent && hasChange) {",
          "99:       this.selectItem.emit(this.isMultipleChoice ? [] : undefined);",
          "100:     }",
          "101:   }",
          "103:   updateSelection(updates: ListItem | ListItem[], callOnChange: boolean = true): boolean {",
          "104:     let hasChange = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:           if (this.options && this.options.length) {",
          "98:             const itemToUpdate: ListItem = this.options.find((option: ListItem) => this.utils.isEqual(option.value, item.value));",
          "99:             if (itemToUpdate) {",
          "100:               itemToUpdate.isChecked = item.isChecked;",
          "101:             }",
          "102:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:               hasChange = hasChange || itemToUpdate.isChecked !== item.isChecked;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:       } else {",
          "105:         const selectedItem: ListItem = Array.isArray(updates) ? updates[0] : updates;",
          "106:         this.options.forEach((item: ListItem) => {",
          "107:           item.isChecked = this.utils.isEqual(item.value, selectedItem.value);",
          "108:         });",
          "109:       }",
          "110:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:           const checkedStateBefore = item.isChecked;",
          "122:           hasChange = hasChange || checkedStateBefore !== item.isChecked;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:     }",
          "113:     const checkedItems = this.options.filter((option: ListItem): boolean => option.isChecked);",
          "114:     this.selection = checkedItems;",
          "117:   }",
          "119: }",
          "",
          "[Removed Lines]",
          "115:     const selectedValues = checkedItems.map((option: ListItem): any => option.value);",
          "116:     this.selectItem.emit(this.isMultipleChoice ? selectedValues : selectedValues.shift());",
          "",
          "[Added Lines]",
          "130:     if (hasChange) {",
          "131:       const selectedValues = checkedItems.map((option: ListItem): any => option.value);",
          "132:       this.selectItem.emit(this.isMultipleChoice ? selectedValues : selectedValues.shift());",
          "133:     }",
          "134:     return hasChange;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   Component, OnChanges, AfterViewChecked, OnDestroy, SimpleChanges, Input, Output, EventEmitter,",
          "21:   ViewChildren, ViewContainerRef, QueryList, ChangeDetectorRef, ElementRef, ViewChild, OnInit",
          "22: } from '@angular/core';",
          "24: import {ListItem} from '@app/classes/list-item';",
          "25: import {ComponentGeneratorService} from '@app/services/component-generator.service';",
          "27: @Component({",
          "28:   selector: 'ul[data-component=\"dropdown-list\"]',",
          "",
          "[Removed Lines]",
          "23: import {Subscription} from 'rxjs/Subscription';",
          "",
          "[Added Lines]",
          "25: import { Subject } from 'rxjs/Subject';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   private filterRegExp: RegExp;",
          "82:   constructor(",
          "83:     private componentGenerator: ComponentGeneratorService,",
          "",
          "[Removed Lines]",
          "80:   private subscriptions: Subscription[] = [];",
          "",
          "[Added Lines]",
          "80:   private destroyed$ = new Subject();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     if (this.items.some((item: ListItem) => item.isChecked)) {",
          "92:       this.selectedItemChange.emit(this.items);",
          "93:     }",
          "97:   }",
          "99:   ngOnDestroy() {",
          "101:   }",
          "103:   ngOnChanges(changes: SimpleChanges): void {",
          "",
          "[Removed Lines]",
          "94:     this.subscriptions.push(",
          "95:       this.selectedItemChange.subscribe(this.separateSelections)",
          "96:     );",
          "100:     this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());",
          "",
          "[Added Lines]",
          "94:     this.selectedItemChange.takeUntil(this.destroyed$).subscribe(this.separateSelections)",
          "98:     this.destroyed$.next(true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:   unSelectAll() {",
          "183:     this.items.forEach((item: ListItem) => {",
          "184:       item.isChecked = false;",
          "188:     });",
          "189:     this.selectedItemChange.emit(this.items);",
          "190:   }",
          "",
          "[Removed Lines]",
          "185:       if (item.onSelect) {",
          "186:         item.onSelect(...this.actionArguments);",
          "187:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/filter-dropdown/filter-dropdown.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: })",
          "35: export class FilterDropdownComponent extends DropdownButtonComponent implements ControlValueAccessor {",
          "39:   get selection(): ListItem[] {",
          "40:     return this.selectedItems;",
          "",
          "[Removed Lines]",
          "37:   private onChange: (fn: any) => void;",
          "",
          "[Added Lines]",
          "37:   private onChange;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         option.isChecked = Boolean(selectionItem);",
          "49:       });",
          "50:     }",
          "51:     if (this.onChange) {",
          "53:     }",
          "54:   }",
          "56:   writeValue(items: ListItem[]) {",
          "",
          "[Removed Lines]",
          "52:       this.onChange(items);",
          "",
          "[Added Lines]",
          "51:   }",
          "53:   private _onChange(value) {",
          "55:       this.onChange(value);",
          "56:     }",
          "57:   }",
          "59:   updateSelection(updates: ListItem | ListItem[], callOnChange: boolean = true): boolean {",
          "60:     const hasChange = super.updateSelection(updates);",
          "61:     if (hasChange && callOnChange) {",
          "62:       this._onChange(this.selection);",
          "64:     return hasChange;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88e7148b192a37a131b0a11343b06de8cb5d8095",
      "candidate_info": {
        "commit_hash": "88e7148b192a37a131b0a11343b06de8cb5d8095",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/88e7148b192a37a131b0a11343b06de8cb5d8095",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py",
          "ambari-agent/src/main/python/ambari_agent/Constants.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "ambari-agent/src/main/python/ambari_agent/models/commands.py",
          "ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java"
        ],
        "message": "AMBARI-24416. Component Versions Are Not Reported On Initial Status Commands Anymore (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py||ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py",
          "ambari-agent/src/main/python/ambari_agent/Constants.py||ambari-agent/src/main/python/ambari_agent/Constants.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py||ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "ambari-agent/src/main/python/ambari_agent/models/commands.py||ambari-agent/src/main/python/ambari_agent/models/commands.py",
          "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py||ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py -> ambari-agent/src/main/python/ambari_agent/ComponentVersionReporter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "19: import logging",
          "20: import threading",
          "22: from ambari_agent import Constants",
          "23: from collections import defaultdict",
          "25: from ambari_agent.models.commands import AgentCommand",
          "27: logger = logging.getLogger(__name__)",
          "29: class ComponentVersionReporter(threading.Thread):",
          "30:   def __init__(self, initializer_module):",
          "31:     self.initializer_module = initializer_module",
          "32:     self.topology_cache = initializer_module.topology_cache",
          "33:     self.customServiceOrchestrator = initializer_module.customServiceOrchestrator",
          "34:     self.server_responses_listener = initializer_module.server_responses_listener",
          "35:     threading.Thread.__init__(self)",
          "37:   def run(self):",
          "38:     \"\"\"",
          "39:     Get version of all components by running get_version execution command.",
          "40:     \"\"\"",
          "41:     try:",
          "42:       cluster_reports = defaultdict(lambda:[])",
          "44:       for cluster_id in self.topology_cache.get_cluster_ids():",
          "45:         topology_cache = self.topology_cache[cluster_id]",
          "47:         if 'components' not in topology_cache:",
          "48:           continue",
          "50:         current_host_id = self.topology_cache.get_current_host_id(cluster_id)",
          "52:         if current_host_id is None:",
          "53:           continue",
          "55:         cluster_components = topology_cache.components",
          "56:         for component_dict in cluster_components:",
          "57:           # check if component is installed on current host",
          "58:           if current_host_id not in component_dict.hostIds:",
          "59:             continue",
          "61:           service_name = component_dict.serviceName",
          "62:           component_name = component_dict.componentName",
          "64:           result = self.check_component_version(cluster_id, service_name, component_name)",
          "66:           if result:",
          "67:             cluster_reports[cluster_id].append(result)",
          "69:       self.send_updates_to_server(cluster_reports)",
          "70:     except:",
          "71:       logger.exception(\"Exception in ComponentVersionReporter\")",
          "73:   def check_component_version(self, cluster_id, service_name, component_name):",
          "74:     \"\"\"",
          "75:     Returns components version",
          "76:     \"\"\"",
          "77:     # if not a component",
          "78:     if self.topology_cache.get_component_info_by_key(cluster_id, service_name, component_name) is None:",
          "79:       return None",
          "81:     command_dict = {",
          "82:       'serviceName': service_name,",
          "83:       'role': component_name,",
          "84:       'clusterId': cluster_id,",
          "85:       'commandType': AgentCommand.get_version,",
          "86:     }",
          "88:     version_result = self.customServiceOrchestrator.requestComponentStatus(command_dict, command_name=AgentCommand.get_version)",
          "90:     if version_result['exitcode'] or not 'structuredOut' in version_result or not 'version' in version_result['structuredOut']:",
          "91:       logger.error(\"Could not get version for component {0} of {1} service cluster_id={2}. Command returned: {3}\".format(component_name, service_name, cluster_id, version_result))",
          "92:       return None",
          "94:     # TODO: check if no strout or version if not there",
          "96:     result = {",
          "97:       'serviceName': service_name,",
          "98:       'componentName': component_name,",
          "99:       'version': version_result['structuredOut']['version'],",
          "100:       'clusterId': cluster_id,",
          "101:     }",
          "103:     return result",
          "105:   def send_updates_to_server(self, cluster_reports):",
          "106:     if not cluster_reports or not self.initializer_module.is_registered:",
          "107:       return",
          "109:     self.initializer_module.connection.send(message={'clusters': cluster_reports}, destination=Constants.COMPONENT_VERSION_REPORTS_ENDPOINT)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/Constants.py||ambari-agent/src/main/python/ambari_agent/Constants.py": [
          "File: ambari-agent/src/main/python/ambari_agent/Constants.py -> ambari-agent/src/main/python/ambari_agent/Constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: HOST_LEVEL_PARAMS_TOPIC_ENPOINT = '/agents/host_level_params'",
          "39: ALERTS_DEFINITIONS_REQUEST_ENDPOINT = '/agents/alert_definitions'",
          "40: COMPONENT_STATUS_REPORTS_ENDPOINT = '/reports/component_status'",
          "41: COMMANDS_STATUS_REPORTS_ENDPOINT = '/reports/commands_status'",
          "42: HOST_STATUS_REPORTS_ENDPOINT = '/reports/host_status'",
          "43: ALERTS_STATUS_REPORTS_ENDPOINT = '/reports/alerts_status'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: COMPONENT_VERSION_REPORTS_ENDPOINT = '/reports/component_version'",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py -> ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:                                                'status_command_stdout_{0}.txt')",
          "94:     self.status_commands_stderr = os.path.join(self.tmp_dir,",
          "95:                                                'status_command_stderr_{0}.txt')",
          "97:     # Construct the hadoop credential lib JARs path",
          "98:     self.credential_shell_lib_path = os.path.join(self.config.get('security', 'credential_lib_dir',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     self.status_structured_out = os.path.join(self.tmp_dir,",
          "97:                                                'status_structured-out-{0}.json')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:     return cmd_result",
          "309:   def runCommand(self, command_header, tmpoutfile, tmperrfile, forced_command_name=None,",
          "311:     \"\"\"",
          "312:     forced_command_name may be specified manually. In this case, value, defined at",
          "313:     command json, is ignored.",
          "",
          "[Removed Lines]",
          "310:                  override_output_files=True, retry=False, is_status_command=False):",
          "",
          "[Added Lines]",
          "312:                  override_output_files=True, retry=False, is_status_command=False, tmpstrucoutfile=None):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:         script_path = self.resolve_script_path(base_dir, script)",
          "349:         script_tuple = (script_path, base_dir)",
          "353:       # We don't support anything else yet",
          "354:       if script_type.upper() != self.SCRIPT_TYPE_PYTHON:",
          "",
          "[Removed Lines]",
          "351:       tmpstrucoutfile = os.path.join(self.tmp_dir, \"structured-out-{0}.json\".format(task_id))",
          "",
          "[Added Lines]",
          "353:       if not tmpstrucoutfile:",
          "354:         tmpstrucoutfile = os.path.join(self.tmp_dir, \"structured-out-{0}.json\".format(task_id))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:         else:",
          "375:           logger.info(\"Skipping generation of jceks files as this is a retry of the command\")",
          "378:       hooks = self.hooks_orchestrator.resolve_hooks(command, command_name)",
          "379:       \"\"\":type hooks ambari_agent.CommandHooksOrchestrator.ResolvedHooks\"\"\"",
          "",
          "[Removed Lines]",
          "377:       json_path = self.dump_command_to_json(command, retry)",
          "",
          "[Added Lines]",
          "380:       json_path = self.dump_command_to_json(command, retry, is_status_command)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "509:     return command",
          "512:     \"\"\"",
          "513:      Component status is determined by exit code, returned by runCommand().",
          "514:      Exit code 0 means that component is running and any other exit code means that",
          "",
          "[Removed Lines]",
          "511:   def requestComponentStatus(self, command_header):",
          "",
          "[Added Lines]",
          "514:   def requestComponentStatus(self, command_header, command_name=\"STATUS\"):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521:     # make sure status commands that run in parallel don't use the same files",
          "522:     status_commands_stdout = self.status_commands_stdout.format(uuid.uuid4())",
          "523:     status_commands_stderr = self.status_commands_stderr.format(uuid.uuid4())",
          "525:     try:",
          "526:       res = self.runCommand(command_header, status_commands_stdout,",
          "529:     finally:",
          "530:       try:",
          "531:         os.unlink(status_commands_stdout)",
          "",
          "[Removed Lines]",
          "527:                             status_commands_stderr, self.COMMAND_NAME_STATUS,",
          "528:                             override_output_files=override_output_files, is_status_command=True)",
          "",
          "[Added Lines]",
          "527:     status_structured_out = self.status_structured_out.format(uuid.uuid4())",
          "531:                             status_commands_stderr, command_name,",
          "532:                             override_output_files=override_output_files, is_status_command=True,",
          "533:                             tmpstrucoutfile=status_structured_out)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "545:       raise AgentException(message)",
          "546:     return path",
          "549:     \"\"\"",
          "550:     Converts command to json file and returns file path",
          "551:     \"\"\"",
          "552:     # Now, dump the json file",
          "553:     command_type = command['commandType']",
          "556:       # make sure status commands that run in parallel don't use the same files",
          "557:       file_path = os.path.join(self.tmp_dir, \"status_command_{0}.json\".format(uuid.uuid4()))",
          "558:     else:",
          "",
          "[Removed Lines]",
          "548:   def dump_command_to_json(self, command, retry=False):",
          "555:     if command_type == AgentCommand.status:",
          "",
          "[Added Lines]",
          "553:   def dump_command_to_json(self, command, retry=False, is_status_command=False):",
          "560:     if is_status_command:",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py||ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py": [
          "File: ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py -> ambari-agent/src/main/python/ambari_agent/HeartbeatThread.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from ambari_agent.Register import Register",
          "28: from ambari_agent.Utils import BlockingDictionary",
          "29: from ambari_agent.Utils import Utils",
          "30: from ambari_agent.listeners.ServerResponsesListener import ServerResponsesListener",
          "31: from ambari_agent.listeners.TopologyEventListener import TopologyEventListener",
          "32: from ambari_agent.listeners.ConfigurationEventListener import ConfigurationEventListener",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from ambari_agent.ComponentVersionReporter import ComponentVersionReporter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     self.subscribe_to_topics(Constants.POST_REGISTRATION_TOPICS_TO_SUBSCRIBE)",
          "148:     self.run_post_registration_actions()",
          "149:     self.initializer_module.is_registered = True",
          "150:     # now when registration is done we can expose connection to other threads.",
          "151:     self.initializer_module._connection = self.connection",
          "153:   def run_post_registration_actions(self):",
          "154:     for post_registration_action in self.post_registration_actions:",
          "155:       post_registration_action()",
          "157:   def unregister(self):",
          "158:     \"\"\"",
          "159:     Disconnect and remove connection object from initializer_module so other threads cannot use it",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     self.report_components_initial_versions()",
          "161:   def report_components_initial_versions(self):",
          "162:     ComponentVersionReporter(self.initializer_module).start()",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/models/commands.py||ambari-agent/src/main/python/ambari_agent/models/commands.py": [
          "File: ambari-agent/src/main/python/ambari_agent/models/commands.py -> ambari-agent/src/main/python/ambari_agent/models/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: class AgentCommand(object):",
          "21:   status = \"STATUS_COMMAND\"",
          "22:   execution = \"EXECUTION_COMMAND\"",
          "23:   auto_execution = \"AUTO_EXECUTION_COMMAND\"",
          "24:   background_execution = \"BACKGROUND_EXECUTION_COMMAND\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:   get_version = \"GET_VERSION\"",
          "",
          "---------------"
        ],
        "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/script/script.py -> ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     stack_version_unformatted = str(default(\"/clusterLevelParams/stack_version\", \"\"))",
          "261:     stack_version_formatted = format_stack_version(stack_version_unformatted)",
          "262:     if stack_version_formatted and check_stack_feature(StackFeature.ROLLING_UPGRADE, stack_version_formatted):",
          "267:       else:",
          "268:         # Populate version only on base commands",
          "269:         return command_name.lower() == \"start\" or command_name.lower() == \"install\" or command_name.lower() == \"restart\"",
          "",
          "[Removed Lines]",
          "263:       if command_name.lower() == \"status\":",
          "264:         request_version = default(\"/commandParams/request_version\", None)",
          "265:         if request_version is not None:",
          "266:           return True",
          "",
          "[Added Lines]",
          "263:       if command_name.lower() == \"get_version\":",
          "264:         return True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:       if self.should_expose_component_version(self.command_name):",
          "363:         self.save_component_version_to_structured_out(self.command_name)",
          "365:   def execute_prefix_function(self, command_name, afix, env):",
          "366:     \"\"\"",
          "367:     Execute action afix (prefix or suffix) based on command_name and afix type",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:   def get_version(self, env):",
          "364:     pass",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.agent;",
          "32:     this.hostName = hostName;",
          "36:   }",
          "38:   public String getHostName() {",
          "39:     return hostName;",
          "40:   }",
          "48:   }",
          "53: }",
          "",
          "[Removed Lines]",
          "20: import java.util.List;",
          "22: import org.apache.ambari.server.agent.stomp.dto.HostStatusReport;",
          "24: public class AgentReport {",
          "26:   private String hostName;",
          "27:   private List<ComponentStatus> componentStatuses;",
          "28:   private List<CommandReport> reports;",
          "29:   private HostStatusReport hostStatusReport;",
          "31:   public AgentReport(String hostName, List<ComponentStatus> componentStatuses, List<CommandReport> reports, HostStatusReport hostStatusReport) {",
          "33:     this.componentStatuses = componentStatuses;",
          "34:     this.reports = reports;",
          "35:     this.hostStatusReport = hostStatusReport;",
          "42:   public List<ComponentStatus> getComponentStatuses() {",
          "43:     return componentStatuses;",
          "44:   }",
          "46:   public List<CommandReport> getCommandReports() {",
          "47:     return reports;",
          "50:   public HostStatusReport getHostStatusReport() {",
          "51:     return hostStatusReport;",
          "52:   }",
          "",
          "[Added Lines]",
          "20: import org.apache.ambari.server.AmbariException;",
          "22: public abstract class AgentReport<R> {",
          "24:   private final String hostName;",
          "25:   private final R report;",
          "27:   public AgentReport(String hostName, R report) {",
          "29:     this.report = report;",
          "36:   public final void process() throws AmbariException {",
          "37:     process(report, hostName);",
          "40:   protected abstract void process(R report, String hostName) throws AmbariException;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     executors.get(executorNumber).execute(new AgentReportProcessingTask(agentReport));",
          "49:   }",
          "54:   @Inject",
          "55:   private UnitOfWork unitOfWork;",
          "",
          "[Removed Lines]",
          "51:   @Inject",
          "52:   private HeartBeatHandler hh;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:     public void run() {",
          "78:       try {",
          "79:         unitOfWork.begin();",
          "81:         try {",
          "91:         } catch (AmbariException e) {",
          "92:           LOG.error(\"Error processing agent reports\", e);",
          "93:         }",
          "",
          "[Removed Lines]",
          "80:         String hostName = agentReport.getHostName();",
          "84:           if (agentReport.getCommandReports() != null) {",
          "85:             hh.handleCommandReportStatus(agentReport.getCommandReports(), hostName);",
          "86:           } else if (agentReport.getComponentStatuses() != null) {",
          "87:             hh.handleComponentReportStatus(agentReport.getComponentStatuses(), hostName);",
          "88:           } else if (agentReport.getHostStatusReport() != null) {",
          "89:             hh.handleHostReportStatus(agentReport.getHostStatusReport(), hostName);",
          "90:           }",
          "",
          "[Added Lines]",
          "78:           agentReport.process();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/CommandStatusAgentReport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.agent;",
          "20: import java.util.List;",
          "22: import org.apache.ambari.server.AmbariException;",
          "24: public class CommandStatusAgentReport extends AgentReport<List<CommandReport>> {",
          "25:   private final HeartBeatHandler hh;",
          "27:   public CommandStatusAgentReport(HeartBeatHandler hh, String hostName, List<CommandReport> commandReports) {",
          "28:     super(hostName, commandReports);",
          "29:     this.hh = hh;",
          "30:   }",
          "32:   @Override",
          "33:   protected void process(List<CommandReport> report, String hostName) throws AmbariException {",
          "34:     hh.handleCommandReportStatus(report, hostName);",
          "35:   }",
          "36: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentStatusAgentReport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.agent;",
          "20: import java.util.List;",
          "22: import org.apache.ambari.server.AmbariException;",
          "24: public class ComponentStatusAgentReport extends AgentReport<List<ComponentStatus>> {",
          "25:   private final HeartBeatHandler hh;",
          "27:   public ComponentStatusAgentReport(HeartBeatHandler hh, String hostName, List<ComponentStatus> componentStatuses) {",
          "28:     super(hostName, componentStatuses);",
          "29:     this.hh = hh;",
          "30:   }",
          "32:   @Override",
          "33:   protected void process(List<ComponentStatus> report, String hostName) throws AmbariException {",
          "34:     hh.handleComponentReportStatus(report, hostName);",
          "35:   }",
          "36: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/ComponentVersionAgentReport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.agent;",
          "20: import org.apache.ambari.server.AmbariException;",
          "21: import org.apache.ambari.server.agent.stomp.dto.ComponentVersionReports;",
          "23: public class ComponentVersionAgentReport extends AgentReport<ComponentVersionReports> {",
          "24:   private final HeartBeatHandler hh;",
          "26:   public ComponentVersionAgentReport(HeartBeatHandler hh, String hostName,",
          "27:                                      ComponentVersionReports componentVersionReports) {",
          "28:     super(hostName, componentVersionReports);",
          "29:     this.hh = hh;",
          "30:   }",
          "32:   @Override",
          "33:   protected void process(ComponentVersionReports report, String hostName) throws AmbariException {",
          "34:     hh.handleComponentVersionReports(report, hostName);",
          "35:   }",
          "36: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.ambari.server.AmbariException;",
          "27: import org.apache.ambari.server.HostNotFoundException;",
          "28: import org.apache.ambari.server.actionmanager.ActionManager;",
          "29: import org.apache.ambari.server.agent.stomp.dto.HostStatusReport;",
          "30: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "31: import org.apache.ambari.server.configuration.Configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.ambari.server.agent.stomp.dto.ComponentVersionReports;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:     }",
          "257:   }",
          "259:   protected void processRecoveryReport(RecoveryReport recoveryReport, String hostname) throws AmbariException {",
          "260:     LOG.debug(\"Received recovery report: {}\", recoveryReport);",
          "261:     Host host = clusterFsm.getHost(hostname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:   public void handleComponentVersionReports(ComponentVersionReports componentVersionReports, String hostname) throws AmbariException {",
          "261:     heartbeatProcessor.processVersionReports(componentVersionReports, hostname);",
          "262:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "42: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "43: import org.apache.ambari.server.agent.ExecutionCommand.KeyNames;",
          "44: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "45: import org.apache.ambari.server.controller.MaintenanceStateHelper;",
          "46: import org.apache.ambari.server.events.ActionFinalReportReceivedEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.ambari.server.agent.stomp.dto.ComponentVersionReport;",
          "45: import org.apache.ambari.server.agent.stomp.dto.ComponentVersionReports;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:     processStatusReports(heartbeat.getComponentStatus(), heartbeat.getHostname());",
          "550:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:   public void processVersionReports(ComponentVersionReports versionReports, String hostname) throws AmbariException {",
          "559:     Set<Cluster> clusters = clusterFsm.getClustersForHost(hostname);",
          "560:     for (Cluster cl : clusters) {",
          "561:       for (Map.Entry<String, List<ComponentVersionReport>> status : versionReports",
          "562:           .getComponentVersionReports().entrySet()) {",
          "563:         if (Long.valueOf(status.getKey()).equals(cl.getClusterId())) {",
          "564:           for (ComponentVersionReport versionReport : status.getValue()) {",
          "565:             try {",
          "566:               Service svc = cl.getService(versionReport.getServiceName());",
          "568:               String componentName = versionReport.getComponentName();",
          "569:               if (svc.getServiceComponents().containsKey(componentName)) {",
          "570:                 ServiceComponent svcComp = svc.getServiceComponent(",
          "571:                     componentName);",
          "572:                 ServiceComponentHost scHost = svcComp.getServiceComponentHost(",
          "573:                     hostname);",
          "575:                 String version = versionReport.getVersion();",
          "577:                 HostComponentVersionAdvertisedEvent event = new HostComponentVersionAdvertisedEvent(cl,",
          "578:                     scHost, version);",
          "579:                 versionEventPublisher.publish(event);",
          "580:               }",
          "581:             } catch (ServiceNotFoundException e) {",
          "582:               LOG.warn(\"Received a version report for a non-initialized\"",
          "583:                   + \" service\"",
          "584:                   + \", clusterId=\" + versionReport.getClusterId()",
          "585:                   + \", serviceName=\" + versionReport.getServiceName());",
          "586:               continue;",
          "587:             } catch (ServiceComponentNotFoundException e) {",
          "588:               LOG.warn(\"Received a version report for a non-initialized\"",
          "589:                   + \" servicecomponent\"",
          "590:                   + \", clusterId=\" + versionReport.getClusterId()",
          "591:                   + \", serviceName=\" + versionReport.getServiceName()",
          "592:                   + \", componentName=\" + versionReport.getComponentName());",
          "593:               continue;",
          "594:             } catch (ServiceComponentHostNotFoundException e) {",
          "595:               LOG.warn(\"Received a version report for a non-initialized\"",
          "596:                   + \" hostcomponent\"",
          "597:                   + \", clusterId=\" + versionReport.getClusterId()",
          "598:                   + \", serviceName=\" + versionReport.getServiceName()",
          "599:                   + \", componentName=\" + versionReport.getComponentName()",
          "600:                   + \", hostname=\" + hostname);",
          "601:               continue;",
          "602:             } catch (RuntimeException e) {",
          "603:               LOG.warn(\"Received a version report with invalid payload\"",
          "604:                   + \" service\"",
          "605:                   + \", clusterId=\" + versionReport.getClusterId()",
          "606:                   + \", serviceName=\" + versionReport.getServiceName()",
          "607:                   + \", componentName=\" + versionReport.getComponentName()",
          "608:                   + \", hostname=\" + hostname",
          "609:                   + \", error=\" + e.getMessage());",
          "610:               continue;",
          "611:             }",
          "612:           }",
          "613:         }",
          "614:       }",
          "615:     }",
          "616:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:                     List<Map<String, String>> list = (List<Map<String, String>>) extra.get(\"processes\");",
          "597:                     scHost.setProcesses(list);",
          "598:                   }",
          "606:                 } catch (Exception e) {",
          "607:                   LOG.error(\"Could not access extra JSON for \" +",
          "608:                       scHost.getServiceComponentName() + \" from \" +",
          "",
          "[Removed Lines]",
          "599:                   if (extra.containsKey(\"version\")) {",
          "600:                     String version = extra.get(\"version\").toString();",
          "602:                     HostComponentVersionAdvertisedEvent event = new HostComponentVersionAdvertisedEvent(cl, scHost, version);",
          "603:                     versionEventPublisher.publish(event);",
          "604:                   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/HostStatusAgentReport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.agent;",
          "20: import org.apache.ambari.server.AmbariException;",
          "21: import org.apache.ambari.server.agent.stomp.dto.HostStatusReport;",
          "23: public class HostStatusAgentReport extends AgentReport<HostStatusReport> {",
          "24:   private final HeartBeatHandler hh;",
          "26:   public HostStatusAgentReport(HeartBeatHandler hh, String hostName, HostStatusReport hostStatusReport) {",
          "27:     super(hostName, hostStatusReport);",
          "28:     this.hh = hh;",
          "29:   }",
          "31:   @Override",
          "32:   protected void process(HostStatusReport report, String hostName) throws AmbariException {",
          "33:     hh.handleHostReportStatus(report, hostName);",
          "34:   }",
          "35: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.ambari.server.AmbariException;",
          "29: import org.apache.ambari.server.HostNotRegisteredException;",
          "31: import org.apache.ambari.server.agent.AgentReportsProcessor;",
          "32: import org.apache.ambari.server.agent.AgentSessionManager;",
          "33: import org.apache.ambari.server.agent.CommandReport;",
          "34: import org.apache.ambari.server.agent.ComponentStatus;",
          "35: import org.apache.ambari.server.agent.HeartBeatHandler;",
          "36: import org.apache.ambari.server.agent.stomp.dto.AckReport;",
          "37: import org.apache.ambari.server.agent.stomp.dto.CommandStatusReports;",
          "38: import org.apache.ambari.server.agent.stomp.dto.ComponentStatusReport;",
          "39: import org.apache.ambari.server.agent.stomp.dto.ComponentStatusReports;",
          "40: import org.apache.ambari.server.agent.stomp.dto.HostStatusReport;",
          "41: import org.apache.ambari.server.events.DefaultMessageEmitter;",
          "42: import org.apache.ambari.server.state.Alert;",
          "",
          "[Removed Lines]",
          "30: import org.apache.ambari.server.agent.AgentReport;",
          "",
          "[Added Lines]",
          "33: import org.apache.ambari.server.agent.CommandStatusAgentReport;",
          "35: import org.apache.ambari.server.agent.ComponentStatusAgentReport;",
          "36: import org.apache.ambari.server.agent.ComponentVersionAgentReport;",
          "38: import org.apache.ambari.server.agent.HostStatusAgentReport;",
          "43: import org.apache.ambari.server.agent.stomp.dto.ComponentVersionReports;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     agentReportsProcessor = injector.getInstance(AgentReportsProcessor.class);",
          "71:   }",
          "73:   @MessageMapping(\"/component_status\")",
          "74:   public ReportsResponse handleComponentReportStatus(@Header String simpSessionId, ComponentStatusReports message)",
          "75:       throws WebApplicationException, InvalidStateTransitionException, AmbariException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:   @MessageMapping(\"/component_version\")",
          "78:   public ReportsResponse handleComponentVersionReport(@Header String simpSessionId, ComponentVersionReports message)",
          "79:       throws WebApplicationException, InvalidStateTransitionException, AmbariException {",
          "81:     agentReportsProcessor.addAgentReport(new ComponentVersionAgentReport(hh,",
          "82:         agentSessionManager.getHost(simpSessionId).getHostName(), message));",
          "83:     return new ReportsResponse();",
          "84:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:       }",
          "86:     }",
          "90:     return new ReportsResponse();",
          "91:   }",
          "",
          "[Removed Lines]",
          "88:     agentReportsProcessor.addAgentReport(new AgentReport(agentSessionManager.getHost(simpSessionId).getHostName(),",
          "89:         statuses, null, null));",
          "",
          "[Added Lines]",
          "101:     agentReportsProcessor.addAgentReport(new ComponentStatusAgentReport(hh,",
          "102:         agentSessionManager.getHost(simpSessionId).getHostName(), statuses));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:       statuses.addAll(clusterReport.getValue());",
          "99:     }",
          "103:     return new ReportsResponse();",
          "104:   }",
          "106:   @MessageMapping(\"/host_status\")",
          "107:   public ReportsResponse handleHostReportStatus(@Header String simpSessionId, HostStatusReport message) throws AmbariException {",
          "110:     return new ReportsResponse();",
          "111:   }",
          "",
          "[Removed Lines]",
          "101:     agentReportsProcessor.addAgentReport(new AgentReport(agentSessionManager.getHost(simpSessionId).getHostName(),",
          "102:         null, statuses, null));",
          "108:     agentReportsProcessor.addAgentReport(new AgentReport(agentSessionManager.getHost(simpSessionId).getHostName(),",
          "109:         null, null, message));",
          "",
          "[Added Lines]",
          "114:     agentReportsProcessor.addAgentReport(new CommandStatusAgentReport(hh,",
          "115:         agentSessionManager.getHost(simpSessionId).getHostName(), statuses));",
          "121:     agentReportsProcessor.addAgentReport(new HostStatusAgentReport(hh,",
          "122:         agentSessionManager.getHost(simpSessionId).getHostName(), message));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.agent.stomp.dto;",
          "21: public class ComponentVersionReport {",
          "22:   private String componentName;",
          "23:   private String serviceName;",
          "24:   private String version;",
          "25:   private Long clusterId;",
          "27:   public ComponentVersionReport() {",
          "28:   }",
          "30:   public ComponentVersionReport(String componentName, String serviceName, String version, Long clusterId) {",
          "31:     this.componentName = componentName;",
          "32:     this.serviceName = serviceName;",
          "33:     this.version = version;",
          "34:     this.clusterId = clusterId;",
          "35:   }",
          "37:   public String getComponentName() {",
          "38:     return componentName;",
          "39:   }",
          "41:   public void setComponentName(String componentName) {",
          "42:     this.componentName = componentName;",
          "43:   }",
          "45:   public String getServiceName() {",
          "46:     return serviceName;",
          "47:   }",
          "49:   public void setServiceName(String serviceName) {",
          "50:     this.serviceName = serviceName;",
          "51:   }",
          "53:   public String getVersion() {",
          "54:     return version;",
          "55:   }",
          "57:   public void setVersion(String version) {",
          "58:     this.version = version;",
          "59:   }",
          "61:   public Long getClusterId() {",
          "62:     return clusterId;",
          "63:   }",
          "65:   public void setClusterId(Long clusterId) {",
          "66:     this.clusterId = clusterId;",
          "67:   }",
          "68: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ComponentVersionReports.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.agent.stomp.dto;",
          "21: import java.util.List;",
          "22: import java.util.TreeMap;",
          "24: import com.fasterxml.jackson.annotation.JsonProperty;",
          "26: public class ComponentVersionReports {",
          "28:   @JsonProperty(\"clusters\")",
          "29:   private TreeMap<String, List<ComponentVersionReport>> componentVersionReports;",
          "31:   public ComponentVersionReports() {",
          "32:   }",
          "34:   public ComponentVersionReports(TreeMap<String, List<ComponentVersionReport>> componentVersionReports) {",
          "35:     this.componentVersionReports = componentVersionReports;",
          "36:   }",
          "38:   public TreeMap<String, List<ComponentVersionReport>> getComponentVersionReports() {",
          "39:     return componentVersionReports;",
          "40:   }",
          "42:   public void setComponentVersionReports(TreeMap<String, List<ComponentVersionReport>> componentVersionReports) {",
          "43:     this.componentVersionReports = componentVersionReports;",
          "44:   }",
          "45: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6862e02aa03b1c9053d6dc64afe4861314d7511",
      "candidate_info": {
        "commit_hash": "d6862e02aa03b1c9053d6dc64afe4861314d7511",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d6862e02aa03b1c9053d6dc64afe4861314d7511",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java"
        ],
        "message": "AMBARI-24273. hadoop-env is not regenerated when OneFS is used as a FileSystem (amagyar) (#1773) (#1788)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5771:         PropertyType.NOT_MANAGED_HDFS_PATH, cluster, desiredConfigs);",
          "5772:     String notManagedHdfsPathList = gson.toJson(notManagedHdfsPathSet);",
          "5773:     clusterLevelParams.put(NOT_MANAGED_HDFS_PATH_LIST, notManagedHdfsPathList);",
          "5778:         LOG.debug(\"Adding {} to command parameters for {}\", serviceInfoInstance.getServiceType(),",
          "5781:         clusterLevelParams.put(DFS_TYPE, serviceInfoInstance.getServiceType());",
          "5782:         break;",
          "5783:       }",
          "",
          "[Removed Lines]",
          "5775:     Map<String, ServiceInfo> serviceInfos = ambariMetaInfo.getServices(stackId.getStackName(), stackId.getStackVersion());",
          "5776:     for (ServiceInfo serviceInfoInstance : serviceInfos.values()) {",
          "5777:       if (serviceInfoInstance.getServiceType() != null) {",
          "5779:             serviceInfoInstance.getName());",
          "",
          "[Added Lines]",
          "5775:     for (Service service : cluster.getServices().values()) {",
          "5776:       ServiceInfo serviceInfoInstance = ambariMetaInfo.getService(service);",
          "5777:       String serviceType = serviceInfoInstance.getServiceType();",
          "5778:       if (serviceType != null) {",
          "5780:           serviceInfoInstance.getName());",
          "",
          "---------------"
        ]
      }
    }
  ]
}