{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9bba7555f4558f5287c10be03a94f8c86e94908d",
      "candidate_info": {
        "commit_hash": "9bba7555f4558f5287c10be03a94f8c86e94908d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9bba7555f4558f5287c10be03a94f8c86e94908d",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java"
        ],
        "message": "PDFBOX-4892: create list only if needed, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887621 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java||preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java||preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java -> preflight/src/main/java/org/apache/pdfbox/preflight/metadata/UniquePropertiesValidation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     public List<ValidationResult.ValidationError> validatePropertiesUniqueness(PDDocument document, XMPMetadata metadata)",
          "55:             throws ValidationException",
          "56:     {",
          "59:         if (document == null)",
          "60:         {",
          "61:             throw new ValidationException(\"Document provided is null\");",
          "62:         }",
          "63:         analyzePropertyUniqueness(metadata.getDublinCoreSchema(), DublinCoreSchema.CREATOR, ve);",
          "64:         analyzePropertyUniqueness(metadata.getDublinCoreSchema(), DublinCoreSchema.TITLE, ve);",
          "65:         analyzePropertyUniqueness(metadata.getDublinCoreSchema(), DublinCoreSchema.DESCRIPTION, ve);",
          "",
          "[Removed Lines]",
          "57:         List<ValidationResult.ValidationError> ve = new ArrayList<ValidationResult.ValidationError>();",
          "",
          "[Added Lines]",
          "62:         List<ValidationResult.ValidationError> ve = new ArrayList<ValidationResult.ValidationError>();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e23d973c7fcf257267ec2f881a6bb192bef425ef",
      "candidate_info": {
        "commit_hash": "e23d973c7fcf257267ec2f881a6bb192bef425ef",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e23d973c7fcf257267ec2f881a6bb192bef425ef",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java"
        ],
        "message": "PDFBOX-5056: remove double-checked locking, as suggested by Mike Kaplinskiy\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884903 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/encoding/Encoding.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.util.Collections;",
          "20: import java.util.HashMap;",
          "22: import java.util.Map;",
          "24: import org.apache.pdfbox.cos.COSName;",
          "25: import org.apache.pdfbox.pdmodel.common.COSObjectable;",
          "",
          "[Removed Lines]",
          "21: import java.util.HashSet;",
          "23: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         }",
          "62:     }",
          "64:     protected final Map<Integer, String> codeToName = new HashMap<Integer, String>(250);",
          "65:     protected final Map<String, Integer> inverted = new HashMap<String, Integer>(250);",
          "",
          "[Removed Lines]",
          "66:     private volatile Set<String> names;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:     public boolean contains(String name)",
          "136:     {",
          "154:     }",
          "",
          "[Removed Lines]",
          "139:         if (names == null)",
          "140:         {",
          "141:             synchronized(this)",
          "142:             {",
          "143:                 if (names == null)",
          "144:                 {",
          "146:                     Set<String> tmpSet = new HashSet<String>(codeToName.values());",
          "148:                     names = tmpSet;",
          "149:                 }",
          "150:             }",
          "152:         }",
          "153:         return names.contains(name);",
          "",
          "[Added Lines]",
          "144:         return inverted.containsKey(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0eceb3e3b10254335fcfc10615e77a030d5bc627",
      "candidate_info": {
        "commit_hash": "0eceb3e3b10254335fcfc10615e77a030d5bc627",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/0eceb3e3b10254335fcfc10615e77a030d5bc627",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ],
        "message": "PDFBOX-4421: improve exception text\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882257 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         if (!(decryptionMaterial instanceof PublicKeyDecryptionMaterial))",
          "124:         {",
          "125:             throw new IOException(",
          "127:         }",
          "129:         setDecryptMetadata(encryption.isEncryptMetaData());",
          "",
          "[Removed Lines]",
          "126:                     \"Provided decryption material is not compatible with the document\");",
          "",
          "[Added Lines]",
          "126:                     \"Provided decryption material is not compatible with the document - \"",
          "127:                             + \"did you pass a null keyStore?\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "428cb5cfa50f21e12136ffda9bc31142e4ddf2e3",
      "candidate_info": {
        "commit_hash": "428cb5cfa50f21e12136ffda9bc31142e4ddf2e3",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/428cb5cfa50f21e12136ffda9bc31142e4ddf2e3",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ],
        "message": "PDFBOX-4892: DRY refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889129 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:         long prev = startXrefOffset;",
          "315:         Set<Long> prevSet = new HashSet<Long>();",
          "316:         while (prev > 0)",
          "317:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:         COSDictionary trailer = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:                     throw new IOException(\"Expected trailer object at offset \"",
          "331:                             + source.getPosition());",
          "332:                 }",
          "335:                 if(trailer.containsKey(COSName.XREF_STM))",
          "336:                 {",
          "",
          "[Removed Lines]",
          "333:                 COSDictionary trailer = xrefTrailerResolver.getCurrentTrailer();",
          "",
          "[Added Lines]",
          "334:                 trailer = xrefTrailerResolver.getCurrentTrailer();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:                     }",
          "377:                 }",
          "378:                 prev = trailer.getLong(COSName.PREV);",
          "389:             }",
          "390:             else",
          "391:             {",
          "393:                 prev = parseXrefObjStream(prev, true);",
          "395:                 {",
          "404:                 }",
          "405:             }",
          "406:             if (prevSet.contains(prev))",
          "",
          "[Removed Lines]",
          "379:                 if (prev > 0)",
          "380:                 {",
          "382:                     fixedOffset = checkXRefOffset(prev);",
          "383:                     if (fixedOffset > -1 && fixedOffset != prev)",
          "384:                     {",
          "385:                         prev = fixedOffset;",
          "386:                         trailer.setLong(COSName.PREV, prev);",
          "387:                     }",
          "388:                 }",
          "394:                 if (prev > 0)",
          "397:                     fixedOffset = checkXRefOffset(prev);",
          "398:                     if (fixedOffset > -1 && fixedOffset != prev)",
          "399:                     {",
          "400:                         prev = fixedOffset;",
          "401:                         COSDictionary trailer = xrefTrailerResolver.getCurrentTrailer();",
          "402:                         trailer.setLong(COSName.PREV, prev);",
          "403:                     }",
          "",
          "[Added Lines]",
          "385:                 trailer = xrefTrailerResolver.getCurrentTrailer();",
          "386:             }",
          "387:             if (prev > 0)",
          "388:             {",
          "390:                 fixedOffset = checkXRefOffset(prev);",
          "391:                 if (fixedOffset > -1 && fixedOffset != prev)",
          "393:                     prev = fixedOffset;",
          "394:                     trailer.setLong(COSName.PREV, prev);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "411:         }",
          "413:         xrefTrailerResolver.setStartxref(startXrefOffset);",
          "415:         document.setTrailer(trailer);",
          "416:         document.setIsXRefStream(XRefType.STREAM == xrefTrailerResolver.getXrefType());",
          "",
          "[Removed Lines]",
          "414:         COSDictionary trailer = xrefTrailerResolver.getTrailer();",
          "",
          "[Added Lines]",
          "405:         trailer = xrefTrailerResolver.getTrailer();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51fb1ea5d6b4ca8b647d44a2ec13a27e9a40bae2",
      "candidate_info": {
        "commit_hash": "51fb1ea5d6b4ca8b647d44a2ec13a27e9a40bae2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/51fb1ea5d6b4ca8b647d44a2ec13a27e9a40bae2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ],
        "message": "PDFBOX-4892: improve javadoc - people should not use PDDocument after saving encrypted because it's encrypted\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1885559 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
        ]
      }
    }
  ]
}