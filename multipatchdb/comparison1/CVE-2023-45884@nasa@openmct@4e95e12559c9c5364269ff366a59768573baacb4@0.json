{
  "cve_id": "CVE-2023-45884",
  "cve_desc": "Cross Site Request Forgery (CSRF) vulnerability in NASA Open MCT (aka openmct) through 3.1.0 allows attackers to view sensitive information via the flexibleLayout plugin.",
  "repo": "nasa/openmct",
  "patch_hash": "4e95e12559c9c5364269ff366a59768573baacb4",
  "patch_info": {
    "commit_hash": "4e95e12559c9c5364269ff366a59768573baacb4",
    "repo": "nasa/openmct",
    "commit_url": "https://github.com/nasa/openmct/commit/4e95e12559c9c5364269ff366a59768573baacb4",
    "files": [
      ".eslintrc.js",
      "package.json",
      "src/plugins/flexibleLayout/components/Frame.vue",
      "src/plugins/plot/chart/MctChart.vue",
      "src/plugins/summaryWidget/src/Condition.js",
      "src/plugins/summaryWidget/src/Rule.js",
      "src/plugins/summaryWidget/src/SummaryWidget.js",
      "src/plugins/summaryWidget/src/input/Palette.js",
      "src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
      "src/plugins/summaryWidget/src/views/summary-widget.html",
      "src/utils/template/templateHelpers.js"
    ],
    "message": "cherry-pick(#7144): fix(#7143): add `eslint-plugin-no-unsanitized` and fix errors",
    "before_after_code_files": [
      ".eslintrc.js||.eslintrc.js",
      "src/plugins/flexibleLayout/components/Frame.vue||src/plugins/flexibleLayout/components/Frame.vue",
      "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
      "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
      "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
      "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
      "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
      "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
      "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
      "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
    ]
  },
  "patch_diff": {
    ".eslintrc.js||.eslintrc.js": [
      "File: .eslintrc.js -> .eslintrc.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:     'plugin:compat/recommended',",
      "16:     'plugin:vue/vue3-recommended',",
      "17:     'plugin:you-dont-need-lodash-underscore/compatible',",
      "19:   ],",
      "20:   parser: 'vue-eslint-parser',",
      "21:   parserOptions: {",
      "",
      "[Removed Lines]",
      "18:     'plugin:prettier/recommended'",
      "",
      "[Added Lines]",
      "18:     'plugin:prettier/recommended',",
      "19:     'plugin:no-unsanitized/DOM'",
      "",
      "---------------"
    ],
    "src/plugins/flexibleLayout/components/Frame.vue||src/plugins/flexibleLayout/components/Frame.vue": [
      "File: src/plugins/flexibleLayout/components/Frame.vue -> src/plugins/flexibleLayout/components/Frame.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "161:         let originalClassName = this.dragGhost.classList[0];",
      "162:         this.dragGhost.className = '';",
      "163:         this.dragGhost.classList.add(originalClassName, iconClass);",
      "166:         event.dataTransfer.setDragImage(this.dragGhost, 0, 0);",
      "167:       }",
      "",
      "[Removed Lines]",
      "165:         this.dragGhost.innerHTML = `<span>${this.domainObject.name}</span>`;",
      "",
      "[Added Lines]",
      "164:         this.dragGhost.textContent = '';",
      "165:         const span = document.createElement('span');",
      "166:         span.textContent = this.domainObject.name;",
      "167:         this.dragGhost.appendChild(span);",
      "",
      "---------------"
    ],
    "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue": [
      "File: src/plugins/plot/chart/MctChart.vue -> src/plugins/plot/chart/MctChart.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:  at runtime from the About dialog for additional information.",
      "21: -->",
      "25: <template>",
      "26:   <div class=\"gl-plot-chart-area\">",
      "29:     <div ref=\"limitArea\" class=\"js-limit-area\">",
      "30:       <limit-label",
      "31:         v-for=\"(limitLabel, index) in visibleLimitLabels\"",
      "",
      "[Removed Lines]",
      "23: <!-- eslint-disable vue/no-v-html -->",
      "27:     <span v-html=\"canvasTemplate\"></span>",
      "28:     <span v-html=\"canvasTemplate\"></span>",
      "",
      "[Added Lines]",
      "25:     <canvas :style=\"canvasStyle\"></canvas>",
      "26:     <canvas :style=\"canvasStyle\"></canvas>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:   },",
      "147:   data() {",
      "148:     return {",
      "151:       visibleLimitLabels: [],",
      "152:       visibleLimitLines: []",
      "153:     };",
      "154:   },",
      "155:   watch: {",
      "156:     highlights: {",
      "157:       handler() {",
      "",
      "[Removed Lines]",
      "149:       canvasTemplate:",
      "150:         '<canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>',",
      "",
      "[Added Lines]",
      "151:   computed: {",
      "152:     canvasStyle() {",
      "153:       return {",
      "154:         position: 'absolute',",
      "155:         background: 'none',",
      "156:         width: '100%',",
      "157:         height: '100%'",
      "158:       };",
      "159:     }",
      "160:   },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "489:       const div = document.createElement('div');",
      "491:       const mainCanvas = div.querySelectorAll('canvas')[1];",
      "492:       const overlayCanvas = div.querySelectorAll('canvas')[0];",
      "493:       this.canvas.parentNode.replaceChild(mainCanvas, this.canvas);",
      "",
      "[Removed Lines]",
      "490:       div.innerHTML = this.canvasTemplate + this.canvasTemplate;",
      "",
      "[Added Lines]",
      "496:       div.innerHTML = `",
      "497:       <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
      "498:       <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
      "499:       `;",
      "",
      "---------------"
    ],
    "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js": [
      "File: src/plugins/summaryWidget/src/Condition.js -> src/plugins/summaryWidget/src/Condition.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "214:           const options = this.generateSelectOptions();",
      "216:           newInput = document.createElement('select');",
      "219:           emitChange = true;",
      "220:         } else {",
      "",
      "[Removed Lines]",
      "217:           newInput.innerHTML = options;",
      "",
      "[Added Lines]",
      "217:           newInput.appendChild(options);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "245:   Condition.prototype.generateSelectOptions = function () {",
      "246:     let telemetryMetadata = this.conditionManager.getTelemetryMetadata(this.config.object);",
      "248:     telemetryMetadata[this.config.key].enumerations.forEach((enumeration) => {",
      "250:     });",
      "253:   };",
      "255:   return Condition;",
      "",
      "[Removed Lines]",
      "247:     let options = '';",
      "249:       options += '<option value=\"' + enumeration.value + '\">' + enumeration.string + '</option>';",
      "252:     return options;",
      "",
      "[Added Lines]",
      "247:     let fragment = document.createDocumentFragment();",
      "250:       const option = document.createElement('option');",
      "251:       option.value = enumeration.value;",
      "252:       option.textContent = enumeration.string;",
      "253:       fragment.appendChild(option);",
      "256:     return fragment;",
      "",
      "---------------"
    ],
    "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js": [
      "File: src/plugins/summaryWidget/src/Rule.js -> src/plugins/summaryWidget/src/Rule.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:         const ruleHeader = self.domElement",
      "168:           .querySelectorAll('.widget-rule-header')[0]",
      "169:           .cloneNode(true);",
      "171:       });",
      "172:       self.widgetDnD.setDragImage(",
      "173:         self.domElement.querySelectorAll('.widget-rule-header')[0].cloneNode(true)",
      "",
      "[Removed Lines]",
      "170:         indicator.innerHTML = ruleHeader;",
      "",
      "[Added Lines]",
      "170:         indicator.textContent = '';",
      "171:         indicator.appendChild(ruleHeader);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "239:     this.listenTo(this.toggleConfigButton, 'click', toggleConfig);",
      "240:     this.listenTo(this.trigger, 'change', onTriggerInput);",
      "244:     this.trigger.value = self.config.trigger;",
      "246:     this.listenTo(this.grippy, 'mousedown', onDragStart);",
      "",
      "[Removed Lines]",
      "242:     this.title.innerHTML = self.config.name;",
      "243:     this.description.innerHTML = self.config.description;",
      "",
      "[Added Lines]",
      "243:     this.title.innerText = self.config.name;",
      "244:     this.description.innerText = self.config.description;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "456:         const lastOfType = self.conditionArea.querySelector('li:last-of-type');",
      "457:         lastOfType.parentNode.insertBefore($condition, lastOfType);",
      "458:         if (loopCnt > 0) {",
      "460:         }",
      "462:         loopCnt++;",
      "",
      "[Removed Lines]",
      "459:           $condition.querySelector('.t-condition-context').innerHTML = triggerContextStr + ' when';",
      "",
      "[Added Lines]",
      "460:           $condition.querySelector('.t-condition-context').innerText = triggerContextStr + ' when';",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "528:     }",
      "530:     description = description === '' ? this.config.description : description;",
      "532:     this.config.description = description;",
      "533:   };",
      "",
      "[Removed Lines]",
      "531:     this.description.innerHTML = self.config.description;",
      "",
      "[Added Lines]",
      "532:     this.description.innerText = self.config.description;",
      "",
      "---------------"
    ],
    "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js": [
      "File: src/plugins/summaryWidget/src/SummaryWidget.js -> src/plugins/summaryWidget/src/SummaryWidget.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:   SummaryWidget.prototype.updateWidget = function () {",
      "248:     const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
      "249:     const activeRule = this.rulesById[this.activeId];",
      "250:     this.applyStyle(this.domElement.querySelector('#widget'), activeRule.getProperty('style'));",
      "251:     this.domElement.querySelector('#widget').title = activeRule.getProperty('message');",
      "253:     this.domElement.querySelector('#widgetIcon').classList =",
      "254:       WIDGET_ICON_CLASS + ' ' + activeRule.getProperty('icon');",
      "255:   };",
      "",
      "[Removed Lines]",
      "252:     this.domElement.querySelector('#widgetLabel').innerHTML = activeRule.getProperty('label');",
      "",
      "[Added Lines]",
      "253:     this.domElement.querySelector('#widgetLabel').textContent = activeRule.getProperty('label');",
      "",
      "---------------"
    ],
    "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js": [
      "File: src/plugins/summaryWidget/src/input/Palette.js -> src/plugins/summaryWidget/src/input/Palette.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:     self.setNullOption(this.nullOption);",
      "46:     self.items.forEach(function (item) {",
      "52:     });",
      "54:     self.domElement.querySelector('.c-menu').style.display = 'none';",
      "",
      "[Removed Lines]",
      "47:       const itemElement = `<div class = \"c-palette__item ${item}\" data-item = \"${item}\"></div>`;",
      "48:       const temp = document.createElement('div');",
      "49:       temp.innerHTML = itemElement;",
      "50:       self.itemElements[item] = temp.firstChild;",
      "51:       self.domElement.querySelector('.c-palette__items').appendChild(temp.firstChild);",
      "",
      "[Added Lines]",
      "47:       const itemElement = document.createElement('div');",
      "48:       itemElement.className = 'c-palette__item ' + item;",
      "49:       itemElement.setAttribute('data-item', item);",
      "51:       self.itemElements[item] = itemElement;",
      "52:       self.domElement.querySelector('.c-palette__items').appendChild(itemElement);",
      "",
      "---------------"
    ],
    "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js": [
      "File: src/plugins/summaryWidget/src/views/SummaryWidgetView.js -> src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:     this.openmct = openmct;",
      "9:     this.domainObject = domainObject;",
      "10:     this.hasUpdated = false;",
      "11:     this.render = this.render.bind(this);",
      "12:   }",
      "15:     this.hasUpdated = true;",
      "16:     this.widget.style.color = datum.textColor;",
      "17:     this.widget.style.backgroundColor = datum.backgroundColor;",
      "18:     this.widget.style.borderColor = datum.borderColor;",
      "19:     this.widget.title = datum.message;",
      "20:     this.label.title = datum.message;",
      "22:     this.icon.className = WIDGET_ICON_CLASS + ' ' + datum.icon;",
      "26:     if (this.unsubscribe) {",
      "27:       this.unsubscribe();",
      "28:     }",
      "30:     this.hasUpdated = false;",
      "33:     this.widget = this.container.querySelector('a');",
      "34:     this.icon = this.container.querySelector('#widgetIcon');",
      "35:     this.label = this.container.querySelector('.js-sw__label');",
      "",
      "[Removed Lines]",
      "1: define(['./summary-widget.html', '@braintree/sanitize-url'], function (",
      "2:   summaryWidgetTemplate,",
      "3:   urlSanitizeLib",
      "4: ) {",
      "5:   const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
      "7:   function SummaryWidgetView(domainObject, openmct) {",
      "14:   SummaryWidgetView.prototype.updateState = function (datum) {",
      "21:     this.label.innerHTML = datum.ruleLabel;",
      "23:   };",
      "25:   SummaryWidgetView.prototype.render = function () {",
      "32:     this.container.innerHTML = summaryWidgetTemplate;",
      "",
      "[Added Lines]",
      "1: import * as urlSanitizeLib from '@braintree/sanitize-url';",
      "3: const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
      "5: class SummaryWidgetView {",
      "6:   #createSummaryWidgetTemplate() {",
      "7:     const anchor = document.createElement('a');",
      "8:     anchor.classList.add(",
      "9:       't-summary-widget',",
      "10:       'c-summary-widget',",
      "11:       'js-sw',",
      "12:       'u-links',",
      "13:       'u-fills-container'",
      "14:     );",
      "16:     const widgetIcon = document.createElement('div');",
      "17:     widgetIcon.id = 'widgetIcon';",
      "18:     widgetIcon.classList.add('c-sw__icon', 'js-sw__icon');",
      "19:     anchor.appendChild(widgetIcon);",
      "21:     const widgetLabel = document.createElement('div');",
      "22:     widgetLabel.id = 'widgetLabel';",
      "23:     widgetLabel.classList.add('c-sw__label', 'js-sw__label');",
      "24:     widgetLabel.textContent = 'Loading...';",
      "25:     anchor.appendChild(widgetLabel);",
      "27:     return anchor;",
      "28:   }",
      "30:   constructor(domainObject, openmct) {",
      "37:   updateState(datum) {",
      "44:     this.label.textContent = datum.ruleLabel;",
      "46:   }",
      "48:   render() {",
      "55:     const anchor = this.#createSummaryWidgetTemplate();",
      "56:     this.container.appendChild(anchor);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:     const renderTracker = {};",
      "51:     this.renderTracker = renderTracker;",
      "52:     this.openmct.telemetry",
      "53:       .request(this.domainObject, {",
      "54:         strategy: 'latest',",
      "55:         size: 1",
      "56:       })",
      "72:     this.unsubscribe = this.openmct.telemetry.subscribe(",
      "73:       this.domainObject,",
      "74:       this.updateState.bind(this)",
      "75:     );",
      "79:     this.container = container;",
      "80:     this.render();",
      "81:     this.removeMutationListener = this.openmct.objects.observe(",
      "",
      "[Removed Lines]",
      "57:       .then(",
      "58:         function (results) {",
      "59:           if (",
      "60:             this.destroyed ||",
      "61:             this.hasUpdated ||",
      "62:             this.renderTracker !== renderTracker ||",
      "63:             results.length === 0",
      "64:           ) {",
      "65:             return;",
      "66:           }",
      "68:           this.updateState(results[results.length - 1]);",
      "69:         }.bind(this)",
      "70:       );",
      "76:   };",
      "78:   SummaryWidgetView.prototype.show = function (container) {",
      "",
      "[Added Lines]",
      "83:       .then((results) => {",
      "84:         if (",
      "85:           this.destroyed ||",
      "86:           this.hasUpdated ||",
      "87:           this.renderTracker !== renderTracker ||",
      "88:           results.length === 0",
      "89:         ) {",
      "90:           return;",
      "91:         }",
      "93:         this.updateState(results[results.length - 1]);",
      "94:       });",
      "100:   }",
      "102:   show(container) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "84:       this.onMutation.bind(this)",
      "85:     );",
      "86:     this.openmct.time.on('timeSystem', this.render);",
      "90:     this.domainObject = domainObject;",
      "91:     this.render();",
      "95:     this.unsubscribe();",
      "96:     this.removeMutationListener();",
      "97:     this.openmct.time.off('timeSystem', this.render);",
      "",
      "[Removed Lines]",
      "87:   };",
      "89:   SummaryWidgetView.prototype.onMutation = function (domainObject) {",
      "92:   };",
      "94:   SummaryWidgetView.prototype.destroy = function (container) {",
      "",
      "[Added Lines]",
      "111:   }",
      "113:   onMutation(domainObject) {",
      "116:   }",
      "118:   destroy() {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "100:     delete this.label;",
      "101:     delete this.openmct;",
      "102:     delete this.domainObject;",
      "",
      "[Removed Lines]",
      "103:   };",
      "105:   return SummaryWidgetView;",
      "106: });",
      "",
      "[Added Lines]",
      "127:   }",
      "128: }",
      "130: export default SummaryWidgetView;",
      "",
      "---------------"
    ],
    "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html": [
      "File: src/plugins/summaryWidget/src/views/summary-widget.html -> src/plugins/summaryWidget/src/views/summary-widget.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js": [
      "File: src/utils/template/templateHelpers.js -> src/utils/template/templateHelpers.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: export function convertTemplateToHTML(templateString) {",
      "6: }",
      "8: export function toggleClass(element, className) {",
      "",
      "[Removed Lines]",
      "2:   const template = document.createElement('template');",
      "3:   template.innerHTML = templateString;",
      "5:   return template.content.cloneNode(true).children;",
      "",
      "[Added Lines]",
      "2:   const parser = new DOMParser();",
      "3:   const doc = parser.parseFromString(templateString, 'text/html');",
      "6:   const fragment = document.createDocumentFragment();",
      "9:   while (doc.body.firstChild) {",
      "10:     fragment.appendChild(doc.body.firstChild);",
      "11:   }",
      "14:   return Array.from(fragment.children);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ff8288d10ec74825be890ca054d404bf92e0ed50",
      "candidate_info": {
        "commit_hash": "ff8288d10ec74825be890ca054d404bf92e0ed50",
        "repo": "nasa/openmct",
        "commit_url": "https://github.com/nasa/openmct/commit/ff8288d10ec74825be890ca054d404bf92e0ed50",
        "files": [
          ".eslintrc.js",
          "package.json",
          "src/plugins/flexibleLayout/components/Frame.vue",
          "src/plugins/plot/chart/MctChart.vue",
          "src/plugins/summaryWidget/src/Condition.js",
          "src/plugins/summaryWidget/src/Rule.js",
          "src/plugins/summaryWidget/src/SummaryWidget.js",
          "src/plugins/summaryWidget/src/input/Palette.js",
          "src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "src/plugins/summaryWidget/src/views/summary-widget.html",
          "src/utils/template/templateHelpers.js"
        ],
        "message": "cherry-pick(#7144): fix(#7143): add `eslint-plugin-no-unsanitized` and fix errors (#7148)",
        "before_after_code_files": [
          ".eslintrc.js||.eslintrc.js",
          "src/plugins/flexibleLayout/components/Frame.vue||src/plugins/flexibleLayout/components/Frame.vue",
          "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
          "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
          "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
          "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
          "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
          "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
          "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/nasa/openmct/pull/7148"
        ],
        "olp_code_files": {
          "patch": [
            ".eslintrc.js||.eslintrc.js",
            "src/plugins/flexibleLayout/components/Frame.vue||src/plugins/flexibleLayout/components/Frame.vue",
            "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
            "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
            "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
            "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
            "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
            "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
            "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
            "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
          ],
          "candidate": [
            ".eslintrc.js||.eslintrc.js",
            "src/plugins/flexibleLayout/components/Frame.vue||src/plugins/flexibleLayout/components/Frame.vue",
            "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
            "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
            "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
            "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
            "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
            "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
            "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
            "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
          ]
        }
      },
      "candidate_diff": {
        ".eslintrc.js||.eslintrc.js": [
          "File: .eslintrc.js -> .eslintrc.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     'plugin:compat/recommended',",
          "16:     'plugin:vue/vue3-recommended',",
          "17:     'plugin:you-dont-need-lodash-underscore/compatible',",
          "19:   ],",
          "20:   parser: 'vue-eslint-parser',",
          "21:   parserOptions: {",
          "",
          "[Removed Lines]",
          "18:     'plugin:prettier/recommended'",
          "",
          "[Added Lines]",
          "18:     'plugin:prettier/recommended',",
          "19:     'plugin:no-unsanitized/DOM'",
          "",
          "---------------"
        ],
        "src/plugins/flexibleLayout/components/Frame.vue||src/plugins/flexibleLayout/components/Frame.vue": [
          "File: src/plugins/flexibleLayout/components/Frame.vue -> src/plugins/flexibleLayout/components/Frame.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         let originalClassName = this.dragGhost.classList[0];",
          "162:         this.dragGhost.className = '';",
          "163:         this.dragGhost.classList.add(originalClassName, iconClass);",
          "166:         event.dataTransfer.setDragImage(this.dragGhost, 0, 0);",
          "167:       }",
          "",
          "[Removed Lines]",
          "165:         this.dragGhost.innerHTML = `<span>${this.domainObject.name}</span>`;",
          "",
          "[Added Lines]",
          "164:         this.dragGhost.textContent = '';",
          "165:         const span = document.createElement('span');",
          "166:         span.textContent = this.domainObject.name;",
          "167:         this.dragGhost.appendChild(span);",
          "",
          "---------------"
        ],
        "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue": [
          "File: src/plugins/plot/chart/MctChart.vue -> src/plugins/plot/chart/MctChart.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  at runtime from the About dialog for additional information.",
          "21: -->",
          "25: <template>",
          "26:   <div class=\"gl-plot-chart-area\">",
          "29:     <div ref=\"limitArea\" class=\"js-limit-area\">",
          "30:       <limit-label",
          "31:         v-for=\"(limitLabel, index) in visibleLimitLabels\"",
          "",
          "[Removed Lines]",
          "23: <!-- eslint-disable vue/no-v-html -->",
          "27:     <span v-html=\"canvasTemplate\"></span>",
          "28:     <span v-html=\"canvasTemplate\"></span>",
          "",
          "[Added Lines]",
          "25:     <canvas :style=\"canvasStyle\"></canvas>",
          "26:     <canvas :style=\"canvasStyle\"></canvas>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   },",
          "147:   data() {",
          "148:     return {",
          "151:       visibleLimitLabels: [],",
          "152:       visibleLimitLines: []",
          "153:     };",
          "154:   },",
          "155:   watch: {",
          "156:     highlights: {",
          "157:       handler() {",
          "",
          "[Removed Lines]",
          "149:       canvasTemplate:",
          "150:         '<canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>',",
          "",
          "[Added Lines]",
          "151:   computed: {",
          "152:     canvasStyle() {",
          "153:       return {",
          "154:         position: 'absolute',",
          "155:         background: 'none',",
          "156:         width: '100%',",
          "157:         height: '100%'",
          "158:       };",
          "159:     }",
          "160:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:       const div = document.createElement('div');",
          "491:       const mainCanvas = div.querySelectorAll('canvas')[1];",
          "492:       const overlayCanvas = div.querySelectorAll('canvas')[0];",
          "493:       this.canvas.parentNode.replaceChild(mainCanvas, this.canvas);",
          "",
          "[Removed Lines]",
          "490:       div.innerHTML = this.canvasTemplate + this.canvasTemplate;",
          "",
          "[Added Lines]",
          "496:       div.innerHTML = `",
          "497:       <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
          "498:       <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
          "499:       `;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js": [
          "File: src/plugins/summaryWidget/src/Condition.js -> src/plugins/summaryWidget/src/Condition.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:           const options = this.generateSelectOptions();",
          "216:           newInput = document.createElement('select');",
          "219:           emitChange = true;",
          "220:         } else {",
          "",
          "[Removed Lines]",
          "217:           newInput.innerHTML = options;",
          "",
          "[Added Lines]",
          "217:           newInput.appendChild(options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:   Condition.prototype.generateSelectOptions = function () {",
          "246:     let telemetryMetadata = this.conditionManager.getTelemetryMetadata(this.config.object);",
          "248:     telemetryMetadata[this.config.key].enumerations.forEach((enumeration) => {",
          "250:     });",
          "253:   };",
          "255:   return Condition;",
          "",
          "[Removed Lines]",
          "247:     let options = '';",
          "249:       options += '<option value=\"' + enumeration.value + '\">' + enumeration.string + '</option>';",
          "252:     return options;",
          "",
          "[Added Lines]",
          "247:     let fragment = document.createDocumentFragment();",
          "250:       const option = document.createElement('option');",
          "251:       option.value = enumeration.value;",
          "252:       option.textContent = enumeration.string;",
          "253:       fragment.appendChild(option);",
          "256:     return fragment;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js": [
          "File: src/plugins/summaryWidget/src/Rule.js -> src/plugins/summaryWidget/src/Rule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:         const ruleHeader = self.domElement",
          "168:           .querySelectorAll('.widget-rule-header')[0]",
          "169:           .cloneNode(true);",
          "171:       });",
          "172:       self.widgetDnD.setDragImage(",
          "173:         self.domElement.querySelectorAll('.widget-rule-header')[0].cloneNode(true)",
          "",
          "[Removed Lines]",
          "170:         indicator.innerHTML = ruleHeader;",
          "",
          "[Added Lines]",
          "170:         indicator.textContent = '';",
          "171:         indicator.appendChild(ruleHeader);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     this.listenTo(this.toggleConfigButton, 'click', toggleConfig);",
          "240:     this.listenTo(this.trigger, 'change', onTriggerInput);",
          "244:     this.trigger.value = self.config.trigger;",
          "246:     this.listenTo(this.grippy, 'mousedown', onDragStart);",
          "",
          "[Removed Lines]",
          "242:     this.title.innerHTML = self.config.name;",
          "243:     this.description.innerHTML = self.config.description;",
          "",
          "[Added Lines]",
          "243:     this.title.innerText = self.config.name;",
          "244:     this.description.innerText = self.config.description;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:         const lastOfType = self.conditionArea.querySelector('li:last-of-type');",
          "457:         lastOfType.parentNode.insertBefore($condition, lastOfType);",
          "458:         if (loopCnt > 0) {",
          "460:         }",
          "462:         loopCnt++;",
          "",
          "[Removed Lines]",
          "459:           $condition.querySelector('.t-condition-context').innerHTML = triggerContextStr + ' when';",
          "",
          "[Added Lines]",
          "460:           $condition.querySelector('.t-condition-context').innerText = triggerContextStr + ' when';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "528:     }",
          "530:     description = description === '' ? this.config.description : description;",
          "532:     this.config.description = description;",
          "533:   };",
          "",
          "[Removed Lines]",
          "531:     this.description.innerHTML = self.config.description;",
          "",
          "[Added Lines]",
          "532:     this.description.innerText = self.config.description;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js": [
          "File: src/plugins/summaryWidget/src/SummaryWidget.js -> src/plugins/summaryWidget/src/SummaryWidget.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:   SummaryWidget.prototype.updateWidget = function () {",
          "248:     const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "249:     const activeRule = this.rulesById[this.activeId];",
          "250:     this.applyStyle(this.domElement.querySelector('#widget'), activeRule.getProperty('style'));",
          "251:     this.domElement.querySelector('#widget').title = activeRule.getProperty('message');",
          "253:     this.domElement.querySelector('#widgetIcon').classList =",
          "254:       WIDGET_ICON_CLASS + ' ' + activeRule.getProperty('icon');",
          "255:   };",
          "",
          "[Removed Lines]",
          "252:     this.domElement.querySelector('#widgetLabel').innerHTML = activeRule.getProperty('label');",
          "",
          "[Added Lines]",
          "253:     this.domElement.querySelector('#widgetLabel').textContent = activeRule.getProperty('label');",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js": [
          "File: src/plugins/summaryWidget/src/input/Palette.js -> src/plugins/summaryWidget/src/input/Palette.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     self.setNullOption(this.nullOption);",
          "46:     self.items.forEach(function (item) {",
          "52:     });",
          "54:     self.domElement.querySelector('.c-menu').style.display = 'none';",
          "",
          "[Removed Lines]",
          "47:       const itemElement = `<div class = \"c-palette__item ${item}\" data-item = \"${item}\"></div>`;",
          "48:       const temp = document.createElement('div');",
          "49:       temp.innerHTML = itemElement;",
          "50:       self.itemElements[item] = temp.firstChild;",
          "51:       self.domElement.querySelector('.c-palette__items').appendChild(temp.firstChild);",
          "",
          "[Added Lines]",
          "47:       const itemElement = document.createElement('div');",
          "48:       itemElement.className = 'c-palette__item ' + item;",
          "49:       itemElement.setAttribute('data-item', item);",
          "51:       self.itemElements[item] = itemElement;",
          "52:       self.domElement.querySelector('.c-palette__items').appendChild(itemElement);",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js": [
          "File: src/plugins/summaryWidget/src/views/SummaryWidgetView.js -> src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     this.openmct = openmct;",
          "9:     this.domainObject = domainObject;",
          "10:     this.hasUpdated = false;",
          "11:     this.render = this.render.bind(this);",
          "12:   }",
          "15:     this.hasUpdated = true;",
          "16:     this.widget.style.color = datum.textColor;",
          "17:     this.widget.style.backgroundColor = datum.backgroundColor;",
          "18:     this.widget.style.borderColor = datum.borderColor;",
          "19:     this.widget.title = datum.message;",
          "20:     this.label.title = datum.message;",
          "22:     this.icon.className = WIDGET_ICON_CLASS + ' ' + datum.icon;",
          "26:     if (this.unsubscribe) {",
          "27:       this.unsubscribe();",
          "28:     }",
          "30:     this.hasUpdated = false;",
          "33:     this.widget = this.container.querySelector('a');",
          "34:     this.icon = this.container.querySelector('#widgetIcon');",
          "35:     this.label = this.container.querySelector('.js-sw__label');",
          "",
          "[Removed Lines]",
          "1: define(['./summary-widget.html', '@braintree/sanitize-url'], function (",
          "2:   summaryWidgetTemplate,",
          "3:   urlSanitizeLib",
          "4: ) {",
          "5:   const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "7:   function SummaryWidgetView(domainObject, openmct) {",
          "14:   SummaryWidgetView.prototype.updateState = function (datum) {",
          "21:     this.label.innerHTML = datum.ruleLabel;",
          "23:   };",
          "25:   SummaryWidgetView.prototype.render = function () {",
          "32:     this.container.innerHTML = summaryWidgetTemplate;",
          "",
          "[Added Lines]",
          "1: import * as urlSanitizeLib from '@braintree/sanitize-url';",
          "3: const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "5: class SummaryWidgetView {",
          "6:   #createSummaryWidgetTemplate() {",
          "7:     const anchor = document.createElement('a');",
          "8:     anchor.classList.add(",
          "9:       't-summary-widget',",
          "10:       'c-summary-widget',",
          "11:       'js-sw',",
          "12:       'u-links',",
          "13:       'u-fills-container'",
          "14:     );",
          "16:     const widgetIcon = document.createElement('div');",
          "17:     widgetIcon.id = 'widgetIcon';",
          "18:     widgetIcon.classList.add('c-sw__icon', 'js-sw__icon');",
          "19:     anchor.appendChild(widgetIcon);",
          "21:     const widgetLabel = document.createElement('div');",
          "22:     widgetLabel.id = 'widgetLabel';",
          "23:     widgetLabel.classList.add('c-sw__label', 'js-sw__label');",
          "24:     widgetLabel.textContent = 'Loading...';",
          "25:     anchor.appendChild(widgetLabel);",
          "27:     return anchor;",
          "28:   }",
          "30:   constructor(domainObject, openmct) {",
          "37:   updateState(datum) {",
          "44:     this.label.textContent = datum.ruleLabel;",
          "46:   }",
          "48:   render() {",
          "55:     const anchor = this.#createSummaryWidgetTemplate();",
          "56:     this.container.appendChild(anchor);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     const renderTracker = {};",
          "51:     this.renderTracker = renderTracker;",
          "52:     this.openmct.telemetry",
          "53:       .request(this.domainObject, {",
          "54:         strategy: 'latest',",
          "55:         size: 1",
          "56:       })",
          "72:     this.unsubscribe = this.openmct.telemetry.subscribe(",
          "73:       this.domainObject,",
          "74:       this.updateState.bind(this)",
          "75:     );",
          "79:     this.container = container;",
          "80:     this.render();",
          "81:     this.removeMutationListener = this.openmct.objects.observe(",
          "",
          "[Removed Lines]",
          "57:       .then(",
          "58:         function (results) {",
          "59:           if (",
          "60:             this.destroyed ||",
          "61:             this.hasUpdated ||",
          "62:             this.renderTracker !== renderTracker ||",
          "63:             results.length === 0",
          "64:           ) {",
          "65:             return;",
          "66:           }",
          "68:           this.updateState(results[results.length - 1]);",
          "69:         }.bind(this)",
          "70:       );",
          "76:   };",
          "78:   SummaryWidgetView.prototype.show = function (container) {",
          "",
          "[Added Lines]",
          "83:       .then((results) => {",
          "84:         if (",
          "85:           this.destroyed ||",
          "86:           this.hasUpdated ||",
          "87:           this.renderTracker !== renderTracker ||",
          "88:           results.length === 0",
          "89:         ) {",
          "90:           return;",
          "91:         }",
          "93:         this.updateState(results[results.length - 1]);",
          "94:       });",
          "100:   }",
          "102:   show(container) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:       this.onMutation.bind(this)",
          "85:     );",
          "86:     this.openmct.time.on('timeSystem', this.render);",
          "90:     this.domainObject = domainObject;",
          "91:     this.render();",
          "95:     this.unsubscribe();",
          "96:     this.removeMutationListener();",
          "97:     this.openmct.time.off('timeSystem', this.render);",
          "",
          "[Removed Lines]",
          "87:   };",
          "89:   SummaryWidgetView.prototype.onMutation = function (domainObject) {",
          "92:   };",
          "94:   SummaryWidgetView.prototype.destroy = function (container) {",
          "",
          "[Added Lines]",
          "111:   }",
          "113:   onMutation(domainObject) {",
          "116:   }",
          "118:   destroy() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     delete this.label;",
          "101:     delete this.openmct;",
          "102:     delete this.domainObject;",
          "",
          "[Removed Lines]",
          "103:   };",
          "105:   return SummaryWidgetView;",
          "106: });",
          "",
          "[Added Lines]",
          "127:   }",
          "128: }",
          "130: export default SummaryWidgetView;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html": [
          "File: src/plugins/summaryWidget/src/views/summary-widget.html -> src/plugins/summaryWidget/src/views/summary-widget.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js": [
          "File: src/utils/template/templateHelpers.js -> src/utils/template/templateHelpers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export function convertTemplateToHTML(templateString) {",
          "6: }",
          "8: export function toggleClass(element, className) {",
          "",
          "[Removed Lines]",
          "2:   const template = document.createElement('template');",
          "3:   template.innerHTML = templateString;",
          "5:   return template.content.cloneNode(true).children;",
          "",
          "[Added Lines]",
          "2:   const parser = new DOMParser();",
          "3:   const doc = parser.parseFromString(templateString, 'text/html');",
          "6:   const fragment = document.createDocumentFragment();",
          "9:   while (doc.body.firstChild) {",
          "10:     fragment.appendChild(doc.body.firstChild);",
          "11:   }",
          "14:   return Array.from(fragment.children);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9849e0398e5b4d8693e1d9b5cf7544a3cbc9ef45",
      "candidate_info": {
        "commit_hash": "9849e0398e5b4d8693e1d9b5cf7544a3cbc9ef45",
        "repo": "nasa/openmct",
        "commit_url": "https://github.com/nasa/openmct/commit/9849e0398e5b4d8693e1d9b5cf7544a3cbc9ef45",
        "files": [
          ".eslintrc.js",
          "package.json",
          "src/plugins/flexibleLayout/components/FrameComponent.vue",
          "src/plugins/plot/chart/MctChart.vue",
          "src/plugins/summaryWidget/src/Condition.js",
          "src/plugins/summaryWidget/src/Rule.js",
          "src/plugins/summaryWidget/src/SummaryWidget.js",
          "src/plugins/summaryWidget/src/input/Palette.js",
          "src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "src/plugins/summaryWidget/src/views/summary-widget.html",
          "src/utils/template/templateHelpers.js"
        ],
        "message": "fix(#7143): add `eslint-plugin-no-sanitize` and fix errors (#7144)",
        "before_after_code_files": [
          ".eslintrc.js||.eslintrc.js",
          "src/plugins/flexibleLayout/components/FrameComponent.vue||src/plugins/flexibleLayout/components/FrameComponent.vue",
          "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
          "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
          "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
          "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
          "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
          "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
          "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            ".eslintrc.js||.eslintrc.js",
            "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
            "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
            "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
            "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
            "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
            "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
            "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
            "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
          ],
          "candidate": [
            ".eslintrc.js||.eslintrc.js",
            "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
            "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
            "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
            "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
            "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
            "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
            "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
            "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
          ]
        }
      },
      "candidate_diff": {
        ".eslintrc.js||.eslintrc.js": [
          "File: .eslintrc.js -> .eslintrc.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     'plugin:compat/recommended',",
          "16:     'plugin:vue/vue3-recommended',",
          "17:     'plugin:you-dont-need-lodash-underscore/compatible',",
          "19:   ],",
          "20:   parser: 'vue-eslint-parser',",
          "21:   parserOptions: {",
          "",
          "[Removed Lines]",
          "18:     'plugin:prettier/recommended'",
          "",
          "[Added Lines]",
          "18:     'plugin:prettier/recommended',",
          "19:     'plugin:no-unsanitized/DOM'",
          "",
          "---------------"
        ],
        "src/plugins/flexibleLayout/components/FrameComponent.vue||src/plugins/flexibleLayout/components/FrameComponent.vue": [
          "File: src/plugins/flexibleLayout/components/FrameComponent.vue -> src/plugins/flexibleLayout/components/FrameComponent.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         let originalClassName = this.dragGhost.classList[0];",
          "162:         this.dragGhost.className = '';",
          "163:         this.dragGhost.classList.add(originalClassName, iconClass);",
          "166:         event.dataTransfer.setDragImage(this.dragGhost, 0, 0);",
          "167:       }",
          "",
          "[Removed Lines]",
          "165:         this.dragGhost.innerHTML = `<span>${this.domainObject.name}</span>`;",
          "",
          "[Added Lines]",
          "164:         this.dragGhost.textContent = '';",
          "165:         const span = document.createElement('span');",
          "166:         span.textContent = this.domainObject.name;",
          "167:         this.dragGhost.appendChild(span);",
          "",
          "---------------"
        ],
        "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue": [
          "File: src/plugins/plot/chart/MctChart.vue -> src/plugins/plot/chart/MctChart.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  at runtime from the About dialog for additional information.",
          "21: -->",
          "25: <template>",
          "26:   <div class=\"gl-plot-chart-area\">",
          "29:     <div ref=\"limitArea\" class=\"js-limit-area\">",
          "30:       <limit-label",
          "31:         v-for=\"(limitLabel, index) in visibleLimitLabels\"",
          "",
          "[Removed Lines]",
          "23: <!-- eslint-disable vue/no-v-html -->",
          "27:     <span v-html=\"canvasTemplate\"></span>",
          "28:     <span v-html=\"canvasTemplate\"></span>",
          "",
          "[Added Lines]",
          "25:     <canvas :style=\"canvasStyle\"></canvas>",
          "26:     <canvas :style=\"canvasStyle\"></canvas>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   emits: ['chart-loaded', 'plot-reinitialize-canvas'],",
          "148:   data() {",
          "149:     return {",
          "152:       visibleLimitLabels: [],",
          "153:       visibleLimitLines: []",
          "154:     };",
          "155:   },",
          "156:   watch: {",
          "157:     highlights: {",
          "158:       handler() {",
          "",
          "[Removed Lines]",
          "150:       canvasTemplate:",
          "151:         '<canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>',",
          "",
          "[Added Lines]",
          "152:   computed: {",
          "153:     canvasStyle() {",
          "154:       return {",
          "155:         position: 'absolute',",
          "156:         background: 'none',",
          "157:         width: '100%',",
          "158:         height: '100%'",
          "159:       };",
          "160:     }",
          "161:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:       const div = document.createElement('div');",
          "492:       const mainCanvas = div.querySelectorAll('canvas')[1];",
          "493:       const overlayCanvas = div.querySelectorAll('canvas')[0];",
          "494:       this.canvas.parentNode.replaceChild(mainCanvas, this.canvas);",
          "",
          "[Removed Lines]",
          "491:       div.innerHTML = this.canvasTemplate + this.canvasTemplate;",
          "",
          "[Added Lines]",
          "497:       div.innerHTML = `",
          "498:       <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
          "499:       <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
          "500:       `;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js": [
          "File: src/plugins/summaryWidget/src/Condition.js -> src/plugins/summaryWidget/src/Condition.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:           const options = this.generateSelectOptions();",
          "216:           newInput = document.createElement('select');",
          "219:           emitChange = true;",
          "220:         } else {",
          "",
          "[Removed Lines]",
          "217:           newInput.innerHTML = options;",
          "",
          "[Added Lines]",
          "217:           newInput.appendChild(options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:   Condition.prototype.generateSelectOptions = function () {",
          "246:     let telemetryMetadata = this.conditionManager.getTelemetryMetadata(this.config.object);",
          "248:     telemetryMetadata[this.config.key].enumerations.forEach((enumeration) => {",
          "250:     });",
          "253:   };",
          "255:   return Condition;",
          "",
          "[Removed Lines]",
          "247:     let options = '';",
          "249:       options += '<option value=\"' + enumeration.value + '\">' + enumeration.string + '</option>';",
          "252:     return options;",
          "",
          "[Added Lines]",
          "247:     let fragment = document.createDocumentFragment();",
          "250:       const option = document.createElement('option');",
          "251:       option.value = enumeration.value;",
          "252:       option.textContent = enumeration.string;",
          "253:       fragment.appendChild(option);",
          "256:     return fragment;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js": [
          "File: src/plugins/summaryWidget/src/Rule.js -> src/plugins/summaryWidget/src/Rule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:         const ruleHeader = self.domElement",
          "168:           .querySelectorAll('.widget-rule-header')[0]",
          "169:           .cloneNode(true);",
          "171:       });",
          "172:       self.widgetDnD.setDragImage(",
          "173:         self.domElement.querySelectorAll('.widget-rule-header')[0].cloneNode(true)",
          "",
          "[Removed Lines]",
          "170:         indicator.innerHTML = ruleHeader;",
          "",
          "[Added Lines]",
          "170:         indicator.textContent = '';",
          "171:         indicator.appendChild(ruleHeader);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     this.listenTo(this.toggleConfigButton, 'click', toggleConfig);",
          "240:     this.listenTo(this.trigger, 'change', onTriggerInput);",
          "244:     this.trigger.value = self.config.trigger;",
          "246:     this.listenTo(this.grippy, 'mousedown', onDragStart);",
          "",
          "[Removed Lines]",
          "242:     this.title.innerHTML = self.config.name;",
          "243:     this.description.innerHTML = self.config.description;",
          "",
          "[Added Lines]",
          "243:     this.title.innerText = self.config.name;",
          "244:     this.description.innerText = self.config.description;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456:         const lastOfType = self.conditionArea.querySelector('li:last-of-type');",
          "457:         lastOfType.parentNode.insertBefore($condition, lastOfType);",
          "458:         if (loopCnt > 0) {",
          "460:         }",
          "462:         loopCnt++;",
          "",
          "[Removed Lines]",
          "459:           $condition.querySelector('.t-condition-context').innerHTML = triggerContextStr + ' when';",
          "",
          "[Added Lines]",
          "460:           $condition.querySelector('.t-condition-context').innerText = triggerContextStr + ' when';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "528:     }",
          "530:     description = description === '' ? this.config.description : description;",
          "532:     this.config.description = description;",
          "533:   };",
          "",
          "[Removed Lines]",
          "531:     this.description.innerHTML = self.config.description;",
          "",
          "[Added Lines]",
          "532:     this.description.innerText = self.config.description;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js": [
          "File: src/plugins/summaryWidget/src/SummaryWidget.js -> src/plugins/summaryWidget/src/SummaryWidget.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:   SummaryWidget.prototype.updateWidget = function () {",
          "248:     const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "249:     const activeRule = this.rulesById[this.activeId];",
          "250:     this.applyStyle(this.domElement.querySelector('#widget'), activeRule.getProperty('style'));",
          "251:     this.domElement.querySelector('#widget').title = activeRule.getProperty('message');",
          "253:     this.domElement.querySelector('#widgetIcon').classList =",
          "254:       WIDGET_ICON_CLASS + ' ' + activeRule.getProperty('icon');",
          "255:   };",
          "",
          "[Removed Lines]",
          "252:     this.domElement.querySelector('#widgetLabel').innerHTML = activeRule.getProperty('label');",
          "",
          "[Added Lines]",
          "253:     this.domElement.querySelector('#widgetLabel').textContent = activeRule.getProperty('label');",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js": [
          "File: src/plugins/summaryWidget/src/input/Palette.js -> src/plugins/summaryWidget/src/input/Palette.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     self.setNullOption(this.nullOption);",
          "46:     self.items.forEach(function (item) {",
          "52:     });",
          "54:     self.domElement.querySelector('.c-menu').style.display = 'none';",
          "",
          "[Removed Lines]",
          "47:       const itemElement = `<div class = \"c-palette__item ${item}\" data-item = \"${item}\"></div>`;",
          "48:       const temp = document.createElement('div');",
          "49:       temp.innerHTML = itemElement;",
          "50:       self.itemElements[item] = temp.firstChild;",
          "51:       self.domElement.querySelector('.c-palette__items').appendChild(temp.firstChild);",
          "",
          "[Added Lines]",
          "47:       const itemElement = document.createElement('div');",
          "48:       itemElement.className = 'c-palette__item ' + item;",
          "49:       itemElement.setAttribute('data-item', item);",
          "51:       self.itemElements[item] = itemElement;",
          "52:       self.domElement.querySelector('.c-palette__items').appendChild(itemElement);",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js": [
          "File: src/plugins/summaryWidget/src/views/SummaryWidgetView.js -> src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     this.openmct = openmct;",
          "9:     this.domainObject = domainObject;",
          "10:     this.hasUpdated = false;",
          "11:     this.render = this.render.bind(this);",
          "12:   }",
          "15:     this.hasUpdated = true;",
          "16:     this.widget.style.color = datum.textColor;",
          "17:     this.widget.style.backgroundColor = datum.backgroundColor;",
          "18:     this.widget.style.borderColor = datum.borderColor;",
          "19:     this.widget.title = datum.message;",
          "20:     this.label.title = datum.message;",
          "22:     this.icon.className = WIDGET_ICON_CLASS + ' ' + datum.icon;",
          "26:     if (this.unsubscribe) {",
          "27:       this.unsubscribe();",
          "28:     }",
          "30:     this.hasUpdated = false;",
          "33:     this.widget = this.container.querySelector('a');",
          "34:     this.icon = this.container.querySelector('#widgetIcon');",
          "35:     this.label = this.container.querySelector('.js-sw__label');",
          "",
          "[Removed Lines]",
          "1: define(['./summary-widget.html', '@braintree/sanitize-url'], function (",
          "2:   summaryWidgetTemplate,",
          "3:   urlSanitizeLib",
          "4: ) {",
          "5:   const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "7:   function SummaryWidgetView(domainObject, openmct) {",
          "14:   SummaryWidgetView.prototype.updateState = function (datum) {",
          "21:     this.label.innerHTML = datum.ruleLabel;",
          "23:   };",
          "25:   SummaryWidgetView.prototype.render = function () {",
          "32:     this.container.innerHTML = summaryWidgetTemplate;",
          "",
          "[Added Lines]",
          "1: import * as urlSanitizeLib from '@braintree/sanitize-url';",
          "3: const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "5: class SummaryWidgetView {",
          "6:   #createSummaryWidgetTemplate() {",
          "7:     const anchor = document.createElement('a');",
          "8:     anchor.classList.add(",
          "9:       't-summary-widget',",
          "10:       'c-summary-widget',",
          "11:       'js-sw',",
          "12:       'u-links',",
          "13:       'u-fills-container'",
          "14:     );",
          "16:     const widgetIcon = document.createElement('div');",
          "17:     widgetIcon.id = 'widgetIcon';",
          "18:     widgetIcon.classList.add('c-sw__icon', 'js-sw__icon');",
          "19:     anchor.appendChild(widgetIcon);",
          "21:     const widgetLabel = document.createElement('div');",
          "22:     widgetLabel.id = 'widgetLabel';",
          "23:     widgetLabel.classList.add('c-sw__label', 'js-sw__label');",
          "24:     widgetLabel.textContent = 'Loading...';",
          "25:     anchor.appendChild(widgetLabel);",
          "27:     return anchor;",
          "28:   }",
          "30:   constructor(domainObject, openmct) {",
          "37:   updateState(datum) {",
          "44:     this.label.textContent = datum.ruleLabel;",
          "46:   }",
          "48:   render() {",
          "55:     const anchor = this.#createSummaryWidgetTemplate();",
          "56:     this.container.appendChild(anchor);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     const renderTracker = {};",
          "51:     this.renderTracker = renderTracker;",
          "52:     this.openmct.telemetry",
          "53:       .request(this.domainObject, {",
          "54:         strategy: 'latest',",
          "55:         size: 1",
          "56:       })",
          "72:     this.unsubscribe = this.openmct.telemetry.subscribe(",
          "73:       this.domainObject,",
          "74:       this.updateState.bind(this)",
          "75:     );",
          "79:     this.container = container;",
          "80:     this.render();",
          "81:     this.removeMutationListener = this.openmct.objects.observe(",
          "",
          "[Removed Lines]",
          "57:       .then(",
          "58:         function (results) {",
          "59:           if (",
          "60:             this.destroyed ||",
          "61:             this.hasUpdated ||",
          "62:             this.renderTracker !== renderTracker ||",
          "63:             results.length === 0",
          "64:           ) {",
          "65:             return;",
          "66:           }",
          "68:           this.updateState(results[results.length - 1]);",
          "69:         }.bind(this)",
          "70:       );",
          "76:   };",
          "78:   SummaryWidgetView.prototype.show = function (container) {",
          "",
          "[Added Lines]",
          "83:       .then((results) => {",
          "84:         if (",
          "85:           this.destroyed ||",
          "86:           this.hasUpdated ||",
          "87:           this.renderTracker !== renderTracker ||",
          "88:           results.length === 0",
          "89:         ) {",
          "90:           return;",
          "91:         }",
          "93:         this.updateState(results[results.length - 1]);",
          "94:       });",
          "100:   }",
          "102:   show(container) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:       this.onMutation.bind(this)",
          "85:     );",
          "86:     this.openmct.time.on('timeSystem', this.render);",
          "90:     this.domainObject = domainObject;",
          "91:     this.render();",
          "95:     this.unsubscribe();",
          "96:     this.removeMutationListener();",
          "97:     this.openmct.time.off('timeSystem', this.render);",
          "",
          "[Removed Lines]",
          "87:   };",
          "89:   SummaryWidgetView.prototype.onMutation = function (domainObject) {",
          "92:   };",
          "94:   SummaryWidgetView.prototype.destroy = function (container) {",
          "",
          "[Added Lines]",
          "111:   }",
          "113:   onMutation(domainObject) {",
          "116:   }",
          "118:   destroy() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     delete this.label;",
          "101:     delete this.openmct;",
          "102:     delete this.domainObject;",
          "",
          "[Removed Lines]",
          "103:   };",
          "105:   return SummaryWidgetView;",
          "106: });",
          "",
          "[Added Lines]",
          "127:   }",
          "128: }",
          "130: export default SummaryWidgetView;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html": [
          "File: src/plugins/summaryWidget/src/views/summary-widget.html -> src/plugins/summaryWidget/src/views/summary-widget.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js": [
          "File: src/utils/template/templateHelpers.js -> src/utils/template/templateHelpers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export function convertTemplateToHTML(templateString) {",
          "6: }",
          "8: export function toggleClass(element, className) {",
          "",
          "[Removed Lines]",
          "2:   const template = document.createElement('template');",
          "3:   template.innerHTML = templateString;",
          "5:   return template.content.cloneNode(true).children;",
          "",
          "[Added Lines]",
          "2:   const parser = new DOMParser();",
          "3:   const doc = parser.parseFromString(templateString, 'text/html');",
          "6:   const fragment = document.createDocumentFragment();",
          "9:   while (doc.body.firstChild) {",
          "10:     fragment.appendChild(doc.body.firstChild);",
          "11:   }",
          "14:   return Array.from(fragment.children);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b28dd6238c2aa83c465b8a954e0d10797a4522e",
      "candidate_info": {
        "commit_hash": "3b28dd6238c2aa83c465b8a954e0d10797a4522e",
        "repo": "nasa/openmct",
        "commit_url": "https://github.com/nasa/openmct/commit/3b28dd6238c2aa83c465b8a954e0d10797a4522e",
        "files": [
          "src/plugins/flexibleLayout/components/frame.vue",
          "src/plugins/plot/chart/MctChart.vue",
          "src/plugins/summaryWidget/src/Condition.js",
          "src/plugins/summaryWidget/src/Rule.js",
          "src/plugins/summaryWidget/src/SummaryWidget.js",
          "src/plugins/summaryWidget/src/input/Palette.js",
          "src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "src/plugins/summaryWidget/src/views/summary-widget.html",
          "src/utils/template/templateHelpers.js"
        ],
        "message": "Refactors all bad usage of innerHTML out of our codebase (#7242)",
        "before_after_code_files": [
          "src/plugins/flexibleLayout/components/frame.vue||src/plugins/flexibleLayout/components/frame.vue",
          "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
          "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
          "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
          "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
          "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
          "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
          "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
            "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
            "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
            "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
            "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
            "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
            "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
            "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
          ],
          "candidate": [
            "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue",
            "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js",
            "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js",
            "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js",
            "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js",
            "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
            "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html",
            "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/flexibleLayout/components/frame.vue||src/plugins/flexibleLayout/components/frame.vue": [
          "File: src/plugins/flexibleLayout/components/frame.vue -> src/plugins/flexibleLayout/components/frame.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:                 let originalClassName = this.dragGhost.classList[0];",
          "155:                 this.dragGhost.className = '';",
          "156:                 this.dragGhost.classList.add(originalClassName, iconClass);",
          "159:                 event.dataTransfer.setDragImage(this.dragGhost, 0, 0);",
          "160:             }",
          "",
          "[Removed Lines]",
          "158:                 this.dragGhost.innerHTML = `<span>${this.domainObject.name}</span>`;",
          "",
          "[Added Lines]",
          "157:                 this.dragGhost.textContent = '';",
          "158:                 const span = document.createElement('span');",
          "159:                 span.textContent = this.domainObject.name;",
          "160:                 this.dragGhost.appendChild(span);",
          "",
          "---------------"
        ],
        "src/plugins/plot/chart/MctChart.vue||src/plugins/plot/chart/MctChart.vue": [
          "File: src/plugins/plot/chart/MctChart.vue -> src/plugins/plot/chart/MctChart.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  at runtime from the About dialog for additional information.",
          "21: -->",
          "25: <template>",
          "26: <div class=\"gl-plot-chart-area\">",
          "29:     <div",
          "30:         ref=\"limitArea\"",
          "31:         class=\"js-limit-area\"",
          "",
          "[Removed Lines]",
          "23: <!-- eslint-disable vue/no-v-html -->",
          "27:     <span v-html=\"canvasTemplate\"></span>",
          "28:     <span v-html=\"canvasTemplate\"></span>",
          "",
          "[Added Lines]",
          "25:     <canvas :style=\"canvasStyle\"></canvas>",
          "26:     <canvas :style=\"canvasStyle\"></canvas>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:             required: true",
          "133:         }",
          "134:     },",
          "139:     },",
          "140:     watch: {",
          "141:         highlights() {",
          "",
          "[Removed Lines]",
          "135:     data() {",
          "136:         return {",
          "137:             canvasTemplate: '<canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>'",
          "138:         };",
          "",
          "[Added Lines]",
          "133:     computed: {",
          "134:         canvasStyle() {",
          "135:             return {",
          "136:                 position: 'absolute',",
          "137:                 background: 'none',",
          "138:                 width: '100%',",
          "139:                 height: '100%'",
          "140:             };",
          "141:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:             const div = document.createElement('div');",
          "422:             const mainCanvas = div.querySelectorAll(\"canvas\")[1];",
          "423:             const overlayCanvas = div.querySelectorAll(\"canvas\")[0];",
          "424:             this.canvas.parentNode.replaceChild(mainCanvas, this.canvas);",
          "",
          "[Removed Lines]",
          "421:             div.innerHTML = this.canvasTemplate + this.canvasTemplate;",
          "",
          "[Added Lines]",
          "424:             div.innerHTML = `",
          "425:             <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
          "426:             <canvas style=\"position: absolute; background: none; width: 100%; height: 100%;\"></canvas>",
          "427:             `;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/Condition.js||src/plugins/summaryWidget/src/Condition.js": [
          "File: src/plugins/summaryWidget/src/Condition.js -> src/plugins/summaryWidget/src/Condition.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:                     const options = this.generateSelectOptions();",
          "196:                     newInput = document.createElement(\"select\");",
          "199:                     emitChange = true;",
          "200:                 } else {",
          "",
          "[Removed Lines]",
          "197:                     newInput.innerHTML = options;",
          "",
          "[Added Lines]",
          "197:                     newInput.appendChild(options);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:     Condition.prototype.generateSelectOptions = function () {",
          "226:         let telemetryMetadata = this.conditionManager.getTelemetryMetadata(this.config.object);",
          "228:         telemetryMetadata[this.config.key].enumerations.forEach(enumeration => {",
          "230:         });",
          "233:     };",
          "235:     return Condition;",
          "",
          "[Removed Lines]",
          "227:         let options = '';",
          "229:             options += '<option value=\"' + enumeration.value + '\">' + enumeration.string + '</option>';",
          "232:         return options;",
          "",
          "[Added Lines]",
          "227:         let fragment = document.createDocumentFragment();",
          "229:             const option = document.createElement('option');",
          "230:             option.value = enumeration.value;",
          "231:             option.textContent = enumeration.string;",
          "232:             fragment.appendChild(option);",
          "235:         return fragment;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/Rule.js||src/plugins/summaryWidget/src/Rule.js": [
          "File: src/plugins/summaryWidget/src/Rule.js -> src/plugins/summaryWidget/src/Rule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:             document.querySelectorAll('.t-drag-indicator').forEach(indicator => {",
          "167:                 const ruleHeader = self.domElement.querySelectorAll('.widget-rule-header')[0].cloneNode(true);",
          "169:             });",
          "170:             self.widgetDnD.setDragImage(self.domElement.querySelectorAll('.widget-rule-header')[0].cloneNode(true));",
          "171:             self.widgetDnD.dragStart(self.config.id);",
          "",
          "[Removed Lines]",
          "168:                 indicator.innerHTML = ruleHeader;",
          "",
          "[Added Lines]",
          "168:                 indicator.textContent = '';",
          "169:                 indicator.appendChild(ruleHeader);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:         this.listenTo(this.toggleConfigButton, 'click', toggleConfig);",
          "236:         this.listenTo(this.trigger, 'change', onTriggerInput);",
          "240:         this.trigger.value = self.config.trigger;",
          "242:         this.listenTo(this.grippy, 'mousedown', onDragStart);",
          "",
          "[Removed Lines]",
          "238:         this.title.innerHTML = self.config.name;",
          "239:         this.description.innerHTML = self.config.description;",
          "",
          "[Added Lines]",
          "239:         this.title.innerText = self.config.name;",
          "240:         this.description.innerText = self.config.description;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "445:                 const lastOfType = self.conditionArea.querySelector('li:last-of-type');",
          "446:                 lastOfType.parentNode.insertBefore($condition, lastOfType);",
          "447:                 if (loopCnt > 0) {",
          "449:                 }",
          "451:                 loopCnt++;",
          "",
          "[Removed Lines]",
          "448:                     $condition.querySelector('.t-condition-context').innerHTML = triggerContextStr + ' when';",
          "",
          "[Added Lines]",
          "449:                     $condition.querySelector('.t-condition-context').innerText = triggerContextStr + ' when';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "517:         }",
          "519:         description = (description === '' ? this.config.description : description);",
          "521:         this.config.description = description;",
          "522:     };",
          "",
          "[Removed Lines]",
          "520:         this.description.innerHTML = self.config.description;",
          "",
          "[Added Lines]",
          "521:         this.description.innerText = self.config.description;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/SummaryWidget.js||src/plugins/summaryWidget/src/SummaryWidget.js": [
          "File: src/plugins/summaryWidget/src/SummaryWidget.js -> src/plugins/summaryWidget/src/SummaryWidget.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     SummaryWidget.prototype.updateWidget = function () {",
          "230:         const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "231:         const activeRule = this.rulesById[this.activeId];",
          "232:         this.applyStyle(this.domElement.querySelector('#widget'), activeRule.getProperty('style'));",
          "233:         this.domElement.querySelector('#widget').title = activeRule.getProperty('message');",
          "235:         this.domElement.querySelector('#widgetIcon').classList = WIDGET_ICON_CLASS + ' ' + activeRule.getProperty('icon');",
          "236:     };",
          "",
          "[Removed Lines]",
          "234:         this.domElement.querySelector('#widgetLabel').innerHTML = activeRule.getProperty('label');",
          "",
          "[Added Lines]",
          "235:         this.domElement.querySelector('#widgetLabel').textContent = activeRule.getProperty('label');",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/input/Palette.js||src/plugins/summaryWidget/src/input/Palette.js": [
          "File: src/plugins/summaryWidget/src/input/Palette.js -> src/plugins/summaryWidget/src/input/Palette.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:         self.setNullOption(this.nullOption);",
          "51:         self.items.forEach(function (item) {",
          "57:         });",
          "59:         self.domElement.querySelector('.c-menu').style.display = 'none';",
          "",
          "[Removed Lines]",
          "52:             const itemElement = `<div class = \"c-palette__item ${item}\" data-item = \"${item}\"></div>`;",
          "53:             const temp = document.createElement('div');",
          "54:             temp.innerHTML = itemElement;",
          "55:             self.itemElements[item] = temp.firstChild;",
          "56:             self.domElement.querySelector('.c-palette__items').appendChild(temp.firstChild);",
          "",
          "[Added Lines]",
          "52:             const itemElement = document.createElement('div');",
          "53:             itemElement.className = 'c-palette__item ' + item;",
          "54:             itemElement.setAttribute('data-item', item);",
          "56:             self.itemElements[item] = itemElement;",
          "57:             self.domElement.querySelector('.c-palette__items').appendChild(itemElement);",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/views/SummaryWidgetView.js||src/plugins/summaryWidget/src/views/SummaryWidgetView.js": [
          "File: src/plugins/summaryWidget/src/views/SummaryWidgetView.js -> src/plugins/summaryWidget/src/views/SummaryWidgetView.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         this.openmct = openmct;",
          "12:         this.domainObject = domainObject;",
          "13:         this.hasUpdated = false;",
          "14:         this.render = this.render.bind(this);",
          "15:     }",
          "18:         this.hasUpdated = true;",
          "19:         this.widget.style.color = datum.textColor;",
          "20:         this.widget.style.backgroundColor = datum.backgroundColor;",
          "21:         this.widget.style.borderColor = datum.borderColor;",
          "22:         this.widget.title = datum.message;",
          "23:         this.label.title = datum.message;",
          "25:         this.icon.className = WIDGET_ICON_CLASS + ' ' + datum.icon;",
          "29:         if (this.unsubscribe) {",
          "30:             this.unsubscribe();",
          "31:         }",
          "33:         this.hasUpdated = false;",
          "36:         this.widget = this.container.querySelector('a');",
          "37:         this.icon = this.container.querySelector('#widgetIcon');",
          "38:         this.label = this.container.querySelector('.js-sw__label');",
          "",
          "[Removed Lines]",
          "1: define([",
          "2:     './summary-widget.html',",
          "3:     '@braintree/sanitize-url'",
          "4: ], function (",
          "5:     summaryWidgetTemplate,",
          "6:     urlSanitizeLib",
          "7: ) {",
          "8:     const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "10:     function SummaryWidgetView(domainObject, openmct) {",
          "17:     SummaryWidgetView.prototype.updateState = function (datum) {",
          "24:         this.label.innerHTML = datum.ruleLabel;",
          "26:     };",
          "28:     SummaryWidgetView.prototype.render = function () {",
          "35:         this.container.innerHTML = summaryWidgetTemplate;",
          "",
          "[Added Lines]",
          "1: import * as urlSanitizeLib from '@braintree/sanitize-url';",
          "3: const WIDGET_ICON_CLASS = 'c-sw__icon js-sw__icon';",
          "5: class SummaryWidgetView {",
          "6:     #createSummaryWidgetTemplate() {",
          "7:         const anchor = document.createElement('a');",
          "8:         anchor.classList.add(",
          "9:             't-summary-widget',",
          "10:             'c-summary-widget',",
          "11:             'js-sw',",
          "12:             'u-links',",
          "13:             'u-fills-container'",
          "14:         );",
          "16:         const widgetIcon = document.createElement('div');",
          "17:         widgetIcon.id = 'widgetIcon';",
          "18:         widgetIcon.classList.add('c-sw__icon', 'js-sw__icon');",
          "19:         anchor.appendChild(widgetIcon);",
          "21:         const widgetLabel = document.createElement('div');",
          "22:         widgetLabel.id = 'widgetLabel';",
          "23:         widgetLabel.classList.add('c-sw__label', 'js-sw__label');",
          "24:         widgetLabel.textContent = 'Loading...';",
          "25:         anchor.appendChild(widgetLabel);",
          "27:         return anchor;",
          "28:     }",
          "30:     constructor(domainObject, openmct) {",
          "37:     updateState(datum) {",
          "44:         this.label.textContent = datum.ruleLabel;",
          "46:     }",
          "48:     render() {",
          "55:         const anchor = this.#createSummaryWidgetTemplate();",
          "56:         this.container.appendChild(anchor);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         const renderTracker = {};",
          "54:         this.renderTracker = renderTracker;",
          "75:         this.container = container;",
          "76:         this.render();",
          "77:         this.removeMutationListener = this.openmct.objects.observe(",
          "",
          "[Removed Lines]",
          "55:         this.openmct.telemetry.request(this.domainObject, {",
          "56:             strategy: 'latest',",
          "57:             size: 1",
          "58:         }).then(function (results) {",
          "59:             if (this.destroyed",
          "60:                 || this.hasUpdated",
          "61:                 || this.renderTracker !== renderTracker",
          "62:                 || results.length === 0) {",
          "63:                 return;",
          "64:             }",
          "66:             this.updateState(results[results.length - 1]);",
          "67:         }.bind(this));",
          "69:         this.unsubscribe = this.openmct",
          "70:             .telemetry",
          "71:             .subscribe(this.domainObject, this.updateState.bind(this));",
          "72:     };",
          "74:     SummaryWidgetView.prototype.show = function (container) {",
          "",
          "[Added Lines]",
          "78:         this.openmct.telemetry",
          "79:             .request(this.domainObject, {",
          "80:                 strategy: 'latest',",
          "81:                 size: 1",
          "82:             })",
          "83:             .then((results) => {",
          "84:                 if (",
          "85:                     this.destroyed ||",
          "86:           this.hasUpdated ||",
          "87:           this.renderTracker !== renderTracker ||",
          "88:           results.length === 0",
          "89:                 ) {",
          "90:                     return;",
          "91:                 }",
          "93:                 this.updateState(results[results.length - 1]);",
          "94:             });",
          "96:         this.unsubscribe = this.openmct.telemetry.subscribe(",
          "97:             this.domainObject,",
          "98:             this.updateState.bind(this)",
          "99:         );",
          "100:     }",
          "102:     show(container) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:             this.onMutation.bind(this)",
          "81:         );",
          "82:         this.openmct.time.on('timeSystem', this.render);",
          "86:         this.domainObject = domainObject;",
          "87:         this.render();",
          "91:         this.unsubscribe();",
          "92:         this.removeMutationListener();",
          "93:         this.openmct.time.off('timeSystem', this.render);",
          "",
          "[Removed Lines]",
          "83:     };",
          "85:     SummaryWidgetView.prototype.onMutation = function (domainObject) {",
          "88:     };",
          "90:     SummaryWidgetView.prototype.destroy = function (container) {",
          "",
          "[Added Lines]",
          "111:     }",
          "113:     onMutation(domainObject) {",
          "116:     }",
          "118:     destroy() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:         delete this.label;",
          "97:         delete this.openmct;",
          "98:         delete this.domainObject;",
          "",
          "[Removed Lines]",
          "99:     };",
          "101:     return SummaryWidgetView;",
          "103: });",
          "",
          "[Added Lines]",
          "127:     }",
          "128: }",
          "130: export default SummaryWidgetView;",
          "",
          "---------------"
        ],
        "src/plugins/summaryWidget/src/views/summary-widget.html||src/plugins/summaryWidget/src/views/summary-widget.html": [
          "File: src/plugins/summaryWidget/src/views/summary-widget.html -> src/plugins/summaryWidget/src/views/summary-widget.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utils/template/templateHelpers.js||src/utils/template/templateHelpers.js": [
          "File: src/utils/template/templateHelpers.js -> src/utils/template/templateHelpers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export function convertTemplateToHTML(templateString) {",
          "6: }",
          "8: export function toggleClass(element, className) {",
          "",
          "[Removed Lines]",
          "2:     const template = document.createElement('template');",
          "3:     template.innerHTML = templateString;",
          "5:     return template.content.cloneNode(true).children;",
          "",
          "[Added Lines]",
          "2:     const parser = new DOMParser();",
          "3:     const doc = parser.parseFromString(templateString, 'text/html');",
          "6:     const fragment = document.createDocumentFragment();",
          "9:     while (doc.body.firstChild) {",
          "10:         fragment.appendChild(doc.body.firstChild);",
          "11:     }",
          "14:     return Array.from(fragment.children);",
          "",
          "---------------"
        ]
      }
    }
  ]
}