{
  "cve_id": "CVE-2023-39631",
  "cve_desc": "An issue in LanChain-ai Langchain v.0.0.245 allows a remote attacker to execute arbitrary code via the evaluate function in the numexpr library.",
  "repo": "pydata/numexpr",
  "patch_hash": "4b2d89cf14e75030d27629925b9998e1e91d23c7",
  "patch_info": {
    "commit_hash": "4b2d89cf14e75030d27629925b9998e1e91d23c7",
    "repo": "pydata/numexpr",
    "commit_url": "https://github.com/pydata/numexpr/commit/4b2d89cf14e75030d27629925b9998e1e91d23c7",
    "files": [
      "numexpr/necompiler.py",
      "numexpr/tests/test_numexpr.py"
    ],
    "message": "Add in protections against call to `eval(expression)`",
    "before_after_code_files": [
      "numexpr/necompiler.py||numexpr/necompiler.py",
      "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
    ]
  },
  "patch_diff": {
    "numexpr/necompiler.py||numexpr/necompiler.py": [
      "File: numexpr/necompiler.py -> numexpr/necompiler.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import sys",
      "14: import numpy",
      "15: import threading",
      "17: is_cpu_amd_intel = False # DEPRECATION WARNING: WILL BE REMOVED IN FUTURE RELEASE",
      "18: from numexpr import interpreter, expressions, use_vml",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: import re",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "259:     def __str__(self):",
      "260:         return 'Immediate(%d)' % (self.node.value,)",
      "263: def stringToExpression(s, types, context):",
      "264:     \"\"\"Given a string, convert it to a tree of ExpressionNode's.",
      "265:     \"\"\"",
      "266:     old_ctx = expressions._context.get_current_context()",
      "267:     try:",
      "268:         expressions._context.set_new_context(context)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: _forbidden_re = re.compile('[\\;[\\:]|__')",
      "267:     # sanitize the string for obvious attack vectors that NumExpr cannot",
      "268:     # parse into its homebrew AST. This is to protect the call to `eval` below.",
      "269:     # We forbid `;`, `:`. `[` and `__`",
      "270:     # We would like to forbid `.` but it is both a reference and decimal point.",
      "271:     if _forbidden_re.search(s) is not None:",
      "272:         raise ValueError(f'Expression {s} has forbidden control characters.')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "612:     Returns a `NumExpr` object containing the compiled function.",
      "613:     \"\"\"",
      "617:     # In that case _frame_depth is wrong (it should be 2) but it doesn't matter",
      "618:     # since it will not be used (because truediv='auto' has already been",
      "619:     # translated to either True or False).",
      "",
      "[Removed Lines]",
      "614:     # NumExpr can be called either directly by the end-user, in which case",
      "615:     # kwargs need to be sanitized by getContext, or by evaluate,",
      "616:     # in which case kwargs are in already sanitized.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "758: _names_cache = CacheDict(256)",
      "759: _numexpr_cache = CacheDict(256)",
      "760: _numexpr_last = {}",
      "762: evaluate_lock = threading.Lock()",
      "764: # MAYBE: decorate this function to add attributes instead of having the",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769: _numexpr_sanity = set()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "861:              out: numpy.ndarray = None,",
      "862:              order: str = 'K',",
      "863:              casting: str = 'safe',",
      "866:     \"\"\"",
      "867:     Evaluate a simple array expression element-wise using the virtual machine.",
      "",
      "[Removed Lines]",
      "864:              _frame_depth: int=3,",
      "",
      "[Added Lines]",
      "872:              _frame_depth: int = 3,",
      "",
      "---------------"
    ],
    "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py": [
      "File: numexpr/tests/test_numexpr.py -> numexpr/tests/test_numexpr.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "373:         a1 = array([1., 2., 3.])",
      "374:         b1 = array([4., 5., 6.])",
      "375:         c1 = array([7., 8., 9.])",
      "378:         assert_array_equal(x, array([86., 124., 168.]))",
      "380:     def test_validate(self):",
      "",
      "[Removed Lines]",
      "376:         x = evaluate(\"2*a + 3*b*c\", local_dict={'a': a1, 'b': b1, 'c': c1})",
      "377:         x = re_evaluate()",
      "",
      "[Added Lines]",
      "376:         local_dict={'a': a1, 'b': b1, 'c': c1}",
      "377:         x = evaluate(\"2*a + 3*b*c\", local_dict=local_dict)",
      "378:         x = re_evaluate(local_dict=local_dict)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "400:         a1 = array([1., 2., 3.])",
      "401:         b1 = array([4., 5., 6.])",
      "402:         c1 = array([7., 8., 9.])",
      "404:         assert(retval is None)",
      "406:         assert_array_equal(x, array([86., 124., 168.]))",
      "408:     # Test for issue #22",
      "",
      "[Removed Lines]",
      "403:         retval = validate(\"2*a + 3*b*c\", local_dict={'a': a1, 'b': b1, 'c': c1})",
      "405:         x = re_evaluate()",
      "",
      "[Added Lines]",
      "404:         local_dict={'a': a1, 'b': b1, 'c': c1}",
      "405:         retval = validate(\"2*a + 3*b*c\", local_dict=local_dict)",
      "407:         x = re_evaluate(local_dict=local_dict)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "502:         a = arange(3)",
      "503:         try:",
      "504:             evaluate(\"a < [0, 0, 0]\")",
      "506:             pass",
      "507:         else:",
      "508:             self.fail()",
      "510:     def test_disassemble(self):",
      "511:         assert_equal(disassemble(NumExpr(",
      "512:             \"where(m, a, -1)\", [('m', bool), ('a', float)])),",
      "",
      "[Removed Lines]",
      "505:         except TypeError:",
      "",
      "[Added Lines]",
      "507:         except (ValueError, TypeError):",
      "508:             pass",
      "509:         else:",
      "510:             self.fail()",
      "512:     def test_forbidden_tokens(self):",
      "513:         # Forbid dunder",
      "514:         try:",
      "515:             evaluate('__builtins__')",
      "516:         except ValueError:",
      "517:             pass",
      "518:         else:",
      "519:             self.fail()",
      "521:         # Forbid colon for lambda funcs",
      "522:         try:",
      "523:             evaluate('lambda x: x')",
      "524:         except ValueError:",
      "525:             pass",
      "526:         else:",
      "527:             self.fail()",
      "529:         # Forbid indexing",
      "530:         try:",
      "531:             evaluate('locals()[]')",
      "532:         except ValueError:",
      "537:         # Forbid semicolon",
      "538:         try:",
      "539:             evaluate('import os; os.cpu_count()')",
      "540:         except ValueError:",
      "541:             pass",
      "542:         else:",
      "543:             self.fail()",
      "545:         # I struggle to come up with cases for our ban on `'` and `\"`",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d20bf6af9fa66adea275637ddf30b8b3f06a147",
      "candidate_info": {
        "commit_hash": "7d20bf6af9fa66adea275637ddf30b8b3f06a147",
        "repo": "pydata/numexpr",
        "commit_url": "https://github.com/pydata/numexpr/commit/7d20bf6af9fa66adea275637ddf30b8b3f06a147",
        "files": [
          "numexpr/necompiler.py",
          "numexpr/tests/test_numexpr.py"
        ],
        "message": "fix sanitizer forbid colon within quotes",
        "before_after_code_files": [
          "numexpr/necompiler.py||numexpr/necompiler.py",
          "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "numexpr/necompiler.py||numexpr/necompiler.py",
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ],
          "candidate": [
            "numexpr/necompiler.py||numexpr/necompiler.py",
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ]
        }
      },
      "candidate_diff": {
        "numexpr/necompiler.py||numexpr/necompiler.py": [
          "File: numexpr/necompiler.py -> numexpr/necompiler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:     # We also cannot ban `.\\d*j`, where `\\d*` is some digits (or none), e.g. 1.5j, 1.j",
          "279:     if sanitize:",
          "280:         no_whitespace = re.sub(r'\\s+', '', s)",
          "282:             raise ValueError(f'Expression {s} has forbidden control characters.')",
          "284:     old_ctx = expressions._context.get_current_context()",
          "",
          "[Removed Lines]",
          "281:         if _blacklist_re.search(no_whitespace) is not None:",
          "",
          "[Added Lines]",
          "281:         skip_quotes = re.sub(r'(\\'[^\\']*\\')', '', no_whitespace)",
          "282:         if _blacklist_re.search(skip_quotes) is not None:",
          "",
          "---------------"
        ],
        "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py": [
          "File: numexpr/tests/test_numexpr.py -> numexpr/tests/test_numexpr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:             evaluate('c.real')",
          "577:             evaluate('c.imag')",
          "580:     def test_no_sanitize(self):",
          "581:         try: # Errors on compile() after eval()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:             # pass imaginary unit j",
          "580:             evaluate('1.5j')",
          "581:             evaluate('3.j')",
          "583:             # pass forbidden characters within quotes",
          "584:             x = np.array(['a', 'b'], dtype=bytes)",
          "585:             evaluate(\"x == 'b:'\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}