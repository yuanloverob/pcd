{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d53628adcd5569738262fd3563ce0eed0512286",
      "candidate_info": {
        "commit_hash": "3d53628adcd5569738262fd3563ce0eed0512286",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/3d53628adcd5569738262fd3563ce0eed0512286",
        "files": [
          "packages/grid/src/grid.js",
          "packages/table/src/methods.js",
          "packages/toolbar/src/toolbar.js"
        ],
        "message": "grid\u589e\u52a0\u6570\u636e\u4e8b\u4ef6 proxy-query",
        "before_after_code_files": [
          "packages/grid/src/grid.js||packages/grid/src/grid.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/grid/src/grid.js||packages/grid/src/grid.js": [
          "File: packages/grid/src/grid.js -> packages/grid/src/grid.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:         }",
          "453:         if (!proxyInited && proxyOpts.autoLoad !== false) {",
          "454:           this.proxyInited = true",
          "456:         }",
          "457:       }",
          "458:     },",
          "",
          "[Removed Lines]",
          "455:           this.$nextTick(() => this.commitProxy('_init'))",
          "",
          "[Added Lines]",
          "455:           this.$nextTick().then(() => this.commitProxy('_init')).then((rest) => {",
          "456:             this.$emit('proxy-query', { ...rest, isInited: true, $grid: this, $event: new Event('init') })",
          "457:           })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:       const btnParams = button ? button.params : null",
          "484:       switch (code) {",
          "485:         case 'insert':",
          "488:         case 'insert_actived':",
          "491:         case 'mark_cancel':",
          "492:           this.triggerPendingEvent(code)",
          "493:           break",
          "",
          "[Removed Lines]",
          "486:           this.insert()",
          "487:           break",
          "489:           this.insert().then(({ row }) => this.setActiveRow(row))",
          "490:           break",
          "",
          "[Added Lines]",
          "488:           return this.insert()",
          "490:           return this.insert().then(({ row }) => this.setActiveRow(row))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:             const params = {",
          "556:               code,",
          "557:               button,",
          "558:               $grid: this,",
          "559:               page: pageParams,",
          "560:               sort: sortList.length ? sortList[0] : {},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:               isInited,",
          "559:               isReload,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:             this.tableLoading = true",
          "569:             const applyArgs = [params].concat(args)",
          "570:             return Promise.resolve((beforeQuery || ajaxMethods)(...applyArgs))",
          "572:               .then(rest => {",
          "573:                 this.tableLoading = false",
          "574:                 if (rest) {",
          "",
          "[Removed Lines]",
          "571:               .catch(e => e)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "590:                 if (afterQuery) {",
          "591:                   afterQuery(...applyArgs)",
          "592:                 }",
          "593:               })",
          "594:           } else {",
          "595:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:                 return { status: true }",
          "595:               }).catch(() => {",
          "596:                 return { status: false }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "629:                     } else {",
          "630:                       this.commitProxy('query')",
          "631:                     }",
          "632:                   })",
          "633:                   .catch(rest => {",
          "634:                     this.tableLoading = false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:                     return { status: true }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "641:                       }",
          "642:                       VXETable.modal.message({ id: code, content: this.getRespMsg(rest, 'vxe.grid.operError'), status: 'error' })",
          "643:                     }",
          "644:                   })",
          "645:               })",
          "646:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "649:                     return { status: false }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "705:                     } else {",
          "706:                       this.commitProxy('query')",
          "707:                     }",
          "708:                   })",
          "709:                   .catch(rest => {",
          "710:                     this.tableLoading = false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:                     return { status: true }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "717:                       }",
          "718:                       VXETable.modal.message({ id: code, content: this.getRespMsg(rest, 'vxe.grid.operError'), status: 'error' })",
          "719:                     }",
          "720:                   })",
          "721:               } else {",
          "722:                 if (isMsg) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:                     return { status: false }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "760:         if (selectRecords.length) {",
          "761:           return VXETable.modal.confirm({ id: `cfm_${code}`, content: GlobalConfig.i18n(alertKey), escClosable: true }).then(type => {",
          "762:             if (type === 'confirm') {",
          "764:             }",
          "765:           })",
          "766:         } else {",
          "",
          "[Removed Lines]",
          "763:               callback()",
          "",
          "[Added Lines]",
          "771:               return callback()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "790:     getPendingRecords () {",
          "791:       return this.pendingRecords",
          "792:     },",
          "793:     triggerToolbarBtnEvent (button, evnt) {",
          "796:     },",
          "797:     triggerToolbarTolEvent (tool, evnt) {",
          "799:       this.$emit('toolbar-tool-click', { code: tool.code, tool, $grid: this, $event: evnt })",
          "800:     },",
          "801:     triggerPendingEvent (code) {",
          "",
          "[Removed Lines]",
          "794:       this.commitProxy(button, evnt)",
          "795:       this.$emit('toolbar-button-click', { code: button.code, button, $grid: this, $event: evnt })",
          "798:       this.commitProxy(tool, evnt)",
          "",
          "[Added Lines]",
          "801:     triggerToolbarCommitEvent (params, evnt) {",
          "802:       const { code } = params",
          "803:       return this.commitProxy(params, evnt).then((rest) => {",
          "804:         if (code && rest && rest.status && ['query', 'reload', 'delete', 'save'].includes(code)) {",
          "805:           this.$emit(code === 'delete' || code === 'save' ? `proxy-${code}` : 'proxy-query', { ...rest, isReload: code === 'reload', $grid: this, $event: evnt })",
          "806:         }",
          "807:       })",
          "808:     },",
          "810:       this.triggerToolbarCommitEvent(button, evnt)",
          "811:       this.$emit('toolbar-button-click', { code: button.code, $grid: this, $event: evnt })",
          "814:       this.triggerToolbarCommitEvent(tool, evnt)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "836:       tablePage.pageSize = pageSize",
          "837:       this.$emit('page-change', Object.assign({ $grid: this }, params))",
          "838:       if (proxyConfig) {",
          "840:       }",
          "841:     },",
          "842:     sortChangeEvent (params) {",
          "",
          "[Removed Lines]",
          "839:         this.commitProxy('query')",
          "",
          "[Added Lines]",
          "855:         this.commitProxy('query').then((rest) => {",
          "856:           this.$emit('proxy-query', { ...rest, $grid: this, $event: params.$event })",
          "857:         })",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "847:         this.sortData = sortList",
          "848:         if (this.proxyConfig) {",
          "849:           this.tablePage.currentPage = 1",
          "851:         }",
          "852:       }",
          "853:       this.$emit('sort-change', Object.assign({ $grid: this }, params))",
          "",
          "[Removed Lines]",
          "850:           this.commitProxy('query')",
          "",
          "[Added Lines]",
          "868:           this.commitProxy('query').then((rest) => {",
          "869:             this.$emit('proxy-query', { ...rest, $grid: this, $event: params.$event })",
          "870:           })",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "859:         this.filterData = filterList",
          "860:         if (this.proxyConfig) {",
          "861:           this.tablePage.currentPage = 1",
          "863:         }",
          "864:       }",
          "865:       this.$emit('filter-change', Object.assign({ $grid: this }, params))",
          "",
          "[Removed Lines]",
          "862:           this.commitProxy('query')",
          "",
          "[Added Lines]",
          "882:           this.commitProxy('query').then((rest) => {",
          "883:             this.$emit('proxy-query', { ...rest, $grid: this, $event: params.$event })",
          "884:           })",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "867:     submitEvent (params) {",
          "868:       const { proxyConfig } = this",
          "869:       if (proxyConfig) {",
          "871:       }",
          "872:       this.$emit('form-submit', Object.assign({ $grid: this }, params))",
          "873:     },",
          "874:     resetEvent (params) {",
          "875:       const { proxyConfig } = this",
          "876:       if (proxyConfig) {",
          "878:       }",
          "879:       this.$emit('form-reset', Object.assign({ $grid: this }, params))",
          "880:     },",
          "",
          "[Removed Lines]",
          "870:         this.commitProxy('reload')",
          "877:         this.commitProxy('reload')",
          "",
          "[Added Lines]",
          "892:         this.commitProxy('reload').then((rest) => {",
          "893:           this.$emit('proxy-query', { ...rest, isReload: true, $grid: this, $event: params.$event })",
          "894:         })",
          "901:         this.commitProxy('reload').then((rest) => {",
          "902:           this.$emit('proxy-query', { ...rest, isReload: true, $grid: this, $event: params.$event })",
          "903:         })",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3272:   setCurrentRow (row) {",
          "3273:     const { $el, rowOpts } = this",
          "3274:     this.clearCurrentRow()",
          "3276:     this.currentRow = row",
          "3277:     if (rowOpts.isCurrent || this.highlightCurrentRow) {",
          "3278:       if ($el) {",
          "",
          "[Removed Lines]",
          "3275:     this.clearCurrentColumn()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3400:   setCurrentColumn (fieldOrColumn) {",
          "3401:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "3402:     if (column) {",
          "3404:       this.clearCurrentColumn()",
          "3405:       this.currentColumn = column",
          "3406:     }",
          "",
          "[Removed Lines]",
          "3403:       this.clearCurrentRow()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js": [
          "File: packages/toolbar/src/toolbar.js -> packages/toolbar/src/toolbar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:         }",
          "573:       }, 300)",
          "574:     },",
          "576:       const { $xegrid, refreshOpts, isRefresh } = this",
          "577:       if (!isRefresh) {",
          "578:         const queryMethod = refreshOpts.queryMethod || refreshOpts.query",
          "",
          "[Removed Lines]",
          "575:     refreshEvent () {",
          "",
          "[Added Lines]",
          "575:     refreshEvent (evnt) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:           }",
          "588:         } else if ($xegrid) {",
          "589:           this.isRefresh = true",
          "591:             this.isRefresh = false",
          "592:           })",
          "593:         }",
          "",
          "[Removed Lines]",
          "590:           $xegrid.commitProxy(refreshOpts.code || 'reload').catch(e => e).then(() => {",
          "",
          "[Added Lines]",
          "590:           $xegrid.triggerToolbarCommitEvent({ code: refreshOpts.code || 'reload' }, evnt).catch(e => e).then(() => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12e6ac760e1a2715dd4da382fee4982c99732d5f",
      "candidate_info": {
        "commit_hash": "12e6ac760e1a2715dd4da382fee4982c99732d5f",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/12e6ac760e1a2715dd4da382fee4982c99732d5f",
        "files": [
          "examples/App.vue",
          "examples/router/index.ts",
          "examples/views/table/TableTest8.vue",
          "package.json",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.9.10",
        "before_after_code_files": [
          "examples/App.vue||examples/App.vue",
          "examples/router/index.ts||examples/router/index.ts",
          "examples/views/table/TableTest8.vue||examples/views/table/TableTest8.vue",
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/App.vue||examples/App.vue": [
          "File: examples/App.vue -> examples/App.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         { name: 'TableTest5', routerLink: { name: 'TableTest5' } },",
          "41:         { name: 'TableTest6', routerLink: { name: 'TableTest6' } },",
          "42:         { name: 'TableTest7', routerLink: { name: 'TableTest7' } },",
          "43:         { name: 'GridTest', routerLink: { name: 'GridTest' } },",
          "44:         { name: 'TestKeepTest1', routerLink: { name: 'TestKeepTest1' } },",
          "45:         { name: 'TestKeepTest2', routerLink: { name: 'TestKeepTest2' } },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:         { name: 'TableTest8', routerLink: { name: 'TableTest8' } },",
          "",
          "---------------"
        ],
        "examples/router/index.ts||examples/router/index.ts": [
          "File: examples/router/index.ts -> examples/router/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         path: 'table7',",
          "68:         name: 'TableTest7',",
          "69:         component: () => import('../views/table/TableTest7.vue')",
          "70:       }",
          "71:     ]",
          "72:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:       },",
          "71:       {",
          "72:         path: 'table8',",
          "73:         name: 'TableTest8',",
          "74:         component: () => import('../views/table/TableTest8.vue')",
          "",
          "---------------"
        ],
        "examples/views/table/TableTest8.vue||examples/views/table/TableTest8.vue": [
          "File: examples/views/table/TableTest8.vue -> examples/views/table/TableTest8.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <template>",
          "2:   <div>",
          "3:     <vxe-button @click=\"scrollToCol('attr1')\">\u5b9a\u4f4d Attr1 \u5217</vxe-button>",
          "4:     <vxe-button @click=\"scrollToCol('attr4')\">\u5b9a\u4f4d Attr4 \u5217</vxe-button>",
          "5:     <vxe-button @click=\"scrollToCol('attr8')\">\u5b9a\u4f4d Attr8 \u5217</vxe-button>",
          "6:     <vxe-button @click=\"scrollToRow(gridOptions.data[3])\">\u5b9a\u4f4d\u7b2c4\u884c</vxe-button>",
          "7:     <vxe-button @click=\"scrollToRow(gridOptions.data[9])\">\u5b9a\u4f4d\u7b2c10\u884c</vxe-button>",
          "8:     <vxe-button @click=\"scrollToRow(gridOptions.data[15])\">\u5b9a\u4f4d\u7b2c16\u884c</vxe-button>",
          "9:     <vxe-grid ref=\"gridRef\" v-bind=\"gridOptions\"></vxe-grid>",
          "10:   </div>",
          "11: </template>",
          "13: <script lang=\"ts\">",
          "14: import Vue from 'vue'",
          "15: import { VxeGridInstance, VxeGridProps } from '../../../types'",
          "17: interface RowVO {",
          "18:   id: number",
          "19:   name: string",
          "20:   role: string",
          "21:   sex: string",
          "22:   age: number",
          "23:   address: string",
          "24:   attr1: string",
          "25:   attr2: string",
          "26:   attr3: string",
          "27:   attr4: string",
          "28:   attr5: string",
          "29:   attr6: string",
          "30:   attr7: string",
          "31:   attr8: string",
          "32:   attr9: string",
          "33:   attr10: string",
          "34: }",
          "36: export default Vue.extend({",
          "37:   data () {",
          "38:     const gridOptions: VxeGridProps<RowVO> & { data: RowVO[] } = {",
          "39:       border: true,",
          "40:       showOverflow: true,",
          "41:       height: 400,",
          "42:       columns: [",
          "43:         { type: 'seq', width: 70, fixed: 'left' },",
          "44:         { field: 'name', title: 'Name', fixed: 'left', width: 200 },",
          "45:         { field: 'role', title: 'Role', width: 300 },",
          "46:         { field: 'attr1', title: 'Attr1', width: 400 },",
          "47:         { field: 'attr2', title: 'Attr2', width: 300 },",
          "48:         { field: 'attr3', title: 'Attr3', width: 700 },",
          "49:         { field: 'attr4', title: 'Attr4', width: 600 },",
          "50:         { field: 'attr5', title: 'Attr5', width: 500 },",
          "51:         { field: 'attr6', title: 'Attr6', width: 400 },",
          "52:         { field: 'attr7', title: 'Attr7', width: 200 },",
          "53:         { field: 'attr8', title: 'Attr8', width: 500 },",
          "54:         { field: 'attr9', title: 'Attr9', width: 600 },",
          "55:         { field: 'attr10', title: 'Attr10', width: 500 },",
          "56:         { field: 'age', title: 'Age', width: 200 },",
          "57:         { field: 'sex', title: 'Sex', fixed: 'right', width: 100 },",
          "58:         { field: 'address', title: 'Address', fixed: 'right', width: 140 }",
          "59:       ],",
          "60:       data: [",
          "61:         { id: 10001, name: 'Test1', role: 'Develop', sex: 'Man', age: 28, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "62:         { id: 10002, name: 'Test2', role: 'Test', sex: 'Women', age: 22, address: 'Guangzhou', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "63:         { id: 10003, name: 'Test3', role: 'PM', sex: 'Man', age: 32, address: 'Shanghai', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "64:         { id: 10004, name: 'Test4', role: 'Designer', sex: 'Women', age: 23, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "65:         { id: 10005, name: 'Test5', role: 'Develop', sex: 'Women', age: 30, address: 'Shanghai', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "66:         { id: 10006, name: 'Test6', role: 'Designer', sex: 'Women', age: 21, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "67:         { id: 10007, name: 'Test7', role: 'Test', sex: 'Man', age: 29, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "68:         { id: 10008, name: 'Test8', role: 'Develop', sex: 'Man', age: 35, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "69:         { id: 10009, name: 'Test9', role: 'Test', sex: 'Man', age: 26, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "70:         { id: 10010, name: 'Test10', role: 'Develop', sex: 'Man', age: 38, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "71:         { id: 10011, name: 'Test11', role: 'Test', sex: 'Women', age: 29, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "72:         { id: 10012, name: 'Test12', role: 'Develop', sex: 'Man', age: 27, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "73:         { id: 10013, name: 'Test13', role: 'Test', sex: 'Women', age: 24, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "74:         { id: 10014, name: 'Test14', role: 'Develop', sex: 'Man', age: 34, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "75:         { id: 10015, name: 'Test15', role: 'Test', sex: 'Man', age: 21, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "76:         { id: 10016, name: 'Test16', role: 'Develop', sex: 'Women', age: 20, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "77:         { id: 10017, name: 'Test17', role: 'Test', sex: 'Man', age: 31, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "78:         { id: 10018, name: 'Test18', role: 'Develop', sex: 'Women', age: 32, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "79:         { id: 10019, name: 'Test19', role: 'Test', sex: 'Man', age: 37, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' },",
          "80:         { id: 10020, name: 'Test20', role: 'Develop', sex: 'Man', age: 41, address: 'test abc', attr1: '', attr2: '', attr3: '', attr4: '', attr5: '', attr6: '', attr7: '', attr8: '', attr9: '', attr10: '' }",
          "81:       ]",
          "82:     }",
          "84:     return {",
          "85:       gridOptions",
          "86:     }",
          "87:   },",
          "88:   methods: {",
          "89:     scrollToCol (field: string) {",
          "90:       const $grid = this.$refs.gridRef as VxeGridInstance<RowVO>",
          "91:       if ($grid) {",
          "92:         $grid.scrollToColumn(field)",
          "93:       }",
          "94:     },",
          "95:     scrollToRow (row: RowVO) {",
          "96:       const $grid = this.$refs.gridRef as VxeGridInstance<RowVO>",
          "97:       if ($grid) {",
          "98:         $grid.scrollToRow(row)",
          "99:       }",
          "100:     }",
          "101:   }",
          "102: })",
          "103: </script>",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:     const { scrollXLoad, scrollYLoad } = this",
          "339:     return this.handleTableData(true).then(() => {",
          "340:       this.updateFooter()",
          "342:       if (scrollXLoad || scrollYLoad) {",
          "343:         if (scrollXLoad) {",
          "344:           this.updateScrollXSpace()",
          "",
          "[Removed Lines]",
          "341:       this.checkSelectionStatus()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3352:     if (rows && !XEUtils.isArray(rows)) {",
          "3353:       rows = [rows]",
          "3354:     }",
          "3356:     return this.$nextTick()",
          "3357:   },",
          "",
          "[Removed Lines]",
          "3355:     rows.forEach((row: any) => this.handleSelectRow({ row }, !!value, isForce))",
          "",
          "[Added Lines]",
          "3354:     this.handleBatchSelectRows(rows, !!value, isForce)",
          "3355:     this.checkSelectionStatus()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3363:   setCheckboxRow (rows: any, value: any) {",
          "3364:     return this.handleCheckedCheckboxRow(rows, value, true)",
          "3365:   },",
          "3366:   isCheckedByCheckboxRow (row: any) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3364:     if (rows && !XEUtils.isArray(rows)) {",
          "3365:       rows = [rows]",
          "3366:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3375:     const { treeIndeterminateMaps } = this",
          "3376:     return !!treeIndeterminateMaps[getRowid(this, row)] && !this.isCheckedByCheckboxRow(row)",
          "3377:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3386:   handleBatchSelectRows (rows: any[], value: any, isForce: any) {",
          "3387:     const $xeTable = this",
          "3388:     const { treeConfig } = $xeTable",
          "3390:     const { selectCheckboxMaps, checkboxOpts } = this",
          "3391:     const { checkField, checkStrictly, checkMethod } = checkboxOpts",
          "3392:     if (checkField) {",
          "3393:       if (treeConfig && !checkStrictly) {",
          "3394:         rows.forEach(row => {",
          "3395:           this.handleSelectRow({ row }, value, isForce)",
          "3396:         })",
          "3397:       } else {",
          "3398:         rows.forEach(row => {",
          "3399:           if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "3400:             XEUtils.set(row, checkField, value)",
          "3401:             this.handleCheckboxReserveRow(row, value)",
          "3402:           }",
          "3403:         })",
          "3404:       }",
          "3405:     } else {",
          "3406:       if (treeConfig && !checkStrictly) {",
          "3407:         rows.forEach(row => {",
          "3408:           this.handleSelectRow({ row }, value, isForce)",
          "3409:         })",
          "3410:       } else {",
          "3411:         const selectRowMaps = Object.assign({}, selectCheckboxMaps)",
          "3412:         rows.forEach(row => {",
          "3413:           const rowid = getRowid($xeTable, row)",
          "3414:           if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "3415:             if (value) {",
          "3416:               if (!selectRowMaps[rowid]) {",
          "3417:                 selectRowMaps[rowid] = row",
          "3418:               }",
          "3419:             } else {",
          "3420:               if (selectRowMaps[rowid]) {",
          "3421:                 delete selectRowMaps[rowid]",
          "3422:               }",
          "3423:             }",
          "3424:             this.handleCheckboxReserveRow(row, value)",
          "3425:           }",
          "3426:         })",
          "3427:         this.selectCheckboxMaps = selectRowMaps",
          "3428:       }",
          "3429:     }",
          "3430:   },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3536:       }",
          "3537:     }",
          "3538:     this.selectCheckboxMaps = selectRowMaps",
          "3540:   },",
          "3541:   handleToggleCheckRowEvent (evnt: any, params: any) {",
          "3542:     const { selectCheckboxMaps, checkboxOpts } = this",
          "",
          "[Removed Lines]",
          "3539:     this.checkSelectionStatus()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3555:       this.triggerCheckRowEvent(evnt, params, value)",
          "3556:     } else {",
          "3557:       this.handleSelectRow(params, value)",
          "3558:     }",
          "3559:   },",
          "3560:   triggerCheckRowEvent (evnt: any, params: any, value: any) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3610:       this.checkSelectionStatus()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3582:     }",
          "3583:     if (!checkMethod || checkMethod({ row })) {",
          "3584:       this.handleSelectRow(params, value)",
          "3585:       this.emitEvent('checkbox-change', Object.assign({",
          "3586:         records: this.getCheckboxRecords(),",
          "3587:         reserves: this.getCheckboxReserveRecords(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3638:       this.checkSelectionStatus()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3598:     const { checkField } = checkboxOpts",
          "3599:     const value = checkField ? !XEUtils.get(row, checkField) : !selectCheckboxMaps[getRowid(this, row)]",
          "3600:     this.handleSelectRow({ row }, value, true)",
          "3601:     return this.$nextTick()",
          "3602:   },",
          "3603:   handleCheckedAllCheckboxRow (value: any, isForce: any) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3655:     this.checkSelectionStatus()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51891a39e677d9c070a55ae2aa5854f6b7cf417c",
      "candidate_info": {
        "commit_hash": "51891a39e677d9c070a55ae2aa5854f6b7cf417c",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/51891a39e677d9c070a55ae2aa5854f6b7cf417c",
        "files": [
          "package.json",
          "packages/table/module/custom/panel.ts",
          "packages/ui/index.ts"
        ],
        "message": "releases 3.11.21",
        "before_after_code_files": [
          "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts",
          "packages/ui/index.ts||packages/ui/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts": [
          "File: packages/table/module/custom/panel.ts -> packages/table/module/custom/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:           title: drawerOpts.title || getI18n('vxe.custom.cstmTitle'),",
          "692:           width: drawerOpts.width || Math.min(880, Math.floor(document.documentElement.clientWidth * 0.6)),",
          "693:           position: drawerOpts.position,",
          "694:           escClosable: !!drawerOpts.escClosable,",
          "695:           destroyOnClose: true,",
          "696:           showFooter: true",
          "697:         },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:           resize: !!drawerOpts.resize,",
          "696:           maskClosable: !!drawerOpts.maskClosable,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "722:         lockView: modalOpts.lockView,",
          "723:         resize: modalOpts.resize,",
          "724:         escClosable: !!modalOpts.escClosable,",
          "725:         destroyOnClose: true,",
          "726:         showFooter: true",
          "727:       },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:         maskClosable: !!modalOpts.maskClosable,",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         lockView: true,",
          "91:         resize: true,",
          "92:         escClosable: true",
          "93:       }",
          "94:     },",
          "95:     sortConfig: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:       },",
          "94:       drawerOptions: {",
          "95:         mask: true,",
          "96:         lockView: true,",
          "97:         escClosable: true,",
          "98:         resize: true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbad0bf5c0257c2ff36bdfe0925912ce98247eaa",
      "candidate_info": {
        "commit_hash": "fbad0bf5c0257c2ff36bdfe0925912ce98247eaa",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/fbad0bf5c0257c2ff36bdfe0925912ce98247eaa",
        "files": [
          "package.json",
          "packages/custom/src/mixin.js",
          "packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/pager/src/pager.js",
          "packages/table/src/body.js",
          "packages/table/src/columnInfo.js",
          "packages/table/src/methods.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/custom.scss",
          "styles/table.scss",
          "styles/variable.scss"
        ],
        "message": "\u589e\u52a0\u53c2\u6570 expand-config.padding",
        "before_after_code_files": [
          "packages/custom/src/mixin.js||packages/custom/src/mixin.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/pager/src/pager.js||packages/pager/src/pager.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/custom.scss||styles/custom.scss",
          "styles/table.scss||styles/table.scss",
          "styles/variable.scss||styles/variable.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/custom/src/mixin.js||packages/custom/src/mixin.js": [
          "File: packages/custom/src/mixin.js -> packages/custom/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         const colid = column.getKey()",
          "12:         column.renderFixed = column.fixed",
          "13:         column.renderVisible = column.visible",
          "14:         sortMaps[colid] = column.renderSortNumber",
          "15:         fixedMaps[colid] = column.fixed",
          "16:         visibleMaps[colid] = column.visible",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:         column.renderResizeWidth = column.renderWidth",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:       return this.$nextTick()",
          "37:     },",
          "38:     calcMaxHeight  () {",
          "44:       let tableHeight = 0",
          "47:       }",
          "52:     },",
          "53:     checkCustomStatus () {",
          "54:       const { customStore, collectColumn, customOpts } = this",
          "55:       const { checkMethod } = customOpts",
          "58:     },",
          "59:     emitCustomEvent (type, evnt) {",
          "60:       const comp = this.$xegrid || this",
          "",
          "[Removed Lines]",
          "39:       const { $refs, customStore } = this",
          "40:       const customWrapperElem = $refs.customWrapper ? $refs.customWrapper.$el : null",
          "41:       const headElem = $refs.tableHeader ? $refs.tableHeader.$el : null",
          "42:       const bodyElem = $refs.tableBody ? $refs.tableBody.$el : null",
          "45:       if (headElem) {",
          "46:         tableHeight += headElem.clientHeight",
          "48:       if (bodyElem) {",
          "49:         tableHeight += bodyElem.clientHeight",
          "50:       }",
          "51:       customStore.maxHeight = Math.max(0, customWrapperElem ? Math.min(customWrapperElem.clientHeight, tableHeight - 80) : 0)",
          "56:       customStore.isAll = collectColumn.every((column) => (checkMethod ? !checkMethod({ column }) : false) || column.visible)",
          "57:       customStore.isIndeterminate = !customStore.isAll && collectColumn.some((column) => (!checkMethod || checkMethod({ column })) && (column.visible || column.halfVisible))",
          "",
          "[Added Lines]",
          "40:       const { $el, customStore } = this",
          "43:       if ($el) {",
          "44:         tableHeight = $el.clientHeight - 30",
          "46:       customStore.maxHeight = Math.max(4, tableHeight)",
          "51:       customStore.isAll = collectColumn.every((column) => (checkMethod ? !checkMethod({ column }) : false) || column.renderVisible)",
          "52:       customStore.isIndeterminate = !customStore.isAll && collectColumn.some((column) => (!checkMethod || checkMethod({ column })) && (column.renderVisible || column.halfVisible))",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   const { _e, $xetable, customStore } = _vm",
          "28:   const { customColumnList, customOpts, isMaxFixedColumn } = $xetable",
          "29:   const { maxHeight } = customStore",
          "31:   const colVNs = []",
          "32:   const customWrapperOns = {}",
          "",
          "[Removed Lines]",
          "30:   const { checkMethod, visibleMethod, allowSort, allowFixed, trigger } = customOpts",
          "",
          "[Added Lines]",
          "30:   const { checkMethod, visibleMethod, allowVisible, allowSort, allowFixed, trigger, placement } = customOpts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             dragover: _vm.sortDragoverEvent",
          "59:           }",
          "60:         }, [",
          "62:             class: ['vxe-table-custom--checkbox-option', {",
          "63:               'is--checked': isChecked,",
          "64:               'is--indeterminate': isIndeterminate,",
          "",
          "[Removed Lines]",
          "61:           h('div', {",
          "",
          "[Added Lines]",
          "61:           allowVisible ? h('div', {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:             h('span', {",
          "79:               class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "80:             })",
          "82:           allowSort && column.level === 1",
          "83:             ? h('div', {",
          "84:               class: 'vxe-table-custom--sort-option'",
          "",
          "[Removed Lines]",
          "81:           ]),",
          "",
          "[Added Lines]",
          "81:           ]) : _e(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:   const isAllIndeterminate = customStore.isIndeterminate",
          "149:   return h('div', {",
          "150:     key: 'simple',",
          "152:       'is--active': customStore.visible",
          "154:   }, customStore.visible",
          "155:     ? [",
          "156:         h('ul', {",
          "",
          "[Removed Lines]",
          "151:     class: ['vxe-table-custom-wrapper', {",
          "153:     }]",
          "",
          "[Added Lines]",
          "151:     class: ['vxe-table-custom-wrapper', `placement--${placement}`, {",
          "153:     }],",
          "154:     style: maxHeight && !['left', 'right'].includes(placement)",
          "155:       ? {",
          "156:           maxHeight: `${maxHeight}px`",
          "157:         }",
          "158:       : {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:           h('li', {",
          "160:             class: 'vxe-table-custom--option'",
          "161:           }, [",
          "178:                 class: 'vxe-checkbox--label'",
          "181:           ])",
          "182:         ]),",
          "183:         h('div', {",
          "",
          "[Removed Lines]",
          "162:             h('div', {",
          "163:               class: ['vxe-table-custom--checkbox-option', {",
          "164:                 'is--checked': isAllChecked,",
          "165:                 'is--indeterminate': isAllIndeterminate",
          "166:               }],",
          "167:               attrs: {",
          "168:                 title: GlobalConfig.i18n('vxe.table.allTitle')",
          "169:               },",
          "170:               on: {",
          "171:                 click: _vm.allCustomEvent",
          "172:               }",
          "173:             }, [",
          "174:               h('span', {",
          "175:                 class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "176:               }),",
          "177:               h('span', {",
          "179:               }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "180:             ])",
          "",
          "[Added Lines]",
          "167:             allowVisible",
          "168:               ? h('div', {",
          "169:                 class: ['vxe-table-custom--checkbox-option', {",
          "170:                   'is--checked': isAllChecked,",
          "171:                   'is--indeterminate': isAllIndeterminate",
          "172:                 }],",
          "173:                 attrs: {",
          "174:                   title: GlobalConfig.i18n('vxe.table.allTitle')",
          "175:                 },",
          "176:                 on: {",
          "177:                   click: _vm.allCustomEvent",
          "178:                 }",
          "179:               }, [",
          "180:                 h('span', {",
          "181:                   class: ['vxe-checkbox--icon', isAllIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "182:                 }),",
          "183:                 h('span', {",
          "184:                   class: 'vxe-checkbox--label'",
          "185:                 }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "186:               ]) : h('span', {",
          "188:               }, GlobalConfig.i18n('vxe.table.customTitle'))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:               name: 'vxe-table-custom--list',",
          "191:               tag: 'ul'",
          "192:             },",
          "198:             on: customWrapperOns",
          "199:           }, colVNs),",
          "200:           h('div', {",
          "",
          "[Removed Lines]",
          "193:             style: maxHeight",
          "194:               ? {",
          "195:                   maxHeight: `${maxHeight}px`",
          "196:                 }",
          "197:               : {},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235: const renderPopupPanel = (h, _vm) => {",
          "236:   const { _e, $xetable, customStore } = _vm",
          "237:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xetable",
          "239:   const trVNs = []",
          "240:   XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "241:     const isVisible = visibleMethod ? visibleMethod({ column }) : true",
          "",
          "[Removed Lines]",
          "238:   const { allowSort, allowFixed, checkMethod, visibleMethod } = customOpts",
          "",
          "[Added Lines]",
          "241:   const { allowVisible, allowSort, allowFixed, allowResizable, checkMethod, visibleMethod } = customOpts",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:             dragover: _vm.sortDragoverEvent",
          "261:           }",
          "262:         }, [",
          "264:             class: 'vxe-table-custom-popup--column-item col--visible'",
          "265:           }, [",
          "266:             h('div', {",
          "",
          "[Removed Lines]",
          "263:           h('td', {",
          "",
          "[Added Lines]",
          "266:           allowVisible ? h('td', {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "284:                 class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "285:               })",
          "286:             ])",
          "288:           allowSort",
          "289:             ? h('td', {",
          "290:               class: 'vxe-table-custom-popup--column-item col--sort'",
          "",
          "[Removed Lines]",
          "287:           ]),",
          "",
          "[Added Lines]",
          "290:           ]) : _e(),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "304:                     class: GlobalConfig.icon.TABLE_CUSTOM_SORT",
          "305:                   })",
          "306:                 ])",
          "308:             ])",
          "309:             : _e(),",
          "310:           h('td', {",
          "",
          "[Removed Lines]",
          "307:                 : null",
          "",
          "[Added Lines]",
          "310:                 : h('span', '-')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "317:               }",
          "318:             }, colTitle)",
          "319:           ]),",
          "320:           allowFixed",
          "321:             ? h('td', {",
          "322:               class: 'vxe-table-custom-popup--column-item col--fixed'",
          "323:             }, [",
          "326:                   props: {",
          "327:                     value: column.renderFixed || '',",
          "328:                     type: 'button',",
          "",
          "[Removed Lines]",
          "324:               !parent",
          "325:                 ? h('vxe-radio-group', {",
          "",
          "[Added Lines]",
          "323:           allowResizable",
          "324:             ? h('td', {",
          "325:               class: 'vxe-table-custom-popup--column-item col--resizable'",
          "326:             }, [",
          "327:               !isChecked || (column.children && column.children.length)",
          "328:                 ? h('span', '-')",
          "329:                 : h('vxe-input', {",
          "330:                   props: {",
          "331:                     type: 'integer',",
          "332:                     min: 40,",
          "333:                     value: column.renderResizeWidth",
          "334:                   },",
          "335:                   on: {",
          "336:                     modelValue (value) {",
          "337:                       column.renderResizeWidth = Math.max(40, Number(value))",
          "338:                     }",
          "339:                   }",
          "340:                 })",
          "341:             ])",
          "342:             : _e(),",
          "347:               parent",
          "348:                 ? h('span', '-')",
          "349:                 : h('vxe-radio-group', {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "343:                   }",
          "344:                 })",
          "346:             ])",
          "347:             : _e()",
          "348:         ])",
          "",
          "[Removed Lines]",
          "345:                 : null",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "357:       className: 'vxe-table-custom-popup-wrapper vxe-table--ignore-clear',",
          "358:       value: customStore.visible,",
          "359:       title: GlobalConfig.i18n('vxe.custom.cstmTitle'),",
          "364:       mask: true,",
          "365:       lockView: true,",
          "366:       showFooter: true,",
          "",
          "[Removed Lines]",
          "360:       width: '40vw',",
          "361:       minWidth: 520,",
          "362:       height: '50vh',",
          "363:       minHeight: 300,",
          "",
          "[Added Lines]",
          "383:       width: 700,",
          "384:       minWidth: 700,",
          "385:       height: 400,",
          "386:       minHeight: 400,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "384:           }, [",
          "385:             h('table', {}, [",
          "386:               h('colgroup', {}, [",
          "388:                   style: {",
          "389:                     width: '80px'",
          "390:                   }",
          "392:                 allowSort",
          "393:                   ? h('col', {",
          "394:                     style: {",
          "",
          "[Removed Lines]",
          "387:                 h('col', {",
          "391:                 }),",
          "",
          "[Added Lines]",
          "410:                 allowVisible ? h('col', {",
          "414:                 }) : _e(),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "401:                     minWidth: '120px'",
          "402:                   }",
          "403:                 }),",
          "404:                 allowFixed",
          "405:                   ? h('col', {",
          "406:                     style: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:                 allowResizable",
          "428:                   ? h('col', {",
          "429:                     style: {",
          "430:                       width: '140px'",
          "431:                     }",
          "432:                   })",
          "433:                   : _e(),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "411:               ]),",
          "412:               h('thead', {}, [",
          "413:                 h('tr', {}, [",
          "415:                     h('div', {",
          "416:                       class: ['vxe-table-custom--checkbox-option', {",
          "417:                         'is--checked': isAllChecked,",
          "",
          "[Removed Lines]",
          "414:                   h('th', {}, [",
          "",
          "[Added Lines]",
          "444:                   allowVisible ? h('th', {}, [",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "432:                         class: 'vxe-checkbox--label'",
          "433:                       }, GlobalConfig.i18n('vxe.toolbar.customAll'))",
          "434:                     ])",
          "436:                   allowSort",
          "437:                     ? h('th', {}, [",
          "438:                       h('span', {",
          "",
          "[Removed Lines]",
          "435:                   ]),",
          "",
          "[Added Lines]",
          "465:                   ]) : _e(),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "454:                     ])",
          "455:                     : _e(),",
          "456:                   h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colTitle')),",
          "457:                   allowFixed",
          "458:                     ? h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colFixed', [columnOpts.maxFixedSize || 0]))",
          "459:                     : _e()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:                   allowResizable",
          "488:                     ? h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colResizable'))",
          "489:                     : _e(),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "563:         updateStore({",
          "564:           id,",
          "565:           type,",
          "567:         })",
          "568:       }",
          "569:     },",
          "570:     confirmCustomEvent  (evnt) {",
          "571:       const { $xetable } = this",
          "578:       })",
          "579:       $xetable.closeCustom()",
          "580:       $xetable.emitCustomEvent('confirm', evnt)",
          "",
          "[Removed Lines]",
          "566:           storeData: this.getStoreData()",
          "572:       const { customColumnList } = $xetable",
          "573:       customColumnList.forEach((column, index) => {",
          "574:         const sortIndex = index + 1",
          "575:         column.renderSortNumber = sortIndex",
          "576:         column.fixed = column.renderFixed",
          "577:         column.visible = column.renderVisible",
          "",
          "[Added Lines]",
          "599:           storeData: $xetable.getCustomStoreData()",
          "605:       const { customOpts, customColumnList } = $xetable",
          "606:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "607:       XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "608:         if (!parent) {",
          "609:           if (allowSort) {",
          "610:             const sortIndex = index + 1",
          "611:             column.renderSortNumber = sortIndex",
          "612:           }",
          "613:           if (allowFixed) {",
          "614:             column.fixed = column.renderFixed",
          "615:           }",
          "616:         }",
          "617:         if (allowResizable) {",
          "618:           if (column.renderVisible && (!column.children || column.children.length)) {",
          "619:             if (column.renderResizeWidth !== column.renderWidth) {",
          "620:               column.resizeWidth = column.renderResizeWidth",
          "621:             }",
          "622:           }",
          "623:         }",
          "624:         if (allowVisible) {",
          "625:           column.visible = column.renderVisible",
          "626:         }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "582:     },",
          "583:     cancelCustomEvent  (evnt) {",
          "584:       const { $xetable } = this",
          "586:       const { oldSortMaps, oldFixedMaps, oldVisibleMaps } = customStore",
          "587:       XEUtils.eachTree(customColumnList, column => {",
          "588:         const colid = column.getKey()",
          "589:         const visible = !!oldVisibleMaps[colid]",
          "590:         const fixed = oldFixedMaps[colid] || ''",
          "596:       }, { children: 'children' })",
          "597:       $xetable.closeCustom()",
          "598:       $xetable.emitCustomEvent('cancel', evnt)",
          "",
          "[Removed Lines]",
          "585:       const { customStore, customColumnList } = $xetable",
          "591:         column.renderVisible = visible",
          "592:         column.visible = visible",
          "593:         column.renderFixed = fixed",
          "594:         column.fixed = fixed",
          "595:         column.renderSortNumber = oldSortMaps[colid] || 0",
          "",
          "[Added Lines]",
          "634:       const { customStore, customOpts, customColumnList } = $xetable",
          "636:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "641:         if (allowVisible) {",
          "642:           column.renderVisible = visible",
          "643:           column.visible = visible",
          "644:         }",
          "645:         if (allowFixed) {",
          "646:           column.renderFixed = fixed",
          "647:           column.fixed = fixed",
          "648:         }",
          "649:         if (allowSort) {",
          "650:           column.renderSortNumber = oldSortMaps[colid] || 0",
          "651:         }",
          "652:         if (allowResizable) {",
          "653:           column.renderResizeWidth = column.renderWidth",
          "654:         }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "602:       $xetable.resetColumn(true)",
          "603:       $xetable.closeCustom()",
          "604:       $xetable.emitCustomEvent('reset', evnt)",
          "606:     },",
          "607:     resetCustomEvent  (evnt) {",
          "608:       if (VXETable.modal) {",
          "",
          "[Removed Lines]",
          "605:       this.handleSaveStore('confirm')",
          "",
          "[Added Lines]",
          "664:       this.handleSaveStore('reset')",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         colSort: 'Sort',",
          "118:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "119:         colTitle: 'Title',",
          "120:         colVisible: 'Visible',",
          "121:         colFixed: 'Freeze columns (Max. {0})',",
          "122:         fixedLeft: 'Left',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         colResizable: 'Column width (px)',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         colSort: 'Sort',",
          "118:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "119:         colTitle: 'Title',",
          "120:         colVisible: 'Visible',",
          "121:         colFixed: 'Freeze columns (Max {0})',",
          "122:         fixedLeft: 'Left',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         colResizable: 'Column width (px)',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         colSort: '\u30bd\u30fc\u30c8',",
          "118:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "119:         colTitle: '\u30bf\u30a4\u30c8\u30eb',",
          "120:         colVisible: '\u8868\u793a',",
          "121:         colFixed: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "122:         fixedLeft: '\u5de6\u5074',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         colResizable: 'Column width (px)',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         colSort: 'Sort',",
          "118:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "119:         colTitle: 'Title',",
          "120:         colVisible: 'Visible',",
          "121:         colFixed: 'Freeze columns (Max {0})',",
          "122:         fixedLeft: 'Left',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         colResizable: 'Column width (px)',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         colSort: '\u6392\u5e8f',",
          "118:         sortHelpTip: '\u70b9\u51fb\u5e76\u62d6\u52a8\u56fe\u6807\u53ef\u4ee5\u8c03\u6574\u5217\u7684\u6392\u5e8f',",
          "119:         colTitle: '\u6807\u9898',",
          "120:         colVisible: '\u662f\u5426\u663e\u793a',",
          "121:         colFixed: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "122:         fixedLeft: '\u5de6\u4fa7',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         colResizable: '\u5217\u5bbd\uff08\u50cf\u7d20\uff09',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         colSort: '\u6392\u5e8f',",
          "118:         sortHelpTip: '\u9ede\u64ca\u4e26\u62d6\u52d5\u5716\u6a19\u53ef\u4ee5\u8abf\u6574\u5217\u7684\u6392\u5e8f',",
          "119:         colTitle: '\u6a19\u984c',",
          "120:         colVisible: '\u662f\u5426\u986f\u793a',",
          "121:         colFixed: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "122:         fixedLeft: '\u5de6\u5074',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:         colResizable: '\u5217\u5bbd\uff08\u50cf\u7d20\uff09',",
          "",
          "---------------"
        ],
        "packages/pager/src/pager.js||packages/pager/src/pager.js": [
          "File: packages/pager/src/pager.js -> packages/pager/src/pager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     autoHidden: { type: Boolean, default: () => GlobalConfig.pager.autoHidden },",
          "35:     transfer: { type: Boolean, default: () => GlobalConfig.pager.transfer },",
          "36:     className: [String, Function],",
          "38:     iconPrevPage: String,",
          "39:     iconJumpPrev: String,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     pageSizePlacement: {",
          "38:       type: String,",
          "39:       default: () => GlobalConfig.pager.pageSizePlacement",
          "40:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:         class: 'vxe-pager--sizes',",
          "272:         props: {",
          "273:           value: this.pageSize,",
          "275:           transfer: this.transfer,",
          "276:           options: this.sizeList",
          "277:         },",
          "",
          "[Removed Lines]",
          "274:           placement: 'top',",
          "",
          "[Added Lines]",
          "278:           placement: this.pageSizePlacement,",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:     )",
          "391:     if (isExpandRow) {",
          "393:       const cellStyle = {}",
          "394:       if (expandHeight) {",
          "395:         cellStyle.height = `${expandHeight}px`",
          "",
          "[Removed Lines]",
          "392:       const { height: expandHeight } = expandOpts",
          "",
          "[Added Lines]",
          "392:       const { height: expandHeight, padding } = expandOpts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:       const expandParams = { $table: $xetable, seq, column: expandColumn, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }",
          "403:       rows.push(",
          "404:         h('tr', {",
          "406:           key: `expand_${rowid}`,",
          "407:           style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(expandParams) : rowStyle) : null,",
          "408:           on: trOn",
          "",
          "[Removed Lines]",
          "405:           class: 'vxe-body--expanded-row',",
          "",
          "[Added Lines]",
          "405:           class: ['vxe-body--expanded-row', {",
          "406:             'is--padding': padding",
          "407:           }],",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:       renderWidth: 0,",
          "128:       renderHeight: 0,",
          "129:       resizeWidth: 0,",
          "130:       renderLeft: 0,",
          "131:       renderArgs: [], // \u6e32\u67d3\u53c2\u6570\u53ef\u7528\u4e8e\u6269\u5c55",
          "132:       model: {},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:       renderResizeWidth: 0,",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1596:       if (!checkMethod || checkMethod({ column })) {",
          "1597:         column.visible = column.defaultVisible",
          "1598:       }",
          "1599:     })",
          "1600:     if (opts.resizable) {",
          "1601:       this.saveCustomResizable(true)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1599:       column.renderResizeWidth = column.renderWidth",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1798:       localStorage.setItem(visibleStorageKey, XEUtils.toJSONString(columnVisibleStorageMap))",
          "1799:     }",
          "1800:   },",
          "1801:   saveCustomResizable (isReset) {",
          "1802:     const { id, collectColumn, customConfig, customOpts } = this",
          "1803:     const { storage } = customOpts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1802:   getCustomStoreData () {",
          "1803:     const { id, collectColumn, customOpts } = this",
          "1804:     const { checkMethod } = customOpts",
          "1805:     const resizableData = {}",
          "1806:     const sortData = {}",
          "1807:     const visibleData = {}",
          "1808:     const fixedData = {}",
          "1809:     const storeData = {",
          "1810:       resizableData,",
          "1811:       sortData,",
          "1812:       visibleData,",
          "1813:       fixedData",
          "1814:     }",
          "1815:     if (!id) {",
          "1816:       errLog('vxe.error.reqProp', ['id'])",
          "1817:       return storeData",
          "1818:     }",
          "1819:     XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {",
          "1821:       if (!parent) {",
          "1822:         collectColumn.forEach((column) => {",
          "1823:           const colKey = column.getKey()",
          "1824:           if (colKey) {",
          "1825:             sortData[colKey] = column.renderSortNumber",
          "1826:           }",
          "1827:         })",
          "1828:       }",
          "1829:       if (column.resizeWidth) {",
          "1830:         const colKey = column.getKey()",
          "1831:         if (colKey) {",
          "1832:           resizableData[colKey] = column.renderWidth",
          "1833:         }",
          "1834:       }",
          "1835:       if (column.fixed && column.fixed !== column.defaultFixed) {",
          "1836:         const colKey = column.getKey()",
          "1837:         if (colKey) {",
          "1838:           fixedData[colKey] = column.fixed",
          "1839:         }",
          "1840:       }",
          "1841:       if (!checkMethod || checkMethod({ column })) {",
          "1842:         if (!column.visible && column.defaultVisible) {",
          "1843:           const colKey = column.getKey()",
          "1844:           if (colKey) {",
          "1845:             visibleData[colKey] = false",
          "1846:           }",
          "1847:         } else if (column.visible && !column.defaultVisible) {",
          "1848:           const colKey = column.getKey()",
          "1849:           if (colKey) {",
          "1850:             visibleData[colKey] = true",
          "1851:           }",
          "1852:         }",
          "1853:       }",
          "1854:     })",
          "1855:     return storeData",
          "1856:   },",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     customConfig: {",
          "62:       allowFixed: true,",
          "63:       allowSort: true,",
          "67:     },",
          "",
          "[Removed Lines]",
          "64:       showFooter: true",
          "",
          "[Added Lines]",
          "62:       allowVisible: true,",
          "63:       allowResizable: true,",
          "66:       showFooter: true,",
          "67:       placement: 'topRight'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:     leaveDelay: 300",
          "274:   },",
          "275:   pager: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     pageSizePlacement: 'top'",
          "",
          "---------------"
        ],
        "styles/custom.scss||styles/custom.scss": [
          "File: styles/custom.scss -> styles/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: .vxe-table-custom-wrapper {",
          "55:   display: none;",
          "56:   position: absolute;",
          "57:   top: 1px;",
          "58:   right: 2px;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   flex-direction: column;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   border: 1px solid $vxe-table-border-color;",
          "63:   border-radius: $vxe-border-radius;",
          "64:   box-shadow: $vxe-base-popup-box-shadow;",
          "65:   &.is--active {",
          "67:   }",
          "68: }",
          "70: .vxe-table-custom--list-wrapper {",
          "71:   display: block;",
          "72: }",
          "74: .vxe-table-custom--header,",
          "75: .vxe-table-custom--body {",
          "76:   list-style-type: none;",
          "79:   margin: 0;",
          "80:   padding: 0;",
          "81:   & > li {",
          "82:     max-width: 26em;",
          "84:     padding: 0.2em 1em 0.2em 1em;",
          "85:     @for $i from 2 through 8 {",
          "86:       $interval: $i - 1 + 0.2;",
          "",
          "[Removed Lines]",
          "66:     display: block;",
          "77:   overflow-x: hidden;",
          "78:   overflow-y: auto;",
          "83:     min-width: 18em;",
          "",
          "[Added Lines]",
          "66:   &.placement--top-left {",
          "67:     top: 2px;",
          "68:     left: 2px;",
          "69:   }",
          "70:   &.placement--top-right {",
          "71:     top: 2px;",
          "72:     right: 2px;",
          "73:   }",
          "74:   &.placement--bottom-left {",
          "75:     bottom: 2px;",
          "76:     left: 2px;",
          "77:   }",
          "78:   &.placement--bottom-right {",
          "79:     bottom: 2px;",
          "80:     right: 2px;",
          "81:   }",
          "82:   &.placement--left {",
          "83:     left: 2px;",
          "84:   }",
          "85:   &.placement--right {",
          "86:     right: 2px;",
          "87:   }",
          "88:   &.placement--left,",
          "89:   &.placement--right {",
          "90:     top: 2px;",
          "91:     height: calc(100% - 4px);",
          "92:   }",
          "94:     display: flex;",
          "100:   flex-grow: 1;",
          "101:   overflow-x: hidden;",
          "102:   overflow-y: auto;",
          "112:     min-width: 17em;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: }",
          "97: .vxe-table-custom--header {",
          "98:   padding: 0.28em 0;",
          "99:   font-weight: 700;",
          "100:   border-bottom: 1px solid $vxe-table-popup-border-color;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:   flex-shrink: 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104: .vxe-table-custom--body {",
          "105:   padding: 0.2em 0;",
          "107:   .vxe-table-custom--checkbox-option {",
          "108:     &:hover {",
          "109:       background-color: $vxe-table-row-hover-background-color;",
          "",
          "[Removed Lines]",
          "106:   max-height: 20em;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114: .vxe-table-custom--footer {",
          "115:   display: flex;",
          "116:   flex-direction: row;",
          "117:   border-top: 1px solid $vxe-table-popup-border-color;",
          "118:   text-align: right;",
          "119:   button {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   flex-shrink: 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:   position: relative;",
          "277:   &.col--sort,",
          "278:   &.col--visible,",
          "279:   &.col--fixed {",
          "280:     text-align: center;",
          "281:   }",
          "282: }",
          "284: .vxe-table-custom-popup--row {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:   &.col--resizable,",
          "313:   &.col--resizable {",
          "314:     & > .vxe-input {",
          "315:       width: 100%;",
          "316:     }",
          "317:   }",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032:       padding-left: 0.5em;",
          "1033:     }",
          "1034:   }",
          "1035:   .vxe-body--expanded-column {",
          "1036:     border-bottom: $vxe-table-border-width solid $vxe-table-border-color;",
          "1037:     &.col--ellipsis {",
          "1038:       & > .vxe-body--expanded-cell {",
          "1039:         overflow: hidden;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035:   .vxe-body--expanded-row {",
          "1036:     &.is--padding {",
          "1037:       & > .vxe-body--expanded-column {",
          "1038:         & > .vxe-body--expanded-cell {",
          "1039:           padding: $vxe-table-expand-padding-default;",
          "1040:         }",
          "1041:       }",
          "1042:     }",
          "1043:   }",
          "1046:     border-right: $vxe-table-border-width solid $vxe-table-border-color;",
          "",
          "---------------"
        ],
        "styles/variable.scss||styles/variable.scss": [
          "File: styles/variable.scss -> styles/variable.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: $vxe-table-cell-active-area-border-color: $vxe-table-cell-area-border-color !default;",
          "114: $vxe-table-cell-area-background-color: rgba(64,158,255,0.2) !default;",
          "116: $vxe-table-checkbox-range-border-width: 1px !default;",
          "117: $vxe-table-checkbox-range-border-color: #006af1 !default;",
          "118: $vxe-table-checkbox-range-background-color: rgba(50,128,252,0.2) !default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: $vxe-table-expand-padding-default: 16px !default;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d95fe776dcd8c7321d46657449b7e0227cc6eb02",
      "candidate_info": {
        "commit_hash": "d95fe776dcd8c7321d46657449b7e0227cc6eb02",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/d95fe776dcd8c7321d46657449b7e0227cc6eb02",
        "files": [
          "packages/table/src/methods.js",
          "styles/modules.scss"
        ],
        "message": "fix \u4fee\u590d\u5217\u987a\u5e8f\u66f4\u65b0\u9519\u8bef\u95ee\u9898",
        "before_after_code_files": [
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "styles/modules.scss||styles/modules.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1843:         columnWidthStorage = XEUtils.isPlainObject(columnSortStorageMap[id]) ? columnSortStorageMap[id] : {}",
          "1845:         collectColumn.forEach(column => {",
          "1851:           }",
          "1852:         })",
          "1853:       }",
          "",
          "[Removed Lines]",
          "1846:           if (column.sortNumber !== column.renderSortNumber) {",
          "1847:             const colKey = column.getKey()",
          "1848:             if (colKey) {",
          "1849:               columnWidthStorage[colKey] = column.renderSortNumber",
          "1850:             }",
          "",
          "[Added Lines]",
          "1846:           const colKey = column.getKey()",
          "1847:           if (colKey) {",
          "1848:             columnWidthStorage[colKey] = column.renderSortNumber",
          "",
          "---------------"
        ],
        "styles/modules.scss||styles/modules.scss": [
          "File: styles/modules.scss -> styles/modules.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @import './input.scss';",
          "21: @import './textarea.scss';",
          "22: @import './button.scss';",
          "23: @import './modal.scss';",
          "24: @import './tooltip.scss';",
          "25: @import './form.scss';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: @import './button-group.scss';",
          "",
          "---------------"
        ]
      }
    }
  ]
}