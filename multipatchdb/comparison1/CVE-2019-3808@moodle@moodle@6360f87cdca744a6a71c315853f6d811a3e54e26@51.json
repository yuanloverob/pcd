{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49f2581ef875943b22de81f81b0a1c1b5430cd3f",
      "candidate_info": {
        "commit_hash": "49f2581ef875943b22de81f81b0a1c1b5430cd3f",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/49f2581ef875943b22de81f81b0a1c1b5430cd3f",
        "files": [
          "version.php"
        ],
        "message": "Moodle release 3.7rc2",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_RC;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019051400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7rc1 (Build: 20190514)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019051600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7rc2 (Build: 20190516)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "246149f0590cff4ea8630911be0ff8987a2244a6",
      "candidate_info": {
        "commit_hash": "246149f0590cff4ea8630911be0ff8987a2244a6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/246149f0590cff4ea8630911be0ff8987a2244a6",
        "files": [
          "mod/assign/classes/event/course_module_viewed.php",
          "mod/assign/locallib.php",
          "mod/assign/tests/events_test.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-53035-master' of git://github.com/vmdef/moodle",
        "before_after_code_files": [
          "mod/assign/classes/event/course_module_viewed.php||mod/assign/classes/event/course_module_viewed.php",
          "mod/assign/locallib.php||mod/assign/locallib.php",
          "mod/assign/tests/events_test.php||mod/assign/tests/events_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/assign/classes/event/course_module_viewed.php||mod/assign/classes/event/course_module_viewed.php": [
          "File: mod/assign/classes/event/course_module_viewed.php -> mod/assign/classes/event/course_module_viewed.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace mod_assign\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: global $CFG;",
          "39: class course_module_viewed extends \\core\\event\\course_module_viewed {",
          "44:     protected function init() {",
          "45:         $this->data['crud'] = 'r';",
          "46:         $this->data['edulevel'] = self::LEVEL_PARTICIPATING;",
          "47:         $this->data['objecttable'] = 'assign';",
          "48:     }",
          "53:     public static function get_objectid_mapping() {",
          "54:         return array('db' => 'assign', 'restore' => 'assign');",
          "55:     }",
          "56: }",
          "",
          "---------------"
        ],
        "mod/assign/locallib.php||mod/assign/locallib.php": [
          "File: mod/assign/locallib.php -> mod/assign/locallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8754:     }",
          "8761:     public function set_module_viewed() {",
          "8762:         $completion = new completion_info($this->get_course());",
          "8763:         $completion->set_module_viewed($this->get_course_module());",
          "8764:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8766:         $assigninstance = $this->get_instance();",
          "8767:         $event = \\mod_assign\\event\\course_module_viewed::create(array(",
          "8768:                 'objectid' => $assigninstance->id,",
          "8769:                 'context' => $this->get_context()",
          "8770:         ));",
          "8772:         $event->add_record_snapshot('assign', $assigninstance);",
          "8773:         $event->trigger();",
          "",
          "---------------"
        ],
        "mod/assign/tests/events_test.php||mod/assign/tests/events_test.php": [
          "File: mod/assign/tests/events_test.php -> mod/assign/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323:         $this->assertEquals(context_module::instance($cm->id), $event->get_context());",
          "1324:         $this->assertEventContextNotUsed($event);",
          "1325:     }",
          "1326: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1330:     public function test_course_module_viewed() {",
          "1331:         $this->resetAfterTest();",
          "1333:         $course = $this->getDataGenerator()->create_course();",
          "1334:         $assign = $this->create_instance($course);",
          "1336:         $context = $assign->get_context();",
          "1338:         $params = array(",
          "1339:             'context' => $context,",
          "1340:             'objectid' => $assign->get_instance()->id",
          "1341:         );",
          "1343:         $event = \\mod_assign\\event\\course_module_viewed::create($params);",
          "1346:         $sink = $this->redirectEvents();",
          "1347:         $event->trigger();",
          "1348:         $events = $sink->get_events();",
          "1349:         $this->assertCount(1, $events);",
          "1350:         $event = reset($events);",
          "1353:         $this->assertInstanceOf('\\mod_assign\\event\\course_module_viewed', $event);",
          "1354:         $this->assertEquals($context, $event->get_context());",
          "1355:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111301.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018111301.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6ca9ca691f2ca7574c8025617da8355b7dbd4e7",
      "candidate_info": {
        "commit_hash": "f6ca9ca691f2ca7574c8025617da8355b7dbd4e7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f6ca9ca691f2ca7574c8025617da8355b7dbd4e7",
        "files": [
          "group/externallib.php",
          "group/tests/externallib_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-44137_add_update-groups_webservice' of https://github.com/TheVirtualLtd/moodle",
        "before_after_code_files": [
          "group/externallib.php||group/externallib.php",
          "group/tests/externallib_test.php||group/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "group/externallib.php||group/externallib.php": [
          "File: group/externallib.php -> group/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:         );",
          "1487:     }",
          "1489: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1495:     public static function update_groups_parameters() {",
          "1496:         return new external_function_parameters(",
          "1497:             array(",
          "1498:                 'groups' => new external_multiple_structure(",
          "1499:                     new external_single_structure(",
          "1500:                         array(",
          "1501:                             'id' => new external_value(PARAM_INT, 'ID of the group'),",
          "1502:                             'name' => new external_value(PARAM_TEXT, 'multilang compatible name, course unique'),",
          "1503:                             'description' => new external_value(PARAM_RAW, 'group description text', VALUE_OPTIONAL),",
          "1504:                             'descriptionformat' => new external_format_value('description', VALUE_DEFAULT),",
          "1505:                             'enrolmentkey' => new external_value(PARAM_RAW, 'group enrol secret phrase', VALUE_OPTIONAL),",
          "1506:                             'idnumber' => new external_value(PARAM_RAW, 'id number', VALUE_OPTIONAL)",
          "1507:                         )",
          "1508:                     ), 'List of group objects. A group is found by the id, then all other details provided will be updated.'",
          "1509:                 )",
          "1510:             )",
          "1511:         );",
          "1512:     }",
          "1521:     public static function update_groups($groups) {",
          "1522:         global $CFG, $DB;",
          "1523:         require_once(\"$CFG->dirroot/group/lib.php\");",
          "1525:         $params = self::validate_parameters(self::update_groups_parameters(), array('groups' => $groups));",
          "1527:         $transaction = $DB->start_delegated_transaction();",
          "1529:         foreach ($params['groups'] as $group) {",
          "1530:             $group = (object)$group;",
          "1532:             if (trim($group->name) == '') {",
          "1533:                 throw new invalid_parameter_exception('Invalid group name');",
          "1534:             }",
          "1536:             if (! $currentgroup = $DB->get_record('groups', array('id' => $group->id))) {",
          "1537:                 throw new invalid_parameter_exception(\"Group $group->id does not exist\");",
          "1538:             }",
          "1541:             if ($group->name != $currentgroup->name and",
          "1542:                     $DB->get_record('groups', array('courseid' => $currentgroup->courseid, 'name' => $group->name))) {",
          "1543:                 throw new invalid_parameter_exception('A different group with the same name already exists in the course');",
          "1544:             }",
          "1546:             $group->courseid = $currentgroup->courseid;",
          "1549:             $context = context_course::instance($group->courseid);",
          "1550:             try {",
          "1551:                 self::validate_context($context);",
          "1552:             } catch (Exception $e) {",
          "1553:                 $exceptionparam = new sdtClass();",
          "1554:                 $exceptionparam->message = $e->getMessage();",
          "1555:                 $exceptionparam->courseid = $group->courseid;",
          "1556:                 throw new moodle_exception('errorcoursecontextnotvalid', 'webservice', '', $exceptionparam);",
          "1557:             }",
          "1558:             require_capability('moodle/course:managegroups', $context);",
          "1560:             if (!empty($group->description)) {",
          "1561:                 $group->descriptionformat = external_validate_format($group->descriptionformat);",
          "1562:             }",
          "1564:             groups_update_group($group);",
          "1565:         }",
          "1567:         $transaction->allow_commit();",
          "1569:         return null;",
          "1570:     }",
          "1578:     public static function update_groups_returns() {",
          "1579:         return null;",
          "1580:     }",
          "",
          "---------------"
        ],
        "group/tests/externallib_test.php||group/tests/externallib_test.php": [
          "File: group/tests/externallib_test.php -> group/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         $froups = core_group_external::create_groups(array($group4));",
          "116:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     public function test_update_groups() {",
          "124:         global $DB;",
          "126:         $this->resetAfterTest(true);",
          "128:         $course = self::getDataGenerator()->create_course();",
          "130:         $group1data = array();",
          "131:         $group1data['courseid'] = $course->id;",
          "132:         $group1data['name'] = 'Group Test 1';",
          "133:         $group1data['description'] = 'Group Test 1 description';",
          "134:         $group1data['descriptionformat'] = FORMAT_MOODLE;",
          "135:         $group1data['enrolmentkey'] = 'Test group enrol secret phrase';",
          "136:         $group1data['idnumber'] = 'TEST1';",
          "137:         $group2data = array();",
          "138:         $group2data['courseid'] = $course->id;",
          "139:         $group2data['name'] = 'Group Test 2';",
          "140:         $group2data['description'] = 'Group Test 2 description';",
          "141:         $group2data['idnumber'] = 'TEST2';",
          "144:         $context = context_course::instance($course->id);",
          "145:         $roleid = $this->assignUserCapability('moodle/course:managegroups', $context->id);",
          "146:         $this->assignUserCapability('moodle/course:view', $context->id, $roleid);",
          "149:         $group1 = self::getDataGenerator()->create_group($group1data);",
          "150:         $group2 = self::getDataGenerator()->create_group($group2data);",
          "152:         $group1data['id'] = $group1->id;",
          "153:         unset($group1data['courseid']);",
          "154:         $group2data['id'] = $group2->id;",
          "155:         unset($group2data['courseid']);",
          "158:         $group1data['idnumber'] = 'CHANGED';",
          "159:         core_group_external::update_groups(array($group1data));",
          "160:         $group2data['description'] = 'Group Test 2 description CHANGED';",
          "161:         core_group_external::update_groups(array($group2data));",
          "163:         foreach ([$group1, $group2] as $group) {",
          "164:             $dbgroup = $DB->get_record('groups', array('id' => $group->id), '*', MUST_EXIST);",
          "165:             switch ($dbgroup->name) {",
          "166:                 case $group1data['name']:",
          "167:                     $this->assertEquals($dbgroup->idnumber, $group1data['idnumber']);",
          "168:                     $groupdescription = $group1data['description'];",
          "169:                     break;",
          "170:                 case $group2data['name']:",
          "171:                     $this->assertEquals($dbgroup->idnumber, $group2data['idnumber']);",
          "172:                     $groupdescription = $group2data['description'];",
          "173:                     break;",
          "174:                 default:",
          "175:                     throw new moodle_exception('unknowngroupname');",
          "176:                     break;",
          "177:             }",
          "178:             $this->assertEquals($dbgroup->description, $groupdescription);",
          "179:         }",
          "182:         $group1data['idnumber'] = 'TEST2';",
          "183:         try {",
          "184:             $groups = core_group_external::update_groups(array($group1data));",
          "185:             $this->fail('Exception expected due to already existing idnumber.');",
          "186:         } catch (moodle_exception $e) {",
          "187:             $this->assertInstanceOf('moodle_exception', $e);",
          "188:             $this->assertEquals(get_string('idnumbertaken', 'error'), $e->getMessage());",
          "189:         }",
          "192:         $group1data['idnumber'] = 'TEST1';",
          "193:         $this->unassignUserCapability('moodle/course:managegroups', $context->id, $roleid);",
          "194:         $groups = core_group_external::update_groups(array($group1data));",
          "195:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:         'description' => 'Updates existing groupings',",
          "848:         'type' => 'write',",
          "849:     ),",
          "850:     'core_message_block_user' => array(",
          "851:         'classname' => 'core_message_external',",
          "852:         'methodname' => 'block_user',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "850:     'core_group_update_groups' => array(",
          "851:         'classname' => 'core_group_external',",
          "852:         'methodname' => 'update_groups',",
          "853:         'classpath' => 'group/externallib.php',",
          "854:         'description' => 'Updates existing groups.',",
          "855:         'type' => 'write',",
          "856:         'capabilities' => 'moodle/course:managegroups'",
          "857:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018110300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018110500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2c1cbd40a50cccc92eb9379bed139c506cfb1cb",
      "candidate_info": {
        "commit_hash": "c2c1cbd40a50cccc92eb9379bed139c506cfb1cb",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c2c1cbd40a50cccc92eb9379bed139c506cfb1cb",
        "files": [
          "admin/settings/server.php",
          "lang/en/admin.php",
          "lib/classes/task/logmanager.php",
          "lib/moodlelib.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-66570-master' of git://github.com/andrewnicols/moodle",
        "before_after_code_files": [
          "admin/settings/server.php||admin/settings/server.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/classes/task/logmanager.php||lib/classes/task/logmanager.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/server.php||admin/settings/server.php": [
          "File: admin/settings/server.php -> admin/settings/server.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:         ]",
          "272:     )",
          "273: );",
          "275: if (\\core\\task\\logmanager::uses_standard_settings()) {",
          "276:     $temp->add(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274: $temp->add(",
          "275:     new admin_setting_configcheckbox(",
          "276:         'task_logtostdout',",
          "277:         new lang_string('task_logtostdout', 'admin'),",
          "278:         new lang_string('task_logtostdout_desc', 'admin'),",
          "279:         1",
          "280:     )",
          "281: );",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1213: $string['task_logretention_desc'] = 'The maximum period that logs should be kept for. This setting interacts with the \\'Retain runs\\' setting: whichever is reached first will apply';",
          "1214: $string['task_logretainruns'] = 'Retain runs';",
          "1215: $string['task_logretainruns_desc'] = 'The number of runs of each task to retain. This setting interacts with the \\'Retention period\\' setting: whichever is reached first will apply.';",
          "1216: $string['task_type:adhoc'] = 'Ad hoc';",
          "1217: $string['task_type:scheduled'] = 'Scheduled';",
          "1218: $string['task_result:failed'] = 'Fail';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1216: $string['task_logtostdout'] = 'Display log output';",
          "1217: $string['task_logtostdout_desc'] = 'When jobs are running and the output is captured, whether the captured output should also be displayed as the task runs.';",
          "",
          "---------------"
        ],
        "lib/classes/task/logmanager.php||lib/classes/task/logmanager.php": [
          "File: lib/classes/task/logmanager.php -> lib/classes/task/logmanager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     protected static $oblevel = null;",
          "84:     public static function start_logging(task_base $task) {",
          "87:         if (!self::should_log()) {",
          "88:             return;",
          "",
          "[Removed Lines]",
          "85:         global $DB;",
          "",
          "[Added Lines]",
          "82:     protected static $outputloggedcontent = true;",
          "90:         global $CFG, $DB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:             self::$oblevel = null;",
          "130:         }",
          "133:         ob_start([\\core\\task\\logmanager::class, 'add_line'], self::CHUNKSIZE);",
          "134:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:         self::$outputloggedcontent = !empty($CFG->task_logtostdout);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:             fwrite(self::$fh, $log);",
          "337:         }",
          "340:     }",
          "341: }",
          "",
          "[Removed Lines]",
          "339:         return $log;",
          "",
          "[Added Lines]",
          "346:         if (self::$outputloggedcontent) {",
          "347:             return $log;",
          "348:         } else {",
          "349:             return '';",
          "350:         }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9090:         $fn($string, $eol);",
          "9091:         return;",
          "9092:     } else if (defined('STDOUT') && !PHPUNIT_TEST && !defined('BEHAT_TEST')) {",
          "9098:     } else {",
          "9099:         echo $string . $eol;",
          "9100:     }",
          "",
          "[Removed Lines]",
          "9093:         fwrite(STDOUT, $string.$eol);",
          "9097:         \\core\\task\\logmanager::add_line(\"{$string}{$eol}\");",
          "",
          "[Added Lines]",
          "9095:         if ($output = \\core\\task\\logmanager::add_line(\"{$string}{$eol}\")) {",
          "9096:             fwrite(STDOUT, $output);",
          "9097:         }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019092000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019092000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1b4ca921e8317195a78a6ca35eae27d0bec2828",
      "candidate_info": {
        "commit_hash": "d1b4ca921e8317195a78a6ca35eae27d0bec2828",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d1b4ca921e8317195a78a6ca35eae27d0bec2828",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.5dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018020800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180208)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018021600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5dev (Build: 20180216)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}