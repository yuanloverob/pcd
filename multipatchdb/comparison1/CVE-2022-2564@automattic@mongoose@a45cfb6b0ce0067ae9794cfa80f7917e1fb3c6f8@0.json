{
  "cve_id": "CVE-2022-2564",
  "cve_desc": "Prototype Pollution in GitHub repository automattic/mongoose prior to 6.4.6.",
  "repo": "automattic/mongoose",
  "patch_hash": "a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8",
  "patch_info": {
    "commit_hash": "a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8",
    "repo": "automattic/mongoose",
    "commit_url": "https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8",
    "files": [
      "lib/schema.js",
      "test/schema.test.js"
    ],
    "message": "fix(schema): disallow setting __proto__ when creating schema with dotted properties\n\nFix #12085",
    "before_after_code_files": [
      "lib/schema.js||lib/schema.js",
      "test/schema.test.js||test/schema.test.js"
    ]
  },
  "patch_diff": {
    "lib/schema.js||lib/schema.js": [
      "File: lib/schema.js -> lib/schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "554:   const keys = Object.keys(obj);",
      "555:   const typeKey = this.options.typeKey;",
      "556:   for (const key of keys) {",
      "557:     const fullPath = prefix + key;",
      "558:     const val = obj[key];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "557:     if (utils.specialProperties.has(key)) {",
      "558:       continue;",
      "559:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "854:   let fullPath = '';",
      "856:   for (const sub of subpaths) {",
      "857:     fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;",
      "858:     if (!branch[sub]) {",
      "859:       this.nested[fullPath] = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "861:     if (utils.specialProperties.has(sub)) {",
      "862:       throw new Error('Cannot set special property `' + sub + '` on a schema');",
      "863:     }",
      "",
      "---------------"
    ],
    "test/schema.test.js||test/schema.test.js": [
      "File: test/schema.test.js -> test/schema.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2792:       });",
      "2793:     }, /Cannot use schema-level projections.*subdocument_mapping.not_selected/);",
      "2794:   });",
      "2795: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2796:   it('disallows setting special properties with `add()` or constructor (gh-12085)', async function() {",
      "2797:     const maliciousPayload = '{\"__proto__.toString\": \"Number\"}';",
      "2799:     assert.throws(() => {",
      "2800:       mongoose.Schema(JSON.parse(maliciousPayload));",
      "2801:     }, /__proto__/);",
      "2803:     assert.ok({}.toString());",
      "2804:   });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6a197316564742c0422309e1b5fecfa4faec126e",
      "candidate_info": {
        "commit_hash": "6a197316564742c0422309e1b5fecfa4faec126e",
        "repo": "automattic/mongoose",
        "commit_url": "https://github.com/automattic/mongoose/commit/6a197316564742c0422309e1b5fecfa4faec126e",
        "files": [
          "lib/schema.js",
          "test/schema.test.js"
        ],
        "message": "fix(schema): disallow setting __proto__ when creating schema with dotted properties\n\nFix #12085",
        "before_after_code_files": [
          "lib/schema.js||lib/schema.js",
          "test/schema.test.js||test/schema.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "lib/schema.js||lib/schema.js",
            "test/schema.test.js||test/schema.test.js"
          ],
          "candidate": [
            "lib/schema.js||lib/schema.js",
            "test/schema.test.js||test/schema.test.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/schema.js||lib/schema.js": [
          "File: lib/schema.js -> lib/schema.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:   const keys = Object.keys(obj);",
          "480:   for (const key of keys) {",
          "481:     const fullPath = prefix + key;",
          "483:     if (obj[key] == null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     if (utils.specialProperties.has(key)) {",
          "482:       continue;",
          "483:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "663:   let fullPath = '';",
          "665:   for (const sub of subpaths) {",
          "666:     fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;",
          "667:     if (!branch[sub]) {",
          "668:       this.nested[fullPath] = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:     if (utils.specialProperties.has(sub)) {",
          "671:       throw new Error('Cannot set special property `' + sub + '` on a schema');",
          "672:     }",
          "",
          "---------------"
        ],
        "test/schema.test.js||test/schema.test.js": [
          "File: test/schema.test.js -> test/schema.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2682:     assert.equal(TestSchema.path('testprop.$*').instance, 'Number');",
          "2683:     assert.equal(TestSchema.path('testprop.$*').options.ref, 'OtherModel');",
          "2684:   });",
          "2685: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2686:   it('disallows setting special properties with `add()` or constructor (gh-12085)', async function() {",
          "2687:     const maliciousPayload = '{\"__proto__.toString\": \"Number\"}';",
          "2689:     assert.throws(() => {",
          "2690:       mongoose.Schema(JSON.parse(maliciousPayload));",
          "2691:     }, /__proto__/);",
          "2693:     assert.ok({}.toString());",
          "2694:   });",
          "",
          "---------------"
        ]
      }
    }
  ]
}