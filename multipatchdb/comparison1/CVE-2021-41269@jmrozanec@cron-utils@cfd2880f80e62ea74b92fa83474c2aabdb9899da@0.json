{
  "cve_id": "CVE-2021-41269",
  "cve_desc": "cron-utils is a Java library to define, parse, validate, migrate crons as well as get human readable descriptions for them. In affected versions A template Injection was identified in cron-utils enabling attackers to inject arbitrary Java EL expressions, leading to unauthenticated Remote Code Execution (RCE) vulnerability. Versions up to 9.1.2 are susceptible to this vulnerability. Please note, that only projects using the @Cron annotation to validate untrusted Cron expressions are affected. The issue was patched and a new version was released. Please upgrade to version 9.1.6. There are no known workarounds known.",
  "repo": "jmrozanec/cron-utils",
  "patch_hash": "cfd2880f80e62ea74b92fa83474c2aabdb9899da",
  "patch_info": {
    "commit_hash": "cfd2880f80e62ea74b92fa83474c2aabdb9899da",
    "repo": "jmrozanec/cron-utils",
    "commit_url": "https://github.com/jmrozanec/cron-utils/commit/cfd2880f80e62ea74b92fa83474c2aabdb9899da",
    "files": [
      "src/main/java/com/cronutils/parser/CronParser.java",
      "src/test/java/com/cronutils/Issue418Test.java",
      "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
      "src/test/java/com/cronutils/validation/CronValidatorTest.java"
    ],
    "message": "Merge pull request #494 from NielsDoucet/RCE-fix\n\nResolve RCE vulnerability.",
    "before_after_code_files": [
      "src/main/java/com/cronutils/parser/CronParser.java||src/main/java/com/cronutils/parser/CronParser.java",
      "src/test/java/com/cronutils/Issue418Test.java||src/test/java/com/cronutils/Issue418Test.java",
      "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java||src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
      "src/test/java/com/cronutils/validation/CronValidatorTest.java||src/test/java/com/cronutils/validation/CronValidatorTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/cronutils/parser/CronParser.java||src/main/java/com/cronutils/parser/CronParser.java": [
      "File: src/main/java/com/cronutils/parser/CronParser.java -> src/main/java/com/cronutils/parser/CronParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "128:                 }",
      "129:                 return new SingleCron(cronDefinition, results).validate();",
      "130:             } catch (final IllegalArgumentException e) {",
      "132:             }",
      "133:         }",
      "134:     }",
      "",
      "[Removed Lines]",
      "131:                 throw new IllegalArgumentException(String.format(\"Failed to parse '%s'. %s\", expression, e.getMessage()), e);",
      "",
      "[Added Lines]",
      "131:                 throw new IllegalArgumentException(String.format(\"Failed to parse cron expression. %s\", e.getMessage()), e);",
      "",
      "---------------"
    ],
    "src/test/java/com/cronutils/Issue418Test.java||src/test/java/com/cronutils/Issue418Test.java": [
      "File: src/test/java/com/cronutils/Issue418Test.java -> src/test/java/com/cronutils/Issue418Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import com.cronutils.model.definition.CronDefinitionBuilder;",
      "6: import com.cronutils.model.time.ExecutionTime;",
      "7: import com.cronutils.parser.CronParser;",
      "8: import org.junit.Test;",
      "10: import java.time.LocalDate;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: import org.hamcrest.core.StringEndsWith;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: import java.time.ZonedDateTime;",
      "14: import java.util.Optional;",
      "19: public class Issue418Test {",
      "",
      "[Removed Lines]",
      "16: import static org.junit.Assert.assertEquals;",
      "17: import static org.junit.Assert.fail;",
      "",
      "[Added Lines]",
      "17: import static org.hamcrest.core.StringEndsWith.endsWith;",
      "18: import static org.junit.Assert.*;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "59:             parser.parse(\"0 0 2 ? * 0/7 *\");",
      "60:             fail(\"Expected exception for invalid expression\");",
      "61:         } catch (IllegalArgumentException expected) {",
      "63:         }",
      "64:     }",
      "",
      "[Removed Lines]",
      "62:             assertEquals(\"Failed to parse '0 0 2 ? * 0/7 *'. Value 0 not in range [1, 7]\", expected.getMessage());",
      "",
      "[Added Lines]",
      "63:             assertThat(expected.getMessage(), endsWith(\"Value 0 not in range [1, 7]\"));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:             parser.parse(\"0 0 2 ? * 1/8 *\");",
      "72:             fail(\"Expected exception for invalid expression\");",
      "73:         } catch (IllegalArgumentException expected) {",
      "75:         }",
      "76:     }",
      "77: }",
      "",
      "[Removed Lines]",
      "74:             assertEquals(\"Failed to parse '0 0 2 ? * 1/8 *'. Period 8 not in range [1, 7]\", expected.getMessage());",
      "",
      "[Added Lines]",
      "75:             assertThat(expected.getMessage(), endsWith(\"Period 8 not in range [1, 7]\"));",
      "",
      "---------------"
    ],
    "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java||src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java": [
      "File: src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java -> src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import com.cronutils.model.definition.CronDefinitionBuilder;",
      "21: import com.cronutils.model.field.expression.FieldExpressionFactory;",
      "22: import com.cronutils.model.time.ExecutionTime;",
      "23: import org.junit.Before;",
      "24: import org.junit.Rule;",
      "25: import org.junit.Test;",
      "26: import org.junit.rules.ExpectedException;",
      "28: import java.time.ZonedDateTime;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import org.hamcrest.core.StringEndsWith;",
      "27: import org.junit.internal.matchers.ThrowableMessageMatcher;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: import java.util.Optional;",
      "32: import static org.junit.Assert.*;",
      "34: public class CronParserQuartzIntegrationTest {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "248:     public void testMissingExpressionAndInvalidCharsInErrorMessage() {",
      "249:         thrown.expect(IllegalArgumentException.class);",
      "250:         final String cronexpression = \"* * -1 * * ?\";",
      "254:         assertNotNull(ExecutionTime.forCron(parser.parse(cronexpression)));",
      "255:     }",
      "",
      "[Removed Lines]",
      "251:         thrown.expectMessage(",
      "252:                 String.format(\"Failed to parse '%s'. Invalid expression! Expression: -1 does not describe a range. Negative numbers are not allowed.\",",
      "253:                         cronexpression));",
      "",
      "[Added Lines]",
      "254:         thrown.expect(hasMessage(StringEndsWith.endsWith(\"Invalid expression! Expression: -1 does not describe a range. Negative numbers are not allowed.\")));",
      "",
      "---------------"
    ],
    "src/test/java/com/cronutils/validation/CronValidatorTest.java||src/test/java/com/cronutils/validation/CronValidatorTest.java": [
      "File: src/test/java/com/cronutils/validation/CronValidatorTest.java -> src/test/java/com/cronutils/validation/CronValidatorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import org.junit.Test;",
      "5: import org.junit.runner.RunWith;",
      "6: import org.junit.runners.Parameterized;",
      "8: import javax.validation.ConstraintViolation;",
      "9: import javax.validation.Validation;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: import org.slf4j.Logger;",
      "8: import org.slf4j.LoggerFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: @RunWith(Parameterized.class)",
      "17: public class CronValidatorTest {",
      "19:     private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();",
      "21:     private final String expression;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:     private static final Logger LOGGER = LoggerFactory.getLogger(CronValidatorTest.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "38:                 {\"0 0 0 25 12 ?\", true},",
      "39:                 {\"0 0 0 L 12 ?\", false},",
      "40:                 {\"1,2, * * * * *\", false},",
      "42:         };",
      "43:     }",
      "",
      "[Removed Lines]",
      "41:                 {\"1- * * * * *\", false}",
      "",
      "[Added Lines]",
      "45:                 {\"1- * * * * *\", false},",
      "47:                 {\"java.lang.Runtime.getRuntime().exec('touch /tmp/pwned'); // 4 5 [${''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval(validatedValue)}]\", false}",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "46:     public void validateExamples() {",
      "47:         TestPojo testPojo = new TestPojo(expression);",
      "48:         Set<ConstraintViolation<TestPojo>> violations = validator.validate(testPojo);",
      "50:         if (valid) {",
      "51:             assertTrue(violations.isEmpty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:         violations.stream().map(ConstraintViolation::getMessage).forEach(LOGGER::info);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9c93c17b8107e58073443a045e22274467b88aae",
      "candidate_info": {
        "commit_hash": "9c93c17b8107e58073443a045e22274467b88aae",
        "repo": "jmrozanec/cron-utils",
        "commit_url": "https://github.com/jmrozanec/cron-utils/commit/9c93c17b8107e58073443a045e22274467b88aae",
        "files": [
          "src/main/java/com/cronutils/parser/CronParser.java",
          "src/test/java/com/cronutils/Issue418Test.java",
          "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
          "src/test/java/com/cronutils/validation/CronValidatorTest.java"
        ],
        "message": "Resolve RCE vulnerability.\n\nMake tests a bit more resilient to exception message changes.\n\nfixes #461",
        "before_after_code_files": [
          "src/main/java/com/cronutils/parser/CronParser.java||src/main/java/com/cronutils/parser/CronParser.java",
          "src/test/java/com/cronutils/Issue418Test.java||src/test/java/com/cronutils/Issue418Test.java",
          "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java||src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
          "src/test/java/com/cronutils/validation/CronValidatorTest.java||src/test/java/com/cronutils/validation/CronValidatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jmrozanec/cron-utils/pull/494"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/com/cronutils/parser/CronParser.java||src/main/java/com/cronutils/parser/CronParser.java",
            "src/test/java/com/cronutils/Issue418Test.java||src/test/java/com/cronutils/Issue418Test.java",
            "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java||src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
            "src/test/java/com/cronutils/validation/CronValidatorTest.java||src/test/java/com/cronutils/validation/CronValidatorTest.java"
          ],
          "candidate": [
            "src/main/java/com/cronutils/parser/CronParser.java||src/main/java/com/cronutils/parser/CronParser.java",
            "src/test/java/com/cronutils/Issue418Test.java||src/test/java/com/cronutils/Issue418Test.java",
            "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java||src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
            "src/test/java/com/cronutils/validation/CronValidatorTest.java||src/test/java/com/cronutils/validation/CronValidatorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/cronutils/parser/CronParser.java||src/main/java/com/cronutils/parser/CronParser.java": [
          "File: src/main/java/com/cronutils/parser/CronParser.java -> src/main/java/com/cronutils/parser/CronParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:                 }",
          "129:                 return new SingleCron(cronDefinition, results).validate();",
          "130:             } catch (final IllegalArgumentException e) {",
          "132:             }",
          "133:         }",
          "134:     }",
          "",
          "[Removed Lines]",
          "131:                 throw new IllegalArgumentException(String.format(\"Failed to parse '%s'. %s\", expression, e.getMessage()), e);",
          "",
          "[Added Lines]",
          "131:                 throw new IllegalArgumentException(String.format(\"Failed to parse cron expression. %s\", e.getMessage()), e);",
          "",
          "---------------"
        ],
        "src/test/java/com/cronutils/Issue418Test.java||src/test/java/com/cronutils/Issue418Test.java": [
          "File: src/test/java/com/cronutils/Issue418Test.java -> src/test/java/com/cronutils/Issue418Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import com.cronutils.model.definition.CronDefinitionBuilder;",
          "6: import com.cronutils.model.time.ExecutionTime;",
          "7: import com.cronutils.parser.CronParser;",
          "8: import org.junit.Test;",
          "10: import java.time.LocalDate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import org.hamcrest.core.StringEndsWith;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import java.time.ZonedDateTime;",
          "14: import java.util.Optional;",
          "19: public class Issue418Test {",
          "",
          "[Removed Lines]",
          "16: import static org.junit.Assert.assertEquals;",
          "17: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "17: import static org.hamcrest.core.StringEndsWith.endsWith;",
          "18: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:             parser.parse(\"0 0 2 ? * 0/7 *\");",
          "60:             fail(\"Expected exception for invalid expression\");",
          "61:         } catch (IllegalArgumentException expected) {",
          "63:         }",
          "64:     }",
          "",
          "[Removed Lines]",
          "62:             assertEquals(\"Failed to parse '0 0 2 ? * 0/7 *'. Value 0 not in range [1, 7]\", expected.getMessage());",
          "",
          "[Added Lines]",
          "63:             assertThat(expected.getMessage(), endsWith(\"Value 0 not in range [1, 7]\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:             parser.parse(\"0 0 2 ? * 1/8 *\");",
          "72:             fail(\"Expected exception for invalid expression\");",
          "73:         } catch (IllegalArgumentException expected) {",
          "75:         }",
          "76:     }",
          "77: }",
          "",
          "[Removed Lines]",
          "74:             assertEquals(\"Failed to parse '0 0 2 ? * 1/8 *'. Period 8 not in range [1, 7]\", expected.getMessage());",
          "",
          "[Added Lines]",
          "75:             assertThat(expected.getMessage(), endsWith(\"Period 8 not in range [1, 7]\"));",
          "",
          "---------------"
        ],
        "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java||src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java": [
          "File: src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java -> src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import com.cronutils.model.definition.CronDefinitionBuilder;",
          "21: import com.cronutils.model.field.expression.FieldExpressionFactory;",
          "22: import com.cronutils.model.time.ExecutionTime;",
          "23: import org.junit.Before;",
          "24: import org.junit.Rule;",
          "25: import org.junit.Test;",
          "26: import org.junit.rules.ExpectedException;",
          "28: import java.time.ZonedDateTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.hamcrest.core.StringEndsWith;",
          "27: import org.junit.internal.matchers.ThrowableMessageMatcher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import java.util.Optional;",
          "32: import static org.junit.Assert.*;",
          "34: public class CronParserQuartzIntegrationTest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     public void testMissingExpressionAndInvalidCharsInErrorMessage() {",
          "249:         thrown.expect(IllegalArgumentException.class);",
          "250:         final String cronexpression = \"* * -1 * * ?\";",
          "254:         assertNotNull(ExecutionTime.forCron(parser.parse(cronexpression)));",
          "255:     }",
          "",
          "[Removed Lines]",
          "251:         thrown.expectMessage(",
          "252:                 String.format(\"Failed to parse '%s'. Invalid expression! Expression: -1 does not describe a range. Negative numbers are not allowed.\",",
          "253:                         cronexpression));",
          "",
          "[Added Lines]",
          "254:         thrown.expect(hasMessage(StringEndsWith.endsWith(\"Invalid expression! Expression: -1 does not describe a range. Negative numbers are not allowed.\")));",
          "",
          "---------------"
        ],
        "src/test/java/com/cronutils/validation/CronValidatorTest.java||src/test/java/com/cronutils/validation/CronValidatorTest.java": [
          "File: src/test/java/com/cronutils/validation/CronValidatorTest.java -> src/test/java/com/cronutils/validation/CronValidatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import org.junit.Test;",
          "5: import org.junit.runner.RunWith;",
          "6: import org.junit.runners.Parameterized;",
          "8: import javax.validation.ConstraintViolation;",
          "9: import javax.validation.Validation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import org.slf4j.Logger;",
          "8: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: @RunWith(Parameterized.class)",
          "17: public class CronValidatorTest {",
          "19:     private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();",
          "21:     private final String expression;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     private static final Logger LOGGER = LoggerFactory.getLogger(CronValidatorTest.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:                 {\"0 0 0 25 12 ?\", true},",
          "39:                 {\"0 0 0 L 12 ?\", false},",
          "40:                 {\"1,2, * * * * *\", false},",
          "42:         };",
          "43:     }",
          "",
          "[Removed Lines]",
          "41:                 {\"1- * * * * *\", false}",
          "",
          "[Added Lines]",
          "45:                 {\"1- * * * * *\", false},",
          "47:                 {\"java.lang.Runtime.getRuntime().exec('touch /tmp/pwned'); // 4 5 [${''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval(validatedValue)}]\", false}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46:     public void validateExamples() {",
          "47:         TestPojo testPojo = new TestPojo(expression);",
          "48:         Set<ConstraintViolation<TestPojo>> violations = validator.validate(testPojo);",
          "50:         if (valid) {",
          "51:             assertTrue(violations.isEmpty());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:         violations.stream().map(ConstraintViolation::getMessage).forEach(LOGGER::info);",
          "",
          "---------------"
        ]
      }
    }
  ]
}