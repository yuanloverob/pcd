{
  "cve_id": "CVE-2021-4040",
  "cve_desc": "A flaw was found in AMQ Broker. This issue can cause a partial interruption to the availability of AMQ Broker via an Out of memory (OOM) condition. This flaw allows an attacker to partially disrupt availability to the broker through a sustained attack of maliciously crafted messages. The highest threat from this vulnerability is system availability.",
  "repo": "apache/activemq-artemis",
  "patch_hash": "153d2e9a979aead8dff95fbc91d659ecc7d0fb82",
  "patch_info": {
    "commit_hash": "153d2e9a979aead8dff95fbc91d659ecc7d0fb82",
    "repo": "apache/activemq-artemis",
    "commit_url": "https://github.com/apache/activemq-artemis/pull/3871/commits/153d2e9a979aead8dff95fbc91d659ecc7d0fb82",
    "files": [
      "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
      "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
      "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
      "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
      "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
    ],
    "message": "ARTEMIS-3593 Defense against OME on parsing XID\n\nCo-authored-by: Viktor Kolomeyko <Viktor.Kolomeyko@r3.com>",
    "before_after_code_files": [
      "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
      "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
      "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
      "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
      "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
    ]
  },
  "patch_diff": {
    "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java": [
      "File: artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java -> artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: package org.apache.activemq.artemis.api.core;",
      "23: public class ActiveMQInvalidBufferException extends RuntimeException {",
      "24:    private static final long serialVersionUID = 7048111433271717514L;",
      "26:    public ActiveMQInvalidBufferException(String message) {",
      "27:       super(message);",
      "28:    }",
      "29: }",
      "",
      "---------------"
    ],
    "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java": [
      "File: artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java -> artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.activemq.artemis.utils;",
      "19: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
      "20: import org.apache.activemq.artemis.api.core.SimpleString;",
      "21: import org.apache.activemq.artemis.logs.ActiveMQUtilBundle;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import org.apache.activemq.artemis.api.core.ActiveMQInvalidBufferException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "183:       return DataConstants.SIZE_INT + sizeOfSimpleString(s);",
      "184:    }",
      "185: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "188:    public static byte[] safeReadBytes(final ActiveMQBuffer in) {",
      "189:       final int claimedSize = in.readInt();",
      "191:       if (claimedSize < 0) {",
      "192:          throw new ActiveMQInvalidBufferException(\"Payload size cannot be negative\");",
      "193:       }",
      "195:       final int readableBytes = in.readableBytes();",
      "198:       if (claimedSize > readableBytes) {",
      "199:          throw new ActiveMQInvalidBufferException(\"Attempted to read: \" + claimedSize +",
      "200:                                           \" which exceeds overall readable buffer size of: \" + readableBytes);",
      "201:       }",
      "202:       final byte[] byteBuffer = new byte[claimedSize];",
      "203:       in.readBytes(byteBuffer);",
      "204:       return byteBuffer;",
      "205:    }",
      "",
      "---------------"
    ],
    "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java": [
      "File: artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java -> artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
      "22: import org.apache.activemq.artemis.core.transaction.impl.XidImpl;",
      "27:    public static void encodeXid(final Xid xid, final ActiveMQBuffer out) {",
      "28:       out.writeInt(xid.getFormatId());",
      "",
      "[Removed Lines]",
      "24: public class XidCodecSupport {",
      "",
      "[Added Lines]",
      "24: import static org.apache.activemq.artemis.utils.BufferHelper.safeReadBytes;",
      "26: public class XidCodecSupport {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:    public static Xid decodeXid(final ActiveMQBuffer in) {",
      "36:       int formatID = in.readInt();",
      "41:       return new XidImpl(bq, formatID, gtxid);",
      "42:    }",
      "",
      "[Removed Lines]",
      "37:       byte[] bq = new byte[in.readInt()];",
      "38:       in.readBytes(bq);",
      "39:       byte[] gtxid = new byte[in.readInt()];",
      "40:       in.readBytes(gtxid);",
      "",
      "[Added Lines]",
      "38:       byte[] bq = safeReadBytes(in);",
      "39:       byte[] gtxid = safeReadBytes(in);",
      "",
      "---------------"
    ],
    "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java": [
      "File: artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java -> artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: package org.apache.activemq.artemis.util;",
      "20: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
      "21: import org.apache.activemq.artemis.api.core.ActiveMQBuffers;",
      "22: import org.apache.activemq.artemis.core.transaction.impl.XidImpl;",
      "23: import org.apache.activemq.artemis.utils.UUIDGenerator;",
      "24: import org.apache.activemq.artemis.utils.XidCodecSupport;",
      "25: import org.apache.activemq.artemis.api.core.ActiveMQInvalidBufferException;",
      "26: import org.junit.Test;",
      "28: import javax.transaction.xa.Xid;",
      "30: import static org.hamcrest.MatcherAssert.assertThat;",
      "31: import static org.hamcrest.Matchers.equalTo;",
      "32: import static org.junit.Assert.fail;",
      "34: public class XidCodecSupportTest {",
      "36:    private static final Xid VALID_XID =",
      "37:          new XidImpl(\"xa1\".getBytes(), 1, UUIDGenerator.getInstance().generateStringUUID().getBytes());",
      "39:    @Test",
      "40:    public void testEncodeDecode() {",
      "41:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
      "42:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
      "44:       assertThat(buffer.readableBytes(), equalTo(51)); // formatId(4) + branchQualLength(4) + branchQual(3) +",
      "47:       final Xid readXid = XidCodecSupport.decodeXid(buffer);",
      "48:       assertThat(readXid, equalTo(VALID_XID));",
      "49:    }",
      "51:    @Test",
      "52:    public void testNegativeLength() {",
      "53:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
      "54:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
      "56:       buffer.setByte(4, (byte) 0xFF);",
      "57:       try {",
      "58:          XidCodecSupport.decodeXid(buffer);",
      "59:          fail(\"Should have thrown\");",
      "60:       } catch (ActiveMQInvalidBufferException ex) {",
      "61:          return;",
      "62:       }",
      "64:       fail(\"should have thrown exception\");",
      "65:    }",
      "67:    @Test(expected = ActiveMQInvalidBufferException.class)",
      "68:    public void testOverflowLength() {",
      "69:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
      "70:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
      "72:       buffer.setByte(11, (byte) 0x0C);",
      "74:       XidCodecSupport.decodeXid(buffer);",
      "75:    }",
      "76: }",
      "",
      "---------------"
    ],
    "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java": [
      "File: tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java -> tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.activemq.artemis.tests.integration.client;",
      "19: import javax.transaction.xa.XAResource;",
      "20: import javax.transaction.xa.Xid;",
      "21: import java.util.HashMap;",
      "22: import java.util.Map;",
      "23: import java.util.concurrent.atomic.AtomicInteger;",
      "25: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
      "26: import org.apache.activemq.artemis.api.core.ActiveMQBuffers;",
      "27: import org.apache.activemq.artemis.api.core.ActiveMQException;",
      "28: import org.apache.activemq.artemis.api.core.QueueConfiguration;",
      "29: import org.apache.activemq.artemis.api.core.SimpleString;",
      "30: import org.apache.activemq.artemis.api.core.client.ClientConsumer;",
      "31: import org.apache.activemq.artemis.api.core.client.ClientMessage;",
      "32: import org.apache.activemq.artemis.api.core.client.ClientProducer;",
      "33: import org.apache.activemq.artemis.api.core.client.ClientSession;",
      "34: import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;",
      "35: import org.apache.activemq.artemis.api.core.client.ServerLocator;",
      "36: import org.apache.activemq.artemis.api.core.client.SessionFailureListener;",
      "37: import org.apache.activemq.artemis.core.client.impl.ClientSessionImpl;",
      "38: import org.apache.activemq.artemis.core.config.Configuration;",
      "39: import org.apache.activemq.artemis.core.protocol.core.Channel;",
      "40: import org.apache.activemq.artemis.core.protocol.core.impl.ActiveMQSessionContext;",
      "41: import org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;",
      "42: import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionXAPrepareMessage;",
      "43: import org.apache.activemq.artemis.core.server.ActiveMQServer;",
      "44: import org.apache.activemq.artemis.core.settings.impl.AddressSettings;",
      "45: import org.apache.activemq.artemis.tests.util.ActiveMQTestBase;",
      "46: import org.apache.activemq.artemis.utils.Wait;",
      "47: import org.apache.activemq.artemis.utils.XidCodecSupport;",
      "48: import org.jboss.logging.Logger;",
      "49: import org.junit.Assert;",
      "50: import org.junit.Before;",
      "51: import org.junit.Test;",
      "53: public class InvalidCoreClientTest extends ActiveMQTestBase {",
      "55:    private static final Logger log = Logger.getLogger(InvalidCoreClientTest.class);",
      "57:    private final Map<String, AddressSettings> addressSettings = new HashMap<>();",
      "58:    private final SimpleString atestq = new SimpleString(\"BasicXaTestq\");",
      "59:    private ActiveMQServer messagingService;",
      "60:    private ClientSession clientSession;",
      "61:    private ClientSessionFactory sessionFactory;",
      "62:    private Configuration configuration;",
      "63:    private ServerLocator locator;",
      "65:    @Override",
      "66:    @Before",
      "67:    public void setUp() throws Exception {",
      "68:       super.setUp();",
      "70:       addressSettings.clear();",
      "72:       configuration = createDefaultNettyConfig();",
      "74:       messagingService = createServer(true, configuration, -1, -1, addressSettings);",
      "77:       messagingService.start();",
      "79:       locator = createInVMNonHALocator();",
      "80:       sessionFactory = createSessionFactory(locator);",
      "82:       clientSession = addClientSession(sessionFactory.createSession(true, false, false));",
      "84:       clientSession.createQueue(new QueueConfiguration(atestq));",
      "85:    }",
      "87:    @Test",
      "88:    public void testInvalidBufferXIDInvalidSize() throws Exception {",
      "89:       internalTestInvalidXID(false);",
      "90:    }",
      "92:    @Test",
      "93:    public void testInvalidBufferXIDNegative() throws Exception {",
      "94:       internalTestInvalidXID(true);",
      "95:    }",
      "97:    private void internalTestInvalidXID(boolean useNegative) throws Exception {",
      "99:       ClientSession clientSession2 = sessionFactory.createSession(false, true, true);",
      "100:       ClientProducer clientProducer = clientSession2.createProducer(atestq);",
      "101:       ClientMessage m1 = createTextMessage(clientSession2, \"m1\");",
      "102:       clientProducer.send(m1);",
      "104:       Xid xid = newXID();",
      "105:       clientSession.start(xid, XAResource.TMNOFLAGS);",
      "106:       clientSession.start();",
      "108:       ClientConsumer clientConsumer = clientSession.createConsumer(atestq);",
      "110:       ClientMessage message = clientConsumer.receive(5000);",
      "111:       message.acknowledge();",
      "112:       clientSession.end(xid, XAResource.TMSUCCESS);",
      "113:       Channel channel = ((ActiveMQSessionContext) (((ClientSessionImpl) clientSession).getSessionContext())).getSessionChannel();",
      "115:       AtomicInteger connFailure = new AtomicInteger(0);",
      "116:       clientSession.addFailureListener(new SessionFailureListener() {",
      "117:          @Override",
      "118:          public void beforeReconnect(ActiveMQException exception) {",
      "120:          }",
      "122:          @Override",
      "123:          public void connectionFailed(ActiveMQException exception, boolean failedOver) {",
      "125:          }",
      "127:          @Override",
      "128:          public void connectionFailed(ActiveMQException exception, boolean failedOver, String scaleDownTargetNodeID) {",
      "129:             connFailure.incrementAndGet();",
      "130:          }",
      "131:       });",
      "133:       SessionXAPrepareMessage packet = new SessionXAPrepareMessage(xid) {",
      "134:          @Override",
      "135:          public void encodeRest(final ActiveMQBuffer buffer) {",
      "137:             ActiveMQBuffer bufferTmp = ActiveMQBuffers.dynamicBuffer(255);",
      "139:             XidCodecSupport.encodeXid(xid, bufferTmp);",
      "140:             if (useNegative) {",
      "141:                bufferTmp.setByte(4, (byte) 0x0F);",
      "142:             } else {",
      "143:                bufferTmp.setByte(4, (byte) 0xFF);",
      "144:             }",
      "145:             byte[] bytes = new byte[bufferTmp.readableBytes()];",
      "146:             bufferTmp.readBytes(bytes);",
      "147:             buffer.writeBytes(bytes);",
      "148:          }",
      "149:       };",
      "151:       try {",
      "152:          channel.sendBlocking(packet, PacketImpl.SESS_XA_RESP);",
      "153:          Assert.fail(\"Failure expected\");",
      "154:       } catch (Exception failed) {",
      "155:       }",
      "158:       Wait.assertEquals(1, connFailure::get);",
      "160:    }",
      "161: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72a4fff1673477d78a85c415d48a2c74afda81fa",
      "candidate_info": {
        "commit_hash": "72a4fff1673477d78a85c415d48a2c74afda81fa",
        "repo": "apache/activemq-artemis",
        "commit_url": "https://github.com/apache/activemq-artemis/commit/72a4fff1673477d78a85c415d48a2c74afda81fa",
        "files": [
          "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
          "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
          "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
        ],
        "message": "ARTEMIS-3593 Defense against OME on parsing XID\n\nCo-authored-by: Viktor Kolomeyko <Viktor.Kolomeyko@r3.com>",
        "before_after_code_files": [
          "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
          "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
          "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
            "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
            "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
          ],
          "candidate": [
            "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
            "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
            "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
          ]
        }
      },
      "candidate_diff": {
        "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java": [
          "File: artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java -> artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.activemq.artemis.api.core;",
          "23: public class ActiveMQInvalidBufferException extends RuntimeException {",
          "24:    private static final long serialVersionUID = 7048111433271717514L;",
          "26:    public ActiveMQInvalidBufferException(String message) {",
          "27:       super(message);",
          "28:    }",
          "29: }",
          "",
          "---------------"
        ],
        "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java": [
          "File: artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java -> artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.activemq.artemis.utils;",
          "19: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "20: import org.apache.activemq.artemis.api.core.SimpleString;",
          "21: import org.apache.activemq.artemis.logs.ActiveMQUtilBundle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.apache.activemq.artemis.api.core.ActiveMQInvalidBufferException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:       return DataConstants.SIZE_INT + sizeOfSimpleString(s);",
          "184:    }",
          "185: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:    public static byte[] safeReadBytes(final ActiveMQBuffer in) {",
          "189:       final int claimedSize = in.readInt();",
          "191:       if (claimedSize < 0) {",
          "192:          throw new ActiveMQInvalidBufferException(\"Payload size cannot be negative\");",
          "193:       }",
          "195:       final int readableBytes = in.readableBytes();",
          "198:       if (claimedSize > readableBytes) {",
          "199:          throw new ActiveMQInvalidBufferException(\"Attempted to read: \" + claimedSize +",
          "200:                                           \" which exceeds overall readable buffer size of: \" + readableBytes);",
          "201:       }",
          "202:       final byte[] byteBuffer = new byte[claimedSize];",
          "203:       in.readBytes(byteBuffer);",
          "204:       return byteBuffer;",
          "205:    }",
          "",
          "---------------"
        ],
        "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java": [
          "File: artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java -> artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "22: import org.apache.activemq.artemis.core.transaction.impl.XidImpl;",
          "27:    public static void encodeXid(final Xid xid, final ActiveMQBuffer out) {",
          "28:       out.writeInt(xid.getFormatId());",
          "",
          "[Removed Lines]",
          "24: public class XidCodecSupport {",
          "",
          "[Added Lines]",
          "24: import static org.apache.activemq.artemis.utils.BufferHelper.safeReadBytes;",
          "26: public class XidCodecSupport {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:    public static Xid decodeXid(final ActiveMQBuffer in) {",
          "36:       int formatID = in.readInt();",
          "41:       return new XidImpl(bq, formatID, gtxid);",
          "42:    }",
          "",
          "[Removed Lines]",
          "37:       byte[] bq = new byte[in.readInt()];",
          "38:       in.readBytes(bq);",
          "39:       byte[] gtxid = new byte[in.readInt()];",
          "40:       in.readBytes(gtxid);",
          "",
          "[Added Lines]",
          "38:       byte[] bq = safeReadBytes(in);",
          "39:       byte[] gtxid = safeReadBytes(in);",
          "",
          "---------------"
        ],
        "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java": [
          "File: artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java -> artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.activemq.artemis.util;",
          "20: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "21: import org.apache.activemq.artemis.api.core.ActiveMQBuffers;",
          "22: import org.apache.activemq.artemis.core.transaction.impl.XidImpl;",
          "23: import org.apache.activemq.artemis.utils.UUIDGenerator;",
          "24: import org.apache.activemq.artemis.utils.XidCodecSupport;",
          "25: import org.apache.activemq.artemis.api.core.ActiveMQInvalidBufferException;",
          "26: import org.junit.Test;",
          "28: import javax.transaction.xa.Xid;",
          "30: import static org.hamcrest.MatcherAssert.assertThat;",
          "31: import static org.hamcrest.Matchers.equalTo;",
          "32: import static org.junit.Assert.fail;",
          "34: public class XidCodecSupportTest {",
          "36:    private static final Xid VALID_XID =",
          "37:          new XidImpl(\"xa1\".getBytes(), 1, UUIDGenerator.getInstance().generateStringUUID().getBytes());",
          "39:    @Test",
          "40:    public void testEncodeDecode() {",
          "41:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
          "42:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
          "44:       assertThat(buffer.readableBytes(), equalTo(51)); // formatId(4) + branchQualLength(4) + branchQual(3) +",
          "47:       final Xid readXid = XidCodecSupport.decodeXid(buffer);",
          "48:       assertThat(readXid, equalTo(VALID_XID));",
          "49:    }",
          "51:    @Test",
          "52:    public void testNegativeLength() {",
          "53:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
          "54:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
          "56:       buffer.setByte(4, (byte) 0xFF);",
          "57:       try {",
          "58:          XidCodecSupport.decodeXid(buffer);",
          "59:          fail(\"Should have thrown\");",
          "60:       } catch (ActiveMQInvalidBufferException ex) {",
          "61:          return;",
          "62:       }",
          "64:       fail(\"should have thrown exception\");",
          "65:    }",
          "67:    @Test(expected = ActiveMQInvalidBufferException.class)",
          "68:    public void testOverflowLength() {",
          "69:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
          "70:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
          "72:       buffer.setByte(11, (byte) 0x0C);",
          "74:       XidCodecSupport.decodeXid(buffer);",
          "75:    }",
          "76: }",
          "",
          "---------------"
        ],
        "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java": [
          "File: tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java -> tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.artemis.tests.integration.client;",
          "19: import javax.transaction.xa.XAResource;",
          "20: import javax.transaction.xa.Xid;",
          "21: import java.util.HashMap;",
          "22: import java.util.Map;",
          "23: import java.util.concurrent.atomic.AtomicInteger;",
          "25: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "26: import org.apache.activemq.artemis.api.core.ActiveMQBuffers;",
          "27: import org.apache.activemq.artemis.api.core.ActiveMQException;",
          "28: import org.apache.activemq.artemis.api.core.QueueConfiguration;",
          "29: import org.apache.activemq.artemis.api.core.SimpleString;",
          "30: import org.apache.activemq.artemis.api.core.client.ClientConsumer;",
          "31: import org.apache.activemq.artemis.api.core.client.ClientMessage;",
          "32: import org.apache.activemq.artemis.api.core.client.ClientProducer;",
          "33: import org.apache.activemq.artemis.api.core.client.ClientSession;",
          "34: import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;",
          "35: import org.apache.activemq.artemis.api.core.client.ServerLocator;",
          "36: import org.apache.activemq.artemis.api.core.client.SessionFailureListener;",
          "37: import org.apache.activemq.artemis.core.client.impl.ClientSessionImpl;",
          "38: import org.apache.activemq.artemis.core.config.Configuration;",
          "39: import org.apache.activemq.artemis.core.protocol.core.Channel;",
          "40: import org.apache.activemq.artemis.core.protocol.core.impl.ActiveMQSessionContext;",
          "41: import org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;",
          "42: import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionXAPrepareMessage;",
          "43: import org.apache.activemq.artemis.core.server.ActiveMQServer;",
          "44: import org.apache.activemq.artemis.core.settings.impl.AddressSettings;",
          "45: import org.apache.activemq.artemis.tests.util.ActiveMQTestBase;",
          "46: import org.apache.activemq.artemis.utils.Wait;",
          "47: import org.apache.activemq.artemis.utils.XidCodecSupport;",
          "48: import org.jboss.logging.Logger;",
          "49: import org.junit.Assert;",
          "50: import org.junit.Before;",
          "51: import org.junit.Test;",
          "53: public class InvalidCoreClientTest extends ActiveMQTestBase {",
          "55:    private static final Logger log = Logger.getLogger(InvalidCoreClientTest.class);",
          "57:    private final Map<String, AddressSettings> addressSettings = new HashMap<>();",
          "58:    private final SimpleString atestq = new SimpleString(\"BasicXaTestq\");",
          "59:    private ActiveMQServer messagingService;",
          "60:    private ClientSession clientSession;",
          "61:    private ClientSessionFactory sessionFactory;",
          "62:    private Configuration configuration;",
          "63:    private ServerLocator locator;",
          "65:    @Override",
          "66:    @Before",
          "67:    public void setUp() throws Exception {",
          "68:       super.setUp();",
          "70:       addressSettings.clear();",
          "72:       configuration = createDefaultNettyConfig();",
          "74:       messagingService = createServer(true, configuration, -1, -1, addressSettings);",
          "77:       messagingService.start();",
          "79:       locator = createInVMNonHALocator();",
          "80:       sessionFactory = createSessionFactory(locator);",
          "82:       clientSession = addClientSession(sessionFactory.createSession(true, false, false));",
          "84:       clientSession.createQueue(new QueueConfiguration(atestq));",
          "85:    }",
          "87:    @Test",
          "88:    public void testInvalidBufferXIDInvalidSize() throws Exception {",
          "89:       internalTestInvalidXID(false);",
          "90:    }",
          "92:    @Test",
          "93:    public void testInvalidBufferXIDNegative() throws Exception {",
          "94:       internalTestInvalidXID(true);",
          "95:    }",
          "97:    private void internalTestInvalidXID(boolean useNegative) throws Exception {",
          "99:       ClientSession clientSession2 = sessionFactory.createSession(false, true, true);",
          "100:       ClientProducer clientProducer = clientSession2.createProducer(atestq);",
          "101:       ClientMessage m1 = createTextMessage(clientSession2, \"m1\");",
          "102:       clientProducer.send(m1);",
          "104:       Xid xid = newXID();",
          "105:       clientSession.start(xid, XAResource.TMNOFLAGS);",
          "106:       clientSession.start();",
          "108:       ClientConsumer clientConsumer = clientSession.createConsumer(atestq);",
          "110:       ClientMessage message = clientConsumer.receive(5000);",
          "111:       message.acknowledge();",
          "112:       clientSession.end(xid, XAResource.TMSUCCESS);",
          "113:       Channel channel = ((ActiveMQSessionContext) (((ClientSessionImpl) clientSession).getSessionContext())).getSessionChannel();",
          "115:       AtomicInteger connFailure = new AtomicInteger(0);",
          "116:       clientSession.addFailureListener(new SessionFailureListener() {",
          "117:          @Override",
          "118:          public void beforeReconnect(ActiveMQException exception) {",
          "120:          }",
          "122:          @Override",
          "123:          public void connectionFailed(ActiveMQException exception, boolean failedOver) {",
          "125:          }",
          "127:          @Override",
          "128:          public void connectionFailed(ActiveMQException exception, boolean failedOver, String scaleDownTargetNodeID) {",
          "129:             connFailure.incrementAndGet();",
          "130:          }",
          "131:       });",
          "133:       SessionXAPrepareMessage packet = new SessionXAPrepareMessage(xid) {",
          "134:          @Override",
          "135:          public void encodeRest(final ActiveMQBuffer buffer) {",
          "137:             ActiveMQBuffer bufferTmp = ActiveMQBuffers.dynamicBuffer(255);",
          "139:             XidCodecSupport.encodeXid(xid, bufferTmp);",
          "140:             if (useNegative) {",
          "141:                bufferTmp.setByte(4, (byte) 0x0F);",
          "142:             } else {",
          "143:                bufferTmp.setByte(4, (byte) 0xFF);",
          "144:             }",
          "145:             byte[] bytes = new byte[bufferTmp.readableBytes()];",
          "146:             bufferTmp.readBytes(bytes);",
          "147:             buffer.writeBytes(bytes);",
          "148:          }",
          "149:       };",
          "151:       try {",
          "152:          channel.sendBlocking(packet, PacketImpl.SESS_XA_RESP);",
          "153:          Assert.fail(\"Failure expected\");",
          "154:       } catch (Exception failed) {",
          "155:       }",
          "158:       Wait.assertEquals(1, connFailure::get);",
          "160:    }",
          "161: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6af80fa33058a755d02daa4d3ccf168646880b37",
      "candidate_info": {
        "commit_hash": "6af80fa33058a755d02daa4d3ccf168646880b37",
        "repo": "apache/activemq-artemis",
        "commit_url": "https://github.com/apache/activemq-artemis/commit/6af80fa33058a755d02daa4d3ccf168646880b37",
        "files": [
          "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
          "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
          "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
        ],
        "message": "ARTEMIS-3593 Defense against OME on parsing XID\n\nCo-authored-by: Viktor Kolomeyko <Viktor.Kolomeyko@r3.com>\n(cherry picked from commit 72a4fff1673477d78a85c415d48a2c74afda81fa)",
        "before_after_code_files": [
          "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
          "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
          "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
          "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
            "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
            "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
          ],
          "candidate": [
            "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
            "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
            "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
            "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java"
          ]
        }
      },
      "candidate_diff": {
        "artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java||artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java": [
          "File: artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java -> artemis-commons/src/main/java/org/apache/activemq/artemis/api/core/ActiveMQInvalidBufferException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.activemq.artemis.api.core;",
          "23: public class ActiveMQInvalidBufferException extends RuntimeException {",
          "24:    private static final long serialVersionUID = 7048111433271717514L;",
          "26:    public ActiveMQInvalidBufferException(String message) {",
          "27:       super(message);",
          "28:    }",
          "29: }",
          "",
          "---------------"
        ],
        "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java": [
          "File: artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java -> artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/BufferHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.activemq.artemis.utils;",
          "19: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "20: import org.apache.activemq.artemis.api.core.SimpleString;",
          "21: import org.apache.activemq.artemis.logs.ActiveMQUtilBundle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.apache.activemq.artemis.api.core.ActiveMQInvalidBufferException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:       return DataConstants.SIZE_INT + sizeOfSimpleString(s);",
          "184:    }",
          "185: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:    public static byte[] safeReadBytes(final ActiveMQBuffer in) {",
          "189:       final int claimedSize = in.readInt();",
          "191:       if (claimedSize < 0) {",
          "192:          throw new ActiveMQInvalidBufferException(\"Payload size cannot be negative\");",
          "193:       }",
          "195:       final int readableBytes = in.readableBytes();",
          "198:       if (claimedSize > readableBytes) {",
          "199:          throw new ActiveMQInvalidBufferException(\"Attempted to read: \" + claimedSize +",
          "200:                                           \" which exceeds overall readable buffer size of: \" + readableBytes);",
          "201:       }",
          "202:       final byte[] byteBuffer = new byte[claimedSize];",
          "203:       in.readBytes(byteBuffer);",
          "204:       return byteBuffer;",
          "205:    }",
          "",
          "---------------"
        ],
        "artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java||artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java": [
          "File: artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java -> artemis-core-client/src/main/java/org/apache/activemq/artemis/utils/XidCodecSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "22: import org.apache.activemq.artemis.core.transaction.impl.XidImpl;",
          "27:    public static void encodeXid(final Xid xid, final ActiveMQBuffer out) {",
          "28:       out.writeInt(xid.getFormatId());",
          "",
          "[Removed Lines]",
          "24: public class XidCodecSupport {",
          "",
          "[Added Lines]",
          "24: import static org.apache.activemq.artemis.utils.BufferHelper.safeReadBytes;",
          "26: public class XidCodecSupport {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:    public static Xid decodeXid(final ActiveMQBuffer in) {",
          "36:       int formatID = in.readInt();",
          "41:       return new XidImpl(bq, formatID, gtxid);",
          "42:    }",
          "",
          "[Removed Lines]",
          "37:       byte[] bq = new byte[in.readInt()];",
          "38:       in.readBytes(bq);",
          "39:       byte[] gtxid = new byte[in.readInt()];",
          "40:       in.readBytes(gtxid);",
          "",
          "[Added Lines]",
          "38:       byte[] bq = safeReadBytes(in);",
          "39:       byte[] gtxid = safeReadBytes(in);",
          "",
          "---------------"
        ],
        "artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java||artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java": [
          "File: artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java -> artemis-core-client/src/test/java/org/apache/activemq/artemis/util/XidCodecSupportTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.activemq.artemis.util;",
          "20: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "21: import org.apache.activemq.artemis.api.core.ActiveMQBuffers;",
          "22: import org.apache.activemq.artemis.core.transaction.impl.XidImpl;",
          "23: import org.apache.activemq.artemis.utils.UUIDGenerator;",
          "24: import org.apache.activemq.artemis.utils.XidCodecSupport;",
          "25: import org.apache.activemq.artemis.api.core.ActiveMQInvalidBufferException;",
          "26: import org.junit.Test;",
          "28: import javax.transaction.xa.Xid;",
          "30: import static org.hamcrest.MatcherAssert.assertThat;",
          "31: import static org.hamcrest.Matchers.equalTo;",
          "32: import static org.junit.Assert.fail;",
          "34: public class XidCodecSupportTest {",
          "36:    private static final Xid VALID_XID =",
          "37:          new XidImpl(\"xa1\".getBytes(), 1, UUIDGenerator.getInstance().generateStringUUID().getBytes());",
          "39:    @Test",
          "40:    public void testEncodeDecode() {",
          "41:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
          "42:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
          "44:       assertThat(buffer.readableBytes(), equalTo(51)); // formatId(4) + branchQualLength(4) + branchQual(3) +",
          "47:       final Xid readXid = XidCodecSupport.decodeXid(buffer);",
          "48:       assertThat(readXid, equalTo(VALID_XID));",
          "49:    }",
          "51:    @Test",
          "52:    public void testNegativeLength() {",
          "53:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
          "54:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
          "56:       buffer.setByte(4, (byte) 0xFF);",
          "57:       try {",
          "58:          XidCodecSupport.decodeXid(buffer);",
          "59:          fail(\"Should have thrown\");",
          "60:       } catch (ActiveMQInvalidBufferException ex) {",
          "61:          return;",
          "62:       }",
          "64:       fail(\"should have thrown exception\");",
          "65:    }",
          "67:    @Test(expected = ActiveMQInvalidBufferException.class)",
          "68:    public void testOverflowLength() {",
          "69:       final ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(0);",
          "70:       XidCodecSupport.encodeXid(VALID_XID, buffer);",
          "72:       buffer.setByte(11, (byte) 0x0C);",
          "74:       XidCodecSupport.decodeXid(buffer);",
          "75:    }",
          "76: }",
          "",
          "---------------"
        ],
        "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java||tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java": [
          "File: tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java -> tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/client/InvalidCoreClientTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.activemq.artemis.tests.integration.client;",
          "19: import javax.transaction.xa.XAResource;",
          "20: import javax.transaction.xa.Xid;",
          "21: import java.util.HashMap;",
          "22: import java.util.Map;",
          "23: import java.util.concurrent.atomic.AtomicInteger;",
          "25: import org.apache.activemq.artemis.api.core.ActiveMQBuffer;",
          "26: import org.apache.activemq.artemis.api.core.ActiveMQBuffers;",
          "27: import org.apache.activemq.artemis.api.core.ActiveMQException;",
          "28: import org.apache.activemq.artemis.api.core.QueueConfiguration;",
          "29: import org.apache.activemq.artemis.api.core.SimpleString;",
          "30: import org.apache.activemq.artemis.api.core.client.ClientConsumer;",
          "31: import org.apache.activemq.artemis.api.core.client.ClientMessage;",
          "32: import org.apache.activemq.artemis.api.core.client.ClientProducer;",
          "33: import org.apache.activemq.artemis.api.core.client.ClientSession;",
          "34: import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;",
          "35: import org.apache.activemq.artemis.api.core.client.ServerLocator;",
          "36: import org.apache.activemq.artemis.api.core.client.SessionFailureListener;",
          "37: import org.apache.activemq.artemis.core.client.impl.ClientSessionImpl;",
          "38: import org.apache.activemq.artemis.core.config.Configuration;",
          "39: import org.apache.activemq.artemis.core.protocol.core.Channel;",
          "40: import org.apache.activemq.artemis.core.protocol.core.impl.ActiveMQSessionContext;",
          "41: import org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;",
          "42: import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionXAPrepareMessage;",
          "43: import org.apache.activemq.artemis.core.server.ActiveMQServer;",
          "44: import org.apache.activemq.artemis.core.settings.impl.AddressSettings;",
          "45: import org.apache.activemq.artemis.tests.util.ActiveMQTestBase;",
          "46: import org.apache.activemq.artemis.utils.Wait;",
          "47: import org.apache.activemq.artemis.utils.XidCodecSupport;",
          "48: import org.jboss.logging.Logger;",
          "49: import org.junit.Assert;",
          "50: import org.junit.Before;",
          "51: import org.junit.Test;",
          "53: public class InvalidCoreClientTest extends ActiveMQTestBase {",
          "55:    private static final Logger log = Logger.getLogger(InvalidCoreClientTest.class);",
          "57:    private final Map<String, AddressSettings> addressSettings = new HashMap<>();",
          "58:    private final SimpleString atestq = new SimpleString(\"BasicXaTestq\");",
          "59:    private ActiveMQServer messagingService;",
          "60:    private ClientSession clientSession;",
          "61:    private ClientSessionFactory sessionFactory;",
          "62:    private Configuration configuration;",
          "63:    private ServerLocator locator;",
          "65:    @Override",
          "66:    @Before",
          "67:    public void setUp() throws Exception {",
          "68:       super.setUp();",
          "70:       addressSettings.clear();",
          "72:       configuration = createDefaultNettyConfig();",
          "74:       messagingService = createServer(true, configuration, -1, -1, addressSettings);",
          "77:       messagingService.start();",
          "79:       locator = createInVMNonHALocator();",
          "80:       sessionFactory = createSessionFactory(locator);",
          "82:       clientSession = addClientSession(sessionFactory.createSession(true, false, false));",
          "84:       clientSession.createQueue(new QueueConfiguration(atestq));",
          "85:    }",
          "87:    @Test",
          "88:    public void testInvalidBufferXIDInvalidSize() throws Exception {",
          "89:       internalTestInvalidXID(false);",
          "90:    }",
          "92:    @Test",
          "93:    public void testInvalidBufferXIDNegative() throws Exception {",
          "94:       internalTestInvalidXID(true);",
          "95:    }",
          "97:    private void internalTestInvalidXID(boolean useNegative) throws Exception {",
          "99:       ClientSession clientSession2 = sessionFactory.createSession(false, true, true);",
          "100:       ClientProducer clientProducer = clientSession2.createProducer(atestq);",
          "101:       ClientMessage m1 = createTextMessage(clientSession2, \"m1\");",
          "102:       clientProducer.send(m1);",
          "104:       Xid xid = newXID();",
          "105:       clientSession.start(xid, XAResource.TMNOFLAGS);",
          "106:       clientSession.start();",
          "108:       ClientConsumer clientConsumer = clientSession.createConsumer(atestq);",
          "110:       ClientMessage message = clientConsumer.receive(5000);",
          "111:       message.acknowledge();",
          "112:       clientSession.end(xid, XAResource.TMSUCCESS);",
          "113:       Channel channel = ((ActiveMQSessionContext) (((ClientSessionImpl) clientSession).getSessionContext())).getSessionChannel();",
          "115:       AtomicInteger connFailure = new AtomicInteger(0);",
          "116:       clientSession.addFailureListener(new SessionFailureListener() {",
          "117:          @Override",
          "118:          public void beforeReconnect(ActiveMQException exception) {",
          "120:          }",
          "122:          @Override",
          "123:          public void connectionFailed(ActiveMQException exception, boolean failedOver) {",
          "125:          }",
          "127:          @Override",
          "128:          public void connectionFailed(ActiveMQException exception, boolean failedOver, String scaleDownTargetNodeID) {",
          "129:             connFailure.incrementAndGet();",
          "130:          }",
          "131:       });",
          "133:       SessionXAPrepareMessage packet = new SessionXAPrepareMessage(xid) {",
          "134:          @Override",
          "135:          public void encodeRest(final ActiveMQBuffer buffer) {",
          "137:             ActiveMQBuffer bufferTmp = ActiveMQBuffers.dynamicBuffer(255);",
          "139:             XidCodecSupport.encodeXid(xid, bufferTmp);",
          "140:             if (useNegative) {",
          "141:                bufferTmp.setByte(4, (byte) 0x0F);",
          "142:             } else {",
          "143:                bufferTmp.setByte(4, (byte) 0xFF);",
          "144:             }",
          "145:             byte[] bytes = new byte[bufferTmp.readableBytes()];",
          "146:             bufferTmp.readBytes(bytes);",
          "147:             buffer.writeBytes(bytes);",
          "148:          }",
          "149:       };",
          "151:       try {",
          "152:          channel.sendBlocking(packet, PacketImpl.SESS_XA_RESP);",
          "153:          Assert.fail(\"Failure expected\");",
          "154:       } catch (Exception failed) {",
          "155:       }",
          "158:       Wait.assertEquals(1, connFailure::get);",
          "160:    }",
          "161: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}