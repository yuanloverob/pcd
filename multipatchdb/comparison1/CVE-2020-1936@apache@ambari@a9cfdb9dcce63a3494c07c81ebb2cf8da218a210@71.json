{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f15d4b9053e92656af4bcdb10ce3f16dcd5083ad",
      "candidate_info": {
        "commit_hash": "f15d4b9053e92656af4bcdb10ce3f16dcd5083ad",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f15d4b9053e92656af4bcdb10ce3f16dcd5083ad",
        "files": [
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py"
        ],
        "message": "AMBARI-24763. Infra Solr upgrade (2.7.x): ValueError: invalid literal for float() (#2443)\n\n* AMBARI-24763. Infra Solr upgrade (2.7.x): ValueError: invalid literal for float()\n\n* AMBARI-24763. Use setlocale",
        "before_after_code_files": [
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py -> ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "946:   return \"%s %s\" % (formatted_size, suffix)",
          "948: def parse_size(human_size):",
          "949:   units = {\"bytes\": 1, \"KB\": 1024, \"MB\": 1024**2, \"GB\": 1024**3, \"TB\": 1024**4 }",
          "950:   number, unit = [string.strip() for string in human_size.split()]",
          "953: def get_replica_index_size(config, core_url, replica):",
          "954:   request = CORE_DETAILS_URL.format(core_url)",
          "",
          "[Removed Lines]",
          "951:   return int(float(number)*units[unit])",
          "",
          "[Added Lines]",
          "949:   import locale",
          "952:   locale.setlocale(locale.LC_ALL,'')",
          "953:   return int(locale.atof(number)*units[unit])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2076:       print 30 * \"-\"",
          "2077:       print \"Command elapsed time: {0}\".format(time_to_print)",
          "2078:       print 30 * \"-\"",
          "",
          "[Removed Lines]",
          "2079:       print \"Migration helper command {0}FINISHED{1}\".format(colors.OKGREEN, colors.ENDC)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a73d08f288cc5273e574fcf888b2ab2437c44dbf",
      "candidate_info": {
        "commit_hash": "a73d08f288cc5273e574fcf888b2ab2437c44dbf",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a73d08f288cc5273e574fcf888b2ab2437c44dbf",
        "files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/pom.xml",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "ambari-logsearch/ambari-logsearch-server/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java",
          "ambari-logsearch/docker/Dockerfile"
        ],
        "message": "AMBARI-24692 - JDK 11 support for Log Search (#2845)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh||ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh||ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "23: import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;",
          "24: import org.springframework.boot.builder.SpringApplicationBuilder;",
          "27: @SpringBootApplication(",
          "28:   scanBasePackages = {\"org.apache.ambari.logfeeder\"},",
          "",
          "[Removed Lines]",
          "25: import org.springframework.boot.system.ApplicationPidFileWriter;",
          "",
          "[Added Lines]",
          "25: import org.springframework.boot.context.ApplicationPidFileWriter;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh||ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/scripts/logfeeder.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   LOGFEEDER_GC_LOGFILE=\"$LOG_PATH_WITHOUT_SLASH/$LOGFEEDER_GC_LOGFILE\"",
          "81: fi",
          "85: function print_usage() {",
          "86:   cat << EOF",
          "",
          "[Removed Lines]",
          "83: LOGFEEDER_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGFEEDER_GC_LOGFILE\"",
          "",
          "[Added Lines]",
          "83: java_version=$($JVM -version 2>&1 | grep 'version' | cut -d'\"' -f2 | cut -d'.' -f2)",
          "84: if [ $java_version == \"8\" ]; then",
          "85:   LOGFEEDER_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGFEEDER_GC_LOGFILE\"",
          "86: else",
          "87:   LOGFEEDER_GC_OPTS=\"-Xlog:gc*:file=$LOGFEEDER_GC_LOGFILE:time\"",
          "88: fi",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   LOGFEEDER_DEBUG_PORT=${LOGFEEDER_DEBUG_PORT:-\"5006\"}",
          "156:   if [ \"$LOGFEEDER_DEBUG\" = \"true\" ]; then",
          "158:   fi",
          "160:   if [ \"$LOGFEEDER_SSL\" = \"true\" ]; then",
          "",
          "[Removed Lines]",
          "157:     LOGFEEDER_JAVA_OPTS=\"$LOGFEEDER_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGFEEDER_DEBUG_PORT,server=y,suspend=$LOGFEEDER_DEBUG_SUSPEND \"",
          "",
          "[Added Lines]",
          "162:     if [ $java_version == \"8\" ]; then",
          "163:       LOGFEEDER_DEBUG_ADDRESS=$LOGFEEDER_DEBUG_PORT",
          "164:     else",
          "165:       LOGFEEDER_DEBUG_ADDRESS=\"*:$LOGFEEDER_DEBUG_PORT\"",
          "166:     fi",
          "167:     LOGFEEDER_JAVA_OPTS=\"$LOGFEEDER_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGFEEDER_DEBUG_ADDRESS,server=y,suspend=$LOGFEEDER_DEBUG_SUSPEND \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209: }",
          "211: function stop() {",
          "213:   if [ -f \"$LOGFEEDER_PID_FILE\" ]; then",
          "214:     LOGFEEDER_PID=`cat \"$LOGFEEDER_PID_FILE\"`",
          "215:   fi",
          "",
          "[Removed Lines]",
          "212:   LOGFEEDER_STOP_WAIT=3",
          "",
          "[Added Lines]",
          "222:   LOGFEEDER_STOP_WAIT=${LOGFEEDER_STOP_WAIT:-60}",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch;",
          "21: import org.springframework.boot.Banner;",
          "22: import org.springframework.boot.autoconfigure.SpringBootApplication;",
          "23: import org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;",
          "24: import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;",
          "26: import org.springframework.boot.builder.SpringApplicationBuilder;",
          "29: @SpringBootApplication(",
          "30:   scanBasePackages = {\"org.apache.ambari.logsearch\"},",
          "31:   exclude = {",
          "32:     RepositoryRestMvcAutoConfiguration.class,",
          "33:     WebMvcAutoConfiguration.class,",
          "35:   }",
          "36: )",
          "37: public class LogSearch {",
          "",
          "[Removed Lines]",
          "25: import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;",
          "27: import org.springframework.boot.system.ApplicationPidFileWriter;",
          "34:     SolrAutoConfiguration.class",
          "",
          "[Added Lines]",
          "22: import org.springframework.boot.WebApplicationType;",
          "25: import org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration;",
          "27: import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration;",
          "29: import org.springframework.boot.context.ApplicationPidFileWriter;",
          "36:     SolrAutoConfiguration.class,",
          "37:     SolrRepositoriesAutoConfiguration.class",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     new SpringApplicationBuilder(LogSearch.class)",
          "43:       .bannerMode(Banner.Mode.OFF)",
          "44:       .listeners(new ApplicationPidFileWriter(pidFile))",
          "46:       .run(args);",
          "47:   }",
          "",
          "[Removed Lines]",
          "45:       .web(true)",
          "",
          "[Added Lines]",
          "48:       .web(WebApplicationType.SERVLET)",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "22: import org.springframework.beans.factory.annotation.Value;",
          "23: import org.springframework.context.annotation.Configuration;",
          "27: @Configuration",
          "28: public class LogSearchHttpConfig {",
          "",
          "[Removed Lines]",
          "25: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   @Value(\"${logsearch.protocol:http}\")",
          "58:   private String protocol;",
          "60:   public String getProtocol() {",
          "61:     return protocol;",
          "62:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   @LogSearchPropertyDescription(",
          "61:           name = \"logsearch.session.timeout\",",
          "62:           description = \"Log Search http session timeout in minutes.\",",
          "63:           examples = {\"300\"},",
          "64:           defaultValue = \"30\",",
          "65:           sources = {LOGSEARCH_PROPERTIES_FILE}",
          "66:   )",
          "67:   @Value(\"${logsearch.session.timeout:30}\")",
          "68:   private Integer sessionTimeout;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:   public void setHttpsPort(int httpsPort) {",
          "81:     this.httpsPort = httpsPort;",
          "82:   }",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   public Integer getSessionTimeout() {",
          "95:     return sessionTimeout;",
          "96:   }",
          "98:   public void setSessionTimeout(Integer sessionTimeout) {",
          "99:     this.sessionTimeout = sessionTimeout;",
          "100:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import org.apache.ambari.logsearch.configurer.SslConfigurer;",
          "22: import org.apache.ambari.logsearch.web.listener.LogSearchSessionListener;",
          "27: import org.glassfish.jersey.servlet.ServletContainer;",
          "28: import org.glassfish.jersey.servlet.ServletProperties;",
          "29: import org.springframework.boot.autoconfigure.web.ServerProperties;",
          "34: import org.springframework.boot.web.servlet.ServletRegistrationBean;",
          "35: import org.springframework.context.annotation.Bean;",
          "36: import org.springframework.context.annotation.Configuration;",
          "44: @Configuration",
          "45: public class LogSearchServletConfig {",
          "",
          "[Removed Lines]",
          "23: import org.eclipse.jetty.server.Connector;",
          "24: import org.eclipse.jetty.server.Server;",
          "25: import org.eclipse.jetty.server.ServerConnector;",
          "26: import org.eclipse.jetty.util.ssl.SslContextFactory;",
          "30: import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;",
          "31: import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer;",
          "32: import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;",
          "33: import org.springframework.boot.context.embedded.jetty.JettyServerCustomizer;",
          "38: import javax.inject.Inject;",
          "39: import javax.servlet.http.HttpSessionListener;",
          "41: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_APPLICATION_NAME;",
          "42: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "",
          "[Added Lines]",
          "21: import javax.inject.Inject;",
          "22: import javax.servlet.http.HttpSessionListener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, LogSearchJerseyResourceConfig.class.getName());",
          "67:     return registration;",
          "68:   }",
          "95: }",
          "",
          "[Removed Lines]",
          "70:   @Bean",
          "71:   public EmbeddedServletContainerFactory containerFactory() {",
          "72:     final JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory = new JettyEmbeddedServletContainerFactory() {",
          "73:       @Override",
          "74:       protected JettyEmbeddedServletContainer getJettyEmbeddedServletContainer(Server server) {",
          "75:         return new JettyEmbeddedServletContainer(server);",
          "76:       }",
          "77:     };",
          "78:     jettyEmbeddedServletContainerFactory.setSessionTimeout(SESSION_TIMEOUT);",
          "79:     serverProperties.getSession().getCookie().setName(LOGSEARCH_SESSION_ID);",
          "80:     serverProperties.setDisplayName(LOGSEARCH_APPLICATION_NAME);",
          "81:     if (\"https\".equals(logSearchHttpConfig.getProtocol())) {",
          "82:       sslConfigurer.ensureStorePasswords();",
          "83:       sslConfigurer.loadKeystore();",
          "84:       jettyEmbeddedServletContainerFactory.addServerCustomizers((JettyServerCustomizer) server -> {",
          "85:         SslContextFactory sslContextFactory = sslConfigurer.getSslContextFactory();",
          "86:         ServerConnector sslConnector = new ServerConnector(server, sslContextFactory);",
          "87:         sslConnector.setPort(logSearchHttpConfig.getHttpsPort());",
          "88:         server.setConnectors(new Connector[]{sslConnector});",
          "89:       });",
          "90:     } else {",
          "91:       jettyEmbeddedServletContainerFactory.setPort(logSearchHttpConfig.getHttpPort());",
          "92:     }",
          "93:     return jettyEmbeddedServletContainerFactory;",
          "94:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchWebServerCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "23: import java.time.Duration;",
          "25: import javax.inject.Inject;",
          "27: import org.apache.ambari.logsearch.configurer.SslConfigurer;",
          "28: import org.eclipse.jetty.server.Connector;",
          "29: import org.eclipse.jetty.server.ServerConnector;",
          "30: import org.eclipse.jetty.util.ssl.SslContextFactory;",
          "31: import org.springframework.boot.autoconfigure.web.ServerProperties;",
          "32: import org.springframework.boot.web.embedded.jetty.JettyServerCustomizer;",
          "33: import org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory;",
          "34: import org.springframework.boot.web.server.WebServerFactoryCustomizer;",
          "35: import org.springframework.stereotype.Component;",
          "37: @Component",
          "38: public class LogSearchWebServerCustomizer implements WebServerFactoryCustomizer<JettyServletWebServerFactory> {",
          "40:   @Inject",
          "41:   private ServerProperties serverProperties;",
          "43:   @Inject",
          "44:   private LogSearchHttpConfig logSearchHttpConfig;",
          "46:   @Inject",
          "47:   private SslConfigurer sslConfigurer;",
          "49:   @Override",
          "50:   public void customize(JettyServletWebServerFactory webServerFactory) {",
          "51:     serverProperties.getServlet().getSession().setTimeout(Duration.ofMinutes(logSearchHttpConfig.getSessionTimeout()));",
          "52:     serverProperties.getServlet().getSession().getCookie().setName(LOGSEARCH_SESSION_ID);",
          "54:     if (\"https\".equals(logSearchHttpConfig.getProtocol())) {",
          "55:       sslConfigurer.ensureStorePasswords();",
          "56:       sslConfigurer.loadKeystore();",
          "57:       webServerFactory.addServerCustomizers((JettyServerCustomizer) server -> {",
          "58:         SslContextFactory sslContextFactory = sslConfigurer.getSslContextFactory();",
          "59:         ServerConnector sslConnector = new ServerConnector(server, sslContextFactory);",
          "60:         sslConnector.setPort(logSearchHttpConfig.getHttpsPort());",
          "61:         server.setConnectors(new Connector[]{sslConnector});",
          "62:       });",
          "63:     } else {",
          "64:       webServerFactory.setPort(logSearchHttpConfig.getHttpPort());",
          "65:     }",
          "66:   }",
          "67: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "23: import org.apache.ambari.logsearch.conf.global.LogSearchConfigState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "26: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthFailureHandler;",
          "27: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthSuccessHandler;",
          "28: import org.apache.ambari.logsearch.web.authenticate.LogsearchLogoutSuccessHandler;",
          "29: import org.apache.ambari.logsearch.web.filters.LogSearchLogLevelFilterManagerFilter;",
          "30: import org.apache.ambari.logsearch.web.filters.LogsearchAuditLogsStateFilter;",
          "31: import org.apache.ambari.logsearch.web.filters.LogsearchAuthenticationEntryPoint;",
          "32: import org.apache.ambari.logsearch.web.filters.LogsearchCorsFilter;",
          "35: import org.apache.ambari.logsearch.web.filters.LogsearchJWTFilter;",
          "36: import org.apache.ambari.logsearch.web.filters.LogsearchSecurityContextFormationFilter;",
          "37: import org.apache.ambari.logsearch.web.filters.LogsearchServiceLogsStateFilter;",
          "39: import org.apache.ambari.logsearch.web.filters.LogsearchUsernamePasswordAuthenticationFilter;",
          "40: import org.apache.ambari.logsearch.web.security.LogsearchAuthenticationProvider;",
          "41: import org.springframework.context.annotation.Bean;",
          "",
          "[Removed Lines]",
          "21: import com.google.common.collect.Lists;",
          "25: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "33: import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;",
          "34: import org.apache.ambari.logsearch.web.filters.LogsearchKRBAuthenticationFilter;",
          "38: import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "26: import javax.inject.Inject;",
          "27: import javax.inject.Named;",
          "29: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "35: import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;",
          "40: import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;",
          "42: import org.apache.ambari.logsearch.web.filters.LogsearchKRBAuthenticationFilter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import org.springframework.security.config.annotation.web.builders.HttpSecurity;",
          "44: import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;",
          "45: import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;",
          "46: import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;",
          "47: import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;",
          "48: import org.springframework.security.web.util.matcher.AntPathRequestMatcher;",
          "49: import org.springframework.security.web.util.matcher.OrRequestMatcher;",
          "50: import org.springframework.security.web.util.matcher.RequestMatcher;",
          "59: @Configuration",
          "60: @EnableWebSecurity",
          "",
          "[Removed Lines]",
          "52: import javax.inject.Inject;",
          "53: import javax.inject.Named;",
          "54: import java.util.ArrayList;",
          "55: import java.util.List;",
          "57: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;",
          "",
          "[Added Lines]",
          "52: import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
          "53: import org.springframework.security.crypto.password.PasswordEncoder;",
          "60: import com.google.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     return filter;",
          "172:   }",
          "174:   @Bean",
          "175:   public LogsearchServiceLogsStateFilter logsearchServiceLogFilter() {",
          "176:     return new LogsearchServiceLogsStateFilter(serviceLogsRequestMatcher(), solrServiceLogsState, solrServiceLogPropsConfig);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   @Bean",
          "178:   public PasswordEncoder passwordEncoder() {",
          "179:     return new BCryptPasswordEncoder();",
          "180:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.ambari.logsearch.conf.global.SolrAuditLogsState;",
          "22: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "25: import org.apache.ambari.logsearch.conf.global.SolrEventHistoryState;",
          "26: import org.apache.ambari.logsearch.dao.SolrSchemaFieldDao;",
          "27: import org.springframework.context.annotation.Bean;",
          "28: import org.springframework.context.annotation.Configuration;",
          "30: import org.springframework.scheduling.annotation.EnableScheduling;",
          "32: @Configuration",
          "34: @EnableScheduling",
          "35: public class SolrConfig {",
          "",
          "[Removed Lines]",
          "23: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "29: import org.springframework.data.solr.repository.config.EnableSolrRepositories;",
          "33: @EnableSolrRepositories",
          "",
          "[Added Lines]",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import javax.inject.Inject;",
          "29: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "33: import org.apache.ambari.logsearch.util.FileUtil;",
          "34: import org.apache.ambari.logsearch.util.JSONUtil;",
          "35: import org.apache.ambari.logsearch.web.model.Privilege;",
          "",
          "[Removed Lines]",
          "30: import org.springframework.security.core.GrantedAuthority;",
          "31: import org.springframework.stereotype.Repository;",
          "32: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.apache.commons.collections.Predicate;",
          "40: import org.apache.commons.lang.StringUtils;",
          "41: import org.apache.log4j.Logger;",
          "43: @Repository",
          "44: public class UserDao {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.springframework.security.core.GrantedAuthority;",
          "40: import org.springframework.security.crypto.password.PasswordEncoder;",
          "41: import org.springframework.stereotype.Repository;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   @Inject",
          "53:   private AuthPropsConfig authPropsConfig;",
          "55:   private ArrayList<HashMap<String, String>> userList = null;",
          "57:   @SuppressWarnings(\"unchecked\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:   @Inject",
          "56:   private PasswordEncoder passwordEncoder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:       String username = user.get(USER_NAME);",
          "137:       String password = user.get(PASSWORD);",
          "138:       if (StringUtils.isNotBlank(password)) {",
          "140:         user.put(PASSWORD, \"\");",
          "141:         user.put(ENC_PASSWORD, encPassword);",
          "142:         isUpdated = true;",
          "",
          "[Removed Lines]",
          "139:         encPassword = CommonUtil.encryptPassword(username, password);",
          "",
          "[Added Lines]",
          "142:         encPassword = passwordEncoder.encode(password);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.web.filters;",
          "21: import java.io.IOException;",
          "23: import javax.inject.Inject;",
          "24: import javax.servlet.FilterChain;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.security.SecureRandom;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.ambari.logsearch.common.LogSearchContext;",
          "34: import org.apache.ambari.logsearch.manager.SessionManager;",
          "36: import org.apache.ambari.logsearch.web.model.User;",
          "37: import org.apache.log4j.Logger;",
          "38: import org.springframework.security.authentication.AnonymousAuthenticationToken;",
          "",
          "[Removed Lines]",
          "35: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   public static final String LOGSEARCH_SC_SESSION_KEY = \"LOGSEARCH_SECURITY_CONTEXT\";",
          "48:   public static final String USER_AGENT = \"User-Agent\";",
          "50:   @Inject",
          "51:   SessionManager sessionManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   private static SecureRandom secureRandom = new SecureRandom();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:         }",
          "81:         if (msaCookie == null) {",
          "82:           HttpServletResponse httpResponse = (HttpServletResponse) response;",
          "84:           Cookie cookie = new Cookie(\"msa\", msaCookie);",
          "86:           cookie.setMaxAge(Integer.MAX_VALUE);",
          "",
          "[Removed Lines]",
          "83:           msaCookie = CommonUtil.genGUI();",
          "",
          "[Added Lines]",
          "85:           msaCookie = System.currentTimeMillis() + \"_\" + secureRandom.nextInt(1000);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import javax.servlet.Filter;",
          "30: import javax.servlet.FilterRegistration;",
          "31: import javax.servlet.RequestDispatcher;",
          "32: import javax.servlet.Servlet;",
          "33: import javax.servlet.ServletContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.servlet.FilterRegistration.Dynamic;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import javax.servlet.ServletRegistration;",
          "36: import javax.servlet.SessionCookieConfig;",
          "37: import javax.servlet.SessionTrackingMode;",
          "39: import javax.servlet.descriptor.JspConfigDescriptor;",
          "41: public class NoServletContext implements ServletContext {",
          "",
          "[Removed Lines]",
          "38: import javax.servlet.FilterRegistration.Dynamic;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     return null;",
          "76:   }",
          "78:   @Override",
          "79:   public SessionCookieConfig getSessionCookieConfig() {",
          "80:     return null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   @Override",
          "79:   public int getSessionTimeout() {",
          "80:     return 0;",
          "81:   }",
          "83:   @Override",
          "84:   public void setSessionTimeout(int i) {",
          "86:   }",
          "88:   @Override",
          "89:   public String getRequestCharacterEncoding() {",
          "90:     return null;",
          "91:   }",
          "93:   @Override",
          "94:   public void setRequestCharacterEncoding(String s) {",
          "96:   }",
          "98:   @Override",
          "99:   public String getResponseCharacterEncoding() {",
          "100:     return null;",
          "101:   }",
          "103:   @Override",
          "104:   public void setResponseCharacterEncoding(String s) {",
          "106:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   }",
          "255:   @Override",
          "257:       String servletName, Class<? extends Servlet> servletClass) {",
          "258:     return null;",
          "259:   }",
          "261:   @Override",
          "263:       String servletName, Servlet servlet) {",
          "264:     return null;",
          "265:   }",
          "267:   @Override",
          "269:       String servletName, String className) {",
          "270:     return null;",
          "271:   }",
          "",
          "[Removed Lines]",
          "256:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "262:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "268:   public javax.servlet.ServletRegistration.Dynamic addServlet(",
          "",
          "[Added Lines]",
          "286:   public ServletRegistration.Dynamic addServlet(",
          "292:   public ServletRegistration.Dynamic addJspFile(String s, String s1) {",
          "293:     return null;",
          "294:   }",
          "296:   @Override",
          "297:   public ServletRegistration.Dynamic addServlet(",
          "303:   public ServletRegistration.Dynamic addServlet(",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "23: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "25: import org.apache.commons.lang.StringEscapeUtils;",
          "26: import org.apache.commons.lang.StringUtils;",
          "27: import org.apache.log4j.Logger;",
          "",
          "[Removed Lines]",
          "24: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "23: import javax.inject.Inject;",
          "24: import javax.inject.Named;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.springframework.security.core.GrantedAuthority;",
          "33: import org.springframework.security.core.userdetails.UserDetails;",
          "34: import org.springframework.security.core.userdetails.UserDetailsService;",
          "39: @Named",
          "40: public class LogsearchFileAuthenticationProvider extends LogsearchAbstractAuthenticationProvider {",
          "",
          "[Removed Lines]",
          "36: import javax.inject.Inject;",
          "37: import javax.inject.Named;",
          "",
          "[Added Lines]",
          "37: import org.springframework.security.crypto.password.PasswordEncoder;",
          "39: import com.google.common.annotations.VisibleForTesting;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   @Inject",
          "48:   private UserDetailsService userDetailsService;",
          "50:   @Override",
          "51:   public Authentication authenticate(Authentication authentication) throws AuthenticationException {",
          "52:     if (!authPropsConfig.isAuthFileEnabled()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   @Inject",
          "53:   private PasswordEncoder passwordEncoder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:       logger.error(\"Password can't be null or empty.\");",
          "76:       throw new BadCredentialsException(\"Password can't be null or empty.\");",
          "77:     }",
          "80:       logger.error(\"Wrong password for user=\" + username);",
          "81:       throw new BadCredentialsException(\"Wrong password.\");",
          "82:     }",
          "84:     Collection<? extends GrantedAuthority> authorities = user.getAuthorities();",
          "86:     return authentication;",
          "87:   }",
          "88: }",
          "",
          "[Removed Lines]",
          "78:     String encPassword = CommonUtil.encryptPassword(username, password);",
          "79:     if (!encPassword.equals(user.getPassword())) {",
          "85:     authentication = new UsernamePasswordAuthenticationToken(username, encPassword, authorities);",
          "",
          "[Added Lines]",
          "84:     if (!passwordEncoder.matches(password, user.getPassword())) {",
          "90:     authentication = new UsernamePasswordAuthenticationToken(username, user.getPassword(), authorities);",
          "94:   @VisibleForTesting",
          "95:   public void setPasswordEncoder(PasswordEncoder passwordEncoder) {",
          "96:     this.passwordEncoder = passwordEncoder;",
          "97:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh||ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh -> ambari-logsearch/ambari-logsearch-server/src/main/scripts/logsearch.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   LOGSEARCH_GC_LOGFILE=\"$LOG_PATH_WITHOUT_SLASH/$LOGSEARCH_GC_LOGFILE\"",
          "79: fi",
          "83: function print_usage() {",
          "84:   cat << EOF",
          "",
          "[Removed Lines]",
          "81: LOGSEARCH_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGSEARCH_GC_LOGFILE\"",
          "",
          "[Added Lines]",
          "81: java_version=$($JVM -version 2>&1 | grep 'version' | cut -d'\"' -f2 | cut -d'.' -f2)",
          "82: if [ $java_version == \"8\" ]; then",
          "83:   LOGSEARCH_GC_OPTS=\"-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$LOGSEARCH_GC_LOGFILE\"",
          "84: else",
          "85:   LOGSEARCH_GC_OPTS=\"-Xlog:gc*:file=$LOGSEARCH_GC_LOGFILE:time\"",
          "86: fi",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   LOGSEARCH_DEBUG_PORT=${LOGSEARCH_DEBUG_PORT:-\"5005\"}",
          "146:   if [ \"$LOGSEARCH_DEBUG\" = \"true\" ]; then",
          "148:   fi",
          "150:   if [ \"$LOGSEARCH_SSL\" = \"true\" ]; then",
          "",
          "[Removed Lines]",
          "147:     LOGSEARCH_JAVA_OPTS=\"$LOGSEARCH_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGSEARCH_DEBUG_PORT,server=y,suspend=$LOGSEARCH_DEBUG_SUSPEND \"",
          "",
          "[Added Lines]",
          "152:     if [ $java_version == \"8\" ]; then",
          "153:       LOGSEARCH_DEBUG_ADDRESS=$LOGSEARCH_DEBUG_PORT",
          "154:     else",
          "155:       LOGSEARCH_DEBUG_ADDRESS=\"*:$LOGSEARCH_DEBUG_PORT\"",
          "156:     fi",
          "157:     LOGSEARCH_JAVA_OPTS=\"$LOGSEARCH_JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$LOGSEARCH_DEBUG_ADDRESS,server=y,suspend=$LOGSEARCH_DEBUG_SUSPEND \"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199: }",
          "201: function stop() {",
          "203:   if [ -f \"$LOGSEARCH_PID_FILE\" ]; then",
          "204:     LOGSEARCH_PID=`cat \"$LOGSEARCH_PID_FILE\"`",
          "205:   fi",
          "",
          "[Removed Lines]",
          "202:   LOGSEARCH_STOP_WAIT=3",
          "",
          "[Added Lines]",
          "212:   LOGSEARCH_STOP_WAIT=${LOGSEARCH_STOP_WAIT:-10}",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditLogRequestConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.AuditLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.AuditLogQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "27: import org.springframework.data.solr.core.query.SimpleQuery;",
          "31: public class AuditLogRequestConverterTest extends AbstractRequestConverterTest {",
          "33:   private AuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "29: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SimpleQuery simpleQuery = underTest.convert(request);",
          "48:     SolrQuery queryResult = new DefaultQueryParser().doConstructSolrQuery(simpleQuery);",
          "52:       queryResult.toQueryString());",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=repo%3A%28logsearch_app+OR+secure_log%29&fq=-repo%3A%28hst_agent+OR+system_message%29\" +",
          "51:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=reqUser%3A%28joe+OR+steven%29&sort=evtTime+desc%2Cseq_num+desc\",",
          "",
          "[Added Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29\" +",
          "51:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=reqUser%3A%28joe+%22OR%22+steven%29&sort=evtTime+desc%2Cseq_num+desc\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/AuditServiceLoadRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.AuditServiceLoadRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.AuditServiceLoadQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class AuditServiceLoadRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private AuditServiceLoadRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery solrQuery = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:   }",
          "52:   @Test",
          "",
          "[Removed Lines]",
          "48:       \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:       \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.field=repo\", solrQuery.toQueryString());",
          "",
          "[Added Lines]",
          "48:       \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:       \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.field=repo\", solrQuery.toQueryString());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/BaseServiceLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogQueryRequest;",
          "23: import org.apache.ambari.logsearch.util.SolrUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.springframework.data.solr.core.DefaultQueryParser;",
          "28: import org.springframework.data.solr.core.query.SimpleQuery;",
          "32: public class BaseServiceLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "34:   private BaseServiceLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "30: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     SolrQuery solrQuery = defaultQueryParser.doConstructSolrQuery(query);",
          "54:     SolrUtil.removeDoubleOrTripleEscapeFromFilters(solrQuery);",
          "57:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=cluster%3Acl1&fq=path%3A%5C%2Fvar%5C%2Flog%5C%2Fmyfile%5C-%5C*%5C-hdfs.log\" +",
          "59:         \"&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D&sort=logtime+desc%2Cseq_num+desc\",",
          "60:       solrQuery.toQueryString());",
          "61:   }",
          "",
          "[Removed Lines]",
          "56:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=type%3A%28logsearch_app+OR+secure_log%29&fq=-type%3A%28hst_agent+OR+system_message%29\" +",
          "58:         \"&fq=type%3Acomponent&fq=level%3A%28FATAL+OR+ERROR+OR+WARN+OR+UNKNOWN%29&fq=host%3A%28logsearch1.com+OR+logsearch2.com%29\" +",
          "",
          "[Added Lines]",
          "56:     assertEquals(\"?q=*%3A*&start=0&rows=25&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29&fq=-type%3A%28hst_agent+%22OR%22+system_message%29\" +",
          "58:         \"&fq=type%3Acomponent&fq=level%3A%28FATAL+%22OR%22+ERROR+%22OR%22+WARN+%22OR%22+UNKNOWN%29&fq=host%3A%28logsearch1.com+%22OR%22+logsearch2.com%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/FieldAuditLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.FieldAuditLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.FieldAuditLogQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class FieldAuditLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private FieldAuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=myfield%2Crepo\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=myfield%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogAnyGraphRequestConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceAnyGraphRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceAnyGraphQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogAnyGraphRequestConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogAnyGraphRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentLevelRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogComponentLevelRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogComponentLevelQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogComponentLevelRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogComponentLevelRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Clevel\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&fq=cluster%3Acl1\" +",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&fq=cluster%3Acl1\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "65:       \"&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Clevel\", query.toQueryString());",
          "66:   }",
          "67: }",
          "",
          "[Removed Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&facet=true\" +",
          "",
          "[Added Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&facet=true\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogComponentRequestFacetQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogComponentHostRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogComponentHostQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogComponentRequestFacetQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogComponentRequestFacetQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:         \"&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Chost%2Clevel&facet.pivot=type%2Clevel\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=type%3Amycomponent&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "65:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=type%2Chost%2Clevel&facet.pivot=type%2Clevel\",",
          "66:       query.toQueryString());",
          "67:   }",
          "",
          "[Removed Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "[Added Lines]",
          "64:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogLevelCountRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogLevelCountRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogLevelCountQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogLevelCountRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogLevelCountRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:       query.toQueryString());",
          "51:   }",
          "",
          "[Removed Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "[Added Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=-1&facet.field=level\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTreeRequestFacetQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogHostComponentRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogHostComponentQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogTreeRequestFacetQueryConverterTest extends AbstractRequestConverterTest {",
          "31:   private ServiceLogTreeRequestFacetQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "47:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "50:         \"&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=host%2Ctype%2Clevel&facet.pivot=host%2Clevel\",",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29&fq=cluster%3Acl1&facet=true\" +",
          "",
          "[Added Lines]",
          "48:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "49:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29&fq=cluster%3Acl1&facet=true\" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "63:         \"&facet=true&facet.mincount=1&facet.limit=-1&facet.sort=index&facet.pivot=host%2Ctype%2Clevel&facet.pivot=host%2Clevel\",",
          "64:       query.toQueryString());",
          "65:   }",
          "",
          "[Removed Lines]",
          "62:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+OR+ERROR+OR+FATAL%29\" +",
          "",
          "[Added Lines]",
          "62:     assertEquals(\"?q=*%3A*&rows=0&fq=logtime%3A%5B*+TO+*%5D&fq=level%3A%28WARN+%22OR%22+ERROR+%22OR%22+FATAL%29\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/ServiceLogTruncatedRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.ServiceLogTruncatedRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.ServiceLogTruncatedQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class ServiceLogTruncatedRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private ServiceLogTruncatedRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "52:         \"&fq=cluster%3Acl1&sort=logtime+desc%2Cseq_num+desc\",",
          "53:       query.toQueryString());",
          "54:   }",
          "",
          "[Removed Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=10&fq=type%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+OR+system_message%29&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage\" +",
          "",
          "[Added Lines]",
          "50:     assertEquals(\"?q=*%3A*&start=0&rows=10&fq=type%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-type%3A%28hst_agent+%22OR%22+system_message%29&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage\" +",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/TopFieldAuditLogRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.TopFieldAuditLogRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.TopFieldAuditLogQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class TopFieldAuditLogRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "32:   private TopFieldAuditLogRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "49:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "52:       query.toQueryString());",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "51:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.pivot=myfield%2Crepo\",",
          "",
          "[Added Lines]",
          "50:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "51:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&fq=cluster%3Acl1&facet=true&facet.mincount=1&facet.limit=10&facet.pivot=myfield%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/converter/UserExportRequestQueryConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.converter;",
          "21: import org.apache.ambari.logsearch.model.request.impl.UserExportRequest;",
          "22: import org.apache.ambari.logsearch.model.request.impl.query.UserExportQueryRequest;",
          "23: import org.apache.solr.client.solrj.SolrQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.junit.Test;",
          "26: import org.springframework.data.solr.core.DefaultQueryParser;",
          "30: public class UserExportRequestQueryConverterTest extends AbstractRequestConverterTest {",
          "31:   private UserExportRequestQueryConverter underTest;",
          "",
          "[Removed Lines]",
          "28: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     SolrQuery query = new DefaultQueryParser().doConstructSolrQuery(underTest.convert(request));",
          "48:     assertEquals(\"?q=*%3A*&rows=0&fq=evtTime%3A%5B2016-09-13T22%3A00%3A01.000Z+TO+2016-09-14T22%3A00%3A01.000Z%5D\" +",
          "51:       query.toQueryString());",
          "52:   }",
          "",
          "[Removed Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+OR+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+OR+system_message%29&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=reqUser%2Crepo&facet.pivot=resource%2Crepo\",",
          "",
          "[Added Lines]",
          "49:         \"&fq=log_message%3Amyincludemessage&fq=-log_message%3Amyexcludemessage&fq=repo%3A%28logsearch_app+%22OR%22+secure_log%29\" +",
          "50:         \"&fq=-repo%3A%28hst_agent+%22OR%22+system_message%29&facet=true&facet.mincount=1&facet.limit=-1&facet.pivot=reqUser%2Crepo&facet.pivot=resource%2Crepo\",",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java||ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java -> ambari-logsearch/ambari-logsearch-server/src/test/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.web.security;",
          "21: import org.apache.ambari.logsearch.conf.AuthPropsConfig;",
          "23: import org.apache.ambari.logsearch.web.model.User;",
          "24: import org.junit.Before;",
          "25: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "22: import org.apache.ambari.logsearch.util.CommonUtil;",
          "",
          "[Added Lines]",
          "21: import static junit.framework.Assert.assertEquals;",
          "22: import static junit.framework.Assert.assertSame;",
          "23: import static junit.framework.Assert.fail;",
          "24: import static org.easymock.EasyMock.expect;",
          "25: import static org.easymock.EasyMock.replay;",
          "26: import static org.easymock.EasyMock.strictMock;",
          "27: import static org.easymock.EasyMock.verify;",
          "29: import java.lang.reflect.Field;",
          "30: import java.util.Collections;",
          "31: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.springframework.security.core.GrantedAuthority;",
          "30: import org.springframework.security.core.authority.SimpleGrantedAuthority;",
          "31: import org.springframework.security.core.userdetails.UserDetailsService;",
          "45: public class LogsearchFileAuthenticationProviderTest {",
          "47:   private LogsearchFileAuthenticationProvider provider;",
          "48:   private AuthPropsConfig mockAuthPropsConfig;",
          "49:   private UserDetailsService mockUserDetailsService;",
          "51:   @Before",
          "52:   public void init() throws Exception {",
          "",
          "[Removed Lines]",
          "33: import static junit.framework.Assert.assertEquals;",
          "34: import static junit.framework.Assert.assertSame;",
          "35: import static junit.framework.Assert.assertTrue;",
          "36: import static org.easymock.EasyMock.strictMock;",
          "37: import static org.easymock.EasyMock.expect;",
          "38: import static org.easymock.EasyMock.replay;",
          "39: import static org.easymock.EasyMock.verify;",
          "41: import java.lang.reflect.Field;",
          "42: import java.util.Arrays;",
          "43: import java.util.List;",
          "",
          "[Added Lines]",
          "43: import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
          "44: import org.springframework.security.crypto.password.PasswordEncoder;",
          "51:   private PasswordEncoder passwordEncoder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     Field userDetailsServiceField = LogsearchFileAuthenticationProvider.class.getDeclaredField(\"userDetailsService\");",
          "62:     userDetailsServiceField.setAccessible(true);",
          "63:     userDetailsServiceField.set(provider, mockUserDetailsService);",
          "64:   }",
          "66:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     passwordEncoder = new BCryptPasswordEncoder();",
          "68:     provider.setPasswordEncoder(passwordEncoder);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     try {",
          "87:       provider.authenticate(authentication);",
          "89:     } catch(BadCredentialsException e) {",
          "90:       assertEquals(\"Username can't be null or empty.\", e.getMessage());",
          "91:     }",
          "",
          "[Removed Lines]",
          "88:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "93:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:     try {",
          "105:       provider.authenticate(authentication);",
          "107:     } catch(BadCredentialsException e) {",
          "108:       assertEquals(\"Username can't be null or empty.\", e.getMessage());",
          "109:     }",
          "",
          "[Removed Lines]",
          "106:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "111:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:     try {",
          "124:       provider.authenticate(authentication);",
          "126:     } catch(BadCredentialsException e) {",
          "127:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "128:     }",
          "",
          "[Removed Lines]",
          "125:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "130:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:     try {",
          "142:       provider.authenticate(authentication);",
          "144:     } catch(BadCredentialsException e) {",
          "145:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "146:     }",
          "",
          "[Removed Lines]",
          "143:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "148:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "158:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "159:     try {",
          "160:       provider.authenticate(authentication);",
          "162:     } catch (BadCredentialsException e) {",
          "163:       assertEquals(\"User not found.\", e.getMessage());",
          "164:     }",
          "",
          "[Removed Lines]",
          "161:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "166:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "169:   @Test",
          "170:   public void testAuthenticationNoPassword() {",
          "172:     User user = new User(\"principal\", null, grantedAuths);",
          "174:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "",
          "[Removed Lines]",
          "171:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "",
          "[Added Lines]",
          "176:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "179:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "180:     try {",
          "181:       provider.authenticate(authentication);",
          "183:     } catch (BadCredentialsException e) {",
          "184:       assertEquals(\"Password can't be null or empty.\", e.getMessage());",
          "185:     }",
          "",
          "[Removed Lines]",
          "182:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "187:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "190:   @Test",
          "191:   public void testAuthenticationWrongPassword() {",
          "195:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "196:     expect(mockUserDetailsService.loadUserByUsername(\"principal\")).andReturn(user);",
          "",
          "[Removed Lines]",
          "192:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "193:     User user = new User(\"principal\", CommonUtil.encryptPassword(\"principal\", \"notCredentials\"), grantedAuths);",
          "",
          "[Added Lines]",
          "197:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "198:     User user = new User(\"principal\", passwordEncoder.encode(\"notCredentials\"), grantedAuths);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "200:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "201:     try {",
          "202:       provider.authenticate(authentication);",
          "204:     } catch (BadCredentialsException e) {",
          "205:       assertEquals(\"Wrong password.\", e.getMessage());",
          "206:     }",
          "",
          "[Removed Lines]",
          "203:       assertTrue(\"Should have thrown BadCredentialsException\", false);",
          "",
          "[Added Lines]",
          "208:       fail(\"Should have thrown BadCredentialsException\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "211:   @Test",
          "212:   public void testAuthenticationSuccessful() {",
          "216:     expect(mockAuthPropsConfig.isAuthFileEnabled()).andReturn(true);",
          "217:     expect(mockUserDetailsService.loadUserByUsername(\"principal\")).andReturn(user);",
          "",
          "[Removed Lines]",
          "213:     List<GrantedAuthority> grantedAuths = Arrays.<GrantedAuthority>asList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "214:     User user = new User(\"principal\", CommonUtil.encryptPassword(\"principal\", \"credentials\"), grantedAuths);",
          "",
          "[Added Lines]",
          "218:     List<GrantedAuthority> grantedAuths = Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"));",
          "219:     String encodedPassword = passwordEncoder.encode(\"credentials\");",
          "220:     User user = new User(\"principal\", encodedPassword, grantedAuths);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "219:     replay(mockAuthPropsConfig, mockUserDetailsService);",
          "221:     Authentication authentication = new TestingAuthenticationToken(\"principal\", \"credentials\");",
          "223:     Authentication authenticationResult = provider.authenticate(authentication);",
          "224:     assertEquals(\"principal\", authenticationResult.getName());",
          "226:     assertEquals(1, authenticationResult.getAuthorities().size());",
          "227:     assertEquals(new SimpleGrantedAuthority(\"ROLE_USER\"), authenticationResult.getAuthorities().iterator().next());",
          "",
          "[Removed Lines]",
          "225:     assertEquals(CommonUtil.encryptPassword(\"principal\", \"credentials\"), authenticationResult.getCredentials());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1956283dd9a4a33d565d264592af7c562502cd25",
      "candidate_info": {
        "commit_hash": "1956283dd9a4a33d565d264592af7c562502cd25",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1956283dd9a4a33d565d264592af7c562502cd25",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ],
        "message": "[AMBARI-24827] LDAP users fail to authenticate using LDAPS due to 'No subject alternative DNS name' exception (#2522)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: public class AmbariLdapAuthenticationProvider extends AmbariAuthenticationProvider {",
          "57:   final AmbariLdapConfigurationProvider ldapConfigurationProvider;",
          "",
          "[Removed Lines]",
          "55:   static Logger LOG = LoggerFactory.getLogger(AmbariLdapAuthenticationProvider.class); // exposed and mutable for \"test\"",
          "",
          "[Added Lines]",
          "55:   private static final String SYSTEM_PROPERTY_DISABLE_ENDPOINT_IDENTIFICATION = \"com.sun.jndi.ldap.object.disableEndpointIdentification\";",
          "56:   private static Logger LOG = LoggerFactory.getLogger(AmbariLdapAuthenticationProvider.class);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:         springSecurityContextSource.setPassword(ldapServerProperties.get().getManagerPassword());",
          "172:       }",
          "174:       try {",
          "175:         springSecurityContextSource.afterPropertiesSet();",
          "176:       } catch (Exception e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:       if (ldapServerProperties.get().isUseSsl() && ldapServerProperties.get().isDisableEndpointIdentification()) {",
          "176:         System.setProperty(SYSTEM_PROPERTY_DISABLE_ENDPOINT_IDENTIFICATION, \"true\");",
          "177:         LOG.info(\"Disabled endpoint identification\");",
          "178:       } else {",
          "179:         System.clearProperty(SYSTEM_PROPERTY_DISABLE_ENDPOINT_IDENTIFICATION);",
          "180:         LOG.info(\"Removed endpoint identification disabling\");",
          "181:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1764:     map.put(AmbariServerConfigurationKey.PAGINATION_ENABLED, \"authentication.ldap.pagination.enabled\");",
          "1765:     map.put(AmbariServerConfigurationKey.COLLISION_BEHAVIOR, \"ldap.sync.username.collision.behavior\");",
          "1768:     map.put(AmbariServerConfigurationKey.SSO_PROVIDER_URL, \"authentication.jwt.providerUrl\");",
          "1769:     map.put(AmbariServerConfigurationKey.SSO_PROVIDER_CERTIFICATE, \"authentication.jwt.publicKey\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1768:     map.put(AmbariServerConfigurationKey.DISABLE_ENDPOINT_IDENTIFICATION, \"ldap.sync.disable.endpoint.identification\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be8ef950fc71c706656c508b2118126cd37e89c5",
      "candidate_info": {
        "commit_hash": "be8ef950fc71c706656c508b2118126cd37e89c5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/be8ef950fc71c706656c508b2118126cd37e89c5",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java"
        ],
        "message": "[AMBARI-25311] FinalizeKerberosServerAction timeout has to be configurable (apappu)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2591:   public static final ConfigurationProperty<Integer> DEFAULT_MAX_DEGREE_OF_PARALLELISM_FOR_UPGRADES = new ConfigurationProperty<>(",
          "2592:     \"stack.upgrade.default.parallelism\", 100);",
          "2594:   private static final Logger LOG = LoggerFactory.getLogger(",
          "2595:     Configuration.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2597:   @Markdown(description = \"The timeout, in seconds, when finalizing Kerberos enable/disable/regenerate commands.\")",
          "2598:   public static final ConfigurationProperty<Integer> KERBEROS_SERVER_ACTION_FINALIZE_SECONDS = new ConfigurationProperty<>(",
          "2599:     \"server.kerberos.finalize.timeout\", 600);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5516:     return Integer.parseInt(getProperty(DEFAULT_MAX_DEGREE_OF_PARALLELISM_FOR_UPGRADES));",
          "5517:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5532:   public int getKerberosServerActionFinalizeTimeout() {",
          "5533:     return Integer.parseInt(getProperty(KERBEROS_SERVER_ACTION_FINALIZE_SECONDS));",
          "5534:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3719:       if (dataDirectory != null) {",
          "3720:         commandParameters.put(KerberosServerAction.DATA_DIRECTORY, dataDirectory.getAbsolutePath());",
          "3721:       }",
          "3727:       Stage stage = createServerActionStage(requestStageContainer.getLastStageId(),",
          "3728:         cluster,",
          "3729:         requestStageContainer.getId(),",
          "",
          "[Removed Lines]",
          "3722:       int timeout = 600;",
          "3723:       if(StringUtils.isNotEmpty(configuration.getProperty(\"server.kerberos.finalize.timeout\"))){",
          "3724:         timeout =  Integer.parseInt(configuration.getProperty(\"server.kerberos.finalize.timeout\").trim());",
          "3725:       }",
          "3726:       LOG.info(\"HWX...Timeout value for addFinalizeOperationStage is:\" + timeout);",
          "",
          "[Added Lines]",
          "3722:       int timeout = configuration.getKerberosServerActionFinalizeTimeout();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21f518644a92ee965be6ce9d161cea020660e029",
      "candidate_info": {
        "commit_hash": "21f518644a92ee965be6ce9d161cea020660e029",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/21f518644a92ee965be6ce9d161cea020660e029",
        "files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py"
        ],
        "message": "AMBARI-24708. Automation script for upgrade old style isilon cluster to the new mpack based structure (amagyar) (#2397) (#2404)\n\n* AMBARI-24708. Automation script for upgrade old style isilon cluster to the new mpack based structure (amagyar)\n\n* AMBARI-24708. Automation script for upgrade old style isilon cluster to the new mpack based structure (amagyar)",
        "before_after_code_files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py||contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py||contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py": [
          "File: contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py -> contrib/management-packs/isilon-onefs-mpack/src/main/tools/hdfs_to_onefs_convert.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "17: \"\"\"",
          "18: import urllib2, base64, json, ssl, time, random, sys",
          "19: from optparse import OptionParser",
          "20: from contextlib import closing",
          "22: class SslContext:",
          "23:   def build(self, url):",
          "24:     if not url.startswith('https') or not hasattr(ssl, 'SSLContext'):",
          "25:       return None",
          "26:     return ssl.SSLContext(self._protocol()) if self._protocol() else ssl.create_default_context()",
          "28:   def _protocol(self):",
          "29:     if hasattr(ssl, 'PROTOCOL_TLS'): return ssl.PROTOCOL_TLS",
          "30:     elif hasattr(ssl, 'PROTOCOL_TLSv1_2'): return ssl.PROTOCOL_TLSv1_2",
          "31:     elif hasattr(ssl, 'PROTOCOL_TLSv1_1'): return ssl.PROTOCOL_TLSv1_1",
          "32:     elif hasattr(ssl, 'PROTOCOL_TLSv1'): return ssl.PROTOCOL_TLSv1",
          "33:     else: return None",
          "35: class PermissiveSslContext:",
          "36:   def build(self, url):",
          "37:     context = SslContext().build(url)",
          "38:     if hasattr(context, '_https_verify_certificates'):",
          "39:       context._https_verify_certificates(False)",
          "40:     return context",
          "42: class Url:",
          "43:   @classmethod",
          "44:   def base(clazz, protocol, host, port):",
          "45:       return clazz('%s://%s:%d' % (protocol, host, port))",
          "47:   def __init__(self, url_str):",
          "48:     self.base = url_str.rstrip('/')",
          "50:   def __div__(self, suffix_url):",
          "51:     suffix_str = str(suffix_url)",
          "52:     if self._is_absolute(suffix_str):",
          "53:       return Url(suffix_str)",
          "54:     else:",
          "55:       return Url(self.base + (suffix_str if suffix_str.startswith('/') else '/' + suffix_str))",
          "57:   def _is_absolute(self, suffix_str):",
          "58:     return suffix_str.startswith(self.base)",
          "60:   def query_params(self, a_dict):",
          "61:     return Url(self.base + '?' + '&'.join('%s=%s' % (name, value) for name, value in a_dict.items()))",
          "63:   def __str__(self):",
          "64:     return self.base",
          "66: class Header:",
          "67:   @classmethod",
          "68:   def csrf(clazz):",
          "69:     return clazz('X-Requested-By', 'ambari')",
          "71:   def __init__(self, key, value):",
          "72:     self.key, self.value = key, value",
          "74:   def add_to(self, request):",
          "75:     request.add_header(self.key, self.value)",
          "77: class BasicAuth:",
          "78:   def __init__(self, user, password):",
          "79:     self.header = Header(",
          "80:       'Authorization',",
          "81:       'Basic %s' % base64.encodestring('%s:%s' % (user, password)).replace('\\n', ''))",
          "83:   def authenticate(self, request):",
          "84:     self.header.add_to(request)",
          "86: class ResponseTransformer:",
          "87:   @staticmethod",
          "88:   def identity():",
          "89:     return lambda url, code, data: (code, data)",
          "91:   def __call__(self, url, code, data):",
          "92:     raise RuntimeError('Subclass responsibility')",
          "94: class UnexpectedHttpCode(Exception): pass",
          "96: class JsonTransformer(ResponseTransformer):",
          "97:   def __call__(self, url, code, data):",
          "98:     if 200 <= code <= 299:",
          "99:       return code, self._parse(data)",
          "100:     else:",
          "101:       return UnexpectedHttpCode('Unexpected http code: %d url: %s response: %s' % (code, url, data))",
          "103:   def _parse(self, a_str):",
          "104:     if not a_str:",
          "105:       return {}",
          "106:     try:",
          "107:       return json.loads(a_str)",
          "108:     except ValueError as e:",
          "109:       raise ValueError('Error %s while parsing: %s' % (e, a_str))",
          "111: class RestClient:",
          "112:   def __init__(self, an_url, authenticator, headers=[], ssl_context=SslContext(), request_transformer=lambda r:r, response_transformer=ResponseTransformer.identity()):",
          "113:     self.base_url = an_url",
          "114:     self.authenticator = authenticator",
          "115:     self.headers = headers",
          "116:     self.ssl_context = ssl_context",
          "117:     self.request_transformer = request_transformer",
          "118:     self.response_transformer = response_transformer",
          "120:   def get(self, suffix_str):",
          "121:     return self._response(*self._request(suffix_str, 'GET'))",
          "123:   def post(self, suffix_str, data):",
          "124:     return self._response(*self._request(suffix_str, 'POST', data=data))",
          "126:   def put(self, suffix_str, data):",
          "127:     return self._response(*self._request(suffix_str, 'PUT', data=data))",
          "129:   def delete(self, suffix_str):",
          "130:     return self._response(*self._request(suffix_str, 'DELETE'))",
          "132:   def _request(self, suffix_str, http_method, data=\"\"):",
          "133:     url = str(self.base_url / suffix_str)",
          "134:     request = urllib2.Request(url, data=self.request_transformer(data))",
          "135:     request.get_method = lambda: http_method",
          "136:     self.authenticator.authenticate(request)",
          "137:     map(lambda each: each.add_to(request), self.headers)",
          "138:     return request, self.ssl_context.build(url)",
          "140:   def _response(self, request, ssl_context):",
          "141:     with closing(urllib2.urlopen(request, context=ssl_context)) as response:",
          "142:       return self.response_transformer(request.get_full_url(), response.getcode(), response.read())",
          "144:   def rebased(self, new_base_url):",
          "145:     return RestClient(",
          "146:       new_base_url,",
          "147:       self.authenticator,",
          "148:       self.headers,",
          "149:       self.ssl_context,",
          "150:       self.request_transformer,",
          "151:       self.response_transformer)",
          "153: class ServiceComponent:",
          "154:   def __init__(self, client, a_dict):",
          "155:     self.client = client",
          "156:     self.name = a_dict['ServiceComponentInfo']['component_name']",
          "157:     self.component = a_dict",
          "159:   def host_names(self):",
          "160:     return [each['HostRoles']['host_name'] for each in self.component['host_components']]",
          "162:   def __str__(self):",
          "163:     return self.name",
          "165: class Service:",
          "166:   def __init__(self, client, a_dict):",
          "167:     self.client = client",
          "168:     self.service = a_dict",
          "169:     self.href = self.service['href']",
          "170:     self.name = self.service['ServiceInfo']['service_name']",
          "172:   def delete(self):",
          "173:     try:",
          "174:       self.client.delete(self.href)",
          "175:     except urllib2.HTTPError as e:",
          "176:       if e.code != 404:",
          "177:         raise e",
          "179:   def start(self):",
          "180:     _, data = self.client.put(self.href, {'ServiceInfo': {'state' : 'STARTED'}})",
          "181:     return AsyncResult.of(self.client, data)",
          "183:   def components(self):",
          "184:     return [ServiceComponent(self.client, self.client.get(each['href'])[1]) for each in self.service['components']]",
          "186:   def component(self, component_name):",
          "187:     matches = [each for each in self.components() if each.name == 'HDFS_CLIENT']",
          "188:     return matches[0] if matches else None",
          "190:   def __str__(self):",
          "191:     return self.name",
          "193: class Cluster:",
          "194:   def __init__(self, cluster_name, host, port=8080, protocol='http', user='admin', password='admin', api_version='v1'):",
          "195:     self.cluster_name = cluster_name",
          "196:     self.base_url = Url.base(protocol, host, port) / 'api' / api_version",
          "197:     self.client = RestClient(",
          "198:       self.base_url / 'clusters' / cluster_name,",
          "199:       BasicAuth(user, password),",
          "200:       headers=[Header.csrf()],",
          "201:       ssl_context=PermissiveSslContext(),",
          "202:       request_transformer=json.dumps,",
          "203:       response_transformer=JsonTransformer())",
          "205:   def version(self):",
          "206:     _, data = self.client.get('')",
          "207:     return data['Clusters']['version']",
          "209:   def installed_stack(self):",
          "210:     stack_name, stack_ver = cluster.version().split('-')",
          "211:     return Stack(stack_name, stack_ver, self.client.rebased(self.base_url / 'stacks'))",
          "213:   def add_service(self, service_name):",
          "214:     self.client.post(Url('services') / service_name, {'ServiceInfo' : {'service_name' : service_name}})",
          "216:   def add_service_component(self, service_name, component_name):",
          "217:     self.client.post(Url('services') / service_name / 'components' / component_name, {})",
          "219:   def add_host_component(self, service_name, component_name, host_name):",
          "220:     self.client.post(",
          "221:       Url('hosts').query_params({'Hosts/host_name': host_name}),",
          "222:       {'host_components': [{'HostRoles': {'component_name': component_name}}]})",
          "223:     _, data = self.client.put(Url('services') / service_name, {'ServiceInfo': {'state' : 'INSTALLED'}})",
          "224:     return AsyncResult.of(self.client, data)",
          "226:   def service(self, service_name):",
          "227:     _, data = self.client.get(Url('services') / service_name)",
          "228:     return Service(self.client, data)",
          "230:   def services(self):",
          "231:     _, data = self.client.get(Url('services'))",
          "232:     return [Service(self.client, self.client.get(each['href'])[1]) for each in data['items']]",
          "234:   def has_service(self, service_name):",
          "235:     return service_name in [each.name for each in self.services()]",
          "237:   def add_config(self, config_type, tag, properties):",
          "238:     self.client.post(Url('configurations'), {",
          "239:       'type': config_type,",
          "240:       'tag': tag,",
          "241:       'properties' : properties",
          "242:     })",
          "243:     self.client.put('', {",
          "244:       'Clusters' : {",
          "245:         'desired_configs': {'type': config_type, 'tag' : tag }",
          "246:       }",
          "247:     })",
          "249:   def config(self, config_type):",
          "250:     code, data = self.client.get(Url('configurations').query_params({'type': config_type}))",
          "251:     return Configs(self.client, [Config(self.client, each) for each in data['items']])",
          "253:   def start_all(self):",
          "254:     _, data = self.client.put('services', {",
          "255:       'RequestInfo' : {",
          "256:         'context' : '_PARSE_.START.ALL_SERVICES',",
          "257:         'operation_level' : { 'level' : 'CLUSTER', 'cluster_name' : self.cluster_name }",
          "258:       },",
          "259:       'Body' : { 'ServiceInfo' : {'state' : 'STARTED'} }",
          "260:     })",
          "261:     return AsyncResult.of(self.client, data)",
          "263:   def stop_all(self):",
          "264:     _, data = self.client.put('services', {",
          "265:       'RequestInfo' : {",
          "266:         'context' : '_PARSE_.STOP.ALL_SERVICES',",
          "267:         'operation_level' : { 'level' : 'CLUSTER', 'cluster_name' : self.cluster_name }",
          "268:       },",
          "269:       'Body' : { 'ServiceInfo' : {'state' : 'INSTALLED'} }",
          "270:     })",
          "271:     return AsyncResult.of(self.client, data)",
          "273:   def __str__(self):",
          "274:     return 'Cluster: %s (%s)' % (self.cluster_name, self.client.base_url)",
          "276: class OperationFailed(Exception): pass",
          "278: class AsyncResult:",
          "279:   @staticmethod",
          "280:   def of(client, data):",
          "281:     return AsyncResult(client, data) if data else NoResult()",
          "283:   def __init__(self, client, a_dict):",
          "284:     self.client = client",
          "285:     self.status = a_dict['Requests']['status']",
          "286:     self.id = a_dict['Requests']['id']",
          "287:     self.href = a_dict['href']",
          "289:   def request_status(self):",
          "290:     _, data = self.client.get(self.href)",
          "291:     return data['Requests']['request_status']",
          "293:   def is_finished(self):",
          "294:     return self.request_status() in ['FAILED', 'TIMEDOUT', 'ABORTED', 'COMPLETED', 'SKIPPED_FAILED']",
          "296:   def await(self):",
          "297:     while not self.is_finished():",
          "298:       time.sleep(1)",
          "299:     status = self.request_status()",
          "300:     if status != 'COMPLETED':",
          "301:       raise OperationFailed(\"%s failed with status: %s\" % (self.id, status))",
          "302:     return status",
          "304:   def __str__(self):",
          "305:     return \"Request status: %s id: %d\" % (self.status, self.id)",
          "307: class NoResult:",
          "308:   def request_status(): return 'UNKNOWN'",
          "309:   def is_finished(self): return True",
          "310:   def await(self): pass",
          "312: class Config:",
          "313:   def __init__(self, client, a_dict):",
          "314:     self.client = client",
          "315:     self.config = a_dict",
          "317:   def version(self):",
          "318:     return int(self.config['version'])",
          "320:   def href(self):",
          "321:     return self.config['href']",
          "323:   def properties(self):",
          "324:     code, data = self.client.get(self.href())",
          "325:     return data['items'][0]['properties']",
          "327:   def __str__(self):",
          "328:     return json.dumps(self.config)",
          "330: class Configs:",
          "331:   def __init__(self, client, config_list):",
          "332:     self.client = client",
          "333:     self.configs = sorted(config_list, key=lambda config: config.version())",
          "335:   def latest(self):",
          "336:     return self.configs[-1]",
          "339: class Stack:",
          "340:   def __init__(self, stack_name, stack_version, client):",
          "341:     self.name = stack_name",
          "342:     self.version = stack_version",
          "343:     self.client = client",
          "345:   def has_service(self, service_name):",
          "346:     try:",
          "347:       _, data = self.client.get(Url(self.name) / 'versions' / self.version / 'services' / service_name)",
          "348:       return True",
          "349:     except urllib2.HTTPError as e:",
          "350:       if e.code == 404:",
          "351:         return False",
          "352:       else:",
          "353:         raise e",
          "355: class CannotLoad(Exception): pass",
          "357: class FsStorage:",
          "358:   def save(self, key, value):",
          "359:     with open(\"saved-\" + key, 'wt') as f:",
          "360:       f.write(repr(value))",
          "362:   def load(self, key):",
          "363:     try:",
          "364:       with open(\"saved-\" + key, 'rt') as f:",
          "365:         return eval(f.read())",
          "366:     except IOError as e:",
          "367:       raise CannotLoad(key + ' not found')",
          "369: class Conversion:",
          "370:   def __init__(self, cluster, storage):",
          "371:     self.cluster = cluster",
          "372:     self.storage = storage",
          "373:     self.supported_stacks = ['HDP-3.0']",
          "375:   def check_prerequisites(self):",
          "376:     print 'Checking %s' % self.cluster",
          "377:     ver = self.cluster.version()",
          "378:     print 'Found stack %s' % ver",
          "379:     if ver not in self.supported_stacks:",
          "380:       print 'Only %s stacks are supported.' % self.supported_stacks",
          "381:       return False",
          "382:     if not self.cluster.installed_stack().has_service('ONEFS'):",
          "383:       print 'ONEFS management pack is not installed.'",
          "384:       return False",
          "385:     sys.stdout.write('Please, confirm you have made backup of the Ambari db [y/n] (n)? ')",
          "386:     if raw_input() != 'y':",
          "387:       return False",
          "388:     return True",
          "390:   def perform(self):",
          "391:     hdfs_client_hosts = self.find_hdfs_client_hosts()",
          "392:     self.stop_all_services()",
          "393:     self.read_configs()",
          "394:     self.delete_hdfs()",
          "395:     self.add_onefs()",
          "396:     self.configure_onefs()",
          "397:     self.install_onefs_clients(hdfs_client_hosts)",
          "398:     self.start_all_services()",
          "400:   def find_hdfs_client_hosts(self):",
          "401:     if self.cluster.has_service('HDFS'):",
          "402:       print 'Collecting hosts with HDFS_CLIENT'",
          "403:       hdfs_client_hosts = self.cluster.service('HDFS').component('HDFS_CLIENT').host_names()",
          "404:       self.storage.save('hdfs_client_hosts', hdfs_client_hosts)",
          "405:     else:",
          "406:       print 'Using previously saved HDFS client hosts'",
          "407:       hdfs_client_hosts = self.storage.load('hdfs_client_hosts')",
          "408:     print 'Found hosts %s' % hdfs_client_hosts",
          "409:     return hdfs_client_hosts",
          "411:   def stop_all_services(self):",
          "412:     print 'Stopping all services..'",
          "413:     self.cluster.stop_all().await()",
          "415:   def read_configs(self):",
          "416:     if self.cluster.has_service('HDFS'):",
          "417:       print 'Downloading core-site..'",
          "418:       self.core_site = self.cluster.config('core-site').latest().properties()",
          "419:       print 'Downloading hdfs-site..'",
          "420:       self.hdfs_site = self.cluster.config('hdfs-site').latest().properties()",
          "421:       print 'Downloading hadoop-env..'",
          "422:       self.hadoop_env = self.cluster.config('hadoop-env').latest().properties()",
          "423:       self.storage.save('core-site', self.core_site)",
          "424:       self.storage.save('hdfs-site', self.hdfs_site)",
          "425:       self.storage.save('hadoop-env', self.hadoop_env)",
          "426:     else:",
          "427:       print 'Using previously saved HDFS configs'",
          "428:       self.core_site = self.storage.load('core-site')",
          "429:       self.hdfs_site = self.storage.load('hdfs-site')",
          "430:       self.hadoop_env = self.storage.load('hadoop-env')",
          "432:   def delete_hdfs(self):",
          "433:     print 'Deleting HDFS..'",
          "434:     if self.cluster.has_service('HDFS'):",
          "435:       self.cluster.service('HDFS').delete()",
          "436:     else:",
          "437:       print 'Already deleted.'",
          "439:   def add_onefs(self):",
          "440:     print 'Adding ONEFS..'",
          "441:     if self.cluster.has_service('ONEFS'):",
          "442:       print 'Already added.'",
          "443:     else:",
          "444:       self.cluster.add_service('ONEFS')",
          "445:     try:",
          "446:       self.cluster.add_service_component('ONEFS', 'ONEFS_CLIENT')",
          "447:     except urllib2.HTTPError as e:",
          "448:       if e.code != 409:",
          "449:         raise e",
          "451:   def configure_onefs(self):",
          "452:     print 'Adding ONEFS config..'",
          "453:     self.cluster.add_config('onefs', random_tag('onefs'), { \"onefs_host\" : self.smart_connect_zone(self.core_site) })",
          "454:     print 'Adding core-site'",
          "455:     self.cluster.add_config('core-site', random_tag('new-core-site'), self.core_site)",
          "456:     print 'Adding hdfs-site'",
          "457:     self.cluster.add_config('hdfs-site', random_tag('new-hdfs-site'), self.hdfs_site)",
          "458:     print 'Adding hadoop-env-site'",
          "459:     self.cluster.add_config('hadoop-env', random_tag('new-hadoop-env'), self.hadoop_env)",
          "461:   def smart_connect_zone(self, core_site):",
          "462:     def_fs = core_site['fs.defaultFS']",
          "463:     if '://' in def_fs:",
          "464:       def_fs = def_fs.split('://')[1]",
          "465:     if ':' in def_fs:",
          "466:       def_fs = def_fs.split(':')[0]",
          "467:     return def_fs",
          "469:   def install_onefs_clients(self, hdfs_client_hosts):",
          "470:     print 'Adding ONEFS_CLIENT to hosts: %s' % (hdfs_client_hosts)",
          "471:     results = [self.add_onefs_client(each) for each in hdfs_client_hosts]",
          "472:     for each in results:",
          "473:       each.await()",
          "475:   def add_onefs_client(self, hostname):",
          "476:     try:",
          "477:       return self.cluster.add_host_component('ONEFS', 'ONEFS_CLIENT', hostname)",
          "478:     except urllib2.HTTPError as e:",
          "479:       if e.code == 409:",
          "480:         print 'Already added to host %s' % hostname",
          "481:         return NoResult()",
          "482:       else:",
          "483:         raise e",
          "486:   def start_all_services(self):",
          "487:     print 'Starting all services..'",
          "488:     self.cluster.start_all().await()",
          "490: def random_tag(tag_name): return \"%s-%s\" % (tag_name, time.time())",
          "492: class CommandLine:",
          "493:   def __init__(self):",
          "494:     self.parser = OptionParser()",
          "495:     self.parser.add_option(\"-o\", '--host', dest='host', help='Ambari server host', default='localhost')",
          "496:     self.parser.add_option(\"-p\", '--port', dest='port', help='Ambari server port', default='8080')",
          "497:     self.parser.add_option(\"-c\", '--cluster', dest='cluster_name', help='Cluster name')",
          "498:     self.parser.add_option(\"-u\", '--user', dest='admin_user', help='Admin user name', default='admin')",
          "499:     self.parser.add_option(\"-k\", '--password', dest='admin_pass', help='Admin user name', default='admin')",
          "500:     self.parser.add_option(\"-t\", '--protocol', dest='protocol', help='HTTP protocol', default='http')",
          "502:   def parse_options(self):",
          "503:     options, args = self.parser.parse_args()",
          "504:     if not options.cluster_name:",
          "505:       self.parser.error('Missing cluster name.')",
          "506:     if not options.protocol or options.protocol.lower() not in ['http', 'https']:",
          "507:       self.parser.error('Invalid protocol. Use http or https.')",
          "508:     if not options.port or not options.port.isdigit():",
          "509:       self.parser.error('Port should be an integer')",
          "510:     return options",
          "512: if __name__ == '__main__':",
          "513:   options = CommandLine().parse_options()",
          "514:   cluster = Cluster(",
          "515:     options.cluster_name,",
          "516:     options.host,",
          "517:     port=int(options.port),",
          "518:     protocol=options.protocol.lower(),",
          "519:     user=options.admin_user,",
          "520:     password=options.admin_pass)",
          "521:   print 'This script will replace the HDFS service to ONEFS'",
          "522:   print 'The following prerequisites are required:'",
          "523:   print '  * ONEFS management package must be installed'",
          "524:   print '  * Ambari must be upgraded to >=v2.7.0'",
          "525:   print '  * Stack must be upgraded to HDP-3.0'",
          "526:   print '  * Is highly recommended to backup ambari database before you proceed.'",
          "527:   conversion = Conversion(cluster, FsStorage())",
          "528:   if not conversion.check_prerequisites():",
          "529:     sys.exit()",
          "530:   else:",
          "531:     conversion.perform()",
          "",
          "---------------"
        ]
      }
    }
  ]
}