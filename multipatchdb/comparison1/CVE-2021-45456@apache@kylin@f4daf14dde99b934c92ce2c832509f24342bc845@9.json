{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8365e66d81cd3f804a36571bed1892aa45360094",
      "candidate_info": {
        "commit_hash": "8365e66d81cd3f804a36571bed1892aa45360094",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/8365e66d81cd3f804a36571bed1892aa45360094",
        "files": [
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala"
        ],
        "message": "add license description",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/utils/QueryExecutionInterceptListener.scala"
        ]
      }
    },
    {
      "candidate_hash": "afa3bbaa44ed901b83c2ccf86222548a3cf72311",
      "candidate_info": {
        "commit_hash": "afa3bbaa44ed901b83c2ccf86222548a3cf72311",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/afa3bbaa44ed901b83c2ccf86222548a3cf72311",
        "files": [
          "kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java"
        ],
        "message": "KYLIN-5191 fix Can not see executors on spardar page on AWS EMR 6",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java||kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java||kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java": [
          "File: kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java -> kylin-spark-project/kylin-spark-classloader/src/main/java/org/apache/kylin/spark/classloader/TomcatClassLoader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.net.URL;",
          "26: import java.util.HashSet;",
          "27: import java.util.Set;",
          "28: import org.apache.catalina.loader.ParallelWebappClassLoader;",
          "29: import org.slf4j.Logger;",
          "30: import org.slf4j.LoggerFactory;",
          "32: public class TomcatClassLoader extends ParallelWebappClassLoader {",
          "35:             \"com.sun.\", \"launcher.\", \"javax.\", \"org.ietf\", \"java\", \"org.omg\", \"org.w3c\", \"org.xml\", \"sunw.\",",
          "39:             \"org.apache.calcite\"};",
          "41:             \"Baz\"};",
          "43:     private static final Set<String> wontFindClasses = new HashSet<>();",
          "",
          "[Removed Lines]",
          "33:     private static final String[] PARENT_CL_PRECEDENT_CLASSES = new String[] {",
          "37:             \"org.slf4j\", \"org.apache.commons.logging\", \"org.apache.log4j\", \"org.apache.catalina\", \"org.apache.tomcat\"};",
          "38:     private static final String[] THIS_CL_PRECEDENT_CLASSES = new String[] {\"org.apache.kylin\",",
          "40:     private static final String[] CODE_GEN_CLASS = new String[] {\"org.apache.spark.sql.catalyst.expressions.Object\",",
          "",
          "[Added Lines]",
          "34:     private static final String[] PARENT_CL_PRECEDENT_CLASSES = new String[]{",
          "38:             \"org.slf4j\", \"org.apache.commons.logging\", \"org.apache.log4j\", \"org.apache.catalina\", \"org.apache.tomcat\",",
          "40:             \"org.glassfish.hk2\"};",
          "41:     private static final String[] THIS_CL_PRECEDENT_CLASSES = new String[]{\"org.apache.kylin\",",
          "43:     private static final String[] CODE_GEN_CLASS = new String[]{\"org.apache.spark.sql.catalyst.expressions.Object\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1948031acb899cf30e7f4c27fb5f5a2c65371e9e",
      "candidate_info": {
        "commit_hash": "1948031acb899cf30e7f4c27fb5f5a2c65371e9e",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/1948031acb899cf30e7f4c27fb5f5a2c65371e9e",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java"
        ],
        "message": "KYLIN-4521 make the default-time-filter enable\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>\n(cherry picked from commit 52edac1521b3b51d34e972b28df3d9dd462b394f)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java||server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2927:         return getOptional(\"kylin.query.intersect.separator\", \"|\");",
          "2928:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2930:     public int getDefaultTimeFilter() {",
          "2931:         return Integer.parseInt(getOptional(\"kylin.web.default-time-filter\", \"2\"));",
          "2932:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java||server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.util.Locale;",
          "30: import org.apache.kylin.common.util.CliCommandExecutor;",
          "31: import org.apache.kylin.job.JobInstance;",
          "32: import org.apache.kylin.job.constant.JobStatusEnum;",
          "33: import org.apache.kylin.job.constant.JobTimeFilterEnum;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.apache.kylin.common.KylinConfig;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:             }",
          "83:         }",
          "86:         if (null != jobRequest.getTimeFilter()) {",
          "87:             timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());",
          "88:         }",
          "90:         JobService.JobSearchMode jobSearchMode = JobService.JobSearchMode.CUBING_ONLY;",
          "",
          "[Removed Lines]",
          "85:         JobTimeFilterEnum timeFilter = JobTimeFilterEnum.LAST_ONE_WEEK;",
          "",
          "[Added Lines]",
          "86:         JobTimeFilterEnum timeFilter = null;",
          "89:         } else {",
          "90:             timeFilter = JobTimeFilterEnum.getByCode(KylinConfig.getInstanceFromEnv().getDefaultTimeFilter());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d5f176fc3c940309dd9fd91f68b2bcd14f37975",
      "candidate_info": {
        "commit_hash": "1d5f176fc3c940309dd9fd91f68b2bcd14f37975",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/1d5f176fc3c940309dd9fd91f68b2bcd14f37975",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala",
          "kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala"
        ],
        "message": "KYLIN-4937 Verify the uniqueness of the global dictionary after building global dictionary",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala",
          "kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala||kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "699:         return Long.parseLong(getOptional(\"kylin.dictionary.globalV2-version-ttl\", \"259200000\"));",
          "700:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "702:     public boolean isCheckGlobalDictV2() {",
          "703:         return Boolean.parseBoolean(getOptional(\"kylin.dictionary.globalV2-check\", \"true\"));",
          "704:     }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictBuilderAssist.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       desc.kylinconf.getGlobalDictV2MaxVersions, desc.kylinconf.getGlobalDictV2VersionTTL)",
          "72:   }",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:   @throws[IOException]",
          "78:   def checkGlobalDict(ref: ColumnDesc, desc: SegmentInfo, bucketPartitionSize: Int,",
          "79:                       ss: SparkSession): Unit = {",
          "80:     if (desc.kylinconf.isCheckGlobalDictV2) {",
          "81:       val globalDict = new NGlobalDictionary(desc.project, ref.tableAliasName, ref.columnName, desc.kylinconf.getHdfsWorkingDirectory)",
          "82:       val broadcastDict = ss.sparkContext.broadcast(globalDict)",
          "83:       import ss.implicits._",
          "84:       val existsDictDs = ss.createDataset(0 to bucketPartitionSize)",
          "85:         .flatMap {",
          "86:           bucketId =>",
          "87:             val gDict: NGlobalDictionary = broadcastDict.value",
          "88:             val bucketDict: NBucketDictionary = gDict.loadBucketDictionary(bucketId)",
          "89:             val tupleList = new util.ArrayList[(String, Long)](bucketDict.getAbsoluteDictMap.size)",
          "90:             bucketDict.getAbsoluteDictMap.object2LongEntrySet.asScala",
          "91:               .foreach(dictTuple => tupleList.add((dictTuple.getKey, dictTuple.getLongValue)))",
          "92:             tupleList.asScala.iterator",
          "93:         }",
          "94:       val valueCount = existsDictDs.dropDuplicates(\"_1\").count()",
          "95:       val keyCount = existsDictDs.dropDuplicates(\"_2\").count()",
          "96:       if (valueCount != keyCount) {",
          "97:         logError(s\"Global dict build error on column ${ref.columnName}, \" +",
          "98:           s\"key distinct count is ${keyCount}, and value distinct count is ${valueCount}.\")",
          "99:         throw new RuntimeException(s\"Global dict build error on column ${ref.columnName}, \" +",
          "100:           s\"key distinct count is ${keyCount}, and value distinct count is ${valueCount}.\")",
          "101:       }",
          "102:     }",
          "103:   }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/builder/CubeDictionaryBuilder.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.io.IOException",
          "21: import java.util",
          "23: import org.apache.kylin.common.KylinConfig",
          "24: import org.apache.kylin.common.lock.DistributedLock",
          "25: import org.apache.kylin.common.util.HadoopUtil",
          "26: import org.apache.kylin.engine.spark.builder.CubeBuilderHelper._",
          "27: import org.apache.kylin.engine.spark.job.NSparkCubingUtil",
          "28: import org.apache.kylin.engine.spark.metadata.{ColumnDesc, SegmentInfo}",
          "30: import org.apache.spark.internal.Logging",
          "31: import org.apache.spark.sql.functions.{col, expr}",
          "32: import org.apache.spark.sql.types.StringType",
          "",
          "[Removed Lines]",
          "29: import org.apache.spark.dict.NGlobalDictionary",
          "",
          "[Added Lines]",
          "28: import org.apache.spark.dict.{NGlobalDictBuilderAssist, NGlobalDictionary}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     logInfo(s\"Start building global dictionaries V2 for seg $seg\")",
          "55:     val m = s\"Build global dictionaries V2 for seg $seg succeeded\"",
          "56:     time(m, colRefSet.asScala.foreach(col => safeBuild(col)))",
          "59:   }",
          "61:   @throws[IOException]",
          "",
          "[Removed Lines]",
          "58:     ss.conf.set(\"spark.sql.adaptive.enabled\", aeOriginalValue);",
          "",
          "[Added Lines]",
          "56:     if (aeOriginalValue) {",
          "58:       ss.conf.set(\"spark.sql.adaptive.enabled\", aeOriginalValue);",
          "59:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:       }",
          "97:     globalDict.writeMetaDict(bucketPartitionSize, seg.kylinconf.getGlobalDictV2MaxVersions, seg.kylinconf.getGlobalDictV2VersionTTL)",
          "98:   }",
          "100:   private def getLockPath(pathName: String) = s\"/${seg.project}${HadoopUtil.GLOBAL_DICT_STORAGE_ROOT}/$pathName/lock\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     NGlobalDictBuilderAssist.checkGlobalDict(ref, seg, bucketPartitionSize, ss)",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala||kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala -> kylin-spark-project/kylin-spark-engine/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     afterJoin1.collect()",
          "99:     val jobs = helper.getJobsByGroupId(groupId)",
          "101:     DefaultScheduler.destroyInstance()",
          "102:   }",
          "",
          "[Removed Lines]",
          "100:     Assert.assertEquals(jobs.length, 13)",
          "",
          "[Added Lines]",
          "100:     Assert.assertEquals(jobs.length, 15)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7f9d7899e2e9c3a4e22fbeb9e3a037035047fde",
      "candidate_info": {
        "commit_hash": "f7f9d7899e2e9c3a4e22fbeb9e3a037035047fde",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/f7f9d7899e2e9c3a4e22fbeb9e3a037035047fde",
        "files": [
          "build/bin/check-env.sh",
          "build/bin/find-kafka-dependency.sh"
        ],
        "message": "KYLIN-3698 some enhancement for check-env.sh\n\n(cherry picked from commit a471808626ee9349173255d329673c509b5f4037)",
        "before_after_code_files": [
          "build/bin/check-env.sh||build/bin/check-env.sh",
          "build/bin/find-kafka-dependency.sh||build/bin/find-kafka-dependency.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build/bin/check-env.sh||build/bin/check-env.sh": [
          "File: build/bin/check-env.sh -> build/bin/check-env.sh"
        ],
        "build/bin/find-kafka-dependency.sh||build/bin/find-kafka-dependency.sh": [
          "File: build/bin/find-kafka-dependency.sh -> build/bin/find-kafka-dependency.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: source ${KYLIN_HOME:-\"$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)/../\"}/bin/header.sh",
          "22: kafka_home=",
          "24: echo Retrieving kafka dependency...",
          "26: if [ -z \"$KAFKA_HOME\" ]",
          "27: then",
          "29: else",
          "30:     verbose \"KAFKA_HOME is set to: $KAFKA_HOME, use it to locate kafka dependencies.\"",
          "31:     kafka_home=$KAFKA_HOME",
          "",
          "[Removed Lines]",
          "28:     verbose \"Couldn't find kafka home. If you want to enable streaming processing, Please set KAFKA_HOME to the path which contains kafka dependencies.\"",
          "",
          "[Added Lines]",
          "22: echo Retrieving Kafka dependency...",
          "30:     echo \"Couldn't find kafka home. If you want to enable streaming processing, Please set KAFKA_HOME to the path which contains kafka dependencies.\"",
          "31:     exit 3",
          "",
          "---------------"
        ]
      }
    }
  ]
}