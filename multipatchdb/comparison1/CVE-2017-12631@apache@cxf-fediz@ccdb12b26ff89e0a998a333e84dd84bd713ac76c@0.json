{
  "cve_id": "CVE-2017-12631",
  "cve_desc": "Apache CXF Fediz ships with a number of container-specific plugins to enable WS-Federation for applications. A CSRF (Cross Style Request Forgery) style vulnerability has been found in the Spring 2, Spring 3 and Spring 4 plugins in versions before 1.4.3 and 1.3.3. The vulnerability can result in a security context that is set up using a malicious client's roles for the given enduser.",
  "repo": "apache/cxf-fediz",
  "patch_hash": "ccdb12b26ff89e0a998a333e84dd84bd713ac76c",
  "patch_info": {
    "commit_hash": "ccdb12b26ff89e0a998a333e84dd84bd713ac76c",
    "repo": "apache/cxf-fediz",
    "commit_url": "https://github.com/apache/cxf-fediz/commit/ccdb12b26ff89e0a998a333e84dd84bd713ac76c",
    "files": [
      "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
      "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
      "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
      "systests/webapps/springWebapp/src/main/webapp/WEB-INF/applicationContext-security.xml"
    ],
    "message": "Some improvements to the Spring plugins",
    "before_after_code_files": [
      "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
      "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
      "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
    ]
  },
  "patch_diff": {
    "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
      "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:     private void verifySavedState(HttpServletRequest request) {",
      "130:         HttpSession session = request.getSession(false);",
      "138:         }",
      "139:     }",
      "",
      "[Removed Lines]",
      "131:         if (session != null) {",
      "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "133:             String state = getState(request);",
      "134:             if (savedContext != null && !savedContext.equals(state)) {",
      "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
      "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "137:             }",
      "",
      "[Added Lines]",
      "132:         if (session == null) {",
      "133:             logger.warn(\"The received state does not match the state saved in the context\");",
      "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "135:         }",
      "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "138:         String state = getState(request);",
      "139:         if (savedContext == null || !savedContext.equals(state)) {",
      "140:             logger.warn(\"The received state does not match the state saved in the context\");",
      "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "",
      "---------------"
    ],
    "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
      "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:     private void verifySavedState(HttpServletRequest request) {",
      "130:         HttpSession session = request.getSession(false);",
      "138:         }",
      "139:     }",
      "",
      "[Removed Lines]",
      "131:         if (session != null) {",
      "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "133:             String state = getState(request);",
      "134:             if (savedContext != null && !savedContext.equals(state)) {",
      "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
      "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "137:             }",
      "",
      "[Added Lines]",
      "132:         if (session == null) {",
      "133:             logger.warn(\"The received state does not match the state saved in the context\");",
      "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "135:         }",
      "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "138:         String state = getState(request);",
      "139:         if (savedContext == null || !savedContext.equals(state)) {",
      "140:             logger.warn(\"The received state does not match the state saved in the context\");",
      "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "",
      "---------------"
    ],
    "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java": [
      "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:         csrfAttackTest(url);",
      "160:     }",
      "162: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "162:     @Override",
      "163:     @org.junit.Test",
      "164:     public void testCSRFAttack2() throws Exception {",
      "165:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
      "166:             + \"/j_spring_fediz_security_check\";",
      "167:         csrfAttackTest2(url);",
      "168:     }",
      "",
      "---------------"
    ],
    "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java": [
      "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:             + \"/j_spring_fediz_security_check\";",
      "158:         csrfAttackTest(url);",
      "159:     }",
      "160: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "161:     @Override",
      "162:     @org.junit.Test",
      "163:     public void testCSRFAttack2() throws Exception {",
      "164:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
      "165:             + \"/j_spring_fediz_security_check\";",
      "166:         csrfAttackTest2(url);",
      "167:     }",
      "",
      "---------------"
    ],
    "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java": [
      "File: systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java -> systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "800:     }",
      "802: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "802:     @org.junit.Test",
      "803:     public void testCSRFAttack2() throws Exception {",
      "804:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
      "805:         csrfAttackTest2(url);",
      "806:     }",
      "808:     protected void csrfAttackTest2(String rpURL) throws Exception {",
      "809:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
      "812:         WebClient webClient2 = new WebClient();",
      "813:         webClient2.getOptions().setUseInsecureSSL(true);",
      "814:         webClient2.getCredentialsProvider().setCredentials(",
      "815:             new AuthScope(\"localhost\", Integer.parseInt(getIdpHttpsPort())),",
      "816:             new UsernamePasswordCredentials(\"bob\", \"bob\"));",
      "818:         webClient2.getOptions().setJavaScriptEnabled(false);",
      "819:         final HtmlPage idpPage2 = webClient2.getPage(url);",
      "820:         webClient2.getOptions().setJavaScriptEnabled(true);",
      "821:         Assert.assertEquals(\"IDP SignIn Response Form\", idpPage2.getTitleText());",
      "826:         WebRequest request = new WebRequest(new URL(rpURL), HttpMethod.POST);",
      "827:         request.setRequestParameters(new ArrayList<NameValuePair>());",
      "829:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
      "831:         for (DomElement result : results) {",
      "832:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
      "833:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
      "834:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
      "835:                 String value = result.getAttributeNS(null, \"value\");",
      "836:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
      "837:             }",
      "838:         }",
      "840:         WebClient webClient = new WebClient();",
      "841:         webClient.getOptions().setUseInsecureSSL(true);",
      "843:         try {",
      "844:             webClient.getPage(request);",
      "845:             Assert.fail(\"Failure expected on a CSRF attack\");",
      "846:         } catch (FailingHttpStatusCodeException ex) {",
      "848:         }",
      "850:         webClient.close();",
      "851:         webClient2.close();",
      "853:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f7522979aeee0f8bc0531519fa724aef56acbbe",
      "candidate_info": {
        "commit_hash": "5f7522979aeee0f8bc0531519fa724aef56acbbe",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/5f7522979aeee0f8bc0531519fa724aef56acbbe",
        "files": [
          "plugins/pom.xml",
          "plugins/spring/README.txt",
          "plugins/spring3/README.txt",
          "plugins/spring3/pom.xml",
          "plugins/spring3/src/main/assembly/assembly.xml",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java",
          "plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties",
          "systests/spring/pom.xml",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
          "systests/spring/src/test/resources/fediz_config.xml",
          "systests/webapps/pom.xml",
          "systests/webapps/spring3Webapp/pom.xml",
          "systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java",
          "systests/webapps/spring3Webapp/src/main/resources/clienttrust.jks",
          "systests/webapps/spring3Webapp/src/main/resources/log4j.properties",
          "systests/webapps/spring3Webapp/src/main/resources/logging.properties",
          "systests/webapps/spring3Webapp/src/main/webapp/WEB-INF/applicationContext-security.xml",
          "systests/webapps/spring3Webapp/src/main/webapp/WEB-INF/web.xml",
          "systests/webapps/spring3Webapp/src/main/webapp/index.html",
          "systests/webapps/spring3Webapp/src/main/webapp/secure/test.html"
        ],
        "message": "Adding spring3 plugin + tests back in",
        "before_after_code_files": [
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java",
          "plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties||plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
          "systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java||systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java",
          "systests/webapps/spring3Webapp/src/main/resources/log4j.properties||systests/webapps/spring3Webapp/src/main/resources/log4j.properties",
          "systests/webapps/spring3Webapp/src/main/resources/logging.properties||systests/webapps/spring3Webapp/src/main/resources/logging.properties",
          "systests/webapps/spring3Webapp/src/main/webapp/index.html||systests/webapps/spring3Webapp/src/main/webapp/index.html",
          "systests/webapps/spring3Webapp/src/main/webapp/secure/test.html||systests/webapps/spring3Webapp/src/main/webapp/secure/test.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java"
          ],
          "candidate": [
            "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring;",
          "22: import java.util.List;",
          "24: import org.apache.cxf.fediz.core.config.FedizContext;",
          "26: public interface FederationConfig {",
          "28:     List<FedizContext> getFedizContextList();",
          "30:     FedizContext getFedizContext(String contextName);",
          "32:     FedizContext getFedizContext();",
          "33: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationConfigImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring;",
          "22: import java.util.List;",
          "24: import javax.servlet.ServletContext;",
          "26: import org.apache.cxf.fediz.core.config.FedizConfigurator;",
          "27: import org.apache.cxf.fediz.core.config.FedizContext;",
          "28: import org.slf4j.Logger;",
          "29: import org.slf4j.LoggerFactory;",
          "30: import org.springframework.beans.factory.BeanCreationException;",
          "31: import org.springframework.core.io.Resource;",
          "32: import org.springframework.util.Assert;",
          "33: import org.springframework.web.context.ServletContextAware;",
          "35: public class FederationConfigImpl implements FederationConfig, ServletContextAware {",
          "37:     private static final Logger LOG = LoggerFactory.getLogger(FederationConfigImpl.class);",
          "39:     private Resource configFile;",
          "40:     private String contextName;",
          "42:     private ServletContext servletContext;",
          "43:     private FedizConfigurator configurator = new FedizConfigurator();",
          "46:     public Resource getConfigFile() {",
          "47:         return configFile;",
          "48:     }",
          "50:     public void setConfigFile(Resource configFile) {",
          "51:         this.configFile = configFile;",
          "52:     }",
          "54:     public String getContextName() {",
          "55:         return contextName;",
          "56:     }",
          "58:     public void setContextName(String contextName) {",
          "59:         this.contextName = contextName;",
          "60:     }",
          "62:     public void init() {",
          "63:         Assert.notNull(this.configFile, \"property 'configFile' mandatory\");",
          "64:         try {",
          "65:             configurator.loadConfig(this.configFile.getFile());",
          "66:         } catch (Exception e) {",
          "67:             LOG.error(\"Failed to parse '\" + configFile.getDescription() + \"'\", e);",
          "68:             throw new BeanCreationException(\"Failed to parse '\" + configFile.getDescription() + \"'\", e);",
          "69:         }",
          "70:     }",
          "72:     @Override",
          "73:     public List<FedizContext> getFedizContextList() {",
          "74:         return configurator.getFedizContextList();",
          "75:     }",
          "77:     @Override",
          "78:     public FedizContext getFedizContext(String context) {",
          "79:         FedizContext ctx = configurator.getFedizContext(context);",
          "80:         if (ctx == null) {",
          "81:             LOG.error(\"Federation context '\" + context + \"' not found.\");",
          "82:             throw new IllegalStateException(\"Federation context '\" + context + \"' not found.\");",
          "83:         }",
          "84:         return ctx;",
          "85:     }",
          "87:     @Override",
          "88:     public FedizContext getFedizContext() {",
          "89:         if (servletContext != null) {",
          "90:             LOG.debug(\"Reading federation configuration for context '{}'\",",
          "91:                       servletContext.getContextPath());",
          "92:             return getFedizContext(servletContext.getContextPath());",
          "93:         } else {",
          "94:             Assert.notNull(contextName, \"Property 'contextName' must be configured because ServletContext null\");",
          "95:             return getFedizContext(contextName);",
          "96:         }",
          "97:     }",
          "99:     @Override",
          "100:     public void setServletContext(ServletContext servletContext) {",
          "101:         this.servletContext = servletContext;",
          "102:     }",
          "104: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/FederationUser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring;",
          "22: import java.util.Collection;",
          "24: import org.apache.cxf.fediz.core.ClaimCollection;",
          "25: import org.springframework.security.core.GrantedAuthority;",
          "26: import org.springframework.security.core.userdetails.User;",
          "28: public class FederationUser extends User {",
          "30:     private static final long serialVersionUID = -2231762973730849416L;",
          "32:     private ClaimCollection claims;",
          "34:     public FederationUser(String username, String password, boolean enabled, boolean accountNonExpired,",
          "35:                           boolean credentialsNonExpired, boolean accountNonLocked,",
          "36:                           Collection<? extends GrantedAuthority> authorities) {",
          "37:         super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);",
          "38:     }",
          "40:     public FederationUser(String username, String password,",
          "41:                           Collection<? extends GrantedAuthority> authorities, ClaimCollection claims) {",
          "42:         super(username, password, true, true, true, true, authorities);",
          "43:         this.claims = claims;",
          "44:     }",
          "46:     public ClaimCollection getClaims() {",
          "47:         return this.claims;",
          "48:     }",
          "53: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/SpringFedizMessageSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring;",
          "22: import org.springframework.context.support.MessageSourceAccessor;",
          "23: import org.springframework.context.support.ResourceBundleMessageSource;",
          "35: public class SpringFedizMessageSource extends ResourceBundleMessageSource {",
          "37:     public SpringFedizMessageSource() {",
          "38:         setBasename(\"org.apache.cxf.fediz.spring.messages\");",
          "39:     }",
          "42:     public static MessageSourceAccessor getAccessor() {",
          "43:         return new MessageSourceAccessor(new SpringFedizMessageSource());",
          "44:     }",
          "45: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/AbstractFederationUserDetailsService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.cxf.fediz.spring.authentication;",
          "21: import org.apache.cxf.fediz.core.processor.FedizResponse;",
          "22: import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;",
          "23: import org.springframework.security.core.userdetails.UserDetails;",
          "28: public abstract class AbstractFederationUserDetailsService",
          "29:         implements AuthenticationUserDetailsService<FederationResponseAuthenticationToken> {",
          "31:     public final UserDetails loadUserDetails(final FederationResponseAuthenticationToken token) {",
          "32:         return loadUserDetails(token.getResponse());",
          "33:     }",
          "41:     protected abstract UserDetails loadUserDetails(FedizResponse response);",
          "42: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/ExpiredTokenException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.authentication;",
          "22: import org.springframework.security.core.AuthenticationException;",
          "27: public class ExpiredTokenException extends AuthenticationException {",
          "29:     private static final long serialVersionUID = 7639463618762010981L;",
          "31:     public ExpiredTokenException(String errorMessage) {",
          "32:         super(errorMessage);",
          "33:     }",
          "35: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.authentication;",
          "22: import org.apache.cxf.fediz.core.config.FedizContext;",
          "23: import org.apache.cxf.fediz.core.processor.FedizProcessor;",
          "24: import org.apache.cxf.fediz.core.processor.FedizProcessorFactory;",
          "25: import org.apache.cxf.fediz.core.processor.FedizRequest;",
          "26: import org.apache.cxf.fediz.core.processor.FedizResponse;",
          "27: import org.apache.cxf.fediz.spring.FederationConfig;",
          "28: import org.apache.cxf.fediz.spring.SpringFedizMessageSource;",
          "29: import org.slf4j.Logger;",
          "30: import org.slf4j.LoggerFactory;",
          "31: import org.springframework.beans.factory.InitializingBean;",
          "32: import org.springframework.context.MessageSource;",
          "33: import org.springframework.context.MessageSourceAware;",
          "34: import org.springframework.context.support.MessageSourceAccessor;",
          "35: import org.springframework.security.authentication.AccountStatusUserDetailsChecker;",
          "36: import org.springframework.security.authentication.AuthenticationProvider;",
          "37: import org.springframework.security.authentication.BadCredentialsException;",
          "38: import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
          "39: import org.springframework.security.core.Authentication;",
          "40: import org.springframework.security.core.AuthenticationException;",
          "41: import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;",
          "42: import org.springframework.security.core.authority.mapping.NullAuthoritiesMapper;",
          "43: import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;",
          "44: import org.springframework.security.core.userdetails.UserDetails;",
          "45: import org.springframework.security.core.userdetails.UserDetailsChecker;",
          "46: import org.springframework.util.Assert;",
          "53: public class FederationAuthenticationProvider implements AuthenticationProvider, InitializingBean, MessageSourceAware {",
          "54:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationProvider.class);",
          "56:     protected MessageSourceAccessor messages = SpringFedizMessageSource.getAccessor();",
          "58:     private AuthenticationUserDetailsService<FederationResponseAuthenticationToken> authenticationUserDetailsService;",
          "59:     private FederationConfig federationConfig;",
          "61:     private final UserDetailsChecker userDetailsChecker = new AccountStatusUserDetailsChecker();",
          "62:     private GrantedAuthoritiesMapper authoritiesMapper = new NullAuthoritiesMapper();",
          "64:     public AuthenticationUserDetailsService<FederationResponseAuthenticationToken>",
          "65:     getAuthenticationUserDetailsService() {",
          "66:         return authenticationUserDetailsService;",
          "67:     }",
          "69:     public void setAuthenticationUserDetailsService(",
          "70:         AuthenticationUserDetailsService<FederationResponseAuthenticationToken> authenticationUserDetailsService) {",
          "71:         this.authenticationUserDetailsService = authenticationUserDetailsService;",
          "72:     }",
          "74:     public FederationConfig getFederationConfig() {",
          "75:         return federationConfig;",
          "76:     }",
          "78:     public void setFederationConfig(FederationConfig federationConfig) {",
          "79:         this.federationConfig = federationConfig;",
          "80:     }",
          "84:     public void afterPropertiesSet() throws Exception {",
          "85:         Assert.notNull(this.authenticationUserDetailsService, \"An authenticationUserDetailsService must be set\");",
          "86:         Assert.notNull(this.messages, \"A message source must be set\");",
          "87:         Assert.notNull(this.federationConfig, \"FederationConfig cannot be null.\");",
          "88:     }",
          "90:     public Authentication authenticate(Authentication authentication) throws AuthenticationException {",
          "91:         if (!supports(authentication.getClass())) {",
          "92:             return null;",
          "93:         }",
          "95:         if (!(authentication instanceof UsernamePasswordAuthenticationToken)) {",
          "96:             return null;",
          "97:         }",
          "100:         if ((authentication.getCredentials() == null) || \"\".equals(authentication.getCredentials())) {",
          "101:             throw new BadCredentialsException(messages.getMessage(\"FederationAuthenticationProvider.noSignInRequest\",",
          "102:                     \"Failed to get SignIn request\"));",
          "103:         }",
          "105:         FederationAuthenticationToken result = this.authenticateNow(authentication);",
          "106:         result.setDetails(authentication.getDetails());",
          "107:         return result;",
          "108:     }",
          "110:     private FederationAuthenticationToken authenticateNow(final Authentication authentication)",
          "111:         throws AuthenticationException {",
          "112:         try {",
          "113:             FedizRequest wfReq = (FedizRequest)authentication.getCredentials();",
          "115:             FedizContext fedContext = federationConfig.getFedizContext();",
          "116:             FedizProcessor wfProc =",
          "117:                 FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());",
          "118:             FedizResponse wfRes = wfProc.processRequest(wfReq, fedContext);",
          "120:             final UserDetails userDetails = loadUserByFederationResponse(wfRes);",
          "121:             userDetailsChecker.check(userDetails);",
          "122:             return new FederationAuthenticationToken(userDetails, authentication.getCredentials(),",
          "123:                     authoritiesMapper.mapAuthorities(userDetails.getAuthorities()), userDetails, wfRes);",
          "124:         } catch (Exception e) {",
          "125:             LOG.error(\"Failed to validate SignIn request\", e);",
          "126:             throw new BadCredentialsException(e.getMessage(), e);",
          "127:         }",
          "128:     }",
          "136:     protected UserDetails loadUserByFederationResponse(final FedizResponse response) {",
          "137:         final FederationResponseAuthenticationToken token = new FederationResponseAuthenticationToken(response);",
          "138:         return this.authenticationUserDetailsService.loadUserDetails(token);",
          "139:     }",
          "141:     public void setMessageSource(final MessageSource messageSource) {",
          "142:         this.messages = new MessageSourceAccessor(messageSource);",
          "143:     }",
          "145:     public void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {",
          "146:         this.authoritiesMapper = authoritiesMapper;",
          "147:     }",
          "149:     public boolean supports(final Class<?> authentication) {",
          "150:         return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication))",
          "151:             || (FederationAuthenticationToken.class.isAssignableFrom(authentication));",
          "152:     }",
          "153: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationAuthenticationToken.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.authentication;",
          "22: import java.io.Serializable;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.List;",
          "27: import org.w3c.dom.Element;",
          "28: import org.apache.cxf.fediz.core.ClaimCollection;",
          "29: import org.apache.cxf.fediz.core.FedizPrincipal;",
          "30: import org.apache.cxf.fediz.core.processor.FedizResponse;",
          "31: import org.springframework.security.authentication.AbstractAuthenticationToken;",
          "32: import org.springframework.security.core.GrantedAuthority;",
          "33: import org.springframework.security.core.SpringSecurityCoreVersion;",
          "34: import org.springframework.security.core.userdetails.UserDetails;",
          "39: public class FederationAuthenticationToken extends AbstractAuthenticationToken",
          "40:     implements Serializable, FedizPrincipal {",
          "42:     private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;",
          "44:     private final Object credentials;",
          "45:     private final Object principal;",
          "46:     private final UserDetails userDetails;",
          "47:     private final FedizResponse response;",
          "48:     private List<String> roles = Collections.emptyList();",
          "51:     public FederationAuthenticationToken(final Object principal, final Object credentials,",
          "52:         final Collection<? extends GrantedAuthority> authorities, final UserDetails userDetails,",
          "53:         final FedizResponse response) {",
          "54:         super(authorities);",
          "56:         if ((principal == null) || \"\".equals(principal) || (credentials == null)",
          "57:             || \"\".equals(credentials) || (authorities == null) || (userDetails == null) || (response == null)) {",
          "58:             throw new IllegalArgumentException(\"Cannot pass null or empty values to constructor\");",
          "59:         }",
          "61:         this.principal = principal;",
          "62:         this.credentials = credentials;",
          "63:         this.userDetails = userDetails;",
          "64:         this.response = response;",
          "65:         setAuthenticated(true);",
          "66:         if (response.getRoles() != null) {",
          "67:             this.roles = response.getRoles();",
          "68:         }",
          "69:     }",
          "71:     public Object getCredentials() {",
          "72:         return this.credentials;",
          "73:     }",
          "75:     public Object getPrincipal() {",
          "76:         return this.principal;",
          "77:     }",
          "79:     public FedizResponse getResponse() {",
          "80:         return this.response;",
          "81:     }",
          "83:     public UserDetails getUserDetails() {",
          "84:         return userDetails;",
          "85:     }",
          "87:     public String toString() {",
          "88:         StringBuilder sb = new StringBuilder();",
          "89:         sb.append(super.toString());",
          "90:         sb.append(\" Response: \").append(this.response);",
          "91:         sb.append(\" Credentials: \").append(this.credentials);",
          "93:         return sb.toString();",
          "94:     }",
          "96:     @Override",
          "97:     public ClaimCollection getClaims() {",
          "98:         return new ClaimCollection(response.getClaims());",
          "99:     }",
          "101:     @Override",
          "102:     public Element getLoginToken() {",
          "103:         return response.getToken();",
          "104:     }",
          "106:     public List<String> getRoleClaims() {",
          "107:         return Collections.unmodifiableList(roles);",
          "108:     }",
          "109: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/FederationResponseAuthenticationToken.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.authentication;",
          "22: import java.util.ArrayList;",
          "24: import org.apache.cxf.fediz.core.processor.FedizResponse;",
          "25: import org.springframework.security.authentication.AbstractAuthenticationToken;",
          "26: import org.springframework.security.core.GrantedAuthority;",
          "27: import org.springframework.security.core.SpringSecurityCoreVersion;",
          "29: public final class FederationResponseAuthenticationToken extends AbstractAuthenticationToken {",
          "31:     private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;",
          "33:     private final FedizResponse response;",
          "36:     public FederationResponseAuthenticationToken(final FedizResponse response) {",
          "37:         super(new ArrayList<GrantedAuthority>());",
          "39:         this.response = response;",
          "40:     }",
          "42:     public Object getPrincipal() {",
          "43:         return this.response.getUsername();",
          "44:     }",
          "46:     public Object getCredentials() {",
          "47:         return this.response;",
          "48:     }",
          "50:     public FedizResponse getResponse() {",
          "51:         return this.response;",
          "52:     }",
          "54: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/authentication/GrantedAuthoritiesUserDetailsFederationService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.cxf.fediz.spring.authentication;",
          "21: import java.util.*;",
          "23: import org.apache.cxf.fediz.core.ClaimCollection;",
          "24: import org.apache.cxf.fediz.core.processor.FedizResponse;",
          "25: import org.apache.cxf.fediz.spring.FederationUser;",
          "26: import org.springframework.security.core.GrantedAuthority;",
          "27: import org.springframework.security.core.authority.SimpleGrantedAuthority;",
          "28: import org.springframework.security.core.userdetails.UserDetails;",
          "34: public class GrantedAuthoritiesUserDetailsFederationService",
          "35:         extends AbstractFederationUserDetailsService {",
          "37:     private boolean convertToUpperCase = true;",
          "39:     @Override",
          "40:     protected UserDetails loadUserDetails(FedizResponse response) {",
          "42:         final List<GrantedAuthority> grantedAuthorities = new ArrayList<>();",
          "44:         if (response.getRoles() != null) {",
          "45:             for (final String role : response.getRoles()) {",
          "47:                 grantedAuthorities.add(new SimpleGrantedAuthority(\"ROLE_\"",
          "48:                                         + (this.convertToUpperCase ? role.toUpperCase() : role)));",
          "49:             }",
          "50:         }",
          "51:         return new FederationUser(response.getUsername(), \"N/A\",",
          "52:                         grantedAuthorities, new ClaimCollection(response.getClaims()));",
          "54:     }",
          "62:     public void setConvertToUpperCase(final boolean convertToUpperCase) {",
          "63:         this.convertToUpperCase = convertToUpperCase;",
          "64:     }",
          "65: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/FederationPreAuthenticatedProcessingFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.preauth;",
          "22: import java.security.Principal;",
          "24: import javax.servlet.http.HttpServletRequest;",
          "26: import org.apache.cxf.fediz.core.FedizPrincipal;",
          "27: import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;",
          "35: public class FederationPreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {",
          "37:     private static final String SECURITY_TOKEN_ATTR = \"org.apache.fediz.SECURITY_TOKEN\";",
          "42:     protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) {",
          "43:         Principal principal = httpRequest.getUserPrincipal();",
          "44:         if (logger.isDebugEnabled()) {",
          "45:             logger.debug(\"PreAuthenticated J2EE principal: \"",
          "46:                          + principal == null ? null : principal.getName());",
          "47:         }",
          "48:         return principal;",
          "49:     }",
          "56:     protected Object getPreAuthenticatedCredentials(HttpServletRequest httpRequest) {",
          "57:         Principal principal = httpRequest.getUserPrincipal() == null ? null : httpRequest.getUserPrincipal();",
          "58:         if (principal instanceof FedizPrincipal) {",
          "59:             Object obj = httpRequest.getSession(false).getAttribute(SECURITY_TOKEN_ATTR);",
          "60:             if (obj != null)  {",
          "61:                 return obj;",
          "62:             } else {",
          "63:                 logger.error(\"Session must contain Federation response\");",
          "64:                 throw new IllegalStateException(\"Session must contain Federation response\");",
          "65:             }",
          "66:         } else {",
          "67:             logger.error(\"Principal must be instance of FedizPrincipal: \" + principal);",
          "68:             throw new IllegalStateException(\"Principal must be instance of FedizPrincipal\");",
          "69:         }",
          "71:     }",
          "72: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/preauth/PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.cxf.fediz.spring.preauth;",
          "21: import java.util.*;",
          "23: import org.apache.cxf.fediz.core.ClaimCollection;",
          "24: import org.apache.cxf.fediz.core.FedizPrincipal;",
          "25: import org.apache.cxf.fediz.spring.FederationUser;",
          "26: import org.springframework.security.core.Authentication;",
          "27: import org.springframework.security.core.AuthenticationException;",
          "28: import org.springframework.security.core.GrantedAuthority;",
          "29: import org.springframework.security.core.authority.GrantedAuthoritiesContainer;",
          "30: import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;",
          "31: import org.springframework.security.core.userdetails.UserDetails;",
          "32: import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;",
          "34: import org.springframework.util.Assert;",
          "52: public class PreAuthenticatedGrantedAuthoritiesUserDetailsFederationService",
          "53:         implements AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> {",
          "60:     public final UserDetails loadUserDetails(PreAuthenticatedAuthenticationToken token) throws AuthenticationException {",
          "61:         Assert.notNull(token.getDetails());",
          "62:         Assert.isInstanceOf(GrantedAuthoritiesContainer.class, token.getDetails());",
          "63:         Assert.isInstanceOf(FedizPrincipal.class, token.getPrincipal());",
          "64:         Collection<? extends GrantedAuthority> authorities =",
          "65:             ((GrantedAuthoritiesContainer) token.getDetails()).getGrantedAuthorities();",
          "67:         return createuserDetails(token, authorities, ((FedizPrincipal)token.getPrincipal()).getClaims());",
          "68:     }",
          "76:     protected UserDetails createuserDetails(Authentication token,",
          "77:         Collection<? extends GrantedAuthority> authorities, ClaimCollection claims) {",
          "78:         return new FederationUser(token.getName(), \"N/A\", authorities, claims);",
          "79:     }",
          "80: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.web;",
          "22: import java.io.IOException;",
          "23: import java.util.Map;",
          "24: import java.util.Map.Entry;",
          "26: import javax.servlet.ServletException;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "29: import javax.servlet.http.HttpSession;",
          "31: import org.apache.cxf.fediz.core.config.FedizContext;",
          "32: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "33: import org.apache.cxf.fediz.core.metadata.MetadataDocumentHandler;",
          "34: import org.apache.cxf.fediz.core.processor.FedizProcessor;",
          "35: import org.apache.cxf.fediz.core.processor.FedizProcessorFactory;",
          "36: import org.apache.cxf.fediz.core.processor.RedirectionResponse;",
          "37: import org.apache.cxf.fediz.spring.FederationConfig;",
          "38: import org.slf4j.Logger;",
          "39: import org.slf4j.LoggerFactory;",
          "40: import org.springframework.beans.BeansException;",
          "41: import org.springframework.beans.factory.InitializingBean;",
          "42: import org.springframework.context.ApplicationContext;",
          "43: import org.springframework.context.ApplicationContextAware;",
          "44: import org.springframework.security.core.AuthenticationException;",
          "45: import org.springframework.security.web.AuthenticationEntryPoint;",
          "46: import org.springframework.util.Assert;",
          "56: public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,",
          "57:     InitializingBean, ApplicationContextAware {",
          "62:     public static final String SAVED_CONTEXT = \"SAVED_CONTEXT\";",
          "64:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);",
          "66:     private ApplicationContext appContext;",
          "67:     private FederationConfig federationConfig;",
          "69:     public FederationConfig getFederationConfig() {",
          "70:         return federationConfig;",
          "71:     }",
          "73:     public void setFederationConfig(FederationConfig federationConfig) {",
          "74:         this.federationConfig = federationConfig;",
          "75:     }",
          "77:     public void afterPropertiesSet() throws Exception {",
          "78:         Assert.notNull(this.appContext, \"ApplicationContext cannot be null.\");",
          "79:         Assert.notNull(this.federationConfig, \"FederationConfig cannot be null.\");",
          "80:     }",
          "82:     public final void commence(final HttpServletRequest servletRequest, final HttpServletResponse response,",
          "83:             final AuthenticationException authenticationException) throws IOException, ServletException {",
          "85:         FedizContext fedContext = federationConfig.getFedizContext();",
          "86:         LOG.debug(\"Federation context: {}\", fedContext);",
          "89:         MetadataDocumentHandler mdHandler = new MetadataDocumentHandler(fedContext);",
          "90:         if (mdHandler.canHandleRequest(servletRequest)) {",
          "91:             mdHandler.handleRequest(servletRequest, response);",
          "92:             return;",
          "93:         }",
          "95:         String redirectUrl = null;",
          "96:         try {",
          "97:             FedizProcessor wfProc =",
          "98:                 FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());",
          "99:             RedirectionResponse redirectionResponse =",
          "100:                 wfProc.createSignInRequest(servletRequest, fedContext);",
          "101:             redirectUrl = redirectionResponse.getRedirectionURL();",
          "103:             if (redirectUrl == null) {",
          "104:                 LOG.warn(\"Failed to create SignInRequest. Redirect URL null\");",
          "105:                 throw new ServletException(\"Failed to create SignInRequest. Redirect URL null\");",
          "106:             }",
          "108:             Map<String, String> headers = redirectionResponse.getHeaders();",
          "109:             if (!headers.isEmpty()) {",
          "110:                 for (Entry<String, String> entry : headers.entrySet()) {",
          "111:                     response.addHeader(entry.getKey(), entry.getValue());",
          "112:                 }",
          "113:             }",
          "115:             HttpSession session = servletRequest.getSession(true);",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "117:         } catch (ProcessingException ex) {",
          "118:             LOG.warn(\"Failed to create SignInRequest\", ex);",
          "119:             throw new ServletException(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "120:         }",
          "122:         preCommence(servletRequest, response);",
          "123:         if (LOG.isInfoEnabled()) {",
          "124:             LOG.info(\"Redirecting to IDP: \" + redirectUrl);",
          "125:         }",
          "126:         response.sendRedirect(redirectUrl);",
          "127:     }",
          "135:     protected void preCommence(final HttpServletRequest request, final HttpServletResponse response) {",
          "137:     }",
          "139:     @Override",
          "140:     public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {",
          "141:         this.appContext = applicationContext;",
          "142:     }",
          "144: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFailureHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.web;",
          "22: import java.io.IOException;",
          "23: import java.util.Map;",
          "24: import java.util.Map.Entry;",
          "26: import javax.servlet.ServletException;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "30: import org.apache.cxf.fediz.core.config.FedizContext;",
          "31: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "32: import org.apache.cxf.fediz.core.processor.FedizProcessor;",
          "33: import org.apache.cxf.fediz.core.processor.FedizProcessorFactory;",
          "34: import org.apache.cxf.fediz.core.processor.RedirectionResponse;",
          "35: import org.apache.cxf.fediz.spring.FederationConfig;",
          "36: import org.apache.cxf.fediz.spring.authentication.ExpiredTokenException;",
          "37: import org.slf4j.Logger;",
          "38: import org.slf4j.LoggerFactory;",
          "39: import org.springframework.security.core.AuthenticationException;",
          "40: import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;",
          "45: public class FederationAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {",
          "47:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationFailureHandler.class);",
          "49:     private FederationConfig federationConfig;",
          "51:     public FederationAuthenticationFailureHandler() {",
          "52:         super();",
          "53:     }",
          "55:     @Override",
          "56:     public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,",
          "57:                                         AuthenticationException exception) throws IOException, ServletException {",
          "59:         if (exception instanceof ExpiredTokenException) {",
          "60:             String redirectUrl = null;",
          "61:             try {",
          "62:                 FedizContext fedContext = federationConfig.getFedizContext();",
          "63:                 FedizProcessor wfProc =",
          "64:                     FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());",
          "65:                 RedirectionResponse redirectionResponse =",
          "66:                     wfProc.createSignInRequest(request, fedContext);",
          "67:                 redirectUrl = redirectionResponse.getRedirectionURL();",
          "69:                 if (redirectUrl == null) {",
          "70:                     LOG.warn(\"Failed to create SignInRequest. Redirect URL null\");",
          "71:                     throw new ServletException(\"Failed to create SignInRequest. Redirect URL null\");",
          "72:                 }",
          "74:                 Map<String, String> headers = redirectionResponse.getHeaders();",
          "75:                 if (!headers.isEmpty()) {",
          "76:                     for (Entry<String, String> entry : headers.entrySet()) {",
          "77:                         response.addHeader(entry.getKey(), entry.getValue());",
          "78:                     }",
          "79:                 }",
          "81:             } catch (ProcessingException ex) {",
          "82:                 LOG.warn(\"Failed to create SignInRequest\", ex);",
          "83:                 throw new ServletException(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "84:             }",
          "86:             if (LOG.isInfoEnabled()) {",
          "87:                 LOG.info(\"Redirecting to IDP: \" + redirectUrl);",
          "88:             }",
          "89:             response.sendRedirect(redirectUrl);",
          "90:         }",
          "92:         super.onAuthenticationFailure(request, response, exception);",
          "93:     }",
          "95:     public FederationConfig getFederationConfig() {",
          "96:         return federationConfig;",
          "97:     }",
          "99:     public void setFederationConfig(FederationConfig fedConfig) {",
          "100:         this.federationConfig = fedConfig;",
          "101:     }",
          "103: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.spring.web;",
          "22: import java.io.IOException;",
          "23: import java.security.cert.X509Certificate;",
          "24: import java.util.Date;",
          "26: import javax.servlet.ServletRequest;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "29: import javax.servlet.http.HttpSession;",
          "31: import org.apache.cxf.fediz.core.FederationConstants;",
          "32: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "33: import org.apache.cxf.fediz.core.processor.FedizRequest;",
          "34: import org.apache.cxf.fediz.spring.FederationConfig;",
          "35: import org.apache.cxf.fediz.spring.authentication.ExpiredTokenException;",
          "36: import org.apache.cxf.fediz.spring.authentication.FederationAuthenticationToken;",
          "37: import org.springframework.security.authentication.BadCredentialsException;",
          "38: import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
          "39: import org.springframework.security.core.Authentication;",
          "40: import org.springframework.security.core.AuthenticationException;",
          "41: import org.springframework.security.core.context.SecurityContext;",
          "42: import org.springframework.security.core.context.SecurityContextHolder;",
          "43: import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;",
          "44: import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;",
          "47: public class FederationAuthenticationFilter extends AbstractAuthenticationProcessingFilter {",
          "49:     private FederationConfig federationConfig;",
          "51:     public FederationAuthenticationFilter() {",
          "52:         super(\"/j_spring_fediz_security_check\");",
          "53:         setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler());",
          "54:     }",
          "56:     @Override",
          "57:     public Authentication attemptAuthentication(final HttpServletRequest request, final HttpServletResponse response)",
          "58:         throws AuthenticationException, IOException {",
          "60:         if (isTokenExpired()) {",
          "61:             throw new ExpiredTokenException(\"Token is expired\");",
          "62:         }",
          "64:         verifySavedState(request);",
          "66:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "67:         String responseToken = getResponseToken(request);",
          "69:         FedizRequest wfReq = new FedizRequest();",
          "70:         wfReq.setAction(wa);",
          "71:         wfReq.setResponseToken(responseToken);",
          "72:         wfReq.setState(getState(request));",
          "73:         wfReq.setRequest(request);",
          "75:         X509Certificate certs[] =",
          "76:             (X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");",
          "77:         wfReq.setCerts(certs);",
          "79:         final UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(null, wfReq);",
          "81:         authRequest.setDetails(authenticationDetailsSource.buildDetails(request));",
          "83:         return this.getAuthenticationManager().authenticate(authRequest);",
          "84:     }",
          "86:     private boolean isTokenExpired() {",
          "87:         SecurityContext context = SecurityContextHolder.getContext();",
          "88:         boolean detectExpiredTokens =",
          "89:             federationConfig != null && federationConfig.getFedizContext().isDetectExpiredTokens();",
          "90:         if (context != null && detectExpiredTokens) {",
          "91:             Authentication authentication = context.getAuthentication();",
          "92:             if (authentication instanceof FederationAuthenticationToken) {",
          "93:                 Date tokenExpires =",
          "94:                     ((FederationAuthenticationToken)authentication).getResponse().getTokenExpires();",
          "95:                 if (tokenExpires == null) {",
          "96:                     return false;",
          "97:                 }",
          "99:                 Date currentTime = new Date();",
          "100:                 if (currentTime.after(tokenExpires)) {",
          "101:                     return true;",
          "102:                 }",
          "103:             }",
          "104:         }",
          "106:         return false;",
          "107:     }",
          "109:     private String getResponseToken(ServletRequest request) {",
          "110:         if (request.getParameter(FederationConstants.PARAM_RESULT) != null) {",
          "111:             return request.getParameter(FederationConstants.PARAM_RESULT);",
          "112:         } else if (request.getParameter(SAMLSSOConstants.SAML_RESPONSE) != null) {",
          "113:             return request.getParameter(SAMLSSOConstants.SAML_RESPONSE);",
          "114:         }",
          "116:         return null;",
          "117:     }",
          "119:     private String getState(ServletRequest request) {",
          "120:         if (request.getParameter(FederationConstants.PARAM_CONTEXT) != null) {",
          "121:             return request.getParameter(FederationConstants.PARAM_CONTEXT);",
          "122:         } else if (request.getParameter(SAMLSSOConstants.RELAY_STATE) != null) {",
          "123:             return request.getParameter(SAMLSSOConstants.RELAY_STATE);",
          "124:         }",
          "126:         return null;",
          "127:     }",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "138:         }",
          "139:     }",
          "144:     @Override",
          "145:     protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) {",
          "146:         boolean result = isTokenExpired() || super.requiresAuthentication(request, response);",
          "147:         if (logger.isDebugEnabled()) {",
          "148:             logger.debug(\"requiresAuthentication = \" + result);",
          "149:         }",
          "150:         return result;",
          "151:     }",
          "153:     public FederationConfig getFederationConfig() {",
          "154:         return federationConfig;",
          "155:     }",
          "157:     public void setFederationConfig(FederationConfig fedConfig) {",
          "158:         this.federationConfig = fedConfig;",
          "159:     }",
          "161: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.cxf.fediz.spring.web;",
          "21: import javax.servlet.http.HttpServletRequest;",
          "22: import javax.servlet.http.HttpServletResponse;",
          "24: import org.apache.cxf.fediz.core.FederationConstants;",
          "25: import org.apache.cxf.fediz.spring.FederationConfig;",
          "26: import org.springframework.beans.factory.annotation.Required;",
          "27: import org.springframework.security.web.authentication.logout.LogoutFilter;",
          "28: import org.springframework.security.web.authentication.logout.LogoutHandler;",
          "29: import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;",
          "30: import org.springframework.security.web.util.matcher.AntPathRequestMatcher;",
          "32: public class FederationLogoutFilter extends LogoutFilter {",
          "34:     private FederationConfig federationConfig;",
          "35:     private String logoutUrl;",
          "37:     public FederationLogoutFilter(LogoutSuccessHandler logoutSuccessHandler, LogoutHandler... handlers) {",
          "38:         super(logoutSuccessHandler, handlers);",
          "39:     }",
          "41:     @Required",
          "42:     public void setFederationConfig(FederationConfig federationConfig) {",
          "43:         this.federationConfig = federationConfig;",
          "44:     }",
          "46:     @Override",
          "47:     protected boolean requiresLogout(HttpServletRequest request, HttpServletResponse response) {",
          "48:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "49:         if (FederationConstants.ACTION_SIGNOUT.equals(wa) || FederationConstants.ACTION_SIGNOUT_CLEANUP.equals(wa)) {",
          "51:             return true;",
          "52:         }",
          "54:         if (this.logoutUrl == null) {",
          "55:             String contextName = request.getContextPath();",
          "56:             if (contextName == null || contextName.isEmpty()) {",
          "57:                 contextName = \"/\";",
          "58:             }",
          "59:             this.logoutUrl = federationConfig.getFedizContext(contextName).getLogoutURL();",
          "60:         }",
          "61:         if (this.logoutUrl != null && !this.logoutUrl.isEmpty()) {",
          "62:             super.setLogoutRequestMatcher(new AntPathRequestMatcher(logoutUrl));",
          "63:             return super.requiresLogout(request, response);",
          "64:         }",
          "65:         return false;",
          "66:     }",
          "68:     protected String getFilterProcessesUrl() {",
          "69:         return this.logoutUrl;",
          "70:     }",
          "71: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationLogoutSuccessHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.cxf.fediz.spring.web;",
          "21: import java.io.IOException;",
          "22: import java.util.Map;",
          "23: import java.util.Map.Entry;",
          "25: import javax.servlet.ServletException;",
          "26: import javax.servlet.http.HttpServletRequest;",
          "27: import javax.servlet.http.HttpServletResponse;",
          "29: import org.apache.cxf.fediz.core.config.FedizContext;",
          "30: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "31: import org.apache.cxf.fediz.core.processor.FedizProcessor;",
          "32: import org.apache.cxf.fediz.core.processor.FedizProcessorFactory;",
          "33: import org.apache.cxf.fediz.core.processor.RedirectionResponse;",
          "34: import org.apache.cxf.fediz.spring.FederationConfig;",
          "35: import org.slf4j.Logger;",
          "36: import org.slf4j.LoggerFactory;",
          "37: import org.springframework.beans.factory.annotation.Required;",
          "38: import org.springframework.security.core.Authentication;",
          "39: import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;",
          "41: public class FederationLogoutSuccessHandler implements LogoutSuccessHandler {",
          "43:     private static final Logger LOG = LoggerFactory.getLogger(FederationLogoutSuccessHandler.class);",
          "45:     private FederationConfig federationConfig;",
          "47:     @Required",
          "48:     public void setFederationConfig(FederationConfig federationConfig) {",
          "49:         this.federationConfig = federationConfig;",
          "50:     }",
          "52:     @Override",
          "53:     public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response,",
          "54:                                 Authentication authentication) throws IOException, ServletException {",
          "55:         String contextName = request.getContextPath();",
          "56:         if (contextName == null || contextName.isEmpty()) {",
          "57:             contextName = \"/\";",
          "58:         }",
          "59:         FedizContext fedCtx = federationConfig.getFedizContext(contextName);",
          "60:         try {",
          "61:             FedizProcessor wfProc =",
          "62:                 FedizProcessorFactory.newFedizProcessor(fedCtx.getProtocol());",
          "63:             RedirectionResponse redirectionResponse =",
          "64:                 wfProc.createSignOutRequest(request, null, fedCtx); //TODO",
          "65:             String redirectURL = redirectionResponse.getRedirectionURL();",
          "66:             if (redirectURL != null) {",
          "67:                 Map<String, String> headers = redirectionResponse.getHeaders();",
          "68:                 if (!headers.isEmpty()) {",
          "69:                     for (Entry<String, String> entry : headers.entrySet()) {",
          "70:                         response.addHeader(entry.getKey(), entry.getValue());",
          "71:                     }",
          "72:                 }",
          "74:                 response.sendRedirect(redirectURL);",
          "75:             } else {",
          "76:                 LOG.warn(\"Failed to create SignOutRequest.\");",
          "77:                 response.sendError(",
          "78:                         HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to create SignOutRequest.\");",
          "79:             }",
          "80:         } catch (ProcessingException ex) {",
          "81:             LOG.warn(\"Failed to create SignOutRequest: \" + ex.getMessage());",
          "82:             response.sendError(",
          "83:                     HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Failed to create SignOutRequest.\");",
          "84:         }",
          "85:     }",
          "86: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationSignOutCleanupFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.cxf.fediz.spring.web;",
          "21: import java.io.IOException;",
          "22: import java.io.InputStream;",
          "24: import javax.servlet.FilterChain;",
          "25: import javax.servlet.ServletException;",
          "26: import javax.servlet.ServletOutputStream;",
          "27: import javax.servlet.ServletRequest;",
          "28: import javax.servlet.ServletResponse;",
          "29: import javax.servlet.http.HttpServletRequest;",
          "31: import org.apache.cxf.fediz.core.FederationConstants;",
          "32: import org.slf4j.Logger;",
          "33: import org.slf4j.LoggerFactory;",
          "34: import org.springframework.web.filter.GenericFilterBean;",
          "36: public class FederationSignOutCleanupFilter extends GenericFilterBean {",
          "38:     private static final Logger LOG = LoggerFactory.getLogger(FederationSignOutCleanupFilter.class);",
          "40:     @Override",
          "41:     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)",
          "42:         throws IOException, ServletException {",
          "44:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "45:         if (FederationConstants.ACTION_SIGNOUT_CLEANUP.equals(wa)) {",
          "46:             if (request instanceof HttpServletRequest) {",
          "47:                 ((HttpServletRequest)request).getSession().invalidate();",
          "48:             }",
          "50:             final ServletOutputStream responseOutputStream = response.getOutputStream();",
          "51:             InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(\"logout.jpg\");",
          "52:             if (inputStream == null) {",
          "53:                 LOG.warn(\"Could not write logout.jpg\");",
          "54:                 return;",
          "55:             }",
          "56:             int read = 0;",
          "57:             byte[] buf = new byte[1024];",
          "58:             while ((read = inputStream.read(buf)) != -1) {",
          "59:                 responseOutputStream.write(buf, 0, read);",
          "60:             }",
          "61:             inputStream.close();",
          "62:             responseOutputStream.flush();",
          "63:         } else {",
          "64:             chain.doFilter(request, response);",
          "65:         }",
          "66:     }",
          "67: }",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties||plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties": [
          "File: plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties -> plugins/spring3/src/main/resources/org/apache/cxf/fediz/spring/messages.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: FederationAuthenticationProvider.incorrectKey=The presented FederationAuthenticationToken does not contain the expected key",
          "2: FederationAuthenticationProvider.noSignInRequest=Failed to get SignIn request",
          "",
          "---------------"
        ],
        "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java": [
          "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.integrationtests;",
          "23: import java.io.File;",
          "24: import java.io.IOException;",
          "26: import javax.servlet.ServletException;",
          "28: import org.apache.catalina.LifecycleException;",
          "29: import org.apache.catalina.LifecycleState;",
          "30: import org.apache.catalina.connector.Connector;",
          "31: import org.apache.catalina.startup.Tomcat;",
          "32: import org.junit.AfterClass;",
          "33: import org.junit.Assert;",
          "34: import org.junit.BeforeClass;",
          "35: import org.junit.Ignore;",
          "37: public class Spring3Test extends AbstractTests {",
          "39:     static String idpHttpsPort;",
          "40:     static String rpHttpsPort;",
          "42:     private static Tomcat idpServer;",
          "43:     private static Tomcat rpServer;",
          "45:     @BeforeClass",
          "46:     public static void init() throws Exception {",
          "47:         System.setProperty(\"org.apache.commons.logging.Log\", \"org.apache.commons.logging.impl.SimpleLog\");",
          "49:         System.setProperty(\"org.apache.commons.logging.simplelog.showdatetime\", \"true\");",
          "51:         System.setProperty(\"org.apache.commons.logging.simplelog.log.httpclient.wire\", \"debug\");",
          "53:         System.setProperty(\"org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient\", \"debug\");",
          "55:         idpHttpsPort = System.getProperty(\"idp.https.port\");",
          "56:         Assert.assertNotNull(\"Property 'idp.https.port' null\", idpHttpsPort);",
          "57:         rpHttpsPort = System.getProperty(\"rp.https.port\");",
          "58:         Assert.assertNotNull(\"Property 'rp.https.port' null\", rpHttpsPort);",
          "60:         idpServer = startServer(true, idpHttpsPort);",
          "61:         rpServer = startServer(false, rpHttpsPort);",
          "62:     }",
          "64:     @AfterClass",
          "65:     public static void cleanup() {",
          "66:         shutdownServer(idpServer);",
          "67:         shutdownServer(rpServer);",
          "68:     }",
          "70:     private static void shutdownServer(Tomcat server) {",
          "71:         try {",
          "72:             if (server != null && server.getServer() != null",
          "73:                 && server.getServer().getState() != LifecycleState.DESTROYED) {",
          "74:                 if (server.getServer().getState() != LifecycleState.STOPPED) {",
          "75:                     server.stop();",
          "76:                 }",
          "77:                 server.destroy();",
          "78:             }",
          "79:         } catch (Exception e) {",
          "80:             e.printStackTrace();",
          "81:         }",
          "82:     }",
          "84:     private static Tomcat startServer(boolean idp, String port)",
          "85:         throws ServletException, LifecycleException, IOException {",
          "86:         Tomcat server = new Tomcat();",
          "87:         server.setPort(0);",
          "88:         String currentDir = new File(\".\").getCanonicalPath();",
          "89:         String baseDir = currentDir + File.separator + \"target\";",
          "90:         server.setBaseDir(baseDir);",
          "92:         if (idp) {",
          "93:             server.getHost().setAppBase(\"tomcat/idp/webapps\");",
          "94:         } else {",
          "95:             server.getHost().setAppBase(\"tomcat/rp/webapps\");",
          "96:         }",
          "97:         server.getHost().setAutoDeploy(true);",
          "98:         server.getHost().setDeployOnStartup(true);",
          "100:         Connector httpsConnector = new Connector();",
          "101:         httpsConnector.setPort(Integer.parseInt(port));",
          "102:         httpsConnector.setSecure(true);",
          "103:         httpsConnector.setScheme(\"https\");",
          "105:         httpsConnector.setAttribute(\"keystorePass\", \"tompass\");",
          "106:         httpsConnector.setAttribute(\"keystoreFile\", \"test-classes/server.jks\");",
          "107:         httpsConnector.setAttribute(\"truststorePass\", \"tompass\");",
          "108:         httpsConnector.setAttribute(\"truststoreFile\", \"test-classes/server.jks\");",
          "109:         httpsConnector.setAttribute(\"clientAuth\", \"want\");",
          "111:         httpsConnector.setAttribute(\"sslProtocol\", \"TLS\");",
          "112:         httpsConnector.setAttribute(\"SSLEnabled\", true);",
          "114:         server.getService().addConnector(httpsConnector);",
          "116:         if (idp) {",
          "117:             File stsWebapp = new File(baseDir + File.separator + server.getHost().getAppBase(), \"fediz-idp-sts\");",
          "118:             server.addWebapp(\"/fediz-idp-sts\", stsWebapp.getAbsolutePath());",
          "120:             File idpWebapp = new File(baseDir + File.separator + server.getHost().getAppBase(), \"fediz-idp\");",
          "121:             server.addWebapp(\"/fediz-idp\", idpWebapp.getAbsolutePath());",
          "122:         } else {",
          "123:             File rpWebapp = new File(baseDir + File.separator + server.getHost().getAppBase(),",
          "124:                                      \"fediz-systests-webapps-spring3\");",
          "125:             server.addWebapp(\"/fedizhelloworld_spring3\", rpWebapp.getAbsolutePath());",
          "126:         }",
          "128:         server.start();",
          "130:         return server;",
          "131:     }",
          "133:     @Override",
          "134:     public String getIdpHttpsPort() {",
          "135:         return idpHttpsPort;",
          "136:     }",
          "138:     @Override",
          "139:     public String getRpHttpsPort() {",
          "140:         return rpHttpsPort;",
          "141:     }",
          "143:     @Override",
          "144:     public String getServletContextName() {",
          "145:         return \"fedizhelloworld_spring3\";",
          "146:     }",
          "148:     @Ignore(\"This tests is currently failing on Spring\")",
          "149:     @Override",
          "150:     public void testConcurrentRequests() throws Exception {",
          "152:     }",
          "154:     @Override",
          "155:     @org.junit.Test",
          "156:     public void testCSRFAttack() throws Exception {",
          "157:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
          "158:             + \"/j_spring_fediz_security_check\";",
          "159:         csrfAttackTest(url);",
          "160:     }",
          "162: }",
          "",
          "---------------"
        ],
        "systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java||systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java": [
          "File: systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java -> systests/webapps/spring3Webapp/src/main/java/org/apache/cxf/fediz/example/FederationServlet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.fediz.example;",
          "22: import java.io.IOException;",
          "23: import java.io.PrintWriter;",
          "24: import java.security.Principal;",
          "25: import java.util.Arrays;",
          "26: import java.util.List;",
          "28: import javax.servlet.ServletException;",
          "29: import javax.servlet.http.HttpServlet;",
          "30: import javax.servlet.http.HttpServletRequest;",
          "31: import javax.servlet.http.HttpServletResponse;",
          "33: import org.w3c.dom.Element;",
          "35: import org.apache.cxf.fediz.core.Claim;",
          "36: import org.apache.cxf.fediz.core.ClaimCollection;",
          "37: import org.apache.cxf.fediz.core.SecurityTokenThreadLocal;",
          "38: import org.apache.cxf.fediz.spring.authentication.FederationAuthenticationToken;",
          "40: import org.springframework.security.core.Authentication;",
          "41: import org.springframework.security.core.GrantedAuthority;",
          "42: import org.springframework.security.core.context.SecurityContextHolder;",
          "44: public class FederationServlet extends HttpServlet {",
          "49:     private static final long serialVersionUID = -9019993850246851112L;",
          "51:     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,",
          "52:         IOException {",
          "54:         response.setContentType(\"text/html\");",
          "55:         PrintWriter out = response.getWriter();",
          "57:         out.println(\"<html>\");",
          "58:         out.println(\"<head><title>WS Federation Systests Examples</title></head>\");",
          "59:         out.println(\"<body>\");",
          "60:         out.println(\"<p>Request url: \" + request.getRequestURL().toString() + \"</p>\");",
          "62:         out.print(\"<p>userPrincipal=\");",
          "63:         Principal p = request.getUserPrincipal();",
          "64:         if (p != null) {",
          "65:             out.print(p.getName());",
          "66:         }",
          "67:         out.println(\"</p>\");",
          "70:         Authentication auth = SecurityContextHolder.getContext().getAuthentication();",
          "72:         if (auth instanceof FederationAuthenticationToken) {",
          "73:             FederationAuthenticationToken fedToken = (FederationAuthenticationToken)auth;",
          "74:             List<String> roleListToCheck = Arrays.asList(\"Admin\", \"Manager\", \"User\", \"Authenticated\");",
          "76:             for (String item : roleListToCheck) {",
          "77:                 boolean found = false;",
          "78:                 for (GrantedAuthority ga : fedToken.getAuthorities()) {",
          "79:                     if (ga.getAuthority().toLowerCase().indexOf(item.toLowerCase()) > -1) {",
          "80:                         found = true;",
          "81:                         break;",
          "82:                     }",
          "83:                 }",
          "84:                 out.println(\"<p>role:\" + item + \"=\" + (found ? \"true\" : \"false\") + \"</p>\");",
          "85:             }",
          "87:             ClaimCollection claims = fedToken.getClaims();",
          "88:             for (Claim c : claims) {",
          "89:                 out.println(\"<p>\" + c.getClaimType().toString() + \"=\" + c.getValue() + \"</p>\");",
          "90:             }",
          "92:             Element el = fedToken.getLoginToken();",
          "93:             if (el != null) {",
          "94:                 out.println(\"loginToken=FOUND{FedizPrincipal}<p>\");",
          "95:             }",
          "97:             el = SecurityTokenThreadLocal.getToken();",
          "98:             if (el != null) {",
          "99:                 out.println(\"loginToken=FOUND{SecurityTokenThreadLocal}<p>\");",
          "100:             }",
          "102:         }",
          "104:         out.println(\"</body>\");",
          "106:     }",
          "108: }",
          "",
          "---------------"
        ],
        "systests/webapps/spring3Webapp/src/main/resources/log4j.properties||systests/webapps/spring3Webapp/src/main/resources/log4j.properties": [
          "File: systests/webapps/spring3Webapp/src/main/resources/log4j.properties -> systests/webapps/spring3Webapp/src/main/resources/log4j.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Set root category priority to INFO and its only appender to CONSOLE.",
          "2: log4j.rootLogger=INFO, CONSOLE",
          "3: log4j.logger.org.springframework=INFO, CONSOLE",
          "4: log4j.additivity.org.springframework=false",
          "5: log4j.logger.org.springframework.security=DEBUG, CONSOLE",
          "6: log4j.additivity.org.springframework.security=false",
          "7: log4j.logger.org.apache.cxf.fediz=DEBUG, CONSOLE",
          "8: log4j.additivity.org.apache.cxf.fediz=false",
          "10: # CONSOLE is set to be a ConsoleAppender using a PatternLayout.",
          "11: log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender",
          "12: log4j.appender.CONSOLE.Threshold=INFO",
          "13: log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout",
          "14: log4j.appender.CONSOLE.layout.ConversionPattern=%d [%t] %-5p %c %x - %m%n",
          "",
          "---------------"
        ],
        "systests/webapps/spring3Webapp/src/main/resources/logging.properties||systests/webapps/spring3Webapp/src/main/resources/logging.properties": [
          "File: systests/webapps/spring3Webapp/src/main/resources/logging.properties -> systests/webapps/spring3Webapp/src/main/resources/logging.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ############################################################",
          "2: #   Default Logging Configuration File",
          "3: #",
          "4: # You can use a different file by specifying a filename",
          "5: # with the java.util.logging.config.file system property.",
          "6: # For example java -Djava.util.logging.config.file=myfile",
          "7: ############################################################",
          "9: ############################################################",
          "10: #   Global properties",
          "11: ############################################################",
          "13: # \"handlers\" specifies a comma separated list of log Handler",
          "14: # classes.  These handlers will be installed during VM startup.",
          "15: # Note that these classes must be on the system classpath.",
          "16: # By default we only configure a ConsoleHandler, which will only",
          "17: # show messages at the WARNING and above levels.",
          "18: handlers= java.util.logging.ConsoleHandler",
          "19: #handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler",
          "21: # Default global logging level.",
          "22: # This specifies which kinds of events are logged across",
          "23: # all loggers.  For any given facility this global level",
          "24: # can be overridden by a facility specific level",
          "25: # Note that the ConsoleHandler also has a separate level",
          "26: # setting to limit messages printed to the console.",
          "27: .level= INFO",
          "29: ############################################################",
          "30: # Handler specific properties.",
          "31: # Describes specific configuration info for Handlers.",
          "32: ############################################################",
          "34: # default file output is in user's home directory.",
          "35: java.util.logging.FileHandler.pattern = %h/java%u.log",
          "36: java.util.logging.FileHandler.limit = 50000",
          "37: java.util.logging.FileHandler.count = 1",
          "38: java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter",
          "40: # Limit the message that are printed on the console to WARNING and above.",
          "41: java.util.logging.ConsoleHandler.level = WARNING",
          "42: java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter",
          "45: ############################################################",
          "46: # Facility specific properties.",
          "47: # Provides extra control for each logger.",
          "48: ############################################################",
          "50: # For example, set the com.xyz.foo logger to only log SEVERE",
          "51: # messages:",
          "52: #com.xyz.foo.level = SEVERE",
          "53: #org.apache.cxf.fediz.level = FINEST",
          "",
          "---------------"
        ],
        "systests/webapps/spring3Webapp/src/main/webapp/index.html||systests/webapps/spring3Webapp/src/main/webapp/index.html": [
          "File: systests/webapps/spring3Webapp/src/main/webapp/index.html -> systests/webapps/spring3Webapp/src/main/webapp/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!--",
          "2:   Licensed to the Apache Software Foundation (ASF) under one or more",
          "3:   contributor license agreements.  See the NOTICE file distributed with",
          "4:   this work for additional information regarding copyright ownership.",
          "5:   The ASF licenses this file to You under the Apache License, Version 2.0",
          "6:   (the \"License\"); you may not use this file except in compliance with",
          "7:   the License.  You may obtain a copy of the License at",
          "9:       http://www.apache.org/licenses/LICENSE-2.0",
          "11:   Unless required by applicable law or agreed to in writing, software",
          "12:   distributed under the License is distributed on an \"AS IS\" BASIS,",
          "13:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "14:   See the License for the specific language governing permissions and",
          "15:   limitations under the License.",
          "16: -->",
          "17: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">",
          "18: <HTML><HEAD><TITLE>WS Federation Tomcat Examples</TITLE>",
          "19: <META http-equiv=Content-Type content=\"text/html\">",
          "20: </HEAD>",
          "21: <BODY>",
          "22: <P>",
          "23: <H3>Hello World</H3>",
          "24: <P></P>",
          "25: </BODY></HTML>",
          "",
          "---------------"
        ],
        "systests/webapps/spring3Webapp/src/main/webapp/secure/test.html||systests/webapps/spring3Webapp/src/main/webapp/secure/test.html": [
          "File: systests/webapps/spring3Webapp/src/main/webapp/secure/test.html -> systests/webapps/spring3Webapp/src/main/webapp/secure/test.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!--",
          "2:   Licensed to the Apache Software Foundation (ASF) under one or more",
          "3:   contributor license agreements.  See the NOTICE file distributed with",
          "4:   this work for additional information regarding copyright ownership.",
          "5:   The ASF licenses this file to You under the Apache License, Version 2.0",
          "6:   (the \"License\"); you may not use this file except in compliance with",
          "7:   the License.  You may obtain a copy of the License at",
          "9:       http://www.apache.org/licenses/LICENSE-2.0",
          "11:   Unless required by applicable law or agreed to in writing, software",
          "12:   distributed under the License is distributed on an \"AS IS\" BASIS,",
          "13:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "14:   See the License for the specific language governing permissions and",
          "15:   limitations under the License.",
          "16: -->",
          "17: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">",
          "18: <HTML><HEAD><TITLE>WS Federation Tomcat Examples</TITLE>",
          "19: <META http-equiv=Content-Type content=\"text/html\">",
          "20: </HEAD>",
          "21: <BODY>",
          "22: <P>",
          "23: <H3>Secure Test</H3>",
          "24: <P></P>",
          "25: </BODY></HTML>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acdbe8c213576792dd95d87315bcc181ea61b57f",
      "candidate_info": {
        "commit_hash": "acdbe8c213576792dd95d87315bcc181ea61b57f",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/acdbe8c213576792dd95d87315bcc181ea61b57f",
        "files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
        ],
        "message": "Fixing Spring plugins",
        "before_after_code_files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ],
          "candidate": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.servlet.ServletException;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "30: import org.apache.cxf.fediz.core.config.FedizContext;",
          "31: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,",
          "56:     InitializingBean, ApplicationContextAware {",
          "58:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);",
          "60:     private ApplicationContext appContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     public static final String SAVED_CONTEXT = \"SAVED_CONTEXT\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:                 }",
          "107:             }",
          "109:         } catch (ProcessingException ex) {",
          "110:             LOG.warn(\"Failed to create SignInRequest\", ex);",
          "111:             throw new ServletException(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:             HttpSession session = servletRequest.getSession(true);",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "---------------"
        ],
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.servlet.ServletRequest;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "30: import org.apache.cxf.fediz.core.FederationConstants;",
          "31: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.cxf.fediz.spring.FederationConfig;",
          "34: import org.apache.cxf.fediz.spring.authentication.ExpiredTokenException;",
          "35: import org.apache.cxf.fediz.spring.authentication.FederationAuthenticationToken;",
          "36: import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
          "37: import org.springframework.security.core.Authentication;",
          "38: import org.springframework.security.core.AuthenticationException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.springframework.security.authentication.BadCredentialsException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     public Authentication attemptAuthentication(final HttpServletRequest request, final HttpServletResponse response)",
          "56:         throws AuthenticationException, IOException {",
          "65:         }",
          "67:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "68:         String responseToken = getResponseToken(request);",
          "",
          "[Removed Lines]",
          "58:         SecurityContext context = SecurityContextHolder.getContext();",
          "59:         if (context != null) {",
          "60:             Authentication authentication = context.getAuthentication();",
          "61:             if (authentication instanceof FederationAuthenticationToken) {",
          "63:                 throw new ExpiredTokenException(\"Token is expired\");",
          "64:             }",
          "",
          "[Added Lines]",
          "60:         if (isTokenExpired()) {",
          "61:             throw new ExpiredTokenException(\"Token is expired\");",
          "64:         verifySavedState(request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         return null;",
          "118:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     private String getState(ServletRequest request) {",
          "120:         if (request.getParameter(FederationConstants.PARAM_CONTEXT) != null) {",
          "121:             return request.getParameter(FederationConstants.PARAM_CONTEXT);",
          "122:         } else if (request.getParameter(SAMLSSOConstants.RELAY_STATE) != null) {",
          "123:             return request.getParameter(SAMLSSOConstants.RELAY_STATE);",
          "124:         }",
          "126:         return null;",
          "127:     }",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "138:         }",
          "139:     }",
          "",
          "---------------"
        ],
        "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import javax.servlet.ServletResponse;",
          "29: import javax.servlet.http.HttpServletRequest;",
          "30: import javax.servlet.http.HttpServletResponse;",
          "32: import org.apache.cxf.fediz.core.config.FedizContext;",
          "33: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,",
          "58:     InitializingBean, ApplicationContextAware {",
          "60:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);",
          "62:     private ApplicationContext appContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     public static final String SAVED_CONTEXT = \"SAVED_CONTEXT\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:                 }",
          "130:             }",
          "132:         } catch (ProcessingException ex) {",
          "133:             System.err.println(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "134:             LOG.warn(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:             HttpSession session = ((HttpServletRequest)request).getSession(true);",
          "139:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "---------------"
        ],
        "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import javax.servlet.ServletRequest;",
          "29: import javax.servlet.http.HttpServletRequest;",
          "30: import javax.servlet.http.HttpServletResponse;",
          "32: import org.apache.cxf.fediz.core.FederationConstants;",
          "33: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     @Override",
          "107:     public Authentication attemptAuthentication(HttpServletRequest request) throws AuthenticationException {",
          "116:         }",
          "118:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "119:         String responseToken = getResponseToken(request);",
          "120:         FedizRequest wfReq = new FedizRequest();",
          "",
          "[Removed Lines]",
          "109:         SecurityContext context = SecurityContextHolder.getContext();",
          "110:         if (context != null) {",
          "111:             Authentication authentication = context.getAuthentication();",
          "112:             if (authentication instanceof FederationAuthenticationToken) {",
          "114:                 throw new ExpiredTokenException(\"Token is expired\");",
          "115:             }",
          "",
          "[Added Lines]",
          "110:         if (isTokenExpired()) {",
          "111:             throw new ExpiredTokenException(\"Token is expired\");",
          "114:         verifySavedState(request);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:         return this.getAuthenticationManager().authenticate(authRequest);",
          "135:     }",
          "137:     @Override",
          "138:     public void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,",
          "139:                                              AuthenticationException authException) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     private void verifySavedState(HttpServletRequest request) {",
          "136:         HttpSession session = request.getSession(false);",
          "137:         if (session != null) {",
          "138:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "139:             String state = getState(request);",
          "140:             if (savedContext != null && !savedContext.equals(state)) {",
          "141:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "142:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:             }",
          "144:         }",
          "145:     }",
          "147:     private String getState(ServletRequest request) {",
          "148:         if (request.getParameter(FederationConstants.PARAM_CONTEXT) != null) {",
          "149:             return request.getParameter(FederationConstants.PARAM_CONTEXT);",
          "150:         } else if (request.getParameter(SAMLSSOConstants.RELAY_STATE) != null) {",
          "151:             return request.getParameter(SAMLSSOConstants.RELAY_STATE);",
          "152:         }",
          "154:         return null;",
          "155:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba952e7b35e9ca3561fb640b828654040af7c3b8",
      "candidate_info": {
        "commit_hash": "ba952e7b35e9ca3561fb640b828654040af7c3b8",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/ba952e7b35e9ca3561fb640b828654040af7c3b8",
        "files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
        ],
        "message": "FEDIZ-224 fixed request state not being stored in session for Saml SSO profile to work",
        "before_after_code_files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ],
          "candidate": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:             }",
          "115:             HttpSession session = servletRequest.getSession(true);",
          "117:         } catch (ProcessingException ex) {",
          "118:             LOG.warn(\"Failed to create SignInRequest\", ex);",
          "119:             throw new ServletException(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "[Added Lines]",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState());",
          "",
          "---------------"
        ],
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import javax.servlet.http.HttpSession;",
          "31: import org.apache.cxf.fediz.core.FederationConstants;",
          "32: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "33: import org.apache.cxf.fediz.core.processor.FedizRequest;",
          "34: import org.apache.cxf.fediz.spring.FederationConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.cxf.fediz.core.RequestState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;",
          "44: import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;",
          "47: public class FederationAuthenticationFilter extends AbstractAuthenticationProcessingFilter {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import static org.apache.cxf.fediz.spring.web.FederationAuthenticationEntryPoint.SAVED_CONTEXT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:             throw new ExpiredTokenException(\"Token is expired\");",
          "62:         }",
          "66:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "67:         String responseToken = getResponseToken(request);",
          "",
          "[Removed Lines]",
          "64:         verifySavedState(request);",
          "",
          "[Added Lines]",
          "67:         RequestState savedRequestState = verifySavedState(request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:         wfReq.setResponseToken(responseToken);",
          "72:         wfReq.setState(getState(request));",
          "73:         wfReq.setRequest(request);",
          "75:         X509Certificate certs[] =",
          "76:             (X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         wfReq.setRequestState(savedRequestState);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:         return null;",
          "127:     }",
          "130:         HttpSession session = request.getSession(false);",
          "132:         if (session == null) {",
          "",
          "[Removed Lines]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "",
          "[Added Lines]",
          "133:     private RequestState verifySavedState(HttpServletRequest request) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "138:         String state = getState(request);",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "142:         }",
          "144:     }",
          "",
          "[Removed Lines]",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "[Added Lines]",
          "141:         RequestState savedRequestState = (RequestState) session.getAttribute(SAVED_CONTEXT);",
          "143:         if (savedRequestState == null || !savedRequestState.getState().equals(state)) {",
          "147:         session.removeAttribute(SAVED_CONTEXT);",
          "148:         return savedRequestState;",
          "",
          "---------------"
        ],
        "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:             }",
          "138:             HttpSession session = ((HttpServletRequest)request).getSession(true);",
          "140:         } catch (ProcessingException ex) {",
          "141:             System.err.println(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "142:             LOG.warn(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "139:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "[Added Lines]",
          "139:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState());",
          "",
          "---------------"
        ],
        "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import javax.servlet.http.HttpSession;",
          "33: import org.apache.cxf.fediz.core.FederationConstants;",
          "34: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "35: import org.apache.cxf.fediz.core.config.FedizContext;",
          "36: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.cxf.fediz.core.RequestState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: import org.springframework.security.ui.AbstractProcessingFilter;",
          "53: import org.springframework.security.ui.FilterChainOrder;",
          "56: public class FederationAuthenticationFilter extends AbstractProcessingFilter {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import static org.apache.cxf.fediz.spring.web.FederationAuthenticationEntryPoint.SAVED_CONTEXT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:             throw new ExpiredTokenException(\"Token is expired\");",
          "112:         }",
          "116:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "117:         String responseToken = getResponseToken(request);",
          "118:         FedizRequest wfReq = new FedizRequest();",
          "119:         wfReq.setAction(wa);",
          "120:         wfReq.setResponseToken(responseToken);",
          "121:         wfReq.setState(getState(request));",
          "122:         wfReq.setRequest(request);",
          "124:         X509Certificate certs[] =",
          "125:             (X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");",
          "",
          "[Removed Lines]",
          "114:         verifySavedState(request);",
          "",
          "[Added Lines]",
          "117:         RequestState savedRequestState = verifySavedState(request);",
          "127:         wfReq.setRequestState(savedRequestState);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:         return this.getAuthenticationManager().authenticate(authRequest);",
          "133:     }",
          "136:         HttpSession session = request.getSession(false);",
          "138:         if (session == null) {",
          "",
          "[Removed Lines]",
          "135:     private void verifySavedState(HttpServletRequest request) {",
          "",
          "[Added Lines]",
          "140:     private RequestState verifySavedState(HttpServletRequest request) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "141:         }",
          "144:         String state = getState(request);",
          "146:             logger.warn(\"The received state does not match the state saved in the context\");",
          "147:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "148:         }",
          "150:     }",
          "152:     private String getState(ServletRequest request) {",
          "",
          "[Removed Lines]",
          "143:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "145:         if (savedContext == null || !savedContext.equals(state)) {",
          "149:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "[Added Lines]",
          "148:         RequestState savedRequestState = (RequestState) session.getAttribute(SAVED_CONTEXT);",
          "150:         if (savedRequestState == null || !savedRequestState.getState().equals(state)) {",
          "154:         session.removeAttribute(SAVED_CONTEXT);",
          "155:         return savedRequestState;",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:             }",
          "115:             HttpSession session = servletRequest.getSession(true);",
          "117:         } catch (ProcessingException ex) {",
          "118:             LOG.warn(\"Failed to create SignInRequest\", ex);",
          "119:             throw new ServletException(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "[Added Lines]",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState());",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import javax.servlet.http.HttpSession;",
          "31: import org.apache.cxf.fediz.core.FederationConstants;",
          "32: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "33: import org.apache.cxf.fediz.core.processor.FedizRequest;",
          "34: import org.apache.cxf.fediz.spring.FederationConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.cxf.fediz.core.RequestState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;",
          "44: import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;",
          "47: public class FederationAuthenticationFilter extends AbstractAuthenticationProcessingFilter {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import static org.apache.cxf.fediz.spring.web.FederationAuthenticationEntryPoint.SAVED_CONTEXT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:             throw new ExpiredTokenException(\"Token is expired\");",
          "62:         }",
          "66:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "67:         String responseToken = getResponseToken(request);",
          "",
          "[Removed Lines]",
          "64:         verifySavedState(request);",
          "",
          "[Added Lines]",
          "67:         RequestState savedRequestState = verifySavedState(request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:         wfReq.setResponseToken(responseToken);",
          "72:         wfReq.setState(getState(request));",
          "73:         wfReq.setRequest(request);",
          "75:         X509Certificate certs[] =",
          "76:             (X509Certificate[])request.getAttribute(\"javax.servlet.request.X509Certificate\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         wfReq.setRequestState(savedRequestState);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:         return null;",
          "127:     }",
          "130:         HttpSession session = request.getSession(false);",
          "132:         if (session == null) {",
          "",
          "[Removed Lines]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "",
          "[Added Lines]",
          "133:     private RequestState verifySavedState(HttpServletRequest request) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "138:         String state = getState(request);",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "142:         }",
          "144:     }",
          "",
          "[Removed Lines]",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "[Added Lines]",
          "141:         RequestState savedRequestState = (RequestState) session.getAttribute(SAVED_CONTEXT);",
          "143:         if (savedRequestState == null || !savedRequestState.getState().equals(state)) {",
          "147:         session.removeAttribute(SAVED_CONTEXT);",
          "148:         return savedRequestState;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f5fd5b148b2ae3f3124d9610a522871d6163c1a",
      "candidate_info": {
        "commit_hash": "5f5fd5b148b2ae3f3124d9610a522871d6163c1a",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/5f5fd5b148b2ae3f3124d9610a522871d6163c1a",
        "files": [
          "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
        ],
        "message": "Adding CSRF tests for SAML SSO",
        "before_after_code_files": [
          "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
          ],
          "candidate": [
            "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
          ]
        }
      },
      "candidate_diff": {
        "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java": [
          "File: systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java -> systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:     @org.junit.Test",
          "888:     public void testCSRFAttack() throws Exception {",
          "894:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "895:         csrfAttackTest(url);",
          "896:     }",
          "",
          "[Removed Lines]",
          "890:         if (!isWSFederation()) {",
          "891:             return;",
          "892:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "912:         webClient.getOptions().setJavaScriptEnabled(true);",
          "913:         Assert.assertEquals(\"IDP SignIn Response Form\", idpPage.getTitleText());",
          "916:         final HtmlSubmitInput button = form.getInputByName(\"_eventId_submit\");",
          "918:         final HtmlPage rpPage = button.click();",
          "",
          "[Removed Lines]",
          "915:         final HtmlForm form = idpPage.getFormByName(\"signinresponseform\");",
          "",
          "[Added Lines]",
          "911:         final HtmlForm form = idpPage.getFormByName(getLoginFormName());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "941:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
          "943:         for (DomElement result : results) {",
          "949:             }",
          "950:         }",
          "",
          "[Removed Lines]",
          "944:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "945:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "946:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "947:                 String value = result.getAttributeNS(null, \"value\");",
          "948:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "",
          "[Added Lines]",
          "940:             if (isWSFederation()) {",
          "941:                 if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "942:                     || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "943:                     || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "944:                     String value = result.getAttributeNS(null, \"value\");",
          "945:                     request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "946:                 }",
          "947:             } else {",
          "948:                 if (\"SAMLResponse\".equals(result.getAttributeNS(null, \"name\"))",
          "949:                     || \"RelayState\".equals(result.getAttributeNS(null, \"name\"))) {",
          "950:                     String value = result.getAttributeNS(null, \"value\");",
          "951:                     request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "952:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "963:     @org.junit.Test",
          "964:     public void testCSRFAttack2() throws Exception {",
          "969:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "970:         csrfAttackTest2(url);",
          "",
          "[Removed Lines]",
          "965:         if (!isWSFederation()) {",
          "966:             return;",
          "967:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "994:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
          "996:         for (DomElement result : results) {",
          "1002:             }",
          "1003:         }",
          "",
          "[Removed Lines]",
          "997:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "998:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "999:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "1000:                 String value = result.getAttributeNS(null, \"value\");",
          "1001:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "",
          "[Added Lines]",
          "998:             if (isWSFederation()) {",
          "999:                 if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "1000:                     || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "1001:                     || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "1002:                     String value = result.getAttributeNS(null, \"value\");",
          "1003:                     request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "1004:                 }",
          "1005:             } else {",
          "1006:                 if (\"SAMLResponse\".equals(result.getAttributeNS(null, \"name\"))",
          "1007:                     || \"RelayState\".equals(result.getAttributeNS(null, \"name\"))) {",
          "1008:                     String value = result.getAttributeNS(null, \"value\");",
          "1009:                     request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "1010:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48dd9b68d67c6b729376c1ce8886f52a57df6c45",
      "candidate_info": {
        "commit_hash": "48dd9b68d67c6b729376c1ce8886f52a57df6c45",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/48dd9b68d67c6b729376c1ce8886f52a57df6c45",
        "files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
          "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
          "systests/webapps/springWebapp/src/main/webapp/WEB-INF/applicationContext-security.xml"
        ],
        "message": "Some improvements to the Spring plugins",
        "before_after_code_files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
          "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
            "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
          ],
          "candidate": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
            "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "",
          "[Added Lines]",
          "132:         if (session == null) {",
          "133:             logger.warn(\"The received state does not match the state saved in the context\");",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "138:         String state = getState(request);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "---------------"
        ],
        "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java": [
          "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:             + \"/j_spring_fediz_security_check\";",
          "158:         csrfAttackTest(url);",
          "159:     }",
          "160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     @Override",
          "162:     @org.junit.Test",
          "163:     public void testCSRFAttack2() throws Exception {",
          "164:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
          "165:             + \"/j_spring_fediz_security_check\";",
          "166:         csrfAttackTest2(url);",
          "167:     }",
          "",
          "---------------"
        ],
        "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java": [
          "File: systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java -> systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:     }",
          "806: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:     @org.junit.Test",
          "807:     public void testCSRFAttack2() throws Exception {",
          "808:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "809:         csrfAttackTest2(url);",
          "810:     }",
          "812:     protected void csrfAttackTest2(String rpURL) throws Exception {",
          "813:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "816:         WebClient webClient2 = new WebClient();",
          "817:         webClient2.getOptions().setUseInsecureSSL(true);",
          "818:         webClient2.getCredentialsProvider().setCredentials(",
          "819:             new AuthScope(\"localhost\", Integer.parseInt(getIdpHttpsPort())),",
          "820:             new UsernamePasswordCredentials(\"bob\", \"bob\"));",
          "822:         webClient2.getOptions().setJavaScriptEnabled(false);",
          "823:         final HtmlPage idpPage2 = webClient2.getPage(url);",
          "824:         webClient2.getOptions().setJavaScriptEnabled(true);",
          "825:         Assert.assertEquals(\"IDP SignIn Response Form\", idpPage2.getTitleText());",
          "830:         WebRequest request = new WebRequest(new URL(rpURL), HttpMethod.POST);",
          "831:         request.setRequestParameters(new ArrayList<NameValuePair>());",
          "833:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
          "835:         for (DomElement result : results) {",
          "836:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "837:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "838:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "839:                 String value = result.getAttributeNS(null, \"value\");",
          "840:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "841:             }",
          "842:         }",
          "844:         WebClient webClient = new WebClient();",
          "845:         webClient.getOptions().setUseInsecureSSL(true);",
          "847:         try {",
          "848:             webClient.getPage(request);",
          "849:             Assert.fail(\"Failure expected on a CSRF attack\");",
          "850:         } catch (FailingHttpStatusCodeException ex) {",
          "852:         }",
          "857:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}