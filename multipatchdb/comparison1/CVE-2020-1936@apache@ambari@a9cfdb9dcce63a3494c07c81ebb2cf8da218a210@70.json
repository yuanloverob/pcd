{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56ffa1e2236a517741ef22fb6ea19ff2a3414341",
      "candidate_info": {
        "commit_hash": "56ffa1e2236a517741ef22fb6ea19ff2a3414341",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/56ffa1e2236a517741ef22fb6ea19ff2a3414341",
        "files": [
          "ambari-web/app/styles/top-nav.less"
        ],
        "message": "AMBARI-24572 Fixing the cluster name alignment (sjanardhanhw via ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/styles/top-nav.less||ambari-web/app/styles/top-nav.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/styles/top-nav.less||ambari-web/app/styles/top-nav.less": [
          "File: ambari-web/app/styles/top-nav.less -> ambari-web/app/styles/top-nav.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:       padding: @navbar-header-vertical-padding @navbar-header-padding-right @navbar-header-vertical-padding @navbar-header-padding-left;",
          "30:       margin-top: -5px;",
          "31:       font-size: @navbar-header-font-size;",
          "33:       a {",
          "34:         color: #313D54;",
          "35:         cursor: pointer;",
          "",
          "[Removed Lines]",
          "32:       width: ~\"calc(100% - 400px)\";",
          "",
          "[Added Lines]",
          "32:       width: ~\"calc(100% - 440px)\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a67af59eb948f0d3c129a3691084806a132a803",
      "candidate_info": {
        "commit_hash": "1a67af59eb948f0d3c129a3691084806a132a803",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1a67af59eb948f0d3c129a3691084806a132a803",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java"
        ],
        "message": "AMBARI-24333. Raising an error when user is trying to create a view URL with an existing short URL prefix",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: @StaticallyInject",
          "60: public class ViewURLResourceProvider extends AbstractAuthorizedResourceProvider {",
          "",
          "[Removed Lines]",
          "58: @SuppressWarnings(\"Duplicates\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:           throw new IllegalStateException(\"The view \" + viewName + \" is not loaded.\");",
          "269:         }",
          "275:           throw new AmbariException(\"This view URL name exists, URL names should be unique\");",
          "276:         }",
          "280:         }",
          "282:         viewURLDAO.save(urlEntity);",
          "",
          "[Removed Lines]",
          "271:         ViewURLEntity viewUrl = viewInstanceEntity.getViewUrl();",
          "272:         Optional<ViewURLEntity> savedUrl = viewURLDAO.findByName(urlEntity.getUrlName());",
          "274:         if(savedUrl.isPresent()){",
          "278:         if(viewUrl != null) {",
          "279:           throw new AmbariException(\"The view instance selected already has a linked URL\");",
          "",
          "[Added Lines]",
          "270:         if(viewInstanceEntity.getViewUrl() != null) {",
          "271:           throw new AmbariException(\"The view instance selected already has a linked URL\");",
          "272:         }",
          "274:         if(viewURLDAO.findByName(urlEntity.getUrlName()).isPresent()){",
          "278:         if (viewURLDAO.findBySuffix(urlEntity.getUrlSuffix()).isPresent()) {",
          "279:           throw new AmbariException(\"This view URL suffix has already been recorded, URL suffixes should be unique\");",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "23: import javax.persistence.EntityManager;",
          "24: import javax.persistence.TypedQuery;",
          "26: import org.apache.ambari.server.orm.RequiresSession;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import javax.persistence.NoResultException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   @Inject",
          "44:   private Provider<EntityManager> entityManagerProvider;",
          "",
          "[Removed Lines]",
          "45:   @Inject",
          "46:   private DaoUtils daoUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     }",
          "77:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   @RequiresSession",
          "87:   public Optional<ViewURLEntity> findBySuffix(String urlSuffix) {",
          "88:     TypedQuery<ViewURLEntity> query = entityManagerProvider.get().createNamedQuery(\"viewUrlBySuffix\", ViewURLEntity.class);",
          "89:     query.setParameter(\"urlSuffix\", urlSuffix);",
          "90:     try {",
          "91:       return Optional.of(query.getSingleResult());",
          "92:     } catch (NoResultException e) {",
          "93:       return Optional.absent();",
          "94:     }",
          "95:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: )",
          "43: @NamedQueries({",
          "52: @Entity",
          "53: public class ViewURLEntity {",
          "",
          "[Removed Lines]",
          "44:         @NamedQuery(name = \"allViewUrls\",",
          "45:                 query = \"SELECT viewUrl FROM ViewURLEntity viewUrl\"),",
          "46:         @NamedQuery(name = \"viewUrlByName\", query =",
          "47:                 \"SELECT viewUrlEntity \" +",
          "48:                         \"FROM ViewURLEntity viewUrlEntity \" +",
          "49:                         \"WHERE viewUrlEntity.urlName=:urlName\")})",
          "",
          "[Added Lines]",
          "44:         @NamedQuery(name = \"allViewUrls\", query = \"SELECT viewUrl FROM ViewURLEntity viewUrl\"),",
          "45:         @NamedQuery(name = \"viewUrlByName\", query =\"SELECT viewUrlEntity FROM ViewURLEntity viewUrlEntity WHERE viewUrlEntity.urlName=:urlName\"),",
          "46:         @NamedQuery(name = \"viewUrlBySuffix\", query =\"SELECT viewUrlEntity FROM ViewURLEntity viewUrlEntity WHERE viewUrlEntity.urlSuffix=:urlSuffix\")})",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ViewURLResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     expect(viewInstanceEntity.getName()).andReturn(\"test\").once();",
          "141:     expect(viewInstanceEntity.getViewUrl()).andReturn(null).once();",
          "142:     expect(viewURLDAO.findByName(\"test\")).andReturn(Optional.absent());",
          "143:     Capture<ViewURLEntity> urlEntityCapture = newCapture();",
          "144:     viewURLDAO.save(capture(urlEntityCapture));",
          "145:     viewregistry.updateViewInstance(viewInstanceEntity);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     expect(viewURLDAO.findBySuffix(\"suffix\")).andReturn(Optional.absent());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   }",
          "162:   @Test(expected = org.apache.ambari.server.controller.spi.SystemException.class)",
          "164:     ViewInstanceEntity viewInstanceEntity = createNiceMock(ViewInstanceEntity.class);",
          "165:     ViewEntity viewEntity = createNiceMock(ViewEntity.class);",
          "166:     ViewURLResourceProvider provider = new ViewURLResourceProvider();",
          "",
          "[Removed Lines]",
          "163:   public void testCreateResources_existingUrl() throws Exception {",
          "",
          "[Added Lines]",
          "164:   public void testCreateResources_existingUrlName() throws Exception {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:   }",
          "195:   @Test",
          "196:   public void testUpdateResources() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:   @Test(expected = org.apache.ambari.server.controller.spi.SystemException.class)",
          "196:   public void testCreateResources_existingUrlSuffix() throws Exception {",
          "197:     ViewInstanceEntity viewInstanceEntity = createNiceMock(ViewInstanceEntity.class);",
          "198:     ViewEntity viewEntity = createNiceMock(ViewEntity.class);",
          "199:     ViewURLResourceProvider provider = new ViewURLResourceProvider();",
          "201:     ViewURLDAO viewURLDAO = createNiceMock(ViewURLDAO.class);",
          "202:     setDao(ViewURLResourceProvider.class.getDeclaredField(\"viewURLDAO\"), viewURLDAO);",
          "203:     Set<Map<String, Object>> properties = new HashSet<>();",
          "204:     Map<String, Object> propertyMap = new HashMap<>();",
          "205:     propertyMap.put(ViewURLResourceProvider.URL_NAME,\"test\");",
          "206:     propertyMap.put(ViewURLResourceProvider.URL_SUFFIX,\"suffix\");",
          "207:     propertyMap.put(ViewURLResourceProvider.VIEW_INSTANCE_COMMON_NAME,\"FILES\");",
          "208:     propertyMap.put(ViewURLResourceProvider.VIEW_INSTANCE_NAME,\"test\");",
          "209:     propertyMap.put(ViewURLResourceProvider.VIEW_INSTANCE_VERSION,\"1.0.0\");",
          "211:     expect(viewregistry.getInstanceDefinition(\"FILES\",\"1.0.0\",\"test\")).andReturn(viewInstanceEntity);",
          "212:     expect(viewregistry.getDefinition(\"FILES\",\"1.0.0\")).andReturn(viewEntity);",
          "213:     expect(viewInstanceEntity.getViewEntity()).andReturn(viewEntity).once();",
          "214:     expect(viewEntity.getCommonName()).andReturn(\"FILES\").once();",
          "215:     expect(viewEntity.isDeployed()).andReturn(true).once();",
          "216:     expect(viewEntity.getVersion()).andReturn(\"1.0.0\").once();",
          "217:     expect(viewInstanceEntity.getName()).andReturn(\"test\").once();",
          "218:     expect(viewInstanceEntity.getViewUrl()).andReturn(null).once();",
          "219:     expect(viewURLDAO.findByName(\"test\")).andReturn(Optional.absent());",
          "220:     expect(viewURLDAO.findBySuffix(\"suffix\")).andReturn(Optional.of(new ViewURLEntity()));",
          "221:     replay(viewregistry,viewEntity,viewInstanceEntity,viewURLDAO);",
          "222:     properties.add(propertyMap);",
          "223:     SecurityContextHolder.getContext().setAuthentication(TestAuthenticationFactory.createAdministrator());",
          "224:     provider.createResources(PropertyHelper.getCreateRequest(properties, null));",
          "225:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffd89ff5262f2b54329805e6900c6e815b54ca1c",
      "candidate_info": {
        "commit_hash": "ffd89ff5262f2b54329805e6900c6e815b54ca1c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ffd89ff5262f2b54329805e6900c6e815b54ca1c",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java"
        ],
        "message": "[AMBARI-25286] : Avoid conditional logic for creating ViewURLResource (Backport to branch-2.7) (#2999)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java -> ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.ambari.server.api.services.Request;",
          "39: import org.apache.ambari.server.controller.ViewUrlResponseSwagger;",
          "40: import org.apache.ambari.server.controller.spi.Resource;",
          "43: import org.apache.http.HttpStatus;",
          "47: import io.swagger.annotations.Api;",
          "48: import io.swagger.annotations.ApiImplicitParam;",
          "49: import io.swagger.annotations.ApiImplicitParams;",
          "",
          "[Removed Lines]",
          "41: import org.apache.ambari.server.security.authorization.AuthorizationException;",
          "45: import com.google.common.base.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: @Api(value = \"Views\", description = \"Endpoint for view specific operations\")",
          "59: public class ViewUrlsService extends BaseService {",
          "",
          "[Removed Lines]",
          "61:   public static final String VIEW_URL_INFO_TYPE = \"org.apache.ambari.server.controller.ViewUrlResponseSwagger\";",
          "",
          "[Added Lines]",
          "58:   private static final String VIEW_URL_INFO_TYPE = \"org.apache.ambari.server.controller.ViewUrlResponseSwagger\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:     @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = MSG_INVALID_ARGUMENTS),",
          "87:   })",
          "88:   public Response getViewUrls(@Context HttpHeaders headers, @Context UriInfo ui) {",
          "90:   }",
          "",
          "[Removed Lines]",
          "89:     return handleRequest(headers, null, ui, Request.Type.GET, createViewUrlResource(Optional.absent()));",
          "",
          "[Added Lines]",
          "86:     return handleRequest(headers, null, ui, Request.Type.GET, createViewUrlResource(null));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:           @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),",
          "113:   })",
          "114:   public Response createUrl(String body, @Context HttpHeaders headers, @Context UriInfo ui,",
          "117:   }",
          "",
          "[Removed Lines]",
          "115:                                 @PathParam(\"urlName\") String urlName) throws AuthorizationException {",
          "116:     return handleRequest(headers, body, ui, Request.Type.POST, createViewUrlResource(Optional.of(urlName)));",
          "",
          "[Added Lines]",
          "111:                             @PathParam(\"urlName\") String urlName) {",
          "112:     return handleRequest(headers, body, ui, Request.Type.POST, createViewUrlResource(urlName));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:     @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),",
          "143:   })",
          "144:   public Response updateUrl(String body, @Context HttpHeaders headers, @Context UriInfo ui,",
          "147:   }",
          "",
          "[Removed Lines]",
          "145:                             @PathParam(\"urlName\") String urlName) throws AuthorizationException {",
          "146:     return handleRequest(headers, body, ui, Request.Type.PUT, createViewUrlResource(Optional.of(urlName)));",
          "",
          "[Added Lines]",
          "140:                             @PathParam(\"urlName\") String urlName) {",
          "141:     return handleRequest(headers, body, ui, Request.Type.PUT, createViewUrlResource(urlName));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:     @ApiResponse(code = HttpStatus.SC_BAD_REQUEST, message = MSG_INVALID_ARGUMENTS),",
          "171:   })",
          "172:   public Response getUrl(@Context HttpHeaders headers, @Context UriInfo ui,",
          "175:   }",
          "",
          "[Removed Lines]",
          "173:                          @PathParam(\"urlName\") String urlName) throws AuthorizationException {",
          "174:     return handleRequest(headers, null, ui, Request.Type.GET, createViewUrlResource(Optional.of(urlName)));",
          "",
          "[Added Lines]",
          "167:                          @PathParam(\"urlName\") String urlName) {",
          "168:     return handleRequest(headers, null, ui, Request.Type.GET, createViewUrlResource(urlName));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:     @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),",
          "196:   })",
          "197:   public Response deleteUrl(String body, @Context HttpHeaders headers, @Context UriInfo ui,",
          "200:   }",
          "",
          "[Removed Lines]",
          "198:                             @PathParam(\"urlName\") String urlName) throws AuthorizationException {",
          "199:     return handleRequest(headers, body, ui, Request.Type.DELETE, createViewUrlResource(Optional.of(urlName)));",
          "",
          "[Added Lines]",
          "191:                             @PathParam(\"urlName\") String urlName) {",
          "192:     return handleRequest(headers, body, ui, Request.Type.DELETE, createViewUrlResource(urlName));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "213:   }",
          "214: }",
          "",
          "[Removed Lines]",
          "211:   private ResourceInstance createViewUrlResource(Optional<String> urlName) {",
          "212:     return createResource(Resource.Type.ViewURL,Collections.singletonMap(Resource.Type.ViewURL, urlName.isPresent()?urlName.get().toString():null));",
          "",
          "[Added Lines]",
          "204:   private ResourceInstance createViewUrlResource(final String urlName) {",
          "205:     return createResource(Resource.Type.ViewURL, Collections.singletonMap(Resource.Type.ViewURL, urlName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a45c83cc6d96891ec14fee7e7455802187dd25d4",
      "candidate_info": {
        "commit_hash": "a45c83cc6d96891ec14fee7e7455802187dd25d4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a45c83cc6d96891ec14fee7e7455802187dd25d4",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ],
        "message": "[AMBARI-24356] Add TIMELINE_READER into Ambari BlueprintConfigurationProcessor\n\n* AMBARI-24356. Add TIMELINE_READER into Ambari BlueprintConfigurationProcessor.\n\n* AMBARI-24356. Add TIMELINE_READER into Ambari BlueprintConfigurationProcessor.",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2945:     yarnSiteMap.put(\"yarn.timeline-service.webapp.https.address\", new SingleHostTopologyUpdater(\"APP_TIMELINE_SERVER\"));",
          "2946:     yarnSiteMap.put(\"yarn.log.server.web-service.url\", new SingleHostTopologyUpdater(\"APP_TIMELINE_SERVER\"));",
          "2949:     hiveSiteMap.put(\"hive.server2.authentication.ldap.url\", new SingleHostTopologyUpdater(\"HIVE_SERVER2\"));",
          "2950:     multiHiveSiteMap.put(\"hive.metastore.uris\", new MultipleHostTopologyUpdater(\"HIVE_METASTORE\", ',', true, true, true));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2949:     yarnSiteMap.put(\"yarn.timeline-service.reader.webapp.address\", new SingleHostTopologyUpdater(\"TIMELINE_READER\"));",
          "2950:     yarnSiteMap.put(\"yarn.timeline-service.reader.webapp.https.address\", new SingleHostTopologyUpdater(\"TIMELINE_READER\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     yarnComponents.add(\"NODEMANAGER\");",
          "176:     yarnComponents.add(\"YARN_CLIENT\");",
          "177:     yarnComponents.add(\"APP_TIMELINE_SERVER\");",
          "178:     serviceComponents.put(\"YARN\", yarnComponents);",
          "180:     Collection<String> mrComponents = new HashSet<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     yarnComponents.add(\"TIMELINE_READER\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1351:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.address\", expectedHostName + \":\" + expectedPortNum);",
          "1352:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.https.address\", expectedHostName + \":\" + expectedPortNum);",
          "1353:     yarnSiteProperties.put(\"yarn.log.server.web-service.url\", expectedHostName + \":\" + expectedPortNum);",
          "1355:     Configuration clusterConfig = new Configuration(configProperties,",
          "1356:       emptyMap());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1355:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.address\", expectedHostName + \":\" + expectedPortNum);",
          "1356:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.https.address\", expectedHostName + \":\" + expectedPortNum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1394:       createExportedAddress(expectedPortNum, expectedHostGroupName), yarnSiteProperties.get(\"yarn.timeline-service.webapp.https.address\"));",
          "1395:     assertEquals(\"Yarn ResourceManager timeline web service url was incorrectly exported\",",
          "1396:       createExportedAddress(expectedPortNum, expectedHostGroupName), yarnSiteProperties.get(\"yarn.log.server.web-service.url\"));",
          "1397:   }",
          "1399:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:     assertEquals(\"Yarn ResourceManager timeline reader webapp address was incorrectly exported\",",
          "1401:         createExportedAddress(expectedPortNum, expectedHostGroupName), yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.address\"));",
          "1402:     assertEquals(\"Yarn ResourceManager timeline reader webapp HTTPS address was incorrectly exported\",",
          "1403:         createExportedAddress(expectedPortNum, expectedHostGroupName), yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.https.address\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1417:     yarnSiteProperties.put(\"yarn.timeline-service.address\", \"0.0.0.0\" + \":\" + expectedPortNum);",
          "1418:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.address\", \"0.0.0.0\" + \":\" + expectedPortNum);",
          "1419:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.https.address\", \"0.0.0.0\" + \":\" + expectedPortNum);",
          "1421:     Configuration clusterConfig = new Configuration(configProperties,",
          "1422:       emptyMap());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.address\", \"0.0.0.0\" + \":\" + expectedPortNum);",
          "1428:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.https.address\", \"0.0.0.0\" + \":\" + expectedPortNum);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1458:       \"0.0.0.0\" + \":\" + expectedPortNum, yarnSiteProperties.get(\"yarn.timeline-service.webapp.address\"));",
          "1459:     assertEquals(\"Yarn ResourceManager timeline webapp HTTPS address was incorrectly exported\",",
          "1460:       \"0.0.0.0\" + \":\" + expectedPortNum, yarnSiteProperties.get(\"yarn.timeline-service.webapp.https.address\"));",
          "1461:   }",
          "1463:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1470:     assertEquals(\"Yarn ResourceManager timeline reader webapp address was incorrectly exported\",",
          "1471:       \"0.0.0.0\" + \":\" + expectedPortNum, yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.address\"));",
          "1472:     assertEquals(\"Yarn ResourceManager timeline reader webapp HTTPS address was incorrectly exported\",",
          "1473:       \"0.0.0.0\" + \":\" + expectedPortNum, yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.https.address\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2530:     hostGroups.add(group2);",
          "2532:     expect(stack.getCardinality(\"APP_TIMELINE_SERVER\")).andReturn(new Cardinality(\"1\")).anyTimes();",
          "2534:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "2535:     BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2546:     expect(stack.getCardinality(\"TIMELINE_READER\")).andReturn(new Cardinality(\"1\")).anyTimes();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2559:     group1Components.add(\"SECONDARY_NAMENODE\");",
          "2560:     group1Components.add(\"RESOURCEMANAGER\");",
          "2561:     group1Components.add(\"APP_TIMELINE_SERVER\");",
          "2562:     TestHostGroup group1 = new TestHostGroup(\"group1\", group1Components, Collections.singleton(\"testhost\"));",
          "2564:     Collection<String> group2Components = new HashSet<>();",
          "2565:     group2Components.add(\"DATANODE\");",
          "2566:     group2Components.add(\"HDFS_CLIENT\");",
          "2567:     group2Components.add(\"APP_TIMELINE_SERVER\");",
          "2568:     TestHostGroup group2 = new TestHostGroup(\"group2\", group2Components, Collections.singleton(\"testhost2\"));",
          "2570:     Collection<TestHostGroup> hostGroups = new HashSet<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2576:     group1Components.add(\"TIMELINE_READER\");",
          "2583:     group2Components.add(\"TIMELINE_READER\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2572:     hostGroups.add(group2);",
          "2574:     expect(stack.getCardinality(\"APP_TIMELINE_SERVER\")).andReturn(new Cardinality(\"0-1\")).anyTimes();",
          "2577:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2591:     expect(stack.getCardinality(\"TIMELINE_READER\")).andReturn(new Cardinality(\"0-1\")).anyTimes();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2603:     group1Components.add(\"SECONDARY_NAMENODE\");",
          "2604:     group1Components.add(\"RESOURCEMANAGER\");",
          "2605:     group1Components.add(\"APP_TIMELINE_SERVER\");",
          "2606:     TestHostGroup group1 = new TestHostGroup(\"group1\", group1Components, Collections.singleton(\"testhost\"));",
          "2608:     Collection<String> group2Components = new HashSet<>();",
          "2609:     group2Components.add(\"DATANODE\");",
          "2610:     group2Components.add(\"HDFS_CLIENT\");",
          "2611:     group2Components.add(\"APP_TIMELINE_SERVER\");",
          "2612:     TestHostGroup group2 = new TestHostGroup(\"group2\", group2Components, Collections.singleton(\"testhost2\"));",
          "2614:     Collection<TestHostGroup> hostGroups = new HashSet<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2623:     group1Components.add(\"TIMELINE_READER\");",
          "2630:     group2Components.add(\"TIMELINE_READER\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2616:     hostGroups.add(group2);",
          "2618:     expect(stack.getCardinality(\"APP_TIMELINE_SERVER\")).andReturn(new Cardinality(\"0-1\")).anyTimes();",
          "2621:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2638:     expect(stack.getCardinality(\"TIMELINE_READER\")).andReturn(new Cardinality(\"0-1\")).anyTimes();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2653:     hostGroups.add(group2);",
          "2655:     expect(stack.getCardinality(\"APP_TIMELINE_SERVER\")).andReturn(new Cardinality(\"0-1\")).anyTimes();",
          "2657:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "2658:     BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2676:     expect(stack.getCardinality(\"TIMELINE_READER\")).andReturn(new Cardinality(\"0-1\")).anyTimes();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3514:     yarnSiteProperties.put(\"yarn.timeline-service.address\", expectedHostName + \":\" + expectedPortNum);",
          "3515:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.address\", expectedHostName + \":\" + expectedPortNum);",
          "3516:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.https.address\", expectedHostName + \":\" + expectedPortNum);",
          "3517:     yarnSiteProperties.put(\"yarn.resourcemanager.ha.enabled\", \"true\");",
          "3518:     yarnSiteProperties.put(\"yarn.resourcemanager.ha.rm-ids\", \"rm1, rm2\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3538:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.address\", expectedHostName + \":\" + expectedPortNum);",
          "3539:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.https.address\", expectedHostName + \":\" + expectedPortNum);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3521:     Collection<String> hgComponents = new HashSet<>();",
          "3522:     hgComponents.add(\"RESOURCEMANAGER\");",
          "3523:     hgComponents.add(\"APP_TIMELINE_SERVER\");",
          "3524:     hgComponents.add(\"HISTORYSERVER\");",
          "3525:     TestHostGroup group1 = new TestHostGroup(expectedHostGroupName, hgComponents, Collections.singleton(expectedHostName));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3547:     hgComponents.add(\"TIMELINE_READER\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3559:       createHostAddress(expectedHostName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.webapp.address\"));",
          "3560:     assertEquals(\"Yarn ResourceManager timeline webapp HTTPS address was incorrectly updated\",",
          "3561:       createHostAddress(expectedHostName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.webapp.https.address\"));",
          "3562:   }",
          "3564:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3586:     assertEquals(\"Yarn ResourceManager timeline reader webapp address was incorrectly updated\",",
          "3587:       createHostAddress(expectedHostName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.address\"));",
          "3588:     assertEquals(\"Yarn ResourceManager timeline reader webapp HTTPS address was incorrectly updated\",",
          "3589:       createHostAddress(expectedHostName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.https.address\"));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3584:     yarnSiteProperties.put(\"yarn.timeline-service.address\", expectedHostName + \":\" + expectedPortNum);",
          "3585:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.address\", expectedHostName + \":\" + expectedPortNum);",
          "3586:     yarnSiteProperties.put(\"yarn.timeline-service.webapp.https.address\", expectedHostName + \":\" + expectedPortNum);",
          "3587:     yarnSiteProperties.put(\"yarn.resourcemanager.ha.enabled\", \"true\");",
          "3588:     yarnSiteProperties.put(\"yarn.resourcemanager.ha.rm-ids\", \"rm1, rm2\");",
          "3589:     yarnSiteProperties.put(\"yarn.resourcemanager.hostname.rm1\", expectedHostName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.address\", expectedHostName + \":\" + expectedPortNum);",
          "3616:     yarnSiteProperties.put(\"yarn.timeline-service.reader.webapp.https.address\", expectedHostName + \":\" + expectedPortNum);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3608:     Collection<String> hgComponents = new HashSet<>();",
          "3609:     hgComponents.add(\"RESOURCEMANAGER\");",
          "3610:     hgComponents.add(\"APP_TIMELINE_SERVER\");",
          "3611:     hgComponents.add(\"HISTORYSERVER\");",
          "3612:     TestHostGroup group1 = new TestHostGroup(expectedHostGroupName, hgComponents, Collections.singleton(expectedHostName));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3641:     hgComponents.add(\"TIMELINE_READER\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3646:       createExportedHostName(expectedHostGroupName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.webapp.address\"));",
          "3647:     assertEquals(\"Yarn ResourceManager timeline webapp HTTPS address was incorrectly updated\",",
          "3648:       createExportedHostName(expectedHostGroupName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.webapp.https.address\"));",
          "3651:     List<String> properties = Arrays.asList(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3680:     assertEquals(\"Yarn ResourceManager timeline reader webapp address was incorrectly updated\",",
          "3681:       createExportedHostName(expectedHostGroupName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.address\"));",
          "3682:     assertEquals(\"Yarn ResourceManager timeline reader ebapp HTTPS address was incorrectly updated\",",
          "3683:       createExportedHostName(expectedHostGroupName, expectedPortNum), yarnSiteProperties.get(\"yarn.timeline-service.reader.webapp.https.address\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cae696191f9726ce6a97ab92e66be28944864bf1",
      "candidate_info": {
        "commit_hash": "cae696191f9726ce6a97ab92e66be28944864bf1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cae696191f9726ce6a97ab92e66be28944864bf1",
        "files": [
          "ambari-web/app/models/configs/objects/service_config_property.js"
        ],
        "message": "[cherry pick] AMBARI-25381 Save button is enabled without any config changes for Kerberos service (#3084)",
        "before_after_code_files": [
          "ambari-web/app/models/configs/objects/service_config_property.js||ambari-web/app/models/configs/objects/service_config_property.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/models/configs/objects/service_config_property.js||ambari-web/app/models/configs/objects/service_config_property.js": [
          "File: ambari-web/app/models/configs/objects/service_config_property.js -> ambari-web/app/models/configs/objects/service_config_property.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:       isFinal = this.get('isFinal'),",
          "347:       savedIsFinal = this.get('savedIsFinal');",
          "354:     if (this.get('stackConfigProperty') && this.get('stackConfigProperty.valueAttributes.type') == 'float') {",
          "",
          "[Removed Lines]",
          "349:     if (this.get('name') === 'kdc_type') {",
          "350:       return App.router.get('mainAdminKerberosController.kdcTypesValues')[savedValue] !== value;",
          "351:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}