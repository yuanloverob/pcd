{
  "cve_id": "CVE-2018-1002105",
  "cve_desc": "In all Kubernetes versions prior to v1.10.11, v1.11.5, and v1.12.3, incorrect handling of error responses to proxied upgrade requests in the kube-apiserver allowed specially crafted requests to establish a connection through the Kubernetes API server to backend servers, then send arbitrary requests over the same connection directly to the backend, authenticated with the Kubernetes API server's TLS credentials used to establish the backend connection.",
  "repo": "kubernetes/kubernetes",
  "patch_hash": "2257c1ecbe3c0cf71dd50b82752ae189c94ec905",
  "patch_info": {
    "commit_hash": "2257c1ecbe3c0cf71dd50b82752ae189c94ec905",
    "repo": "kubernetes/kubernetes",
    "commit_url": "https://github.com/kubernetes/kubernetes/commit/2257c1ecbe3c0cf71dd50b82752ae189c94ec905",
    "files": [
      "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
    ],
    "message": "Merge pull request #71412 from liggitt/backend-error\n\nHandle error responses from backends",
    "before_after_code_files": [
      "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
    ]
  },
  "patch_diff": {
    "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go": [
      "File: staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go -> staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package proxy",
      "19: import (",
      "20:  \"bytes\"",
      "21:  \"context\"",
      "22:  \"fmt\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20:  \"bufio\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "271:  }",
      "272:  defer backendConn.Close()",
      "276:  requestHijacker, ok := w.(http.Hijacker)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "276:  rawResponseCode, headerBytes, err := getResponseCode(io.MultiReader(bytes.NewReader(rawResponse), backendConn))",
      "277:  if err != nil {",
      "278:   klog.V(6).Infof(\"Proxy connection error: %v\", err)",
      "279:   h.Responder.Error(w, req, err)",
      "280:   return true",
      "281:  }",
      "282:  if len(headerBytes) > len(rawResponse) {",
      "284:   rawResponse = headerBytes",
      "285:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "295:   }",
      "296:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "311:  if rawResponseCode != http.StatusSwitchingProtocols {",
      "313:   klog.V(6).Infof(\"Proxy upgrade error, status code %d\", rawResponseCode)",
      "314:   _, err := io.Copy(requestHijackedConn, backendConn)",
      "315:   if err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {",
      "316:    klog.Errorf(\"Error proxying data from backend to client: %v\", err)",
      "317:   }",
      "319:   return true",
      "320:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "356:  return dial(updatedReq, h.UpgradeTransport)",
      "357: }",
      "360: func dial(req *http.Request, transport http.RoundTripper) (net.Conn, error) {",
      "361:  conn, err := DialURL(req.Context(), req.URL, transport)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "385: func getResponseCode(r io.Reader) (int, []byte, error) {",
      "386:  rawResponse := bytes.NewBuffer(make([]byte, 0, 256))",
      "388:  resp, err := http.ReadResponse(bufio.NewReader(io.TeeReader(r, rawResponse)), nil)",
      "389:  if err != nil {",
      "390:   return 0, nil, err",
      "391:  }",
      "393:  return resp.StatusCode, rawResponse.Bytes(), nil",
      "394: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b84e3dd6f80af4016acfd891ef6cc50ce05d4b5b",
      "candidate_info": {
        "commit_hash": "b84e3dd6f80af4016acfd891ef6cc50ce05d4b5b",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/b84e3dd6f80af4016acfd891ef6cc50ce05d4b5b",
        "files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ],
        "message": "Verify backend upgraded connection",
        "before_after_code_files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/kubernetes/kubernetes/pull/71412"
        ],
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go": [
          "File: staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go -> staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package proxy",
          "19: import (",
          "20:  \"bytes\"",
          "21:  \"context\"",
          "22:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"bufio\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:  }",
          "272:  defer backendConn.Close()",
          "276:  requestHijacker, ok := w.(http.Hijacker)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:  rawResponseCode, headerBytes, err := getResponseCode(io.MultiReader(bytes.NewReader(rawResponse), backendConn))",
          "277:  if err != nil {",
          "278:   klog.V(6).Infof(\"Proxy connection error: %v\", err)",
          "279:   h.Responder.Error(w, req, err)",
          "280:   return true",
          "281:  }",
          "282:  if len(headerBytes) > len(rawResponse) {",
          "284:   rawResponse = headerBytes",
          "285:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:   }",
          "296:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:  if rawResponseCode != http.StatusSwitchingProtocols {",
          "313:   klog.V(6).Infof(\"Proxy upgrade error, status code %d\", rawResponseCode)",
          "314:   _, err := io.Copy(requestHijackedConn, backendConn)",
          "315:   if err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {",
          "316:    klog.Errorf(\"Error proxying data from backend to client: %v\", err)",
          "317:   }",
          "319:   return true",
          "320:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356:  return dial(updatedReq, h.UpgradeTransport)",
          "357: }",
          "360: func dial(req *http.Request, transport http.RoundTripper) (net.Conn, error) {",
          "361:  conn, err := DialURL(req.Context(), req.URL, transport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: func getResponseCode(r io.Reader) (int, []byte, error) {",
          "386:  rawResponse := bytes.NewBuffer(make([]byte, 0, 256))",
          "388:  resp, err := http.ReadResponse(bufio.NewReader(io.TeeReader(r, rawResponse)), nil)",
          "389:  if err != nil {",
          "390:   return 0, nil, err",
          "391:  }",
          "393:  return resp.StatusCode, rawResponse.Bytes(), nil",
          "394: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0535bcef95a33855f0a722c8cd822c663fc6275e",
      "candidate_info": {
        "commit_hash": "0535bcef95a33855f0a722c8cd822c663fc6275e",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/0535bcef95a33855f0a722c8cd822c663fc6275e",
        "files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ],
        "message": "Verify backend upgraded connection",
        "before_after_code_files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go": [
          "File: staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go -> staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package proxy",
          "19: import (",
          "20:  \"bytes\"",
          "21:  \"context\"",
          "22:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"bufio\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:  }",
          "271:  defer backendConn.Close()",
          "275:  requestHijacker, ok := w.(http.Hijacker)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:  rawResponseCode, headerBytes, err := getResponseCode(io.MultiReader(bytes.NewReader(rawResponse), backendConn))",
          "276:  if err != nil {",
          "277:   glog.V(6).Infof(\"Proxy connection error: %v\", err)",
          "278:   h.Responder.Error(w, req, err)",
          "279:   return true",
          "280:  }",
          "281:  if len(headerBytes) > len(rawResponse) {",
          "283:   rawResponse = headerBytes",
          "284:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:   }",
          "295:  }",
          "298:  wg := &sync.WaitGroup{}",
          "299:  wg.Add(2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:  if rawResponseCode != http.StatusSwitchingProtocols {",
          "312:   glog.V(6).Infof(\"Proxy upgrade error, status code %d\", rawResponseCode)",
          "313:   _, err := io.Copy(requestHijackedConn, backendConn)",
          "314:   if err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {",
          "315:    glog.Errorf(\"Error proxying data from backend to client: %v\", err)",
          "316:   }",
          "318:   return true",
          "319:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "345:  return dial(updatedReq, h.UpgradeTransport)",
          "346: }",
          "349: func dial(req *http.Request, transport http.RoundTripper) (net.Conn, error) {",
          "350:  conn, err := DialURL(req.URL, transport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374: func getResponseCode(r io.Reader) (int, []byte, error) {",
          "375:  rawResponse := bytes.NewBuffer(make([]byte, 0, 256))",
          "377:  resp, err := http.ReadResponse(bufio.NewReader(io.TeeReader(r, rawResponse)), nil)",
          "378:  if err != nil {",
          "379:   return 0, nil, err",
          "380:  }",
          "382:  return resp.StatusCode, rawResponse.Bytes(), nil",
          "383: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4faa71170f4ba2d36e346ccc319b8405d807c657",
      "candidate_info": {
        "commit_hash": "4faa71170f4ba2d36e346ccc319b8405d807c657",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/4faa71170f4ba2d36e346ccc319b8405d807c657",
        "files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ],
        "message": "Verify backend upgraded connection",
        "before_after_code_files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go": [
          "File: staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go -> staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package proxy",
          "19: import (",
          "20:  \"bytes\"",
          "21:  \"context\"",
          "22:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"bufio\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:  }",
          "270:  defer backendConn.Close()",
          "274:  requestHijacker, ok := w.(http.Hijacker)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:  rawResponseCode, headerBytes, err := getResponseCode(io.MultiReader(bytes.NewReader(rawResponse), backendConn))",
          "275:  if err != nil {",
          "276:   glog.V(6).Infof(\"Proxy connection error: %v\", err)",
          "277:   h.Responder.Error(w, req, err)",
          "278:   return true",
          "279:  }",
          "280:  if len(headerBytes) > len(rawResponse) {",
          "282:   rawResponse = headerBytes",
          "283:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293:   }",
          "294:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:  if rawResponseCode != http.StatusSwitchingProtocols {",
          "311:   glog.V(6).Infof(\"Proxy upgrade error, status code %d\", rawResponseCode)",
          "312:   _, err := io.Copy(requestHijackedConn, backendConn)",
          "313:   if err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {",
          "314:    glog.Errorf(\"Error proxying data from backend to client: %v\", err)",
          "315:   }",
          "317:   return true",
          "318:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354:  return dial(updatedReq, h.UpgradeTransport)",
          "355: }",
          "358: func dial(req *http.Request, transport http.RoundTripper) (net.Conn, error) {",
          "359:  conn, err := DialURL(req.Context(), req.URL, transport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: func getResponseCode(r io.Reader) (int, []byte, error) {",
          "384:  rawResponse := bytes.NewBuffer(make([]byte, 0, 256))",
          "386:  resp, err := http.ReadResponse(bufio.NewReader(io.TeeReader(r, rawResponse)), nil)",
          "387:  if err != nil {",
          "388:   return 0, nil, err",
          "389:  }",
          "391:  return resp.StatusCode, rawResponse.Bytes(), nil",
          "392: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "774585f773c7c591645f876e0a26155b7838debe",
      "candidate_info": {
        "commit_hash": "774585f773c7c591645f876e0a26155b7838debe",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/774585f773c7c591645f876e0a26155b7838debe",
        "files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ],
        "message": "Verify backend upgraded connection",
        "before_after_code_files": [
          "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go||staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go": [
          "File: staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go -> staging/src/k8s.io/apimachinery/pkg/util/proxy/upgradeaware.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package proxy",
          "19: import (",
          "20:  \"bytes\"",
          "21:  \"context\"",
          "22:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"bufio\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:  }",
          "272:  defer backendConn.Close()",
          "276:  requestHijacker, ok := w.(http.Hijacker)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:  rawResponseCode, headerBytes, err := getResponseCode(io.MultiReader(bytes.NewReader(rawResponse), backendConn))",
          "277:  if err != nil {",
          "278:   glog.V(6).Infof(\"Proxy connection error: %v\", err)",
          "279:   h.Responder.Error(w, req, err)",
          "280:   return true",
          "281:  }",
          "282:  if len(headerBytes) > len(rawResponse) {",
          "284:   rawResponse = headerBytes",
          "285:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:   }",
          "296:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:  if rawResponseCode != http.StatusSwitchingProtocols {",
          "313:   glog.V(6).Infof(\"Proxy upgrade error, status code %d\", rawResponseCode)",
          "314:   _, err := io.Copy(requestHijackedConn, backendConn)",
          "315:   if err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {",
          "316:    glog.Errorf(\"Error proxying data from backend to client: %v\", err)",
          "317:   }",
          "319:   return true",
          "320:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356:  return dial(updatedReq, h.UpgradeTransport)",
          "357: }",
          "360: func dial(req *http.Request, transport http.RoundTripper) (net.Conn, error) {",
          "361:  conn, err := DialURL(req.Context(), req.URL, transport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: func getResponseCode(r io.Reader) (int, []byte, error) {",
          "386:  rawResponse := bytes.NewBuffer(make([]byte, 0, 256))",
          "388:  resp, err := http.ReadResponse(bufio.NewReader(io.TeeReader(r, rawResponse)), nil)",
          "389:  if err != nil {",
          "390:   return 0, nil, err",
          "391:  }",
          "393:  return resp.StatusCode, rawResponse.Bytes(), nil",
          "394: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}