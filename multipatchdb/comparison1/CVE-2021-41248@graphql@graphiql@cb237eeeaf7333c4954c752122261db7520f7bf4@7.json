{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45a9075d718046e0f17c930162fa9752dfe052ec",
      "candidate_info": {
        "commit_hash": "45a9075d718046e0f17c930162fa9752dfe052ec",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/45a9075d718046e0f17c930162fa9752dfe052ec",
        "files": [
          ".changeset/silver-trainers-double.md",
          "packages/graphiql/resources/renderExample.js",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/utility/introspectionQueries.ts"
        ],
        "message": "fix: graphiql introspection bug with <graphql@16 servers (#2087)",
        "before_after_code_files": [
          "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/utility/introspectionQueries.ts||packages/graphiql/src/utility/introspectionQueries.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
          "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     onEditOperationName: onEditOperationName,",
          "127:     headerEditorEnabled: true,",
          "128:     shouldPersistHeaders: true,",
          "129:   }),",
          "130:   document.getElementById('graphiql'),",
          "131: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     inputValueDeprecation: true,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   GraphQLError,",
          "27:   GraphQLFormattedError,",
          "28:   IntrospectionQuery,",
          "29: } from 'graphql';",
          "30: import copyToClipboard from 'copy-to-clipboard';",
          "31: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   getIntrospectionQuery,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: import { GetDefaultFieldNamesFn, fillLeafs } from '../utility/fillLeafs';",
          "54: import { getLeft, getTop } from '../utility/elementPosition';",
          "55: import mergeAST from '../utility/mergeAst';",
          "61: import { dset } from 'dset/merge';",
          "63: import type {",
          "",
          "[Removed Lines]",
          "56: import {",
          "57:   introspectionQuery,",
          "58:   introspectionQueryName,",
          "59:   introspectionQuerySansSubscriptions,",
          "60: } from '../utility/introspectionQueries';",
          "",
          "[Added Lines]",
          "57: import { introspectionQueryName } from '../utility/introspectionQueries';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:   dangerouslyAssumeSchemaIsValid?: boolean;",
          "144:   readOnly?: boolean;",
          "145:   docExplorerOpen?: boolean;",
          "146:   toolbar?: GraphiQLToolbarConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:   inputValueDeprecation?: boolean;",
          "149:   introspectionQueryName?: string;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:   _editorQueryID = 0;",
          "225:   _storage: StorageAPI;",
          "227:   codeMirrorSizer!: CodeMirrorSizer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:   _introspectionQuery: string;",
          "233:   _introspectionQueryName: string;",
          "234:   _introspectionQuerySansSubscriptions: string;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:       }",
          "328:     }",
          "331:     this.state = {",
          "332:       schema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:     this._introspectionQuery = getIntrospectionQuery({",
          "340:       schemaDescription: true,",
          "341:       inputValueDeprecation: props.inputValueDeprecation ?? undefined,",
          "342:     });",
          "344:     this._introspectionQueryName =",
          "345:       props.introspectionQueryName ?? introspectionQueryName;",
          "350:     this._introspectionQuerySansSubscriptions = this._introspectionQuery.replace(",
          "351:       'subscriptionType { name }',",
          "352:       '',",
          "353:     );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "895:     const fetch = fetcherReturnToPromise(",
          "896:       fetcher(",
          "897:         {",
          "900:         },",
          "901:         fetcherOpts,",
          "902:       ),",
          "",
          "[Removed Lines]",
          "898:           query: introspectionQuery,",
          "899:           operationName: introspectionQueryName,",
          "",
          "[Added Lines]",
          "923:           query: this._introspectionQuery,",
          "924:           operationName: this._introspectionQueryName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "920:         const fetch2 = fetcherReturnToPromise(",
          "921:           fetcher(",
          "922:             {",
          "925:             },",
          "926:             fetcherOpts,",
          "927:           ),",
          "",
          "[Removed Lines]",
          "923:               query: introspectionQuerySansSubscriptions,",
          "924:               operationName: introspectionQueryName,",
          "",
          "[Added Lines]",
          "948:               query: this._introspectionQuerySansSubscriptions,",
          "949:               operationName: this._introspectionQueryName,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/introspectionQueries.ts||packages/graphiql/src/utility/introspectionQueries.ts": [
          "File: packages/graphiql/src/utility/introspectionQueries.ts -> packages/graphiql/src/utility/introspectionQueries.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export const staticName = 'IntrospectionQuery';",
          "18: export const introspectionQueryName = staticName;",
          "",
          "[Removed Lines]",
          "8: import { getIntrospectionQuery } from 'graphql';",
          "10: export const introspectionQuery = getIntrospectionQuery({",
          "11:   schemaDescription: true,",
          "12:   inputValueDeprecation: true,",
          "13:   specifiedByUrl: true,",
          "14: });",
          "23: export const introspectionQuerySansSubscriptions = introspectionQuery.replace(",
          "24:   'subscriptionType { name }',",
          "25:   '',",
          "26: );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8be164b1e158d00752d6d3f30630a797d07d08c9",
      "candidate_info": {
        "commit_hash": "8be164b1e158d00752d6d3f30630a797d07d08c9",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/8be164b1e158d00752d6d3f30630a797d07d08c9",
        "files": [
          ".changeset/gold-zebras-agree.md",
          ".changeset/popular-pears-beg.md",
          "packages/graphiql-react/package.json",
          "packages/graphiql-react/src/history.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/storage.tsx",
          "packages/graphiql-toolkit/src/storage/base.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/HistoryQuery.tsx",
          "packages/graphiql/src/components/QueryHistory.tsx",
          "packages/graphiql/src/components/__tests__/QueryHistory.spec.tsx"
        ],
        "message": "add `StorageContext` and `HistoryContext` to `@graphiql/react` (#2413)\n\n* allow creating noop StorageAPI instances\n\n* create StorageContext and HistoryContext in @graphiql/react and move over the logic from graphiql\n\n* avoid re-setting state after initial render\n\n* fix this in method\n\n* fix toggling history\n\n* use up-to-date version for toolkit\n\n* demote version bump to patch",
        "before_after_code_files": [
          "packages/graphiql-react/src/history.tsx||packages/graphiql-react/src/history.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/storage.tsx||packages/graphiql-react/src/storage.tsx",
          "packages/graphiql-toolkit/src/storage/base.ts||packages/graphiql-toolkit/src/storage/base.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/HistoryQuery.tsx||packages/graphiql/src/components/HistoryQuery.tsx",
          "packages/graphiql/src/components/QueryHistory.tsx||packages/graphiql/src/components/QueryHistory.tsx",
          "packages/graphiql/src/components/__tests__/HistoryQuery.spec.tsx||packages/graphiql/src/components/__tests__/QueryHistory.spec.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/history.tsx||packages/graphiql-react/src/history.tsx": [
          "File: packages/graphiql-react/src/history.tsx -> packages/graphiql-react/src/history.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { HistoryStore, QueryStoreItem, StorageAPI } from '@graphiql/toolkit';",
          "2: import {",
          "3:   createContext,",
          "4:   ReactNode,",
          "5:   useCallback,",
          "6:   useContext,",
          "7:   useMemo,",
          "8:   useRef,",
          "9:   useState,",
          "10: } from 'react';",
          "12: import { StorageContext } from './storage';",
          "14: export type HistoryContextType = {",
          "15:   addToHistory(operation: {",
          "16:     query?: string;",
          "17:     variables?: string;",
          "18:     headers?: string;",
          "19:     operationName?: string;",
          "20:   }): void;",
          "21:   editLabel(args: {",
          "22:     query?: string;",
          "23:     variables?: string;",
          "24:     headers?: string;",
          "25:     operationName?: string;",
          "26:     label?: string;",
          "27:     favorite?: boolean;",
          "28:   }): void;",
          "29:   hide(): void;",
          "30:   isVisible: boolean;",
          "31:   items: readonly QueryStoreItem[];",
          "32:   show(): void;",
          "33:   toggle(): void;",
          "34:   toggleFavorite(args: {",
          "35:     query?: string;",
          "36:     variables?: string;",
          "37:     headers?: string;",
          "38:     operationName?: string;",
          "39:     label?: string;",
          "40:     favorite?: boolean;",
          "41:   }): void;",
          "42: };",
          "44: export const HistoryContext = createContext<HistoryContextType | null>(null);",
          "46: type HistoryContextProviderProps = {",
          "47:   children: ReactNode;",
          "48:   maxHistoryLength?: number;",
          "49:   onToggle?(isOpen: boolean): void;",
          "50: };",
          "52: export function HistoryContextProvider(props: HistoryContextProviderProps) {",
          "53:   const storage = useContext(StorageContext);",
          "54:   const historyStore = useRef(",
          "55:     new HistoryStore(",
          "57:       storage || new StorageAPI(null),",
          "58:       props.maxHistoryLength || DEFAULT_HISTORY_LENGTH,",
          "59:     ),",
          "60:   );",
          "61:   const [items, setItems] = useState(historyStore.current?.queries || []);",
          "62:   const [isVisible, setIsVisible] = useState(",
          "63:     storage?.get(STORAGE_KEY) === 'true' || false,",
          "64:   );",
          "66:   const addToHistory: HistoryContextType['addToHistory'] = useCallback(",
          "67:     ({ query, variables, headers, operationName }) => {",
          "68:       historyStore.current?.updateHistory(",
          "69:         query,",
          "70:         variables,",
          "71:         headers,",
          "72:         operationName,",
          "73:       );",
          "74:       setItems(historyStore.current.queries);",
          "75:     },",
          "76:     [],",
          "77:   );",
          "79:   const editLabel: HistoryContextType['editLabel'] = useCallback(",
          "80:     ({ query, variables, headers, operationName, label, favorite }) => {",
          "81:       historyStore.current.editLabel(",
          "82:         query,",
          "83:         variables,",
          "84:         headers,",
          "85:         operationName,",
          "86:         label,",
          "87:         favorite,",
          "88:       );",
          "89:       setItems(historyStore.current.queries);",
          "90:     },",
          "91:     [],",
          "92:   );",
          "94:   const { onToggle } = props;",
          "96:   const hide = useCallback(() => {",
          "97:     onToggle?.(false);",
          "98:     storage?.set(STORAGE_KEY, JSON.stringify(false));",
          "99:     setIsVisible(false);",
          "100:   }, [onToggle, storage]);",
          "102:   const show = useCallback(() => {",
          "103:     onToggle?.(true);",
          "104:     storage?.set(STORAGE_KEY, JSON.stringify(true));",
          "105:     setIsVisible(true);",
          "106:   }, [onToggle, storage]);",
          "108:   const toggle = useCallback(() => {",
          "109:     setIsVisible(current => {",
          "110:       const newValue = !current;",
          "111:       onToggle?.(newValue);",
          "112:       storage?.set(STORAGE_KEY, JSON.stringify(newValue));",
          "113:       return newValue;",
          "114:     });",
          "115:   }, [onToggle, storage]);",
          "117:   const toggleFavorite: HistoryContextType['toggleFavorite'] = useCallback(",
          "118:     ({ query, variables, headers, operationName, label, favorite }) => {",
          "119:       historyStore.current.toggleFavorite(",
          "120:         query,",
          "121:         variables,",
          "122:         headers,",
          "123:         operationName,",
          "124:         label,",
          "125:         favorite,",
          "126:       );",
          "127:       setItems(historyStore.current.queries);",
          "128:     },",
          "129:     [],",
          "130:   );",
          "132:   const value = useMemo<HistoryContextType>(",
          "133:     () => ({",
          "134:       addToHistory,",
          "135:       editLabel,",
          "136:       hide,",
          "137:       isVisible,",
          "138:       items,",
          "139:       show,",
          "140:       toggle,",
          "141:       toggleFavorite,",
          "142:     }),",
          "143:     [",
          "144:       addToHistory,",
          "145:       editLabel,",
          "146:       hide,",
          "147:       isVisible,",
          "148:       items,",
          "149:       show,",
          "150:       toggle,",
          "151:       toggleFavorite,",
          "152:     ],",
          "153:   );",
          "155:   return (",
          "156:     <HistoryContext.Provider value={value}>",
          "157:       {props.children}",
          "158:     </HistoryContext.Provider>",
          "159:   );",
          "160: }",
          "162: const DEFAULT_HISTORY_LENGTH = 20;",
          "163: const STORAGE_KEY = 'historyPaneOpen';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   ExplorerContextProvider,",
          "14:   useExplorerNavStack,",
          "15: } from './explorer';",
          "17: import type {",
          "18:   EditorContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import { HistoryContext, HistoryContextProvider } from './history';",
          "17: import { StorageContext, StorageContextProvider } from './storage';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   ExplorerNavStack,",
          "29:   ExplorerNavStackItem,",
          "30: } from './explorer';",
          "32: export {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import type { HistoryContextType } from './history';",
          "34: import type { StorageContextType } from './storage';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:   ExplorerContext,",
          "44:   ExplorerContextProvider,",
          "45:   useExplorerNavStack,",
          "46: };",
          "48: export type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   HistoryContext,",
          "52:   HistoryContextProvider,",
          "54:   StorageContext,",
          "55:   StorageContextProvider,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58:   ExplorerFieldDef,",
          "59:   ExplorerNavStack,",
          "60:   ExplorerNavStackItem,",
          "61: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   HistoryContextType,",
          "74:   StorageContextType,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/storage.tsx||packages/graphiql-react/src/storage.tsx": [
          "File: packages/graphiql-react/src/storage.tsx -> packages/graphiql-react/src/storage.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { Storage, StorageAPI } from '@graphiql/toolkit';",
          "2: import { createContext, ReactNode, useEffect, useRef, useState } from 'react';",
          "4: export type StorageContextType = StorageAPI;",
          "6: export const StorageContext = createContext<StorageContextType | null>(null);",
          "8: type StorageContextProviderProps = {",
          "9:   children: ReactNode;",
          "10:   storage?: Storage;",
          "11: };",
          "13: export function StorageContextProvider(props: StorageContextProviderProps) {",
          "14:   const isInitialRender = useRef(true);",
          "15:   const [storage, setStorage] = useState(new StorageAPI(props.storage));",
          "17:   useEffect(() => {",
          "18:     if (isInitialRender.current) {",
          "19:       isInitialRender.current = false;",
          "20:     } else {",
          "21:       setStorage(new StorageAPI(props.storage));",
          "22:     }",
          "23:   }, [props.storage]);",
          "25:   return (",
          "26:     <StorageContext.Provider value={storage}>",
          "27:       {props.children}",
          "28:     </StorageContext.Provider>",
          "29:   );",
          "30: }",
          "",
          "---------------"
        ],
        "packages/graphiql-toolkit/src/storage/base.ts||packages/graphiql-toolkit/src/storage/base.ts": [
          "File: packages/graphiql-toolkit/src/storage/base.ts -> packages/graphiql-toolkit/src/storage/base.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: export class StorageAPI {",
          "26:   storage: Storage | null;",
          "31:   }",
          "33:   get(name: string): string | null {",
          "",
          "[Removed Lines]",
          "28:   constructor(storage?: Storage) {",
          "29:     this.storage =",
          "30:       storage || (typeof window !== 'undefined' ? window.localStorage : null);",
          "",
          "[Added Lines]",
          "28:   constructor(storage?: Storage | null) {",
          "29:     if (storage) {",
          "30:       this.storage = storage;",
          "31:     } else if (storage === null) {",
          "33:       this.storage = null;",
          "34:     } else {",
          "36:       this.storage = typeof window !== 'undefined' ? window.localStorage : null;",
          "37:     }",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:   EditorContextProvider,",
          "4:   ExplorerContext,",
          "5:   ExplorerContextProvider,",
          "6:   useExplorerNavStack,",
          "7:   useHeaderEditor as _useHeaderEditor,",
          "8:   useQueryEditor as _useQueryEditor,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:   HistoryContext,",
          "7:   HistoryContextProvider,",
          "8:   ImagePreview,",
          "9:   onHasCompletion,",
          "10:   StorageContext,",
          "11:   StorageContextProvider,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   ExplorerFieldDef,",
          "16:   ExplorerNavStack,",
          "17:   ExplorerNavStackItem,",
          "18:   UseHeaderEditorArgs,",
          "19:   UseQueryEditorArgs,",
          "20: } from '@graphiql/react';",
          "21: import { useContext, useEffect, useRef, useState } from 'react';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:   HistoryContextType,",
          "25:   ResponseTooltipType,",
          "26:   StorageContextType,",
          "28:   UseResponseEditorArgs,",
          "30:   UseVariableEditorArgs,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25:   EditorContextProvider,",
          "26:   ExplorerContext,",
          "27:   ExplorerContextProvider,",
          "28:   useExplorerNavStack,",
          "29: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   HistoryContext,",
          "40:   HistoryContextProvider,",
          "41:   ImagePreview,",
          "42:   onHasCompletion,",
          "43:   StorageContext,",
          "44:   StorageContextProvider,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "34:   ExplorerFieldDef,",
          "35:   ExplorerNavStack,",
          "36:   ExplorerNavStackItem,",
          "37:   UseHeaderEditorArgs,",
          "38:   UseQueryEditorArgs,",
          "39: };",
          "41: function useMockedEditor(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   HistoryContextType,",
          "55:   ResponseTooltipType,",
          "56:   StorageContextType,",
          "58:   UseResponseEditorArgs,",
          "60:   UseVariableEditorArgs,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   EditorContextProvider,",
          "40:   ExplorerContext,",
          "41:   ExplorerContextProvider,",
          "42: } from '@graphiql/react';",
          "43: import type {",
          "44:   EditorContextType,",
          "45:   ExplorerContextType,",
          "46:   ExplorerFieldDef,",
          "47:   ResponseTooltipType,",
          "48: } from '@graphiql/react';",
          "50: import { ExecuteButton } from './ExecuteButton';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   HistoryContext,",
          "43:   HistoryContextProvider,",
          "44:   StorageContext,",
          "45:   StorageContextProvider,",
          "51:   HistoryContextType,",
          "53:   StorageContextType,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   fetcherReturnToPromise,",
          "71:   formatError,",
          "72:   formatResult,",
          "74:   isAsyncIterable,",
          "75:   isObservable,",
          "76:   isPromise,",
          "78: } from '@graphiql/toolkit';",
          "79: import type {",
          "80:   Fetcher,",
          "",
          "[Removed Lines]",
          "73:   HistoryStore,",
          "77:   StorageAPI,",
          "",
          "[Added Lines]",
          "82:   QueryStoreItem,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:   headerEditorActive: boolean;",
          "335:   headerEditorEnabled: boolean;",
          "336:   shouldPersistHeaders: boolean;",
          "338:   schemaErrors?: readonly GraphQLError[];",
          "339:   docExplorerWidth: number;",
          "340:   isWaitingForResponse: boolean;",
          "",
          "[Removed Lines]",
          "337:   historyPaneOpen: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "342:   variableToType?: VariableToType;",
          "343:   operations?: OperationDefinitionNode[];",
          "344:   documentAST?: DocumentNode;",
          "346:   tabs: TabsState;",
          "347: };",
          "",
          "[Removed Lines]",
          "345:   maxHistoryLength: number;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "371: export function GraphiQL(props: GraphiQLProps) {",
          "372:   return (",
          "390:   );",
          "391: }",
          "",
          "[Removed Lines]",
          "373:     <EditorContextProvider>",
          "374:       <ExplorerContextProvider>",
          "375:         <EditorContext.Consumer>",
          "376:           {editorContext => (",
          "377:             <ExplorerContext.Consumer>",
          "378:               {explorerContext => (",
          "379:                 <GraphiQLWithContext",
          "380:                   {...props}",
          "381:                   editorContext={editorContext}",
          "382:                   explorerContext={explorerContext}",
          "383:                 />",
          "384:               )}",
          "385:             </ExplorerContext.Consumer>",
          "386:           )}",
          "387:         </EditorContext.Consumer>",
          "388:       </ExplorerContextProvider>",
          "389:     </EditorContextProvider>",
          "",
          "[Added Lines]",
          "376:     <StorageContextProvider storage={props.storage}>",
          "377:       <StorageContext.Consumer>",
          "378:         {storageContext => (",
          "379:           <EditorContextProvider>",
          "380:             <HistoryContextProvider",
          "381:               maxHistoryLength={props.maxHistoryLength}",
          "382:               onToggle={props.onToggleHistory}>",
          "383:               <ExplorerContextProvider>",
          "384:                 <EditorContext.Consumer>",
          "385:                   {editorContext => (",
          "386:                     <HistoryContext.Consumer>",
          "387:                       {historyContext => (",
          "388:                         <ExplorerContext.Consumer>",
          "389:                           {explorerContext => (",
          "390:                             <GraphiQLWithContext",
          "391:                               {...props}",
          "392:                               editorContext={editorContext}",
          "393:                               explorerContext={explorerContext}",
          "394:                               historyContext={historyContext}",
          "395:                               storageContext={storageContext}",
          "396:                             />",
          "397:                           )}",
          "398:                         </ExplorerContext.Consumer>",
          "399:                       )}",
          "400:                     </HistoryContext.Consumer>",
          "401:                   )}",
          "402:                 </EditorContext.Consumer>",
          "403:               </ExplorerContextProvider>",
          "404:             </HistoryContextProvider>",
          "405:           </EditorContextProvider>",
          "406:         )}",
          "407:       </StorageContext.Consumer>",
          "408:     </StorageContextProvider>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "432:   editorContext: EditorContextType | null;",
          "433:   explorerContext: ExplorerContextType | null;",
          "434: };",
          "436: class GraphiQLWithContext extends React.Component<",
          "",
          "[Removed Lines]",
          "431: type GraphiQLWithContextProps = GraphiQLProps & {",
          "",
          "[Added Lines]",
          "450: type GraphiQLWithContextProps = Omit<",
          "451:   GraphiQLProps,",
          "452:   'maxHistoryLength' | 'onToggleHistory' | 'storage'",
          "453: > & {",
          "456:   historyContext: HistoryContextType | null;",
          "457:   storageContext: StorageContextType | null;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "439: > {",
          "441:   _editorQueryID = 0;",
          "443:   _introspectionQuery: string;",
          "444:   _introspectionQueryName: string;",
          "445:   _introspectionQuerySansSubscriptions: string;",
          "",
          "[Removed Lines]",
          "442:   _storage: StorageAPI;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "451:   graphiqlContainer: Maybe<HTMLDivElement>;",
          "454:   editorBarComponent: Maybe<HTMLDivElement>;",
          "456:   constructor(props: GraphiQLWithContextProps) {",
          "",
          "[Removed Lines]",
          "452:   _queryHistory: Maybe<QueryHistory>;",
          "453:   _historyStore: Maybe<HistoryStore>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "461:       throw new TypeError('GraphiQL requires a fetcher function.');",
          "462:     }",
          "472:     this.componentIsMounted = false;",
          "475:     const query =",
          "485:     const queryFacts = getOperationFacts(props.schema, query);",
          "487:     const variables =",
          "499:     const operationName =",
          "509:     let docExplorerOpen = props.docExplorerOpen || false;",
          "514:     }",
          "",
          "[Removed Lines]",
          "465:     this._storage = new StorageAPI(props.storage);",
          "467:     const maxHistoryLength = props.maxHistoryLength ?? 20;",
          "469:     this._historyStore = new HistoryStore(this._storage, maxHistoryLength);",
          "476:       props.query !== undefined",
          "477:         ? props.query",
          "478:         : this._storage.get('query')",
          "479:         ? (this._storage.get('query') as string)",
          "480:         : props.defaultQuery !== undefined",
          "481:         ? props.defaultQuery",
          "482:         : defaultQuery;",
          "488:       props.variables !== undefined",
          "489:         ? props.variables",
          "490:         : this._storage.get('variables');",
          "493:     const headers =",
          "494:       props.headers !== undefined",
          "495:         ? props.headers",
          "496:         : this._storage.get('headers');",
          "500:       props.operationName !== undefined",
          "501:         ? props.operationName",
          "502:         : getSelectedOperationName(",
          "503:             undefined,",
          "504:             this._storage.get('operationName') as string,",
          "505:             queryFacts && queryFacts.operations,",
          "506:           );",
          "512:     if (this._storage.get('docExplorerOpen')) {",
          "513:       docExplorerOpen = this._storage.get('docExplorerOpen') === 'true';",
          "",
          "[Added Lines]",
          "490:       props.query ??",
          "491:       this.props.storageContext?.get('query') ??",
          "492:       props.defaultQuery ??",
          "493:       defaultQuery;",
          "499:       props.variables ?? this.props.storageContext?.get('variables');",
          "502:     const headers = props.headers ?? this.props.storageContext?.get('headers');",
          "506:       props.operationName ??",
          "507:       getSelectedOperationName(",
          "508:         undefined,",
          "509:         this.props.storageContext?.get('operationName') ?? undefined,",
          "510:         queryFacts && queryFacts.operations,",
          "511:       );",
          "517:     const docExplorerOpenStorage = this.props.storageContext?.get(",
          "518:       'docExplorerOpen',",
          "519:     );",
          "520:     if (docExplorerOpenStorage) {",
          "521:       docExplorerOpen = docExplorerOpenStorage === 'true';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "576:     let rawTabState: string | null = null;",
          "578:     if (this.props.tabs) {",
          "580:     }",
          "582:     let tabsState: TabsState;",
          "",
          "[Removed Lines]",
          "579:       rawTabState = this._storage.get('tabState');",
          "",
          "[Added Lines]",
          "587:       rawTabState = this.props.storageContext?.get('tabState') ?? null;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "631:       response: activeTab?.response ?? response,",
          "632:       docExplorerOpen,",
          "633:       schemaErrors,",
          "635:       secondaryEditorOpen,",
          "636:       secondaryEditorHeight:",
          "638:       variableEditorActive:",
          "640:         props.headerEditorEnabled",
          "642:           : true,",
          "644:       headerEditorEnabled,",
          "645:       shouldPersistHeaders,",
          "647:       docExplorerWidth:",
          "649:         DEFAULT_DOC_EXPLORER_WIDTH,",
          "650:       isWaitingForResponse: false,",
          "651:       subscription: null,",
          "653:       ...queryFacts,",
          "654:     };",
          "655:     if (this.state.query) {",
          "",
          "[Removed Lines]",
          "634:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
          "637:         Number(this._storage.get('secondaryEditorHeight')) || 200,",
          "639:         this._storage.get('variableEditorActive') === 'true' ||",
          "641:           ? this._storage.get('headerEditorActive') !== 'true'",
          "643:       headerEditorActive: this._storage.get('headerEditorActive') === 'true',",
          "646:       historyPaneOpen: this._storage.get('historyPaneOpen') === 'true' || false,",
          "648:         Number(this._storage.get('docExplorerWidth')) ||",
          "652:       maxHistoryLength,",
          "",
          "[Added Lines]",
          "642:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "645:         Number(this.props.storageContext?.get('secondaryEditorHeight')) || 200,",
          "647:         this.props.storageContext?.get('variableEditorActive') === 'true' ||",
          "649:           ? this.props.storageContext?.get('headerEditorActive') !== 'true'",
          "651:       headerEditorActive:",
          "652:         this.props.storageContext?.get('headerEditorActive') === 'true',",
          "656:         Number(this.props.storageContext?.get('docExplorerWidth')) ||",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "733:     ) {",
          "734:       nextSchema = undefined;",
          "735:     }",
          "737:     this.setState(",
          "738:       {",
          "739:         schema: nextSchema,",
          "",
          "[Removed Lines]",
          "736:     this._storage.set('operationName', nextOperationName as string);",
          "",
          "[Added Lines]",
          "743:     if (nextOperationName !== undefined) {",
          "744:       this.props.storageContext?.set('operationName', nextOperationName);",
          "745:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "759:   private persistTabsState = () => {",
          "760:     if (this.props.tabs) {",
          "762:         'tabState',",
          "763:         JSON.stringify(this.state.tabs, (key, value) =>",
          "764:           key === 'response' ||",
          "",
          "[Removed Lines]",
          "761:       this._storage.set(",
          "",
          "[Added Lines]",
          "770:       this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "830:           label=\"Copy\"",
          "831:         />",
          "832:         <ToolbarButton",
          "835:           label=\"History\"",
          "836:         />",
          "837:         {this.props.toolbar?.additionalContent",
          "",
          "[Removed Lines]",
          "833:           onClick={this.handleToggleHistory}",
          "834:           title=\"Show History\"",
          "",
          "[Added Lines]",
          "842:           onClick={() => this.props.historyContext?.toggle()}",
          "843:           title={",
          "844:             this.props.historyContext?.isVisible",
          "845:               ? 'Hide History'",
          "846:               : 'Show History'",
          "847:           }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "857:       'docExplorerWrap' +",
          "858:       (this.state.docExplorerWidth < 200 ? ' doc-explorer-narrow' : '');",
          "866:     const secondaryEditorOpen = this.state.secondaryEditorOpen;",
          "867:     const secondaryEditorStyle = {",
          "868:       height: secondaryEditorOpen",
          "",
          "[Removed Lines]",
          "860:     const historyPaneStyle = {",
          "861:       display: this.state.historyPaneOpen ? 'block' : 'none',",
          "862:       width: '230px',",
          "863:       zIndex: 7,",
          "864:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "878:         }}",
          "879:         data-testid=\"graphiql-container\"",
          "880:         className=\"graphiql-container\">",
          "897:           </div>",
          "898:         )}",
          "899:         <div className=\"editorWrap\">",
          "",
          "[Removed Lines]",
          "881:         {this.state.historyPaneOpen && (",
          "882:           <div className=\"historyPaneWrap\" style={historyPaneStyle}>",
          "883:             <QueryHistory",
          "884:               ref={node => {",
          "885:                 this._queryHistory = node;",
          "886:               }}",
          "887:               onSelectQuery={this.handleSelectHistoryQuery}",
          "888:               storage={this._storage}",
          "889:               maxHistoryLength={this.state.maxHistoryLength}>",
          "890:               <button",
          "891:                 className=\"docExplorerHide\"",
          "892:                 onClick={this.handleToggleHistory}",
          "893:                 aria-label=\"Close History\">",
          "894:                 {'\\u2715'}",
          "895:               </button>",
          "896:             </QueryHistory>",
          "",
          "[Added Lines]",
          "888:         {this.props.historyContext?.isVisible && (",
          "889:           <div",
          "890:             className=\"historyPaneWrap\"",
          "891:             style={{ width: '230px', zIndex: 7 }}>",
          "892:             <QueryHistory onSelect={this.handleSelectHistoryQuery} />",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1417:         this.showDoc(reference.type);",
          "1418:       }",
          "1419:     });",
          "1421:       'docExplorerOpen',",
          "1422:       JSON.stringify(this.state.docExplorerOpen),",
          "1423:     );",
          "",
          "[Removed Lines]",
          "1420:     this._storage.set(",
          "",
          "[Added Lines]",
          "1416:     this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1449:         response: undefined,",
          "1450:         operationName,",
          "1451:       });",
          "1470:       }",
          "1473:       let fullResponse: FetcherResultPayload = { data: {} };",
          "",
          "[Removed Lines]",
          "1452:       this._storage.set('operationName', operationName as string);",
          "1454:       if (this._queryHistory) {",
          "1455:         this._queryHistory.onUpdateHistory(",
          "1456:           editedQuery,",
          "1457:           variables,",
          "1458:           headers,",
          "1459:           operationName,",
          "1460:         );",
          "1461:       } else {",
          "1462:         if (this._historyStore) {",
          "1463:           this._historyStore.updateHistory(",
          "1464:             editedQuery,",
          "1465:             variables,",
          "1466:             headers,",
          "1467:             operationName,",
          "1468:           );",
          "1469:         }",
          "",
          "[Added Lines]",
          "1448:       if (operationName !== undefined) {",
          "1449:         this.props.storageContext?.set('operationName', operationName);",
          "1452:       this.props.historyContext?.addToHistory({",
          "1453:         query: editedQuery,",
          "1454:         variables,",
          "1455:         headers,",
          "1456:         operationName,",
          "1457:       });",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1693:       }),",
          "1694:       this.persistTabsState,",
          "1695:     );",
          "1697:     if (this.props.onEditQuery) {",
          "1698:       return this.props.onEditQuery(value, queryFacts?.documentAST);",
          "1699:     }",
          "",
          "[Removed Lines]",
          "1696:     this._storage.set('query', value);",
          "",
          "[Added Lines]",
          "1683:     this.props.storageContext?.set('query', value);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1754:       }),",
          "1755:       this.persistTabsState,",
          "1756:     );",
          "1758:     if (this.props.onEditVariables) {",
          "1759:       this.props.onEditVariables(value);",
          "1760:     }",
          "",
          "[Removed Lines]",
          "1757:     debounce(500, () => this._storage.set('variables', value))();",
          "",
          "[Added Lines]",
          "1744:     debounce(500, () => this.props.storageContext?.set('variables', value))();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1769:       this.persistTabsState,",
          "1770:     );",
          "1771:     this.props.shouldPersistHeaders &&",
          "1773:     if (this.props.onEditHeaders) {",
          "1774:       this.props.onEditHeaders(value);",
          "1775:     }",
          "",
          "[Removed Lines]",
          "1772:       debounce(500, () => this._storage.set('headers', value))();",
          "",
          "[Added Lines]",
          "1759:       debounce(500, () => this.props.storageContext?.set('headers', value))();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1816:             this.showDoc(type);",
          "1817:           });",
          "1818:           debounce(500, () =>",
          "1820:               'docExplorerOpen',",
          "1821:               JSON.stringify(this.state.docExplorerOpen),",
          "1822:             ),",
          "",
          "[Removed Lines]",
          "1819:             this._storage.set(",
          "",
          "[Added Lines]",
          "1806:             this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1830:     if (typeof this.props.onToggleDocs === 'function') {",
          "1831:       this.props.onToggleDocs(!this.state.docExplorerOpen);",
          "1832:     }",
          "1834:       'docExplorerOpen',",
          "1835:       JSON.stringify(!this.state.docExplorerOpen),",
          "1836:     );",
          "1837:     this.setState({ docExplorerOpen: !this.state.docExplorerOpen });",
          "1838:   };",
          "1857:     if (query) {",
          "1858:       this.handleEditQuery(query);",
          "1859:     }",
          "",
          "[Removed Lines]",
          "1833:     this._storage.set(",
          "1840:   handleToggleHistory = () => {",
          "1841:     if (typeof this.props.onToggleHistory === 'function') {",
          "1842:       this.props.onToggleHistory(!this.state.historyPaneOpen);",
          "1843:     }",
          "1844:     this._storage.set(",
          "1845:       'historyPaneOpen',",
          "1846:       JSON.stringify(!this.state.historyPaneOpen),",
          "1847:     );",
          "1848:     this.setState({ historyPaneOpen: !this.state.historyPaneOpen });",
          "1849:   };",
          "1851:   handleSelectHistoryQuery = (",
          "1852:     query?: string,",
          "1853:     variables?: string,",
          "1854:     headers?: string,",
          "1855:     operationName?: string,",
          "1856:   ) => {",
          "",
          "[Added Lines]",
          "1820:     this.props.storageContext?.set(",
          "1827:   handleSelectHistoryQuery = ({",
          "1828:     query,",
          "1829:     variables,",
          "1830:     headers,",
          "1831:     operationName,",
          "1832:   }: QueryStoreItem) => {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1887:       const rightSize = editorBar.clientWidth - leftSize;",
          "1888:       this.setState({ editorFlex: leftSize / rightSize });",
          "1889:       debounce(500, () =>",
          "1891:       )();",
          "1892:     };",
          "",
          "[Removed Lines]",
          "1890:         this._storage.set('editorFlex', JSON.stringify(this.state.editorFlex)),",
          "",
          "[Added Lines]",
          "1866:         this.props.storageContext?.set(",
          "1867:           'editorFlex',",
          "1868:           JSON.stringify(this.state.editorFlex),",
          "1869:         ),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1905:   handleResetResize = () => {",
          "1906:     this.setState({ editorFlex: 1 });",
          "1908:   };",
          "1910:   private _didClickDragBar(event: React.MouseEvent) {",
          "",
          "[Removed Lines]",
          "1907:     this._storage.set('editorFlex', JSON.stringify(this.state.editorFlex));",
          "",
          "[Added Lines]",
          "1886:     this.props.storageContext?.set(",
          "1887:       'editorFlex',",
          "1888:       JSON.stringify(this.state.editorFlex),",
          "1889:     );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1946:         if (typeof this.props.onToggleDocs === 'function') {",
          "1947:           this.props.onToggleDocs(!this.state.docExplorerOpen);",
          "1948:         }",
          "1950:           'docExplorerOpen',",
          "1951:           JSON.stringify(this.state.docExplorerOpen),",
          "1952:         );",
          "",
          "[Removed Lines]",
          "1949:         this._storage.set(",
          "",
          "[Added Lines]",
          "1931:         this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1957:           docExplorerWidth: Math.min(docsSize, 650),",
          "1958:         });",
          "1959:         debounce(500, () =>",
          "1961:             'docExplorerWidth',",
          "1962:             JSON.stringify(this.state.docExplorerWidth),",
          "1963:           ),",
          "1964:         )();",
          "1965:       }",
          "1967:         'docExplorerOpen',",
          "1968:         JSON.stringify(this.state.docExplorerOpen),",
          "1969:       );",
          "",
          "[Removed Lines]",
          "1960:           this._storage.set(",
          "1966:       this._storage.set(",
          "",
          "[Added Lines]",
          "1942:           this.props.storageContext?.set(",
          "1948:       this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1973:       if (!this.state.docExplorerOpen) {",
          "1974:         this.setState({ docExplorerWidth: hadWidth });",
          "1975:         debounce(500, () =>",
          "1977:             'docExplorerWidth',",
          "1978:             JSON.stringify(this.state.docExplorerWidth),",
          "1979:           ),",
          "",
          "[Removed Lines]",
          "1976:           this._storage.set(",
          "",
          "[Added Lines]",
          "1958:           this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1995:       docExplorerWidth: DEFAULT_DOC_EXPLORER_WIDTH,",
          "1996:     });",
          "1997:     debounce(500, () =>",
          "1999:         'docExplorerWidth',",
          "2000:         JSON.stringify(this.state.docExplorerWidth),",
          "2001:       ),",
          "",
          "[Removed Lines]",
          "1998:       this._storage.set(",
          "",
          "[Added Lines]",
          "1980:       this.props.storageContext?.set(",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2062:         });",
          "2063:       }",
          "2064:       debounce(500, () =>",
          "2066:           'secondaryEditorHeight',",
          "2067:           JSON.stringify(this.state.secondaryEditorHeight),",
          "2068:         ),",
          "",
          "[Removed Lines]",
          "2065:         this._storage.set(",
          "",
          "[Added Lines]",
          "2047:         this.props.storageContext?.set(",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/HistoryQuery.tsx||packages/graphiql/src/components/HistoryQuery.tsx": [
          "File: packages/graphiql/src/components/HistoryQuery.tsx -> packages/graphiql/src/components/HistoryQuery.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/QueryHistory.tsx||packages/graphiql/src/components/QueryHistory.tsx": [
          "File: packages/graphiql/src/components/QueryHistory.tsx -> packages/graphiql/src/components/QueryHistory.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: type QueryHistoryProps = {",
          "26: };",
          "39:     );",
          "42:   }",
          "88:     );",
          "102:         />",
          "115: }",
          "",
          "[Removed Lines]",
          "8: import { HistoryStore, QueryStoreItem, StorageAPI } from '@graphiql/toolkit';",
          "9: import React, { ReactNode } from 'react';",
          "11: import HistoryQuery, {",
          "12:   HandleEditLabelFn,",
          "13:   HandleSelectQueryFn,",
          "14:   HandleToggleFavoriteFn,",
          "15: } from './HistoryQuery';",
          "18:   onSelectQuery: HandleSelectQueryFn;",
          "19:   storage: StorageAPI;",
          "20:   maxHistoryLength: number;",
          "21:   children?: ReactNode;",
          "22: };",
          "24: type QueryHistoryState = {",
          "25:   queries: Array<QueryStoreItem>;",
          "28: export class QueryHistory extends React.Component<",
          "29:   QueryHistoryProps,",
          "30:   QueryHistoryState",
          "31: > {",
          "32:   historyStore: HistoryStore;",
          "34:   constructor(props: QueryHistoryProps) {",
          "35:     super(props);",
          "36:     this.historyStore = new HistoryStore(",
          "37:       this.props.storage,",
          "38:       this.props.maxHistoryLength,",
          "40:     const queries = this.historyStore.queries;",
          "41:     this.state = { queries };",
          "44:   onUpdateHistory = (",
          "45:     query?: string,",
          "46:     variables?: string,",
          "47:     headers?: string,",
          "48:     operationName?: string,",
          "49:   ) => {",
          "50:     this.historyStore.updateHistory(query, variables, headers, operationName);",
          "51:     this.setState({ queries: this.historyStore.queries });",
          "52:   };",
          "54:   onHandleEditLabel: HandleEditLabelFn = (",
          "55:     query,",
          "56:     variables,",
          "57:     headers,",
          "58:     operationName,",
          "59:     label,",
          "60:     favorite,",
          "61:   ) => {",
          "62:     this.historyStore.editLabel(",
          "63:       query,",
          "64:       variables,",
          "65:       headers,",
          "66:       operationName,",
          "67:       label,",
          "68:       favorite,",
          "69:     );",
          "70:     this.setState({ queries: this.historyStore.queries });",
          "71:   };",
          "73:   onToggleFavorite: HandleToggleFavoriteFn = (",
          "74:     query,",
          "75:     variables,",
          "76:     headers,",
          "77:     operationName,",
          "78:     label,",
          "79:     favorite,",
          "80:   ) => {",
          "81:     this.historyStore.toggleFavorite(",
          "82:       query,",
          "83:       variables,",
          "84:       headers,",
          "85:       operationName,",
          "86:       label,",
          "87:       favorite,",
          "89:     this.setState({ queries: this.historyStore.queries });",
          "90:   };",
          "92:   render() {",
          "93:     const queries = this.state.queries.slice().reverse();",
          "94:     const queryNodes = queries.map((query, i) => {",
          "95:       return (",
          "96:         <HistoryQuery",
          "97:           handleEditLabel={this.onHandleEditLabel}",
          "98:           handleToggleFavorite={this.onToggleFavorite}",
          "99:           key={`${i}:${query.label || query.query}`}",
          "100:           onSelect={this.props.onSelectQuery}",
          "101:           {...query}",
          "103:       );",
          "104:     });",
          "105:     return (",
          "106:       <section aria-label=\"History\">",
          "107:         <div className=\"history-title-bar\">",
          "108:           <div className=\"history-title\">History</div>",
          "109:           <div className=\"doc-explorer-rhs\">{this.props.children}</div>",
          "110:         </div>",
          "111:         <ul className=\"history-contents\">{queryNodes}</ul>",
          "112:       </section>",
          "113:     );",
          "114:   }",
          "",
          "[Added Lines]",
          "8: import { HistoryContext } from '@graphiql/react';",
          "9: import { QueryStoreItem } from '@graphiql/toolkit';",
          "10: import React, { useContext, useEffect, useRef, useState } from 'react';",
          "13:   onSelect(item: QueryStoreItem): void;",
          "16: export function QueryHistory(props: QueryHistoryProps) {",
          "17:   const historyContext = useContext(HistoryContext);",
          "18:   if (!historyContext) {",
          "19:     throw new Error(",
          "20:       'Tried to render the `QueryHistory` component without the necessary context. Make sure that the `HistoryContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "24:   return (",
          "25:     <section aria-label=\"History\">",
          "26:       <div className=\"history-title-bar\">",
          "27:         <div className=\"history-title\">History</div>",
          "28:         <div className=\"doc-explorer-rhs\">",
          "29:           <button",
          "30:             className=\"docExplorerHide\"",
          "31:             onClick={() => historyContext.hide()}",
          "32:             aria-label=\"Close History\">",
          "33:             {'\\u2715'}",
          "34:           </button>",
          "35:         </div>",
          "36:       </div>",
          "37:       <ul className=\"history-contents\">",
          "38:         {historyContext.items",
          "39:           .slice()",
          "40:           .reverse()",
          "41:           .map((item, i) => {",
          "42:             return (",
          "43:               <QueryHistoryItem",
          "44:                 key={`${i}:${item.label || item.query}`}",
          "45:                 onSelect={props.onSelect}",
          "46:                 item={item}",
          "47:               />",
          "48:             );",
          "49:           })}",
          "50:       </ul>",
          "51:     </section>",
          "52:   );",
          "53: }",
          "55: type QueryHistoryItemProps = {",
          "56:   onSelect(item: QueryStoreItem): void;",
          "57:   item: QueryStoreItem;",
          "58: };",
          "60: export function QueryHistoryItem(props: QueryHistoryItemProps) {",
          "61:   const historyContext = useContext(HistoryContext);",
          "62:   if (!historyContext) {",
          "63:     throw new Error(",
          "64:       'Tried to render the `QueryHistoryItem` component without the necessary context. Make sure that the `HistoryContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "66:   }",
          "68:   const editField = useRef<HTMLInputElement>(null);",
          "69:   const [isEditable, setIsEditable] = useState(false);",
          "71:   useEffect(() => {",
          "72:     if (isEditable && editField.current) {",
          "73:       editField.current.focus();",
          "74:     }",
          "75:   }, [isEditable]);",
          "77:   const displayName =",
          "78:     props.item.label ||",
          "79:     props.item.operationName ||",
          "80:     props.item.query",
          "81:       ?.split('\\n')",
          "82:       .filter(line => line.indexOf('#') !== 0)",
          "83:       .join('');",
          "84:   const starIcon = props.item.favorite ? '\\u2605' : '\\u2606';",
          "85:   return (",
          "86:     <li className={isEditable ? 'editable' : undefined}>",
          "87:       {isEditable ? (",
          "88:         <input",
          "89:           type=\"text\"",
          "90:           defaultValue={props.item.label}",
          "91:           ref={editField}",
          "92:           onBlur={e => {",
          "93:             e.stopPropagation();",
          "94:             setIsEditable(false);",
          "95:             historyContext.editLabel({ ...props.item, label: e.target.value });",
          "96:           }}",
          "97:           onKeyDown={e => {",
          "98:             if (e.keyCode === 13) {",
          "99:               e.stopPropagation();",
          "100:               setIsEditable(false);",
          "101:               historyContext.editLabel({",
          "102:                 ...props.item,",
          "103:                 label: e.currentTarget.value,",
          "104:               });",
          "105:             }",
          "106:           }}",
          "107:           placeholder=\"Type a label\"",
          "109:       ) : (",
          "110:         <button",
          "111:           className=\"history-label\"",
          "112:           onClick={() => props.onSelect(props.item)}>",
          "113:           {displayName}",
          "114:         </button>",
          "115:       )}",
          "116:       <button",
          "117:         onClick={e => {",
          "118:           e.stopPropagation();",
          "119:           setIsEditable(true);",
          "120:         }}",
          "121:         aria-label=\"Edit label\">",
          "122:         {'\\u270e'}",
          "123:       </button>",
          "124:       <button",
          "125:         className={props.item.favorite ? 'favorited' : undefined}",
          "126:         onClick={e => {",
          "127:           e.stopPropagation();",
          "128:           historyContext.toggleFavorite(props.item);",
          "129:         }}",
          "130:         aria-label={props.item.favorite ? 'Remove favorite' : 'Add favorite'}>",
          "131:         {starIcon}",
          "132:       </button>",
          "133:     </li>",
          "134:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/HistoryQuery.spec.tsx||packages/graphiql/src/components/__tests__/QueryHistory.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/HistoryQuery.spec.tsx -> packages/graphiql/src/components/__tests__/QueryHistory.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { render, fireEvent } from '@testing-library/react';",
          "11: import {",
          "12:   mockOperationName1,",
          "13:   mockQuery1,",
          "14:   mockVariables1,",
          "15:   mockHeaders1,",
          "16: } from './fixtures';",
          "28: };",
          "30: function getMockProps(",
          "33:   return {",
          "34:     ...baseMockProps,",
          "35:     ...customProps,",
          "36:   };",
          "37: }",
          "40:   it('renders operationName if label is not provided', () => {",
          "42:     const props = getMockProps(otherMockProps);",
          "44:     expect(container.querySelector('button.history-label')!.textContent).toBe(",
          "45:       mockOperationName1,",
          "46:     );",
          "47:   });",
          "49:   it('renders a string version of the query if label or operation name are not provided', () => {",
          "51:     expect(container.querySelector('button.history-label')!.textContent).toBe(",
          "52:       mockQuery1",
          "53:         .split('\\n')",
          "",
          "[Removed Lines]",
          "7: import React from 'react';",
          "10: import HistoryQuery, { HistoryQueryProps } from '../HistoryQuery';",
          "18: const noOp = () => {};",
          "20: const baseMockProps = {",
          "21:   favorite: false,",
          "22:   handleEditLabel: noOp,",
          "23:   handleToggleFavorite: noOp,",
          "24:   onSelect: noOp,",
          "25:   query: mockQuery1,",
          "26:   variables: mockVariables1,",
          "27:   headers: mockHeaders1,",
          "31:   customProps?: Partial<HistoryQueryProps>,",
          "32: ): HistoryQueryProps {",
          "39: describe('HistoryQuery', () => {",
          "41:     const otherMockProps = { operationName: mockOperationName1 };",
          "43:     const { container } = render(<HistoryQuery {...props} />);",
          "50:     const { container } = render(<HistoryQuery {...getMockProps()} />);",
          "",
          "[Added Lines]",
          "7: import React, { ComponentProps } from 'react';",
          "10: import { QueryHistoryItem } from '../QueryHistory';",
          "17: import { HistoryContextProvider } from '@graphiql/react';",
          "19: type QueryHistoryItemProps = ComponentProps<typeof QueryHistoryItem>;",
          "21: function QueryHistoryItemWithContext(props: QueryHistoryItemProps) {",
          "22:   return (",
          "23:     <HistoryContextProvider>",
          "24:       <QueryHistoryItem {...props} />",
          "25:     </HistoryContextProvider>",
          "26:   );",
          "27: }",
          "29: const baseMockProps: QueryHistoryItemProps = {",
          "30:   item: {",
          "31:     query: mockQuery1,",
          "32:     variables: mockVariables1,",
          "33:     headers: mockHeaders1,",
          "34:     favorite: false,",
          "35:   },",
          "36:   onSelect: () => {},",
          "40:   customProps?: Partial<QueryHistoryItemProps>,",
          "41: ): QueryHistoryItemProps {",
          "45:     item: { ...baseMockProps.item, ...customProps?.item },",
          "49: describe('QueryHistoryItem', () => {",
          "51:     const otherMockProps = { item: { operationName: mockOperationName1 } };",
          "53:     const { container } = render(<QueryHistoryItemWithContext {...props} />);",
          "60:     const { container } = render(",
          "61:       <QueryHistoryItemWithContext {...getMockProps()} />,",
          "62:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   it('calls onSelect with the correct arguments when history label button is clicked', () => {",
          "60:     const onSelectSpy = jest.spyOn(baseMockProps, 'onSelect');",
          "64:     const { container } = render(",
          "66:     );",
          "67:     fireEvent.click(container.querySelector('button.history-label')!);",
          "75:   });",
          "77:   it('renders label input if the edit label button is clicked', () => {",
          "79:     fireEvent.click(container.querySelector('[aria-label=\"Edit label\"]')!);",
          "80:     expect(container.querySelectorAll('li.editable').length).toBe(1);",
          "81:     expect(container.querySelectorAll('input').length).toBe(1);",
          "",
          "[Removed Lines]",
          "61:     const otherMockProps = {",
          "62:       operationName: mockOperationName1,",
          "63:     };",
          "65:       <HistoryQuery {...getMockProps(otherMockProps)} />,",
          "68:     expect(onSelectSpy).toHaveBeenCalledWith(",
          "69:       mockQuery1,",
          "70:       mockVariables1,",
          "71:       mockHeaders1,",
          "72:       mockOperationName1,",
          "73:       undefined,",
          "74:     );",
          "78:     const { container } = render(<HistoryQuery {...getMockProps()} />);",
          "",
          "[Added Lines]",
          "73:     const otherMockProps = { item: { operationName: mockOperationName1 } };",
          "74:     const mockProps = getMockProps(otherMockProps);",
          "76:       <QueryHistoryItemWithContext {...mockProps} />,",
          "79:     expect(onSelectSpy).toHaveBeenCalledWith(mockProps.item);",
          "83:     const { container } = render(",
          "84:       <QueryHistoryItemWithContext {...getMockProps()} />,",
          "85:     );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60a744b1d73d1021afb7abeea1573f26178102b5",
      "candidate_info": {
        "commit_hash": "60a744b1d73d1021afb7abeea1573f26178102b5",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/60a744b1d73d1021afb7abeea1573f26178102b5",
        "files": [
          ".changeset/rude-singers-tap.md",
          ".changeset/wise-maps-divide.md",
          "packages/graphiql-toolkit/src/async-helpers/index.ts",
          "packages/graphiql-toolkit/src/create-fetcher/types.ts",
          "packages/graphiql-toolkit/src/format/index.ts",
          "packages/graphiql-toolkit/src/index.ts",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "move more reusable logic into toolkit package (#2401)\n\n* deprecate unused property\n\n* move async helper functions to toolkit\n\n* move format functions to toolkit\n\n* add changeset\n\n* more elaborate comment",
        "before_after_code_files": [
          "packages/graphiql-toolkit/src/async-helpers/index.ts||packages/graphiql-toolkit/src/async-helpers/index.ts",
          "packages/graphiql-toolkit/src/create-fetcher/types.ts||packages/graphiql-toolkit/src/create-fetcher/types.ts",
          "packages/graphiql-toolkit/src/format/index.ts||packages/graphiql-toolkit/src/format/index.ts",
          "packages/graphiql-toolkit/src/index.ts||packages/graphiql-toolkit/src/index.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-toolkit/src/async-helpers/index.ts||packages/graphiql-toolkit/src/async-helpers/index.ts": [
          "File: packages/graphiql-toolkit/src/async-helpers/index.ts -> packages/graphiql-toolkit/src/async-helpers/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   FetcherResult,",
          "3:   FetcherReturnType,",
          "4:   Observable,",
          "5: } from '../create-fetcher';",
          "8: export function isPromise<T>(value: Promise<T> | any): value is Promise<T> {",
          "9:   return typeof value === 'object' && typeof value.then === 'function';",
          "10: }",
          "13: function observableToPromise<T>(observable: Observable<T>): Promise<T> {",
          "14:   return new Promise((resolve, reject) => {",
          "15:     const subscription = observable.subscribe({",
          "16:       next: v => {",
          "17:         resolve(v);",
          "18:         subscription.unsubscribe();",
          "19:       },",
          "20:       error: reject,",
          "21:       complete: () => {",
          "22:         reject(new Error('no value resolved'));",
          "23:       },",
          "24:     });",
          "25:   });",
          "26: }",
          "29: export function isObservable<T>(value: any): value is Observable<T> {",
          "30:   return (",
          "31:     typeof value === 'object' &&",
          "32:     'subscribe' in value &&",
          "33:     typeof value.subscribe === 'function'",
          "34:   );",
          "35: }",
          "37: export function isAsyncIterable(",
          "38:   input: unknown,",
          "39: ): input is AsyncIterable<unknown> {",
          "40:   return (",
          "41:     typeof input === 'object' &&",
          "42:     input !== null &&",
          "45:     ((input as any)[Symbol.toStringTag] === 'AsyncGenerator' ||",
          "46:       Symbol.asyncIterator in input)",
          "47:   );",
          "48: }",
          "50: function asyncIterableToPromise<T>(",
          "51:   input: AsyncIterable<T> | AsyncIterableIterator<T>,",
          "52: ): Promise<T> {",
          "53:   return new Promise((resolve, reject) => {",
          "57:     const iteratorReturn = ('return' in input",
          "58:       ? input",
          "59:       : input[Symbol.asyncIterator]()",
          "60:     ).return?.bind(input);",
          "61:     const iteratorNext = ('next' in input",
          "62:       ? input",
          "63:       : input[Symbol.asyncIterator]()",
          "64:     ).next.bind(input);",
          "66:     iteratorNext()",
          "67:       .then(result => {",
          "68:         resolve(result.value);",
          "70:         iteratorReturn?.();",
          "71:       })",
          "72:       .catch(err => {",
          "73:         reject(err);",
          "74:       });",
          "75:   });",
          "76: }",
          "78: export function fetcherReturnToPromise(",
          "79:   fetcherResult: FetcherReturnType,",
          "80: ): Promise<FetcherResult> {",
          "81:   return Promise.resolve(fetcherResult).then(result => {",
          "82:     if (isAsyncIterable(result)) {",
          "83:       return asyncIterableToPromise(result);",
          "84:     } else if (isObservable(result)) {",
          "85:       return observableToPromise(result);",
          "86:     }",
          "87:     return result;",
          "88:   });",
          "89: }",
          "",
          "---------------"
        ],
        "packages/graphiql-toolkit/src/create-fetcher/types.ts||packages/graphiql-toolkit/src/create-fetcher/types.ts": [
          "File: packages/graphiql-toolkit/src/create-fetcher/types.ts -> packages/graphiql-toolkit/src/create-fetcher/types.ts"
        ],
        "packages/graphiql-toolkit/src/format/index.ts||packages/graphiql-toolkit/src/format/index.ts": [
          "File: packages/graphiql-toolkit/src/format/index.ts -> packages/graphiql-toolkit/src/format/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { GraphQLError, GraphQLFormattedError } from 'graphql';",
          "3: function stringify(obj: unknown): string {",
          "4:   return JSON.stringify(obj, null, 2);",
          "5: }",
          "7: const formatSingleError = (error: Error): Error => ({",
          "8:   ...error,",
          "10:   message: error.message,",
          "11:   stack: error.stack,",
          "12: });",
          "14: type InputError = Error | GraphQLError | string;",
          "16: function handleSingleError(",
          "17:   error: InputError,",
          "18: ): GraphQLFormattedError | Error | string {",
          "19:   if (error instanceof GraphQLError) {",
          "20:     return error.toString();",
          "21:   }",
          "22:   if (error instanceof Error) {",
          "23:     return formatSingleError(error);",
          "24:   }",
          "25:   return error;",
          "26: }",
          "28: type GenericError =",
          "29:   | Error",
          "30:   | readonly Error[]",
          "31:   | string",
          "32:   | readonly string[]",
          "33:   | GraphQLError",
          "34:   | readonly GraphQLError[];",
          "36: export function formatError(error: GenericError): string {",
          "37:   if (Array.isArray(error)) {",
          "38:     return stringify({",
          "39:       errors: error.map((e: InputError) => handleSingleError(e)),",
          "40:     });",
          "41:   }",
          "43:   return stringify({ errors: handleSingleError(error) });",
          "44: }",
          "46: export function formatResult(result: any): string {",
          "47:   return stringify(result);",
          "48: }",
          "",
          "---------------"
        ],
        "packages/graphiql-toolkit/src/index.ts||packages/graphiql-toolkit/src/index.ts": [
          "File: packages/graphiql-toolkit/src/index.ts -> packages/graphiql-toolkit/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export * from './create-fetcher';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export * from './async-helpers';",
          "3: export * from './format';",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   FragmentDefinitionNode,",
          "26:   DocumentNode,",
          "27:   GraphQLError,",
          "29:   IntrospectionQuery,",
          "30:   getIntrospectionQuery,",
          "31: } from 'graphql';",
          "",
          "[Removed Lines]",
          "28:   GraphQLFormattedError,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import { introspectionQueryName } from '../utility/introspectionQueries';",
          "59: import setValue from 'set-value';",
          "61: import type {",
          "62:   Fetcher,",
          "63:   FetcherResult,",
          "65:   FetcherOpts,",
          "66:   SyncFetcherResult,",
          "68:   Unsubscribable,",
          "69:   FetcherResultPayload,",
          "70: } from '@graphiql/toolkit';",
          "",
          "[Removed Lines]",
          "64:   FetcherReturnType,",
          "67:   Observable,",
          "",
          "[Added Lines]",
          "60: import {",
          "61:   fetcherReturnToPromise,",
          "62:   formatError,",
          "63:   formatResult,",
          "64:   isPromise,",
          "65:   isObservable,",
          "66:   isAsyncIterable,",
          "67: } from '@graphiql/toolkit';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:   additionalContent?: React.ReactNode;",
          "106: };",
          "",
          "[Removed Lines]",
          "108: export type GenericError =",
          "109:   | Error",
          "110:   | string",
          "111:   | readonly Error[]",
          "112:   | readonly string[]",
          "113:   | GraphQLError",
          "114:   | readonly GraphQLError[];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:   tabs: TabsState;",
          "342: };",
          "367: type TabState = {",
          "368:   id: string;",
          "369:   hash: string;",
          "",
          "[Removed Lines]",
          "344: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
          "346: const formatSingleError = (error: Error): Error => ({",
          "347:   ...error,",
          "349:   message: error.message,",
          "350:   stack: error.stack,",
          "351: });",
          "353: type InputError = Error | GraphQLError | string;",
          "355: const handleSingleError = (",
          "356:   error: InputError,",
          "357: ): GraphQLFormattedError | Error | string => {",
          "358:   if (error instanceof GraphQLError) {",
          "359:     return error.toString();",
          "360:   }",
          "361:   if (error instanceof Error) {",
          "362:     return formatSingleError(error);",
          "363:   }",
          "364:   return error;",
          "365: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "393:   static formatResult(result: any) {",
          "395:   }",
          "408:   _editorQueryID = 0;",
          "",
          "[Removed Lines]",
          "394:     return JSON.stringify(result, null, 2);",
          "397:   static formatError = (error: GenericError): string => {",
          "398:     if (Array.isArray(error)) {",
          "399:       return stringify({",
          "400:         errors: error.map((e: InputError) => handleSingleError(e)),",
          "401:       });",
          "402:     }",
          "404:     return stringify({ errors: handleSingleError(error) });",
          "405:   };",
          "",
          "[Added Lines]",
          "368:     console.warn(",
          "369:       'The function `GraphiQL.formatResult` is deprecated and will be removed in the next major version. Please switch to using the `formatResult` function provided by the `@graphiql/toolkit` package.',",
          "370:     );",
          "371:     return formatResult(result);",
          "374:   static formatError(error: any) {",
          "375:     console.warn(",
          "376:       'The function `GraphiQL.formatError` is deprecated and will be removed in the next major version. Please switch to using the `formatError` function provided by the `@graphiql/toolkit` package.',",
          "377:     );",
          "378:     return formatError(error);",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "508:       if (validationErrors && validationErrors.length > 0) {",
          "512:         schema = undefined;",
          "513:         schemaErrors = validationErrors;",
          "514:       }",
          "",
          "[Removed Lines]",
          "511:         response = GraphiQL.formatError(validationErrors);",
          "",
          "[Added Lines]",
          "485:         response = formatError(validationErrors);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1319:         } else {",
          "1321:           const responseString =",
          "1323:           this.handleSchemaErrors([responseString]);",
          "1324:         }",
          "1325:       })",
          "",
          "[Removed Lines]",
          "1322:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
          "",
          "[Added Lines]",
          "1296:             typeof result === 'string' ? result : formatResult(result);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1332:     schemaErrors: readonly GraphQLError[] | readonly string[],",
          "1333:   ) {",
          "1334:     this.safeSetState({",
          "1336:       schema: undefined,",
          "1337:       schemaErrors,",
          "1338:     });",
          "",
          "[Removed Lines]",
          "1335:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
          "",
          "[Added Lines]",
          "1309:       response: schemaErrors ? formatError(schemaErrors) : undefined,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1425:             error: (error: Error) => {",
          "1426:               this.safeSetState({",
          "1427:                 isWaitingForResponse: false,",
          "1429:                 subscription: null,",
          "1430:               });",
          "1431:             },",
          "",
          "[Removed Lines]",
          "1428:                 response: error ? GraphiQL.formatError(error) : undefined,",
          "",
          "[Added Lines]",
          "1402:                 response: error ? formatError(error) : undefined,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1451:             } catch (error) {",
          "1452:               this.safeSetState({",
          "1453:                 isWaitingForResponse: false,",
          "1457:                 subscription: null,",
          "1458:               });",
          "1459:             }",
          "",
          "[Removed Lines]",
          "1454:                 response: error",
          "1455:                   ? GraphiQL.formatError(error as Error)",
          "1456:                   : undefined,",
          "",
          "[Added Lines]",
          "1428:                 response: error ? formatError(error as Error) : undefined,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1470:       .catch(error => {",
          "1471:         this.safeSetState({",
          "1472:           isWaitingForResponse: false,",
          "1474:         });",
          "1475:         return null;",
          "1476:       });",
          "",
          "[Removed Lines]",
          "1473:           response: error ? GraphiQL.formatError(error) : undefined,",
          "",
          "[Added Lines]",
          "1445:           response: error ? formatError(error) : undefined,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1597:               this.setState({",
          "1598:                 isWaitingForResponse: false,",
          "1600:               });",
          "1601:             } else {",
          "1603:               this.setState(",
          "1604:                 state => ({",
          "1605:                   ...state,",
          "",
          "[Removed Lines]",
          "1599:                 response: GraphiQL.formatResult(fullResponse),",
          "1602:               const response = GraphiQL.formatResult(result);",
          "",
          "[Added Lines]",
          "1571:                 response: formatResult(fullResponse),",
          "1574:               const response = formatResult(result);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2220: `;",
          "2305: function isChildComponentType<T extends ComponentType>(",
          "2306:   child: any,",
          "",
          "[Removed Lines]",
          "2223: function isPromise<T>(value: Promise<T> | any): value is Promise<T> {",
          "2224:   return typeof value === 'object' && typeof value.then === 'function';",
          "2225: }",
          "2228: function observableToPromise<T>(observable: Observable<T>): Promise<T> {",
          "2229:   return new Promise((resolve, reject) => {",
          "2230:     const subscription = observable.subscribe({",
          "2231:       next: v => {",
          "2232:         resolve(v);",
          "2233:         subscription.unsubscribe();",
          "2234:       },",
          "2235:       error: reject,",
          "2236:       complete: () => {",
          "2237:         reject(new Error('no value resolved'));",
          "2238:       },",
          "2239:     });",
          "2240:   });",
          "2241: }",
          "2244: function isObservable<T>(value: any): value is Observable<T> {",
          "2245:   return (",
          "2246:     typeof value === 'object' &&",
          "2247:     'subscribe' in value &&",
          "2248:     typeof value.subscribe === 'function'",
          "2249:   );",
          "2250: }",
          "2252: function isAsyncIterable(input: unknown): input is AsyncIterable<unknown> {",
          "2253:   return (",
          "2254:     typeof input === 'object' &&",
          "2255:     input !== null &&",
          "2258:     ((input as any)[Symbol.toStringTag] === 'AsyncGenerator' ||",
          "2259:       Symbol.asyncIterator in input)",
          "2260:   );",
          "2261: }",
          "2263: function asyncIterableToPromise<T>(",
          "2264:   input: AsyncIterable<T> | AsyncIterableIterator<T>,",
          "2265: ): Promise<T> {",
          "2266:   return new Promise((resolve, reject) => {",
          "2270:     const iteratorReturn = ('return' in input",
          "2271:       ? input",
          "2272:       : input[Symbol.asyncIterator]()",
          "2273:     ).return?.bind(input);",
          "2274:     const iteratorNext = ('next' in input",
          "2275:       ? input",
          "2276:       : input[Symbol.asyncIterator]()",
          "2277:     ).next.bind(input);",
          "2279:     iteratorNext()",
          "2280:       .then(result => {",
          "2281:         resolve(result.value);",
          "2283:         iteratorReturn?.();",
          "2284:       })",
          "2285:       .catch(err => {",
          "2286:         reject(err);",
          "2287:       });",
          "2288:   });",
          "2289: }",
          "2291: function fetcherReturnToPromise(",
          "2292:   fetcherResult: FetcherReturnType,",
          "2293: ): Promise<FetcherResult> {",
          "2294:   return Promise.resolve(fetcherResult).then(fetcherResult => {",
          "2295:     if (isAsyncIterable(fetcherResult)) {",
          "2296:       return asyncIterableToPromise(fetcherResult);",
          "2297:     } else if (isObservable(fetcherResult)) {",
          "2298:       return observableToPromise(fetcherResult);",
          "2299:     }",
          "2300:     return fetcherResult;",
          "2301:   });",
          "2302: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5852ba47c720a2577817aed512bef9a262254f2c",
      "candidate_info": {
        "commit_hash": "5852ba47c720a2577817aed512bef9a262254f2c",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/5852ba47c720a2577817aed512bef9a262254f2c",
        "files": [
          ".changeset/odd-cougars-unite.md",
          "packages/graphql-language-service-server/package.json",
          "yarn.lock"
        ],
        "message": "Update babel parser in the graphql language server (#2176)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:   resolved \"https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.15.7.tgz#220df993bfe904a4a6b02ab4f3385a5ebf6e2389\"",
          "759:   integrity sha512-K4JvCtQqad9OY2+yTU8w+E82ywk/fe+ELNlt1G8z3bVGlZfn/hOcQQsUhGhW/N+tb3fxK800wLtKOE/aM0m72w==",
          "761: \"@babel/helper-validator-option@^7.12.17\":",
          "762:   version \"7.12.17\"",
          "763:   resolved \"https://registry.yarnpkg.com/@babel/helper-validator-option/-/helper-validator-option-7.12.17.tgz#d1fbf012e1a79b7eebbfdc6d270baaf8d9eb9831\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761: \"@babel/helper-validator-identifier@^7.16.7\":",
          "762:   version \"7.16.7\"",
          "763:   resolved \"https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz#e8c602438c4a8195751243da9031d1607d247cad\"",
          "764:   integrity sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:   resolved \"https://registry.yarnpkg.com/@babel/parser/-/parser-7.16.4.tgz#d5f92f57cf2c74ffe9b37981c0e72fee7311372e\"",
          "870:   integrity sha512-6V0qdPUaiVHH3RtZeLIsc+6pDhbYzHR8ogA8w+f+Wc77DuXto19g2QUwveINoS34Uw+W8/hQDGJCx+i4n7xcng==",
          "872: \"@babel/parser@^7.4.3\":",
          "873:   version \"7.11.5\"",
          "874:   resolved \"https://registry.yarnpkg.com/@babel/parser/-/parser-7.11.5.tgz#c7ff6303df71080ec7a4f5b8c003c58f1cf51037\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877: \"@babel/parser@^7.17.3\":",
          "878:   version \"7.17.3\"",
          "879:   resolved \"https://registry.yarnpkg.com/@babel/parser/-/parser-7.17.3.tgz#b07702b982990bf6fdc1da5049a23fece4c5c3d0\"",
          "880:   integrity sha512-7yJPvPV+ESz2IUTPbOL+YkIGyCqOyNIzdguKQuJGnH7bg1WTIifuM21YqokFt/THWh1AkCRn9IgoykTRCBVpzA==",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2826:     \"@babel/helper-validator-identifier\" \"^7.15.7\"",
          "2827:     to-fast-properties \"^2.0.0\"",
          "2829: \"@babel/types@^7.4.0\":",
          "2830:   version \"7.11.5\"",
          "2831:   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.11.5.tgz#d9de577d01252d77c6800cee039ee64faf75662d\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2839: \"@babel/types@^7.17.0\":",
          "2840:   version \"7.17.0\"",
          "2841:   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.17.0.tgz#a826e368bccb6b3d84acd76acad5c0d87342390b\"",
          "2842:   integrity sha512-TmKSNO4D5rzhL5bjWFcVHHLETzfQ/AmbKpKPOSjlP0WoHZ6L911fgoOKY4Alp/emzG4cHJdyN49zpgkbXFEHHw==",
          "2843:   dependencies:",
          "2844:     \"@babel/helper-validator-identifier\" \"^7.16.7\"",
          "2845:     to-fast-properties \"^2.0.0\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "11247:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "11249: \"graphiql@file:packages/graphiql\":",
          "11251:   dependencies:",
          "11252:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11253:     codemirror \"^5.58.2\"",
          "",
          "[Removed Lines]",
          "11250:   version \"1.5.16\"",
          "",
          "[Added Lines]",
          "11268:   version \"1.5.19\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5c1c72399f55e1f9c0435506f9e9e9bf2edd601",
      "candidate_info": {
        "commit_hash": "d5c1c72399f55e1f9c0435506f9e9e9bf2edd601",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/d5c1c72399f55e1f9c0435506f9e9e9bf2edd601",
        "files": [
          ".changeset/smooth-countries-shout.md",
          "packages/graphiql-react/src/ui/index.ts",
          "packages/graphiql-react/src/ui/spinner.css",
          "packages/graphiql-react/src/ui/spinner.tsx",
          "packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css"
        ],
        "message": "extract loading spinner to `@graphiql/react` (#2581)",
        "before_after_code_files": [
          "packages/graphiql-react/src/ui/index.ts||packages/graphiql-react/src/ui/index.ts",
          "packages/graphiql-react/src/ui/spinner.css||packages/graphiql-react/src/ui/spinner.css",
          "packages/graphiql-react/src/ui/spinner.tsx||packages/graphiql-react/src/ui/spinner.tsx",
          "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css||packages/graphiql/src/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/ui/index.ts||packages/graphiql-react/src/ui/index.ts": [
          "File: packages/graphiql-react/src/ui/index.ts -> packages/graphiql-react/src/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export * from './button';",
          "2: export * from './dropdown';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: export * from './spinner';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/spinner.css||packages/graphiql-react/src/ui/spinner.css": [
          "File: packages/graphiql-react/src/ui/spinner.css -> packages/graphiql-react/src/ui/spinner.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: .graphiql-spinner {",
          "2:   height: 56px;",
          "3:   margin: auto;",
          "4:   margin-top: var(--px-16);",
          "5:   width: 56px;",
          "7:   &::after {",
          "8:     animation: rotation 0.8s linear 0s infinite;",
          "9:     border: 4px solid transparent;",
          "10:     border-radius: 100%;",
          "11:     border-top: 4px solid var(--color-neutral-40);",
          "12:     content: '';",
          "13:     display: inline-block;",
          "14:     height: 46px;",
          "15:     vertical-align: middle;",
          "16:     width: 46px;",
          "17:   }",
          "18: }",
          "20: @keyframes rotation {",
          "21:   from {",
          "22:     transform: rotate(0deg);",
          "23:   }",
          "24:   to {",
          "25:     transform: rotate(360deg);",
          "26:   }",
          "27: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/ui/spinner.tsx||packages/graphiql-react/src/ui/spinner.tsx": [
          "File: packages/graphiql-react/src/ui/spinner.tsx -> packages/graphiql-react/src/ui/spinner.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import './spinner.css';",
          "3: export function Spinner() {",
          "4:   return <div className=\"graphiql-spinner\" />;",
          "5: }",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.tsx||packages/graphiql/__mocks__/@graphiql/react.tsx": [
          "File: packages/graphiql/__mocks__/@graphiql/react.tsx -> packages/graphiql/__mocks__/@graphiql/react.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   SchemaContext,",
          "41:   SchemaContextProvider,",
          "42:   SettingsIcon,",
          "43:   StarFilledIcon,",
          "44:   StarIcon,",
          "45:   StopIcon,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   Spinner,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLSchema, isType } from 'graphql';",
          "12: import FieldDoc from './DocExplorer/FieldDoc';",
          "13: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "",
          "[Removed Lines]",
          "8: import React, { ReactNode } from 'react';",
          "10: import { useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "",
          "[Added Lines]",
          "8: import { Spinner, useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "10: import React, { ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     );",
          "61:   } else if (isFetching) {",
          "64:   } else if (!schema) {",
          "",
          "[Removed Lines]",
          "63:     content = <div className=\"graphiql-spinner\" />;",
          "",
          "[Added Lines]",
          "63:     content = <Spinner />;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   ResponseEditor,",
          "44:   SchemaContextProvider,",
          "45:   SettingsIcon,",
          "46:   StorageContextProvider,",
          "47:   ToolbarButton,",
          "48:   UnStyledButton,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   Spinner,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:                 <div ref={this.props.editorResize.secondRef}>",
          "1006:                   <div className=\"graphiql-response\">",
          "1007:                     {this.props.executionContext.isFetching ? (",
          "1009:                     ) : null}",
          "1010:                     <ResponseEditor",
          "1011:                       editorTheme={this.props.editorTheme}",
          "",
          "[Removed Lines]",
          "1008:                       <div className=\"graphiql-spinner\" />",
          "",
          "[Added Lines]",
          "1009:                       <Spinner />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/style.css||packages/graphiql/src/style.css": [
          "File: packages/graphiql/src/style.css -> packages/graphiql/src/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   padding: var(--px-16);",
          "146: }",
          "178: .graphiql-container .graphiql-horizontal-drag-bar {",
          "179:   width: var(--px-12);",
          "",
          "[Removed Lines]",
          "149: .graphiql-container .graphiql-spinner {",
          "150:   height: 56px;",
          "151:   left: 50%;",
          "152:   position: relative;",
          "153:   top: 50%;",
          "154:   transform: translate(-50%, -50%);",
          "155:   width: 56px;",
          "156: }",
          "157: .graphiql-container .graphiql-spinner::after {",
          "158:   animation: rotation 0.6s infinite linear;",
          "159:   border: 4px solid transparent;",
          "160:   border-radius: 100%;",
          "161:   border-top: 4px solid var(--color-neutral-40);",
          "162:   content: '';",
          "163:   display: inline-block;",
          "164:   height: 46px;",
          "165:   vertical-align: middle;",
          "166:   width: 46px;",
          "167: }",
          "168: @keyframes rotation {",
          "169:   from {",
          "170:     transform: rotate(0deg);",
          "171:   }",
          "172:   to {",
          "173:     transform: rotate(359deg);",
          "174:   }",
          "175: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}