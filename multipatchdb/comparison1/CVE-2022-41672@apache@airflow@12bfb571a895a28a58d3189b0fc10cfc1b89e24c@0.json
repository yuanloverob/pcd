{
  "cve_id": "CVE-2022-41672",
  "cve_desc": "In Apache Airflow, prior to version 2.4.1, deactivating a user wouldn't prevent an already authenticated user from being able to continue using the UI or API.",
  "repo": "apache/airflow",
  "patch_hash": "12bfb571a895a28a58d3189b0fc10cfc1b89e24c",
  "patch_info": {
    "commit_hash": "12bfb571a895a28a58d3189b0fc10cfc1b89e24c",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/12bfb571a895a28a58d3189b0fc10cfc1b89e24c",
    "files": [
      "airflow/www/app.py",
      "airflow/www/extensions/init_security.py",
      "tests/test_utils/decorators.py",
      "tests/www/views/conftest.py",
      "tests/www/views/test_session.py",
      "tests/www/views/test_views_base.py"
    ],
    "message": "Check user is active (#26635)\n\n(cherry picked from commit 59707cdf7eacb698ca375b5220af30a39ca1018c)",
    "before_after_code_files": [
      "airflow/www/app.py||airflow/www/app.py",
      "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py",
      "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
      "tests/www/views/conftest.py||tests/www/views/conftest.py",
      "tests/www/views/test_session.py||tests/www/views/test_session.py",
      "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py"
    ]
  },
  "patch_diff": {
    "airflow/www/app.py||airflow/www/app.py": [
      "File: airflow/www/app.py -> airflow/www/app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: from airflow.www.extensions.init_jinja_globals import init_jinja_globals",
      "40: from airflow.www.extensions.init_manifest_files import configure_manifest_files",
      "41: from airflow.www.extensions.init_robots import init_robots",
      "43: from airflow.www.extensions.init_session import init_airflow_session_interface",
      "44: from airflow.www.extensions.init_views import (",
      "45:     init_api_connexion,",
      "",
      "[Removed Lines]",
      "42: from airflow.www.extensions.init_security import init_api_experimental_auth, init_xframe_protection",
      "",
      "[Added Lines]",
      "42: from airflow.www.extensions.init_security import (",
      "43:     init_api_experimental_auth,",
      "44:     init_check_user_active,",
      "45:     init_xframe_protection,",
      "46: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:         init_jinja_globals(flask_app)",
      "153:         init_xframe_protection(flask_app)",
      "154:         init_airflow_session_interface(flask_app)",
      "155:     return flask_app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:         init_check_user_active(flask_app)",
      "",
      "---------------"
    ],
    "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py": [
      "File: airflow/www/extensions/init_security.py -> airflow/www/extensions/init_security.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import logging",
      "20: from importlib import import_module",
      "22: from airflow.configuration import conf",
      "23: from airflow.exceptions import AirflowConfigException, AirflowException",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: from flask import g, redirect, url_for",
      "23: from flask_login import logout_user",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:         except ImportError as err:",
      "61:             log.critical(\"Cannot import %s for API authentication due to: %s\", backend, err)",
      "62:             raise AirflowException(err)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68: def init_check_user_active(app):",
      "69:     @app.before_request",
      "70:     def check_user_active():",
      "71:         if g.user is not None and not g.user.is_anonymous and not g.user.is_active:",
      "72:             logout_user()",
      "73:             return redirect(url_for(app.appbuilder.sm.auth_view.endpoint + \".login\"))",
      "",
      "---------------"
    ],
    "tests/test_utils/decorators.py||tests/test_utils/decorators.py": [
      "File: tests/test_utils/decorators.py -> tests/test_utils/decorators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:             \"init_xframe_protection\",",
      "46:             \"init_airflow_session_interface\",",
      "47:             \"init_appbuilder\",",
      "48:         ]",
      "50:         @functools.wraps(f)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:             \"init_check_user_active\",",
      "",
      "---------------"
    ],
    "tests/www/views/conftest.py||tests/www/views/conftest.py": [
      "File: tests/www/views/conftest.py -> tests/www/views/conftest.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:             \"init_jinja_globals\",",
      "59:             \"init_plugins\",",
      "60:             \"init_airflow_session_interface\",",
      "61:         ]",
      "62:     )",
      "63:     def factory():",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:             \"init_check_user_active\",",
      "",
      "---------------"
    ],
    "tests/www/views/test_session.py||tests/www/views/test_session.py": [
      "File: tests/www/views/test_session.py -> tests/www/views/test_session.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:     new_session_cookie = get_session_cookie(user_client)",
      "89:     assert new_session_cookie is not None",
      "90:     assert old_session_cookie.value != new_session_cookie.value",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93: def test_check_active_user(app, user_client):",
      "94:     user = app.appbuilder.sm.find_user(username=\"test_user\")",
      "95:     user.active = False",
      "96:     resp = user_client.get(\"/home\")",
      "97:     assert resp.status_code == 302",
      "98:     assert \"/login\" in resp.headers.get(\"Location\")",
      "100:     # And they were logged out",
      "101:     user.active = True",
      "102:     resp = user_client.get(\"/home\")",
      "103:     assert resp.status_code == 302",
      "104:     assert \"/login\" in resp.headers.get(\"Location\")",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py": [
      "File: tests/www/views/test_views_base.py -> tests/www/views/test_views_base.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
      "34:     with assert_queries_count(16):",
      "36:     check_content_in_response('DAGs', resp)",
      "",
      "[Removed Lines]",
      "33: def test_index(admin_client):",
      "35:         resp = admin_client.get('/', follow_redirects=True)",
      "",
      "[Added Lines]",
      "33: def test_index_redirect(admin_client):",
      "34:     resp = admin_client.get('/')",
      "35:     assert resp.status_code == 302",
      "36:     assert '/home' in resp.headers.get(\"Location\")",
      "38:     resp = admin_client.get('/', follow_redirects=True)",
      "39:     check_content_in_response('DAGs', resp)",
      "42: def test_homepage_query_count(admin_client):",
      "44:         resp = admin_client.get('/home')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59707cdf7eacb698ca375b5220af30a39ca1018c",
      "candidate_info": {
        "commit_hash": "59707cdf7eacb698ca375b5220af30a39ca1018c",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/59707cdf7eacb698ca375b5220af30a39ca1018c",
        "files": [
          "airflow/www/app.py",
          "airflow/www/extensions/init_security.py",
          "tests/test_utils/decorators.py",
          "tests/www/views/conftest.py",
          "tests/www/views/test_session.py",
          "tests/www/views/test_views_base.py"
        ],
        "message": "Check user is active (#26635)",
        "before_after_code_files": [
          "airflow/www/app.py||airflow/www/app.py",
          "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py",
          "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
          "tests/www/views/conftest.py||tests/www/views/conftest.py",
          "tests/www/views/test_session.py||tests/www/views/test_session.py",
          "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/app.py||airflow/www/app.py",
            "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py",
            "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
            "tests/www/views/conftest.py||tests/www/views/conftest.py",
            "tests/www/views/test_session.py||tests/www/views/test_session.py",
            "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py"
          ],
          "candidate": [
            "airflow/www/app.py||airflow/www/app.py",
            "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py",
            "tests/test_utils/decorators.py||tests/test_utils/decorators.py",
            "tests/www/views/conftest.py||tests/www/views/conftest.py",
            "tests/www/views/test_session.py||tests/www/views/test_session.py",
            "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/app.py||airflow/www/app.py": [
          "File: airflow/www/app.py -> airflow/www/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: from airflow.www.extensions.init_jinja_globals import init_jinja_globals",
          "40: from airflow.www.extensions.init_manifest_files import configure_manifest_files",
          "41: from airflow.www.extensions.init_robots import init_robots",
          "43: from airflow.www.extensions.init_session import init_airflow_session_interface",
          "44: from airflow.www.extensions.init_views import (",
          "45:     init_api_connexion,",
          "",
          "[Removed Lines]",
          "42: from airflow.www.extensions.init_security import init_api_experimental_auth, init_xframe_protection",
          "",
          "[Added Lines]",
          "42: from airflow.www.extensions.init_security import (",
          "43:     init_api_experimental_auth,",
          "44:     init_check_user_active,",
          "45:     init_xframe_protection,",
          "46: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:         init_jinja_globals(flask_app)",
          "153:         init_xframe_protection(flask_app)",
          "154:         init_airflow_session_interface(flask_app)",
          "155:     return flask_app",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         init_check_user_active(flask_app)",
          "",
          "---------------"
        ],
        "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py": [
          "File: airflow/www/extensions/init_security.py -> airflow/www/extensions/init_security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import logging",
          "20: from importlib import import_module",
          "22: from airflow.configuration import conf",
          "23: from airflow.exceptions import AirflowConfigException, AirflowException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: from flask import g, redirect, url_for",
          "23: from flask_login import logout_user",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         except ImportError as err:",
          "61:             log.critical(\"Cannot import %s for API authentication due to: %s\", backend, err)",
          "62:             raise AirflowException(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: def init_check_user_active(app):",
          "69:     @app.before_request",
          "70:     def check_user_active():",
          "71:         if g.user is not None and not g.user.is_anonymous and not g.user.is_active:",
          "72:             logout_user()",
          "73:             return redirect(url_for(app.appbuilder.sm.auth_view.endpoint + \".login\"))",
          "",
          "---------------"
        ],
        "tests/test_utils/decorators.py||tests/test_utils/decorators.py": [
          "File: tests/test_utils/decorators.py -> tests/test_utils/decorators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             \"init_xframe_protection\",",
          "46:             \"init_airflow_session_interface\",",
          "47:             \"init_appbuilder\",",
          "48:         ]",
          "50:         @functools.wraps(f)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:             \"init_check_user_active\",",
          "",
          "---------------"
        ],
        "tests/www/views/conftest.py||tests/www/views/conftest.py": [
          "File: tests/www/views/conftest.py -> tests/www/views/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:             \"init_jinja_globals\",",
          "59:             \"init_plugins\",",
          "60:             \"init_airflow_session_interface\",",
          "61:         ]",
          "62:     )",
          "63:     def factory():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:             \"init_check_user_active\",",
          "",
          "---------------"
        ],
        "tests/www/views/test_session.py||tests/www/views/test_session.py": [
          "File: tests/www/views/test_session.py -> tests/www/views/test_session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     new_session_cookie = get_session_cookie(user_client)",
          "89:     assert new_session_cookie is not None",
          "90:     assert old_session_cookie.value != new_session_cookie.value",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: def test_check_active_user(app, user_client):",
          "94:     user = app.appbuilder.sm.find_user(username=\"test_user\")",
          "95:     user.active = False",
          "96:     resp = user_client.get(\"/home\")",
          "97:     assert resp.status_code == 302",
          "98:     assert \"/login\" in resp.headers.get(\"Location\")",
          "100:     # And they were logged out",
          "101:     user.active = True",
          "102:     resp = user_client.get(\"/home\")",
          "103:     assert resp.status_code == 302",
          "104:     assert \"/login\" in resp.headers.get(\"Location\")",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_base.py||tests/www/views/test_views_base.py": [
          "File: tests/www/views/test_views_base.py -> tests/www/views/test_views_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
          "34:     with assert_queries_count(16):",
          "36:     check_content_in_response('DAGs', resp)",
          "",
          "[Removed Lines]",
          "33: def test_index(admin_client):",
          "35:         resp = admin_client.get('/', follow_redirects=True)",
          "",
          "[Added Lines]",
          "33: def test_index_redirect(admin_client):",
          "34:     resp = admin_client.get('/')",
          "35:     assert resp.status_code == 302",
          "36:     assert '/home' in resp.headers.get(\"Location\")",
          "38:     resp = admin_client.get('/', follow_redirects=True)",
          "39:     check_content_in_response('DAGs', resp)",
          "42: def test_homepage_query_count(admin_client):",
          "44:         resp = admin_client.get('/home')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c199fa8f6291df70fae7db081619a847ddabe0b9",
      "candidate_info": {
        "commit_hash": "c199fa8f6291df70fae7db081619a847ddabe0b9",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/c199fa8f6291df70fae7db081619a847ddabe0b9",
        "files": [
          "airflow/decorators/python.py",
          "airflow/example_dags/example_python_operator.py",
          "airflow/example_dags/sql/sample.sql",
          "docs/apache-airflow/howto/operator/python.rst",
          "tests/api_connexion/endpoints/test_task_instance_endpoint.py",
          "tests/serialization/test_dag_serialization.py"
        ],
        "message": "template rendering issue fix (#26390)\n\n(cherry picked from commit 4bf0cb98724a2cf04aab6359881a87aeb9cec0ce)",
        "before_after_code_files": [
          "airflow/decorators/python.py||airflow/decorators/python.py",
          "airflow/example_dags/example_python_operator.py||airflow/example_dags/example_python_operator.py",
          "airflow/example_dags/sql/sample.sql||airflow/example_dags/sql/sample.sql",
          "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py",
          "tests/serialization/test_dag_serialization.py||tests/serialization/test_dag_serialization.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/decorators/python.py||airflow/decorators/python.py": [
          "File: airflow/decorators/python.py -> airflow/decorators/python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         multiple XCom values. Dict will unroll to XCom values with its keys as XCom keys. Defaults to False.",
          "36:     \"\"\"",
          "41:     # since we won't mutate the arguments, we should just do the shallow copy",
          "42:     # there are some cases we can't deepcopy the objects (e.g protobuf).",
          "",
          "[Removed Lines]",
          "38:     template_fields: Sequence[str] = ('op_args', 'op_kwargs')",
          "39:     template_fields_renderers = {\"op_args\": \"py\", \"op_kwargs\": \"py\"}",
          "",
          "[Added Lines]",
          "38:     template_fields: Sequence[str] = ('templates_dict', 'op_args', 'op_kwargs')",
          "39:     template_fields_renderers = {\"templates_dict\": \"json\", \"op_args\": \"py\", \"op_kwargs\": \"py\"}",
          "",
          "---------------"
        ],
        "airflow/example_dags/example_python_operator.py||airflow/example_dags/example_python_operator.py": [
          "File: airflow/example_dags/example_python_operator.py -> airflow/example_dags/example_python_operator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     run_this = print_context()",
          "59:     # [END howto_operator_python]",
          "61:     # [START howto_operator_python_kwargs]",
          "62:     # Generate 5 sleeping tasks, sleeping from 0.0 to 0.4 seconds respectively",
          "63:     for i in range(5):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     # [START howto_operator_python_render_sql]",
          "63:     @task(task_id=\"log_sql_query\", templates_dict={\"query\": \"sql/sample.sql\"}, templates_exts=[\".sql\"])",
          "64:     def log_sql(**kwargs):",
          "65:         logging.info(\"Python task decorator query: %s\", str(kwargs[\"templates_dict\"][\"query\"]))",
          "67:     log_the_sql = log_sql()",
          "68:     # [END howto_operator_python_render_sql]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:         sleeping_task = my_sleeping_function(random_base=float(i) / 10)",
          "73:     # [END howto_operator_python_kwargs]",
          "75:     if not shutil.which(\"virtualenv\"):",
          "",
          "[Removed Lines]",
          "72:         run_this >> sleeping_task",
          "",
          "[Added Lines]",
          "81:         run_this >> log_the_sql >> sleeping_task",
          "",
          "---------------"
        ],
        "airflow/example_dags/sql/sample.sql||airflow/example_dags/sql/sample.sql": [
          "File: airflow/example_dags/sql/sample.sql -> airflow/example_dags/sql/sample.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:  Licensed to the Apache Software Foundation (ASF) under one",
          "3:  or more contributor license agreements.  See the NOTICE file",
          "4:  distributed with this work for additional information",
          "5:  regarding copyright ownership.  The ASF licenses this file",
          "6:  to you under the Apache License, Version 2.0 (the",
          "7:  \"License\"); you may not use this file except in compliance",
          "8:  with the License.  You may obtain a copy of the License at",
          "10:    http://www.apache.org/licenses/LICENSE-2.0",
          "12:  Unless required by applicable law or agreed to in writing,",
          "13:  software distributed under the License is distributed on an",
          "14:  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15:  KIND, either express or implied.  See the License for the",
          "16:  specific language governing permissions and limitations",
          "17:  under the License.",
          "20: CREATE TABLE Orders (",
          "21:     order_id INT PRIMARY KEY,",
          "22:     name TEXT,",
          "23:     description TEXT",
          "24: )",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_task_instance_endpoint.py||tests/api_connexion/endpoints/test_task_instance_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_task_instance_endpoint.py -> tests/api_connexion/endpoints/test_task_instance_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:             \"pid\": 100,",
          "197:             \"pool\": \"default_pool\",",
          "198:             \"pool_slots\": 1,",
          "200:             \"queue\": \"default_queue\",",
          "201:             \"queued_when\": None,",
          "202:             \"sla_miss\": None,",
          "",
          "[Removed Lines]",
          "199:             \"priority_weight\": 8,",
          "",
          "[Added Lines]",
          "199:             \"priority_weight\": 9,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:             \"pid\": 100,",
          "230:             \"pool\": \"default_pool\",",
          "231:             \"pool_slots\": 1,",
          "233:             \"queue\": \"default_queue\",",
          "234:             \"queued_when\": None,",
          "235:             \"sla_miss\": None,",
          "",
          "[Removed Lines]",
          "232:             \"priority_weight\": 8,",
          "",
          "[Added Lines]",
          "232:             \"priority_weight\": 9,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:             \"pid\": 100,",
          "275:             \"pool\": \"default_pool\",",
          "276:             \"pool_slots\": 1,",
          "278:             \"queue\": \"default_queue\",",
          "279:             \"queued_when\": None,",
          "280:             \"sla_miss\": {",
          "",
          "[Removed Lines]",
          "277:             \"priority_weight\": 8,",
          "",
          "[Added Lines]",
          "277:             \"priority_weight\": 9,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:             \"try_number\": 0,",
          "293:             \"unixname\": getuser(),",
          "294:             \"dag_run_id\": \"TEST_DAG_RUN_ID\",",
          "296:         }",
          "298:     def test_should_respond_200_mapped_task_instance_with_rtif(self, session):",
          "",
          "[Removed Lines]",
          "295:             \"rendered_fields\": {'op_args': [], 'op_kwargs': {}},",
          "",
          "[Added Lines]",
          "295:             \"rendered_fields\": {'op_args': [], 'op_kwargs': {}, 'templates_dict': None},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:                 \"pid\": 100,",
          "335:                 \"pool\": \"default_pool\",",
          "336:                 \"pool_slots\": 1,",
          "338:                 \"queue\": \"default_queue\",",
          "339:                 \"queued_when\": None,",
          "340:                 'sla_miss': None,",
          "",
          "[Removed Lines]",
          "337:                 \"priority_weight\": 8,",
          "",
          "[Added Lines]",
          "337:                 \"priority_weight\": 9,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:                 \"try_number\": 0,",
          "345:                 \"unixname\": getuser(),",
          "346:                 \"dag_run_id\": \"TEST_DAG_RUN_ID\",",
          "348:             }",
          "350:     def test_should_raises_401_unauthenticated(self):",
          "",
          "[Removed Lines]",
          "347:                 \"rendered_fields\": {'op_args': [], 'op_kwargs': {}},",
          "",
          "[Added Lines]",
          "347:                 \"rendered_fields\": {'op_args': [], 'op_kwargs': {}, 'templates_dict': None},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "753:             (",
          "754:                 \"with dag filter\",",
          "755:                 {\"dag_ids\": [\"example_python_operator\", \"example_skip_dag\"]},",
          "758:             ),",
          "759:         ],",
          "760:     )",
          "",
          "[Removed Lines]",
          "756:                 16,",
          "757:                 16,",
          "",
          "[Added Lines]",
          "756:                 17,",
          "757:                 17,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1075:                 \"execution_date\": DEFAULT_DATETIME_1 + dt.timedelta(days=4),",
          "1076:                 \"state\": State.RUNNING,",
          "1077:             },",
          "1078:         ]",
          "1080:         self.create_task_instances(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:             {",
          "1079:                 \"execution_date\": DEFAULT_DATETIME_1 + dt.timedelta(days=5),",
          "1080:                 \"state\": State.RUNNING,",
          "1081:             },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1103:                 'dag_id': 'example_python_operator',",
          "1104:                 'dag_run_id': 'TEST_DAG_RUN_ID_1',",
          "1105:                 'execution_date': '2020-01-02T00:00:00+00:00',",
          "1107:             },",
          "1108:             {",
          "1109:                 'dag_id': 'example_python_operator',",
          "1110:                 'dag_run_id': 'TEST_DAG_RUN_ID_2',",
          "1111:                 'execution_date': '2020-01-03T00:00:00+00:00',",
          "1113:             },",
          "1114:             {",
          "1115:                 'dag_id': 'example_python_operator',",
          "1116:                 'dag_run_id': 'TEST_DAG_RUN_ID_3',",
          "1117:                 'execution_date': '2020-01-04T00:00:00+00:00',",
          "1119:             },",
          "1120:             {",
          "1121:                 'dag_id': 'example_python_operator',",
          "1122:                 'dag_run_id': 'TEST_DAG_RUN_ID_4',",
          "1123:                 'execution_date': '2020-01-05T00:00:00+00:00',",
          "1124:                 'task_id': 'sleep_for_3',",
          "1125:             },",
          "1126:         ]",
          "1127:         for task_instance in expected_response:",
          "1128:             assert task_instance in response.json[\"task_instances\"]",
          "1130:         assert 0 == failed_dag_runs, 0",
          "1132:     def test_should_raises_401_unauthenticated(self):",
          "",
          "[Removed Lines]",
          "1106:                 'task_id': 'sleep_for_0',",
          "1112:                 'task_id': 'sleep_for_1',",
          "1118:                 'task_id': 'sleep_for_2',",
          "1129:         assert 5 == len(response.json[\"task_instances\"])",
          "",
          "[Added Lines]",
          "1110:                 'task_id': 'log_sql_query',",
          "1116:                 'task_id': 'sleep_for_0',",
          "1122:                 'task_id': 'sleep_for_1',",
          "1128:                 'task_id': 'sleep_for_2',",
          "1129:             },",
          "1130:             {",
          "1131:                 'dag_id': 'example_python_operator',",
          "1132:                 'dag_run_id': 'TEST_DAG_RUN_ID_5',",
          "1133:                 'execution_date': '2020-01-06T00:00:00+00:00',",
          "1139:         assert 6 == len(response.json[\"task_instances\"])",
          "",
          "---------------"
        ],
        "tests/serialization/test_dag_serialization.py||tests/serialization/test_dag_serialization.py": [
          "File: tests/serialization/test_dag_serialization.py -> tests/serialization/test_dag_serialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2151:         'ui_fgcolor': '#000',",
          "2152:         'task_id': 'x',",
          "2153:         'template_ext': [],",
          "2156:         \"_disallow_kwargs_override\": False,",
          "2157:         '_expand_input_attr': 'op_kwargs_expand_input',",
          "2158:     }",
          "",
          "[Removed Lines]",
          "2154:         'template_fields': ['op_args', 'op_kwargs'],",
          "2155:         'template_fields_renderers': {\"op_args\": \"py\", \"op_kwargs\": \"py\"},",
          "",
          "[Added Lines]",
          "2154:         'template_fields': ['templates_dict', 'op_args', 'op_kwargs'],",
          "2155:         'template_fields_renderers': {\"templates_dict\": \"json\", \"op_args\": \"py\", \"op_kwargs\": \"py\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2234:         'ui_fgcolor': '#000',",
          "2235:         'task_id': 'x',",
          "2236:         'template_ext': [],",
          "2239:         \"_disallow_kwargs_override\": strict,",
          "2240:         '_expand_input_attr': 'op_kwargs_expand_input',",
          "2241:     }",
          "",
          "[Removed Lines]",
          "2237:         'template_fields': ['op_args', 'op_kwargs'],",
          "2238:         'template_fields_renderers': {\"op_args\": \"py\", \"op_kwargs\": \"py\"},",
          "",
          "[Added Lines]",
          "2237:         'template_fields': ['templates_dict', 'op_args', 'op_kwargs'],",
          "2238:         'template_fields_renderers': {\"templates_dict\": \"json\", \"op_args\": \"py\", \"op_kwargs\": \"py\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa4f1c4028730ecd67eb51710ba8ed18b57f0ebc",
      "candidate_info": {
        "commit_hash": "aa4f1c4028730ecd67eb51710ba8ed18b57f0ebc",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/aa4f1c4028730ecd67eb51710ba8ed18b57f0ebc",
        "files": [
          "airflow/example_dags/example_datasets.py"
        ],
        "message": "Fix example_datasets dag names (#26495)\n\n(cherry picked from commit e6838c92df6904e8f8f33951108f09ed5c590c72)",
        "before_after_code_files": [
          "airflow/example_dags/example_datasets.py||airflow/example_dags/example_datasets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/example_dags/example_datasets.py||airflow/example_dags/example_datasets.py": [
          "File: airflow/example_dags/example_datasets.py -> airflow/example_dags/example_datasets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: Turn on all the dags.",
          "38: \"\"\"",
          "39: from __future__ import annotations",
          "",
          "[Removed Lines]",
          "24: DAG example_dataset_dag1 should run because it's on a schedule.",
          "26: After example_dataset_dag1 runs, example_dataset_dag3_req_dag1 should be triggered immediately",
          "27: because its only dataset dependency is managed by example_dataset_dag1.",
          "29: No other dags should be triggered.  Note that even though example_dataset_dag4_req_dag1_dag2 depends on",
          "30: the dataset in example_dataset_dag1, it will not be triggered until example_dataset_dag2 runs",
          "31: (and example_dataset_dag2 is left with no schedule so that we can trigger it manually).",
          "33: Next, trigger example_dataset_dag2.  After example_dataset_dag2 finishes,",
          "34: example_dataset_dag4_req_dag1_dag2 should run.",
          "36: Dags example_dataset_dag5_req_dag1_D and example_dataset_dag6_req_DD should not run because they depend on",
          "37: datasets that never get updated.",
          "",
          "[Added Lines]",
          "24: DAG dataset_produces_1 should run because it's on a schedule.",
          "26: After dataset_produces_1 runs, dataset_consumes_1 should be triggered immediately",
          "27: because its only dataset dependency is managed by dataset_produces_1.",
          "29: No other dags should be triggered.  Note that even though dataset_consumes_1_and_2 depends on",
          "30: the dataset in dataset_produces_1, it will not be triggered until dataset_produces_2 runs",
          "31: (and dataset_produces_2 is left with no schedule so that we can trigger it manually).",
          "33: Next, trigger dataset_produces_2.  After dataset_produces_2 finishes,",
          "34: dataset_consumes_1_and_2 should run.",
          "36: Dags dataset_consumes_1_never_scheduled and dataset_consumes_unknown_never_scheduled should not run because",
          "37: they depend on datasets that never get updated.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f0c017eda638d10c4ab4432495dcbc470136b74",
      "candidate_info": {
        "commit_hash": "1f0c017eda638d10c4ab4432495dcbc470136b74",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1f0c017eda638d10c4ab4432495dcbc470136b74",
        "files": [
          "setup.py"
        ],
        "message": "Add limit to Sphinx < 5.2.0 until autoapi incompatibilities are fixed (#26670)\n\nThe new (released 2 days ago) Sphinx 5.2.0 introduced deprecation\nfor he way properties are documented and sphinx-autoapi needs\nto catch-up with it. Until that, we limit Sphinx to < 5.2.0\n\nTracked in https://github.com/readthedocs/sphinx-autoapi/issues/352\n\n(cherry picked from commit ba96604608a4b44b5febf50384b251850c2de62e)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     'sphinx-copybutton',",
          "271:     'sphinx-jinja>=2.0',",
          "272:     'sphinx-rtd-theme>=0.1.6',",
          "274:     'sphinxcontrib-httpdomain>=1.7.0',",
          "275:     'sphinxcontrib-redoc>=1.6.0',",
          "276:     'sphinxcontrib-spelling>=7.3',",
          "",
          "[Removed Lines]",
          "273:     'sphinx>=4.4.0',",
          "",
          "[Added Lines]",
          "273:     # Spinx 5.2.0 introduced deprecation for property documentation and autoapi 1.9.0 generates",
          "274:     # documentation that uses the old way of documenting it. This is tracked in",
          "275:     # https://github.com/readthedocs/sphinx-autoapi/issues/352 of autoapi and until it is solved",
          "276:     # we need to limit Sphinx to <5.2.0",
          "277:     'sphinx>=4.4.0,<5.2.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e98b0e8faea03300a09081309ee2a44e9fdb58f6",
      "candidate_info": {
        "commit_hash": "e98b0e8faea03300a09081309ee2a44e9fdb58f6",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/e98b0e8faea03300a09081309ee2a44e9fdb58f6",
        "files": [
          "airflow/models/abstractoperator.py",
          "airflow/models/baseoperator.py",
          "airflow/models/mappedoperator.py",
          "airflow/models/taskinstance.py",
          "airflow/utils/context.py",
          "tests/decorators/test_python.py",
          "tests/models/test_mappedoperator.py"
        ],
        "message": "When rendering template, unmap task in context (#26702)\n\n(cherry picked from commit 5560a46bfe8a14205c5e8a14f0b5c2ae74ee100c)",
        "before_after_code_files": [
          "airflow/models/abstractoperator.py||airflow/models/abstractoperator.py",
          "airflow/models/baseoperator.py||airflow/models/baseoperator.py",
          "airflow/models/mappedoperator.py||airflow/models/mappedoperator.py",
          "airflow/models/taskinstance.py||airflow/models/taskinstance.py",
          "airflow/utils/context.py||airflow/utils/context.py",
          "tests/decorators/test_python.py||tests/decorators/test_python.py",
          "tests/models/test_mappedoperator.py||tests/models/test_mappedoperator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/26688"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/models/abstractoperator.py||airflow/models/abstractoperator.py": [
          "File: airflow/models/abstractoperator.py -> airflow/models/abstractoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:         self,",
          "374:         context: Context,",
          "375:         jinja_env: jinja2.Environment | None = None,",
          "377:         \"\"\"Template all attributes listed in template_fields.",
          "379:         If the operator is mapped, this should return the unmapped, fully",
          "380:         rendered, and map-expanded operator. The mapped operator should not be",
          "385:         \"\"\"",
          "386:         raise NotImplementedError()",
          "",
          "[Removed Lines]",
          "376:     ) -> BaseOperator | None:",
          "381:         modified.",
          "383:         If the operator is not mapped, this should modify the operator in-place",
          "384:         and return either *None* (for backwards compatibility) or *self*.",
          "",
          "[Added Lines]",
          "376:     ) -> None:",
          "381:         modified. However, ``context`` will be modified in-place to reference",
          "382:         the unmapped operator for template rendering.",
          "384:         If the operator is not mapped, this should modify the operator in-place.",
          "",
          "---------------"
        ],
        "airflow/models/baseoperator.py||airflow/models/baseoperator.py": [
          "File: airflow/models/baseoperator.py -> airflow/models/baseoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1179:         self,",
          "1180:         context: Context,",
          "1181:         jinja_env: jinja2.Environment | None = None,",
          "1183:         \"\"\"Template all attributes listed in template_fields.",
          "1185:         This mutates the attributes in-place and is irreversible.",
          "",
          "[Removed Lines]",
          "1182:     ) -> BaseOperator | None:",
          "",
          "[Added Lines]",
          "1182:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1190:         if not jinja_env:",
          "1191:             jinja_env = self.get_template_env()",
          "1192:         self._do_render_template_fields(self, self.template_fields, context, jinja_env, set())",
          "1195:     @provide_session",
          "1196:     def clear(",
          "",
          "[Removed Lines]",
          "1193:         return self",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/models/mappedoperator.py||airflow/models/mappedoperator.py": [
          "File: airflow/models/mappedoperator.py -> airflow/models/mappedoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: from airflow.ti_deps.deps.base_ti_dep import BaseTIDep",
          "59: from airflow.ti_deps.deps.mapped_task_expanded import MappedTaskIsExpanded",
          "60: from airflow.typing_compat import Literal",
          "62: from airflow.utils.helpers import is_container",
          "63: from airflow.utils.operator_resources import Resources",
          "64: from airflow.utils.state import State, TaskInstanceState",
          "",
          "[Removed Lines]",
          "61: from airflow.utils.context import Context",
          "",
          "[Added Lines]",
          "61: from airflow.utils.context import Context, context_update_for_unmapped",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "748:         self,",
          "749:         context: Context,",
          "750:         jinja_env: jinja2.Environment | None = None,",
          "752:         if not jinja_env:",
          "753:             jinja_env = self.get_template_env()",
          "",
          "[Removed Lines]",
          "751:     ) -> BaseOperator | None:",
          "",
          "[Added Lines]",
          "751:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "762:         mapped_kwargs, seen_oids = self._expand_mapped_kwargs(context, session)",
          "763:         unmapped_task = self.unmap(mapped_kwargs)",
          "764:         self._do_render_template_fields(",
          "765:             parent=unmapped_task,",
          "766:             template_fields=self.template_fields,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:         context_update_for_unmapped(context, unmapped_task)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "769:             seen_oids=seen_oids,",
          "770:             session=session,",
          "771:         )",
          "",
          "[Removed Lines]",
          "772:         return unmapped_task",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/models/taskinstance.py||airflow/models/taskinstance.py": [
          "File: airflow/models/taskinstance.py -> airflow/models/taskinstance.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2190:         \"\"\"",
          "2191:         if not context:",
          "2192:             context = self.get_template_context()",
          "2197:         return original_task",
          "2199:     def render_k8s_pod_yaml(self) -> dict | None:",
          "",
          "[Removed Lines]",
          "2193:         rendered_task = self.task.render_template_fields(context)",
          "2194:         if rendered_task is None:  # Compatibility -- custom renderer, assume unmapped.",
          "2195:             return self.task",
          "2196:         original_task, self.task = self.task, rendered_task",
          "",
          "[Added Lines]",
          "2193:         original_task = self.task",
          "2195:         # If self.task is mapped, this call replaces self.task to point to the",
          "2196:         # unmapped BaseOperator created by this function! This is because the",
          "2197:         # MappedOperator is useless for template rendering, and we need to be",
          "2198:         # able to access the unmapped task instead.",
          "2199:         original_task.render_template_fields(context)",
          "",
          "---------------"
        ],
        "airflow/utils/context.py||airflow/utils/context.py": [
          "File: airflow/utils/context.py -> airflow/utils/context.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import copy",
          "23: import functools",
          "24: import warnings",
          "27: import lazy_object_proxy",
          "29: from airflow.exceptions import RemovedInAirflow3Warning",
          "30: from airflow.utils.types import NOTSET",
          "32: # NOTE: Please keep this in sync with Context in airflow/utils/context.pyi.",
          "33: KNOWN_CONTEXT_KEYS = {",
          "34:     \"conf\",",
          "",
          "[Removed Lines]",
          "25: from typing import Any, Container, ItemsView, Iterator, KeysView, Mapping, MutableMapping, ValuesView",
          "",
          "[Added Lines]",
          "25: from typing import (",
          "26:     TYPE_CHECKING,",
          "27:     Any,",
          "28:     Container,",
          "29:     ItemsView,",
          "30:     Iterator,",
          "31:     KeysView,",
          "32:     Mapping,",
          "33:     MutableMapping,",
          "34:     ValuesView,",
          "35: )",
          "42: if TYPE_CHECKING:",
          "43:     from airflow.models.baseoperator import BaseOperator",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:         return lazy_object_proxy.Proxy(factory)",
          "293:     return {k: _create_value(k, v) for k, v in source._context.items()}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: def context_update_for_unmapped(context: Context, task: BaseOperator) -> None:",
          "310:     \"\"\"Update context after task unmapping.",
          "312:     Since ``get_template_context()`` is called before unmapping, the context",
          "313:     contains information about the mapped task. We need to do some in-place",
          "314:     updates to ensure the template context reflects the unmapped task instead.",
          "316:     :meta private:",
          "317:     \"\"\"",
          "318:     context[\"task\"] = context[\"ti\"].task = task",
          "",
          "---------------"
        ],
        "tests/decorators/test_python.py||tests/decorators/test_python.py": [
          "File: tests/decorators/test_python.py -> tests/decorators/test_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:     mapped_ti: TaskInstance = dr.get_task_instance(mapped.operator.task_id, session=session)",
          "758:     mapped_ti.map_index = 0",
          "766: def test_task_decorator_has_wrapped_attr():",
          "",
          "[Removed Lines]",
          "759:     op = mapped.operator.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "760:     assert op",
          "762:     assert op.op_kwargs['arg1'] == \"{{ ds }}\"",
          "763:     assert op.op_kwargs['arg2'] == \"fn\"",
          "",
          "[Added Lines]",
          "760:     assert mapped_ti.task.is_mapped",
          "761:     mapped.operator.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "762:     assert not mapped_ti.task.is_mapped",
          "764:     assert mapped_ti.task.op_kwargs['arg1'] == \"{{ ds }}\"",
          "765:     assert mapped_ti.task.op_kwargs['arg2'] == \"fn\"",
          "",
          "---------------"
        ],
        "tests/models/test_mappedoperator.py||tests/models/test_mappedoperator.py": [
          "File: tests/models/test_mappedoperator.py -> tests/models/test_mappedoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     mapped_ti: TaskInstance = dr.get_task_instance(mapped.task_id, session=session)",
          "307:     mapped_ti.map_index = 0",
          "316: def test_mapped_render_nested_template_fields(dag_maker, session):",
          "",
          "[Removed Lines]",
          "308:     op = mapped.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "309:     assert isinstance(op, MyOperator)",
          "311:     assert op.value == \"{{ ds }}\", \"Should not be templated!\"",
          "312:     assert op.arg1 == \"{{ ds }}\", \"Should not be templated!\"",
          "313:     assert op.arg2 == \"a\"",
          "",
          "[Added Lines]",
          "309:     assert isinstance(mapped_ti.task, MappedOperator)",
          "310:     mapped.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "311:     assert isinstance(mapped_ti.task, MyOperator)",
          "313:     assert mapped_ti.task.value == \"{{ ds }}\", \"Should not be templated!\"",
          "314:     assert mapped_ti.task.arg1 == \"{{ ds }}\", \"Should not be templated!\"",
          "315:     assert mapped_ti.task.arg2 == \"a\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:     ti: TaskInstance = dr.get_task_instance(mapped.task_id, session=session)",
          "431:     ti.refresh_from_task(mapped)",
          "432:     ti.map_index = map_index",
          "439: def test_xcomarg_property_of_mapped_operator(dag_maker):",
          "",
          "[Removed Lines]",
          "433:     op = mapped.render_template_fields(context=ti.get_template_context(session=session))",
          "434:     assert isinstance(op, MockOperator)",
          "435:     assert op.arg1 == expected",
          "436:     assert op.arg2 == \"a\"",
          "",
          "[Added Lines]",
          "435:     assert isinstance(ti.task, MappedOperator)",
          "436:     mapped.render_template_fields(context=ti.get_template_context(session=session))",
          "437:     assert isinstance(ti.task, MockOperator)",
          "438:     assert ti.task.arg1 == expected",
          "439:     assert ti.task.arg2 == \"a\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}