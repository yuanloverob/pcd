{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cfe38f2f202f09470976dd6b613fe7ecbd963a8",
      "candidate_info": {
        "commit_hash": "7cfe38f2f202f09470976dd6b613fe7ecbd963a8",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/7cfe38f2f202f09470976dd6b613fe7ecbd963a8",
        "files": [
          "package.json",
          "packages/table/render/index.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts"
        ],
        "message": "releases 3.9.11",
        "before_after_code_files": [
          "packages/table/render/index.ts||packages/table/render/index.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/render/index.ts||packages/table/render/index.ts": [
          "File: packages/table/render/index.ts -> packages/table/render/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:       ]",
          "775:     }",
          "776:   },",
          "779:   $input: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "777:   VxeRate: {",
          "778:     renderTableDefault: defaultEditRender",
          "779:   },",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "654:   cacheRowMap (isSource?: boolean) {",
          "656:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "657:     const hasChildField = treeOpts.hasChild || treeOpts.hasChildField",
          "658:     const rowkey = getRowkey(this)",
          "",
          "[Removed Lines]",
          "655:     const { treeConfig, treeOpts, tableFullData, fullAllDataRowIdData, fullAllDataRowMap, tableFullTreeData } = this",
          "",
          "[Added Lines]",
          "655:     const { treeConfig, treeOpts, tableFullData, fullAllDataRowIdData, tableFullTreeData } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "684:       this.fullDataRowIdData = fullDataRowIdMaps",
          "685:     }",
          "686:     this.fullAllDataRowIdData = fullAllDataRowIdMaps",
          "688:     if (treeConfig) {",
          "689:       XEUtils.eachTree(tableFullTreeData, handleCache, { children: childrenField })",
          "690:     } else {",
          "",
          "[Removed Lines]",
          "687:     fullAllDataRowMap.clear()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:     return this.params",
          "721:   },",
          "722:   loadTreeChildren (row: any, childRecords: any) {",
          "724:     const { transform, mapChildrenField } = treeOpts",
          "725:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "728:     return this.createData(childRecords).then((rows: any) => {",
          "729:       if (keepSource) {",
          "730:         const rowid = getRowid(this, row)",
          "",
          "[Removed Lines]",
          "723:     const { keepSource, tableSourceData, treeOpts, fullDataRowIdData, fullDataRowMap, fullAllDataRowMap, fullAllDataRowIdData, sourceDataRowIdData } = this",
          "726:     const rest = fullAllDataRowIdData[getRowid(this, row)]",
          "727:     const parentLevel = rest ? rest.level : 0",
          "",
          "[Added Lines]",
          "722:     const $xeTable = this",
          "724:     const { keepSource, tableSourceData, treeOpts, fullDataRowIdData, fullAllDataRowIdData, sourceDataRowIdData } = this",
          "727:     const parentRest = fullAllDataRowIdData[getRowid($xeTable, row)]",
          "728:     const parentLevel = parentRest ? parentRest.level : 0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "738:         })",
          "739:       }",
          "740:       XEUtils.eachTree(rows, (childRow, index, items, path, parent, nodes) => {",
          "743:         const rest = { row: childRow, rowid, seq: -1, index, _index: -1, $index: -1, items, parent: parentRow, level: parentLevel + nodes.length }",
          "744:         fullDataRowIdData[rowid] = rest",
          "746:         fullAllDataRowIdData[rowid] = rest",
          "748:       }, { children: childrenField })",
          "749:       row[childrenField] = rows",
          "750:       if (transform) {",
          "",
          "[Removed Lines]",
          "741:         const rowid = getRowid(this, childRow)",
          "742:         const parentRow = parent || row",
          "745:         fullDataRowMap.set(childRow, rest)",
          "747:         fullAllDataRowMap.set(childRow, rest)",
          "",
          "[Added Lines]",
          "742:         const rowid = getRowid($xeTable, childRow)",
          "743:         const parentRow = parent || parentRest.row",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1202:     return null",
          "1203:   },",
          "1204:   getCellLabel (row: any, fieldOrColumn: any) {",
          "1205:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1206:     if (!column) {",
          "1207:       return null",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1204:     const $xeTable = this",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1210:     const cellValue = getCellValue(row, column)",
          "1211:     let cellLabel = cellValue",
          "1212:     if (formatter) {",
          "1215:       const colid = column.id",
          "1219:         formatData = rest.formatData",
          "1220:         if (!formatData) {",
          "1222:         }",
          "1223:         if (rest && formatData[colid]) {",
          "1224:           if (formatData[colid].value === cellValue) {",
          "",
          "[Removed Lines]",
          "1213:       let rest, formatData",
          "1214:       const { fullAllDataRowMap } = this",
          "1216:       const cacheFormat = fullAllDataRowMap.has(row)",
          "1217:       if (cacheFormat) {",
          "1218:         rest = fullAllDataRowMap.get(row)",
          "1221:           formatData = fullAllDataRowMap.get(row).formatData = {}",
          "",
          "[Added Lines]",
          "1214:       let formatData",
          "1215:       const { fullAllDataRowIdData } = $xeTable",
          "1216:       const rowid = getRowid($xeTable, row)",
          "1218:       const rest = fullAllDataRowIdData[rowid]",
          "1219:       if (rest) {",
          "1222:           formatData = fullAllDataRowIdData[rowid].formatData = {}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1598:   getRowid (row: any) {",
          "1601:   },",
          "",
          "[Removed Lines]",
          "1599:     const fullAllDataRowMap = this.fullAllDataRowMap",
          "1600:     return fullAllDataRowMap.has(row) ? fullAllDataRowMap.get(row).rowid : null",
          "",
          "[Added Lines]",
          "1600:     const $xeTable = this",
          "1602:     const rowid = XEUtils.get(row, getRowkey($xeTable))",
          "1603:     return XEUtils.eqNull(rowid) ? '' : encodeURIComponent(rowid)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3859:   },",
          "3861:   handleReserveStatus () {",
          "3865:       this.selectRadioRow = null // \u5237\u65b0\u5355\u9009\u884c\u72b6\u6001",
          "3866:     }",
          "",
          "[Removed Lines]",
          "3862:     const { expandColumn, treeOpts, treeConfig, fullDataRowIdData, fullAllDataRowMap, currentRow, selectRadioRow, radioReserveRow, radioOpts, checkboxOpts, selectCheckboxMaps, rowExpandedMaps, treeExpandedMaps, expandOpts } = this",
          "3864:     if (selectRadioRow && !fullAllDataRowMap.has(selectRadioRow)) {",
          "",
          "[Added Lines]",
          "3865:     const $xeTable = this",
          "3867:     const { expandColumn, treeOpts, treeConfig, fullDataRowIdData, fullAllDataRowIdData, currentRow, selectRadioRow, radioReserveRow, radioOpts, checkboxOpts, selectCheckboxMaps, rowExpandedMaps, treeExpandedMaps, expandOpts } = this",
          "3869:     if (selectRadioRow && !fullAllDataRowIdData[getRowid($xeTable, selectRadioRow)]) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3877:     if (checkboxOpts.reserve) {",
          "3878:       this.handleCheckedCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true, true)",
          "3879:     }",
          "3881:       this.currentRow = null // \u5237\u65b0\u5f53\u524d\u884c\u72b6\u6001",
          "3882:     }",
          "",
          "[Removed Lines]",
          "3880:     if (currentRow && !fullAllDataRowMap.has(currentRow)) {",
          "",
          "[Added Lines]",
          "3885:     if (currentRow && !this.fullAllDataRowIdData[getRowid($xeTable, currentRow)]) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4596:   isRowExpandLoaded (row: any) {",
          "4599:   },",
          "4600:   clearRowExpandLoaded (row: any) {",
          "4602:     const { lazy } = expandOpts",
          "4605:     if (lazy && rest) {",
          "4606:       rest.expandLoaded = false",
          "4607:       const rowTempExpandLazyLoadedMaps = { ...rowExpandLazyLoadedMaps }",
          "",
          "[Removed Lines]",
          "4597:     const rest = this.fullAllDataRowMap.get(row)",
          "4598:     return rest && rest.expandLoaded",
          "4601:     const { expandOpts, rowExpandLazyLoadedMaps, fullAllDataRowMap } = this",
          "4603:     const rowid = getRowid(this, row)",
          "4604:     const rest = fullAllDataRowMap.get(row)",
          "",
          "[Added Lines]",
          "4602:     const $xeTable = this",
          "4604:     const { fullAllDataRowIdData } = this",
          "4605:     const rest = fullAllDataRowIdData[getRowid($xeTable, row)]",
          "4606:     return rest && !!rest.expandLoaded",
          "4609:     const $xeTable = this",
          "4611:     const { expandOpts, rowExpandLazyLoadedMaps, fullAllDataRowIdData } = this",
          "4613:     const rowid = getRowid($xeTable, row)",
          "4614:     const rest = fullAllDataRowIdData[rowid]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4695:     return this.setRowExpand(expandedRows, expanded)",
          "4696:   },",
          "4697:   handleAsyncRowExpand (row: any) {",
          "4700:     return new Promise<void>(resolve => {",
          "4701:       const { loadMethod } = expandOpts",
          "4702:       if (loadMethod) {",
          "4710:           const { rowExpandedMaps } = this",
          "4714:         }).catch(() => {",
          "4715:           rest.expandLoaded = false",
          "4716:         }).finally(() => {",
          "4717:           const { rowExpandLazyLoadedMaps } = this",
          "4721:           }",
          "4724:         })",
          "4725:       } else {",
          "4726:         resolve()",
          "",
          "[Removed Lines]",
          "4698:     const { fullAllDataRowMap, expandOpts } = this",
          "4699:     const rest = fullAllDataRowMap.get(row)",
          "4703:         const { rowExpandLazyLoadedMaps } = this",
          "4704:         const rowTempExpandLazyLoadedMaps = { ...rowExpandLazyLoadedMaps }",
          "4705:         const rowid = getRowid(this, row)",
          "4706:         rowTempExpandLazyLoadedMaps[rowid] = row",
          "4707:         this.rowExpandLazyLoadedMaps = rowTempExpandLazyLoadedMaps",
          "4708:         loadMethod({ $table: this, row, rowIndex: this.getRowIndex(row), $rowIndex: this.getVMRowIndex(row) }).then(() => {",
          "4709:           rest.expandLoaded = true",
          "4711:           const rowTempExpandedMaps = { ...rowExpandedMaps }",
          "4712:           rowTempExpandedMaps[rowid] = row",
          "4713:           this.rowExpandedMaps = rowTempExpandedMaps",
          "4718:           const rowTempExpandLazyLoadedMaps = { ...rowExpandLazyLoadedMaps }",
          "4719:           if (rowTempExpandLazyLoadedMaps[rowid]) {",
          "4720:             delete rowTempExpandLazyLoadedMaps[rowid]",
          "4722:           this.rowExpandLazyLoadedMaps = rowTempExpandLazyLoadedMaps",
          "4723:           resolve(this.$nextTick().then(this.recalculate))",
          "",
          "[Added Lines]",
          "4708:     const $xeTable = this",
          "4711:       const { expandOpts } = this",
          "4714:         const { rowExpandLazyLoadedMaps, fullAllDataRowIdData } = this",
          "4715:         const rowid = getRowid($xeTable, row)",
          "4716:         const rest = fullAllDataRowIdData[rowid]",
          "4717:         rowExpandLazyLoadedMaps[rowid] = row",
          "4718:         loadMethod({ $table: $xeTable, row, rowIndex: this.getRowIndex(row), $rowIndex: this.getVMRowIndex(row) }).then(() => {",
          "4720:           rest.expandLoaded = true",
          "4721:           rowExpandedMaps[rowid] = row",
          "4726:           if (rowExpandLazyLoadedMaps[rowid]) {",
          "4727:             delete rowExpandLazyLoadedMaps[rowid]",
          "4729:           this.$nextTick().then(() => this.recalculate()).then(() => resolve())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4864:   isTreeExpandLoaded (row: any) {",
          "4867:   },",
          "4868:   clearTreeExpandLoaded (row: any) {",
          "4870:     const { transform, lazy } = treeOpts",
          "4873:     if (lazy && rest) {",
          "4874:       rest.treeLoaded = false",
          "4875:       if (treeExpandedMaps[rowid]) {",
          "",
          "[Removed Lines]",
          "4865:     const rest = this.fullAllDataRowMap.get(row)",
          "4866:     return rest && rest.treeLoaded",
          "4869:     const { treeOpts, treeExpandedMaps, fullAllDataRowMap } = this",
          "4871:     const rowid = getRowid(this, row)",
          "4872:     const rest = fullAllDataRowMap.get(row)",
          "",
          "[Added Lines]",
          "4871:     const $xeTable = this",
          "4873:     const { fullAllDataRowIdData } = this",
          "4874:     const rest = fullAllDataRowIdData[getRowid($xeTable, row)]",
          "4875:     return rest && !!rest.treeLoaded",
          "4878:     const $xeTable = this",
          "4880:     const { treeOpts, treeExpandedMaps, fullAllDataRowIdData } = this",
          "4882:     const rowid = getRowid($xeTable, row)",
          "4883:     const rest = fullAllDataRowIdData[rowid]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4962:     }",
          "4963:   },",
          "4964:   handleAsyncTreeExpandChilds (row: any) {",
          "4965:     const { treeOpts, checkboxOpts } = this",
          "4966:     const { transform, loadMethod } = treeOpts",
          "4967:     const { checkStrictly } = checkboxOpts",
          "4968:     return new Promise<void>(resolve => {",
          "4969:       if (loadMethod) {",
          "4973:         treeExpandLazyLoadedMaps[rowid] = row",
          "4976:           rest.treeLoaded = true",
          "4977:           if (treeExpandLazyLoadedMaps[rowid]) {",
          "4979:           }",
          "4980:           if (!XEUtils.isArray(childRecords)) {",
          "4981:             childRecords = []",
          "4982:           }",
          "4983:           if (childRecords) {",
          "4985:               const { treeExpandedMaps } = this",
          "4990:               }",
          "4992:               if (!checkStrictly && this.isCheckedByCheckboxRow(row)) {",
          "4994:               }",
          "4995:               return this.$nextTick().then(() => {",
          "4996:                 if (transform) {",
          "",
          "[Removed Lines]",
          "4970:         const { fullAllDataRowMap, treeExpandLazyLoadedMaps } = this",
          "4971:         const rowid = getRowid(this, row)",
          "4972:         const rest = fullAllDataRowMap.get(row)",
          "4974:         loadMethod({ $table: this, row }).then((childRecords: any) => {",
          "4978:             treeExpandLazyLoadedMaps[rowid] = null",
          "4984:             return this.loadTreeChildren(row, childRecords).then((childRows: any) => {",
          "4986:               const treeTempExpandedMaps = { ...treeExpandedMaps }",
          "4987:               if (childRows.length && !treeTempExpandedMaps[rowid]) {",
          "4988:                 treeTempExpandedMaps[rowid] = row",
          "4989:                 this.treeExpandedMaps = treeTempExpandedMaps",
          "4993:                 this.handleCheckedCheckboxRow(childRows, true, true)",
          "",
          "[Added Lines]",
          "4976:     const $xeTable = this",
          "4983:         const { treeExpandLazyLoadedMaps, fullAllDataRowIdData } = this",
          "4984:         const rowid = getRowid($xeTable, row)",
          "4985:         const rest = fullAllDataRowIdData[rowid]",
          "4987:         Promise.resolve(",
          "4988:           loadMethod({ $table: $xeTable, row })",
          "4989:         ).then((childRecords: any) => {",
          "4992:             delete treeExpandLazyLoadedMaps[rowid]",
          "4998:             return this.loadTreeChildren(row, childRecords).then((childRows: any[]) => {",
          "5000:               if (childRows.length && !treeExpandedMaps[rowid]) {",
          "5001:                 treeExpandedMaps[rowid] = row",
          "5005:                 this.handleCheckedCheckboxRow(childRows, true)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5000:             })",
          "5001:           }",
          "5002:         }).catch(() => {",
          "5005:           const { treeExpandLazyLoadedMaps } = this",
          "5006:           if (treeExpandLazyLoadedMaps[rowid]) {",
          "5008:           }",
          "5009:         }).finally(() => {",
          "5010:           this.$nextTick().then(() => this.recalculate()).then(() => resolve())",
          "",
          "[Removed Lines]",
          "5004:           rest.treeLoaded = false",
          "5007:             treeExpandLazyLoadedMaps[rowid] = null",
          "",
          "[Added Lines]",
          "5016:           rest.treeLoaded = false",
          "5018:             delete treeExpandLazyLoadedMaps[rowid]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5040:   handleBaseTreeExpand (rows: any, expanded: any) {",
          "5042:     const { reserve, lazy, accordion, toggleMethod } = treeOpts",
          "5043:     const treeTempExpandedMaps = { ...treeExpandedMaps }",
          "5044:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "[Removed Lines]",
          "5041:     const { fullAllDataRowMap, tableFullData, treeExpandedMaps, treeOpts, treeExpandLazyLoadedMaps, treeNodeColumn } = this",
          "",
          "[Added Lines]",
          "5052:     const { fullAllDataRowIdData, tableFullData, treeExpandedMaps, treeOpts, treeExpandLazyLoadedMaps, treeNodeColumn } = this",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5064:       validRows.forEach((row: any) => {",
          "5065:         const rowid = getRowid(this, row)",
          "5066:         if (!treeTempExpandedMaps[rowid]) {",
          "5068:           const isLoad = lazy && row[hasChildField] && !rest.treeLoaded && !treeExpandLazyLoadedMaps[rowid]",
          "5070:           if (isLoad) {",
          "",
          "[Removed Lines]",
          "5067:           const rest = fullAllDataRowMap.get(row)",
          "",
          "[Added Lines]",
          "5078:           const rest = fullAllDataRowIdData[rowid]",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "750:       visibleColumn: [],",
          "753:       fullAllDataRowIdData: {},",
          "754:       fullDataRowMap: new Map(),",
          "755:       fullDataRowIdData: {},",
          "",
          "[Removed Lines]",
          "752:       fullAllDataRowMap: new Map(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82c69fb1e42850c38095fd7c0939ac9d2a223740",
      "candidate_info": {
        "commit_hash": "82c69fb1e42850c38095fd7c0939ac9d2a223740",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/82c69fb1e42850c38095fd7c0939ac9d2a223740",
        "files": [
          "package.json",
          "packages/table/src/body.ts",
          "packages/table/src/util.ts"
        ],
        "message": "releases 3.10.0",
        "before_after_code_files": [
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/util.ts||packages/table/src/util.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:       )",
          "269:     }",
          "270:   }",
          "271:   return h('td', {",
          "272:     class: [",
          "273:       'vxe-body--column',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   let cellHeight = ''",
          "272:   if (hasEllipsis && (scrollYRHeight || rowHeight)) {",
          "273:     cellHeight = `${scrollYRHeight || rowHeight}px`",
          "274:   } else if (scrollYLoad) {",
          "275:     if (!hasEllipsis) {",
          "276:       cellHeight = `${rest.height || 24}px`",
          "277:     }",
          "278:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:     key: columnKey || columnOpts.useKey ? column.id : $columnIndex,",
          "294:     attrs,",
          "295:     style: Object.assign({",
          "297:     }, XEUtils.isFunction(compCellStyle) ? compCellStyle(params) : compCellStyle, XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle),",
          "298:     on: tdOns",
          "299:   }, tdVNs)",
          "",
          "[Removed Lines]",
          "296:       height: hasEllipsis && (scrollYRHeight || rowHeight) ? `${scrollYRHeight || rowHeight}px` : (scrollYLoad ? `${rest.height || 24}px` : '')",
          "",
          "[Added Lines]",
          "305:       height: cellHeight",
          "",
          "---------------"
        ],
        "packages/table/src/util.ts||packages/table/src/util.ts": [
          "File: packages/table/src/util.ts -> packages/table/src/util.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { isScale, isPx } from '../../ui/src/dom'",
          "4: import { warnLog, errLog } from '../../ui/src/log'",
          "8: const getAllConvertColumns = (columns: any, parentColumn?: any) => {",
          "9:   const result: any[] = []",
          "10:   columns.forEach((column: any) => {",
          "",
          "[Removed Lines]",
          "6: import type { VxeTableConstructor, VxeTablePrivateMethods } from '../../../types'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:   return isColumnInfo(options) ? options : new ColumnInfo($xeTable, options, renderOptions)",
          "337: }",
          "341:   const tableProps = $xeTable",
          "342:   const { showOverflow } = tableProps",
          "343:   const tableBody: any = $xeTable.$refs.tableBody",
          "",
          "[Removed Lines]",
          "339: export function rowToVisible ($xeTable: VxeTableConstructor & VxeTablePrivateMethods, row: any) {",
          "340:   const { reactData, internalData } = $xeTable",
          "",
          "[Added Lines]",
          "337: export function rowToVisible ($xeTable: any, row: any) {",
          "338:   const reactData = $xeTable",
          "339:   const internalData = $xeTable",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:   const bodyElem = tableBody ? tableBody.$el as HTMLDivElement : null",
          "348:   const rowid = getRowid($xeTable, row)",
          "349:   let offsetFixedLeft = 0",
          "351:     offsetFixedLeft += item.renderWidth",
          "352:   })",
          "353:   let offsetFixedRight = 0",
          "355:     offsetFixedRight += item.renderWidth",
          "356:   })",
          "357:   if (bodyElem) {",
          "",
          "[Removed Lines]",
          "350:   leftList.forEach(item => {",
          "354:   rightList.forEach(item => {",
          "",
          "[Added Lines]",
          "349:   leftList.forEach((item: any) => {",
          "353:   rightList.forEach((item: any) => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "088c9773ec4f503f08b8766217709ccc54975022",
      "candidate_info": {
        "commit_hash": "088c9773ec4f503f08b8766217709ccc54975022",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/088c9773ec4f503f08b8766217709ccc54975022",
        "files": [
          "package.json",
          "packages/ui/index.ts",
          "types/all.d.ts"
        ],
        "message": "\u91cd\u6784\u7ec4\u4ef6",
        "before_after_code_files": [
          "packages/ui/index.ts||packages/ui/index.ts",
          "types/all.d.ts||types/all.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "271: export const clipboard = VxeUI.clipboard",
          "272: export const log = VxeUI.log",
          "275: export const use = VxeUI.use",
          "",
          "[Removed Lines]",
          "274: export const hooks = VxeUI.hooks",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "types/all.d.ts||types/all.d.ts": [
          "File: types/all.d.ts -> types/all.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { VxeUIExport, VxeGlobalConfig } from 'vxe-pc-ui'",
          "4: declare global {",
          "",
          "[Removed Lines]",
          "1: import { App } from 'vue'",
          "",
          "[Added Lines]",
          "1: import { VueConstructor } from 'vue'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: export type VXETableCore = VxeUIExport",
          "28: export * from 'vxe-pc-ui/types/ui'",
          "",
          "[Removed Lines]",
          "25: export function install (app: App, options?: VxeGlobalConfig): void",
          "",
          "[Added Lines]",
          "25: export function install (app: VueConstructor, options?: VxeGlobalConfig): void",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b27adae7a2e150ffc817dd5585f3dcca9419d55",
      "candidate_info": {
        "commit_hash": "1b27adae7a2e150ffc817dd5585f3dcca9419d55",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/1b27adae7a2e150ffc817dd5585f3dcca9419d55",
        "files": [
          "examples/views/table/TableTest2.vue",
          "helper/vetur/attributes.json",
          "helper/vetur/tags.json",
          "package.json",
          "packages/locale/lang/en-US.ts",
          "packages/locale/lang/es-ES.ts",
          "packages/locale/lang/hu-HU.ts",
          "packages/locale/lang/ja-JP.ts",
          "packages/locale/lang/ko-KR.ts",
          "packages/locale/lang/pt-BR.ts",
          "packages/locale/lang/ru-RU.ts",
          "packages/locale/lang/uk-UA.ts",
          "packages/locale/lang/vi-VN.ts",
          "packages/locale/lang/zh-CHT.ts",
          "packages/locale/lang/zh-CN.ts",
          "packages/table/module/custom/panel.ts",
          "packages/table/module/edit/mixin.ts",
          "packages/table/src/body.ts",
          "packages/table/src/cell.ts",
          "packages/table/src/column.ts",
          "packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/props.ts",
          "packages/table/src/table.ts",
          "packages/ui/index.ts",
          "styles/components/table-module/custom.scss",
          "styles/components/table.scss"
        ],
        "message": "releases 3.10.2",
        "before_after_code_files": [
          "examples/views/table/TableTest2.vue||examples/views/table/TableTest2.vue",
          "packages/locale/lang/en-US.ts||packages/locale/lang/en-US.ts",
          "packages/locale/lang/es-ES.ts||packages/locale/lang/es-ES.ts",
          "packages/locale/lang/hu-HU.ts||packages/locale/lang/hu-HU.ts",
          "packages/locale/lang/ja-JP.ts||packages/locale/lang/ja-JP.ts",
          "packages/locale/lang/ko-KR.ts||packages/locale/lang/ko-KR.ts",
          "packages/locale/lang/pt-BR.ts||packages/locale/lang/pt-BR.ts",
          "packages/locale/lang/ru-RU.ts||packages/locale/lang/ru-RU.ts",
          "packages/locale/lang/uk-UA.ts||packages/locale/lang/uk-UA.ts",
          "packages/locale/lang/vi-VN.ts||packages/locale/lang/vi-VN.ts",
          "packages/locale/lang/zh-CHT.ts||packages/locale/lang/zh-CHT.ts",
          "packages/locale/lang/zh-CN.ts||packages/locale/lang/zh-CN.ts",
          "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts",
          "packages/table/module/edit/mixin.ts||packages/table/module/edit/mixin.ts",
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/cell.ts||packages/table/src/cell.ts",
          "packages/table/src/column.ts||packages/table/src/column.ts",
          "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/props.ts||packages/table/src/props.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/ui/index.ts||packages/ui/index.ts",
          "styles/components/table-module/custom.scss||styles/components/table-module/custom.scss",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/TableTest2.vue||examples/views/table/TableTest2.vue": [
          "File: examples/views/table/TableTest2.vue -> examples/views/table/TableTest2.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:       height=\"400\"",
          "11:       ref=\"tableRef\"",
          "12:       id=\"bbbbb\"",
          "14:       :column-config=\"{useKey: true}\"",
          "15:       :custom-config=\"customConfig\"",
          "16:       :loading=\"demo1.loading\"",
          "",
          "[Removed Lines]",
          "13:       :row-config=\"{useKey: true}\"",
          "",
          "[Added Lines]",
          "13:       :row-config=\"{useKey: true,drag:true}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:       :export-config=\"{modes: exportModes}\"",
          "19:       :expand-config=\"{iconOpen: 'vxe-icon-question-circle-fill', iconClose: 'vxe-icon-question-circle-fill'}\"",
          "20:       :checkbox-config=\"{labelField: 'id', highlight: true, range: true}\"",
          "24:       <vxe-colgroup title=\"\u5206\u7ec41\">",
          "31:       </vxe-colgroup>",
          "36:       <vxe-column",
          "37:         field=\"age\"",
          "38:         title=\"Age\"",
          "39:         sortable",
          "40:         :filters=\"demo1.ageOptions\"",
          "43:     </vxe-table>",
          "44:   </div>",
          "45: </template>",
          "",
          "[Removed Lines]",
          "21:       :data=\"demo1.tableData\">",
          "22:       <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "23:       <vxe-column type=\"checkbox\" title=\"ID\" width=\"140\"></vxe-column>",
          "25:         <vxe-column type=\"expand\" field=\"role\" title=\"Role\">",
          "26:           <template #content=\"{ row }\">",
          "27:             <div>{{ row.name }}</div>",
          "28:           </template>",
          "29:         </vxe-column>",
          "30:         <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "32:       <vxe-column field=\"sex11\" title=\"<span style='color:red;'>Sex222</span>\" type=\"html\"></vxe-column>",
          "33:       <vxe-column field=\"sex22\" title=\"<span style='color:red;'>Sex1111</span>\" type=\"html\" :visible=\"false\"></vxe-column>",
          "34:       <vxe-column field=\"name1\" title=\"Name1\" sortable></vxe-column>",
          "35:       <vxe-column field=\"sex\" title=\"Sex\" :filters=\"demo1.sexList\" :filter-multiple=\"false\" :formatter=\"formatterSex\"></vxe-column>",
          "41:         :filter-method=\"filterAgeMethod\"></vxe-column>",
          "42:       <vxe-column field=\"address\" title=\"Address\" show-overflow></vxe-column>",
          "",
          "[Added Lines]",
          "21:       :data=\"demo1.tableData\"",
          "22:       @row-dragstart=\"rowDragstartEvent\"",
          "23:       @row-dragover=\"rowDragoverEvent\"",
          "24:       @row-dragend=\"rowDragendEvent\">",
          "25:       <vxe-column type=\"seq\" width=\"60\" drag-sort></vxe-column>",
          "26:       <vxe-column type=\"checkbox\" title=\"ID\" width=\"140\" drag-sort></vxe-column>",
          "28:         <vxe-colgroup title=\"\u5206\u7ec42\">",
          "29:           <vxe-column type=\"expand\" field=\"role\" title=\"Role\" drag-sort>",
          "30:             <template #content=\"{ row }\">",
          "31:               <div>{{ row.name }}</div>",
          "32:             </template>",
          "33:           </vxe-column>",
          "34:           <vxe-column field=\"name\" title=\"Name\" drag-sort sortable></vxe-column>",
          "35:         </vxe-colgroup>",
          "37:       <vxe-column field=\"sex11\" title=\"<span style='color:red;'>Sex222</span>\" type=\"html\" drag-sort></vxe-column>",
          "38:       <vxe-column field=\"sex22\" title=\"<span style='color:red;'>Sex1111</span>\" type=\"html\" drag-sort :visible=\"false\"></vxe-column>",
          "39:       <vxe-column field=\"name1\" title=\"Name1\" sortable drag-sort ></vxe-column>",
          "40:       <vxe-column field=\"sex\" title=\"Sex\" :filters=\"demo1.sexList\" :filter-multiple=\"false\" :formatter=\"formatterSex\" drag-sort></vxe-column>",
          "46:         :filter-method=\"filterAgeMethod\" drag-sort></vxe-column>",
          "47:       <vxe-column field=\"address\" title=\"Address\" show-overflow drag-sort></vxe-column>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:     },",
          "105:     filterAgeMethod ({ value, row }: any) {",
          "106:       return row.age >= value",
          "107:     }",
          "109:   },",
          "110:   created () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:     },",
          "113:     rowDragstartEvent (params: any) {",
          "114:       console.log(params)",
          "115:     },",
          "116:     rowDragoverEvent (params: any) {",
          "117:       console.log(params)",
          "118:     },",
          "119:     rowDragendEvent (params: any) {",
          "120:       console.log(params)",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.ts||packages/locale/lang/en-US.ts": [
          "File: packages/locale/lang/en-US.ts -> packages/locale/lang/en-US.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: 'Close',",
          "72:       customCancel: 'Cancel',",
          "73:       customRestore: 'Restore',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: 'Please choose at least one piece of record!',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}',",
          "75:       dragTip: 'Moving: {0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: 'Cancelar',",
          "123:       cstmConfirm: 'Confirm',",
          "124:       cstmConfirmRestore: 'Please confirm whether to restore the default column configuration?',",
          "126:       setting: {",
          "127:         colSort: 'Sort',",
          "128:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: 'Moving target: {0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: 'Moving: {0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.ts||packages/locale/lang/es-ES.ts": [
          "File: packages/locale/lang/es-ES.ts -> packages/locale/lang/es-ES.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: 'Close',",
          "72:       customCancel: 'Cancel',",
          "73:       customRestore: 'Restore',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u00a1Seleccione al menos un registro!',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}',",
          "75:       dragTip: 'Moving: {0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: 'Cancelar',",
          "123:       cstmConfirm: 'Confirm',",
          "124:       cstmConfirmRestore: 'Please confirm whether to restore the default column configuration?',",
          "126:       setting: {",
          "127:         colSort: 'Sort',",
          "128:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: 'Moving target: {0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: 'Moving: {0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/hu-HU.ts||packages/locale/lang/hu-HU.ts": [
          "File: packages/locale/lang/hu-HU.ts -> packages/locale/lang/hu-HU.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: 'bez\u00e1r\u00e1s',",
          "72:       customCancel: 'M\u00e9gsem',",
          "73:       customRestore: 'Alap\u00e9rtelmez\u00e9s vissza\u00e1ll\u00edt\u00e1sa',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: 'K\u00e9rj\u00fck, v\u00e1lasszon legal\u00e1bb egy rekordot!',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: 'A r\u00f6gz\u00edtett oszlopok maxim\u00e1lis sz\u00e1ma nem haladhatja meg a k\u00f6vetkez\u0151t: {0}'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: 'A r\u00f6gz\u00edtett oszlopok maxim\u00e1lis sz\u00e1ma nem haladhatja meg a k\u00f6vetkez\u0151t: {0}',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: 'M\u00e9gsem',",
          "123:       cstmConfirm: 'Persze',",
          "124:       cstmConfirmRestore: 'K\u00e9rj\u00fck, er\u0151s\u00edtse meg, hogy vissza\u00e1ll\u00edtja-e az alap\u00e9rtelmezett oszlopkonfigur\u00e1ci\u00f3t?',",
          "126:       setting: {",
          "127:         colSort: 'fajta',",
          "128:         sortHelpTip: 'Kattintson \u00e9s h\u00fazza az ikont az oszlopok sorrendj\u00e9nek m\u00f3dos\u00edt\u00e1s\u00e1hoz',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: 'C\u00e9l mozgat\u00e1sa: {0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.ts||packages/locale/lang/ja-JP.ts": [
          "File: packages/locale/lang/ja-JP.ts -> packages/locale/lang/ja-JP.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u5173\u95ed',",
          "72:       customCancel: 'Cancel',",
          "73:       customRestore: '\u30ea\u30bb\u30c3\u30c8',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '1\u3064\u4ee5\u4e0a\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u6570\u304c {0} \u3067\u3059\u3002'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u6570\u304c {0} \u3067\u3059\u3002',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u30ad\u30e3\u30f3\u30bb\u30eb',",
          "123:       cstmConfirm: 'OK',",
          "124:       cstmConfirmRestore: '\u5217\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u72b6\u614b\u306b\u623b\u3057\u307e\u3059\u3002\u3088\u308d\u3057\u3044\u3067\u3059\u304b\uff1f',",
          "126:       setting: {",
          "127:         colSort: '\u30bd\u30fc\u30c8',",
          "128:         sortHelpTip: '\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u5217\u3092\u4e26\u3079\u66ff\u3048\u307e\u3059',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u79fb\u52d5\u30bf\u30fc\u30b2\u30c3\u30c8: {0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ko-KR.ts||packages/locale/lang/ko-KR.ts": [
          "File: packages/locale/lang/ko-KR.ts -> packages/locale/lang/ko-KR.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u5173\u95ed',",
          "72:       customCancel: '\u53d6\u6d88',",
          "73:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u8bf7\u81f3\u5c11\u9009\u62e9\u4e00\u6761\u8bb0\u5f55\uff01',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u53d6\u6d88',",
          "123:       cstmConfirm: '\u786e\u5b9a',",
          "124:       cstmConfirmRestore: '\u8bf7\u786e\u8ba4\u662f\u5426\u6062\u590d\u6210\u9ed8\u8ba4\u5217\u914d\u7f6e\uff1f',",
          "126:       setting: {",
          "127:         colSort: '\u6392\u5e8f',",
          "128:         sortHelpTip: '\u70b9\u51fb\u5e76\u62d6\u52a8\u56fe\u6807\u53ef\u4ee5\u8c03\u6574\u5217\u7684\u6392\u5e8f',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u79fb\u52a8\u76ee\u6807\uff1a{0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.ts||packages/locale/lang/pt-BR.ts": [
          "File: packages/locale/lang/pt-BR.ts -> packages/locale/lang/pt-BR.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u5173\u95ed',",
          "72:       customCancel: 'Cancel',",
          "73:       customRestore: 'Restore',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: 'Por favor, selecione pelo menos um registro!',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: 'Cancelar',",
          "123:       cstmConfirm: 'Confirm',",
          "124:       cstmConfirmRestore: 'Please confirm whether to restore the default column configuration?',",
          "126:       setting: {",
          "127:         colSort: 'Sort',",
          "128:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: 'Moving target: {0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: 'Moving: {0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ru-RU.ts||packages/locale/lang/ru-RU.ts": [
          "File: packages/locale/lang/ru-RU.ts -> packages/locale/lang/ru-RU.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435',",
          "72:       customCancel: '\u041e\u0442\u043c\u0435\u043d\u0430',",
          "73:       customRestore: '\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0443 \u0437\u0430\u043f\u0438\u0441\u044c!',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043c\u043e\u0440\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c {0}.'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043c\u043e\u0440\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c {0}.',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u041e\u0442\u043c\u0435\u043d\u0430',",
          "123:       cstmConfirm: '\u041a\u043e\u043d\u0435\u0447\u043d\u043e',",
          "124:       cstmConfirmRestore: '\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e?',",
          "126:       setting: {",
          "127:         colSort: '\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c',",
          "128:         sortHelpTip: '\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u0438 \u043f\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u0414\u0432\u0438\u0436\u0443\u0449\u0430\u044f\u0441\u044f \u0446\u0435\u043b\u044c: {0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/uk-UA.ts||packages/locale/lang/uk-UA.ts": [
          "File: packages/locale/lang/uk-UA.ts -> packages/locale/lang/uk-UA.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u5173\u95ed',",
          "72:       customCancel: '\u53d6\u6d88',",
          "73:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u8bf7\u81f3\u5c11\u9009\u62e9\u4e00\u6761\u8bb0\u5f55\uff01',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u53d6\u6d88',",
          "123:       cstmConfirm: '\u786e\u5b9a',",
          "124:       cstmConfirmRestore: '\u8bf7\u786e\u8ba4\u662f\u5426\u6062\u590d\u6210\u9ed8\u8ba4\u5217\u914d\u7f6e\uff1f',",
          "126:       setting: {",
          "127:         colSort: '\u6392\u5e8f',",
          "128:         sortHelpTip: '\u70b9\u51fb\u5e76\u62d6\u52a8\u56fe\u6807\u53ef\u4ee5\u8c03\u6574\u5217\u7684\u6392\u5e8f',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u79fb\u52a8\u76ee\u6807\uff1a{0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/vi-VN.ts||packages/locale/lang/vi-VN.ts": [
          "File: packages/locale/lang/vi-VN.ts -> packages/locale/lang/vi-VN.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u5173\u95ed',",
          "72:       customCancel: '\u53d6\u6d88',",
          "73:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u8bf7\u81f3\u5c11\u9009\u62e9\u4e00\u6761\u8bb0\u5f55\uff01',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u53d6\u6d88',",
          "123:       cstmConfirm: '\u786e\u5b9a',",
          "124:       cstmConfirmRestore: '\u8bf7\u786e\u8ba4\u662f\u5426\u6062\u590d\u6210\u9ed8\u8ba4\u5217\u914d\u7f6e\uff1f',",
          "126:       setting: {",
          "127:         colSort: '\u6392\u5e8f',",
          "128:         sortHelpTip: '\u70b9\u51fb\u5e76\u62d6\u52a8\u56fe\u6807\u53ef\u4ee5\u8c03\u6574\u5217\u7684\u6392\u5e8f',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u79fb\u52a8\u76ee\u6807\uff1a{0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CHT.ts||packages/locale/lang/zh-CHT.ts": [
          "File: packages/locale/lang/zh-CHT.ts -> packages/locale/lang/zh-CHT.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u95dc\u9589',",
          "72:       customCancel: '\u53d6\u6d88',",
          "73:       customRestore: '\u6062\u5fa9\u9810\u8a2d',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u8acb\u81f3\u5c11\u9078\u64c7\u4e00\u7b46\u8a18\u9304\uff01',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51cd\u7d50\u5217\u7684\u6578\u91cf\u4e0d\u80fd\u8d85\u904e {0} \u500b'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51cd\u7d50\u5217\u7684\u6578\u91cf\u4e0d\u80fd\u8d85\u904e {0} \u500b',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u53d6\u6d88',",
          "123:       cstmConfirm: '\u78ba\u5b9a',",
          "124:       cstmConfirmRestore: '\u8acb\u78ba\u8a8d\u662f\u5426\u6062\u5fa9\u6210\u9810\u8a2d\u5217\u914d\u7f6e\uff1f',",
          "126:       setting: {",
          "127:         colSort: '\u6392\u5e8f',",
          "128:         sortHelpTip: '\u9ede\u64ca\u4e26\u62d6\u66f3\u5716\u793a\u53ef\u4ee5\u8abf\u6574\u5217\u7684\u6392\u5e8f',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u79fb\u52d5\u76ee\u6a19\uff1a{0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52d5\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.ts||packages/locale/lang/zh-CN.ts": [
          "File: packages/locale/lang/zh-CN.ts -> packages/locale/lang/zh-CN.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       customClose: '\u5173\u95ed',",
          "72:       customCancel: '\u53d6\u6d88',",
          "73:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "75:     },",
          "76:     grid: {",
          "77:       selectOneRecord: '\u8bf7\u81f3\u5c11\u9009\u62e9\u4e00\u6761\u8bb0\u5f55\uff01',",
          "",
          "[Removed Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "[Added Lines]",
          "74:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a',",
          "75:       dragTip: '\u79fb\u52a8\uff1a{0}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:       cstmCancel: '\u53d6\u6d88',",
          "123:       cstmConfirm: '\u786e\u5b9a',",
          "124:       cstmConfirmRestore: '\u8bf7\u786e\u8ba4\u662f\u5426\u6062\u590d\u6210\u9ed8\u8ba4\u5217\u914d\u7f6e\uff1f',",
          "126:       setting: {",
          "127:         colSort: '\u6392\u5e8f',",
          "128:         sortHelpTip: '\u70b9\u51fb\u5e76\u62d6\u52a8\u56fe\u6807\u53ef\u4ee5\u8c03\u6574\u5217\u7684\u6392\u5e8f',",
          "",
          "[Removed Lines]",
          "125:       cstmDragTarget: '\u79fb\u52a8\u76ee\u6807\uff1a{0}',",
          "",
          "[Added Lines]",
          "126:       cstmDragTarget: '\u79fb\u52a8\uff1a{0}',",
          "",
          "---------------"
        ],
        "packages/table/module/custom/panel.ts||packages/table/module/custom/panel.ts": [
          "File: packages/table/module/custom/panel.ts -> packages/table/module/custom/panel.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:       }",
          "902:       $xetable.checkCustomStatus()",
          "903:     },",
          "905:       const { $xetable } = this",
          "909:       const colid = trEl.getAttribute('colid')",
          "910:       const column = $xetable.getColumnById(colid)",
          "911:       trEl.draggable = true",
          "912:       this.dragColumn = column",
          "913:       addClass(trEl, 'active--drag-origin')",
          "914:     },",
          "919:       const dragHintEl = this.$refs.dragHintElemRef",
          "920:       trEl.draggable = false",
          "921:       this.dragColumn = null",
          "",
          "[Removed Lines]",
          "904:     sortMousedownEvent (evnt: any) {",
          "906:       const btnEl = evnt.currentTarget",
          "907:       const tdEl = btnEl.parentNode",
          "908:       const trEl = tdEl.parentNode",
          "915:     sortMouseupEvent  (evnt: any) {",
          "916:       const btnEl = evnt.currentTarget",
          "917:       const tdEl = btnEl.parentNode",
          "918:       const trEl = tdEl.parentNode",
          "",
          "[Added Lines]",
          "904:     sortMousedownEvent (evnt: MouseEvent) {",
          "906:       const btnEl = evnt.currentTarget as HTMLElement",
          "907:       const tdEl = btnEl.parentNode as HTMLElement",
          "908:       const trEl = tdEl.parentNode as HTMLElement",
          "915:     sortMouseupEvent  (evnt: MouseEvent) {",
          "916:       const btnEl = evnt.currentTarget as HTMLElement",
          "917:       const tdEl = btnEl.parentNode as HTMLElement",
          "918:       const trEl = tdEl.parentNode as HTMLElement",
          "",
          "---------------"
        ],
        "packages/table/module/edit/mixin.ts||packages/table/module/edit/mixin.ts": [
          "File: packages/table/module/edit/mixin.ts -> packages/table/module/edit/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:     _clearEdit (evnt: any) {",
          "551:       const { actived, focused } = editStore",
          "552:       const { row, column } = actived",
          "553:       if (row || column) {",
          "554:         this._syncActivedCell()",
          "555:         actived.args = null",
          "",
          "[Removed Lines]",
          "550:       const { editStore } = this",
          "",
          "[Added Lines]",
          "550:       const $xeTable = this",
          "551:       const reactData = $xeTable",
          "553:       const { editStore } = reactData",
          "556:       const validOpts = $xeTable.validOpts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:       }",
          "568:       focused.row = null",
          "569:       focused.column = null",
          "573:         }",
          "574:       }",
          "575:       return this.$nextTick()",
          "",
          "[Removed Lines]",
          "570:       if (getConfig().cellVaildMode === 'obsolete') {",
          "571:         if (this.clearValidate) {",
          "572:           return this.clearValidate()",
          "",
          "[Added Lines]",
          "574:       if (validOpts.autoClear) {",
          "575:         if (validOpts.msgMode !== 'full' || getConfig().cellVaildMode === 'obsolete') {",
          "576:           if (this.clearValidate) {",
          "577:             return this.clearValidate()",
          "578:           }",
          "",
          "---------------"
        ],
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:       getClass(className, params),",
          "300:       getClass(allCellClassName, params)",
          "301:     ],",
          "303:     attrs,",
          "304:     style: Object.assign({",
          "305:       height: cellHeight",
          "",
          "[Removed Lines]",
          "302:     key: columnKey || columnOpts.useKey ? column.id : $columnIndex,",
          "",
          "[Added Lines]",
          "302:     key: columnKey || columnOpts.useKey || rowOpts.useKey ? column.id : $columnIndex,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   }, tdVNs)",
          "309: }",
          "312:   const {",
          "313:     stripe,",
          "314:     rowKey,",
          "",
          "[Removed Lines]",
          "311: function renderRows (h: CreateElement, _vm: any, $xetable: any, fixedType: any, tableData: any, tableColumn: any) {",
          "",
          "[Added Lines]",
          "311: function renderRows (h: CreateElement, _vm: any, $xeTable: any, fixedType: any, tableData: any, tableColumn: any) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:     rowOpts,",
          "333:     pendingRowList,",
          "334:     pendingRowMaps",
          "336:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "337:   const rows: any[] = []",
          "338:   tableData.forEach((row: any, $rowIndex: any) => {",
          "339:     const trOn: any = {}",
          "340:     let rowIndex = $rowIndex",
          "345:     if (rowOpts.isHover || highlightHoverRow) {",
          "346:       trOn.mouseenter = (evnt: any) => {",
          "348:           return",
          "349:         }",
          "351:       }",
          "352:       trOn.mouseleave = () => {",
          "354:           return",
          "355:         }",
          "357:       }",
          "358:     }",
          "360:     const rest = fullAllDataRowIdData[rowid]",
          "361:     const rowLevel = rest ? rest.level : 0",
          "362:     const seq = rest ? rest.seq : -1",
          "365:     const isExpandRow = expandColumn && !!rowExpandedMaps[rowid]",
          "",
          "[Removed Lines]",
          "335:   } = $xetable",
          "341:     const _rowIndex = $xetable.getVTRowIndex(row)",
          "343:     rowIndex = $xetable.getRowIndex(row)",
          "347:         if (isVMScrollProcess($xetable)) {",
          "350:         $xetable.triggerHoverEvent(evnt, { row, rowIndex })",
          "353:         if (isVMScrollProcess($xetable)) {",
          "356:         $xetable.clearHoverRow()",
          "359:     const rowid = getRowid($xetable, row)",
          "363:     const params = { $table: $xetable, seq, rowid, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }",
          "",
          "[Added Lines]",
          "335:   } = $xeTable",
          "341:     const _rowIndex = $xeTable.getVTRowIndex(row)",
          "343:     rowIndex = $xeTable.getRowIndex(row)",
          "347:         if (isVMScrollProcess($xeTable)) {",
          "350:         $xeTable.triggerHoverEvent(evnt, { row, rowIndex })",
          "353:         if (isVMScrollProcess($xeTable)) {",
          "356:         $xeTable.clearHoverRow()",
          "357:       }",
          "358:     }",
          "360:     if (rowOpts.drag) {",
          "361:       trOn.dragstart = (evnt: DragEvent) => {",
          "362:         $xeTable.handleRowDragDragstartEvent(evnt)",
          "363:       }",
          "364:       trOn.dragover = (evnt: DragEvent) => {",
          "365:         $xeTable.handleRowDragDragoverEvent(evnt)",
          "366:       }",
          "367:       trOn.dragend = (evnt: DragEvent) => {",
          "368:         $xeTable.handleRowDragDragendEvent(evnt)",
          "371:     const rowid = getRowid($xeTable, row)",
          "375:     const params = { $table: $xeTable, seq, rowid, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:     let isNewRow = false",
          "371:     if (editConfig) {",
          "373:     }",
          "374:     if (treeConfig && !scrollYLoad && !treeOpts.transform) {",
          "375:       rowChildren = row[childrenField]",
          "",
          "[Removed Lines]",
          "372:       isNewRow = $xetable.isInsertByRow(row)",
          "",
          "[Added Lines]",
          "384:       isNewRow = $xeTable.isInsertByRow(row)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "381:           'vxe-body--row',",
          "382:           treeConfig ? `row--level-${rowLevel}` : '',",
          "383:           {",
          "385:             'is--new': isNewRow,",
          "386:             'is--expand-row': isExpandRow,",
          "387:             'is--expand-tree': isExpandTree,",
          "388:             'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),",
          "391:             'row--pending': pendingRowList.length && !!pendingRowMaps[rowid]",
          "392:           },",
          "393:           rowClassName ? (XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName) : ''",
          "",
          "[Removed Lines]",
          "384:             'row--stripe': stripe && ($xetable.getVTRowIndex(row) + 1) % 2 === 0,",
          "389:             'row--radio': radioOpts.highlight && $xetable.selectRadioRow === row,",
          "390:             'row--checked': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row),",
          "",
          "[Added Lines]",
          "396:             'row--stripe': stripe && ($xeTable.getVTRowIndex(row) + 1) % 2 === 0,",
          "401:             'row--radio': radioOpts.highlight && $xeTable.selectRadioRow === row,",
          "402:             'row--checked': checkboxOpts.highlight && $xeTable.isCheckedByCheckboxRow(row),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "396:           rowid",
          "397:         },",
          "398:         style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null,",
          "400:         on: trOn",
          "401:       }, tableColumn.map((column: any, $columnIndex: any) => {",
          "403:       }))",
          "404:     )",
          "",
          "[Removed Lines]",
          "399:         key: (rowKey || rowOpts.useKey) || treeConfig ? rowid : $rowIndex,",
          "402:         return renderColumn(h, _vm, $xetable, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData)",
          "",
          "[Added Lines]",
          "411:         key: rowKey || rowOpts.useKey || rowOpts.drag || treeConfig ? rowid : $rowIndex,",
          "414:         return renderColumn(h, _vm, $xeTable, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "414:       }",
          "415:       const { showOverflow } = expandColumn",
          "416:       const hasEllipsis = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow",
          "418:       rows.push(",
          "419:         h('tr', {",
          "420:           class: ['vxe-body--expanded-row', {",
          "",
          "[Removed Lines]",
          "417:       const expandParams = { $table: $xetable, seq, column: expandColumn, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }",
          "",
          "[Added Lines]",
          "429:       const expandParams = { $table: $xeTable, seq, column: expandColumn, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "449:     }",
          "451:     if (isExpandTree) {",
          "453:     }",
          "454:   })",
          "455:   return rows",
          "",
          "[Removed Lines]",
          "452:       rows.push(...renderRows(h, _vm, $xetable, fixedType, rowChildren, tableColumn))",
          "",
          "[Added Lines]",
          "464:       rows.push(...renderRows(h, _vm, $xeTable, fixedType, rowChildren, tableColumn))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "501:   },",
          "502:   render (this: any, h: CreateElement) {",
          "503:     const { _e, $parent: $xetable, fixedColumn, fixedType } = this",
          "506:     if (fixedType) {",
          "",
          "[Removed Lines]",
          "504:     let { $scopedSlots, tId, tableData, tableColumn, visibleColumn, expandColumn, showOverflow: allColumnOverflow, keyboardConfig, keyboardOpts, mergeList, spanMethod, scrollXLoad, scrollYLoad, isAllOverflow, emptyOpts, mouseConfig, mouseOpts, sYOpts } = $xetable",
          "",
          "[Added Lines]",
          "516:     let { $scopedSlots, tId, tableData, tableColumn, visibleColumn, expandColumn, showOverflow: allColumnOverflow, keyboardConfig, keyboardOpts, mergeList, spanMethod, scrollXLoad, scrollYLoad, isAllOverflow, emptyOpts, mouseConfig, mouseOpts, sYOpts, rowOpts, isDragRowMove } = $xetable",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "586:       ]),",
          "587:       h('div', {",
          "588:         class: 'vxe-table--checkbox-range'",
          "",
          "[Removed Lines]",
          "583:         h('tbody', {",
          "584:           ref: 'tbody'",
          "585:         }, renderRows(h, this, $xetable, fixedType, tableData, tableColumn))",
          "",
          "[Added Lines]",
          "595:         rowOpts.drag",
          "596:           ? h('transition-group', {",
          "597:             props: {",
          "598:               tag: 'tbody',",
          "599:               name: `vxe-body--row-list${isDragRowMove ? '' : '-disabled'}`",
          "600:             }",
          "601:           }, renderRows(h, this, $xetable, fixedType, tableData, tableColumn))",
          "602:           : h('tbody', {",
          "603:             ref: 'tbody'",
          "604:           }, renderRows(h, this, $xetable, fixedType, tableData, tableColumn))",
          "",
          "---------------"
        ],
        "packages/table/src/cell.ts||packages/table/src/cell.ts": [
          "File: packages/table/src/cell.ts -> packages/table/src/cell.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import { createColumn, getRowid } from './util'",
          "7: import { getSlotVNs } from '../../ui/src/vn'",
          "11: function renderTitlePrefixIcon (h: CreateElement, params: any) {",
          "12:   const { $table, column } = params",
          "",
          "[Removed Lines]",
          "9: const { getI18n, getIcon, renderer, formats } = VxeUI",
          "",
          "[Added Lines]",
          "9: const { getI18n, getIcon, renderer, formats, renderEmptyElement } = VxeUI",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     : []",
          "49: }",
          "51: function renderTitleContent (h: CreateElement, params: any, content: any) {",
          "52:   const { $table, column } = params",
          "53:   const { type, showHeaderOverflow } = column",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: function renderCellDragIcon (h: CreateElement, params: any) {",
          "52:   const { $table } = params",
          "53:   return h('span', {",
          "54:     key: 'dg',",
          "55:     class: 'vxe-cell--drag-handle',",
          "56:     on: {",
          "57:       mousedown (evnt: DragEvent) {",
          "58:         $table.handleCellDragMousedownEvent(evnt, params)",
          "59:       },",
          "60:       mouseup: $table.handleCellDragMouseupEvent",
          "61:     }",
          "62:   }, [",
          "63:     h('i', {",
          "64:       class: 'vxe-table-icon-drag-handle'",
          "65:     })",
          "66:   ])",
          "67: }",
          "69: function renderCellBaseVNs (h: CreateElement, params: any, content: any) {",
          "70:   const { $table, column } = params",
          "71:   const { dragSort } = column",
          "72:   const vns: any[] = XEUtils.isArray(content) ? content : [content]",
          "73:   const rowOpts = $table.computeRowOpts",
          "74:   const dragOpts = $table.computeDragOpts",
          "75:   if (dragSort && rowOpts.drag && dragOpts.showIcon) {",
          "76:     vns.unshift(",
          "77:       renderCellDragIcon(h, params)",
          "78:     )",
          "79:   }",
          "80:   return vns",
          "81: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:     const { slots, editRender, cellRender } = column",
          "235:     const renderOpts = editRender || cellRender",
          "236:     if (slots && slots.default) {",
          "238:     }",
          "239:     if (renderOpts) {",
          "240:       const compConf = renderer.get(renderOpts.name)",
          "",
          "[Removed Lines]",
          "237:       return $table.callSlot(slots.default, params, h)",
          "",
          "[Added Lines]",
          "269:       return renderCellBaseVNs(h, params, $table.callSlot(slots.default, params, h))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:       const rtCell = compConf ? (compConf.renderTableCell || compConf.renderCell) : null",
          "243:       const renderFn = editRender ? rtCell : rtDefault",
          "244:       if (renderFn) {",
          "246:       }",
          "247:     }",
          "248:     const cellValue = $table.getCellLabel(row, column)",
          "249:     const cellPlaceholder = editRender ? editRender.placeholder : ''",
          "251:       h('span', {",
          "252:         class: 'vxe-cell--label'",
          "253:       }, [",
          "",
          "[Removed Lines]",
          "245:         return getSlotVNs(renderFn.call($table, h, renderOpts, Object.assign({ $type: editRender ? 'edit' : 'cell' }, params)))",
          "250:     return [",
          "",
          "[Added Lines]",
          "277:         return renderCellBaseVNs(h, params, getSlotVNs(renderFn.call($table, h, renderOpts, Object.assign({ $type: editRender ? 'edit' : 'cell' }, params))))",
          "282:     return renderCellBaseVNs(h, params, [",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258:           }, formatText(getFuncText(cellPlaceholder), 1))",
          "259:           : h('span', formatText(cellValue, 1))",
          "260:       ])",
          "262:   },",
          "263:   renderTreeCell (h: CreateElement, params: any) {",
          "264:     return Cell.renderTreeIcon(h, params, Cell.renderDefaultCell.call(this, h, params))",
          "",
          "[Removed Lines]",
          "261:     ]",
          "",
          "[Added Lines]",
          "293:     ])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "348:     const { treeConfig, seqOpts } = $table",
          "349:     const { slots } = column",
          "350:     if (slots && slots.default) {",
          "352:     }",
          "353:     const { seq } = params",
          "354:     const seqMethod = seqOpts.seqMethod",
          "356:   },",
          "357:   renderTreeIndexCell (h: CreateElement, params: any) {",
          "358:     return Cell.renderTreeIcon(h, params, Cell.renderSeqCell(h, params))",
          "",
          "[Removed Lines]",
          "351:       return $table.callSlot(slots.default, params, h)",
          "355:     return [formatText(seqMethod ? seqMethod(params) : treeConfig ? seq : (seqOpts.startIndex || 0) + seq, 1)]",
          "",
          "[Added Lines]",
          "383:       return renderCellBaseVNs(h, params, $table.callSlot(slots.default, params, h))",
          "387:     return renderCellBaseVNs(h, params, [",
          "388:       h('span', `${formatText(seqMethod ? seqMethod(params) : treeConfig ? seq : (seqOpts.startIndex || 0) + seq, 1)}`)",
          "389:     ])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "400:     }",
          "401:     const radioParams = { ...params, checked: isChecked, disabled: isDisabled, visible: isVisible }",
          "402:     if (radioSlot) {",
          "404:     }",
          "405:     const radioVNs = []",
          "406:     if (isVisible) {",
          "",
          "[Removed Lines]",
          "403:       return $table.callSlot(radioSlot, radioParams, h)",
          "",
          "[Added Lines]",
          "437:       return renderCellBaseVNs(h, params, $table.callSlot(radioSlot, radioParams, h))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "417:         }, defaultSlot ? $table.callSlot(defaultSlot, radioParams, h) : XEUtils.get(row, labelField))",
          "418:       )",
          "419:     }",
          "421:       h('span', {",
          "422:         class: ['vxe-cell--radio', {",
          "423:           'is--checked': isChecked,",
          "",
          "[Removed Lines]",
          "420:     return [",
          "",
          "[Added Lines]",
          "454:     return renderCellBaseVNs(h, params, [",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "425:         }],",
          "426:         on",
          "427:       }, radioVNs)",
          "429:   },",
          "430:   renderTreeRadioCell (h: CreateElement, params: any) {",
          "431:     return Cell.renderTreeIcon(h, params, Cell.renderRadioCell(h, params))",
          "",
          "[Removed Lines]",
          "428:     ]",
          "",
          "[Added Lines]",
          "462:     ])",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "518:     }",
          "519:     const checkboxParams = { ...params, checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate }",
          "520:     if (checkboxSlot) {",
          "522:     }",
          "523:     const checkVNs = []",
          "524:     if (isVisible) {",
          "",
          "[Removed Lines]",
          "521:       return $table.callSlot(checkboxSlot, checkboxParams, h)",
          "",
          "[Added Lines]",
          "555:       return renderCellBaseVNs(h, params, $table.callSlot(checkboxSlot, checkboxParams, h))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "535:         }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : XEUtils.get(row, labelField))",
          "536:       )",
          "537:     }",
          "539:       h('span', {",
          "540:         class: ['vxe-cell--checkbox', {",
          "541:           'is--checked': isChecked,",
          "",
          "[Removed Lines]",
          "538:     return [",
          "",
          "[Added Lines]",
          "572:     return renderCellBaseVNs(h, params, [",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "545:         }],",
          "546:         on",
          "547:       }, checkVNs)",
          "549:   },",
          "550:   renderTreeSelectionCell (h: CreateElement, params: any) {",
          "551:     return Cell.renderTreeIcon(h, params, Cell.renderCheckboxCell(h, params))",
          "",
          "[Removed Lines]",
          "548:     ]",
          "",
          "[Added Lines]",
          "582:     ])",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "582:     }",
          "583:     const checkboxParams = { ...params, checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate: isIndeterminate }",
          "584:     if (checkboxSlot) {",
          "586:     }",
          "587:     const checkVNs = []",
          "588:     if (isVisible) {",
          "",
          "[Removed Lines]",
          "585:       return $table.callSlot(checkboxSlot, checkboxParams, h)",
          "",
          "[Added Lines]",
          "619:       return renderCellBaseVNs(h, params, $table.callSlot(checkboxSlot, checkboxParams, h))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "599:         }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : XEUtils.get(row, labelField))",
          "600:       )",
          "601:     }",
          "603:       h('span', {",
          "604:         class: ['vxe-cell--checkbox', {",
          "605:           'is--checked': isChecked,",
          "",
          "[Removed Lines]",
          "602:     return [",
          "",
          "[Added Lines]",
          "636:     return renderCellBaseVNs(h, params, [",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "609:         }],",
          "610:         on",
          "611:       }, checkVNs)",
          "613:   },",
          "614:   renderTreeSelectionCellByProp (h: CreateElement, params: any) {",
          "615:     return Cell.renderTreeIcon(h, params, Cell.renderCheckboxCellByProp(h, params))",
          "",
          "[Removed Lines]",
          "612:     ]",
          "",
          "[Added Lines]",
          "646:     ])",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "627:     let isAceived = false",
          "628:     let isLazyLoading = false",
          "629:     if (slots && slots.icon) {",
          "631:     }",
          "632:     if (!isHidden) {",
          "633:       const rowid = getRowid($table, row)",
          "",
          "[Removed Lines]",
          "630:       return $table.callSlot(slots.icon, params, h)",
          "",
          "[Added Lines]",
          "664:       return renderCellBaseVNs(h, params, $table.callSlot(slots.icon, params, h))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "636:         isLazyLoading = !!rowExpandLazyLoadedMaps[rowid]",
          "637:       }",
          "638:     }",
          "640:       showIcon && (!visibleMethod || visibleMethod(params))",
          "641:         ? h('span', {",
          "642:           class: ['vxe-table--expanded', {",
          "",
          "[Removed Lines]",
          "639:     return [",
          "",
          "[Added Lines]",
          "673:     return renderCellBaseVNs(h, params, [",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "652:             class: ['vxe-table--expand-btn', isLazyLoading ? (iconLoaded || getIcon().TABLE_EXPAND_LOADED) : (isAceived ? (iconOpen || getIcon().TABLE_EXPAND_OPEN) : (iconClose || getIcon().TABLE_EXPAND_CLOSE))]",
          "653:           })",
          "654:         ])",
          "656:       defaultSlot || labelField",
          "657:         ? h('span', {",
          "658:           class: 'vxe-table--expand-label'",
          "659:         }, defaultSlot ? $table.callSlot(defaultSlot, params, h) : XEUtils.get(row, labelField))",
          "662:   },",
          "663:   renderExpandData (h: CreateElement, params: any) {",
          "664:     const { $table, column } = params",
          "",
          "[Removed Lines]",
          "655:         : null,",
          "660:         : null",
          "661:     ]",
          "",
          "[Added Lines]",
          "689:         : renderEmptyElement($table),",
          "694:         : renderEmptyElement($table)",
          "695:     ])",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "683:     const { $table, column } = params",
          "684:     const { slots } = column",
          "685:     if (slots && slots.default) {",
          "687:     }",
          "689:       h('span', {",
          "690:         class: 'vxe-cell--html',",
          "691:         domProps: {",
          "692:           innerHTML: getDefaultCellLabel(params)",
          "693:         }",
          "694:       })",
          "696:   },",
          "697:   renderTreeHTMLCell (h: CreateElement, params: any) {",
          "698:     return Cell.renderTreeIcon(h, params, Cell.renderHTMLCell(h, params))",
          "",
          "[Removed Lines]",
          "686:       return $table.callSlot(slots.default, params, h)",
          "688:     return [",
          "695:     ]",
          "",
          "[Added Lines]",
          "720:       return renderCellBaseVNs(h, params, $table.callSlot(slots.default, params, h))",
          "722:     return renderCellBaseVNs(h, params, [",
          "729:     ])",
          "",
          "---------------"
        ],
        "packages/table/src/column.ts||packages/table/src/column.ts": [
          "File: packages/table/src/column.ts -> packages/table/src/column.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   filterRecoverMethod: Function,",
          "66:   filterRender: Object,",
          "68:   treeNode: Boolean,",
          "70:   visible: { type: Boolean, default: null },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   dragSort: Boolean,",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts": [
          "File: packages/table/src/columnInfo.ts -> packages/table/src/columnInfo.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:       filterRecoverMethod: _vm.filterRecoverMethod,",
          "89:       filterRender: _vm.filterRender,",
          "90:       treeNode: _vm.treeNode,",
          "91:       cellType: _vm.cellType,",
          "92:       cellRender: _vm.cellRender,",
          "93:       editRender: _vm.editRender,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:       dragSort: _vm.dragSort,",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:   }",
          "329: }",
          "331: const Methods = {",
          "332:   callSlot (slotFunc: any, params: any, h: any, vNodes: any) {",
          "333:     if (slotFunc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331: function clearRowDropOrigin ($xeTable: any) {",
          "332:   const el = $xeTable.$el",
          "333:   if (el) {",
          "334:     const clss = 'row--drag-origin'",
          "335:     XEUtils.arrayEach(el.querySelectorAll(`.${clss}`), (elem) => {",
          "336:       (elem as HTMLTableCellElement).draggable = false",
          "337:       removeClass(elem, clss)",
          "338:     })",
          "339:   }",
          "340: }",
          "342: function clearRowDropTarget ($xeTable: any) {",
          "343:   const el = $xeTable.$el",
          "344:   if (el) {",
          "345:     const clss = 'row--drag-active-target'",
          "346:     XEUtils.arrayEach(el.querySelectorAll(`.${clss}`), (elem) => {",
          "347:       removeClass(elem, clss)",
          "348:     })",
          "349:   }",
          "350: }",
          "352: function showRowDropTip (evnt: DragEvent | MouseEvent, $xeTable: any) {",
          "353:   const rdTipEl = $xeTable.$refs.refRowDragTipElem as HTMLDivElement",
          "354:   if (!rdTipEl) {",
          "355:     return",
          "356:   }",
          "357:   const el = $xeTable.$el",
          "358:   if (!el) {",
          "359:     return",
          "360:   }",
          "361:   if (rdTipEl) {",
          "362:     const wrapperRect = el.getBoundingClientRect()",
          "363:     rdTipEl.style.display = 'block'",
          "364:     rdTipEl.style.top = `${Math.min(el.clientHeight - el.scrollTop - rdTipEl.clientHeight, evnt.clientY - wrapperRect.y)}px`",
          "365:     rdTipEl.style.left = `${Math.min(el.clientWidth - el.scrollLeft - rdTipEl.clientWidth - 16, evnt.clientX - wrapperRect.x)}px`",
          "366:   }",
          "367: }",
          "369: const hideRowDropTip = ($xeTable: any) => {",
          "370:   const rdTipEl = $xeTable.$refs.refRowDragTipElem as HTMLDivElement",
          "371:   if (rdTipEl) {",
          "372:     rdTipEl.style.display = ''",
          "373:   }",
          "374: }",
          "376: const updateRowDropTipContent = ($xeTable: any, tdEl: HTMLElement) => {",
          "377:   const reactData = $xeTable",
          "379:   reactData.dragTipText = tdEl.textContent || ''",
          "380: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4531:       this.emitEvent('sort-change', params, evnt)",
          "4532:     }",
          "4533:   },",
          "4534:   setPendingRow (rows: any, status: any) {",
          "4535:     const pendingMaps = { ...this.pendingRowMaps }",
          "4536:     const pendingList = [...this.pendingRowList]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4585:   handleRowDragDragstartEvent (evnt: DragEvent) {",
          "4586:     const img = new Image()",
          "4587:     if (evnt.dataTransfer) {",
          "4588:       evnt.dataTransfer.setDragImage(img, 0, 0)",
          "4589:     }",
          "4590:   },",
          "4591:   handleRowDragDragendEvent (evnt: DragEvent) {",
          "4592:     const $xeTable = this",
          "4593:     const props = $xeTable",
          "4594:     const reactData = $xeTable",
          "4595:     const internalData = $xeTable",
          "4597:     const { treeConfig } = props",
          "4598:     const rowOpts = $xeTable.computeRowOpts",
          "4599:     const { dragEndMethod } = rowOpts",
          "4600:     const treeOpts = $xeTable.computeTreeOpts",
          "4601:     const { transform } = treeOpts",
          "4602:     const { dragRow } = reactData",
          "4603:     const { afterFullData, tableFullData, prevDragRow, prevDragPos } = internalData",
          "4604:     if (prevDragRow && dragRow) {",
          "4606:       if (prevDragRow !== dragRow) {",
          "4607:         Promise.resolve(",
          "4608:           dragEndMethod",
          "4609:             ? dragEndMethod({",
          "4610:               oldRow: dragRow,",
          "4611:               newRow: prevDragRow",
          "4612:             })",
          "4613:             : true",
          "4614:         ).then((status) => {",
          "4615:           if (!status) {",
          "4616:             return",
          "4617:           }",
          "4618:           const dragOffsetIndex = prevDragPos === 'bottom' ? 1 : 0",
          "4621:           const oafIndex = $xeTable.findRowIndexOf(afterFullData, dragRow)",
          "4622:           const otfIndex = $xeTable.findRowIndexOf(tableFullData, dragRow)",
          "4623:           afterFullData.splice(oafIndex, 1)",
          "4624:           tableFullData.splice(otfIndex, 1)",
          "4626:           const pafIndex = $xeTable.findRowIndexOf(afterFullData, prevDragRow)",
          "4627:           const ptfIndex = $xeTable.findRowIndexOf(tableFullData, prevDragRow)",
          "4628:           const nafIndex = pafIndex + dragOffsetIndex",
          "4629:           const ntfIndex = ptfIndex + dragOffsetIndex",
          "4630:           afterFullData.splice(nafIndex, 0, dragRow)",
          "4631:           tableFullData.splice(ntfIndex, 0, dragRow)",
          "4633:           reactData.isDragRowMove = true",
          "4634:           $xeTable.cacheRowMap()",
          "4635:           $xeTable.updateScrollYStatus()",
          "4636:           $xeTable.handleTableData(treeConfig && transform)",
          "4637:           if (!(treeConfig && transform)) {",
          "4638:             $xeTable.updateAfterDataIndex()",
          "4639:           }",
          "4640:           $xeTable.updateFooter()",
          "4641:           $xeTable.checkSelectionStatus()",
          "4642:           if (reactData.scrollYLoad) {",
          "4643:             $xeTable.updateScrollYSpace()",
          "4644:           }",
          "4645:           $xeTable.$nextTick().then(() => {",
          "4646:             $xeTable.updateCellAreas()",
          "4647:             return $xeTable.recalculate()",
          "4648:           })",
          "4650:           $xeTable.dispatchEvent('row-dragend', {",
          "4651:             oldRow: dragRow,",
          "4652:             newRow: prevDragRow,",
          "4653:             _index: {",
          "4654:               newIndex: nafIndex,",
          "4655:               oldIndex: oafIndex",
          "4656:             }",
          "4657:           }, evnt)",
          "4658:         }).catch(() => {",
          "4659:         })",
          "4660:       }",
          "4661:     }",
          "4662:     hideRowDropTip($xeTable)",
          "4663:     clearRowDropOrigin($xeTable)",
          "4664:     clearRowDropTarget($xeTable)",
          "4665:     reactData.dragRow = null",
          "4666:     setTimeout(() => {",
          "4667:       reactData.isDragRowMove = false",
          "4668:     }, 500)",
          "4669:   },",
          "4670:   handleRowDragDragoverEvent (evnt: DragEvent) {",
          "4671:     const $xeTable = this",
          "4672:     const internalData = $xeTable",
          "4673:     const reactData = $xeTable",
          "4675:     const trEl = evnt.currentTarget as HTMLElement",
          "4676:     const rowid = trEl.getAttribute('rowid')",
          "4677:     const row = $xeTable.getRowById(rowid)",
          "4678:     clearRowDropTarget($xeTable)",
          "4679:     if (row) {",
          "4680:       evnt.preventDefault()",
          "4681:       evnt.preventDefault()",
          "4682:       const { dragRow } = reactData",
          "4683:       const offsetY = evnt.clientY - trEl.getBoundingClientRect().y",
          "4684:       const dragPos = offsetY < trEl.clientHeight / 2 ? 'top' : 'bottom'",
          "4685:       addClass(trEl, 'row--drag-active-target')",
          "4686:       trEl.setAttribute('drag-pos', dragPos)",
          "4687:       internalData.prevDragRow = row",
          "4688:       internalData.prevDragPos = dragPos",
          "4689:       $xeTable.dispatchEvent('row-dragover', {",
          "4690:         oldRow: dragRow,",
          "4691:         targetRow: row,",
          "4692:         dragPos",
          "4693:       }, evnt)",
          "4694:     }",
          "4695:     showRowDropTip(evnt, $xeTable)",
          "4696:   },",
          "4697:   handleCellDragMousedownEvent (evnt: MouseEvent, params: any) {",
          "4698:     const $xeTable = this",
          "4699:     const reactData = $xeTable",
          "4701:     evnt.stopPropagation()",
          "4702:     const rowOpts = $xeTable.computeRowOpts",
          "4703:     const { dragStartMethod } = rowOpts",
          "4704:     const { row } = params",
          "4705:     const dragEl = evnt.currentTarget as HTMLElement",
          "4706:     const tdEl = dragEl.parentNode?.parentNode as HTMLElement",
          "4707:     const trEl = tdEl.parentNode as HTMLElement",
          "4708:     reactData.isDragRowMove = false",
          "4709:     clearRowDropOrigin($xeTable)",
          "4710:     if (dragStartMethod && !dragStartMethod(params)) {",
          "4711:       trEl.draggable = false",
          "4712:       reactData.dragRow = null",
          "4713:       hideRowDropTip($xeTable)",
          "4714:       return",
          "4715:     }",
          "4716:     reactData.dragRow = row",
          "4717:     trEl.draggable = true",
          "4718:     addClass(trEl, 'row--drag-origin')",
          "4719:     showRowDropTip(evnt, $xeTable)",
          "4720:     updateRowDropTipContent($xeTable, tdEl)",
          "4721:     $xeTable.dispatchEvent('row-dragstart', params, evnt)",
          "4722:   },",
          "4723:   handleCellDragMouseupEvent () {",
          "4724:     const $xeTable = this",
          "4725:     const reactData = $xeTable",
          "4727:     clearRowDropOrigin($xeTable)",
          "4728:     hideRowDropTip($xeTable)",
          "4729:     reactData.dragRow = null",
          "4730:     reactData.isDragRowMove = false",
          "4731:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5384:     const bodyWidth = bodyElem ? bodyElem.clientWidth : 0",
          "5385:     const scrollHeight = bodyElem ? bodyElem.scrollHeight : 0",
          "5386:     const scrollWidth = bodyElem ? bodyElem.scrollWidth : 0",
          "5388:       bodyHeight,",
          "5389:       bodyWidth,",
          "5390:       scrollHeight,",
          "",
          "[Removed Lines]",
          "5387:     $xeTable.dispatchEvent('scroll', {",
          "",
          "[Added Lines]",
          "5585:     const evntParams = {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5392:       isX: isRollX,",
          "5393:       isY: isRollY,",
          "5394:       ...params",
          "5396:   },",
          "",
          "[Removed Lines]",
          "5395:     }, evnt)",
          "",
          "[Added Lines]",
          "5593:     }",
          "5594:     $xeTable.dispatchEvent('scroll', evntParams, evnt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5411:   debounceScrollYData: XEUtils.debounce(function () {",
          "5412:     this.loadScrollYData()",
          "5413:   }, debounceScrollYDuration, { leading: false, trailing: true }),",
          "5415:     const $xeTable = this",
          "5418:     const tableHeader = $xeTable.$refs.tableHeader",
          "5419:     const tableBody = $xeTable.$refs.tableBody",
          "5420:     const tableFooter = $xeTable.$refs.tableFooter",
          "5421:     const bodyElem = tableBody.$el as HTMLDivElement",
          "5422:     const headerElem = tableHeader ? tableHeader.$el as HTMLDivElement : null",
          "5423:     const footerElem = tableFooter ? tableFooter.$el as HTMLDivElement : null",
          "5427:     $xeTable.lastScrollLeft = scrollLeft",
          "5428:     $xeTable.lastScrollTime = Date.now()",
          "5429:     setScrollLeft(bodyElem, scrollLeft)",
          "5430:     setScrollLeft(headerElem, scrollLeft)",
          "5431:     setScrollLeft(footerElem, scrollLeft)",
          "5432:     $xeTable.triggerScrollXEvent(evnt)",
          "5433:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "5434:       type: 'table',",
          "",
          "[Removed Lines]",
          "5414:   scrollXEvent (evnt: Event) {",
          "5417:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "5424:     const { scrollTop, scrollLeft } = wrapperEl",
          "5425:     const isRollX = true",
          "5426:     const isRollY = false",
          "",
          "[Added Lines]",
          "5613:   handleSyncScrollX (scrollLeft: number) {",
          "5627:   },",
          "5628:   scrollXEvent (evnt: Event) {",
          "5629:     const $xeTable = this",
          "5631:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "5632:     const { scrollTop, scrollLeft } = wrapperEl",
          "5633:     const isRollX = true",
          "5634:     const isRollY = false",
          "5635:     $xeTable.lastScrollLeft = scrollLeft",
          "5636:     $xeTable.lastScrollTime = Date.now()",
          "5637:     $xeTable.handleSyncScrollX(scrollLeft)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5440:   debounceScrollYCalculate: XEUtils.debounce(function () {",
          "5441:     this.updateScrollYSpace()",
          "5442:   }, 1000, { leading: false, trailing: true }),",
          "5444:     const $xeTable = this",
          "5447:     const tableBody = $xeTable.$refs.tableBody",
          "5448:     const leftBody = $xeTable.$refs.leftBody",
          "5449:     const rightBody = $xeTable.$refs.rightBody",
          "5450:     const bodyElem = tableBody.$el as HTMLDivElement",
          "5451:     const leftElem = leftBody ? leftBody.$el as HTMLDivElement : null",
          "5452:     const rightElem = rightBody ? rightBody.$el as HTMLDivElement : null",
          "5456:     $xeTable.lastScrollTop = scrollTop",
          "5457:     $xeTable.lastScrollTime = Date.now()",
          "5458:     setScrollTop(bodyElem, scrollTop)",
          "5459:     setScrollTop(leftElem, scrollTop)",
          "5460:     setScrollTop(rightElem, scrollTop)",
          "5461:     $xeTable.triggerScrollYEvent(evnt)",
          "5462:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "5463:       type: 'table',",
          "",
          "[Removed Lines]",
          "5443:   scrollYEvent (evnt: Event) {",
          "5446:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "5453:     const { scrollTop, scrollLeft } = wrapperEl",
          "5454:     const isRollX = false",
          "5455:     const isRollY = true",
          "",
          "[Added Lines]",
          "5649:   handleSyncScrollY (scrollTop: number) {",
          "5663:   },",
          "5664:   scrollYEvent (evnt: Event) {",
          "5665:     const $xeTable = this",
          "5667:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "5668:     const { scrollTop, scrollLeft } = wrapperEl",
          "5669:     const isRollX = false",
          "5670:     const isRollY = true",
          "5671:     $xeTable.lastScrollTop = scrollTop",
          "5672:     $xeTable.lastScrollTime = Date.now()",
          "5673:     $xeTable.handleSyncScrollY(scrollTop)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5542:   },",
          "5543:   updateScrollXData () {",
          "5546:       this.handleTableColumn()",
          "5547:       this.updateScrollXSpace()",
          "5548:     })",
          "",
          "[Removed Lines]",
          "5545:     this.$nextTick(() => {",
          "",
          "[Added Lines]",
          "5758:     return this.$nextTick().then(() => {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5593:     const $xeTable = this",
          "5597:       this.handleTableData()",
          "5598:       calcCellHeight($xeTable)",
          "5599:       this.updateScrollYSpace()",
          "",
          "[Removed Lines]",
          "5596:     this.$nextTick(() => {",
          "",
          "[Added Lines]",
          "5809:     return this.$nextTick().then(() => {",
          "",
          "---------------"
        ],
        "packages/table/src/props.ts||packages/table/src/props.ts": [
          "File: packages/table/src/props.ts -> packages/table/src/props.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   cellConfig: Object as PropType<VxeTablePropTypes.CellConfig>,",
          "167:   rowConfig: Object,",
          "169:   resizableConfig: Object,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   dragConfig: Object as PropType<VxeTablePropTypes.DragConfig>,",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         isHeader: false,",
          "353:         isFooter: false",
          "354:       },",
          "355:       _isLoading: false",
          "356:     }",
          "357:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:       isDragRowMove: false,",
          "356:       dragRow: null,",
          "357:       dragTipText: '',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:     computeRowOpts () {",
          "411:       return Object.assign({}, getConfig().table.rowConfig, this.rowConfig)",
          "412:     },",
          "413:     resizeOpts () {",
          "414:       return this.computeResizeOpts",
          "415:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416:     computeDragOpts () {",
          "417:       return Object.assign({}, getConfig().table.dragConfig, this.dragConfig)",
          "418:     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1330:           }",
          "1331:         })",
          "1332:         : _e(),",
          "1333:       h('div', {}, [",
          "1337:         VxeUITooltipComponent",
          "1338:           ? h(VxeUITooltipComponent, {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1342:       rowOpts.drag",
          "1343:         ? h('div', {",
          "1344:           ref: 'refRowDragTipElem',",
          "1345:           class: 'vxe-table--row-drag-hint'",
          "1346:         }, getI18n('vxe.table.dragTip', [this.dragTipText]))",
          "1347:         : _e(),",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:       strict: true",
          "45:     },",
          "46:     checkboxConfig: {",
          "48:       strict: true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     dragConfig: {",
          "47:       showIcon: true",
          "48:     },",
          "",
          "---------------"
        ],
        "styles/components/table-module/custom.scss||styles/components/table-module/custom.scss": [
          "File: styles/components/table-module/custom.scss -> styles/components/table-module/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   position: relative;",
          "5:   display: flex;",
          "6:   flex-direction: row;",
          "7:   &.active--drag-target {",
          "8:     &[drag-pos=\"top\"] {",
          "9:       &::after {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:   &.active--drag-origin {",
          "8:     opacity: 0.5;",
          "9:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:   padding-left: 0.2em;",
          "167:   padding-right: 0.4em;",
          "168:   &:not(.is--disabled) {",
          "170:     &:hover {",
          "171:       color: var(--vxe-ui-font-primary-color);",
          "172:     }",
          "",
          "[Removed Lines]",
          "169:     cursor: grabbing;",
          "",
          "[Added Lines]",
          "172:     cursor: grab;",
          "173:     &:active {",
          "174:       cursor: grabbing;",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:   position: absolute;",
          "248:   top: 0;",
          "249:   left: 0;",
          "251:   max-width: 300px;",
          "252:   border-radius: var(--vxe-ui-border-radius);",
          "253:   overflow: hidden;",
          "",
          "[Removed Lines]",
          "250:   padding: 0.6em 1em 0.6em 1.8em;",
          "",
          "[Added Lines]",
          "256:   padding: 0.6em 1em 0.6em 1.6em;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:     position: absolute;",
          "339:     left: -1px;",
          "340:     width: calc(100% + 1px);",
          "342:     background-color: var(--vxe-ui-font-primary-color);",
          "343:     z-index: 12;",
          "344:   }",
          "",
          "[Removed Lines]",
          "341:     height: 3px;",
          "",
          "[Added Lines]",
          "347:     height: 2px;",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:     }",
          "1238:   }",
          "1242:   .vxe-header--column,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1241:   .vxe-cell--drag-handle {",
          "1242:     user-select: none;",
          "1243:     & + span {",
          "1244:       padding-left: 0.5em;",
          "1245:     }",
          "1246:     &:not(.is--disabled) {",
          "1247:       cursor: grab;",
          "1248:       &:active {",
          "1249:         cursor: grabbing;",
          "1250:       }",
          "1251:       &:hover {",
          "1252:         color: var(--vxe-ui-font-primary-color);",
          "1253:       }",
          "1254:     }",
          "1255:     &.is--disabled {",
          "1256:       color: var(--vxe-ui-input-disabled-color);",
          "1257:       cursor: not-allowed;",
          "1258:     }",
          "1259:   }",
          "1260:   .vxe-body--row {",
          "1261:     &.row--drag-origin {",
          "1262:       & > .vxe-body--column {",
          "1263:         & > .vxe-cell {",
          "1264:           opacity: 0.5;",
          "1265:         }",
          "1266:       }",
          "1267:     }",
          "1268:     &.row--drag-active-target {",
          "1269:       & > .vxe-body--column {",
          "1270:         &::after {",
          "1271:           display: none;",
          "1272:           content: \"\";",
          "1273:           position: absolute;",
          "1274:           left: 0;",
          "1275:           width: 100%;",
          "1276:           height: 2px;",
          "1277:           background-color: var(--vxe-ui-font-primary-color);",
          "1278:           z-index: 12;",
          "1279:         }",
          "1280:       }",
          "1281:       &[drag-pos=\"top\"] {",
          "1282:         & > .vxe-body--column {",
          "1283:           &::after {",
          "1284:             display: block;",
          "1285:             top: 0;",
          "1286:           }",
          "1287:         }",
          "1288:       }",
          "1289:       &[drag-pos=\"bottom\"] {",
          "1290:         & > .vxe-body--column {",
          "1291:           &::after {",
          "1292:             display: block;",
          "1293:             bottom: 0;",
          "1294:           }",
          "1295:         }",
          "1296:       }",
          "1297:     }",
          "1298:   }",
          "1299:   .vxe-body--row-list-move {",
          "1300:     transition: transform 0.35s;",
          "1301:   }",
          "1302:   .vxe-table--row-drag-hint {",
          "1303:     display: none;",
          "1304:     position: absolute;",
          "1305:     top: 0;",
          "1306:     left: 0;",
          "1307:     padding: 0.6em 1em 0.6em 1.6em;",
          "1308:     max-width: 50%;",
          "1309:     min-width: 100px;",
          "1310:     border-radius: var(--vxe-ui-border-radius);",
          "1311:     overflow: hidden;",
          "1312:     text-overflow: ellipsis;",
          "1313:     white-space: nowrap;",
          "1314:     user-select: none;",
          "1315:     pointer-events: none;",
          "1316:     background-color: var(--vxe-ui-layout-background-color);",
          "1317:     box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2);",
          "1318:     z-index: 33;",
          "1319:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfc5788ca30e634a551918e0aded776545807e52",
      "candidate_info": {
        "commit_hash": "dfc5788ca30e634a551918e0aded776545807e52",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/dfc5788ca30e634a551918e0aded776545807e52",
        "files": [
          "packages/icon/src/icon.js"
        ],
        "message": "fix icon",
        "before_after_code_files": [
          "packages/icon/src/icon.js||packages/icon/src/icon.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/icon/src/icon.js||packages/icon/src/icon.js": [
          "File: packages/icon/src/icon.js -> packages/icon/src/icon.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     status: String",
          "7:   },",
          "8:   render (h) {",
          "9:     return h('i', {",
          "11:       on: {",
          "12:         click: this.clickEvent",
          "13:       }",
          "",
          "[Removed Lines]",
          "10:       class: [`vxe-icon-${this.name}`, this.roll ? 'roll' : ''],",
          "",
          "[Added Lines]",
          "9:     const { name, roll, status } = this",
          "11:       class: [`vxe-icon-${name}`, roll || '', status || ''],",
          "",
          "---------------"
        ]
      }
    }
  ]
}