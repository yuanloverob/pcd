{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "fc6f304e66cab18b6d06a80c7009524938939a03",
  "patch_info": {
    "commit_hash": "fc6f304e66cab18b6d06a80c7009524938939a03",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/fc6f304e66cab18b6d06a80c7009524938939a03",
    "files": [
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Cherry pick ENF introspection and make ExecutableNormalizedOperationFactory closer to structure on master",
    "before_after_code_files": [
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:         this.errors.set(builder.errors);",
      "81:         this.localContext = builder.localContext;",
      "82:         this.executionInput = builder.executionInput;",
      "84:     }",
      "",
      "[Removed Lines]",
      "83:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "83:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import java.util.Optional;",
      "19: import java.util.concurrent.atomic.AtomicBoolean;",
      "21: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "22: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "46:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "56:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "77:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "79:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "80:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "81:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "78:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "88:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:         return Optional.empty();",
      "91:     }",
      "93:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "94:         if (!isEnabledJvmWide()) {",
      "95:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "112:         Options options = Options.defaultOptions()",
      "113:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "114:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "115:                 .locale(executionContext.getLocale())",
      "116:                 .graphQLContext(executionContext.getGraphQLContext());",
      "118:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "119:                 executionContext.getOperationDefinition(),",
      "120:                 executionContext.getFragmentsByName(),",
      "121:                 executionContext.getCoercedVariables(),",
      "122:                 options);",
      "124:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "33:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "35:     public ExecutableNormalizedOperation(",
      "36:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "40:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "41:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:         this.operation = operation;",
      "45:         this.operationName = operationName;",
      "46:         this.topLevelFields = topLevelFields;",
      "",
      "[Removed Lines]",
      "42:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "43:     ) {",
      "",
      "[Added Lines]",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "48:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "49:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "50:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "51:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:         return operationName;",
      "65:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import graphql.schema.GraphQLObjectType;",
      "35: import graphql.schema.GraphQLSchema;",
      "36: import graphql.schema.GraphQLType;",
      "38: import graphql.schema.GraphQLUnionType;",
      "39: import graphql.schema.GraphQLUnmodifiedType;",
      "40: import graphql.schema.impl.SchemaUtil;",
      "",
      "[Removed Lines]",
      "37: import graphql.schema.GraphQLTypeUtil;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: import java.util.Locale;",
      "48: import java.util.Map;",
      "49: import java.util.Set;",
      "52: import static graphql.Assert.assertNotNull;",
      "53: import static graphql.Assert.assertShouldNeverHappen;",
      "",
      "[Removed Lines]",
      "50: import java.util.function.BiConsumer;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66: @PublicApi",
      "67: public class ExecutableNormalizedOperationFactory {",
      "68:     public static class Options {",
      "69:         private final GraphQLContext graphQLContext;",
      "70:         private final Locale locale;",
      "71:         private final int maxChildrenDepth;",
      "73:         private Options(GraphQLContext graphQLContext,",
      "74:                         Locale locale,",
      "76:             this.graphQLContext = graphQLContext;",
      "77:             this.locale = locale;",
      "78:             this.maxChildrenDepth = maxChildrenDepth;",
      "79:         }",
      "81:         public static Options defaultOptions() {",
      "82:             return new Options(",
      "83:                     GraphQLContext.getDefault(),",
      "84:                     Locale.getDefault(),",
      "86:         }",
      "",
      "[Removed Lines]",
      "75:                         int maxChildrenDepth) {",
      "85:                     Integer.MAX_VALUE);",
      "",
      "[Added Lines]",
      "71:         private final int maxFieldsCount;",
      "73:         private final boolean deferSupport;",
      "77:                         int maxChildrenDepth,",
      "78:                         int maxFieldsCount,",
      "79:                         boolean deferSupport) {",
      "83:             this.deferSupport = deferSupport;",
      "84:             this.maxFieldsCount = maxFieldsCount;",
      "91:                     Integer.MAX_VALUE,",
      "92:                     Integer.MAX_VALUE,",
      "93:                     false);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "96:         public Options locale(Locale locale) {",
      "98:         }",
      "",
      "[Removed Lines]",
      "97:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth);",
      "",
      "[Added Lines]",
      "106:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "108:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "110:         }",
      "",
      "[Removed Lines]",
      "109:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth);",
      "",
      "[Added Lines]",
      "119:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "121:         }",
      "127:         public GraphQLContext getGraphQLContext() {",
      "",
      "[Removed Lines]",
      "120:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth);",
      "",
      "[Added Lines]",
      "131:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "132:         }",
      "142:         public Options maxFieldsCount(int maxFieldsCount) {",
      "143:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:         public int getMaxChildrenDepth() {",
      "144:             return maxChildrenDepth;",
      "145:         }",
      "146:     }",
      "",
      "[Removed Lines]",
      "148:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "",
      "[Added Lines]",
      "173:         public int getMaxFieldsCount() {",
      "174:             return maxFieldsCount;",
      "175:         }",
      "179:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "181:     private ExecutableNormalizedOperationFactory() {",
      "183:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:             Document document,",
      "164:             String operationName,",
      "165:             CoercedVariables coercedVariableValues",
      "166:     ) {",
      "167:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "169:                 getOperationResult.operationDefinition,",
      "170:                 getOperationResult.fragmentsByName,",
      "171:                 coercedVariableValues,",
      "172:                 null,",
      "174:     }",
      "",
      "[Removed Lines]",
      "168:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
      "173:                 Options.defaultOptions());",
      "",
      "[Added Lines]",
      "201:     ) {",
      "202:         return createExecutableNormalizedOperation(",
      "203:                 graphQLSchema,",
      "204:                 document,",
      "205:                 operationName,",
      "206:                 coercedVariableValues,",
      "207:                 Options.defaultOptions());",
      "208:     }",
      "222:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "223:             GraphQLSchema graphQLSchema,",
      "224:             Document document,",
      "225:             String operationName,",
      "226:             CoercedVariables coercedVariableValues,",
      "227:             Options options",
      "231:         return new ExecutableNormalizedOperationFactoryImpl(",
      "232:                 graphQLSchema,",
      "237:                 options",
      "238:         ).createNormalizedQueryImpl();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "188:                                                                                     OperationDefinition operationDefinition,",
      "189:                                                                                     Map<String, FragmentDefinition> fragments,",
      "190:                                                                                     CoercedVariables coercedVariableValues) {",
      "192:                 operationDefinition,",
      "193:                 fragments,",
      "194:                 coercedVariableValues,",
      "196:                 Options.defaultOptions());",
      "197:     }",
      "",
      "[Removed Lines]",
      "191:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
      "195:                 null,",
      "",
      "[Added Lines]",
      "256:         return createExecutableNormalizedOperation(graphQLSchema,",
      "274:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "275:                                                                                     OperationDefinition operationDefinition,",
      "276:                                                                                     Map<String, FragmentDefinition> fragments,",
      "277:                                                                                     CoercedVariables coercedVariableValues,",
      "278:                                                                                     Options options) {",
      "279:         return new ExecutableNormalizedOperationFactoryImpl(",
      "280:                 graphQLSchema,",
      "281:                 operationDefinition,",
      "282:                 fragments,",
      "283:                 coercedVariableValues,",
      "284:                 null,",
      "285:                 options",
      "286:         ).createNormalizedQueryImpl();",
      "287:     }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "267:                                                                                                     RawVariables rawVariables,",
      "268:                                                                                                     Options options) {",
      "269:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "284:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "285:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
      "286:                 variableDefinitions,",
      "",
      "[Removed Lines]",
      "271:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema,",
      "272:                 getOperationResult.operationDefinition,",
      "273:                 getOperationResult.fragmentsByName,",
      "274:                 rawVariables,",
      "275:                 options",
      "276:         );",
      "277:     }",
      "279:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
      "280:                                                                                                   OperationDefinition operationDefinition,",
      "281:                                                                                                   Map<String, FragmentDefinition> fragments,",
      "282:                                                                                                   RawVariables rawVariables,",
      "283:                                                                                                   Options options) {",
      "",
      "[Added Lines]",
      "360:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "292:                 rawVariables,",
      "293:                 options.getGraphQLContext(),",
      "294:                 options.getLocale());",
      "296:                 operationDefinition,",
      "298:                 coercedVariableValues,",
      "299:                 normalizedVariableValues,",
      "368:     }",
      "381:         }",
      "415:         }",
      "422:         }",
      "455:         }",
      "461:             }",
      "470:         }",
      "484:         }",
      "519:                 }",
      "522:                 }",
      "527:             }",
      "528:         }",
      "584:         }",
      "602:             }",
      "603:         }",
      "619:         }",
      "623:         }",
      "659:         }",
      "667:         }",
      "682:         }",
      "686:         }",
      "697:         }",
      "710:             }",
      "711:         }",
      "726:         }",
      "727:     }",
      "",
      "[Removed Lines]",
      "295:         return createNormalizedQueryImpl(graphQLSchema,",
      "297:                 fragments,",
      "300:                 options);",
      "301:     }",
      "306:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
      "307:                                                                     OperationDefinition operationDefinition,",
      "308:                                                                     Map<String, FragmentDefinition> fragments,",
      "309:                                                                     CoercedVariables coercedVariableValues,",
      "310:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "311:                                                                     Options options) {",
      "312:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
      "313:                 .newParameters()",
      "314:                 .fragments(fragments)",
      "315:                 .schema(graphQLSchema)",
      "316:                 .coercedVariables(coercedVariableValues.toMap())",
      "317:                 .normalizedVariables(normalizedVariableValues)",
      "318:                 .build();",
      "320:         GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "322:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
      "324:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "325:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "326:         ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "327:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "329:         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
      "331:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
      "332:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "333:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "334:         };",
      "336:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "337:             ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "338:             MergedField mergedField = newMergedField(fieldAndAstParents);",
      "340:             captureMergedField.accept(topLevel, mergedField);",
      "342:             updateFieldToNFMap(topLevel, fieldAndAstParents, fieldToNormalizedField);",
      "343:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
      "345:             buildFieldWithChildren(",
      "346:                     topLevel,",
      "347:                     fieldAndAstParents,",
      "348:                     parameters,",
      "349:                     fieldToNormalizedField,",
      "350:                     captureMergedField,",
      "351:                     coordinatesToNormalizedFields,",
      "352:                     1,",
      "353:                     options.getMaxChildrenDepth());",
      "354:         }",
      "355:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.getPossibleMergerList()) {",
      "356:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "357:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "358:         }",
      "359:         return new ExecutableNormalizedOperation(",
      "360:                 operationDefinition.getOperation(),",
      "361:                 operationDefinition.getName(),",
      "362:                 new ArrayList<>(collectFromOperationResult.children),",
      "363:                 fieldToNormalizedField.build(),",
      "364:                 normalizedFieldToMergedField.build(),",
      "365:                 normalizedFieldToQueryDirectives.build(),",
      "366:                 coordinatesToNormalizedFields.build()",
      "367:         );",
      "371:     private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "372:                                         ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "373:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
      "374:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
      "375:                                         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
      "376:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "377:                                         int curLevel,",
      "378:                                         int maxLevel) {",
      "379:         if (curLevel > maxLevel) {",
      "380:             throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
      "383:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "385:         for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "386:             executableNormalizedField.addChild(childENF);",
      "387:             ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "389:             MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "390:             captureMergedField.accept(childENF, mergedField);",
      "392:             updateFieldToNFMap(childENF, childFieldAndAstParents, fieldNormalizedField);",
      "393:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, childENF);",
      "395:             buildFieldWithChildren(childENF,",
      "396:                     childFieldAndAstParents,",
      "397:                     fieldCollectorNormalizedQueryParams,",
      "398:                     fieldNormalizedField,",
      "399:                     captureMergedField,",
      "400:                     coordinatesToNormalizedFields,",
      "401:                     curLevel + 1,",
      "402:                     maxLevel);",
      "403:         }",
      "404:     }",
      "406:     private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "407:         return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "408:     }",
      "410:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "411:                                     ImmutableList<FieldAndAstParent> mergedField,",
      "412:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
      "413:         for (FieldAndAstParent astField : mergedField) {",
      "414:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "416:     }",
      "418:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
      "419:         for (String objectType : topLevel.getObjectTypeNames()) {",
      "420:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "421:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "423:     }",
      "425:     private static class FieldAndAstParent {",
      "426:         final Field field;",
      "427:         final GraphQLCompositeType astParentType;",
      "429:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "430:             this.field = field;",
      "431:             this.astParentType = astParentType;",
      "432:         }",
      "433:     }",
      "436:     public static class CollectNFResult {",
      "437:         private final Collection<ExecutableNormalizedField> children;",
      "438:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "440:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "441:             this.children = children;",
      "442:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "443:         }",
      "444:     }",
      "447:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
      "448:                                                   ExecutableNormalizedField executableNormalizedField,",
      "449:                                                   ImmutableList<FieldAndAstParent> mergedField,",
      "450:                                                   int level) {",
      "451:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
      "452:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
      "453:         if (possibleObjects.isEmpty()) {",
      "454:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "457:         List<CollectedField> collectedFields = new ArrayList<>();",
      "458:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "459:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "460:                 continue;",
      "462:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "463:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "464:             this.collectFromSelectionSet(parameters,",
      "465:                     fieldAndAstParent.field.getSelectionSet(),",
      "466:                     collectedFields,",
      "467:                     (GraphQLCompositeType) astParentType,",
      "468:                     possibleObjects",
      "469:             );",
      "471:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "472:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "473:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "475:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "477:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "478:     }",
      "480:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "481:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "482:         for (CollectedField collectedField : collectedFields) {",
      "483:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "485:         return fieldsByName;",
      "486:     }",
      "488:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
      "489:                                                 OperationDefinition operationDefinition,",
      "490:                                                 GraphQLObjectType rootType) {",
      "493:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "494:         List<CollectedField> collectedFields = new ArrayList<>();",
      "495:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "497:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "498:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "499:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "501:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "503:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "504:     }",
      "506:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "507:                            FieldCollectorNormalizedQueryParams parameters,",
      "508:                            Map<String, List<CollectedField>> fieldsByName,",
      "509:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "510:                            int level,",
      "511:                            ExecutableNormalizedField parent) {",
      "512:         for (String resultKey : fieldsByName.keySet()) {",
      "513:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "514:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "515:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "516:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
      "517:                 if (nf == null) {",
      "518:                     continue;",
      "520:                 for (CollectedField collectedField : fieldGroup.fields) {",
      "521:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "523:                 nfListBuilder.add(nf);",
      "524:             }",
      "525:             if (commonParentsGroups.size() > 1) {",
      "526:                 parameters.addPossibleMergers(parent, resultKey);",
      "529:     }",
      "531:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
      "532:                                                CollectedFieldGroup collectedFieldGroup,",
      "533:                                                int level,",
      "534:                                                ExecutableNormalizedField parent) {",
      "535:         Field field;",
      "536:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "537:         field = collectedFieldGroup.fields.iterator().next().field;",
      "538:         String fieldName = field.getName();",
      "539:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
      "541:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(parameters.getCoercedVariableValues()), parameters.getGraphQLContext(), parameters.getLocale());",
      "542:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "543:         if (parameters.getNormalizedVariableValues() != null) {",
      "544:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
      "545:         }",
      "546:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "548:         return ExecutableNormalizedField.newNormalizedField()",
      "549:                 .alias(field.getAlias())",
      "550:                 .resolvedArguments(argumentValues)",
      "551:                 .normalizedArguments(normalizedArgumentValues)",
      "552:                 .astArguments(field.getArguments())",
      "553:                 .objectTypeNames(objectTypeNames)",
      "554:                 .fieldName(fieldName)",
      "555:                 .level(level)",
      "556:                 .parent(parent)",
      "557:                 .build();",
      "558:     }",
      "560:     private static class CollectedFieldGroup {",
      "561:         Set<GraphQLObjectType> objectTypes;",
      "562:         Set<CollectedField> fields;",
      "564:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "565:             this.fields = fields;",
      "566:             this.objectTypes = objectTypes;",
      "567:         }",
      "568:     }",
      "570:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "571:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "572:         for (CollectedField collectedField : fields) {",
      "573:             objectTypes.addAll(collectedField.objectTypes);",
      "574:         }",
      "575:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "576:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "577:         if (groupByAstParent.size() == 1) {",
      "578:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "579:         }",
      "580:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "581:         for (GraphQLObjectType objectType : allRelevantObjects) {",
      "582:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "583:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "585:         return result.build();",
      "586:     }",
      "589:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
      "590:                                          SelectionSet selectionSet,",
      "591:                                          List<CollectedField> result,",
      "592:                                          GraphQLCompositeType astTypeCondition,",
      "593:                                          Set<GraphQLObjectType> possibleObjects",
      "594:     ) {",
      "595:         for (Selection<?> selection : selectionSet.getSelections()) {",
      "596:             if (selection instanceof Field) {",
      "597:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
      "598:             } else if (selection instanceof InlineFragment) {",
      "599:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "600:             } else if (selection instanceof FragmentSpread) {",
      "601:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects);",
      "604:     }",
      "606:     private static class CollectedField {",
      "607:         Field field;",
      "608:         Set<GraphQLObjectType> objectTypes;",
      "609:         GraphQLCompositeType astTypeCondition;",
      "611:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "612:             this.field = field;",
      "613:             this.objectTypes = objectTypes;",
      "614:             this.astTypeCondition = astTypeCondition;",
      "615:         }",
      "617:         public boolean isAbstract() {",
      "618:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
      "621:         public boolean isConcrete() {",
      "622:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
      "624:     }",
      "626:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
      "627:                                        List<CollectedField> result,",
      "628:                                        FragmentSpread fragmentSpread,",
      "629:                                        Set<GraphQLObjectType> possibleObjects",
      "630:     ) {",
      "631:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "632:                 parameters.getCoercedVariableValues(),",
      "633:                 parameters.getGraphQLSchema(),",
      "634:                 parameters.getGraphQLContext())) {",
      "635:             return;",
      "636:         }",
      "637:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
      "639:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "640:                 parameters.getCoercedVariableValues(),",
      "641:                 parameters.getGraphQLSchema(),",
      "642:                 parameters.getGraphQLContext())) {",
      "643:             return;",
      "644:         }",
      "645:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
      "646:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "647:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "648:     }",
      "651:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
      "652:                                        List<CollectedField> result,",
      "653:                                        InlineFragment inlineFragment,",
      "654:                                        Set<GraphQLObjectType> possibleObjects,",
      "655:                                        GraphQLCompositeType astTypeCondition",
      "656:     ) {",
      "657:         if (!conditionalNodes.shouldInclude(inlineFragment, parameters.getCoercedVariableValues(), parameters.getGraphQLSchema(), parameters.getGraphQLContext())) {",
      "658:             return;",
      "660:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "661:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "663:         if (inlineFragment.getTypeCondition() != null) {",
      "664:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
      "665:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "668:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "669:     }",
      "671:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
      "672:                               List<CollectedField> result,",
      "673:                               Field field,",
      "674:                               Set<GraphQLObjectType> possibleObjectTypes,",
      "675:                               GraphQLCompositeType astTypeCondition",
      "676:     ) {",
      "677:         if (!conditionalNodes.shouldInclude(field,",
      "678:                 parameters.getCoercedVariableValues(),",
      "679:                 parameters.getGraphQLSchema(),",
      "680:                 parameters.getGraphQLContext())) {",
      "681:             return;",
      "684:         if (possibleObjectTypes.isEmpty()) {",
      "685:             return;",
      "687:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "688:     }",
      "690:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "691:                                                              GraphQLCompositeType typeCondition,",
      "692:                                                              GraphQLSchema graphQLSchema) {",
      "694:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
      "695:         if (currentOnes.isEmpty()) {",
      "696:             return resolvedTypeCondition;",
      "700:         return intersection(currentOnes, resolvedTypeCondition);",
      "701:     }",
      "703:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
      "704:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "706:         for (GraphQLFieldDefinition def : defs) {",
      "707:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "708:             if (outputType instanceof GraphQLCompositeType) {",
      "709:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
      "713:         return builder.build();",
      "714:     }",
      "716:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
      "717:         if (type instanceof GraphQLObjectType) {",
      "718:             return ImmutableSet.of((GraphQLObjectType) type);",
      "719:         } else if (type instanceof GraphQLInterfaceType) {",
      "720:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "721:         } else if (type instanceof GraphQLUnionType) {",
      "722:             List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "723:             return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "724:         } else {",
      "725:             return assertShouldNeverHappen();",
      "728: }",
      "",
      "[Added Lines]",
      "374:         return new ExecutableNormalizedOperationFactoryImpl(",
      "375:                 graphQLSchema,",
      "377:                 getOperationResult.fragmentsByName,",
      "380:                 options",
      "381:         ).createNormalizedQueryImpl();",
      "385:     private static class ExecutableNormalizedOperationFactoryImpl {",
      "386:         private final GraphQLSchema graphQLSchema;",
      "387:         private final OperationDefinition operationDefinition;",
      "388:         private final Map<String, FragmentDefinition> fragments;",
      "389:         private final CoercedVariables coercedVariableValues;",
      "390:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
      "391:         private final Options options;",
      "393:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
      "395:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "396:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "397:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "398:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "399:         private int fieldCount = 0;",
      "400:         private int maxDepthSeen = 0;",
      "402:         private ExecutableNormalizedOperationFactoryImpl(",
      "403:                 GraphQLSchema graphQLSchema,",
      "404:                 OperationDefinition operationDefinition,",
      "405:                 Map<String, FragmentDefinition> fragments,",
      "406:                 CoercedVariables coercedVariableValues,",
      "407:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "408:                 Options options",
      "409:         ) {",
      "410:             this.graphQLSchema = graphQLSchema;",
      "411:             this.operationDefinition = operationDefinition;",
      "412:             this.fragments = fragments;",
      "413:             this.coercedVariableValues = coercedVariableValues;",
      "414:             this.normalizedVariableValues = normalizedVariableValues;",
      "415:             this.options = options;",
      "421:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
      "422:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "424:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
      "426:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "427:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "428:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
      "430:                 captureMergedField(topLevel, mergedField);",
      "432:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "433:                 updateCoordinatedToNFMap(topLevel);",
      "435:                 int depthSeen = buildFieldWithChildren(",
      "436:                         topLevel,",
      "437:                         fieldAndAstParents,",
      "438:                         1);",
      "439:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "440:             }",
      "442:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "443:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "444:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "445:             }",
      "446:             return new ExecutableNormalizedOperation(",
      "447:                     operationDefinition.getOperation(),",
      "448:                     operationDefinition.getName(),",
      "449:                     new ArrayList<>(collectFromOperationResult.children),",
      "450:                     fieldToNormalizedField.build(),",
      "451:                     normalizedFieldToMergedField.build(),",
      "452:                     normalizedFieldToQueryDirectives.build(),",
      "453:                     coordinatesToNormalizedFields.build(),",
      "454:                     fieldCount,",
      "455:                     maxDepthSeen",
      "456:             );",
      "459:         private void captureMergedField(ExecutableNormalizedField enf, MergedField mergedFld) {",
      "461:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
      "462:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "463:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "466:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "467:                                            ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "468:                                            int curLevel) {",
      "469:             checkMaxDepthExceeded(curLevel);",
      "471:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "473:             int maxDepthSeen = curLevel;",
      "474:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "475:                 executableNormalizedField.addChild(childENF);",
      "476:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "478:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "479:                 captureMergedField(childENF, mergedField);",
      "481:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "482:                 updateCoordinatedToNFMap(childENF);",
      "484:                 int depthSeen = buildFieldWithChildren(childENF,",
      "485:                         childFieldAndAstParents,",
      "486:                         curLevel + 1);",
      "487:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "489:                 checkMaxDepthExceeded(maxDepthSeen);",
      "490:             }",
      "491:             return maxDepthSeen;",
      "494:         private void checkMaxDepthExceeded(int depthSeen) {",
      "495:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "496:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "500:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "501:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "502:         }",
      "504:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "505:                                         ImmutableList<FieldAndAstParent> mergedField) {",
      "506:             for (FieldAndAstParent astField : mergedField) {",
      "507:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "508:             }",
      "511:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
      "512:             for (String objectType : topLevel.getObjectTypeNames()) {",
      "513:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "514:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "515:             }",
      "516:         }",
      "518:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
      "519:                                                       ImmutableList<FieldAndAstParent> mergedField,",
      "520:                                                       int level) {",
      "521:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
      "522:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
      "523:             if (possibleObjects.isEmpty()) {",
      "524:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "525:             }",
      "527:             List<CollectedField> collectedFields = new ArrayList<>();",
      "528:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "529:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "530:                     continue;",
      "531:                 }",
      "532:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "533:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "534:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
      "535:                         collectedFields,",
      "536:                         (GraphQLCompositeType) astParentType,",
      "537:                         possibleObjects",
      "538:                 );",
      "539:             }",
      "540:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "541:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "542:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "544:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "546:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "547:         }",
      "549:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "550:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "551:             for (CollectedField collectedField : collectedFields) {",
      "552:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "553:             }",
      "554:             return fieldsByName;",
      "555:         }",
      "557:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
      "560:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "561:             List<CollectedField> collectedFields = new ArrayList<>();",
      "562:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "564:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "565:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "566:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "568:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "570:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "571:         }",
      "573:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "574:                                Map<String, List<CollectedField>> fieldsByName,",
      "575:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "576:                                int level,",
      "577:                                ExecutableNormalizedField parent) {",
      "578:             for (String resultKey : fieldsByName.keySet()) {",
      "579:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "580:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "581:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "582:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
      "583:                     if (nf == null) {",
      "584:                         continue;",
      "585:                     }",
      "586:                     for (CollectedField collectedField : fieldGroup.fields) {",
      "587:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "588:                     }",
      "589:                     nfListBuilder.add(nf);",
      "591:                 if (commonParentsGroups.size() > 1) {",
      "592:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
      "597:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "598:                                                    int level,",
      "599:                                                    ExecutableNormalizedField parent) {",
      "601:             this.fieldCount++;",
      "602:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "603:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "604:             }",
      "605:             Field field;",
      "606:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "607:             field = collectedFieldGroup.fields.iterator().next().field;",
      "608:             String fieldName = field.getName();",
      "609:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
      "611:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()), this.options.graphQLContext, this.options.locale);",
      "612:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "613:             if (this.normalizedVariableValues != null) {",
      "614:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
      "615:             }",
      "616:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "617:             return ExecutableNormalizedField.newNormalizedField()",
      "618:                     .alias(field.getAlias())",
      "619:                     .resolvedArguments(argumentValues)",
      "620:                     .normalizedArguments(normalizedArgumentValues)",
      "621:                     .astArguments(field.getArguments())",
      "622:                     .objectTypeNames(objectTypeNames)",
      "623:                     .fieldName(fieldName)",
      "624:                     .level(level)",
      "625:                     .parent(parent)",
      "626:                     .build();",
      "627:         }",
      "629:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "630:             return groupByCommonParentsNoDeferSupport(fields);",
      "631:         }",
      "633:         private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
      "634:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "635:             for (CollectedField collectedField : fields) {",
      "636:                 objectTypes.addAll(collectedField.objectTypes);",
      "637:             }",
      "638:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "639:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "640:             if (groupByAstParent.size() == 1) {",
      "641:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "642:             }",
      "643:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "644:             for (GraphQLObjectType objectType : allRelevantObjects) {",
      "645:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "646:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "647:             }",
      "648:             return result.build();",
      "649:         }",
      "651:         private void collectFromSelectionSet(SelectionSet selectionSet,",
      "652:                                              List<CollectedField> result,",
      "653:                                              GraphQLCompositeType astTypeCondition,",
      "654:                                              Set<GraphQLObjectType> possibleObjects",
      "655:         ) {",
      "656:             for (Selection<?> selection : selectionSet.getSelections()) {",
      "657:                 if (selection instanceof Field) {",
      "658:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
      "659:                 } else if (selection instanceof InlineFragment) {",
      "660:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "661:                 } else if (selection instanceof FragmentSpread) {",
      "662:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
      "663:                 }",
      "664:             }",
      "667:         private void collectFragmentSpread(List<CollectedField> result,",
      "668:                                            FragmentSpread fragmentSpread,",
      "669:                                            Set<GraphQLObjectType> possibleObjects",
      "670:         ) {",
      "671:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "672:                     this.coercedVariableValues.toMap(),",
      "673:                     this.graphQLSchema,",
      "674:                     this.options.graphQLContext)) {",
      "675:                 return;",
      "676:             }",
      "677:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
      "679:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "680:                     this.coercedVariableValues.toMap(),",
      "681:                     this.graphQLSchema,",
      "682:                     this.options.graphQLContext)) {",
      "683:                 return;",
      "685:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
      "686:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "688:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "691:         private void collectInlineFragment(List<CollectedField> result,",
      "692:                                            InlineFragment inlineFragment,",
      "693:                                            Set<GraphQLObjectType> possibleObjects,",
      "694:                                            GraphQLCompositeType astTypeCondition",
      "695:         ) {",
      "696:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
      "697:                 return;",
      "698:             }",
      "699:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "700:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "702:             if (inlineFragment.getTypeCondition() != null) {",
      "703:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
      "704:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "706:             }",
      "708:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "711:         private void collectField(List<CollectedField> result,",
      "712:                                   Field field,",
      "713:                                   Set<GraphQLObjectType> possibleObjectTypes,",
      "714:                                   GraphQLCompositeType astTypeCondition",
      "715:         ) {",
      "716:             if (!conditionalNodes.shouldInclude(field,",
      "717:                     this.coercedVariableValues.toMap(),",
      "718:                     this.graphQLSchema,",
      "719:                     this.options.graphQLContext)) {",
      "720:                 return;",
      "721:             }",
      "723:             if (possibleObjectTypes.isEmpty()) {",
      "724:                 return;",
      "725:             }",
      "726:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "729:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "730:                                                                  GraphQLCompositeType typeCondition) {",
      "732:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
      "733:             if (currentOnes.isEmpty()) {",
      "734:                 return resolvedTypeCondition;",
      "735:             }",
      "738:             return intersection(currentOnes, resolvedTypeCondition);",
      "741:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
      "742:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "744:             for (GraphQLFieldDefinition def : defs) {",
      "745:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "746:                 if (outputType instanceof GraphQLCompositeType) {",
      "747:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
      "748:                 }",
      "749:             }",
      "751:             return builder.build();",
      "754:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
      "755:             if (type instanceof GraphQLObjectType) {",
      "756:                 return ImmutableSet.of((GraphQLObjectType) type);",
      "757:             } else if (type instanceof GraphQLInterfaceType) {",
      "758:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "759:             } else if (type instanceof GraphQLUnionType) {",
      "760:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "761:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "762:             } else {",
      "763:                 return assertShouldNeverHappen();",
      "764:             }",
      "767:         private static class PossibleMerger {",
      "768:             ExecutableNormalizedField parent;",
      "769:             String resultKey;",
      "771:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
      "772:                 this.parent = parent;",
      "773:                 this.resultKey = resultKey;",
      "774:             }",
      "777:         private static class CollectedField {",
      "778:             Field field;",
      "779:             Set<GraphQLObjectType> objectTypes;",
      "780:             GraphQLCompositeType astTypeCondition;",
      "782:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "783:                 this.field = field;",
      "784:                 this.objectTypes = objectTypes;",
      "785:                 this.astTypeCondition = astTypeCondition;",
      "786:             }",
      "789:         public static class CollectNFResult {",
      "790:             private final Collection<ExecutableNormalizedField> children;",
      "791:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "793:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "794:                 this.children = children;",
      "795:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "796:             }",
      "797:         }",
      "799:         private static class FieldAndAstParent {",
      "800:             final Field field;",
      "801:             final GraphQLCompositeType astParentType;",
      "803:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "804:                 this.field = field;",
      "805:                 this.astParentType = astParentType;",
      "809:         private static class CollectedFieldGroup {",
      "810:             Set<GraphQLObjectType> objectTypes;",
      "811:             Set<CollectedField> fields;",
      "813:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "814:                 this.fields = fields;",
      "815:                 this.objectTypes = objectTypes;",
      "816:             }",
      "820: }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "893:         given:",
      "894:         def graphQLSchema = createComplexSchema()",
      "896:         when:",
      "898:             {",
      "899:                 nodeType: __type(name: \"Node\") {",
      "900:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "899:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "902:                         name",
      "903:                     }",
      "904:                 }",
      "906:                     possibleTypes {",
      "907:                         kind",
      "908:                         name",
      "",
      "[Removed Lines]",
      "905:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "907:             }",
      "908:         \"\"\"",
      "909:         def result = graphQL.execute(query)",
      "911:         then:",
      "912:         !result.errors",
      "913:         result.data == [",
      "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "915:         ]",
      "917:         when:",
      "918:         query = \"\"\"",
      "919:         {",
      "920:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "911:                         kind",
      "912:                         name",
      "913:                     }",
      "916:                     interfaces {",
      "917:                         kind",
      "918:                         name",
      "919:                     }",
      "920:                 }",
      "924:         then:",
      "925:         !result.errors",
      "926:         result.data == [",
      "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "930:         ]",
      "931:     }",
      "",
      "[Removed Lines]",
      "914:                 }",
      "915:                 imageType: __type(name: \"Image\") {",
      "921:             }",
      "922:         \"\"\")",
      "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "929:                 }",
      "930:         }",
      "931:         \"\"\"",
      "932:         result = graphQL.execute(query)",
      "934:         then:",
      "935:         !result.errors",
      "936:         result.data == [",
      "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "938:         ]",
      "940:         when:",
      "942:         query = \"\"\"",
      "943:         {",
      "944:             imageType: __type(name: \"Image\") {",
      "950:         }",
      "951:         \"\"\"",
      "952:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "8:         def query = \"\"\"",
      "9:             {",
      "10:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "7:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:                   possibleTypes { name }",
      "16:                   enumValues { name }",
      "17:                   inputFields { name }",
      "27:                 }",
      "28:             }",
      "29:             \"\"\"",
      "",
      "[Removed Lines]",
      "18:             }",
      "19:                 Pet: __type(name: \"Pet\") {",
      "20:                   kind",
      "21:                   name",
      "22:                   fields { name }",
      "23:                   interfaces { name }",
      "24:                   possibleTypes { name }",
      "25:                   enumValues { name }",
      "26:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:                 ],",
      "43:                 enumValues   : null,",
      "44:                 inputFields  : null",
      "47:                                       kind         : 'UNION',",
      "48:                                       name         : 'Pet',",
      "49:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "45:         ],",
      "46:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.GraphQL",
      "5: import graphql.TestUtil",
      "6: import graphql.execution.CoercedVariables",
      "7: import graphql.execution.MergedField",
      "8: import graphql.execution.RawVariables",
      "9: import graphql.execution.directives.QueryAppliedDirective",
      "10: import graphql.language.Document",
      "11: import graphql.language.Field",
      "12: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2875:         then:",
      "2876:         noExceptionThrown()",
      "2877:     }",
      "2878: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2881:     def \"big query exceeding fields count\"() {",
      "2882:         String schema = \"\"\"",
      "2883:         type Query {",
      "2884:             animal: Animal",
      "2885:         }",
      "2886:         interface Animal {",
      "2887:             name: String",
      "2888:             friends: [Friend]",
      "2889:         }",
      "2890:         union Pet = Dog | Cat",
      "2891:         type Friend {",
      "2892:             name: String",
      "2893:             isBirdOwner: Boolean",
      "2894:             isCatOwner: Boolean",
      "2895:             pets: [Pet]",
      "2896:         }",
      "2897:         type Bird implements Animal {",
      "2898:             name: String",
      "2899:             friends: [Friend]",
      "2900:         }",
      "2901:         type Cat implements Animal {",
      "2902:             name: String",
      "2903:             friends: [Friend]",
      "2904:             breed: String",
      "2905:         }",
      "2906:         type Dog implements Animal {",
      "2907:             name: String",
      "2908:             breed: String",
      "2909:             friends: [Friend]",
      "2910:         }",
      "2911:         \"\"\"",
      "2913:         def garbageFields = IntStream.range(0, 1000)",
      "2914:                 .mapToObj {",
      "2915:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2916:                 }",
      "2917:                 .collect(Collectors.joining(\"\\n\"))",
      "2919:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2921:         String query = \"\"\"",
      "2922:         {",
      "2923:             animal {",
      "2924:                 name",
      "2925:                 otherName: name",
      "2926:                 ... on Animal {",
      "2927:                     name",
      "2928:                 }",
      "2929:                 ... on Cat {",
      "2930:                     name",
      "2931:                     friends {",
      "2932:                         ... on Friend {",
      "2933:                             isCatOwner",
      "2934:                             pets {",
      "2935:                                 ... on Dog {",
      "2936:                                     name",
      "2937:                                 }",
      "2938:                             }",
      "2939:                         }",
      "2940:                     }",
      "2941:                 }",
      "2942:                 ... on Bird {",
      "2943:                     friends {",
      "2944:                         isBirdOwner",
      "2945:                     }",
      "2946:                     friends {",
      "2947:                         name",
      "2948:                         pets {",
      "2949:                             ... on Cat {",
      "2950:                                 breed",
      "2951:                             }",
      "2952:                         }",
      "2953:                     }",
      "2954:                 }",
      "2955:                 ... on Dog {",
      "2956:                     name",
      "2957:                 }",
      "2958:                 $garbageFields",
      "2959:             }",
      "2960:         }",
      "2961:         \"\"\"",
      "2963:         assertValidQuery(graphQLSchema, query)",
      "2965:         Document document = TestUtil.parseQuery(query)",
      "2967:         when:",
      "2968:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2969:                 graphQLSchema,",
      "2970:                 document,",
      "2971:                 null,",
      "2972:                 RawVariables.emptyVariables(),",
      "2973:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2975:         then:",
      "2976:         def e = thrown(AbortExecutionException)",
      "2977:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2978:     }",
      "2980:     def \"small query exceeding fields count\"() {",
      "2981:         String schema = \"\"\"",
      "2982:         type Query {",
      "2983:             hello: String",
      "2984:         }",
      "2985:         \"\"\"",
      "2987:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2989:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2991:         assertValidQuery(graphQLSchema, query)",
      "2993:         Document document = TestUtil.parseQuery(query)",
      "2995:         when:",
      "2996:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2997:                 graphQLSchema,",
      "2998:                 document,",
      "2999:                 null,",
      "3000:                 RawVariables.emptyVariables(),",
      "3001:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3003:         then:",
      "3004:         def e = thrown(AbortExecutionException)",
      "3005:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3008:     }",
      "3010:     def \"query not exceeding fields count\"() {",
      "3011:         String schema = \"\"\"",
      "3012:         type Query {",
      "3013:             dogs: [Dog]",
      "3014:         }",
      "3015:         type Dog {",
      "3016:             name: String",
      "3017:             breed: String",
      "3018:         }",
      "3019:         \"\"\"",
      "3021:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3023:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3025:         assertValidQuery(graphQLSchema, query)",
      "3027:         Document document = TestUtil.parseQuery(query)",
      "3029:         when:",
      "3030:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3031:                 graphQLSchema,",
      "3032:                 document,",
      "3033:                 null,",
      "3034:                 RawVariables.emptyVariables(),",
      "3035:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3037:         then:",
      "3038:         notThrown(AbortExecutionException)",
      "3041:     }",
      "3043:     def \"query with meta fields exceeding fields count\"() {",
      "3044:         String schema = \"\"\"",
      "3045:         type Query {",
      "3046:             hello: String",
      "3047:         }",
      "3048:         \"\"\"",
      "3050:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3052:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3054:         assertValidQuery(graphQLSchema, query)",
      "3056:         Document document = TestUtil.parseQuery(query)",
      "3058:         when:",
      "3059:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3060:                 graphQLSchema,",
      "3061:                 document,",
      "3062:                 null,",
      "3063:                 RawVariables.emptyVariables(),",
      "3064:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(188))",
      "3065:         println result.normalizedFieldToMergedField.size()",
      "3067:         then:",
      "3068:         def e = thrown(AbortExecutionException)",
      "3069:         e.message == \"Maximum field count exceeded. 189 > 188\"",
      "3070:     }",
      "3072:     def \"can capture depth and field count\"() {",
      "3073:         String schema = \"\"\"",
      "3074:         type Query {",
      "3075:             foo: Foo",
      "3076:         }",
      "3078:         type Foo {",
      "3079:             stop : String",
      "3080:             bar : Bar",
      "3081:         }",
      "3083:         type Bar {",
      "3084:             stop : String",
      "3085:             foo : Foo",
      "3086:         }",
      "3087:         \"\"\"",
      "3089:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3091:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3093:         assertValidQuery(graphQLSchema, query)",
      "3095:         Document document = TestUtil.parseQuery(query)",
      "3097:         when:",
      "3098:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3099:                 graphQLSchema,",
      "3100:                 document,",
      "3101:                 null,",
      "3102:                 RawVariables.emptyVariables()",
      "3103:                 )",
      "3105:         then:",
      "3106:         result.getOperationDepth() == 7",
      "3107:         result.getOperationFieldCount() == 8",
      "3108:     }",
      "3110:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "3111:             GraphQLSchema graphQLSchema,",
      "3112:             Document document,",
      "3113:             String operationName,",
      "3114:             CoercedVariables coercedVariableValues",
      "3115:     ) {",
      "3117:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3119:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
      "3120:     }",
      "3122:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
      "3123:             GraphQLSchema graphQLSchema,",
      "3124:             Document document,",
      "3125:             String operationName,",
      "3126:             RawVariables rawVariables",
      "3127:     ) {",
      "3129:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3131:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3132:                 graphQLSchema,",
      "3133:                 document,",
      "3134:                 operationName,",
      "3135:                 rawVariables,",
      "3136:                 options",
      "3137:         )",
      "3138:     }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
      "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package benchmark;",
      "7: import java.net.URL;",
      "8: import java.nio.charset.Charset;",
      "9: import java.util.concurrent.Callable;",
      "11: public class BenchmarkUtils {",
      "",
      "[Removed Lines]",
      "3: import com.google.common.io.Files;",
      "4: import graphql.Assert;",
      "6: import java.io.File;",
      "",
      "[Added Lines]",
      "3: import java.io.BufferedReader;",
      "4: import java.io.IOException;",
      "5: import java.io.InputStream;",
      "6: import java.io.InputStreamReader;",
      "9: import java.time.LocalDateTime;",
      "10: import java.time.format.DateTimeFormatter;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:             if (resource == null) {",
      "18:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
      "19:             }",
      "21:         });",
      "22:     }",
      "",
      "[Removed Lines]",
      "20:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "22:             byte[] bytes;",
      "23:             try (InputStream inputStream = resource.openStream()) {",
      "24:                 bytes = inputStream.readAllBytes();",
      "25:             }",
      "26:             return new String(bytes, Charset.defaultCharset());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "29:         }",
      "30:     }",
      "",
      "[Removed Lines]",
      "32: }",
      "",
      "[Added Lines]",
      "38:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
      "39:         int runForMillis = getRunForMillis();",
      "40:         if (runForMillis <= 0) {",
      "41:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
      "42:             return;",
      "43:         }",
      "44:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
      "45:         System.out.print(\"Get your tooling in order and press enter...\");",
      "46:         readLine();",
      "47:         System.out.print(\"Lets go...\\n\");",
      "48:         setup.run();",
      "50:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
      "51:         long now, then = System.currentTimeMillis();",
      "52:         do {",
      "53:             now = System.currentTimeMillis();",
      "54:             long msLeft = runForMillis - (now - then);",
      "55:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
      "56:             r.run();",
      "57:             now = System.currentTimeMillis();",
      "58:         } while ((now - then) < runForMillis);",
      "60:         tearDown.run();",
      "62:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
      "63:         System.exit(0);",
      "64:     }",
      "66:     private static void readLine() {",
      "67:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
      "68:         try {",
      "69:             br.readLine();",
      "70:         } catch (IOException e) {",
      "71:             throw new RuntimeException(e);",
      "72:         }",
      "73:     }",
      "75:     private static int getRunForMillis() {",
      "76:         String runFor = System.getenv(\"runForMillis\");",
      "77:         try {",
      "78:             return Integer.parseInt(runFor);",
      "79:         } catch (NumberFormatException e) {",
      "80:             return -1;",
      "81:         }",
      "82:     }",
      "84: }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b94f152a53ee4c69acc8d4c08611272342bf6a7b",
      "candidate_info": {
        "commit_hash": "b94f152a53ee4c69acc8d4c08611272342bf6a7b",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/b94f152a53ee4c69acc8d4c08611272342bf6a7b",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ],
        "message": "add the ability to restrict the number of ENFs created",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         private final GraphQLContext graphQLContext;",
          "81:         private final Locale locale;",
          "82:         private final int maxChildrenDepth;",
          "84:         private final boolean deferSupport;",
          "86:         private Options(GraphQLContext graphQLContext,",
          "87:                         Locale locale,",
          "88:                         int maxChildrenDepth,",
          "89:                         boolean deferSupport) {",
          "90:             this.graphQLContext = graphQLContext;",
          "91:             this.locale = locale;",
          "92:             this.maxChildrenDepth = maxChildrenDepth;",
          "93:             this.deferSupport = deferSupport;",
          "94:         }",
          "96:         public static Options defaultOptions() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         private final int maxFieldsCount;",
          "90:                         int maxFieldsCount,",
          "96:             this.maxFieldsCount = maxFieldsCount;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:                     GraphQLContext.getDefault(),",
          "99:                     Locale.getDefault(),",
          "100:                     Integer.MAX_VALUE,",
          "101:                     false);",
          "102:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:                     Integer.MAX_VALUE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:         public Options locale(Locale locale) {",
          "115:         }",
          "",
          "[Removed Lines]",
          "114:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.deferSupport);",
          "",
          "[Added Lines]",
          "118:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:         public Options graphQLContext(GraphQLContext graphQLContext) {",
          "128:         }",
          "",
          "[Removed Lines]",
          "127:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.deferSupport);",
          "",
          "[Added Lines]",
          "131:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:         public Options maxChildrenDepth(int maxChildrenDepth) {",
          "140:         }",
          "",
          "[Removed Lines]",
          "139:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.deferSupport);",
          "",
          "[Added Lines]",
          "143:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
          "144:         }",
          "154:         public Options maxFieldsCount(int maxFieldsCount) {",
          "155:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount, this.deferSupport);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:         @ExperimentalApi",
          "150:         public Options deferSupport(boolean deferSupport) {",
          "152:         }",
          "",
          "[Removed Lines]",
          "151:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, deferSupport);",
          "",
          "[Added Lines]",
          "167:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, deferSupport);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "178:             return maxChildrenDepth;",
          "179:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:         public int getMaxFieldsCount() {",
          "198:             return maxFieldsCount;",
          "199:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "390:         private ExecutableNormalizedOperationFactoryImpl(",
          "391:                 GraphQLSchema graphQLSchema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:         private int fieldCount = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "590:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "591:             }",
          "592:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "594:             return ExecutableNormalizedField.newNormalizedField()",
          "595:                     .alias(field.getAlias())",
          "596:                     .resolvedArguments(argumentValues)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:             this.fieldCount++;",
          "615:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "616:                 throw new AbortExecutionException(\"Maximum ENF count exceeded \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "617:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764:         private NormalizedDeferredExecution buildDeferredExecution(",
          "765:                 List<Directive> directives,",
          "768:                 return null;",
          "769:             }",
          "",
          "[Removed Lines]",
          "766:                 Set<GraphQLObjectType> newPossibleObjects)  {",
          "767:             if(!options.deferSupport) {",
          "",
          "[Added Lines]",
          "790:                 Set<GraphQLObjectType> newPossibleObjects) {",
          "791:             if (!options.deferSupport) {",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.GraphQL",
          "5: import graphql.TestUtil",
          "6: import graphql.execution.CoercedVariables",
          "7: import graphql.execution.MergedField",
          "8: import graphql.execution.RawVariables",
          "9: import graphql.execution.directives.QueryAppliedDirective",
          "10: import graphql.language.Document",
          "11: import graphql.language.Field",
          "12: import graphql.language.FragmentDefinition",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.AbortExecutionException",
          "11: import graphql.introspection.IntrospectionQuery",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2876:         noExceptionThrown()",
          "2877:     }",
          "2879:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
          "2880:             GraphQLSchema graphQLSchema,",
          "2881:             Document document,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2880:     def \"big query exceeding fields count\"() {",
          "2881:         String schema = \"\"\"",
          "2882:         type Query {",
          "2883:             animal: Animal",
          "2884:         }",
          "2885:         interface Animal {",
          "2886:             name: String",
          "2887:             friends: [Friend]",
          "2888:         }",
          "2889:         union Pet = Dog | Cat",
          "2890:         type Friend {",
          "2891:             name: String",
          "2892:             isBirdOwner: Boolean",
          "2893:             isCatOwner: Boolean",
          "2894:             pets: [Pet]",
          "2895:         }",
          "2896:         type Bird implements Animal {",
          "2897:             name: String",
          "2898:             friends: [Friend]",
          "2899:         }",
          "2900:         type Cat implements Animal {",
          "2901:             name: String",
          "2902:             friends: [Friend]",
          "2903:             breed: String",
          "2904:         }",
          "2905:         type Dog implements Animal {",
          "2906:             name: String",
          "2907:             breed: String",
          "2908:             friends: [Friend]",
          "2909:         }",
          "2910:         \"\"\"",
          "2912:         def garbageFields = IntStream.range(0, 1000)",
          "2913:                 .mapToObj {",
          "2914:                     \"\"\"test_$it: friends { name }\"\"\"",
          "2915:                 }",
          "2916:                 .collect(Collectors.joining(\"\\n\"))",
          "2918:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2920:         String query = \"\"\"",
          "2921:         {",
          "2922:             animal {",
          "2923:                 name",
          "2924:                 otherName: name",
          "2925:                 ... on Animal {",
          "2926:                     name",
          "2927:                 }",
          "2928:                 ... on Cat {",
          "2929:                     name",
          "2930:                     friends {",
          "2931:                         ... on Friend {",
          "2932:                             isCatOwner",
          "2933:                             pets {",
          "2934:                                 ... on Dog {",
          "2935:                                     name",
          "2936:                                 }",
          "2937:                             }",
          "2938:                         }",
          "2939:                     }",
          "2940:                 }",
          "2941:                 ... on Bird {",
          "2942:                     friends {",
          "2943:                         isBirdOwner",
          "2944:                     }",
          "2945:                     friends {",
          "2946:                         name",
          "2947:                         pets {",
          "2948:                             ... on Cat {",
          "2949:                                 breed",
          "2950:                             }",
          "2951:                         }",
          "2952:                     }",
          "2953:                 }",
          "2954:                 ... on Dog {",
          "2955:                     name",
          "2956:                 }",
          "2957:                 $garbageFields",
          "2958:             }",
          "2959:         }",
          "2960:         \"\"\"",
          "2962:         assertValidQuery(graphQLSchema, query)",
          "2964:         Document document = TestUtil.parseQuery(query)",
          "2966:         when:",
          "2967:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2968:                 graphQLSchema,",
          "2969:                 document,",
          "2970:                 null,",
          "2971:                 RawVariables.emptyVariables(),",
          "2972:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
          "2974:         then:",
          "2975:         def e = thrown(AbortExecutionException)",
          "2976:         e.message == \"Maximum ENF count exceeded 2014 > 2013\"",
          "2977:     }",
          "2979:     def \"small query exceeding fields count\"() {",
          "2980:         String schema = \"\"\"",
          "2981:         type Query {",
          "2982:             hello: String",
          "2983:         }",
          "2984:         \"\"\"",
          "2986:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2988:         String query = \"\"\" {hello a1: hello}\"\"\"",
          "2990:         assertValidQuery(graphQLSchema, query)",
          "2992:         Document document = TestUtil.parseQuery(query)",
          "2994:         when:",
          "2995:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2996:                 graphQLSchema,",
          "2997:                 document,",
          "2998:                 null,",
          "2999:                 RawVariables.emptyVariables(),",
          "3000:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
          "3002:         then:",
          "3003:         def e = thrown(AbortExecutionException)",
          "3004:         e.message == \"Maximum ENF count exceeded 2 > 1\"",
          "3007:     }",
          "3009:     def \"query not exceeding fields count\"() {",
          "3010:         String schema = \"\"\"",
          "3011:         type Query {",
          "3012:             dogs: [Dog]",
          "3013:         }",
          "3014:         type Dog {",
          "3015:             name: String",
          "3016:             breed: String",
          "3017:         }",
          "3018:         \"\"\"",
          "3020:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3022:         String query = \"\"\" {dogs{name breed }}\"\"\"",
          "3024:         assertValidQuery(graphQLSchema, query)",
          "3026:         Document document = TestUtil.parseQuery(query)",
          "3028:         when:",
          "3029:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3030:                 graphQLSchema,",
          "3031:                 document,",
          "3032:                 null,",
          "3033:                 RawVariables.emptyVariables(),",
          "3034:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
          "3036:         then:",
          "3037:         notThrown(AbortExecutionException)",
          "3040:     }",
          "3042:     def \"query with meta fields exceeding fields count\"() {",
          "3043:         String schema = \"\"\"",
          "3044:         type Query {",
          "3045:             hello: String",
          "3046:         }",
          "3047:         \"\"\"",
          "3049:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3051:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
          "3053:         assertValidQuery(graphQLSchema, query)",
          "3055:         Document document = TestUtil.parseQuery(query)",
          "3057:         when:",
          "3058:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3059:                 graphQLSchema,",
          "3060:                 document,",
          "3061:                 null,",
          "3062:                 RawVariables.emptyVariables(),",
          "3063:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(188))",
          "3064:         println result.normalizedFieldToMergedField.size()",
          "3066:         then:",
          "3067:         def e = thrown(AbortExecutionException)",
          "3068:         e.message == \"Maximum ENF count exceeded 189 > 188\"",
          "3069:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea786d6d95aa435c52c9368deb4673f17649566b",
      "candidate_info": {
        "commit_hash": "ea786d6d95aa435c52c9368deb4673f17649566b",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/ea786d6d95aa435c52c9368deb4673f17649566b",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy"
        ],
        "message": "Refactor ENF Factory - Create an inner class to maintain state, so we don't need to pass variables around that much",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java||src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import graphql.schema.GraphQLObjectType;",
          "35: import graphql.schema.GraphQLSchema;",
          "36: import graphql.schema.GraphQLType;",
          "38: import graphql.schema.GraphQLUnionType;",
          "39: import graphql.schema.GraphQLUnmodifiedType;",
          "40: import graphql.schema.impl.SchemaUtil;",
          "",
          "[Removed Lines]",
          "37: import graphql.schema.GraphQLTypeUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         }",
          "146:     }",
          "",
          "[Removed Lines]",
          "148:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "",
          "[Added Lines]",
          "155:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:             CoercedVariables coercedVariableValues",
          "166:     ) {",
          "167:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "169:                 getOperationResult.operationDefinition,",
          "170:                 getOperationResult.fragmentsByName,",
          "174:     }",
          "",
          "[Removed Lines]",
          "168:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
          "171:                 coercedVariableValues,",
          "172:                 null,",
          "173:                 Options.defaultOptions());",
          "",
          "[Added Lines]",
          "176:         return createExecutableNormalizedOperation(",
          "177:                 graphQLSchema,",
          "180:                 coercedVariableValues",
          "181:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:                                                                                     OperationDefinition operationDefinition,",
          "189:                                                                                     Map<String, FragmentDefinition> fragments,",
          "190:                                                                                     CoercedVariables coercedVariableValues) {",
          "192:                 operationDefinition,",
          "193:                 fragments,",
          "194:                 coercedVariableValues,",
          "195:                 null,",
          "197:     }",
          "",
          "[Removed Lines]",
          "191:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema,",
          "196:                 Options.defaultOptions());",
          "",
          "[Added Lines]",
          "199:         return new ExecutableNormalizedOperationFactoryInner(",
          "200:                 graphQLSchema,",
          "205:                 Options.defaultOptions()",
          "206:         ).createNormalizedQueryImpl();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:                                                                                                     RawVariables rawVariables,",
          "268:                                                                                                     Options options) {",
          "269:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "284:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
          "285:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
          "286:                 variableDefinitions,",
          "",
          "[Removed Lines]",
          "271:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema,",
          "272:                 getOperationResult.operationDefinition,",
          "273:                 getOperationResult.fragmentsByName,",
          "274:                 rawVariables,",
          "275:                 options",
          "276:         );",
          "277:     }",
          "279:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
          "280:                                                                                                   OperationDefinition operationDefinition,",
          "281:                                                                                                   Map<String, FragmentDefinition> fragments,",
          "282:                                                                                                   RawVariables rawVariables,",
          "283:                                                                                                   Options options) {",
          "",
          "[Added Lines]",
          "280:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "292:                 rawVariables,",
          "293:                 options.getGraphQLContext(),",
          "294:                 options.getLocale());",
          "296:                 operationDefinition,",
          "298:                 coercedVariableValues,",
          "299:                 normalizedVariableValues,",
          "368:     }",
          "381:         }",
          "415:         }",
          "455:         }",
          "461:             }",
          "470:         }",
          "484:         }",
          "519:                 }",
          "522:                 }",
          "527:             }",
          "528:         }",
          "567:         }",
          "584:         }",
          "602:             }",
          "615:         }",
          "623:         }",
          "659:         }",
          "667:         }",
          "686:         }",
          "697:         }",
          "710:             }",
          "711:         }",
          "726:         }",
          "727:     }",
          "728: }",
          "",
          "[Removed Lines]",
          "295:         return createNormalizedQueryImpl(graphQLSchema,",
          "297:                 fragments,",
          "300:                 options);",
          "301:     }",
          "306:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
          "307:                                                                     OperationDefinition operationDefinition,",
          "308:                                                                     Map<String, FragmentDefinition> fragments,",
          "309:                                                                     CoercedVariables coercedVariableValues,",
          "310:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "311:                                                                     Options options) {",
          "312:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
          "313:                 .newParameters()",
          "314:                 .fragments(fragments)",
          "315:                 .schema(graphQLSchema)",
          "316:                 .coercedVariables(coercedVariableValues.toMap())",
          "317:                 .normalizedVariables(normalizedVariableValues)",
          "318:                 .build();",
          "320:         GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
          "322:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
          "324:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
          "325:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "326:         ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "327:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "329:         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
          "331:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
          "332:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
          "333:             normalizedFieldToMergedField.put(enf, mergedFld);",
          "334:         };",
          "336:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "337:             ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "338:             MergedField mergedField = newMergedField(fieldAndAstParents);",
          "340:             captureMergedField.accept(topLevel, mergedField);",
          "342:             updateFieldToNFMap(topLevel, fieldAndAstParents, fieldToNormalizedField);",
          "343:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
          "345:             buildFieldWithChildren(",
          "346:                     topLevel,",
          "347:                     fieldAndAstParents,",
          "348:                     parameters,",
          "349:                     fieldToNormalizedField,",
          "350:                     captureMergedField,",
          "351:                     coordinatesToNormalizedFields,",
          "352:                     1,",
          "353:                     options.getMaxChildrenDepth());",
          "354:         }",
          "355:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.getPossibleMergerList()) {",
          "356:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "357:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
          "358:         }",
          "359:         return new ExecutableNormalizedOperation(",
          "360:                 operationDefinition.getOperation(),",
          "361:                 operationDefinition.getName(),",
          "362:                 new ArrayList<>(collectFromOperationResult.children),",
          "363:                 fieldToNormalizedField.build(),",
          "364:                 normalizedFieldToMergedField.build(),",
          "365:                 normalizedFieldToQueryDirectives.build(),",
          "366:                 coordinatesToNormalizedFields.build()",
          "367:         );",
          "371:     private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
          "372:                                         ImmutableList<FieldAndAstParent> fieldAndAstParents,",
          "373:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
          "374:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
          "375:                                         BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
          "376:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "377:                                         int curLevel,",
          "378:                                         int maxLevel) {",
          "379:         if (curLevel > maxLevel) {",
          "380:             throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
          "383:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "385:         for (ExecutableNormalizedField childENF : nextLevel.children) {",
          "386:             executableNormalizedField.addChild(childENF);",
          "387:             ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
          "389:             MergedField mergedField = newMergedField(childFieldAndAstParents);",
          "390:             captureMergedField.accept(childENF, mergedField);",
          "392:             updateFieldToNFMap(childENF, childFieldAndAstParents, fieldNormalizedField);",
          "393:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, childENF);",
          "395:             buildFieldWithChildren(childENF,",
          "396:                     childFieldAndAstParents,",
          "397:                     fieldCollectorNormalizedQueryParams,",
          "398:                     fieldNormalizedField,",
          "399:                     captureMergedField,",
          "400:                     coordinatesToNormalizedFields,",
          "401:                     curLevel + 1,",
          "402:                     maxLevel);",
          "403:         }",
          "404:     }",
          "406:     private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
          "407:         return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
          "408:     }",
          "410:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
          "411:                                     ImmutableList<FieldAndAstParent> mergedField,",
          "412:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
          "413:         for (FieldAndAstParent astField : mergedField) {",
          "414:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
          "416:     }",
          "418:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
          "419:         for (String objectType : topLevel.getObjectTypeNames()) {",
          "420:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
          "421:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
          "422:         }",
          "423:     }",
          "425:     private static class FieldAndAstParent {",
          "426:         final Field field;",
          "427:         final GraphQLCompositeType astParentType;",
          "429:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
          "430:             this.field = field;",
          "431:             this.astParentType = astParentType;",
          "432:         }",
          "433:     }",
          "436:     public static class CollectNFResult {",
          "437:         private final Collection<ExecutableNormalizedField> children;",
          "438:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
          "440:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
          "441:             this.children = children;",
          "442:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
          "443:         }",
          "444:     }",
          "447:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
          "448:                                                   ExecutableNormalizedField executableNormalizedField,",
          "449:                                                   ImmutableList<FieldAndAstParent> mergedField,",
          "450:                                                   int level) {",
          "451:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
          "452:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
          "453:         if (possibleObjects.isEmpty()) {",
          "454:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
          "457:         List<CollectedField> collectedFields = new ArrayList<>();",
          "458:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
          "459:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
          "460:                 continue;",
          "462:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
          "463:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
          "464:             this.collectFromSelectionSet(parameters,",
          "465:                     fieldAndAstParent.field.getSelectionSet(),",
          "466:                     collectedFields,",
          "467:                     (GraphQLCompositeType) astParentType,",
          "468:                     possibleObjects",
          "469:             );",
          "471:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "472:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "473:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "475:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "477:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "478:     }",
          "480:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
          "481:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
          "482:         for (CollectedField collectedField : collectedFields) {",
          "483:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
          "485:         return fieldsByName;",
          "486:     }",
          "488:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
          "489:                                                 OperationDefinition operationDefinition,",
          "490:                                                 GraphQLObjectType rootType) {",
          "493:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
          "494:         List<CollectedField> collectedFields = new ArrayList<>();",
          "495:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
          "497:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "498:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "499:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "501:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "503:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "504:     }",
          "506:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
          "507:                            FieldCollectorNormalizedQueryParams parameters,",
          "508:                            Map<String, List<CollectedField>> fieldsByName,",
          "509:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "510:                            int level,",
          "511:                            ExecutableNormalizedField parent) {",
          "512:         for (String resultKey : fieldsByName.keySet()) {",
          "513:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "514:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "515:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "516:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
          "517:                 if (nf == null) {",
          "518:                     continue;",
          "520:                 for (CollectedField collectedField : fieldGroup.fields) {",
          "521:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
          "523:                 nfListBuilder.add(nf);",
          "524:             }",
          "525:             if (commonParentsGroups.size() > 1) {",
          "526:                 parameters.addPossibleMergers(parent, resultKey);",
          "529:     }",
          "531:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
          "532:                                                CollectedFieldGroup collectedFieldGroup,",
          "533:                                                int level,",
          "534:                                                ExecutableNormalizedField parent) {",
          "535:         Field field;",
          "536:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "537:         field = collectedFieldGroup.fields.iterator().next().field;",
          "538:         String fieldName = field.getName();",
          "539:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
          "541:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(parameters.getCoercedVariableValues()), parameters.getGraphQLContext(), parameters.getLocale());",
          "542:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
          "543:         if (parameters.getNormalizedVariableValues() != null) {",
          "544:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
          "545:         }",
          "546:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "548:         return ExecutableNormalizedField.newNormalizedField()",
          "549:                 .alias(field.getAlias())",
          "550:                 .resolvedArguments(argumentValues)",
          "551:                 .normalizedArguments(normalizedArgumentValues)",
          "552:                 .astArguments(field.getArguments())",
          "553:                 .objectTypeNames(objectTypeNames)",
          "554:                 .fieldName(fieldName)",
          "555:                 .level(level)",
          "556:                 .parent(parent)",
          "557:                 .build();",
          "558:     }",
          "560:     private static class CollectedFieldGroup {",
          "561:         Set<GraphQLObjectType> objectTypes;",
          "562:         Set<CollectedField> fields;",
          "564:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
          "565:             this.fields = fields;",
          "566:             this.objectTypes = objectTypes;",
          "568:     }",
          "570:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "571:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "572:         for (CollectedField collectedField : fields) {",
          "573:             objectTypes.addAll(collectedField.objectTypes);",
          "574:         }",
          "575:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "576:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "577:         if (groupByAstParent.size() == 1) {",
          "578:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
          "579:         }",
          "580:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "581:         for (GraphQLObjectType objectType : allRelevantObjects) {",
          "582:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "583:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
          "585:         return result.build();",
          "586:     }",
          "589:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
          "590:                                          SelectionSet selectionSet,",
          "591:                                          List<CollectedField> result,",
          "592:                                          GraphQLCompositeType astTypeCondition,",
          "593:                                          Set<GraphQLObjectType> possibleObjects",
          "594:     ) {",
          "595:         for (Selection<?> selection : selectionSet.getSelections()) {",
          "596:             if (selection instanceof Field) {",
          "597:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
          "598:             } else if (selection instanceof InlineFragment) {",
          "599:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
          "600:             } else if (selection instanceof FragmentSpread) {",
          "601:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects);",
          "603:         }",
          "604:     }",
          "606:     private static class CollectedField {",
          "607:         Field field;",
          "608:         Set<GraphQLObjectType> objectTypes;",
          "609:         GraphQLCompositeType astTypeCondition;",
          "611:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
          "612:             this.field = field;",
          "613:             this.objectTypes = objectTypes;",
          "614:             this.astTypeCondition = astTypeCondition;",
          "617:         public boolean isAbstract() {",
          "618:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
          "619:         }",
          "621:         public boolean isConcrete() {",
          "622:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
          "624:     }",
          "626:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
          "627:                                        List<CollectedField> result,",
          "628:                                        FragmentSpread fragmentSpread,",
          "629:                                        Set<GraphQLObjectType> possibleObjects",
          "630:     ) {",
          "631:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "632:                 parameters.getCoercedVariableValues(),",
          "633:                 parameters.getGraphQLSchema(),",
          "634:                 parameters.getGraphQLContext())) {",
          "635:             return;",
          "636:         }",
          "637:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
          "639:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
          "640:                 parameters.getCoercedVariableValues(),",
          "641:                 parameters.getGraphQLSchema(),",
          "642:                 parameters.getGraphQLContext())) {",
          "643:             return;",
          "644:         }",
          "645:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
          "646:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
          "647:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "648:     }",
          "651:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
          "652:                                        List<CollectedField> result,",
          "653:                                        InlineFragment inlineFragment,",
          "654:                                        Set<GraphQLObjectType> possibleObjects,",
          "655:                                        GraphQLCompositeType astTypeCondition",
          "656:     ) {",
          "657:         if (!conditionalNodes.shouldInclude(inlineFragment, parameters.getCoercedVariableValues(), parameters.getGraphQLSchema(), parameters.getGraphQLContext())) {",
          "658:             return;",
          "660:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "661:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
          "663:         if (inlineFragment.getTypeCondition() != null) {",
          "664:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
          "665:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
          "668:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "669:     }",
          "671:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
          "672:                               List<CollectedField> result,",
          "673:                               Field field,",
          "674:                               Set<GraphQLObjectType> possibleObjectTypes,",
          "675:                               GraphQLCompositeType astTypeCondition",
          "676:     ) {",
          "677:         if (!conditionalNodes.shouldInclude(field,",
          "678:                 parameters.getCoercedVariableValues(),",
          "679:                 parameters.getGraphQLSchema(),",
          "680:                 parameters.getGraphQLContext())) {",
          "681:             return;",
          "682:         }",
          "684:         if (possibleObjectTypes.isEmpty()) {",
          "685:             return;",
          "687:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
          "688:     }",
          "690:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
          "691:                                                              GraphQLCompositeType typeCondition,",
          "692:                                                              GraphQLSchema graphQLSchema) {",
          "694:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
          "695:         if (currentOnes.isEmpty()) {",
          "696:             return resolvedTypeCondition;",
          "700:         return intersection(currentOnes, resolvedTypeCondition);",
          "701:     }",
          "703:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
          "704:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
          "706:         for (GraphQLFieldDefinition def : defs) {",
          "707:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
          "708:             if (outputType instanceof GraphQLCompositeType) {",
          "709:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
          "713:         return builder.build();",
          "714:     }",
          "716:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
          "717:         if (type instanceof GraphQLObjectType) {",
          "718:             return ImmutableSet.of((GraphQLObjectType) type);",
          "719:         } else if (type instanceof GraphQLInterfaceType) {",
          "720:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
          "721:         } else if (type instanceof GraphQLUnionType) {",
          "722:             List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
          "723:             return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
          "724:         } else {",
          "725:             return assertShouldNeverHappen();",
          "",
          "[Added Lines]",
          "294:         return new ExecutableNormalizedOperationFactoryInner(",
          "295:                 graphQLSchema,",
          "297:                 getOperationResult.fragmentsByName,",
          "300:                 options",
          "301:         ).createNormalizedQueryImpl();",
          "305:     private static class ExecutableNormalizedOperationFactoryInner {",
          "306:         private final GraphQLSchema graphQLSchema;",
          "307:         private final OperationDefinition operationDefinition;",
          "308:         private final Map<String, FragmentDefinition> fragments;",
          "309:         private final CoercedVariables coercedVariableValues;",
          "310:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
          "311:         private final Options options;",
          "313:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
          "315:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
          "316:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "317:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "318:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "320:         private ExecutableNormalizedOperationFactoryInner(",
          "321:                 GraphQLSchema graphQLSchema,",
          "322:                 OperationDefinition operationDefinition,",
          "323:                 Map<String, FragmentDefinition> fragments,",
          "324:                 CoercedVariables coercedVariableValues,",
          "325:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "326:                 Options options",
          "327:         ) {",
          "328:             this.graphQLSchema = graphQLSchema;",
          "329:             this.operationDefinition = operationDefinition;",
          "330:             this.fragments = fragments;",
          "331:             this.coercedVariableValues = coercedVariableValues;",
          "332:             this.normalizedVariableValues = normalizedVariableValues;",
          "333:             this.options = options;",
          "339:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
          "340:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
          "342:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
          "344:             BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField = (enf, mergedFld) -> {",
          "346:                 QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap(), options.getGraphQLContext(), options.getLocale());",
          "347:                 normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
          "348:                 normalizedFieldToMergedField.put(enf, mergedFld);",
          "349:             };",
          "351:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "352:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "353:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
          "355:                 captureMergedField.accept(topLevel, mergedField);",
          "357:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
          "358:                 updateCoordinatedToNFMap(topLevel);",
          "360:                 buildFieldWithChildren(",
          "361:                         topLevel,",
          "362:                         fieldAndAstParents,",
          "363:                         captureMergedField,",
          "364:                         1,",
          "365:                         options.getMaxChildrenDepth());",
          "366:             }",
          "368:             for (PossibleMerger possibleMerger : possibleMergerList) {",
          "369:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "370:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
          "371:             }",
          "372:             return new ExecutableNormalizedOperation(",
          "373:                     operationDefinition.getOperation(),",
          "374:                     operationDefinition.getName(),",
          "375:                     new ArrayList<>(collectFromOperationResult.children),",
          "376:                     fieldToNormalizedField.build(),",
          "377:                     normalizedFieldToMergedField.build(),",
          "378:                     normalizedFieldToQueryDirectives.build(),",
          "379:                     coordinatesToNormalizedFields.build()",
          "380:             );",
          "384:         private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
          "385:                                             ImmutableList<FieldAndAstParent> fieldAndAstParents,",
          "386:                                             BiConsumer<ExecutableNormalizedField, MergedField> captureMergedField,",
          "387:                                             int curLevel,",
          "388:                                             int maxLevel) {",
          "389:             if (curLevel > maxLevel) {",
          "390:                 throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + maxLevel);",
          "391:             }",
          "393:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "395:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
          "396:                 executableNormalizedField.addChild(childENF);",
          "397:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
          "399:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
          "400:                 captureMergedField.accept(childENF, mergedField);",
          "402:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
          "403:                 updateCoordinatedToNFMap(childENF);",
          "405:                 buildFieldWithChildren(childENF,",
          "406:                         childFieldAndAstParents,",
          "407:                         captureMergedField,",
          "408:                         curLevel + 1,",
          "409:                         maxLevel);",
          "410:             }",
          "411:         }",
          "413:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
          "414:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
          "417:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
          "418:                                         ImmutableList<FieldAndAstParent> mergedField) {",
          "419:             for (FieldAndAstParent astField : mergedField) {",
          "420:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
          "424:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
          "425:             for (String objectType : topLevel.getObjectTypeNames()) {",
          "426:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
          "427:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
          "428:             }",
          "431:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
          "432:                                                       ImmutableList<FieldAndAstParent> mergedField,",
          "433:                                                       int level) {",
          "434:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
          "435:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
          "436:             if (possibleObjects.isEmpty()) {",
          "437:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
          "438:             }",
          "440:             List<CollectedField> collectedFields = new ArrayList<>();",
          "441:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
          "442:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
          "443:                     continue;",
          "444:                 }",
          "445:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
          "446:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
          "447:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
          "448:                         collectedFields,",
          "449:                         (GraphQLCompositeType) astParentType,",
          "450:                         possibleObjects",
          "451:                 );",
          "452:             }",
          "453:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "454:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "455:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "457:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "459:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "460:         }",
          "462:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
          "463:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
          "464:             for (CollectedField collectedField : collectedFields) {",
          "465:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
          "466:             }",
          "467:             return fieldsByName;",
          "468:         }",
          "470:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
          "473:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
          "474:             List<CollectedField> collectedFields = new ArrayList<>();",
          "475:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
          "477:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "478:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "479:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "481:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "483:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "484:         }",
          "486:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
          "487:                                Map<String, List<CollectedField>> fieldsByName,",
          "488:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "489:                                int level,",
          "490:                                ExecutableNormalizedField parent) {",
          "491:             for (String resultKey : fieldsByName.keySet()) {",
          "492:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "493:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "494:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "495:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
          "496:                     if (nf == null) {",
          "497:                         continue;",
          "498:                     }",
          "499:                     for (CollectedField collectedField : fieldGroup.fields) {",
          "500:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
          "501:                     }",
          "502:                     nfListBuilder.add(nf);",
          "504:                 if (commonParentsGroups.size() > 1) {",
          "505:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
          "510:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
          "511:                                                    int level,",
          "512:                                                    ExecutableNormalizedField parent) {",
          "513:             Field field;",
          "514:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "515:             field = collectedFieldGroup.fields.iterator().next().field;",
          "516:             String fieldName = field.getName();",
          "517:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
          "519:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()), this.options.graphQLContext, this.options.locale);",
          "520:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
          "521:             if (this.normalizedVariableValues != null) {",
          "522:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "523:             }",
          "524:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "526:             return ExecutableNormalizedField.newNormalizedField()",
          "527:                     .alias(field.getAlias())",
          "528:                     .resolvedArguments(argumentValues)",
          "529:                     .normalizedArguments(normalizedArgumentValues)",
          "530:                     .astArguments(field.getArguments())",
          "531:                     .objectTypeNames(objectTypeNames)",
          "532:                     .fieldName(fieldName)",
          "533:                     .level(level)",
          "534:                     .parent(parent)",
          "535:                     .build();",
          "536:         }",
          "538:         private static class CollectedFieldGroup {",
          "539:             Set<GraphQLObjectType> objectTypes;",
          "540:             Set<CollectedField> fields;",
          "542:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
          "543:                 this.fields = fields;",
          "544:                 this.objectTypes = objectTypes;",
          "545:             }",
          "548:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "549:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "550:             for (CollectedField collectedField : fields) {",
          "551:                 objectTypes.addAll(collectedField.objectTypes);",
          "552:             }",
          "553:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "554:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "555:             if (groupByAstParent.size() == 1) {",
          "556:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
          "557:             }",
          "558:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "559:             for (GraphQLObjectType objectType : allRelevantObjects) {",
          "560:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "561:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
          "562:             }",
          "563:             return result.build();",
          "564:         }",
          "566:         private void collectFromSelectionSet(SelectionSet selectionSet,",
          "567:                                              List<CollectedField> result,",
          "568:                                              GraphQLCompositeType astTypeCondition,",
          "569:                                              Set<GraphQLObjectType> possibleObjects",
          "570:         ) {",
          "571:             for (Selection<?> selection : selectionSet.getSelections()) {",
          "572:                 if (selection instanceof Field) {",
          "573:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
          "574:                 } else if (selection instanceof InlineFragment) {",
          "575:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
          "576:                 } else if (selection instanceof FragmentSpread) {",
          "577:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
          "578:                 }",
          "579:             }",
          "582:         private void collectFragmentSpread(List<CollectedField> result,",
          "583:                                            FragmentSpread fragmentSpread,",
          "584:                                            Set<GraphQLObjectType> possibleObjects",
          "585:         ) {",
          "586:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "587:                     this.coercedVariableValues.toMap(),",
          "588:                     this.graphQLSchema,",
          "589:                     this.options.graphQLContext)) {",
          "590:                 return;",
          "591:             }",
          "592:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
          "594:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
          "595:                     this.coercedVariableValues.toMap(),",
          "596:                     this.graphQLSchema,",
          "597:                     this.options.graphQLContext)) {",
          "598:                 return;",
          "600:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
          "601:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
          "602:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "603:         }",
          "605:         private void collectInlineFragment(List<CollectedField> result,",
          "606:                                            InlineFragment inlineFragment,",
          "607:                                            Set<GraphQLObjectType> possibleObjects,",
          "608:                                            GraphQLCompositeType astTypeCondition",
          "609:         ) {",
          "610:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
          "611:                 return;",
          "612:             }",
          "613:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "614:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
          "616:             if (inlineFragment.getTypeCondition() != null) {",
          "617:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
          "618:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
          "620:             }",
          "621:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "622:         }",
          "624:         private void collectField(List<CollectedField> result,",
          "625:                                   Field field,",
          "626:                                   Set<GraphQLObjectType> possibleObjectTypes,",
          "627:                                   GraphQLCompositeType astTypeCondition",
          "628:         ) {",
          "629:             if (!conditionalNodes.shouldInclude(field,",
          "630:                     this.coercedVariableValues.toMap(),",
          "631:                     this.graphQLSchema,",
          "632:                     this.options.graphQLContext)) {",
          "633:                 return;",
          "634:             }",
          "636:             if (possibleObjectTypes.isEmpty()) {",
          "637:                 return;",
          "638:             }",
          "639:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
          "642:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
          "643:                                                                  GraphQLCompositeType typeCondition) {",
          "645:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
          "646:             if (currentOnes.isEmpty()) {",
          "647:                 return resolvedTypeCondition;",
          "648:             }",
          "651:             return intersection(currentOnes, resolvedTypeCondition);",
          "654:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
          "655:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
          "657:             for (GraphQLFieldDefinition def : defs) {",
          "658:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
          "659:                 if (outputType instanceof GraphQLCompositeType) {",
          "660:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
          "661:                 }",
          "662:             }",
          "664:             return builder.build();",
          "667:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
          "668:             if (type instanceof GraphQLObjectType) {",
          "669:                 return ImmutableSet.of((GraphQLObjectType) type);",
          "670:             } else if (type instanceof GraphQLInterfaceType) {",
          "671:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
          "672:             } else if (type instanceof GraphQLUnionType) {",
          "673:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
          "674:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
          "675:             } else {",
          "676:                 return assertShouldNeverHappen();",
          "677:             }",
          "680:         private static class PossibleMerger {",
          "681:             ExecutableNormalizedField parent;",
          "682:             String resultKey;",
          "684:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
          "685:                 this.parent = parent;",
          "686:                 this.resultKey = resultKey;",
          "687:             }",
          "690:         private static class CollectedField {",
          "691:             Field field;",
          "692:             Set<GraphQLObjectType> objectTypes;",
          "693:             GraphQLCompositeType astTypeCondition;",
          "695:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
          "696:                 this.field = field;",
          "697:                 this.objectTypes = objectTypes;",
          "698:                 this.astTypeCondition = astTypeCondition;",
          "699:             }",
          "702:         public static class CollectNFResult {",
          "703:             private final Collection<ExecutableNormalizedField> children;",
          "704:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
          "706:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
          "707:                 this.children = children;",
          "708:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
          "712:         private static class FieldAndAstParent {",
          "713:             final Field field;",
          "714:             final GraphQLCompositeType astParentType;",
          "716:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
          "717:                 this.field = field;",
          "718:                 this.astParentType = astParentType;",
          "719:             }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java||src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java": [
          "File: src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java -> src/main/java/graphql/normalized/FieldCollectorNormalizedQueryParams.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedFieldTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         \"\"\"",
          "49:         Document document = TestUtil.parseQuery(query)",
          "54:         def pets = normalizedOperation.getTopLevelFields()[0]",
          "55:         def allChildren = pets.getChildren()",
          "",
          "[Removed Lines]",
          "51:         ExecutableNormalizedOperationFactory normalizedOperationFactory = new ExecutableNormalizedOperationFactory()",
          "52:         def normalizedOperation = normalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "51:         def normalizedOperation = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         Document document = TestUtil.parseQuery(query)",
          "117:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "119:         expect:",
          "",
          "[Removed Lines]",
          "115:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "116:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "116:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:         Document document = TestUtil.parseQuery(query)",
          "203:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "205:         expect:",
          "",
          "[Removed Lines]",
          "201:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "202:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "202:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:         Document document = TestUtil.parseQuery(query)",
          "283:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "285:         expect:",
          "",
          "[Removed Lines]",
          "281:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "282:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "282:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:         Document document = TestUtil.parseQuery(query)",
          "334:         def printedTree = printTree(tree)",
          "336:         expect:",
          "",
          "[Removed Lines]",
          "332:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "333:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "333:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "373:         Document document = TestUtil.parseQuery(query)",
          "377:         def printedTree = printTree(tree)",
          "379:         expect:",
          "",
          "[Removed Lines]",
          "375:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "376:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "376:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "423:         Document document = TestUtil.parseQuery(query)",
          "427:         def printedTree = printTree(tree)",
          "429:         expect:",
          "",
          "[Removed Lines]",
          "425:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "426:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "426:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "486:         Document document = TestUtil.parseQuery(query)",
          "490:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "492:         expect:",
          "",
          "[Removed Lines]",
          "488:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "489:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "489:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "532:         Document document = TestUtil.parseQuery(query)",
          "536:         def printedTree = printTree(tree)",
          "538:         expect:",
          "",
          "[Removed Lines]",
          "534:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "535:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "535:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "576:         Document document = TestUtil.parseQuery(query)",
          "580:         def printedTree = printTree(tree)",
          "582:         expect:",
          "",
          "[Removed Lines]",
          "578:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "579:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "579:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "620:         Document document = TestUtil.parseQuery(query)",
          "624:         def printedTree = printTree(tree)",
          "626:         expect:",
          "",
          "[Removed Lines]",
          "622:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "623:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "623:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "652:         Document document = TestUtil.parseQuery(query)",
          "656:         def printedTree = printTree(tree)",
          "658:         expect:",
          "",
          "[Removed Lines]",
          "654:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "655:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "655:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "703:         Document document = TestUtil.parseQuery(query)",
          "707:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "709:         expect:",
          "",
          "[Removed Lines]",
          "705:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "706:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "706:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "753:         Document document = TestUtil.parseQuery(query)",
          "757:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "759:         expect:",
          "",
          "[Removed Lines]",
          "755:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "756:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "756:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "792:         Document document = TestUtil.parseQuery(query)",
          "796:         def printedTree = printTree(tree)",
          "798:         expect:",
          "",
          "[Removed Lines]",
          "794:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "795:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "795:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "836:         Document document = TestUtil.parseQuery(query)",
          "840:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "842:         expect:",
          "",
          "[Removed Lines]",
          "838:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "839:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "839:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "876:         Document document = TestUtil.parseQuery(query)",
          "880:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "882:         expect:",
          "",
          "[Removed Lines]",
          "878:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "879:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "879:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "924:         Document document = TestUtil.parseQuery(query)",
          "928:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "930:         expect:",
          "",
          "[Removed Lines]",
          "926:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "927:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "927:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1026:         Document document = TestUtil.parseQuery(query)",
          "1027:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
          "1031:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1033:         expect:",
          "",
          "[Removed Lines]",
          "1029:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1030:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1030:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1069:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
          "1070:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
          "1074:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1072:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1073:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1073:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1118:         def schemaField = selections[2] as Field",
          "1119:         def typeField = selections[3] as Field",
          "1123:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1125:         expect:",
          "",
          "[Removed Lines]",
          "1121:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1122:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1122:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1176:         Document document = TestUtil.parseQuery(query)",
          "1180:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1182:         expect:",
          "",
          "[Removed Lines]",
          "1178:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1179:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1179:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1219:         Document document = TestUtil.parseQuery(query)",
          "1223:         def printedTree = printTree(tree)",
          "1225:         expect:",
          "",
          "[Removed Lines]",
          "1221:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1222:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1222:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1247:         Document document = TestUtil.parseQuery(query)",
          "1251:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
          "1252:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "1253:         List<MergedField> result = new ArrayList<>()",
          "",
          "[Removed Lines]",
          "1249:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1250:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1250:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1285:         Document document = TestUtil.parseQuery(query)",
          "1289:         when:",
          "1291:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
          "1293:         then:",
          "",
          "[Removed Lines]",
          "1287:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1290:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1290:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1386:         Document document = TestUtil.parseQuery(mutation)",
          "1390:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1392:         expect:",
          "",
          "[Removed Lines]",
          "1388:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1389:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1389:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1436:         assertValidQuery(graphQLSchema, query)",
          "1437:         Document document = TestUtil.parseQuery(query)",
          "1439:         def variables = [",
          "1440:                 var1: [bar: 123],",
          "1441:                 var2: [foo: \"foo\", input2: [bar: 123]]",
          "",
          "[Removed Lines]",
          "1438:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1444:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
          "1445:         when:",
          "1447:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1448:         def secondField = topLevelField.getChildren().get(0)",
          "1449:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
          "",
          "[Removed Lines]",
          "1446:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1446:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1483:         assertValidQuery(graphQLSchema, query)",
          "1484:         def document = TestUtil.parseQuery(query)",
          "1486:         when:",
          "1489:         then:",
          "1490:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1485:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1487:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1487:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1518:         assertValidQuery(graphQLSchema, query)",
          "1519:         def document = TestUtil.parseQuery(query)",
          "1521:         def variables = [",
          "1522:                 varIds  : null,",
          "1523:                 otherVar: null,",
          "1524:         ]",
          "1525:         when:",
          "1528:         then:",
          "1529:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1520:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1526:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1526:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1573:         ]",
          "1574:         assertValidQuery(graphQLSchema, query, variables)",
          "1575:         Document document = TestUtil.parseQuery(query)",
          "1577:         when:",
          "1579:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1580:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1581:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1576:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1578:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1578:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1626:         ]",
          "1627:         assertValidQuery(graphQLSchema, query, variables)",
          "1628:         Document document = TestUtil.parseQuery(query)",
          "1630:         when:",
          "1632:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1633:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1634:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1629:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1631:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1631:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1681:         '''",
          "1682:         assertValidQuery(graphQLSchema, query)",
          "1683:         Document document = TestUtil.parseQuery(query)",
          "1685:         when:",
          "1688:         then:",
          "1689:         tree.normalizedFieldToMergedField.size() == 3",
          "",
          "[Removed Lines]",
          "1684:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1686:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1686:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1739:         '''",
          "1740:         assertValidQuery(graphQLSchema, query)",
          "1741:         Document document = TestUtil.parseQuery(query)",
          "1743:         when:",
          "1745:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1747:         then:",
          "",
          "[Removed Lines]",
          "1742:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1744:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1744:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1787:         '''",
          "1788:         assertValidQuery(graphQLSchema, query)",
          "1789:         Document document = TestUtil.parseQuery(query)",
          "1791:         when:",
          "1793:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1795:         then:",
          "",
          "[Removed Lines]",
          "1790:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1792:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1792:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1863:         '''",
          "1864:         assertValidQuery(schema, query)",
          "1865:         Document document = TestUtil.parseQuery(query)",
          "1867:         when:",
          "1869:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1871:         then:",
          "",
          "[Removed Lines]",
          "1866:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1868:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1868:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1927:         '''",
          "1928:         assertValidQuery(schema, query)",
          "1929:         Document document = TestUtil.parseQuery(query)",
          "1931:         when:",
          "1933:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1935:         then:",
          "",
          "[Removed Lines]",
          "1930:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1932:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1932:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1984:         '''",
          "1985:         assertValidQuery(schema, query)",
          "1986:         Document document = TestUtil.parseQuery(query)",
          "1988:         when:",
          "1990:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1992:         then:",
          "",
          "[Removed Lines]",
          "1987:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1989:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1989:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2059:         '''",
          "2060:         assertValidQuery(schema, query)",
          "2061:         Document document = TestUtil.parseQuery(query)",
          "2063:         when:",
          "2065:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2067:         then:",
          "",
          "[Removed Lines]",
          "2062:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2064:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2064:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2121:         '''",
          "2122:         assertValidQuery(schema, query)",
          "2123:         Document document = TestUtil.parseQuery(query)",
          "2125:         when:",
          "2127:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2129:         then:",
          "",
          "[Removed Lines]",
          "2124:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2126:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2126:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2163:         '''",
          "2164:         assertValidQuery(schema, query)",
          "2165:         Document document = TestUtil.parseQuery(query)",
          "2167:         when:",
          "2169:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2171:         then:",
          "",
          "[Removed Lines]",
          "2166:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2168:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2168:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2206:         '''",
          "2207:         assertValidQuery(schema, query)",
          "2208:         Document document = TestUtil.parseQuery(query)",
          "2210:         when:",
          "2212:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2214:         then:",
          "",
          "[Removed Lines]",
          "2209:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2211:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2211:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2249:         '''",
          "2250:         assertValidQuery(schema, query)",
          "2251:         Document document = TestUtil.parseQuery(query)",
          "2253:         when:",
          "2255:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2257:         then:",
          "",
          "[Removed Lines]",
          "2252:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2254:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2254:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2324:         '''",
          "2325:         assertValidQuery(schema, query)",
          "2326:         Document document = TestUtil.parseQuery(query)",
          "2328:         when:",
          "2330:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2332:         then:",
          "",
          "[Removed Lines]",
          "2327:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2329:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2329:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2400:         '''",
          "2401:         assertValidQuery(schema, query)",
          "2402:         Document document = TestUtil.parseQuery(query)",
          "2404:         when:",
          "2406:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2408:         then:",
          "",
          "[Removed Lines]",
          "2403:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2405:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2405:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2462:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
          "2463:         assertValidQuery(graphQLSchema, query, variables)",
          "2464:         Document document = TestUtil.parseQuery(query)",
          "2466:         when:",
          "2468:         println String.join(\"\\n\", printTree(tree))",
          "2469:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "2465:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2467:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2467:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2519:         def variables = [:]",
          "2520:         assertValidQuery(graphQLSchema, query, variables)",
          "2521:         Document document = TestUtil.parseQuery(query)",
          "2523:         when:",
          "2525:         def printedTree = printTreeAndDirectives(tree)",
          "2527:         then:",
          "",
          "[Removed Lines]",
          "2522:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2524:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2524:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2585:         Document document = TestUtil.parseQuery(query)",
          "2589:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2591:         expect:",
          "",
          "[Removed Lines]",
          "2587:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2588:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2588:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2638:         Document document = TestUtil.parseQuery(query)",
          "2642:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2644:         expect:",
          "",
          "[Removed Lines]",
          "2640:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2641:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2641:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2685:         Document document = TestUtil.parseQuery(query)",
          "2689:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2691:         expect:",
          "",
          "[Removed Lines]",
          "2687:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2688:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2688:         def tree = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationToAstCompilerTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "2140:         assertValidQuery(schema, query, variables)",
          "2141:         Document originalDocument = TestUtil.parseQuery(query)",
          "2145:     }",
          "2147:     private List<ExecutableNormalizedField> createNormalizedFields(GraphQLSchema schema, String query, Map<String, Object> variables = [:]) {",
          "",
          "[Removed Lines]",
          "2143:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2144:         return dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2143:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(schema, originalDocument, null, RawVariables.of(variables))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55f2e5d4e275da2568169f53ed38a34657b0e33c",
      "candidate_info": {
        "commit_hash": "55f2e5d4e275da2568169f53ed38a34657b0e33c",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/55f2e5d4e275da2568169f53ed38a34657b0e33c",
        "files": [
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ],
        "message": "Added benchmark code",
        "before_after_code_files": [
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ],
          "candidate": [
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
          "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package benchmark;",
          "3: import graphql.execution.CoercedVariables;",
          "4: import graphql.language.Document;",
          "5: import graphql.normalized.ExecutableNormalizedOperation;",
          "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
          "7: import graphql.parser.Parser;",
          "8: import graphql.schema.GraphQLSchema;",
          "9: import graphql.schema.idl.SchemaGenerator;",
          "10: import org.openjdk.jmh.annotations.Benchmark;",
          "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
          "12: import org.openjdk.jmh.annotations.Fork;",
          "13: import org.openjdk.jmh.annotations.Level;",
          "14: import org.openjdk.jmh.annotations.Measurement;",
          "15: import org.openjdk.jmh.annotations.Mode;",
          "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
          "17: import org.openjdk.jmh.annotations.Param;",
          "18: import org.openjdk.jmh.annotations.Scope;",
          "19: import org.openjdk.jmh.annotations.Setup;",
          "20: import org.openjdk.jmh.annotations.State;",
          "21: import org.openjdk.jmh.annotations.Warmup;",
          "22: import org.openjdk.jmh.runner.Runner;",
          "23: import org.openjdk.jmh.runner.RunnerException;",
          "24: import org.openjdk.jmh.runner.options.Options;",
          "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
          "27: import java.util.concurrent.TimeUnit;",
          "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
          "31: @State(Scope.Benchmark)",
          "32: @Warmup(iterations = 2, time = 5)",
          "33: @Measurement(iterations = 3, time = 5)",
          "34: @Fork(2)",
          "35: public class ENFBenchmarkDeepIntrospection {",
          "37:     @Param({\"2\", \"10\", \"20\"})",
          "38:     int howDeep = 2;",
          "40:     String query = \"\";",
          "42:     GraphQLSchema schema;",
          "43:     Document document;",
          "45:     @Setup(Level.Trial)",
          "46:     public void setUp() {",
          "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
          "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
          "50:         query = createDeepQuery(howDeep);",
          "51:         document = Parser.parse(query);",
          "52:     }",
          "53:     @Benchmark",
          "54:     @BenchmarkMode(Mode.AverageTime)",
          "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
          "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
          "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
          "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
          "59:                 document,",
          "60:                 null,",
          "61:                 CoercedVariables.emptyVariables(),",
          "62:                 options);",
          "63:         return executableNormalizedOperation;",
          "64:     }",
          "66:     public static void main(String[] args) throws RunnerException {",
          "67:         runAtStartup();",
          "69:         Options opt = new OptionsBuilder()",
          "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
          "71:                 .build();",
          "73:         new Runner(opt).run();",
          "74:     }",
          "76:     private static void runAtStartup() {",
          "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
          "79:         benchmarkIntrospection.howDeep = 2;",
          "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
          "82:                 benchmarkIntrospection::setUp,",
          "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
          "84:                 () ->{}",
          "85:         );",
          "86:     }",
          "90:     private static String createDeepQuery(int depth) {",
          "91:         String result = \"query test {\\n\" +",
          "92:                 \"  __schema {\\n\" +",
          "93:                 \"    types {\\n\" +",
          "94:                 \"      ...F1\\n\" +",
          "95:                 \"    }\\n\" +",
          "96:                 \"  }\\n\" +",
          "97:                 \"}\\n\";",
          "99:         for (int i = 1; i < depth; i++) {",
          "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
          "101:                     \"          fields {\\n\" +",
          "102:                     \"            type {\\n\" +",
          "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
          "104:                     \"            }\\n\" +",
          "105:                     \"          }\\n\" +",
          "106:                     \"\\n\" +",
          "107:                     \"          ofType {\\n\" +",
          "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
          "109:                     \"          }\\n\" +",
          "110:                     \"        }\\n\";",
          "111:         }",
          "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
          "113:                 \"          fields {\\n\" +",
          "114:                 \"            type {\\n\" +",
          "115:                 \"name\\n\" +",
          "116:                 \"            }\\n\" +",
          "117:                 \"          }\\n\" +",
          "118:                 \"}\\n\";",
          "119:         return result;",
          "120:     }",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dceeae26751a3c100a45bb5ba970738c3124b2e",
      "candidate_info": {
        "commit_hash": "2dceeae26751a3c100a45bb5ba970738c3124b2e",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/2dceeae26751a3c100a45bb5ba970738c3124b2e",
        "files": [
          "src/test/java/benchmark/BenchmarkUtils.java"
        ],
        "message": "fix up loading resources from inside jar",
        "before_after_code_files": [
          "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java"
          ],
          "candidate": [
            "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
          "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package benchmark;",
          "7: import java.net.URL;",
          "8: import java.nio.charset.Charset;",
          "9: import java.util.concurrent.Callable;",
          "",
          "[Removed Lines]",
          "3: import com.google.common.io.Files;",
          "4: import graphql.Assert;",
          "6: import java.io.File;",
          "",
          "[Added Lines]",
          "3: import java.io.InputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:             if (resource == null) {",
          "18:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
          "19:             }",
          "21:         });",
          "22:     }",
          "",
          "[Removed Lines]",
          "20:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
          "",
          "[Added Lines]",
          "17:             byte[] bytes;",
          "18:             try (InputStream inputStream = resource.openStream()) {",
          "19:                 bytes = inputStream.readAllBytes();",
          "20:             }",
          "21:             return new String(bytes, Charset.defaultCharset());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd6ec10c13146cc3a001db89e6842bd973064949",
      "candidate_info": {
        "commit_hash": "bd6ec10c13146cc3a001db89e6842bd973064949",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/bd6ec10c13146cc3a001db89e6842bd973064949",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
        ],
        "message": "Fixed tests and also added unit test for depth in good faith",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
          "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
          "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "45:             int operationDepth) {",
          "46:         this.operation = operation;",
          "47:         this.operationName = operationName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:             int operationFieldCount,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
          "51:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
          "52:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
          "54:         this.operationDepth = operationDepth;",
          "55:     }",
          "",
          "[Removed Lines]",
          "53:         this.operationFieldCount = fieldToNormalizedField.keySet().size();",
          "",
          "[Added Lines]",
          "54:         this.operationFieldCount = operationFieldCount;",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "432:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "433:         private int fieldCount = 0;",
          "435:         private ExecutableNormalizedOperationFactoryImpl(",
          "436:                 GraphQLSchema graphQLSchema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:         private int maxDepthSeen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
          "460:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "461:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "462:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
          "",
          "[Removed Lines]",
          "459:             int maxDepthSeen = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:                     normalizedFieldToMergedField.build(),",
          "486:                     normalizedFieldToQueryDirectives.build(),",
          "487:                     coordinatesToNormalizedFields.build(),",
          "488:                     maxDepthSeen",
          "489:             );",
          "490:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:                     fieldCount,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "629:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
          "630:                                                    int level,",
          "631:                                                    ExecutableNormalizedField parent) {",
          "632:             Field field;",
          "633:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "634:             field = collectedFieldGroup.fields.iterator().next().field;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:             this.fieldCount++;",
          "635:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "636:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "637:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "642:             }",
          "643:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "648:             return ExecutableNormalizedField.newNormalizedField()",
          "649:                     .alias(field.getAlias())",
          "650:                     .resolvedArguments(argumentValues)",
          "",
          "[Removed Lines]",
          "644:             this.fieldCount++;",
          "645:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "646:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "647:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
          "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:         given:",
          "894:         def graphQLSchema = createComplexSchema()",
          "896:         when:",
          "898:             {",
          "899:                 nodeType: __type(name: \"Node\") {",
          "900:                     possibleTypes {",
          "",
          "[Removed Lines]",
          "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
          "",
          "[Added Lines]",
          "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
          "899:         String query = \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:                         name",
          "903:                     }",
          "904:                 }",
          "906:                     possibleTypes {",
          "907:                         kind",
          "908:                         name",
          "",
          "[Removed Lines]",
          "905:                 resourceType: __type(name: \"Resource\") {",
          "",
          "[Added Lines]",
          "907:             }",
          "908:         \"\"\"",
          "909:         def result = graphQL.execute(query)",
          "911:         then:",
          "912:         !result.errors",
          "913:         result.data == [",
          "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "915:         ]",
          "917:         when:",
          "918:         query = \"\"\"",
          "919:         {",
          "920:             resourceType: __type(name: \"Resource\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "911:                         kind",
          "912:                         name",
          "913:                     }",
          "916:                     interfaces {",
          "917:                         kind",
          "918:                         name",
          "919:                     }",
          "920:                 }",
          "924:         then:",
          "925:         !result.errors",
          "926:         result.data == [",
          "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
          "930:         ]",
          "931:     }",
          "",
          "[Removed Lines]",
          "914:                 }",
          "915:                 imageType: __type(name: \"Image\") {",
          "921:             }",
          "922:         \"\"\")",
          "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "",
          "[Added Lines]",
          "929:                 }",
          "930:         }",
          "931:         \"\"\"",
          "932:         result = graphQL.execute(query)",
          "934:         then:",
          "935:         !result.errors",
          "936:         result.data == [",
          "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "938:         ]",
          "940:         when:",
          "942:         query = \"\"\"",
          "943:         {",
          "944:             imageType: __type(name: \"Image\") {",
          "950:         }",
          "951:         \"\"\"",
          "952:         result = graphQL.execute(query)",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
          "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class UnionTest extends Specification {",
          "8:         def query = \"\"\"",
          "9:             {",
          "10:                 Named: __type(name: \"Named\") {",
          "",
          "[Removed Lines]",
          "7:     def \"can introspect on union and intersection types\"() {",
          "",
          "[Added Lines]",
          "7:     def \"can introspect on union types\"() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:                   possibleTypes { name }",
          "16:                   enumValues { name }",
          "17:                   inputFields { name }",
          "27:                 }",
          "28:             }",
          "29:             \"\"\"",
          "",
          "[Removed Lines]",
          "18:             }",
          "19:                 Pet: __type(name: \"Pet\") {",
          "20:                   kind",
          "21:                   name",
          "22:                   fields { name }",
          "23:                   interfaces { name }",
          "24:                   possibleTypes { name }",
          "25:                   enumValues { name }",
          "26:                   inputFields { name }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:                 ],",
          "43:                 enumValues   : null,",
          "44:                 inputFields  : null",
          "47:                                       kind         : 'UNION',",
          "48:                                       name         : 'Pet',",
          "49:                                       fields       : null,",
          "",
          "[Removed Lines]",
          "45:         ],",
          "46:                               Pet  : [",
          "",
          "[Added Lines]",
          "36:         ]]",
          "37:         when:",
          "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
          "40:         then:",
          "41:         executionResult.data == expectedResult",
          "44:     }",
          "46:     def \"can introspect on intersection types\"() {",
          "47:         def query = \"\"\"",
          "48:             {",
          "49:                 Pet: __type(name: \"Pet\") {",
          "50:                   kind",
          "51:                   name",
          "52:                   fields { name }",
          "53:                   interfaces { name }",
          "54:                   possibleTypes { name }",
          "55:                   enumValues { name }",
          "56:                   inputFields { name }",
          "57:                 }",
          "58:             }",
          "59:             \"\"\"",
          "61:         def expectedResult = [Pet  : [",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
          "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.ExecutionResult",
          "5: import graphql.TestUtil",
          "6: import graphql.execution.CoercedVariables",
          "7: import graphql.language.Document",
          "8: import graphql.normalized.ExecutableNormalizedOperationFactory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.AbortExecutionException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         when:",
          "25:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
          "29:         then:",
          "31:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
          "32:     }",
          "",
          "[Removed Lines]",
          "26:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(),document,",
          "27:         \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "30:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 62",
          "",
          "[Added Lines]",
          "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
          "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:                 a1: __type(name : \"t\") { name }",
          "90:                 a2 :  __type(name : \"t1\") { name }",
          "91:             }",
          "94:         \"\"\" query badActor {",
          "95:                 __schema { types { name} }",
          "",
          "[Removed Lines]",
          "92:         \"\"\"                                                | _",
          "",
          "[Added Lines]",
          "94:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:                 a1: __schema { types { name} }",
          "102:                 a2 : __schema { types { name} }",
          "103:             }",
          "106:     }",
          "",
          "[Removed Lines]",
          "104:         \"\"\"                                     | _",
          "",
          "[Added Lines]",
          "106:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:         !er.errors.isEmpty()",
          "162:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
          "163:     }",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     def \"can stop deep queries\"() {",
          "169:         when:",
          "170:         def query = createDeepQuery(depth)",
          "171:         def then = System.currentTimeMillis()",
          "172:         ExecutionResult er = graphql.execute(query)",
          "173:         def ms = System.currentTimeMillis()-then",
          "175:         then:",
          "176:         !er.errors.isEmpty()",
          "177:         er.errors[0].class == targetError",
          "178:         er.data == null // it stopped hard - it did not continue to normal business",
          "179:         println \"Took \" + ms + \"ms\"",
          "181:         where:",
          "182:         depth | targetError",
          "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
          "184:         10    | AbortExecutionException.class",
          "185:         15    | AbortExecutionException.class",
          "186:         20    | AbortExecutionException.class",
          "187:         25    | AbortExecutionException.class",
          "188:         50    | AbortExecutionException.class",
          "189:         100    | AbortExecutionException.class",
          "190:     }",
          "192:     String createDeepQuery(int depth = 25) {",
          "193:         def result = \"\"\"",
          "194: query test {",
          "195:   __schema {",
          "196:     types {",
          "197:       ...F1",
          "198:     }",
          "199:   }",
          "200: }",
          "201: \"\"\"",
          "202:         for (int i = 1; i < depth; i++) {",
          "203:             result += \"\"\"",
          "204:         fragment F$i on __Type {",
          "205:           fields {",
          "206:             type {",
          "207:               ...F${i + 1}",
          "208:             }",
          "209:           }",
          "211:   ofType {",
          "212:     ...F${i + 1}",
          "213:   }",
          "214: }",
          "217: \"\"\"",
          "218:         }",
          "219:         result += \"\"\"",
          "220:         fragment F$depth on __Type {",
          "221:           fields {",
          "222:             type {",
          "223: name",
          "224:             }",
          "225:           }",
          "226: }",
          "229: \"\"\"",
          "230:         return result",
          "231:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}