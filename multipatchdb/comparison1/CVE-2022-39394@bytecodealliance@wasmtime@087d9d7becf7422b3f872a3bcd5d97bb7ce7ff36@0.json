{
  "cve_id": "CVE-2022-39394",
  "cve_desc": "Wasmtime is a standalone runtime for WebAssembly. Prior to version 2.0.2, there is a bug in Wasmtime's C API implementation where the definition of the `wasmtime_trap_code` does not match its declared signature in the `wasmtime/trap.h` header file. This discrepancy causes the function implementation to perform a 4-byte write into a 1-byte buffer provided by the caller. This can lead to three zero bytes being written beyond the 1-byte location provided by the caller. This bug has been patched and users should upgrade to Wasmtime 2.0.2. This bug can be worked around by providing a 4-byte buffer casted to a 1-byte buffer when calling `wasmtime_trap_code`. Users of the `wasmtime` crate are not affected by this issue, only users of the C API function `wasmtime_trap_code` are affected.",
  "repo": "bytecodealliance/wasmtime",
  "patch_hash": "087d9d7becf7422b3f872a3bcd5d97bb7ce7ff36",
  "patch_info": {
    "commit_hash": "087d9d7becf7422b3f872a3bcd5d97bb7ce7ff36",
    "repo": "bytecodealliance/wasmtime",
    "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/087d9d7becf7422b3f872a3bcd5d97bb7ce7ff36",
    "files": [
      "crates/c-api/src/trap.rs"
    ],
    "message": "Merge pull request from GHSA-h84q-m8rr-3v9q\n\nThe Rust definition was previously performing a 4-byte write when the C\nAPI was declared as taking an 1-byte buffer.",
    "before_after_code_files": [
      "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
    ]
  },
  "patch_diff": {
    "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs": [
      "File: crates/c-api/src/trap.rs -> crates/c-api/src/trap.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "92: }",
      "94: #[no_mangle]",
      "96:     match raw.trap.trap_code() {",
      "97:         Some(c) => {",
      "",
      "[Removed Lines]",
      "95: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut i32) -> bool {",
      "",
      "[Added Lines]",
      "95: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut u8) -> bool {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b6d5e78de106503b3b9add218bb3d2b1d63c493",
      "candidate_info": {
        "commit_hash": "5b6d5e78de106503b3b9add218bb3d2b1d63c493",
        "repo": "bytecodealliance/wasmtime",
        "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/5b6d5e78de106503b3b9add218bb3d2b1d63c493",
        "files": [
          "crates/c-api/src/trap.rs"
        ],
        "message": "Merge pull request from GHSA-h84q-m8rr-3v9q\n\nThe Rust definition was previously performing a 4-byte write when the C\nAPI was declared as taking an 1-byte buffer.",
        "before_after_code_files": [
          "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
          ],
          "candidate": [
            "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
          ]
        }
      },
      "candidate_diff": {
        "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs": [
          "File: crates/c-api/src/trap.rs -> crates/c-api/src/trap.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: }",
          "118: #[no_mangle]",
          "120:     let trap = match raw.error.downcast_ref::<Trap>() {",
          "121:         Some(trap) => trap,",
          "122:         None => return false,",
          "",
          "[Removed Lines]",
          "119: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut i32) -> bool {",
          "",
          "[Added Lines]",
          "119: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut u8) -> bool {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75260f527a7f4cb18d77b527deb9484a0d90bf14",
      "candidate_info": {
        "commit_hash": "75260f527a7f4cb18d77b527deb9484a0d90bf14",
        "repo": "bytecodealliance/wasmtime",
        "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/75260f527a7f4cb18d77b527deb9484a0d90bf14",
        "files": [
          "crates/c-api/src/trap.rs"
        ],
        "message": "Merge pull request from GHSA-h84q-m8rr-3v9q\n\nThe Rust definition was previously performing a 4-byte write when the C\nAPI was declared as taking an 1-byte buffer.",
        "before_after_code_files": [
          "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
          ],
          "candidate": [
            "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
          ]
        }
      },
      "candidate_diff": {
        "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs": [
          "File: crates/c-api/src/trap.rs -> crates/c-api/src/trap.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: }",
          "118: #[no_mangle]",
          "120:     let trap = match raw.error.downcast_ref::<Trap>() {",
          "121:         Some(trap) => trap,",
          "122:         None => return false,",
          "",
          "[Removed Lines]",
          "119: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut i32) -> bool {",
          "",
          "[Added Lines]",
          "119: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut u8) -> bool {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15991947f485a60298e45d1d915125c0f3cc5a8a",
      "candidate_info": {
        "commit_hash": "15991947f485a60298e45d1d915125c0f3cc5a8a",
        "repo": "bytecodealliance/wasmtime",
        "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/15991947f485a60298e45d1d915125c0f3cc5a8a",
        "files": [
          ".github/actions/binary-compatible-builds/action.yml",
          ".github/actions/github-release/action.yml",
          ".github/actions/github-release/main.js",
          ".github/actions/github-release/package-lock.json",
          ".github/actions/github-release/package.json",
          ".github/actions/install-rust/action.yml",
          ".github/workflows/cargo-audit.yml",
          ".github/workflows/main.yml",
          ".github/workflows/publish-to-cratesio.yml",
          ".github/workflows/push-tag.yml",
          ".github/workflows/release-process.yml",
          "Cargo.lock",
          "Cargo.toml",
          "cranelift/Cargo.toml",
          "cranelift/bforest/Cargo.toml",
          "cranelift/codegen/Cargo.toml",
          "cranelift/codegen/meta/Cargo.toml",
          "cranelift/codegen/shared/Cargo.toml",
          "cranelift/codegen/src/isa/x64/inst/mod.rs",
          "cranelift/entity/Cargo.toml",
          "cranelift/filetests/Cargo.toml",
          "cranelift/frontend/Cargo.toml",
          "cranelift/fuzzgen/Cargo.toml",
          "cranelift/interpreter/Cargo.toml",
          "cranelift/isle/isle/Cargo.toml",
          "cranelift/jit/Cargo.toml",
          "cranelift/module/Cargo.toml",
          "cranelift/native/Cargo.toml",
          "cranelift/object/Cargo.toml",
          "cranelift/preopt/Cargo.toml",
          "cranelift/reader/Cargo.toml",
          "cranelift/serde/Cargo.toml",
          "cranelift/umbrella/Cargo.toml",
          "cranelift/wasm/Cargo.toml",
          "crates/asm-macros/Cargo.toml",
          "crates/c-api/src/trap.rs",
          "crates/cache/Cargo.toml",
          "crates/cli-flags/Cargo.toml",
          "crates/component-macro/Cargo.toml",
          "crates/component-util/Cargo.toml",
          "crates/cranelift/Cargo.toml",
          "crates/environ/Cargo.toml",
          "crates/fiber/Cargo.toml",
          "crates/jit-debug/Cargo.toml",
          "crates/jit/Cargo.toml",
          "crates/runtime/Cargo.toml",
          "crates/runtime/src/cow.rs",
          "crates/runtime/src/instance/allocator/pooling.rs",
          "crates/test-programs/Cargo.toml",
          "crates/types/Cargo.toml",
          "crates/wasi-common/Cargo.toml",
          "crates/wasi-common/cap-std-sync/Cargo.toml",
          "crates/wasi-common/tokio/Cargo.toml",
          "crates/wasi-crypto/Cargo.toml",
          "crates/wasi-nn/Cargo.toml",
          "crates/wasi/Cargo.toml",
          "crates/wasmtime/Cargo.toml",
          "crates/wast/Cargo.toml",
          "crates/wiggle/Cargo.toml",
          "crates/wiggle/generate/Cargo.toml",
          "crates/wiggle/macro/Cargo.toml",
          "tests/all/pooling_allocator.rs"
        ],
        "message": "Prepare a Wasmtime 1.0.2 release (#5246)\n\n* Merge pull request from GHSA-wh6w-3828-g9qf\n\nThis is a minimal fix for the release branch to fix the issue of having\na memory slot get reused between a module with an image and one without.\n\n* Merge pull request from GHSA-44mr-8vmm-wjhg\n\nThis ensures that memories, even with zero contents, still have the\nnecessary virtual mappings as required by the code generator to report\nout-of-bounds reads/writes.\n\n* Merge pull request from GHSA-h84q-m8rr-3v9q\n\nThe Rust definition was previously performing a 4-byte write when the C\nAPI was declared as taking an 1-byte buffer.\n\n* CI fixes from CVE patches\n\n* Bump to 1.0.2\n\n* Cherry-pick github actions fixes for 1.0.2 release\n\nCulmination of patches already landed in `main` and `release-2.0.0`\n\n* Release Wasmtime 1.0.2\n\n[automatically-tag-and-release-this-commit]\n\n* Fix inst size test for Rust 1.65.0\n\n* Use an alternate doxygen download link (#5150)\n\n* Use an alternate doxygen download link\n\nLooks like doxygen.nl is down otherwise.\n\n* Update link",
        "before_after_code_files": [
          ".github/actions/github-release/main.js||.githuactions/github-release/main.js",
          "Cargo.lock||Cargo.lock",
          "cranelift/codegen/src/isx64/inst/mod.rs||cranelift/codegen/src/isa/x64/inst/mod.rs",
          "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs",
          "crates/runtime/src/cow.rs||crates/runtime/src/cow.rs",
          "crates/runtime/src/instance/allocator/pooling.rs||crates/runtime/src/instance/allocator/pooling.rs",
          "tests/all/pooling_allocator.rs||tests/all/pooling_allocator.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
          ],
          "candidate": [
            "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs"
          ]
        }
      },
      "candidate_diff": {
        ".github/actions/github-release/main.js||.githuactions/github-release/main.js": [
          "File: .github/actions/github-release/main.js -> .githuactions/github-release/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   core.info(`name: ${name}`);",
          "26:   core.info(`token: ${token}`);",
          "",
          "[Removed Lines]",
          "28:   const octokit = new github.GitHub(token);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     if (tag === null || tag.data.object.sha !== sha) {",
          "45:       core.info(`updating existing tag or creating new one`);",
          "57:       try {",
          "58:         core.info(`updating dev tag`);",
          "60:             owner,",
          "61:             repo,",
          "62:             ref: 'tags/dev',",
          "",
          "[Removed Lines]",
          "47:       try {",
          "48:         core.info(`fetching release for ${name}`);",
          "49:         const release = await octokit.repos.getReleaseByTag({ owner, repo, tag: name });",
          "50:         core.info(`deleting release ${release.data.id}`);",
          "51:         await octokit.repos.deleteRelease({ owner, repo, release_id: release.data.id });",
          "52:       } catch (e) {",
          "54:         console.log(\"ERROR: \", JSON.stringify(e, null, 2));",
          "55:       }",
          "59:         await octokit.git.updateRef({",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         }",
          "82:       }",
          "83:     } else {",
          "84:       core.info(`existing tag works`);",
          "85:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:   let release = null;",
          "92:   try {",
          "93:     core.info(`fetching release`);",
          "95:   } catch (e) {",
          "96:     console.log(\"ERROR: \", JSON.stringify(e, null, 2));",
          "97:     core.info(`creating a release`);",
          "98:     try {",
          "100:         owner,",
          "101:         repo,",
          "102:         tag_name: name,",
          "",
          "[Removed Lines]",
          "94:     release = await octokit.repos.getReleaseByTag({ owner, repo, tag: name });",
          "99:       release = await octokit.repos.createRelease({",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:     } catch(e) {",
          "106:       console.log(\"ERROR: \", JSON.stringify(e, null, 2));",
          "107:       core.info(`fetching one more time`);",
          "109:     }",
          "110:   }",
          "111:   console.log(\"found release: \", JSON.stringify(release.data, null, 2));",
          "",
          "[Removed Lines]",
          "108:       release = await octokit.repos.getReleaseByTag({ owner, repo, tag: name });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:   for (const file of glob.sync(files)) {",
          "115:     const size = fs.statSync(file).size;",
          "116:     core.info(`upload ${file}`);",
          "118:       data: fs.createReadStream(file),",
          "119:       headers: { 'content-length': size, 'content-type': 'application/octet-stream' },",
          "121:       url: release.data.upload_url,",
          "122:     });",
          "123:   }",
          "",
          "[Removed Lines]",
          "117:     await octokit.repos.uploadReleaseAsset({",
          "120:       name: path.basename(file),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "510: [[package]]",
          "511: name = \"cranelift\"",
          "513: dependencies = [",
          "514:  \"cranelift-codegen\",",
          "515:  \"cranelift-frontend\",",
          "",
          "[Removed Lines]",
          "512: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "512: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518: [[package]]",
          "519: name = \"cranelift-bforest\"",
          "521: dependencies = [",
          "522:  \"cranelift-entity\",",
          "523: ]",
          "525: [[package]]",
          "526: name = \"cranelift-codegen\"",
          "528: dependencies = [",
          "529:  \"arrayvec\",",
          "530:  \"bincode\",",
          "",
          "[Removed Lines]",
          "520: version = \"0.88.1\"",
          "527: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "520: version = \"0.88.2\"",
          "527: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550: [[package]]",
          "551: name = \"cranelift-codegen-meta\"",
          "553: dependencies = [",
          "554:  \"cranelift-codegen-shared\",",
          "555: ]",
          "557: [[package]]",
          "558: name = \"cranelift-codegen-shared\"",
          "561: [[package]]",
          "562: name = \"cranelift-entity\"",
          "564: dependencies = [",
          "565:  \"serde\",",
          "566: ]",
          "",
          "[Removed Lines]",
          "552: version = \"0.88.1\"",
          "559: version = \"0.88.1\"",
          "563: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "552: version = \"0.88.2\"",
          "559: version = \"0.88.2\"",
          "563: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "591: [[package]]",
          "592: name = \"cranelift-frontend\"",
          "594: dependencies = [",
          "595:  \"cranelift-codegen\",",
          "596:  \"hashbrown\",",
          "",
          "[Removed Lines]",
          "593: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "593: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "612: [[package]]",
          "613: name = \"cranelift-interpreter\"",
          "615: dependencies = [",
          "616:  \"cranelift-codegen\",",
          "617:  \"cranelift-entity\",",
          "",
          "[Removed Lines]",
          "614: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "614: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "626: [[package]]",
          "627: name = \"cranelift-isle\"",
          "629: dependencies = [",
          "630:  \"log\",",
          "631:  \"miette\",",
          "",
          "[Removed Lines]",
          "628: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "628: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "635: [[package]]",
          "636: name = \"cranelift-jit\"",
          "638: dependencies = [",
          "639:  \"anyhow\",",
          "640:  \"cranelift\",",
          "",
          "[Removed Lines]",
          "637: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "637: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "654: [[package]]",
          "655: name = \"cranelift-module\"",
          "657: dependencies = [",
          "658:  \"anyhow\",",
          "659:  \"cranelift-codegen\",",
          "",
          "[Removed Lines]",
          "656: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "656: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "663: [[package]]",
          "664: name = \"cranelift-native\"",
          "666: dependencies = [",
          "667:  \"cranelift-codegen\",",
          "668:  \"libc\",",
          "",
          "[Removed Lines]",
          "665: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "665: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "672: [[package]]",
          "673: name = \"cranelift-object\"",
          "675: dependencies = [",
          "676:  \"anyhow\",",
          "677:  \"cranelift-codegen\",",
          "",
          "[Removed Lines]",
          "674: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "674: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "686: [[package]]",
          "687: name = \"cranelift-preopt\"",
          "689: dependencies = [",
          "690:  \"cranelift-codegen\",",
          "691: ]",
          "693: [[package]]",
          "694: name = \"cranelift-reader\"",
          "696: dependencies = [",
          "697:  \"cranelift-codegen\",",
          "698:  \"smallvec\",",
          "",
          "[Removed Lines]",
          "688: version = \"0.88.1\"",
          "695: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "688: version = \"0.88.2\"",
          "695: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "702: [[package]]",
          "703: name = \"cranelift-serde\"",
          "705: dependencies = [",
          "706:  \"clap 3.2.8\",",
          "707:  \"cranelift-codegen\",",
          "",
          "[Removed Lines]",
          "704: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "704: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "745: [[package]]",
          "746: name = \"cranelift-wasm\"",
          "748: dependencies = [",
          "749:  \"cranelift-codegen\",",
          "750:  \"cranelift-entity\",",
          "",
          "[Removed Lines]",
          "747: version = \"0.88.1\"",
          "",
          "[Added Lines]",
          "747: version = \"0.88.2\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3099: [[package]]",
          "3100: name = \"wasi-cap-std-sync\"",
          "3102: dependencies = [",
          "3103:  \"anyhow\",",
          "3104:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "3101: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3101: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3122: [[package]]",
          "3123: name = \"wasi-common\"",
          "3125: dependencies = [",
          "3126:  \"anyhow\",",
          "3127:  \"bitflags\",",
          "",
          "[Removed Lines]",
          "3124: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3124: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3167: [[package]]",
          "3168: name = \"wasi-tokio\"",
          "3170: dependencies = [",
          "3171:  \"anyhow\",",
          "3172:  \"cap-std\",",
          "",
          "[Removed Lines]",
          "3169: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3169: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3327: [[package]]",
          "3328: name = \"wasmtime\"",
          "3330: dependencies = [",
          "3331:  \"anyhow\",",
          "3332:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "3329: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3329: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3362: [[package]]",
          "3363: name = \"wasmtime-asm-macros\"",
          "3365: dependencies = [",
          "3366:  \"cfg-if\",",
          "3367: ]",
          "",
          "[Removed Lines]",
          "3364: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3364: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3409: [[package]]",
          "3410: name = \"wasmtime-cache\"",
          "3412: dependencies = [",
          "3413:  \"anyhow\",",
          "3414:  \"base64\",",
          "",
          "[Removed Lines]",
          "3411: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3411: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3431: [[package]]",
          "3432: name = \"wasmtime-cli\"",
          "3434: dependencies = [",
          "3435:  \"anyhow\",",
          "3436:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "3433: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3433: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3472: [[package]]",
          "3473: name = \"wasmtime-cli-flags\"",
          "3475: dependencies = [",
          "3476:  \"anyhow\",",
          "3477:  \"clap 3.2.8\",",
          "",
          "[Removed Lines]",
          "3474: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3474: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3484: [[package]]",
          "3485: name = \"wasmtime-component-macro\"",
          "3487: dependencies = [",
          "3488:  \"proc-macro2\",",
          "3489:  \"quote\",",
          "",
          "[Removed Lines]",
          "3486: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3486: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3494: [[package]]",
          "3495: name = \"wasmtime-component-util\"",
          "3498: [[package]]",
          "3499: name = \"wasmtime-cranelift\"",
          "3501: dependencies = [",
          "3502:  \"anyhow\",",
          "3503:  \"cranelift-codegen\",",
          "",
          "[Removed Lines]",
          "3496: version = \"1.0.1\"",
          "3500: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3496: version = \"1.0.2\"",
          "3500: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3517: [[package]]",
          "3518: name = \"wasmtime-environ\"",
          "3520: dependencies = [",
          "3521:  \"anyhow\",",
          "3522:  \"atty\",",
          "",
          "[Removed Lines]",
          "3519: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3519: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3555: [[package]]",
          "3556: name = \"wasmtime-fiber\"",
          "3558: dependencies = [",
          "3559:  \"backtrace\",",
          "3560:  \"cc\",",
          "",
          "[Removed Lines]",
          "3557: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3557: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3618: [[package]]",
          "3619: name = \"wasmtime-jit\"",
          "3621: dependencies = [",
          "3622:  \"addr2line\",",
          "3623:  \"anyhow\",",
          "",
          "[Removed Lines]",
          "3620: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3620: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3642: [[package]]",
          "3643: name = \"wasmtime-jit-debug\"",
          "3645: dependencies = [",
          "3646:  \"object\",",
          "3647:  \"once_cell\",",
          "",
          "[Removed Lines]",
          "3644: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3644: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3651: [[package]]",
          "3652: name = \"wasmtime-runtime\"",
          "3654: dependencies = [",
          "3655:  \"anyhow\",",
          "3656:  \"cc\",",
          "",
          "[Removed Lines]",
          "3653: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3653: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3676: [[package]]",
          "3677: name = \"wasmtime-types\"",
          "3679: dependencies = [",
          "3680:  \"cranelift-entity\",",
          "3681:  \"serde\",",
          "",
          "[Removed Lines]",
          "3678: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3678: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3686: [[package]]",
          "3687: name = \"wasmtime-wasi\"",
          "3689: dependencies = [",
          "3690:  \"anyhow\",",
          "3691:  \"wasi-cap-std-sync\",",
          "",
          "[Removed Lines]",
          "3688: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3688: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3698: [[package]]",
          "3699: name = \"wasmtime-wasi-crypto\"",
          "3701: dependencies = [",
          "3702:  \"anyhow\",",
          "3703:  \"wasi-crypto\",",
          "",
          "[Removed Lines]",
          "3700: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3700: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3708: [[package]]",
          "3709: name = \"wasmtime-wasi-nn\"",
          "3711: dependencies = [",
          "3712:  \"anyhow\",",
          "3713:  \"openvino\",",
          "",
          "[Removed Lines]",
          "3710: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3710: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3719: [[package]]",
          "3720: name = \"wasmtime-wast\"",
          "3722: dependencies = [",
          "3723:  \"anyhow\",",
          "3724:  \"log\",",
          "",
          "[Removed Lines]",
          "3721: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3721: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3780: [[package]]",
          "3781: name = \"wiggle\"",
          "3783: dependencies = [",
          "3784:  \"anyhow\",",
          "3785:  \"async-trait\",",
          "",
          "[Removed Lines]",
          "3782: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3782: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3797: [[package]]",
          "3798: name = \"wiggle-generate\"",
          "3800: dependencies = [",
          "3801:  \"anyhow\",",
          "3802:  \"heck\",",
          "",
          "[Removed Lines]",
          "3799: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3799: version = \"1.0.2\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3810: [[package]]",
          "3811: name = \"wiggle-macro\"",
          "3813: dependencies = [",
          "3814:  \"proc-macro2\",",
          "3815:  \"quote\",",
          "",
          "[Removed Lines]",
          "3812: version = \"1.0.1\"",
          "",
          "[Added Lines]",
          "3812: version = \"1.0.2\"",
          "",
          "---------------"
        ],
        "cranelift/codegen/src/isx64/inst/mod.rs||cranelift/codegen/src/isa/x64/inst/mod.rs": [
          "File: cranelift/codegen/src/isx64/inst/mod.rs -> cranelift/codegen/src/isa/x64/inst/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     assert_eq!(40, std::mem::size_of::<Inst>());",
          "",
          "---------------"
        ],
        "crates/c-api/src/trap.rs||crates/c-api/src/trap.rs": [
          "File: crates/c-api/src/trap.rs -> crates/c-api/src/trap.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: }",
          "94: #[no_mangle]",
          "96:     match raw.trap.trap_code() {",
          "97:         Some(c) => {",
          "",
          "[Removed Lines]",
          "95: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut i32) -> bool {",
          "",
          "[Added Lines]",
          "95: pub extern \"C\" fn wasmtime_trap_code(raw: &wasm_trap_t, code: &mut u8) -> bool {",
          "",
          "---------------"
        ],
        "crates/runtime/src/cow.rs||crates/runtime/src/cow.rs": [
          "File: crates/runtime/src/cow.rs -> crates/runtime/src/cow.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:     fn reset_with_anon_memory(&self) -> Result<()> {",
          "536:         unsafe {",
          "537:             let ptr = rustix::mm::mmap_anonymous(",
          "538:                 self.base as *mut c_void,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:         if self.static_size == 0 {",
          "537:             return Ok(());",
          "538:         }",
          "",
          "---------------"
        ],
        "crates/runtime/src/instance/allocator/pooling.rs||crates/runtime/src/instance/allocator/pooling.rs": [
          "File: crates/runtime/src/instance/allocator/pooling.rs -> crates/runtime/src/instance/allocator/pooling.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: use std::mem;",
          "20: use std::sync::Mutex;",
          "21: use wasmtime_environ::{",
          "24: };",
          "26: mod index_allocator;",
          "",
          "[Removed Lines]",
          "22:     DefinedMemoryIndex, DefinedTableIndex, HostPtr, Module, PrimaryMap, Tunables, VMOffsets,",
          "23:     WASM_PAGE_SIZE,",
          "",
          "[Added Lines]",
          "22:     DefinedMemoryIndex, DefinedTableIndex, HostPtr, MemoryStyle, Module, PrimaryMap, Tunables,",
          "23:     VMOffsets, WASM_PAGE_SIZE,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:                 .defined_memory_index(memory_index)",
          "387:                 .expect(\"should be a defined memory since we skipped imported ones\");",
          "389:             let memory = unsafe {",
          "390:                 std::slice::from_raw_parts_mut(",
          "391:                     self.memories.get_base(instance_index, defined_index),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:             match plan.style {",
          "390:                 MemoryStyle::Static { bound } => {",
          "391:                     let bound = bound * u64::from(WASM_PAGE_SIZE);",
          "392:                     if bound < self.memories.static_memory_bound {",
          "393:                         return Err(InstantiationError::Resource(anyhow!(",
          "394:                             \"static bound of {bound:x} bytes incompatible with \\",
          "395:                              reservation of {:x} bytes\",",
          "396:                             self.memories.static_memory_bound,",
          "397:                         )));",
          "398:                     }",
          "399:                 }",
          "400:                 MemoryStyle::Dynamic { .. } => {}",
          "401:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:                 )",
          "394:             };",
          "396:             if let Some(image) = runtime_info",
          "397:                 .memory_image(defined_index)",
          "398:                 .map_err(|err| InstantiationError::Resource(err.into()))?",
          "399:             {",
          "403:                 let initial_size = plan.memory.minimum * WASM_PAGE_SIZE as u64;",
          "",
          "[Removed Lines]",
          "400:                 let mut slot = self",
          "401:                     .memories",
          "402:                     .take_memory_image_slot(instance_index, defined_index);",
          "",
          "[Added Lines]",
          "410:             let slot = if cfg!(memory_init_cow) {",
          "411:                 Some(",
          "412:                     self.memories",
          "413:                         .take_memory_image_slot(instance_index, defined_index),",
          "414:                 )",
          "415:             } else {",
          "416:                 None",
          "417:             };",
          "422:                 let mut slot = slot.unwrap();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "425:                     .map_err(InstantiationError::Resource)?,",
          "426:                 );",
          "427:             } else {",
          "428:                 memories.push(",
          "429:                     Memory::new_static(plan, memory, Some(commit_memory_pages), None, unsafe {",
          "430:                         &mut *store.unwrap()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:                 drop(slot);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "657:     initial_memory_offset: usize,",
          "658:     max_memories: usize,",
          "659:     max_instances: usize,",
          "660: }",
          "662: impl MemoryPool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:     static_memory_bound: u64,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "678:             );",
          "679:         }",
          "691:         assert!(",
          "692:             memory_size % crate::page_size() == 0,",
          "",
          "[Removed Lines]",
          "681:         let memory_size = if instance_limits.memory_pages > 0 {",
          "682:             usize::try_from(",
          "683:                 u64::from(tunables.static_memory_bound) * u64::from(WASM_PAGE_SIZE)",
          "684:                     + tunables.static_memory_offset_guard_size,",
          "685:             )",
          "686:             .map_err(|_| anyhow!(\"memory reservation size exceeds addressable memory\"))?",
          "687:         } else {",
          "688:             0",
          "689:         };",
          "",
          "[Added Lines]",
          "703:         let static_memory_bound =",
          "704:             u64::from(tunables.static_memory_bound) * u64::from(WASM_PAGE_SIZE);",
          "705:         let memory_size =",
          "706:             usize::try_from(static_memory_bound + tunables.static_memory_offset_guard_size)",
          "707:                 .map_err(|_| anyhow!(\"memory reservation size exceeds addressable memory\"))?;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "744:             max_memories,",
          "745:             max_instances,",
          "746:             max_memory_size: (instance_limits.memory_pages as usize) * (WASM_PAGE_SIZE as usize),",
          "747:         };",
          "749:         Ok(pool)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:             static_memory_bound,",
          "",
          "---------------"
        ],
        "tests/all/pooling_allocator.rs||tests/all/pooling_allocator.rs": [
          "File: tests/all/pooling_allocator.rs -> tests/all/pooling_allocator.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:     Ok(())",
          "616: }",
          "618: #[test]",
          "619: #[cfg(target_pointer_width = \"64\")]",
          "620: fn instance_too_large() -> Result<()> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618: #[test]",
          "619: fn switch_image_and_non_image() -> Result<()> {",
          "620:     let mut c = Config::new();",
          "621:     c.allocation_strategy(InstanceAllocationStrategy::Pooling {",
          "622:         instance_limits: InstanceLimits {",
          "623:             count: 1,",
          "624:             ..Default::default()",
          "625:         },",
          "626:         strategy: Default::default(),",
          "627:     });",
          "628:     let engine = Engine::new(&c)?;",
          "629:     let module1 = Module::new(",
          "630:         &engine,",
          "631:         r#\"",
          "632:             (module",
          "633:                 (memory 1)",
          "634:                 (func (export \"load\") (param i32) (result i32)",
          "635:                     local.get 0",
          "636:                     i32.load",
          "637:                 )",
          "638:             )",
          "639:         \"#,",
          "640:     )?;",
          "641:     let module2 = Module::new(",
          "642:         &engine,",
          "643:         r#\"",
          "644:             (module",
          "645:                 (memory (export \"memory\") 1)",
          "646:                 (data (i32.const 0) \"1234\")",
          "647:             )",
          "648:         \"#,",
          "649:     )?;",
          "651:     let assert_zero = || -> Result<()> {",
          "652:         let mut store = Store::new(&engine, ());",
          "653:         let instance = Instance::new(&mut store, &module1, &[])?;",
          "654:         let func = instance.get_typed_func::<i32, i32, _>(&mut store, \"load\")?;",
          "655:         assert_eq!(func.call(&mut store, 0)?, 0);",
          "656:         Ok(())",
          "657:     };",
          "661:     Instance::new(&mut Store::new(&engine, ()), &module2, &[])?;",
          "662:     assert_zero()?;",
          "665:     Instance::new(&mut Store::new(&engine, ()), &module2, &[])?;",
          "666:     assert_zero()?;",
          "669:     let mut store = Store::new(&engine, ());",
          "670:     let instance = Instance::new(&mut store, &module2, &[])?;",
          "671:     let memory = instance.get_memory(&mut store, \"memory\").unwrap();",
          "672:     let mem = memory.data_mut(&mut store);",
          "673:     assert!(mem.starts_with(b\"1234\"));",
          "674:     mem[..6].copy_from_slice(b\"567890\");",
          "676:     Ok(())",
          "677: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:     Ok(())",
          "662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: #[test]",
          "726: fn zero_memory_pages_disallows_oob() -> Result<()> {",
          "727:     let mut config = Config::new();",
          "728:     config.allocation_strategy(InstanceAllocationStrategy::Pooling {",
          "729:         strategy: PoolingAllocationStrategy::NextAvailable,",
          "730:         instance_limits: InstanceLimits {",
          "731:             count: 1,",
          "732:             memory_pages: 0,",
          "733:             ..Default::default()",
          "734:         },",
          "735:     });",
          "737:     let engine = Engine::new(&config)?;",
          "738:     let module = Module::new(",
          "739:         &engine,",
          "740:         r#\"",
          "741:             (module",
          "742:                 (memory 0)",
          "744:                 (func (export \"load\") (param i32) (result i32)",
          "745:                     local.get 0",
          "746:                     i32.load)",
          "748:                 (func (export \"store\") (param i32 )",
          "749:                     local.get 0",
          "750:                     local.get 0",
          "751:                     i32.store)",
          "752:             )",
          "753:         \"#,",
          "754:     )?;",
          "755:     let mut store = Store::new(&engine, ());",
          "756:     let instance = Instance::new(&mut store, &module, &[])?;",
          "757:     let load32 = instance.get_typed_func::<i32, i32, _>(&mut store, \"load\")?;",
          "758:     let store32 = instance.get_typed_func::<i32, (), _>(&mut store, \"store\")?;",
          "759:     for i in 0..31 {",
          "760:         assert!(load32.call(&mut store, 1 << i).is_err());",
          "761:         assert!(store32.call(&mut store, 1 << i).is_err());",
          "762:     }",
          "763:     Ok(())",
          "764: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}