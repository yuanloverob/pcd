{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6470a52434126faede0a7f50a558d7d70ce4e0e6",
      "candidate_info": {
        "commit_hash": "6470a52434126faede0a7f50a558d7d70ce4e0e6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6470a52434126faede0a7f50a558d7d70ce4e0e6",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ],
        "message": "PDFBOX-4892: rethrow IllegalArgumentException (pdfium issue 1478)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884421 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java||fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java -> fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:             }",
          "245:             byte[] startRange = (byte[]) nextToken;",
          "246:             byte[] endRange = (byte[]) parseNextToken(cmapStream);",
          "248:         }",
          "249:     }",
          "",
          "[Removed Lines]",
          "247:             result.addCodespaceRange(new CodespaceRange(startRange, endRange));",
          "",
          "[Added Lines]",
          "247:             try",
          "248:             {",
          "249:                 result.addCodespaceRange(new CodespaceRange(startRange, endRange));",
          "250:             }",
          "251:             catch (IllegalArgumentException ex)",
          "252:             {",
          "253:                 throw new IOException(ex);",
          "254:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90f8fb1f6a1c669560a414aef628c4e39b3d8536",
      "candidate_info": {
        "commit_hash": "90f8fb1f6a1c669560a414aef628c4e39b3d8536",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/90f8fb1f6a1c669560a414aef628c4e39b3d8536",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java"
        ],
        "message": "PDFBOX-4892: optimize by avoiding string concat\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889865 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     public void writeXML(Writer output) throws IOException",
          "115:     {",
          "117:         Object value = getValue();",
          "119:         if (value instanceof String)",
          "120:         {",
          "122:         }",
          "123:         else if (value instanceof List)",
          "124:         {",
          "125:             List<String> items = (List<String>) value;",
          "126:             for (String item : items)",
          "127:             {",
          "129:             }",
          "130:         }",
          "132:         String rt = getRichText();",
          "133:         if (rt != null)",
          "134:         {",
          "136:         }",
          "137:         List<FDFField> kids = getKids();",
          "138:         if (kids != null)",
          "",
          "[Removed Lines]",
          "116:         output.write(\"<field name=\\\"\" + getPartialFieldName() + \"\\\">\\n\");",
          "121:             output.write(\"<value>\" + escapeXML((String) value) + \"</value>\\n\");",
          "128:                 output.write(\"<value>\" + escapeXML(item) + \"</value>\\n\");",
          "135:             output.write(\"<value-richtext>\" + escapeXML(rt) + \"</value-richtext>\\n\");",
          "",
          "[Added Lines]",
          "116:         output.write(\"<field name=\\\"\");",
          "117:         output.write(getPartialFieldName());",
          "118:         output.write(\"\\\">\\n\");",
          "124:             output.write(\"<value>\");",
          "125:             output.write(escapeXML((String) value));",
          "126:             output.write(\"</value>\\n\");",
          "133:                 output.write(\"<value>\");",
          "134:                 output.write(escapeXML(item));",
          "135:                 output.write(\"</value>\\n\");",
          "142:             output.write(\"<value-richtext>\");",
          "143:             output.write(escapeXML(rt));",
          "144:             output.write(\"</value-richtext>\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1028379ba432e4f7d242507109153ba6c3c94ac5",
      "candidate_info": {
        "commit_hash": "1028379ba432e4f7d242507109153ba6c3c94ac5",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1028379ba432e4f7d242507109153ba6c3c94ac5",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java"
        ],
        "message": "PDFBOX-5249: add reading test\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891993 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java||pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java||pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java -> pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:         is.close();",
          "367:         doc.close();",
          "368:     }",
          "",
          "[Removed Lines]",
          "369: }",
          "",
          "[Added Lines]",
          "377:     public void testReadPubkeyEncryptedAES128withMetadataExposed() throws IOException",
          "378:     {",
          "379:         InputStream is = TestPublicKeyEncryption.class.getResourceAsStream(\"AES128ExposedMeta.pdf\");",
          "380:         PDDocument doc = PDDocument.load(is, \"\",",
          "381:                 TestPublicKeyEncryption.class.getResourceAsStream(\"PDFBOX-5249.p12\"), \"test\",",
          "382:                 MemoryUsageSetting.setupMainMemoryOnly());",
          "383:         Assert.assertEquals(\"PublicKeySecurityHandler\",",
          "384:                 doc.getEncryption().getSecurityHandler().getClass().getSimpleName());",
          "385:         Assert.assertEquals(128, doc.getEncryption().getSecurityHandler().getKeyLength());",
          "386:         PDFTextStripper stripper = new PDFTextStripper();",
          "387:         stripper.setLineSeparator(\"\\n\");",
          "388:         Assert.assertEquals(\"AES key length: 128\\nwith exposed Metadata\", stripper.getText(doc).trim());",
          "389:         doc.close();",
          "390:         is.close();",
          "391:     }",
          "399:     @Test",
          "400:     public void testReadPubkeyEncryptedAES256withMetadataExposed() throws IOException",
          "401:     {",
          "402:         InputStream is = TestPublicKeyEncryption.class.getResourceAsStream(\"AES256ExposedMeta.pdf\");",
          "403:         PDDocument doc = PDDocument.load(is, \"\",",
          "404:                 TestPublicKeyEncryption.class.getResourceAsStream(\"PDFBOX-5249.p12\"), \"test\",",
          "405:                 MemoryUsageSetting.setupMainMemoryOnly());",
          "406:         Assert.assertEquals(\"PublicKeySecurityHandler\",",
          "407:                 doc.getEncryption().getSecurityHandler().getClass().getSimpleName());",
          "408:         Assert.assertEquals(256, doc.getEncryption().getSecurityHandler().getKeyLength());",
          "409:         PDFTextStripper stripper = new PDFTextStripper();",
          "410:         stripper.setLineSeparator(\"\\n\");",
          "411:         Assert.assertEquals(\"AES key length: 256 \\nwith exposed Metadata\", stripper.getText(doc).trim());",
          "412:         doc.close();",
          "413:         is.close();",
          "414:     }",
          "415: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2ffe53792930488826c23e406cb4f54860009f0",
      "candidate_info": {
        "commit_hash": "e2ffe53792930488826c23e406cb4f54860009f0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e2ffe53792930488826c23e406cb4f54860009f0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java"
        ],
        "message": "PDFBOX-4892: revert and add comment instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889773 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/ShadedTriangle.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     ShadedTriangle(Point2D[] p, float[][] c)",
          "59:     {",
          "64:         color = c.clone();",
          "65:         area = getArea(p[0], p[1], p[2]);",
          "66:         degree = calcDeg(p);",
          "",
          "[Removed Lines]",
          "60:         corner = new Point2D[3];",
          "61:         corner[0] = (Point2D) p[0].clone();",
          "62:         corner[1] = (Point2D) p[1].clone();",
          "63:         corner[2] = (Point2D) p[2].clone();",
          "",
          "[Added Lines]",
          "61:         corner = p.clone(); // yes this is a shallow clone",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bbde91e349d15eb1e60775e00d8ec34009e32c2",
      "candidate_info": {
        "commit_hash": "9bbde91e349d15eb1e60775e00d8ec34009e32c2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9bbde91e349d15eb1e60775e00d8ec34009e32c2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ],
        "message": "PDFBOX-5115: restore accidentally deleted segment\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887441 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:                 nameInAFM = \"hyphen\";",
          "337:             }",
          "339:             return getStandard14AFM().getCharacterWidth(nameInAFM);",
          "340:         }",
          "341:         throw new IllegalStateException(\"No AFM\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:             if (\".notdef\".equals(nameInAFM))",
          "341:             {",
          "342:                 return 250f;",
          "343:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}