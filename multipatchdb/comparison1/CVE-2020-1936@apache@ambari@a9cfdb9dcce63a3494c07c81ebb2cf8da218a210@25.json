{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee68d7cf49a50942cfc7685a5d3219a046da1157",
      "candidate_info": {
        "commit_hash": "ee68d7cf49a50942cfc7685a5d3219a046da1157",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ee68d7cf49a50942cfc7685a5d3219a046da1157",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java"
        ],
        "message": "AMBARI-24319. Regenerating keytabs for the given service(s) only",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: import com.google.common.collect.ImmutableMap;",
          "140: import com.google.common.collect.ImmutableSet;",
          "142: import com.google.common.collect.Sets;",
          "143: import com.google.gson.JsonArray;",
          "144: import com.google.gson.JsonObject;",
          "",
          "[Removed Lines]",
          "141: import com.google.common.collect.Lists;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1868:                   String uniqueKey = String.format(\"%s|%s\", principal, (keytabFile == null) ? \"\" : keytabFile);",
          "1871:                     KerberosPrincipalType principalType = principalDescriptor.getType();",
          "",
          "[Removed Lines]",
          "1870:                   if (!hostActiveIdentities.containsKey(uniqueKey)) {",
          "",
          "[Added Lines]",
          "1869:                   if (!hostActiveIdentities.containsKey(uniqueKey) || (StringUtils.isNotBlank(hostActiveIdentities.get(uniqueKey).getReference()) && StringUtils.isBlank(identity.getReference()))) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2468:       handler.createStages(cluster,",
          "2469:         clusterHostInfoJson, hostParamsJson, event, roleCommandOrder, kerberosDetails,",
          "2470:         dataDirectory, requestStageContainer, serviceComponentHostsToProcess,",
          "2475:       handler.addFinalizeOperationStage(cluster, clusterHostInfoJson, hostParamsJson, event,",
          "",
          "[Removed Lines]",
          "2471:         Collections.singletonMap(\"KERBEROS\", Lists.newArrayList(\"KERBEROS_CLIENT\")),",
          "2472:         null, Sets.newHashSet(principal), hostsWithValidKerberosClient);",
          "",
          "[Added Lines]",
          "2470:         null, null, Sets.newHashSet(principal), hostsWithValidKerberosClient);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.File;",
          "22: import java.io.IOException;",
          "23: import java.lang.reflect.Type;",
          "24: import java.util.Collection;",
          "25: import java.util.HashMap;",
          "26: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.ArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "42: import org.apache.ambari.server.state.Cluster;",
          "43: import org.apache.ambari.server.state.Clusters;",
          "44: import org.apache.ambari.server.utils.StageUtils;",
          "45: import org.apache.commons.io.FileUtils;",
          "46: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   @Inject",
          "178:   private KerberosOperationHandlerFactory kerberosOperationHandlerFactory;",
          "",
          "[Removed Lines]",
          "183:   @Inject",
          "184:   private KerberosIdentityDataFileReaderFactory kerberosIdentityDataFileReaderFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:       }",
          "457:       try {",
          "459:           for (ResolvedKerberosPrincipal principal : rkk.getPrincipals()) {",
          "465:             }",
          "466:           }",
          "467:         }",
          "",
          "[Removed Lines]",
          "458:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs((Map<String, Collection<String>>) getServiceComponentFilter(), getHostFilter(), getIdentityFilter())) {",
          "460:             commandReport = processIdentity(principal, handler, kerberosConfiguration, requestSharedDataContext);",
          "463:             if (commandReport != null) {",
          "464:               break;",
          "",
          "[Added Lines]",
          "454:         final Map<String, Collection<String>> serviceComponentFilter = (Map<String, Collection<String>>) getServiceComponentFilter();",
          "455:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : calculateServiceIdentities(getClusterName(), serviceComponentFilter);",
          "456:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, getHostFilter(), getIdentityFilter())) {",
          "458:             if (isRelevantIdentity(serviceIdentities, principal)) {",
          "459:               commandReport = processIdentity(principal, handler, kerberosConfiguration, requestSharedDataContext);",
          "462:               if (commandReport != null) {",
          "463:                 break;",
          "464:               }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "487:         : commandReport;",
          "488:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:   private boolean isRelevantIdentity(Collection<KerberosIdentityDescriptor> serviceIdentities, ResolvedKerberosPrincipal principal) {",
          "491:     if (serviceIdentities != null) {",
          "492:       boolean hasValidIdentity = false;",
          "493:       for (KerberosIdentityDescriptor serviceIdentity : serviceIdentities) {",
          "494:         if (principal.getPrincipal().equals(serviceIdentity.getPrincipalDescriptor().getName()) && StringUtils.isBlank(serviceIdentity.getReference())) {",
          "495:           hasValidIdentity = true;",
          "496:           break;",
          "497:         }",
          "498:       }",
          "499:       return hasValidIdentity;",
          "500:     }",
          "502:     return true;",
          "503:   }",
          "505:   private Collection<KerberosIdentityDescriptor> calculateServiceIdentities(String clusterName, Map<String, Collection<String>> serviceComponentFilter)",
          "506:       throws AmbariException {",
          "507:     final Collection<KerberosIdentityDescriptor> serviceIdentities = new ArrayList<>();",
          "508:     for (String service : serviceComponentFilter.keySet()) {",
          "509:       for (Collection<KerberosIdentityDescriptor> activeIdentities : kerberosHelper.getActiveIdentities(clusterName, null, service, null, true).values()) {",
          "510:         serviceIdentities.addAll(activeIdentities);",
          "511:       }",
          "512:     }",
          "513:     return serviceIdentities;",
          "514:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47080774506b7011b02e4d6f7afba16c87f212b6",
      "candidate_info": {
        "commit_hash": "47080774506b7011b02e4d6f7afba16c87f212b6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/47080774506b7011b02e4d6f7afba16c87f212b6",
        "files": [
          "contrib/views/files/src/main/resources/ui/app/components/delete-modal.js",
          "contrib/views/files/src/main/resources/ui/app/services/alert-messages.js"
        ],
        "message": "AMBARI-25384 Ambari Files View is Vulnerable to XSS attack (asnaik) (#3088)",
        "before_after_code_files": [
          "contrib/views/files/src/main/resources/ui/app/components/delete-modal.js||contrib/views/files/src/main/resources/ui/app/components/delete-modal.js",
          "contrib/views/files/src/main/resources/ui/app/services/alert-messages.js||contrib/views/files/src/main/resources/ui/app/services/alert-messages.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/files/src/main/resources/ui/app/components/delete-modal.js||contrib/views/files/src/main/resources/ui/app/components/delete-modal.js": [
          "File: contrib/views/files/src/main/resources/ui/app/components/delete-modal.js -> contrib/views/files/src/main/resources/ui/app/components/delete-modal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:           this.set('hasError', true);",
          "81:           this.set('currentFailedPath', error.failed);",
          "82:           this.set('currentServerFailureMessage', error.message);",
          "84:           this.set('shouldRetry', error.retry);",
          "85:           this.set('currentUnprocessedPaths', error.unprocessed);",
          "86:         } else {",
          "",
          "[Removed Lines]",
          "83:           this.set('currentFailureMessage', `Failed to delete <strong>${error.failed}</strong>.`);",
          "",
          "[Added Lines]",
          "83:           this.set('currentFailureMessage', `Failed to delete <strong>${Ember.Handlebars.Utils.escapeExpression(error.failed)}</strong>.`);",
          "",
          "---------------"
        ],
        "contrib/views/files/src/main/resources/ui/app/services/alert-messages.js||contrib/views/files/src/main/resources/ui/app/services/alert-messages.js": [
          "File: contrib/views/files/src/main/resources/ui/app/services/alert-messages.js -> contrib/views/files/src/main/resources/ui/app/services/alert-messages.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   _processMessage: function(type, message, options, alertOptions) {",
          "77:     this._clearMessagesIfRequired(alertOptions);",
          "78:     let alertRecord = this._createAlert(message, type, options, alertOptions);",
          "79:     if(alertRecord) {",
          "80:       this.toggleProperty('alertsChanged');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     message = Ember.Handlebars.Utils.escapeExpression(message);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2955926dfbd9b3a1b493ef378b006195e673042f",
      "candidate_info": {
        "commit_hash": "2955926dfbd9b3a1b493ef378b006195e673042f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/2955926dfbd9b3a1b493ef378b006195e673042f",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ],
        "message": "AMBARI-24199 Atlas HA blueprint support (benyoka) (#1977)\n\n* AMBARI-24199 Atlas HA with blueprint w.i.p. (benyoka)\n\n* AMBARI-24199 Atlas HA with blueprint (benyoka)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2851:     singleHostTopologyUpdaters.put(\"hive-env\", hiveEnvMap);",
          "2852:     singleHostTopologyUpdaters.put(\"oozie-env\", oozieEnvMap);",
          "2853:     singleHostTopologyUpdaters.put(\"kafka-broker\", kafkaBrokerMap);",
          "2855:     singleHostTopologyUpdaters.put(\"admin-properties\", rangerAdminPropsMap);",
          "2856:     singleHostTopologyUpdaters.put(\"ranger-env\", rangerEnvPropsMap);",
          "2857:     singleHostTopologyUpdaters.put(\"ranger-yarn-audit\", rangerYarnAuditPropsMap);",
          "",
          "[Removed Lines]",
          "2854:     singleHostTopologyUpdaters.put(\"application-properties\", atlasPropsMap);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2886:     multiHostTopologyUpdaters.put(\"oozie-site\", multiOozieSiteMap);",
          "2887:     multiHostTopologyUpdaters.put(\"accumulo-site\", multiAccumuloSiteMap);",
          "2888:     multiHostTopologyUpdaters.put(\"kms-site\", multiRangerKmsSiteMap);",
          "2890:     dbHostTopologyUpdaters.put(\"hive-site\", dbHiveSiteMap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2888:     multiHostTopologyUpdaters.put(\"application-properties\", atlasPropsMap);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3157:     multiOozieSiteMap.put(\"oozie.service.ProxyUserService.proxyuser.knox.hosts\", new MultipleHostTopologyUpdater(\"KNOX_GATEWAY\"));",
          "3161:     atlasPropsMap.put(\"atlas.kafka.bootstrap.servers\", new MultipleHostTopologyUpdater(\"KAFKA_BROKER\"));",
          "3162:     atlasPropsMap.put(\"atlas.kafka.zookeeper.connect\", new MultipleHostTopologyUpdater(\"ZOOKEEPER_SERVER\"));",
          "3163:     atlasPropsMap.put(\"atlas.graph.index.search.solr.zookeeper-url\", new MultipleHostTopologyUpdater(\"ZOOKEEPER_SERVER\", ',', false, true, true));",
          "",
          "[Removed Lines]",
          "3160:     atlasPropsMap.put(\"atlas.server.bind.address\", new SingleHostTopologyUpdater(\"ATLAS_SERVER\"));",
          "",
          "[Added Lines]",
          "3160:     atlasPropsMap.put(\"atlas.server.bind.address\", new MultipleHostTopologyUpdater(\"ATLAS_SERVER\"));",
          "3161:     atlasPropsMap.put(\"atlas.rest.address\", new MultipleHostTopologyUpdater(\"ATLAS_SERVER\", ',', true, true, true));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static java.util.Collections.emptyList;",
          "23: import static java.util.Collections.emptyMap;",
          "24: import static java.util.stream.Collectors.toList;",
          "25: import static org.easymock.EasyMock.anyObject;",
          "26: import static org.easymock.EasyMock.expect;",
          "27: import static org.easymock.EasyMock.replay;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static java.util.stream.Collectors.toSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:     assertEquals(\"%HOSTGROUP::group1%:5050,%HOSTGROUP::group2%:9090\", updatedVal);",
          "647:   }",
          "649:   @Test",
          "650:   public void testDoUpdateForBlueprintExport_MultiHostProperty__YAML() throws Exception {",
          "651:     Map<String, Map<String, String>> properties = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650:   @Test",
          "651:   public void testDoUpdateForBlueprintExport_MultiHostProperty__WithPrefixAndPorts() throws Exception {",
          "652:     Map<String, Map<String, String>> properties = new HashMap<>();",
          "653:     Map<String, String> typeProps = new HashMap<>();",
          "654:     typeProps.put(\"atlas.server.bind.address\",",
          "655:       \"http://testhost:21000,http://testhost2:21000,http://testhost2a:21000,http://testhost2b:21000\");",
          "656:     properties.put(\"application-properties\", typeProps);",
          "658:     Configuration clusterConfig = new Configuration(properties, emptyMap());",
          "660:     Collection<String> hgComponents = Sets.newHashSet(\"NAMENODE\", \"SECONDARY_NAMENODE\", \"ZOOKEEPER_SERVER\");",
          "661:     TestHostGroup group1 = new TestHostGroup(\"group1\", hgComponents, Collections.singleton(\"testhost\"));",
          "663:     Collection<String> hgComponents2 = Sets.newHashSet(\"DATANODE\", \"HDFS_CLIENT\", \"ZOOKEEPER_SERVER\");",
          "664:     Set<String> hosts2 = Sets.newHashSet(\"testhost2\", \"testhost2a\", \"testhost2b\");",
          "665:     TestHostGroup group2 = new TestHostGroup(\"group2\", hgComponents2, hosts2);",
          "667:     Collection<String> hgComponents3 = Sets.newHashSet(\"HDFS_CLIENT\", \"ZOOKEEPER_CLIENT\");",
          "668:     Set<String> hosts3 = Sets.newHashSet(\"testhost3\", \"testhost3a\");",
          "669:     TestHostGroup group3 = new TestHostGroup(\"group3\", hgComponents3, hosts3);",
          "671:     Collection<TestHostGroup> hostGroups = Sets.newHashSet(group1, group2, group3);",
          "673:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "674:     BlueprintConfigurationProcessor configProcessor = new BlueprintConfigurationProcessor(topology);",
          "675:     configProcessor.doUpdateForBlueprintExport();",
          "677:     String updatedVal = properties.get(\"application-properties\").get(\"atlas.server.bind.address\");",
          "678:     assertEquals(\"http://%HOSTGROUP::group1%:21000,http://%HOSTGROUP::group2%:21000\", updatedVal);",
          "679:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2938:     Assert.assertTrue(hostArray.containsAll(hosts1) && hosts1.containsAll(hostArray));",
          "2939:   }",
          "2941:   @Test",
          "2942:   public void testDoUpdateForClusterVerifyRetrySettingsDefault() throws Exception {",
          "2943:     Map<String, Map<String, String>> configProperties =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2973:   @Test",
          "2974:   public void testMultipleHostTopologyUpdater__hostgroup__multipleHostGroups() throws Exception {",
          "2976:     final String typeName = \"application-properties\";",
          "2977:     final String propertyName = \"atlas.rest.address\";",
          "2978:     final String originalValue = \"http://%HOSTGROUP::group1%:21000,http://%HOSTGROUP::group2%:21000\";",
          "2979:     final String component = \"ATLAS_SERVER\";",
          "2981:     Map<String, Map<String, String>> properties = new HashMap<>();",
          "2982:     Map<String, String> typeProps = new HashMap<>();",
          "2983:     typeProps.put(propertyName, originalValue);",
          "2984:     properties.put(typeName, typeProps);",
          "2986:     Configuration clusterConfig = new Configuration(properties, emptyMap());",
          "2988:     Set<String> components = ImmutableSet.of(component);",
          "2990:     Set<String> group1Hosts = ImmutableSet.of(\"testhost1a\", \"testhost1b\", \"testhost1c\");",
          "2991:     Set<String> group2Hosts = ImmutableSet.of(\"testhost2a\", \"testhost2b\", \"testhost2c\");",
          "2993:     TestHostGroup group1 = new TestHostGroup(\"group1\", components, group1Hosts);",
          "2994:     TestHostGroup group2 = new TestHostGroup(\"group2\", components, group2Hosts);",
          "2996:     Collection<TestHostGroup> hostGroups = ImmutableSet.of(group1, group2);",
          "2998:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "3000:     BlueprintConfigurationProcessor.MultipleHostTopologyUpdater mhtu =",
          "3001:       new BlueprintConfigurationProcessor.MultipleHostTopologyUpdater(component, ',', true, true, true);",
          "3002:     String newValue = mhtu.updateForClusterCreate(propertyName, originalValue, properties, topology);",
          "3004:     Set<String> expectedAddresses =",
          "3005:       Sets.union(group1Hosts, group2Hosts).stream().map(host -> \"http://\" + host + \":21000\").collect(toSet());",
          "3006:     Set<String> replacedAddresses = ImmutableSet.copyOf(newValue.split(\",\"));",
          "3007:     assertEquals(expectedAddresses, replacedAddresses);",
          "3008:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba5349a0db9ea96bec22b24bd35f39269f1b7c14",
      "candidate_info": {
        "commit_hash": "ba5349a0db9ea96bec22b24bd35f39269f1b7c14",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ba5349a0db9ea96bec22b24bd35f39269f1b7c14",
        "files": [
          "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/metainfo.xml",
          "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py"
        ],
        "message": "[AMBARI-25220] : NameNode to provide rack topology",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py||ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py||ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py": [
          "File: ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py -> ambari-server/src/main/resources/common-services/HDFS/2.1.0.2.0/package/scripts/namenode.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:     hdfs_binary = self.get_hdfs_binary()",
          "170:     namenode(action=\"decommission\", hdfs_binary=hdfs_binary)",
          "172: @OsFamilyImpl(os_family=OsFamilyImpl.DEFAULT)",
          "173: class NameNodeDefault(NameNode):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   def print_topology(self, env):",
          "173:     import params",
          "174:     env.set_params(params)",
          "175:     Execute(format(\"hdfs dfsadmin -printTopology\"),",
          "176:             user=params.hdfs_user,",
          "177:             path=[params.hadoop_bin_dir],",
          "178:             logoutput=True",
          "179:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5d9afa4a16f3c7654b1c20052ea0aa7d25a4bf5",
      "candidate_info": {
        "commit_hash": "d5d9afa4a16f3c7654b1c20052ea0aa7d25a4bf5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d5d9afa4a16f3c7654b1c20052ea0aa7d25a4bf5",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java"
        ],
        "message": "[AMBARI-25311] FinalizeKerberosServerAction timeout has to be configurable (apappu)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3719:       if (dataDirectory != null) {",
          "3720:         commandParameters.put(KerberosServerAction.DATA_DIRECTORY, dataDirectory.getAbsolutePath());",
          "3721:       }",
          "3723:       Stage stage = createServerActionStage(requestStageContainer.getLastStageId(),",
          "3724:         cluster,",
          "3725:         requestStageContainer.getId(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3722:       int timeout = 600;",
          "3723:       if(StringUtils.isNotEmpty(configuration.getProperty(\"server.kerberos.finalize.timeout\"))){",
          "3724:         timeout =  Integer.parseInt(configuration.getProperty(\"server.kerberos.finalize.timeout\").trim());",
          "3725:       }",
          "3726:       LOG.info(\"HWX...Timeout value for addFinalizeOperationStage is:\" + timeout);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3729:         FinalizeKerberosServerAction.class,",
          "3730:         event,",
          "3731:         commandParameters,",
          "3734:       RoleGraph roleGraph = roleGraphFactory.createNew(roleCommandOrder);",
          "3735:       roleGraph.build(stage);",
          "",
          "[Removed Lines]",
          "3732:         \"Finalize Operations\", 300);",
          "",
          "[Added Lines]",
          "3736:         \"Finalize Operations\", timeout);",
          "",
          "---------------"
        ]
      }
    }
  ]
}