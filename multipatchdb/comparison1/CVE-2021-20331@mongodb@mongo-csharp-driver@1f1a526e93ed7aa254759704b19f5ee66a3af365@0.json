{
  "cve_id": "CVE-2021-20331",
  "cve_desc": "Specific versions of the MongoDB C# Driver may erroneously publish events containing authentication-related data to a command listener configured by an application. The published events may contain security-sensitive data when commands such as \"saslStart\", \"saslContinue\", \"isMaster\", \"createUser\", and \"updateUser\" are executed. Without due care, an application may inadvertently expose this authenticated-related information, e.g., by writing it to a log file. This issue only arises if an application enables the command listener feature (this is not enabled by default). This issue affects the MongoDB C# Driver v2.12 versions prior to and including 2.12.1.",
  "repo": "mongodb/mongo-csharp-driver",
  "patch_hash": "1f1a526e93ed7aa254759704b19f5ee66a3af365",
  "patch_info": {
    "commit_hash": "1f1a526e93ed7aa254759704b19f5ee66a3af365",
    "repo": "mongodb/mongo-csharp-driver",
    "commit_url": "https://github.com/mongodb/mongo-csharp-driver/commit/1f1a526e93ed7aa254759704b19f5ee66a3af365",
    "files": [
      "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
      "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
      "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs"
    ],
    "message": "CSHARP-3521: Redact security sensitive commands and replies.",
    "before_after_code_files": [
      "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
      "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
      "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs"
    ]
  },
  "patch_diff": {
    "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs": [
      "File: src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs -> src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: using System;",
      "17: using System.Collections.Concurrent;",
      "18: using System.Collections.Generic;",
      "20: using System.Diagnostics;",
      "21: using System.IO;",
      "22: using System.Linq;",
      "",
      "[Removed Lines]",
      "19: using System.Collections.ObjectModel;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "271:                 var commandName = command.GetElement(0).Name;",
      "272:                 var databaseName = command[\"$db\"].AsString;",
      "273:                 var databaseNamespace = new DatabaseNamespace(databaseName);",
      "275:                 {",
      "276:                     command = new BsonDocument();",
      "277:                 }",
      "",
      "[Removed Lines]",
      "274:                 if (ShouldRedactMessage(commandName, command))",
      "",
      "[Added Lines]",
      "273:                 var shouldRedactCommand = ShouldRedactCommand(command);",
      "274:                 if (shouldRedactCommand)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "298:                         OperationId = operationId,",
      "299:                         Stopwatch = stopwatch,",
      "300:                         QueryNamespace = new CollectionNamespace(databaseNamespace, \"$cmd\"),",
      "302:                     });",
      "303:                 }",
      "304:             }",
      "",
      "[Removed Lines]",
      "301:                         ExpectedResponseType = decodedMessage.MoreToCome ? ExpectedResponseType.None : ExpectedResponseType.Command",
      "",
      "[Added Lines]",
      "301:                         ExpectedResponseType = decodedMessage.MoreToCome ? ExpectedResponseType.None : ExpectedResponseType.Command,",
      "302:                         ShouldRedactReply = shouldRedactCommand",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "318:                 return;",
      "319:             }",
      "322:             {",
      "323:                 reply = new BsonDocument();",
      "324:             }",
      "",
      "[Removed Lines]",
      "321:             if (ShouldRedactMessage(state.CommandName, reply))",
      "",
      "[Added Lines]",
      "322:             if (state.ShouldRedactReply)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "589:                 var isCommand = IsCommand(decodedMessage.CollectionNamespace);",
      "590:                 string commandName;",
      "591:                 BsonDocument command;",
      "592:                 if (isCommand)",
      "593:                 {",
      "594:                     command = decodedMessage.Query;",
      "595:                     var firstElement = command.GetElement(0);",
      "596:                     commandName = firstElement.Name;",
      "598:                     {",
      "599:                         command = new BsonDocument();",
      "600:                     }",
      "",
      "[Removed Lines]",
      "597:                     if (ShouldRedactMessage(commandName, command))",
      "",
      "[Added Lines]",
      "593:                 var shouldRedactCommand = false;",
      "599:                     shouldRedactCommand = ShouldRedactCommand(command);",
      "600:                     if (shouldRedactCommand)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "631:                         OperationId = operationId,",
      "632:                         Stopwatch = stopwatch,",
      "633:                         QueryNamespace = decodedMessage.CollectionNamespace,",
      "635:                     });",
      "636:                 }",
      "637:             }",
      "",
      "[Removed Lines]",
      "634:                         ExpectedResponseType = isCommand ? ExpectedResponseType.Command : ExpectedResponseType.Query",
      "",
      "[Added Lines]",
      "637:                         ExpectedResponseType = isCommand ? ExpectedResponseType.Command : ExpectedResponseType.Query,",
      "638:                         ShouldRedactReply = shouldRedactCommand",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "675:                     (state.ExpectedResponseType != ExpectedResponseType.Query && replyMessage.Documents.Count == 0))",
      "676:                 {",
      "677:                     var queryFailureDocument = replyMessage.QueryFailureDocument;",
      "679:                     {",
      "680:                         queryFailureDocument = new BsonDocument();",
      "681:                     }",
      "",
      "[Removed Lines]",
      "678:                     if (ShouldRedactMessage(state.CommandName, queryFailureDocument))",
      "",
      "[Added Lines]",
      "682:                     if (state.ShouldRedactReply)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "730:                 return;",
      "731:             }",
      "734:             {",
      "735:                 reply = new BsonDocument();",
      "736:             }",
      "",
      "[Removed Lines]",
      "733:             if (ShouldRedactMessage(state.CommandName, reply))",
      "",
      "[Added Lines]",
      "737:             if (state.ShouldRedactReply)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1088:             return collectionNamespace.Equals(collectionNamespace.DatabaseNamespace.CommandCollection);",
      "1089:         }",
      "1092:         {",
      "1093:             switch (commandName.ToLowerInvariant())",
      "1094:             {",
      "1095:                 case \"authenticate\":",
      "1098:                 case \"getnonce\":",
      "1101:                 case \"copydbgetnonce\":",
      "1102:                 case \"copydbsaslstart\":",
      "1103:                 case \"copydb\":",
      "1104:                     return true;",
      "1109:                 default:",
      "1110:                     return false;",
      "",
      "[Removed Lines]",
      "1091:         private static bool ShouldRedactMessage(string commandName, BsonDocument command)",
      "1096:                 case \"saslStart\":",
      "1097:                 case \"saslContinue\":",
      "1099:                 case \"createUser\":",
      "1100:                 case \"updateUser\":",
      "1106:                 case \"isMaster\":",
      "1107:                     return command.Contains(\"speculativeAuthenticate\");",
      "",
      "[Added Lines]",
      "1095:         private static bool ShouldRedactCommand(BsonDocument command)",
      "1097:             var commandName = command.GetElement(0).Name;",
      "1102:                 case \"saslstart\":",
      "1103:                 case \"saslcontinue\":",
      "1105:                 case \"createuser\":",
      "1106:                 case \"updateuser\":",
      "1112:                 case \"ismaster\":",
      "1113:                     return command.Names.Any(n => n.ToLowerInvariant() == \"speculativeauthenticate\");",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1129:             public ExpectedResponseType ExpectedResponseType;",
      "1130:             public BsonDocument NoResponseResponse;",
      "1131:             public BsonValue UpsertedId;",
      "1132:         }",
      "1133:     }",
      "1134: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:             public bool ShouldRedactReply;",
      "",
      "---------------"
    ],
    "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs": [
      "File: tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:         public static IEnumerable<object[]> GetPotentiallyRedactedCommandTestCases()",
      "52:         {",
      "54:             {",
      "65:             };",
      "67:         }",
      "68:         public BinaryConnection_CommandEventTests()",
      "69:         {",
      "70:             _capturedEvents = new EventCapturer()",
      "",
      "[Removed Lines]",
      "53:             var potentiallyRedactedCommands = new[]",
      "55:                 \"authenticate\",",
      "56:                 \"saslStart\",",
      "57:                 \"saslContinue\",",
      "58:                 \"getnonce\",",
      "59:                 \"createUser\",",
      "60:                 \"updateUser\",",
      "61:                 \"copydbgetnonce\",",
      "62:                 \"copydbsaslstart\",",
      "63:                 \"copydb\",",
      "64:                 \"isMaster\",",
      "66:             return potentiallyRedactedCommands.Select(c => new object[] { c });",
      "",
      "[Added Lines]",
      "53:             return new object[][]",
      "56:                 new object[] { \"{ xyz : 1 }\", false },",
      "57:                 new object[] { \"{ authenticate : 1 }\", true },",
      "58:                 new object[] { \"{ saslStart : 1 }\", true },",
      "59:                 new object[] { \"{ saslContinue : 1 }\", true },",
      "60:                 new object[] { \"{ getnonce : 1 }\", true },",
      "61:                 new object[] { \"{ createUser : 1 }\", true },",
      "62:                 new object[] { \"{ updateUser : 1 }\", true },",
      "63:                 new object[] { \"{ copydbgetnonce : 1 }\", true },",
      "64:                 new object[] { \"{ copydbsaslstart : 1 }\", true },",
      "65:                 new object[] { \"{ copydb : 1 }\", true },",
      "66:                 new object[] { \"{ authenticate : 1 }\", true },",
      "67:                 new object[] { \"{ isMaster : 1 }\", false },",
      "68:                 new object[] { \"{ isMaster : 1, speculativeAuthenticate : { } }\", true },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:         [Theory]",
      "146:         [MemberData(nameof(GetPotentiallyRedactedCommandTestCases))]",
      "148:         {",
      "152:             var reply = BsonDocument.Parse(\"{ ok: 1, extra: true }\");",
      "155:             var requestMessage = MessageHelper.BuildCommand(",
      "156:                 command,",
      "",
      "[Removed Lines]",
      "147:         public void Should_process_a_redacted_command(string commandName)",
      "149:             var command = BsonDocument.Parse($\"{{ {commandName}: 1, extra: true }}\");",
      "150:             command = ModifyMessageToTriggerConditionToRedact(commandName, command);",
      "153:             reply = ModifyMessageToTriggerConditionToRedact(commandName, reply);",
      "",
      "[Added Lines]",
      "151:         public void Should_process_a_redacted_command(string commandJson, bool shouldBeRedacted)",
      "153:             var command = BsonDocument.Parse(commandJson);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163:                 responseTo: requestMessage.RequestId);",
      "164:             ReceiveMessages(replyMessage);",
      "172:             var commandStartedEvent = (CommandStartedEvent)_capturedEvents.Next();",
      "173:             var commandSucceededEvent = (CommandSucceededEvent)_capturedEvents.Next();",
      "175:             commandStartedEvent.CommandName.Should().Be(command.GetElement(0).Name);",
      "177:             commandStartedEvent.ConnectionId.Should().Be(_subject.ConnectionId);",
      "178:             commandStartedEvent.DatabaseNamespace.Should().Be(MessageHelper.DefaultDatabaseNamespace);",
      "179:             commandStartedEvent.OperationId.Should().Be(EventContext.OperationId);",
      "",
      "[Removed Lines]",
      "167:             var commandStartedCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, command);",
      "168:             var commandSucceededCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, replyMessage.Documents[0]);",
      "169:             var commandStartedCommandExpectedElementCount = commandStartedCommandShouldBeRedacted ? 0 : command.ElementCount;",
      "170:             var commandSucceededCommandExpectedElementCount = commandSucceededCommandShouldBeRedacted ? 0 : reply.ElementCount;",
      "176:             commandStartedEvent.Command.ElementCount.Should().Be(commandStartedCommandExpectedElementCount);",
      "",
      "[Added Lines]",
      "171:             commandStartedEvent.Command.Should().Be(shouldBeRedacted ? new BsonDocument() : command);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "183:             commandSucceededEvent.ConnectionId.Should().Be(commandStartedEvent.ConnectionId);",
      "184:             commandSucceededEvent.Duration.Should().BeGreaterThan(TimeSpan.Zero);",
      "185:             commandSucceededEvent.OperationId.Should().Be(commandStartedEvent.OperationId);",
      "187:             commandSucceededEvent.RequestId.Should().Be(commandStartedEvent.RequestId);",
      "188:         }",
      "",
      "[Removed Lines]",
      "186:             commandSucceededEvent.Reply.ElementCount.Should().Be(commandSucceededCommandExpectedElementCount);",
      "",
      "[Added Lines]",
      "181:             commandSucceededEvent.Reply.Should().Be(shouldBeRedacted ? new BsonDocument() : reply);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "225:         [Theory]",
      "226:         [MemberData(nameof(GetPotentiallyRedactedCommandTestCases))]",
      "228:         {",
      "232:             var reply = BsonDocument.Parse(\"{ ok: 0, extra: true }\");",
      "235:             var requestMessage = MessageHelper.BuildCommand(",
      "236:                 command,",
      "",
      "[Removed Lines]",
      "227:         public void Should_process_a_redacted_failed_command(string commandName)",
      "229:             var command = BsonDocument.Parse($\"{{ {commandName}: 1, extra: true }}\");",
      "230:             command = ModifyMessageToTriggerConditionToRedact(commandName, command);",
      "233:             reply = ModifyMessageToTriggerConditionToRedact(commandName, reply);",
      "",
      "[Added Lines]",
      "222:         public void Should_process_a_redacted_failed_command(string commandJson, bool shouldBeRedacted)",
      "224:             var command = BsonDocument.Parse(commandJson);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "243:                 responseTo: requestMessage.RequestId);",
      "244:             ReceiveMessages(replyMessage);",
      "251:             var commandStartedEvent = (CommandStartedEvent)_capturedEvents.Next();",
      "252:             var commandFailedEvent = (CommandFailedEvent)_capturedEvents.Next();",
      "254:             commandStartedEvent.CommandName.Should().Be(command.GetElement(0).Name);",
      "256:             commandStartedEvent.ConnectionId.Should().Be(_subject.ConnectionId);",
      "257:             commandStartedEvent.DatabaseNamespace.Should().Be(MessageHelper.DefaultDatabaseNamespace);",
      "258:             commandStartedEvent.OperationId.Should().Be(EventContext.OperationId);",
      "",
      "[Removed Lines]",
      "246:             var commandStartedCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, command);",
      "247:             var commandSucceededCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, replyMessage.Documents[0]);",
      "248:             var commandStartedCommandExpectedElementCount = commandStartedCommandShouldBeRedacted ? 0 : command.ElementCount;",
      "249:             var commandSucceededCommandExpectedElementCount = commandSucceededCommandShouldBeRedacted ? 0 : reply.ElementCount;",
      "255:             commandStartedEvent.Command.ElementCount.Should().Be(commandStartedCommandExpectedElementCount);",
      "",
      "[Added Lines]",
      "242:             commandStartedEvent.Command.Should().Be(shouldBeRedacted ? new BsonDocument() : command);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "265:             commandFailedEvent.RequestId.Should().Be(commandStartedEvent.RequestId);",
      "266:             commandFailedEvent.Failure.Should().BeOfType<MongoCommandException>();",
      "267:             var exception = (MongoCommandException)commandFailedEvent.Failure;",
      "269:         }",
      "271:         [Fact]",
      "",
      "[Removed Lines]",
      "268:             exception.Result.ElementCount.Should().Be(commandSucceededCommandExpectedElementCount);",
      "",
      "[Added Lines]",
      "255:             exception.Result.Should().Be(shouldBeRedacted ? new BsonDocument() : reply);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "982:                 _subject.ReceiveMessageAsync(message.ResponseTo, encoderSelector, _messageEncoderSettings, CancellationToken.None).Wait();",
      "983:             }",
      "984:         }",
      "1004:     }",
      "1005: }",
      "",
      "[Removed Lines]",
      "986:         private static BsonDocument ModifyMessageToTriggerConditionToRedact(string commandName, BsonDocument command)",
      "987:         {",
      "988:             switch (commandName)",
      "989:             {",
      "990:                 case \"isMaster\":",
      "991:                     command.Add(\"speculativeAuthenticate\", new BsonDocument(\"db\", \"authSource\"));",
      "992:                     break;",
      "993:             }",
      "995:             return command;",
      "996:         }",
      "997:     }",
      "999:     internal static class CommandEventHelperReflector",
      "1000:     {",
      "1001:         public static bool ShouldRedactMessage(string commandName, BsonDocument command) =>",
      "1002:             (bool)Reflector.InvokeStatic(typeof(CommandEventHelper), nameof(ShouldRedactMessage), commandName, command);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs": [
      "File: tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \ufeff/* Copyright 2010-present MongoDB Inc.",
      "16: using FluentAssertions;",
      "17: using MongoDB.Bson;",
      "18: using MongoDB.Bson.TestHelpers;",
      "19: using Xunit;",
      "21: namespace MongoDB.Driver.Core.Connections",
      "22: {",
      "23:     public class CommandEventHelperTests",
      "24:     {",
      "25:         [Theory]",
      "26:         [InlineData(\"{ xyz : 1 }\", false)]",
      "27:         [InlineData(\"{ aUTHENTICATE: 1 }\", true)]",
      "28:         [InlineData(\"{ sASLSTART : 1 }\", true)]",
      "29:         [InlineData(\"{ sASLCONTINUE : 1 }\", true)]",
      "30:         [InlineData(\"{ gETNONCE : 1 }\", true)]",
      "31:         [InlineData(\"{ cREATEUSER : 1 }\", true)]",
      "32:         [InlineData(\"{ uPDATEUSER : 1, }\", true)]",
      "33:         [InlineData(\"{ cOPYDBGETNONCE : 1 }\", true)]",
      "34:         [InlineData(\"{ cOPYDBSASLSTART : 1 }\", true)]",
      "35:         [InlineData(\"{ cOPYDB : 1 }\", true)]",
      "36:         [InlineData(\"{ iSMASTER : 1 }\", false)]",
      "37:         [InlineData(\"{ iSMASTER : 1, sPECULATIVEAUTHENTICATE : null }\", true)]",
      "38:         public void ShouldRedactCommand_should_return_expected_result(string commandJson, bool expectedResult)",
      "39:         {",
      "40:             var command = BsonDocument.Parse(commandJson);",
      "42:             var result = CommandEventHelperReflector.ShouldRedactCommand(command);",
      "44:             result.Should().Be(expectedResult);",
      "45:         }",
      "46:     }",
      "48:     public static class CommandEventHelperReflector",
      "49:     {",
      "50:         public static bool ShouldRedactCommand(BsonDocument command) =>",
      "51:             (bool)Reflector.InvokeStatic(typeof(CommandEventHelper), nameof(ShouldRedactCommand), command);",
      "52:     }",
      "53: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "03f662798cca10a0692e801a891540396d9d97ce",
      "candidate_info": {
        "commit_hash": "03f662798cca10a0692e801a891540396d9d97ce",
        "repo": "mongodb/mongo-csharp-driver",
        "commit_url": "https://github.com/mongodb/mongo-csharp-driver/commit/03f662798cca10a0692e801a891540396d9d97ce",
        "files": [
          "src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs",
          "src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs",
          "src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs",
          "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
          "src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs",
          "tests/MongoDB.Bson.TestHelpers/Reflector.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs"
        ],
        "message": "CSHARP-3032: Support speculative SCRAM-SHA authentication attempts in isMaster",
        "before_after_code_files": [
          "src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs||src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs",
          "src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs||src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs",
          "src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs||src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs",
          "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
          "src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs||src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs",
          "tests/MongoDB.Bson.TestHelpers/Reflector.cs||tests/MongoDB.Bson.TestHelpers/Reflector.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
            "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs"
          ],
          "candidate": [
            "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
            "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs||src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs": [
          "File: src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs -> src/MongoDB.Driver.Core/Core/Authentication/DefaultAuthenticator.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         private readonly UsernamePasswordCredential _credential;",
          "37:         private readonly IRandomStringGenerator _randomStringGenerator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:         private IAuthenticator _speculativeAuthenticator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:                     description.BuildInfoResult);",
          "80:             }",
          "83:             authenticator.Authenticate(connection, description, cancellationToken);",
          "85:         }",
          "",
          "[Removed Lines]",
          "82:             var authenticator = CreateAuthenticator(connection, description);",
          "",
          "[Added Lines]",
          "83:             var authenticator = GetOrCreateAuthenticator(connection, description);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:                     description.BuildInfoResult);",
          "107:             }",
          "110:             await authenticator.AuthenticateAsync(connection, description, cancellationToken).ConfigureAwait(false);",
          "111:         }",
          "",
          "[Removed Lines]",
          "109:             var authenticator = CreateAuthenticator(connection, description);",
          "",
          "[Added Lines]",
          "109:             var authenticator = GetOrCreateAuthenticator(connection, description);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:         public BsonDocument CustomizeInitialIsMasterCommand(BsonDocument isMasterCommand)",
          "116:         {",
          "118:         }",
          "120:         private static BsonDocument CreateSaslSupportedMechsRequest(string authenticationDatabaseName, string userName)",
          "",
          "[Removed Lines]",
          "117:             return isMasterCommand.Merge(CreateSaslSupportedMechsRequest(_credential.Source, _credential.Username));",
          "",
          "[Added Lines]",
          "117:             var saslSupportedMechs = CreateSaslSupportedMechsRequest(_credential.Source, _credential.Username);",
          "118:             isMasterCommand = isMasterCommand.Merge(saslSupportedMechs);",
          "119:             _speculativeAuthenticator = new ScramSha256Authenticator(_credential, _randomStringGenerator);",
          "120:             return _speculativeAuthenticator.CustomizeInitialIsMasterCommand(isMasterCommand);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:                     : new MongoDBCRAuthenticator(_credential);",
          "144: #pragma warning restore 618",
          "145:         }",
          "146:     }",
          "",
          "[Removed Lines]",
          "147: }",
          "",
          "[Added Lines]",
          "150:         private IAuthenticator GetOrCreateAuthenticator(IConnection connection, ConnectionDescription description)",
          "151:         {",
          "154:             var speculativeAuthenticateResult = description.IsMasterResult.SpeculativeAuthenticate;",
          "155:             var canUseSpeculativeAuthenticator = _speculativeAuthenticator != null && speculativeAuthenticateResult != null;",
          "156:             return canUseSpeculativeAuthenticator ? _speculativeAuthenticator : CreateAuthenticator(connection, description);",
          "157:         }",
          "",
          "---------------"
        ],
        "src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs||src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs": [
          "File: src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs -> src/MongoDB.Driver.Core/Core/Authentication/SaslAuthenticator.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     public abstract class SaslAuthenticator : IAuthenticator",
          "32:     {",
          "",
          "[Removed Lines]",
          "34:         private readonly ISaslMechanism _mechanism;",
          "",
          "[Added Lines]",
          "34:         private protected readonly ISaslMechanism _mechanism;",
          "35:         private protected ISaslStep _speculativeFirstStep;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:             using (var conversation = new SaslConversation(description.ConnectionId))",
          "69:             {",
          "74:                 {",
          "75:                     BsonDocument result;",
          "76:                     try",
          "",
          "[Removed Lines]",
          "70:                 var currentStep = _mechanism.Initialize( connection, conversation, description);",
          "72:                 var command = CreateStartCommand(currentStep);",
          "73:                 while (true)",
          "",
          "[Added Lines]",
          "71:                 ISaslStep currentStep;",
          "72:                 BsonDocument command;",
          "73:                 var speculativeAuthenticateResult = description.IsMasterResult.SpeculativeAuthenticate;",
          "74:                 if (_speculativeFirstStep != null && speculativeAuthenticateResult != null)",
          "75:                 {",
          "76:                     currentStep = Transition(conversation, _speculativeFirstStep, speculativeAuthenticateResult, out command);",
          "77:                 }",
          "78:                 else",
          "79:                 {",
          "80:                     currentStep = _mechanism.Initialize(connection, conversation, description);",
          "81:                     command = CreateStartCommand(currentStep);",
          "82:                 }",
          "84:                 while (currentStep != null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:                         throw CreateException(connection, ex);",
          "84:                     }",
          "93:                 }",
          "94:             }",
          "95:         }",
          "",
          "[Removed Lines]",
          "86:                     currentStep = Transition(conversation, currentStep, result);",
          "87:                     if (currentStep == null)",
          "88:                     {",
          "89:                         return;",
          "90:                     }",
          "92:                     command = CreateContinueCommand(currentStep, result);",
          "",
          "[Added Lines]",
          "97:                     currentStep = Transition(conversation, currentStep, result , out command);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:             using (var conversation = new SaslConversation(description.ConnectionId))",
          "104:             {",
          "109:                 {",
          "110:                     BsonDocument result;",
          "111:                     try",
          "",
          "[Removed Lines]",
          "105:                 var currentStep = _mechanism.Initialize(connection, conversation, description);",
          "107:                 var command = CreateStartCommand(currentStep);",
          "108:                 while (true)",
          "",
          "[Added Lines]",
          "110:                 ISaslStep currentStep;",
          "111:                 BsonDocument command;",
          "112:                 var speculativeAuthenticateResult = description.IsMasterResult.SpeculativeAuthenticate;",
          "113:                 if (_speculativeFirstStep != null && speculativeAuthenticateResult != null)",
          "114:                 {",
          "115:                     currentStep = Transition(conversation, _speculativeFirstStep, speculativeAuthenticateResult, out command);",
          "116:                 }",
          "117:                 else",
          "118:                 {",
          "119:                     currentStep = _mechanism.Initialize(connection, conversation, description);",
          "120:                     command = CreateStartCommand(currentStep);",
          "121:                 }",
          "123:                 while (currentStep != null)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:                         throw CreateException(connection, ex);",
          "119:                     }",
          "128:                 }",
          "129:             }",
          "130:         }",
          "134:         {",
          "135:             return isMasterCommand;",
          "136:         }",
          "138:         private CommandWireProtocol<BsonDocument> CreateCommandProtocol(BsonDocument command)",
          "139:         {",
          "140:             return new CommandWireProtocol<BsonDocument>(",
          "",
          "[Removed Lines]",
          "121:                     currentStep = Transition(conversation, currentStep, result);",
          "122:                     if (currentStep == null)",
          "123:                     {",
          "124:                         return;",
          "125:                     }",
          "127:                     command = CreateContinueCommand(currentStep, result);",
          "133:         public BsonDocument CustomizeInitialIsMasterCommand(BsonDocument isMasterCommand)",
          "",
          "[Added Lines]",
          "136:                     currentStep = Transition(conversation, currentStep, result, out command);",
          "142:         public virtual BsonDocument CustomizeInitialIsMasterCommand(BsonDocument isMasterCommand)",
          "147:         private protected virtual BsonDocument CreateStartCommand(ISaslStep currentStep)",
          "148:         {",
          "149:             var startCommand = new BsonDocument",
          "150:             {",
          "151:                 { \"saslStart\", 1 },",
          "152:                 { \"mechanism\", _mechanism.Name },",
          "153:                 { \"payload\", currentStep.BytesToSendToServer }",
          "154:             };",
          "156:             return startCommand;",
          "157:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:             return new MongoAuthenticationException(connection.ConnectionId, message, ex);",
          "162:         }",
          "182:         {",
          "184:             if (result.GetValue(\"done\", false).ToBoolean() && currentStep.IsComplete)",
          "185:             {",
          "186:                 return null;",
          "187:             }",
          "",
          "[Removed Lines]",
          "164:         private BsonDocument CreateStartCommand(ISaslStep currentStep)",
          "165:         {",
          "166:             var startCommand = new BsonDocument",
          "167:             {",
          "168:                 { \"saslStart\", 1 },",
          "169:                 { \"mechanism\", _mechanism.Name },",
          "170:                 { \"payload\", currentStep.BytesToSendToServer }",
          "171:             };",
          "173:             if (_mechanism.Name.StartsWith(\"SCRAM\", StringComparison.OrdinalIgnoreCase))",
          "174:             {",
          "175:                 startCommand.Add(\"options\", new BsonDocument(\"skipEmptyExchange\", true));",
          "176:             }",
          "178:             return startCommand;",
          "179:         }",
          "181:         private ISaslStep Transition(SaslConversation conversation, ISaslStep currentStep, BsonDocument result)",
          "",
          "[Added Lines]",
          "185:         private ISaslStep Transition(",
          "186:             SaslConversation conversation,",
          "187:             ISaslStep currentStep,",
          "188:             BsonDocument result,",
          "189:             out BsonDocument command)",
          "194:                 command = null;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192:             if (result.GetValue(\"done\", false).ToBoolean() && currentStep.IsComplete)",
          "193:             {",
          "194:                 return null;",
          "195:             }",
          "197:             return currentStep;",
          "198:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:                 command = null;",
          "207:             command = CreateContinueCommand(currentStep, result);",
          "",
          "---------------"
        ],
        "src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs||src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs": [
          "File: src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs -> src/MongoDB.Driver.Core/Core/Authentication/ScramShaAuthenticator.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: using System;",
          "17: using System.Security.Cryptography;",
          "18: using System.Text;",
          "19: using MongoDB.Bson.IO;",
          "20: #if NET452",
          "21: using MongoDB.Driver.Core.Authentication.Vendored;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: using MongoDB.Bson;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:             HashAlgorithmName hashAlgorithmName,",
          "72:             H h,",
          "73:             Hi hi,",
          "",
          "[Removed Lines]",
          "70:         protected ScramShaAuthenticator(UsernamePasswordCredential credential,",
          "",
          "[Added Lines]",
          "71:         protected ScramShaAuthenticator(UsernamePasswordCredential credential,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         internal ScramShaAuthenticator(",
          "89:             HashAlgorithmName hashAlgorithName,",
          "90:             IRandomStringGenerator randomStringGenerator,",
          "91:             H h,",
          "",
          "[Removed Lines]",
          "88:             UsernamePasswordCredential credential,",
          "",
          "[Added Lines]",
          "89:             UsernamePasswordCredential credential,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:         public override string DatabaseName => _databaseName;",
          "105:         private class ScramShaMechanism : ISaslMechanism",
          "106:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:         public override BsonDocument CustomizeInitialIsMasterCommand(BsonDocument isMasterCommand)",
          "107:         {",
          "108:             isMasterCommand = base.CustomizeInitialIsMasterCommand(isMasterCommand);",
          "109:             _speculativeFirstStep = _mechanism.Initialize(connection: null, conversation: null, description: null);",
          "110:             var firstCommand = CreateStartCommand(_speculativeFirstStep);",
          "111:             firstCommand.Add(\"db\", DatabaseName);",
          "112:             isMasterCommand.Add(\"speculativeAuthenticate\", firstCommand);",
          "113:             return isMasterCommand;",
          "114:         }",
          "116:         private protected override BsonDocument CreateStartCommand(ISaslStep currentStep)",
          "117:         {",
          "118:             var startCommand = base.CreateStartCommand(currentStep);",
          "119:             startCommand.Add(\"options\", new BsonDocument(\"skipEmptyExchange\", true));",
          "120:             return startCommand;",
          "121:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:             private ScramCache _cache;",
          "115:             public ScramShaMechanism(",
          "118:                 IRandomStringGenerator randomStringGenerator,",
          "119:                 H h,",
          "120:                 Hi hi,",
          "",
          "[Removed Lines]",
          "116:                 UsernamePasswordCredential credential,",
          "117:                 HashAlgorithmName hashAlgorithmName,",
          "",
          "[Added Lines]",
          "135:                 UsernamePasswordCredential credential,",
          "136:                 HashAlgorithmName hashAlgorithmName,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:             public ISaslStep Initialize(IConnection connection, SaslConversation conversation, ConnectionDescription description)",
          "140:             {",
          "144:                 const string gs2Header = \"n,,\";",
          "145:                 var username = \"n=\" + PrepUsername(_credential.Username);",
          "146:                 var r = GenerateRandomString();",
          "",
          "[Removed Lines]",
          "141:                 Ensure.IsNotNull(connection, nameof(connection));",
          "142:                 Ensure.IsNotNull(description, nameof(description));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:             private ScramCache _cache;",
          "182:             public ClientFirst(",
          "186:                 string rPrefix,",
          "187:                 H h,",
          "188:                 Hi hi,",
          "",
          "[Removed Lines]",
          "183:                 byte[] bytesToSendToServer,",
          "184:                 string clientFirstMessageBare,",
          "185:                 UsernamePasswordCredential credential,",
          "",
          "[Added Lines]",
          "199:                 byte[] bytesToSendToServer,",
          "200:                 string clientFirstMessageBare,",
          "201:                 UsernamePasswordCredential credential,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "266:         }",
          "268:         private class ClientLast : ISaslStep",
          "270:             private readonly byte[] _bytesToSendToServer;",
          "271:             private readonly byte[] _serverSignature64;",
          "",
          "[Removed Lines]",
          "269:         {",
          "",
          "[Added Lines]",
          "285:         {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306:             }",
          "307:         }",
          "308:     }",
          "",
          "[Removed Lines]",
          "309: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs": [
          "File: src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs -> src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: using System;",
          "17: using System.Collections.Concurrent;",
          "18: using System.Collections.Generic;",
          "19: using System.Diagnostics;",
          "20: using System.IO;",
          "21: using System.Linq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: using System.Collections.ObjectModel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     internal class CommandEventHelper",
          "33:     {",
          "34:         private static readonly string[] __writeConcernIndicators = new[] { \"wtimeout\", \"jnote\", \"wnote\" };",
          "48:         private readonly ConcurrentDictionary<int, CommandState> _state;",
          "49:         private readonly Action<CommandStartedEvent> _startedEvent;",
          "",
          "[Removed Lines]",
          "35:         private static readonly HashSet<string> __securitySensitiveCommands = new HashSet<string>(StringComparer.OrdinalIgnoreCase)",
          "36:         {",
          "37:             \"authenticate\",",
          "38:             \"saslStart\",",
          "39:             \"saslContinue\",",
          "40:             \"getnonce\",",
          "41:             \"createUser\",",
          "42:             \"updateUser\",",
          "43:             \"copydbgetnonce\",",
          "44:             \"copydbsaslstart\",",
          "45:             \"copydb\"",
          "46:         };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:                 var commandName = command.GetElement(0).Name;",
          "283:                 var databaseName = command[\"$db\"].AsString;",
          "284:                 var databaseNamespace = new DatabaseNamespace(databaseName);",
          "286:                 {",
          "287:                     command = new BsonDocument();",
          "288:                 }",
          "",
          "[Removed Lines]",
          "285:                 if (__securitySensitiveCommands.Contains(commandName))",
          "",
          "[Added Lines]",
          "274:                 if (ShouldRedactMessage(commandName, command))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:                 return;",
          "330:             }",
          "333:             {",
          "334:                 reply = new BsonDocument();",
          "335:             }",
          "",
          "[Removed Lines]",
          "332:             if (__securitySensitiveCommands.Contains(state.CommandName))",
          "",
          "[Added Lines]",
          "321:             if (ShouldRedactMessage(state.CommandName, reply))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "605:                     command = decodedMessage.Query;",
          "606:                     var firstElement = command.GetElement(0);",
          "607:                     commandName = firstElement.Name;",
          "609:                     {",
          "610:                         command = new BsonDocument();",
          "611:                     }",
          "",
          "[Removed Lines]",
          "608:                     if (__securitySensitiveCommands.Contains(commandName))",
          "",
          "[Added Lines]",
          "597:                     if (ShouldRedactMessage(commandName, command))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "686:                     (state.ExpectedResponseType != ExpectedResponseType.Query && replyMessage.Documents.Count == 0))",
          "687:                 {",
          "688:                     var queryFailureDocument = replyMessage.QueryFailureDocument;",
          "690:                     {",
          "691:                         queryFailureDocument = new BsonDocument();",
          "692:                     }",
          "",
          "[Removed Lines]",
          "689:                     if (__securitySensitiveCommands.Contains(state.CommandName))",
          "",
          "[Added Lines]",
          "678:                     if (ShouldRedactMessage(state.CommandName, queryFailureDocument))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "741:                 return;",
          "742:             }",
          "745:             {",
          "746:                 reply = new BsonDocument();",
          "747:             }",
          "",
          "[Removed Lines]",
          "744:             if (__securitySensitiveCommands.Contains(state.CommandName))",
          "",
          "[Added Lines]",
          "733:             if (ShouldRedactMessage(state.CommandName, reply))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1099:             return collectionNamespace.Equals(collectionNamespace.DatabaseNamespace.CommandCollection);",
          "1100:         }",
          "1102:         private enum ExpectedResponseType",
          "1103:         {",
          "1104:             None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091:         private static bool ShouldRedactMessage(string commandName, BsonDocument command)",
          "1092:         {",
          "1093:             switch (commandName.ToLowerInvariant())",
          "1094:             {",
          "1095:                 case \"authenticate\":",
          "1096:                 case \"saslStart\":",
          "1097:                 case \"saslContinue\":",
          "1098:                 case \"getnonce\":",
          "1099:                 case \"createUser\":",
          "1100:                 case \"updateUser\":",
          "1101:                 case \"copydbgetnonce\":",
          "1102:                 case \"copydbsaslstart\":",
          "1103:                 case \"copydb\":",
          "1104:                     return true;",
          "1106:                 case \"isMaster\":",
          "1107:                     return command.Contains(\"speculativeAuthenticate\");",
          "1109:                 default:",
          "1110:                     return false;",
          "1111:             }",
          "1112:         }",
          "",
          "---------------"
        ],
        "src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs||src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs": [
          "File: src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs -> src/MongoDB.Driver.Core/Core/Connections/IsMasterResult.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         public bool HasSaslSupportedMechs",
          "112:         {",
          "114:         }",
          "",
          "[Removed Lines]",
          "113:             get { return _wrapped.Contains(\"saslSupportedMechs\"); }",
          "",
          "[Added Lines]",
          "113:             get { return _wrapped.Contains(\"saslSupportedMechs\"); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:             }",
          "323:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:         public BsonDocument SpeculativeAuthenticate",
          "332:         {",
          "333:             get",
          "334:             {",
          "335:                 if (_wrapped.TryGetValue(\"ok\", out var ok) && ok.ToBoolean() &&",
          "336:                     _wrapped.TryGetValue(\"speculativeAuthenticate\", out var speculativeAuthenticate))",
          "337:                 {",
          "338:                     return (BsonDocument)speculativeAuthenticate;",
          "339:                 }",
          "340:                 else",
          "341:                 {",
          "342:                     return null;",
          "343:                 }",
          "344:             }",
          "345:         }",
          "",
          "---------------"
        ],
        "tests/MongoDB.Bson.TestHelpers/Reflector.cs||tests/MongoDB.Bson.TestHelpers/Reflector.cs": [
          "File: tests/MongoDB.Bson.TestHelpers/Reflector.cs -> tests/MongoDB.Bson.TestHelpers/Reflector.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:             }",
          "146:         }",
          "148:         public static object InvokeStatic<T1, T2, T3>(Type type, string name, T1 arg1, T2 arg2, T3 arg3)",
          "149:         {",
          "150:             var parameterTypes = new[] { typeof(T1), typeof(T2), typeof(T3) };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:         public static object InvokeStatic<T1, T2>(Type type, string name, T1 arg1, T2 arg2)",
          "149:         {",
          "150:             var parameterTypes = new[] { typeof(T1), typeof(T2) };",
          "151:             var methodInfo = type.GetMethods(BindingFlags.NonPublic | BindingFlags.Static)",
          "152:                 .Where(m => m.Name == name && m.GetParameters().Select(p => p.ParameterType).SequenceEqual(parameterTypes))",
          "153:                 .Single();",
          "154:             try",
          "155:             {",
          "156:                 return methodInfo.Invoke(null, new object[] { arg1, arg2 });",
          "157:             }",
          "158:             catch (TargetInvocationException exception)",
          "159:             {",
          "160:                 throw exception.InnerException;",
          "161:             }",
          "162:         }",
          "",
          "---------------"
        ],
        "tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs": [
          "File: tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha1AuthenticatorTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: using System;",
          "17: using System.Net;",
          "18: using System.Threading;",
          "19: using FluentAssertions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: using System.Collections.Generic;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:             var subject = new ScramSha1Authenticator(__credential, randomStringGenerator);",
          "85:             var saslStartReply = MessageHelper.BuildReply<RawBsonDocument>(",
          "88:             var connection = new MockConnection(__serverId);",
          "89:             connection.EnqueueReplyMessage(saslStartReply);",
          "",
          "[Removed Lines]",
          "86:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,\\\"cj1meWtvLWQybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw\\\"), done: false, ok: 1}\"));",
          "",
          "[Added Lines]",
          "87:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,'cj1meWtvLWQybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw'), done: false, ok: 1}\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:             var subject = new ScramSha1Authenticator(__credential, randomStringGenerator);",
          "113:             var saslStartReply = MessageHelper.BuildReply<RawBsonDocument>(",
          "115:             var saslContinueReply = MessageHelper.BuildReply<RawBsonDocument>(",
          "118:             var connection = new MockConnection(__serverId);",
          "119:             connection.EnqueueReplyMessage(saslStartReply);",
          "",
          "[Removed Lines]",
          "114:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,\\\"cj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw\\\"), done: false, ok: 1}\"));",
          "116:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,\\\"dj1VTVdlSTI1SkQxeU5ZWlJNcFo0Vkh2aFo5ZTBh\\\"), done: true, ok: 1}\"));",
          "",
          "[Added Lines]",
          "115:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,'cj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw'), done: false, ok: 1}\"));",
          "117:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,'dj1VTVdlSTI1SkQxeU5ZWlJNcFo0Vkh2aFo5ZTBh'), done: true, ok: 1}\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         [Theory]",
          "136:         [ParameterAttributeData]",
          "137:         public void Authenticate_should_not_throw_when_authentication_succeeds(",
          "138:             [Values(false, true)] bool useLongAuthentication,",
          "139:             [Values(false, true)] bool async)",
          "140:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:             [Values(false, true)] bool useSpeculativeAuthenticate,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:             var subject = new ScramSha1Authenticator(__credential, randomStringGenerator);",
          "144:             var saslStartReply = MessageHelper.BuildReply<RawBsonDocument>(",
          "146:             var saslContinueReply = MessageHelper.BuildReply<RawBsonDocument>(RawBsonDocumentHelper.FromJson(",
          "151:             var saslLastStepReply = MessageHelper.BuildReply<RawBsonDocument>(RawBsonDocumentHelper.FromJson(",
          "157:             var connection = new MockConnection(__serverId);",
          "159:             connection.EnqueueReplyMessage(saslContinueReply);",
          "160:             if (useLongAuthentication)",
          "161:             {",
          "162:                 connection.EnqueueReplyMessage(saslLastStepReply);",
          "163:             }",
          "164:             var expectedRequestId = RequestMessage.CurrentGlobalRequestId + 1;",
          "167:             if (async)",
          "168:             {",
          "170:             }",
          "171:             else",
          "172:             {",
          "174:             }",
          "178:             SpinWait.SpinUntil(",
          "179:                 () => connection.GetSentMessages().Count >= expectedSentMessageCount,",
          "180:                 TimeSpan.FromSeconds(5)",
          "",
          "[Removed Lines]",
          "145:                 RawBsonDocumentHelper.FromJson(\"{conversationId: 1, payload: BinData(0,\\\"cj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw\\\"), done: false, ok: 1}\"));",
          "147:                 @\"{conversationId: 1,",
          "148:                    payload: BinData(0,\"\"dj1VTVdlSTI1SkQxeU5ZWlJNcFo0Vkh2aFo5ZTA9\"\"),\" +",
          "149:                 $\" done: {new BsonBoolean(!useLongAuthentication)}, \" +",
          "150:                 @\"  ok: 1}\"));",
          "152:                 @\"{conversationId: 1,\" +",
          "153:                 $\" payload: BinData(0,\\\"\\\"),\" +",
          "154:                 @\" done: true,",
          "155:                    ok: 1}\"));",
          "158:             connection.EnqueueReplyMessage(saslStartReply);",
          "166:             Action act;",
          "169:                 act = () => subject.AuthenticateAsync(connection, __description, CancellationToken.None).GetAwaiter().GetResult();",
          "173:                 act = () => subject.Authenticate(connection, __description, CancellationToken.None);",
          "176:             act.ShouldNotThrow();",
          "177:             var expectedSentMessageCount = useLongAuthentication ? 3 : 2;",
          "",
          "[Added Lines]",
          "147:                 RawBsonDocumentHelper.FromJson(\"{ conversationId : 1, payload : BinData(0,'cj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw'), done : false, ok : 1}\"));",
          "149:                 @\"{ conversationId : 1,",
          "150:                     payload : BinData(0,'dj1VTVdlSTI1SkQxeU5ZWlJNcFo0Vkh2aFo5ZTA9'),\" +",
          "151:                 $\"  done : {new BsonBoolean(!useLongAuthentication)}, \" +",
          "152:                 @\"  ok : 1}\"));",
          "154:                 @\"{ conversationId : 1,",
          "155:                     payload : BinData(0,''),",
          "156:                     done : true,",
          "157:                     ok : 1 }\"));",
          "160:             var isMasterResult = (BsonDocument)__description.IsMasterResult.Wrapped.Clone();",
          "161:             if (useSpeculativeAuthenticate)",
          "162:             {",
          "163:                 isMasterResult.Add(\"speculativeAuthenticate\", saslStartReply.Documents[0].ToBsonDocument());",
          "164:             }",
          "168:             connection.Description = new ConnectionDescription(",
          "169:                 __description.ConnectionId, new IsMasterResult(isMasterResult), new BuildInfoResult(new BsonDocument(\"version\",\"3.4\")));",
          "171:             BsonDocument isMasterCommand = null;",
          "172:             if (useSpeculativeAuthenticate)",
          "173:             {",
          "176:                 isMasterCommand = subject.CustomizeInitialIsMasterCommand(new BsonDocument { { \"isMaster\", 1 } });",
          "177:             }",
          "178:             else",
          "179:             {",
          "180:                 connection.EnqueueReplyMessage(saslStartReply);",
          "181:             }",
          "191:             Exception exception;",
          "194:                 exception = Record.Exception(",
          "195:                     () => subject.AuthenticateAsync(connection, connection.Description, CancellationToken.None)",
          "196:                         .GetAwaiter().GetResult());",
          "200:                 exception = Record.Exception(",
          "201:                     () => subject.Authenticate(connection, connection.Description, CancellationToken.None));",
          "204:             exception.Should().BeNull();",
          "205:             var expectedSentMessageCount = 3 - (useLongAuthentication ? 0 : 1) - (useSpeculativeAuthenticate ? 1 : 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:                 actualRequestIds[i].Should().BeInRange(expectedRequestId + i, expectedRequestId + 10 + i);",
          "190:             }",
          "200:             if (useLongAuthentication)",
          "201:             {",
          "212:             }",
          "213:         }",
          "",
          "[Removed Lines]",
          "192:             sentMessages[0].Should().Be(",
          "193:                 $\"{{opcode: \\\"query\\\", \" +",
          "194:                 $\"  requestId: {actualRequestIds[0]}, \" +",
          "195:                 $\"  database: \\\"source\\\", collection: \\\"$cmd\\\", batchSize: -1, slaveOk: true, \" +",
          "196:                 $\"  query: {{saslStart: 1, mechanism: \\\"SCRAM-SHA-1\\\", \" +",
          "197:                 $\"           payload: new BinData(0, \\\"biwsbj11c2VyLHI9ZnlrbytkMmxiYkZnT05Sdjlxa3hkYXdM\\\")\" +",
          "198:                 @\"           options: { skipEmptyExchange: true }}}\");",
          "199:             sentMessages[1].Should().Be(\"{opcode: \\\"query\\\", requestId: \" + actualRequestIds[1] + \", database: \\\"source\\\", collection: \\\"$cmd\\\", batchSize: -1, slaveOk: true, query: {saslContinue: 1, conversationId: 1, payload: new BinData(0, \\\"Yz1iaXdzLHI9ZnlrbytkMmxiYkZnT05Sdjlxa3hkYXdMSG8rVmdrN3F2VU9LVXd1V0xJV2c0bC85U3JhR01IRUUscD1NQzJUOEJ2Ym1XUmNrRHc4b1dsNUlWZ2h3Q1k9\\\")}}\");",
          "202:                 sentMessages[2].Should().Be(",
          "203:                     @\"{opcode: \"\"query\"\",\" +",
          "204:                     $\" requestId: {actualRequestIds[2]},\" +",
          "205:                     @\" database: \"\"source\"\",",
          "206:                        collection: \"\"$cmd\"\",",
          "207:                        batchSize: -1,",
          "208:                        slaveOk: true,",
          "209:                        query: {saslContinue: 1,",
          "210:                                conversationId: 1, \" +",
          "211:                     $\"         payload: new BinData(0, \\\"\\\")}}}}\");",
          "",
          "[Added Lines]",
          "220:             var expectedMessages = new List<BsonDocument>();",
          "222:             var saslStartMessage = BsonDocument.Parse(",
          "223:                 @\"{ opcode : 'query',\" +",
          "224:                 $\"  requestId : {actualRequestIds[0]}, \" +",
          "225:                 @\"  database : 'source',",
          "226:                     collection : '$cmd',",
          "227:                     batchSize : -1,",
          "228:                     slaveOk : true,",
          "229:                     query : { saslStart : 1,",
          "230:                              mechanism : 'SCRAM-SHA-1',\" +",
          "231:                 $\"           payload : new BinData(0, 'biwsbj11c2VyLHI9ZnlrbytkMmxiYkZnT05Sdjlxa3hkYXdM')\" +",
          "232:                 @\"           options : { skipEmptyExchange: true }}}\");",
          "233:             if (!useSpeculativeAuthenticate)",
          "234:             {",
          "235:                 expectedMessages.Add(saslStartMessage);",
          "236:             }",
          "238:             var saslContinueMessage = BsonDocument.Parse(",
          "239:                 @\"{ opcode : 'query',\" +",
          "240:                 $\"  requestId : {(useSpeculativeAuthenticate ? actualRequestIds[0] : actualRequestIds[1])},\" +",
          "241:                 @\"  database : 'source',",
          "242:                     collection : '$cmd',",
          "243:                     batchSize : -1,",
          "244:                     slaveOk : true,",
          "245:                     query : { saslContinue : 1,",
          "246:                              conversationId : 1, \" +",
          "247:                 $\"           payload : new BinData(0, 'Yz1iaXdzLHI9ZnlrbytkMmxiYkZnT05Sdjlxa3hkYXdMSG8rVmdrN3F2VU9LVXd1V0xJV2c0bC85U3JhR01IRUUscD1NQzJUOEJ2Ym1XUmNrRHc4b1dsNUlWZ2h3Q1k9')}}}}\");",
          "248:             expectedMessages.Add(saslContinueMessage);",
          "252:                 var saslOptionalFinalMessage = BsonDocument.Parse(",
          "253:                      @\"{opcode : 'query',\" +",
          "254:                      $\" requestId : {(useSpeculativeAuthenticate ? actualRequestIds[1] : actualRequestIds[2])},\" +",
          "255:                      @\" database : 'source',",
          "256:                         collection : '$cmd',",
          "257:                         batchSize : -1,",
          "258:                         slaveOk : true,",
          "259:                         query : { saslContinue : 1,",
          "260:                                  conversationId : 1, \" +",
          "261:                      $\"          payload : new BinData(0, '')}}}}\");",
          "262:                 expectedMessages.Add(saslOptionalFinalMessage);",
          "263:             }",
          "265:             sentMessages.Should().Equal(expectedMessages);",
          "266:             if (useSpeculativeAuthenticate)",
          "267:             {",
          "268:                 isMasterCommand.Should().Contain(\"speculativeAuthenticate\");",
          "269:                 var speculativeAuthenticateDocument = isMasterCommand[\"speculativeAuthenticate\"].AsBsonDocument;",
          "270:                 var expectedSpeculativeAuthenticateDocument =",
          "271:                     saslStartMessage[\"query\"].AsBsonDocument.Add(\"db\", __credential.Source);",
          "272:                 speculativeAuthenticateDocument.Should().Be(expectedSpeculativeAuthenticateDocument);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:             var saslStartReply = MessageHelper.BuildReply<RawBsonDocument>(",
          "224:                 RawBsonDocumentHelper.FromJson(",
          "226:             var saslContinueReply = MessageHelper.BuildReply<RawBsonDocument>(",
          "227:                 RawBsonDocumentHelper.FromJson(",
          "229:             var connection = new MockConnection(__serverId);",
          "230:             connection.EnqueueReplyMessage(saslStartReply);",
          "231:             connection.EnqueueReplyMessage(saslContinueReply);",
          "",
          "[Removed Lines]",
          "225:                     \"{conversationId: 1, payload: BinData(0,\\\"cj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw\\\"), done: false, ok: 1}\"));",
          "228:                     \"{conversationId: 1, payload: BinData(0,\\\"dj1VTVdlSTI1SkQxeU5ZWlJNcFo0Vkh2aFo5ZTA9\\\"), done: true, ok: 1}\"));",
          "",
          "[Added Lines]",
          "286:                     \"{conversationId: 1, payload: BinData(0,'cj1meWtvK2QybGJiRmdPTlJ2OXFreGRhd0xIbytWZ2s3cXZVT0tVd3VXTElXZzRsLzlTcmFHTUhFRSxzPXJROVpZM01udEJldVAzRTFURFZDNHc9PSxpPTEwMDAw'), done: false, ok: 1}\"));",
          "289:                     \"{conversationId: 1, payload: BinData(0,'dj1VTVdlSTI1SkQxeU5ZWlJNcFo0Vkh2aFo5ZTA9'), done: true, ok: 1}\"));",
          "",
          "---------------"
        ],
        "tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs": [
          "File: tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Authentication/ScramSha256AuthenticatorTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: using System;",
          "17: using System.Net;",
          "18: using System.Threading;",
          "19: using FluentAssertions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: using System.Collections.Generic;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         [Theory]",
          "207:         [ParameterAttributeData]",
          "208:         public void Authenticate_should_not_throw_when_authentication_succeeds(",
          "209:             [Values(false, true)] bool useLongAuthentication,",
          "210:             [Values(false, true)] bool async)",
          "211:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:             [Values(false, true)] bool useSpeculativeAuthenticate,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:             var subject = new ScramSha256Authenticator(__credential, randomStringGenerator);",
          "215:             var saslStartReply = MessageHelper.BuildReply<RawBsonDocument>(RawBsonDocumentHelper.FromJson(",
          "220:             var saslContinueReply = MessageHelper.BuildReply<RawBsonDocument>(RawBsonDocumentHelper.FromJson(",
          "225:             var saslLastStepReply = MessageHelper.BuildReply<RawBsonDocument>(RawBsonDocumentHelper.FromJson(",
          "231:             var connection = new MockConnection(__serverId);",
          "233:             connection.EnqueueReplyMessage(saslContinueReply);",
          "234:             if (useLongAuthentication)",
          "235:             {",
          "",
          "[Removed Lines]",
          "216:                 @\"{conversationId: 1,\" +",
          "217:                 $\" payload: BinData(0,\\\"{ToUtf8Base64(__serverResponse1)}\\\"),\" +",
          "218:                 @\" done: false,",
          "219:                    ok: 1}\"));",
          "221:                 @\"{conversationId: 1,\" +",
          "222:                 $\" payload: BinData(0,\\\"{ToUtf8Base64(__serverResponse2)}\\\"),\" +",
          "223:                 $\" done: {new BsonBoolean(!useLongAuthentication)},\" +",
          "224:                 @\"   ok: 1}\"));",
          "226:                 @\"{conversationId: 1,\" +",
          "227:                 $\" payload: BinData(0,\\\"{ToUtf8Base64(__serverOptionalFinalResponse)}\\\"),\" +",
          "228:                 @\" done: true,",
          "229:                    ok: 1}\"));",
          "232:             connection.EnqueueReplyMessage(saslStartReply);",
          "",
          "[Added Lines]",
          "218:                 @\"{ conversationId : 1,\" +",
          "219:                 $\"  payload : BinData(0,'{ToUtf8Base64(__serverResponse1)}'),\" +",
          "220:                 @\"  done : false,",
          "221:                     ok : 1 }\"));",
          "223:                 @\"{ conversationId : 1,\" +",
          "224:                 $\"  payload : BinData(0,'{ToUtf8Base64(__serverResponse2)}'),\" +",
          "225:                 $\"  done : {new BsonBoolean(!useLongAuthentication)},\" +",
          "226:                 @\"  ok : 1 }\"));",
          "228:                 @\"{ conversationId : 1,\" +",
          "229:                 $\"  payload : BinData(0,'{ToUtf8Base64(__serverOptionalFinalResponse)}'),\" +",
          "230:                 @\"  done : true,",
          "231:                     ok : 1 }\"));",
          "234:             var isMasterResult = (BsonDocument)__description.IsMasterResult.Wrapped.Clone();",
          "235:             if (useSpeculativeAuthenticate)",
          "236:             {",
          "237:                 isMasterResult.Add(\"speculativeAuthenticate\", saslStartReply.Documents[0].ToBsonDocument());",
          "238:             }",
          "241:             connection.Description = new ConnectionDescription(",
          "242:                 __description.ConnectionId,",
          "243:                 new IsMasterResult(isMasterResult),",
          "244:                 new BuildInfoResult(new BsonDocument(\"version\", \"3.4\")));",
          "246:             BsonDocument isMasterCommand = null;",
          "247:             if (useSpeculativeAuthenticate)",
          "248:             {",
          "251:                 isMasterCommand = subject.CustomizeInitialIsMasterCommand(new BsonDocument { { \"isMaster\", 1 } });",
          "252:             }",
          "253:             else",
          "254:             {",
          "255:                 connection.EnqueueReplyMessage(saslStartReply);",
          "256:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:             var expectedRequestId = RequestMessage.CurrentGlobalRequestId + 1;",
          "242:             if (async)",
          "243:             {",
          "245:             }",
          "246:             else",
          "247:             {",
          "249:             }",
          "252:             exception.Should().BeNull();",
          "254:             SpinWait.SpinUntil(",
          "255:                 () => connection.GetSentMessages().Count >= expectedSentMessageCount,",
          "256:                 TimeSpan.FromSeconds(5)",
          "",
          "[Removed Lines]",
          "241:             Action act;",
          "244:                 act = () => subject.AuthenticateAsync(connection, __description, CancellationToken.None).GetAwaiter().GetResult();",
          "248:                 act = () => subject.Authenticate(connection, __description, CancellationToken.None);",
          "251:             var exception = Record.Exception(act);",
          "253:             var expectedSentMessageCount = useLongAuthentication ? 3 : 2;",
          "",
          "[Added Lines]",
          "266:             Exception exception;",
          "269:                 exception = Record.Exception(",
          "270:                     () => subject.AuthenticateAsync(connection, connection.Description, CancellationToken.None)",
          "271:                         .GetAwaiter().GetResult());",
          "275:                 exception = Record.Exception(",
          "276:                     () => subject.Authenticate(connection, connection.Description, CancellationToken.None));",
          "280:             var expectedSentMessageCount = 3 - (useLongAuthentication ? 0 : 1) - (useSpeculativeAuthenticate ? 1 : 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265:                 actualRequestIds[i].Should().BeInRange(expectedRequestId + i, expectedRequestId + 10 + i);",
          "266:             }",
          "290:             {",
          "301:             }",
          "302:         }",
          "",
          "[Removed Lines]",
          "268:             sentMessages[0].Should().Be(",
          "269:                 @\"{opcode: \"\"query\"\",\" +",
          "270:                 $\" requestId: {actualRequestIds[0]},\" +",
          "271:                 @\" database: \"\"source\"\",",
          "272:                    collection: \"\"$cmd\"\",",
          "273:                    batchSize: -1,",
          "274:                    slaveOk: true,",
          "275:                    query: {saslStart: 1,",
          "276:                            mechanism: \"\"SCRAM-SHA-256\"\",\" +",
          "277:                 $\"         payload: new BinData(0, \\\"{ToUtf8Base64(__clientRequest1)}\\\")\" +",
          "278:                 @\"         options: { skipEmptyExchange: true }}}\");",
          "279:             sentMessages[1].Should().Be(",
          "280:                 @\"{opcode: \"\"query\"\",\" +",
          "281:                 $\" requestId: {actualRequestIds[1]},\" +",
          "282:                 @\" database: \"\"source\"\",",
          "283:                    collection: \"\"$cmd\"\",",
          "284:                    batchSize: -1,",
          "285:                    slaveOk: true,",
          "286:                    query: {saslContinue: 1,",
          "287:                            conversationId: 1, \" +",
          "288:                 $\"         payload: new BinData(0, \\\"{ToUtf8Base64(__clientRequest2)}\\\")}}}}\");",
          "289:             if (useLongAuthentication)",
          "291:                 sentMessages[2].Should().Be(",
          "292:                     @\"{opcode: \"\"query\"\",\" +",
          "293:                     $\" requestId: {actualRequestIds[2]},\" +",
          "294:                     @\" database: \"\"source\"\",",
          "295:                        collection: \"\"$cmd\"\",",
          "296:                        batchSize: -1,",
          "297:                        slaveOk: true,",
          "298:                        query: {saslContinue: 1,",
          "299:                                conversationId: 1, \" +",
          "300:                     $\"         payload: new BinData(0, \\\"{ToUtf8Base64(__clientOptionalFinalRequest)}\\\")}}}}\");",
          "",
          "[Added Lines]",
          "295:             var expectedMessages = new List<BsonDocument>();",
          "297:             var saslStartMessage = BsonDocument.Parse(",
          "298:                 @\"{ opcode : 'query',\" +",
          "299:                 $\"  requestId : {actualRequestIds[0]},\" +",
          "300:                 @\"  database : 'source',",
          "301:                     collection : '$cmd',",
          "302:                     batchSize : -1,",
          "303:                     slaveOk : true,",
          "304:                     query : { saslStart : 1,",
          "305:                               mechanism : 'SCRAM-SHA-256',\" +",
          "306:                 $\"            payload : new BinData(0, '{ToUtf8Base64(__clientRequest1)}')\" +",
          "307:                 @\"            options : { skipEmptyExchange: true }}}\");",
          "309:             if (!useSpeculativeAuthenticate)",
          "310:             {",
          "311:                 expectedMessages.Add(saslStartMessage);",
          "312:             }",
          "314:             var saslContinueMessage = BsonDocument.Parse(",
          "315:                 @\"{ opcode : 'query',\" +",
          "316:                 $\"  requestId : {(useSpeculativeAuthenticate ? actualRequestIds[0] : actualRequestIds[1])},\" +",
          "317:                 @\"  database : 'source',",
          "318:                     collection : '$cmd',",
          "319:                     batchSize : -1,",
          "320:                     slaveOk : true,",
          "321:                     query : { saslContinue : 1,",
          "322:                               conversationId : 1, \" +",
          "323:                 $\"            payload : new BinData(0, \\\"{ToUtf8Base64(__clientRequest2)}\\\")}}}}\");",
          "324:             expectedMessages.Add(saslContinueMessage);",
          "326:             if (useLongAuthentication )",
          "327:             {",
          "328:                 var saslOptionalFinalMessage = BsonDocument.Parse(",
          "329:                     @\"{ opcode : 'query',\" +",
          "330:                     $\"  requestId : {(useSpeculativeAuthenticate ? actualRequestIds[1] : actualRequestIds[2])},\" +",
          "331:                     @\"  database : 'source',",
          "332:                         collection : '$cmd',",
          "333:                         batchSize : -1,",
          "334:                         slaveOk : true,",
          "335:                         query : { saslContinue : 1,",
          "336:                                   conversationId : 1, \" +",
          "337:                     $\"            payload : new BinData(0, '{ToUtf8Base64(__clientOptionalFinalRequest)}')}}}}\");",
          "338:                 expectedMessages.Add(saslOptionalFinalMessage);",
          "339:             }",
          "341:             sentMessages.Should().Equal(expectedMessages);",
          "342:             if (useSpeculativeAuthenticate)",
          "344:                 isMasterCommand.Should().Contain(\"speculativeAuthenticate\");",
          "345:                 var speculativeAuthenticateDocument = isMasterCommand[\"speculativeAuthenticate\"].AsBsonDocument;",
          "346:                 var expectedSpeculativeAuthenticateDocument =",
          "347:                     saslStartMessage[\"query\"].AsBsonDocument.Add(\"db\", __credential.Source);",
          "348:                 speculativeAuthenticateDocument.Should().Be(expectedSpeculativeAuthenticateDocument);",
          "",
          "---------------"
        ],
        "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs": [
          "File: tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: using FluentAssertions;",
          "25: using MongoDB.Bson;",
          "26: using MongoDB.Bson.Serialization.Serializers;",
          "27: using MongoDB.Driver.Core.Clusters;",
          "28: using MongoDB.Driver.Core.Configuration;",
          "29: using MongoDB.Driver.Core.Events;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: using MongoDB.Bson.TestHelpers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         private BinaryConnection _subject;",
          "48:         private IDisposable _operationIdDisposer;",
          "50:         public BinaryConnection_CommandEventTests()",
          "51:         {",
          "52:             _capturedEvents = new EventCapturer()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:         public static IEnumerable<object[]> GetPotentiallyRedactedCommandTestCases()",
          "52:         {",
          "53:             var potentiallyRedactedCommands = new[]",
          "54:             {",
          "55:                 \"authenticate\",",
          "56:                 \"saslStart\",",
          "57:                 \"saslContinue\",",
          "58:                 \"getnonce\",",
          "59:                 \"createUser\",",
          "60:                 \"updateUser\",",
          "61:                 \"copydbgetnonce\",",
          "62:                 \"copydbsaslstart\",",
          "63:                 \"copydb\",",
          "64:                 \"isMaster\",",
          "65:             };",
          "66:             return potentiallyRedactedCommands.Select(c => new object[] { c });",
          "67:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         }",
          "127:         [Theory]",
          "129:         public void Should_process_a_redacted_command(string commandName)",
          "130:         {",
          "131:             var command = BsonDocument.Parse($\"{{ {commandName}: 1, extra: true }}\");",
          "132:             var reply = BsonDocument.Parse(\"{ ok: 1, extra: true }\");",
          "134:             var requestMessage = MessageHelper.BuildCommand(",
          "135:                 command,",
          "",
          "[Removed Lines]",
          "128:         [MemberData(\"GetRedactedCommands\")]",
          "",
          "[Added Lines]",
          "146:         [MemberData(nameof(GetPotentiallyRedactedCommandTestCases))]",
          "150:             command = ModifyMessageToTriggerConditionToRedact(commandName, command);",
          "153:             reply = ModifyMessageToTriggerConditionToRedact(commandName, reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:                 responseTo: requestMessage.RequestId);",
          "143:             ReceiveMessages(replyMessage);",
          "145:             var commandStartedEvent = (CommandStartedEvent)_capturedEvents.Next();",
          "146:             var commandSucceededEvent = (CommandSucceededEvent)_capturedEvents.Next();",
          "148:             commandStartedEvent.CommandName.Should().Be(command.GetElement(0).Name);",
          "150:             commandStartedEvent.ConnectionId.Should().Be(_subject.ConnectionId);",
          "151:             commandStartedEvent.DatabaseNamespace.Should().Be(MessageHelper.DefaultDatabaseNamespace);",
          "152:             commandStartedEvent.OperationId.Should().Be(EventContext.OperationId);",
          "",
          "[Removed Lines]",
          "149:             commandStartedEvent.Command.ElementCount.Should().Be(0);",
          "",
          "[Added Lines]",
          "167:             var commandStartedCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, command);",
          "168:             var commandSucceededCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, replyMessage.Documents[0]);",
          "169:             var commandStartedCommandExpectedElementCount = commandStartedCommandShouldBeRedacted ? 0 : command.ElementCount;",
          "170:             var commandSucceededCommandExpectedElementCount = commandSucceededCommandShouldBeRedacted ? 0 : reply.ElementCount;",
          "176:             commandStartedEvent.Command.ElementCount.Should().Be(commandStartedCommandExpectedElementCount);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:             commandSucceededEvent.ConnectionId.Should().Be(commandStartedEvent.ConnectionId);",
          "157:             commandSucceededEvent.Duration.Should().BeGreaterThan(TimeSpan.Zero);",
          "158:             commandSucceededEvent.OperationId.Should().Be(commandStartedEvent.OperationId);",
          "160:             commandSucceededEvent.RequestId.Should().Be(commandStartedEvent.RequestId);",
          "161:         }",
          "",
          "[Removed Lines]",
          "159:             commandSucceededEvent.Reply.ElementCount.Should().Be(0);",
          "",
          "[Added Lines]",
          "186:             commandSucceededEvent.Reply.ElementCount.Should().Be(commandSucceededCommandExpectedElementCount);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:         }",
          "198:         [Theory]",
          "200:         public void Should_process_a_redacted_failed_command(string commandName)",
          "201:         {",
          "202:             var command = BsonDocument.Parse($\"{{ {commandName}: 1, extra: true }}\");",
          "203:             var reply = BsonDocument.Parse(\"{ ok: 0, extra: true }\");",
          "205:             var requestMessage = MessageHelper.BuildCommand(",
          "206:                 command,",
          "",
          "[Removed Lines]",
          "199:         [MemberData(\"GetRedactedCommands\")]",
          "",
          "[Added Lines]",
          "226:         [MemberData(nameof(GetPotentiallyRedactedCommandTestCases))]",
          "230:             command = ModifyMessageToTriggerConditionToRedact(commandName, command);",
          "233:             reply = ModifyMessageToTriggerConditionToRedact(commandName, reply);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "213:                 responseTo: requestMessage.RequestId);",
          "214:             ReceiveMessages(replyMessage);",
          "216:             var commandStartedEvent = (CommandStartedEvent)_capturedEvents.Next();",
          "217:             var commandFailedEvent = (CommandFailedEvent)_capturedEvents.Next();",
          "219:             commandStartedEvent.CommandName.Should().Be(command.GetElement(0).Name);",
          "221:             commandStartedEvent.ConnectionId.Should().Be(_subject.ConnectionId);",
          "222:             commandStartedEvent.DatabaseNamespace.Should().Be(MessageHelper.DefaultDatabaseNamespace);",
          "223:             commandStartedEvent.OperationId.Should().Be(EventContext.OperationId);",
          "",
          "[Removed Lines]",
          "220:             commandStartedEvent.Command.ElementCount.Should().Be(0);",
          "",
          "[Added Lines]",
          "246:             var commandStartedCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, command);",
          "247:             var commandSucceededCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, replyMessage.Documents[0]);",
          "248:             var commandStartedCommandExpectedElementCount = commandStartedCommandShouldBeRedacted ? 0 : command.ElementCount;",
          "249:             var commandSucceededCommandExpectedElementCount = commandSucceededCommandShouldBeRedacted ? 0 : reply.ElementCount;",
          "255:             commandStartedEvent.Command.ElementCount.Should().Be(commandStartedCommandExpectedElementCount);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:             commandFailedEvent.OperationId.Should().Be(commandStartedEvent.OperationId);",
          "230:             commandFailedEvent.RequestId.Should().Be(commandStartedEvent.RequestId);",
          "231:             commandFailedEvent.Failure.Should().BeOfType<MongoCommandException>();",
          "233:         }",
          "235:         [Fact]",
          "",
          "[Removed Lines]",
          "232:             ((MongoCommandException)commandFailedEvent.Failure).Result.ElementCount.Should().Be(0);",
          "",
          "[Added Lines]",
          "267:             var exception = (MongoCommandException)commandFailedEvent.Failure;",
          "268:             exception.Result.ElementCount.Should().Be(commandSucceededCommandExpectedElementCount);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "947:             }",
          "948:         }",
          "951:         {",
          "956:         }",
          "957:     }",
          "",
          "[Removed Lines]",
          "950:         private static IEnumerable<object[]> GetRedactedCommands()",
          "952:             var commands = (IEnumerable<string>)typeof(CommandEventHelper)",
          "953:                 .GetField(\"__securitySensitiveCommands\", BindingFlags.Static | BindingFlags.NonPublic)",
          "954:                 .GetValue(null);",
          "955:             return commands.Select(c => new object[] { c });",
          "958: }",
          "",
          "[Added Lines]",
          "986:         private static BsonDocument ModifyMessageToTriggerConditionToRedact(string commandName, BsonDocument command)",
          "988:             switch (commandName)",
          "989:             {",
          "990:                 case \"isMaster\":",
          "991:                     command.Add(\"speculativeAuthenticate\", new BsonDocument(\"db\", \"authSource\"));",
          "992:                     break;",
          "993:             }",
          "995:             return command;",
          "1000:     {",
          "1001:         public static bool ShouldRedactMessage(string commandName, BsonDocument command) =>",
          "1002:             (bool)Reflector.InvokeStatic(typeof(CommandEventHelper), nameof(ShouldRedactMessage), commandName, command);",
          "1004:     }",
          "1005: }",
          "",
          "---------------"
        ],
        "tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs": [
          "File: tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Connections/ConnectionInitializerTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: using System;",
          "17: using System.Net;",
          "18: using System.Threading;",
          "19: using FluentAssertions;",
          "20: using MongoDB.Bson;",
          "21: using MongoDB.Driver.Core.Clusters;",
          "22: using MongoDB.Driver.Core.Misc;",
          "23: using MongoDB.Driver.Core.Servers;",
          "24: using MongoDB.Driver.Core.Helpers;",
          "25: using Xunit;",
          "26: using MongoDB.Bson.TestHelpers.XunitExtensions;",
          "27: using MongoDB.Driver.Core.Compression;",
          "28: using MongoDB.Driver.Core.Configuration;",
          "30: namespace MongoDB.Driver.Core.Connections",
          "31: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: using System.Collections.Generic;",
          "22: using MongoDB.Bson.TestHelpers;",
          "29: using MongoDB.Driver.Core.Authentication;",
          "32: using MongoDB.Driver.Core.WireProtocol.Messages;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:             _subject = new ConnectionInitializer(\"test\", new [] { new CompressorConfiguration(CompressorType.Zlib) });",
          "40:         }",
          "42:         [Theory]",
          "43:         [ParameterAttributeData]",
          "44:         public void InitializeConnection_should_acquire_connectionId_from_isMaster_response([Values(false, true)] bool async)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         [Theory]",
          "47:         [ParameterAttributeData]",
          "48:         public void CreateInitialIsMaster_should_return_isMaster_with_speculativeAuthenticate(",
          "49:             [Values(\"default\", \"SCRAM-SHA-256\", \"SCRAM-SHA-1\")] string authenticatorType,",
          "50:             [Values(false, true)] bool async)",
          "51:         {",
          "52:             var credentials = new UsernamePasswordCredential(",
          "53:                 source: \"Pathfinder\", username: \"Barclay\", password: \"Barclay-Alpha-1-7-Gamma\");",
          "54:             var authenticator = CreateAuthenticator(authenticatorType, credentials);",
          "55:             var connectionSettings = new ConnectionSettings(new[] { authenticator });",
          "57:             var isMasterDocument = _subject.CreateInitialIsMasterCommand(new[] { authenticator });",
          "59:             isMasterDocument.Should().Contain(\"speculativeAuthenticate\");",
          "60:             var speculativeAuthenticateDocument = isMasterDocument[\"speculativeAuthenticate\"].AsBsonDocument;",
          "61:             speculativeAuthenticateDocument.Should().Contain(\"mechanism\");",
          "62:             var expectedMechanism = new BsonString(",
          "63:                 authenticatorType == \"default\" ? \"SCRAM-SHA-256\" : authenticatorType);",
          "64:             speculativeAuthenticateDocument[\"mechanism\"].Should().Be(expectedMechanism);",
          "65:             speculativeAuthenticateDocument[\"db\"].Should().Be(new BsonString(credentials.Source));",
          "66:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:             result.ConnectionId.ServerValue.Should().Be(1);",
          "68:         }",
          "70:         [Theory]",
          "71:         [ParameterAttributeData]",
          "72:         public void InitializeConnection_should_throw_an_ArgumentNullException_if_the_connection_is_null(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:         [Theory]",
          "97:         [ParameterAttributeData]",
          "98:         public void InitializeConnection_should_call_Authenticator_CustomizeInitialIsMasterCommand(",
          "99:             [Values(\"default\", \"SCRAM-SHA-256\", \"SCRAM-SHA-1\")] string authenticatorType,",
          "100:             [Values(false, true)] bool async)",
          "101:         {",
          "102:             var isMasterReply = MessageHelper.BuildReply(",
          "103:                 RawBsonDocumentHelper.FromJson(\"{ ok : 1, connectionId : 1 }\"));",
          "104:             var buildInfoReply = MessageHelper.BuildReply(",
          "105:                 RawBsonDocumentHelper.FromJson(\"{ ok : 1, version : \\\"4.2.0\\\" }\"));",
          "106:             var credentials = new UsernamePasswordCredential(",
          "107:                 source: \"Voyager\", username: \"Seven of Nine\", password: \"Omega-Phi-9-3\");",
          "108:             var authenticator = CreateAuthenticator(authenticatorType, credentials);",
          "109:             var connectionSettings = new ConnectionSettings(new[] { authenticator });",
          "110:             var connection = new MockConnection(__serverId, connectionSettings, eventSubscriber: null);",
          "111:             connection.EnqueueReplyMessage(isMasterReply);",
          "112:             connection.EnqueueReplyMessage(buildInfoReply);",
          "115:             try",
          "116:             {",
          "117:                 if (async)",
          "118:                 {",
          "119:                     _subject.InitializeConnectionAsync(connection, CancellationToken.None).GetAwaiter().GetResult();",
          "120:                 }",
          "121:                 else",
          "122:                 {",
          "123:                      _subject.InitializeConnection(connection, CancellationToken.None);",
          "124:                 }",
          "125:             }",
          "126:             catch (InvalidOperationException ex)",
          "127:             {",
          "128:                 ex.Message.Should().Be(\"Queue empty.\");",
          "129:             }",
          "131:             var sentMessages = connection.GetSentMessages();",
          "132:             var isMasterQuery = (QueryMessage)sentMessages[0];",
          "133:             var isMasterDocument = isMasterQuery.Query;",
          "134:             isMasterDocument.Should().Contain(\"speculativeAuthenticate\");",
          "135:             var speculativeAuthenticateDocument = isMasterDocument[\"speculativeAuthenticate\"].AsBsonDocument;",
          "136:             speculativeAuthenticateDocument.Should().Contain(\"mechanism\");",
          "137:             var expectedMechanism = new BsonString(",
          "138:                 authenticatorType == \"default\" ? \"SCRAM-SHA-256\" : authenticatorType);",
          "139:             speculativeAuthenticateDocument[\"mechanism\"].Should().Be(expectedMechanism);",
          "140:             speculativeAuthenticateDocument[\"db\"].Should().Be(new BsonString(credentials.Source));",
          "141:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:             result.AvailableCompressors.Count.Should().Be(1);",
          "118:             result.AvailableCompressors.Should().Contain(CompressorType.Zlib);",
          "119:         }",
          "120:     }",
          "",
          "[Removed Lines]",
          "121: }",
          "",
          "[Added Lines]",
          "194:         private IAuthenticator CreateAuthenticator(string authenticatorType, UsernamePasswordCredential credentials)",
          "195:         {",
          "196:             switch (authenticatorType)",
          "197:             {",
          "198:                 case \"SCRAM-SHA-1\":",
          "199:                     return new ScramSha1Authenticator(credentials);",
          "200:                 case \"SCRAM-SHA-256\":",
          "201:                     return new ScramSha256Authenticator(credentials);",
          "202:                 case \"default\":",
          "203:                     return new DefaultAuthenticator(credentials);",
          "204:                 default:",
          "205:                     throw new Exception(\"Invalid authenticator type.\");",
          "206:             }",
          "207:         }",
          "208:     }",
          "210:     internal static class ConnectionInitializerReflector",
          "211:     {",
          "212:         public static BsonDocument CreateInitialIsMasterCommand(",
          "213:             this ConnectionInitializer initializer,",
          "214:             IReadOnlyList<IAuthenticator> authenticators) =>",
          "215:                 (BsonDocument)Reflector.Invoke(initializer, nameof(CreateInitialIsMasterCommand), authenticators);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97fe954c36d45c152e3b8db0f87ecf0912a2569a",
      "candidate_info": {
        "commit_hash": "97fe954c36d45c152e3b8db0f87ecf0912a2569a",
        "repo": "mongodb/mongo-csharp-driver",
        "commit_url": "https://github.com/mongodb/mongo-csharp-driver/commit/97fe954c36d45c152e3b8db0f87ecf0912a2569a",
        "files": [
          "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs"
        ],
        "message": "CSHARP-3521: Redact security sensitive commands and replies.",
        "before_after_code_files": [
          "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
          "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
            "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
            "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs"
          ],
          "candidate": [
            "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
            "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
            "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs||src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs": [
          "File: src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs -> src/MongoDB.Driver.Core/Core/Connections/CommandEventHelper.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: using System;",
          "17: using System.Collections.Concurrent;",
          "18: using System.Collections.Generic;",
          "20: using System.Diagnostics;",
          "21: using System.IO;",
          "22: using System.Linq;",
          "",
          "[Removed Lines]",
          "19: using System.Collections.ObjectModel;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:                 var commandName = command.GetElement(0).Name;",
          "272:                 var databaseName = command[\"$db\"].AsString;",
          "273:                 var databaseNamespace = new DatabaseNamespace(databaseName);",
          "275:                 {",
          "276:                     command = new BsonDocument();",
          "277:                 }",
          "",
          "[Removed Lines]",
          "274:                 if (ShouldRedactMessage(commandName, command))",
          "",
          "[Added Lines]",
          "273:                 var shouldRedactCommand = ShouldRedactCommand(command);",
          "274:                 if (shouldRedactCommand)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:                         OperationId = operationId,",
          "299:                         Stopwatch = stopwatch,",
          "300:                         QueryNamespace = new CollectionNamespace(databaseNamespace, \"$cmd\"),",
          "302:                     });",
          "303:                 }",
          "304:             }",
          "",
          "[Removed Lines]",
          "301:                         ExpectedResponseType = decodedMessage.MoreToCome ? ExpectedResponseType.None : ExpectedResponseType.Command",
          "",
          "[Added Lines]",
          "301:                         ExpectedResponseType = decodedMessage.MoreToCome ? ExpectedResponseType.None : ExpectedResponseType.Command,",
          "302:                         ShouldRedactReply = shouldRedactCommand",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "318:                 return;",
          "319:             }",
          "322:             {",
          "323:                 reply = new BsonDocument();",
          "324:             }",
          "",
          "[Removed Lines]",
          "321:             if (ShouldRedactMessage(state.CommandName, reply))",
          "",
          "[Added Lines]",
          "322:             if (state.ShouldRedactReply)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:                 var isCommand = IsCommand(decodedMessage.CollectionNamespace);",
          "590:                 string commandName;",
          "591:                 BsonDocument command;",
          "592:                 if (isCommand)",
          "593:                 {",
          "594:                     command = decodedMessage.Query;",
          "595:                     var firstElement = command.GetElement(0);",
          "596:                     commandName = firstElement.Name;",
          "598:                     {",
          "599:                         command = new BsonDocument();",
          "600:                     }",
          "",
          "[Removed Lines]",
          "597:                     if (ShouldRedactMessage(commandName, command))",
          "",
          "[Added Lines]",
          "593:                 var shouldRedactCommand = false;",
          "599:                     shouldRedactCommand = ShouldRedactCommand(command);",
          "600:                     if (shouldRedactCommand)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "631:                         OperationId = operationId,",
          "632:                         Stopwatch = stopwatch,",
          "633:                         QueryNamespace = decodedMessage.CollectionNamespace,",
          "635:                     });",
          "636:                 }",
          "637:             }",
          "",
          "[Removed Lines]",
          "634:                         ExpectedResponseType = isCommand ? ExpectedResponseType.Command : ExpectedResponseType.Query",
          "",
          "[Added Lines]",
          "637:                         ExpectedResponseType = isCommand ? ExpectedResponseType.Command : ExpectedResponseType.Query,",
          "638:                         ShouldRedactReply = shouldRedactCommand",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "675:                     (state.ExpectedResponseType != ExpectedResponseType.Query && replyMessage.Documents.Count == 0))",
          "676:                 {",
          "677:                     var queryFailureDocument = replyMessage.QueryFailureDocument;",
          "679:                     {",
          "680:                         queryFailureDocument = new BsonDocument();",
          "681:                     }",
          "",
          "[Removed Lines]",
          "678:                     if (ShouldRedactMessage(state.CommandName, queryFailureDocument))",
          "",
          "[Added Lines]",
          "682:                     if (state.ShouldRedactReply)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "730:                 return;",
          "731:             }",
          "734:             {",
          "735:                 reply = new BsonDocument();",
          "736:             }",
          "",
          "[Removed Lines]",
          "733:             if (ShouldRedactMessage(state.CommandName, reply))",
          "",
          "[Added Lines]",
          "737:             if (state.ShouldRedactReply)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1088:             return collectionNamespace.Equals(collectionNamespace.DatabaseNamespace.CommandCollection);",
          "1089:         }",
          "1092:         {",
          "1093:             switch (commandName.ToLowerInvariant())",
          "1094:             {",
          "1095:                 case \"authenticate\":",
          "1098:                 case \"getnonce\":",
          "1101:                 case \"copydbgetnonce\":",
          "1102:                 case \"copydbsaslstart\":",
          "1103:                 case \"copydb\":",
          "1104:                     return true;",
          "1109:                 default:",
          "1110:                     return false;",
          "",
          "[Removed Lines]",
          "1091:         private static bool ShouldRedactMessage(string commandName, BsonDocument command)",
          "1096:                 case \"saslStart\":",
          "1097:                 case \"saslContinue\":",
          "1099:                 case \"createUser\":",
          "1100:                 case \"updateUser\":",
          "1106:                 case \"isMaster\":",
          "1107:                     return command.Contains(\"speculativeAuthenticate\");",
          "",
          "[Added Lines]",
          "1095:         private static bool ShouldRedactCommand(BsonDocument command)",
          "1097:             var commandName = command.GetElement(0).Name;",
          "1102:                 case \"saslstart\":",
          "1103:                 case \"saslcontinue\":",
          "1105:                 case \"createuser\":",
          "1106:                 case \"updateuser\":",
          "1112:                 case \"ismaster\":",
          "1113:                     return command.Names.Any(n => n.ToLowerInvariant() == \"speculativeauthenticate\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1129:             public ExpectedResponseType ExpectedResponseType;",
          "1130:             public BsonDocument NoResponseResponse;",
          "1131:             public BsonValue UpsertedId;",
          "1132:         }",
          "1133:     }",
          "1134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1138:             public bool ShouldRedactReply;",
          "",
          "---------------"
        ],
        "tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs": [
          "File: tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Connections/BinaryConnection_CommandEventTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:         public static IEnumerable<object[]> GetPotentiallyRedactedCommandTestCases()",
          "52:         {",
          "54:             {",
          "65:             };",
          "67:         }",
          "68:         public BinaryConnection_CommandEventTests()",
          "69:         {",
          "70:             _capturedEvents = new EventCapturer()",
          "",
          "[Removed Lines]",
          "53:             var potentiallyRedactedCommands = new[]",
          "55:                 \"authenticate\",",
          "56:                 \"saslStart\",",
          "57:                 \"saslContinue\",",
          "58:                 \"getnonce\",",
          "59:                 \"createUser\",",
          "60:                 \"updateUser\",",
          "61:                 \"copydbgetnonce\",",
          "62:                 \"copydbsaslstart\",",
          "63:                 \"copydb\",",
          "64:                 \"isMaster\",",
          "66:             return potentiallyRedactedCommands.Select(c => new object[] { c });",
          "",
          "[Added Lines]",
          "53:             return new object[][]",
          "56:                 new object[] { \"{ xyz : 1 }\", false },",
          "57:                 new object[] { \"{ authenticate : 1 }\", true },",
          "58:                 new object[] { \"{ saslStart : 1 }\", true },",
          "59:                 new object[] { \"{ saslContinue : 1 }\", true },",
          "60:                 new object[] { \"{ getnonce : 1 }\", true },",
          "61:                 new object[] { \"{ createUser : 1 }\", true },",
          "62:                 new object[] { \"{ updateUser : 1 }\", true },",
          "63:                 new object[] { \"{ copydbgetnonce : 1 }\", true },",
          "64:                 new object[] { \"{ copydbsaslstart : 1 }\", true },",
          "65:                 new object[] { \"{ copydb : 1 }\", true },",
          "66:                 new object[] { \"{ authenticate : 1 }\", true },",
          "67:                 new object[] { \"{ isMaster : 1 }\", false },",
          "68:                 new object[] { \"{ isMaster : 1, speculativeAuthenticate : { } }\", true },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         [Theory]",
          "146:         [MemberData(nameof(GetPotentiallyRedactedCommandTestCases))]",
          "148:         {",
          "152:             var reply = BsonDocument.Parse(\"{ ok: 1, extra: true }\");",
          "155:             var requestMessage = MessageHelper.BuildCommand(",
          "156:                 command,",
          "",
          "[Removed Lines]",
          "147:         public void Should_process_a_redacted_command(string commandName)",
          "149:             var command = BsonDocument.Parse($\"{{ {commandName}: 1, extra: true }}\");",
          "150:             command = ModifyMessageToTriggerConditionToRedact(commandName, command);",
          "153:             reply = ModifyMessageToTriggerConditionToRedact(commandName, reply);",
          "",
          "[Added Lines]",
          "151:         public void Should_process_a_redacted_command(string commandJson, bool shouldBeRedacted)",
          "153:             var command = BsonDocument.Parse(commandJson);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:                 responseTo: requestMessage.RequestId);",
          "164:             ReceiveMessages(replyMessage);",
          "172:             var commandStartedEvent = (CommandStartedEvent)_capturedEvents.Next();",
          "173:             var commandSucceededEvent = (CommandSucceededEvent)_capturedEvents.Next();",
          "175:             commandStartedEvent.CommandName.Should().Be(command.GetElement(0).Name);",
          "177:             commandStartedEvent.ConnectionId.Should().Be(_subject.ConnectionId);",
          "178:             commandStartedEvent.DatabaseNamespace.Should().Be(MessageHelper.DefaultDatabaseNamespace);",
          "179:             commandStartedEvent.OperationId.Should().Be(EventContext.OperationId);",
          "",
          "[Removed Lines]",
          "167:             var commandStartedCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, command);",
          "168:             var commandSucceededCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, replyMessage.Documents[0]);",
          "169:             var commandStartedCommandExpectedElementCount = commandStartedCommandShouldBeRedacted ? 0 : command.ElementCount;",
          "170:             var commandSucceededCommandExpectedElementCount = commandSucceededCommandShouldBeRedacted ? 0 : reply.ElementCount;",
          "176:             commandStartedEvent.Command.ElementCount.Should().Be(commandStartedCommandExpectedElementCount);",
          "",
          "[Added Lines]",
          "171:             commandStartedEvent.Command.Should().Be(shouldBeRedacted ? new BsonDocument() : command);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:             commandSucceededEvent.ConnectionId.Should().Be(commandStartedEvent.ConnectionId);",
          "184:             commandSucceededEvent.Duration.Should().BeGreaterThan(TimeSpan.Zero);",
          "185:             commandSucceededEvent.OperationId.Should().Be(commandStartedEvent.OperationId);",
          "187:             commandSucceededEvent.RequestId.Should().Be(commandStartedEvent.RequestId);",
          "188:         }",
          "",
          "[Removed Lines]",
          "186:             commandSucceededEvent.Reply.ElementCount.Should().Be(commandSucceededCommandExpectedElementCount);",
          "",
          "[Added Lines]",
          "181:             commandSucceededEvent.Reply.Should().Be(shouldBeRedacted ? new BsonDocument() : reply);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:         [Theory]",
          "226:         [MemberData(nameof(GetPotentiallyRedactedCommandTestCases))]",
          "228:         {",
          "232:             var reply = BsonDocument.Parse(\"{ ok: 0, extra: true }\");",
          "235:             var requestMessage = MessageHelper.BuildCommand(",
          "236:                 command,",
          "",
          "[Removed Lines]",
          "227:         public void Should_process_a_redacted_failed_command(string commandName)",
          "229:             var command = BsonDocument.Parse($\"{{ {commandName}: 1, extra: true }}\");",
          "230:             command = ModifyMessageToTriggerConditionToRedact(commandName, command);",
          "233:             reply = ModifyMessageToTriggerConditionToRedact(commandName, reply);",
          "",
          "[Added Lines]",
          "222:         public void Should_process_a_redacted_failed_command(string commandJson, bool shouldBeRedacted)",
          "224:             var command = BsonDocument.Parse(commandJson);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:                 responseTo: requestMessage.RequestId);",
          "244:             ReceiveMessages(replyMessage);",
          "251:             var commandStartedEvent = (CommandStartedEvent)_capturedEvents.Next();",
          "252:             var commandFailedEvent = (CommandFailedEvent)_capturedEvents.Next();",
          "254:             commandStartedEvent.CommandName.Should().Be(command.GetElement(0).Name);",
          "256:             commandStartedEvent.ConnectionId.Should().Be(_subject.ConnectionId);",
          "257:             commandStartedEvent.DatabaseNamespace.Should().Be(MessageHelper.DefaultDatabaseNamespace);",
          "258:             commandStartedEvent.OperationId.Should().Be(EventContext.OperationId);",
          "",
          "[Removed Lines]",
          "246:             var commandStartedCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, command);",
          "247:             var commandSucceededCommandShouldBeRedacted = CommandEventHelperReflector.ShouldRedactMessage(commandName, replyMessage.Documents[0]);",
          "248:             var commandStartedCommandExpectedElementCount = commandStartedCommandShouldBeRedacted ? 0 : command.ElementCount;",
          "249:             var commandSucceededCommandExpectedElementCount = commandSucceededCommandShouldBeRedacted ? 0 : reply.ElementCount;",
          "255:             commandStartedEvent.Command.ElementCount.Should().Be(commandStartedCommandExpectedElementCount);",
          "",
          "[Added Lines]",
          "242:             commandStartedEvent.Command.Should().Be(shouldBeRedacted ? new BsonDocument() : command);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "265:             commandFailedEvent.RequestId.Should().Be(commandStartedEvent.RequestId);",
          "266:             commandFailedEvent.Failure.Should().BeOfType<MongoCommandException>();",
          "267:             var exception = (MongoCommandException)commandFailedEvent.Failure;",
          "269:         }",
          "271:         [Fact]",
          "",
          "[Removed Lines]",
          "268:             exception.Result.ElementCount.Should().Be(commandSucceededCommandExpectedElementCount);",
          "",
          "[Added Lines]",
          "255:             exception.Result.Should().Be(shouldBeRedacted ? new BsonDocument() : reply);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "982:                 _subject.ReceiveMessageAsync(message.ResponseTo, encoderSelector, _messageEncoderSettings, CancellationToken.None).Wait();",
          "983:             }",
          "984:         }",
          "1004:     }",
          "1005: }",
          "",
          "[Removed Lines]",
          "986:         private static BsonDocument ModifyMessageToTriggerConditionToRedact(string commandName, BsonDocument command)",
          "987:         {",
          "988:             switch (commandName)",
          "989:             {",
          "990:                 case \"isMaster\":",
          "991:                     command.Add(\"speculativeAuthenticate\", new BsonDocument(\"db\", \"authSource\"));",
          "992:                     break;",
          "993:             }",
          "995:             return command;",
          "996:         }",
          "997:     }",
          "999:     internal static class CommandEventHelperReflector",
          "1000:     {",
          "1001:         public static bool ShouldRedactMessage(string commandName, BsonDocument command) =>",
          "1002:             (bool)Reflector.InvokeStatic(typeof(CommandEventHelper), nameof(ShouldRedactMessage), commandName, command);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs||tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs": [
          "File: tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs -> tests/MongoDB.Driver.Core.Tests/Core/Connections/CommandEventHelperTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeff/* Copyright 2010-present MongoDB Inc.",
          "16: using FluentAssertions;",
          "17: using MongoDB.Bson;",
          "18: using MongoDB.Bson.TestHelpers;",
          "19: using Xunit;",
          "21: namespace MongoDB.Driver.Core.Connections",
          "22: {",
          "23:     public class CommandEventHelperTests",
          "24:     {",
          "25:         [Theory]",
          "26:         [InlineData(\"{ xyz : 1 }\", false)]",
          "27:         [InlineData(\"{ aUTHENTICATE: 1 }\", true)]",
          "28:         [InlineData(\"{ sASLSTART : 1 }\", true)]",
          "29:         [InlineData(\"{ sASLCONTINUE : 1 }\", true)]",
          "30:         [InlineData(\"{ gETNONCE : 1 }\", true)]",
          "31:         [InlineData(\"{ cREATEUSER : 1 }\", true)]",
          "32:         [InlineData(\"{ uPDATEUSER : 1, }\", true)]",
          "33:         [InlineData(\"{ cOPYDBGETNONCE : 1 }\", true)]",
          "34:         [InlineData(\"{ cOPYDBSASLSTART : 1 }\", true)]",
          "35:         [InlineData(\"{ cOPYDB : 1 }\", true)]",
          "36:         [InlineData(\"{ iSMASTER : 1 }\", false)]",
          "37:         [InlineData(\"{ iSMASTER : 1, sPECULATIVEAUTHENTICATE : null }\", true)]",
          "38:         public void ShouldRedactCommand_should_return_expected_result(string commandJson, bool expectedResult)",
          "39:         {",
          "40:             var command = BsonDocument.Parse(commandJson);",
          "42:             var result = CommandEventHelperReflector.ShouldRedactCommand(command);",
          "44:             result.Should().Be(expectedResult);",
          "45:         }",
          "46:     }",
          "48:     public static class CommandEventHelperReflector",
          "49:     {",
          "50:         public static bool ShouldRedactCommand(BsonDocument command) =>",
          "51:             (bool)Reflector.InvokeStatic(typeof(CommandEventHelper), nameof(ShouldRedactCommand), command);",
          "52:     }",
          "53: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}