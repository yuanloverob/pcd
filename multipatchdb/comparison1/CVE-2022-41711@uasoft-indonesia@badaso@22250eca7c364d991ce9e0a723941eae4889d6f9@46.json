{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3c7212f07bc86ed5c20ae9ddfaf0ac15907fa14",
      "candidate_info": {
        "commit_hash": "e3c7212f07bc86ed5c20ae9ddfaf0ac15907fa14",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/e3c7212f07bc86ed5c20ae9ddfaf0ac15907fa14",
        "files": [
          "src/Controllers/BadasoTableController.php",
          "src/Helpers/GetData.php",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "unit test",
        "before_after_code_files": [
          "src/Controllers/BadasoTableController.php||src/Controllers/BadasoTableController.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoTableController.php||src/Controllers/BadasoTableController.php": [
          "File: src/Controllers/BadasoTableController.php -> src/Controllers/BadasoTableController.php"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             foreach ($class_methods as $class_method) {",
          "108:                 if ($class_method->class == $class->name) {",
          "109:                     try {",
          "110:                         $record->{$class_method->name} = json_decode(json_encode($row->{$class_method->name}));",
          "111:                     } catch (Exception $e) {",
          "113:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:                         dd($class_method->name, $class_methods, $row);",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Tests\\Feature;",
          "5: use Illuminate\\Database\\Schema\\Blueprint;",
          "6: use Illuminate\\Support\\Facades\\Schema;",
          "7: use Tests\\TestCase;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: use Illuminate\\Support\\Facades\\DB;",
          "7: use Illuminate\\Support\\Facades\\Hash;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     private $KEY_LIST_CREATE_TABLES = 'LIST_CREATE_TABLES';",
          "14:     private $KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG = \"DATA_TABLE_CRUD_MANAGEMENT_LOG\";",
          "15:     private $KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT = \"DATA_RESPONSE_ADD_CRUD_MANAGEMENT\";",
          "16:     private $TABLE_TEST_PREFIX = \"test_table_\";",
          "18:     private function getFields(): array",
          "19:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:     private $KEY_DATA_RESPONSE_READ_TABLE_ENTITY = \"KEY_DATA_RESPONSE_READ_TABLE_ENTITY\";",
          "19:     private $KEY_DATA_ADD_ENTITY = 'KEY_DATA_ADD_ENTITY';",
          "21:     private $MAXIMAL_CREATE_ENTITY = 3;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "22:                 [",
          "23:                     'badaso_type' => 'text',",
          "24:                     'schema_type' => 'text',",
          "25:                 ],",
          "26:                 [",
          "27:                     'badaso_type' => 'email',",
          "28:                     'schema_type' => 'string',",
          "29:                 ],",
          "30:                 [",
          "31:                     'badaso_type' => 'password',",
          "32:                     'schema_type' => 'string',",
          "33:                 ],",
          "34:                 [",
          "35:                     'badaso_type' => 'textarea',",
          "36:                     'schema_type' => 'text',",
          "37:                 ],",
          "38:                 [",
          "39:                     'badaso_type' => 'checkbox',",
          "40:                     'schema_type' => 'string',",
          "41:                 ],",
          "42:                 [",
          "43:                     'badaso_type' => 'search',",
          "44:                     'schema_type' => 'string',",
          "45:                 ],",
          "46:                 [",
          "47:                     'badaso_type' => 'number',",
          "48:                     'schema_type' => 'integer',",
          "49:                 ],",
          "50:                 [",
          "51:                     'badaso_type' => 'url',",
          "52:                     'schema_type' => 'string',",
          "53:                 ],",
          "54:                 [",
          "55:                     'badaso_type' => 'time',",
          "56:                     'schema_type' => 'time',",
          "57:                 ],",
          "58:                 [",
          "59:                     'badaso_type' => 'date',",
          "60:                     'schema_type' => 'string',",
          "61:                 ],",
          "62:                 [",
          "63:                     'badaso_type' => 'datetime',",
          "64:                     'schema_type' => 'datetime',",
          "65:                 ],",
          "66:                 [",
          "67:                     'badaso_type' => 'select',",
          "68:                     'schema_type' => 'string',",
          "69:                 ],",
          "70:                 [",
          "71:                     'badaso_type' => 'radio',",
          "72:                     'schema_type' => 'string',",
          "73:                 ],",
          "74:                 [",
          "75:                     'badaso_type' => 'switch',",
          "76:                     'schema_type' => 'string',",
          "77:                 ],",
          "78:                 [",
          "79:                     'badaso_type' => 'slider',",
          "80:                     'schema_type' => 'string',",
          "81:                 ],",
          "82:                 [",
          "83:                     'badaso_type' => 'editor',",
          "84:                     'schema_type' => 'text',",
          "85:                 ],",
          "86:                 [",
          "87:                     'badaso_type' => 'tags',",
          "88:                     'schema_type' => 'string',",
          "89:                 ],",
          "90:                 [",
          "91:                     'badaso_type' => 'code',",
          "92:                     'schema_type' => 'string',",
          "93:                 ],",
          "94:                 [",
          "95:                     'badaso_type' => 'hidden',",
          "96:                     'schema_type' => 'string',",
          "97:                 ],",
          "98:                 [",
          "99:                     'badaso_type' => 'relation',",
          "100:                     'schema_type' => 'bigInteger',",
          "101:                 ],",
          "102:                 [",
          "103:                     'badaso_type' => 'color_picker',",
          "104:                     'schema_type' => 'string',",
          "105:                 ],",
          "106:                 [",
          "107:                     'badaso_type' => 'upload_image',",
          "108:                     'schema_type' => 'string',",
          "109:                 ],",
          "110:                 [",
          "111:                     'badaso_type' => 'select_multiple',",
          "112:                     'schema_type' => 'string',",
          "113:                 ],",
          "114:                 [",
          "115:                     'badaso_type' => 'upload_file',",
          "116:                     'schema_type' => 'string',",
          "117:                 ],",
          "118:                 [",
          "119:                     'badaso_type' => 'upload_image_multiple',",
          "120:                     'schema_type' => 'string',",
          "121:                 ],",
          "122:                 [",
          "123:                     'badaso_type' => 'upload_file_multiple',",
          "124:                     'schema_type' => 'string',",
          "125:                 ],",
          "126:             ];",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:                     'details' => json_encode((object) []),",
          "31:                     'example' => 'text',",
          "32:                     'example_update' => 'text.update',",
          "37:                     'details' => json_encode((object) []),",
          "38:                     'example' => 'email@example.com',",
          "39:                     'example_update' => 'update.email@example.com'",
          "44:                     'details' => json_encode((object) []),",
          "45:                     'example' => \"password\",",
          "46:                     'example_update' => \"password.update\",",
          "51:                     'details' => json_encode((object) []),",
          "52:                     'example' => 'textarea',",
          "53:                     'example_update' => 'textarea.update',",
          "58:                     'details' => json_encode([",
          "59:                         'items' => [",
          "60:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "61:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "62:                         ]",
          "63:                     ]),",
          "64:                     'example' => ['example_1'],",
          "65:                     'example_update' => ['example_2'],",
          "70:                     'details' => json_encode((object) []),",
          "71:                     'example' => 'search',",
          "72:                     'example_update' => 'search.update',",
          "77:                     'details' => json_encode((object) []),",
          "78:                     'example' => 1,",
          "79:                     'example_update' => 2,",
          "84:                     'details' => json_encode((object) []),",
          "85:                     'example' => 'https://badaso-docs.uatech.co.id',",
          "86:                     'example_update' => 'https://badaso.uatech.co.id',",
          "91:                     'details' => json_encode((object) []),",
          "92:                     'example' => \"2022-01-27T04:37:18.327Z\",",
          "93:                     'example_update' => \"2023-01-27T04:37:18.327Z\",",
          "98:                     'details' => json_encode((object) []),",
          "99:                     'example' => \"2022-01-27T04:37:18.327Z\",",
          "100:                     'example_update' => \"2023-01-27T04:37:18.327Z\",",
          "105:                     'details' => json_encode((object) []),",
          "106:                     'example' => \"2022-01-27T04:37:18.327Z\",",
          "107:                     'example_update' => \"2023-01-27T04:37:18.327Z\",",
          "112:                     'details' => json_encode([",
          "113:                         'items' => [",
          "114:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "115:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "116:                         ]",
          "117:                     ]),",
          "118:                     'example' => 'example_1',",
          "119:                     'example_update' => 'example_2',",
          "124:                     'details' => json_encode([",
          "125:                         'items' => [",
          "126:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "127:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "128:                         ]",
          "129:                     ]),",
          "130:                     'example' => 'example_1',",
          "131:                     'example_update' => 'example_2',",
          "136:                     'details' => json_encode((object) []),",
          "137:                     'example' => rand(0, 1),",
          "138:                     'example_update' => rand(0, 1),",
          "143:                     'details' => json_encode((object) []),",
          "144:                     'example' => rand(1, 50),",
          "145:                     'example_update' => rand(50, 100),",
          "150:                     'details' => json_encode((object) []),",
          "151:                     'example' => 'editor',",
          "152:                     'example_update' => 'editor.update',",
          "157:                     'details' => json_encode((object) []),",
          "158:                     'example' => join(\",\", [\"badaso\", \"test\", \"crud\", \"management\"]),",
          "159:                     'example_update' => join(\",\", [\"badaso\", \"test\", \"crud\", \"management\", \"update\"]),",
          "164:                     'details' => json_encode((object) []),",
          "165:                     'example' => 'code',",
          "166:                     'example_update' => 'code.update'",
          "171:                     'details' => json_encode((object) []),",
          "172:                     'example' => 'hidden',",
          "173:                     'example_update' => 'hidden.update',",
          "178:                     'details' => json_encode((object) []),",
          "179:                     'example' => null,",
          "184:                     'details' => json_encode((object) []),",
          "185:                     'example' => '#000000',",
          "186:                     'example_update' => '#FFFFFF',",
          "191:                     'details' => json_encode((object) []),",
          "192:                     'example' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "193:                     'example_update' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png'",
          "198:                     'details' => json_encode([",
          "199:                         'items' => [",
          "200:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "201:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "202:                             ['label' => 'example_3', 'value' => 'example_3'],",
          "203:                         ]",
          "204:                     ]),",
          "205:                     'example' => [",
          "206:                         'example_1',",
          "207:                         'example_2'",
          "208:                     ],",
          "209:                     'example_update' => [",
          "210:                         'example_2',",
          "211:                         'example_3'",
          "212:                     ],",
          "217:                     'details' => json_encode((object) []),",
          "218:                     'example' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "219:                     'example_update' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "224:                     'details' => json_encode((object) []),",
          "225:                     'example' => [",
          "226:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "227:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "228:                     ],",
          "229:                     'example_update' => [",
          "230:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "231:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "232:                     ],",
          "237:                     'details' => json_encode((object) []),",
          "238:                     'example' => [",
          "239:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "240:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "241:                     ],",
          "242:                     'example_update' => [",
          "243:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "244:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "245:                     ],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "197:     {",
          "198:         $table_names = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "199:         $const_fields = $this->getFields();",
          "202:         $data_types = DataType::whereIn('slug', $table_names)->get();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:         $const_fillable = collect($const_fields)->map(function ($fillable) {",
          "322:             $field = $fillable['badaso_type'];",
          "323:             return \"\\\"$field\\\"\";",
          "324:         })->toArray();",
          "325:         $const_fillable[] = '\"deleted_at\"';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:                     \"required\" => rand(0, 1),",
          "217:                     \"browse\" => rand(0, 1),",
          "218:                     \"read\" => rand(0, 1),",
          "221:                     \"delete\" => rand(0, 1),",
          "222:                     \"details\" => json_encode((object) []),",
          "223:                     \"order\" => 1,",
          "",
          "[Removed Lines]",
          "219:                     \"edit\" => rand(0, 1),",
          "220:                     \"add\" => rand(0, 1),",
          "",
          "[Added Lines]",
          "345:                     \"edit\" => 0,",
          "346:                     \"add\" => 0,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230:                     \"required\" => rand(0, 1),",
          "231:                     \"browse\" => rand(0, 1),",
          "232:                     \"read\" => rand(0, 1),",
          "235:                     \"delete\" => rand(0, 1),",
          "236:                     \"details\" => json_encode((object) []),",
          "237:                     \"order\" => 1,",
          "",
          "[Removed Lines]",
          "233:                     \"edit\" => rand(0, 1),",
          "234:                     \"add\" => rand(0, 1),",
          "",
          "[Added Lines]",
          "359:                     \"edit\" => 0,",
          "360:                     \"add\" => 0,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "244:                     \"required\" => rand(0, 1),",
          "245:                     \"browse\" => rand(0, 1),",
          "246:                     \"read\" => rand(0, 1),",
          "249:                     \"delete\" => rand(0, 1),",
          "250:                     \"details\" => json_encode((object) []),",
          "251:                     \"order\" => 1,",
          "",
          "[Removed Lines]",
          "247:                     \"edit\" => rand(0, 1),",
          "248:                     \"add\" => rand(0, 1),",
          "",
          "[Added Lines]",
          "373:                     \"edit\" => 0,",
          "374:                     \"add\" => 0,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "258:                     \"required\" => rand(0, 1),",
          "259:                     \"browse\" => rand(0, 1),",
          "260:                     \"read\" => rand(0, 1),",
          "263:                     \"delete\" => rand(0, 1),",
          "264:                     \"details\" => json_encode((object) []),",
          "265:                     \"order\" => 1,",
          "266:                     \"setRelation\" => false",
          "267:                 ]",
          "268:             ];",
          "270:                 if ($index_table_name == 0 && $badaso_type == 'relation') continue;",
          "272:                 $field_name = ucwords(str_replace([\"_\"], \" \", $badaso_type));",
          "",
          "[Removed Lines]",
          "261:                     \"edit\" => rand(0, 1),",
          "262:                     \"add\" => rand(0, 1),",
          "269:             foreach ($const_fields as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type]) {",
          "",
          "[Added Lines]",
          "387:                     \"edit\" => 0,",
          "388:                     \"add\" => 0,",
          "395:             foreach ($const_fields as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type, 'details' => $details]) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:                     \"edit\" => rand(0, 1),",
          "281:                     \"add\" => rand(0, 1),",
          "282:                     \"delete\" => rand(0, 1),",
          "284:                     \"order\" => 1,",
          "285:                     \"setRelation\" => false",
          "286:                 ];",
          "288:                 if ($badaso_type == 'relation') {",
          "289:                     $destination_field = $const_fields[rand(0, count($const_fields) - 1)];",
          "290:                     $row['relationType'] = ['belongs_to', 'has_one', 'has_many'][rand(0, 2)];",
          "291:                     $row['relationType'] = true;",
          "292:                     $row['destinationTable'] = $table_names[0];",
          "295:                 }",
          "297:                 $rows[] = $row;",
          "",
          "[Removed Lines]",
          "283:                     \"details\" => json_encode((object) []),",
          "293:                     $row['destinationTableColumn'] = $destination_field;",
          "294:                     $row['destinationTableDisplayColumn'] = $destination_field;",
          "",
          "[Added Lines]",
          "409:                     \"details\" => $details,",
          "418:                     if ($destination_field['badaso_type'] == 'relation') {",
          "419:                         $destination_field['badaso_type'] = \"id\";",
          "420:                     }",
          "425:                     $row['destinationTableColumn'] = $destination_field['badaso_type'];",
          "426:                     $row['destinationTableDisplayColumn'] = $destination_field['badaso_type'];",
          "427:                     $row['required'] = false;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "302:             $model_data = [];",
          "303:             if (rand(0, 1)) {",
          "305:                 $model_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name));",
          "306:                 $model_file_name = \"{$model_name}.php\";",
          "307:                 $model_body = <<<PHP",
          "308:                 <?php",
          "309:                 namespace App\\Models;",
          "311:                 use Illuminate\\Database\\Eloquent\\Model;",
          "312:                 class {$model_name} extends Model {",
          "314:                     protected \\$table = \"{$table_name}\" ;",
          "315:                 }",
          "316:                 PHP;",
          "317:                 $model_path = app_path(\"Models/$model_file_name\");",
          "",
          "[Removed Lines]",
          "310:                 use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;",
          "313:                     use HasFactory;",
          "",
          "[Added Lines]",
          "438:                 $fillable = join(\",\", $const_fillable);",
          "447:                     protected \\$fillable = [$fillable] ;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "396:         CallHelperTest::setCache($this->KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT, $data_response_add_crud_management);",
          "397:     }",
          "399:     public function testEditCrudManagement()",
          "400:     {",
          "401:         $data_table_crud_management_log = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532:     public function testReadCrudManagement()",
          "533:     {",
          "534:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "535:         $response_read_table_entities = [];",
          "536:         foreach ($data_table_crud_management_logs as $key => $data_table_crud_management_log) {",
          "537:             $request_body = $data_table_crud_management_log['request_body'];",
          "538:             $table = $request_body['name'];",
          "540:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "541:                 'table' => $table,",
          "542:             ]);",
          "543:             $response->assertSuccessful();",
          "545:             $response_read_table_entities[$table] = $response->json('data.crud.dataRows');",
          "546:         }",
          "548:         CallHelperTest::setCache($this->KEY_DATA_RESPONSE_READ_TABLE_ENTITY, $response_read_table_entities);",
          "549:     }",
          "551:     public function testAddEditEntityCrudManagement()",
          "552:     {",
          "554:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "555:         $first_table = $tables[0];",
          "557:         $response_read_table_entities = CallHelperTest::getCache($this->KEY_DATA_RESPONSE_READ_TABLE_ENTITY);",
          "558:         $fields = [];",
          "560:         foreach ($this->getFields() as $key => $value) {",
          "561:             $fields[$value['badaso_type']] = $value;",
          "562:         }",
          "564:         $data_add_entities = [];",
          "565:         foreach ($response_read_table_entities as $table => $entities) {",
          "567:             $entities = collect($entities)->filter(function ($entity) {",
          "568:                 return $entity['add'];",
          "569:             })->values();",
          "571:             $data_add_entities[$table] = [];",
          "572:             for ($index = 1; $index <= $this->MAXIMAL_CREATE_ENTITY; $index++) {",
          "574:                 $data = [];",
          "575:                 foreach ($entities as $key => $entity) {",
          "576:                     $field = $entity['field'];",
          "577:                     if (array_key_exists($field, $fields)) {",
          "578:                         if ($field == 'relation') {",
          "579:                             $relation_value = DB::table($first_table)->insertGetId([]);",
          "580:                             $data[$field] = $relation_value;",
          "581:                         } else {",
          "582:                             $data[$field] = $fields[$field]['example'];",
          "583:                         }",
          "584:                     }",
          "585:                 }",
          "586:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/add\"), [",
          "587:                     'data' => $data,",
          "588:                 ]);",
          "589:                 $response->assertSuccessful();",
          "592:                 $id = $response->json('data.id');",
          "593:                 $table_row = DB::table($table)->where('id', $id)->first();",
          "594:                 foreach ($data as $key => $value) {",
          "595:                     switch ($key) {",
          "596:                         case 'time':",
          "597:                             $z_removed = explode('.', $value)[0];",
          "598:                             $time = explode('T', $z_removed)[1];",
          "599:                             $value = $time;",
          "600:                             break;",
          "601:                         case 'date':",
          "602:                             $z_removed = explode('.', $value)[0];",
          "603:                             $date = explode('T', $z_removed)[0];",
          "604:                             $value = $date;",
          "605:                             break;",
          "606:                         case 'datetime':",
          "607:                             $z_removed = explode('.', $value)[0];",
          "608:                             $date_time = str_replace('T', ' ', $z_removed);",
          "609:                             $value = $date_time;",
          "610:                             break;",
          "611:                     }",
          "613:                     if (is_array($value)) {",
          "614:                         $this->assertSame($table_row->{$key}, join(\",\", $value));",
          "615:                     } else {",
          "616:                         if ('password' == $key) {",
          "617:                             $this->assertTrue(Hash::check($value, $table_row->{$key}));",
          "618:                         } else {",
          "619:                             $this->assertTrue($table_row->{$key} == $value);",
          "620:                         }",
          "621:                     }",
          "622:                 }",
          "625:                 $data = ['id' => $id];",
          "626:                 foreach ($entities as $key => $entity) {",
          "627:                     $field = $entity['field'];",
          "628:                     if (array_key_exists($field, $fields)) {",
          "629:                         if ($field == 'relation') {",
          "630:                             $relation_value = DB::table($first_table)->insertGetId([]);",
          "631:                             $data[$field] = $relation_value;",
          "632:                         } else {",
          "633:                             $data[$field] = $fields[$field]['example_update'];",
          "634:                         }",
          "635:                     }",
          "636:                 }",
          "637:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/edit\"), [",
          "638:                     'data' => $data,",
          "639:                 ]);",
          "640:                 $response->assertSuccessful();",
          "643:                 $data_add_entities[$table][] = $response->json('data');",
          "644:             }",
          "645:         }",
          "647:         CallHelperTest::setCache($this->KEY_DATA_ADD_ENTITY, $data_add_entities);",
          "648:     }",
          "650:     public function testReadDataEntityCrudManagement()",
          "651:     {",
          "652:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "653:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "654:             foreach ($data_add_entity as $index => $entity) {",
          "655:                 $id = $entity['id'];",
          "656:                 $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/read\"), [",
          "657:                     'id' => $id,",
          "658:                 ]);",
          "659:                 $response->assertSuccessful();",
          "660:             }",
          "661:         }",
          "662:     }",
          "664:     private function testBrowseDataEntityCrudManagement()",
          "665:     {",
          "666:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "667:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "668:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}\"), [",
          "669:                 'page' => 1,",
          "670:                 'limit' => 10",
          "671:             ]);",
          "672:             $response->assertSuccessful();",
          "673:         }",
          "674:     }",
          "676:     private function testGetAllDataEntityCrudManagement()",
          "677:     {",
          "678:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "679:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "680:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/all\"));",
          "681:             $response->assertSuccessful();",
          "682:         }",
          "683:     }",
          "685:     public function testSingleMultipleDeleteEntityCrudManagement()",
          "686:     {",
          "687:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "689:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "690:             $id = $data_add_entity[0]['id'];",
          "691:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/delete\"), [",
          "692:                 'slug' => $table,",
          "693:                 'data' => [",
          "694:                     [",
          "695:                         'field' => 'id',",
          "696:                         'value' => $id,",
          "697:                     ]",
          "698:                 ],",
          "699:             ]);",
          "700:             $response->assertSuccessful();",
          "703:             $table_row = DB::table($table)->where('id', $id)->first();",
          "704:             $this->assertTrue($table_row == null);",
          "707:             $ids = [];",
          "708:             foreach ($data_add_entity as $index => $entity) {",
          "709:                 if ($index > 0) {",
          "710:                     $ids[] = $entity['id'];",
          "711:                 }",
          "712:             }",
          "713:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/delete-multiple\"), [",
          "714:                 'slug' => $table,",
          "715:                 'data' => [",
          "716:                     [",
          "717:                         'field' => 'ids',",
          "718:                         'value' => join(\",\", $ids),",
          "719:                     ]",
          "720:                 ],",
          "721:             ]);",
          "722:             $response->assertSuccessful();",
          "725:             $table_row_count = DB::table($table)->whereId('id', $ids)->count();",
          "726:             $this->assertTrue($table_row_count == 0);",
          "727:         }",
          "728:     }",
          "730:     public function testReadTableEntityResultCrudManagement()",
          "731:     {",
          "732:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "734:         foreach ($tables as $key => $slug) {",
          "735:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/read'), [",
          "736:                 'table' => $slug,",
          "737:             ]);",
          "738:             $response->assertSuccessful();",
          "739:         }",
          "740:     }",
          "742:     public function testRelationDataBySlugEntityResultCrudManagement()",
          "743:     {",
          "744:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "745:         foreach ($tables as $key => $slug) {",
          "746:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/relation-data-by-slug'), [",
          "747:                 'slug' => $slug,",
          "748:             ]);",
          "750:             $response->assertSuccessful();",
          "751:         }",
          "752:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "503:         CallHelperTest::setCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG, $data_table_crud_management_log);",
          "504:     }",
          "507:     {",
          "516:             ]);",
          "517:             $response->assertSuccessful();",
          "518:         }",
          "519:     }",
          "",
          "[Removed Lines]",
          "506:     public function testReadCrudManagement()",
          "508:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "510:         foreach ($data_table_crud_management_logs as $key => $data_table_crud_management_log) {",
          "511:             $request_body = $data_table_crud_management_log['request_body'];",
          "512:             $name = $request_body['name'];",
          "514:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "515:                 'table' => $name,",
          "",
          "[Added Lines]",
          "861:     public function testReadTableResultAfterEditCrudManagement()",
          "863:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "864:         foreach ($tables as $key => $slug) {",
          "865:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/read'), [",
          "866:                 'table' => $slug,",
          "867:             ]);",
          "869:             $response->assertSuccessful();",
          "870:         }",
          "871:     }",
          "873:     public function testRelationDataBySlugResultAfterEditCrudManagement()",
          "874:     {",
          "875:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "876:         foreach ($tables as $key => $slug) {",
          "877:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/relation-data-by-slug'), [",
          "878:                 'slug' => $slug,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe16b530c0c03003d4cf6607392f41a50acf7f95",
      "candidate_info": {
        "commit_hash": "fe16b530c0c03003d4cf6607392f41a50acf7f95",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/fe16b530c0c03003d4cf6607392f41a50acf7f95",
        "files": [
          "src/resources/js/pages/crud-generated/browse.vue"
        ],
        "message": "fixed bug jspdf",
        "before_after_code_files": [
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:       <badaso-breadcrumb-hover full>",
          "5:         <template slot=\"action\">",
          "6:           <download-excel",
          "13:             <badaso-dropdown-item",
          "14:               icon=\"file_upload\"",
          "15:               v-if=\"$helper.isAllowedToModifyGeneratedCRUD('browse', dataType)\"",
          "",
          "[Removed Lines]",
          "7:               :data=\"records\"",
          "8:               :fields=\"fieldsForExcel\"",
          "9:               :worksheet=\"dataType.displayNameSingular\"",
          "10:               :name=\"dataType.displayNameSingular + '.xls'\"",
          "11:               class=\"crud-generated__excel-button\"",
          "12:             >",
          "",
          "[Added Lines]",
          "7:             :data=\"records\"",
          "8:             :fields=\"fieldsForExcel\"",
          "9:             :worksheet=\"dataType.displayNameSingular\"",
          "10:             :name=\"dataType.displayNameSingular + '.xls'\"",
          "11:             class=\"crud-generated__excel-button\"",
          "12:           >",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             :to=\"{ name: 'CrudGeneratedAdd' }\"",
          "30:             v-if=\"",
          "31:               isCanAdd &&",
          "33:             \"",
          "34:           >",
          "35:             {{ $t(\"action.add\") }}",
          "",
          "[Removed Lines]",
          "32:                 $helper.isAllowedToModifyGeneratedCRUD('add', dataType)",
          "",
          "[Added Lines]",
          "32:               $helper.isAllowedToModifyGeneratedCRUD('add', dataType)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:             :to=\"{ name: 'CrudGeneratedSort' }\"",
          "40:             v-if=\"",
          "41:               isCanSort &&",
          "43:             \"",
          "44:           >",
          "45:             {{ $t(\"action.sort\") }}",
          "",
          "[Removed Lines]",
          "42:                 $helper.isAllowedToModifyGeneratedCRUD('edit', dataType)",
          "",
          "[Added Lines]",
          "42:               $helper.isAllowedToModifyGeneratedCRUD('edit', dataType)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "48:             icon=\"delete_sweep\"",
          "49:             v-if=\"",
          "50:               selected.length > 0 &&",
          "52:             \"",
          "53:             @click.stop",
          "54:             @click=\"confirmDeleteMultiple\"",
          "",
          "[Removed Lines]",
          "51:                 $helper.isAllowedToModifyGeneratedCRUD('delete', dataType)",
          "",
          "[Added Lines]",
          "51:               $helper.isAllowedToModifyGeneratedCRUD('delete', dataType)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "79:             @click.stop",
          "80:             :to=\"{ name: 'CrudGeneratedBrowseBin' }\"",
          "81:           >",
          "83:           </badaso-dropdown-item>",
          "84:         </template>",
          "85:       </badaso-breadcrumb-hover>",
          "",
          "[Removed Lines]",
          "82:             {{$t(\"action.showTrash\")}}",
          "",
          "[Added Lines]",
          "82:             {{ $t(\"action.showTrash\") }}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "138:                   <vs-tr",
          "139:                     v-if=\"",
          "140:                       !idsOfflineDeleteRecord.includes(record.id.toString()) ||",
          "142:                     \"",
          "143:                     :data=\"record\"",
          "144:                     :key=\"index\"",
          "",
          "[Removed Lines]",
          "141:                         !isOnline",
          "",
          "[Added Lines]",
          "141:                       !isOnline",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "161:                     >",
          "162:                       <img",
          "163:                         v-if=\"dataRow.type === 'upload_image'\"",
          "167:                         width=\"100%\"",
          "168:                         alt=\"\"",
          "169:                       />",
          "",
          "[Removed Lines]",
          "164:                         :src=\"",
          "165:                           `${ record[$caseConvert.stringSnakeToCamel(dataRow.field)] }`",
          "166:                         \"",
          "",
          "[Added Lines]",
          "164:                         :src=\"`${",
          "165:                           record[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "166:                         }`\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:                             ]",
          "179:                           )\"",
          "180:                           :key=\"indexImage\"",
          "182:                           width=\"100%\"",
          "183:                           alt=\"\"",
          "184:                           class=\"crud-generated__item--image\"",
          "",
          "[Removed Lines]",
          "181:                           :src=\"`${ image }`\"",
          "",
          "[Added Lines]",
          "181:                           :src=\"`${image}`\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "202:                       >",
          "203:                       <a",
          "204:                         v-else-if=\"dataRow.type === 'upload_file'\"",
          "208:                         target=\"_blank\"",
          "209:                         >{{",
          "210:                           record[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "",
          "[Removed Lines]",
          "205:                         :href=\"",
          "206:                           `${record[$caseConvert.stringSnakeToCamel(dataRow.field)]}`",
          "207:                         \"",
          "",
          "[Added Lines]",
          "205:                         :href=\"`${",
          "206:                           record[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "207:                         }`\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "222:                           )\"",
          "223:                           :key=\"indexFile\"",
          "224:                         >",
          "230:                         </p>",
          "231:                       </div>",
          "232:                       <p",
          "",
          "[Removed Lines]",
          "225:                           <a",
          "226:                             :href=\"`${file}`\"",
          "227:                             target=\"_blank\"",
          "228:                             >{{ file }}</a",
          "229:                           >",
          "",
          "[Added Lines]",
          "225:                           <a :href=\"`${file}`\" target=\"_blank\">{{ file }}</a>",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "246:                       <div",
          "247:                         v-else-if=\"",
          "248:                           dataRow.type === 'select_multiple' ||",
          "250:                         \"",
          "251:                         class=\"crud-generated__item--select-multiple\"",
          "252:                       >",
          "",
          "[Removed Lines]",
          "249:                             dataRow.type === 'checkbox'",
          "",
          "[Added Lines]",
          "245:                           dataRow.type === 'checkbox'",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "263:                       </div>",
          "264:                       <div v-else-if=\"dataRow.type === 'color_picker'\">",
          "265:                         <div",
          "274:                         ></div>",
          "275:                         {{",
          "276:                           record[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "",
          "[Removed Lines]",
          "266:                         class=\"crud-generated__item--color-picker\"",
          "267:                           :style=\"",
          "268:                             `background-color: ${",
          "269:                               record[",
          "270:                                 $caseConvert.stringSnakeToCamel(dataRow.field)",
          "271:                               ]",
          "272:                             }`",
          "273:                           \"",
          "",
          "[Added Lines]",
          "262:                           class=\"crud-generated__item--color-picker\"",
          "263:                           :style=\"`background-color: ${",
          "264:                             record[",
          "265:                               $caseConvert.stringSnakeToCamel(dataRow.field)",
          "266:                             ]",
          "267:                           }`\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "301:                             }\"",
          "302:                             v-if=\"",
          "303:                               isCanRead &&",
          "309:                             \"",
          "310:                             icon=\"visibility\"",
          "311:                           >",
          "",
          "[Removed Lines]",
          "304:                                 $helper.isAllowedToModifyGeneratedCRUD(",
          "305:                                   'read',",
          "306:                                   dataType.name",
          "307:                                 ) &&",
          "308:                                 !isShowDataRecycle",
          "",
          "[Added Lines]",
          "298:                               $helper.isAllowedToModifyGeneratedCRUD(",
          "299:                                 'read',",
          "300:                                 dataType.name",
          "301:                               ) &&",
          "302:                               !isShowDataRecycle",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "321:                             }\"",
          "322:                             v-if=\"",
          "323:                               isCanEdit &&",
          "329:                             \"",
          "330:                             icon=\"edit\"",
          "331:                           >",
          "",
          "[Removed Lines]",
          "324:                                 $helper.isAllowedToModifyGeneratedCRUD(",
          "325:                                   'edit',",
          "326:                                   dataType",
          "327:                                 ) &&",
          "328:                                 !isShowDataRecycle",
          "",
          "[Added Lines]",
          "318:                               $helper.isAllowedToModifyGeneratedCRUD(",
          "319:                                 'edit',",
          "320:                                 dataType",
          "321:                               ) &&",
          "322:                               !isShowDataRecycle",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "338:                               !idsOfflineDeleteRecord.includes(",
          "339:                                 record.id.toString()",
          "340:                               ) &&",
          "345:                             \"",
          "346:                           >",
          "347:                             Delete",
          "",
          "[Removed Lines]",
          "341:                                 $helper.isAllowedToModifyGeneratedCRUD(",
          "342:                                   'delete',",
          "343:                                   dataType",
          "344:                                 )",
          "",
          "[Added Lines]",
          "335:                               $helper.isAllowedToModifyGeneratedCRUD(",
          "336:                                 'delete',",
          "337:                                 dataType",
          "338:                               )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "424:                       >",
          "425:                         <img",
          "426:                           v-if=\"dataRow.type === 'upload_image'\"",
          "428:                           width=\"100%\"",
          "429:                           alt=\"\"",
          "430:                         />",
          "",
          "[Removed Lines]",
          "427:                           :src=\"record[ $caseConvert.stringSnakeToCamel(dataRow.field) ]\"",
          "",
          "[Added Lines]",
          "421:                           :src=\"",
          "422:                             record[",
          "423:                               $caseConvert.stringSnakeToCamel(dataRow.field)",
          "424:                             ]",
          "425:                           \"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "469:                         >",
          "470:                         <a",
          "471:                           v-else-if=\"dataRow.type === 'upload_file'\"",
          "475:                           target=\"_blank\"",
          "476:                           >{{",
          "477:                             getDownloadUrl(",
          "",
          "[Removed Lines]",
          "472:                           :href=\"",
          "473:                             `${record[ $caseConvert.stringSnakeToCamel(dataRow.field) ]}`",
          "474:                           \"",
          "",
          "[Added Lines]",
          "470:                           :href=\"`${",
          "471:                             record[",
          "472:                               $caseConvert.stringSnakeToCamel(dataRow.field)",
          "473:                             ]",
          "474:                           }`\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "493:                             )\"",
          "494:                             :key=\"indexFile\"",
          "495:                           >",
          "501:                           </p>",
          "502:                         </div>",
          "503:                         <p",
          "504:                           v-else-if=\"",
          "505:                             dataRow.type === 'radio' ||",
          "507:                           \"",
          "508:                         >",
          "509:                           {{",
          "",
          "[Removed Lines]",
          "496:                             <a",
          "497:                               :href=\"`${file}`\"",
          "498:                               target=\"_blank\"",
          "499:                               >{{ getDownloadUrl(file) }}</a",
          "500:                             >",
          "506:                               dataRow.type === 'select'",
          "",
          "[Added Lines]",
          "496:                             <a :href=\"`${file}`\" target=\"_blank\">{{",
          "497:                               getDownloadUrl(file)",
          "498:                             }}</a>",
          "504:                             dataRow.type === 'select'",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "518:                         <div",
          "519:                           v-else-if=\"",
          "520:                             dataRow.type === 'select_multiple' ||",
          "522:                           \"",
          "523:                           class=\"crud-generated__item--select-multiple\"",
          "524:                         >",
          "",
          "[Removed Lines]",
          "521:                               dataRow.type === 'checkbox'",
          "",
          "[Added Lines]",
          "519:                             dataRow.type === 'checkbox'",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "536:                         <div v-else-if=\"dataRow.type === 'color_picker'\">",
          "537:                           <div",
          "538:                             class=\"crud-generated__item--color-picker\"",
          "546:                           ></div>",
          "547:                           {{",
          "548:                             record[",
          "",
          "[Removed Lines]",
          "539:                             :style=\"",
          "540:                               `background-color: ${",
          "541:                                 record[",
          "542:                                   $caseConvert.stringSnakeToCamel(dataRow.field)",
          "543:                                 ]",
          "544:                               }`",
          "545:                             \"",
          "",
          "[Added Lines]",
          "537:                             :style=\"`background-color: ${",
          "538:                               record[",
          "539:                                 $caseConvert.stringSnakeToCamel(dataRow.field)",
          "540:                               ]",
          "541:                             }`\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "575:                               }\"",
          "576:                               v-if=\"",
          "577:                                 isCanRead &&",
          "582:                               \"",
          "583:                               icon=\"visibility\"",
          "584:                             >",
          "",
          "[Removed Lines]",
          "578:                                   $helper.isAllowedToModifyGeneratedCRUD(",
          "579:                                     'read',",
          "580:                                     dataType",
          "581:                                   )",
          "",
          "[Added Lines]",
          "574:                                 $helper.isAllowedToModifyGeneratedCRUD(",
          "575:                                   'read',",
          "576:                                   dataType",
          "577:                                 )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "594:                               }\"",
          "595:                               v-if=\"",
          "596:                                 isCanEdit &&",
          "601:                               \"",
          "602:                               icon=\"edit\"",
          "603:                             >",
          "",
          "[Removed Lines]",
          "597:                                   $helper.isAllowedToModifyGeneratedCRUD(",
          "598:                                     'edit',",
          "599:                                     dataType",
          "600:                                   )",
          "",
          "[Added Lines]",
          "593:                                 $helper.isAllowedToModifyGeneratedCRUD(",
          "594:                                   'edit',",
          "595:                                   dataType",
          "596:                                 )",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "610:                                 !idsOfflineDeleteRecord.includes(",
          "611:                                   record.id.toString()",
          "612:                                 ) &&",
          "617:                               \"",
          "618:                             >",
          "619:                               Delete",
          "",
          "[Removed Lines]",
          "613:                                   $helper.isAllowedToModifyGeneratedCRUD(",
          "614:                                     'delete',",
          "615:                                     dataType",
          "616:                                   )",
          "",
          "[Added Lines]",
          "609:                                 $helper.isAllowedToModifyGeneratedCRUD(",
          "610:                                   'delete',",
          "611:                                   dataType",
          "612:                                 )",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "643:             </div>",
          "644:           </vs-card>",
          "645:         </vs-col>",
          "647:           <vs-row>",
          "648:             <badaso-switch",
          "649:               :label=\"$t('crudGenerated.maintenanceDialog.switch')\"",
          "",
          "[Removed Lines]",
          "646:         <vs-prompt @accept=\"saveMaintenanceState\" :active.sync=\"maintenanceDialog\">",
          "",
          "[Added Lines]",
          "642:         <vs-prompt",
          "643:           @accept=\"saveMaintenanceState\"",
          "644:           :active.sync=\"maintenanceDialog\"",
          "645:         >",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "679:       <vs-row v-if=\"$helper.isAllowedToModifyGeneratedCRUD('browse', dataType)\">",
          "680:         <vs-col vs-lg=\"12\">",
          "681:           <div class=\"badaso-maintenance__container\">",
          "684:           </div>",
          "685:         </vs-col>",
          "686:       </vs-row>",
          "",
          "[Removed Lines]",
          "682:             <img :src=\"`${maintenanceImg}`\" alt=\"Maintenance Icon\">",
          "683:             <h1 class=\"badaso-maintenance__text\">We are under <br>maintenance</h1>",
          "",
          "[Added Lines]",
          "681:             <img :src=\"`${maintenanceImg}`\" alt=\"Maintenance Icon\" />",
          "682:             <h1 class=\"badaso-maintenance__text\">",
          "683:               We are under <br />maintenance",
          "684:             </h1>",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "723:     showMaintenancePage: false,",
          "724:   }),",
          "725:   watch: {",
          "727:       this.getEntity();",
          "728:     },",
          "",
          "[Removed Lines]",
          "726:     $route: function(to, from) {",
          "",
          "[Added Lines]",
          "727:     $route: function (to, from) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "856:                   let valueIds = fieldData.value.split(\",\");",
          "857:                   valueIds = valueIds.filter((valueId, index) => valueId != id);",
          "858:                   if (valueIds.length != 0) {",
          "863:                     newData[newData.length] = data[indexData];",
          "864:                   }",
          "",
          "[Removed Lines]",
          "859:                     data[indexData].requestData.data[",
          "860:                       indexItem",
          "861:                     ].value = valueIds.join(\",\");",
          "",
          "[Added Lines]",
          "860:                     data[indexData].requestData.data[indexItem].value =",
          "861:                       valueIds.join(\",\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1004:     },",
          "1005:     prepareExcelExporter() {",
          "1006:       for (const iterator of this.dataType.dataRows) {",
          "1010:       }",
          "1012:       for (const iterator of this.dataType.dataRows) {",
          "",
          "[Removed Lines]",
          "1007:         this.fieldsForExcel[",
          "1008:           iterator.displayName",
          "1009:         ] = this.$caseConvert.stringSnakeToCamel(iterator.field);",
          "",
          "[Added Lines]",
          "1007:         this.fieldsForExcel[iterator.displayName] =",
          "1008:           this.$caseConvert.stringSnakeToCamel(iterator.field);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1048:       const doc = new jsPDF(\"l\");",
          "1050:       doc.autoTable({",
          "1051:         head: [this.fieldsForPdf],",
          "1052:         body: result,",
          "1055:         styles: { valign: \"middle\" },",
          "1056:         headStyles: { fillColor: [6, 187, 211] },",
          "",
          "[Removed Lines]",
          "1053:         startY: 15,",
          "",
          "[Added Lines]",
          "1050:       doc.setFont(\"helvetica\", \"bold\");",
          "1051:       doc.setFontSize(28);",
          "1052:       doc.text(this.dataType.displayNameSingular, 149, 20, \"center\");",
          "1058:         startY: 30,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1058:         columnStyles: { text: { cellWidth: \"wrap\" } },",
          "1059:       });",
          "1061:       let output = doc.output(\"blob\");",
          "1068:       var data = window.URL.createObjectURL(output);",
          "1075:         window.URL.revokeObjectURL(data);",
          "1076:       }, 100);",
          "",
          "[Removed Lines]",
          "1063:       if (window.navigator && window.navigator.msSaveOrOpenBlob) {",
          "1064:         window.navigator.msSaveOrOpenBlob(output);",
          "1065:         return;",
          "1066:       }",
          "1069:       var link = document.createElement(\"a\");",
          "1070:       link.href = data;",
          "1071:       link.download = this.dataType.displayNameSingular + \".pdf\";",
          "1072:       link.click();",
          "1073:       setTimeout(function() {",
          "",
          "[Added Lines]",
          "1069:       window.open(data, \"_blank\");",
          "1071:       setTimeout(function () {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1130:     maintenanceImg() {",
          "1131:       let config = this.$store.getters[\"badaso/getConfig\"];",
          "1132:       return config.maintenanceImage;",
          "1134:   },",
          "1135: };",
          "1136: </script>",
          "",
          "[Removed Lines]",
          "1133:     }",
          "",
          "[Added Lines]",
          "1131:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcc051db82518a71f4000c7ed32c256c500de8e2",
      "candidate_info": {
        "commit_hash": "bcc051db82518a71f4000c7ed32c256c500de8e2",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/bcc051db82518a71f4000c7ed32c256c500de8e2",
        "files": [
          "src/Controllers/Controller.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/Controller.php||src/Controllers/Controller.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php"
        ]
      }
    },
    {
      "candidate_hash": "448a20bf58c3429dadea770bbf83265b6ddd810a",
      "candidate_info": {
        "commit_hash": "448a20bf58c3429dadea770bbf83265b6ddd810a",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/448a20bf58c3429dadea770bbf83265b6ddd810a",
        "files": [
          "src/Controllers/BadasoCRUDController.php",
          "src/Controllers/BadasoDatabaseController.php",
          "src/Helpers/CallHelperTest.php",
          "src/Helpers/DataTypeToComponent.php",
          "src/resources/js/api/handle-error.js",
          "src/resources/js/components/BadasoSidebarMenu.vue",
          "src/resources/js/lang/modules/en.js",
          "src/resources/js/lang/modules/id.js",
          "src/resources/js/pages/database-management/add.vue",
          "src/resources/js/pages/database-management/browse.vue",
          "src/resources/js/pages/database-management/edit.vue",
          "src/resources/js/pages/home.vue",
          "src/resources/lang/en/validation.php",
          "src/resources/lang/id/validation.php"
        ],
        "message": "bugfix/v2/validation-and-pop-up",
        "before_after_code_files": [
          "src/Controllers/BadasoCRUDController.php||src/Controllers/BadasoCRUDController.php",
          "src/Controllers/BadasoDatabaseController.php||src/Controllers/BadasoDatabaseController.php",
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php",
          "src/Helpers/DataTypeToComponent.php||src/Helpers/DataTypeToComponent.php",
          "src/resources/js/api/handle-error.js||src/resources/js/api/handle-error.js",
          "src/resources/js/components/BadasoSidebarMenu.vue||src/resources/js/components/BadasoSidebarMenu.vue",
          "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js",
          "src/resources/js/lang/modules/id.js||src/resources/js/lang/modules/id.js",
          "src/resources/js/pages/database-management/add.vue||src/resources/js/pages/database-management/add.vue",
          "src/resources/js/pages/database-management/browse.vue||src/resources/js/pages/database-management/browse.vue",
          "src/resources/js/pages/database-management/edit.vue||src/resources/js/pages/database-management/edit.vue",
          "src/resources/js/pages/home.vue||src/resources/js/pages/home.vue",
          "src/resources/lang/en/validation.php||src/resources/lang/en/validation.php",
          "src/resources/lang/id/validation.php||src/resources/lang/id/validation.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoCRUDController.php||src/Controllers/BadasoCRUDController.php": [
          "File: src/Controllers/BadasoCRUDController.php -> src/Controllers/BadasoCRUDController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:                             $row = collect($request->rows)->where('field', $value)->first();",
          "152:                             if (! $row['add'] && ! $field['autoincrement'] && $field['notnull'] && is_null($field['default'])) {",
          "153:                                 $fail(__('badaso::validation.crud.table_column_not_have_default_value', ['table_column' => \"$request->name.{$value}\"]));",
          "154:                             }",
          "155:                         }",
          "156:                     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:                             } elseif ($row['field'] != 'id' && $field['key'] == 'PRI') {",
          "155:                                 $fail(__('badaso::validation.crud.id_table_wrong', ['table_column' => \"$request->name.{$value}\"]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:                             $row = collect($request->rows)->where('field', $value)->first();",
          "297:                             if (! $row['add'] && ! $field['autoincrement'] && $field['notnull'] && is_null($field['default'])) {",
          "298:                                 $fail(__('badaso::validation.crud.table_column_not_have_default_value', ['table_column' => \"$request->name.{$value}\"]));",
          "299:                             }",
          "300:                         }",
          "301:                     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:                             } elseif ($row['field'] != 'id' && $field['key'] == 'PRI') {",
          "302:                                 $fail(__('badaso::validation.crud.id_table_wrong', ['table_column' => \"$request->name.{$value}\"]));",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoDatabaseController.php||src/Controllers/BadasoDatabaseController.php": [
          "File: src/Controllers/BadasoDatabaseController.php -> src/Controllers/BadasoDatabaseController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:                 ],",
          "43:                 'rows' => 'required',",
          "44:                 'rows.*.field_name' => 'required|string|distinct',",
          "46:             ]);",
          "48:             $this->file_name = $this->file_generator->generateBDOMigrationFile($request->table, 'create', $request->rows, $request->relations);",
          "50:             $exitCode = Artisan::call('migrate', [",
          "52:             ]);",
          "54:             switch ($exitCode) {",
          "",
          "[Removed Lines]",
          "45:                 'rows.*.field_type' => 'required|string',",
          "51:                 '--path' => 'database/migrations/badaso/',",
          "",
          "[Added Lines]",
          "45:                 'rows.*.field_type' => [",
          "46:                     'required',",
          "47:                     'string',",
          "48:                     function ($attribute, $value, $fail) use ($request) {",
          "49:                     $request_data = $request->rows;",
          "51:                     $mysql_data_type = [",
          "52:                         'tinyint', 'smallint', 'mediumint', 'int', 'integer', 'bigint', 'decimal', 'float', 'double', 'bit', 'char', 'varchar', 'binary', 'varbinary', 'tinyblob', 'blob', 'mediumblob', 'longblob', 'tinytext', 'text', 'mediumtext', 'longtext', 'enum', 'set', 'date', 'time', 'datetime', 'timestamp', 'year', 'geometry', 'point', 'linestring', 'polygon', 'geometrycollection', 'multilinestring', 'multipoint', 'multipolygon', 'json', 'boolean',",
          "53:                     ];",
          "54:                     $cek = [];",
          "55:                     foreach ($request_data as $key => $value) {",
          "56:                         if (! in_array($value['field_type'], $mysql_data_type)) {",
          "57:                             $cek[] = $value['field_type'];",
          "58:                             $fail(__('badaso::validation.database.wrong_type_data'));",
          "59:                         }",
          "60:                     }",
          "61:                 },",
          "62:                 ]",
          "68:                 '--path' => 'database/migrations/badaso/','--force' => true",
          "",
          "---------------"
        ],
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     {",
          "119:         Cache::store('file')->clear();",
          "120:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     public static function login(TestCase $test_case)",
          "123:     {",
          "124:         $user = self::getUserAdminRole();",
          "126:         $login = $test_case->post(CallHelperTest::getApiAuth('login'), [",
          "127:             'email' => $user->email,",
          "128:             'password' => $user->name,",
          "129:             'remember' => false,",
          "130:         ]);",
          "132:         return $login->json('data.accessToken');",
          "133:     }",
          "135:      public static function getApiAuth($path)",
          "136:     {",
          "137:         return 'badaso-api/v1/auth/'.$path;",
          "138:     }",
          "140:     public static function getContentApiV1($path)",
          "141:     {",
          "142:         return 'badaso-api/module/content/v1'.$path;",
          "143:     }",
          "",
          "---------------"
        ],
        "src/Helpers/DataTypeToComponent.php||src/Helpers/DataTypeToComponent.php": [
          "File: src/Helpers/DataTypeToComponent.php -> src/Helpers/DataTypeToComponent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         'MEDIUMBLOB' => 'text',",
          "19:         'LONGTEXT'   => 'text',",
          "20:         'LONGBLOB'   => 'text',",
          "21:         'ENUM'       => 'select',",
          "22:         'SET'        => 'select_multiple',",
          "23:         'BIT'        => 'text',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:         'CHARACTER VARYING'  => 'text',",
          "22:         'CHARACTER'  => 'text',",
          "23:         'BYTEA'      => 'text',",
          "24:         'JSON'       => 'text',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         'DOUBLE'     => 'number',",
          "36:         'DECIMAL'    => 'number',",
          "37:         'DEC'        => 'number',",
          "38:         'DATETIME'   => 'datetime',",
          "39:         'TIMESTAMP'  => 'datetime',",
          "40:         'TIME'       => 'datetime',",
          "42:     ];",
          "44:     public static function convert($type)",
          "",
          "[Removed Lines]",
          "41:         'YEAR'       => 'number',",
          "",
          "[Added Lines]",
          "42:         'YEAR'       => 'number',",
          "43:         'NUMERIC'    => 'number',",
          "44:         'DOUBLE'     => 'number',",
          "45:         'DOUBLE PRECISION'   => 'number',",
          "",
          "---------------"
        ],
        "src/resources/js/api/handle-error.js||src/resources/js/api/handle-error.js": [
          "File: src/resources/js/api/handle-error.js -> src/resources/js/api/handle-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:       store.commit(\"badaso/SET_AUTH_ISSUE\", {",
          "12:         unauthorized: true,",
          "13:       });",
          "14:     } else if (status === 402 || status === 412) {",
          "15:       let data = error.response.data;",
          "16:       data.status = status;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:       let data = error.response.data;",
          "15:       let message = error.response.data.message;",
          "16:       data.status = status;",
          "17:       data.message = message;",
          "18:       return Promise.reject(data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:         message: data.message ? data.message : \"\",",
          "20:       });",
          "21:       return Promise.reject(data);",
          "22:     } else if (status === 503) {",
          "23:       let data = error.response.data;",
          "24:       let message = error.response.data.message;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     } else if (status === 500) {",
          "28:       let data = error.response.data;",
          "29:       let message = error.response.data.message;",
          "30:       data.status = status;",
          "31:       data.message = message;",
          "32:       return Promise.reject(data);",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoSidebarMenu.vue||src/resources/js/components/BadasoSidebarMenu.vue": [
          "File: src/resources/js/components/BadasoSidebarMenu.vue -> src/resources/js/components/BadasoSidebarMenu.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     },",
          "95:     children: {",
          "96:       type: Array,",
          "98:     },",
          "99:   },",
          "100:   computed: {",
          "",
          "[Removed Lines]",
          "97:       default: [],",
          "",
          "[Added Lines]",
          "97:       default: ()=> {",
          "98:         []",
          "99:         },",
          "",
          "---------------"
        ],
        "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js": [
          "File: src/resources/js/lang/modules/en.js -> src/resources/js/lang/modules/en.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   alert: {",
          "175:     success: \"Success\",",
          "176:     danger: \"Danger\",",
          "177:   },",
          "179:   activityLog: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     error: \"Error\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:     },",
          "273:     warning: {",
          "274:       notAllowed: \"You're not allowed to browse CRUD.\",",
          "275:     },",
          "276:     header: {",
          "277:       table: \"Table\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:       idNotAllowed: \"Dont change name id for anything\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "964:           \"Before you can use the Database Management, you should migrate the file that not migrated yet or you could delete the migration file. Here is a list of the migration files that haven't been migrated:\",",
          "965:         empty: \"You must delete this generated CRUD first on CRUD Management.\",",
          "966:       },",
          "967:     },",
          "968:     add: {",
          "969:       title: \"Add Table\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "969:       fieldNotSupport: {",
          "970:         title: \"Database Error\",",
          "971:         text: \"There's unsupported data type in table, please see the supported data type in badaso documentation\",",
          "972:         tableList: \"List of unsupported tables :\",",
          "973:         button: {",
          "974:           visitDocs: \"Visit Documentation\"",
          "975:         }",
          "976:       }",
          "",
          "---------------"
        ],
        "src/resources/js/lang/modules/id.js||src/resources/js/lang/modules/id.js": [
          "File: src/resources/js/lang/modules/id.js -> src/resources/js/lang/modules/id.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   alert: {",
          "175:     success: \"Sukses\",",
          "176:     danger: \"Bahaya\",",
          "177:   },",
          "179:   activityLog: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     error: \"Kesalahan\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:     },",
          "273:     warning: {",
          "274:       notAllowed: \"Anda tidak diizinkan untuk mengakses CRUD.\",",
          "275:     },",
          "276:     header: {",
          "277:       table: \"Tabel\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:       idNotAllowed: \"Jangan ganti nama 'id' table dengan apapun\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "960:         empty:",
          "961:           \"Kamu harus menghapus generated CRUD ini terlebih dahulu di CRUD Management.\",",
          "962:       },",
          "963:     },",
          "964:     add: {",
          "965:       title: \"Tambah Tabel\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "965:       fieldNotSupport: {",
          "966:         title: \"Kesalahan Basis Data\",",
          "967:         text: \"Terdapat tipe data yang tidak didukung pada tabel, silahkan lihat tipe data yang didukung di dokumentasi Badaso\",",
          "968:         tableList: \"Daftar Tabel Bermasalah :\",",
          "969:         button: {",
          "970:           tableList: \"Table list yang tidak mendukung :\",",
          "971:           visitDocs: \"Kunjungi Dokumentasi\"",
          "972:         }",
          "973:       }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/database-management/add.vue||src/resources/js/pages/database-management/add.vue": [
          "File: src/resources/js/pages/database-management/add.vue -> src/resources/js/pages/database-management/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:             if (error.errors.table) {",
          "558:               message = error.errors.table[0];",
          "559:             }",
          "561:             this.$vs.notify({",
          "562:               title: this.$t(\"alert.danger\"),",
          "563:               text: message,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:             if (error.errors[\"rows.0.fieldType\"]) {",
          "561:               message = error.errors[\"rows.0.fieldType\"][0];",
          "562:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:       }",
          "582:     },",
          "583:     addField() {",
          "585:       this.databaseData.rows.splice(index, 0, {",
          "586:         id: this.$helper.uuid(),",
          "587:         fieldName: \"\",",
          "",
          "[Removed Lines]",
          "584:       let index = this.databaseData.rows.map(row => row.undeletable).indexOf(true)",
          "",
          "[Added Lines]",
          "586:       let index = this.databaseData.rows.map(row => row.indexes).indexOf(true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656:         fieldIncrement: true,",
          "657:         fieldIndex: \"primary\",",
          "658:         fieldDefault: null,",
          "659:       }, {",
          "660:         fieldName: \"created_at\",",
          "661:         fieldType: \"timestamp\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "661:         undeletable: true",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "665:         fieldIncrement: false,",
          "666:         fieldIndex: null,",
          "667:         fieldDefault: null,",
          "669:       }, {",
          "670:         fieldName: \"updated_at\",",
          "671:         fieldType: \"timestamp\",",
          "",
          "[Removed Lines]",
          "668:         undeletable: true",
          "",
          "[Added Lines]",
          "671:         undeletable: true,",
          "672:         indexes:true",
          "",
          "---------------"
        ],
        "src/resources/js/pages/database-management/browse.vue||src/resources/js/pages/database-management/browse.vue": [
          "File: src/resources/js/pages/database-management/browse.vue -> src/resources/js/pages/database-management/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         </vs-col>",
          "128:       </vs-row>",
          "129:     </vs-popup>",
          "131:     <vs-row v-if=\"$helper.isAllowed('browse_database')\">",
          "132:       <vs-col vs-lg=\"12\">",
          "133:         <vs-card>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: <vs-popup",
          "131:       :active.sync=\"errorDatabase\"",
          "132:       :title=\"$t('database.browse.fieldNotSupport.title')\"",
          "133:       color=\"success\"",
          "134:       class=\"database-management__popup\"",
          "135:     >",
          "136:       <vs-row>",
          "137:         <vs-col>",
          "138:           <p>",
          "139:             {{ $t('database.browse.fieldNotSupport.text') }}",
          "140:           </p>",
          "141:           <br/>",
          "142:           <p>",
          "143:             {{ $t('database.browse.fieldNotSupport.tableList') }}",
          "144:           </p>",
          "145:           <p>",
          "146:              {{errorTable}}",
          "147:           </P >",
          "148:         </vs-col>",
          "149:       </vs-row>",
          "150:       <vs-row vs-align=\"center\" class=\"database-management__popup-footer\">",
          "151:         <vs-col vs-lg=\"12\" vs-sm=\"12\" vs-align=\"center\">",
          "152:           <vs-row vs-align=\"center\">",
          "153:             <vs-spacer></vs-spacer>",
          "154:          <div class=\"database-management__popup-sync\">",
          "155:            <vs-button",
          "156:               color=\"warning\"",
          "157:               type=\"relief\"",
          "158:               @click=\"goBack()\"",
          "159:             >",
          "160:               {{ $t(\"database.browse.goBackButton\") }}",
          "161:             </vs-button>",
          "162:             <vs-button",
          "163:               color=\"success\"",
          "164:               type=\"relief\"",
          "165:               href= \"https://badaso-docs.uatech.co.id/crud-generator/datatype\"",
          "166:             >",
          "167:               {{ $t(\"database.browse.fieldNotSupport.button.visitDocs\") }}",
          "168:             </vs-button>",
          "169:             </div>",
          "170:           </vs-row>",
          "171:         </vs-col>",
          "172:       </vs-row>",
          "173:     </vs-popup>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:     isNotMigrated: false,",
          "244:     notMigratedFile: [],",
          "245:     isDeleteFile: false,",
          "246:   }),",
          "247:   validations: {",
          "248:     willRollbackFile: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:     errorDatabase:false,",
          "290:     errorTable:\"\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:         })",
          "308:         .catch((error) => {",
          "309:           this.$closeLoader();",
          "311:             title: this.$t(\"alert.danger\"),",
          "312:             text: error.message,",
          "313:             color: \"danger\",",
          "314:           });",
          "315:         });",
          "316:     },",
          "317:     deleteDatabase() {",
          "",
          "[Removed Lines]",
          "310:           this.$vs.notify({",
          "",
          "[Added Lines]",
          "355:           if(error.message.indexOf(\"Unknown database\") == 0){",
          "356:             this.errorTable = \"- \"+error.errors[2].args[0];",
          "357:             this.errorDatabase = true;",
          "358:           }else{",
          "359:             this.$vs.notify({",
          "364:           }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/database-management/edit.vue||src/resources/js/pages/database-management/edit.vue": [
          "File: src/resources/js/pages/database-management/edit.vue -> src/resources/js/pages/database-management/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "666:               fieldIndex: this.getFieldIndexes(column.indexes),",
          "667:               fieldDefault: column.default,",
          "668:               modifyType: [],",
          "670:             });",
          "672:             this.databaseData.fields.currentFields.push({",
          "",
          "[Removed Lines]",
          "669:               undeletable: column.name == 'created_at' || column.name == 'updated_at' ? true : false",
          "",
          "[Added Lines]",
          "669:               undeletable: column.name == 'id' || column.name == 'created_at' || column.name == 'updated_at' ? true : false,",
          "670:               indexes : column.name == 'created_at' ? true : false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "764:     },",
          "766:     addField() {",
          "768:       this.databaseData.fields.modifiedFields.splice(index, 0, {",
          "769:         id: this.$helper.uuid(),",
          "770:         fieldName: \"\",",
          "",
          "[Removed Lines]",
          "767:       let index = this.databaseData.fields.modifiedFields.map(row => row.undeletable).indexOf(true)",
          "",
          "[Added Lines]",
          "768:       let index = this.databaseData.fields.modifiedFields.map(row => row.indexes).indexOf(true)",
          "",
          "---------------"
        ],
        "src/resources/js/pages/home.vue||src/resources/js/pages/home.vue": [
          "File: src/resources/js/pages/home.vue -> src/resources/js/pages/home.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:           }",
          "55:         })",
          "56:         .catch((error) => {",
          "62:           });",
          "63:         });",
          "64:     },",
          "65:     saveTokenFcmMessage() {",
          "",
          "[Removed Lines]",
          "57:           this.$closeLoader();",
          "58:           this.$vs.notify({",
          "59:             title: this.$t(\"alert.danger\"),",
          "60:             text: error.message,",
          "61:             color: \"danger\",",
          "",
          "[Added Lines]",
          "57:          if(error.status == 401){",
          "58:             this.$closeLoader();",
          "59:             this.$vs.notify({",
          "60:               title: this.$t(\"alert.error\"),",
          "61:               text: error.message,",
          "62:               color: \"danger\",",
          "63:           });",
          "64:           }else{",
          "65:              this.$closeLoader();",
          "66:             this.$vs.notify({",
          "67:               title: this.$t(\"alert.danger\"),",
          "68:               text: error.message,",
          "69:               color: \"danger\",",
          "71:           }",
          "",
          "---------------"
        ],
        "src/resources/lang/en/validation.php||src/resources/lang/en/validation.php": [
          "File: src/resources/lang/en/validation.php -> src/resources/lang/en/validation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:         'table_column_not_found'              => 'Invalid rows, Field :table_column does not exists',",
          "13:         'table_column_not_have_default_value' => 'Invalid rows, Field :table_column has no default value, please tick the checkbox Add',",
          "14:         'table_deleted_at_not_exists'         => 'Invalidate columns deleted_at, please created new columns delete_at in your table :table_name',",
          "15:     ],",
          "16:     'base64' => [",
          "17:         'length_invalid'   => 'Base64 format is invalid',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:         'id_table_wrong'                      => 'Primary key should be named only\"id\"',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         'nothing_changed'           => 'Request was successful, but nothing changed.',",
          "36:         'rollback_success'          => 'Rollback success.',",
          "37:         'rollback_failed'           => 'Rollback failed.',",
          "38:     ],",
          "39: ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         'wrong_type_data'           => 'Your data type false',",
          "",
          "---------------"
        ],
        "src/resources/lang/id/validation.php||src/resources/lang/id/validation.php": [
          "File: src/resources/lang/id/validation.php -> src/resources/lang/id/validation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         'table_not_found'                     => 'Table :table tidak ditemukan',",
          "12:         'table_column_not_found'              => 'Row tidak valid, Field :table_column tidak ditemukan',",
          "13:         'table_column_not_have_default_value' => 'Row tidak valid, Field :table_column tidak punya nilai default, tolong centang checkbox Add',",
          "14:     ],",
          "15:     'base64' => [",
          "16:         'length_invalid'   => 'Format base64 tidak valid',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:         'id_table_wrong'                      => 'Primary Key harus diganti dengan \"id\"',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47cb36b1ad894c00e3cfdce490641ea6720e1f4d",
      "candidate_info": {
        "commit_hash": "47cb36b1ad894c00e3cfdce490641ea6720e1f4d",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/47cb36b1ad894c00e3cfdce490641ea6720e1f4d",
        "files": [
          "src/resources/js/pages/crud-generated/browse.vue"
        ],
        "message": "change format date",
        "before_after_code_files": [
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "748: import downloadExcel from \"vue-json-excel\";",
          "749: import jsPDF from \"jspdf\";",
          "750: import \"jspdf-autotable\";",
          "751: export default {",
          "752:   components: { downloadExcel },",
          "753:   name: \"CrudGeneratedBrowse\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751: import moment from \"moment\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "866:         this.$closeLoader();",
          "867:         this.data = response.data;",
          "868:         this.records = response.data.data;",
          "869:         this.totalItem =",
          "870:           response.data.total > 0",
          "871:             ? Math.ceil(response.data.total / this.limit)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "870:         this.records.map((record) => {",
          "871:           if (record.createdAt || record.updatedAt){",
          "872:             record.createdAt = moment(record.createdAt).format('YYYY-MM-DD hh:mm:ss');",
          "873:             record.updatedAt = moment(record.updatedAt).format('YYYY-MM-DD hh:mm:ss');",
          "874:           }",
          "875:           return record;",
          "876:         })",
          "",
          "---------------"
        ]
      }
    }
  ]
}