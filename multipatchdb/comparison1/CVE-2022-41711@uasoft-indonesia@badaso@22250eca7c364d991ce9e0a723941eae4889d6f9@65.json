{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "daa771755b8509ed8747fc6a5f93d9fd25092eda",
      "candidate_info": {
        "commit_hash": "daa771755b8509ed8747fc6a5f93d9fd25092eda",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/daa771755b8509ed8747fc6a5f93d9fd25092eda",
        "files": [
          "composer.json",
          "phpunit.xml",
          "tests/Feature/ExampleTest.php",
          "tests/TestCase.php",
          "tests/Unit/ExampleTest.php"
        ],
        "message": "add unit test crud management",
        "before_after_code_files": [
          "tests/Feature/ExampleTest.php||tests/Feature/ExampleTest.php",
          "tests/TestCase.php||tests/TestCase.php",
          "tests/Unit/ExampleTest.php||tests/Unit/ExampleTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/ExampleTest.php||tests/Feature/ExampleTest.php": [
          "File: tests/Feature/ExampleTest.php -> tests/Feature/ExampleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature ;",
          "5: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "6: use Tests\\TestCase;",
          "8: class ExampleTest extends TestCase",
          "9: {",
          "15:     public function testBadasoExample()",
          "16:     {",
          "17:         $response = $this->get('/');",
          "19:         $response->assertStatus(200);",
          "20:     }",
          "21: }",
          "",
          "---------------"
        ],
        "tests/TestCase.php||tests/TestCase.php": [
          "File: tests/TestCase.php -> tests/TestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests;",
          "5: use Orchestra\\Testbench\\TestCase as TestbenchTestCase;",
          "6: use Uasoft\\Badaso\\Providers\\BadasoServiceProvider;",
          "7: use Uasoft\\Badaso\\Providers\\DropboxServiceProvider;",
          "8: use Uasoft\\Badaso\\Providers\\GoogleDriveServiceProvider;",
          "9: use Uasoft\\Badaso\\Providers\\OrchestratorEventServiceProvider;",
          "11: class TestCase extends TestbenchTestCase",
          "12: {",
          "13:     public function setUp(): void",
          "14:     {",
          "15:         parent::setUp();",
          "17:     }",
          "19:     protected function getPackageProviders($app)",
          "20:     {",
          "21:         return [",
          "22:             BadasoServiceProvider::class,",
          "23:             DropboxServiceProvider::class,",
          "24:             GoogleDriveServiceProvider::class,",
          "25:             OrchestratorEventServiceProvider::class,",
          "26:         ];",
          "27:     }",
          "29:     protected function getEnvironmentSetUp($app)",
          "30:     {",
          "32:     }",
          "33: }",
          "",
          "---------------"
        ],
        "tests/Unit/ExampleTest.php||tests/Unit/ExampleTest.php": [
          "File: tests/Unit/ExampleTest.php -> tests/Unit/ExampleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Tests\\Unit;",
          "5: use PHPUnit\\Framework\\TestCase;",
          "7: class ExampleTest extends TestCase",
          "8: {",
          "14:     public function testBadasoExample()",
          "15:     {",
          "16:         $this->assertTrue(true);",
          "17:     }",
          "18: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "055b03ddaad498dee5fab23d44865e8b9c923ca1",
      "candidate_info": {
        "commit_hash": "055b03ddaad498dee5fab23d44865e8b9c923ca1",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/055b03ddaad498dee5fab23d44865e8b9c923ca1",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "fix integration testing",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use Uasoft\\Badaso\\Models\\DataType;",
          "13: use Uasoft\\Badaso\\Models\\Migration;",
          "14: use Uasoft\\Badaso\\Models\\Permission;",
          "16: class BadasoApiCrudManagementTest extends TestCase",
          "17: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Illuminate\\Support\\Str;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:         CallHelperTest::setCache($this->KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT, $data_response_add_crud_management);",
          "521:     }",
          "701:     public function testReadCrudManagement()",
          "702:     {",
          "703:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "",
          "[Removed Lines]",
          "523:     public function testAddIsPublicCrudManagement()",
          "524:     {",
          "526:         $table_names = 'table_public';",
          "527:         Schema::dropIfExists($table_names);",
          "528:         if (!Schema::hasTable($table_names)) {",
          "529:             Schema::create($table_names, function (Blueprint $table) use ($table_names) {",
          "530:                 $table->id();",
          "531:                 $table->text('name')->nullable();",
          "532:                 $table->bigInteger('user_id')->nullable()->unsigned();",
          "533:                 $table->foreign('user_id')->references('id')->on(config('badaso.database.prefix') . 'users')->onDelete('cascade');",
          "534:                 $table->softDeletes();",
          "535:                 $table->timestamps();",
          "536:             });",
          "537:         }",
          "539:         $table_name = $table_names;",
          "542:         $rows = [",
          "543:             [",
          "544:                 'field' => 'id',",
          "545:                 'type' => 'integer',",
          "546:                 'displayName' => 'Id',",
          "547:                 'required' => rand(0, 1),",
          "548:                 'browse' => rand(0, 1),",
          "549:                 'read' => rand(0, 1),",
          "550:                 'edit' => 0,",
          "551:                 'add' => 0,",
          "552:                 'delete' => rand(0, 1),",
          "553:                 'details' => json_encode((object) []),",
          "554:                 'order' => 1,",
          "555:                 'setRelation' => false,",
          "556:             ],",
          "557:             [",
          "558:                 'field' => 'name',",
          "559:                 'type' => 'text',",
          "560:                 'displayName' => 'Name',",
          "561:                 'required' => rand(0, 1),",
          "562:                 'browse' => rand(0, 1),",
          "563:                 'read' => rand(0, 1),",
          "564:                 'edit' => 0,",
          "565:                 'add' => 0,",
          "566:                 'delete' => rand(0, 1),",
          "567:                 'details' => json_encode((object) []),",
          "568:                 'order' => 1,",
          "569:                 'setRelation' => false,",
          "570:             ],",
          "571:             [",
          "572:                 'field' => 'user_id',",
          "573:                 'type' => 'data_identifier',",
          "574:                 'displayName' => 'User Id',",
          "575:                 'required' => rand(0, 1),",
          "576:                 'browse' => rand(0, 1),",
          "577:                 'read' => rand(0, 1),",
          "578:                 'edit' => 0,",
          "579:                 'add' => 0,",
          "580:                 'delete' => rand(0, 1),",
          "581:                 'details' => json_encode((object) []),",
          "582:                 'order' => 1,",
          "583:                 'setRelation' => false,",
          "584:             ],",
          "585:             [",
          "586:                 'field' => 'created_at',",
          "587:                 'type' => 'datetime',",
          "588:                 'displayName' => 'Created At',",
          "589:                 'required' => rand(0, 1),",
          "590:                 'browse' => rand(0, 1),",
          "591:                 'read' => rand(0, 1),",
          "592:                 'edit' => 0,",
          "593:                 'add' => 0,",
          "594:                 'delete' => rand(0, 1),",
          "595:                 'details' => json_encode((object) []),",
          "596:                 'order' => 1,",
          "597:                 'setRelation' => false,",
          "598:             ],",
          "599:             [",
          "600:                 'field' => 'updated_at',",
          "601:                 'type' => 'datetime',",
          "602:                 'displayName' => 'Update At',",
          "603:                 'required' => rand(0, 1),",
          "604:                 'browse' => rand(0, 1),",
          "605:                 'read' => rand(0, 1),",
          "606:                 'edit' => 0,",
          "607:                 'add' => 0,",
          "608:                 'delete' => rand(0, 1),",
          "609:                 'details' => json_encode((object) []),",
          "610:                 'order' => 1,",
          "611:                 'setRelation' => false,",
          "612:             ],",
          "613:             [",
          "614:                 'field' => 'deleted_at',",
          "615:                 'type' => 'datetime',",
          "616:                 'displayName' => 'Deleted At',",
          "617:                 'required' => rand(0, 1),",
          "618:                 'browse' => rand(0, 1),",
          "619:                 'read' => rand(0, 1),",
          "620:                 'edit' => 0,",
          "621:                 'add' => 0,",
          "622:                 'delete' => rand(0, 1),",
          "623:                 'details' => json_encode((object) []),",
          "624:                 'order' => 1,",
          "625:                 'setRelation' => false,",
          "626:             ],",
          "627:         ];",
          "628:         $table_label = ucwords(str_replace(['_'], ' ', $table_name));",
          "629:         $request_body = [",
          "630:             'name' =>  $table_name,",
          "631:             'slug' =>  $table_name,",
          "632:             'displayNameSingular' =>  $table_label,",
          "633:             'displayNamePlural' =>  $table_label,",
          "634:             'icon' =>  'add',",
          "635:             'modelName' =>  '',",
          "636:             'policyName' =>  '',",
          "637:             'description' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',",
          "638:             'generatePermissions' =>  1,",
          "639:             'createSoftDelete' =>  rand(0, 1),",
          "640:             'serverSide' =>  rand(0, 1),",
          "641:             'details' =>  json_encode((object) []),",
          "642:             'controller' =>  '',",
          "643:             'orderColumn' =>  '',",
          "644:             'orderDisplayColumn' =>  '',",
          "645:             'orderDirection' =>  '',",
          "646:             'notification' =>   array_slice(['onCreate', 'onDelete', 'onUpdate', 'onRead'], 0, rand(0, 3)),",
          "647:             'isMaintenance' => rand(0, 1),",
          "648:             'rows' => $rows,",
          "649:         ];",
          "650:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "651:         $response->assertSuccessful();",
          "654:         $permissions = Permission::where('key', 'browse_' . $table_name)->get();",
          "655:         foreach ($permissions as $key => $value) {",
          "656:             $permission_id = $value->id;",
          "657:         }",
          "658:         $request_data = [",
          "659:             'always_allow' =>  false,",
          "660:             'is_public' =>  true,",
          "661:             'key' =>  'browse_' . $table_name,",
          "662:             'id' => $permission_id,",
          "663:         ];",
          "664:         $response_permission = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/permissions/edit'), $request_data);",
          "665:         $response_permission->assertSuccessful();",
          "668:         $response_entity = $this->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/read'), [",
          "669:             'table' => $request_body['slug'],",
          "670:         ]);",
          "671:         $response_entity->assertSuccessful();",
          "674:         $data_types = DataType::whereIn('name', $table_name)->get();",
          "675:         foreach ($data_types as $key => $data_type) {",
          "676:             $table_name = $data_type['name'];",
          "677:             $name = ucwords(str_replace('_', '', $table_name));",
          "679:             $id = $data_type->id;",
          "680:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/crud/delete'), [",
          "681:                 'id' => $id,",
          "682:             ]);",
          "683:             $response->assertSuccessful();",
          "684:         }",
          "687:         foreach ($data_types as $key => $data_type) {",
          "688:             $data_type->delete();",
          "689:         }",
          "692:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/permissions/delete'), [",
          "693:             'id' => $permission_id,",
          "694:         ]);",
          "695:         $response->assertSuccessful();",
          "697:         $permission = Permission::find($permission_id);",
          "698:         $this->assertEmpty($permission);",
          "699:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1540:         }",
          "1541:     }",
          "1543:     public function testSingleMultipleDeleteEntityCrudManagement()",
          "1544:     {",
          "1545:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1366:     public function testBrowseIsPublicPermissionEntity()",
          "1367:     {",
          "1369:         $table_name = 'table_public';",
          "1370:         Schema::dropIfExists($table_name);",
          "1371:         if (!Schema::hasTable($table_name)) {",
          "1372:             Schema::create($table_name, function (Blueprint $table) use ($table_name) {",
          "1373:                 $table->id();",
          "1374:                 $table->text('name')->nullable();",
          "1375:                 $table->bigInteger('user_id')->nullable()->unsigned();",
          "1376:                 $table->foreign('user_id')->references('id')->on(config('badaso.database.prefix') . 'users')->onDelete('cascade');",
          "1377:                 $table->softDeletes();",
          "1378:                 $table->timestamps();",
          "1379:             });",
          "1380:         }",
          "1382:         $table_names[] = $table_name;",
          "1385:         $rows = [",
          "1386:             [",
          "1387:                 'field' => 'id',",
          "1388:                 'type' => 'integer',",
          "1389:                 'displayName' => 'Id',",
          "1390:                 'required' => rand(0, 1),",
          "1391:                 'browse' => rand(0, 1),",
          "1392:                 'read' => rand(0, 1),",
          "1393:                 'edit' => 0,",
          "1394:                 'add' => 0,",
          "1395:                 'delete' => rand(0, 1),",
          "1396:                 'details' => json_encode((object) []),",
          "1397:                 'order' => 1,",
          "1398:                 'setRelation' => false,",
          "1399:             ],",
          "1400:             [",
          "1401:                 'field' => 'name',",
          "1402:                 'type' => 'text',",
          "1403:                 'displayName' => 'Name',",
          "1404:                 'required' => rand(0, 1),",
          "1405:                 'browse' => rand(0, 1),",
          "1406:                 'read' => rand(0, 1),",
          "1407:                 'edit' => 0,",
          "1408:                 'add' => 0,",
          "1409:                 'delete' => rand(0, 1),",
          "1410:                 'details' => json_encode((object) []),",
          "1411:                 'order' => 1,",
          "1412:                 'setRelation' => false,",
          "1413:             ],",
          "1414:             [",
          "1415:                 'field' => 'user_id',",
          "1416:                 'type' => 'data_identifier',",
          "1417:                 'displayName' => 'User Id',",
          "1418:                 'required' => rand(0, 1),",
          "1419:                 'browse' => rand(0, 1),",
          "1420:                 'read' => rand(0, 1),",
          "1421:                 'edit' => 0,",
          "1422:                 'add' => 0,",
          "1423:                 'delete' => rand(0, 1),",
          "1424:                 'details' => json_encode((object) []),",
          "1425:                 'order' => 1,",
          "1426:                 'setRelation' => false,",
          "1427:             ],",
          "1428:             [",
          "1429:                 'field' => 'created_at',",
          "1430:                 'type' => 'datetime',",
          "1431:                 'displayName' => 'Created At',",
          "1432:                 'required' => rand(0, 1),",
          "1433:                 'browse' => rand(0, 1),",
          "1434:                 'read' => rand(0, 1),",
          "1435:                 'edit' => 0,",
          "1436:                 'add' => 0,",
          "1437:                 'delete' => rand(0, 1),",
          "1438:                 'details' => json_encode((object) []),",
          "1439:                 'order' => 1,",
          "1440:                 'setRelation' => false,",
          "1441:             ],",
          "1442:             [",
          "1443:                 'field' => 'updated_at',",
          "1444:                 'type' => 'datetime',",
          "1445:                 'displayName' => 'Update At',",
          "1446:                 'required' => rand(0, 1),",
          "1447:                 'browse' => rand(0, 1),",
          "1448:                 'read' => rand(0, 1),",
          "1449:                 'edit' => 0,",
          "1450:                 'add' => 0,",
          "1451:                 'delete' => rand(0, 1),",
          "1452:                 'details' => json_encode((object) []),",
          "1453:                 'order' => 1,",
          "1454:                 'setRelation' => false,",
          "1455:             ],",
          "1456:             [",
          "1457:                 'field' => 'deleted_at',",
          "1458:                 'type' => 'datetime',",
          "1459:                 'displayName' => 'Deleted At',",
          "1460:                 'required' => rand(0, 1),",
          "1461:                 'browse' => rand(0, 1),",
          "1462:                 'read' => rand(0, 1),",
          "1463:                 'edit' => 0,",
          "1464:                 'add' => 0,",
          "1465:                 'delete' => rand(0, 1),",
          "1466:                 'details' => json_encode((object) []),",
          "1467:                 'order' => 1,",
          "1468:                 'setRelation' => false,",
          "1469:             ],",
          "1470:         ];",
          "1471:         $table_label = ucwords(str_replace(['_'], ' ', $table_name));",
          "1472:         $request_body = [",
          "1473:             'name' =>  $table_name,",
          "1474:             'slug' =>  $table_name,",
          "1475:             'displayNameSingular' =>  $table_label,",
          "1476:             'displayNamePlural' =>  $table_label,",
          "1477:             'icon' =>  'add',",
          "1478:             'modelName' =>  '',",
          "1479:             'policyName' =>  '',",
          "1480:             'description' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',",
          "1481:             'generatePermissions' =>  1,",
          "1482:             'createSoftDelete' =>  rand(0, 1),",
          "1483:             'serverSide' =>  rand(0, 1),",
          "1484:             'details' =>  json_encode((object) []),",
          "1485:             'controller' =>  '',",
          "1486:             'orderColumn' =>  '',",
          "1487:             'orderDisplayColumn' =>  '',",
          "1488:             'orderDirection' =>  '',",
          "1489:             'notification' =>   array_slice(['onCreate', 'onDelete', 'onUpdate', 'onRead'], 0, rand(0, 3)),",
          "1490:             'isMaintenance' => rand(0, 1),",
          "1491:             'rows' => $rows,",
          "1492:         ];",
          "1493:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "1494:         $response->assertSuccessful();",
          "1497:         $permissions = Permission::where('key', 'browse_' . $table_name)->get();",
          "1498:         foreach ($permissions as $key => $value) {",
          "1499:             $permission_id = $value->id;",
          "1500:         }",
          "1501:         $request_data = [",
          "1502:             'always_allow' =>  false,",
          "1503:             'description' =>  Str::uuid(),",
          "1504:             'is_public' =>  true,",
          "1505:             'key' => 'browse_' . $table_name,",
          "1506:             'id' => $permission_id,",
          "1507:         ];",
          "1508:         $response_permission = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/permissions/edit'), $request_data);",
          "1509:         $response_permission->assertSuccessful();",
          "1512:         $response_entity = $this->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/read'), [",
          "1513:             'table' => $request_body['slug'],",
          "1514:         ]);",
          "1515:         $response_entity->assertSuccessful();",
          "1518:         $data_types = DataType::whereIn('name', $table_names)->get();",
          "1519:         foreach ($data_types as $key => $data_type) {",
          "1520:             $id = $data_type->id;",
          "1521:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/crud/delete'), [",
          "1522:                 'id' => $id,",
          "1523:             ]);",
          "1524:             $response->assertSuccessful();",
          "1525:             $data_type->delete();",
          "1526:         }",
          "1529:         Schema::dropIfExists($table_name);",
          "1530:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4052c09cd0f149f413ad8a1c9777c1a7cf6776e6",
      "candidate_info": {
        "commit_hash": "4052c09cd0f149f413ad8a1c9777c1a7cf6776e6",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/4052c09cd0f149f413ad8a1c9777c1a7cf6776e6",
        "files": [
          "src/resources/js/pages/crud-generated/edit.vue"
        ],
        "message": "fix date displayed crud generated",
        "before_after_code_files": [
          "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue": [
          "File: src/resources/js/pages/crud-generated/edit.vue -> src/resources/js/pages/crud-generated/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:               data.value = parseInt(",
          "514:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "515:               );",
          "518:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "519:               ]",
          "520:                 ? this.record[",
          "521:                     this.$caseConvert.stringSnakeToCamel(data.field)",
          "522:                   ].replace(\" \", \"T\")",
          "523:                 : null;",
          "524:             } else if (data.value == undefined && data.type == \"hidden\") {",
          "525:               data.value = data.details.value ? data.details.value : \"\";",
          "526:             } else if (",
          "",
          "[Removed Lines]",
          "516:             } else if (data.type == \"datetime\") {",
          "517:               data.value = this.record[",
          "",
          "[Added Lines]",
          "516:             } else if (data.type == \"datetime\" || data.type == \"date\") {",
          "517:               var dateValue = this.record[",
          "524:               data.value = new Date(dateValue);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de7a48ae317cdb70ad11e068f62f5d8f445d0f7a",
      "candidate_info": {
        "commit_hash": "de7a48ae317cdb70ad11e068f62f5d8f445d0f7a",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/de7a48ae317cdb70ad11e068f62f5d8f445d0f7a",
        "files": [
          "src/Commands/BadasoTestSetup.php"
        ],
        "message": "commit",
        "before_after_code_files": [
          "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php": [
          "File: src/Commands/BadasoTestSetup.php -> src/Commands/BadasoTestSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:             </testsuites>",
          "58:             <coverage processUncoveredFiles=\"true\">",
          "59:                 <include>",
          "61:                     <directory suffix=\".php\">./vendor/badaso/core/src/Commands</directory>",
          "62:                     <directory suffix=\".php\">./vendor/badaso/core/src/Controllers</directory>",
          "63:                     <directory suffix=\".php\">./vendor/badaso/core/src/ContentManager</directory>",
          "",
          "[Removed Lines]",
          "60:                     <directory suffix=\".php\">./app</directory>",
          "",
          "[Added Lines]",
          "60:                     <!-- <directory suffix=\".php\">./app</directory> -->",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2592e16d69ae5dfa03134ff493da35aa6154fc3f",
      "candidate_info": {
        "commit_hash": "2592e16d69ae5dfa03134ff493da35aa6154fc3f",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/2592e16d69ae5dfa03134ff493da35aa6154fc3f",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "temp",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:                 if ($badaso_type == 'relation') {",
          "416:                     $destination_field['badaso_type'] = 'id';",
          "417:                     $destination_more_field['badaso_type'] = ['select_multiple'];",
          "419:                     $row['destinationTable'] = $table_names[0];",
          "420:                     $row['destinationTableColumn'] = $destination_field['badaso_type'];",
          "421:                     $row['destinationTableDisplayColumn'] = $destination_field['badaso_type'];",
          "",
          "[Removed Lines]",
          "418:                     $row['relationType'] = ['belongs_to', 'has_one', 'has_many'][rand(0, 2)];",
          "",
          "[Added Lines]",
          "418:                     $row['relationType'] = ['has_one', 'has_many'][rand(0, 1)];",
          "",
          "---------------"
        ]
      }
    }
  ]
}