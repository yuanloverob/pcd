{
  "cve_id": "CVE-2022-23525",
  "cve_desc": "Helm is a tool for managing Charts, pre-configured Kubernetes resources. Versions prior to 3.10.3 are subject to NULL Pointer Dereference in the _repo_package. The _repo_ package contains a handler that processes the index file of a repository. For example, the Helm client adds references to chart repositories where charts are managed. The _repo_ package parses the index file of the repository and loads it into structures Go can work with. Some index files can cause array data structures to be created causing a memory violation. Applications that use the _repo_ package in the Helm SDK to parse an index file can suffer a Denial of Service when that input causes a panic that cannot be recovered from. The Helm Client will panic with an index file that causes a memory violation panic. Helm is not a long running service so the panic will not affect future uses of the Helm client. This issue has been patched in 3.10.3. SDK users can validate index files that are correctly formatted before passing them to the _repo_ functions.",
  "repo": "helm/helm",
  "patch_hash": "638ebffbc2e445156f3978f02fd83d9af1e56f5b",
  "patch_info": {
    "commit_hash": "638ebffbc2e445156f3978f02fd83d9af1e56f5b",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/638ebffbc2e445156f3978f02fd83d9af1e56f5b",
    "files": [
      "pkg/repo/index.go",
      "pkg/repo/index_test.go",
      "pkg/repo/repo.go",
      "pkg/repo/repo_test.go"
    ],
    "message": "Merge pull request from GHSA-53c4-hhmh-vw5q\n\nUpdate repo handling",
    "before_after_code_files": [
      "pkg/repo/index.go||pkg/repo/index.go",
      "pkg/repo/index_test.go||pkg/repo/index_test.go",
      "pkg/repo/repo.go||pkg/repo/repo.go",
      "pkg/repo/repo_test.go||pkg/repo/repo_test.go"
    ]
  },
  "patch_diff": {
    "pkg/repo/index.go||pkg/repo/index.go": [
      "File: pkg/repo/index.go -> pkg/repo/index.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "120: func (i IndexFile) MustAdd(md *chart.Metadata, filename, baseURL, digest string) error {",
      "121:  if md.APIVersion == \"\" {",
      "122:   md.APIVersion = chart.APIVersionV1",
      "123:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:  if i.Entries == nil {",
      "122:   return errors.New(\"entries not initialized\")",
      "123:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "340:  for name, cvs := range i.Entries {",
      "341:   for idx := len(cvs) - 1; idx >= 0; idx-- {",
      "342:    if cvs[idx].APIVersion == \"\" {",
      "343:     cvs[idx].APIVersion = chart.APIVersionV1",
      "344:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "346:    if cvs[idx] == nil {",
      "347:     log.Printf(\"skipping loading invalid entry for chart %q from %s: empty entry\", name, source)",
      "348:     continue",
      "349:    }",
      "",
      "---------------"
    ],
    "pkg/repo/index_test.go||pkg/repo/index_test.go": [
      "File: pkg/repo/index_test.go -> pkg/repo/index_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:       version: 1.0.0",
      "60:       home: https://github.com/something",
      "61:       digest: \"sha256:1234567890abcdef\"",
      "62: `",
      "63: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62: `",
      "63:  indexWithEmptyEntry = `",
      "64: apiVersion: v1",
      "65: entries:",
      "66:   grafana:",
      "67:   - apiVersion: v2",
      "68:     name: grafana",
      "69:   foo:",
      "70:   -",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:  }",
      "153: }",
      "155: func TestLoadIndex_Empty(t *testing.T) {",
      "156:  if _, err := loadIndex([]byte(\"\"), \"indexWithEmpty\"); err == nil {",
      "157:   t.Errorf(\"Expected an error when index.yaml is empty.\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164: func TestLoadIndex_EmptyEntry(t *testing.T) {",
      "165:  if _, err := loadIndex([]byte(indexWithEmptyEntry), \"indexWithEmptyEntry\"); err != nil {",
      "166:   t.Errorf(\"unexpected error: %s\", err)",
      "167:  }",
      "168: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "526:   t.Fatal(\"Index files doesn't contain expected content\")",
      "527:  }",
      "528: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545: func TestAddFileIndexEntriesNil(t *testing.T) {",
      "546:  i := NewIndexFile()",
      "547:  i.APIVersion = chart.APIVersionV1",
      "548:  i.Entries = nil",
      "549:  for _, x := range []struct {",
      "550:   md       *chart.Metadata",
      "551:   filename string",
      "552:   baseURL  string",
      "553:   digest   string",
      "554:  }{",
      "555:   {&chart.Metadata{APIVersion: \"v2\", Name: \" \", Version: \"8033-5.apinie+s.r\"}, \"setter-0.1.9+beta.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
      "556:  } {",
      "557:   if err := i.MustAdd(x.md, x.filename, x.baseURL, x.digest); err == nil {",
      "558:    t.Errorf(\"expected err to be non-nil when entries not initialized\")",
      "559:   }",
      "560:  }",
      "561: }",
      "",
      "---------------"
    ],
    "pkg/repo/repo.go||pkg/repo/repo.go": [
      "File: pkg/repo/repo.go -> pkg/repo/repo.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "100:  cp := []*Entry{}",
      "101:  found := false",
      "102:  for _, rf := range r.Repositories {",
      "103:   if rf.Name == name {",
      "104:    found = true",
      "105:    continue",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:   if rf == nil {",
      "104:    continue",
      "105:   }",
      "",
      "---------------"
    ],
    "pkg/repo/repo_test.go||pkg/repo/repo_test.go": [
      "File: pkg/repo/repo_test.go -> pkg/repo/repo_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:   t.Errorf(\"expected prompt `couldn't load repositories file`\")",
      "226:  }",
      "227: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "229: func TestRemoveRepositoryInvalidEntries(t *testing.T) {",
      "230:  sampleRepository := NewFile()",
      "231:  sampleRepository.Add(",
      "232:   &Entry{",
      "233:    Name: \"stable\",",
      "234:    URL:  \"https://example.com/stable/charts\",",
      "235:   },",
      "236:   &Entry{",
      "237:    Name: \"incubator\",",
      "238:    URL:  \"https://example.com/incubator\",",
      "239:   },",
      "240:   &Entry{},",
      "241:   nil,",
      "242:   &Entry{",
      "243:    Name: \"test\",",
      "244:    URL:  \"https://example.com/test\",",
      "245:   },",
      "246:  )",
      "248:  removeRepository := \"stable\"",
      "249:  found := sampleRepository.Remove(removeRepository)",
      "250:  if !found {",
      "251:   t.Errorf(\"expected repository %s not found\", removeRepository)",
      "252:  }",
      "254:  found = sampleRepository.Has(removeRepository)",
      "255:  if found {",
      "256:   t.Errorf(\"repository %s not deleted\", removeRepository)",
      "257:  }",
      "258: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c0e203529d4b9d51c5fe57c9e0bd9df1bd95ab4",
      "candidate_info": {
        "commit_hash": "7c0e203529d4b9d51c5fe57c9e0bd9df1bd95ab4",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/7c0e203529d4b9d51c5fe57c9e0bd9df1bd95ab4",
        "files": [
          "pkg/repo/index.go",
          "pkg/repo/index_test.go",
          "pkg/repo/repo.go",
          "pkg/repo/repo_test.go"
        ],
        "message": "Update repo handling\n\nSigned-off-by: Martin Hickey <martin.hickey@ie.ibm.com>\n(cherry picked from commit 256e976331db4b7335ef721e411e7b59c5317ccb)",
        "before_after_code_files": [
          "pkg/repo/index.go||pkg/repo/index.go",
          "pkg/repo/index_test.go||pkg/repo/index_test.go",
          "pkg/repo/repo.go||pkg/repo/repo.go",
          "pkg/repo/repo_test.go||pkg/repo/repo_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go",
            "pkg/repo/repo.go||pkg/repo/repo.go",
            "pkg/repo/repo_test.go||pkg/repo/repo_test.go"
          ],
          "candidate": [
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go",
            "pkg/repo/repo.go||pkg/repo/repo.go",
            "pkg/repo/repo_test.go||pkg/repo/repo_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/repo/index.go||pkg/repo/index.go": [
          "File: pkg/repo/index.go -> pkg/repo/index.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: func (i IndexFile) MustAdd(md *chart.Metadata, filename, baseURL, digest string) error {",
          "121:  if md.APIVersion == \"\" {",
          "122:   md.APIVersion = chart.APIVersionV1",
          "123:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:  if i.Entries == nil {",
          "122:   return errors.New(\"entries not initialized\")",
          "123:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:  for name, cvs := range i.Entries {",
          "341:   for idx := len(cvs) - 1; idx >= 0; idx-- {",
          "342:    if cvs[idx].APIVersion == \"\" {",
          "343:     cvs[idx].APIVersion = chart.APIVersionV1",
          "344:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:    if cvs[idx] == nil {",
          "347:     log.Printf(\"skipping loading invalid entry for chart %q from %s: empty entry\", name, source)",
          "348:     continue",
          "349:    }",
          "",
          "---------------"
        ],
        "pkg/repo/index_test.go||pkg/repo/index_test.go": [
          "File: pkg/repo/index_test.go -> pkg/repo/index_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:       version: 1.0.0",
          "60:       home: https://github.com/something",
          "61:       digest: \"sha256:1234567890abcdef\"",
          "62: `",
          "63: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: `",
          "63:  indexWithEmptyEntry = `",
          "64: apiVersion: v1",
          "65: entries:",
          "66:   grafana:",
          "67:   - apiVersion: v2",
          "68:     name: grafana",
          "69:   foo:",
          "70:   -",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:  }",
          "153: }",
          "155: func TestLoadIndex_Empty(t *testing.T) {",
          "156:  if _, err := loadIndex([]byte(\"\"), \"indexWithEmpty\"); err == nil {",
          "157:   t.Errorf(\"Expected an error when index.yaml is empty.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: func TestLoadIndex_EmptyEntry(t *testing.T) {",
          "165:  if _, err := loadIndex([]byte(indexWithEmptyEntry), \"indexWithEmptyEntry\"); err != nil {",
          "166:   t.Errorf(\"unexpected error: %s\", err)",
          "167:  }",
          "168: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526:   t.Fatal(\"Index files doesn't contain expected content\")",
          "527:  }",
          "528: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: func TestAddFileIndexEntriesNil(t *testing.T) {",
          "546:  i := NewIndexFile()",
          "547:  i.APIVersion = chart.APIVersionV1",
          "548:  i.Entries = nil",
          "549:  for _, x := range []struct {",
          "550:   md       *chart.Metadata",
          "551:   filename string",
          "552:   baseURL  string",
          "553:   digest   string",
          "554:  }{",
          "555:   {&chart.Metadata{APIVersion: \"v2\", Name: \" \", Version: \"8033-5.apinie+s.r\"}, \"setter-0.1.9+beta.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "556:  } {",
          "557:   if err := i.MustAdd(x.md, x.filename, x.baseURL, x.digest); err == nil {",
          "558:    t.Errorf(\"expected err to be non-nil when entries not initialized\")",
          "559:   }",
          "560:  }",
          "561: }",
          "",
          "---------------"
        ],
        "pkg/repo/repo.go||pkg/repo/repo.go": [
          "File: pkg/repo/repo.go -> pkg/repo/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  cp := []*Entry{}",
          "101:  found := false",
          "102:  for _, rf := range r.Repositories {",
          "103:   if rf.Name == name {",
          "104:    found = true",
          "105:    continue",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   if rf == nil {",
          "104:    continue",
          "105:   }",
          "",
          "---------------"
        ],
        "pkg/repo/repo_test.go||pkg/repo/repo_test.go": [
          "File: pkg/repo/repo_test.go -> pkg/repo/repo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:   t.Errorf(\"expected prompt `couldn't load repositories file`\")",
          "226:  }",
          "227: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: func TestRemoveRepositoryInvalidEntries(t *testing.T) {",
          "230:  sampleRepository := NewFile()",
          "231:  sampleRepository.Add(",
          "232:   &Entry{",
          "233:    Name: \"stable\",",
          "234:    URL:  \"https://example.com/stable/charts\",",
          "235:   },",
          "236:   &Entry{",
          "237:    Name: \"incubator\",",
          "238:    URL:  \"https://example.com/incubator\",",
          "239:   },",
          "240:   &Entry{},",
          "241:   nil,",
          "242:   &Entry{",
          "243:    Name: \"test\",",
          "244:    URL:  \"https://example.com/test\",",
          "245:   },",
          "246:  )",
          "248:  removeRepository := \"stable\"",
          "249:  found := sampleRepository.Remove(removeRepository)",
          "250:  if !found {",
          "251:   t.Errorf(\"expected repository %s not found\", removeRepository)",
          "252:  }",
          "254:  found = sampleRepository.Has(removeRepository)",
          "255:  if found {",
          "256:   t.Errorf(\"repository %s not deleted\", removeRepository)",
          "257:  }",
          "258: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}