{
  "cve_id": "CVE-2024-25108",
  "cve_desc": "Pixelfed is an open source photo sharing platform. When processing requests authorization was improperly and insufficiently checked, allowing attackers to access far more functionality than users intended, including to the administrative and moderator functionality of the Pixelfed server. This vulnerability affects every version of Pixelfed between v0.10.4 and v0.11.9, inclusive. A proof of concept of this vulnerability exists. This vulnerability affects every local user of a Pixelfed server, and can potentially affect the servers' ability to federate. Some user interaction is required to setup the conditions to be able to exercise the vulnerability, but the attacker could conduct this attack time-delayed manner, where user interaction is not actively required. This vulnerability has been addressed in version 0.11.11. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "pixelfed/pixelfed",
  "patch_hash": "7e47d6dccb0393a2e95c42813c562c854882b037",
  "patch_info": {
    "commit_hash": "7e47d6dccb0393a2e95c42813c562c854882b037",
    "repo": "pixelfed/pixelfed",
    "commit_url": "https://github.com/pixelfed/pixelfed/commit/7e47d6dccb0393a2e95c42813c562c854882b037",
    "files": [
      "app/Auth/BearerTokenResponse.php",
      "app/Http/Controllers/Api/AdminApiController.php",
      "app/Http/Controllers/Api/ApiV1Controller.php",
      "app/Http/Controllers/Api/ApiV1Dot1Controller.php",
      "app/Http/Controllers/Api/ApiV2Controller.php",
      "app/Http/Controllers/Api/BaseApiController.php",
      "app/Http/Controllers/Api/V1/DomainBlockController.php",
      "app/Http/Controllers/Api/V1/TagsController.php",
      "app/Providers/AuthServiceProvider.php"
    ],
    "message": "Merge pull request from GHSA-gccq-h3xj-jgvf\n\n[staging] Implement proper OAuth authorization on API endpoints",
    "before_after_code_files": [
      "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php",
      "app/Http/Controllers/Api/AdminApiController.php||app/Http/Controllers/Api/AdminApiController.php",
      "app/Http/Controllers/Api/ApiV1Controller.php||app/Http/Controllers/Api/ApiV1Controller.php",
      "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
      "app/Http/Controllers/Api/ApiV2Controller.php||app/Http/Controllers/Api/ApiV2Controller.php",
      "app/Http/Controllers/Api/BaseApiController.php||app/Http/Controllers/Api/BaseApiController.php",
      "app/Http/Controllers/Api/V1/DomainBlockController.php||app/Http/Controllers/Api/V1/DomainBlockController.php",
      "app/Http/Controllers/Api/V1/TagsController.php||app/Http/Controllers/Api/V1/TagsController.php",
      "app/Providers/AuthServiceProvider.php||app/Providers/AuthServiceProvider.php"
    ]
  },
  "patch_diff": {
    "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php": [
      "File: app/Auth/BearerTokenResponse.php -> app/Auth/BearerTokenResponse.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:     protected function getExtraParams(AccessTokenEntityInterface $accessToken)",
      "19:     {",
      "20:         return [",
      "23:         ];",
      "24:     }",
      "25: }",
      "",
      "[Removed Lines]",
      "21:          'created_at' => time(),",
      "22:          'scope' => 'read write follow push'",
      "",
      "[Added Lines]",
      "21:             'created_at' => time(),",
      "22:             'scope' => implode(' ', $accessToken->getScopes())",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/AdminApiController.php||app/Http/Controllers/Api/AdminApiController.php": [
      "File: app/Http/Controllers/Api/AdminApiController.php -> app/Http/Controllers/Api/AdminApiController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: {",
      "41:     public function supported(Request $request)",
      "42:     {",
      "44:         abort_unless($request->user()->is_admin == 1, 404);",
      "46:         return response()->json(['supported' => true]);",
      "47:     }",
      "49:     public function getStats(Request $request)",
      "50:     {",
      "52:         abort_unless($request->user()->is_admin == 1, 404);",
      "54:         $res = AdminStatsService::summary();",
      "55:         $res['autospam_count'] = AccountInterstitial::whereType('post.autospam')",
      "",
      "[Removed Lines]",
      "43:         abort_if(!$request->user(), 404);",
      "51:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "43:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "46:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "53:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "56:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     public function autospam(Request $request)",
      "62:     {",
      "64:         abort_unless($request->user()->is_admin == 1, 404);",
      "66:         $appeals = AccountInterstitial::whereType('post.autospam')",
      "67:             ->whereNull('appeal_handled_at')",
      "",
      "[Removed Lines]",
      "63:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "67:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "70:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:     public function autospamHandle(Request $request)",
      "97:     {",
      "99:         abort_unless($request->user()->is_admin == 1, 404);",
      "101:         $this->validate($request, [",
      "102:             'action' => 'required|in:dismiss,approve,dismiss-all,approve-all,delete-post,delete-account',",
      "",
      "[Removed Lines]",
      "98:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "104:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "107:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "240:     public function modReports(Request $request)",
      "241:     {",
      "243:         abort_unless($request->user()->is_admin == 1, 404);",
      "245:         $reports = Report::whereNull('admin_seen')",
      "246:             ->orderBy('created_at','desc')",
      "",
      "[Removed Lines]",
      "242:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "250:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "253:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "286:     public function modReportHandle(Request $request)",
      "287:     {",
      "289:         abort_unless($request->user()->is_admin == 1, 404);",
      "291:         $this->validate($request, [",
      "292:             'action'    => 'required|string',",
      "",
      "[Removed Lines]",
      "288:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "298:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "301:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "344:     public function getConfiguration(Request $request)",
      "345:     {",
      "347:         abort_unless($request->user()->is_admin == 1, 404);",
      "348:         abort_unless(config('instance.enable_cc'), 400);",
      "350:         return collect([",
      "",
      "[Removed Lines]",
      "346:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "358:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "361:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "387:     public function updateConfiguration(Request $request)",
      "388:     {",
      "390:         abort_unless($request->user()->is_admin == 1, 404);",
      "391:         abort_unless(config('instance.enable_cc'), 400);",
      "393:         $this->validate($request, [",
      "",
      "[Removed Lines]",
      "389:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "404:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "407:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "449:     public function getUsers(Request $request)",
      "450:     {",
      "452:         abort_unless($request->user()->is_admin == 1, 404);",
      "453:         $this->validate($request, [",
      "454:             'sort' => 'sometimes|in:asc,desc',",
      "455:         ]);",
      "",
      "[Removed Lines]",
      "451:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "469:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "472:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "467:     public function getUser(Request $request)",
      "468:     {",
      "470:         abort_unless($request->user()->is_admin == 1, 404);",
      "472:         $id = $request->input('user_id');",
      "473:         $key = 'pf-admin-api:getUser:byId:' . $id;",
      "",
      "[Removed Lines]",
      "469:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "490:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "493:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "498:     public function userAdminAction(Request $request)",
      "499:     {",
      "501:         abort_unless($request->user()->is_admin == 1, 404);",
      "503:         $this->validate($request, [",
      "504:             'id' => 'required',",
      "",
      "[Removed Lines]",
      "500:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "523:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "526:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "670:     public function instances(Request $request)",
      "671:     {",
      "673:         abort_unless($request->user()->is_admin == 1, 404);",
      "675:         $this->validate($request, [",
      "676:             'q' => 'sometimes',",
      "",
      "[Removed Lines]",
      "672:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "697:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "700:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "708:     public function getInstance(Request $request)",
      "709:     {",
      "711:         abort_unless($request->user()->is_admin == 1, 404);",
      "713:         $id = $request->input('id');",
      "714:         $res = Instance::findOrFail($id);",
      "",
      "[Removed Lines]",
      "710:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "737:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "740:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "719:     public function moderateInstance(Request $request)",
      "720:     {",
      "722:         abort_unless($request->user()->is_admin == 1, 404);",
      "724:         $this->validate($request, [",
      "725:             'id' => 'required',",
      "",
      "[Removed Lines]",
      "721:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "750:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "753:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "743:     public function refreshInstanceStats(Request $request)",
      "744:     {",
      "746:         abort_unless($request->user()->is_admin == 1, 404);",
      "748:         $this->validate($request, [",
      "749:             'id' => 'required',",
      "",
      "[Removed Lines]",
      "745:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "776:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "779:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "761:     public function getAllStats(Request $request)",
      "762:     {",
      "764:         abort_unless($request->user()->is_admin === 1, 404);",
      "766:         if($request->has('refresh')) {",
      "767:             Cache::forget('admin-api:instance-all-stats-v1');",
      "",
      "[Removed Lines]",
      "763:         abort_if(!$request->user(), 404);",
      "",
      "[Added Lines]",
      "796:         abort_if(!$request->user() || !$request->user()->token(), 404);",
      "799:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/ApiV1Controller.php||app/Http/Controllers/Api/ApiV1Controller.php": [
      "File: app/Http/Controllers/Api/ApiV1Controller.php -> app/Http/Controllers/Api/ApiV1Controller.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:         return response()->json($res, $code, $headers, JSON_UNESCAPED_SLASHES);",
      "126:     }",
      "128:     public function getApp(Request $request)",
      "129:     {",
      "134:         $client = $request->user()->token()->client;",
      "135:         $res = [",
      "",
      "[Removed Lines]",
      "130:         if(!$request->user()) {",
      "131:             return response('', 403);",
      "132:         }",
      "",
      "[Added Lines]",
      "133:         # FIXME: /api/v1/apps/verify_credentials should be accessible with any",
      "134:         # valid Access Token, not just a user's access token (i.e., client",
      "135:         # credentails grant flow access tokens)",
      "136:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     public function verifyCredentials(Request $request)",
      "189:     {",
      "190:         $user = $request->user();",
      "193:         abort_if($user->status != null, 403);",
      "194:         AccountService::setLastActive($user->id);",
      "",
      "[Removed Lines]",
      "192:         abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "197:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "198:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "216:     public function accountById(Request $request, $id)",
      "217:     {",
      "218:         $res = $request->has(self::PF_API_ENTITY_KEY) ? AccountService::get($id, true) : AccountService::getMastodon($id, true);",
      "219:         if(!$res) {",
      "220:             return response()->json(['error' => 'Record not found'], 404);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "228:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "234:     public function accountUpdateCredentials(Request $request)",
      "235:     {",
      "238:         if(config('pixelfed.bouncer.cloud_ips.ban_api')) {",
      "239:             abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "236:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "248:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "249:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "477:     public function accountFollowersById(Request $request, $id)",
      "478:     {",
      "481:         $account = AccountService::get($id);",
      "482:         abort_if(!$account, 404);",
      "",
      "[Removed Lines]",
      "479:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "492:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "493:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "574:     public function accountFollowingById(Request $request, $id)",
      "575:     {",
      "578:         $account = AccountService::get($id);",
      "579:         abort_if(!$account, 404);",
      "",
      "[Removed Lines]",
      "576:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "590:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "591:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "671:     public function accountStatusesById(Request $request, $id)",
      "672:     {",
      "673:         $user = $request->user();",
      "675:         $this->validate($request, [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "688:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "689:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "775:     public function accountFollowById(Request $request, $id)",
      "776:     {",
      "779:         $user = $request->user();",
      "780:         abort_if($user->has_roles && !UserRoleService::can('can-follow', $user->id), 403, 'Invalid permissions for this action');",
      "",
      "[Removed Lines]",
      "777:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "795:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "796:         abort_unless($request->user()->tokenCan('follow'), 403);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "867:     public function accountUnfollowById(Request $request, $id)",
      "868:     {",
      "871:         $user = $request->user();",
      "",
      "[Removed Lines]",
      "869:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "888:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "889:         abort_unless($request->user()->tokenCan('follow'), 403);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "937:     public function accountRelationshipsById(Request $request)",
      "938:     {",
      "941:         $this->validate($request, [",
      "942:             'id'    => 'required|array|min:1|max:20',",
      "",
      "[Removed Lines]",
      "939:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "959:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "960:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "966:     public function accountSearch(Request $request)",
      "967:     {",
      "970:         $this->validate($request, [",
      "971:             'q'         => 'required|string|min:1|max:255',",
      "",
      "[Removed Lines]",
      "968:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "989:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "990:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1009:     public function accountBlocks(Request $request)",
      "1010:     {",
      "1013:         $this->validate($request, [",
      "1014:             'limit'     => 'nullable|integer|min:1|max:40',",
      "",
      "[Removed Lines]",
      "1011:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1033:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1034:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1046:     public function accountBlockById(Request $request, $id)",
      "1047:     {",
      "1050:         $user = $request->user();",
      "1051:         $pid = $user->profile_id ?? $user->profile->id;",
      "",
      "[Removed Lines]",
      "1048:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1071:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1072:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1139:     public function accountUnblockById(Request $request, $id)",
      "1140:     {",
      "1143:         $user = $request->user();",
      "1144:         $pid = $user->profile_id ?? $user->profile->id;",
      "",
      "[Removed Lines]",
      "1141:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1165:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1166:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1190:     public function accountDomainBlocks(Request $request)",
      "1191:     {",
      "1193:         return response()->json([]);",
      "1194:     }",
      "",
      "[Removed Lines]",
      "1192:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1217:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1218:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1203:     public function accountEndorsements(Request $request)",
      "1204:     {",
      "1206:         return response()->json([]);",
      "1207:     }",
      "",
      "[Removed Lines]",
      "1205:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1232:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1233:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1216:     public function accountFavourites(Request $request)",
      "1217:     {",
      "1219:         $this->validate($request, [",
      "1220:             'limit' => 'sometimes|integer|min:1|max:40'",
      "1221:         ]);",
      "",
      "[Removed Lines]",
      "1218:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1247:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1248:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1272:     public function statusFavouriteById(Request $request, $id)",
      "1273:     {",
      "1276:         $user = $request->user();",
      "1277:         abort_if($user->has_roles && !UserRoleService::can('can-like', $user->id), 403, 'Invalid permissions for this action');",
      "",
      "[Removed Lines]",
      "1274:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1305:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1306:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1339:     public function statusUnfavouriteById(Request $request, $id)",
      "1340:     {",
      "1343:         $user = $request->user();",
      "1344:         abort_if($user->has_roles && !UserRoleService::can('can-like', $user->id), 403, 'Invalid permissions for this action');",
      "",
      "[Removed Lines]",
      "1341:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1373:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1374:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1382:     public function accountFilters(Request $request)",
      "1383:     {",
      "1386:         return response()->json([]);",
      "1387:     }",
      "",
      "[Removed Lines]",
      "1384:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1417:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1418:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1396:     public function accountFollowRequests(Request $request)",
      "1397:     {",
      "1399:         $this->validate($request, [",
      "1400:             'limit' => 'sometimes|integer|min:1|max:100'",
      "1401:         ]);",
      "",
      "[Removed Lines]",
      "1398:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1432:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1433:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1426:     public function accountFollowRequestAccept(Request $request, $id)",
      "1427:     {",
      "1429:         $pid = $request->user()->profile_id;",
      "1430:         $target = AccountService::getMastodon($id);",
      "",
      "[Removed Lines]",
      "1428:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1464:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1465:         abort_unless($request->user()->tokenCan('follow'), 403);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1483:     public function accountFollowRequestReject(Request $request, $id)",
      "1484:     {",
      "1486:         $pid = $request->user()->profile_id;",
      "1487:         $target = AccountService::getMastodon($id);",
      "",
      "[Removed Lines]",
      "1485:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1523:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1524:         abort_unless($request->user()->tokenCan('follow'), 403);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1519:     public function accountSuggestions(Request $request)",
      "1520:     {",
      "",
      "[Removed Lines]",
      "1521:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1561:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1562:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1620:     public function accountLists(Request $request)",
      "1621:     {",
      "1624:         return response()->json([]);",
      "1625:     }",
      "",
      "[Removed Lines]",
      "1622:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1663:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1664:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1634:     public function accountListsById(Request $request, $id)",
      "1635:     {",
      "1638:         return response()->json([]);",
      "1639:     }",
      "",
      "[Removed Lines]",
      "1636:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1678:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1679:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1647:     public function mediaUpload(Request $request)",
      "1648:     {",
      "1651:         $this->validate($request, [",
      "1652:             'file.*' => [",
      "",
      "[Removed Lines]",
      "1649:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1692:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1693:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1783:     public function mediaUpdate(Request $request, $id)",
      "1784:     {",
      "1787:         $this->validate($request, [",
      "1788:           'description' => 'nullable|string|max:' . config_cache('pixelfed.max_altext_length')",
      "",
      "[Removed Lines]",
      "1785:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1829:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1830:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1836:     public function mediaGet(Request $request, $id)",
      "1837:     {",
      "1840:         $user = $request->user();",
      "1841:         abort_if($user->has_roles && !UserRoleService::can('can-post', $user->id), 403, 'Invalid permissions for this action');",
      "",
      "[Removed Lines]",
      "1838:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1883:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1884:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1859:     public function mediaUploadV2(Request $request)",
      "1860:     {",
      "1863:         $this->validate($request, [",
      "1864:             'file.*' => [",
      "",
      "[Removed Lines]",
      "1861:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "1907:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "1908:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "2000:     public function accountMutes(Request $request)",
      "2001:     {",
      "2004:         $this->validate($request, [",
      "2005:             'limit' => 'nullable|integer|min:1|max:40'",
      "",
      "[Removed Lines]",
      "2002:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2049:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2050:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "2035:     public function accountMuteById(Request $request, $id)",
      "2036:     {",
      "2039:         $user = $request->user();",
      "2040:         $pid = $user->profile_id;",
      "",
      "[Removed Lines]",
      "2037:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2085:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2086:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "2093:     public function accountUnmuteById(Request $request, $id)",
      "2094:     {",
      "2097:         $user = $request->user();",
      "2098:         $pid = $user->profile_id;",
      "",
      "[Removed Lines]",
      "2095:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2144:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2145:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "2129:     public function accountNotifications(Request $request)",
      "2130:     {",
      "2133:         $this->validate($request, [",
      "2134:             'limit' => 'nullable|integer|min:1|max:100',",
      "",
      "[Removed Lines]",
      "2131:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2181:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2182:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "2205:     public function timelineHome(Request $request)",
      "2206:     {",
      "2208:             'page'        => 'sometimes|integer|max:40',",
      "2209:             'min_id'      => 'sometimes|integer|min:0|max:' . PHP_INT_MAX,",
      "2210:             'max_id'      => 'sometimes|integer|min:0|max:' . PHP_INT_MAX,",
      "",
      "[Removed Lines]",
      "2207:         $this->validate($request,[",
      "",
      "[Added Lines]",
      "2258:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2259:         abort_unless($request->user()->tokenCan('read'), 403);",
      "2261:         $this->validate($request, [",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "2607:     public function conversations(Request $request)",
      "2608:     {",
      "2610:         $this->validate($request, [",
      "2611:             'limit' => 'min:1|max:40',",
      "2612:             'scope' => 'nullable|in:inbox,sent,requests'",
      "",
      "[Removed Lines]",
      "2609:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2663:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2664:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "2684:     public function statusById(Request $request, $id)",
      "2685:     {",
      "2687:         AccountService::setLastActive($request->user()->id);",
      "2688:         $pid = $request->user()->profile_id;",
      "",
      "[Removed Lines]",
      "2686:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2742:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2743:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "2731:     public function statusContext(Request $request, $id)",
      "2732:     {",
      "2735:         $user = $request->user();",
      "2736:         AccountService::setLastActive($user->id);",
      "",
      "[Removed Lines]",
      "2733:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2791:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2792:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "2804:     public function statusCard(Request $request, $id)",
      "2805:     {",
      "2807:         $res = [];",
      "2808:         return response()->json($res);",
      "2809:     }",
      "",
      "[Removed Lines]",
      "2806:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2865:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2866:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "2818:     public function statusRebloggedBy(Request $request, $id)",
      "2819:     {",
      "2822:         $this->validate($request, [",
      "2823:             'limit' => 'sometimes|integer|min:1|max:80'",
      "",
      "[Removed Lines]",
      "2820:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2881:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2882:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "2914:     public function statusFavouritedBy(Request $request, $id)",
      "2915:     {",
      "2918:         $this->validate($request, [",
      "2919:             'limit' => 'nullable|integer|min:1|max:80'",
      "",
      "[Removed Lines]",
      "2916:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "2978:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "2979:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "3011:     public function statusCreate(Request $request)",
      "3012:     {",
      "3015:         $this->validate($request, [",
      "3016:             'status' => 'nullable|string',",
      "",
      "[Removed Lines]",
      "3013:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3076:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3077:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "3226:     public function statusDelete(Request $request, $id)",
      "3227:     {",
      "3229:         AccountService::setLastActive($request->user()->id);",
      "3230:         $status = Status::whereProfileId($request->user()->profile->id)",
      "3231:         ->findOrFail($id);",
      "",
      "[Removed Lines]",
      "3228:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3292:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3293:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "3252:     public function statusShare(Request $request, $id)",
      "3253:     {",
      "3256:         $user = $request->user();",
      "3257:         abort_if($user->has_roles && !UserRoleService::can('can-share', $user->id), 403, 'Invalid permissions for this action');",
      "",
      "[Removed Lines]",
      "3254:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3320:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3321:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "3304:     public function statusUnshare(Request $request, $id)",
      "3305:     {",
      "3308:         $user = $request->user();",
      "3309:         abort_if($user->has_roles && !UserRoleService::can('can-share', $user->id), 403, 'Invalid permissions for this action');",
      "",
      "[Removed Lines]",
      "3306:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3373:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3374:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "3347:     public function timelineHashtag(Request $request, $hashtag)",
      "3348:     {",
      "3351:         $this->validate($request,[",
      "3352:           'page'        => 'nullable|integer|max:40',",
      "",
      "[Removed Lines]",
      "3349:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3417:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3418:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "3448:     public function bookmarks(Request $request)",
      "3449:     {",
      "3452:         $this->validate($request, [",
      "3453:             'limit' => 'nullable|integer|min:1|max:40',",
      "",
      "[Removed Lines]",
      "3450:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3519:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3520:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "3515:     public function bookmarkStatus(Request $request, $id)",
      "3516:     {",
      "3519:         $status = Status::findOrFail($id);",
      "3520:         $pid = $request->user()->profile_id;",
      "",
      "[Removed Lines]",
      "3517:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3587:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3588:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "3555:     public function unbookmarkStatus(Request $request, $id)",
      "3556:     {",
      "3559:         $status = Status::findOrFail($id);",
      "3560:         $pid = $request->user()->profile_id;",
      "",
      "[Removed Lines]",
      "3557:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3628:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3629:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "3587:     public function discoverPosts(Request $request)",
      "3588:     {",
      "3591:         $this->validate($request, [",
      "3592:             'limit' => 'integer|min:1|max:40'",
      "",
      "[Removed Lines]",
      "3589:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3661:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3662:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "3596:         $pid = $request->user()->profile_id;",
      "3597:         $filters = UserFilterService::filters($pid);",
      "3598:         $forYou = DiscoverService::getForYou();",
      "3600:             return StatusService::getMastodon($post);",
      "3601:         })",
      "3610:         return $this->json(compact('posts'));",
      "3611:     }",
      "3619:     public function statusReplies(Request $request, $id)",
      "3620:     {",
      "3623:         $this->validate($request, [",
      "3624:             'limit' => 'int|min:1|max:10',",
      "",
      "[Removed Lines]",
      "3599:         $posts = $forYou->take(50)->map(function($post) {",
      "3602:         ->filter(function($post) use($filters) {",
      "3603:             return $post &&",
      "3604:                 isset($post['account']) &&",
      "3605:                 isset($post['account']['id']) &&",
      "3606:                 !in_array($post['account']['id'], $filters);",
      "3607:         })",
      "3608:         ->take(12)",
      "3609:         ->values();",
      "3621:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3672:         $posts = $forYou->take(50)->map(function ($post) {",
      "3675:             ->filter(function ($post) use ($filters) {",
      "3676:                 return $post &&",
      "3677:                     isset($post['account']) &&",
      "3678:                     isset($post['account']['id']) &&",
      "3679:                     !in_array($post['account']['id'], $filters);",
      "3680:             })",
      "3681:             ->take(12)",
      "3682:             ->values();",
      "3694:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3695:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "3707:     }",
      "3715:     public function statusState(Request $request, $id)",
      "3716:     {",
      "3719:         $status = Status::findOrFail($id);",
      "3720:         $pid = $request->user()->profile_id;",
      "",
      "[Removed Lines]",
      "3717:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3791:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3792:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "3724:     }",
      "3732:     public function discoverAccountsPopular(Request $request)",
      "3733:     {",
      "3736:         $pid = $request->user()->profile_id;",
      "",
      "[Removed Lines]",
      "3734:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3809:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3810:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 54 ---",
      "[Context before]",
      "3766:     }",
      "3774:     public function getPreferences(Request $request)",
      "3775:     {",
      "3778:         $pid = $request->user()->profile_id;",
      "3779:         $account = AccountService::get($pid);",
      "",
      "[Removed Lines]",
      "3776:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3852:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3853:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 55 ---",
      "[Context before]",
      "3788:     }",
      "3796:     public function getTrends(Request $request)",
      "3797:     {",
      "3800:         return $this->json([]);",
      "3801:     }",
      "3809:     public function getAnnouncements(Request $request)",
      "3810:     {",
      "3813:         return $this->json([]);",
      "3814:     }",
      "3822:     public function getMarkers(Request $request)",
      "3823:     {",
      "3826:         $type = $request->input('timeline');",
      "3827:         if(is_array($type)) {",
      "",
      "[Removed Lines]",
      "3798:         abort_if(!$request->user(), 403);",
      "3811:         abort_if(!$request->user(), 403);",
      "3824:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3875:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3876:         abort_unless($request->user()->tokenCan('read'), 403);",
      "3889:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3890:         abort_unless($request->user()->tokenCan('read'), 403);",
      "3903:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3904:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 56 ---",
      "[Context before]",
      "3835:     }",
      "3843:     public function setMarkers(Request $request)",
      "3844:     {",
      "3847:         $pid = $request->user()->profile_id;",
      "3848:         $home = $request->input('home[last_read_id]');",
      "",
      "[Removed Lines]",
      "3845:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "3925:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "3926:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php": [
      "File: app/Http/Controllers/Api/ApiV1Dot1Controller.php -> app/Http/Controllers/Api/ApiV1Dot1Controller.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:  public function report(Request $request)",
      "70:  {",
      "74:   abort_if($user->status != null, 403);",
      "76:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "",
      "[Removed Lines]",
      "71:   $user = $request->user();",
      "73:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "71:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "72:   abort_unless($request->user()->tokenCan('write'), 403);",
      "74:   $user = $request->user();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:  public function deleteAvatar(Request $request)",
      "177:  {",
      "181:   abort_if($user->status != null, 403);",
      "183:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "",
      "[Removed Lines]",
      "178:   $user = $request->user();",
      "180:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "179:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "180:   abort_unless($request->user()->tokenCan('write'), 403);",
      "182:   $user = $request->user();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "216:  public function accountPosts(Request $request, $id)",
      "217:  {",
      "221:   abort_if($user->status != null, 403);",
      "223:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "",
      "[Removed Lines]",
      "218:   $user = $request->user();",
      "220:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "220:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "221:   abort_unless($request->user()->tokenCan('read'), 403);",
      "223:   $user = $request->user();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "256:  public function accountChangePassword(Request $request)",
      "257:  {",
      "258:   $user = $request->user();",
      "260:   abort_if($user->status != null, 403);",
      "261:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "262:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "259:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "261:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "262:   abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "297:  public function accountLoginActivity(Request $request)",
      "298:  {",
      "299:   $user = $request->user();",
      "301:   abort_if($user->status != null, 403);",
      "302:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "303:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "300:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "304:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "305:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "337:  public function accountTwoFactor(Request $request)",
      "338:  {",
      "339:   $user = $request->user();",
      "341:   abort_if($user->status != null, 403);",
      "343:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "",
      "[Removed Lines]",
      "340:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "346:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "347:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "359:  public function accountEmailsFromPixelfed(Request $request)",
      "360:  {",
      "361:   $user = $request->user();",
      "363:   abort_if($user->status != null, 403);",
      "364:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "365:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "362:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "370:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "371:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "434:  public function accountApps(Request $request)",
      "435:  {",
      "436:   $user = $request->user();",
      "438:   abort_if($user->status != null, 403);",
      "440:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "",
      "[Removed Lines]",
      "437:   abort_if(!$user, 403);",
      "",
      "[Added Lines]",
      "447:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "448:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "641:  public function archive(Request $request, $id)",
      "642:  {",
      "645:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "646:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "643:   abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "656:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "657:   abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "673:  public function unarchive(Request $request, $id)",
      "674:  {",
      "677:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "678:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "675:   abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "689:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "690:   abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "704:  public function archivedPosts(Request $request)",
      "705:  {",
      "708:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "709:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "706:   abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "721:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "722:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "720:  public function placesById(Request $request, $id, $slug)",
      "721:  {",
      "724:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "725:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "722:   abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "738:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "739:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "758:  public function moderatePost(Request $request, $id)",
      "759:  {",
      "761:   abort_if($request->user()->is_admin != true, 403);",
      "763:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
      "764:    abort_if(BouncerService::checkIp($request->ip()), 404);",
      "",
      "[Removed Lines]",
      "760:   abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "777:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "779:   abort_unless($request->user()->tokenCan('admin:write'), 403);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "865:  public function getWebSettings(Request $request)",
      "866:  {",
      "868:         $uid = $request->user()->id;",
      "869:         $settings = UserSetting::firstOrCreate([",
      "870:             'user_id' => $uid",
      "",
      "[Removed Lines]",
      "867:   abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "885:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "886:   abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "878:     public function setWebSettings(Request $request)",
      "879:     {",
      "881:         $this->validate($request, [",
      "882:             'field' => 'required|in:enable_reblogs,hide_reblog_banner',",
      "883:             'value' => 'required'",
      "",
      "[Removed Lines]",
      "880:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "900:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "901:   abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "902:     public function getMutualAccounts(Request $request, $id)",
      "903:     {",
      "905:         $account = AccountService::get($id, true);",
      "906:         if(!$account || !isset($account['id'])) { return []; }",
      "907:         $res = collect(FollowerService::mutualAccounts($request->user()->profile_id, $id))",
      "",
      "[Removed Lines]",
      "904:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "926:   abort_if(!$request->user() || !$request->user()->token(), 403);",
      "927:   abort_unless($request->user()->tokenCan('follows'), 403);",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/ApiV2Controller.php||app/Http/Controllers/Api/ApiV2Controller.php": [
      "File: app/Http/Controllers/Api/ApiV2Controller.php -> app/Http/Controllers/Api/ApiV2Controller.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:     public function search(Request $request)",
      "150:     {",
      "153:         $this->validate($request, [",
      "154:             'q' => 'required|string|min:1|max:100',",
      "",
      "[Removed Lines]",
      "151:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "151:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "152:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "200:     public function mediaUploadV2(Request $request)",
      "201:     {",
      "204:         $this->validate($request, [",
      "205:             'file.*' => [",
      "",
      "[Removed Lines]",
      "202:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "203:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "204:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/BaseApiController.php||app/Http/Controllers/Api/BaseApiController.php": [
      "File: app/Http/Controllers/Api/BaseApiController.php -> app/Http/Controllers/Api/BaseApiController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:     public function notifications(Request $request)",
      "58:     {",
      "61:   $pid = $request->user()->profile_id;",
      "62:   $limit = $request->input('limit', 20);",
      "",
      "[Removed Lines]",
      "59:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "59:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "60:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:     public function avatarUpdate(Request $request)",
      "100:     {",
      "102:         $this->validate($request, [",
      "103:             'upload'   => 'required|mimetypes:image/jpeg,image/jpg,image/png|max:'.config('pixelfed.max_avatar_size'),",
      "104:         ]);",
      "",
      "[Removed Lines]",
      "101:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "102:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "103:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "135:     public function verifyCredentials(Request $request)",
      "136:     {",
      "137:         $user = $request->user();",
      "140:             Auth::logout();",
      "141:             abort(403);",
      "142:         }",
      "",
      "[Removed Lines]",
      "138:         abort_if(!$user, 403);",
      "139:         if($user->status != null) {",
      "",
      "[Added Lines]",
      "140:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "141:         abort_unless($request->user()->tokenCan('read'), 403);",
      "144:         if ($user->status != null) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "147:     public function accountLikes(Request $request)",
      "148:     {",
      "150:         $this->validate($request, [",
      "151:          'page' => 'sometimes|int|min:1|max:20',",
      "152:          'limit' => 'sometimes|int|min:1|max:10'",
      "",
      "[Removed Lines]",
      "149:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "154:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "155:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "174:     public function archive(Request $request, $id)",
      "175:     {",
      "178:         $status = Status::whereNull('in_reply_to_id')",
      "179:             ->whereNull('reblog_of_id')",
      "",
      "[Removed Lines]",
      "176:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "183:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "184:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "202:     public function unarchive(Request $request, $id)",
      "203:     {",
      "206:         $status = Status::whereNull('in_reply_to_id')",
      "207:             ->whereNull('reblog_of_id')",
      "",
      "[Removed Lines]",
      "204:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "212:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "213:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "229:     public function archivedPosts(Request $request)",
      "230:     {",
      "233:         $statuses = Status::whereProfileId($request->user()->profile_id)",
      "234:             ->whereScope('archived')",
      "",
      "[Removed Lines]",
      "231:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "240:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "241:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/V1/DomainBlockController.php||app/Http/Controllers/Api/V1/DomainBlockController.php": [
      "File: app/Http/Controllers/Api/V1/DomainBlockController.php -> app/Http/Controllers/Api/V1/DomainBlockController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:     public function index(Request $request)",
      "25:     {",
      "27:         $this->validate($request, [",
      "28:             'limit' => 'sometimes|integer|min:1|max:200'",
      "29:         ]);",
      "",
      "[Removed Lines]",
      "26:         abort_unless($request->user(), 403);",
      "",
      "[Added Lines]",
      "26:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "27:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:     public function store(Request $request)",
      "54:     {",
      "57:         $this->validate($request, [",
      "58:             'domain' => 'required|active_url|min:1|max:120'",
      "",
      "[Removed Lines]",
      "55:         abort_unless($request->user(), 403);",
      "",
      "[Added Lines]",
      "57:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "58:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100:     public function delete(Request $request)",
      "101:     {",
      "104:         $this->validate($request, [",
      "105:             'domain' => 'required|min:1|max:120'",
      "",
      "[Removed Lines]",
      "102:         abort_unless($request->user(), 403);",
      "",
      "[Added Lines]",
      "105:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "106:         abort_unless($request->user()->tokenCan('write'), 403);",
      "",
      "---------------"
    ],
    "app/Http/Controllers/Api/V1/TagsController.php||app/Http/Controllers/Api/V1/TagsController.php": [
      "File: app/Http/Controllers/Api/V1/TagsController.php -> app/Http/Controllers/Api/V1/TagsController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     public function relatedTags(Request $request, $tag)",
      "34:     {",
      "36:         $tag = Hashtag::whereSlug($tag)->firstOrFail();",
      "37:         return HashtagRelatedService::get($tag->id);",
      "38:     }",
      "",
      "[Removed Lines]",
      "35:         abort_unless($request->user(), 403);",
      "",
      "[Added Lines]",
      "35:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "36:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:     public function followHashtag(Request $request, $id)",
      "47:     {",
      "50:         $pid = $request->user()->profile_id;",
      "51:         $account = AccountService::get($pid);",
      "",
      "[Removed Lines]",
      "48:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "50:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "51:         abort_unless($request->user()->tokenCan('follow'), 403);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "88:     public function unfollowHashtag(Request $request, $id)",
      "89:     {",
      "92:         $pid = $request->user()->profile_id;",
      "93:         $account = AccountService::get($pid);",
      "",
      "[Removed Lines]",
      "90:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "93:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "94:         abort_unless($request->user()->tokenCan('follow'), 403);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:     public function getHashtag(Request $request, $id)",
      "134:     {",
      "137:         $pid = $request->user()->profile_id;",
      "138:         $account = AccountService::get($pid);",
      "",
      "[Removed Lines]",
      "135:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "139:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "140:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "173:     public function getFollowedTags(Request $request)",
      "174:     {",
      "177:         $account = AccountService::get($request->user()->profile_id);",
      "",
      "[Removed Lines]",
      "175:         abort_if(!$request->user(), 403);",
      "",
      "[Added Lines]",
      "180:         abort_if(!$request->user() || !$request->user()->token(), 403);",
      "181:         abort_unless($request->user()->tokenCan('read'), 403);",
      "",
      "---------------"
    ],
    "app/Providers/AuthServiceProvider.php||app/Providers/AuthServiceProvider.php": [
      "File: app/Providers/AuthServiceProvider.php -> app/Providers/AuthServiceProvider.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:                 'read' => 'Full read access to your account',",
      "42:                 'write' => 'Full write access to your account',",
      "43:                 'follow' => 'Ability to follow other profiles',",
      "45:             ]);",
      "46:         }",
      "",
      "[Removed Lines]",
      "44:                 'push'  => ''",
      "",
      "[Added Lines]",
      "44:                 'admin:read' => 'Read all data on the server',",
      "45:                 'admin:write' => 'Modify all data on the server',",
      "46:                 'push'  => 'Receive your push notifications'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b0a6060b2053eb18a02758288280b7b0de6e3e3",
      "candidate_info": {
        "commit_hash": "7b0a6060b2053eb18a02758288280b7b0de6e3e3",
        "repo": "pixelfed/pixelfed",
        "commit_url": "https://github.com/pixelfed/pixelfed/commit/7b0a6060b2053eb18a02758288280b7b0de6e3e3",
        "files": [
          "app/Auth/BearerTokenResponse.php"
        ],
        "message": "Return access tokens' scopes, not hardcoded list",
        "before_after_code_files": [
          "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pixelfed/pixelfed/pull/4911"
        ],
        "olp_code_files": {
          "patch": [
            "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php"
          ],
          "candidate": [
            "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php": [
          "File: app/Auth/BearerTokenResponse.php -> app/Auth/BearerTokenResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     protected function getExtraParams(AccessTokenEntityInterface $accessToken)",
          "19:     {",
          "20:         return [",
          "23:         ];",
          "24:     }",
          "25: }",
          "",
          "[Removed Lines]",
          "21:          'created_at' => time(),",
          "22:          'scope' => 'read write follow push'",
          "",
          "[Added Lines]",
          "21:             'created_at' => time(),",
          "22:             'scope' => implode(' ', $accessToken->getScopes())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f8e45fe7588bd50eac26c731f9ebd87449f6cdf",
      "candidate_info": {
        "commit_hash": "0f8e45fe7588bd50eac26c731f9ebd87449f6cdf",
        "repo": "pixelfed/pixelfed",
        "commit_url": "https://github.com/pixelfed/pixelfed/commit/0f8e45fe7588bd50eac26c731f9ebd87449f6cdf",
        "files": [
          "app/Http/Controllers/Api/ApiV1Controller.php",
          "app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "app/Http/Controllers/Api/ApiV2Controller.php",
          "app/Http/Controllers/Api/BaseApiController.php",
          "app/Http/Controllers/Api/V1/DomainBlockController.php",
          "app/Http/Controllers/Api/V1/TagsController.php"
        ],
        "message": "Implement proper OAuth authorization on API endpoints",
        "before_after_code_files": [
          "app/Http/Controllers/Api/ApiV1Controller.php||app/Http/Controllers/Api/ApiV1Controller.php",
          "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "app/Http/Controllers/Api/ApiV2Controller.php||app/Http/Controllers/Api/ApiV2Controller.php",
          "app/Http/Controllers/Api/BaseApiController.php||app/Http/Controllers/Api/BaseApiController.php",
          "app/Http/Controllers/Api/V1/DomainBlockController.php||app/Http/Controllers/Api/V1/DomainBlockController.php",
          "app/Http/Controllers/Api/V1/TagsController.php||app/Http/Controllers/Api/V1/TagsController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pixelfed/pixelfed/pull/4911"
        ],
        "olp_code_files": {
          "patch": [
            "app/Http/Controllers/Api/ApiV1Controller.php||app/Http/Controllers/Api/ApiV1Controller.php",
            "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
            "app/Http/Controllers/Api/ApiV2Controller.php||app/Http/Controllers/Api/ApiV2Controller.php",
            "app/Http/Controllers/Api/BaseApiController.php||app/Http/Controllers/Api/BaseApiController.php",
            "app/Http/Controllers/Api/V1/DomainBlockController.php||app/Http/Controllers/Api/V1/DomainBlockController.php",
            "app/Http/Controllers/Api/V1/TagsController.php||app/Http/Controllers/Api/V1/TagsController.php"
          ],
          "candidate": [
            "app/Http/Controllers/Api/ApiV1Controller.php||app/Http/Controllers/Api/ApiV1Controller.php",
            "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
            "app/Http/Controllers/Api/ApiV2Controller.php||app/Http/Controllers/Api/ApiV2Controller.php",
            "app/Http/Controllers/Api/BaseApiController.php||app/Http/Controllers/Api/BaseApiController.php",
            "app/Http/Controllers/Api/V1/DomainBlockController.php||app/Http/Controllers/Api/V1/DomainBlockController.php",
            "app/Http/Controllers/Api/V1/TagsController.php||app/Http/Controllers/Api/V1/TagsController.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Http/Controllers/Api/ApiV1Controller.php||app/Http/Controllers/Api/ApiV1Controller.php": [
          "File: app/Http/Controllers/Api/ApiV1Controller.php -> app/Http/Controllers/Api/ApiV1Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:         return response()->json($res, $code, $headers, JSON_UNESCAPED_SLASHES);",
          "126:     }",
          "128:     public function getApp(Request $request)",
          "129:     {",
          "134:         $client = $request->user()->token()->client;",
          "135:         $res = [",
          "",
          "[Removed Lines]",
          "130:         if(!$request->user()) {",
          "131:             return response('', 403);",
          "132:         }",
          "",
          "[Added Lines]",
          "133:         # FIXME: /api/v1/apps/verify_credentials should be accessible with any",
          "134:         # valid Access Token, not just a user's access token (i.e., client",
          "135:         # credentails grant flow access tokens)",
          "136:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     public function verifyCredentials(Request $request)",
          "189:     {",
          "190:         $user = $request->user();",
          "193:         abort_if($user->status != null, 403);",
          "194:         AccountService::setLastActive($user->id);",
          "",
          "[Removed Lines]",
          "192:         abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "197:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "198:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     public function accountById(Request $request, $id)",
          "217:     {",
          "218:         $res = $request->has(self::PF_API_ENTITY_KEY) ? AccountService::get($id, true) : AccountService::getMastodon($id, true);",
          "219:         if(!$res) {",
          "220:             return response()->json(['error' => 'Record not found'], 404);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "228:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:     public function accountUpdateCredentials(Request $request)",
          "235:     {",
          "238:         if(config('pixelfed.bouncer.cloud_ips.ban_api')) {",
          "239:             abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "236:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "248:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "249:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "477:     public function accountFollowersById(Request $request, $id)",
          "478:     {",
          "481:         $account = AccountService::get($id);",
          "482:         abort_if(!$account, 404);",
          "",
          "[Removed Lines]",
          "479:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "492:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "493:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "574:     public function accountFollowingById(Request $request, $id)",
          "575:     {",
          "578:         $account = AccountService::get($id);",
          "579:         abort_if(!$account, 404);",
          "",
          "[Removed Lines]",
          "576:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "590:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "591:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "671:     public function accountStatusesById(Request $request, $id)",
          "672:     {",
          "673:         $user = $request->user();",
          "675:         $this->validate($request, [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "689:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "775:     public function accountFollowById(Request $request, $id)",
          "776:     {",
          "779:         $user = $request->user();",
          "780:         abort_if($user->has_roles && !UserRoleService::can('can-follow', $user->id), 403, 'Invalid permissions for this action');",
          "",
          "[Removed Lines]",
          "777:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "795:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "796:         abort_unless($request->user()->tokenCan('follow'), 403);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "867:     public function accountUnfollowById(Request $request, $id)",
          "868:     {",
          "871:         $user = $request->user();",
          "",
          "[Removed Lines]",
          "869:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "888:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "889:         abort_unless($request->user()->tokenCan('follow'), 403);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "937:     public function accountRelationshipsById(Request $request)",
          "938:     {",
          "941:         $this->validate($request, [",
          "942:             'id'    => 'required|array|min:1|max:20',",
          "",
          "[Removed Lines]",
          "939:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "959:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "960:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "966:     public function accountSearch(Request $request)",
          "967:     {",
          "970:         $this->validate($request, [",
          "971:             'q'         => 'required|string|min:1|max:255',",
          "",
          "[Removed Lines]",
          "968:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "989:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "990:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1009:     public function accountBlocks(Request $request)",
          "1010:     {",
          "1013:         $this->validate($request, [",
          "1014:             'limit'     => 'nullable|integer|min:1|max:40',",
          "",
          "[Removed Lines]",
          "1011:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1033:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1034:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1046:     public function accountBlockById(Request $request, $id)",
          "1047:     {",
          "1050:         $user = $request->user();",
          "1051:         $pid = $user->profile_id ?? $user->profile->id;",
          "",
          "[Removed Lines]",
          "1048:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1071:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1072:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1139:     public function accountUnblockById(Request $request, $id)",
          "1140:     {",
          "1143:         $user = $request->user();",
          "1144:         $pid = $user->profile_id ?? $user->profile->id;",
          "",
          "[Removed Lines]",
          "1141:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1165:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1166:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1190:     public function accountDomainBlocks(Request $request)",
          "1191:     {",
          "1193:         return response()->json([]);",
          "1194:     }",
          "",
          "[Removed Lines]",
          "1192:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1217:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1218:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1203:     public function accountEndorsements(Request $request)",
          "1204:     {",
          "1206:         return response()->json([]);",
          "1207:     }",
          "",
          "[Removed Lines]",
          "1205:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1232:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1233:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1216:     public function accountFavourites(Request $request)",
          "1217:     {",
          "1219:         $this->validate($request, [",
          "1220:             'limit' => 'sometimes|integer|min:1|max:40'",
          "1221:         ]);",
          "",
          "[Removed Lines]",
          "1218:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1247:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1248:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1272:     public function statusFavouriteById(Request $request, $id)",
          "1273:     {",
          "1276:         $user = $request->user();",
          "1277:         abort_if($user->has_roles && !UserRoleService::can('can-like', $user->id), 403, 'Invalid permissions for this action');",
          "",
          "[Removed Lines]",
          "1274:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1305:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1306:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1339:     public function statusUnfavouriteById(Request $request, $id)",
          "1340:     {",
          "1343:         $user = $request->user();",
          "1344:         abort_if($user->has_roles && !UserRoleService::can('can-like', $user->id), 403, 'Invalid permissions for this action');",
          "",
          "[Removed Lines]",
          "1341:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1373:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1374:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1382:     public function accountFilters(Request $request)",
          "1383:     {",
          "1386:         return response()->json([]);",
          "1387:     }",
          "",
          "[Removed Lines]",
          "1384:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1417:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1418:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1396:     public function accountFollowRequests(Request $request)",
          "1397:     {",
          "1399:         $this->validate($request, [",
          "1400:             'limit' => 'sometimes|integer|min:1|max:100'",
          "1401:         ]);",
          "",
          "[Removed Lines]",
          "1398:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1432:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1433:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1426:     public function accountFollowRequestAccept(Request $request, $id)",
          "1427:     {",
          "1429:         $pid = $request->user()->profile_id;",
          "1430:         $target = AccountService::getMastodon($id);",
          "",
          "[Removed Lines]",
          "1428:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1464:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1465:         abort_unless($request->user()->tokenCan('follow'), 403);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1483:     public function accountFollowRequestReject(Request $request, $id)",
          "1484:     {",
          "1486:         $pid = $request->user()->profile_id;",
          "1487:         $target = AccountService::getMastodon($id);",
          "",
          "[Removed Lines]",
          "1485:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1523:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1524:         abort_unless($request->user()->tokenCan('follow'), 403);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1519:     public function accountSuggestions(Request $request)",
          "1520:     {",
          "",
          "[Removed Lines]",
          "1521:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1561:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1562:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1620:     public function accountLists(Request $request)",
          "1621:     {",
          "1624:         return response()->json([]);",
          "1625:     }",
          "",
          "[Removed Lines]",
          "1622:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1663:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1664:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1634:     public function accountListsById(Request $request, $id)",
          "1635:     {",
          "1638:         return response()->json([]);",
          "1639:     }",
          "",
          "[Removed Lines]",
          "1636:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1678:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1679:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1647:     public function mediaUpload(Request $request)",
          "1648:     {",
          "1651:         $this->validate($request, [",
          "1652:             'file.*' => [",
          "",
          "[Removed Lines]",
          "1649:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1692:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1693:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1783:     public function mediaUpdate(Request $request, $id)",
          "1784:     {",
          "1787:         $this->validate($request, [",
          "1788:           'description' => 'nullable|string|max:' . config_cache('pixelfed.max_altext_length')",
          "",
          "[Removed Lines]",
          "1785:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1829:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1830:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1836:     public function mediaGet(Request $request, $id)",
          "1837:     {",
          "1840:         $user = $request->user();",
          "1841:         abort_if($user->has_roles && !UserRoleService::can('can-post', $user->id), 403, 'Invalid permissions for this action');",
          "",
          "[Removed Lines]",
          "1838:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1883:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1884:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1859:     public function mediaUploadV2(Request $request)",
          "1860:     {",
          "1863:         $this->validate($request, [",
          "1864:             'file.*' => [",
          "",
          "[Removed Lines]",
          "1861:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "1907:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "1908:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2000:     public function accountMutes(Request $request)",
          "2001:     {",
          "2004:         $this->validate($request, [",
          "2005:             'limit' => 'nullable|integer|min:1|max:40'",
          "",
          "[Removed Lines]",
          "2002:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2049:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2050:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2035:     public function accountMuteById(Request $request, $id)",
          "2036:     {",
          "2039:         $user = $request->user();",
          "2040:         $pid = $user->profile_id;",
          "",
          "[Removed Lines]",
          "2037:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2085:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2086:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2093:     public function accountUnmuteById(Request $request, $id)",
          "2094:     {",
          "2097:         $user = $request->user();",
          "2098:         $pid = $user->profile_id;",
          "",
          "[Removed Lines]",
          "2095:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2144:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2145:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2129:     public function accountNotifications(Request $request)",
          "2130:     {",
          "2133:         $this->validate($request, [",
          "2134:             'limit' => 'nullable|integer|min:1|max:100',",
          "",
          "[Removed Lines]",
          "2131:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2181:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2182:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2205:     public function timelineHome(Request $request)",
          "2206:     {",
          "2208:             'page'        => 'sometimes|integer|max:40',",
          "2209:             'min_id'      => 'sometimes|integer|min:0|max:' . PHP_INT_MAX,",
          "2210:             'max_id'      => 'sometimes|integer|min:0|max:' . PHP_INT_MAX,",
          "",
          "[Removed Lines]",
          "2207:         $this->validate($request,[",
          "",
          "[Added Lines]",
          "2258:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2259:         abort_unless($request->user()->tokenCan('read'), 403);",
          "2261:         $this->validate($request, [",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2607:     public function conversations(Request $request)",
          "2608:     {",
          "2610:         $this->validate($request, [",
          "2611:             'limit' => 'min:1|max:40',",
          "2612:             'scope' => 'nullable|in:inbox,sent,requests'",
          "",
          "[Removed Lines]",
          "2609:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2663:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2664:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2684:     public function statusById(Request $request, $id)",
          "2685:     {",
          "2687:         AccountService::setLastActive($request->user()->id);",
          "2688:         $pid = $request->user()->profile_id;",
          "",
          "[Removed Lines]",
          "2686:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2742:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2743:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2731:     public function statusContext(Request $request, $id)",
          "2732:     {",
          "2735:         $user = $request->user();",
          "2736:         AccountService::setLastActive($user->id);",
          "",
          "[Removed Lines]",
          "2733:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2791:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2792:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2804:     public function statusCard(Request $request, $id)",
          "2805:     {",
          "2807:         $res = [];",
          "2808:         return response()->json($res);",
          "2809:     }",
          "",
          "[Removed Lines]",
          "2806:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2865:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2866:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2818:     public function statusRebloggedBy(Request $request, $id)",
          "2819:     {",
          "2822:         $this->validate($request, [",
          "2823:             'limit' => 'sometimes|integer|min:1|max:80'",
          "",
          "[Removed Lines]",
          "2820:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2881:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2882:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2914:     public function statusFavouritedBy(Request $request, $id)",
          "2915:     {",
          "2918:         $this->validate($request, [",
          "2919:             'limit' => 'nullable|integer|min:1|max:80'",
          "",
          "[Removed Lines]",
          "2916:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "2978:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "2979:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3011:     public function statusCreate(Request $request)",
          "3012:     {",
          "3015:         $this->validate($request, [",
          "3016:             'status' => 'nullable|string',",
          "",
          "[Removed Lines]",
          "3013:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3076:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3077:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3226:     public function statusDelete(Request $request, $id)",
          "3227:     {",
          "3229:         AccountService::setLastActive($request->user()->id);",
          "3230:         $status = Status::whereProfileId($request->user()->profile->id)",
          "3231:         ->findOrFail($id);",
          "",
          "[Removed Lines]",
          "3228:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3292:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3293:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3252:     public function statusShare(Request $request, $id)",
          "3253:     {",
          "3256:         $user = $request->user();",
          "3257:         abort_if($user->has_roles && !UserRoleService::can('can-share', $user->id), 403, 'Invalid permissions for this action');",
          "",
          "[Removed Lines]",
          "3254:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3320:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3321:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3304:     public function statusUnshare(Request $request, $id)",
          "3305:     {",
          "3308:         $user = $request->user();",
          "3309:         abort_if($user->has_roles && !UserRoleService::can('can-share', $user->id), 403, 'Invalid permissions for this action');",
          "",
          "[Removed Lines]",
          "3306:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3373:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3374:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3347:     public function timelineHashtag(Request $request, $hashtag)",
          "3348:     {",
          "3351:         $this->validate($request,[",
          "3352:           'page'        => 'nullable|integer|max:40',",
          "",
          "[Removed Lines]",
          "3349:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3417:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3418:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3448:     public function bookmarks(Request $request)",
          "3449:     {",
          "3452:         $this->validate($request, [",
          "3453:             'limit' => 'nullable|integer|min:1|max:40',",
          "",
          "[Removed Lines]",
          "3450:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3519:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3520:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3515:     public function bookmarkStatus(Request $request, $id)",
          "3516:     {",
          "3519:         $status = Status::findOrFail($id);",
          "3520:         $pid = $request->user()->profile_id;",
          "",
          "[Removed Lines]",
          "3517:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3587:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3588:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3555:     public function unbookmarkStatus(Request $request, $id)",
          "3556:     {",
          "3559:         $status = Status::findOrFail($id);",
          "3560:         $pid = $request->user()->profile_id;",
          "",
          "[Removed Lines]",
          "3557:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3628:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3629:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3587:     public function discoverPosts(Request $request)",
          "3588:     {",
          "3591:         $this->validate($request, [",
          "3592:             'limit' => 'integer|min:1|max:40'",
          "",
          "[Removed Lines]",
          "3589:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3661:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3662:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3596:         $pid = $request->user()->profile_id;",
          "3597:         $filters = UserFilterService::filters($pid);",
          "3598:         $forYou = DiscoverService::getForYou();",
          "3600:             return StatusService::getMastodon($post);",
          "3601:         })",
          "3610:         return $this->json(compact('posts'));",
          "3611:     }",
          "3619:     public function statusReplies(Request $request, $id)",
          "3620:     {",
          "3623:         $this->validate($request, [",
          "3624:             'limit' => 'int|min:1|max:10',",
          "",
          "[Removed Lines]",
          "3599:         $posts = $forYou->take(50)->map(function($post) {",
          "3602:         ->filter(function($post) use($filters) {",
          "3603:             return $post &&",
          "3604:                 isset($post['account']) &&",
          "3605:                 isset($post['account']['id']) &&",
          "3606:                 !in_array($post['account']['id'], $filters);",
          "3607:         })",
          "3608:         ->take(12)",
          "3609:         ->values();",
          "3621:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3672:         $posts = $forYou->take(50)->map(function ($post) {",
          "3675:             ->filter(function ($post) use ($filters) {",
          "3676:                 return $post &&",
          "3677:                     isset($post['account']) &&",
          "3678:                     isset($post['account']['id']) &&",
          "3679:                     !in_array($post['account']['id'], $filters);",
          "3680:             })",
          "3681:             ->take(12)",
          "3682:             ->values();",
          "3694:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3695:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3707:     }",
          "3715:     public function statusState(Request $request, $id)",
          "3716:     {",
          "3719:         $status = Status::findOrFail($id);",
          "3720:         $pid = $request->user()->profile_id;",
          "",
          "[Removed Lines]",
          "3717:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3791:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3792:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3724:     }",
          "3732:     public function discoverAccountsPopular(Request $request)",
          "3733:     {",
          "3736:         $pid = $request->user()->profile_id;",
          "",
          "[Removed Lines]",
          "3734:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3809:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3810:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3766:     }",
          "3774:     public function getPreferences(Request $request)",
          "3775:     {",
          "3778:         $pid = $request->user()->profile_id;",
          "3779:         $account = AccountService::get($pid);",
          "",
          "[Removed Lines]",
          "3776:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3852:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3853:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3788:     }",
          "3796:     public function getTrends(Request $request)",
          "3797:     {",
          "3800:         return $this->json([]);",
          "3801:     }",
          "3809:     public function getAnnouncements(Request $request)",
          "3810:     {",
          "3813:         return $this->json([]);",
          "3814:     }",
          "3822:     public function getMarkers(Request $request)",
          "3823:     {",
          "3826:         $type = $request->input('timeline');",
          "3827:         if(is_array($type)) {",
          "",
          "[Removed Lines]",
          "3798:         abort_if(!$request->user(), 403);",
          "3811:         abort_if(!$request->user(), 403);",
          "3824:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3875:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3876:         abort_unless($request->user()->tokenCan('read'), 403);",
          "3889:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3890:         abort_unless($request->user()->tokenCan('read'), 403);",
          "3903:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3904:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3835:     }",
          "3843:     public function setMarkers(Request $request)",
          "3844:     {",
          "3847:         $pid = $request->user()->profile_id;",
          "3848:         $home = $request->input('home[last_read_id]');",
          "",
          "[Removed Lines]",
          "3845:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "3925:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "3926:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php": [
          "File: app/Http/Controllers/Api/ApiV1Dot1Controller.php -> app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  public function report(Request $request)",
          "70:  {",
          "74:   abort_if($user->status != null, 403);",
          "76:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "",
          "[Removed Lines]",
          "71:   $user = $request->user();",
          "73:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "71:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "72:   abort_unless($request->user()->tokenCan('write'), 403);",
          "74:   $user = $request->user();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:  public function deleteAvatar(Request $request)",
          "177:  {",
          "181:   abort_if($user->status != null, 403);",
          "183:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "",
          "[Removed Lines]",
          "178:   $user = $request->user();",
          "180:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "179:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "180:   abort_unless($request->user()->tokenCan('write'), 403);",
          "182:   $user = $request->user();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:  public function accountPosts(Request $request, $id)",
          "217:  {",
          "221:   abort_if($user->status != null, 403);",
          "223:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "",
          "[Removed Lines]",
          "218:   $user = $request->user();",
          "220:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "220:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "221:   abort_unless($request->user()->tokenCan('read'), 403);",
          "223:   $user = $request->user();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:  public function accountChangePassword(Request $request)",
          "257:  {",
          "258:   $user = $request->user();",
          "260:   abort_if($user->status != null, 403);",
          "261:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "262:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "259:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "261:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "262:   abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "297:  public function accountLoginActivity(Request $request)",
          "298:  {",
          "299:   $user = $request->user();",
          "301:   abort_if($user->status != null, 403);",
          "302:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "303:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "300:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "304:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "305:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:  public function accountTwoFactor(Request $request)",
          "338:  {",
          "339:   $user = $request->user();",
          "341:   abort_if($user->status != null, 403);",
          "343:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "",
          "[Removed Lines]",
          "340:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "346:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "347:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "359:  public function accountEmailsFromPixelfed(Request $request)",
          "360:  {",
          "361:   $user = $request->user();",
          "363:   abort_if($user->status != null, 403);",
          "364:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "365:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "362:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "370:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "371:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "434:  public function accountApps(Request $request)",
          "435:  {",
          "436:   $user = $request->user();",
          "438:   abort_if($user->status != null, 403);",
          "440:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "",
          "[Removed Lines]",
          "437:   abort_if(!$user, 403);",
          "",
          "[Added Lines]",
          "447:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "448:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "641:  public function archive(Request $request, $id)",
          "642:  {",
          "645:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "646:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "643:   abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "656:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "657:   abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "673:  public function unarchive(Request $request, $id)",
          "674:  {",
          "677:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "678:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "675:   abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "689:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "690:   abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "704:  public function archivedPosts(Request $request)",
          "705:  {",
          "708:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "709:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "706:   abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "721:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "722:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "720:  public function placesById(Request $request, $id, $slug)",
          "721:  {",
          "724:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "725:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "722:   abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "738:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "739:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "866:  public function getWebSettings(Request $request)",
          "867:  {",
          "869:         $uid = $request->user()->id;",
          "870:         $settings = UserSetting::firstOrCreate([",
          "871:             'user_id' => $uid",
          "",
          "[Removed Lines]",
          "868:   abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "885:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "886:   abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "879:     public function setWebSettings(Request $request)",
          "880:     {",
          "882:         $this->validate($request, [",
          "883:             'field' => 'required|in:enable_reblogs,hide_reblog_banner',",
          "884:             'value' => 'required'",
          "",
          "[Removed Lines]",
          "881:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "900:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "901:   abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "903:     public function getMutualAccounts(Request $request, $id)",
          "904:     {",
          "906:         $account = AccountService::get($id, true);",
          "907:         if(!$account || !isset($account['id'])) { return []; }",
          "908:         $res = collect(FollowerService::mutualAccounts($request->user()->profile_id, $id))",
          "",
          "[Removed Lines]",
          "905:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "926:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "927:   abort_unless($request->user()->tokenCan('follows'), 403);",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Api/ApiV2Controller.php||app/Http/Controllers/Api/ApiV2Controller.php": [
          "File: app/Http/Controllers/Api/ApiV2Controller.php -> app/Http/Controllers/Api/ApiV2Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     public function search(Request $request)",
          "150:     {",
          "153:         $this->validate($request, [",
          "154:             'q' => 'required|string|min:1|max:100',",
          "",
          "[Removed Lines]",
          "151:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "151:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "152:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:     public function mediaUploadV2(Request $request)",
          "201:     {",
          "204:         $this->validate($request, [",
          "205:             'file.*' => [",
          "",
          "[Removed Lines]",
          "202:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "203:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "204:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Api/BaseApiController.php||app/Http/Controllers/Api/BaseApiController.php": [
          "File: app/Http/Controllers/Api/BaseApiController.php -> app/Http/Controllers/Api/BaseApiController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     public function notifications(Request $request)",
          "58:     {",
          "61:   $pid = $request->user()->profile_id;",
          "62:   $limit = $request->input('limit', 20);",
          "",
          "[Removed Lines]",
          "59:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "59:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "60:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     public function avatarUpdate(Request $request)",
          "100:     {",
          "102:         $this->validate($request, [",
          "103:             'upload'   => 'required|mimetypes:image/jpeg,image/jpg,image/png|max:'.config('pixelfed.max_avatar_size'),",
          "104:         ]);",
          "",
          "[Removed Lines]",
          "101:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "102:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "103:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:     public function verifyCredentials(Request $request)",
          "136:     {",
          "137:         $user = $request->user();",
          "140:             Auth::logout();",
          "141:             abort(403);",
          "142:         }",
          "",
          "[Removed Lines]",
          "138:         abort_if(!$user, 403);",
          "139:         if($user->status != null) {",
          "",
          "[Added Lines]",
          "140:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "141:         abort_unless($request->user()->tokenCan('read'), 403);",
          "144:         if ($user->status != null) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:     public function accountLikes(Request $request)",
          "148:     {",
          "150:         $this->validate($request, [",
          "151:          'page' => 'sometimes|int|min:1|max:20',",
          "152:          'limit' => 'sometimes|int|min:1|max:10'",
          "",
          "[Removed Lines]",
          "149:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "154:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "155:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:     public function archive(Request $request, $id)",
          "175:     {",
          "178:         $status = Status::whereNull('in_reply_to_id')",
          "179:             ->whereNull('reblog_of_id')",
          "",
          "[Removed Lines]",
          "176:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "183:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "184:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:     public function unarchive(Request $request, $id)",
          "203:     {",
          "206:         $status = Status::whereNull('in_reply_to_id')",
          "207:             ->whereNull('reblog_of_id')",
          "",
          "[Removed Lines]",
          "204:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "212:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "213:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:     public function archivedPosts(Request $request)",
          "230:     {",
          "233:         $statuses = Status::whereProfileId($request->user()->profile_id)",
          "234:             ->whereScope('archived')",
          "",
          "[Removed Lines]",
          "231:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "240:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "241:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Api/V1/DomainBlockController.php||app/Http/Controllers/Api/V1/DomainBlockController.php": [
          "File: app/Http/Controllers/Api/V1/DomainBlockController.php -> app/Http/Controllers/Api/V1/DomainBlockController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     public function index(Request $request)",
          "25:     {",
          "27:         $this->validate($request, [",
          "28:             'limit' => 'sometimes|integer|min:1|max:200'",
          "29:         ]);",
          "",
          "[Removed Lines]",
          "26:         abort_unless($request->user(), 403);",
          "",
          "[Added Lines]",
          "26:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "27:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public function store(Request $request)",
          "54:     {",
          "57:         $this->validate($request, [",
          "58:             'domain' => 'required|active_url|min:1|max:120'",
          "",
          "[Removed Lines]",
          "55:         abort_unless($request->user(), 403);",
          "",
          "[Added Lines]",
          "57:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "58:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     public function delete(Request $request)",
          "101:     {",
          "104:         $this->validate($request, [",
          "105:             'domain' => 'required|min:1|max:120'",
          "",
          "[Removed Lines]",
          "102:         abort_unless($request->user(), 403);",
          "",
          "[Added Lines]",
          "105:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "106:         abort_unless($request->user()->tokenCan('write'), 403);",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Api/V1/TagsController.php||app/Http/Controllers/Api/V1/TagsController.php": [
          "File: app/Http/Controllers/Api/V1/TagsController.php -> app/Http/Controllers/Api/V1/TagsController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     public function relatedTags(Request $request, $tag)",
          "34:     {",
          "36:         $tag = Hashtag::whereSlug($tag)->firstOrFail();",
          "37:         return HashtagRelatedService::get($tag->id);",
          "38:     }",
          "",
          "[Removed Lines]",
          "35:         abort_unless($request->user(), 403);",
          "",
          "[Added Lines]",
          "35:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "36:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     public function followHashtag(Request $request, $id)",
          "47:     {",
          "50:         $pid = $request->user()->profile_id;",
          "51:         $account = AccountService::get($pid);",
          "",
          "[Removed Lines]",
          "48:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "50:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "51:         abort_unless($request->user()->tokenCan('follow'), 403);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     public function unfollowHashtag(Request $request, $id)",
          "89:     {",
          "92:         $pid = $request->user()->profile_id;",
          "93:         $account = AccountService::get($pid);",
          "",
          "[Removed Lines]",
          "90:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "93:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "94:         abort_unless($request->user()->tokenCan('follow'), 403);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     public function getHashtag(Request $request, $id)",
          "134:     {",
          "137:         $pid = $request->user()->profile_id;",
          "138:         $account = AccountService::get($pid);",
          "",
          "[Removed Lines]",
          "135:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "139:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "140:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:     public function getFollowedTags(Request $request)",
          "174:     {",
          "177:         $account = AccountService::get($request->user()->profile_id);",
          "",
          "[Removed Lines]",
          "175:         abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "180:         abort_if(!$request->user() || !$request->user()->token(), 403);",
          "181:         abort_unless($request->user()->tokenCan('read'), 403);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e6100f2758fc6e18fb6b84d5efc71643e81a2bd",
      "candidate_info": {
        "commit_hash": "2e6100f2758fc6e18fb6b84d5efc71643e81a2bd",
        "repo": "pixelfed/pixelfed",
        "commit_url": "https://github.com/pixelfed/pixelfed/commit/2e6100f2758fc6e18fb6b84d5efc71643e81a2bd",
        "files": [
          "app/Auth/BearerTokenResponse.php"
        ],
        "message": "Update BearerTokenResponse, fix scope bug",
        "before_after_code_files": [
          "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pixelfed/pixelfed/pull/4911"
        ],
        "olp_code_files": {
          "patch": [
            "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php"
          ],
          "candidate": [
            "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/BearerTokenResponse.php||app/Auth/BearerTokenResponse.php": [
          "File: app/Auth/BearerTokenResponse.php -> app/Auth/BearerTokenResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     {",
          "20:         return [",
          "21:             'created_at' => time(),",
          "23:         ];",
          "24:     }",
          "25: }",
          "",
          "[Removed Lines]",
          "22:             'scope' => implode(' ', $accessToken->getScopes())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "607b239c1a930d6858718152b35db508d8f5bf7c",
      "candidate_info": {
        "commit_hash": "607b239c1a930d6858718152b35db508d8f5bf7c",
        "repo": "pixelfed/pixelfed",
        "commit_url": "https://github.com/pixelfed/pixelfed/commit/607b239c1a930d6858718152b35db508d8f5bf7c",
        "files": [
          "CHANGELOG.md",
          "config/pixelfed.php"
        ],
        "message": "Bump version to v0.11.10",
        "before_after_code_files": [
          "config/pixelfed.php||config/pixelfed.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pixelfed/pixelfed/pull/4911"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "config/pixelfed.php||config/pixelfed.php": [
          "File: config/pixelfed.php -> config/pixelfed.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  | This value is the version of your Pixelfed instance.",
          "24:  |",
          "29:  |--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "26:  'version' => '0.11.9',",
          "",
          "[Added Lines]",
          "26:  'version' => '0.11.10',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9330cd02f7c05fe3f4ade786e8429fb804a93cb2",
      "candidate_info": {
        "commit_hash": "9330cd02f7c05fe3f4ade786e8429fb804a93cb2",
        "repo": "pixelfed/pixelfed",
        "commit_url": "https://github.com/pixelfed/pixelfed/commit/9330cd02f7c05fe3f4ade786e8429fb804a93cb2",
        "files": [
          "app/Http/Controllers/Api/AdminApiController.php",
          "app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "app/Providers/AuthServiceProvider.php"
        ],
        "message": "Implement proper OAuth authorization on Admin API endpoints",
        "before_after_code_files": [
          "app/Http/Controllers/Api/AdminApiController.php||app/Http/Controllers/Api/AdminApiController.php",
          "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "app/Providers/AuthServiceProvider.php||app/Providers/AuthServiceProvider.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pixelfed/pixelfed/pull/4911"
        ],
        "olp_code_files": {
          "patch": [
            "app/Http/Controllers/Api/AdminApiController.php||app/Http/Controllers/Api/AdminApiController.php",
            "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
            "app/Providers/AuthServiceProvider.php||app/Providers/AuthServiceProvider.php"
          ],
          "candidate": [
            "app/Http/Controllers/Api/AdminApiController.php||app/Http/Controllers/Api/AdminApiController.php",
            "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php",
            "app/Providers/AuthServiceProvider.php||app/Providers/AuthServiceProvider.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Http/Controllers/Api/AdminApiController.php||app/Http/Controllers/Api/AdminApiController.php": [
          "File: app/Http/Controllers/Api/AdminApiController.php -> app/Http/Controllers/Api/AdminApiController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: {",
          "41:     public function supported(Request $request)",
          "42:     {",
          "44:         abort_unless($request->user()->is_admin == 1, 404);",
          "46:         return response()->json(['supported' => true]);",
          "47:     }",
          "49:     public function getStats(Request $request)",
          "50:     {",
          "52:         abort_unless($request->user()->is_admin == 1, 404);",
          "54:         $res = AdminStatsService::summary();",
          "55:         $res['autospam_count'] = AccountInterstitial::whereType('post.autospam')",
          "",
          "[Removed Lines]",
          "43:         abort_if(!$request->user(), 404);",
          "51:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "43:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "46:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "53:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "56:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     public function autospam(Request $request)",
          "62:     {",
          "64:         abort_unless($request->user()->is_admin == 1, 404);",
          "66:         $appeals = AccountInterstitial::whereType('post.autospam')",
          "67:             ->whereNull('appeal_handled_at')",
          "",
          "[Removed Lines]",
          "63:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "67:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "70:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     public function autospamHandle(Request $request)",
          "97:     {",
          "99:         abort_unless($request->user()->is_admin == 1, 404);",
          "101:         $this->validate($request, [",
          "102:             'action' => 'required|in:dismiss,approve,dismiss-all,approve-all,delete-post,delete-account',",
          "",
          "[Removed Lines]",
          "98:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "104:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "107:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:     public function modReports(Request $request)",
          "241:     {",
          "243:         abort_unless($request->user()->is_admin == 1, 404);",
          "245:         $reports = Report::whereNull('admin_seen')",
          "246:             ->orderBy('created_at','desc')",
          "",
          "[Removed Lines]",
          "242:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "250:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "253:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "286:     public function modReportHandle(Request $request)",
          "287:     {",
          "289:         abort_unless($request->user()->is_admin == 1, 404);",
          "291:         $this->validate($request, [",
          "292:             'action'    => 'required|string',",
          "",
          "[Removed Lines]",
          "288:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "298:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "301:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:     public function getConfiguration(Request $request)",
          "345:     {",
          "347:         abort_unless($request->user()->is_admin == 1, 404);",
          "348:         abort_unless(config('instance.enable_cc'), 400);",
          "350:         return collect([",
          "",
          "[Removed Lines]",
          "346:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "358:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "361:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "387:     public function updateConfiguration(Request $request)",
          "388:     {",
          "390:         abort_unless($request->user()->is_admin == 1, 404);",
          "391:         abort_unless(config('instance.enable_cc'), 400);",
          "393:         $this->validate($request, [",
          "",
          "[Removed Lines]",
          "389:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "404:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "407:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "449:     public function getUsers(Request $request)",
          "450:     {",
          "452:         abort_unless($request->user()->is_admin == 1, 404);",
          "453:         $this->validate($request, [",
          "454:             'sort' => 'sometimes|in:asc,desc',",
          "455:         ]);",
          "",
          "[Removed Lines]",
          "451:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "469:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "472:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "467:     public function getUser(Request $request)",
          "468:     {",
          "470:         abort_unless($request->user()->is_admin == 1, 404);",
          "472:         $id = $request->input('user_id');",
          "473:         $key = 'pf-admin-api:getUser:byId:' . $id;",
          "",
          "[Removed Lines]",
          "469:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "490:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "493:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "498:     public function userAdminAction(Request $request)",
          "499:     {",
          "501:         abort_unless($request->user()->is_admin == 1, 404);",
          "503:         $this->validate($request, [",
          "504:             'id' => 'required',",
          "",
          "[Removed Lines]",
          "500:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "523:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "526:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "670:     public function instances(Request $request)",
          "671:     {",
          "673:         abort_unless($request->user()->is_admin == 1, 404);",
          "675:         $this->validate($request, [",
          "676:             'q' => 'sometimes',",
          "",
          "[Removed Lines]",
          "672:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "697:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "700:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "708:     public function getInstance(Request $request)",
          "709:     {",
          "711:         abort_unless($request->user()->is_admin == 1, 404);",
          "713:         $id = $request->input('id');",
          "714:         $res = Instance::findOrFail($id);",
          "",
          "[Removed Lines]",
          "710:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "737:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "740:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "719:     public function moderateInstance(Request $request)",
          "720:     {",
          "722:         abort_unless($request->user()->is_admin == 1, 404);",
          "724:         $this->validate($request, [",
          "725:             'id' => 'required',",
          "",
          "[Removed Lines]",
          "721:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "750:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "753:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "743:     public function refreshInstanceStats(Request $request)",
          "744:     {",
          "746:         abort_unless($request->user()->is_admin == 1, 404);",
          "748:         $this->validate($request, [",
          "749:             'id' => 'required',",
          "",
          "[Removed Lines]",
          "745:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "776:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "779:         abort_unless($request->user()->tokenCan('admin:write'), 404);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "761:     public function getAllStats(Request $request)",
          "762:     {",
          "764:         abort_unless($request->user()->is_admin === 1, 404);",
          "766:         if($request->has('refresh')) {",
          "767:             Cache::forget('admin-api:instance-all-stats-v1');",
          "",
          "[Removed Lines]",
          "763:         abort_if(!$request->user(), 404);",
          "",
          "[Added Lines]",
          "796:         abort_if(!$request->user() || !$request->user()->token(), 404);",
          "799:         abort_unless($request->user()->tokenCan('admin:read'), 404);",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Api/ApiV1Dot1Controller.php||app/Http/Controllers/Api/ApiV1Dot1Controller.php": [
          "File: app/Http/Controllers/Api/ApiV1Dot1Controller.php -> app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:  public function moderatePost(Request $request, $id)",
          "759:  {",
          "761:   abort_if($request->user()->is_admin != true, 403);",
          "763:   if(config('pixelfed.bouncer.cloud_ips.ban_signups')) {",
          "764:    abort_if(BouncerService::checkIp($request->ip()), 404);",
          "",
          "[Removed Lines]",
          "760:   abort_if(!$request->user(), 403);",
          "",
          "[Added Lines]",
          "760:   abort_if(!$request->user() || !$request->user()->token(), 403);",
          "762:   abort_unless($request->user()->tokenCan('admin:write'), 403);",
          "",
          "---------------"
        ],
        "app/Providers/AuthServiceProvider.php||app/Providers/AuthServiceProvider.php": [
          "File: app/Providers/AuthServiceProvider.php -> app/Providers/AuthServiceProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:                 'read' => 'Full read access to your account',",
          "42:                 'write' => 'Full write access to your account',",
          "43:                 'follow' => 'Ability to follow other profiles',",
          "45:             ]);",
          "46:         }",
          "",
          "[Removed Lines]",
          "44:                 'push'  => ''",
          "",
          "[Added Lines]",
          "44:                 'admin:read' => 'Read all data on the server',",
          "45:                 'admin:write' => 'Modify all data on the server',",
          "46:                 'push'  => 'Receive your push notifications'",
          "",
          "---------------"
        ]
      }
    }
  ]
}