{
  "cve_id": "CVE-2022-36663",
  "cve_desc": "Gluu Oxauth before v4.4.1 allows attackers to execute blind SSRF (Server-Side Request Forgery) attacks via a crafted request_uri parameter.",
  "repo": "GluuFederation/oxAuth",
  "patch_hash": "58c4ac9bbf2addf4b419bf155de99db57a202f5c",
  "patch_info": {
    "commit_hash": "58c4ac9bbf2addf4b419bf155de99db57a202f5c",
    "repo": "GluuFederation/oxAuth",
    "commit_url": "https://github.com/GluuFederation/oxAuth/commit/58c4ac9bbf2addf4b419bf155de99db57a202f5c",
    "files": [
      "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
      "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
      "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
      "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
      "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
    ],
    "message": "Merge pull request #1688 from GluuFederation/oxauth-jans-issue-1503-for-4.4.1\n\nfeat(oxauth): added restriction for request_uri parameter (blacklist/allowed list) (4.4.1)",
    "before_after_code_files": [
      "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
      "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
      "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
      "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
      "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
    ]
  },
  "patch_diff": {
    "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java": [
      "File: Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java -> Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "101:     private Boolean requestUriParameterSupported;",
      "102:     private Boolean requestUriHashVerificationEnabled;",
      "103:     private Boolean requireRequestUriRegistration;",
      "104:     private String opPolicyUri;",
      "105:     private String opTosUri;",
      "106:     private int authorizationCodeLifetime;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104:     private List<String> requestUriBlackList;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2089:         this.cibaEnabled = cibaEnabled;",
      "2090:     }",
      "2092:     public Boolean getRequestUriHashVerificationEnabled() {",
      "2093:         return requestUriHashVerificationEnabled != null ? requestUriHashVerificationEnabled : false;",
      "2094:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2093:     public List<String> getRequestUriBlackList() {",
      "2094:         if (requestUriBlackList == null) requestUriBlackList = Lists.newArrayList();",
      "2095:         return requestUriBlackList;",
      "2096:     }",
      "2098:     public void setRequestUriBlackList(List<String> requestUriBlackList) {",
      "2099:         this.requestUriBlackList = requestUriBlackList;",
      "2100:     }",
      "",
      "---------------"
    ],
    "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java": [
      "File: Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java -> Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: package org.gluu.oxauth.model.authorize;",
      "21: import org.apache.commons.lang.StringUtils;",
      "22: import org.gluu.oxauth.model.common.Display;",
      "23: import org.gluu.oxauth.model.common.Prompt;",
      "24: import org.gluu.oxauth.model.common.ResponseType;",
      "",
      "[Removed Lines]",
      "9: import java.io.UnsupportedEncodingException;",
      "10: import java.net.URI;",
      "11: import java.net.URLDecoder;",
      "12: import java.nio.charset.StandardCharsets;",
      "13: import java.security.PrivateKey;",
      "14: import java.util.ArrayList;",
      "15: import java.util.List;",
      "17: import javax.ws.rs.WebApplicationException;",
      "18: import javax.ws.rs.client.ClientBuilder;",
      "19: import javax.ws.rs.core.Response;",
      "",
      "[Added Lines]",
      "9: import com.google.common.collect.Lists;",
      "11: import org.apache.commons.lang3.ArrayUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: import org.gluu.oxauth.model.crypto.encryption.BlockEncryptionAlgorithm;",
      "28: import org.gluu.oxauth.model.crypto.encryption.KeyEncryptionAlgorithm;",
      "29: import org.gluu.oxauth.model.crypto.signature.SignatureAlgorithm;",
      "30: import org.gluu.oxauth.model.exception.InvalidJwtException;",
      "31: import org.gluu.oxauth.model.jwe.Jwe;",
      "32: import org.gluu.oxauth.model.jwe.JweDecrypterImpl;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import org.gluu.oxauth.model.error.ErrorResponseFactory;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "35: import org.gluu.oxauth.model.registration.Client;",
      "36: import org.gluu.oxauth.model.util.Base64Util;",
      "37: import org.gluu.oxauth.model.util.JwtUtil;",
      "38: import org.gluu.oxauth.model.util.Util;",
      "39: import org.gluu.oxauth.service.ClientService;",
      "40: import org.gluu.oxauth.service.RedirectUriResponse;",
      "41: import org.gluu.oxauth.util.ServerUtil;",
      "42: import org.gluu.service.cdi.util.CdiUtil;",
      "43: import org.jetbrains.annotations.Nullable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import org.gluu.oxauth.model.util.URLPatternList;",
      "33: import org.gluu.oxauth.service.RedirectionUriService;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "47: import org.slf4j.Logger;",
      "48: import org.slf4j.LoggerFactory;",
      "",
      "[Removed Lines]",
      "50: import com.google.common.base.Strings;",
      "51: import com.google.common.collect.Lists;",
      "",
      "[Added Lines]",
      "43: import javax.ws.rs.WebApplicationException;",
      "44: import javax.ws.rs.client.ClientBuilder;",
      "45: import javax.ws.rs.core.Response;",
      "46: import java.io.UnsupportedEncodingException;",
      "47: import java.net.URI;",
      "48: import java.net.URLDecoder;",
      "49: import java.nio.charset.StandardCharsets;",
      "50: import java.security.PrivateKey;",
      "51: import java.util.ArrayList;",
      "52: import java.util.List;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "462:     }",
      "464:     public static JwtAuthorizationRequest createJwtRequest(String request, String requestUri, Client client, RedirectUriResponse redirectUriResponse, AbstractCryptoProvider cryptoProvider, AppConfiguration appConfiguration) {",
      "465:         final String requestFromClient = queryRequest(requestUri, redirectUriResponse, appConfiguration);",
      "466:         if (StringUtils.isNotBlank(requestFromClient)) {",
      "467:             request = requestFromClient;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "466:         validateRequestUri(requestUri, client, appConfiguration, redirectUriResponse.getState());",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "481:         return null;",
      "482:     }",
      "484: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "486:     public static void validateRequestUri(String requestUri, Client client, AppConfiguration appConfiguration, String state) {",
      "487:         validateRequestUri(requestUri, client, appConfiguration, state, CdiUtil.bean(ErrorResponseFactory.class));",
      "488:     }",
      "490:     public static void validateRequestUri(String requestUri, Client client, AppConfiguration appConfiguration, String state, ErrorResponseFactory errorResponseFactory) {",
      "491:         if (StringUtils.isBlank(requestUri)) {",
      "492:             return; // nothing to validate",
      "493:         }",
      "496:         if (ArrayUtils.isNotEmpty(client.getRequestUris()) && !RedirectionUriService.isUriEqual(requestUri, client.getRequestUris())) {",
      "497:             log.debug(\"request_uri is forbidden by client request uris.\");",
      "498:             throw new WebApplicationException(Response",
      "499:                     .status(Response.Status.BAD_REQUEST)",
      "500:                     .entity(errorResponseFactory.getErrorAsJson(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state, \"\"))",
      "501:                     .build());",
      "502:         }",
      "505:         final List<String> blackList = appConfiguration.getRequestUriBlackList();",
      "506:         if (!blackList.isEmpty()) {",
      "507:             URLPatternList urlPatternList = new URLPatternList(blackList);",
      "508:             if (urlPatternList.isUrlListed(requestUri)) {",
      "509:                 log.debug(\"request_uri is forbidden by requestUriBlackList configuration.\");",
      "510:                 throw new WebApplicationException(Response",
      "511:                         .status(Response.Status.BAD_REQUEST)",
      "512:                         .entity(errorResponseFactory.getErrorAsJson(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state, \"\"))",
      "513:                         .build());",
      "514:             }",
      "515:         }",
      "516:     }",
      "",
      "---------------"
    ],
    "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java": [
      "File: Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java -> Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:         this.state = state;",
      "49:     }",
      "51:     public Response.ResponseBuilder createErrorBuilder(IErrorType errorType) {",
      "52:         redirectUri.parseQueryString(errorFactory.getErrorAsQueryString(errorType, state));",
      "53:         return RedirectUtil.getRedirectResponseBuilder(redirectUri, httpRequest);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:     public String getState() {",
      "52:         return state;",
      "53:     }",
      "",
      "---------------"
    ],
    "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java": [
      "File: Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java -> Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import com.google.common.base.Strings;",
      "32: import com.google.common.collect.Lists;",
      "33: import com.google.common.collect.Sets;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import org.slf4j.LoggerFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: @ApplicationScoped",
      "40: public class RedirectionUriService {",
      "45:     @Inject",
      "46:     private ClientService clientService;",
      "",
      "[Removed Lines]",
      "42:     @Inject",
      "43:     private Logger log;",
      "",
      "[Added Lines]",
      "43:     private static final Logger log = LoggerFactory.getLogger(RedirectionUriService.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "125:         return null;",
      "126:     }",
      "129:         final String redirectUriWithoutParams = uriWithoutParams(redirectionUri);",
      "131:         for (String uri : redirectUris) {",
      "",
      "[Removed Lines]",
      "128:     public boolean isUriEqual(String redirectionUri, String[] redirectUris) {",
      "",
      "[Added Lines]",
      "128:     public static boolean isUriEqual(String redirectionUri, String[] redirectUris) {",
      "",
      "---------------"
    ],
    "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java": [
      "File: Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java -> Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.gluu.oxauth.model.authorize;",
      "3: import org.gluu.oxauth.model.configuration.AppConfiguration;",
      "4: import org.gluu.oxauth.model.error.ErrorResponseFactory;",
      "5: import org.gluu.oxauth.model.registration.Client;",
      "6: import org.testng.annotations.Test;",
      "8: import javax.ws.rs.WebApplicationException;",
      "9: import java.util.Arrays;",
      "10: import java.util.Collections;",
      "15: public class JwtAuthorizationRequestTest {",
      "17:     @Test",
      "18:     public void validateRequestUri_whichIsAllowedByClient_shouldBeOk() {",
      "19:         String requestUri = \"https://myrp.com/request_uri\";",
      "21:         Client client = new Client();",
      "22:         client.setRequestUris(new String[]{\"https://myrp.com/request_uri\"});",
      "23:         JwtAuthorizationRequest.validateRequestUri(requestUri, client, new AppConfiguration(), \"\", new ErrorResponseFactory());",
      "24:     }",
      "26:     @Test",
      "27:     public void validateRequestUri_withNoRestrictions_shouldBeOk() {",
      "28:         String requestUri = \"https://myrp.com/request_uri\";",
      "30:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), new AppConfiguration(), \"\", new ErrorResponseFactory());",
      "31:     }",
      "33:     @Test(expectedExceptions = WebApplicationException.class)",
      "34:     public void validateRequestUri_whichIsNotAllowedByClient_shouldRaiseException() {",
      "35:         String requestUri = \"https://myrp.com/request_uri\";",
      "37:         Client client = new Client();",
      "38:         client.setRequestUris(new String[]{\"https://myrp.com\"});",
      "39:         JwtAuthorizationRequest.validateRequestUri(requestUri, client, new AppConfiguration(), \"\", new ErrorResponseFactory());",
      "40:     }",
      "42:     @Test(expectedExceptions = WebApplicationException.class)",
      "43:     public void validateRequestUri_whichIsBlackListed_shouldRaiseException() {",
      "44:         String requestUri = \"https://myrp.com/request_uri\";",
      "46:         final AppConfiguration appConfiguration = new AppConfiguration();",
      "47:         appConfiguration.setRequestUriBlackList(Arrays.asList(\"myrp.com\", \"evil.com\"));",
      "48:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
      "49:     }",
      "51:     @Test(expectedExceptions = WebApplicationException.class)",
      "52:     public void validateRequestUri_forLocalhost_shouldRaiseException() {",
      "53:         String requestUri = \"https://localhost/request_uri\";",
      "55:         final AppConfiguration appConfiguration = new AppConfiguration();",
      "56:         appConfiguration.setRequestUriBlackList(Collections.singletonList(\"localhost\"));",
      "57:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
      "58:     }",
      "60:     @Test(expectedExceptions = WebApplicationException.class)",
      "61:     public void validateRequestUri_forLocalhostIp_shouldRaiseException() {",
      "62:         String requestUri = \"https://127.0.0.1/request_uri\";",
      "64:         final AppConfiguration appConfiguration = new AppConfiguration();",
      "65:         appConfiguration.setRequestUriBlackList(Collections.singletonList(\"127.0.0.1\"));",
      "66:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
      "67:     }",
      "69:     @Test",
      "70:     public void validateRequestUri_whichIsNotBlackListed_shouldBeOk() {",
      "71:         String requestUri = \"https://myrp.com/request_uri\";",
      "73:         final AppConfiguration appConfiguration = new AppConfiguration();",
      "74:         appConfiguration.setRequestUriBlackList(Arrays.asList(\"evil.com\", \"second.com\"));",
      "75:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
      "76:     }",
      "77: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2116ac51a25d4f8561ca570f31b21f570aaa2a33",
      "candidate_info": {
        "commit_hash": "2116ac51a25d4f8561ca570f31b21f570aaa2a33",
        "repo": "GluuFederation/oxAuth",
        "commit_url": "https://github.com/GluuFederation/oxAuth/commit/2116ac51a25d4f8561ca570f31b21f570aaa2a33",
        "files": [
          "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
          "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
          "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
        ],
        "message": "feat(oxauth): added restriction for request_uri parameter (blacklist/allowed list) (4.5)\n\nhttps://github.com/JanssenProject/jans/issues/1503\n(cherry picked from commit c567baf9caf648d361b222c5beb742dfb64cc5ca)",
        "before_after_code_files": [
          "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
          "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
          "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/GluuFederation/oxAuth/pull/1688"
        ],
        "olp_code_files": {
          "patch": [
            "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
            "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
            "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
          ],
          "candidate": [
            "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
            "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
            "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
          ]
        }
      },
      "candidate_diff": {
        "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java": [
          "File: Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java -> Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     private Boolean requestUriParameterSupported;",
          "102:     private Boolean requestUriHashVerificationEnabled;",
          "103:     private Boolean requireRequestUriRegistration;",
          "104:     private String opPolicyUri;",
          "105:     private String opTosUri;",
          "106:     private int authorizationCodeLifetime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     private List<String> requestUriBlackList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2089:         this.cibaEnabled = cibaEnabled;",
          "2090:     }",
          "2092:     public Boolean getRequestUriHashVerificationEnabled() {",
          "2093:         return requestUriHashVerificationEnabled != null ? requestUriHashVerificationEnabled : false;",
          "2094:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2093:     public List<String> getRequestUriBlackList() {",
          "2094:         if (requestUriBlackList == null) requestUriBlackList = Lists.newArrayList();",
          "2095:         return requestUriBlackList;",
          "2096:     }",
          "2098:     public void setRequestUriBlackList(List<String> requestUriBlackList) {",
          "2099:         this.requestUriBlackList = requestUriBlackList;",
          "2100:     }",
          "",
          "---------------"
        ],
        "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java": [
          "File: Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java -> Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: package org.gluu.oxauth.model.authorize;",
          "21: import org.apache.commons.lang.StringUtils;",
          "22: import org.gluu.oxauth.model.common.Display;",
          "23: import org.gluu.oxauth.model.common.Prompt;",
          "24: import org.gluu.oxauth.model.common.ResponseType;",
          "",
          "[Removed Lines]",
          "9: import java.io.UnsupportedEncodingException;",
          "10: import java.net.URI;",
          "11: import java.net.URLDecoder;",
          "12: import java.nio.charset.StandardCharsets;",
          "13: import java.security.PrivateKey;",
          "14: import java.util.ArrayList;",
          "15: import java.util.List;",
          "17: import javax.ws.rs.WebApplicationException;",
          "18: import javax.ws.rs.client.ClientBuilder;",
          "19: import javax.ws.rs.core.Response;",
          "",
          "[Added Lines]",
          "9: import com.google.common.collect.Lists;",
          "11: import org.apache.commons.lang3.ArrayUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.gluu.oxauth.model.crypto.encryption.BlockEncryptionAlgorithm;",
          "28: import org.gluu.oxauth.model.crypto.encryption.KeyEncryptionAlgorithm;",
          "29: import org.gluu.oxauth.model.crypto.signature.SignatureAlgorithm;",
          "30: import org.gluu.oxauth.model.exception.InvalidJwtException;",
          "31: import org.gluu.oxauth.model.jwe.Jwe;",
          "32: import org.gluu.oxauth.model.jwe.JweDecrypterImpl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.gluu.oxauth.model.error.ErrorResponseFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: import org.gluu.oxauth.model.registration.Client;",
          "36: import org.gluu.oxauth.model.util.Base64Util;",
          "37: import org.gluu.oxauth.model.util.JwtUtil;",
          "38: import org.gluu.oxauth.model.util.Util;",
          "39: import org.gluu.oxauth.service.ClientService;",
          "40: import org.gluu.oxauth.service.RedirectUriResponse;",
          "41: import org.gluu.oxauth.util.ServerUtil;",
          "42: import org.gluu.service.cdi.util.CdiUtil;",
          "43: import org.jetbrains.annotations.Nullable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.gluu.oxauth.model.util.URLPatternList;",
          "33: import org.gluu.oxauth.service.RedirectionUriService;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47: import org.slf4j.Logger;",
          "48: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "50: import com.google.common.base.Strings;",
          "51: import com.google.common.collect.Lists;",
          "",
          "[Added Lines]",
          "43: import javax.ws.rs.WebApplicationException;",
          "44: import javax.ws.rs.client.ClientBuilder;",
          "45: import javax.ws.rs.core.Response;",
          "46: import java.io.UnsupportedEncodingException;",
          "47: import java.net.URI;",
          "48: import java.net.URLDecoder;",
          "49: import java.nio.charset.StandardCharsets;",
          "50: import java.security.PrivateKey;",
          "51: import java.util.ArrayList;",
          "52: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:     }",
          "464:     public static JwtAuthorizationRequest createJwtRequest(String request, String requestUri, Client client, RedirectUriResponse redirectUriResponse, AbstractCryptoProvider cryptoProvider, AppConfiguration appConfiguration) {",
          "465:         final String requestFromClient = queryRequest(requestUri, redirectUriResponse, appConfiguration);",
          "466:         if (StringUtils.isNotBlank(requestFromClient)) {",
          "467:             request = requestFromClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:         validateRequestUri(requestUri, client, appConfiguration, redirectUriResponse.getState());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "481:         return null;",
          "482:     }",
          "484: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:     public static void validateRequestUri(String requestUri, Client client, AppConfiguration appConfiguration, String state) {",
          "487:         validateRequestUri(requestUri, client, appConfiguration, state, CdiUtil.bean(ErrorResponseFactory.class));",
          "488:     }",
          "490:     public static void validateRequestUri(String requestUri, Client client, AppConfiguration appConfiguration, String state, ErrorResponseFactory errorResponseFactory) {",
          "491:         if (StringUtils.isBlank(requestUri)) {",
          "492:             return; // nothing to validate",
          "493:         }",
          "496:         if (ArrayUtils.isNotEmpty(client.getRequestUris()) && !RedirectionUriService.isUriEqual(requestUri, client.getRequestUris())) {",
          "497:             log.debug(\"request_uri is forbidden by client request uris.\");",
          "498:             throw new WebApplicationException(Response",
          "499:                     .status(Response.Status.BAD_REQUEST)",
          "500:                     .entity(errorResponseFactory.getErrorAsJson(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state, \"\"))",
          "501:                     .build());",
          "502:         }",
          "505:         final List<String> blackList = appConfiguration.getRequestUriBlackList();",
          "506:         if (!blackList.isEmpty()) {",
          "507:             URLPatternList urlPatternList = new URLPatternList(blackList);",
          "508:             if (urlPatternList.isUrlListed(requestUri)) {",
          "509:                 log.debug(\"request_uri is forbidden by requestUriBlackList configuration.\");",
          "510:                 throw new WebApplicationException(Response",
          "511:                         .status(Response.Status.BAD_REQUEST)",
          "512:                         .entity(errorResponseFactory.getErrorAsJson(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state, \"\"))",
          "513:                         .build());",
          "514:             }",
          "515:         }",
          "516:     }",
          "",
          "---------------"
        ],
        "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java": [
          "File: Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java -> Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         this.state = state;",
          "49:     }",
          "51:     public Response.ResponseBuilder createErrorBuilder(IErrorType errorType) {",
          "52:         redirectUri.parseQueryString(errorFactory.getErrorAsQueryString(errorType, state));",
          "53:         return RedirectUtil.getRedirectResponseBuilder(redirectUri, httpRequest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     public String getState() {",
          "52:         return state;",
          "53:     }",
          "",
          "---------------"
        ],
        "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java": [
          "File: Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java -> Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import com.google.common.base.Strings;",
          "32: import com.google.common.collect.Lists;",
          "33: import com.google.common.collect.Sets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: @ApplicationScoped",
          "40: public class RedirectionUriService {",
          "45:     @Inject",
          "46:     private ClientService clientService;",
          "",
          "[Removed Lines]",
          "42:     @Inject",
          "43:     private Logger log;",
          "",
          "[Added Lines]",
          "43:     private static final Logger log = LoggerFactory.getLogger(RedirectionUriService.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         return null;",
          "126:     }",
          "129:         final String redirectUriWithoutParams = uriWithoutParams(redirectionUri);",
          "131:         for (String uri : redirectUris) {",
          "",
          "[Removed Lines]",
          "128:     public boolean isUriEqual(String redirectionUri, String[] redirectUris) {",
          "",
          "[Added Lines]",
          "128:     public static boolean isUriEqual(String redirectionUri, String[] redirectUris) {",
          "",
          "---------------"
        ],
        "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java": [
          "File: Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java -> Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.gluu.oxauth.model.authorize;",
          "3: import org.gluu.oxauth.model.configuration.AppConfiguration;",
          "4: import org.gluu.oxauth.model.error.ErrorResponseFactory;",
          "5: import org.gluu.oxauth.model.registration.Client;",
          "6: import org.testng.annotations.Test;",
          "8: import javax.ws.rs.WebApplicationException;",
          "9: import java.util.Arrays;",
          "10: import java.util.Collections;",
          "15: public class JwtAuthorizationRequestTest {",
          "17:     @Test",
          "18:     public void validateRequestUri_whichIsAllowedByClient_shouldBeOk() {",
          "19:         String requestUri = \"https://myrp.com/request_uri\";",
          "21:         Client client = new Client();",
          "22:         client.setRequestUris(new String[]{\"https://myrp.com/request_uri\"});",
          "23:         JwtAuthorizationRequest.validateRequestUri(requestUri, client, new AppConfiguration(), \"\", new ErrorResponseFactory());",
          "24:     }",
          "26:     @Test",
          "27:     public void validateRequestUri_withNoRestrictions_shouldBeOk() {",
          "28:         String requestUri = \"https://myrp.com/request_uri\";",
          "30:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), new AppConfiguration(), \"\", new ErrorResponseFactory());",
          "31:     }",
          "33:     @Test(expectedExceptions = WebApplicationException.class)",
          "34:     public void validateRequestUri_whichIsNotAllowedByClient_shouldRaiseException() {",
          "35:         String requestUri = \"https://myrp.com/request_uri\";",
          "37:         Client client = new Client();",
          "38:         client.setRequestUris(new String[]{\"https://myrp.com\"});",
          "39:         JwtAuthorizationRequest.validateRequestUri(requestUri, client, new AppConfiguration(), \"\", new ErrorResponseFactory());",
          "40:     }",
          "42:     @Test(expectedExceptions = WebApplicationException.class)",
          "43:     public void validateRequestUri_whichIsBlackListed_shouldRaiseException() {",
          "44:         String requestUri = \"https://myrp.com/request_uri\";",
          "46:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "47:         appConfiguration.setRequestUriBlackList(Arrays.asList(\"myrp.com\", \"evil.com\"));",
          "48:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "49:     }",
          "51:     @Test(expectedExceptions = WebApplicationException.class)",
          "52:     public void validateRequestUri_forLocalhost_shouldRaiseException() {",
          "53:         String requestUri = \"https://localhost/request_uri\";",
          "55:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "56:         appConfiguration.setRequestUriBlackList(Collections.singletonList(\"localhost\"));",
          "57:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "58:     }",
          "60:     @Test(expectedExceptions = WebApplicationException.class)",
          "61:     public void validateRequestUri_forLocalhostIp_shouldRaiseException() {",
          "62:         String requestUri = \"https://127.0.0.1/request_uri\";",
          "64:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "65:         appConfiguration.setRequestUriBlackList(Collections.singletonList(\"127.0.0.1\"));",
          "66:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "67:     }",
          "69:     @Test",
          "70:     public void validateRequestUri_whichIsNotBlackListed_shouldBeOk() {",
          "71:         String requestUri = \"https://myrp.com/request_uri\";",
          "73:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "74:         appConfiguration.setRequestUriBlackList(Arrays.asList(\"evil.com\", \"second.com\"));",
          "75:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c567baf9caf648d361b222c5beb742dfb64cc5ca",
      "candidate_info": {
        "commit_hash": "c567baf9caf648d361b222c5beb742dfb64cc5ca",
        "repo": "GluuFederation/oxAuth",
        "commit_url": "https://github.com/GluuFederation/oxAuth/commit/c567baf9caf648d361b222c5beb742dfb64cc5ca",
        "files": [
          "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
          "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
          "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
        ],
        "message": "feat(oxauth): added restriction for request_uri parameter (blacklist/allowed list) (4.5)\n\nhttps://github.com/JanssenProject/jans/issues/1503",
        "before_after_code_files": [
          "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
          "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
          "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
          "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
            "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
            "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
          ],
          "candidate": [
            "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
            "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
            "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
            "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java"
          ]
        }
      },
      "candidate_diff": {
        "Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java||Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java": [
          "File: Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java -> Model/src/main/java/org/gluu/oxauth/model/configuration/AppConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     private Boolean requestUriParameterSupported;",
          "102:     private Boolean requestUriHashVerificationEnabled;",
          "103:     private Boolean requireRequestUriRegistration;",
          "104:     private String opPolicyUri;",
          "105:     private String opTosUri;",
          "106:     private int authorizationCodeLifetime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     private List<String> requestUriBlackList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2089:         this.cibaEnabled = cibaEnabled;",
          "2090:     }",
          "2092:     public Boolean getRequestUriHashVerificationEnabled() {",
          "2093:         return requestUriHashVerificationEnabled != null ? requestUriHashVerificationEnabled : false;",
          "2094:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2093:     public List<String> getRequestUriBlackList() {",
          "2094:         if (requestUriBlackList == null) requestUriBlackList = Lists.newArrayList();",
          "2095:         return requestUriBlackList;",
          "2096:     }",
          "2098:     public void setRequestUriBlackList(List<String> requestUriBlackList) {",
          "2099:         this.requestUriBlackList = requestUriBlackList;",
          "2100:     }",
          "",
          "---------------"
        ],
        "Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java||Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java": [
          "File: Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java -> Server/src/main/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: package org.gluu.oxauth.model.authorize;",
          "21: import org.apache.commons.lang.StringUtils;",
          "22: import org.gluu.oxauth.model.common.Display;",
          "23: import org.gluu.oxauth.model.common.Prompt;",
          "24: import org.gluu.oxauth.model.common.ResponseType;",
          "",
          "[Removed Lines]",
          "9: import java.io.UnsupportedEncodingException;",
          "10: import java.net.URI;",
          "11: import java.net.URLDecoder;",
          "12: import java.nio.charset.StandardCharsets;",
          "13: import java.security.PrivateKey;",
          "14: import java.util.ArrayList;",
          "15: import java.util.List;",
          "17: import javax.ws.rs.WebApplicationException;",
          "18: import javax.ws.rs.client.ClientBuilder;",
          "19: import javax.ws.rs.core.Response;",
          "",
          "[Added Lines]",
          "9: import com.google.common.collect.Lists;",
          "11: import org.apache.commons.lang3.ArrayUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.gluu.oxauth.model.crypto.encryption.BlockEncryptionAlgorithm;",
          "28: import org.gluu.oxauth.model.crypto.encryption.KeyEncryptionAlgorithm;",
          "29: import org.gluu.oxauth.model.crypto.signature.SignatureAlgorithm;",
          "30: import org.gluu.oxauth.model.exception.InvalidJwtException;",
          "31: import org.gluu.oxauth.model.jwe.Jwe;",
          "32: import org.gluu.oxauth.model.jwe.JweDecrypterImpl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.gluu.oxauth.model.error.ErrorResponseFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: import org.gluu.oxauth.model.registration.Client;",
          "36: import org.gluu.oxauth.model.util.Base64Util;",
          "37: import org.gluu.oxauth.model.util.JwtUtil;",
          "38: import org.gluu.oxauth.model.util.Util;",
          "39: import org.gluu.oxauth.service.ClientService;",
          "40: import org.gluu.oxauth.service.RedirectUriResponse;",
          "41: import org.gluu.oxauth.util.ServerUtil;",
          "42: import org.gluu.service.cdi.util.CdiUtil;",
          "43: import org.jetbrains.annotations.Nullable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.gluu.oxauth.model.util.URLPatternList;",
          "33: import org.gluu.oxauth.service.RedirectionUriService;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47: import org.slf4j.Logger;",
          "48: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "50: import com.google.common.base.Strings;",
          "51: import com.google.common.collect.Lists;",
          "",
          "[Added Lines]",
          "43: import javax.ws.rs.WebApplicationException;",
          "44: import javax.ws.rs.client.ClientBuilder;",
          "45: import javax.ws.rs.core.Response;",
          "46: import java.io.UnsupportedEncodingException;",
          "47: import java.net.URI;",
          "48: import java.net.URLDecoder;",
          "49: import java.nio.charset.StandardCharsets;",
          "50: import java.security.PrivateKey;",
          "51: import java.util.ArrayList;",
          "52: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:     }",
          "464:     public static JwtAuthorizationRequest createJwtRequest(String request, String requestUri, Client client, RedirectUriResponse redirectUriResponse, AbstractCryptoProvider cryptoProvider, AppConfiguration appConfiguration) {",
          "465:         final String requestFromClient = queryRequest(requestUri, redirectUriResponse, appConfiguration);",
          "466:         if (StringUtils.isNotBlank(requestFromClient)) {",
          "467:             request = requestFromClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:         validateRequestUri(requestUri, client, appConfiguration, redirectUriResponse.getState());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "481:         return null;",
          "482:     }",
          "484: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:     public static void validateRequestUri(String requestUri, Client client, AppConfiguration appConfiguration, String state) {",
          "487:         validateRequestUri(requestUri, client, appConfiguration, state, CdiUtil.bean(ErrorResponseFactory.class));",
          "488:     }",
          "490:     public static void validateRequestUri(String requestUri, Client client, AppConfiguration appConfiguration, String state, ErrorResponseFactory errorResponseFactory) {",
          "491:         if (StringUtils.isBlank(requestUri)) {",
          "492:             return; // nothing to validate",
          "493:         }",
          "496:         if (ArrayUtils.isNotEmpty(client.getRequestUris()) && !RedirectionUriService.isUriEqual(requestUri, client.getRequestUris())) {",
          "497:             log.debug(\"request_uri is forbidden by client request uris.\");",
          "498:             throw new WebApplicationException(Response",
          "499:                     .status(Response.Status.BAD_REQUEST)",
          "500:                     .entity(errorResponseFactory.getErrorAsJson(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state, \"\"))",
          "501:                     .build());",
          "502:         }",
          "505:         final List<String> blackList = appConfiguration.getRequestUriBlackList();",
          "506:         if (!blackList.isEmpty()) {",
          "507:             URLPatternList urlPatternList = new URLPatternList(blackList);",
          "508:             if (urlPatternList.isUrlListed(requestUri)) {",
          "509:                 log.debug(\"request_uri is forbidden by requestUriBlackList configuration.\");",
          "510:                 throw new WebApplicationException(Response",
          "511:                         .status(Response.Status.BAD_REQUEST)",
          "512:                         .entity(errorResponseFactory.getErrorAsJson(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state, \"\"))",
          "513:                         .build());",
          "514:             }",
          "515:         }",
          "516:     }",
          "",
          "---------------"
        ],
        "Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java||Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java": [
          "File: Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java -> Server/src/main/java/org/gluu/oxauth/service/RedirectUriResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         this.state = state;",
          "49:     }",
          "51:     public Response.ResponseBuilder createErrorBuilder(IErrorType errorType) {",
          "52:         redirectUri.parseQueryString(errorFactory.getErrorAsQueryString(errorType, state));",
          "53:         return RedirectUtil.getRedirectResponseBuilder(redirectUri, httpRequest);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     public String getState() {",
          "52:         return state;",
          "53:     }",
          "",
          "---------------"
        ],
        "Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java||Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java": [
          "File: Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java -> Server/src/main/java/org/gluu/oxauth/service/RedirectionUriService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import com.google.common.base.Strings;",
          "32: import com.google.common.collect.Lists;",
          "33: import com.google.common.collect.Sets;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: @ApplicationScoped",
          "40: public class RedirectionUriService {",
          "45:     @Inject",
          "46:     private ClientService clientService;",
          "",
          "[Removed Lines]",
          "42:     @Inject",
          "43:     private Logger log;",
          "",
          "[Added Lines]",
          "43:     private static final Logger log = LoggerFactory.getLogger(RedirectionUriService.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         return null;",
          "126:     }",
          "129:         final String redirectUriWithoutParams = uriWithoutParams(redirectionUri);",
          "131:         for (String uri : redirectUris) {",
          "",
          "[Removed Lines]",
          "128:     public boolean isUriEqual(String redirectionUri, String[] redirectUris) {",
          "",
          "[Added Lines]",
          "128:     public static boolean isUriEqual(String redirectionUri, String[] redirectUris) {",
          "",
          "---------------"
        ],
        "Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java||Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java": [
          "File: Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java -> Server/src/test/java/org/gluu/oxauth/model/authorize/JwtAuthorizationRequestTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.gluu.oxauth.model.authorize;",
          "3: import org.gluu.oxauth.model.configuration.AppConfiguration;",
          "4: import org.gluu.oxauth.model.error.ErrorResponseFactory;",
          "5: import org.gluu.oxauth.model.registration.Client;",
          "6: import org.testng.annotations.Test;",
          "8: import javax.ws.rs.WebApplicationException;",
          "9: import java.util.Arrays;",
          "10: import java.util.Collections;",
          "15: public class JwtAuthorizationRequestTest {",
          "17:     @Test",
          "18:     public void validateRequestUri_whichIsAllowedByClient_shouldBeOk() {",
          "19:         String requestUri = \"https://myrp.com/request_uri\";",
          "21:         Client client = new Client();",
          "22:         client.setRequestUris(new String[]{\"https://myrp.com/request_uri\"});",
          "23:         JwtAuthorizationRequest.validateRequestUri(requestUri, client, new AppConfiguration(), \"\", new ErrorResponseFactory());",
          "24:     }",
          "26:     @Test",
          "27:     public void validateRequestUri_withNoRestrictions_shouldBeOk() {",
          "28:         String requestUri = \"https://myrp.com/request_uri\";",
          "30:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), new AppConfiguration(), \"\", new ErrorResponseFactory());",
          "31:     }",
          "33:     @Test(expectedExceptions = WebApplicationException.class)",
          "34:     public void validateRequestUri_whichIsNotAllowedByClient_shouldRaiseException() {",
          "35:         String requestUri = \"https://myrp.com/request_uri\";",
          "37:         Client client = new Client();",
          "38:         client.setRequestUris(new String[]{\"https://myrp.com\"});",
          "39:         JwtAuthorizationRequest.validateRequestUri(requestUri, client, new AppConfiguration(), \"\", new ErrorResponseFactory());",
          "40:     }",
          "42:     @Test(expectedExceptions = WebApplicationException.class)",
          "43:     public void validateRequestUri_whichIsBlackListed_shouldRaiseException() {",
          "44:         String requestUri = \"https://myrp.com/request_uri\";",
          "46:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "47:         appConfiguration.setRequestUriBlackList(Arrays.asList(\"myrp.com\", \"evil.com\"));",
          "48:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "49:     }",
          "51:     @Test(expectedExceptions = WebApplicationException.class)",
          "52:     public void validateRequestUri_forLocalhost_shouldRaiseException() {",
          "53:         String requestUri = \"https://localhost/request_uri\";",
          "55:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "56:         appConfiguration.setRequestUriBlackList(Collections.singletonList(\"localhost\"));",
          "57:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "58:     }",
          "60:     @Test(expectedExceptions = WebApplicationException.class)",
          "61:     public void validateRequestUri_forLocalhostIp_shouldRaiseException() {",
          "62:         String requestUri = \"https://127.0.0.1/request_uri\";",
          "64:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "65:         appConfiguration.setRequestUriBlackList(Collections.singletonList(\"127.0.0.1\"));",
          "66:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "67:     }",
          "69:     @Test",
          "70:     public void validateRequestUri_whichIsNotBlackListed_shouldBeOk() {",
          "71:         String requestUri = \"https://myrp.com/request_uri\";",
          "73:         final AppConfiguration appConfiguration = new AppConfiguration();",
          "74:         appConfiguration.setRequestUriBlackList(Arrays.asList(\"evil.com\", \"second.com\"));",
          "75:         JwtAuthorizationRequest.validateRequestUri(requestUri, new Client(), appConfiguration, \"\", new ErrorResponseFactory());",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}