{
  "cve_id": "CVE-2021-35065",
  "cve_desc": "The glob-parent package before 6.0.1 for Node.js allows ReDoS (regular expression denial of service) attacks against the enclosure regular expression.",
  "repo": "gulpjs/glob-parent",
  "patch_hash": "3e9f04a3b4349db7e1962d87c9a7398cda51f339",
  "patch_info": {
    "commit_hash": "3e9f04a3b4349db7e1962d87c9a7398cda51f339",
    "repo": "gulpjs/glob-parent",
    "commit_url": "https://github.com/gulpjs/glob-parent/commit/3e9f04a3b4349db7e1962d87c9a7398cda51f339",
    "files": [
      "index.js",
      "test/index.test.js"
    ],
    "message": "fix: Resolve ReDoS vulnerability from CVE-2021-35065 (#49)",
    "before_after_code_files": [
      "index.js||index.js",
      "test/index.test.js||test/index.test.js"
    ]
  },
  "patch_diff": {
    "index.js||index.js": [
      "File: index.js -> index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: var slash = '/';",
      "8: var backslash = /\\\\/g;",
      "10: var globby = /(^|[^\\\\])([{[]|\\([^)]+$)/;",
      "11: var escaped = /\\\\([!*?|[\\](){}])/g;",
      "",
      "[Removed Lines]",
      "9: var enclosure = /[{[].*\\/.*[}\\]]$/;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:   }",
      "28:     str += slash;",
      "29:   }",
      "",
      "[Removed Lines]",
      "27:   if (enclosure.test(str)) {",
      "",
      "[Added Lines]",
      "26:   if (isEnclosure(str)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "40:   return str.replace(escaped, '$1');",
      "41: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: function isEnclosure(str) {",
      "44:   var lastChar = str.slice(-1)",
      "46:   var enclosureStart;",
      "47:   switch (lastChar) {",
      "48:     case '}':",
      "49:       enclosureStart = '{';",
      "50:       break;",
      "51:     case ']':",
      "52:       enclosureStart = '[';",
      "53:       break;",
      "54:     default:",
      "55:       return false;",
      "56:   }",
      "58:   var foundIndex = str.indexOf(enclosureStart);",
      "59:   if (foundIndex < 0) {",
      "60:     return false;",
      "61:   }",
      "63:   return str.slice(foundIndex + 1, -1).includes(slash);",
      "64: }",
      "",
      "---------------"
    ],
    "test/index.test.js||test/index.test.js": [
      "File: test/index.test.js -> test/index.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "225:     done();",
      "226:   });",
      "227: });",
      "229: if (isWin32) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "228:   it('should finish in reasonable time for \\'{\\' + \\'/\\'.repeat(n) [CVE-2021-35065]', function(done) {",
      "229:     this.timeout(1000);",
      "230:     gp('{' + '/'.repeat(500000));",
      "231:     done();",
      "232:   });",
      "234:   it('should finish in reasonable time for \\'{\\'.repeat(n)', function(done) {",
      "235:     this.timeout(1000);",
      "236:     gp('{'.repeat(500000));",
      "237:     done();",
      "238:   });",
      "240:   it('should finish in reasonable time for \\'(\\'.repeat(n)', function(done) {",
      "241:     this.timeout(1000);",
      "242:     gp('('.repeat(500000));",
      "243:     done();",
      "244:   });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bca4204c6d9a78d559de4891372a633c51e2cc94",
      "candidate_info": {
        "commit_hash": "bca4204c6d9a78d559de4891372a633c51e2cc94",
        "repo": "gulpjs/glob-parent",
        "commit_url": "https://github.com/gulpjs/glob-parent/commit/bca4204c6d9a78d559de4891372a633c51e2cc94",
        "files": [
          ".gitignore",
          ".travis.yml",
          "LICENSE",
          "README.md",
          "index.js",
          "package.json",
          "test.js"
        ],
        "message": "chore: release 1.0.0",
        "before_after_code_files": [
          "index.js||index.js",
          "test.js||test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "index.js||index.js"
          ],
          "candidate": [
            "index.js||index.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: var path = require('path');",
          "4: var isglob = require('is-glob');",
          "6: module.exports = function globParent(str) {",
          "7:  while (isglob(str)) str = path.dirname(str);",
          "8:  return str;",
          "9: };",
          "",
          "---------------"
        ],
        "test.js||test.js": [
          "File: test.js -> test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 'use strict';",
          "3: var gp = require('./');",
          "4: var assert = require('assert');",
          "6: describe('glob-parent', function() {",
          "7:   it('should strip glob magic to return parent path', function() {",
          "8:     assert.equal(gp('path/to/*.js'), 'path/to');",
          "9:     assert.equal(gp('/root/path/to/*.js'), '/root/path/to');",
          "10:     assert.equal(gp('/*.js'), '/');",
          "11:     assert.equal(gp('*.js'), '.');",
          "12:     assert.equal(gp('**/*.js'), '.');",
          "13:     assert.equal(gp('path/{to,from}'), 'path');",
          "14:     assert.equal(gp('path/!(to|from)'), 'path');",
          "15:     assert.equal(gp('path/?(to|from)'), 'path');",
          "16:     assert.equal(gp('path/+(to|from)'), 'path');",
          "17:     assert.equal(gp('path/*(to|from)'), 'path');",
          "18:     assert.equal(gp('path/@(to|from)'), 'path');",
          "19:     assert.equal(gp('path/**/*'), 'path');",
          "20:   });",
          "21: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}