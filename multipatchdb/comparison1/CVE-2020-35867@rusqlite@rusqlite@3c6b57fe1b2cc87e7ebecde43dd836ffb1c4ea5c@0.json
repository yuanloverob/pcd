{
  "cve_id": "CVE-2020-35867",
  "cve_desc": "An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via create_module.",
  "repo": "rusqlite/rusqlite",
  "patch_hash": "3c6b57fe1b2cc87e7ebecde43dd836ffb1c4ea5c",
  "patch_info": {
    "commit_hash": "3c6b57fe1b2cc87e7ebecde43dd836ffb1c4ea5c",
    "repo": "rusqlite/rusqlite",
    "commit_url": "https://github.com/rusqlite/rusqlite/commit/3c6b57fe1b2cc87e7ebecde43dd836ffb1c4ea5c",
    "files": [
      "src/vtab/array.rs",
      "src/vtab/csvtab.rs",
      "src/vtab/mod.rs",
      "src/vtab/series.rs",
      "tests/vtab.rs"
    ],
    "message": "Fix vtab::Module lifetime",
    "before_after_code_files": [
      "src/vtab/array.rs||src/vtab/array.rs",
      "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
      "src/vtab/mod.rs||src/vtab/mod.rs",
      "src/vtab/series.rs||src/vtab/series.rs",
      "tests/vtab.rs||tests/vtab.rs"
    ]
  },
  "patch_diff": {
    "src/vtab/array.rs||src/vtab/array.rs": [
      "File: src/vtab/array.rs -> src/vtab/array.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: use crate::ffi;",
      "34: use crate::types::{ToSql, ToSqlOutput, Value};",
      "35: use crate::vtab::{",
      "38: };",
      "39: use crate::{Connection, Result};",
      "",
      "[Removed Lines]",
      "36:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, Module, VTab, VTabConnection,",
      "37:     VTabCursor, Values,",
      "",
      "[Added Lines]",
      "36:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, VTab, VTabConnection, VTabCursor,",
      "37:     Values,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58: pub fn load_module(conn: &Connection) -> Result<()> {",
      "59:     let aux: Option<()> = None;",
      "65: }",
      "",
      "[Removed Lines]",
      "60:     conn.create_module(\"rarray\", &ARRAY_MODULE, aux)",
      "61: }",
      "63: lazy_static::lazy_static! {",
      "64:     static ref ARRAY_MODULE: Module<ArrayTab> = eponymous_only_module::<ArrayTab>(1);",
      "",
      "[Added Lines]",
      "60:     conn.create_module(\"rarray\", eponymous_only_module::<ArrayTab>(), aux)",
      "",
      "---------------"
    ],
    "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
      "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: use crate::types::Null;",
      "31: use crate::vtab::{",
      "32:     dequote, escape_double_quote, parse_boolean, read_only_module, Context, CreateVTab, IndexInfo,",
      "34: };",
      "35: use crate::{Connection, Error, Result};",
      "",
      "[Removed Lines]",
      "33:     Module, VTab, VTabConnection, VTabCursor, Values,",
      "",
      "[Added Lines]",
      "33:     VTab, VTabConnection, VTabCursor, Values,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: pub fn load_module(conn: &Connection) -> Result<()> {",
      "49:     let aux: Option<()> = None;",
      "55: }",
      "",
      "[Removed Lines]",
      "50:     conn.create_module(\"csv\", &CSV_MODULE, aux)",
      "51: }",
      "53: lazy_static::lazy_static! {",
      "54:     static ref CSV_MODULE: Module<CSVTab> = read_only_module::<CSVTab>(1);",
      "",
      "[Added Lines]",
      "50:     conn.create_module(\"csv\", read_only_module::<CSVTab>(), aux)",
      "",
      "---------------"
    ],
    "src/vtab/mod.rs||src/vtab/mod.rs": [
      "File: src/vtab/mod.rs -> src/vtab/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: pub struct Module<T: VTab> {",
      "65:     base: ffi::sqlite3_module,",
      "66:     phantom: PhantomData<T>,",
      "",
      "[Removed Lines]",
      "63: #[repr(C)]",
      "",
      "[Added Lines]",
      "63: #[repr(transparent)]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: unsafe impl<T: VTab> Send for Module<T> {}",
      "70: unsafe impl<T: VTab> Sync for Module<T> {}",
      "77: }",
      "113:         phantom: PhantomData::<T>,",
      "114:     }",
      "115: }",
      "",
      "[Removed Lines]",
      "74: fn zeroed_module() -> ffi::sqlite3_module {",
      "76:     unsafe { std::mem::MaybeUninit::zeroed().assume_init() }",
      "82: pub fn read_only_module<T: CreateVTab>(version: c_int) -> Module<T> {",
      "85:     let ffi_module = ffi::sqlite3_module {",
      "86:         iVersion: version,",
      "87:         xCreate: Some(rust_create::<T>),",
      "88:         xConnect: Some(rust_connect::<T>),",
      "89:         xBestIndex: Some(rust_best_index::<T>),",
      "90:         xDisconnect: Some(rust_disconnect::<T>),",
      "91:         xDestroy: Some(rust_destroy::<T>),",
      "92:         xOpen: Some(rust_open::<T>),",
      "93:         xClose: Some(rust_close::<T::Cursor>),",
      "94:         xFilter: Some(rust_filter::<T::Cursor>),",
      "95:         xNext: Some(rust_next::<T::Cursor>),",
      "96:         xEof: Some(rust_eof::<T::Cursor>),",
      "97:         xColumn: Some(rust_column::<T::Cursor>),",
      "98:         xRowid: Some(rust_rowid::<T::Cursor>),",
      "99:         xUpdate: None,",
      "100:         xBegin: None,",
      "101:         xSync: None,",
      "102:         xCommit: None,",
      "103:         xRollback: None,",
      "104:         xFindFunction: None,",
      "105:         xRename: None,",
      "106:         xSavepoint: None,",
      "107:         xRelease: None,",
      "108:         xRollbackTo: None,",
      "109:         ..zeroed_module()",
      "110:     };",
      "111:     Module {",
      "112:         base: ffi_module,",
      "",
      "[Added Lines]",
      "72: union ModuleZeroHack {",
      "73:     bytes: [u8; std::mem::size_of::<ffi::sqlite3_module>()],",
      "74:     module: ffi::sqlite3_module,",
      "80: const ZERO_MODULE: ffi::sqlite3_module = unsafe {",
      "81:     ModuleZeroHack {",
      "82:         bytes: [0u8; std::mem::size_of::<ffi::sqlite3_module>()],",
      "83:     }",
      "84:     .module",
      "85: };",
      "90: pub fn read_only_module<T: CreateVTab>() -> &'static Module<T> {",
      "93:     &Module {",
      "94:         base: ffi::sqlite3_module {",
      "96:             iVersion: 2, // We don't use V2 or V3 features in read_only_module types",
      "97:             xCreate: Some(rust_create::<T>),",
      "98:             xConnect: Some(rust_connect::<T>),",
      "99:             xBestIndex: Some(rust_best_index::<T>),",
      "100:             xDisconnect: Some(rust_disconnect::<T>),",
      "101:             xDestroy: Some(rust_destroy::<T>),",
      "102:             xOpen: Some(rust_open::<T>),",
      "103:             xClose: Some(rust_close::<T::Cursor>),",
      "104:             xFilter: Some(rust_filter::<T::Cursor>),",
      "105:             xNext: Some(rust_next::<T::Cursor>),",
      "106:             xEof: Some(rust_eof::<T::Cursor>),",
      "107:             xColumn: Some(rust_column::<T::Cursor>),",
      "108:             xRowid: Some(rust_rowid::<T::Cursor>),",
      "109:             xUpdate: None,",
      "110:             xBegin: None,",
      "111:             xSync: None,",
      "112:             xCommit: None,",
      "113:             xRollback: None,",
      "114:             xFindFunction: None,",
      "115:             xRename: None,",
      "116:             xSavepoint: None,",
      "117:             xRelease: None,",
      "118:             xRollbackTo: None,",
      "119:             ..ZERO_MODULE",
      "120:         },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "152:         phantom: PhantomData::<T>,",
      "153:     }",
      "154: }",
      "",
      "[Removed Lines]",
      "120: pub fn eponymous_only_module<T: VTab>(version: c_int) -> Module<T> {",
      "124:     let ffi_module = ffi::sqlite3_module {",
      "125:         iVersion: version,",
      "126:         xCreate: None,",
      "127:         xConnect: Some(rust_connect::<T>),",
      "128:         xBestIndex: Some(rust_best_index::<T>),",
      "129:         xDisconnect: Some(rust_disconnect::<T>),",
      "130:         xDestroy: None,",
      "131:         xOpen: Some(rust_open::<T>),",
      "132:         xClose: Some(rust_close::<T::Cursor>),",
      "133:         xFilter: Some(rust_filter::<T::Cursor>),",
      "134:         xNext: Some(rust_next::<T::Cursor>),",
      "135:         xEof: Some(rust_eof::<T::Cursor>),",
      "136:         xColumn: Some(rust_column::<T::Cursor>),",
      "137:         xRowid: Some(rust_rowid::<T::Cursor>),",
      "138:         xUpdate: None,",
      "139:         xBegin: None,",
      "140:         xSync: None,",
      "141:         xCommit: None,",
      "142:         xRollback: None,",
      "143:         xFindFunction: None,",
      "144:         xRename: None,",
      "145:         xSavepoint: None,",
      "146:         xRelease: None,",
      "147:         xRollbackTo: None,",
      "148:         ..zeroed_module()",
      "149:     };",
      "150:     Module {",
      "151:         base: ffi_module,",
      "",
      "[Added Lines]",
      "128: pub fn eponymous_only_module<T: VTab>() -> &'static Module<T> {",
      "132:     &Module {",
      "133:         base: ffi::sqlite3_module {",
      "135:             iVersion: 2,",
      "136:             xCreate: None,",
      "137:             xConnect: Some(rust_connect::<T>),",
      "138:             xBestIndex: Some(rust_best_index::<T>),",
      "139:             xDisconnect: Some(rust_disconnect::<T>),",
      "140:             xDestroy: None,",
      "141:             xOpen: Some(rust_open::<T>),",
      "142:             xClose: Some(rust_close::<T::Cursor>),",
      "143:             xFilter: Some(rust_filter::<T::Cursor>),",
      "144:             xNext: Some(rust_next::<T::Cursor>),",
      "145:             xEof: Some(rust_eof::<T::Cursor>),",
      "146:             xColumn: Some(rust_column::<T::Cursor>),",
      "147:             xRowid: Some(rust_rowid::<T::Cursor>),",
      "148:             xUpdate: None,",
      "149:             xBegin: None,",
      "150:             xSync: None,",
      "151:             xCommit: None,",
      "152:             xRollback: None,",
      "153:             xFindFunction: None,",
      "154:             xRename: None,",
      "155:             xSavepoint: None,",
      "156:             xRelease: None,",
      "157:             xRollbackTo: None,",
      "158:             ..ZERO_MODULE",
      "159:         },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "583: impl Connection {",
      "587:     pub fn create_module<T: VTab>(",
      "588:         &self,",
      "589:         module_name: &str,",
      "591:         aux: Option<T::Aux>,",
      "592:     ) -> Result<()> {",
      "593:         self.db.borrow_mut().create_module(module_name, module, aux)",
      "",
      "[Removed Lines]",
      "590:         module: &Module<T>,",
      "",
      "[Added Lines]",
      "599:         module: &'static Module<T>,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "598:     fn create_module<T: VTab>(",
      "599:         &mut self,",
      "600:         module_name: &str,",
      "602:         aux: Option<T::Aux>,",
      "603:     ) -> Result<()> {",
      "604:         let c_name = str_to_cstring(module_name)?;",
      "",
      "[Removed Lines]",
      "601:         module: &Module<T>,",
      "",
      "[Added Lines]",
      "610:         module: &'static Module<T>,",
      "",
      "---------------"
    ],
    "src/vtab/series.rs||src/vtab/series.rs": [
      "File: src/vtab/series.rs -> src/vtab/series.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: use crate::ffi;",
      "10: use crate::types::Type;",
      "11: use crate::vtab::{",
      "14: };",
      "15: use crate::{Connection, Result};",
      "18: pub fn load_module(conn: &Connection) -> Result<()> {",
      "19:     let aux: Option<()> = None;",
      "25: }",
      "",
      "[Removed Lines]",
      "12:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, Module, VTab, VTabConnection,",
      "13:     VTabCursor, Values,",
      "20:     conn.create_module(\"generate_series\", &SERIES_MODULE, aux)",
      "21: }",
      "23: lazy_static::lazy_static! {",
      "24:     static ref SERIES_MODULE: Module<SeriesTab> = eponymous_only_module::<SeriesTab>(1);",
      "",
      "[Added Lines]",
      "12:     eponymous_only_module, Context, IndexConstraintOp, IndexInfo, VTab, VTabConnection, VTabCursor,",
      "13:     Values,",
      "20:     conn.create_module(\"generate_series\", eponymous_only_module::<SeriesTab>(), aux)",
      "",
      "---------------"
    ],
    "tests/vtab.rs||tests/vtab.rs": [
      "File: tests/vtab.rs -> tests/vtab.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     use rusqlite::{version_number, Connection, Result};",
      "12:     use std::os::raw::c_int;",
      "16:     #[repr(C)]",
      "17:     struct DummyTab {",
      "",
      "[Removed Lines]",
      "14:     let module = eponymous_only_module::<DummyTab>(1);",
      "",
      "[Added Lines]",
      "14:     let module = eponymous_only_module::<DummyTab>();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:         base: sqlite3_vtab,",
      "20:     }",
      "23:         type Aux = ();",
      "24:         type Cursor = DummyTabCursor;",
      "",
      "[Removed Lines]",
      "22:     impl VTab for DummyTab {",
      "",
      "[Added Lines]",
      "22:     unsafe impl VTab for DummyTab {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:         row_id: i64,",
      "54:     }",
      "57:         fn filter(",
      "58:             &mut self,",
      "59:             _idx_num: c_int,",
      "",
      "[Removed Lines]",
      "56:     impl VTabCursor for DummyTabCursor {",
      "",
      "[Added Lines]",
      "56:     unsafe impl VTabCursor for DummyTabCursor {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c9ef5bd63cad5c0c123344c072b490a1a9bcbe1f",
      "candidate_info": {
        "commit_hash": "c9ef5bd63cad5c0c123344c072b490a1a9bcbe1f",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/c9ef5bd63cad5c0c123344c072b490a1a9bcbe1f",
        "files": [
          "src/vtab/array.rs",
          "src/vtab/csvtab.rs",
          "src/vtab/mod.rs",
          "src/vtab/series.rs"
        ],
        "message": "Make VTab / VTabCursor `unsafe trait` as implmenting them on the wrong type is unsound",
        "before_after_code_files": [
          "src/vtab/array.rs||src/vtab/array.rs",
          "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
          "src/vtab/mod.rs||src/vtab/mod.rs",
          "src/vtab/series.rs||src/vtab/series.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rusqlite/rusqlite/pull/704"
        ],
        "olp_code_files": {
          "patch": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs"
          ],
          "candidate": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/vtab/array.rs||src/vtab/array.rs": [
          "File: src/vtab/array.rs -> src/vtab/array.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     base: ffi::sqlite3_vtab,",
          "72: }",
          "75:     type Aux = ();",
          "76:     type Cursor = ArrayTabCursor;",
          "",
          "[Removed Lines]",
          "74: impl VTab for ArrayTab {",
          "",
          "[Added Lines]",
          "74: unsafe impl VTab for ArrayTab {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         }",
          "150:     }",
          "151: }",
          "153:     fn filter(&mut self, idx_num: c_int, _idx_str: Option<&str>, args: &Values<'_>) -> Result<()> {",
          "154:         if idx_num > 0 {",
          "155:             self.ptr = args.get_array(0)?;",
          "",
          "[Removed Lines]",
          "152: impl VTabCursor for ArrayTabCursor {",
          "",
          "[Added Lines]",
          "152: unsafe impl VTabCursor for ArrayTabCursor {",
          "",
          "---------------"
        ],
        "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
          "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     }",
          "96: }",
          "99:     type Aux = ();",
          "100:     type Cursor = CSVTabCursor;",
          "",
          "[Removed Lines]",
          "98: impl VTab for CSVTab {",
          "",
          "[Added Lines]",
          "98: unsafe impl VTab for CSVTab {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     }",
          "297: }",
          "302:     fn filter(",
          "",
          "[Removed Lines]",
          "299: impl VTabCursor for CSVTabCursor {",
          "",
          "[Added Lines]",
          "299: unsafe impl VTabCursor for CSVTabCursor {",
          "",
          "---------------"
        ],
        "src/vtab/mod.rs||src/vtab/mod.rs": [
          "File: src/vtab/mod.rs -> src/vtab/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     type Aux;",
          "205:     type Cursor: VTabCursor;",
          "",
          "[Removed Lines]",
          "203: pub trait VTab: Sized {",
          "",
          "[Added Lines]",
          "207: pub unsafe trait VTab: Sized {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:     fn filter(&mut self, idx_num: c_int, idx_str: Option<&str>, args: &Values<'_>) -> Result<()>;",
          "",
          "[Removed Lines]",
          "468: pub trait VTabCursor: Sized {",
          "",
          "[Added Lines]",
          "472: pub unsafe trait VTabCursor: Sized {",
          "",
          "---------------"
        ],
        "src/vtab/series.rs||src/vtab/series.rs": [
          "File: src/vtab/series.rs -> src/vtab/series.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     base: ffi::sqlite3_vtab,",
          "50: }",
          "53:     type Aux = ();",
          "54:     type Cursor = SeriesTabCursor;",
          "",
          "[Removed Lines]",
          "52: impl VTab for SeriesTab {",
          "",
          "[Added Lines]",
          "52: unsafe impl VTab for SeriesTab {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:         SeriesTabCursor::default()",
          "182:     }",
          "183: }",
          "185:     fn filter(&mut self, idx_num: c_int, _idx_str: Option<&str>, args: &Values<'_>) -> Result<()> {",
          "186:         let idx_num = QueryPlanFlags::from_bits_truncate(idx_num);",
          "187:         let mut i = 0;",
          "",
          "[Removed Lines]",
          "184: impl VTabCursor for SeriesTabCursor {",
          "",
          "[Added Lines]",
          "184: unsafe impl VTabCursor for SeriesTabCursor {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5c20abaa198ff8f3dca5aba8e37bef6bc295ce4",
      "candidate_info": {
        "commit_hash": "f5c20abaa198ff8f3dca5aba8e37bef6bc295ce4",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/f5c20abaa198ff8f3dca5aba8e37bef6bc295ce4",
        "files": [
          "Cargo.toml",
          "src/vtab/mod.rs"
        ],
        "message": "Remove unused vtab_v3 feature while I'm here",
        "before_after_code_files": [
          "src/vtab/mod.rs||src/vtab/mod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/mod.rs||src/vtab/mod.rs"
          ],
          "candidate": [
            "src/vtab/mod.rs||src/vtab/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/vtab/mod.rs||src/vtab/mod.rs": [
          "File: src/vtab/mod.rs -> src/vtab/mod.rs"
        ]
      }
    },
    {
      "candidate_hash": "6617db59fbe82517d60e45d5e2b5f0de8fccbd6a",
      "candidate_info": {
        "commit_hash": "6617db59fbe82517d60e45d5e2b5f0de8fccbd6a",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/6617db59fbe82517d60e45d5e2b5f0de8fccbd6a",
        "files": [
          "src/backup.rs",
          "src/blob.rs",
          "src/collation.rs",
          "src/functions.rs",
          "src/hooks.rs",
          "src/lib.rs",
          "src/limits.rs",
          "src/load_extension_guard.rs",
          "src/session.rs",
          "src/trace.rs",
          "src/types/from_sql.rs",
          "src/types/to_sql.rs",
          "src/vtab/array.rs",
          "src/vtab/csvtab.rs",
          "src/vtab/mod.rs",
          "src/vtab/series.rs"
        ],
        "message": "Document which features are required, and add vtab usage examples (#669)",
        "before_after_code_files": [
          "src/backup.rs||src/backup.rs",
          "src/blob.rs||src/blob.rs",
          "src/collation.rs||src/collation.rs",
          "src/functions.rs||src/functions.rs",
          "src/hooks.rs||src/hooks.rs",
          "src/lib.rs||src/lib.rs",
          "src/limits.rs||src/limits.rs",
          "src/load_extension_guard.rs||src/load_extension_guard.rs",
          "src/session.rs||src/session.rs",
          "src/trace.rs||src/trace.rs",
          "src/types/from_sql.rs||src/types/from_sql.rs",
          "src/types/to_sql.rs||src/types/to_sql.rs",
          "src/vtab/array.rs||src/vtab/array.rs",
          "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
          "src/vtab/mod.rs||src/vtab/mod.rs",
          "src/vtab/series.rs||src/vtab/series.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs"
          ],
          "candidate": [
            "src/vtab/array.rs||src/vtab/array.rs",
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs",
            "src/vtab/series.rs||src/vtab/series.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/backup.rs||src/backup.rs": [
          "File: src/backup.rs -> src/backup.rs"
        ],
        "src/blob.rs||src/blob.rs": [
          "File: src/blob.rs -> src/blob.rs"
        ],
        "src/collation.rs||src/collation.rs": [
          "File: src/collation.rs -> src/collation.rs"
        ],
        "src/functions.rs||src/functions.rs": [
          "File: src/functions.rs -> src/functions.rs"
        ],
        "src/hooks.rs||src/hooks.rs": [
          "File: src/hooks.rs -> src/hooks.rs"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs"
        ],
        "src/limits.rs||src/limits.rs": [
          "File: src/limits.rs -> src/limits.rs"
        ],
        "src/load_extension_guard.rs||src/load_extension_guard.rs": [
          "File: src/load_extension_guard.rs -> src/load_extension_guard.rs"
        ],
        "src/session.rs||src/session.rs": [
          "File: src/session.rs -> src/session.rs"
        ],
        "src/trace.rs||src/trace.rs": [
          "File: src/trace.rs -> src/trace.rs"
        ],
        "src/types/from_sql.rs||src/types/from_sql.rs": [
          "File: src/types/from_sql.rs -> src/types/from_sql.rs"
        ],
        "src/types/to_sql.rs||src/types/to_sql.rs": [
          "File: src/types/to_sql.rs -> src/types/to_sql.rs"
        ],
        "src/vtab/array.rs||src/vtab/array.rs": [
          "File: src/vtab/array.rs -> src/vtab/array.rs"
        ],
        "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
          "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs"
        ],
        "src/vtab/mod.rs||src/vtab/mod.rs": [
          "File: src/vtab/mod.rs -> src/vtab/mod.rs"
        ],
        "src/vtab/series.rs||src/vtab/series.rs": [
          "File: src/vtab/series.rs -> src/vtab/series.rs"
        ]
      }
    },
    {
      "candidate_hash": "ed3bfbdf9d9e577e8d4cff937b053a0e429a4cd7",
      "candidate_info": {
        "commit_hash": "ed3bfbdf9d9e577e8d4cff937b053a0e429a4cd7",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/ed3bfbdf9d9e577e8d4cff937b053a0e429a4cd7",
        "files": [
          "libsqlite3-sys/src/error.rs",
          "libsqlite3-sys/src/lib.rs",
          "src/collation.rs",
          "src/config.rs",
          "src/hooks.rs",
          "src/session.rs",
          "src/vtab/csvtab.rs",
          "src/vtab/mod.rs"
        ],
        "message": "Silent some clippy warnings (#924)\n\n* allow(clippy::upper_case_acronyms) for rust enum entries that match\n  SQLite constants.\n* allow(clippy::needless_return) for collation_needed_callback until we\n  find a way to propagate the error.",
        "before_after_code_files": [
          "libsqlite3-sys/src/error.rs||libsqlite3-sys/src/error.rs",
          "libsqlite3-sys/src/lib.rs||libsqlite3-sys/src/lib.rs",
          "src/collation.rs||src/collation.rs",
          "src/config.rs||src/config.rs",
          "src/hooks.rs||src/hooks.rs",
          "src/session.rs||src/session.rs",
          "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
          "src/vtab/mod.rs||src/vtab/mod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs"
          ],
          "candidate": [
            "src/vtab/csvtab.rs||src/vtab/csvtab.rs",
            "src/vtab/mod.rs||src/vtab/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "libsqlite3-sys/src/error.rs||libsqlite3-sys/src/error.rs": [
          "File: libsqlite3-sys/src/error.rs -> libsqlite3-sys/src/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     OperationInterrupted,",
          "28:     DatabaseCorrupt,",
          "",
          "[Removed Lines]",
          "26:     SystemIOFailure,",
          "",
          "[Added Lines]",
          "26:     SystemIoFailure,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     TypeMismatch,",
          "48:     NoLargeFileSupport,",
          "",
          "[Removed Lines]",
          "46:     APIMisuse,",
          "",
          "[Added Lines]",
          "46:     ApiMisuse,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:             super::SQLITE_NOMEM => ErrorCode::OutOfMemory,",
          "74:             super::SQLITE_READONLY => ErrorCode::ReadOnly,",
          "75:             super::SQLITE_INTERRUPT => ErrorCode::OperationInterrupted,",
          "77:             super::SQLITE_CORRUPT => ErrorCode::DatabaseCorrupt,",
          "78:             super::SQLITE_NOTFOUND => ErrorCode::NotFound,",
          "79:             super::SQLITE_FULL => ErrorCode::DiskFull,",
          "",
          "[Removed Lines]",
          "76:             super::SQLITE_IOERR => ErrorCode::SystemIOFailure,",
          "",
          "[Added Lines]",
          "76:             super::SQLITE_IOERR => ErrorCode::SystemIoFailure,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:             super::SQLITE_TOOBIG => ErrorCode::TooBig,",
          "84:             super::SQLITE_CONSTRAINT => ErrorCode::ConstraintViolation,",
          "85:             super::SQLITE_MISMATCH => ErrorCode::TypeMismatch,",
          "87:             super::SQLITE_NOLFS => ErrorCode::NoLargeFileSupport,",
          "88:             super::SQLITE_AUTH => ErrorCode::AuthorizationForStatementDenied,",
          "89:             super::SQLITE_RANGE => ErrorCode::ParameterOutOfRange,",
          "",
          "[Removed Lines]",
          "86:             super::SQLITE_MISUSE => ErrorCode::APIMisuse,",
          "",
          "[Added Lines]",
          "86:             super::SQLITE_MISUSE => ErrorCode::ApiMisuse,",
          "",
          "---------------"
        ],
        "libsqlite3-sys/src/lib.rs||libsqlite3-sys/src/lib.rs": [
          "File: libsqlite3-sys/src/lib.rs -> libsqlite3-sys/src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #[repr(i32)]",
          "20: #[non_exhaustive]",
          "21: pub enum Limit {",
          "23:     SQLITE_LIMIT_LENGTH = SQLITE_LIMIT_LENGTH,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #[allow(clippy::upper_case_acronyms)]",
          "",
          "---------------"
        ],
        "src/collation.rs||src/collation.rs": [
          "File: src/collation.rs -> src/collation.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         x_coll_needed: fn(&Connection, &str) -> Result<()>,",
          "110:     ) -> Result<()> {",
          "111:         use std::mem;",
          "112:         unsafe extern \"C\" fn collation_needed_callback(",
          "113:             arg1: *mut c_void,",
          "114:             arg2: *mut ffi::sqlite3,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         #[allow(clippy::needless_return)]",
          "",
          "---------------"
        ],
        "src/config.rs||src/config.rs": [
          "File: src/config.rs -> src/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #[repr(i32)]",
          "11: #[allow(non_snake_case, non_camel_case_types)]",
          "12: #[non_exhaustive]",
          "13: pub enum DbConfig {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #[allow(clippy::upper_case_acronyms)]",
          "",
          "---------------"
        ],
        "src/hooks.rs||src/hooks.rs": [
          "File: src/hooks.rs -> src/hooks.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #[derive(Clone, Copy, Debug, PartialEq)]",
          "14: #[repr(i32)]",
          "15: #[non_exhaustive]",
          "16: pub enum Action {",
          "18:     UNKNOWN = -1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #[allow(clippy::upper_case_acronyms)]",
          "",
          "---------------"
        ],
        "src/session.rs||src/session.rs": [
          "File: src/session.rs -> src/session.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "667: #[repr(i32)]",
          "668: #[derive(Debug, PartialEq)]",
          "669: #[non_exhaustive]",
          "670: pub enum ConflictType {",
          "671:     UNKNOWN = -1,",
          "672:     SQLITE_CHANGESET_DATA = ffi::SQLITE_CHANGESET_DATA,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670: #[allow(clippy::upper_case_acronyms)]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694: #[repr(i32)]",
          "695: #[derive(Debug, PartialEq)]",
          "696: #[non_exhaustive]",
          "697: pub enum ConflictAction {",
          "698:     SQLITE_CHANGESET_OMIT = ffi::SQLITE_CHANGESET_OMIT,",
          "699:     SQLITE_CHANGESET_REPLACE = ffi::SQLITE_CHANGESET_REPLACE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: #[allow(clippy::upper_case_acronyms)]",
          "",
          "---------------"
        ],
        "src/vtab/csvtab.rs||src/vtab/csvtab.rs": [
          "File: src/vtab/csvtab.rs -> src/vtab/csvtab.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: pub fn load_module(conn: &Connection) -> Result<()> {",
          "50:     let aux: Option<()> = None;",
          "52: }",
          "55: #[repr(C)]",
          "58:     base: ffi::sqlite3_vtab,",
          "",
          "[Removed Lines]",
          "51:     conn.create_module(\"csv\", read_only_module::<CSVTab>(), aux)",
          "56: struct CSVTab {",
          "",
          "[Added Lines]",
          "51:     conn.create_module(\"csv\", read_only_module::<CsvTab>(), aux)",
          "56: struct CsvTab {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     offset_first_row: csv::Position,",
          "66: }",
          "69:     fn reader(&self) -> Result<csv::Reader<File>, csv::Error> {",
          "70:         csv::ReaderBuilder::new()",
          "71:             .has_headers(self.has_headers)",
          "",
          "[Removed Lines]",
          "68: impl CSVTab {",
          "",
          "[Added Lines]",
          "68: impl CsvTab {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     }",
          "97: }",
          "100:     type Aux = ();",
          "103:     fn connect(",
          "104:         _: &mut VTabConnection,",
          "105:         _aux: Option<&()>,",
          "106:         args: &[&[u8]],",
          "108:         if args.len() < 4 {",
          "109:             return Err(Error::ModuleError(\"no CSV file specified\".to_owned()));",
          "110:         }",
          "113:             base: ffi::sqlite3_vtab::default(),",
          "114:             filename: \"\".to_owned(),",
          "115:             has_headers: false,",
          "",
          "[Removed Lines]",
          "99: unsafe impl<'vtab> VTab<'vtab> for CSVTab {",
          "101:     type Cursor = CSVTabCursor<'vtab>;",
          "107:     ) -> Result<(String, CSVTab)> {",
          "112:         let mut vtab = CSVTab {",
          "",
          "[Added Lines]",
          "99: unsafe impl<'vtab> VTab<'vtab> for CsvTab {",
          "101:     type Cursor = CsvTabCursor<'vtab>;",
          "107:     ) -> Result<(String, CsvTab)> {",
          "112:         let mut vtab = CsvTab {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:         let args = &args[3..];",
          "124:         for c_slice in args {",
          "126:             match param {",
          "127:                 \"filename\" => {",
          "128:                     if !Path::new(value).exists() {",
          "",
          "[Removed Lines]",
          "125:             let (param, value) = CSVTab::parameter(c_slice)?;",
          "",
          "[Added Lines]",
          "125:             let (param, value) = CsvTab::parameter(c_slice)?;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:                     }",
          "167:                 }",
          "168:                 \"delimiter\" => {",
          "170:                         vtab.delimiter = b;",
          "171:                     } else {",
          "172:                         return Err(Error::ModuleError(format!(",
          "",
          "[Removed Lines]",
          "169:                     if let Some(b) = CSVTab::parse_byte(value) {",
          "",
          "[Added Lines]",
          "169:                     if let Some(b) = CsvTab::parse_byte(value) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:                     }",
          "177:                 }",
          "178:                 \"quote\" => {",
          "180:                         if b == b'0' {",
          "181:                             vtab.quote = 0;",
          "182:                         } else {",
          "",
          "[Removed Lines]",
          "179:                     if let Some(b) = CSVTab::parse_byte(value) {",
          "",
          "[Added Lines]",
          "179:                     if let Some(b) = CsvTab::parse_byte(value) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "259:         Ok(())",
          "260:     }",
          "264:     }",
          "265: }",
          "270: #[repr(C)]",
          "273:     base: ffi::sqlite3_vtab_cursor,",
          "",
          "[Removed Lines]",
          "262:     fn open(&self) -> Result<CSVTabCursor<'_>> {",
          "263:         Ok(CSVTabCursor::new(self.reader()?))",
          "267: impl CreateVTab<'_> for CSVTab {}",
          "271: struct CSVTabCursor<'vtab> {",
          "",
          "[Added Lines]",
          "262:     fn open(&self) -> Result<CsvTabCursor<'_>> {",
          "263:         Ok(CsvTabCursor::new(self.reader()?))",
          "267: impl CreateVTab<'_> for CsvTab {}",
          "271: struct CsvTabCursor<'vtab> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "279:     cols: csv::StringRecord,",
          "280:     eof: bool,",
          "282: }",
          "287:             base: ffi::sqlite3_vtab_cursor::default(),",
          "288:             reader,",
          "289:             row_number: 0,",
          "",
          "[Removed Lines]",
          "281:     phantom: PhantomData<&'vtab CSVTab>,",
          "284: impl CSVTabCursor<'_> {",
          "285:     fn new<'vtab>(reader: csv::Reader<File>) -> CSVTabCursor<'vtab> {",
          "286:         CSVTabCursor {",
          "",
          "[Added Lines]",
          "281:     phantom: PhantomData<&'vtab CsvTab>,",
          "284: impl CsvTabCursor<'_> {",
          "285:     fn new<'vtab>(reader: csv::Reader<File>) -> CsvTabCursor<'vtab> {",
          "286:         CsvTabCursor {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "294:     }",
          "299:     }",
          "300: }",
          "305:     fn filter(",
          "",
          "[Removed Lines]",
          "297:     fn vtab(&self) -> &CSVTab {",
          "298:         unsafe { &*(self.base.pVtab as *const CSVTab) }",
          "302: unsafe impl VTabCursor for CSVTabCursor<'_> {",
          "",
          "[Added Lines]",
          "297:     fn vtab(&self) -> &CsvTab {",
          "298:         unsafe { &*(self.base.pVtab as *const CsvTab) }",
          "302: unsafe impl VTabCursor for CsvTabCursor<'_> {",
          "",
          "---------------"
        ],
        "src/vtab/mod.rs||src/vtab/mod.rs": [
          "File: src/vtab/mod.rs -> src/vtab/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "262: #[derive(Debug, PartialEq)]",
          "263: #[allow(non_snake_case, non_camel_case_types, missing_docs)]",
          "264: pub enum IndexConstraintOp {",
          "265:     SQLITE_INDEX_CONSTRAINT_EQ,",
          "266:     SQLITE_INDEX_CONSTRAINT_GT,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: #[allow(clippy::upper_case_acronyms)]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c70d14854282ccddcf9c42d2078eebad54eb7c86",
      "candidate_info": {
        "commit_hash": "c70d14854282ccddcf9c42d2078eebad54eb7c86",
        "repo": "rusqlite/rusqlite",
        "commit_url": "https://github.com/rusqlite/rusqlite/commit/c70d14854282ccddcf9c42d2078eebad54eb7c86",
        "files": [
          "Cargo.toml",
          "README.md",
          "libsqlite3-sys/Cargo.toml",
          "libsqlite3-sys/build.rs",
          "src/functions.rs",
          "src/inner_connection.rs",
          "src/lib.rs",
          "src/pragma.rs",
          "src/raw_statement.rs",
          "src/statement.rs",
          "src/vtab/mod.rs"
        ],
        "message": "Remove most of the code using `feature=bundled` as a version check",
        "before_after_code_files": [
          "libsqlite3-sys/build.rs||libsqlite3-sys/build.rs",
          "src/functions.rs||src/functions.rs",
          "src/inner_connection.rs||src/inner_connection.rs",
          "src/lib.rs||src/lib.rs",
          "src/pragma.rs||src/pragma.rs",
          "src/raw_statement.rs||src/raw_statement.rs",
          "src/statement.rs||src/statement.rs",
          "src/vtab/mod.rs||src/vtamod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vtab/mod.rs||src/vtab/mod.rs"
          ],
          "candidate": [
            "src/vtab/mod.rs||src/vtamod.rs"
          ]
        }
      },
      "candidate_diff": {
        "libsqlite3-sys/build.rs||libsqlite3-sys/build.rs": [
          "File: libsqlite3-sys/build.rs -> libsqlite3-sys/build.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     pub fn main(_out_dir: &str, out_path: &Path) {",
          "167:         let header = find_sqlite();",
          "168:         if cfg!(any(",
          "169:             feature = \"bundled\",",
          "170:             all(windows, feature = \"bundled-windows\")",
          "171:         )) && !cfg!(feature = \"buildtime_bindgen\")",
          "172:         {",
          "181:             std::fs::copy(\"sqlite3/bindgen_bundled_version.rs\", out_path)",
          "182:                 .expect(\"Could not copy bindings to output directory\");",
          "183:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:             feature = \"bundled_bindings\",",
          "",
          "---------------"
        ],
        "src/functions.rs||src/functions.rs": [
          "File: src/functions.rs -> src/functions.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     fn constraint_error_code() -> i32 {",
          "86:         ffi::SQLITE_CONSTRAINT_FUNCTION",
          "87:     }",
          "89:     fn constraint_error_code() -> i32 {",
          "90:         ffi::SQLITE_CONSTRAINT",
          "91:     }",
          "",
          "[Removed Lines]",
          "84:     #[cfg(feature = \"bundled\")]",
          "88:     #[cfg(not(feature = \"bundled\"))]",
          "",
          "[Added Lines]",
          "84:     #[cfg(feature = \"modern_sqlite\")]",
          "88:     #[cfg(not(feature = \"modern_sqlite\"))]",
          "",
          "---------------"
        ],
        "src/inner_connection.rs||src/inner_connection.rs": [
          "File: src/inner_connection.rs -> src/inner_connection.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:         unsafe { ffi::sqlite3_get_autocommit(self.db()) != 0 }",
          "282:     }",
          "285:     pub fn is_busy(&self) -> bool {",
          "286:         let db = self.db();",
          "287:         unsafe {",
          "",
          "[Removed Lines]",
          "284:     #[cfg(feature = \"bundled\")] // 3.8.6",
          "",
          "[Added Lines]",
          "284:     #[cfg(feature = \"modern_sqlite\")] // 3.8.6",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:     feature = \"backup\",",
          "296:     feature = \"blob\",",
          "297:     feature = \"session\",",
          "299: ))]",
          "300: impl DatabaseName<'_> {",
          "301:     fn to_cstring(&self) -> Result<CString> {",
          "",
          "[Removed Lines]",
          "298:     feature = \"bundled\"",
          "",
          "[Added Lines]",
          "298:     feature = \"modern_sqlite\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "750:     }",
          "754:     pub fn is_busy(&self) -> bool {",
          "755:         self.db.borrow().is_busy()",
          "756:     }",
          "",
          "[Removed Lines]",
          "753:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "753:     #[cfg(feature = \"modern_sqlite\")] // 3.8.6",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "847:     }",
          "848: }",
          "851: unsafe fn db_filename(db: *mut ffi::sqlite3) -> Option<PathBuf> {",
          "852:     let db_name = DatabaseName::Main.to_cstring().unwrap();",
          "853:     let db_filename = ffi::sqlite3_db_filename(db, db_name.as_ptr());",
          "",
          "[Removed Lines]",
          "850: #[cfg(feature = \"bundled\")] // 3.7.10",
          "",
          "[Added Lines]",
          "850: #[cfg(feature = \"modern_sqlite\")] // 3.7.10",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "857:         CStr::from_ptr(db_filename).to_str().ok().map(PathBuf::from)",
          "858:     }",
          "859: }",
          "861: unsafe fn db_filename(_: *mut ffi::sqlite3) -> Option<PathBuf> {",
          "862:     None",
          "863: }",
          "",
          "[Removed Lines]",
          "860: #[cfg(not(feature = \"bundled\"))]",
          "",
          "[Added Lines]",
          "860: #[cfg(not(feature = \"modern_sqlite\"))]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1302:     }",
          "1304:     #[test]",
          "1306:     fn test_is_busy() {",
          "1307:         let db = checked_memory_handle();",
          "1308:         assert!(!db.is_busy());",
          "",
          "[Removed Lines]",
          "1305:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "1305:     #[cfg(feature = \"modern_sqlite\")]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1331:     fn test_notnull_constraint_error() {",
          "1335:         fn check_extended_code(extended_code: c_int) {",
          "1336:             assert_eq!(extended_code, ffi::SQLITE_CONSTRAINT_NOTNULL);",
          "1337:         }",
          "1339:         fn check_extended_code(_extended_code: c_int) {}",
          "1341:         let db = checked_memory_handle();",
          "",
          "[Removed Lines]",
          "1334:         #[cfg(feature = \"bundled\")]",
          "1338:         #[cfg(not(feature = \"bundled\"))]",
          "",
          "[Added Lines]",
          "1334:         #[cfg(feature = \"modern_sqlite\")]",
          "1338:         #[cfg(not(feature = \"modern_sqlite\"))]",
          "",
          "---------------"
        ],
        "src/pragma.rs||src/pragma.rs": [
          "File: src/pragma.rs -> src/pragma.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     }",
          "328:     #[test]",
          "330:     fn pragma_func_query_value() {",
          "331:         use crate::NO_PARAMS;",
          "",
          "[Removed Lines]",
          "329:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "329:     #[cfg(feature = \"modern_sqlite\")]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:     }",
          "381:     #[test]",
          "383:     fn pragma_func() {",
          "384:         let db = Connection::open_in_memory().unwrap();",
          "385:         let mut table_info = db.prepare(\"SELECT * FROM pragma_table_info(?)\").unwrap();",
          "",
          "[Removed Lines]",
          "382:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "382:     #[cfg(feature = \"modern_sqlite\")]",
          "",
          "---------------"
        ],
        "src/raw_statement.rs||src/raw_statement.rs": [
          "File: src/raw_statement.rs -> src/raw_statement.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         r",
          "118:     }",
          "121:     pub fn readonly(&self) -> bool {",
          "122:         unsafe { ffi::sqlite3_stmt_readonly(self.0) != 0 }",
          "123:     }",
          "127:     pub unsafe fn expanded_sql(&self) -> Option<&CStr> {",
          "128:         let ptr = ffi::sqlite3_expanded_sql(self.0);",
          "129:         if ptr.is_null() {",
          "",
          "[Removed Lines]",
          "120:     #[cfg(feature = \"bundled\")]",
          "126:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "120:     #[cfg(feature = \"modern_sqlite\")] // 3.7.4",
          "126:     #[cfg(feature = \"modern_sqlite\")] // 3.14.0",
          "",
          "---------------"
        ],
        "src/statement.rs||src/statement.rs": [
          "File: src/statement.rs -> src/statement.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:         self.conn.decode_result(stmt.finalize())",
          "534:     }",
          "537:     #[inline]",
          "538:     fn check_readonly(&self) -> Result<()> {",
          "539:         Ok(())",
          "540:     }",
          "543:     #[inline]",
          "544:     fn check_readonly(&self) -> Result<()> {",
          "",
          "[Removed Lines]",
          "536:     #[cfg(not(feature = \"bundled\"))]",
          "542:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "536:     #[cfg(not(feature = \"modern_sqlite\"))]",
          "542:     #[cfg(feature = \"modern_sqlite\")]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:         Ok(())",
          "549:     }",
          "552:     #[inline]",
          "553:     fn check_update(&self) -> Result<()> {",
          "554:         if self.column_count() > 0 || self.stmt.readonly() {",
          "",
          "[Removed Lines]",
          "551:     #[cfg(all(feature = \"bundled\", feature = \"extra_check\"))]",
          "",
          "[Added Lines]",
          "551:     #[cfg(all(feature = \"modern_sqlite\", feature = \"extra_check\"))]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "557:         Ok(())",
          "558:     }",
          "561:     #[inline]",
          "562:     fn check_update(&self) -> Result<()> {",
          "563:         if self.column_count() > 0 {",
          "",
          "[Removed Lines]",
          "560:     #[cfg(all(not(feature = \"bundled\"), feature = \"extra_check\"))]",
          "",
          "[Added Lines]",
          "560:     #[cfg(all(not(feature = \"modern_sqlite\"), feature = \"extra_check\"))]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "578:     pub fn expanded_sql(&self) -> Option<String> {",
          "579:         unsafe {",
          "580:             match self.stmt.expanded_sql() {",
          "",
          "[Removed Lines]",
          "577:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "577:     #[cfg(feature = \"modern_sqlite\")]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1019:     }",
          "1021:     #[test]",
          "1023:     fn test_expanded_sql() {",
          "1024:         let db = Connection::open_in_memory().unwrap();",
          "1025:         let stmt = db.prepare(\"SELECT ?\").unwrap();",
          "",
          "[Removed Lines]",
          "1022:     #[cfg(feature = \"bundled\")]",
          "",
          "[Added Lines]",
          "1022:     #[cfg(feature = \"modern_sqlite\")]",
          "",
          "---------------"
        ],
        "src/vtab/mod.rs||src/vtamod.rs": [
          "File: src/vtab/mod.rs -> src/vtamod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: unsafe impl<T: VTab> Send for Module<T> {}",
          "71: unsafe impl<T: VTab> Sync for Module<T> {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         xSavepoint: None,",
          "101:         xRelease: None,",
          "102:         xRollbackTo: None,",
          "105:     };",
          "106:     Module {",
          "107:         base: ffi_module,",
          "",
          "[Removed Lines]",
          "103:         #[cfg(any(feature = \"bundled\", feature = \"vtab_v3\"))]",
          "104:         xShadowName: None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         xSavepoint: None,",
          "141:         xRelease: None,",
          "142:         xRollbackTo: None,",
          "145:     };",
          "146:     Module {",
          "147:         base: ffi_module,",
          "",
          "[Removed Lines]",
          "143:         #[cfg(any(feature = \"bundled\", feature = \"vtab_v3\"))]",
          "144:         xShadowName: None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:         }",
          "310:     }",
          "314:     pub fn set_estimated_rows(&mut self, estimated_rows: i64) {",
          "315:         unsafe {",
          "316:             (*self.0).estimatedRows = estimated_rows;",
          "",
          "[Removed Lines]",
          "313:     #[cfg(feature = \"bundled\")] // SQLite >= 3.8.2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}