{
  "cve_id": "CVE-2022-21797",
  "cve_desc": "The package joblib from 0 and before 1.2.0 are vulnerable to Arbitrary Code Execution via the pre_dispatch flag in Parallel() class due to the eval() statement.",
  "repo": "joblib/joblib",
  "patch_hash": "b90f10efeb670a2cc877fb88ebb3f2019189e059",
  "patch_info": {
    "commit_hash": "b90f10efeb670a2cc877fb88ebb3f2019189e059",
    "repo": "joblib/joblib",
    "commit_url": "https://github.com/joblib/joblib/commit/b90f10efeb670a2cc877fb88ebb3f2019189e059",
    "files": [
      "CHANGES.rst",
      "joblib/parallel.py"
    ],
    "message": "FIX make sure pre_dispatch cannot do arbitrary code execution (#1321)",
    "before_after_code_files": [
      "joblib/parallel.py||joblib/parallel.py"
    ]
  },
  "patch_diff": {
    "joblib/parallel.py||joblib/parallel.py": [
      "File: joblib/parallel.py -> joblib/parallel.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "504:         pre_dispatch: {'all', integer, or expression, as in '3*n_jobs'}",
      "505:             The number of batches (of tasks) to be pre-dispatched.",
      "506:             Default is '2*n_jobs'. When batch_size=\"auto\" this is reasonable",
      "508:         batch_size: int or 'auto', default: 'auto'",
      "509:             The number of atomic tasks to dispatch at once to each",
      "510:             worker. When individual evaluations are very fast, dispatching",
      "",
      "[Removed Lines]",
      "507:             default and the workers should never starve.",
      "",
      "[Added Lines]",
      "507:             default and the workers should never starve. Note that only basic",
      "508:             arithmetics are allowed here and no modules can be used in this",
      "509:             expression.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1049:         else:",
      "1050:             self._original_iterator = iterator",
      "1051:             if hasattr(pre_dispatch, 'endswith'):",
      "1053:             self._pre_dispatch_amount = pre_dispatch = int(pre_dispatch)",
      "1055:             # The main thread will consume the first pre_dispatch items and",
      "",
      "[Removed Lines]",
      "1052:                 pre_dispatch = eval(pre_dispatch)",
      "",
      "[Added Lines]",
      "1054:                 pre_dispatch = eval(",
      "1055:                     pre_dispatch,",
      "1056:                     {\"n_jobs\": n_jobs, \"__builtins__\": {}},  # globals",
      "1057:                     {}  # locals",
      "1058:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "54f4d21f098591c77b48c9acfffaa4cf0a45282b",
      "candidate_info": {
        "commit_hash": "54f4d21f098591c77b48c9acfffaa4cf0a45282b",
        "repo": "joblib/joblib",
        "commit_url": "https://github.com/joblib/joblib/commit/54f4d21f098591c77b48c9acfffaa4cf0a45282b",
        "files": [
          "CHANGES.rst",
          "joblib/_utils.py",
          "joblib/parallel.py",
          "joblib/test/test_utils.py"
        ],
        "message": "FIX parse pre-dispatch with AST instead of calling eval (#1327)",
        "before_after_code_files": [
          "joblib/_utils.py||joblib/_utils.py",
          "joblib/parallel.py||joblib/parallel.py",
          "joblib/test/test_utils.py||joblib/test/test_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "joblib/parallel.py||joblib/parallel.py"
          ],
          "candidate": [
            "joblib/parallel.py||joblib/parallel.py"
          ]
        }
      },
      "candidate_diff": {
        "joblib/_utils.py||joblib/_utils.py": [
          "File: joblib/_utils.py -> joblib/_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Adapted from https://stackoverflow.com/a/9558001/2536294",
          "3: import ast",
          "4: import operator as op",
          "6: # supported operators",
          "7: operators = {",
          "8:     ast.Add: op.add,",
          "9:     ast.Sub: op.sub,",
          "10:     ast.Mult: op.mul,",
          "11:     ast.Div: op.truediv,",
          "12:     ast.FloorDiv: op.floordiv,",
          "13:     ast.Mod: op.mod,",
          "14:     ast.Pow: op.pow,",
          "15:     ast.USub: op.neg,",
          "16: }",
          "19: def eval_expr(expr):",
          "20:     \"\"\"",
          "21:     >>> eval_expr('2*6')",
          "22:     12",
          "23:     >>> eval_expr('2**6')",
          "24:     64",
          "25:     >>> eval_expr('1 + 2*3**(4) / (6 + -7)')",
          "26:     -161.0",
          "27:     \"\"\"",
          "28:     try:",
          "29:         return eval_(ast.parse(expr, mode=\"eval\").body)",
          "30:     except (TypeError, SyntaxError, KeyError) as e:",
          "31:         raise ValueError(",
          "32:             f\"{expr!r} is not a valid or supported arithmetic expression.\"",
          "33:         ) from e",
          "36: def eval_(node):",
          "37:     if isinstance(node, ast.Num):  # <number>",
          "38:         return node.n",
          "39:     elif isinstance(node, ast.BinOp):  # <left> <operator> <right>",
          "40:         return operators[type(node.op)](eval_(node.left), eval_(node.right))",
          "41:     elif isinstance(node, ast.UnaryOp):  # <operator> <operand> e.g., -1",
          "42:         return operators[type(node.op)](eval_(node.operand))",
          "43:     else:",
          "44:         raise TypeError(node)",
          "",
          "---------------"
        ],
        "joblib/parallel.py||joblib/parallel.py": [
          "File: joblib/parallel.py -> joblib/parallel.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:                                  ThreadingBackend, SequentialBackend,",
          "28:                                  LokyBackend)",
          "29: from .externals.cloudpickle import dumps, loads",
          "31: # Make sure that those two classes are part of the public joblib.parallel API",
          "32: # so that 3rd party backend implementers can import them from here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from ._utils import eval_expr",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1051:         else:",
          "1052:             self._original_iterator = iterator",
          "1053:             if hasattr(pre_dispatch, 'endswith'):",
          "1058:                 )",
          "1059:             self._pre_dispatch_amount = pre_dispatch = int(pre_dispatch)",
          "",
          "[Removed Lines]",
          "1054:                 pre_dispatch = eval(",
          "1055:                     pre_dispatch,",
          "1056:                     {\"n_jobs\": n_jobs, \"__builtins__\": {}},  # globals",
          "1057:                     {}  # locals",
          "",
          "[Added Lines]",
          "1055:                 pre_dispatch = eval_expr(",
          "1056:                     pre_dispatch.replace(\"n_jobs\", str(n_jobs))",
          "",
          "---------------"
        ],
        "joblib/test/test_utils.py||joblib/test/test_utils.py": [
          "File: joblib/test/test_utils.py -> joblib/test/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "3: from joblib._utils import eval_expr",
          "6: @pytest.mark.parametrize(",
          "7:     \"expr\",",
          "8:     [\"exec('import os')\", \"print(1)\", \"import os\", \"1+1; import os\", \"1^1\"],",
          "9: )",
          "10: def test_eval_expr_invalid(expr):",
          "11:     with pytest.raises(",
          "12:         ValueError, match=\"is not a valid or supported arithmetic\"",
          "13:     ):",
          "14:         eval_expr(expr)",
          "17: @pytest.mark.parametrize(",
          "18:     \"expr, result\",",
          "19:     [",
          "20:         (\"2*6\", 12),",
          "21:         (\"2**6\", 64),",
          "22:         (\"1 + 2*3**(4) / (6 + -7)\", -161.0),",
          "23:         (\"(20 // 3) % 5\", 1),",
          "24:     ],",
          "25: )",
          "26: def test_eval_expr_valid(expr, result):",
          "27:     assert eval_expr(expr) == result",
          "",
          "---------------"
        ]
      }
    }
  ]
}