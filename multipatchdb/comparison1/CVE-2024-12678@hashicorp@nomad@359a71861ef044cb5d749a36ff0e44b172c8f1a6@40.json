{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c8cc32addbf62cfa96dfeea4a8096e9246c0dd5",
      "candidate_info": {
        "commit_hash": "3c8cc32addbf62cfa96dfeea4a8096e9246c0dd5",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/3c8cc32addbf62cfa96dfeea4a8096e9246c0dd5",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/prometheus/client_golang (#25194)\n\nBumps [github.com/prometheus/client_golang](https://github.com/prometheus/client_golang) from 1.20.5 to 1.21.0.\n- [Release notes](https://github.com/prometheus/client_golang/releases)\n- [Changelog](https://github.com/prometheus/client_golang/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/prometheus/client_golang/compare/v1.20.5...v1.21.0)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/prometheus/client_golang\n  dependency-type: direct:production\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  github.com/opencontainers/runc v1.1.14",
          "117:  github.com/opencontainers/runtime-spec v1.2.0",
          "118:  github.com/posener/complete v1.2.3",
          "120:  github.com/prometheus/common v0.62.0",
          "121:  github.com/rs/cors v1.11.1",
          "122:  github.com/ryanuber/columnize v2.1.2+incompatible",
          "",
          "[Removed Lines]",
          "119:  github.com/prometheus/client_golang v1.20.5",
          "",
          "[Added Lines]",
          "119:  github.com/prometheus/client_golang v1.21.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1541: github.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=",
          "1542: github.com/prometheus/client_golang v1.7.1/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=",
          "1543: github.com/prometheus/client_golang v1.11.1/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=",
          "1546: github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=",
          "1547: github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=",
          "1548: github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=",
          "",
          "[Removed Lines]",
          "1544: github.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=",
          "1545: github.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=",
          "",
          "[Added Lines]",
          "1544: github.com/prometheus/client_golang v1.21.0 h1:DIsaGmiaBkSangBgMtWdNfxbMNdku5IK6iNhrEqWvdA=",
          "1545: github.com/prometheus/client_golang v1.21.0/go.mod h1:U9NM32ykUErtVBxdvD3zfi+EuFkkaBvMb09mIfe0Zgg=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31692ecb82aa095020e185e7287a18ee72707602",
      "candidate_info": {
        "commit_hash": "31692ecb82aa095020e185e7287a18ee72707602",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/31692ecb82aa095020e185e7287a18ee72707602",
        "files": [
          ".changelog/24620.txt",
          "ui/app/components/job-status/panel/steady.js",
          "ui/app/models/job.js",
          "ui/tests/acceptance/jobs-list-test.js"
        ],
        "message": "backport of commit 71e3716435528dcf3f68d50817c9190508c44447 (#24687)\n\nCo-authored-by: Phil Renaud <phil.renaud@hashicorp.com>",
        "before_after_code_files": [
          "ui/app/components/job-status/panel/steady.js||ui/app/components/job-status/panel/steady.js",
          "ui/app/models/job.js||ui/app/models/job.js",
          "ui/tests/acceptance/jobs-list-test.js||ui/tests/acceptance/jobs-list-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/components/job-status/panel/steady.js||ui/app/components/job-status/panel/steady.js": [
          "File: ui/app/components/job-status/panel/steady.js -> ui/app/components/job-status/panel/steady.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:       };",
          "225:     }",
          "228:       return {",
          "229:         label: 'Scaled Down',",
          "230:         state: 'neutral',",
          "",
          "[Removed Lines]",
          "227:     if (this.totalAllocs === 0) {",
          "",
          "[Added Lines]",
          "227:     if (this.totalAllocs === 0 && !this.job.hasClientStatus) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:     }",
          "248:     const healthyAllocs = this.allocBlocks.running?.healthy?.nonCanary;",
          "250:       return { label: 'Healthy', state: 'success' };",
          "251:     }",
          "",
          "[Removed Lines]",
          "249:     if (healthyAllocs?.length === totalAllocs) {",
          "",
          "[Added Lines]",
          "249:     if (healthyAllocs?.length && healthyAllocs?.length === totalAllocs) {",
          "",
          "---------------"
        ],
        "ui/app/models/job.js||ui/app/models/job.js": [
          "File: ui/app/models/job.js -> ui/app/models/job.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:       return { label: 'Scaled Down', state: 'neutral' };",
          "256:     }",
          "",
          "[Removed Lines]",
          "254:     if (totalAllocs === 0) {",
          "",
          "[Added Lines]",
          "258:     if (totalAllocs === 0 && !this.hasClientStatus) {",
          "",
          "---------------"
        ],
        "ui/tests/acceptance/jobs-list-test.js||ui/tests/acceptance/jobs-list-test.js": [
          "File: ui/tests/acceptance/jobs-list-test.js -> ui/tests/acceptance/jobs-list-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "707:       status: 'dead',",
          "708:     });",
          "710:     await JobsList.visit();",
          "712:     assert",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:     server.create('job', {",
          "711:       ...defaultJobParams,",
          "712:       id: 'ancient-system-job',",
          "713:       status: 'dead',",
          "714:       type: 'system',",
          "715:       groupAllocCount: 0,",
          "716:     });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742:     assert",
          "743:       .dom('[data-test-job-row=\"scaled-down-job\"] [data-test-job-status]')",
          "744:       .hasText('Scaled Down', 'Scaled down job is scaled down');",
          "746:     await percySnapshot(assert);",
          "747:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     assert",
          "754:       .dom('[data-test-job-row=\"ancient-system-job\"] [data-test-job-status]')",
          "755:       .hasText('Failed', 'System job with no allocs is failed');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37bf87767b52bf68579a0405b7ae45436169d73d",
      "candidate_info": {
        "commit_hash": "37bf87767b52bf68579a0405b7ae45436169d73d",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/37bf87767b52bf68579a0405b7ae45436169d73d",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump golang.org/x/sys from 0.25.0 to 0.26.0 (#24401)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:  golang.org/x/crypto v0.27.0",
          "132:  golang.org/x/mod v0.21.0",
          "133:  golang.org/x/sync v0.8.0",
          "135:  golang.org/x/time v0.3.0",
          "136:  google.golang.org/grpc v1.59.0",
          "137:  google.golang.org/protobuf v1.34.2",
          "",
          "[Removed Lines]",
          "134:  golang.org/x/sys v0.25.0",
          "",
          "[Added Lines]",
          "134:  golang.org/x/sys v0.26.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1409: golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1410: golang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1411: golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "1414: golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=",
          "1415: golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=",
          "1416: golang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=",
          "",
          "[Removed Lines]",
          "1412: golang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=",
          "1413: golang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "",
          "[Added Lines]",
          "1412: golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=",
          "1413: golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11b1597b5d05161c53846ec3aaf5ead68724f7d2",
      "candidate_info": {
        "commit_hash": "11b1597b5d05161c53846ec3aaf5ead68724f7d2",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/11b1597b5d05161c53846ec3aaf5ead68724f7d2",
        "files": [
          ".release/security-scan.hcl"
        ],
        "message": "backport of commit a4ac2025f4ac10b051ce99078fc01e8407d1c37a (#24703)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
        "before_after_code_files": [
          ".release/security-scan.hcl||.release/security-scan.hcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".release/security-scan.hcl||.release/security-scan.hcl": [
          "File: .release/security-scan.hcl -> .release/security-scan.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     all               = true",
          "24:     skip_path_strings = [\"/website/content/\"]",
          "25:   }",
          "26: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   # Triage items that are _safe_ to ignore here. Note that this list should be",
          "28:   # periodically cleaned up to remove items that are no longer found by the scanner.",
          "29:   triage {",
          "30:     suppress {",
          "31:       vulnerabilities = [",
          "32:         \"GO-2022-0635\", // github.com/aws/aws-sdk-go@v1.55.5 TODO(dduzgun-security): remove when deps is resolved",
          "33:       ]",
          "34:     }",
          "35:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e10cb19d8a5f92b5cc3d7e7d4910a4ea3cc11264",
      "candidate_info": {
        "commit_hash": "e10cb19d8a5f92b5cc3d7e7d4910a4ea3cc11264",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/e10cb19d8a5f92b5cc3d7e7d4910a4ea3cc11264",
        "files": [
          ".changelog/24396.txt",
          "nomad/csi_endpoint.go",
          "nomad/csi_endpoint_test.go"
        ],
        "message": "Backport of CSI: fix namespace ACL bypass on create/register APIs into release/1.9.x (#24398)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "nomad/csi_endpoint.go||nomad/csi_endpoint.go",
          "nomad/csi_endpoint_test.go||nomad/csi_endpoint_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/csi_endpoint.go||nomad/csi_endpoint.go": [
          "File: nomad/csi_endpoint.go -> nomad/csi_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:  defer metrics.MeasureSince([]string{\"nomad\", \"volume\", \"register\"}, time.Now())",
          "308:   return structs.ErrPermissionDenied",
          "309:  }",
          "",
          "[Removed Lines]",
          "307:  if !allowVolume(aclObj, args.RequestNamespace()) || !aclObj.AllowPluginRead() {",
          "",
          "[Added Lines]",
          "308:  if !aclObj.AllowPluginRead() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:   return fmt.Errorf(\"missing volume definition\")",
          "313:  }",
          "318:  for _, vol := range args.Volumes {",
          "324:   if vol.Namespace == \"\" {",
          "325:    vol.Namespace = args.RequestNamespace()",
          "326:   }",
          "327:   if err = vol.Validate(); err != nil {",
          "328:    return err",
          "329:   }",
          "333:   if err != nil {",
          "334:    return err",
          "335:   }",
          "",
          "[Removed Lines]",
          "320:   snap, err := v.srv.State().Snapshot()",
          "321:   if err != nil {",
          "322:    return err",
          "323:   }",
          "331:   ws := memdb.NewWatchSet()",
          "332:   existingVol, err := snap.CSIVolumeByID(ws, vol.Namespace, vol.ID)",
          "",
          "[Added Lines]",
          "316:  snap, err := v.srv.State().Snapshot()",
          "317:  if err != nil {",
          "318:   return err",
          "319:  }",
          "327:   if !allowVolume(aclObj, vol.Namespace) {",
          "328:    return structs.ErrPermissionDenied",
          "329:   }",
          "334:   existingVol, err := snap.CSIVolumeByID(nil, vol.Namespace, vol.ID)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1044:   return err",
          "1045:  }",
          "1048:   return structs.ErrPermissionDenied",
          "1049:  }",
          "",
          "[Removed Lines]",
          "1047:  if !allowVolume(aclObj, args.RequestNamespace()) || !aclObj.AllowPluginRead() {",
          "",
          "[Added Lines]",
          "1050:  if !aclObj.AllowPluginRead() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1062:  }",
          "1063:  validatedVols := []validated{}",
          "1068:  for _, vol := range args.Volumes {",
          "1069:   if vol.Namespace == \"\" {",
          "1070:    vol.Namespace = args.RequestNamespace()",
          "1071:   }",
          "1072:   if err = vol.Validate(); err != nil {",
          "1073:    return err",
          "1074:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:  snap, err := v.srv.State().Snapshot()",
          "1069:  if err != nil {",
          "1070:   return err",
          "1071:  }",
          "1079:   if !allowVolume(aclObj, vol.Namespace) {",
          "1080:    return structs.ErrPermissionDenied",
          "1081:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1084:   }",
          "1092:   current, err := snap.CSIVolumeByID(nil, vol.Namespace, vol.ID)",
          "1093:   if err != nil {",
          "",
          "[Removed Lines]",
          "1087:   snap, err := v.srv.State().Snapshot()",
          "1088:   if err != nil {",
          "1089:    return err",
          "1090:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nomad/csi_endpoint_test.go||nomad/csi_endpoint_test.go": [
          "File: nomad/csi_endpoint_test.go -> nomad/csi_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: func TestCSIVolumeEndpoint_Register(t *testing.T) {",
          "208:  ci.Parallel(t)",
          "210:   c.NumSchedulers = 0 // Prevent automatic dequeue",
          "211:  })",
          "212:  defer shutdown()",
          "",
          "[Removed Lines]",
          "209:  srv, shutdown := TestServer(t, func(c *Config) {",
          "",
          "[Added Lines]",
          "209:  srv, _, shutdown := TestACLServer(t, func(c *Config) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  id0 := uuid.Generate()",
          "225:  node := mock.Node()",
          "",
          "[Removed Lines]",
          "221:  ns := mock.Namespace()",
          "222:  store.UpsertNamespaces(900, []*structs.Namespace{ns})",
          "",
          "[Added Lines]",
          "220:  ns := \"prod\"",
          "221:  otherNS := \"other\"",
          "222:  index := uint64(1000)",
          "223:  must.NoError(t, store.UpsertNamespaces(index, []*structs.Namespace{{Name: ns}, {Name: otherNS}}))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:    NodeInfo: &structs.CSINodeInfo{},",
          "232:   },",
          "233:  }",
          "237:  vols := []*structs.CSIVolume{{",
          "238:   ID:             id0,",
          "240:   PluginID:       \"minnie\",",
          "241:   AccessMode:     structs.CSIVolumeAccessModeSingleNodeReader, // legacy field ignored",
          "242:   AttachmentMode: structs.CSIVolumeAttachmentModeBlockDevice,  // legacy field ignored",
          "",
          "[Removed Lines]",
          "234:  require.NoError(t, store.UpsertNode(structs.MsgTypeTestSetup, 1000, node))",
          "239:   Namespace:      ns.Name,",
          "",
          "[Added Lines]",
          "235:  must.NoError(t, store.UpsertNode(structs.MsgTypeTestSetup, index, node))",
          "237:  index++",
          "238:  validToken := mock.CreatePolicyAndToken(t, store, index, \"csi-access-ns\",",
          "239:   `namespace \"prod\" { capabilities = [\"csi-write-volume\", \"csi-read-volume\"] }",
          "240:          namespace \"default\" { capabilities = [\"csi-write-volume\"] }",
          "241:          plugin { policy = \"read\" }",
          "242:          node { policy = \"read\" }`).SecretID",
          "244:  index++",
          "245:  invalidToken := mock.CreatePolicyAndToken(t, store, index, \"csi-access-other\",",
          "246:   `namespace \"other\" { capabilities = [\"csi-write-volume\"] }",
          "247:          plugin { policy = \"read\" }",
          "248:          node { policy = \"read\" }`).SecretID",
          "252:   Namespace:      ns,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:  }}",
          "255:  req1 := &structs.CSIVolumeRegisterRequest{",
          "256:   Volumes: vols,",
          "257:   WriteRequest: structs.WriteRequest{",
          "258:    Region:    \"global\",",
          "260:   },",
          "261:  }",
          "262:  resp1 := &structs.CSIVolumeRegisterResponse{}",
          "263:  err := msgpackrpc.CallWithCodec(codec, \"CSIVolume.Register\", req1, resp1)",
          "268:  req2 := &structs.CSIVolumeGetRequest{",
          "269:   ID: id0,",
          "270:   QueryOptions: structs.QueryOptions{",
          "271:    Region:    \"global\",",
          "273:   },",
          "274:  }",
          "275:  resp2 := &structs.CSIVolumeGetResponse{}",
          "276:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Get\", req2, resp2)",
          "281:   resp2.Volume.Secrets.String())",
          "283:   resp2.Volume.MountOptions.String())",
          "286:  req1.Volumes[0].PluginID = \"adam\"",
          "287:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Register\", req1, resp1)",
          "291:  req3 := &structs.CSIVolumeDeregisterRequest{",
          "292:   VolumeIDs: []string{id0},",
          "293:   WriteRequest: structs.WriteRequest{",
          "294:    Region:    \"global\",",
          "296:   },",
          "297:  }",
          "298:  resp3 := &structs.CSIVolumeDeregisterResponse{}",
          "299:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Deregister\", req3, resp3)",
          "303:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Get\", req2, resp2)",
          "306: }",
          "",
          "[Removed Lines]",
          "259:    Namespace: \"\",",
          "264:  require.NoError(t, err)",
          "265:  require.NotEqual(t, uint64(0), resp1.Index)",
          "272:    Namespace: ns.Name,",
          "277:  require.NoError(t, err)",
          "278:  require.Equal(t, resp1.Index, resp2.Index)",
          "279:  require.Equal(t, vols[0].ID, resp2.Volume.ID)",
          "280:  require.Equal(t, \"csi.CSISecrets(map[mysecret:[REDACTED]])\",",
          "282:  require.Equal(t, \"csi.CSIOptions(FSType: ext4, MountFlags: [REDACTED])\",",
          "288:  require.Error(t, err, \"exists\")",
          "295:    Namespace: ns.Name,",
          "300:  require.NoError(t, err)",
          "304:  require.NoError(t, err)",
          "305:  require.Nil(t, resp2.Volume)",
          "",
          "[Added Lines]",
          "273:    AuthToken: invalidToken,",
          "274:    Namespace: otherNS,",
          "279:  must.EqError(t, err, \"Permission denied\")",
          "283:  req1.AuthToken = validToken",
          "284:  req1.Namespace = structs.DefaultNamespace",
          "285:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Register\", req1, resp1)",
          "286:  must.NoError(t, err)",
          "287:  must.NotEq(t, uint64(0), resp1.Index)",
          "294:    Namespace: ns,",
          "295:    AuthToken: validToken,",
          "300:  must.NoError(t, err)",
          "301:  must.Eq(t, resp1.Index, resp2.Index)",
          "302:  must.Eq(t, vols[0].ID, resp2.Volume.ID)",
          "303:  must.Eq(t, \"csi.CSISecrets(map[mysecret:[REDACTED]])\",",
          "305:  must.Eq(t, \"csi.CSIOptions(FSType: ext4, MountFlags: [REDACTED])\",",
          "311:  must.ErrorContains(t, err, \"no CSI plugin named\")",
          "318:    Namespace: ns,",
          "319:    AuthToken: validToken,",
          "324:  must.NoError(t, err)",
          "328:  must.NoError(t, err)",
          "329:  must.Nil(t, resp2.Volume)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1098: func TestCSIVolumeEndpoint_Create(t *testing.T) {",
          "1099:  ci.Parallel(t)",
          "1100:  var err error",
          "1102:   c.NumSchedulers = 0 // Prevent automatic dequeue",
          "1103:  })",
          "1104:  defer shutdown()",
          "",
          "[Removed Lines]",
          "1101:  srv, shutdown := TestServer(t, func(c *Config) {",
          "",
          "[Added Lines]",
          "1125:  srv, rootToken, shutdown := TestACLServer(t, func(c *Config) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1133:  req0 := &structs.NodeRegisterRequest{",
          "1134:   Node:         node,",
          "1136:  }",
          "1137:  var resp0 structs.NodeUpdateResponse",
          "1138:  err = client.RPC(\"Node.Register\", req0, &resp0)",
          "1141:  testutil.WaitForResult(func() (bool, error) {",
          "1142:   nodes := srv.connectedNodes()",
          "",
          "[Removed Lines]",
          "1135:   WriteRequest: structs.WriteRequest{Region: \"global\"},",
          "1139:  require.NoError(t, err)",
          "",
          "[Added Lines]",
          "1159:   WriteRequest: structs.WriteRequest{Region: \"global\", AuthToken: rootToken.SecretID},",
          "1163:  must.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1145:   t.Fatalf(\"should have a client\")",
          "1146:  })",
          "1151:  codec := rpcClient(t, srv)",
          "1152:  index := uint64(1000)",
          "",
          "[Removed Lines]",
          "1148:  ns := structs.DefaultNamespace",
          "1150:  state := srv.fsm.State()",
          "",
          "[Added Lines]",
          "1172:  ns := \"prod\"",
          "1173:  otherNS := \"other\"",
          "1175:  store := srv.fsm.State()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1172:   }",
          "1173:  }).Node",
          "1174:  index++",
          "1178:  volID := uuid.Generate()",
          "1179:  vols := []*structs.CSIVolume{{",
          "1180:   ID:             volID,",
          "1181:   Name:           \"vol\",",
          "1183:   PluginID:       \"minnie\",",
          "1184:   AccessMode:     structs.CSIVolumeAccessModeSingleNodeReader, // legacy field ignored",
          "1185:   AttachmentMode: structs.CSIVolumeAttachmentModeBlockDevice,  // legacy field ignored",
          "",
          "[Removed Lines]",
          "1175:  require.NoError(t, state.UpsertNode(structs.MsgTypeTestSetup, index, node))",
          "1182:   Namespace:      \"\", // overriden by WriteRequest",
          "",
          "[Added Lines]",
          "1200:  must.NoError(t, store.UpsertNode(structs.MsgTypeTestSetup, index, node))",
          "1202:  index++",
          "1203:  must.NoError(t, store.UpsertNamespaces(index, []*structs.Namespace{{Name: ns}, {Name: otherNS}}))",
          "1210:   Namespace:      ns,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1200:   },",
          "1201:  }}",
          "1204:  req1 := &structs.CSIVolumeCreateRequest{",
          "1205:   Volumes: vols,",
          "1206:   WriteRequest: structs.WriteRequest{",
          "1207:    Region:    \"global\",",
          "1209:   },",
          "1210:  }",
          "1211:  resp1 := &structs.CSIVolumeCreateResponse{}",
          "1212:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Create\", req1, resp1)",
          "1216:  req2 := &structs.CSIVolumeGetRequest{",
          "1217:   ID: volID,",
          "1218:   QueryOptions: structs.QueryOptions{",
          "1220:   },",
          "1221:  }",
          "1222:  resp2 := &structs.CSIVolumeGetResponse{}",
          "1223:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Get\", req2, resp2)",
          "1227:  vol := resp2.Volume",
          "1233:   vol.Secrets.String())",
          "1235:   vol.MountOptions.String())",
          "1245: }",
          "1247: func TestCSIVolumeEndpoint_Delete(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1208:    Namespace: ns,",
          "1213:  require.NoError(t, err)",
          "1219:    Region: \"global\",",
          "1224:  require.NoError(t, err)",
          "1225:  require.Equal(t, resp1.Index, resp2.Index)",
          "1228:  require.NotNil(t, vol)",
          "1229:  require.Equal(t, volID, vol.ID)",
          "1232:  require.Equal(t, \"csi.CSISecrets(map[mysecret:[REDACTED]])\",",
          "1234:  require.Equal(t, \"csi.CSIOptions(FSType: ext4, MountFlags: [REDACTED])\",",
          "1236:  require.Equal(t, ns, vol.Namespace)",
          "1237:  require.Len(t, vol.RequestedCapabilities, 1)",
          "1240:  require.Equal(t, \"vol-12345\", vol.ExternalID)",
          "1241:  require.Equal(t, int64(42), vol.Capacity)",
          "1242:  require.Equal(t, \"bar\", vol.Context[\"plugincontext\"])",
          "1243:  require.Equal(t, \"\", vol.Context[\"mycontext\"])",
          "1244:  require.Equal(t, map[string]string{\"rack\": \"R1\"}, vol.Topologies[0].Segments)",
          "",
          "[Added Lines]",
          "1231:  index++",
          "1232:  validToken := mock.CreatePolicyAndToken(t, store, index, \"csi-access-ns\",",
          "1233:   `namespace \"prod\" { capabilities = [\"csi-write-volume\", \"csi-read-volume\"] }",
          "1234:          namespace \"default\" { capabilities = [\"csi-write-volume\"] }",
          "1235:          plugin { policy = \"read\" }",
          "1236:          node { policy = \"read\" }`).SecretID",
          "1238:  index++",
          "1239:  invalidToken := mock.CreatePolicyAndToken(t, store, index, \"csi-access-other\",",
          "1240:   `namespace \"other\" { capabilities = [\"csi-write-volume\"] }",
          "1241:          plugin { policy = \"read\" }",
          "1242:          node { policy = \"read\" }`).SecretID",
          "1250:    AuthToken: invalidToken,",
          "1251:    Namespace: otherNS,",
          "1256:  must.EqError(t, err, \"Permission denied\")",
          "1260:  req1.AuthToken = validToken",
          "1261:  req1.Namespace = structs.DefaultNamespace",
          "1262:  err = msgpackrpc.CallWithCodec(codec, \"CSIVolume.Create\", req1, resp1)",
          "1263:  must.NoError(t, err)",
          "1264:  must.NotEq(t, uint64(0), resp1.Index)",
          "1270:    Region:    \"global\",",
          "1271:    Namespace: ns,",
          "1272:    AuthToken: validToken,",
          "1277:  must.NoError(t, err)",
          "1278:  must.Eq(t, resp1.Index, resp2.Index)",
          "1281:  must.NotNil(t, vol)",
          "1282:  must.Eq(t, volID, vol.ID)",
          "1285:  must.Eq(t, \"csi.CSISecrets(map[mysecret:[REDACTED]])\",",
          "1287:  must.Eq(t, \"csi.CSIOptions(FSType: ext4, MountFlags: [REDACTED])\",",
          "1289:  must.Eq(t, ns, vol.Namespace)",
          "1290:  must.Len(t, 1, vol.RequestedCapabilities)",
          "1293:  must.Eq(t, \"vol-12345\", vol.ExternalID)",
          "1294:  must.Eq(t, int64(42), vol.Capacity)",
          "1295:  must.Eq(t, \"bar\", vol.Context[\"plugincontext\"])",
          "1296:  must.Eq(t, \"\", vol.Context[\"mycontext\"])",
          "1297:  must.Eq(t, map[string]string{\"rack\": \"R1\"}, vol.Topologies[0].Segments)",
          "",
          "---------------"
        ]
      }
    }
  ]
}