{
  "cve_id": "CVE-2018-14774",
  "cve_desc": "An issue was discovered in HttpKernel in Symfony 2.7.0 through 2.7.48, 2.8.0 through 2.8.43, 3.3.0 through 3.3.17, 3.4.0 through 3.4.13, 4.0.0 through 4.0.13, and 4.1.0 through 4.1.2. When using HttpCache, the values of the X-Forwarded-Host headers are implicitly set as trusted while this should be forbidden, leading to potential host header injection.",
  "repo": "symfony/symfony",
  "patch_hash": "725dee4cd8b4ccd52e335ae4b4522242cea9bd4a",
  "patch_info": {
    "commit_hash": "725dee4cd8b4ccd52e335ae4b4522242cea9bd4a",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/725dee4cd8b4ccd52e335ae4b4522242cea9bd4a",
    "files": [
      "src/Symfony/Component/HttpFoundation/Request.php",
      "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
      "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
      "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
      "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
      "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
      "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
      "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
    ],
    "message": "[HttpKernel] fix trusted headers management in HttpCache and InlineFragmentRenderer",
    "before_after_code_files": [
      "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
      "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
      "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
      "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
      "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
      "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
      "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
      "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
      "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1944:         if (self::$trustedHeaders[self::HEADER_FORWARDED] && $this->headers->has(self::$trustedHeaders[self::HEADER_FORWARDED])) {",
      "1945:             $forwardedValues = $this->headers->get(self::$trustedHeaders[self::HEADER_FORWARDED]);",
      "1946:             $forwardedValues = preg_match_all(sprintf('{(?:%s)=(?:\"?\\[?)([a-zA-Z0-9\\.:_\\-/]*+)}', self::$forwardedParams[$type]), $forwardedValues, $matches) ? $matches[1] : array();",
      "1947:         }",
      "1949:         if (null !== $ip) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1947:             if (self::HEADER_CLIENT_PORT === $type) {",
      "1948:                 foreach ($forwardedValues as $k => $v) {",
      "1949:                     $forwardedValues[$k] = substr_replace($v, '0.0.0.0', 0, strrpos($v, ':'));",
      "1950:                 }",
      "1951:             }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php": [
      "File: src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php -> src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: use Symfony\\Component\\HttpFoundation\\Response;",
      "17: use Symfony\\Component\\HttpKernel\\Controller\\ControllerReference;",
      "18: use Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;",
      "19: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
      "20: use Symfony\\Component\\HttpKernel\\KernelEvents;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: use Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:         $level = ob_get_level();",
      "78:         try {",
      "80:         } catch (\\Exception $e) {",
      "",
      "[Removed Lines]",
      "79:             return $this->kernel->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);",
      "",
      "[Added Lines]",
      "80:             return SubRequestHandler::handle($this->kernel, $subRequest, HttpKernelInterface::SUB_REQUEST, false);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:         $cookies = $request->cookies->all();",
      "110:         $server = $request->server->all();",
      "127:         unset($server['HTTP_IF_MODIFIED_SINCE']);",
      "128:         unset($server['HTTP_IF_NONE_MATCH']);",
      "",
      "[Removed Lines]",
      "115:         try {",
      "116:             if ($trustedHeaderName = Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP)) {",
      "117:                 $currentXForwardedFor = $request->headers->get($trustedHeaderName, '');",
      "119:                 $server['HTTP_'.$trustedHeaderName] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();",
      "120:             }",
      "121:         } catch (\\InvalidArgumentException $e) {",
      "123:         }",
      "125:         $server['REMOTE_ADDR'] = $this->resolveTrustedProxy();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139:         return $subRequest;",
      "140:     }",
      "",
      "[Removed Lines]",
      "142:     private function resolveTrustedProxy()",
      "143:     {",
      "144:         if (!$trustedProxies = Request::getTrustedProxies()) {",
      "145:             return '127.0.0.1';",
      "146:         }",
      "148:         $firstTrustedProxy = reset($trustedProxies);",
      "150:         return false !== ($i = strpos($firstTrustedProxy, '/')) ? substr($firstTrustedProxy, 0, $i) : $firstTrustedProxy;",
      "151:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php": [
      "File: src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php -> src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "468:             $this->surrogate->addSurrogateCapability($request);",
      "469:         }",
      "494:         if (null !== $entry && \\in_array($response->getStatusCode(), array(500, 502, 503, 504))) {",
      "",
      "[Removed Lines]",
      "472:         $forwardedFor = $request->headers->get('X-Forwarded-For');",
      "473:         if ($forwardedFor) {",
      "474:             $request->headers->set('X-Forwarded-For', $forwardedFor.', '.$request->server->get('REMOTE_ADDR'));",
      "475:         } else {",
      "476:             $request->headers->set('X-Forwarded-For', $request->server->get('REMOTE_ADDR'));",
      "477:         }",
      "481:         $request->server->set('REMOTE_ADDR', '127.0.0.1');",
      "484:         if (!\\in_array('127.0.0.1', $trustedProxies = Request::getTrustedProxies())) {",
      "485:             $trustedProxies[] = '127.0.0.1';",
      "486:             Request::setTrustedProxies($trustedProxies);",
      "487:         }",
      "490:         $response = $this->kernel->handle($request, HttpKernelInterface::MASTER_REQUEST, $catch);",
      "",
      "[Added Lines]",
      "472:         $response = SubRequestHandler::handle($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $catch);",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php": [
      "File: src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php -> src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "12: namespace Symfony\\Component\\HttpKernel\\HttpCache;",
      "14: use Symfony\\Component\\HttpFoundation\\IpUtils;",
      "15: use Symfony\\Component\\HttpFoundation\\Request;",
      "16: use Symfony\\Component\\HttpFoundation\\Response;",
      "17: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
      "24: class SubRequestHandler",
      "25: {",
      "29:     public static function handle(HttpKernelInterface $kernel, Request $request, $type, $catch)",
      "30:     {",
      "32:         $trustedProxies = Request::getTrustedProxies();",
      "33:         $trustedHeaders = array(",
      "34:             Request::HEADER_FORWARDED => Request::getTrustedHeaderName(Request::HEADER_FORWARDED),",
      "35:             Request::HEADER_CLIENT_IP => Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP),",
      "36:             Request::HEADER_CLIENT_HOST => Request::getTrustedHeaderName(Request::HEADER_CLIENT_HOST),",
      "37:             Request::HEADER_CLIENT_PROTO => Request::getTrustedHeaderName(Request::HEADER_CLIENT_PROTO),",
      "38:             Request::HEADER_CLIENT_PORT => Request::getTrustedHeaderName(Request::HEADER_CLIENT_PORT),",
      "39:         );",
      "42:         $remoteAddr = $request->server->get('REMOTE_ADDR');",
      "43:         if (!IpUtils::checkIp($remoteAddr, $trustedProxies)) {",
      "44:             foreach (array_filter($trustedHeaders) as $name) {",
      "45:                 $request->headers->remove($name);",
      "46:             }",
      "47:         }",
      "50:         $trustedIps = array();",
      "51:         $trustedValues = array();",
      "52:         foreach (array_reverse($request->getClientIps()) as $ip) {",
      "53:             $trustedIps[] = $ip;",
      "54:             $trustedValues[] = sprintf('for=\"%s\"', $ip);",
      "55:         }",
      "56:         if ($ip !== $remoteAddr) {",
      "57:             $trustedIps[] = $remoteAddr;",
      "58:             $trustedValues[] = sprintf('for=\"%s\"', $remoteAddr);",
      "59:         }",
      "62:         if ($name = $trustedHeaders[Request::HEADER_FORWARDED]) {",
      "63:             $trustedValues[0] .= sprintf(';host=\"%s\";proto=%s', $request->getHttpHost(), $request->getScheme());",
      "64:             $request->headers->set($name, implode(', ', $trustedValues));",
      "65:         }",
      "66:         if ($name = $trustedHeaders[Request::HEADER_CLIENT_IP]) {",
      "67:             $request->headers->set($name, implode(', ', $trustedIps));",
      "68:         }",
      "69:         if (!$name && !$trustedHeaders[Request::HEADER_FORWARDED]) {",
      "70:             $request->headers->set('X-Forwarded-For', implode(', ', $trustedIps));",
      "71:             Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, 'X_FORWARDED_FOR');",
      "72:         }",
      "76:         $request->server->set('REMOTE_ADDR', '127.0.0.1');",
      "79:         if (!IpUtils::checkIp('127.0.0.1', $trustedProxies)) {",
      "80:             Request::setTrustedProxies(array_merge($trustedProxies, array('127.0.0.1')));",
      "81:         }",
      "83:         try {",
      "84:             $e = null;",
      "85:             $response = $kernel->handle($request, $type, $catch);",
      "86:         } catch (\\Throwable $e) {",
      "87:         } catch (\\Exception $e) {",
      "88:         }",
      "91:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, $trustedHeaders[Request::HEADER_CLIENT_IP]);",
      "92:         Request::setTrustedProxies($trustedProxies);",
      "94:         if (null !== $e) {",
      "95:             throw $e;",
      "96:         }",
      "98:         return $response;",
      "99:     }",
      "100: }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php": [
      "File: src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php -> src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:     protected function setUp()",
      "28:     {",
      "30:     }",
      "32:     protected function tearDown()",
      "33:     {",
      "35:     }",
      "37:     public function testRender()",
      "",
      "[Removed Lines]",
      "29:         $this->originalTrustedHeaderName = Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP);",
      "34:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, $this->originalTrustedHeaderName);",
      "",
      "[Added Lines]",
      "29:         $this->originalTrustedHeaderNames = array(",
      "30:             Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP),",
      "31:             Request::getTrustedHeaderName(Request::HEADER_FORWARDED),",
      "32:         );",
      "37:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, $this->originalTrustedHeaderNames[0]);",
      "38:         Request::setTrustedHeaderName(Request::HEADER_FORWARDED, $this->originalTrustedHeaderNames[1]);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:         $subRequest = Request::create('/_fragment?_path=_format%3Dhtml%26_locale%3Den%26_controller%3Dmain_controller');",
      "56:         $subRequest->attributes->replace(array('object' => $object, '_format' => 'html', '_controller' => 'main_controller', '_locale' => 'en'));",
      "57:         $subRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "60:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($subRequest));",
      "",
      "[Removed Lines]",
      "58:         $subRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
      "",
      "[Added Lines]",
      "62:         $subRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83:     public function testRenderWithTrustedHeaderDisabled()",
      "84:     {",
      "85:         Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, '');",
      "88:         $this->assertSame('foo', $strategy->render('/', Request::create('/'))->getContent());",
      "89:     }",
      "",
      "[Removed Lines]",
      "87:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest(Request::create('/')));",
      "",
      "[Added Lines]",
      "90:         Request::setTrustedHeaderName(Request::HEADER_FORWARDED, '');",
      "92:         $expectedSubRequest = Request::create('/');",
      "93:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "95:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "168:     {",
      "169:         $expectedSubRequest = Request::create('/');",
      "170:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
      "172:         if (Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP)) {",
      "173:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "175:         }",
      "177:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
      "",
      "[Removed Lines]",
      "174:             $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
      "",
      "[Added Lines]",
      "182:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "194:     public function testHeadersPossiblyResultingIn304AreNotAssignedToSubrequest()",
      "195:     {",
      "196:         $expectedSubRequest = Request::create('/');",
      "202:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
      "203:         $request = Request::create('/', 'GET', array(), array(), array(), array('HTTP_IF_MODIFIED_SINCE' => 'Fri, 01 Jan 2016 00:00:00 GMT', 'HTTP_IF_NONE_MATCH' => '*'));",
      "",
      "[Removed Lines]",
      "197:         if (Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP)) {",
      "198:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "199:             $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
      "200:         }",
      "",
      "[Added Lines]",
      "204:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "205:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "208:     {",
      "209:         $expectedSubRequest = Request::create('/');",
      "210:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
      "218:         Request::setTrustedProxies(array('1.1.1.1'));",
      "",
      "[Removed Lines]",
      "211:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
      "213:         if (Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP)) {",
      "214:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "215:             $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
      "216:         }",
      "",
      "[Added Lines]",
      "216:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
      "217:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "218:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "230:     {",
      "231:         $expectedSubRequest = Request::create('/');",
      "232:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
      "234:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
      "237:         Request::setTrustedProxies(array('1.1.1.1/24'));",
      "",
      "[Removed Lines]",
      "233:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
      "235:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
      "",
      "[Added Lines]",
      "235:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
      "237:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php": [
      "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1303:         $this->setNextResponse();",
      "1304:         $this->request('GET', '/', array('REMOTE_ADDR' => '10.0.0.1'));",
      "1307:     }",
      "1313:     {",
      "1314:         Request::setTrustedProxies($existing);",
      "1316:         $this->setNextResponse();",
      "1317:         $this->request('GET', '/', array('REMOTE_ADDR' => '10.0.0.1'));",
      "1321:         Request::setTrustedProxies(array());",
      "1322:     }",
      "",
      "[Removed Lines]",
      "1306:         $this->assertEquals('127.0.0.1', $this->kernel->getBackendRequest()->server->get('REMOTE_ADDR'));",
      "1312:     public function testHttpCacheIsSetAsATrustedProxy(array $existing, array $expected)",
      "1319:         $this->assertEquals($expected, Request::getTrustedProxies());",
      "",
      "[Added Lines]",
      "1306:         $that = $this;",
      "1307:         $this->kernel->assert(function ($backendRequest) use ($that) {",
      "1308:             $that->assertSame('127.0.0.1', $backendRequest->server->get('REMOTE_ADDR'));",
      "1309:         });",
      "1315:     public function testHttpCacheIsSetAsATrustedProxy(array $existing)",
      "1321:         $this->assertSame($existing, Request::getTrustedProxies());",
      "1323:         $that = $this;",
      "1324:         $existing = array_unique(array_merge($existing, array('127.0.0.1')));",
      "1325:         $this->kernel->assert(function ($backendRequest) use ($existing, $that) {",
      "1326:             $that->assertSame($existing, Request::getTrustedProxies());",
      "1327:             $that->assertsame('10.0.0.1', $backendRequest->getClientIp());",
      "1328:         });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1324:     public function getTrustedProxyData()",
      "1325:     {",
      "1326:         return array(",
      "1330:         );",
      "1331:     }",
      "1337:     {",
      "1338:         $this->setNextResponse();",
      "1339:         $server = array('REMOTE_ADDR' => '10.0.0.1');",
      "1342:         }",
      "1343:         $this->request('GET', '/', $server);",
      "1346:     }",
      "1349:     {",
      "1350:         return array(",
      "1354:         );",
      "1355:     }",
      "1366:     public function testEsiCacheRemoveValidationHeadersIfEmbeddedResponses()",
      "1367:     {",
      "1368:         $time = \\DateTime::createFromFormat('U', time());",
      "",
      "[Removed Lines]",
      "1327:             array(array(), array('127.0.0.1')),",
      "1328:             array(array('10.0.0.2'), array('10.0.0.2', '127.0.0.1')),",
      "1329:             array(array('10.0.0.2', '127.0.0.1'), array('10.0.0.2', '127.0.0.1')),",
      "1336:     public function testXForwarderForHeaderForForwardedRequests($xForwardedFor, $expected)",
      "1340:         if (false !== $xForwardedFor) {",
      "1341:             $server['HTTP_X_FORWARDED_FOR'] = $xForwardedFor;",
      "1345:         $this->assertEquals($expected, $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));",
      "1348:     public function getXForwardedForData()",
      "1351:             array(false, '10.0.0.1'),",
      "1352:             array('10.0.0.2', '10.0.0.2, 10.0.0.1'),",
      "1353:             array('10.0.0.2, 10.0.0.3', '10.0.0.2, 10.0.0.3, 10.0.0.1'),",
      "1357:     public function testXForwarderForHeaderForPassRequests()",
      "1358:     {",
      "1359:         $this->setNextResponse();",
      "1360:         $server = array('REMOTE_ADDR' => '10.0.0.1');",
      "1361:         $this->request('POST', '/', $server);",
      "1363:         $this->assertEquals('10.0.0.1', $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));",
      "1364:     }",
      "",
      "[Added Lines]",
      "1336:             array(array()),",
      "1337:             array(array('10.0.0.2')),",
      "1338:             array(array('10.0.0.2', '127.0.0.1')),",
      "1345:     public function testForwarderHeaderForForwardedRequests($forwarded, $expected)",
      "1349:         if (null !== $forwarded) {",
      "1350:             Request::setTrustedProxies($server);",
      "1351:             $server['HTTP_FORWARDED'] = $forwarded;",
      "1355:         $that = $this;",
      "1356:         $this->kernel->assert(function ($backendRequest) use ($expected, $that) {",
      "1357:             $that->assertSame($expected, $backendRequest->headers->get('Forwarded'));",
      "1358:         });",
      "1360:         Request::setTrustedProxies(array());",
      "1363:     public function getForwardedData()",
      "1366:             array(null, 'for=\"10.0.0.1\";host=\"localhost\";proto=http'),",
      "1367:             array('for=10.0.0.2', 'for=\"10.0.0.2\";host=\"localhost\";proto=http, for=\"10.0.0.1\"'),",
      "1368:             array('for=10.0.0.2, for=10.0.0.3', 'for=\"10.0.0.2\";host=\"localhost\";proto=http, for=\"10.0.0.3\", for=\"10.0.0.1\"'),",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php": [
      "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "12: namespace Symfony\\Component\\HttpKernel\\Tests\\HttpCache;",
      "14: use PHPUnit\\Framework\\TestCase;",
      "15: use Symfony\\Component\\HttpFoundation\\Request;",
      "16: use Symfony\\Component\\HttpFoundation\\Response;",
      "17: use Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;",
      "18: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
      "20: class SubRequestHandlerTest extends TestCase",
      "21: {",
      "22:     private static $globalState;",
      "24:     protected function setUp()",
      "25:     {",
      "26:         self::$globalState = $this->getGlobalState();",
      "27:     }",
      "29:     protected function tearDown()",
      "30:     {",
      "31:         foreach (self::$globalState[1] as $key => $name) {",
      "32:             Request::setTrustedHeaderName($key, $name);",
      "33:         }",
      "34:         Request::setTrustedProxies(self::$globalState[0]);",
      "35:     }",
      "37:     public function testTrustedHeadersAreKept()",
      "38:     {",
      "39:         Request::setTrustedProxies(array('10.0.0.1'));",
      "40:         $globalState = $this->getGlobalState();",
      "42:         $request = Request::create('/');",
      "43:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
      "44:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
      "45:         $request->headers->set('X-Forwarded-Host', 'Good');",
      "46:         $request->headers->set('X-Forwarded-Port', '1234');",
      "47:         $request->headers->set('X-Forwarded-Proto', 'https');",
      "49:         $that = $this;",
      "50:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) use ($that) {",
      "51:             $that->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
      "52:             $that->assertSame('10.0.0.2', $request->getClientIp());",
      "53:             $that->assertSame('Good', $request->headers->get('X-Forwarded-Host'));",
      "54:             $that->assertSame('1234', $request->headers->get('X-Forwarded-Port'));",
      "55:             $that->assertSame('https', $request->headers->get('X-Forwarded-Proto'));",
      "56:         });",
      "58:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
      "60:         $this->assertSame($globalState, $this->getGlobalState());",
      "61:     }",
      "63:     public function testUntrustedHeadersAreRemoved()",
      "64:     {",
      "65:         $request = Request::create('/');",
      "66:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
      "67:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
      "68:         $request->headers->set('X-Forwarded-Host', 'Evil');",
      "69:         $request->headers->set('X-Forwarded-Port', '1234');",
      "70:         $request->headers->set('X-Forwarded-Proto', 'http');",
      "71:         $request->headers->set('Forwarded', 'Evil2');",
      "73:         $that = $this;",
      "74:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) use ($that) {",
      "75:             $that->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
      "76:             $that->assertSame('10.0.0.1', $request->getClientIp());",
      "77:             $that->assertFalse($request->headers->has('X-Forwarded-Host'));",
      "78:             $that->assertFalse($request->headers->has('X-Forwarded-Port'));",
      "79:             $that->assertFalse($request->headers->has('X-Forwarded-Proto'));",
      "80:             $that->assertSame('for=\"10.0.0.1\";host=\"localhost\";proto=http', $request->headers->get('Forwarded'));",
      "81:         });",
      "83:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
      "85:         $this->assertSame(self::$globalState, $this->getGlobalState());",
      "86:     }",
      "88:     public function testTrustedForwardedHeader()",
      "89:     {",
      "90:         Request::setTrustedProxies(array('10.0.0.1'));",
      "91:         $globalState = $this->getGlobalState();",
      "93:         $request = Request::create('/');",
      "94:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
      "95:         $request->headers->set('Forwarded', 'for=\"10.0.0.2\";host=\"foo.bar\";proto=https');",
      "96:         $request->headers->set('X-Forwarded-Host', 'foo.bar');",
      "97:         $request->headers->set('X-Forwarded-Proto', 'https');",
      "99:         $that = $this;",
      "100:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) use ($that) {",
      "101:             $that->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
      "102:             $that->assertSame('10.0.0.2', $request->getClientIp());",
      "103:             $that->assertSame('foo.bar', $request->getHttpHost());",
      "104:             $that->assertSame('https', $request->getScheme());",
      "105:             $that->assertSame(443, $request->getPort());",
      "106:         });",
      "108:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
      "110:         $this->assertSame($globalState, $this->getGlobalState());",
      "111:     }",
      "113:     public function testTrustedXForwardedForHeader()",
      "114:     {",
      "115:         Request::setTrustedProxies(array('10.0.0.1'));",
      "116:         $globalState = $this->getGlobalState();",
      "118:         $request = Request::create('/');",
      "119:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
      "120:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
      "121:         $request->headers->set('X-Forwarded-Host', 'foo.bar');",
      "122:         $request->headers->set('X-Forwarded-Proto', 'https');",
      "124:         $that = $this;",
      "125:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) use ($that) {",
      "126:             $that->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
      "127:             $that->assertSame('10.0.0.2', $request->getClientIp());",
      "128:             $that->assertSame('foo.bar', $request->getHttpHost());",
      "129:             $that->assertSame('https', $request->getScheme());",
      "130:         });",
      "132:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
      "134:         $this->assertSame($globalState, $this->getGlobalState());",
      "135:     }",
      "137:     private function getGlobalState()",
      "138:     {",
      "139:         return array(",
      "140:             Request::getTrustedProxies(),",
      "141:             array(",
      "142:                 Request::HEADER_FORWARDED => Request::getTrustedHeaderName(Request::HEADER_FORWARDED),",
      "143:                 Request::HEADER_CLIENT_IP => Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP),",
      "144:                 Request::HEADER_CLIENT_HOST => Request::getTrustedHeaderName(Request::HEADER_CLIENT_HOST),",
      "145:                 Request::HEADER_CLIENT_PROTO => Request::getTrustedHeaderName(Request::HEADER_CLIENT_PROTO),",
      "146:                 Request::HEADER_CLIENT_PORT => Request::getTrustedHeaderName(Request::HEADER_CLIENT_PORT),",
      "147:             ),",
      "148:         );",
      "149:     }",
      "150: }",
      "152: class TestSubRequestHandlerKernel implements HttpKernelInterface",
      "153: {",
      "154:     private $assertCallback;",
      "156:     public function __construct(\\Closure $assertCallback)",
      "157:     {",
      "158:         $this->assertCallback = $assertCallback;",
      "159:     }",
      "161:     public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true)",
      "162:     {",
      "163:         $assertCallback = $this->assertCallback;",
      "164:         $assertCallback($request, $type, $catch);",
      "166:         return new Response();",
      "167:     }",
      "168: }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php": [
      "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:         $this->status = $status;",
      "35:         $this->headers = $headers;",
      "36:         $this->customizer = $customizer;",
      "38:         parent::__construct(new EventDispatcher(), $this);",
      "39:     }",
      "42:     {",
      "44:     }",
      "46:     public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = false)",
      "47:     {",
      "48:         $this->catch = $catch;",
      "51:         return parent::handle($request, $type, $catch);",
      "52:     }",
      "",
      "[Removed Lines]",
      "41:     public function getBackendRequest()",
      "43:         return $this->backendRequest;",
      "49:         $this->backendRequest = $request;",
      "",
      "[Added Lines]",
      "37:         $this->trustedHeadersReflector = new \\ReflectionProperty('Symfony\\Component\\HttpFoundation\\Request', 'trustedHeaders');",
      "38:         $this->trustedHeadersReflector->setAccessible(true);",
      "43:     public function assert(\\Closure $callback)",
      "45:         $trustedConfig = array(Request::getTrustedProxies(), $this->trustedHeadersReflector->getValue());",
      "47:         list($trustedProxies, $trustedHeaders, $backendRequest) = $this->backendRequest;",
      "48:         Request::setTrustedProxies($trustedProxies);",
      "49:         $this->trustedHeadersReflector->setValue(null, $trustedHeaders);",
      "51:         try {",
      "52:             $e = null;",
      "53:             $callback($backendRequest);",
      "54:         } catch (\\Throwable $e) {",
      "55:         } catch (\\Exception $e) {",
      "56:         }",
      "58:         list($trustedProxies, $trustedHeaders) = $trustedConfig;",
      "59:         Request::setTrustedProxies($trustedProxies);",
      "60:         $this->trustedHeadersReflector->setValue(null, $trustedHeaders);",
      "62:         if (null !== $e) {",
      "63:             throw $e;",
      "64:         }",
      "70:         $this->backendRequest = array($request::getTrustedProxies(), $this->trustedHeadersReflector->getValue(), $request);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "974240e178bb01d734bf1df1ad5c3beba6a2f982",
      "candidate_info": {
        "commit_hash": "974240e178bb01d734bf1df1ad5c3beba6a2f982",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/974240e178bb01d734bf1df1ad5c3beba6a2f982",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
          "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
        ],
        "message": "Merge branch '3.4' into 4.0\n\n* 3.4:\n  [HttpKernel] fix trusted headers management in HttpCache and InlineFragmentRenderer",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
          "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
            "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
            "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
            "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
            "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1941:         if ((self::$trustedHeaderSet & self::HEADER_FORWARDED) && $this->headers->has(self::$trustedHeaders[self::HEADER_FORWARDED])) {",
          "1942:             $forwardedValues = $this->headers->get(self::$trustedHeaders[self::HEADER_FORWARDED]);",
          "1943:             $forwardedValues = preg_match_all(sprintf('{(?:%s)=(?:\"?\\[?)([a-zA-Z0-9\\.:_\\-/]*+)}', self::$forwardedParams[$type]), $forwardedValues, $matches) ? $matches[1] : array();",
          "1944:         }",
          "1946:         if (null !== $ip) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1944:             if (self::HEADER_X_FORWARDED_PORT === $type) {",
          "1945:                 foreach ($forwardedValues as $k => $v) {",
          "1946:                     $forwardedValues[$k] = substr_replace($v, '0.0.0.0', 0, strrpos($v, ':'));",
          "1947:                 }",
          "1948:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php": [
          "File: src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php -> src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\Controller\\ControllerReference;",
          "18: use Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;",
          "19: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "20: use Symfony\\Component\\HttpKernel\\KernelEvents;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         $level = ob_get_level();",
          "78:         try {",
          "80:         } catch (\\Exception $e) {",
          "",
          "[Removed Lines]",
          "79:             return $this->kernel->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);",
          "",
          "[Added Lines]",
          "80:             return SubRequestHandler::handle($this->kernel, $subRequest, HttpKernelInterface::SUB_REQUEST, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         $cookies = $request->cookies->all();",
          "110:         $server = $request->server->all();",
          "120:         unset($server['HTTP_IF_MODIFIED_SINCE']);",
          "121:         unset($server['HTTP_IF_NONE_MATCH']);",
          "",
          "[Removed Lines]",
          "112:         if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {",
          "113:             $currentXForwardedFor = $request->headers->get('X_FORWARDED_FOR', '');",
          "115:             $server['HTTP_X_FORWARDED_FOR'] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();",
          "116:         }",
          "118:         $server['REMOTE_ADDR'] = $this->resolveTrustedProxy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:         return $subRequest;",
          "133:     }",
          "",
          "[Removed Lines]",
          "135:     private function resolveTrustedProxy()",
          "136:     {",
          "137:         if (!$trustedProxies = Request::getTrustedProxies()) {",
          "138:             return '127.0.0.1';",
          "139:         }",
          "141:         $firstTrustedProxy = reset($trustedProxies);",
          "143:         return false !== ($i = strpos($firstTrustedProxy, '/')) ? substr($firstTrustedProxy, 0, $i) : $firstTrustedProxy;",
          "144:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php": [
          "File: src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php -> src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:             $this->surrogate->addSurrogateCapability($request);",
          "445:         }",
          "470:         if (null !== $entry && \\in_array($response->getStatusCode(), array(500, 502, 503, 504))) {",
          "",
          "[Removed Lines]",
          "448:         $forwardedFor = $request->headers->get('X-Forwarded-For');",
          "449:         if ($forwardedFor) {",
          "450:             $request->headers->set('X-Forwarded-For', $forwardedFor.', '.$request->server->get('REMOTE_ADDR'));",
          "451:         } else {",
          "452:             $request->headers->set('X-Forwarded-For', $request->server->get('REMOTE_ADDR'));",
          "453:         }",
          "457:         $request->server->set('REMOTE_ADDR', '127.0.0.1');",
          "460:         if (!\\in_array('127.0.0.1', $trustedProxies = Request::getTrustedProxies())) {",
          "461:             $trustedProxies[] = '127.0.0.1';",
          "462:             Request::setTrustedProxies($trustedProxies, Request::HEADER_X_FORWARDED_ALL);",
          "463:         }",
          "466:         $response = $this->kernel->handle($request, HttpKernelInterface::MASTER_REQUEST, $catch);",
          "",
          "[Added Lines]",
          "448:         $response = SubRequestHandler::handle($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $catch);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php": [
          "File: src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php -> src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\HttpKernel\\HttpCache;",
          "14: use Symfony\\Component\\HttpFoundation\\IpUtils;",
          "15: use Symfony\\Component\\HttpFoundation\\Request;",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "24: class SubRequestHandler",
          "25: {",
          "26:     public static function handle(HttpKernelInterface $kernel, Request $request, $type, $catch): Response",
          "27:     {",
          "29:         $trustedProxies = Request::getTrustedProxies();",
          "30:         $trustedHeaderSet = Request::getTrustedHeaderSet();",
          "33:         $remoteAddr = $request->server->get('REMOTE_ADDR');",
          "34:         if (!IpUtils::checkIp($remoteAddr, $trustedProxies)) {",
          "35:             $trustedHeaders = array(",
          "36:                 'FORWARDED' => $trustedHeaderSet & Request::HEADER_FORWARDED,",
          "37:                 'X_FORWARDED_FOR' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_FOR,",
          "38:                 'X_FORWARDED_HOST' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_HOST,",
          "39:                 'X_FORWARDED_PROTO' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PROTO,",
          "40:                 'X_FORWARDED_PORT' => $trustedHeaderSet & Request::HEADER_X_FORWARDED_PORT,",
          "41:             );",
          "42:             foreach (array_filter($trustedHeaders) as $name => $key) {",
          "43:                 $request->headers->remove($name);",
          "44:             }",
          "45:         }",
          "48:         $trustedIps = array();",
          "49:         $trustedValues = array();",
          "50:         foreach (array_reverse($request->getClientIps()) as $ip) {",
          "51:             $trustedIps[] = $ip;",
          "52:             $trustedValues[] = sprintf('for=\"%s\"', $ip);",
          "53:         }",
          "54:         if ($ip !== $remoteAddr) {",
          "55:             $trustedIps[] = $remoteAddr;",
          "56:             $trustedValues[] = sprintf('for=\"%s\"', $remoteAddr);",
          "57:         }",
          "60:         if (Request::HEADER_FORWARDED & $trustedHeaderSet) {",
          "61:             $trustedValues[0] .= sprintf(';host=\"%s\";proto=%s', $request->getHttpHost(), $request->getScheme());",
          "62:             $request->headers->set('Forwarded', implode(', ', $trustedValues));",
          "63:         }",
          "64:         if (Request::HEADER_X_FORWARDED_FOR & $trustedHeaderSet) {",
          "65:             $request->headers->set('X-Forwarded-For', implode(', ', $trustedIps));",
          "66:         } elseif (!(Request::HEADER_FORWARDED & $trustedHeaderSet)) {",
          "67:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet | Request::HEADER_X_FORWARDED_FOR);",
          "68:             $request->headers->set('X-Forwarded-For', implode(', ', $trustedIps));",
          "69:         }",
          "73:         $request->server->set('REMOTE_ADDR', '127.0.0.1');",
          "76:         if (!IpUtils::checkIp('127.0.0.1', $trustedProxies)) {",
          "77:             Request::setTrustedProxies(array_merge($trustedProxies, array('127.0.0.1')), Request::getTrustedHeaderSet());",
          "78:         }",
          "80:         try {",
          "81:             return $kernel->handle($request, $type, $catch);",
          "82:         } finally {",
          "84:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "85:         }",
          "86:     }",
          "87: }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php -> src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         $subRequest = Request::create('/_fragment?_path=_format%3Dhtml%26_locale%3Den%26_controller%3Dmain_controller');",
          "45:         $subRequest->attributes->replace(array('object' => $object, '_format' => 'html', '_controller' => 'main_controller', '_locale' => 'en'));",
          "46:         $subRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "49:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($subRequest));",
          "",
          "[Removed Lines]",
          "47:         $subRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "47:         $subRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     {",
          "56:         Request::setTrustedProxies(array(), 0);",
          "59:         $this->assertSame('foo', $strategy->render('/', Request::create('/'))->getContent());",
          "61:         Request::setTrustedProxies(array(), -1);",
          "",
          "[Removed Lines]",
          "58:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest(Request::create('/')));",
          "",
          "[Added Lines]",
          "58:         $expectedSubRequest = Request::create('/');",
          "59:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "61:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:         if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {",
          "148:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "150:         }",
          "152:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "[Removed Lines]",
          "149:             $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "153:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     public function testESIHeaderIsKeptInSubrequestWithTrustedHeaderDisabled()",
          "160:     {",
          "163:         $this->testESIHeaderIsKeptInSubrequest();",
          "",
          "[Removed Lines]",
          "161:         Request::setTrustedProxies(array(), 0);",
          "",
          "[Added Lines]",
          "164:         Request::setTrustedProxies(array(), Request::HEADER_FORWARDED);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:     {",
          "170:         $expectedSubRequest = Request::create('/');",
          "171:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "174:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "175:         $request = Request::create('/', 'GET', array(), array(), array(), array('HTTP_IF_MODIFIED_SINCE' => 'Fri, 01 Jan 2016 00:00:00 GMT', 'HTTP_IF_NONE_MATCH' => '*'));",
          "",
          "[Removed Lines]",
          "172:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "175:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:         $expectedSubRequest = Request::create('/');",
          "184:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "186:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "189:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "[Removed Lines]",
          "185:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
          "187:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "188:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
          "190:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "199:     {",
          "200:         $expectedSubRequest = Request::create('/');",
          "201:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "203:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "206:         Request::setTrustedProxies(array('1.1.1.1/24'), -1);",
          "",
          "[Removed Lines]",
          "202:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
          "204:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "205:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
          "207:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1338:         $this->setNextResponse();",
          "1339:         $this->request('GET', '/', array('REMOTE_ADDR' => '10.0.0.1'));",
          "1342:     }",
          "1348:     {",
          "1349:         Request::setTrustedProxies($existing, Request::HEADER_X_FORWARDED_ALL);",
          "1351:         $this->setNextResponse();",
          "1352:         $this->request('GET', '/', array('REMOTE_ADDR' => '10.0.0.1'));",
          "1356:         Request::setTrustedProxies(array(), -1);",
          "1357:     }",
          "",
          "[Removed Lines]",
          "1341:         $this->assertEquals('127.0.0.1', $this->kernel->getBackendRequest()->server->get('REMOTE_ADDR'));",
          "1347:     public function testHttpCacheIsSetAsATrustedProxy(array $existing, array $expected)",
          "1354:         $this->assertEquals($expected, Request::getTrustedProxies());",
          "",
          "[Added Lines]",
          "1341:         $this->kernel->assert(function ($backendRequest) {",
          "1342:             $this->assertSame('127.0.0.1', $backendRequest->server->get('REMOTE_ADDR'));",
          "1343:         });",
          "1349:     public function testHttpCacheIsSetAsATrustedProxy(array $existing)",
          "1355:         $this->assertSame($existing, Request::getTrustedProxies());",
          "1357:         $existing = array_unique(array_merge($existing, array('127.0.0.1')));",
          "1358:         $this->kernel->assert(function ($backendRequest) use ($existing) {",
          "1359:             $this->assertSame($existing, Request::getTrustedProxies());",
          "1360:             $this->assertsame('10.0.0.1', $backendRequest->getClientIp());",
          "1361:         });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1359:     public function getTrustedProxyData()",
          "1360:     {",
          "1361:         return array(",
          "1365:         );",
          "1366:     }",
          "1372:     {",
          "1373:         $this->setNextResponse();",
          "1374:         $server = array('REMOTE_ADDR' => '10.0.0.1');",
          "1377:         }",
          "1378:         $this->request('GET', '/', $server);",
          "1381:     }",
          "1384:     {",
          "1385:         return array(",
          "1389:         );",
          "1390:     }",
          "1401:     public function testEsiCacheRemoveValidationHeadersIfEmbeddedResponses()",
          "1402:     {",
          "1403:         $time = \\DateTime::createFromFormat('U', time());",
          "",
          "[Removed Lines]",
          "1362:             array(array(), array('127.0.0.1')),",
          "1363:             array(array('10.0.0.2'), array('10.0.0.2', '127.0.0.1')),",
          "1364:             array(array('10.0.0.2', '127.0.0.1'), array('10.0.0.2', '127.0.0.1')),",
          "1371:     public function testXForwarderForHeaderForForwardedRequests($xForwardedFor, $expected)",
          "1375:         if (false !== $xForwardedFor) {",
          "1376:             $server['HTTP_X_FORWARDED_FOR'] = $xForwardedFor;",
          "1380:         $this->assertEquals($expected, $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));",
          "1383:     public function getXForwardedForData()",
          "1386:             array(false, '10.0.0.1'),",
          "1387:             array('10.0.0.2', '10.0.0.2, 10.0.0.1'),",
          "1388:             array('10.0.0.2, 10.0.0.3', '10.0.0.2, 10.0.0.3, 10.0.0.1'),",
          "1392:     public function testXForwarderForHeaderForPassRequests()",
          "1393:     {",
          "1394:         $this->setNextResponse();",
          "1395:         $server = array('REMOTE_ADDR' => '10.0.0.1');",
          "1396:         $this->request('POST', '/', $server);",
          "1398:         $this->assertEquals('10.0.0.1', $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));",
          "1399:     }",
          "",
          "[Added Lines]",
          "1369:             array(array()),",
          "1370:             array(array('10.0.0.2')),",
          "1371:             array(array('10.0.0.2', '127.0.0.1')),",
          "1378:     public function testForwarderHeaderForForwardedRequests($forwarded, $expected)",
          "1382:         if (null !== $forwarded) {",
          "1383:             Request::setTrustedProxies($server, -1);",
          "1384:             $server['HTTP_FORWARDED'] = $forwarded;",
          "1388:         $this->kernel->assert(function ($backendRequest) use ($expected) {",
          "1389:             $this->assertSame($expected, $backendRequest->headers->get('Forwarded'));",
          "1390:         });",
          "1392:         Request::setTrustedProxies(array(), -1);",
          "1395:     public function getForwardedData()",
          "1398:             array(null, 'for=\"10.0.0.1\";host=\"localhost\";proto=http'),",
          "1399:             array('for=10.0.0.2', 'for=\"10.0.0.2\";host=\"localhost\";proto=http, for=\"10.0.0.1\"'),",
          "1400:             array('for=10.0.0.2, for=10.0.0.3', 'for=\"10.0.0.2\";host=\"localhost\";proto=http, for=\"10.0.0.3\", for=\"10.0.0.1\"'),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\HttpKernel\\Tests\\HttpCache;",
          "14: use PHPUnit\\Framework\\TestCase;",
          "15: use Symfony\\Component\\HttpFoundation\\Request;",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;",
          "18: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "20: class SubRequestHandlerTest extends TestCase",
          "21: {",
          "22:     private static $globalState;",
          "24:     protected function setUp()",
          "25:     {",
          "26:         self::$globalState = $this->getGlobalState();",
          "27:     }",
          "29:     protected function tearDown()",
          "30:     {",
          "31:         Request::setTrustedProxies(self::$globalState[0], self::$globalState[1]);",
          "32:     }",
          "34:     public function testTrustedHeadersAreKept()",
          "35:     {",
          "36:         Request::setTrustedProxies(array('10.0.0.1'), -1);",
          "37:         $globalState = $this->getGlobalState();",
          "39:         $request = Request::create('/');",
          "40:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "41:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
          "42:         $request->headers->set('X-Forwarded-Host', 'Good');",
          "43:         $request->headers->set('X-Forwarded-Port', '1234');",
          "44:         $request->headers->set('X-Forwarded-Proto', 'https');",
          "46:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "47:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "48:             $this->assertSame('10.0.0.2', $request->getClientIp());",
          "49:             $this->assertSame('Good', $request->headers->get('X-Forwarded-Host'));",
          "50:             $this->assertSame('1234', $request->headers->get('X-Forwarded-Port'));",
          "51:             $this->assertSame('https', $request->headers->get('X-Forwarded-Proto'));",
          "52:         });",
          "54:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "56:         $this->assertSame($globalState, $this->getGlobalState());",
          "57:     }",
          "59:     public function testUntrustedHeadersAreRemoved()",
          "60:     {",
          "61:         $request = Request::create('/');",
          "62:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "63:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
          "64:         $request->headers->set('X-Forwarded-Host', 'Evil');",
          "65:         $request->headers->set('X-Forwarded-Port', '1234');",
          "66:         $request->headers->set('X-Forwarded-Proto', 'http');",
          "67:         $request->headers->set('Forwarded', 'Evil2');",
          "69:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "70:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "71:             $this->assertSame('10.0.0.1', $request->getClientIp());",
          "72:             $this->assertFalse($request->headers->has('X-Forwarded-Host'));",
          "73:             $this->assertFalse($request->headers->has('X-Forwarded-Port'));",
          "74:             $this->assertFalse($request->headers->has('X-Forwarded-Proto'));",
          "75:             $this->assertSame('for=\"10.0.0.1\";host=\"localhost\";proto=http', $request->headers->get('Forwarded'));",
          "76:         });",
          "78:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "80:         $this->assertSame(self::$globalState, $this->getGlobalState());",
          "81:     }",
          "83:     public function testTrustedForwardedHeader()",
          "84:     {",
          "85:         Request::setTrustedProxies(array('10.0.0.1'), -1);",
          "86:         $globalState = $this->getGlobalState();",
          "88:         $request = Request::create('/');",
          "89:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "90:         $request->headers->set('Forwarded', 'for=\"10.0.0.2\";host=\"foo.bar:1234\";proto=https');",
          "92:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "93:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "94:             $this->assertSame('10.0.0.2', $request->getClientIp());",
          "95:             $this->assertSame('foo.bar:1234', $request->getHttpHost());",
          "96:             $this->assertSame('https', $request->getScheme());",
          "97:             $this->assertSame(1234, $request->getPort());",
          "98:         });",
          "100:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "102:         $this->assertSame($globalState, $this->getGlobalState());",
          "103:     }",
          "105:     public function testTrustedXForwardedForHeader()",
          "106:     {",
          "107:         Request::setTrustedProxies(array('10.0.0.1'), -1);",
          "108:         $globalState = $this->getGlobalState();",
          "110:         $request = Request::create('/');",
          "111:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "112:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
          "113:         $request->headers->set('X-Forwarded-Host', 'foo.bar');",
          "114:         $request->headers->set('X-Forwarded-Proto', 'https');",
          "116:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "117:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "118:             $this->assertSame('10.0.0.2', $request->getClientIp());",
          "119:             $this->assertSame('foo.bar', $request->getHttpHost());",
          "120:             $this->assertSame('https', $request->getScheme());",
          "121:         });",
          "123:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "125:         $this->assertSame($globalState, $this->getGlobalState());",
          "126:     }",
          "128:     private function getGlobalState()",
          "129:     {",
          "130:         return array(",
          "131:             Request::getTrustedProxies(),",
          "132:             Request::getTrustedHeaderSet(),",
          "133:         );",
          "134:     }",
          "135: }",
          "137: class TestSubRequestHandlerKernel implements HttpKernelInterface",
          "138: {",
          "139:     private $assertCallback;",
          "141:     public function __construct(\\Closure $assertCallback)",
          "142:     {",
          "143:         $this->assertCallback = $assertCallback;",
          "144:     }",
          "146:     public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true)",
          "147:     {",
          "148:         $assertCallback = $this->assertCallback;",
          "149:         $assertCallback($request, $type, $catch);",
          "151:         return new Response();",
          "152:     }",
          "153: }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         parent::__construct(new EventDispatcher(), $this, null, $this);",
          "40:     }",
          "43:     {",
          "45:     }",
          "47:     public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = false)",
          "48:     {",
          "49:         $this->catch = $catch;",
          "52:         return parent::handle($request, $type, $catch);",
          "53:     }",
          "",
          "[Removed Lines]",
          "42:     public function getBackendRequest()",
          "44:         return $this->backendRequest;",
          "50:         $this->backendRequest = $request;",
          "",
          "[Added Lines]",
          "42:     public function assert(\\Closure $callback)",
          "44:         $trustedConfig = array(Request::getTrustedProxies(), Request::getTrustedHeaderSet());",
          "46:         list($trustedProxies, $trustedHeaderSet, $backendRequest) = $this->backendRequest;",
          "47:         Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "49:         try {",
          "50:             $callback($backendRequest);",
          "51:         } finally {",
          "52:             list($trustedProxies, $trustedHeaderSet) = $trustedConfig;",
          "53:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "54:         }",
          "60:         $this->backendRequest = array(Request::getTrustedProxies(), Request::getTrustedHeaderSet(), $request);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6089290543bcc8dac5abe6db7e33e08166765020",
      "candidate_info": {
        "commit_hash": "6089290543bcc8dac5abe6db7e33e08166765020",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/6089290543bcc8dac5abe6db7e33e08166765020",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ],
        "message": "[HttpFoundation] fix false-positive ConflictingHeadersException",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1944:         if (self::$trustedHeaders[self::HEADER_FORWARDED] && $this->headers->has(self::$trustedHeaders[self::HEADER_FORWARDED])) {",
          "1945:             $forwardedValues = $this->headers->get(self::$trustedHeaders[self::HEADER_FORWARDED]);",
          "1947:             if (self::HEADER_CLIENT_PORT === $type) {",
          "1948:                 foreach ($forwardedValues as $k => $v) {",
          "1950:                 }",
          "1951:             }",
          "1952:         }",
          "",
          "[Removed Lines]",
          "1946:             $forwardedValues = preg_match_all(sprintf('{(?:%s)=(?:\"?\\[?)([a-zA-Z0-9\\.:_\\-/]*+)}', self::$forwardedParams[$type]), $forwardedValues, $matches) ? $matches[1] : array();",
          "1949:                     $forwardedValues[$k] = substr_replace($v, '0.0.0.0', 0, strrpos($v, ':'));",
          "",
          "[Added Lines]",
          "1946:             $forwardedValues = preg_match_all(sprintf('{(?:%s)=\"?([a-zA-Z0-9\\.:_\\-/\\[\\]]*+)}', self::$forwardedParams[$type]), $forwardedValues, $matches) ? $matches[1] : array();",
          "1949:                     if (']' === substr($v, -1) || false === $v = strrchr($v, ':')) {",
          "1950:                         $v = $this->isSecure() ? ':443' : ':80';",
          "1951:                     }",
          "1952:                     $forwardedValues[$k] = '0.0.0.0'.$v;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1981:         $firstTrustedIp = null;",
          "1983:         foreach ($clientIps as $key => $clientIp) {",
          "1987:             }",
          "1989:             if (!filter_var($clientIp, FILTER_VALIDATE_IP)) {",
          "",
          "[Removed Lines]",
          "1985:             if (preg_match('{((?:\\d+\\.){3}\\d+)\\:\\d+}', $clientIp, $match)) {",
          "1986:                 $clientIps[$key] = $clientIp = $match[1];",
          "",
          "[Added Lines]",
          "1987:             if (strpos($clientIp, '.')) {",
          "1990:                 $i = strpos($clientIp, ':');",
          "1991:                 if ($i) {",
          "1992:                     $clientIps[$key] = $clientIp = substr($clientIp, 0, $i);",
          "1993:                 }",
          "1994:             } elseif ('[' == $clientIp[0]) {",
          "1996:                 $i = strpos($clientIp, ']', 1);",
          "1997:                 $clientIps[$key] = $clientIp = substr($clientIp, 1, $i - 1);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
          "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:             'HTTP_X_FORWARDED_FOR' => $httpXForwardedFor,",
          "968:         );",
          "972:         $request->initialize(array(), array(), array(), array(), array(), $server);",
          "",
          "[Removed Lines]",
          "970:         Request::setTrustedProxies(array('88.88.88.88'));",
          "",
          "[Added Lines]",
          "970:         Request::setTrustedProxies(array('88.88.88.88'), -1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2071:         $this->assertEquals($expectedBaseUrl, $request->getBaseUrl());",
          "2072:         $this->assertEquals($expectedBasePath, $request->getBasePath());",
          "2073:     }",
          "2074: }",
          "2076: class RequestContentProxy extends Request",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2075:     public function testTrustedHost()",
          "2076:     {",
          "2077:         Request::setTrustedProxies(array('1.1.1.1'), -1);",
          "2079:         $request = Request::create('/');",
          "2080:         $request->server->set('REMOTE_ADDR', '1.1.1.1');",
          "2081:         $request->headers->set('Forwarded', 'host=localhost:8080');",
          "2082:         $request->headers->set('X-Forwarded-Host', 'localhost:8080');",
          "2084:         $this->assertSame('localhost:8080', $request->getHttpHost());",
          "2085:         $this->assertSame(8080, $request->getPort());",
          "2087:         $request = Request::create('/');",
          "2088:         $request->server->set('REMOTE_ADDR', '1.1.1.1');",
          "2089:         $request->headers->set('Forwarded', 'host=\"[::1]:443\"');",
          "2090:         $request->headers->set('X-Forwarded-Host', '[::1]:443');",
          "2091:         $request->headers->set('X-Forwarded-Port', 443);",
          "2093:         $this->assertSame('[::1]:443', $request->getHttpHost());",
          "2094:         $this->assertSame(443, $request->getPort());",
          "2095:     }",
          "2097:     public function testTrustedPort()",
          "2098:     {",
          "2099:         Request::setTrustedProxies(array('1.1.1.1'), -1);",
          "2101:         $request = Request::create('/');",
          "2102:         $request->server->set('REMOTE_ADDR', '1.1.1.1');",
          "2103:         $request->headers->set('Forwarded', 'host=localhost:8080');",
          "2104:         $request->headers->set('X-Forwarded-Port', 8080);",
          "2106:         $this->assertSame(8080, $request->getPort());",
          "2108:         $request = Request::create('/');",
          "2109:         $request->server->set('REMOTE_ADDR', '1.1.1.1');",
          "2110:         $request->headers->set('Forwarded', 'host=localhost');",
          "2111:         $request->headers->set('X-Forwarded-Port', 80);",
          "2113:         $this->assertSame(80, $request->getPort());",
          "2115:         $request = Request::create('/');",
          "2116:         $request->server->set('REMOTE_ADDR', '1.1.1.1');",
          "2117:         $request->headers->set('Forwarded', 'host=\"[::1]\"');",
          "2118:         $request->headers->set('X-Forwarded-Proto', 'https');",
          "2119:         $request->headers->set('X-Forwarded-Port', 443);",
          "2121:         $this->assertSame(443, $request->getPort());",
          "2122:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcf5897bb1a99d4acae8bf7b73e81bfdeaac0922",
      "candidate_info": {
        "commit_hash": "bcf5897bb1a99d4acae8bf7b73e81bfdeaac0922",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/bcf5897bb1a99d4acae8bf7b73e81bfdeaac0922",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
          "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
        ],
        "message": "Merge branch '2.8' into 3.4\n\n* 2.8:\n  [HttpKernel] fix trusted headers management in HttpCache and InlineFragmentRenderer",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
          "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
          "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
            "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
            "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
            "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
            "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
            "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2087:         if (self::$trustedHeaders[self::HEADER_FORWARDED] && $this->headers->has(self::$trustedHeaders[self::HEADER_FORWARDED])) {",
          "2088:             $forwardedValues = $this->headers->get(self::$trustedHeaders[self::HEADER_FORWARDED]);",
          "2089:             $forwardedValues = preg_match_all(sprintf('{(?:%s)=(?:\"?\\[?)([a-zA-Z0-9\\.:_\\-/]*+)}', self::$forwardedParams[$type]), $forwardedValues, $matches) ? $matches[1] : array();",
          "2090:         }",
          "2092:         if (null !== $ip) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2090:             if (self::HEADER_CLIENT_PORT === $type) {",
          "2091:                 foreach ($forwardedValues as $k => $v) {",
          "2092:                     $forwardedValues[$k] = substr_replace($v, '0.0.0.0', 0, strrpos($v, ':'));",
          "2093:                 }",
          "2094:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php": [
          "File: src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php -> src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\Controller\\ControllerReference;",
          "18: use Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;",
          "19: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "20: use Symfony\\Component\\HttpKernel\\KernelEvents;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         $level = ob_get_level();",
          "78:         try {",
          "80:         } catch (\\Exception $e) {",
          "",
          "[Removed Lines]",
          "79:             return $this->kernel->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);",
          "",
          "[Added Lines]",
          "80:             return SubRequestHandler::handle($this->kernel, $subRequest, HttpKernelInterface::SUB_REQUEST, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:         $cookies = $request->cookies->all();",
          "110:         $server = $request->server->all();",
          "131:         unset($server['HTTP_IF_MODIFIED_SINCE']);",
          "132:         unset($server['HTTP_IF_NONE_MATCH']);",
          "",
          "[Removed Lines]",
          "115:         try {",
          "116:             if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {",
          "117:                 $currentXForwardedFor = $request->headers->get('X_FORWARDED_FOR', '');",
          "119:                 $server['HTTP_X_FORWARDED_FOR'] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();",
          "120:             } elseif (method_exists(Request::class, 'getTrustedHeaderName') && $trustedHeaderName = Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP, false)) {",
          "121:                 $currentXForwardedFor = $request->headers->get($trustedHeaderName, '');",
          "123:                 $server['HTTP_'.$trustedHeaderName] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();",
          "124:             }",
          "125:         } catch (\\InvalidArgumentException $e) {",
          "127:         }",
          "129:         $server['REMOTE_ADDR'] = $this->resolveTrustedProxy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:         return $subRequest;",
          "144:     }",
          "",
          "[Removed Lines]",
          "146:     private function resolveTrustedProxy()",
          "147:     {",
          "148:         if (!$trustedProxies = Request::getTrustedProxies()) {",
          "149:             return '127.0.0.1';",
          "150:         }",
          "152:         $firstTrustedProxy = reset($trustedProxies);",
          "154:         return false !== ($i = strpos($firstTrustedProxy, '/')) ? substr($firstTrustedProxy, 0, $i) : $firstTrustedProxy;",
          "155:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php||src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php": [
          "File: src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php -> src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:             $this->surrogate->addSurrogateCapability($request);",
          "445:         }",
          "470:         if (null !== $entry && \\in_array($response->getStatusCode(), array(500, 502, 503, 504))) {",
          "",
          "[Removed Lines]",
          "448:         $forwardedFor = $request->headers->get('X-Forwarded-For');",
          "449:         if ($forwardedFor) {",
          "450:             $request->headers->set('X-Forwarded-For', $forwardedFor.', '.$request->server->get('REMOTE_ADDR'));",
          "451:         } else {",
          "452:             $request->headers->set('X-Forwarded-For', $request->server->get('REMOTE_ADDR'));",
          "453:         }",
          "457:         $request->server->set('REMOTE_ADDR', '127.0.0.1');",
          "460:         if (!\\in_array('127.0.0.1', $trustedProxies = Request::getTrustedProxies())) {",
          "461:             $trustedProxies[] = '127.0.0.1';",
          "462:             Request::setTrustedProxies($trustedProxies, Request::HEADER_X_FORWARDED_ALL);",
          "463:         }",
          "466:         $response = $this->kernel->handle($request, HttpKernelInterface::MASTER_REQUEST, $catch);",
          "",
          "[Added Lines]",
          "448:         $response = SubRequestHandler::handle($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $catch);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php": [
          "File: src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php -> src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\HttpKernel\\HttpCache;",
          "14: use Symfony\\Component\\HttpFoundation\\IpUtils;",
          "15: use Symfony\\Component\\HttpFoundation\\Request;",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "24: class SubRequestHandler",
          "25: {",
          "29:     public static function handle(HttpKernelInterface $kernel, Request $request, $type, $catch)",
          "30:     {",
          "32:         $trustedProxies = Request::getTrustedProxies();",
          "33:         $trustedHeaderSet = Request::getTrustedHeaderSet();",
          "34:         if (\\method_exists(Request::class, 'getTrustedHeaderName')) {",
          "35:             Request::setTrustedProxies($trustedProxies, -1);",
          "36:             $trustedHeaders = array(",
          "37:                 Request::HEADER_FORWARDED => Request::getTrustedHeaderName(Request::HEADER_FORWARDED, false),",
          "38:                 Request::HEADER_X_FORWARDED_FOR => Request::getTrustedHeaderName(Request::HEADER_X_FORWARDED_FOR, false),",
          "39:                 Request::HEADER_X_FORWARDED_HOST => Request::getTrustedHeaderName(Request::HEADER_X_FORWARDED_HOST, false),",
          "40:                 Request::HEADER_X_FORWARDED_PROTO => Request::getTrustedHeaderName(Request::HEADER_X_FORWARDED_PROTO, false),",
          "41:                 Request::HEADER_X_FORWARDED_PORT => Request::getTrustedHeaderName(Request::HEADER_X_FORWARDED_PORT, false),",
          "42:             );",
          "43:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "44:         } else {",
          "45:             $trustedHeaders = array(",
          "46:                 Request::HEADER_FORWARDED => 'FORWARDED',",
          "47:                 Request::HEADER_X_FORWARDED_FOR => 'X_FORWARDED_FOR',",
          "48:                 Request::HEADER_X_FORWARDED_HOST => 'X_FORWARDED_HOST',",
          "49:                 Request::HEADER_X_FORWARDED_PROTO => 'X_FORWARDED_PROTO',",
          "50:                 Request::HEADER_X_FORWARDED_PORT => 'X_FORWARDED_PORT',",
          "51:             );",
          "52:         }",
          "55:         $remoteAddr = $request->server->get('REMOTE_ADDR');",
          "56:         if (!IpUtils::checkIp($remoteAddr, $trustedProxies)) {",
          "57:             foreach ($trustedHeaders as $key => $name) {",
          "58:                 if ($trustedHeaderSet & $key) {",
          "59:                     $request->headers->remove($name);",
          "60:                 }",
          "61:             }",
          "62:         }",
          "65:         $trustedIps = array();",
          "66:         $trustedValues = array();",
          "67:         foreach (array_reverse($request->getClientIps()) as $ip) {",
          "68:             $trustedIps[] = $ip;",
          "69:             $trustedValues[] = sprintf('for=\"%s\"', $ip);",
          "70:         }",
          "71:         if ($ip !== $remoteAddr) {",
          "72:             $trustedIps[] = $remoteAddr;",
          "73:             $trustedValues[] = sprintf('for=\"%s\"', $remoteAddr);",
          "74:         }",
          "77:         if (Request::HEADER_FORWARDED & $trustedHeaderSet) {",
          "78:             $trustedValues[0] .= sprintf(';host=\"%s\";proto=%s', $request->getHttpHost(), $request->getScheme());",
          "79:             $request->headers->set($trustedHeaders[Request::HEADER_FORWARDED], implode(', ', $trustedValues));",
          "80:         }",
          "81:         if (Request::HEADER_X_FORWARDED_FOR & $trustedHeaderSet) {",
          "82:             $request->headers->set($trustedHeaders[Request::HEADER_X_FORWARDED_FOR], implode(', ', $trustedIps));",
          "83:         } elseif (!(Request::HEADER_FORWARDED & $trustedHeaderSet)) {",
          "84:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet | Request::HEADER_X_FORWARDED_FOR);",
          "85:             $request->headers->set($trustedHeaders[Request::HEADER_X_FORWARDED_FOR], implode(', ', $trustedIps));",
          "86:         }",
          "90:         $request->server->set('REMOTE_ADDR', '127.0.0.1');",
          "93:         if (!IpUtils::checkIp('127.0.0.1', $trustedProxies)) {",
          "94:             Request::setTrustedProxies(array_merge($trustedProxies, array('127.0.0.1')), Request::getTrustedHeaderSet());",
          "95:         }",
          "97:         try {",
          "98:             return $kernel->handle($request, $type, $catch);",
          "99:         } finally {",
          "101:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "102:         }",
          "103:     }",
          "104: }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php -> src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         $subRequest = Request::create('/_fragment?_path=_format%3Dhtml%26_locale%3Den%26_controller%3Dmain_controller');",
          "47:         $subRequest->attributes->replace(array('object' => $object, '_format' => 'html', '_controller' => 'main_controller', '_locale' => 'en'));",
          "48:         $subRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "51:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($subRequest));",
          "",
          "[Removed Lines]",
          "49:         $subRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "49:         $subRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     {",
          "100:         Request::setTrustedProxies(array(), 0);",
          "103:         $this->assertSame('foo', $strategy->render('/', Request::create('/'))->getContent());",
          "105:         Request::setTrustedProxies(array(), -1);",
          "",
          "[Removed Lines]",
          "102:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest(Request::create('/')));",
          "",
          "[Added Lines]",
          "102:         $expectedSubRequest = Request::create('/');",
          "103:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "105:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:         if (Request::HEADER_X_FORWARDED_FOR & Request::getTrustedHeaderSet()) {",
          "192:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "194:         }",
          "196:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "[Removed Lines]",
          "193:             $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "197:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:     public function testESIHeaderIsKeptInSubrequestWithTrustedHeaderDisabled()",
          "204:     {",
          "207:         $this->testESIHeaderIsKeptInSubrequest();",
          "",
          "[Removed Lines]",
          "205:         Request::setTrustedProxies(array(), 0);",
          "",
          "[Added Lines]",
          "208:         Request::setTrustedProxies(array(), Request::HEADER_FORWARDED);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:     {",
          "214:         $expectedSubRequest = Request::create('/');",
          "215:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "218:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "219:         $request = Request::create('/', 'GET', array(), array(), array(), array('HTTP_IF_MODIFIED_SINCE' => 'Fri, 01 Jan 2016 00:00:00 GMT', 'HTTP_IF_NONE_MATCH' => '*'));",
          "",
          "[Removed Lines]",
          "216:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "219:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "227:         $expectedSubRequest = Request::create('/');",
          "228:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "230:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "233:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "[Removed Lines]",
          "229:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
          "231:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "232:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
          "234:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "243:     {",
          "244:         $expectedSubRequest = Request::create('/');",
          "245:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "247:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "250:         Request::setTrustedProxies(array('1.1.1.1/24'), -1);",
          "",
          "[Removed Lines]",
          "246:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
          "248:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "[Added Lines]",
          "249:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
          "251:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/HttpCacheTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1338:         $this->setNextResponse();",
          "1339:         $this->request('GET', '/', array('REMOTE_ADDR' => '10.0.0.1'));",
          "1342:     }",
          "1348:     {",
          "1349:         Request::setTrustedProxies($existing, Request::HEADER_X_FORWARDED_ALL);",
          "1351:         $this->setNextResponse();",
          "1352:         $this->request('GET', '/', array('REMOTE_ADDR' => '10.0.0.1'));",
          "1356:         Request::setTrustedProxies(array(), -1);",
          "1357:     }",
          "",
          "[Removed Lines]",
          "1341:         $this->assertEquals('127.0.0.1', $this->kernel->getBackendRequest()->server->get('REMOTE_ADDR'));",
          "1347:     public function testHttpCacheIsSetAsATrustedProxy(array $existing, array $expected)",
          "1354:         $this->assertEquals($expected, Request::getTrustedProxies());",
          "",
          "[Added Lines]",
          "1341:         $this->kernel->assert(function ($backendRequest) {",
          "1342:             $this->assertSame('127.0.0.1', $backendRequest->server->get('REMOTE_ADDR'));",
          "1343:         });",
          "1349:     public function testHttpCacheIsSetAsATrustedProxy(array $existing)",
          "1355:         $this->assertSame($existing, Request::getTrustedProxies());",
          "1357:         $existing = array_unique(array_merge($existing, array('127.0.0.1')));",
          "1358:         $this->kernel->assert(function ($backendRequest) use ($existing) {",
          "1359:             $this->assertSame($existing, Request::getTrustedProxies());",
          "1360:             $this->assertsame('10.0.0.1', $backendRequest->getClientIp());",
          "1361:         });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1359:     public function getTrustedProxyData()",
          "1360:     {",
          "1361:         return array(",
          "1365:         );",
          "1366:     }",
          "1372:     {",
          "1373:         $this->setNextResponse();",
          "1374:         $server = array('REMOTE_ADDR' => '10.0.0.1');",
          "1377:         }",
          "1378:         $this->request('GET', '/', $server);",
          "1381:     }",
          "1384:     {",
          "1385:         return array(",
          "1389:         );",
          "1390:     }",
          "1401:     public function testEsiCacheRemoveValidationHeadersIfEmbeddedResponses()",
          "1402:     {",
          "1403:         $time = \\DateTime::createFromFormat('U', time());",
          "",
          "[Removed Lines]",
          "1362:             array(array(), array('127.0.0.1')),",
          "1363:             array(array('10.0.0.2'), array('10.0.0.2', '127.0.0.1')),",
          "1364:             array(array('10.0.0.2', '127.0.0.1'), array('10.0.0.2', '127.0.0.1')),",
          "1371:     public function testXForwarderForHeaderForForwardedRequests($xForwardedFor, $expected)",
          "1375:         if (false !== $xForwardedFor) {",
          "1376:             $server['HTTP_X_FORWARDED_FOR'] = $xForwardedFor;",
          "1380:         $this->assertEquals($expected, $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));",
          "1383:     public function getXForwardedForData()",
          "1386:             array(false, '10.0.0.1'),",
          "1387:             array('10.0.0.2', '10.0.0.2, 10.0.0.1'),",
          "1388:             array('10.0.0.2, 10.0.0.3', '10.0.0.2, 10.0.0.3, 10.0.0.1'),",
          "1392:     public function testXForwarderForHeaderForPassRequests()",
          "1393:     {",
          "1394:         $this->setNextResponse();",
          "1395:         $server = array('REMOTE_ADDR' => '10.0.0.1');",
          "1396:         $this->request('POST', '/', $server);",
          "1398:         $this->assertEquals('10.0.0.1', $this->kernel->getBackendRequest()->headers->get('X-Forwarded-For'));",
          "1399:     }",
          "",
          "[Added Lines]",
          "1369:             array(array()),",
          "1370:             array(array('10.0.0.2')),",
          "1371:             array(array('10.0.0.2', '127.0.0.1')),",
          "1378:     public function testForwarderHeaderForForwardedRequests($forwarded, $expected)",
          "1382:         if (null !== $forwarded) {",
          "1383:             Request::setTrustedProxies($server, -1);",
          "1384:             $server['HTTP_FORWARDED'] = $forwarded;",
          "1388:         $this->kernel->assert(function ($backendRequest) use ($expected) {",
          "1389:             $this->assertSame($expected, $backendRequest->headers->get('Forwarded'));",
          "1390:         });",
          "1392:         Request::setTrustedProxies(array(), -1);",
          "1395:     public function getForwardedData()",
          "1398:             array(null, 'for=\"10.0.0.1\";host=\"localhost\";proto=http'),",
          "1399:             array('for=10.0.0.2', 'for=\"10.0.0.2\";host=\"localhost\";proto=http, for=\"10.0.0.1\"'),",
          "1400:             array('for=10.0.0.2, for=10.0.0.3', 'for=\"10.0.0.2\";host=\"localhost\";proto=http, for=\"10.0.0.3\", for=\"10.0.0.1\"'),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/SubRequestHandlerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\HttpKernel\\Tests\\HttpCache;",
          "14: use PHPUnit\\Framework\\TestCase;",
          "15: use Symfony\\Component\\HttpFoundation\\Request;",
          "16: use Symfony\\Component\\HttpFoundation\\Response;",
          "17: use Symfony\\Component\\HttpKernel\\HttpCache\\SubRequestHandler;",
          "18: use Symfony\\Component\\HttpKernel\\HttpKernelInterface;",
          "20: class SubRequestHandlerTest extends TestCase",
          "21: {",
          "22:     private static $globalState;",
          "24:     protected function setUp()",
          "25:     {",
          "26:         self::$globalState = $this->getGlobalState();",
          "27:     }",
          "29:     protected function tearDown()",
          "30:     {",
          "31:         Request::setTrustedProxies(self::$globalState[0], self::$globalState[1]);",
          "32:     }",
          "34:     public function testTrustedHeadersAreKept()",
          "35:     {",
          "36:         Request::setTrustedProxies(array('10.0.0.1'), -1);",
          "37:         $globalState = $this->getGlobalState();",
          "39:         $request = Request::create('/');",
          "40:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "41:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
          "42:         $request->headers->set('X-Forwarded-Host', 'Good');",
          "43:         $request->headers->set('X-Forwarded-Port', '1234');",
          "44:         $request->headers->set('X-Forwarded-Proto', 'https');",
          "46:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "47:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "48:             $this->assertSame('10.0.0.2', $request->getClientIp());",
          "49:             $this->assertSame('Good', $request->headers->get('X-Forwarded-Host'));",
          "50:             $this->assertSame('1234', $request->headers->get('X-Forwarded-Port'));",
          "51:             $this->assertSame('https', $request->headers->get('X-Forwarded-Proto'));",
          "52:         });",
          "54:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "56:         $this->assertSame($globalState, $this->getGlobalState());",
          "57:     }",
          "59:     public function testUntrustedHeadersAreRemoved()",
          "60:     {",
          "61:         $request = Request::create('/');",
          "62:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "63:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
          "64:         $request->headers->set('X-Forwarded-Host', 'Evil');",
          "65:         $request->headers->set('X-Forwarded-Port', '1234');",
          "66:         $request->headers->set('X-Forwarded-Proto', 'http');",
          "67:         $request->headers->set('Forwarded', 'Evil2');",
          "69:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "70:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "71:             $this->assertSame('10.0.0.1', $request->getClientIp());",
          "72:             $this->assertFalse($request->headers->has('X-Forwarded-Host'));",
          "73:             $this->assertFalse($request->headers->has('X-Forwarded-Port'));",
          "74:             $this->assertFalse($request->headers->has('X-Forwarded-Proto'));",
          "75:             $this->assertSame('for=\"10.0.0.1\";host=\"localhost\";proto=http', $request->headers->get('Forwarded'));",
          "76:         });",
          "78:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "80:         $this->assertSame(self::$globalState, $this->getGlobalState());",
          "81:     }",
          "83:     public function testTrustedForwardedHeader()",
          "84:     {",
          "85:         Request::setTrustedProxies(array('10.0.0.1'), -1);",
          "86:         $globalState = $this->getGlobalState();",
          "88:         $request = Request::create('/');",
          "89:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "90:         $request->headers->set('Forwarded', 'for=\"10.0.0.2\";host=\"foo.bar:1234\";proto=https');",
          "92:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "93:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "94:             $this->assertSame('10.0.0.2', $request->getClientIp());",
          "95:             $this->assertSame('foo.bar:1234', $request->getHttpHost());",
          "96:             $this->assertSame('https', $request->getScheme());",
          "97:             $this->assertSame(1234, $request->getPort());",
          "98:         });",
          "100:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "102:         $this->assertSame($globalState, $this->getGlobalState());",
          "103:     }",
          "105:     public function testTrustedXForwardedForHeader()",
          "106:     {",
          "107:         Request::setTrustedProxies(array('10.0.0.1'), -1);",
          "108:         $globalState = $this->getGlobalState();",
          "110:         $request = Request::create('/');",
          "111:         $request->server->set('REMOTE_ADDR', '10.0.0.1');",
          "112:         $request->headers->set('X-Forwarded-For', '10.0.0.2');",
          "113:         $request->headers->set('X-Forwarded-Host', 'foo.bar');",
          "114:         $request->headers->set('X-Forwarded-Proto', 'https');",
          "116:         $kernel = new TestSubRequestHandlerKernel(function ($request, $type, $catch) {",
          "117:             $this->assertSame('127.0.0.1', $request->server->get('REMOTE_ADDR'));",
          "118:             $this->assertSame('10.0.0.2', $request->getClientIp());",
          "119:             $this->assertSame('foo.bar', $request->getHttpHost());",
          "120:             $this->assertSame('https', $request->getScheme());",
          "121:         });",
          "123:         SubRequestHandler::handle($kernel, $request, HttpKernelInterface::MASTER_REQUEST, true);",
          "125:         $this->assertSame($globalState, $this->getGlobalState());",
          "126:     }",
          "128:     private function getGlobalState()",
          "129:     {",
          "130:         return array(",
          "131:             Request::getTrustedProxies(),",
          "132:             Request::getTrustedHeaderSet(),",
          "133:         );",
          "134:     }",
          "135: }",
          "137: class TestSubRequestHandlerKernel implements HttpKernelInterface",
          "138: {",
          "139:     private $assertCallback;",
          "141:     public function __construct(\\Closure $assertCallback)",
          "142:     {",
          "143:         $this->assertCallback = $assertCallback;",
          "144:     }",
          "146:     public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true)",
          "147:     {",
          "148:         $assertCallback = $this->assertCallback;",
          "149:         $assertCallback($request, $type, $catch);",
          "151:         return new Response();",
          "152:     }",
          "153: }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php||src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php -> src/Symfony/Component/HttpKernel/Tests/HttpCache/TestHttpKernel.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         parent::__construct(new EventDispatcher(), $this, null, $this);",
          "40:     }",
          "43:     {",
          "45:     }",
          "47:     public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = false)",
          "48:     {",
          "49:         $this->catch = $catch;",
          "52:         return parent::handle($request, $type, $catch);",
          "53:     }",
          "",
          "[Removed Lines]",
          "42:     public function getBackendRequest()",
          "44:         return $this->backendRequest;",
          "50:         $this->backendRequest = $request;",
          "",
          "[Added Lines]",
          "42:     public function assert(\\Closure $callback)",
          "44:         $trustedConfig = array(Request::getTrustedProxies(), Request::getTrustedHeaderSet());",
          "46:         list($trustedProxies, $trustedHeaderSet, $backendRequest) = $this->backendRequest;",
          "47:         Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "49:         try {",
          "50:             $callback($backendRequest);",
          "51:         } finally {",
          "52:             list($trustedProxies, $trustedHeaderSet) = $trustedConfig;",
          "53:             Request::setTrustedProxies($trustedProxies, $trustedHeaderSet);",
          "54:         }",
          "60:         $this->backendRequest = array(Request::getTrustedProxies(), Request::getTrustedHeaderSet(), $request);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92953485a50d8cf99690499f8b353b57d8818b94",
      "candidate_info": {
        "commit_hash": "92953485a50d8cf99690499f8b353b57d8818b94",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/92953485a50d8cf99690499f8b353b57d8818b94",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
        ],
        "message": "[HttpKernel] fix forwarding trusted headers as server parameters",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1991:                 if ($i) {",
          "1992:                     $clientIps[$key] = $clientIp = substr($clientIp, 0, $i);",
          "1993:                 }",
          "1996:                 $i = strpos($clientIp, ']', 1);",
          "1997:                 $clientIps[$key] = $clientIp = substr($clientIp, 1, $i - 1);",
          "",
          "[Removed Lines]",
          "1994:             } elseif ('[' == $clientIp[0]) {",
          "",
          "[Added Lines]",
          "1994:             } elseif (0 === strpos($clientIp, '[')) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
          "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:             array(array('127.0.0.1'),                '127.0.0.1',                '88.88.88.88',               null),",
          "888:             array(array('88.88.88.88'),              '127.0.0.1',                '88.88.88.88',               array('127.0.0.1', '88.88.88.88')),",
          "",
          "[Removed Lines]",
          "886:             array(array('88.88.88.88'),              '127.0.0.1',                '88.88.88.88',               array('127.0.0.1')),",
          "",
          "[Added Lines]",
          "886:             array(array('88.88.88.88'),              '127.0.0.1',                '88.88.88.88,',              array('127.0.0.1')),",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php||src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php": [
          "File: src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php -> src/Symfony/Component/HttpKernel/HttpCache/SubRequestHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         if (!IpUtils::checkIp($remoteAddr, $trustedProxies)) {",
          "44:             foreach (array_filter($trustedHeaders) as $name) {",
          "45:                 $request->headers->remove($name);",
          "46:             }",
          "47:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:                 $request->server->remove('HTTP_'.strtoupper(str_replace('-', '_', $name)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         if ($name = $trustedHeaders[Request::HEADER_FORWARDED]) {",
          "63:             $trustedValues[0] .= sprintf(';host=\"%s\";proto=%s', $request->getHttpHost(), $request->getScheme());",
          "65:         }",
          "66:         if ($name = $trustedHeaders[Request::HEADER_CLIENT_IP]) {",
          "68:         }",
          "69:         if (!$name && !$trustedHeaders[Request::HEADER_FORWARDED]) {",
          "71:             Request::setTrustedHeaderName(Request::HEADER_CLIENT_IP, 'X_FORWARDED_FOR');",
          "72:         }",
          "",
          "[Removed Lines]",
          "64:             $request->headers->set($name, implode(', ', $trustedValues));",
          "67:             $request->headers->set($name, implode(', ', $trustedIps));",
          "70:             $request->headers->set('X-Forwarded-For', implode(', ', $trustedIps));",
          "",
          "[Added Lines]",
          "65:             $request->headers->set($name, $v = implode(', ', $trustedValues));",
          "66:             $request->server->set('HTTP_'.strtoupper(str_replace('-', '_', $name)), $v);",
          "69:             $request->headers->set($name, $v = implode(', ', $trustedIps));",
          "70:             $request->server->set('HTTP_'.strtoupper(str_replace('-', '_', $name)), $v);",
          "73:             $request->headers->set('X-Forwarded-For', $v = implode(', ', $trustedIps));",
          "74:             $request->server->set('HTTP_X_FORWARDED_FOR', $v);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php -> src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         $subRequest->attributes->replace(array('object' => $object, '_format' => 'html', '_controller' => 'main_controller', '_locale' => 'en'));",
          "61:         $subRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "62:         $subRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "64:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($subRequest));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         $subRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "64:         $subRequest->server->set('HTTP_FORWARDED', 'for=\"127.0.0.1\";host=\"localhost\";proto=http');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:         $expectedSubRequest = Request::create('/');",
          "93:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "95:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "96:         $this->assertSame('foo', $strategy->render('/', Request::create('/'))->getContent());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "179:         if (Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP)) {",
          "180:             $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "181:         }",
          "182:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "184:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:             $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "187:         $expectedSubRequest->server->set('HTTP_FORWARDED', 'for=\"127.0.0.1\";host=\"localhost\";proto=http');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:         $expectedSubRequest = Request::create('/');",
          "204:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "205:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "207:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "208:         $request = Request::create('/', 'GET', array(), array(), array(), array('HTTP_IF_MODIFIED_SINCE' => 'Fri, 01 Jan 2016 00:00:00 GMT', 'HTTP_IF_NONE_MATCH' => '*'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "212:         $expectedSubRequest->server->set('HTTP_FORWARDED', 'for=\"127.0.0.1\";host=\"localhost\";proto=http');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
          "217:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "218:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "220:         Request::setTrustedProxies(array('1.1.1.1'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "227:         $expectedSubRequest->server->set('HTTP_FORWARDED', 'for=\"127.0.0.1\";host=\"localhost\";proto=http');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "235:         $expectedSubRequest->server->set('REMOTE_ADDR', '127.0.0.1');",
          "236:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "237:         $expectedSubRequest->headers->set('forwarded', array('for=\"127.0.0.1\";host=\"localhost\";proto=http'));",
          "239:         Request::setTrustedProxies(array('1.1.1.1/24'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "248:         $expectedSubRequest->server->set('HTTP_FORWARDED', 'for=\"127.0.0.1\";host=\"localhost\";proto=http');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f657dd2444a5604148f3ed8dd3ee1181352c7d9b",
      "candidate_info": {
        "commit_hash": "f657dd2444a5604148f3ed8dd3ee1181352c7d9b",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/f657dd2444a5604148f3ed8dd3ee1181352c7d9b",
        "files": [
          "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
        ],
        "message": "[HttpKernel] Fixed invalid REMOTE_ADDR in inline subrequest when configuring trusted proxy with subnet",
        "before_after_code_files": [
          "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
            "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php||src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php": [
          "File: src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php -> src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         }",
          "128:         unset($server['HTTP_IF_MODIFIED_SINCE']);",
          "129:         unset($server['HTTP_IF_NONE_MATCH']);",
          "",
          "[Removed Lines]",
          "125:         $trustedProxies = Request::getTrustedProxies();",
          "126:         $server['REMOTE_ADDR'] = $trustedProxies ? reset($trustedProxies) : '127.0.0.1';",
          "",
          "[Added Lines]",
          "125:         $server['REMOTE_ADDR'] = $this->resolveTrustedProxy();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:         return $subRequest;",
          "141:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     private function resolveTrustedProxy()",
          "143:     {",
          "144:         if (!$trustedProxies = Request::getTrustedProxies()) {",
          "145:             return '127.0.0.1';",
          "146:         }",
          "148:         $firstTrustedProxy = reset($trustedProxies);",
          "150:         return false !== ($i = strpos($firstTrustedProxy, '/')) ? substr($firstTrustedProxy, 0, $i) : $firstTrustedProxy;",
          "151:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php||src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php": [
          "File: src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php -> src/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         Request::setTrustedProxies(array());",
          "227:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:     public function testIpAddressOfRangedTrustedProxyIsSetAsRemote()",
          "230:     {",
          "231:         $expectedSubRequest = Request::create('/');",
          "232:         $expectedSubRequest->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "233:         $expectedSubRequest->server->set('REMOTE_ADDR', '1.1.1.1');",
          "234:         $expectedSubRequest->headers->set('x-forwarded-for', array('127.0.0.1'));",
          "235:         $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');",
          "237:         Request::setTrustedProxies(array('1.1.1.1/24'));",
          "239:         $strategy = new InlineFragmentRenderer($this->getKernelExpectingRequest($expectedSubRequest));",
          "241:         $request = Request::create('/');",
          "242:         $request->headers->set('Surrogate-Capability', 'abc=\"ESI/1.0\"');",
          "243:         $strategy->render('/', $request);",
          "245:         Request::setTrustedProxies(array());",
          "246:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}