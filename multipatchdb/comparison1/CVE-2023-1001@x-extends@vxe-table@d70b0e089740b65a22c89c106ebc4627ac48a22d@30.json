{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea14212deeb3a6334939ee414ddbc588b08cdbea",
      "candidate_info": {
        "commit_hash": "ea14212deeb3a6334939ee414ddbc588b08cdbea",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/ea14212deeb3a6334939ee414ddbc588b08cdbea",
        "files": [
          "packages/table/src/methods.js"
        ],
        "message": "update docs",
        "before_after_code_files": [
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:   getParentRow (rowOrRowid) {",
          "1378:     if (rowOrRowid && treeConfig) {",
          "1379:       let rowid",
          "1380:       if (XEUtils.isString(rowOrRowid)) {",
          "",
          "[Removed Lines]",
          "1377:     const { treeConfig, fullDataRowIdData, treeOpts } = this",
          "",
          "[Added Lines]",
          "1377:     const { treeConfig, fullDataRowIdData } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1384:       }",
          "1385:       if (rowid) {",
          "1386:         const rest = fullDataRowIdData[rowid]",
          "1396:       }",
          "1397:     }",
          "1398:     return null",
          "",
          "[Removed Lines]",
          "1387:         if (treeOpts.transform) {",
          "1388:           const row = rest ? rest.row : null",
          "1389:           if (row) {",
          "1390:             const parentRowId = row[treeOpts.parentField]",
          "1391:             return fullDataRowIdData[parentRowId] ? fullDataRowIdData[parentRowId].row : null",
          "1392:           }",
          "1393:         } else {",
          "1394:           return rest ? rest.parent : null",
          "1395:         }",
          "",
          "[Added Lines]",
          "1387:         return rest ? rest.parent : null",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b2bb6f44b212e33bd48ce9e00302d7e07404383",
      "candidate_info": {
        "commit_hash": "3b2bb6f44b212e33bd48ce9e00302d7e07404383",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/3b2bb6f44b212e33bd48ce9e00302d7e07404383",
        "files": [
          "package.json",
          "packages/table/src/table.js"
        ],
        "message": "releases 3.8.18",
        "before_after_code_files": [
          "packages/table/src/table.js||packages/table/src/table.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:           ctxMenuOpts",
          "1259:         }",
          "1260:       }) : _e(),",
          "1288:     ])",
          "1289:   },",
          "1290:   methods",
          "",
          "[Removed Lines]",
          "1264:       hasTip ? h('vxe-tooltip', {",
          "1265:         ref: 'commTip',",
          "1266:         props: {",
          "1267:           isArrow: false,",
          "1268:           enterable: false",
          "1269:         }",
          "1270:       }) : _e(),",
          "1274:       hasTip ? h('vxe-tooltip', {",
          "1275:         ref: 'tooltip',",
          "1276:         props: Object.assign({}, this.tipConfig, this.tooltipStore.currOpts)",
          "1277:       }) : _e(),",
          "1281:       hasTip && this.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip') ? h('vxe-tooltip', {",
          "1282:         ref: 'validTip',",
          "1283:         class: [{",
          "1284:           'old-cell-valid': editRules && GlobalConfig.cellVaildMode === 'obsolete'",
          "1285:         }, 'vxe-table--valid-error'],",
          "1286:         props: validOpts.message === 'tooltip' || tableData.length === 1 ? validTipOpts : null",
          "1287:       }) : _e()",
          "",
          "[Added Lines]",
          "1261:       h('div', {}, [",
          "1265:         hasTip ? h('vxe-tooltip', {",
          "1266:           ref: 'commTip',",
          "1267:           props: {",
          "1268:             isArrow: false,",
          "1269:             enterable: false",
          "1270:           }",
          "1271:         }) : _e(),",
          "1275:         hasTip ? h('vxe-tooltip', {",
          "1276:           ref: 'tooltip',",
          "1277:           props: Object.assign({}, this.tipConfig, this.tooltipStore.currOpts)",
          "1278:         }) : _e(),",
          "1282:         hasTip && this.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip') ? h('vxe-tooltip', {",
          "1283:           ref: 'validTip',",
          "1284:           class: [{",
          "1285:             'old-cell-valid': editRules && GlobalConfig.cellVaildMode === 'obsolete'",
          "1286:           }, 'vxe-table--valid-error'],",
          "1287:           props: validOpts.message === 'tooltip' || tableData.length === 1 ? validTipOpts : null",
          "1288:         }) : _e()",
          "1289:       ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11741e49e3617d83964ce89cba38966c663a349a",
      "candidate_info": {
        "commit_hash": "11741e49e3617d83964ce89cba38966c663a349a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/11741e49e3617d83964ce89cba38966c663a349a",
        "files": [
          "packages/table/src/methods.js",
          "packages/table/src/table.js"
        ],
        "message": "\u4fee\u590d\u8bbe\u7f6e\u6700\u5927\u9ad8\u5ea6\u8ba1\u7b97\u95ee\u9898",
        "before_after_code_files": [
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   syncData () {",
          "299:     return this.$nextTick().then(() => {",
          "300:       this.tableData = []",
          "301:       return this.$nextTick().then(() => this.loadTableData(this.tableFullData))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:     warnLog('vxe.error.delFunc', ['syncData', 'getData'])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2196:         } else if (layout === 'body') {",
          "2197:           const emptyBlockElem = elemStore[`${name}-${layout}-emptyBlock`]",
          "2198:           if (isNodeElement(wrapperElem)) {",
          "2200:             let bodyMaxHeight = 0",
          "2201:             if (customMaxHeight) {",
          "2203:               wrapperElem.style.maxHeight = `${bodyMaxHeight}px`",
          "2204:             }",
          "2207:               if (bodyMaxHeight) {",
          "2208:                 bodyHeight = Math.min(bodyMaxHeight, bodyHeight)",
          "2209:               }",
          "",
          "[Removed Lines]",
          "2199:             const bodyMinHeight = fixedType ? ((customMinHeight - headerHeight - footerHeight) - (showFooter ? 0 : scrollbarHeight)) : (customMinHeight - headerHeight - footerHeight)",
          "2202:               bodyMaxHeight = Math.max(bodyMinHeight, fixedType ? (customMaxHeight - headerHeight - (showFooter ? 0 : scrollbarHeight)) : (customMaxHeight - headerHeight - footerHeight))",
          "2205:             if (customHeight > 0) {",
          "2206:               let bodyHeight = fixedType ? ((customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) - (showFooter ? 0 : scrollbarHeight)) : (customHeight - headerHeight - footerHeight)",
          "",
          "[Added Lines]",
          "2201:             const bodyMinHeight = customMinHeight - headerHeight - footerHeight",
          "2203:               bodyMaxHeight = customMaxHeight - headerHeight - footerHeight",
          "2205:               if (fixedType) {",
          "2206:                 bodyMaxHeight -= (showFooter ? 0 : scrollbarHeight)",
          "2207:               }",
          "2208:               bodyMaxHeight = Math.max(bodyMinHeight, bodyMaxHeight)",
          "2211:             if (customHeight) {",
          "2212:               let bodyHeight = customHeight - headerHeight - footerHeight",
          "2214:               if (fixedType) {",
          "2215:                 bodyHeight -= (showFooter ? 0 : scrollbarHeight)",
          "2216:               }",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "655:         if (!inited) {",
          "656:           this.handleInitDefaults()",
          "657:         }",
          "662:         if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {",
          "663:           warnLog('vxe.error.scrollErrProp', ['column.type=expand'])",
          "664:         }",
          "",
          "[Removed Lines]",
          "658:         const checkboxColumn = this.tableFullColumn.find(column => column.type === 'checkbox')",
          "659:         if (checkboxColumn && this.tableFullData.length > 300 && !this.checkboxOpts.checkField) {",
          "660:           warnLog('vxe.error.checkProp', ['checkbox-config.checkField'])",
          "661:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d711b8db3c75772936dbabe0af09df72f4021654",
      "candidate_info": {
        "commit_hash": "d711b8db3c75772936dbabe0af09df72f4021654",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/d711b8db3c75772936dbabe0af09df72f4021654",
        "files": [
          "package.json",
          "packages/table/src/body.ts",
          "packages/table/src/footer.ts",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.10.9",
        "before_after_code_files": [
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/footer.ts||packages/table/src/footer.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "692:           setScrollTop(leftElem, scrollTop)",
          "693:           setScrollTop(rightElem, scrollTop)",
          "694:         }",
          "696:           type: renderType,",
          "700:         })",
          "701:       }",
          "702:       if (xHandleEl) {",
          "",
          "[Removed Lines]",
          "695:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "697:           fixed: fixedType,",
          "698:           scrollTop,",
          "699:           scrollLeft",
          "",
          "[Added Lines]",
          "695:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "697:           fixed: fixedType",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "706:         $xeTable.lastScrollLeft = scrollLeft",
          "707:         setScrollLeft(headerElem, scrollLeft)",
          "708:         setScrollLeft(footerElem, scrollLeft)",
          "710:           type: renderType,",
          "714:         })",
          "715:       }",
          "716:     },",
          "",
          "[Removed Lines]",
          "709:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "711:           fixed: fixedType,",
          "712:           scrollTop,",
          "713:           scrollLeft",
          "",
          "[Added Lines]",
          "707:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "709:           fixed: fixedType",
          "",
          "---------------"
        ],
        "packages/table/src/footer.ts||packages/table/src/footer.ts": [
          "File: packages/table/src/footer.ts -> packages/table/src/footer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:         $xeTable.lastScrollTime = Date.now()",
          "296:         setScrollLeft(headerElem, scrollLeft)",
          "297:         setScrollLeft(bodyElem, scrollLeft)",
          "299:           type: renderType,",
          "303:         })",
          "304:       }",
          "305:     }",
          "",
          "[Removed Lines]",
          "298:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "300:           fixed: fixedType,",
          "301:           scrollTop,",
          "302:           scrollLeft",
          "",
          "[Added Lines]",
          "298:         $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "300:           fixed: fixedType",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1810:   setColumnFixed (fieldOrColumn: any, fixed: any) {",
          "1822:         }",
          "1824:       }",
          "1830:     }",
          "1832:   },",
          "1836:   clearColumnFixed (fieldOrColumn: any) {",
          "1845:     }",
          "1847:   },",
          "1851:   hideColumn (fieldOrColumn: any) {",
          "1856:     }",
          "1858:   },",
          "1862:   showColumn (fieldOrColumn: any) {",
          "1867:     }",
          "1869:   },",
          "1870:   setColumnWidth (fieldOrColumn: any, width: any) {",
          "1880:       }",
          "1883:     }",
          "1885:   },",
          "1886:   getColumnWidth (fieldOrColumn: any) {",
          "1887:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "",
          "[Removed Lines]",
          "1811:     const { isMaxFixedColumn, columnOpts } = this",
          "1812:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1813:     const targetColumn = getRootColumn(this, column)",
          "1814:     if (targetColumn && targetColumn.fixed !== fixed) {",
          "1816:       if (!targetColumn.fixed && isMaxFixedColumn) {",
          "1817:         if (VxeUI.modal) {",
          "1818:           VxeUI.modal.message({",
          "1819:             status: 'error',",
          "1820:             content: getI18n('vxe.table.maxFixedCol', [columnOpts.maxFixedSize])",
          "1821:           })",
          "1823:         return this.$nextTick()",
          "1825:       XEUtils.eachTree([targetColumn], (column) => {",
          "1826:         column.fixed = fixed",
          "1827:       })",
          "1828:       this.saveCustomStore('update:fixed')",
          "1829:       return this.refreshColumn()",
          "1831:     return this.$nextTick()",
          "1837:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1838:     const targetColumn = getRootColumn(this, column)",
          "1839:     if (targetColumn && targetColumn.fixed) {",
          "1840:       XEUtils.eachTree([targetColumn], (column) => {",
          "1841:         column.fixed = null",
          "1842:       })",
          "1843:       this.saveCustomStore('update:fixed')",
          "1844:       return this.refreshColumn()",
          "1846:     return this.$nextTick()",
          "1852:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1853:     if (column && column.visible) {",
          "1854:       column.visible = false",
          "1855:       return this.handleCustom()",
          "1857:     return this.$nextTick()",
          "1863:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1864:     if (column && !column.visible) {",
          "1865:       column.visible = true",
          "1866:       return this.handleCustom()",
          "1868:     return this.$nextTick()",
          "1871:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1872:     if (column) {",
          "1873:       const colWidth = XEUtils.toInteger(width)",
          "1874:       let rdWidth = colWidth",
          "1875:       if (isScale(width)) {",
          "1876:         const { tableBody } = this.$refs",
          "1877:         const tableBodyElem = tableBody ? tableBody.$el : null",
          "1878:         const bodyWidth = tableBodyElem ? tableBodyElem.clientWidth - 1 : 0",
          "1879:         rdWidth = Math.floor(colWidth * bodyWidth)",
          "1881:       column.resizeWidth = rdWidth",
          "1882:       return this.refreshColumn()",
          "1884:     return this.$nextTick()",
          "",
          "[Added Lines]",
          "1811:     const $xeTable = this",
          "1813:     let status = false",
          "1814:     const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn]",
          "1815:     const columnOpts = $xeTable.computeColumnOpts",
          "1816:     const isMaxFixedColumn = $xeTable.computeIsMaxFixedColumn",
          "1817:     for (let i = 0; i < cols.length; i++) {",
          "1818:       const item = cols[i]",
          "1819:       const column = handleFieldOrColumn($xeTable, item)",
          "1820:       const targetColumn = getRootColumn($xeTable, column as any)",
          "1821:       if (targetColumn && targetColumn.fixed !== fixed) {",
          "1823:         if (!targetColumn.fixed && isMaxFixedColumn) {",
          "1824:           if (VxeUI.modal) {",
          "1825:             VxeUI.modal.message({",
          "1826:               status: 'error',",
          "1827:               content: getI18n('vxe.table.maxFixedCol', [columnOpts.maxFixedSize])",
          "1828:             })",
          "1829:           }",
          "1830:           return $xeTable.$nextTick()",
          "1831:         }",
          "1832:         XEUtils.eachTree([targetColumn], (column) => {",
          "1833:           column.fixed = fixed",
          "1834:         })",
          "1835:         $xeTable.saveCustomStore('update:fixed')",
          "1836:         if (!status) {",
          "1837:           status = true",
          "1841:     if (status) {",
          "1842:       return $xeTable.refreshColumn()",
          "1843:     }",
          "1844:     return $xeTable.$nextTick()",
          "1850:     const $xeTable = this",
          "1852:     let status = false",
          "1853:     const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn]",
          "1854:     cols.forEach(item => {",
          "1855:       const column = handleFieldOrColumn($xeTable, item)",
          "1856:       const targetColumn = getRootColumn($xeTable, column as any)",
          "1857:       if (targetColumn && targetColumn.fixed) {",
          "1858:         XEUtils.eachTree([targetColumn], (column) => {",
          "1859:           column.fixed = null",
          "1860:         })",
          "1861:         $xeTable.saveCustomStore('update:fixed')",
          "1862:         if (!status) {",
          "1863:           status = true",
          "1864:         }",
          "1865:       }",
          "1866:     })",
          "1867:     if (status) {",
          "1868:       return $xeTable.refreshColumn()",
          "1870:     return $xeTable.$nextTick()",
          "1876:     const $xeTable = this",
          "1878:     let status = false",
          "1879:     const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn]",
          "1880:     cols.forEach(item => {",
          "1881:       const column = handleFieldOrColumn($xeTable, item)",
          "1882:       if (column && column.visible) {",
          "1883:         column.visible = false",
          "1884:         if (!status) {",
          "1885:           status = true",
          "1886:         }",
          "1887:       }",
          "1888:     })",
          "1889:     if (status) {",
          "1890:       return $xeTable.handleCustom()",
          "1892:     return $xeTable.$nextTick()",
          "1898:     const $xeTable = this",
          "1900:     let status = false",
          "1901:     const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn]",
          "1902:     cols.forEach(item => {",
          "1903:       const column = handleFieldOrColumn($xeTable, item)",
          "1904:       if (column && !column.visible) {",
          "1905:         column.visible = true",
          "1906:         if (!status) {",
          "1907:           status = true",
          "1908:         }",
          "1909:       }",
          "1910:     })",
          "1911:     if (status) {",
          "1912:       return $xeTable.handleCustom()",
          "1914:     return $xeTable.$nextTick()",
          "1917:     const $xeTable = this",
          "1919:     let status = false",
          "1920:     const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn]",
          "1921:     cols.forEach(item => {",
          "1922:       const column = handleFieldOrColumn($xeTable, item)",
          "1923:       if (column) {",
          "1924:         const colWidth = XEUtils.toInteger(width)",
          "1925:         let rdWidth = colWidth",
          "1926:         if (isScale(width)) {",
          "1927:           const tableBody = $xeTable.$refs.tableBody",
          "1928:           const bodyElem = tableBody ? tableBody.$el as HTMLDivElement : null",
          "1929:           const bodyWidth = bodyElem ? bodyElem.clientWidth - 1 : 0",
          "1930:           rdWidth = Math.floor(colWidth * bodyWidth)",
          "1931:         }",
          "1932:         column.resizeWidth = rdWidth",
          "1933:         if (!status) {",
          "1934:           status = true",
          "1935:         }",
          "1937:     })",
          "1938:     if (status) {",
          "1939:       return $xeTable.refreshColumn()",
          "1941:     return $xeTable.$nextTick()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5594:     }",
          "5595:     this.closeTooltip()",
          "5596:   },",
          "5598:     const $xeTable = this",
          "5599:     const props = $xeTable",
          "",
          "[Removed Lines]",
          "5597:   handleScrollEvent (evnt: Event, isRollY: boolean, isRollX: boolean, params: any) {",
          "",
          "[Added Lines]",
          "5654:   handleScrollEvent (evnt: Event, isRollY: boolean, isRollX: boolean, scrollTop: number, scrollLeft: number, params: any) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5620:     const bodyWidth = bodyElem ? bodyElem.clientWidth : 0",
          "5621:     const scrollHeight = bodyElem ? bodyElem.scrollHeight : 0",
          "5622:     const scrollWidth = bodyElem ? bodyElem.scrollWidth : 0",
          "5623:     const evntParams = {",
          "5624:       bodyHeight,",
          "5625:       bodyWidth,",
          "5626:       scrollHeight,",
          "5627:       scrollWidth,",
          "5628:       isX: isRollX,",
          "5629:       isY: isRollY,",
          "5630:       ...params",
          "5631:     }",
          "5632:     $xeTable.dispatchEvent('scroll', evntParams, evnt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5680:     let isTop = false",
          "5681:     let isBottom = false",
          "5682:     let isLeft = false",
          "5683:     let isRight = false",
          "5684:     if (isRollX) {",
          "5685:       isLeft = scrollLeft <= 0",
          "5686:       if (!isTop) {",
          "5687:         isRight = scrollLeft + bodyWidth >= scrollWidth",
          "5688:       }",
          "5689:       $xeTable.checkScrolling()",
          "5690:     } else {",
          "5691:       isTop = scrollTop <= 0",
          "5692:       if (!isTop) {",
          "5693:         isBottom = scrollTop + bodyHeight >= scrollHeight",
          "5694:       }",
          "5695:     }",
          "5697:       scrollTop,",
          "5698:       scrollLeft,",
          "5705:       isTop,",
          "5706:       isBottom,",
          "5707:       isLeft,",
          "5708:       isRight,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5674:     $xeTable.lastScrollTime = Date.now()",
          "5675:     $xeTable.handleSyncScrollX(scrollLeft)",
          "5676:     $xeTable.triggerScrollXEvent(evnt)",
          "5678:       type: 'table',",
          "5682:     })",
          "5683:   },",
          "5684:   debounceScrollYCalculate: XEUtils.debounce(function () {",
          "",
          "[Removed Lines]",
          "5677:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "5679:       fixed: '',",
          "5680:       scrollTop,",
          "5681:       scrollLeft",
          "",
          "[Added Lines]",
          "5756:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "5758:       fixed: ''",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5710:     $xeTable.lastScrollTime = Date.now()",
          "5711:     $xeTable.handleSyncScrollY(scrollTop)",
          "5712:     $xeTable.triggerScrollYEvent(evnt)",
          "5714:       type: 'table',",
          "5718:     })",
          "5719:   },",
          "",
          "[Removed Lines]",
          "5713:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, {",
          "5715:       fixed: '',",
          "5716:       scrollTop,",
          "5717:       scrollLeft",
          "",
          "[Added Lines]",
          "5790:     $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {",
          "5792:       fixed: ''",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5913:   scrollTo (scrollLeft: any, scrollTop: any) {",
          "5914:     const { $refs } = this",
          "5916:     const tableBodyElem = tableBody ? tableBody.$el : null",
          "5917:     const rightBodyElem = rightBody ? rightBody.$el : null",
          "5918:     const tableFooterElem = tableFooter ? tableFooter.$el : null",
          "5919:     if (XEUtils.isNumber(scrollLeft)) {",
          "5921:     }",
          "5922:     if (XEUtils.isNumber(scrollTop)) {",
          "5924:     }",
          "5925:     if (this.scrollXLoad || this.scrollYLoad) {",
          "5926:       return new Promise(resolve => setTimeout(() => resolve(this.$nextTick()), 50))",
          "",
          "[Removed Lines]",
          "5915:     const { tableBody, rightBody, tableFooter } = $refs",
          "5920:       setScrollLeft(tableFooterElem || tableBodyElem, scrollLeft)",
          "5923:       setScrollTop(rightBodyElem || tableBodyElem, scrollTop)",
          "",
          "[Added Lines]",
          "5989:     const $xeTable = this",
          "5992:     const { tableBody, tableHeader, leftBody, rightBody, tableFooter } = $refs",
          "5994:     const leftBodyElem = leftBody ? leftBody.$el : null",
          "5996:     const tableHeaderElem = tableHeader ? tableHeader.$el : null",
          "5999:       const xHandleEl = $xeTable.$refs.refScrollXHandleElem",
          "6000:       if (xHandleEl) {",
          "6001:         setScrollLeft(xHandleEl, scrollLeft)",
          "6002:       } else {",
          "6003:         setScrollLeft(tableBodyElem, scrollLeft)",
          "6004:         setScrollLeft(tableHeaderElem, scrollLeft)",
          "6005:         setScrollLeft(tableFooterElem, scrollLeft)",
          "6006:       }",
          "6009:       const yHandleEl = $xeTable.$refs.refScrollYHandleElem",
          "6010:       if (yHandleEl) {",
          "6011:         setScrollTop(yHandleEl, scrollTop)",
          "6012:       } else {",
          "6013:         setScrollTop(tableBodyElem, scrollTop)",
          "6014:         setScrollTop(leftBodyElem, scrollTop)",
          "6015:         setScrollTop(rightBodyElem, scrollTop)",
          "6016:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d2e583feb2c3b8f88c5beb7401ec7a45ecf770a",
      "candidate_info": {
        "commit_hash": "2d2e583feb2c3b8f88c5beb7401ec7a45ecf770a",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/2d2e583feb2c3b8f88c5beb7401ec7a45ecf770a",
        "files": [
          "package.json",
          "packages/table/src/body.ts",
          "packages/table/src/table.ts"
        ],
        "message": "releases 3.9.13",
        "before_after_code_files": [
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:       emptyContent = $scopedSlots.empty.call(this, { $table: $xetable }, h)",
          "569:     } else {",
          "570:       const compConf = emptyOpts.name ? renderer.get(emptyOpts.name) : null",
          "574:       } else {",
          "575:         emptyContent = $xetable.emptyText || getI18n('vxe.table.emptyText')",
          "576:       }",
          "",
          "[Removed Lines]",
          "571:       const renderTableEmptyView = compConf ? (compConf.renderTableEmptyView || compConf.renderEmpty) : null",
          "572:       if (renderTableEmptyView) {",
          "573:         emptyContent = getSlotVNs(renderTableEmptyView.call(this, h, emptyOpts, { $table: $xetable }))",
          "",
          "[Added Lines]",
          "571:       const rtEmptyView = compConf ? (compConf.renderTableEmpty || compConf.renderTableEmptyView || compConf.renderEmpty) : null",
          "572:       if (rtEmptyView) {",
          "573:         emptyContent = getSlotVNs(rtEmptyView.call(this, h, emptyOpts, { $table: $xetable }))",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     emptyContent = $scopedSlots.empty.call(_vm, params, h)",
          "89:   } else {",
          "90:     const compConf = emptyOpts.name ? renderer.get(emptyOpts.name) : null",
          "94:     } else {",
          "95:       emptyContent = getFuncText(_vm.emptyText) || getI18n('vxe.table.emptyText')",
          "96:     }",
          "",
          "[Removed Lines]",
          "91:     const renderTableEmptyView = compConf ? (compConf.renderTableEmptyView || compConf.renderEmpty) : null",
          "92:     if (renderTableEmptyView) {",
          "93:       emptyContent = getSlotVNs(renderTableEmptyView.call(_vm, h, emptyOpts, params))",
          "",
          "[Added Lines]",
          "91:     const rtEmptyView = compConf ? (compConf.renderTableEmpty || compConf.renderTableEmptyView || compConf.renderEmpty) : null",
          "92:     if (rtEmptyView) {",
          "93:       emptyContent = getSlotVNs(rtEmptyView.call(_vm, h, emptyOpts, params))",
          "",
          "---------------"
        ]
      }
    }
  ]
}