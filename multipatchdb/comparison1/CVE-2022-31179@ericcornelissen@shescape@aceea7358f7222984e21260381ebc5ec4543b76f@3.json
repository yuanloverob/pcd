{
  "cve_id": "CVE-2022-31179",
  "cve_desc": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact).",
  "repo": "ericcornelissen/shescape",
  "patch_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
  "patch_info": {
    "commit_hash": "aceea7358f7222984e21260381ebc5ec4543b76f",
    "repo": "ericcornelissen/shescape",
    "commit_url": "https://github.com/ericcornelissen/shescape/commit/aceea7358f7222984e21260381ebc5ec4543b76f",
    "files": [
      "CHANGELOG.md",
      "src/unix.js",
      "src/win.js",
      "test/fixtures/unix.cjs",
      "test/fixtures/win.cjs",
      "test/fuzz/_common.cjs",
      "test/fuzz/corpus/036053b103374e82177446b4e083ccb6a22da06e0375582d622632775c8a938a",
      "test/fuzz/corpus/31ed7643aba69fe2d776af3aee587bb7899165af5ed3846c6f70327f2eec4713",
      "test/fuzz/corpus/7ef6c55f814adceff17a05c032ba6ec89483e37addcfd96bd13281f5de6716fa",
      "test/fuzz/corpus/dece2a606846120af17949c2d758b7df475449689d043a04a1ba63953326e5bb",
      "test/fuzz/corpus/f1d97ce94d0c9dd109dc27538786781da634bbed1df58877cac3c44e4344f3dd",
      "test/fuzz/corpus/f28febc41472c437122c2a44b66ccf7dcefdd19876fe4d9370ece44b5b2deb13",
      "test/fuzz/corpus/faf3c25ec7c017c2cc21a5af0f5584557d8a0c7340c68249076a86a2c4ce74fb",
      "test/fuzz/exec.test.cjs",
      "test/unit/_macros.js"
    ],
    "message": "Improve testing and escaping of newlines (#332)\n\n* Don't ignore newlines when fuzzing\n\nUpdate the fuzzing logic to not ignore newline characters anymore. For\nBash, Dash, PowerShell, and Zsh this is reflected by the removal of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nfrom the `exec.test.cjs` fuzz target. For CMD it is (additionally) the\nremoval of\n\n    arg = arg.replace(/[\\n\\r]+/g, \"\");\n\nin the `_common.cjs` fuzz logic.\n\nThe inclusion of newlines in input arguments required some changes to\nthe `getExpectedOutput` function to account for the individual shell's\nhandling of these characters, typically removing them from the start and\nend of the input. (Note: not all changes to `getExpectedOutput` are due\nto this.)\n\n* Update the fuzz corpus\n\n- `31ed764`: contains a trailing forward slash ('\\\\') character that\n  was echod as a double quote ('\"') character by CMD due to carriage\n  return ('\\r') characters not being escaped.\n- `dece2a6`: contains a line feed ('\\n') character and a tilde where the\n  tilde should be escaped but wasn't for Bash.\n- `f28febc`: contains a carriage return ('\\r') character and a tilde\n  where the tilde should be escaped but wasn't for Bash.\n- `faf3c25`: contains a line feed ('\\n') character inside of curly\n  braces where the opening curly bracket should be escaped but wasn't\n  for bash.\n\nThe remaining new items in the fuzz corpus (`036053b`, `71ef6c5`, and\n`f1d97ce`) we're added based on fuzzing with whitespace for PowerShell.\n\n* Update macro for executing fixtures\n\nUpdate the macro for executing fixtures to properly display all the\nwhitespace characters as distinct characters. This is required because\notherwise test names will be considered duplicates.\n\nWhitespace characters with common shorthands are display using that\nshorthand (e.g. '\\n' for line feed). Other characters will be displayed\nby their unicode index (similar to the null character). This has been\nnormalized to the `\\u{hhhh}` notation for consistency where the curly\nbraces are included to improve readability of the test title (clearly\ndemarcating the end of the unicode index from any characters that might\nfollow it).\n\n* Escape newlines for PowerShell\n\nFor PowerShell only line feed ('\\n') and carriage return ('\\r')\ncharacters need to be escaped, and only when `interpolation` is `true`.\nThis is supported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that all character except\nfor line feed ('\\n'), carriage return ('\\r'), and '\\uFEFF' are converted\nto a normal space by PowerShell so it isn't necessary to escape them.\nFor '\\uFEFF', it was found that it is interpreted as is and doesn't\ncause any problems.\n\nThe test fixtures for PowerShell were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for CMD\n\nFor CMD only line feed ('\\n') and carriage return ('\\r') characters need\nto be escaped, but those need to be escaped always. This is supported by\nmanual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n')\ncharacters cause CMD to omit the remaining input;  carriage return\n('\\r') could change the interpretation of certain characters; tab ('\\t')\ncharacters are converted to normal spaces; and all other whitespace\ncharacters are interpreted as is.\n\nThe test fixtures for CMD were updated to include examples where\nwhitespace characters need or need not be escaped.\n\n* Escape newlines for Bash, Dash, and Zsh\n\nFor the supported Unix shells only the line feed ('\\n') character needs\nto be escaped, and only when `interpolation` is `true`. This is\nsupported by manual testing as well as fuzzing.\n\nFrom manual testing (see [2]) it turned out that line feed ('\\n') and\ncharacters cause the whatever follows it to be interpreted as a new\ncommand; tab ('\\t') characters are converted to normal spaces; and all\nother whitespace characters are interpreted as is.\n\nThe test fixtures for Bash, Dash, and Zsh were updated to include\nexamples where whitespace characters need or need not be escaped.\n\n* Improve escaping of tilde for Bash\n\nFor Bash escape the tilde ('~') character if a line terminating\ncharacter ('\\n', '\\r', '\\u2028', or '\\u2029') appears between and\n\"opening\" equals sign ('=') and a \"closing\" colon-tilde (\":~\"). This\ncase was missed previously because the regular expression `/./` does not\nindeed match all characters, but only those that are not line\nterminating characters (even with the multiline flag). From [1]:\n\n> Note that the m multiline flag doesn't change the dot behavior. So to\n> match a pattern across multiple lines, the character class `[^]` can\n> be used - it will match any character including newlines.\n\nThe test fixtures for Bash were updated to include examples where the\ntilde character should have been escaped but wasn't.\n\n* Improve escaping of curly braces for Bash\n\nFor Bash escape the opening curly brace ('}') character if a line\nterminating character ('\\n', '\\r', '\\u2028', or '\\u2029') appears\nbetween and opening curly brace ('{') and closing curly brace ('}').\nAgain, this case was missed previously because the regular expression\n`/./` does match _all_ characters - instead `/[^]/` is used.\n\nThe test fixtures for Bash were updated to include examples where the\nopening curly brace should have been escaped but wasn't.\n\n* Update CHANGELOG\n\nInclude the fixed bugs in the CHANGELOG.\n\n---\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide-\n   /Regular_Expressions/Character_Classes\n2. Sample of a script used for manual testing:\n\n    import { execSync } from \"node:child_process\";\n    import assert from \"node:assert\";\n    import * as shescape from \"shescape\";\n\n    const options = {\n      shell: \"powershell.exe\", // <-- set shell to test here\n      interpolation: true,     // <-- change depending on test\n      encoding: \"utf8\",\n    };\n\n    const whitespaceChars = [\n      \"\\u0009\", \"\\u000A\", \"\\u000B\", \"\\u000C\", \"\\u000D\", \" \", \"\\u0085\",\n      \"\\u00A0\", \"\\u1680\", \"\\u2000\", \"\\u2001\", \"\\u2002\", \"\\u2003\",\n      \"\\u2004\", \"\\u2005\", \"\\u2006\", \"\\u2007\", \"\\u2008\", \"\\u2009\",\n      \"\\u200A\", \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\",\n      \"\\uFEFF\",\n    ];\n\n    for (const char of whitespaceChars) {\n      const userInput = `foo${char}bar`;\n\n      const escapeOutput = execSync(\n        `node test/_echo.js ${shescape.escape(userInput, options)}`,\n        options\n      );\n      // Use this if you don't expect the escaped output to equal the\n      // quote output.\n      //assert.strictEqual(escapeOutput, \"some string\");\n\n      const quoteOutput = execSync(\n        `node test/_echo.js ${shescape.quote(userInput, options)}`,\n        options\n      );\n      assert.strictEqual(escapeOutput, quoteOutput);\n    }",
    "before_after_code_files": [
      "src/unix.js||src/unix.js",
      "src/win.js||src/win.js",
      "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
      "test/fixtures/win.cjs||test/fixtures/win.cjs",
      "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
      "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs",
      "test/unit/_macros.js||test/unit/_macros.js"
    ]
  },
  "patch_diff": {
    "src/unix.js||src/unix.js": [
      "File: src/unix.js -> src/unix.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   if (interpolation) {",
      "47:     result = result",
      "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "49:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "50:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "51:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "52:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "53:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "56:   } else if (quoted) {",
      "57:     result = result.replace(/'/g, `'\\\\''`);",
      "58:   }",
      "",
      "[Removed Lines]",
      "54:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
      "55:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "[Added Lines]",
      "49:       .replace(/\\n/g, \" \")",
      "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
      "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:   if (interpolation) {",
      "75:     result = result",
      "76:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "77:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
      "78:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "79:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "80:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
      "81:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
      "83:   } else if (quoted) {",
      "84:     result = result.replace(/'/g, `'\\\\''`);",
      "85:   }",
      "",
      "[Removed Lines]",
      "82:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\");",
      "",
      "[Added Lines]",
      "78:       .replace(/\\n/g, \" \")",
      "84:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   if (interpolation) {",
      "102:     result = result",
      "103:       .replace(/\\\\/g, \"\\\\\\\\\")",
      "104:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
      "105:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
      "106:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:       .replace(/\\n/g, \" \")",
      "",
      "---------------"
    ],
    "src/win.js||src/win.js": [
      "File: src/win.js -> src/win.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: function escapeArgCmd(arg, interpolation, quoted) {",
      "38:   if (interpolation) {",
      "39:     result = result",
      "",
      "[Removed Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\");",
      "",
      "[Added Lines]",
      "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:   if (interpolation) {",
      "66:     result = result",
      "67:       .replace(/(^|\\s)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
      "68:       .replace(/(^|\\s)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
      "69:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:       .replace(/\\n|\\r/g, \" \")",
      "",
      "---------------"
    ],
    "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
      "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u2000bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u2000bar\",",
      "76:           noInterpolation: \"foo\\u2000bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2001bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2001bar\",",
      "83:           noInterpolation: \"foo\\u2001bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2002bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2002bar\",",
      "90:           noInterpolation: \"foo\\u2002bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2003bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2003bar\",",
      "97:           noInterpolation: \"foo\\u2003bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2004bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2004bar\",",
      "104:           noInterpolation: \"foo\\u2004bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2005bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2005bar\",",
      "111:           noInterpolation: \"foo\\u2005bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2006bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2006bar\",",
      "118:           noInterpolation: \"foo\\u2006bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2007bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2007bar\",",
      "125:           noInterpolation: \"foo\\u2007bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2008bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2008bar\",",
      "132:           noInterpolation: \"foo\\u2008bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2009bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2009bar\",",
      "139:           noInterpolation: \"foo\\u2009bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u200Abar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u200Abar\",",
      "146:           noInterpolation: \"foo\\u200Abar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u2028bar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u2028bar\",",
      "153:           noInterpolation: \"foo\\u2028bar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2029bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2029bar\",",
      "160:           noInterpolation: \"foo\\u2029bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u202Fbar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u202Fbar\",",
      "167:           noInterpolation: \"foo\\u202Fbar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u205Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u205Fbar\",",
      "174:           noInterpolation: \"foo\\u205Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u3000bar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u3000bar\",",
      "181:           noInterpolation: \"foo\\u3000bar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\uFEFFbar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\uFEFFbar\",",
      "188:           noInterpolation: \"foo\\uFEFFbar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\n\\rbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo \\rbar\",",
      "195:           noInterpolation: \"foo\\n\\rbar\",",
      "196:         },",
      "197:       },",
      "198:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "137:         input: \"a=b:~:\",",
      "138:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
      "139:       },",
      "140:       {",
      "141:         input: \"a=b:~:c\",",
      "142:         expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306:       {",
      "307:         input: \"a=\\r:~:\",",
      "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
      "309:       },",
      "310:       {",
      "311:         input: \"a=\\u2028:~:\",",
      "312:         expected: {",
      "313:           interpolation: \"a=\\u2028:\\\\~:\",",
      "314:           noInterpolation: \"a=\\u2028:~:\",",
      "315:         },",
      "316:       },",
      "317:       {",
      "318:         input: \"a=\\u2029:~:\",",
      "319:         expected: {",
      "320:           interpolation: \"a=\\u2029:\\\\~:\",",
      "321:           noInterpolation: \"a=\\u2029:~:\",",
      "322:         },",
      "323:       },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:         input: \"a{0..2}b\",",
      "392:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "393:       },",
      "394:     ],",
      "395:     \"angle brackets ('<', '>')\": [",
      "396:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:       {",
      "579:         input: \"a{\\u000Db,c}d\",",
      "580:         expected: {",
      "581:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "582:           noInterpolation: \"a{\\u000Db,c}d\",",
      "583:         },",
      "584:       },",
      "585:       {",
      "586:         input: \"a{\\u2028b,c}d\",",
      "587:         expected: {",
      "588:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "589:           noInterpolation: \"a{\\u2028b,c}d\",",
      "590:         },",
      "591:       },",
      "592:       {",
      "593:         input: \"a{\\u2029b,c}d\",",
      "594:         expected: {",
      "595:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "596:           noInterpolation: \"a{\\u2029b,c}d\",",
      "597:         },",
      "598:       },",
      "599:       {",
      "600:         input: \"a{b,c\\u000D}d\",",
      "601:         expected: {",
      "602:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "603:           noInterpolation: \"a{b,c\\u000D}d\",",
      "604:         },",
      "605:       },",
      "606:       {",
      "607:         input: \"a{b,c\\u2028}d\",",
      "608:         expected: {",
      "609:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "610:           noInterpolation: \"a{b,c\\u2028}d\",",
      "611:         },",
      "612:       },",
      "613:       {",
      "614:         input: \"a{b,c\\u2029}d\",",
      "615:         expected: {",
      "616:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "617:           noInterpolation: \"a{b,c\\u2029}d\",",
      "618:         },",
      "619:       },",
      "620:       {",
      "621:         input: \"a{\\u000D0..2}b\",",
      "622:         expected: {",
      "623:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "624:           noInterpolation: \"a{\\u000D0..2}b\",",
      "625:         },",
      "626:       },",
      "627:       {",
      "628:         input: \"a{\\u20280..2}b\",",
      "629:         expected: {",
      "630:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "631:           noInterpolation: \"a{\\u20280..2}b\",",
      "632:         },",
      "633:       },",
      "634:       {",
      "635:         input: \"a{\\u20290..2}b\",",
      "636:         expected: {",
      "637:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "638:           noInterpolation: \"a{\\u20290..2}b\",",
      "639:         },",
      "640:       },",
      "641:       {",
      "642:         input: \"a{0..2\\u000D}b\",",
      "643:         expected: {",
      "644:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "645:           noInterpolation: \"a{0..2\\u000D}b\",",
      "646:         },",
      "647:       },",
      "648:       {",
      "649:         input: \"a{0..2\\u2028}b\",",
      "650:         expected: {",
      "651:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "652:           noInterpolation: \"a{0..2\\u2028}b\",",
      "653:         },",
      "654:       },",
      "655:       {",
      "656:         input: \"a{0..2\\u2029}b\",",
      "657:         expected: {",
      "658:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "659:           noInterpolation: \"a{0..2\\u2029}b\",",
      "660:         },",
      "661:       },",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "439:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "440:       },",
      "441:     ],",
      "442:     'single quotes (\"\\'\")': [",
      "443:       {",
      "444:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     \"whitespace (\\\\s)\": [",
      "711:       {",
      "712:         input: \"foo bar\",",
      "713:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "714:       },",
      "715:       {",
      "716:         input: \"foo\\nbar\",",
      "717:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\vbar\",",
      "721:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "722:       },",
      "723:       {",
      "724:         input: \"foo\\fbar\",",
      "725:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "726:       },",
      "727:       {",
      "728:         input: \"foo\\rbar\",",
      "729:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "730:       },",
      "731:       {",
      "732:         input: \"foo bar\",",
      "733:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "734:       },",
      "735:       {",
      "736:         input: \"foo\\u0085bar\",",
      "737:         expected: {",
      "738:           interpolation: \"foo\\u0085bar\",",
      "739:           noInterpolation: \"foo\\u0085bar\",",
      "740:         },",
      "741:       },",
      "742:       {",
      "743:         input: \"foo\\u00A0bar\",",
      "744:         expected: {",
      "745:           interpolation: \"foo\\u00A0bar\",",
      "746:           noInterpolation: \"foo\\u00A0bar\",",
      "747:         },",
      "748:       },",
      "749:       {",
      "750:         input: \"foo\\u2000bar\",",
      "751:         expected: {",
      "752:           interpolation: \"foo\\u2000bar\",",
      "753:           noInterpolation: \"foo\\u2000bar\",",
      "754:         },",
      "755:       },",
      "756:       {",
      "757:         input: \"foo\\u2001bar\",",
      "758:         expected: {",
      "759:           interpolation: \"foo\\u2001bar\",",
      "760:           noInterpolation: \"foo\\u2001bar\",",
      "761:         },",
      "762:       },",
      "763:       {",
      "764:         input: \"foo\\u2002bar\",",
      "765:         expected: {",
      "766:           interpolation: \"foo\\u2002bar\",",
      "767:           noInterpolation: \"foo\\u2002bar\",",
      "768:         },",
      "769:       },",
      "770:       {",
      "771:         input: \"foo\\u2003bar\",",
      "772:         expected: {",
      "773:           interpolation: \"foo\\u2003bar\",",
      "774:           noInterpolation: \"foo\\u2003bar\",",
      "775:         },",
      "776:       },",
      "777:       {",
      "778:         input: \"foo\\u2004bar\",",
      "779:         expected: {",
      "780:           interpolation: \"foo\\u2004bar\",",
      "781:           noInterpolation: \"foo\\u2004bar\",",
      "782:         },",
      "783:       },",
      "784:       {",
      "785:         input: \"foo\\u2005bar\",",
      "786:         expected: {",
      "787:           interpolation: \"foo\\u2005bar\",",
      "788:           noInterpolation: \"foo\\u2005bar\",",
      "789:         },",
      "790:       },",
      "791:       {",
      "792:         input: \"foo\\u2006bar\",",
      "793:         expected: {",
      "794:           interpolation: \"foo\\u2006bar\",",
      "795:           noInterpolation: \"foo\\u2006bar\",",
      "796:         },",
      "797:       },",
      "798:       {",
      "799:         input: \"foo\\u2007bar\",",
      "800:         expected: {",
      "801:           interpolation: \"foo\\u2007bar\",",
      "802:           noInterpolation: \"foo\\u2007bar\",",
      "803:         },",
      "804:       },",
      "805:       {",
      "806:         input: \"foo\\u2008bar\",",
      "807:         expected: {",
      "808:           interpolation: \"foo\\u2008bar\",",
      "809:           noInterpolation: \"foo\\u2008bar\",",
      "810:         },",
      "811:       },",
      "812:       {",
      "813:         input: \"foo\\u2009bar\",",
      "814:         expected: {",
      "815:           interpolation: \"foo\\u2009bar\",",
      "816:           noInterpolation: \"foo\\u2009bar\",",
      "817:         },",
      "818:       },",
      "819:       {",
      "820:         input: \"foo\\u200Abar\",",
      "821:         expected: {",
      "822:           interpolation: \"foo\\u200Abar\",",
      "823:           noInterpolation: \"foo\\u200Abar\",",
      "824:         },",
      "825:       },",
      "826:       {",
      "827:         input: \"foo\\u2028bar\",",
      "828:         expected: {",
      "829:           interpolation: \"foo\\u2028bar\",",
      "830:           noInterpolation: \"foo\\u2028bar\",",
      "831:         },",
      "832:       },",
      "833:       {",
      "834:         input: \"foo\\u2029bar\",",
      "835:         expected: {",
      "836:           interpolation: \"foo\\u2029bar\",",
      "837:           noInterpolation: \"foo\\u2029bar\",",
      "838:         },",
      "839:       },",
      "840:       {",
      "841:         input: \"foo\\u202Fbar\",",
      "842:         expected: {",
      "843:           interpolation: \"foo\\u202Fbar\",",
      "844:           noInterpolation: \"foo\\u202Fbar\",",
      "845:         },",
      "846:       },",
      "847:       {",
      "848:         input: \"foo\\u205Fbar\",",
      "849:         expected: {",
      "850:           interpolation: \"foo\\u205Fbar\",",
      "851:           noInterpolation: \"foo\\u205Fbar\",",
      "852:         },",
      "853:       },",
      "854:       {",
      "855:         input: \"foo\\u3000bar\",",
      "856:         expected: {",
      "857:           interpolation: \"foo\\u3000bar\",",
      "858:           noInterpolation: \"foo\\u3000bar\",",
      "859:         },",
      "860:       },",
      "861:       {",
      "862:         input: \"foo\\uFEFFbar\",",
      "863:         expected: {",
      "864:           interpolation: \"foo\\uFEFFbar\",",
      "865:           noInterpolation: \"foo\\uFEFFbar\",",
      "866:         },",
      "867:       },",
      "868:       {",
      "869:         input: \"foo\\n\\rbar\",",
      "870:         expected: {",
      "871:           interpolation: \"foo \\rbar\",",
      "872:           noInterpolation: \"foo\\n\\rbar\",",
      "873:         },",
      "874:       },",
      "875:     ],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "800:         input: \"a{0..2}b\",",
      "801:         expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },",
      "802:       },",
      "803:     ],",
      "804:     \"angle brackets ('<', '>')\": [",
      "805:       {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1237:       {",
      "1238:         input: \"a{\\u000Db,c}d\",",
      "1239:         expected: {",
      "1240:           interpolation: \"a\\\\{\\u000Db,c}d\",",
      "1241:           noInterpolation: \"a{\\u000Db,c}d\",",
      "1242:         },",
      "1243:       },",
      "1244:       {",
      "1245:         input: \"a{\\u2028b,c}d\",",
      "1246:         expected: {",
      "1247:           interpolation: \"a\\\\{\\u2028b,c}d\",",
      "1248:           noInterpolation: \"a{\\u2028b,c}d\",",
      "1249:         },",
      "1250:       },",
      "1251:       {",
      "1252:         input: \"a{\\u2029b,c}d\",",
      "1253:         expected: {",
      "1254:           interpolation: \"a\\\\{\\u2029b,c}d\",",
      "1255:           noInterpolation: \"a{\\u2029b,c}d\",",
      "1256:         },",
      "1257:       },",
      "1258:       {",
      "1259:         input: \"a{b,c\\u000D}d\",",
      "1260:         expected: {",
      "1261:           interpolation: \"a\\\\{b,c\\u000D}d\",",
      "1262:           noInterpolation: \"a{b,c\\u000D}d\",",
      "1263:         },",
      "1264:       },",
      "1265:       {",
      "1266:         input: \"a{b,c\\u2028}d\",",
      "1267:         expected: {",
      "1268:           interpolation: \"a\\\\{b,c\\u2028}d\",",
      "1269:           noInterpolation: \"a{b,c\\u2028}d\",",
      "1270:         },",
      "1271:       },",
      "1272:       {",
      "1273:         input: \"a{b,c\\u2029}d\",",
      "1274:         expected: {",
      "1275:           interpolation: \"a\\\\{b,c\\u2029}d\",",
      "1276:           noInterpolation: \"a{b,c\\u2029}d\",",
      "1277:         },",
      "1278:       },",
      "1279:       {",
      "1280:         input: \"a{\\u000D0..2}b\",",
      "1281:         expected: {",
      "1282:           interpolation: \"a\\\\{\\u000D0..2}b\",",
      "1283:           noInterpolation: \"a{\\u000D0..2}b\",",
      "1284:         },",
      "1285:       },",
      "1286:       {",
      "1287:         input: \"a{\\u20280..2}b\",",
      "1288:         expected: {",
      "1289:           interpolation: \"a\\\\{\\u20280..2}b\",",
      "1290:           noInterpolation: \"a{\\u20280..2}b\",",
      "1291:         },",
      "1292:       },",
      "1293:       {",
      "1294:         input: \"a{\\u20290..2}b\",",
      "1295:         expected: {",
      "1296:           interpolation: \"a\\\\{\\u20290..2}b\",",
      "1297:           noInterpolation: \"a{\\u20290..2}b\",",
      "1298:         },",
      "1299:       },",
      "1300:       {",
      "1301:         input: \"a{0..2\\u000D}b\",",
      "1302:         expected: {",
      "1303:           interpolation: \"a\\\\{0..2\\u000D}b\",",
      "1304:           noInterpolation: \"a{0..2\\u000D}b\",",
      "1305:         },",
      "1306:       },",
      "1307:       {",
      "1308:         input: \"a{0..2\\u2028}b\",",
      "1309:         expected: {",
      "1310:           interpolation: \"a\\\\{0..2\\u2028}b\",",
      "1311:           noInterpolation: \"a{0..2\\u2028}b\",",
      "1312:         },",
      "1313:       },",
      "1314:       {",
      "1315:         input: \"a{0..2\\u2029}b\",",
      "1316:         expected: {",
      "1317:           interpolation: \"a\\\\{0..2\\u2029}b\",",
      "1318:           noInterpolation: \"a{0..2\\u2029}b\",",
      "1319:         },",
      "1320:       },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "848:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "849:       },",
      "850:     ],",
      "851:     'single quotes (\"\\'\")': [",
      "852:       {",
      "853:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:     \"whitespace (\\\\s)\": [",
      "1370:       {",
      "1371:         input: \"foo bar\",",
      "1372:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1373:       },",
      "1374:       {",
      "1375:         input: \"foo\\nbar\",",
      "1376:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "1377:       },",
      "1378:       {",
      "1379:         input: \"foo\\vbar\",",
      "1380:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "1381:       },",
      "1382:       {",
      "1383:         input: \"foo\\fbar\",",
      "1384:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "1385:       },",
      "1386:       {",
      "1387:         input: \"foo\\rbar\",",
      "1388:         expected: { interpolation: \"foo\\rbar\", noInterpolation: \"foo\\rbar\" },",
      "1389:       },",
      "1390:       {",
      "1391:         input: \"foo bar\",",
      "1392:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "1393:       },",
      "1394:       {",
      "1395:         input: \"foo\\u0085bar\",",
      "1396:         expected: {",
      "1397:           interpolation: \"foo\\u0085bar\",",
      "1398:           noInterpolation: \"foo\\u0085bar\",",
      "1399:         },",
      "1400:       },",
      "1401:       {",
      "1402:         input: \"foo\\u00A0bar\",",
      "1403:         expected: {",
      "1404:           interpolation: \"foo\\u00A0bar\",",
      "1405:           noInterpolation: \"foo\\u00A0bar\",",
      "1406:         },",
      "1407:       },",
      "1408:       {",
      "1409:         input: \"foo\\u2000bar\",",
      "1410:         expected: {",
      "1411:           interpolation: \"foo\\u2000bar\",",
      "1412:           noInterpolation: \"foo\\u2000bar\",",
      "1413:         },",
      "1414:       },",
      "1415:       {",
      "1416:         input: \"foo\\u2001bar\",",
      "1417:         expected: {",
      "1418:           interpolation: \"foo\\u2001bar\",",
      "1419:           noInterpolation: \"foo\\u2001bar\",",
      "1420:         },",
      "1421:       },",
      "1422:       {",
      "1423:         input: \"foo\\u2002bar\",",
      "1424:         expected: {",
      "1425:           interpolation: \"foo\\u2002bar\",",
      "1426:           noInterpolation: \"foo\\u2002bar\",",
      "1427:         },",
      "1428:       },",
      "1429:       {",
      "1430:         input: \"foo\\u2003bar\",",
      "1431:         expected: {",
      "1432:           interpolation: \"foo\\u2003bar\",",
      "1433:           noInterpolation: \"foo\\u2003bar\",",
      "1434:         },",
      "1435:       },",
      "1436:       {",
      "1437:         input: \"foo\\u2004bar\",",
      "1438:         expected: {",
      "1439:           interpolation: \"foo\\u2004bar\",",
      "1440:           noInterpolation: \"foo\\u2004bar\",",
      "1441:         },",
      "1442:       },",
      "1443:       {",
      "1444:         input: \"foo\\u2005bar\",",
      "1445:         expected: {",
      "1446:           interpolation: \"foo\\u2005bar\",",
      "1447:           noInterpolation: \"foo\\u2005bar\",",
      "1448:         },",
      "1449:       },",
      "1450:       {",
      "1451:         input: \"foo\\u2006bar\",",
      "1452:         expected: {",
      "1453:           interpolation: \"foo\\u2006bar\",",
      "1454:           noInterpolation: \"foo\\u2006bar\",",
      "1455:         },",
      "1456:       },",
      "1457:       {",
      "1458:         input: \"foo\\u2007bar\",",
      "1459:         expected: {",
      "1460:           interpolation: \"foo\\u2007bar\",",
      "1461:           noInterpolation: \"foo\\u2007bar\",",
      "1462:         },",
      "1463:       },",
      "1464:       {",
      "1465:         input: \"foo\\u2008bar\",",
      "1466:         expected: {",
      "1467:           interpolation: \"foo\\u2008bar\",",
      "1468:           noInterpolation: \"foo\\u2008bar\",",
      "1469:         },",
      "1470:       },",
      "1471:       {",
      "1472:         input: \"foo\\u2009bar\",",
      "1473:         expected: {",
      "1474:           interpolation: \"foo\\u2009bar\",",
      "1475:           noInterpolation: \"foo\\u2009bar\",",
      "1476:         },",
      "1477:       },",
      "1478:       {",
      "1479:         input: \"foo\\u200Abar\",",
      "1480:         expected: {",
      "1481:           interpolation: \"foo\\u200Abar\",",
      "1482:           noInterpolation: \"foo\\u200Abar\",",
      "1483:         },",
      "1484:       },",
      "1485:       {",
      "1486:         input: \"foo\\u2028bar\",",
      "1487:         expected: {",
      "1488:           interpolation: \"foo\\u2028bar\",",
      "1489:           noInterpolation: \"foo\\u2028bar\",",
      "1490:         },",
      "1491:       },",
      "1492:       {",
      "1493:         input: \"foo\\u2029bar\",",
      "1494:         expected: {",
      "1495:           interpolation: \"foo\\u2029bar\",",
      "1496:           noInterpolation: \"foo\\u2029bar\",",
      "1497:         },",
      "1498:       },",
      "1499:       {",
      "1500:         input: \"foo\\u202Fbar\",",
      "1501:         expected: {",
      "1502:           interpolation: \"foo\\u202Fbar\",",
      "1503:           noInterpolation: \"foo\\u202Fbar\",",
      "1504:         },",
      "1505:       },",
      "1506:       {",
      "1507:         input: \"foo\\u205Fbar\",",
      "1508:         expected: {",
      "1509:           interpolation: \"foo\\u205Fbar\",",
      "1510:           noInterpolation: \"foo\\u205Fbar\",",
      "1511:         },",
      "1512:       },",
      "1513:       {",
      "1514:         input: \"foo\\u3000bar\",",
      "1515:         expected: {",
      "1516:           interpolation: \"foo\\u3000bar\",",
      "1517:           noInterpolation: \"foo\\u3000bar\",",
      "1518:         },",
      "1519:       },",
      "1520:       {",
      "1521:         input: \"foo\\uFEFFbar\",",
      "1522:         expected: {",
      "1523:           interpolation: \"foo\\uFEFFbar\",",
      "1524:           noInterpolation: \"foo\\uFEFFbar\",",
      "1525:         },",
      "1526:       },",
      "1527:       {",
      "1528:         input: \"foo\\n\\rbar\",",
      "1529:         expected: {",
      "1530:           interpolation: \"foo \\rbar\",",
      "1531:           noInterpolation: \"foo\\n\\rbar\",",
      "1532:         },",
      "1533:       },",
      "1534:     ],",
      "",
      "---------------"
    ],
    "test/fixtures/win.cjs||test/fixtures/win.cjs": [
      "File: test/fixtures/win.cjs -> test/fixtures/win.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "31:       },",
      "32:     ],",
      "33:     'single quotes (\"\\'\")': [",
      "34:       {",
      "35:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:     \"whitespace (\\\\s)\": [",
      "34:       {",
      "35:         input: \"foo bar\",",
      "36:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "37:       },",
      "38:       {",
      "39:         input: \"foo\\nbar\",",
      "40:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "41:       },",
      "42:       {",
      "43:         input: \"foo\\vbar\",",
      "44:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "45:       },",
      "46:       {",
      "47:         input: \"foo\\fbar\",",
      "48:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "49:       },",
      "50:       {",
      "51:         input: \"foo\\rbar\",",
      "52:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "53:       },",
      "54:       {",
      "55:         input: \"foo bar\",",
      "56:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "57:       },",
      "58:       {",
      "59:         input: \"foo\\u0085bar\",",
      "60:         expected: {",
      "61:           interpolation: \"foo\\u0085bar\",",
      "62:           noInterpolation: \"foo\\u0085bar\",",
      "63:         },",
      "64:       },",
      "65:       {",
      "66:         input: \"foo\\u00A0bar\",",
      "67:         expected: {",
      "68:           interpolation: \"foo\\u00A0bar\",",
      "69:           noInterpolation: \"foo\\u00A0bar\",",
      "70:         },",
      "71:       },",
      "72:       {",
      "73:         input: \"foo\\u1680bar\",",
      "74:         expected: {",
      "75:           interpolation: \"foo\\u1680bar\",",
      "76:           noInterpolation: \"foo\\u1680bar\",",
      "77:         },",
      "78:       },",
      "79:       {",
      "80:         input: \"foo\\u2000bar\",",
      "81:         expected: {",
      "82:           interpolation: \"foo\\u2000bar\",",
      "83:           noInterpolation: \"foo\\u2000bar\",",
      "84:         },",
      "85:       },",
      "86:       {",
      "87:         input: \"foo\\u2001bar\",",
      "88:         expected: {",
      "89:           interpolation: \"foo\\u2001bar\",",
      "90:           noInterpolation: \"foo\\u2001bar\",",
      "91:         },",
      "92:       },",
      "93:       {",
      "94:         input: \"foo\\u2002bar\",",
      "95:         expected: {",
      "96:           interpolation: \"foo\\u2002bar\",",
      "97:           noInterpolation: \"foo\\u2002bar\",",
      "98:         },",
      "99:       },",
      "100:       {",
      "101:         input: \"foo\\u2003bar\",",
      "102:         expected: {",
      "103:           interpolation: \"foo\\u2003bar\",",
      "104:           noInterpolation: \"foo\\u2003bar\",",
      "105:         },",
      "106:       },",
      "107:       {",
      "108:         input: \"foo\\u2004bar\",",
      "109:         expected: {",
      "110:           interpolation: \"foo\\u2004bar\",",
      "111:           noInterpolation: \"foo\\u2004bar\",",
      "112:         },",
      "113:       },",
      "114:       {",
      "115:         input: \"foo\\u2005bar\",",
      "116:         expected: {",
      "117:           interpolation: \"foo\\u2005bar\",",
      "118:           noInterpolation: \"foo\\u2005bar\",",
      "119:         },",
      "120:       },",
      "121:       {",
      "122:         input: \"foo\\u2006bar\",",
      "123:         expected: {",
      "124:           interpolation: \"foo\\u2006bar\",",
      "125:           noInterpolation: \"foo\\u2006bar\",",
      "126:         },",
      "127:       },",
      "128:       {",
      "129:         input: \"foo\\u2007bar\",",
      "130:         expected: {",
      "131:           interpolation: \"foo\\u2007bar\",",
      "132:           noInterpolation: \"foo\\u2007bar\",",
      "133:         },",
      "134:       },",
      "135:       {",
      "136:         input: \"foo\\u2008bar\",",
      "137:         expected: {",
      "138:           interpolation: \"foo\\u2008bar\",",
      "139:           noInterpolation: \"foo\\u2008bar\",",
      "140:         },",
      "141:       },",
      "142:       {",
      "143:         input: \"foo\\u2009bar\",",
      "144:         expected: {",
      "145:           interpolation: \"foo\\u2009bar\",",
      "146:           noInterpolation: \"foo\\u2009bar\",",
      "147:         },",
      "148:       },",
      "149:       {",
      "150:         input: \"foo\\u200Abar\",",
      "151:         expected: {",
      "152:           interpolation: \"foo\\u200Abar\",",
      "153:           noInterpolation: \"foo\\u200Abar\",",
      "154:         },",
      "155:       },",
      "156:       {",
      "157:         input: \"foo\\u2028bar\",",
      "158:         expected: {",
      "159:           interpolation: \"foo\\u2028bar\",",
      "160:           noInterpolation: \"foo\\u2028bar\",",
      "161:         },",
      "162:       },",
      "163:       {",
      "164:         input: \"foo\\u2029bar\",",
      "165:         expected: {",
      "166:           interpolation: \"foo\\u2029bar\",",
      "167:           noInterpolation: \"foo\\u2029bar\",",
      "168:         },",
      "169:       },",
      "170:       {",
      "171:         input: \"foo\\u202Fbar\",",
      "172:         expected: {",
      "173:           interpolation: \"foo\\u202Fbar\",",
      "174:           noInterpolation: \"foo\\u202Fbar\",",
      "175:         },",
      "176:       },",
      "177:       {",
      "178:         input: \"foo\\u205Fbar\",",
      "179:         expected: {",
      "180:           interpolation: \"foo\\u205Fbar\",",
      "181:           noInterpolation: \"foo\\u205Fbar\",",
      "182:         },",
      "183:       },",
      "184:       {",
      "185:         input: \"foo\\u3000bar\",",
      "186:         expected: {",
      "187:           interpolation: \"foo\\u3000bar\",",
      "188:           noInterpolation: \"foo\\u3000bar\",",
      "189:         },",
      "190:       },",
      "191:       {",
      "192:         input: \"foo\\uFEFFbar\",",
      "193:         expected: {",
      "194:           interpolation: \"foo\\uFEFFbar\",",
      "195:           noInterpolation: \"foo\\uFEFFbar\",",
      "196:         },",
      "197:       },",
      "198:       {",
      "199:         input: \"foo\\n\\rbar\",",
      "200:         expected: {",
      "201:           interpolation: \"foo  bar\",",
      "202:           noInterpolation: \"foo  bar\",",
      "203:         },",
      "204:       },",
      "205:     ],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "399:         expected: { interpolation: \"abc\", noInterpolation: \"abc\" },",
      "400:       },",
      "401:     ],",
      "402:     'single quotes (\"\\'\")': [",
      "403:       {",
      "404:         input: \"a'b\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "575:     \"whitespace (\\\\s)\": [",
      "576:       {",
      "577:         input: \"foo bar\",",
      "578:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "579:       },",
      "580:       {",
      "581:         input: \"foo\\nbar\",",
      "582:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\nbar\" },",
      "583:       },",
      "584:       {",
      "585:         input: \"foo\\vbar\",",
      "586:         expected: { interpolation: \"foo\\vbar\", noInterpolation: \"foo\\vbar\" },",
      "587:       },",
      "588:       {",
      "589:         input: \"foo\\fbar\",",
      "590:         expected: { interpolation: \"foo\\fbar\", noInterpolation: \"foo\\fbar\" },",
      "591:       },",
      "592:       {",
      "593:         input: \"foo\\rbar\",",
      "594:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo\\rbar\" },",
      "595:       },",
      "596:       {",
      "597:         input: \"foo bar\",",
      "598:         expected: { interpolation: \"foo bar\", noInterpolation: \"foo bar\" },",
      "599:       },",
      "600:       {",
      "601:         input: \"foo\\u0085bar\",",
      "602:         expected: {",
      "603:           interpolation: \"foo\\u0085bar\",",
      "604:           noInterpolation: \"foo\\u0085bar\",",
      "605:         },",
      "606:       },",
      "607:       {",
      "608:         input: \"foo\\u00A0bar\",",
      "609:         expected: {",
      "610:           interpolation: \"foo\\u00A0bar\",",
      "611:           noInterpolation: \"foo\\u00A0bar\",",
      "612:         },",
      "613:       },",
      "614:       {",
      "615:         input: \"foo\\u1680bar\",",
      "616:         expected: {",
      "617:           interpolation: \"foo\\u1680bar\",",
      "618:           noInterpolation: \"foo\\u1680bar\",",
      "619:         },",
      "620:       },",
      "621:       {",
      "622:         input: \"foo\\u2000bar\",",
      "623:         expected: {",
      "624:           interpolation: \"foo\\u2000bar\",",
      "625:           noInterpolation: \"foo\\u2000bar\",",
      "626:         },",
      "627:       },",
      "628:       {",
      "629:         input: \"foo\\u2001bar\",",
      "630:         expected: {",
      "631:           interpolation: \"foo\\u2001bar\",",
      "632:           noInterpolation: \"foo\\u2001bar\",",
      "633:         },",
      "634:       },",
      "635:       {",
      "636:         input: \"foo\\u2002bar\",",
      "637:         expected: {",
      "638:           interpolation: \"foo\\u2002bar\",",
      "639:           noInterpolation: \"foo\\u2002bar\",",
      "640:         },",
      "641:       },",
      "642:       {",
      "643:         input: \"foo\\u2003bar\",",
      "644:         expected: {",
      "645:           interpolation: \"foo\\u2003bar\",",
      "646:           noInterpolation: \"foo\\u2003bar\",",
      "647:         },",
      "648:       },",
      "649:       {",
      "650:         input: \"foo\\u2004bar\",",
      "651:         expected: {",
      "652:           interpolation: \"foo\\u2004bar\",",
      "653:           noInterpolation: \"foo\\u2004bar\",",
      "654:         },",
      "655:       },",
      "656:       {",
      "657:         input: \"foo\\u2005bar\",",
      "658:         expected: {",
      "659:           interpolation: \"foo\\u2005bar\",",
      "660:           noInterpolation: \"foo\\u2005bar\",",
      "661:         },",
      "662:       },",
      "663:       {",
      "664:         input: \"foo\\u2006bar\",",
      "665:         expected: {",
      "666:           interpolation: \"foo\\u2006bar\",",
      "667:           noInterpolation: \"foo\\u2006bar\",",
      "668:         },",
      "669:       },",
      "670:       {",
      "671:         input: \"foo\\u2007bar\",",
      "672:         expected: {",
      "673:           interpolation: \"foo\\u2007bar\",",
      "674:           noInterpolation: \"foo\\u2007bar\",",
      "675:         },",
      "676:       },",
      "677:       {",
      "678:         input: \"foo\\u2008bar\",",
      "679:         expected: {",
      "680:           interpolation: \"foo\\u2008bar\",",
      "681:           noInterpolation: \"foo\\u2008bar\",",
      "682:         },",
      "683:       },",
      "684:       {",
      "685:         input: \"foo\\u2009bar\",",
      "686:         expected: {",
      "687:           interpolation: \"foo\\u2009bar\",",
      "688:           noInterpolation: \"foo\\u2009bar\",",
      "689:         },",
      "690:       },",
      "691:       {",
      "692:         input: \"foo\\u200Abar\",",
      "693:         expected: {",
      "694:           interpolation: \"foo\\u200Abar\",",
      "695:           noInterpolation: \"foo\\u200Abar\",",
      "696:         },",
      "697:       },",
      "698:       {",
      "699:         input: \"foo\\u2028bar\",",
      "700:         expected: {",
      "701:           interpolation: \"foo\\u2028bar\",",
      "702:           noInterpolation: \"foo\\u2028bar\",",
      "703:         },",
      "704:       },",
      "705:       {",
      "706:         input: \"foo\\u2029bar\",",
      "707:         expected: {",
      "708:           interpolation: \"foo\\u2029bar\",",
      "709:           noInterpolation: \"foo\\u2029bar\",",
      "710:         },",
      "711:       },",
      "712:       {",
      "713:         input: \"foo\\u202Fbar\",",
      "714:         expected: {",
      "715:           interpolation: \"foo\\u202Fbar\",",
      "716:           noInterpolation: \"foo\\u202Fbar\",",
      "717:         },",
      "718:       },",
      "719:       {",
      "720:         input: \"foo\\u205Fbar\",",
      "721:         expected: {",
      "722:           interpolation: \"foo\\u205Fbar\",",
      "723:           noInterpolation: \"foo\\u205Fbar\",",
      "724:         },",
      "725:       },",
      "726:       {",
      "727:         input: \"foo\\u3000bar\",",
      "728:         expected: {",
      "729:           interpolation: \"foo\\u3000bar\",",
      "730:           noInterpolation: \"foo\\u3000bar\",",
      "731:         },",
      "732:       },",
      "733:       {",
      "734:         input: \"foo\\uFEFFbar\",",
      "735:         expected: {",
      "736:           interpolation: \"foo\\uFEFFbar\",",
      "737:           noInterpolation: \"foo\\uFEFFbar\",",
      "738:         },",
      "739:       },",
      "740:       {",
      "741:         input: \"foo\\n\\rbar\",",
      "742:         expected: {",
      "743:           interpolation: \"foo  bar\",",
      "744:           noInterpolation: \"foo\\n\\rbar\",",
      "745:         },",
      "746:       },",
      "747:     ],",
      "",
      "---------------"
    ],
    "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
      "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: }",
      "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
      "32:   arg = arg.replace(/\\u{0}/gu, \"\"); // Remove null characters, like Shescape",
      "34:   if (normalizeWhitespace) {",
      "37:     if (isShellPowerShell(shell)) {",
      "39:     } else {",
      "41:     }",
      "44:     if (isShellPowerShell(shell)) {",
      "46:     } else {",
      "48:     }",
      "49:   }",
      "",
      "[Removed Lines]",
      "28:   if (isShellCmd(shell)) {",
      "29:     arg = arg.replace(/[\\n\\r]+/g, \"\"); // Remove newline characters, like prep",
      "30:   }",
      "38:       arg = arg.replace(/^[\\s\\u0085]+|[\\s\\u0085]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t]+|[ \\t]+$/g, \"\");",
      "45:       arg = arg.replace(/(\\s|\\u0085)+/g, \" \");",
      "47:       arg = arg.replace(/[ \\t]+/g, \" \");",
      "",
      "[Added Lines]",
      "33:       arg = arg.replace(",
      "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
      "35:         \"\"",
      "36:       );",
      "37:     } else if (isShellCmd(shell)) {",
      "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
      "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
      "45:       arg = arg.replace(",
      "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
      "47:         \" \"",
      "48:       );",
      "49:     } else if (isShellCmd(shell)) {",
      "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
      "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
      "53:     }",
      "54:   } else {",
      "55:     if (isShellCmd(shell)) {",
      "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57: }",
      "59: function prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {",
      "66:   if (isWindows() && !disableExtraWindowsPreparations) {",
      "68:     if (isShellCmd(shell)) {",
      "",
      "[Removed Lines]",
      "60:   if (isShellCmd(shell)) {",
      "63:     arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "64:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/fuzz/exec.test.cjs||test/fuzz/exec.test.cjs": [
      "File: test/fuzz/exec.test.cjs -> test/fuzz/exec.test.cjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: }",
      "45: function checkWithoutShellUsingInterpolation(arg) {",
      "48:   const argInfo = { arg, shell: undefined, quoted: false };",
      "50:   const preparedArg = common.prepareArg(argInfo);",
      "",
      "[Removed Lines]",
      "46:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60: }",
      "62: function checkWithShellUsingInterpolation(arg) {",
      "65:   const shell = common.getFuzzShell() || true;",
      "66:   const argInfo = { arg, shell, quoted: false };",
      "67:   const execOptions = { shell };",
      "",
      "[Removed Lines]",
      "63:   arg = arg.replace(/[\\n\\r]+/g, \"\");",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/unit/_macros.js||test/unit/_macros.js": [
      "File: test/unit/_macros.js -> test/unit/_macros.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:     t.is(actual, expected);",
      "29:   },",
      "30:   title(_, { input, interpolation, quoted, shellName }) {",
      "32:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
      "33:     quoted = quoted ? \"quoted\" : \"not quoted\";",
      "",
      "[Removed Lines]",
      "31:     input = input.replace(/\\u{0}/gu, \"\\\\x00\").replace(/\\t/g, \"\\\\t\");",
      "",
      "[Added Lines]",
      "31:     input = input",
      "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
      "33:       .replace(/\\u0009/g, \"\\\\t\")",
      "34:       .replace(/\\u000A/g, \"\\\\n\")",
      "35:       .replace(/\\u000B/g, \"\\\\v\")",
      "36:       .replace(/\\u000C/g, \"\\\\f\")",
      "37:       .replace(/\\u000D/g, \"\\\\r\")",
      "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
      "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
      "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
      "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
      "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
      "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
      "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
      "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
      "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
      "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
      "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
      "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
      "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
      "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
      "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
      "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
      "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
      "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
      "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
      "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "542532a64e24ea85044259345451010ca0cce71e",
      "candidate_info": {
        "commit_hash": "542532a64e24ea85044259345451010ca0cce71e",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/542532a64e24ea85044259345451010ca0cce71e",
        "files": [
          "src/unix.js",
          "test/fuzz/corpus/737ceb38bcc47d2b6586bf39d19cdf7dc76d0ea3b4a6f9775971c361a978d493",
          "test/fuzz/corpus/a42d887c098b3645de705432e3e7a640e8d7fef808635986fc310fad4e64a530",
          "test/fuzz/corpus/ae50c098271da4c116b3900012f86a03485d428934232661208c4e82633b4a0a",
          "test/fuzz/corpus/d73c6f87f0ffdf1bc17523b930b451a47dbfd2b34c115778c2b3e648f7f1625c",
          "test/unix.test.js"
        ],
        "message": "Escape trailing strings like `=~x` for Bash-like shells (#172)\n\n* Add `=~/` example to fuzz corpus\n\n* Test escaping of `=~/` for Bash-like shells\n\n* Escape `=~/` for Bash-like shells\n\n* Add `=~+` example to fuzz corpus\n\n* Test escaping of `=~+` for Bash-like shells\n\n* Escape `=~+` for Bash-like shells\n\n* Add `=~0` example to fuzz corpus\n\n* Test escaping of `=~0` for Bash-like shells\n\n* Escape `=~0` for Bash-like shells\n\n* Test escaping of `=~-` and `=~ `for Bash-like shells\n\nFound by property testing the behaviour of bash for strings starting\nwith \"q=~\" and ending with a single unicode character:\n\n    fc.assert(\n      fc.property(\n        fc.fullUnicode(),\n        function (char) {\n          const rawArg = `q=~${char}`;\n          const escapedArg = unix.escapeShellArg(rawArg, \"bash\", true);\n          const cmd = `node test/fuzz/echo.js ${escapedArg}`;\n          const rawResult = cp.execSync(cmd, { shell: \"/bin/bash\"});\n          const result = rawResult.toString();\n          assert.equal(result, rawArg.trim());\n        }\n      )\n    );\n\n* Escape `=~-` and `=~ ` for Bash-like shells\n\n* Add `=~=~=` example to fuzz corpus\n\n* Test escaping of `=~=` for Bash-like shells\n\n* Escape `=~=` for Bash-like shells",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/unix.test.js||test/unix.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   if (shell.endsWith(\"zsh\")) {",
          "39:     result = result.replace(/^=/gu, \"\\\\=\").replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "40:   } else {",
          "42:   }",
          "44:   return result;",
          "",
          "[Removed Lines]",
          "41:     result = result.replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|$)/g, \"\\\\$1\");",
          "",
          "[Added Lines]",
          "41:     result = result.replace(",
          "42:       /(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g,",
          "43:       \"\\\\$1\"",
          "44:     );",
          "",
          "---------------"
        ],
        "test/unix.test.js||test/unix.test.js": [
          "File: test/unix.test.js -> test/unix.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:               assert.strictEqual(output, \"foobar=\\\\~:\");",
          "478:             });",
          "480:             it(\"escapes a tilde right after '=' with a trailing colon and text\", function () {",
          "481:               const input = \"foo=~:bar\";",
          "482:               const output = escapeShellArg(input, shell, interpolation);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:             it(\"escapes a tilde right after '=' with a trailing equals\", function () {",
          "481:               const input = \"foobar=~=\";",
          "482:               const output = escapeShellArg(input, shell, interpolation);",
          "483:               assert.strictEqual(output, \"foobar=\\\\~=\");",
          "484:             });",
          "486:             it(\"escapes a tilde right after '=' with a trailing plus\", function () {",
          "487:               const input = \"foobar=~-\";",
          "488:               const output = escapeShellArg(input, shell, interpolation);",
          "489:               assert.strictEqual(output, \"foobar=\\\\~-\");",
          "490:             });",
          "492:             it(\"escapes a tilde right after '=' with a trailing plus\", function () {",
          "493:               const input = \"foobar=~+\";",
          "494:               const output = escapeShellArg(input, shell, interpolation);",
          "495:               assert.strictEqual(output, \"foobar=\\\\~+\");",
          "496:             });",
          "498:             it(\"escapes a tilde right after '=' with a trailing forward slash\", function () {",
          "499:               const input = \"foobar=~/\";",
          "500:               const output = escapeShellArg(input, shell, interpolation);",
          "501:               assert.strictEqual(output, \"foobar=\\\\~/\");",
          "502:             });",
          "504:             it(\"escapes a tilde right after '=' with a trailing zero\", function () {",
          "505:               const input = \"foobar=~0\";",
          "506:               const output = escapeShellArg(input, shell, interpolation);",
          "507:               assert.strictEqual(output, \"foobar=\\\\~0\");",
          "508:             });",
          "510:             it(\"escapes a tilde right after '=' with a trailing whitespace\", function () {",
          "511:               const input = \"foobar=~ \";",
          "512:               const output = escapeShellArg(input, shell, interpolation);",
          "513:               assert.strictEqual(output, \"foobar=\\\\~ \");",
          "514:             });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddea281f70b510f07b9cc9d9f0a6bf3c039860c3",
      "candidate_info": {
        "commit_hash": "ddea281f70b510f07b9cc9d9f0a6bf3c039860c3",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/ddea281f70b510f07b9cc9d9f0a6bf3c039860c3",
        "files": [
          "src/unix.js",
          "test/fuzz/corpus/5d6874ba94b3b4928c84da328dbd6e76130acbf7e293bf59440204839b0fb0bd",
          "test/unix.test.js"
        ],
        "message": "Escape brace expansion for Bash-like shells when interpolation is enabled (#178)\n\n* Add `{x,x}` example to fuzz corpus\n\n* Test escaping `{x,x}`-like strings\n\nBased on [1], only escape curly braces when there's either a comma or a\nperiod in the provided string.\n\n* Escape `{x,x}`-like strings\n\nRather then escaping both curly braces of a pair, only the opening curly\nbrace is escaped. This is sufficient to avoid the expansion to occur and\nsignificantly simplifies escaping with nested curly brace pairs.\n\n--\n1. https://www.linuxjournal.com/content/bash-brace-expansion",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/unix.test.js||test/unix.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   if (shell.endsWith(\"zsh\")) {",
          "39:     result = result.replace(/^=/gu, \"\\\\=\").replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "40:   } else {",
          "45:   }",
          "47:   return result;",
          "",
          "[Removed Lines]",
          "41:     result = result.replace(",
          "42:       /(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g,",
          "43:       \"\\\\$1\"",
          "44:     );",
          "",
          "[Added Lines]",
          "41:     result = result",
          "42:       .replace(/\\{(?=(.*?(?:\\,|\\.).*?)\\})/g, \"\\\\{\")",
          "43:       .replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
          "",
          "---------------"
        ],
        "test/unix.test.js||test/unix.test.js": [
          "File: test/unix.test.js -> test/unix.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:             assert.strictEqual(output, input);",
          "789:           });",
          "792:             const input = \"praise{the}sun\";",
          "793:             const output = escapeShellArg(input, shell, interpolation);",
          "794:             assert.strictEqual(output, input);",
          "795:           });",
          "796:         });",
          "798:         describe(\"angle brackets ('<', '>')\", function () {",
          "",
          "[Removed Lines]",
          "791:           it(\"does nothing to a pair of curly brackets\", function () {",
          "",
          "[Added Lines]",
          "791:           it(\"does nothing to a pair of curly brackets with text\", function () {",
          "797:           it(\"escapes a pair of curly brackets with a period\", function () {",
          "798:             const input = \"foo{0..2}bar\";",
          "799:             const output = escapeShellArg(input, shell, interpolation);",
          "800:             assert.strictEqual(output, \"foo\\\\{0..2}bar\");",
          "801:           });",
          "803:           it(\"escapes a pair of curly brackets with a comma\", function () {",
          "804:             const input = \"foo{bar,baz}\";",
          "805:             const output = escapeShellArg(input, shell, interpolation);",
          "806:             assert.strictEqual(output, \"foo\\\\{bar,baz}\");",
          "807:           });",
          "809:           it(\"escapes a pair of nested curly brackets\", function () {",
          "810:             const input = \"foo{a,b{c,d},e}bar\";",
          "811:             const output = escapeShellArg(input, shell, interpolation);",
          "812:             assert.strictEqual(output, \"foo\\\\{a,b\\\\{c,d},e}bar\");",
          "813:           });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78f22b947154585680e0f891b89c092a80961e8a",
      "candidate_info": {
        "commit_hash": "78f22b947154585680e0f891b89c092a80961e8a",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/78f22b947154585680e0f891b89c092a80961e8a",
        "files": [
          ".eslintrc.yml",
          "CONTRIBUTING.md",
          "index.js",
          "package-lock.json",
          "package.json",
          "src/executables.js",
          "src/main.js",
          "src/platforms.js",
          "src/unix.js",
          "src/win.js",
          "test/_macros.cjs",
          "test/_setups.js",
          "test/bench/bench.js",
          "test/e2e/_.js",
          "test/e2e/_macros.js",
          "test/fuzz/_common.cjs",
          "test/integration/_macros.cjs",
          "test/integration/cjs/_.cjs",
          "test/integration/esm/_.js",
          "test/prop/_arbitraries.js",
          "test/prop/index/_.js",
          "test/prop/main/_.js",
          "test/prop/platforms/_.js",
          "test/prop/unix/_.js",
          "test/prop/win/_.js",
          "test/unit/_macros.js",
          "test/unit/main/_.js",
          "test/unit/main/_macros.js",
          "test/unit/platforms/_.js",
          "test/unit/platforms/_macros.js",
          "test/unit/unix/_.js",
          "test/unit/win/_.js"
        ],
        "message": "Lint in-code documentation (#379)\n\n* chore(deps): add eslint-plugin-jsdoc\n\nAdd the eslint-plugin-jsdoc plugin [1] for ESLint [2] to start linting\nand enforcing styles JSdoc (i.e. in-code docs). The aim is to, as much\nas possible, encode the documentation guidelines in the Contributing\nGuidelines through the rules of this plugin.\n\n* config: all rules of eslint-plugin-jsdoc\n\nAdd eslint-plugin-jsdoc as a plugin to the ESLint configuration and\nconfigure all its rules:\n\n- `check-access`: currently this tag is unused so the rule is disabled\n  as well.\n- `check-alignment`: reports on unaligned asterisks in JSDoc blocks.\n- `check-examples`: disabled due to incompatibility with ESLint v8\n  (enabling it results in an error).\n- `check-indentation`: Check that the indentation in JSDoc blocks is\n  consistent. The example tag is excluded because, following the plugin\n  docs, having custom indentation there helps with readability of the\n  example code snippet.\n- `check-line-alignment`: Enabled to warn when lines are aligned. This\n  rule is about the alignment of tag descriptions, which are not and\n  should not be aligned in this project. It's explicitly configured with\n  spacing definitions (minimum value required) and tags to check for,\n  limited to the tags used in this project.\n- `check-param-names`: Enabled to check that parameter names in the docs\n  match those in the code. It's almost fully configured. Primarily, the\n  aim is to require as much documentation as possible. The fixer is\n  disabled as it's not always right (e.g. it always keeps the first if\n  there's duplicate parameter documentation, which might not be wanted).\n  The `allowExtraTrailingParamDocs` option is set to false to avoid\n  documenting properties that don't exist. The option`disableExtra\n  PropertyReporting` is disabled, even though it results in violations,\n  because it will help ensure that each documented object property is\n  actually used.\n - `check-property-names`: disable because the property tag is currently\n  not used.\n- `check-syntax`: disabled because the check currently has no effect for\n  this project.\n- `check-tag-names`: enabled to ensure only known tags are used.\n- `check-types`: enabled to check the names of types. Currently reports\n  violations for the use of uppercase `Object` type which, per the\n  plugin docs, should be changed to `object`.\n- `check-values`: Checks the values of some tags with common values\n  (such as the version tag). Explicitly configured, including with a\n  list of the allowed licenses (per the Contributing Guidelines). The\n  `allowedAuthors` option is not set as, per the docs, that's what you\n  should do if it should only be checked that it's not empty (the tag is\n  currently not used, and if it was there would be no restrictions on\n  it).\n- `empty-tags`: Ensures tags that shouldn't have a value don't have one.\n  The `constant` tag is added explicitly as in this project it shouldn't\n  have a value (in the JSDoc spec it may be provided with a type for its\n  value, but this project uses the type tag for that instead).\n- `implements-on-classes`: Disabled as there's no classes in this\n  project.\n- `match-description`: enforce basic requirements on descriptions.\n  Configured per-tag to maximize flexibility going forward.\n- `match-name`: Disabled as there's currently no restrictions.\n- `multiline-blocks`: Enabled and configured to always require a\n  multi-line block for JSDoc.\n- `newline-after-description`: Enabled and configured to require a\n  newline between the description and tags, following the pre-existing\n  documentation style.\n- `no-bad-blocks`: Enabled and configured to report on blocks that look\n  like JSDoc but aren't/shouldn't be.\n- `no-defaults`: Disabled because the project currently doesn't leverage\n  ES6 default values.\n- `no-missing-syntax`: Disabled for now because the level of specificity\n  isn't needed.\n- `no-multi-asterisks`: Enabled and configured to disable multiple\n  asterisks.\n- `no-restricted-syntax`: Same as `no-missing-syntax`.\n- `no-types`: Disabled as this isn't a TypeScript project.\n- `no-undefined-types`: Enabled to avoid wrong types.\n- `require-asterisk-prefix`: Configured to ensure all JSDoc lines start\n  with an asterisk.\n- `require-description-complete-sentence`: Enabled as a basic check on\n  JSDoc, ensuring all documentation is written as \"complete sentences\".\n  The list of abbreviations is based on pre-existing documentation only.\n  The list of tags is empty as it's only intended for extra tags to\n  inlude in the analysis.\n- `require-description`: Enabled and configured to always require a\n  description.\n- `require-example`: Disabled as, currently, examples are optional.\n- `require-file-overview`: Enabled and configured to require a file\n  level description and license.\n- `require-hyphen-before-param-description`: Enabled and configured to\n  disallow hyphens, per the pre-existing documentation style.\n- `require-jsdoc`: Enabled and configured to require JSDoc on constructs\n  used in this project only.\n- `require-param`: Enabled to require parameters to be documented.\n- `require-param-description`: Enabled to require parameter to be\n  described.\n- `require-param-name`: Enabled to require parameters to be named.\n- `require-param-type`: Enabled to require parameter types.\n- `require-property`: Disabled as the property tag is currently unused.\n- `require-property-description`: Disabled as the property tag is\n  currently unused.\n- `require-property-name`: Disabled as the property tag is currently\n  unused.\n- `require-property-type`: Disabled as the property tag is currently\n  unused.\n- `require-returns`: Enabled to be required on constructs used in this\n  project.\n- `require-returns-check`: Enabled to be required on constructs used in\n  this project.\n- `require-returns-type`: Enabled to require return types.\n- `require-throws`: Enabled to require the throws tag if the function\n  may throw an error.\n- `require-yields`: Enabled and configured to require the yield tag if\n  the function generates values.\n- `require-yields-check`: Enabled and configured to require the yield\n  tag if the function generates values.\n- `sort-tags`: Enabled to enforce the same tag order across the project.\n  Configured based on the pre-existing ordering used in this project.\n  The deprecated tag is included because, although not currently used,\n  it is likely to be used at some point in the future.\n- `tag-lines`: Enabled to enforce no empty lines between tags, following\n  the pre-existing style in this project. Options that only apply to the\n  \"always\" option are not specified as they're redundant.\n- `valid-types`: Enabled to force the type, param, and return tags to\n  use valid types.\n\n* config: all settings of eslint-plugin-jsdoc\n\n- Disable ignores related to unused tags.\n- Require no newlines between JSDoc and subject.\n- Set preferred notation for Array and Object types.\n- Explicitly configured the preferred name of (used) tags with aliases.\n\n* refactor: align code & JSDoc with `check-param-names` rule\n\nUpdate `src/main.js` and `src/win.js` to either:\n\n1. use object destructuring on parameters to align them with the JSDoc;\n2. or be less specific about parameters in JSDoc.\n\nThis is to ensure the actual parameters and documented parameters align.\n\n* refactor: align JSDoc with `check-types` rule\n\nMainly fixing casing of `Object` to `object`  (more details in the docs\nfor the eslint-plugin-jsdoc [2]). Additionally, fix some incorrect type\nvalues for parameter tags. Also, for test macros only, removed some\nwrong parameter tags and added some missing parameter tags.\n\n* chore: add missing return tag, return tag types, and throws tags\n\n* chore: add missing file-level docs (tests only)\n\n* chore: add missing JSDoc to test helper functions\n\n* chore: fix minor mistakes in pre-existing JSDoc\n\nThings like missing a period at the end of the description.\n\n* config: custom rules for certain files categories\n\n- Don't require JSDoc in test files and scripts.\n- Don't require file overviews for configuration files.\n\n* config: add ignore patterns for ESLint\n\nIn particular to avoid linting generated files such as the contents of\n`node_modules/` and `_reports/` but also notably `index.cjs`.\n\n* chore: update the code docs guidelines in the Contributing Guidelines\n\n- Normalize placeholder names (all lowercase)\n- Put preferred license for tests first to reinforce that it's preferred\n\n--\n1. https://github.com/gajus/eslint-plugin-jsdoc\n2. https://eslint.org/",
        "before_after_code_files": [
          "index.js||index.js",
          "src/executables.js||src/executables.js",
          "src/main.js||src/main.js",
          "src/platforms.js||src/platforms.js",
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/_macros.cjs||test/_macros.cjs",
          "test/_setups.js||test/_setups.js",
          "test/bench/bench.js||test/bench/bench.js",
          "test/e2e/_.js||test/e2e/_.js",
          "test/e2e/_macros.js||test/e2e/_macros.js",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/integration/_macros.cjs||test/integration/_macros.cjs",
          "test/integration/cjs/_.cjs||test/integration/cjs/_.cjs",
          "test/integration/esm/_.js||test/integration/esm/_.js",
          "test/prop/_arbitraries.js||test/prop/_arbitraries.js",
          "test/prop/index/_.js||test/prop/index/_.js",
          "test/prop/main/_.js||test/prop/main/_.js",
          "test/prop/platforms/_.js||test/prop/platforms/_.js",
          "test/prop/unix/_.js||test/prop/unix/_.js",
          "test/prop/win/_.js||test/prop/win/_.js",
          "test/unit/_macros.js||test/unit/_macros.js",
          "test/unit/main/_.js||test/unit/main/_.js",
          "test/unit/main/_macros.js||test/unit/main/_macros.js",
          "test/unit/platforms/_.js||test/unit/platforms/_.js",
          "test/unit/platforms/_macros.js||test/unit/platforms/_macros.js",
          "test/unit/unix/_.js||test/unit/unix/_.js",
          "test/unit/win/_.js||test/unit/win/_.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "index.js||index.js": [
          "File: index.js -> index.js"
        ],
        "src/executables.js||src/executables.js": [
          "File: src/executables.js -> src/executables.js"
        ],
        "src/main.js||src/main.js": [
          "File: src/main.js -> src/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: function parseArgs(",
          "96:   { getDefaultShell, getShellName }",
          "97: ) {",
          "105:   const shellName = getShellName({ shell }, { resolveExecutable });",
          "106:   return { arg, interpolation, quoted, shellName };",
          "",
          "[Removed Lines]",
          "95:   { arg, options, process },",
          "98:   const env = process.env;",
          "99:   const interpolation = options.interpolation ? true : false;",
          "100:   const quoted = options.quoted;",
          "101:   const shell = isString(options.shell)",
          "102:     ? options.shell",
          "103:     : getDefaultShell({ env });",
          "",
          "[Added Lines]",
          "95:   { arg, options: { interpolation, quoted, shell }, process: { env } },",
          "98:   interpolation = interpolation ? true : false;",
          "99:   shell = isString(shell) ? shell : getDefaultShell({ env });",
          "",
          "---------------"
        ],
        "src/platforms.js||src/platforms.js": [
          "File: src/platforms.js -> src/platforms.js"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:   }",
          "141:   return binCmd;",
          "",
          "[Removed Lines]",
          "136: export function getDefaultShell({ env }) {",
          "137:   if (Object.prototype.hasOwnProperty.call(env, \"ComSpec\")) {",
          "138:     return env.ComSpec;",
          "",
          "[Added Lines]",
          "136: export function getDefaultShell({ env: { ComSpec } }) {",
          "137:   if (ComSpec !== undefined) {",
          "138:     return ComSpec;",
          "",
          "---------------"
        ],
        "test/_macros.cjs||test/_macros.cjs": [
          "File: test/_macros.cjs -> test/_macros.cjs"
        ],
        "test/_setups.js||test/_setups.js": [
          "File: test/_setups.js -> test/_setups.js"
        ],
        "test/bench/bench.js||test/bench/bench.js": [
          "File: test/bench/bench.js -> test/bench/bench.js"
        ],
        "test/e2e/_.js||test/e2e/_.js": [
          "File: test/e2e/_.js -> test/e2e/_.js"
        ],
        "test/e2e/_macros.js||test/e2e/_macros.js": [
          "File: test/e2e/_macros.js -> test/e2e/_macros.js"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs"
        ],
        "test/integration/_macros.cjs||test/integration/_macros.cjs": [
          "File: test/integration/_macros.cjs -> test/integration/_macros.cjs"
        ],
        "test/integration/cjs/_.cjs||test/integration/cjs/_.cjs": [
          "File: test/integration/cjs/_.cjs -> test/integration/cjs/_.cjs"
        ],
        "test/integration/esm/_.js||test/integration/esm/_.js": [
          "File: test/integration/esm/_.js -> test/integration/esm/_.js"
        ],
        "test/prop/_arbitraries.js||test/prop/_arbitraries.js": [
          "File: test/prop/_arbitraries.js -> test/prop/_arbitraries.js"
        ],
        "test/prop/index/_.js||test/prop/index/_.js": [
          "File: test/prop/index/_.js -> test/prop/index/_.js"
        ],
        "test/prop/main/_.js||test/prop/main/_.js": [
          "File: test/prop/main/_.js -> test/prop/main/_.js"
        ],
        "test/prop/platforms/_.js||test/prop/platforms/_.js": [
          "File: test/prop/platforms/_.js -> test/prop/platforms/_.js"
        ],
        "test/prop/unix/_.js||test/prop/unix/_.js": [
          "File: test/prop/unix/_.js -> test/prop/unix/_.js"
        ],
        "test/prop/win/_.js||test/prop/win/_.js": [
          "File: test/prop/win/_.js -> test/prop/win/_.js"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js"
        ],
        "test/unit/main/_.js||test/unit/main/_.js": [
          "File: test/unit/main/_.js -> test/unit/main/_.js"
        ],
        "test/unit/main/_macros.js||test/unit/main/_macros.js": [
          "File: test/unit/main/_macros.js -> test/unit/main/_macros.js"
        ],
        "test/unit/platforms/_.js||test/unit/platforms/_.js": [
          "File: test/unit/platforms/_.js -> test/unit/platforms/_.js"
        ],
        "test/unit/platforms/_macros.js||test/unit/platforms/_macros.js": [
          "File: test/unit/platforms/_macros.js -> test/unit/platforms/_macros.js"
        ],
        "test/unit/unix/_.js||test/unit/unix/_.js": [
          "File: test/unit/unix/_.js -> test/unit/unix/_.js"
        ],
        "test/unit/win/_.js||test/unit/win/_.js": [
          "File: test/unit/win/_.js -> test/unit/win/_.js"
        ]
      }
    },
    {
      "candidate_hash": "efc60194f4b9e34f148f757ed70c040122f38960",
      "candidate_info": {
        "commit_hash": "efc60194f4b9e34f148f757ed70c040122f38960",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/efc60194f4b9e34f148f757ed70c040122f38960",
        "files": [
          ".eslintrc.yml",
          ".github/workflows/lint.yml",
          ".github/workflows/release.yml",
          "CHANGELOG.md",
          "RELEASE.md",
          "package-lock.json",
          "package.json",
          "script/bump-jsdoc.js",
          "script/clean.js",
          "script/hooks/pre-commit",
          "script/hooks/pre-push",
          "src/unix.js",
          "src/win.js",
          "test/compat/index.test.cjs",
          "test/fixtures/unix.cjs",
          "test/fuzz/_common.cjs",
          "test/fuzz/corpus/4fa4425d78f6ceb5c940f116a8afade9a1b023fc65477583049248e8ac28e3f2",
          "test/fuzz/exec-file.test.cjs",
          "test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs",
          "test/prop/_arbitraries.js",
          "test/prop/index/quote-all.test.js",
          "test/prop/index/quote.test.js",
          "test/prop/unix/quote.test.js",
          "test/prop/win/quote.test.js",
          "test/unit/_macros.js"
        ],
        "message": "Lint regular expressions & fix problematic ones (#373)\n\nAdd ESLint [1] with the eslint-plugin-regexp plugin [2] to start linting\nand enforcing styles for regular expressions. Given the heavy reliance\nof this package on regular expression, this should improve the package\nas well as remove any ambiguity on how regular expression _should_ be\nwritten.\n\nESLint is configured explicitly to only lint with the \"regexp\" plugin\n(i.e. eslint-plugin-regexp [2]), which is entirely manually configured\nto ensure 1) that everything is enabled (^1) and 2) it's clear and\nexplicit what is being linted for.\n\n`eslint` was added as an npm script, and is used in GitHub Actions as\nwell as the git hooks to continuously evaluate and report on regular\nexpressions.\n\nFirst off, all trivial errors from eslint-plugin-regexp [2] have been\nfixed by running `npm run eslint -- --fix`. This includes (but is not\nlimited to):\n\n- Ordering characters and character groups.\n- Simplifying expressions (e.g. use `\\0` over `\\u0000`).\n- Using character classes over single-character alternatives (groups of\n  2 single-character alternatives were converted manually).\n- Ungrouping unused capturing groups.\n\nOne notable automatically fixable rule is regarding the use `u` flag on\nall regular expressions (`require-unicode-regexp`). According to [2, 3]\nthis:\n\n> Make[s] the regular expression [handle] UTF-16 surrogate pairs\n> correctly. [And] make[s] the regular expression [throw] syntax\n> errors early [by] disabling Annex B extensions.\n\nThis change was also tested with Stryker following the removal of this\nflag in d4f4c3a due to a bug in Stryker 6.0.1 when used in Node.js 18.\n\nSecond, two regular expressions for Bash were updated following the\n`regexp/no-super-linear-backtracking` and `regexp/no-super-linear-move`.\n\n- `regexp/no-super-linear-backtracking`: This involved replacing the\n  first `[^]*?` group on line 55 by `[^,.]` to avoid the possibility of\n  exponential backtracking when exchanging characters with the second\n  `[^]*?` (through `(?:\\,|\\.)` because both \".\" and \",\" are matched by\n  `[^]`).\n- `regexp/no-super-linear-move`: \n  - Line 55: This regular expression was made more explicit to prevent\n    quadratic runtime by being more explicit about which characters are\n    allowed when as well as adding a negative look-behind for curly\n    braces prior to the first curly brace (to prevent needlessly\n    retrying the expression if the first in a sequency of opening curly\n    braces fails).\n  - Line 56 (now 58): This regular expression was simplified to escape\n    more often than is really necessary. But as unnecessarily escaped\n    characters are still interpreted correctly, this is preferred over a\n    super-linear expression. In particular, the `[^]*:` part of the RE\n    must match for any number of `:` to properly escape, this inherently\n    causes the expression to quadratic in runtime for successive colons.\n  - The work on this also resulted in the new test cases in the Unix\n    fixtures as well as the new fuzz corpus entry.\n\nThese rules also flagged some problems in the regular expression found\nin the fuzzing logic (`_common.cjs`), these were fixed by adding\nnegative look-behind for the appropriate character classes (e.g.\n`(?<!\\\\)`) as well as removing some unnecessary submatches (e.g. `\\0*`).\n\nThe three fixes for super-linear regular expression have been added to\nthe CHANGELOG as these have a notable effect for end-users w.r.t.\nperformance (for certain classes of input strings).\n\n--\n1. https://eslint.org/\n2. https://github.com/ota-meshi/eslint-plugin-regexp\n3. https://eslint.org/docs/latest/rules/require-unicode-regexp\n\n^1 The \"regexp/prefer-named-capture-group\" is disabled because it's\n(currently) not desired, unnamed groups seem okay for now.",
        "before_after_code_files": [
          "script/bump-jsdoc.js||script/bump-jsdoc.js",
          "script/clean.js||script/clean.js",
          "src/unix.js||src/unix.js",
          "src/win.js||src/win.js",
          "test/compat/index.test.cjs||test/compat/index.test.cjs",
          "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
          "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
          "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs",
          "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs",
          "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs",
          "test/prop/_arbitraries.js||test/prop/_arbitraries.js",
          "test/prop/index/quote-all.test.js||test/prop/index/quote-all.test.js",
          "test/prop/index/quote.test.js||test/prop/index/quote.test.js",
          "test/prop/unix/quote.test.js||test/prop/unix/quote.test.js",
          "test/prop/win/quote.test.js||test/prop/win/quote.test.js",
          "test/unit/_macros.js||test/unit/_macros.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js",
            "src/win.js||src/win.js",
            "test/fixtures/unix.cjs||test/fixtures/unix.cjs",
            "test/fuzz/_common.cjs||test/fuzz/_common.cjs",
            "test/unit/_macros.js||test/unit/_macros.js"
          ]
        }
      },
      "candidate_diff": {
        "script/bump-jsdoc.js||script/bump-jsdoc.js": [
          "File: script/bump-jsdoc.js -> script/bump-jsdoc.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: const index = fs.readFileSync(indexFile).toString();",
          "17: const newIndex = index.replace(",
          "19:   ` * @version ${version}`",
          "20: );",
          "",
          "[Removed Lines]",
          "18:   / \\* @version \\d+\\.\\d+\\.\\d+/,",
          "",
          "[Added Lines]",
          "18:   / \\* @version \\d+\\.\\d+\\.\\d+/u,",
          "",
          "---------------"
        ],
        "script/clean.js||script/clean.js": [
          "File: script/clean.js -> script/clean.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: }",
          "23: for (const file of fs.readdirSync(\".\")) {",
          "25:     const filePath = path.resolve(file);",
          "26:     deleteFile(filePath);",
          "27:   }",
          "",
          "[Removed Lines]",
          "24:   if (/^crash-[a-z0-9]+/.test(file)) {",
          "",
          "[Added Lines]",
          "24:   if (/^crash-[0-9a-z]+/u.test(file)) {",
          "",
          "---------------"
        ],
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: function escapeArgBash(arg, interpolation, quoted) {",
          "46:   if (interpolation) {",
          "47:     result = result",
          "57:   } else if (quoted) {",
          "59:   }",
          "61:   return result;",
          "",
          "[Removed Lines]",
          "44:   let result = arg.replace(/\\u0000/g, \"\");",
          "48:       .replace(/\\\\/g, \"\\\\\\\\\")",
          "49:       .replace(/\\n/g, \" \")",
          "50:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
          "51:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
          "52:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "53:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "54:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
          "55:       .replace(/\\{(?=([^]*?(?:\\,|\\.)[^]*?)\\})/g, \"\\\\{\")",
          "56:       .replace(/(?<=\\=(?:[^]*?:)?)(~)(?=\\:|\\=|\\-|\\+|\\/|0|\\s|$)/g, \"\\\\$1\");",
          "58:     result = result.replace(/'/g, `'\\\\''`);",
          "",
          "[Added Lines]",
          "44:   let result = arg.replace(/\\0/gu, \"\");",
          "48:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "49:       .replace(/\\n/gu, \" \")",
          "50:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "51:       .replace(/([*?])/gu, \"\\\\$1\")",
          "52:       .replace(/([$&;|])/gu, \"\\\\$1\")",
          "53:       .replace(/([()<>])/gu, \"\\\\$1\")",
          "54:       .replace(/([\"'`])/gu, \"\\\\$1\")",
          "55:       .replace(/(?<!\\{)\\{+(?=(?:[^{][^,.]*)?[,.][^}]*\\})/gu, (curlyBraces) =>",
          "56:         curlyBraces.replace(/\\{/gu, \"\\\\{\")",
          "57:       )",
          "58:       .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");",
          "60:     result = result.replace(/'/gu, `'\\\\''`);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: function escapeArgDash(arg, interpolation, quoted) {",
          "75:   if (interpolation) {",
          "76:     result = result",
          "84:   } else if (quoted) {",
          "86:   }",
          "88:   return result;",
          "",
          "[Removed Lines]",
          "73:   let result = arg.replace(/\\u0000/g, \"\");",
          "77:       .replace(/\\\\/g, \"\\\\\\\\\")",
          "78:       .replace(/\\n/g, \" \")",
          "79:       .replace(/(^|\\s)(~|#)/g, \"$1\\\\$2\")",
          "80:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
          "81:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "82:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "83:       .replace(/(\"|'|`)/g, \"\\\\$1\");",
          "85:     result = result.replace(/'/g, `'\\\\''`);",
          "",
          "[Added Lines]",
          "75:   let result = arg.replace(/\\0/gu, \"\");",
          "79:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "80:       .replace(/\\n/gu, \" \")",
          "81:       .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")",
          "82:       .replace(/([*?])/gu, \"\\\\$1\")",
          "83:       .replace(/([$&;|])/gu, \"\\\\$1\")",
          "84:       .replace(/([()<>])/gu, \"\\\\$1\")",
          "85:       .replace(/([\"'`])/gu, \"\\\\$1\");",
          "87:     result = result.replace(/'/gu, `'\\\\''`);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99: function escapeArgZsh(arg, interpolation, quoted) {",
          "102:   if (interpolation) {",
          "103:     result = result",
          "112:   } else if (quoted) {",
          "114:   }",
          "116:   return result;",
          "",
          "[Removed Lines]",
          "100:   let result = arg.replace(/\\u0000/g, \"\");",
          "104:       .replace(/\\\\/g, \"\\\\\\\\\")",
          "105:       .replace(/\\n/g, \" \")",
          "106:       .replace(/(^|\\s)(~|#|=)/g, \"$1\\\\$2\")",
          "107:       .replace(/(\\*|\\?)/g, \"\\\\$1\")",
          "108:       .replace(/(\\$|\\;|\\&|\\|)/g, \"\\\\$1\")",
          "109:       .replace(/(\\(|\\)|\\<|\\>)/g, \"\\\\$1\")",
          "110:       .replace(/(\"|'|`)/g, \"\\\\$1\")",
          "111:       .replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "113:     result = result.replace(/'/g, `'\\\\''`);",
          "",
          "[Added Lines]",
          "102:   let result = arg.replace(/\\0/gu, \"\");",
          "106:       .replace(/\\\\/gu, \"\\\\\\\\\")",
          "107:       .replace(/\\n/gu, \" \")",
          "108:       .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")",
          "109:       .replace(/([*?])/gu, \"\\\\$1\")",
          "110:       .replace(/([$&;|])/gu, \"\\\\$1\")",
          "111:       .replace(/([()<>])/gu, \"\\\\$1\")",
          "112:       .replace(/([\"'`])/gu, \"\\\\$1\")",
          "113:       .replace(/([[\\]{}])/gu, \"\\\\$1\");",
          "115:     result = result.replace(/'/gu, `'\\\\''`);",
          "",
          "---------------"
        ],
        "src/win.js||src/win.js": [
          "File: src/win.js -> src/win.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: function escapeArgCmd(arg, interpolation, quoted) {",
          "38:   if (interpolation) {",
          "39:     result = result",
          "44:   } else if (quoted) {",
          "46:   }",
          "48:   return result;",
          "",
          "[Removed Lines]",
          "36:   let result = arg.replace(/\\u0000/g, \"\").replace(/\\n|\\r/g, \" \");",
          "40:       .replace(/\\^/g, \"^^\")",
          "41:       .replace(/(<|>)/g, \"^$1\")",
          "42:       .replace(/(\")/g, \"^$1\")",
          "43:       .replace(/(\\&|\\|)/g, \"^$1\");",
          "45:     result = result.replace(/\"/g, `\"\"`);",
          "",
          "[Added Lines]",
          "36:   let result = arg.replace(/\\0/gu, \"\").replace(/[\\n\\r]/gu, \" \");",
          "40:       .replace(/\\^/gu, \"^^\")",
          "41:       .replace(/([<>])/gu, \"^$1\")",
          "42:       .replace(/(\")/gu, \"^$1\")",
          "43:       .replace(/([&|])/gu, \"^$1\");",
          "45:     result = result.replace(/\"/gu, `\"\"`);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: function escapeArgPowerShell(arg, interpolation, quoted) {",
          "60:   let result = arg",
          "65:   if (interpolation) {",
          "66:     result = result",
          "74:   } else if (quoted) {",
          "76:   }",
          "78:   return result;",
          "",
          "[Removed Lines]",
          "61:     .replace(/\\u0000/g, \"\")",
          "62:     .replace(/`/g, \"``\")",
          "63:     .replace(/\\$/g, \"`$\");",
          "67:       .replace(/\\n|\\r/g, \" \")",
          "68:       .replace(/(^|\\s|\\u0085)((?:\\*|[1-6])?)(>)/g, \"$1$2`$3\")",
          "69:       .replace(/(^|\\s|\\u0085)(<|@|#|-|\\:|\\])/g, \"$1`$2\")",
          "70:       .replace(/(,|\\;|\\&|\\|)/g, \"`$1\")",
          "71:       .replace(/(\\(|\\)|\\{|\\})/g, \"`$1\")",
          "72:       .replace(/('|\u2019|\u2018|\u201b|\u201a)/g, \"`$1\")",
          "73:       .replace(/(\"|\u201c|\u201d|\u201e)/g, \"`$1\");",
          "75:     result = result.replace(/(\"|\u201c|\u201d|\u201e)/g, \"$1$1\");",
          "",
          "[Added Lines]",
          "61:     .replace(/\\0/gu, \"\")",
          "62:     .replace(/`/gu, \"``\")",
          "63:     .replace(/\\$/gu, \"`$$\");",
          "67:       .replace(/[\\n\\r]/gu, \" \")",
          "68:       .replace(/(^|[\\s\\u0085])([*1-6]?)(>)/gu, \"$1$2`$3\")",
          "69:       .replace(/(^|[\\s\\u0085])([#\\-:<@\\]])/gu, \"$1`$2\")",
          "70:       .replace(/([&,;|])/gu, \"`$1\")",
          "71:       .replace(/([(){}])/gu, \"`$1\")",
          "72:       .replace(/(['\u2018\u2019\u201a\u201b])/gu, \"`$1\")",
          "73:       .replace(/([\"\u201c\u201d\u201e])/gu, \"`$1\");",
          "75:     result = result.replace(/([\"\u201c\u201d\u201e])/gu, \"$1$1\");",
          "",
          "---------------"
        ],
        "test/compat/index.test.cjs||test/compat/index.test.cjs": [
          "File: test/compat/index.test.cjs -> test/compat/index.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     const input = \"Hello world!\";",
          "17:     const result = shescape.escape(input);",
          "18:     assert.notStrictEqual(result, \"\");",
          "20:   });",
          "22:   it(\"has a functioning `escapeAll` function\", function () {",
          "",
          "[Removed Lines]",
          "19:     assert.ok(!/^(?<q>\"|').*(\\k<q>)$/.test(result));",
          "",
          "[Added Lines]",
          "19:     assert.ok(!/^(?<q>\"|').*\\k<q>$/u.test(result));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     const result = shescape.escapeAll(inputs);",
          "28:     for (const output of result) {",
          "29:       assert.notStrictEqual(output, \"\");",
          "31:     }",
          "32:   });",
          "",
          "[Removed Lines]",
          "30:       assert.ok(!/^(?<q>\"|').*(\\k<q>)$/.test(output));",
          "",
          "[Added Lines]",
          "30:       assert.ok(!/^(?<q>\"|').*\\k<q>$/u.test(output));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:     const input = \"Hello world!\";",
          "39:     const result = shescape.quote(input);",
          "40:     assert.notStrictEqual(result, \"\");",
          "42:   });",
          "44:   it(\"has a functioning `quoteAll` function\", function () {",
          "",
          "[Removed Lines]",
          "41:     assert.ok(/^(?<q>\"|').*(\\k<q>)$/.test(result));",
          "",
          "[Added Lines]",
          "41:     assert.ok(/^(?<q>\"|').*\\k<q>$/u.test(result));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:     const result = shescape.quoteAll(inputs);",
          "50:     for (const output of result) {",
          "51:       assert.notStrictEqual(output, \"\");",
          "53:     }",
          "54:   });",
          "55: });",
          "",
          "[Removed Lines]",
          "52:       assert.ok(/^(?<q>\"|').*(\\k<q>)$/.test(output));",
          "",
          "[Added Lines]",
          "52:       assert.ok(/^(?<q>\"|').*\\k<q>$/u.test(output));",
          "",
          "---------------"
        ],
        "test/fixtures/unix.cjs||test/fixtures/unix.cjs": [
          "File: test/fixtures/unix.cjs -> test/fixtures/unix.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:         input: \"a=~:~\",",
          "292:         expected: { interpolation: \"a=\\\\~:\\\\~\", noInterpolation: \"a=~:~\" },",
          "293:       },",
          "294:       {",
          "295:         input: \"a=:~:\",",
          "296:         expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:       {",
          "295:         input: \"a=~:~:~\",",
          "296:         expected: {",
          "297:           interpolation: \"a=\\\\~:\\\\~:\\\\~\",",
          "298:           noInterpolation: \"a=~:~:~\",",
          "299:         },",
          "300:       },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:         input: \"a=b:~:\",",
          "304:         expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },",
          "305:       },",
          "306:       {",
          "307:         input: \"a=\\r:~:\",",
          "308:         expected: { interpolation: \"a=\\r:\\\\~:\", noInterpolation: \"a=\\r:~:\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:       {",
          "314:         input: \"a=:b:~\",",
          "315:         expected: { interpolation: \"a=:b:\\\\~\", noInterpolation: \"a=:b:~\" },",
          "316:       },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "659:           noInterpolation: \"a{0..2\\u2029}b\",",
          "660:         },",
          "661:       },",
          "662:     ],",
          "663:     \"angle brackets ('<', '>')\": [",
          "664:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:       {",
          "674:         input: \"a{{b,c}\",",
          "675:         expected: { interpolation: \"a\\\\{\\\\{b,c}\", noInterpolation: \"a{{b,c}\" },",
          "676:       },",
          "677:       {",
          "678:         input: \"a{b{c,d}\",",
          "679:         expected: {",
          "680:           interpolation: \"a\\\\{b\\\\{c,d}\",",
          "681:           noInterpolation: \"a{b{c,d}\",",
          "682:         },",
          "683:       },",
          "",
          "---------------"
        ],
        "test/fuzz/_common.cjs||test/fuzz/_common.cjs": [
          "File: test/fuzz/_common.cjs -> test/fuzz/_common.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "19: function isShellCmd(shell) {",
          "21: }",
          "23: function isShellPowerShell(shell) {",
          "25: }",
          "27: function getExpectedOutput({ arg, shell }, normalizeWhitespace) {",
          "30:   if (normalizeWhitespace) {",
          "32:     if (isShellPowerShell(shell)) {",
          "37:     } else if (isShellCmd(shell)) {",
          "39:     } else {",
          "41:     }",
          "44:     if (isShellPowerShell(shell)) {",
          "49:     } else if (isShellCmd(shell)) {",
          "51:     } else {",
          "53:     }",
          "54:   } else {",
          "55:     if (isShellCmd(shell)) {",
          "57:     }",
          "58:   }",
          "",
          "[Removed Lines]",
          "20:   return (isWindows() && shell === undefined) || /cmd\\.exe$/.test(shell);",
          "24:   return /powershell\\.exe$/.test(shell);",
          "28:   arg = arg.replace(/\\u0000/g, \"\"); // Remove null characters, like Shescape",
          "33:       arg = arg.replace(",
          "34:         /^[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+|[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+$/g,",
          "35:         \"\"",
          "36:       );",
          "38:       arg = arg.replace(/^[ \\t\\n\\r]+|[ \\t\\n\\r]+$/g, \"\");",
          "40:       arg = arg.replace(/^[ \\t\\n]+|[ \\t\\n]+$/g, \"\");",
          "45:       arg = arg.replace(",
          "46:         /[ \\t\\n\\v\\f\\r\\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g,",
          "47:         \" \"",
          "48:       );",
          "50:       arg = arg.replace(/[ \\t\\n\\r]+/g, \" \");",
          "52:       arg = arg.replace(/[ \\t\\n]+/g, \" \");",
          "56:       arg = arg.replace(/[\\n\\r]/g, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "[Added Lines]",
          "20:   return (isWindows() && shell === undefined) || /cmd\\.exe$/u.test(shell);",
          "24:   return /powershell\\.exe$/u.test(shell);",
          "28:   arg = arg.replace(/\\0/gu, \"\"); // Remove null characters, like Shescape",
          "33:       arg = arg.replace(/^[\\s\\u0085]+|(?<![\\s\\u0085])[\\s\\u0085]+$/gu, \"\");",
          "35:       arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");",
          "37:       arg = arg.replace(/^[\\t\\n ]+|(?<![\\t\\n ])[\\t\\n ]+$/gu, \"\");",
          "42:       arg = arg.replace(/[\\s\\u0085]+/gu, \" \");",
          "44:       arg = arg.replace(/[\\t\\n\\r ]+/gu, \" \");",
          "46:       arg = arg.replace(/[\\t\\n ]+/gu, \" \");",
          "50:       arg = arg.replace(/[\\n\\r]/gu, \" \"); // Change newlines to spaces, like Shescape",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:       if (quoted) {",
          "77:       } else {",
          "83:       }",
          "84:     } else if (isShellPowerShell(shell)) {",
          "95:       } else {",
          "104:       }",
          "105:     }",
          "106:   }",
          "",
          "[Removed Lines]",
          "76:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*(\"|$))/g, \"$1$1\");",
          "79:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*\")/g, \"$1$1\");",
          "82:         arg = arg.replace(/\"/g, `\\\\\"`);",
          "87:       if (/[\\s\\u0085]/g.test(arg) && quoted) {",
          "90:         arg = arg.replace(/\"/g, `\"\"`);",
          "94:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*(\"|$))/g, \"$1$1\");",
          "99:         arg = arg.replace(/((\\\\\\u0000*)+)(?=\\u0000*\")/g, \"$1$1\");",
          "103:         arg = arg.replace(/\"/g, `\\\\\"`);",
          "",
          "[Added Lines]",
          "70:         arg = arg.replace(/(?<!\\\\)((\\\\\\0*)+)(?=(\"|$))/gu, \"$1$1\");",
          "73:         arg = arg.replace(/(?<!\\\\)((\\\\\\0*)+)(?=\")/gu, \"$1$1\");",
          "76:         arg = arg.replace(/\"/gu, `\\\\\"`);",
          "81:       if (/[\\s\\u0085]/u.test(arg) && quoted) {",
          "84:         arg = arg.replace(/\"/gu, `\"\"`);",
          "88:         arg = arg.replace(/(?<!\\\\)((\\\\\\0*)+)(?=(\"|$))/gu, \"$1$1\");",
          "93:         arg = arg.replace(/(?<!\\\\)((\\\\\\0*)+)(?=\")/gu, \"$1$1\");",
          "97:         arg = arg.replace(/\"/gu, `\\\\\"`);",
          "",
          "---------------"
        ],
        "test/fuzz/exec-file.test.cjs||test/fuzz/exec-file.test.cjs": [
          "File: test/fuzz/exec-file.test.cjs -> test/fuzz/exec-file.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   const expected = common.getExpectedOutput({",
          "86:     ...argInfo,",
          "87:     arg: (common.isShellPowerShell(shell)",
          "89:       : args",
          "90:     ).join(\" \"),",
          "91:   });",
          "",
          "[Removed Lines]",
          "88:       ? args.filter((arg) => arg.replace(/\\u0000/g, \"\").length !== 0)",
          "",
          "[Added Lines]",
          "88:       ? args.filter((arg) => arg.replace(/\\0/gu, \"\").length !== 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: function fuzz(buf) {",
          "96:   const arg = buf.toString();",
          "99:   checkWithoutShell(arg);",
          "100:   checkWithoutShellMultipleArgs(args);",
          "",
          "[Removed Lines]",
          "97:   const args = arg.split(/[\\n\\r]+/g);",
          "",
          "[Added Lines]",
          "97:   const args = arg.split(/[\\n\\r]+/u);",
          "",
          "---------------"
        ],
        "test/fuzz/fork.test.cjs||test/fuzz/fork.test.cjs": [
          "File: test/fuzz/fork.test.cjs -> test/fuzz/fork.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: async function fuzz(buf) {",
          "69:   const arg = buf.toString();",
          "72:   try {",
          "73:     await check(arg);",
          "",
          "[Removed Lines]",
          "70:   const args = arg.split(/[\\n\\r]+/g);",
          "",
          "[Added Lines]",
          "70:   const args = arg.split(/[\\n\\r]+/u);",
          "",
          "---------------"
        ],
        "test/fuzz/spawn.test.cjs||test/fuzz/spawn.test.cjs": [
          "File: test/fuzz/spawn.test.cjs -> test/fuzz/spawn.test.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   const expected = common.getExpectedOutput({",
          "86:     ...argInfo,",
          "87:     arg: (common.isShellPowerShell(shell)",
          "89:       : args",
          "90:     ).join(\" \"),",
          "91:   });",
          "",
          "[Removed Lines]",
          "88:       ? args.filter((arg) => arg.replace(/\\u0000/g, \"\").length !== 0)",
          "",
          "[Added Lines]",
          "88:       ? args.filter((arg) => arg.replace(/\\0/gu, \"\").length !== 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: function fuzz(buf) {",
          "96:   const arg = buf.toString();",
          "99:   checkWithoutShell(arg);",
          "100:   checkWithShell(arg);",
          "",
          "[Removed Lines]",
          "97:   const args = arg.split(/[\\n\\r]+/g);",
          "",
          "[Added Lines]",
          "97:   const args = arg.split(/[\\n\\r]+/u);",
          "",
          "---------------"
        ],
        "test/prop/_arbitraries.js||test/prop/_arbitraries.js": [
          "File: test/prop/_arbitraries.js -> test/prop/_arbitraries.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: export const windowsPath = () =>",
          "218:   fc",
          "219:     .tuple(",
          "221:       fc.string()",
          "222:     )",
          "223:     .map(([driveLetter, path]) => `${driveLetter}:\\\\${path}`);",
          "",
          "[Removed Lines]",
          "220:       fc.char().filter((v) => /[A-Z]/.test(v)),",
          "",
          "[Added Lines]",
          "220:       fc.char().filter((v) => /[A-Z]/u.test(v)),",
          "",
          "---------------"
        ],
        "test/prop/index/quote-all.test.js||test/prop/index/quote-all.test.js": [
          "File: test/prop/index/quote-all.test.js -> test/prop/index/quote-all.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     const result = quoteAll(args, options);",
          "19:     for (const entry of result) {",
          "20:       t.is(typeof entry, \"string\");",
          "22:     }",
          "24:     t.pass(); // in case `result.length === 0`",
          "",
          "[Removed Lines]",
          "21:       t.regex(entry, /^(?<q>\"|').*(\\k<q>)$/);",
          "",
          "[Added Lines]",
          "21:       t.regex(entry, /^(?<q>\"|').*\\k<q>$/u);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     const entry = result[0];",
          "45:     t.is(typeof entry, \"string\");",
          "47:   }",
          "48: );",
          "",
          "[Removed Lines]",
          "46:     t.regex(entry, /^(?<q>\"|').*(\\k<q>)$/);",
          "",
          "[Added Lines]",
          "46:     t.regex(entry, /^(?<q>\"|').*\\k<q>$/u);",
          "",
          "---------------"
        ],
        "test/prop/index/quote.test.js||test/prop/index/quote.test.js": [
          "File: test/prop/index/quote.test.js -> test/prop/index/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   (t, arg, options) => {",
          "18:     const result = quote(arg, options);",
          "19:     t.is(typeof result, \"string\");",
          "21:   }",
          "22: );",
          "",
          "[Removed Lines]",
          "20:     t.regex(result, /^(?<q>\"|').*(\\k<q>)$/);",
          "",
          "[Added Lines]",
          "20:     t.regex(result, /^(?<q>\"|').*\\k<q>$/u);",
          "",
          "---------------"
        ],
        "test/prop/unix/quote.test.js||test/prop/unix/quote.test.js": [
          "File: test/prop/unix/quote.test.js -> test/prop/unix/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     const result = quoteFn(input);",
          "20:     t.is(typeof result, \"string\");",
          "21:     t.is(result.substring(1, input.length + 1), input);",
          "23:   }",
          "24: );",
          "",
          "[Removed Lines]",
          "22:     t.regex(result, /^(\".*\"|'.*')$/);",
          "",
          "[Added Lines]",
          "22:     t.regex(result, /^(\".*\"|'.*')$/u);",
          "",
          "---------------"
        ],
        "test/prop/win/quote.test.js||test/prop/win/quote.test.js": [
          "File: test/prop/win/quote.test.js -> test/prop/win/quote.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     const result = quoteFn(input);",
          "20:     t.is(typeof result, \"string\");",
          "21:     t.is(result.substring(1, input.length + 1), input);",
          "23:   }",
          "24: );",
          "",
          "[Removed Lines]",
          "22:     t.regex(result, /^(\".*\"|'.*')$/);",
          "",
          "[Added Lines]",
          "22:     t.regex(result, /^(\".*\"|'.*')$/u);",
          "",
          "---------------"
        ],
        "test/unit/_macros.js||test/unit/_macros.js": [
          "File: test/unit/_macros.js -> test/unit/_macros.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   },",
          "30:   title(_, { input, interpolation, quoted, shellName }) {",
          "31:     input = input",
          "58:     interpolation = interpolation ? \"interpolation\" : \"no interpolation\";",
          "59:     quoted = quoted ? \"quoted\" : \"not quoted\";",
          "",
          "[Removed Lines]",
          "32:       .replace(/\\u0000/g, \"\\\\u{0000}\")",
          "33:       .replace(/\\u0009/g, \"\\\\t\")",
          "34:       .replace(/\\u000A/g, \"\\\\n\")",
          "35:       .replace(/\\u000B/g, \"\\\\v\")",
          "36:       .replace(/\\u000C/g, \"\\\\f\")",
          "37:       .replace(/\\u000D/g, \"\\\\r\")",
          "38:       .replace(/\\u0085/g, \"\\\\u{0085}\")",
          "39:       .replace(/\\u00A0/g, \"\\\\u{00A0}\")",
          "40:       .replace(/\\u1680/g, \"\\\\u{1680}\")",
          "41:       .replace(/\\u2000/g, \"\\\\u{2000}\")",
          "42:       .replace(/\\u2001/g, \"\\\\u{2001}\")",
          "43:       .replace(/\\u2002/g, \"\\\\u{2002}\")",
          "44:       .replace(/\\u2003/g, \"\\\\u{2003}\")",
          "45:       .replace(/\\u2004/g, \"\\\\u{2004}\")",
          "46:       .replace(/\\u2005/g, \"\\\\u{2005}\")",
          "47:       .replace(/\\u2006/g, \"\\\\u{2006}\")",
          "48:       .replace(/\\u2007/g, \"\\\\u{2007}\")",
          "49:       .replace(/\\u2008/g, \"\\\\u{2008}\")",
          "50:       .replace(/\\u2009/g, \"\\\\u{2009}\")",
          "51:       .replace(/\\u200A/g, \"\\\\u{200A}\")",
          "52:       .replace(/\\u2028/g, \"\\\\u{2028}\")",
          "53:       .replace(/\\u2029/g, \"\\\\u{2029}\")",
          "54:       .replace(/\\u202F/g, \"\\\\u{202F}\")",
          "55:       .replace(/\\u205F/g, \"\\\\u{205F}\")",
          "56:       .replace(/\\u3000/g, \"\\\\u{3000}\")",
          "57:       .replace(/\\uFEFF/g, \"\\\\u{FEFF}\");",
          "",
          "[Added Lines]",
          "32:       .replace(/\\0/gu, \"\\\\u{0000}\")",
          "33:       .replace(/\\t/gu, \"\\\\t\")",
          "34:       .replace(/\\n/gu, \"\\\\n\")",
          "35:       .replace(/\\v/gu, \"\\\\v\")",
          "36:       .replace(/\\f/gu, \"\\\\f\")",
          "37:       .replace(/\\r/gu, \"\\\\r\")",
          "38:       .replace(/\\u0085/gu, \"\\\\u{0085}\")",
          "39:       .replace(/\\u00A0/gu, \"\\\\u{00A0}\")",
          "40:       .replace(/\\u1680/gu, \"\\\\u{1680}\")",
          "41:       .replace(/\\u2000/gu, \"\\\\u{2000}\")",
          "42:       .replace(/\\u2001/gu, \"\\\\u{2001}\")",
          "43:       .replace(/\\u2002/gu, \"\\\\u{2002}\")",
          "44:       .replace(/\\u2003/gu, \"\\\\u{2003}\")",
          "45:       .replace(/\\u2004/gu, \"\\\\u{2004}\")",
          "46:       .replace(/\\u2005/gu, \"\\\\u{2005}\")",
          "47:       .replace(/\\u2006/gu, \"\\\\u{2006}\")",
          "48:       .replace(/\\u2007/gu, \"\\\\u{2007}\")",
          "49:       .replace(/\\u2008/gu, \"\\\\u{2008}\")",
          "50:       .replace(/\\u2009/gu, \"\\\\u{2009}\")",
          "51:       .replace(/\\u200A/gu, \"\\\\u{200A}\")",
          "52:       .replace(/\\u2028/gu, \"\\\\u{2028}\")",
          "53:       .replace(/\\u2029/gu, \"\\\\u{2029}\")",
          "54:       .replace(/\\u202F/gu, \"\\\\u{202F}\")",
          "55:       .replace(/\\u205F/gu, \"\\\\u{205F}\")",
          "56:       .replace(/\\u3000/gu, \"\\\\u{3000}\")",
          "57:       .replace(/\\uFEFF/gu, \"\\\\u{FEFF}\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "413810c786687f73824313a45d4fe287e4957d3f",
      "candidate_info": {
        "commit_hash": "413810c786687f73824313a45d4fe287e4957d3f",
        "repo": "ericcornelissen/shescape",
        "commit_url": "https://github.com/ericcornelissen/shescape/commit/413810c786687f73824313a45d4fe287e4957d3f",
        "files": [
          "CHANGELOG.md",
          "src/unix.js",
          "test/fuzz/corpus/490fb569292a3507d08320b6aeb310bf530024c8dd5d30365bdee1774706608b",
          "test/fuzz/corpus/c909a90d0acf3f09aa0ece07d37e1d3f58588f7302ec4ce5303816b5050d8bb2",
          "test/fuzz/corpus/e8909bd94f62688196ce77d71583472d3506f95aa70d9442caba6dec68050926",
          "test/unix.test.js"
        ],
        "message": "Escape trailing strings like `=~` for Bash-like shells (#170)\n\n* Add examples of args with string like `=~` to fuzz corpus\n\n* Test escaping of args with string like `=~` for Bash-like shells\n\n* Escape strings like `=~` for Bash-like shells\n\n* Update CHANGELOG",
        "before_after_code_files": [
          "src/unix.js||src/unix.js",
          "test/unix.test.js||test/unix.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/unix.js||src/unix.js"
          ],
          "candidate": [
            "src/unix.js||src/unix.js"
          ]
        }
      },
      "candidate_diff": {
        "src/unix.js||src/unix.js": [
          "File: src/unix.js -> src/unix.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   if (shell.endsWith(\"zsh\")) {",
          "39:     result = result.replace(/^=/gu, \"\\\\=\").replace(/(\\[|\\]|\\{|\\})/g, \"\\\\$1\");",
          "40:   }",
          "42:   return result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   } else {",
          "41:     result = result.replace(/(?<=\\=(?:.*?:)?)(~)(?=\\:|$)/g, \"\\\\$1\");",
          "",
          "---------------"
        ],
        "test/unix.test.js||test/unix.test.js": [
          "File: test/unix.test.js -> test/unix.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:             assert.strictEqual(output, \"\\\\~foobar\");",
          "441:           });",
          "444:             const input = \"foo~bar\";",
          "445:             const output = escapeShellArg(input, shell, interpolation);",
          "446:             assert.strictEqual(output, input);",
          "",
          "[Removed Lines]",
          "443:           it(\"does nothing to a tilde not at the start\", function () {",
          "",
          "[Added Lines]",
          "443:           it(\"does nothing to a tilde in the middle\", function () {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:             const output = escapeShellArg(input, shell, interpolation);",
          "452:             assert.strictEqual(output, \"\\\\~foo~bar\");",
          "453:           });",
          "454:         });",
          "456:         describe(\"hashtags ('#')\", function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:           describe(\"combined with equals ('=')\", function () {",
          "456:             it(\"escapes a tilde right after '=' at the end\", function () {",
          "457:               const input = \"foobar=~\";",
          "458:               const output = escapeShellArg(input, shell, interpolation);",
          "459:               assert.strictEqual(output, \"foobar=\\\\~\");",
          "460:             });",
          "462:             it(\"escapes a tilde after '=' with a colon in between\", function () {",
          "463:               const input = \"foobar=:~\";",
          "464:               const output = escapeShellArg(input, shell, interpolation);",
          "465:               assert.strictEqual(output, \"foobar=:\\\\~\");",
          "466:             });",
          "468:             it(\"escapes a tilde after '=' with a colon and text in between\", function () {",
          "469:               const input = \"foo=bar:~\";",
          "470:               const output = escapeShellArg(input, shell, interpolation);",
          "471:               assert.strictEqual(output, \"foo=bar:\\\\~\");",
          "472:             });",
          "474:             it(\"escapes a tilde right after '=' with a trailing colon\", function () {",
          "475:               const input = \"foobar=~:\";",
          "476:               const output = escapeShellArg(input, shell, interpolation);",
          "477:               assert.strictEqual(output, \"foobar=\\\\~:\");",
          "478:             });",
          "480:             it(\"escapes a tilde right after '=' with a trailing colon and text\", function () {",
          "481:               const input = \"foo=~:bar\";",
          "482:               const output = escapeShellArg(input, shell, interpolation);",
          "483:               assert.strictEqual(output, \"foo=\\\\~:bar\");",
          "484:             });",
          "486:             it(\"escapes a tilde after '=' sandwiched between colons\", function () {",
          "487:               const input = \"foobar=:~:\";",
          "488:               const output = escapeShellArg(input, shell, interpolation);",
          "489:               assert.strictEqual(output, \"foobar=:\\\\~:\");",
          "490:             });",
          "492:             it(\"escapes a tilde after '=' sandwiched between colons and text before\", function () {",
          "493:               const input = \"foo=bar:~:\";",
          "494:               const output = escapeShellArg(input, shell, interpolation);",
          "495:               assert.strictEqual(output, \"foo=bar:\\\\~:\");",
          "496:             });",
          "498:             it(\"escapes a tilde after '=' sandwiched between colons and text after\", function () {",
          "499:               const input = \"foo=:~:bar\";",
          "500:               const output = escapeShellArg(input, shell, interpolation);",
          "501:               assert.strictEqual(output, \"foo=:\\\\~:bar\");",
          "502:             });",
          "504:             it(\"escapes a tilde after '=' sandwiched between colons and text\", function () {",
          "505:               const input = \"praise=the:~:sun\";",
          "506:               const output = escapeShellArg(input, shell, interpolation);",
          "507:               assert.strictEqual(output, \"praise=the:\\\\~:sun\");",
          "508:             });",
          "510:             it(\"escapes multiple tildes after '=' separated by colons\", function () {",
          "511:               const input = \"foobar=~:~\";",
          "512:               const output = escapeShellArg(input, shell, interpolation);",
          "513:               assert.strictEqual(output, \"foobar=\\\\~:\\\\~\");",
          "514:             });",
          "516:             it(\"does nothing to a tilde with trailing text after '='\", function () {",
          "517:               const input = \"foo=~bar\";",
          "518:               const output = escapeShellArg(input, shell, interpolation);",
          "519:               assert.strictEqual(output, input);",
          "520:             });",
          "522:             it(\"does nothing to a tilde with leading text after '='\", function () {",
          "523:               const input = \"foo=bar~\";",
          "524:               const output = escapeShellArg(input, shell, interpolation);",
          "525:               assert.strictEqual(output, input);",
          "526:             });",
          "528:             it(\"does nothing to a tilde before '='\", function () {",
          "529:               const input = \"foo~bar=\";",
          "530:               const output = escapeShellArg(input, shell, interpolation);",
          "531:               assert.strictEqual(output, \"foo~bar=\");",
          "532:             });",
          "534:             it(\"only escapes a tilde after the '='\", function () {",
          "535:               const input = \"foo~bar=~\";",
          "536:               const output = escapeShellArg(input, shell, interpolation);",
          "537:               assert.strictEqual(output, \"foo~bar=\\\\~\");",
          "538:             });",
          "539:           });",
          "",
          "---------------"
        ]
      }
    }
  ]
}