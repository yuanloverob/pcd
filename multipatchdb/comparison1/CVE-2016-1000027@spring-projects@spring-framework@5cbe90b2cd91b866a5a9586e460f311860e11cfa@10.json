{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd282e632f06e77f2c526ded12a83072cf659794",
      "candidate_info": {
        "commit_hash": "bd282e632f06e77f2c526ded12a83072cf659794",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/bd282e632f06e77f2c526ded12a83072cf659794",
        "files": [
          "spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java",
          "spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java",
          "spring-core/src/main/java/org/springframework/core/env/Environment.java",
          "spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java"
        ],
        "message": "Polishing (cherry picked from commit 6e5b873)",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java||spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java",
          "spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java||spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java",
          "spring-core/src/main/java/org/springframework/core/env/Environment.java||spring-core/src/main/java/org/springframework/core/env/Environment.java",
          "spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java||spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java||spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java": [
          "File: spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java -> spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java"
        ],
        "spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java||spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java": [
          "File: spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java -> spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java"
        ],
        "spring-core/src/main/java/org/springframework/core/env/Environment.java||spring-core/src/main/java/org/springframework/core/env/Environment.java": [
          "File: spring-core/src/main/java/org/springframework/core/env/Environment.java -> spring-core/src/main/java/org/springframework/core/env/Environment.java"
        ],
        "spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java||spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java": [
          "File: spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java -> spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  }",
          "53:  @Override",
          "57:  }",
          "59:  @Override",
          "63:  }",
          "64: }",
          "",
          "[Removed Lines]",
          "54:  public void marshal(Object source, HierarchicalStreamWriter writer,",
          "55:    MarshallingContext context) {",
          "56:   throw new UnsupportedOperationException(\"marshalling not supported\");",
          "60:  public Object unmarshal(HierarchicalStreamReader reader,",
          "61:    UnmarshallingContext context) {",
          "62:   throw new UnsupportedOperationException(\"unmarshalling not supported\");",
          "",
          "[Added Lines]",
          "56:  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {",
          "57:   throw new UnsupportedOperationException(\"Marshalling not supported\");",
          "61:  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {",
          "62:   throw new UnsupportedOperationException(\"Unmarshalling not supported\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b8822fab41b17c4db1321e3697f2ea19e024a65",
      "candidate_info": {
        "commit_hash": "0b8822fab41b17c4db1321e3697f2ea19e024a65",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/0b8822fab41b17c4db1321e3697f2ea19e024a65",
        "files": [
          "spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java"
        ],
        "message": "Avoid double getFlushMode call",
        "before_after_code_files": [
          "spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java||spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java||spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java": [
          "File: spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java -> spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:    if (!definition.isReadOnly() && !txObject.isNewSession()) {",
          "454:     FlushMode flushMode = session.getFlushMode();",
          "456:      session.setFlushMode(FlushMode.AUTO);",
          "457:      txObject.getSessionHolder().setPreviousFlushMode(flushMode);",
          "458:     }",
          "",
          "[Removed Lines]",
          "455:     if (FlushMode.isManualFlushMode(session.getFlushMode())) {",
          "",
          "[Added Lines]",
          "455:     if (FlushMode.isManualFlushMode(flushMode)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9a2d0af98073f03660a90367f05860a77a4de0c",
      "candidate_info": {
        "commit_hash": "b9a2d0af98073f03660a90367f05860a77a4de0c",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/b9a2d0af98073f03660a90367f05860a77a4de0c",
        "files": [
          "spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java",
          "spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java",
          "spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java",
          "spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java",
          "spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java",
          "spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java",
          "spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java",
          "spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java",
          "spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java",
          "spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java",
          "spring-jdbc/src/test/resources/org/springframework/jdbc/object/GenericSqlQueryTests-context.xml",
          "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java",
          "spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java"
        ],
        "message": "Polishing",
        "before_after_code_files": [
          "spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java||spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java",
          "spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java||spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java",
          "spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java||spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java",
          "spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java||spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java",
          "spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java||spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java",
          "spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java||spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java",
          "spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java||spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java",
          "spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java||spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java",
          "spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java||spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java",
          "spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java||spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java",
          "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java||spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java",
          "spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java||spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java||spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java": [
          "File: spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java -> spring-aop/src/test/java/org/springframework/tests/aop/interceptor/NopInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   ++count;",
          "47:  }",
          "49:  public boolean equals(Object other) {",
          "50:   if (!(other instanceof NopInterceptor)) {",
          "51:    return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  @Override",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   return this.count == ((NopInterceptor) other).count;",
          "57:  }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:  @Override",
          "59:  public int hashCode() {",
          "60:   return NopInterceptor.class.hashCode();",
          "61:  }",
          "",
          "---------------"
        ],
        "spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java||spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java": [
          "File: spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java -> spring-aop/src/test/java/org/springframework/tests/sample/beans/SerializablePerson.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   return p.age == age && ObjectUtils.nullSafeEquals(name, p.name);",
          "68:  }",
          "70: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:  @Override",
          "74:  public int hashCode() {",
          "75:   return SerializablePerson.class.hashCode();",
          "76:  }",
          "",
          "---------------"
        ],
        "spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java||spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java": [
          "File: spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java -> spring-beans/src/test/java/org/springframework/tests/beans/CollectingReaderEventListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: public class CollectingReaderEventListener implements ReaderEventListener {",
          "48:  @Override",
          "",
          "[Removed Lines]",
          "39:  private final List defaults = new LinkedList();",
          "41:  private final Map componentDefinitions = new LinkedHashMap<>(8);",
          "43:  private final Map aliasMap = new LinkedHashMap<>(8);",
          "45:  private final List imports = new LinkedList();",
          "",
          "[Added Lines]",
          "39:  private final List<DefaultsDefinition> defaults = new LinkedList<DefaultsDefinition>();",
          "41:  private final Map<String, ComponentDefinition> componentDefinitions =",
          "42:    new LinkedHashMap<String, ComponentDefinition>(8);",
          "44:  private final Map<String, List<AliasDefinition>> aliasMap =",
          "45:    new LinkedHashMap<String, List<AliasDefinition>>(8);",
          "47:  private final List<ImportDefinition> imports = new LinkedList<ImportDefinition>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   this.defaults.add(defaultsDefinition);",
          "51:  }",
          "54:   return Collections.unmodifiableList(this.defaults);",
          "55:  }",
          "",
          "[Removed Lines]",
          "53:  public List getDefaults() {",
          "",
          "[Added Lines]",
          "55:  public List<DefaultsDefinition> getDefaults() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:  }",
          "62:  public ComponentDefinition getComponentDefinition(String name) {",
          "64:  }",
          "66:  public ComponentDefinition[] getComponentDefinitions() {",
          "69:  }",
          "71:  @Override",
          "72:  public void aliasRegistered(AliasDefinition aliasDefinition) {",
          "76:    this.aliasMap.put(aliasDefinition.getBeanName(), aliases);",
          "77:   }",
          "78:   aliases.add(aliasDefinition);",
          "79:  }",
          "84:  }",
          "86:  @Override",
          "",
          "[Removed Lines]",
          "63:   return (ComponentDefinition) this.componentDefinitions.get(name);",
          "67:   Collection collection = this.componentDefinitions.values();",
          "68:   return (ComponentDefinition[]) collection.toArray(new ComponentDefinition[collection.size()]);",
          "73:   List aliases = (List) this.aliasMap.get(aliasDefinition.getBeanName());",
          "74:   if(aliases == null) {",
          "75:    aliases = new ArrayList();",
          "81:  public List getAliases(String beanName) {",
          "82:   List aliases = (List) this.aliasMap.get(beanName);",
          "83:   return aliases == null ? null : Collections.unmodifiableList(aliases);",
          "",
          "[Added Lines]",
          "65:   return this.componentDefinitions.get(name);",
          "69:   Collection<ComponentDefinition> collection = this.componentDefinitions.values();",
          "70:   return collection.toArray(new ComponentDefinition[collection.size()]);",
          "75:   List<AliasDefinition> aliases = this.aliasMap.get(aliasDefinition.getBeanName());",
          "76:   if (aliases == null) {",
          "77:    aliases = new ArrayList<AliasDefinition>();",
          "83:  public List<AliasDefinition> getAliases(String beanName) {",
          "84:   List<AliasDefinition> aliases = this.aliasMap.get(beanName);",
          "85:   return (aliases != null ? Collections.unmodifiableList(aliases) : null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:   this.imports.add(importDefinition);",
          "89:  }",
          "92:   return Collections.unmodifiableList(this.imports);",
          "93:  }",
          "",
          "[Removed Lines]",
          "91:  public List getImports() {",
          "",
          "[Added Lines]",
          "93:  public List<ImportDefinition> getImports() {",
          "",
          "---------------"
        ],
        "spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java||spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java": [
          "File: spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java -> spring-beans/src/test/java/org/springframework/tests/sample/beans/TestBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  private Float myFloat = new Float(0.0);",
          "87:  private Properties someProperties = new Properties();",
          "",
          "[Removed Lines]",
          "79:  private Collection<? super Object> friends = new LinkedList<>();",
          "81:  private Set<?> someSet = new HashSet<>();",
          "83:  private Map<?, ?> someMap = new HashMap<>();",
          "85:  private List<?> someList = new ArrayList<>();",
          "",
          "[Added Lines]",
          "79:  private Collection<? super Object> friends = new LinkedList<Object>();",
          "81:  private Set<?> someSet = new HashSet<Object>();",
          "83:  private Map<?, ?> someMap = new HashMap<Object, Object>();",
          "85:  private List<?> someList = new ArrayList<Object>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:   this.stringArray = stringArray;",
          "256:  }",
          "258:  public Integer[] getSomeIntegerArray() {",
          "259:   return someIntegerArray;",
          "260:  }",
          "262:  public void setSomeIntegerArray(Integer[] someIntegerArray) {",
          "263:   this.someIntegerArray = someIntegerArray;",
          "264:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:  @Override",
          "263:  @Override",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:  }",
          "464:  public boolean equals(Object other) {",
          "465:   if (this == other) {",
          "466:    return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:  @Override",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:   return (ObjectUtils.nullSafeEquals(this.name, tb2.name) && this.age == tb2.age);",
          "473:  }",
          "475:  public int hashCode() {",
          "476:   return this.age;",
          "477:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:  @Override",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "486:   }",
          "487:  }",
          "489:  public String toString() {",
          "490:   return this.name;",
          "491:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:  @Override",
          "",
          "---------------"
        ],
        "spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java||spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java": [
          "File: spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java -> spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:   private final AsyncInterface proxy;",
          "463:   public DynamicAsyncInterfaceBean() {",
          "465:    DefaultIntroductionAdvisor advisor = new DefaultIntroductionAdvisor(new MethodInterceptor() {",
          "466:     @Override",
          "467:     public Object invoke(MethodInvocation invocation) throws Throwable {",
          "",
          "[Removed Lines]",
          "464:    ProxyFactory pf = new ProxyFactory(new HashMap<>());",
          "",
          "[Added Lines]",
          "479:    ProxyFactory pf = new ProxyFactory(new HashMap<String, String>());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:   private final AsyncMethodsInterface proxy;",
          "533:   public DynamicAsyncMethodsInterfaceBean() {",
          "535:    DefaultIntroductionAdvisor advisor = new DefaultIntroductionAdvisor(new MethodInterceptor() {",
          "536:     @Override",
          "537:     public Object invoke(MethodInvocation invocation) throws Throwable {",
          "",
          "[Removed Lines]",
          "534:    ProxyFactory pf = new ProxyFactory(new HashMap<>());",
          "",
          "[Added Lines]",
          "549:    ProxyFactory pf = new ProxyFactory(new HashMap<String, String>());",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java||spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java": [
          "File: spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java -> spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  @Test",
          "39:  public void sortInstances() {",
          "41:   list.add(new B());",
          "42:   list.add(new A());",
          "43:   AnnotationAwareOrderComparator.sort(list);",
          "",
          "[Removed Lines]",
          "40:   List<Object> list = new ArrayList<>();",
          "",
          "[Added Lines]",
          "40:   List<Object> list = new ArrayList<Object>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  @Test",
          "49:  public void sortInstancesWithSubclass() {",
          "51:   list.add(new B());",
          "52:   list.add(new C());",
          "53:   AnnotationAwareOrderComparator.sort(list);",
          "",
          "[Removed Lines]",
          "50:   List<Object> list = new ArrayList<>();",
          "",
          "[Added Lines]",
          "50:   List<Object> list = new ArrayList<Object>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:  @Test",
          "59:  public void sortClasses() {",
          "61:   list.add(B.class);",
          "62:   list.add(A.class);",
          "63:   AnnotationAwareOrderComparator.sort(list);",
          "",
          "[Removed Lines]",
          "60:   List<Object> list = new ArrayList<>();",
          "",
          "[Added Lines]",
          "60:   List<Object> list = new ArrayList<Object>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:  @Test",
          "69:  public void sortClassesWithSubclass() {",
          "71:   list.add(B.class);",
          "72:   list.add(C.class);",
          "73:   AnnotationAwareOrderComparator.sort(list);",
          "",
          "[Removed Lines]",
          "70:   List<Object> list = new ArrayList<>();",
          "",
          "[Added Lines]",
          "70:   List<Object> list = new ArrayList<Object>();",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java||spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java": [
          "File: spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java -> spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Map;",
          "24: import java.util.Set;",
          "28: import org.springframework.util.ObjectUtils;",
          "35:  private SomeObject s1, s2, s3;",
          "39:   s1 = new SomeObject() {",
          "40:    public String toString() {",
          "41:     return \"A\";",
          "42:    }",
          "43:   };",
          "44:   s2 = new SomeObject() {",
          "45:    public String toString() {",
          "46:     return \"B\";",
          "47:    }",
          "48:   };",
          "49:   s3 = new SomeObject() {",
          "50:    public String toString() {",
          "51:     return \"C\";",
          "52:    }",
          "53:   };",
          "54:  }",
          "58:   Object stringy = new Object() {",
          "59:    public String toString() {",
          "60:     return new ToStringCreator(this).append(\"familyFavoriteSport\", map).toString();",
          "61:    }",
          "62:   };",
          "65:     stringy.toString());",
          "66:  }",
          "70:   map.put(\"Keri\", \"Softball\");",
          "71:   map.put(\"Scot\", \"Fishing\");",
          "72:   map.put(\"Keith\", \"Flag Football\");",
          "73:   return map;",
          "74:  }",
          "78:   String str = new ToStringCreator(array).toString();",
          "81:  }",
          "85:   String str = new ToStringCreator(integers).toString();",
          "86:   assertEquals(\"[@\" + ObjectUtils.getIdentityHexString(integers) + \" array<Integer>[0, 1, 2, 3, 4]]\", str);",
          "87:  }",
          "91:   list.add(s1);",
          "92:   list.add(s2);",
          "93:   list.add(s3);",
          "",
          "[Removed Lines]",
          "26: import junit.framework.TestCase;",
          "33: public class ToStringCreatorTests extends TestCase {",
          "37:  @Override",
          "38:  protected void setUp() throws Exception {",
          "56:  public void testDefaultStyleMap() {",
          "57:   final Map map = getMap();",
          "63:   assertEquals(\"[ToStringCreatorTests.4@\" + ObjectUtils.getIdentityHexString(stringy)",
          "64:     + \" familyFavoriteSport = map['Keri' -> 'Softball', 'Scot' -> 'Fishing', 'Keith' -> 'Flag Football']]\",",
          "68:  private Map getMap() {",
          "69:   Map map = new LinkedHashMap(3);",
          "76:  public void testDefaultStyleArray() {",
          "77:   SomeObject[] array = new SomeObject[] { s1, s2, s3 };",
          "79:   assertEquals(\"[@\" + ObjectUtils.getIdentityHexString(array)",
          "80:     + \" array<ToStringCreatorTests.SomeObject>[A, B, C]]\", str);",
          "83:  public void testPrimitiveArrays() {",
          "84:   int[] integers = new int[] { 0, 1, 2, 3, 4 };",
          "89:  public void testList() {",
          "90:   List list = new ArrayList();",
          "",
          "[Added Lines]",
          "26: import org.junit.Before;",
          "27: import org.junit.Test;",
          "31: import static org.junit.Assert.*;",
          "36: public class ToStringCreatorTests {",
          "41:  @Before",
          "42:  public void setUp() throws Exception {",
          "44:    @Override",
          "50:    @Override",
          "56:    @Override",
          "63:  @Test",
          "64:  public void defaultStyleMap() {",
          "65:   final Map<String, String> map = getMap();",
          "67:    @Override",
          "72:   assertEquals(\"[ToStringCreatorTests.4@\" + ObjectUtils.getIdentityHexString(stringy) +",
          "73:     \" familyFavoriteSport = map['Keri' -> 'Softball', 'Scot' -> 'Fishing', 'Keith' -> 'Flag Football']]\",",
          "77:  private Map<String, String> getMap() {",
          "78:   Map<String, String> map = new LinkedHashMap<String, String>();",
          "85:  @Test",
          "86:  public void defaultStyleArray() {",
          "87:   SomeObject[] array = new SomeObject[] {s1, s2, s3};",
          "89:   assertEquals(\"[@\" + ObjectUtils.getIdentityHexString(array) +",
          "90:     \" array<ToStringCreatorTests.SomeObject>[A, B, C]]\", str);",
          "93:  @Test",
          "94:  public void primitiveArrays() {",
          "95:   int[] integers = new int[] {0, 1, 2, 3, 4};",
          "100:  @Test",
          "101:  public void appendList() {",
          "102:   List<SomeObject> list = new ArrayList<SomeObject>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     str);",
          "97:  }",
          "101:   set.add(s1);",
          "102:   set.add(s2);",
          "103:   set.add(s3);",
          "104:   String str = new ToStringCreator(this).append(\"myLetters\", set).toString();",
          "107:  }",
          "110:   String str = new ToStringCreator(this).append(\"myClass\", this.getClass()).toString();",
          "113:  }",
          "120:  }",
          "123:  public static class SomeObject {",
          "125:  }",
          "127: }",
          "",
          "[Removed Lines]",
          "99:  public void testSet() {",
          "100:   Set set = new LinkedHashSet<>(3);",
          "105:   assertEquals(\"[ToStringCreatorTests@\" + ObjectUtils.getIdentityHexString(this) + \" myLetters = set[A, B, C]]\",",
          "106:     str);",
          "109:  public void testClass() {",
          "111:   assertEquals(\"[ToStringCreatorTests@\" + ObjectUtils.getIdentityHexString(this)",
          "112:     + \" myClass = ToStringCreatorTests]\", str);",
          "115:  public void testMethod() throws Exception {",
          "116:   String str = new ToStringCreator(this).append(\"myMethod\", this.getClass().getMethod(\"testMethod\"))",
          "117:     .toString();",
          "118:   assertEquals(\"[ToStringCreatorTests@\" + ObjectUtils.getIdentityHexString(this)",
          "119:     + \" myMethod = testMethod@ToStringCreatorTests]\", str);",
          "",
          "[Added Lines]",
          "111:  @Test",
          "112:  public void appendSet() {",
          "113:   Set<SomeObject> set = new LinkedHashSet<SomeObject>();",
          "118:   assertEquals(\"[ToStringCreatorTests@\" + ObjectUtils.getIdentityHexString(this) + \" myLetters = set[A, B, C]]\", str);",
          "121:  @Test",
          "122:  public void appendClass() {",
          "124:   assertEquals(\"[ToStringCreatorTests@\" + ObjectUtils.getIdentityHexString(this) +",
          "125:     \" myClass = ToStringCreatorTests]\", str);",
          "128:  @Test",
          "129:  public void appendMethod() throws Exception {",
          "130:   String str = new ToStringCreator(this).append(\"myMethod\", this.getClass().getMethod(\"appendMethod\")).toString();",
          "131:   assertEquals(\"[ToStringCreatorTests@\" + ObjectUtils.getIdentityHexString(this) +",
          "132:     \" myMethod = appendMethod@ToStringCreatorTests]\", str);",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java||spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java": [
          "File: spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java -> spring-core/src/test/java/org/springframework/util/MethodInvokerTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.Collection;",
          "21: import java.util.List;",
          "34:   TestClass1 tc1 = new TestClass1();",
          "35:   MethodInvoker mi = new MethodInvoker();",
          "",
          "[Removed Lines]",
          "23: import junit.framework.TestCase;",
          "30: public class MethodInvokerTests extends TestCase {",
          "32:  public void testPlainMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "23: import org.junit.Rule;",
          "24: import org.junit.Test;",
          "25: import org.junit.rules.ExpectedException;",
          "27: import static org.junit.Assert.*;",
          "35: public class MethodInvokerTests {",
          "37:  @Rule",
          "38:  public final ExpectedException exception = ExpectedException.none();",
          "41:  @Test",
          "42:  public void plainMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   mi = new MethodInvoker();",
          "44:   mi.setTargetClass(TestClass1.class);",
          "45:   mi.setTargetMethod(\"supertypes\");",
          "47:   mi.prepare();",
          "48:   assertEquals(\"hello\", mi.invoke());",
          "50:   mi = new MethodInvoker();",
          "51:   mi.setTargetClass(TestClass1.class);",
          "52:   mi.setTargetMethod(\"supertypes2\");",
          "54:   mi.prepare();",
          "55:   assertEquals(\"hello\", mi.invoke());",
          "",
          "[Removed Lines]",
          "46:   mi.setArguments(new Object[] {new ArrayList<>(), new ArrayList<>(), \"hello\"});",
          "53:   mi.setArguments(new Object[] {new ArrayList<>(), new ArrayList<>(), \"hello\", \"bogus\"});",
          "",
          "[Added Lines]",
          "56:   mi.setArguments(new Object[] {new ArrayList<Object>(), new ArrayList<Object>(), \"hello\"});",
          "63:   mi.setArguments(new Object[] {new ArrayList<Object>(), new ArrayList<Object>(), \"hello\", \"bogus\"});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:   mi = new MethodInvoker();",
          "59:   mi.setTargetClass(TestClass1.class);",
          "60:   mi.setTargetMethod(\"supertypes2\");",
          "69:  }",
          "83:  }",
          "86:   MethodInvoker methodInvoker = new MethodInvoker();",
          "87:   methodInvoker.setTargetObject(new Greeter());",
          "88:   methodInvoker.setTargetMethod(\"greet\");",
          "",
          "[Removed Lines]",
          "61:   mi.setArguments(new Object[] {new ArrayList<>(), new ArrayList<>(), \"hello\", Boolean.TRUE});",
          "62:   try {",
          "63:    mi.prepare();",
          "64:    fail(\"Shouldn't have matched without argument conversion\");",
          "65:   }",
          "66:   catch (NoSuchMethodException ex) {",
          "68:   }",
          "71:  public void testStringWithMethodInvoker() throws Exception {",
          "72:   try {",
          "73:    MethodInvoker methodInvoker = new MethodInvoker();",
          "74:    methodInvoker.setTargetObject(new Greeter());",
          "75:    methodInvoker.setTargetMethod(\"greet\");",
          "76:    methodInvoker.setArguments(new Object[] {new String(\"no match\")});",
          "77:    methodInvoker.prepare();",
          "78:    fail(\"Should have thrown a NoSuchMethodException\");",
          "79:   }",
          "80:   catch (NoSuchMethodException e) {",
          "82:   }",
          "85:  public void testPurchaserWithMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "71:   mi.setArguments(new Object[] {new ArrayList<Object>(), new ArrayList<Object>(), \"hello\", Boolean.TRUE});",
          "73:   exception.expect(NoSuchMethodException.class);",
          "74:   mi.prepare();",
          "77:  @Test",
          "78:  public void stringWithMethodInvoker() throws Exception {",
          "79:   MethodInvoker methodInvoker = new MethodInvoker();",
          "80:   methodInvoker.setTargetObject(new Greeter());",
          "81:   methodInvoker.setTargetMethod(\"greet\");",
          "82:   methodInvoker.setArguments(new Object[] {\"no match\"});",
          "84:   exception.expect(NoSuchMethodException.class);",
          "85:   methodInvoker.prepare();",
          "88:  @Test",
          "89:  public void purchaserWithMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:   assertEquals(\"purchaser: hello\", greeting);",
          "93:  }",
          "96:   MethodInvoker methodInvoker = new MethodInvoker();",
          "97:   methodInvoker.setTargetObject(new Greeter());",
          "98:   methodInvoker.setTargetMethod(\"greet\");",
          "",
          "[Removed Lines]",
          "95:  public void testShopperWithMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "99:  @Test",
          "100:  public void shopperWithMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:   assertEquals(\"purchaser: may I help you?\", greeting);",
          "103:  }",
          "106:   MethodInvoker methodInvoker = new MethodInvoker();",
          "107:   methodInvoker.setTargetObject(new Greeter());",
          "108:   methodInvoker.setTargetMethod(\"greet\");",
          "",
          "[Removed Lines]",
          "105:  public void testSalesmanWithMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "110:  @Test",
          "111:  public void salesmanWithMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:   assertEquals(\"greetable: how are sales?\", greeting);",
          "113:  }",
          "116:   MethodInvoker methodInvoker = new MethodInvoker();",
          "117:   methodInvoker.setTargetObject(new Greeter());",
          "118:   methodInvoker.setTargetMethod(\"greet\");",
          "",
          "[Removed Lines]",
          "115:  public void testCustomerWithMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "121:  @Test",
          "122:  public void customerWithMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "122:   assertEquals(\"customer: good day\", greeting);",
          "123:  }",
          "126:   MethodInvoker methodInvoker = new MethodInvoker();",
          "127:   methodInvoker.setTargetObject(new Greeter());",
          "128:   methodInvoker.setTargetMethod(\"greet\");",
          "",
          "[Removed Lines]",
          "125:  public void testRegularWithMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "132:  @Test",
          "133:  public void regularWithMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "132:   assertEquals(\"regular: welcome back Kotter\", greeting);",
          "133:  }",
          "136:   MethodInvoker methodInvoker = new MethodInvoker();",
          "137:   methodInvoker.setTargetObject(new Greeter());",
          "138:   methodInvoker.setTargetMethod(\"greet\");",
          "",
          "[Removed Lines]",
          "135:  public void testVIPWithMethodInvoker() throws Exception {",
          "",
          "[Added Lines]",
          "143:  @Test",
          "144:  public void vipWithMethodInvoker() throws Exception {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:  }",
          "221:   String getGreeting();",
          "222:  }",
          "226:  }",
          "",
          "[Removed Lines]",
          "219:  private static interface Greetable {",
          "225:  private static interface Person extends Greetable {",
          "",
          "[Added Lines]",
          "228:  private interface Greetable {",
          "234:  private interface Person extends Greetable {",
          "",
          "---------------"
        ],
        "spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java||spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java": [
          "File: spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java -> spring-jdbc/src/main/java/org/springframework/jdbc/object/GenericSqlQuery.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.util.Map;",
          "21: import org.springframework.jdbc.core.RowMapper;",
          "22: import org.springframework.util.Assert;",
          "33:   this.rowMapperClass = rowMapperClass;",
          "38:  }",
          "40:  public void afterPropertiesSet() {",
          "41:   super.afterPropertiesSet();",
          "43:  }",
          "55:  }",
          "56: }",
          "",
          "[Removed Lines]",
          "23: import org.springframework.dao.InvalidDataAccessResourceUsageException;",
          "25: public class GenericSqlQuery extends SqlQuery {",
          "27:  Class rowMapperClass;",
          "29:  RowMapper rowMapper;",
          "31:  public void setRowMapperClass(Class rowMapperClass)",
          "32:    throws IllegalAccessException, InstantiationException {",
          "34:   if (!RowMapper.class.isAssignableFrom(rowMapperClass))",
          "35:    throw new IllegalStateException(\"The specified class '\" +",
          "36:      rowMapperClass.getName() + \" is not a sub class of \" +",
          "37:      \"'org.springframework.jdbc.core.RowMapper'\");",
          "42:   Assert.notNull(rowMapperClass, \"The 'rowMapperClass' property is required\");",
          "45:  protected RowMapper newRowMapper(Object[] parameters, Map context) {",
          "46:   try {",
          "47:    return (RowMapper) rowMapperClass.newInstance();",
          "48:   }",
          "49:   catch (InstantiationException e) {",
          "50:    throw new InvalidDataAccessResourceUsageException(\"Unable to instantiate RowMapper\", e);",
          "51:   }",
          "52:   catch (IllegalAccessException e) {",
          "53:    throw new InvalidDataAccessResourceUsageException(\"Unable to instantiate RowMapper\", e);",
          "54:   }",
          "",
          "[Added Lines]",
          "21: import org.springframework.beans.BeanUtils;",
          "34: public class GenericSqlQuery<T> extends SqlQuery<T> {",
          "36:  @SuppressWarnings(\"rawtypes\")",
          "37:  private Class<? extends RowMapper> rowMapperClass;",
          "44:  @SuppressWarnings(\"rawtypes\")",
          "45:  public void setRowMapperClass(Class<? extends RowMapper> rowMapperClass) {",
          "51:   Assert.notNull(this.rowMapperClass, \"'rowMapperClass' is required\");",
          "55:  @Override",
          "56:  @SuppressWarnings(\"unchecked\")",
          "57:  protected RowMapper<T> newRowMapper(Object[] parameters, Map context) {",
          "58:   return BeanUtils.instantiateClass(this.rowMapperClass);",
          "",
          "---------------"
        ],
        "spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java||spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java": [
          "File: spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java -> spring-jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.HashMap;",
          "26: import java.util.List;",
          "27: import java.util.Map;",
          "29: import javax.sql.DataSource;",
          "31: import org.junit.Before;",
          "32: import org.junit.Test;",
          "35: import org.springframework.beans.factory.support.DefaultListableBeanFactory;",
          "36: import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;",
          "37: import org.springframework.core.io.ClassPathResource;",
          "",
          "[Removed Lines]",
          "33: import org.springframework.beans.factory.BeanFactory;",
          "34: import org.springframework.beans.factory.support.BeanDefinitionRegistry;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  private static final String SELECT_ID_FORENAME_NAMED_PARAMETERS_PARSED =",
          "54:  private Connection connection;",
          "",
          "[Removed Lines]",
          "47: public class GenericSqlQueryTests  {",
          "50:   \"select id, forename from custmr where id = ? and country = ?\";",
          "52:  private BeanFactory beanFactory;",
          "",
          "[Added Lines]",
          "45: public class GenericSqlQueryTests {",
          "48:    \"select id, forename from custmr where id = ? and country = ?\";",
          "50:  private DefaultListableBeanFactory beanFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:  private ResultSet resultSet;",
          "60:  @Before",
          "61:  public void setUp() throws Exception {",
          "62:   this.beanFactory = new DefaultListableBeanFactory();",
          "64:     new ClassPathResource(\"org/springframework/jdbc/object/GenericSqlQueryTests-context.xml\"));",
          "65:   DataSource dataSource = mock(DataSource.class);",
          "66:   this.connection = mock(Connection.class);",
          "",
          "[Removed Lines]",
          "63:   new XmlBeanDefinitionReader((BeanDefinitionRegistry) this.beanFactory).loadBeanDefinitions(",
          "",
          "[Added Lines]",
          "62:   new XmlBeanDefinitionReader(this.beanFactory).loadBeanDefinitions(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:  }",
          "74:  @Test",
          "77:   doTestCustomerQuery(query, false);",
          "78:  }",
          "80:  @Test",
          "83:   doTestCustomerQuery(query, true);",
          "84:  }",
          "87:   given(resultSet.next()).willReturn(true);",
          "88:   given(resultSet.getInt(\"id\")).willReturn(1);",
          "89:   given(resultSet.getString(\"forename\")).willReturn(\"rod\");",
          "",
          "[Removed Lines]",
          "75:  public void testPlaceHoldersCustomerQuery() throws SQLException {",
          "76:   SqlQuery query = (SqlQuery) beanFactory.getBean(\"queryWithPlaceHolders\");",
          "81:  public void testNamedParameterCustomerQuery() throws SQLException {",
          "82:   SqlQuery query = (SqlQuery) beanFactory.getBean(\"queryWithNamedParameters\");",
          "86:  private void doTestCustomerQuery(SqlQuery query, boolean namedParameters) throws SQLException {",
          "",
          "[Added Lines]",
          "74:  public void testCustomerQueryWithPlaceholders() throws SQLException {",
          "75:   SqlQuery<?> query = (SqlQuery<?>) beanFactory.getBean(\"queryWithPlaceholders\");",
          "80:  public void testCustomerQueryWithNamedParameters() throws SQLException {",
          "81:   SqlQuery<?> query = (SqlQuery<?>) beanFactory.getBean(\"queryWithNamedParameters\");",
          "85:  private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:   given(preparedStatement.executeQuery()).willReturn(resultSet);",
          "92:   given(connection.prepareStatement(SELECT_ID_FORENAME_NAMED_PARAMETERS_PARSED)).willReturn(preparedStatement);",
          "95:   if (namedParameters) {",
          "96:    Map<String, Object> params = new HashMap<String, Object>(2);",
          "98:    params.put(\"country\", \"UK\");",
          "99:    queryResults = query.executeByNamedParam(params);",
          "100:   }",
          "101:   else {",
          "103:    queryResults = query.execute(params);",
          "104:   }",
          "105:   assertTrue(\"Customer was returned correctly\", queryResults.size() == 1);",
          "",
          "[Removed Lines]",
          "94:   List queryResults;",
          "97:    params.put(\"id\", new Integer(1));",
          "102:    Object[] params = new Object[] {new Integer(1), \"UK\"};",
          "",
          "[Added Lines]",
          "93:   List<?> queryResults;",
          "96:    params.put(\"id\", 1);",
          "101:    Object[] params = new Object[] {1, \"UK\"};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "108:   assertTrue(\"Customer forename was assigned correctly\", cust.getForename().equals(\"rod\"));",
          "110:   verify(resultSet).close();",
          "112:   verify(preparedStatement).setString(2, \"UK\");",
          "113:   verify(preparedStatement).close();",
          "114:  }",
          "",
          "[Removed Lines]",
          "111:   verify(preparedStatement).setObject(1, new Integer(1), Types.INTEGER);",
          "",
          "[Added Lines]",
          "110:   verify(preparedStatement).setObject(1, 1, Types.INTEGER);",
          "",
          "---------------"
        ],
        "spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java||spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java": [
          "File: spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java -> spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  @Before",
          "65:  public void setUp() {",
          "67:   rootElementListType = new ParameterizedTypeReference<List<RootElement>>() {}.getType();",
          "68:   rootElementSetType = new ParameterizedTypeReference<Set<RootElement>>() {}.getType();",
          "69:   typeListType = new ParameterizedTypeReference<List<TestType>>() {}.getType();",
          "",
          "[Removed Lines]",
          "66:   converter = new Jaxb2CollectionHttpMessageConverter<>();",
          "",
          "[Added Lines]",
          "66:   converter = new Jaxb2CollectionHttpMessageConverter<Collection<Object>>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  }",
          "216:  @XmlRootElement",
          "217:  public static class RootElement {",
          "",
          "[Removed Lines]",
          "215:  @SuppressWarnings(\"unused\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java||spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java": [
          "File: spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java -> spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.Arrays;",
          "21: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "16: package org.springframework.web.accept;",
          "18: import static org.junit.Assert.assertEquals;",
          "",
          "[Added Lines]",
          "17: package org.springframework.web.accept;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.springframework.web.context.request.NativeWebRequest;",
          "32: import org.springframework.web.context.request.ServletWebRequest;",
          "38: public class ContentNegotiationManagerFactoryBeanTests {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:   assertEquals(Arrays.asList(MediaType.APPLICATION_JSON), manager.resolveMediaTypes(this.webRequest));",
          "153:   this.servletRequest.addHeader(\"Accept\", MediaType.ALL_VALUE);",
          "155:   assertEquals(Arrays.asList(MediaType.APPLICATION_JSON), manager.resolveMediaTypes(this.webRequest));",
          "156:  }",
          "159:  private static class TestServletContext extends MockServletContext {",
          "164:   public Map<String, String> getMimeTypes() {",
          "165:    return this.mimeTypes;",
          "",
          "[Removed Lines]",
          "161:   private final Map<String, String> mimeTypes = new HashMap<>();",
          "",
          "[Added Lines]",
          "164:   private final Map<String, String> mimeTypes = new HashMap<String, String>();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ea9dd057935f24d864e0b4627c80187a1a5368a",
      "candidate_info": {
        "commit_hash": "1ea9dd057935f24d864e0b4627c80187a1a5368a",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/1ea9dd057935f24d864e0b4627c80187a1a5368a",
        "files": [
          "spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java"
        ],
        "message": "Catch RejectedExecutionException in WebAsyncManager\n\nIssue: SPR-13836\n(cherry picked from commit 29692fc)",
        "before_after_code_files": [
          "spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java||spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java||spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java": [
          "File: spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java -> spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "23: import java.util.concurrent.Callable;",
          "24: import javax.servlet.http.HttpServletRequest;",
          "26: import org.apache.commons.logging.Log;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.concurrent.RejectedExecutionException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:   interceptorChain.applyBeforeConcurrentHandling(this.asyncWebRequest, callable);",
          "305:   startAsyncProcessing(processingContext);",
          "319:     }",
          "323:  }",
          "325:  private void setConcurrentResultAndDispatch(Object result) {",
          "",
          "[Removed Lines]",
          "307:   this.taskExecutor.submit(new Runnable() {",
          "308:    public void run() {",
          "309:     Object result = null;",
          "310:     try {",
          "311:      interceptorChain.applyPreProcess(asyncWebRequest, callable);",
          "312:      result = callable.call();",
          "313:     }",
          "314:     catch (Throwable ex) {",
          "315:      result = ex;",
          "316:     }",
          "317:     finally {",
          "318:      result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);",
          "320:     setConcurrentResultAndDispatch(result);",
          "321:    }",
          "322:   });",
          "",
          "[Added Lines]",
          "307:   try {",
          "308:    this.taskExecutor.submit(new Runnable() {",
          "309:     public void run() {",
          "310:      Object result = null;",
          "311:      try {",
          "312:       interceptorChain.applyPreProcess(asyncWebRequest, callable);",
          "313:       result = callable.call();",
          "314:      }",
          "315:      catch (Throwable ex) {",
          "316:       result = ex;",
          "317:      }",
          "318:      finally {",
          "319:       result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);",
          "320:      }",
          "321:      setConcurrentResultAndDispatch(result);",
          "323:    });",
          "324:   }",
          "325:   catch (RejectedExecutionException ex) {",
          "326:    Object result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, ex);",
          "327:    setConcurrentResultAndDispatch(result);",
          "328:    throw ex;",
          "329:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8adff1bd70ef185213665ed3c3b8c1d1cae66b96",
      "candidate_info": {
        "commit_hash": "8adff1bd70ef185213665ed3c3b8c1d1cae66b96",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/8adff1bd70ef185213665ed3c3b8c1d1cae66b96",
        "files": [
          "spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java",
          "spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java",
          "spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java",
          "spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java"
        ],
        "message": "Support Quartz trigger without JobDetail\n\nThis commit allows to create a Quartz trigger implementation via\neither `CronTriggerFactoryBean` or `SimpleTriggerFactoryBean` even if no\njob detail is provided.\n\nIssue: SPR-13604\n(cherry picked from commit 2970065)",
        "before_after_code_files": [
          "spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java",
          "spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java",
          "spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java||spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java",
          "spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java||spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java": [
          "File: spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java -> spring-context-support/src/main/java/org/springframework/scheduling/quartz/CronTriggerFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:   CronTriggerImpl cti = new CronTriggerImpl();",
          "246:   cti.setName(this.name);",
          "247:   cti.setGroup(this.group);",
          "249:   cti.setJobDataMap(this.jobDataMap);",
          "250:   cti.setStartTime(this.startTime);",
          "251:   cti.setCronExpression(this.cronExpression);",
          "",
          "[Removed Lines]",
          "248:   cti.setJobKey(this.jobDetail.getKey());",
          "",
          "[Added Lines]",
          "248:   if (this.jobDetail != null) {",
          "249:    cti.setJobKey(this.jobDetail.getKey());",
          "250:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:   MutablePropertyValues pvs = new MutablePropertyValues();",
          "275:   pvs.add(\"name\", this.name);",
          "276:   pvs.add(\"group\", this.group);",
          "283:   }",
          "284:   pvs.add(\"jobDataMap\", this.jobDataMap);",
          "285:   pvs.add(\"startTime\", this.startTime);",
          "",
          "[Removed Lines]",
          "277:   if (jobKeyMethod != null) {",
          "278:    pvs.add(\"jobKey\", ReflectionUtils.invokeMethod(jobKeyMethod, this.jobDetail));",
          "279:   }",
          "280:   else {",
          "281:    pvs.add(\"jobName\", this.jobDetail.getName());",
          "282:    pvs.add(\"jobGroup\", this.jobDetail.getGroup());",
          "",
          "[Added Lines]",
          "279:   if (this.jobDetail != null) {",
          "280:    if (jobKeyMethod != null) {",
          "281:     pvs.add(\"jobKey\", ReflectionUtils.invokeMethod(jobKeyMethod, this.jobDetail));",
          "282:    }",
          "283:    else {",
          "284:     pvs.add(\"jobName\", this.jobDetail.getName());",
          "285:     pvs.add(\"jobGroup\", this.jobDetail.getGroup());",
          "286:    }",
          "",
          "---------------"
        ],
        "spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java||spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java": [
          "File: spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java -> spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   SimpleTriggerImpl sti = new SimpleTriggerImpl();",
          "238:   sti.setName(this.name);",
          "239:   sti.setGroup(this.group);",
          "241:   sti.setJobDataMap(this.jobDataMap);",
          "242:   sti.setStartTime(this.startTime);",
          "243:   sti.setRepeatInterval(this.repeatInterval);",
          "",
          "[Removed Lines]",
          "240:   sti.setJobKey(this.jobDetail.getKey());",
          "",
          "[Added Lines]",
          "240:   if (this.jobDetail != null) {",
          "241:    sti.setJobKey(this.jobDetail.getKey());",
          "242:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:   MutablePropertyValues pvs = new MutablePropertyValues();",
          "266:   pvs.add(\"name\", this.name);",
          "267:   pvs.add(\"group\", this.group);",
          "274:   }",
          "275:   pvs.add(\"jobDataMap\", this.jobDataMap);",
          "276:   pvs.add(\"startTime\", this.startTime);",
          "",
          "[Removed Lines]",
          "268:   if (jobKeyMethod != null) {",
          "269:    pvs.add(\"jobKey\", ReflectionUtils.invokeMethod(jobKeyMethod, this.jobDetail));",
          "270:   }",
          "271:   else {",
          "272:    pvs.add(\"jobName\", this.jobDetail.getName());",
          "273:    pvs.add(\"jobGroup\", this.jobDetail.getGroup());",
          "",
          "[Added Lines]",
          "270:   if (this.jobDetail != null) {",
          "271:    if (jobKeyMethod != null) {",
          "272:     pvs.add(\"jobKey\", ReflectionUtils.invokeMethod(jobKeyMethod, this.jobDetail));",
          "273:    }",
          "274:    else {",
          "275:     pvs.add(\"jobName\", this.jobDetail.getName());",
          "276:     pvs.add(\"jobGroup\", this.jobDetail.getGroup());",
          "277:    }",
          "",
          "---------------"
        ],
        "spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java||spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java": [
          "File: spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java -> spring-context-support/src/test/java/org/springframework/scheduling/quartz/CronTriggerFactoryBeanTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.springframework.scheduling.quartz;",
          "19: import java.text.ParseException;",
          "21: import org.junit.Test;",
          "22: import org.quartz.CronTrigger;",
          "24: import static org.junit.Assert.*;",
          "29: public class CronTriggerFactoryBeanTests {",
          "31:  @Test",
          "32:  public void createWithoutJobDetail() throws ParseException {",
          "33:   CronTriggerFactoryBean factory = new CronTriggerFactoryBean();",
          "34:   factory.setName(\"myTrigger\");",
          "35:   factory.setCronExpression(\"0 15 10 ? * *\");",
          "36:   factory.afterPropertiesSet();",
          "37:   CronTrigger trigger = factory.getObject();",
          "38:   assertEquals(\"0 15 10 ? * *\", trigger.getCronExpression());",
          "39:  }",
          "41: }",
          "",
          "---------------"
        ],
        "spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java||spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java": [
          "File: spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java -> spring-context-support/src/test/java/org/springframework/scheduling/quartz/SimpleTriggerFactoryBeanTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.springframework.scheduling.quartz;",
          "19: import java.text.ParseException;",
          "21: import org.junit.Test;",
          "22: import org.quartz.SimpleTrigger;",
          "24: import static org.junit.Assert.*;",
          "29: public class SimpleTriggerFactoryBeanTests {",
          "31:  @Test",
          "32:  public void createWithoutJobDetail() throws ParseException {",
          "33:   SimpleTriggerFactoryBean factory = new SimpleTriggerFactoryBean();",
          "34:   factory.setName(\"myTrigger\");",
          "35:   factory.setRepeatCount(5);",
          "36:   factory.setRepeatInterval(1000L);",
          "37:   factory.afterPropertiesSet();",
          "38:   SimpleTrigger trigger = factory.getObject();",
          "39:   assertEquals(5, trigger.getRepeatCount());",
          "40:   assertEquals(1000L, trigger.getRepeatInterval());",
          "41:  }",
          "43: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}