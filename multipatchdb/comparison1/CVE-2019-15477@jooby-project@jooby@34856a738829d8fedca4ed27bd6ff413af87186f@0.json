{
  "cve_id": "CVE-2019-15477",
  "cve_desc": "Jooby before 1.6.4 has XSS via the default error handler.",
  "repo": "jooby-project/jooby",
  "patch_hash": "34856a738829d8fedca4ed27bd6ff413af87186f",
  "patch_info": {
    "commit_hash": "34856a738829d8fedca4ed27bd6ff413af87186f",
    "repo": "jooby-project/jooby",
    "commit_url": "https://github.com/jooby-project/jooby/commit/34856a738829d8fedca4ed27bd6ff413af87186f",
    "files": [
      "jooby/src/main/java/org/jooby/Err.java",
      "jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java",
      "jooby/src/main/java/org/jooby/internal/RouteImpl.java",
      "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java"
    ],
    "message": "Avoiding possible XSS attack through the default error handler. See jooby-project/jooby#1366",
    "before_after_code_files": [
      "jooby/src/main/java/org/jooby/Err.java||jooby/src/main/java/org/jooby/Err.java",
      "jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java||jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java",
      "jooby/src/main/java/org/jooby/internal/RouteImpl.java||jooby/src/main/java/org/jooby/internal/RouteImpl.java",
      "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java||jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java"
    ]
  },
  "patch_diff": {
    "jooby/src/main/java/org/jooby/Err.java||jooby/src/main/java/org/jooby/Err.java": [
      "File: jooby/src/main/java/org/jooby/Err.java -> jooby/src/main/java/org/jooby/Err.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "206: import java.util.LinkedHashMap;",
      "207: import java.util.Map;",
      "208: import java.util.Optional;",
      "210: import com.typesafe.config.Config;",
      "211: import org.jooby.funzy.Try;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "208: import java.util.Objects;",
      "210: import java.util.function.BiFunction;",
      "211: import java.util.function.Function;",
      "212: import java.util.function.Supplier;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "287:       log.error(\"execution of: {}{} resulted in exception\\nRoute:\\n{}\\n\\nStacktrace:\",",
      "288:           req.method(), req.path(), req.route().print(6), ex);",
      "289:       Config conf = req.require(Config.class);",
      "290:       boolean stackstrace = Try.apply(() -> conf.getBoolean(\"err.stacktrace\"))",
      "292:       rsp.send(",
      "293:           Results",
      "296:     }",
      "298:   }",
      "",
      "[Removed Lines]",
      "291:           .orElse(req.require(Env.class).name().equals(\"dev\"));",
      "294:               .when(MediaType.html, () -> Results.html(VIEW).put(\"err\", ex.toMap(stackstrace)))",
      "295:               .when(MediaType.all, () -> ex.toMap(stackstrace)));",
      "",
      "[Added Lines]",
      "294:       Env env = req.require(Env.class);",
      "296:           .orElse(env.name().equals(\"dev\"));",
      "298:       Function<Object, String> xssFilter = env.xss(\"html\").compose(Objects::toString);",
      "299:       BiFunction<String, Object, String> escaper = (k, v) -> xssFilter.apply(v);",
      "301:       Supplier<Map<String, Object>> detailsProvider = () -> {",
      "302:         Map<String, Object> map = ex.toMap(stackstrace);",
      "303:         map.compute(\"message\", escaper);",
      "304:         map.compute(\"reason\", escaper);",
      "305:         return map;",
      "306:       };",
      "310:               .when(MediaType.html, () -> Results.html(VIEW).put(\"err\", detailsProvider.get()))",
      "311:               .when(MediaType.all, detailsProvider::get));",
      "",
      "---------------"
    ],
    "jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java||jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java": [
      "File: jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java -> jooby/src/main/java/org/jooby/internal/HttpHandlerImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "628:           rsp.status(Status.NOT_FOUND).end();",
      "629:         } else {",
      "631:         }",
      "632:       }",
      "633:     }, method, path, \"err\", accept));",
      "",
      "[Removed Lines]",
      "630:           throw new Err(Status.NOT_FOUND, req.path(true));",
      "",
      "[Added Lines]",
      "630:           throw new Err(Status.NOT_FOUND, req.path());",
      "",
      "---------------"
    ],
    "jooby/src/main/java/org/jooby/internal/RouteImpl.java||jooby/src/main/java/org/jooby/internal/RouteImpl.java": [
      "File: jooby/src/main/java/org/jooby/internal/RouteImpl.java -> jooby/src/main/java/org/jooby/internal/RouteImpl.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "233:   public static RouteWithFilter notFound(final String method, final String path) {",
      "234:     return new FallbackRoute(\"404\", method, path, MediaType.ALL, (req, rsp, chain) -> {",
      "235:       if (!rsp.status().isPresent()) {",
      "237:       }",
      "238:     });",
      "239:   }",
      "",
      "[Removed Lines]",
      "236:         throw new Err(Status.NOT_FOUND, req.path(true));",
      "",
      "[Added Lines]",
      "236:         throw new Err(Status.NOT_FOUND, req.path());",
      "",
      "---------------"
    ],
    "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java||jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java": [
      "File: jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java -> jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package org.jooby;",
      "3: import com.google.common.collect.ImmutableList;",
      "4: import com.typesafe.config.Config;",
      "5: import static org.easymock.EasyMock.expect;",
      "6: import org.jooby.test.MockUnit;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import com.google.common.escape.Escapers;",
      "5: import com.google.common.html.HtmlEscapers;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:       expect(conf.getBoolean(\"err.stacktrace\")).andReturn(stacktrace);",
      "67:       Env env = unit.get(Env.class);",
      "68:       expect(env.name()).andReturn(\"dev\");",
      "70:       Request req = unit.get(Request.class);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:       expect(env.xss(\"html\")).andReturn(HtmlEscapers.htmlEscaper()::escape);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:             });",
      "113:   }",
      "115:   private void checkErr(final String[] stacktrace, final String message,",
      "116:       final Map<String, Object> err) {",
      "117:     assertEquals(message, err.remove(\"message\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:   @SuppressWarnings({\"unchecked\"})",
      "119:   @Test",
      "120:   public void handleWithHtmlErrMessage() throws Exception {",
      "121:     Err ex = new Err(500, \"Something something <em>dark</em>\");",
      "123:     StringWriter writer = new StringWriter();",
      "124:     ex.printStackTrace(new PrintWriter(writer));",
      "125:     String[] stacktrace = writer.toString().replace(\"\\r\", \"\").split(\"\\\\n\");",
      "127:     new MockUnit(Request.class, Response.class, Route.class, Env.class, Config.class)",
      "128:             .expect(handleErr(ex, true))",
      "129:             .run(unit -> {",
      "131:                       Request req = unit.get(Request.class);",
      "132:                       Response rsp = unit.get(Response.class);",
      "134:                       new Err.DefHandler().handle(req, rsp, ex);",
      "135:                     },",
      "136:                     unit -> {",
      "137:                       Result result = unit.captured(Result.class).iterator().next();",
      "138:                       View view = (View) result.ifGet(ImmutableList.of(MediaType.html)).get();",
      "139:                       assertEquals(\"err\", view.name());",
      "140:                       checkErr(stacktrace, \"Server Error(500): Something something &lt;em&gt;dark&lt;/em&gt;\",",
      "141:                               (Map<String, Object>) view.model()",
      "142:                                       .get(\"err\"));",
      "144:                       Object hash = result.ifGet(MediaType.ALL).get();",
      "145:                       assertEquals(4, ((Map<String, Object>) hash).size());",
      "146:                     });",
      "147:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "395dab7e80474ac0c2c32d81f61cda2c8331a46b",
      "candidate_info": {
        "commit_hash": "395dab7e80474ac0c2c32d81f61cda2c8331a46b",
        "repo": "jooby-project/jooby",
        "commit_url": "https://github.com/jooby-project/jooby/commit/395dab7e80474ac0c2c32d81f61cda2c8331a46b",
        "files": [
          "jooby/src/main/java/org/jooby/Err.java",
          "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java"
        ],
        "message": "Removing the Supplier for clarity.",
        "before_after_code_files": [
          "jooby/src/main/java/org/jooby/Err.java||jooby/src/main/java/org/jooby/Err.java",
          "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java||jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jooby/src/main/java/org/jooby/Err.java||jooby/src/main/java/org/jooby/Err.java",
            "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java||jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java"
          ],
          "candidate": [
            "jooby/src/main/java/org/jooby/Err.java||jooby/src/main/java/org/jooby/Err.java",
            "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java||jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java"
          ]
        }
      },
      "candidate_diff": {
        "jooby/src/main/java/org/jooby/Err.java||jooby/src/main/java/org/jooby/Err.java": [
          "File: jooby/src/main/java/org/jooby/Err.java -> jooby/src/main/java/org/jooby/Err.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: package org.jooby;",
          "210: import java.util.function.BiFunction;",
          "211: import java.util.function.Function;",
          "212: import java.util.function.Supplier;",
          "",
          "[Removed Lines]",
          "206: import java.util.LinkedHashMap;",
          "207: import java.util.Map;",
          "208: import java.util.Objects;",
          "209: import java.util.Optional;",
          "",
          "[Added Lines]",
          "206: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:       Function<Object, String> xssFilter = env.xss(\"html\").compose(Objects::toString);",
          "299:       BiFunction<String, Object, String> escaper = (k, v) -> xssFilter.apply(v);",
          "308:       rsp.send(",
          "309:           Results",
          "312:     }",
          "314:   }",
          "",
          "[Removed Lines]",
          "301:       Supplier<Map<String, Object>> detailsProvider = () -> {",
          "302:         Map<String, Object> map = ex.toMap(stackstrace);",
          "303:         map.compute(\"message\", escaper);",
          "304:         map.compute(\"reason\", escaper);",
          "305:         return map;",
          "306:       };",
          "310:               .when(MediaType.html, () -> Results.html(VIEW).put(\"err\", detailsProvider.get()))",
          "311:               .when(MediaType.all, detailsProvider::get));",
          "",
          "[Added Lines]",
          "298:       Map<String, Object> details = ex.toMap(stackstrace);",
          "299:       details.compute(\"message\", escaper);",
          "300:       details.compute(\"reason\", escaper);",
          "304:               .when(MediaType.html, () -> Results.html(VIEW).put(\"err\", details))",
          "305:               .when(MediaType.all, () -> details));",
          "",
          "---------------"
        ],
        "jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java||jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java": [
          "File: jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java -> jooby/src/test/java/org/jooby/DefaultErrHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.io.PrintWriter;",
          "19: import java.io.StringWriter;",
          "20: import java.util.Map;",
          "22: @RunWith(PowerMockRunner.class)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.LinkedHashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:   private void checkErr(final String[] stacktrace, final String message,",
          "150:       final Map<String, Object> err) {",
          "156:   }",
          "158: }",
          "",
          "[Removed Lines]",
          "151:     assertEquals(message, err.remove(\"message\"));",
          "152:     assertEquals(\"Server Error\", err.remove(\"reason\"));",
          "153:     assertEquals(500, err.remove(\"status\"));",
          "154:     assertArrayEquals(stacktrace, (String[]) err.remove(\"stacktrace\"));",
          "155:     assertEquals(err.toString(), 0, err.size());",
          "",
          "[Added Lines]",
          "152:     final Map<String, Object> copy = new LinkedHashMap<>(err);",
          "153:     assertEquals(message, copy.remove(\"message\"));",
          "154:     assertEquals(\"Server Error\", copy.remove(\"reason\"));",
          "155:     assertEquals(500, copy.remove(\"status\"));",
          "156:     assertArrayEquals(stacktrace, (String[]) copy.remove(\"stacktrace\"));",
          "157:     assertEquals(copy.toString(), 0, copy.size());",
          "",
          "---------------"
        ]
      }
    }
  ]
}