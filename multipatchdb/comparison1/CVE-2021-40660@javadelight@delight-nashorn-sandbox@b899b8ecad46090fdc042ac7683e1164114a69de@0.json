{
  "cve_id": "CVE-2021-40660",
  "cve_desc": "An issue was discovered in Delight Nashorn Sandbox 0.2.0. There is an ReDoS vulnerability that can be exploited to launching a denial of service (DoS) attack.",
  "repo": "javadelight/delight-nashorn-sandbox",
  "patch_hash": "b899b8ecad46090fdc042ac7683e1164114a69de",
  "patch_info": {
    "commit_hash": "b899b8ecad46090fdc042ac7683e1164114a69de",
    "repo": "javadelight/delight-nashorn-sandbox",
    "commit_url": "https://github.com/javadelight/delight-nashorn-sandbox/commit/b899b8ecad46090fdc042ac7683e1164114a69de",
    "files": [
      ".classpath",
      "pom.xml",
      "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
      "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
      "src/test/java/delight/nashornsandbox/TestIssue117.java"
    ],
    "message": "Protect against RegEx attacks in santising script input (#139)\n\n* Adding test to assert system environment\n\n* Setting Java max memory for tests\n\n* Fixing java max memory allocations\n\n* Fixing upper memory limit\n\n* Adding comment to unit test\n\n* Adding protecting against regex attack\n\n* Increasing max operations on regex",
    "before_after_code_files": [
      "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java||src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
      "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
      "src/test/java/delight/nashornsandbox/TestIssue117.java||src/test/java/delight/nashornsandbox/TestIssue117.java"
    ]
  },
  "patch_diff": {
    "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java||src/main/java/delight/nashornsandbox/internal/JsSanitizer.java": [
      "File: src/main/java/delight/nashornsandbox/internal/JsSanitizer.java -> src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "115:   this.allowNoBraces = allowBraces;",
      "116:   this.securedJsCache = createSecuredJsCache(maxPreparedStatements);",
      "117:   assertScriptEngine();",
      "119:         this.jsBeautify = beautifierAsFunction(beautifHandler);",
      "120:  }",
      "",
      "[Removed Lines]",
      "118:         Object beautifHandler = getBeautifHandler(scriptEngine);",
      "",
      "[Added Lines]",
      "118:         Object beautifHandler = getBeautifyHandler(scriptEngine);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "124:   this.allowNoBraces = allowBraces;",
      "125:   this.securedJsCache = cache;",
      "126:   assertScriptEngine();",
      "128:         this.jsBeautify = beautifierAsFunction(beautifHandler);",
      "129:  }",
      "",
      "[Removed Lines]",
      "127:         Object beautifHandler = getBeautifHandler(scriptEngine);",
      "",
      "[Added Lines]",
      "127:         Object beautifHandler = getBeautifyHandler(scriptEngine);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "141:   }",
      "142:  }",
      "145:   try {",
      "146:    for (final String name : BEAUTIFY_FUNCTIONS) {",
      "147:     final Object somWindow = scriptEngine.eval(name);",
      "",
      "[Removed Lines]",
      "144:  private static Object getBeautifHandler(final ScriptEngine scriptEngine) {",
      "",
      "[Added Lines]",
      "144:  private static Object getBeautifyHandler(final ScriptEngine scriptEngine) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "229:   String current = str;",
      "230:   for (final PoisonPil pp : POISON_PILLS) {",
      "231:    final StringBuffer sb = new StringBuffer();",
      "233:    while (matcher.find()) {",
      "234:     matcher.appendReplacement(sb, (\"$1\" + pp.replacement));",
      "235:    }",
      "",
      "[Removed Lines]",
      "232:    final Matcher matcher = pp.pattern.matcher(current);",
      "",
      "[Added Lines]",
      "232:    final ThreadLocal<Integer> matchCount = new ThreadLocal<>();",
      "233:    matchCount.set(0);",
      "234:    final Matcher matcher = pp.pattern.matcher(new SecureInterruptibleCharSequence(current,",
      "235:     matchCount));",
      "",
      "---------------"
    ],
    "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java": [
      "File: src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java -> src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package delight.nashornsandbox.internal;",
      "3: import delight.nashornsandbox.exceptions.ScriptCPUAbuseException;",
      "5: public class SecureInterruptibleCharSequence  implements CharSequence {",
      "6:    final CharSequence inner;",
      "7:     final ThreadLocal<Integer> matchCount;",
      "9:   public SecureInterruptibleCharSequence(CharSequence inner, ThreadLocal<Integer> matchCount) {",
      "10:    super();",
      "11:    this.inner = inner;",
      "12:       this.matchCount = matchCount;",
      "13:   }",
      "15:   @Override",
      "16:   public char charAt(int index) {",
      "17:    matchCount.set(matchCount.get()+1);",
      "18:    if (matchCount.get() > 5000000){",
      "19:     Thread thread = Thread.currentThread();",
      "20:     thread.interrupt();",
      "21:    }",
      "22:    if (Thread.currentThread().isInterrupted()) {",
      "23:     throw new ScriptCPUAbuseException(\"Regular expression running for too many iterations.\", true, null);",
      "24:    }",
      "25:    return inner.charAt(index);",
      "26:   }",
      "28:   @Override",
      "29:   public int length() {",
      "30:    return inner.length();",
      "31:   }",
      "33:   @Override",
      "34:   public CharSequence subSequence(int start, int end) {",
      "35:    return new SecureInterruptibleCharSequence(inner.subSequence(start, end), matchCount);",
      "36:   }",
      "38:   @Override",
      "39:   public String toString() {",
      "40:    return inner.toString();",
      "41:   }",
      "42: }",
      "",
      "---------------"
    ],
    "src/test/java/delight/nashornsandbox/TestIssue117.java||src/test/java/delight/nashornsandbox/TestIssue117.java": [
      "File: src/test/java/delight/nashornsandbox/TestIssue117.java -> src/test/java/delight/nashornsandbox/TestIssue117.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package delight.nashornsandbox;",
      "3: import javax.script.ScriptException;",
      "5: import org.junit.Assert;",
      "6: import org.junit.Test;",
      "8: import com.mifmif.common.regex.Generex;",
      "10: import delight.nashornsandbox.exceptions.ScriptCPUAbuseException;",
      "12: public class TestIssue117 {",
      "14:   public static String getMatchStr(String regex, int repl) {",
      "15:     Generex generex = new Generex(regex);",
      "17:     String randomStr = generex.random();",
      "18:     StringBuffer sb = new StringBuffer();",
      "19:     sb.append(randomStr);",
      "20:     sb.append(\";\\n\");",
      "21:     for (int i = 0; i < repl; i++) {",
      "22:       sb.append(\"/\");",
      "23:     }",
      "25:     return sb.toString();",
      "26:   }",
      "28:   @Test",
      "29:   public void test() throws ScriptCPUAbuseException, ScriptException, NoSuchMethodException {",
      "31:     NashornSandbox sandbox = NashornSandboxes.create();",
      "33:     for (int i = 480; i <= 500; i++) {",
      "34:       long startTime = System.currentTimeMillis();",
      "35:       String js_script = getMatchStr(\"(([^;]+;){9}[^;]+)\", i);",
      "36:       try {",
      "37:         sandbox.eval(js_script);",
      "38:       } catch (Exception e) {",
      "39:       }",
      "40:       long endTime = System.currentTimeMillis();",
      "41:       long costTime = endTime - startTime;",
      "42:       Assert.assertTrue(\"RegEx attack successful. Took longer than 5000 ms to resolve script. Time required: \"+costTime, costTime <= 5000);",
      "43:     }",
      "44:   }",
      "45: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35c5ea276dfa45a131de0f3101c7cd20fb4c4d49",
      "candidate_info": {
        "commit_hash": "35c5ea276dfa45a131de0f3101c7cd20fb4c4d49",
        "repo": "javadelight/delight-nashorn-sandbox",
        "commit_url": "https://github.com/javadelight/delight-nashorn-sandbox/commit/35c5ea276dfa45a131de0f3101c7cd20fb4c4d49",
        "files": [
          ".classpath",
          "pom.xml",
          "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
          "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
          "src/test/java/delight/nashornsandbox/TestIssue117.java"
        ],
        "message": "Adding protecting against regex attack",
        "before_after_code_files": [
          "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java||src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
          "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
          "src/test/java/delight/nashornsandbox/TestIssue117.java||src/test/java/delight/nashornsandbox/TestIssue117.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/javadelight/delight-nashorn-sandbox/pull/139"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java||src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
            "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
            "src/test/java/delight/nashornsandbox/TestIssue117.java||src/test/java/delight/nashornsandbox/TestIssue117.java"
          ],
          "candidate": [
            "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java||src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
            "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
            "src/test/java/delight/nashornsandbox/TestIssue117.java||src/test/java/delight/nashornsandbox/TestIssue117.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/delight/nashornsandbox/internal/JsSanitizer.java||src/main/java/delight/nashornsandbox/internal/JsSanitizer.java": [
          "File: src/main/java/delight/nashornsandbox/internal/JsSanitizer.java -> src/main/java/delight/nashornsandbox/internal/JsSanitizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   this.allowNoBraces = allowBraces;",
          "116:   this.securedJsCache = createSecuredJsCache(maxPreparedStatements);",
          "117:   assertScriptEngine();",
          "119:         this.jsBeautify = beautifierAsFunction(beautifHandler);",
          "120:  }",
          "",
          "[Removed Lines]",
          "118:         Object beautifHandler = getBeautifHandler(scriptEngine);",
          "",
          "[Added Lines]",
          "118:         Object beautifHandler = getBeautifyHandler(scriptEngine);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   this.allowNoBraces = allowBraces;",
          "125:   this.securedJsCache = cache;",
          "126:   assertScriptEngine();",
          "128:         this.jsBeautify = beautifierAsFunction(beautifHandler);",
          "129:  }",
          "",
          "[Removed Lines]",
          "127:         Object beautifHandler = getBeautifHandler(scriptEngine);",
          "",
          "[Added Lines]",
          "127:         Object beautifHandler = getBeautifyHandler(scriptEngine);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:   }",
          "142:  }",
          "145:   try {",
          "146:    for (final String name : BEAUTIFY_FUNCTIONS) {",
          "147:     final Object somWindow = scriptEngine.eval(name);",
          "",
          "[Removed Lines]",
          "144:  private static Object getBeautifHandler(final ScriptEngine scriptEngine) {",
          "",
          "[Added Lines]",
          "144:  private static Object getBeautifyHandler(final ScriptEngine scriptEngine) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229:   String current = str;",
          "230:   for (final PoisonPil pp : POISON_PILLS) {",
          "231:    final StringBuffer sb = new StringBuffer();",
          "233:    while (matcher.find()) {",
          "234:     matcher.appendReplacement(sb, (\"$1\" + pp.replacement));",
          "235:    }",
          "",
          "[Removed Lines]",
          "232:    final Matcher matcher = pp.pattern.matcher(current);",
          "",
          "[Added Lines]",
          "232:    final ThreadLocal<Integer> matchCount = new ThreadLocal<>();",
          "233:    matchCount.set(0);",
          "234:    final Matcher matcher = pp.pattern.matcher(new SecureInterruptibleCharSequence(current,",
          "235:     matchCount));",
          "",
          "---------------"
        ],
        "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java": [
          "File: src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java -> src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package delight.nashornsandbox.internal;",
          "3: import delight.nashornsandbox.exceptions.ScriptCPUAbuseException;",
          "5: public class SecureInterruptibleCharSequence  implements CharSequence {",
          "6:    final CharSequence inner;",
          "7:     final ThreadLocal<Integer> matchCount;",
          "9:   public SecureInterruptibleCharSequence(CharSequence inner, ThreadLocal<Integer> matchCount) {",
          "10:    super();",
          "11:    this.inner = inner;",
          "12:       this.matchCount = matchCount;",
          "13:   }",
          "15:   @Override",
          "16:   public char charAt(int index) {",
          "17:    matchCount.set(matchCount.get()+1);",
          "18:    if (matchCount.get() > 100000){",
          "19:     Thread thread = Thread.currentThread();",
          "20:     thread.interrupt();",
          "21:    }",
          "22:    if (Thread.currentThread().isInterrupted()) {",
          "23:     throw new ScriptCPUAbuseException(\"Regular expression running for too many iterations.\", true, null);",
          "24:    }",
          "25:    return inner.charAt(index);",
          "26:   }",
          "28:   @Override",
          "29:   public int length() {",
          "30:    return inner.length();",
          "31:   }",
          "33:   @Override",
          "34:   public CharSequence subSequence(int start, int end) {",
          "35:    return new SecureInterruptibleCharSequence(inner.subSequence(start, end), matchCount);",
          "36:   }",
          "38:   @Override",
          "39:   public String toString() {",
          "40:    return inner.toString();",
          "41:   }",
          "42: }",
          "",
          "---------------"
        ],
        "src/test/java/delight/nashornsandbox/TestIssue117.java||src/test/java/delight/nashornsandbox/TestIssue117.java": [
          "File: src/test/java/delight/nashornsandbox/TestIssue117.java -> src/test/java/delight/nashornsandbox/TestIssue117.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package delight.nashornsandbox;",
          "3: import javax.script.ScriptException;",
          "5: import org.junit.Assert;",
          "6: import org.junit.Test;",
          "8: import com.mifmif.common.regex.Generex;",
          "10: import delight.nashornsandbox.exceptions.ScriptCPUAbuseException;",
          "12: public class TestIssue117 {",
          "14:   public static String getMatchStr(String regex, int repl) {",
          "15:     Generex generex = new Generex(regex);",
          "17:     String randomStr = generex.random();",
          "18:     StringBuffer sb = new StringBuffer();",
          "19:     sb.append(randomStr);",
          "20:     sb.append(\";\\n\");",
          "21:     for (int i = 0; i < repl; i++) {",
          "22:       sb.append(\"/\");",
          "23:     }",
          "25:     return sb.toString();",
          "26:   }",
          "28:   @Test",
          "29:   public void test() throws ScriptCPUAbuseException, ScriptException, NoSuchMethodException {",
          "31:     NashornSandbox sandbox = NashornSandboxes.create();",
          "33:     for (int i = 480; i <= 500; i++) {",
          "34:       long startTime = System.currentTimeMillis();",
          "35:       String js_script = getMatchStr(\"(([^;]+;){9}[^;]+)\", i);",
          "36:       try {",
          "37:         sandbox.eval(js_script);",
          "38:       } catch (Exception e) {",
          "39:       }",
          "40:       long endTime = System.currentTimeMillis();",
          "41:       long costTime = endTime - startTime;",
          "42:       Assert.assertTrue(\"RegEx attack successful. Took longer than 5000 ms to resolve script. Time required: \"+costTime, costTime <= 5000);",
          "43:     }",
          "44:   }",
          "45: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed3a7ab54763fd92456ceacee92463a4015255a",
      "candidate_info": {
        "commit_hash": "8ed3a7ab54763fd92456ceacee92463a4015255a",
        "repo": "javadelight/delight-nashorn-sandbox",
        "commit_url": "https://github.com/javadelight/delight-nashorn-sandbox/commit/8ed3a7ab54763fd92456ceacee92463a4015255a",
        "files": [
          "src/test/java/delight/nashornsandbox/TestSystemRequirements.java"
        ],
        "message": "Adding comment to unit test",
        "before_after_code_files": [
          "src/test/java/delight/nashornsandbox/TestSystemRequirements.java||src/test/java/delight/nashornsandbox/TestSystemRequirements.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/javadelight/delight-nashorn-sandbox/pull/139"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/test/java/delight/nashornsandbox/TestSystemRequirements.java||src/test/java/delight/nashornsandbox/TestSystemRequirements.java": [
          "File: src/test/java/delight/nashornsandbox/TestSystemRequirements.java -> src/test/java/delight/nashornsandbox/TestSystemRequirements.java"
        ]
      }
    },
    {
      "candidate_hash": "83be5b16b63b6793bdaa841433ed9d48c69735c8",
      "candidate_info": {
        "commit_hash": "83be5b16b63b6793bdaa841433ed9d48c69735c8",
        "repo": "javadelight/delight-nashorn-sandbox",
        "commit_url": "https://github.com/javadelight/delight-nashorn-sandbox/commit/83be5b16b63b6793bdaa841433ed9d48c69735c8",
        "files": [
          "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java"
        ],
        "message": "Increasing max operations on regex",
        "before_after_code_files": [
          "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/javadelight/delight-nashorn-sandbox/pull/139"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java"
          ],
          "candidate": [
            "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java||src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java": [
          "File: src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java -> src/main/java/delight/nashornsandbox/internal/SecureInterruptibleCharSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   @Override",
          "16:   public char charAt(int index) {",
          "17:    matchCount.set(matchCount.get()+1);",
          "19:     Thread thread = Thread.currentThread();",
          "20:     thread.interrupt();",
          "21:    }",
          "",
          "[Removed Lines]",
          "18:    if (matchCount.get() > 100000){",
          "",
          "[Added Lines]",
          "18:    if (matchCount.get() > 5000000){",
          "",
          "---------------"
        ]
      }
    }
  ]
}