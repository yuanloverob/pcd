{
  "cve_id": "CVE-2024-30171",
  "cve_desc": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing.",
  "repo": "bcgit/bc-java",
  "patch_hash": "d7d5e735abd64bf0f413f54fd9e495fc02400fb0",
  "patch_info": {
    "commit_hash": "d7d5e735abd64bf0f413f54fd9e495fc02400fb0",
    "repo": "bcgit/bc-java",
    "commit_url": "https://github.com/bcgit/bc-java/commit/d7d5e735abd64bf0f413f54fd9e495fc02400fb0",
    "files": [
      "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
      "prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java",
      "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
    ],
    "message": "added new RSA mode for better TLS unwrap operation relates to github #1528",
    "before_after_code_files": [
      "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
      "prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java||prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java",
      "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
    ]
  },
  "patch_diff": {
    "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java": [
      "File: prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java -> prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import org.bouncycastle.crypto.encodings.OAEPEncoding;",
      "32: import org.bouncycastle.crypto.engines.RSABlindedEngine;",
      "33: import org.bouncycastle.crypto.params.ParametersWithRandom;",
      "34: import org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;",
      "35: import org.bouncycastle.jcajce.provider.util.BadBlockException;",
      "36: import org.bouncycastle.jcajce.provider.util.DigestFactory;",
      "37: import org.bouncycastle.jcajce.util.BCJcaJceHelper;",
      "38: import org.bouncycastle.jcajce.util.JcaJceHelper;",
      "39: import org.bouncycastle.util.Strings;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import org.bouncycastle.crypto.params.RSAKeyParameters;",
      "35: import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;",
      "36: import org.bouncycastle.crypto.tls.TlsRsaKeyExchange;",
      "40: import org.bouncycastle.jcajce.spec.TLSRSAPremasterSecretParameterSpec;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:     private boolean                 publicKeyOnly = false;",
      "50:     private boolean                 privateKeyOnly = false;",
      "51:     private ErasableOutputStream    bOut = new ErasableOutputStream();",
      "53:     public CipherSpi(",
      "54:         AsymmetricBlockCipher engine)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:     private TLSRSAPremasterSecretParameterSpec tlsRsaSpec = null;",
      "57:     private CipherParameters param = null;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "262:         SecureRandom random)",
      "263:     throws InvalidKeyException, InvalidAlgorithmParameterException",
      "264:     {",
      "268:         {",
      "269:             if (key instanceof RSAPublicKey)",
      "270:             {",
      "",
      "[Removed Lines]",
      "265:         CipherParameters param;",
      "267:         if (params == null || params instanceof OAEPParameterSpec)",
      "",
      "[Added Lines]",
      "272:         this.tlsRsaSpec = null;",
      "274:         if (params == null",
      "275:             || params instanceof OAEPParameterSpec",
      "276:             || params instanceof TLSRSAPremasterSecretParameterSpec)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:                 throw new InvalidKeyException(\"unknown key type passed to RSA\");",
      "292:             }",
      "295:             {",
      "296:                 OAEPParameterSpec spec = (OAEPParameterSpec)params;",
      "",
      "[Removed Lines]",
      "294:             if (params != null)",
      "",
      "[Added Lines]",
      "303:             if (params instanceof OAEPParameterSpec)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "325:                 cipher = new OAEPEncoding(new RSABlindedEngine(), digest, mgfDigest, ((PSource.PSpecified)spec.getPSource()).getValue());",
      "326:             }",
      "327:         }",
      "328:         else",
      "329:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336:             else if (params instanceof TLSRSAPremasterSecretParameterSpec)",
      "337:             {",
      "338:                 if (!(param instanceof RSAPrivateCrtKeyParameters))",
      "339:                 {",
      "340:                     throw new InvalidKeyException(\"RSA private key required for TLS decryption\");",
      "341:                 }",
      "342:                 this.tlsRsaSpec = (TLSRSAPremasterSecretParameterSpec)params;",
      "343:             }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "403:         int     inputOffset,",
      "404:         int     inputLen)",
      "405:     {",
      "406:         bOut.write(input, inputOffset, inputLen);",
      "408:         if (cipher instanceof RSABlindedEngine)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "423:         if (tlsRsaSpec != null)",
      "424:         {",
      "425:             throw new IllegalStateException(\"RSA cipher initialized for TLS only\");",
      "426:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "430:         byte[]  output,",
      "431:         int     outputOffset)",
      "432:     {",
      "433:         bOut.write(input, inputOffset, inputLen);",
      "435:         if (cipher instanceof RSABlindedEngine)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "455:         if (tlsRsaSpec != null)",
      "456:         {",
      "457:             throw new IllegalStateException(\"RSA cipher initialized for TLS only\");",
      "458:         }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:         int     inputLen)",
      "457:         throws IllegalBlockSizeException, BadPaddingException",
      "458:     {",
      "459:         if (input != null)",
      "460:         {",
      "461:             bOut.write(input, inputOffset, inputLen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "486:         if (tlsRsaSpec != null)",
      "487:         {",
      "488:             ParametersWithRandom pWithR = (ParametersWithRandom)param;",
      "489:             return TlsRsaKeyExchange.decryptPreMasterSecret(input, (RSAKeyParameters)pWithR.getParameters(), tlsRsaSpec.getProtocolVersion(), pWithR.getRandom());",
      "490:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "487:         int     outputOffset)",
      "488:         throws IllegalBlockSizeException, BadPaddingException, ShortBufferException",
      "489:     {",
      "490:         if (outputOffset + engineGetOutputSize(inputLen) > output.length)",
      "491:         {",
      "492:             throw new ShortBufferException(\"output buffer too short for input.\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "523:         if (tlsRsaSpec != null)",
      "524:         {",
      "525:             throw new IllegalStateException(\"RSA cipher initialized for TLS only\");",
      "526:         }",
      "",
      "---------------"
    ],
    "prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java||prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java": [
      "File: prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java -> prov/src/main/java/org/bouncycastle/jcajce/spec/TLSRSAPremasterSecretParameterSpec.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.bouncycastle.jcajce.spec;",
      "3: import java.security.spec.AlgorithmParameterSpec;",
      "5: public class TLSRSAPremasterSecretParameterSpec",
      "6:     implements AlgorithmParameterSpec",
      "7: {",
      "8:     private final int protocolVersion;",
      "10:     public TLSRSAPremasterSecretParameterSpec(int protocolVersion)",
      "11:     {",
      "12:          this.protocolVersion = protocolVersion;",
      "13:     }",
      "15:     public int getProtocolVersion()",
      "16:     {",
      "17:         return protocolVersion;",
      "18:     }",
      "19: }",
      "",
      "---------------"
    ],
    "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java": [
      "File: tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java -> tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import javax.crypto.Cipher;",
      "10: import org.bouncycastle.tls.Certificate;",
      "11: import org.bouncycastle.tls.ProtocolVersion;",
      "12: import org.bouncycastle.tls.TlsCredentialedDecryptor;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: import org.bouncycastle.jcajce.spec.TLSRSAPremasterSecretParameterSpec;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:         ProtocolVersion expectedVersion = cryptoParams.getRSAPreMasterSecretVersion();",
      "92:         try",
      "93:         {",
      "94:             Cipher c = crypto.createRSAEncryptionCipher();",
      "101:         }",
      "103:         {",
      "127:         }",
      "129:         return crypto.createSecret(M);",
      "",
      "[Removed Lines]",
      "88:         byte[] fallback = new byte[48];",
      "89:         secureRandom.nextBytes(fallback);",
      "91:         byte[] M = Arrays.clone(fallback);",
      "95:             c.init(Cipher.DECRYPT_MODE, rsaServerPrivateKey, secureRandom);",
      "96:             byte[] m = c.doFinal(encryptedPreMasterSecret);",
      "97:             if (m != null && m.length == 48)",
      "98:             {",
      "99:                 M = m;",
      "100:             }",
      "102:         catch (Exception e)",
      "109:         }",
      "118:         int mask = (expectedVersion.getMajorVersion() ^ (M[0] & 0xFF))",
      "119:                  | (expectedVersion.getMinorVersion() ^ (M[1] & 0xFF));",
      "122:         mask = (mask - 1) >> 31;",
      "124:         for (int i = 0; i < 48; i++)",
      "125:         {",
      "126:             M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
      "",
      "[Added Lines]",
      "85:         byte[] M;",
      "91:             c.init(Cipher.DECRYPT_MODE, rsaServerPrivateKey, new TLSRSAPremasterSecretParameterSpec(expectedVersion.getFullVersion()), secureRandom);",
      "92:             M = c.doFinal(encryptedPreMasterSecret);",
      "94:         catch (Exception ex)",
      "101:             byte[] fallback = new byte[48];",
      "102:             secureRandom.nextBytes(fallback);",
      "104:             M = Arrays.clone(fallback);",
      "105:             try",
      "106:             {",
      "107:                 Cipher c = crypto.createRSAEncryptionCipher();",
      "109:                 c.init(Cipher.DECRYPT_MODE, rsaServerPrivateKey, secureRandom);",
      "110:                 byte[] m = c.doFinal(encryptedPreMasterSecret);",
      "111:                 if (m != null && m.length == 48)",
      "112:                 {",
      "113:                     M = m;",
      "114:                 }",
      "115:             }",
      "116:             catch (Exception e)",
      "117:             {",
      "123:             }",
      "132:             int mask = (expectedVersion.getMajorVersion() ^ (M[0] & 0xFF))",
      "133:                 | (expectedVersion.getMinorVersion() ^ (M[1] & 0xFF));",
      "136:             mask = (mask - 1) >> 31;",
      "138:             for (int i = 0; i < 48; i++)",
      "139:             {",
      "140:                 M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
      "141:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c8caa723a5647da7966412d3a048e7bf0147b8b",
      "candidate_info": {
        "commit_hash": "5c8caa723a5647da7966412d3a048e7bf0147b8b",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/5c8caa723a5647da7966412d3a048e7bf0147b8b",
        "files": [
          "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java",
          "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
        ],
        "message": "Cleanup obsolete TODO",
        "before_after_code_files": [
          "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java",
          "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
          ],
          "candidate": [
            "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
          ]
        }
      },
      "candidate_diff": {
        "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java": [
          "File: tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java -> tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import org.bouncycastle.tls.TlsCredentialedDecryptor;",
          "14: import org.bouncycastle.tls.crypto.TlsCryptoParameters;",
          "15: import org.bouncycastle.tls.crypto.TlsSecret;",
          "17: import org.bouncycastle.util.Arrays;",
          "",
          "[Removed Lines]",
          "16: import org.bouncycastle.tls.crypto.impl.TlsImplUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     }",
          "84:     {",
          "85:         SecureRandom secureRandom = crypto.getSecureRandom();",
          "",
          "[Removed Lines]",
          "82:     protected TlsSecret safeDecryptPreMasterSecret(TlsCryptoParameters cryptoParams, RSAKeyParameters rsaServerPrivateKey,",
          "83:                                                    byte[] encryptedPreMasterSecret)",
          "",
          "[Added Lines]",
          "81:     protected TlsSecret safeDecryptPreMasterSecret(TlsCryptoParameters cryptoParams,",
          "82:         RSAKeyParameters rsaServerPrivateKey, byte[] encryptedPreMasterSecret)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:         ProtocolVersion expectedVersion = cryptoParams.getRSAPreMasterSecretVersion();",
          "99:         byte[] fallback = new byte[48];",
          "100:         secureRandom.nextBytes(fallback);",
          "",
          "[Removed Lines]",
          "93:         boolean versionNumberCheckDisabled = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:         catch (Exception e)",
          "111:         {",
          "121:         }",
          "153:         }",
          "155:         return crypto.createSecret(M);",
          "",
          "[Removed Lines]",
          "127:         if (versionNumberCheckDisabled && !TlsImplUtils.isTLSv11(expectedVersion))",
          "128:         {",
          "133:         }",
          "134:         else",
          "135:         {",
          "143:             int mask = (expectedVersion.getMajorVersion() ^ (M[0] & 0xFF))",
          "144:                      | (expectedVersion.getMinorVersion() ^ (M[1] & 0xFF));",
          "147:             mask = (mask - 1) >> 31;",
          "149:             for (int i = 0; i < 48; i++)",
          "150:             {",
          "151:                 M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "152:             }",
          "",
          "[Added Lines]",
          "124:         int mask = (expectedVersion.getMajorVersion() ^ (M[0] & 0xFF))",
          "125:                  | (expectedVersion.getMinorVersion() ^ (M[1] & 0xFF));",
          "128:         mask = (mask - 1) >> 31;",
          "130:         for (int i = 0; i < 48; i++)",
          "131:         {",
          "132:             M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "",
          "---------------"
        ],
        "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java": [
          "File: tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java -> tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import org.bouncycastle.tls.TlsCredentialedDecryptor;",
          "13: import org.bouncycastle.tls.crypto.TlsCryptoParameters;",
          "14: import org.bouncycastle.tls.crypto.TlsSecret;",
          "16: import org.bouncycastle.util.Arrays;",
          "",
          "[Removed Lines]",
          "15: import org.bouncycastle.tls.crypto.impl.TlsImplUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     }",
          "76:     protected TlsSecret safeDecryptPreMasterSecret(TlsCryptoParameters cryptoParams, PrivateKey rsaServerPrivateKey,",
          "78:     {",
          "79:         SecureRandom secureRandom = crypto.getSecureRandom();",
          "",
          "[Removed Lines]",
          "77:                                                    byte[] encryptedPreMasterSecret)",
          "",
          "[Added Lines]",
          "76:         byte[] encryptedPreMasterSecret)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         ProtocolVersion expectedVersion = cryptoParams.getRSAPreMasterSecretVersion();",
          "93:         byte[] fallback = new byte[48];",
          "94:         secureRandom.nextBytes(fallback);",
          "",
          "[Removed Lines]",
          "87:         boolean versionNumberCheckDisabled = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:         catch (Exception e)",
          "108:         {",
          "115:         }",
          "147:         }",
          "149:         return crypto.createSecret(M);",
          "",
          "[Removed Lines]",
          "121:         if (versionNumberCheckDisabled && !TlsImplUtils.isTLSv11(expectedVersion))",
          "122:         {",
          "127:         }",
          "128:         else",
          "129:         {",
          "137:             int mask = (expectedVersion.getMajorVersion() ^ (M[0] & 0xFF))",
          "138:                      | (expectedVersion.getMinorVersion() ^ (M[1] & 0xFF));",
          "141:             mask = (mask - 1) >> 31;",
          "143:             for (int i = 0; i < 48; i++)",
          "144:             {",
          "145:                 M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "146:             }",
          "",
          "[Added Lines]",
          "118:         int mask = (expectedVersion.getMajorVersion() ^ (M[0] & 0xFF))",
          "119:                  | (expectedVersion.getMinorVersion() ^ (M[1] & 0xFF));",
          "122:         mask = (mask - 1) >> 31;",
          "124:         for (int i = 0; i < 48; i++)",
          "125:         {",
          "126:             M[i] = (byte)((M[i] & mask) | (fallback[i] & ~mask));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5b46eabbb6f818a291c145bd716c57ef11b2b6a",
      "candidate_info": {
        "commit_hash": "e5b46eabbb6f818a291c145bd716c57ef11b2b6a",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/e5b46eabbb6f818a291c145bd716c57ef11b2b6a",
        "files": [
          "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
        ],
        "message": "widened RSA private key support - relates to github #1528",
        "before_after_code_files": [
          "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
          ],
          "candidate": [
            "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
          ]
        }
      },
      "candidate_diff": {
        "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java": [
          "File: prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java -> prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.bouncycastle.crypto.engines.RSABlindedEngine;",
          "33: import org.bouncycastle.crypto.params.ParametersWithRandom;",
          "34: import org.bouncycastle.crypto.params.RSAKeyParameters;",
          "36: import org.bouncycastle.crypto.tls.TlsRsaKeyExchange;",
          "37: import org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;",
          "38: import org.bouncycastle.jcajce.provider.util.BadBlockException;",
          "",
          "[Removed Lines]",
          "35: import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335:             }",
          "336:             else if (params instanceof TLSRSAPremasterSecretParameterSpec)",
          "337:             {",
          "339:                 {",
          "340:                     throw new InvalidKeyException(\"RSA private key required for TLS decryption\");",
          "341:                 }",
          "342:                 this.tlsRsaSpec = (TLSRSAPremasterSecretParameterSpec)params;",
          "343:             }",
          "344:         }",
          "",
          "[Removed Lines]",
          "338:                 if (!(param instanceof RSAPrivateCrtKeyParameters))",
          "",
          "[Added Lines]",
          "337:                 if (!(param instanceof RSAKeyParameters) || !((RSAKeyParameters)param).isPrivate())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c84c414fd9bed10bf2a171c29b95d221c77f74c",
      "candidate_info": {
        "commit_hash": "9c84c414fd9bed10bf2a171c29b95d221c77f74c",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/9c84c414fd9bed10bf2a171c29b95d221c77f74c",
        "files": [
          "core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java",
          "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
          "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java"
        ],
        "message": "Round out implementation of TLS RSA PreMasterSecret",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java||core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java",
          "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
          "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
          ],
          "candidate": [
            "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java||core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java -> core/src/main/java/org/bouncycastle/crypto/tls/TlsRsaKeyExchange.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: public abstract class TlsRsaKeyExchange",
          "18: {",
          "19:     private static final BigInteger ONE = BigInteger.valueOf(1);",
          "21:     private TlsRsaKeyExchange()",
          "22:     {",
          "23:     }",
          "26:         int protocolVersion, SecureRandom secureRandom)",
          "27:     {",
          "29:         {",
          "31:         }",
          "33:         if (!privateKey.isPrivate())",
          "",
          "[Removed Lines]",
          "25:     public static byte[] decryptPreMasterSecret(byte[] encryptedPreMasterSecret, RSAKeyParameters privateKey,",
          "28:         if (Arrays.isNullOrEmpty(encryptedPreMasterSecret))",
          "30:             throw new IllegalArgumentException(\"'encryptedPreMasterSecret' cannot be null or empty\");",
          "",
          "[Added Lines]",
          "19:     public static final int PRE_MASTER_SECRET_LENGTH = 48;",
          "27:     public static byte[] decryptPreMasterSecret(byte[] in, int inOff, int inLen, RSAKeyParameters privateKey,",
          "30:         if (in == null || inLen < 1 || inLen > getInputLimit(privateKey) || inOff < 0 || inOff > in.length - inLen)",
          "32:             throw new IllegalArgumentException(\"input not a valid EncryptedPreMasterSecret\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         try",
          "63:         {",
          "65:             byte[] encoding = rsaBlinded(privateKey, input, secureRandom);",
          "67:             int pkcs1Length = (bitLength - 1) / 8;",
          "",
          "[Removed Lines]",
          "64:             BigInteger input = convertInput(modulus, encryptedPreMasterSecret);",
          "",
          "[Added Lines]",
          "66:             BigInteger input = convertInput(modulus, in, inOff, inLen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:         return result;",
          "93:     }",
          "95:     private static int caddTo(int len, int cond, byte[] x, byte[] z)",
          "96:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     public static int getInputLimit(RSAKeyParameters privateKey)",
          "98:     {",
          "99:         return (privateKey.getModulus().bitLength() + 7) / 8;",
          "100:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:         return errorSign >> 31;",
          "141:     }",
          "144:     {",
          "148:         {",
          "154:         }",
          "156:         throw new DataLengthException(\"input too large for RSA cipher.\");",
          "",
          "[Removed Lines]",
          "143:     private static BigInteger convertInput(BigInteger modulus, byte[] input)",
          "145:         int inputLimit = (modulus.bitLength() + 7) / 8;",
          "147:         if (input.length <= inputLimit)",
          "149:             BigInteger result = new BigInteger(1, input);",
          "150:             if (result.compareTo(modulus) < 0)",
          "151:             {",
          "152:                 return result;",
          "153:             }",
          "",
          "[Added Lines]",
          "150:     private static BigInteger convertInput(BigInteger modulus, byte[] in, int inOff, int inLen)",
          "152:         BigInteger result = BigIntegers.fromUnsignedByteArray(in, inOff, inLen);",
          "153:         if (result.compareTo(modulus) < 0)",
          "155:             return result;",
          "",
          "---------------"
        ],
        "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java": [
          "File: prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java -> prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:         int     inputOffset,",
          "421:         int     inputLen)",
          "422:     {",
          "424:         {",
          "426:         }",
          "428:         bOut.write(input, inputOffset, inputLen);",
          "445:         return null;",
          "446:     }",
          "",
          "[Removed Lines]",
          "423:         if (tlsRsaSpec != null)",
          "425:             throw new IllegalStateException(\"RSA cipher initialized for TLS only\");",
          "430:         if (cipher instanceof RSABlindedEngine)",
          "431:         {",
          "432:             if (bOut.size() > cipher.getInputBlockSize() + 1)",
          "433:             {",
          "434:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "435:             }",
          "436:         }",
          "437:         else",
          "438:         {",
          "439:             if (bOut.size() > cipher.getInputBlockSize())",
          "440:             {",
          "441:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "442:             }",
          "443:         }",
          "",
          "[Added Lines]",
          "423:         if (inputLen > getInputLimit() - bOut.size())",
          "425:             throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:         byte[]  output,",
          "453:         int     outputOffset)",
          "454:     {",
          "477:         return 0;",
          "478:     }",
          "",
          "[Removed Lines]",
          "455:         if (tlsRsaSpec != null)",
          "456:         {",
          "457:             throw new IllegalStateException(\"RSA cipher initialized for TLS only\");",
          "458:         }",
          "460:         bOut.write(input, inputOffset, inputLen);",
          "462:         if (cipher instanceof RSABlindedEngine)",
          "463:         {",
          "464:             if (bOut.size() > cipher.getInputBlockSize() + 1)",
          "465:             {",
          "466:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "467:             }",
          "468:         }",
          "469:         else",
          "470:         {",
          "471:             if (bOut.size() > cipher.getInputBlockSize())",
          "472:             {",
          "473:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "474:             }",
          "475:         }",
          "",
          "[Added Lines]",
          "439:         engineUpdate(input, inputOffset, inputLen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "483:         int     inputLen)",
          "484:         throws IllegalBlockSizeException, BadPaddingException",
          "485:     {",
          "492:         if (input != null)",
          "493:         {",
          "510:         }",
          "512:         return getOutput();",
          "",
          "[Removed Lines]",
          "486:         if (tlsRsaSpec != null)",
          "487:         {",
          "488:             ParametersWithRandom pWithR = (ParametersWithRandom)param;",
          "489:             return TlsRsaKeyExchange.decryptPreMasterSecret(input, (RSAKeyParameters)pWithR.getParameters(), tlsRsaSpec.getProtocolVersion(), pWithR.getRandom());",
          "490:         }",
          "494:             bOut.write(input, inputOffset, inputLen);",
          "495:         }",
          "497:         if (cipher instanceof RSABlindedEngine)",
          "498:         {",
          "499:             if (bOut.size() > cipher.getInputBlockSize() + 1)",
          "500:             {",
          "501:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "502:             }",
          "503:         }",
          "504:         else",
          "505:         {",
          "506:             if (bOut.size() > cipher.getInputBlockSize())",
          "507:             {",
          "508:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "509:             }",
          "",
          "[Added Lines]",
          "451:             engineUpdate(input, inputOffset, inputLen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "520:         int     outputOffset)",
          "521:         throws IllegalBlockSizeException, BadPaddingException, ShortBufferException",
          "522:     {",
          "523:         if (tlsRsaSpec != null)",
          "524:         {",
          "526:         }",
          "529:         {",
          "531:         }",
          "534:         {",
          "536:         }",
          "539:         {",
          "544:         }",
          "546:         {",
          "551:         }",
          "556:         {",
          "558:         }",
          "561:     }",
          "563:     private byte[] getOutput()",
          "",
          "[Removed Lines]",
          "525:             throw new IllegalStateException(\"RSA cipher initialized for TLS only\");",
          "528:         if (outputOffset + engineGetOutputSize(inputLen) > output.length)",
          "530:             throw new ShortBufferException(\"output buffer too short for input.\");",
          "533:         if (input != null)",
          "535:             bOut.write(input, inputOffset, inputLen);",
          "538:         if (cipher instanceof RSABlindedEngine)",
          "540:             if (bOut.size() > cipher.getInputBlockSize() + 1)",
          "541:             {",
          "542:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "543:             }",
          "545:         else",
          "547:             if (bOut.size() > cipher.getInputBlockSize())",
          "548:             {",
          "549:                 throw new ArrayIndexOutOfBoundsException(\"too much data for RSA block\");",
          "550:             }",
          "553:         byte[]  out = getOutput();",
          "555:         for (int i = 0; i != out.length; i++)",
          "557:             output[outputOffset + i] = out[i];",
          "560:         return out.length;",
          "",
          "[Added Lines]",
          "465:         int outputSize;",
          "468:             outputSize = TlsRsaKeyExchange.PRE_MASTER_SECRET_LENGTH;",
          "470:         else",
          "472:             outputSize = engineGetOutputSize(input == null ? 0 : inputLen);",
          "475:         if (outputOffset > output.length - outputSize)",
          "477:             throw new ShortBufferException(\"output buffer too short for input.\");",
          "480:         byte[] out = engineDoFinal(input, inputOffset, inputLen);",
          "481:         System.arraycopy(out, 0, output, outputOffset, out.length);",
          "482:         return out.length;",
          "483:     }",
          "485:     private int getInputLimit()",
          "486:     {",
          "487:         if (tlsRsaSpec != null)",
          "489:             ParametersWithRandom pWithR = (ParametersWithRandom)param;",
          "490:             return TlsRsaKeyExchange.getInputLimit((RSAKeyParameters)pWithR.getParameters());",
          "492:         else if (cipher instanceof RSABlindedEngine)",
          "494:             return cipher.getInputBlockSize() + 1;",
          "496:         else",
          "498:             return cipher.getInputBlockSize();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "565:     {",
          "566:         try",
          "567:         {",
          "568:             byte[] output;",
          "569:             try",
          "570:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:             if (tlsRsaSpec != null)",
          "508:             {",
          "509:                 ParametersWithRandom pWithR = (ParametersWithRandom)param;",
          "510:                 return TlsRsaKeyExchange.decryptPreMasterSecret(bOut.getBuf(), 0, bOut.size(),",
          "511:                     (RSAKeyParameters)pWithR.getParameters(), tlsRsaSpec.getProtocolVersion(), pWithR.getRandom());",
          "512:             }",
          "",
          "---------------"
        ],
        "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java||tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java": [
          "File: tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java -> tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcDefaultTlsCredentialedDecryptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         ProtocolVersion expectedVersion = cryptoParams.getRSAPreMasterSecretVersion();",
          "81:         byte[] preMasterSecret = org.bouncycastle.crypto.tls.TlsRsaKeyExchange.decryptPreMasterSecret(",
          "84:         return crypto.createSecret(preMasterSecret);",
          "85:     }",
          "",
          "[Removed Lines]",
          "82:             encryptedPreMasterSecret, rsaServerPrivateKey, expectedVersion.getFullVersion(), crypto.getSecureRandom());",
          "",
          "[Added Lines]",
          "82:             encryptedPreMasterSecret, 0, encryptedPreMasterSecret.length, rsaServerPrivateKey,",
          "83:             expectedVersion.getFullVersion(), crypto.getSecureRandom());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "937d9c26ddcbe21a4a684f108cdc1376c5937a3d",
      "candidate_info": {
        "commit_hash": "937d9c26ddcbe21a4a684f108cdc1376c5937a3d",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/937d9c26ddcbe21a4a684f108cdc1376c5937a3d",
        "files": [
          "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
        ],
        "message": "Fix engineGetOutputSize and add some TODOs",
        "before_after_code_files": [
          "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
          ],
          "candidate": [
            "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java"
          ]
        }
      },
      "candidate_diff": {
        "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java||prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java": [
          "File: prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java -> prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/rsa/CipherSpi.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     protected int engineGetOutputSize(",
          "135:         int     inputLen)",
          "136:     {",
          "137:         try",
          "138:         {",
          "139:             return cipher.getOutputBlockSize();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:         if (tlsRsaSpec != null)",
          "138:         {",
          "139:             return TlsRsaKeyExchange.PRE_MASTER_SECRET_LENGTH;",
          "140:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:         int     outputOffset)",
          "463:         throws IllegalBlockSizeException, BadPaddingException, ShortBufferException",
          "464:     {",
          "475:         if (outputOffset > output.length - outputSize)",
          "476:         {",
          "477:             throw new ShortBufferException(\"output buffer too short for input.\");",
          "",
          "[Removed Lines]",
          "465:         int outputSize;",
          "466:         if (tlsRsaSpec != null)",
          "467:         {",
          "468:             outputSize = TlsRsaKeyExchange.PRE_MASTER_SECRET_LENGTH;",
          "469:         }",
          "470:         else",
          "471:         {",
          "472:             outputSize = engineGetOutputSize(input == null ? 0 : inputLen);",
          "473:         }",
          "",
          "[Added Lines]",
          "474:         int outputSize = engineGetOutputSize(input == null ? 0 : inputLen);",
          "",
          "---------------"
        ]
      }
    }
  ]
}