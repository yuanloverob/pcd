{
  "cve_id": "CVE-2022-42004",
  "cve_desc": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.",
  "repo": "FasterXML/jackson-databind",
  "patch_hash": "063183589218fec19a9293ed2f17ec53ea80ba88",
  "patch_info": {
    "commit_hash": "063183589218fec19a9293ed2f17ec53ea80ba88",
    "repo": "FasterXML/jackson-databind",
    "commit_url": "https://github.com/FasterXML/jackson-databind/commit/063183589218fec19a9293ed2f17ec53ea80ba88",
    "files": [
      "release-notes/VERSION-2.x",
      "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
      "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
    ],
    "message": "Fix #3582",
    "before_after_code_files": [
      "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java||src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
      "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java||src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": [
      "File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java -> src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java"
    ],
    "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": [
      "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import com.fasterxml.jackson.databind.cfg.CoercionAction;",
      "9: import com.fasterxml.jackson.databind.deser.impl.*;",
      "10: import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;",
      "11: import com.fasterxml.jackson.databind.util.IgnorePropertiesUtil;",
      "12: import com.fasterxml.jackson.databind.util.NameTransformer;",
      "13: import com.fasterxml.jackson.databind.util.TokenBuffer;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: import com.fasterxml.jackson.databind.util.ClassUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "628:                 return ctxt.handleUnexpectedToken(getValueType(ctxt), JsonToken.START_ARRAY, p, null);",
      "629:             }",
      "630:             if (unwrap) {",
      "631:                 final Object value = deserialize(p, ctxt);",
      "632:                 if (p.nextToken() != JsonToken.END_ARRAY) {",
      "633:                     handleMissingEndArrayForSingle(p, ctxt);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "634:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
      "635:                     JavaType targetType = getValueType(ctxt);",
      "636:                     return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,",
      "637: \"Cannot deserialize value of type %s from deeply-nested JSON Array: only single wrapper allowed with `%s`\",",
      "638:                             ClassUtil.getTypeDescription(targetType),",
      "639:                                     \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
      "640:                 }",
      "",
      "---------------"
    ],
    "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java": [
      "File: src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java -> src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package com.fasterxml.jackson.databind.deser.dos;",
      "3: import com.fasterxml.jackson.databind.*;",
      "5: public class DeepArrayWrappingForDeser3582Test extends BaseMapTest",
      "6: {",
      "12:     private final ObjectMapper MAPPER = jsonMapperBuilder()",
      "13:             .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
      "",
      "[Removed Lines]",
      "10:     private final static int TOO_DEEP_NESTING = 999;",
      "",
      "[Added Lines]",
      "4: import com.fasterxml.jackson.databind.exc.MismatchedInputException;",
      "9:     private final static int TOO_DEEP_NESTING = 9999;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16:     public void testArrayWrapping() throws Exception",
      "17:     {",
      "18:         final String doc = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"{}\");",
      "21:     }",
      "23:     private String _nestedDoc(int nesting, String open, String close, String content) {",
      "",
      "[Removed Lines]",
      "19:         Point p = MAPPER.readValue(doc, Point.class);",
      "20:         assertNotNull(p);",
      "",
      "[Added Lines]",
      "18:         try {",
      "19:             MAPPER.readValue(doc, Point.class);",
      "20:             fail(\"Should not pass\");",
      "21:         } catch (MismatchedInputException e) {",
      "22:             verifyException(e, \"Cannot deserialize\");",
      "23:             verifyException(e, \"nested JSON Array\");",
      "24:             verifyException(e, \"only single\");",
      "25:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd090979b7ea78c75e4de8a4aed04f7e9fa8deea",
      "candidate_info": {
        "commit_hash": "cd090979b7ea78c75e4de8a4aed04f7e9fa8deea",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea",
        "files": [
          "release-notes/VERSION-2.x",
          "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java"
        ],
        "message": "backport Fix #3590 and Fix #3582 (#3622)",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java||src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java||src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java||src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java||src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java -> src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java"
        ],
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import com.fasterxml.jackson.databind.cfg.CoercionAction;",
          "9: import com.fasterxml.jackson.databind.deser.impl.*;",
          "10: import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;",
          "11: import com.fasterxml.jackson.databind.util.IgnorePropertiesUtil;",
          "12: import com.fasterxml.jackson.databind.util.NameTransformer;",
          "13: import com.fasterxml.jackson.databind.util.TokenBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import com.fasterxml.jackson.databind.util.ClassUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:                 return ctxt.handleUnexpectedToken(getValueType(ctxt), JsonToken.START_ARRAY, p, null);",
          "631:             }",
          "632:             if (unwrap) {",
          "633:                 final Object value = deserialize(p, ctxt);",
          "634:                 if (p.nextToken() != JsonToken.END_ARRAY) {",
          "635:                     handleMissingEndArrayForSingle(p, ctxt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "637:                     JavaType targetType = getValueType(ctxt);",
          "638:                     return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,",
          "639: \"Cannot deserialize value of type %s from deeply-nested JSON Array: only single wrapper allowed with `%s`\",",
          "640:                             ClassUtil.getTypeDescription(targetType),",
          "641:                                     \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
          "642:                 }",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:         if (p.hasToken(JsonToken.START_ARRAY)) {",
          "364:             @SuppressWarnings(\"unchecked\")",
          "366:             return result;",
          "367:         }",
          "368:         return (T) deserialize(p, ctxt);",
          "",
          "[Removed Lines]",
          "360:             String msg = String.format(",
          "361: \"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",",
          "362:                     ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,",
          "363:                     \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
          "365:             T result = (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, msg);",
          "",
          "[Added Lines]",
          "361:             T result = (T) handleNestedArrayForSingle(p, ctxt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:         case JsonTokenId.ID_START_ARRAY:",
          "415:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "417:                 final boolean parsed = _parseBooleanPrimitive(p, ctxt);",
          "418:                 _verifyEndArrayForSingle(p, ctxt);",
          "419:                 return parsed;",
          "",
          "[Removed Lines]",
          "416:                 p.nextToken();",
          "",
          "[Added Lines]",
          "412:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "413:                     return (boolean) handleNestedArrayForSingle(p, ctxt);",
          "414:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "582:         case JsonTokenId.ID_START_ARRAY: // unwrapping / from-empty-array coercion?",
          "584:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "586:                 final byte parsed = _parseBytePrimitive(p, ctxt);",
          "587:                 _verifyEndArrayForSingle(p, ctxt);",
          "588:                 return parsed;",
          "",
          "[Removed Lines]",
          "585:                 p.nextToken();",
          "",
          "[Added Lines]",
          "583:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "584:                     return (byte) handleNestedArrayForSingle(p, ctxt);",
          "585:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "650:         case JsonTokenId.ID_START_ARRAY:",
          "652:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "654:                 final short parsed = _parseShortPrimitive(p, ctxt);",
          "655:                 _verifyEndArrayForSingle(p, ctxt);",
          "656:                 return parsed;",
          "",
          "[Removed Lines]",
          "653:                 p.nextToken();",
          "",
          "[Added Lines]",
          "653:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "654:                     return (short) handleNestedArrayForSingle(p, ctxt);",
          "655:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "715:             break;",
          "716:         case JsonTokenId.ID_START_ARRAY:",
          "717:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "719:                 final int parsed = _parseIntPrimitive(p, ctxt);",
          "720:                 _verifyEndArrayForSingle(p, ctxt);",
          "721:                 return parsed;",
          "",
          "[Removed Lines]",
          "718:                 p.nextToken();",
          "",
          "[Added Lines]",
          "720:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "721:                     return (int) handleNestedArrayForSingle(p, ctxt);",
          "722:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "842:             break;",
          "843:         case JsonTokenId.ID_START_ARRAY:",
          "844:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "846:                 final long parsed = _parseLongPrimitive(p, ctxt);",
          "847:                 _verifyEndArrayForSingle(p, ctxt);",
          "848:                 return parsed;",
          "",
          "[Removed Lines]",
          "845:                 p.nextToken();",
          "",
          "[Added Lines]",
          "849:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "850:                     return (long) handleNestedArrayForSingle(p, ctxt);",
          "851:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "953:             break;",
          "954:         case JsonTokenId.ID_START_ARRAY:",
          "955:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "957:                 final float parsed = _parseFloatPrimitive(p, ctxt);",
          "958:                 _verifyEndArrayForSingle(p, ctxt);",
          "959:                 return parsed;",
          "",
          "[Removed Lines]",
          "956:                 p.nextToken();",
          "",
          "[Added Lines]",
          "962:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "963:                     return (float) handleNestedArrayForSingle(p, ctxt);",
          "964:                 }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1058:             break;",
          "1059:         case JsonTokenId.ID_START_ARRAY:",
          "1060:             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "1062:                 final double parsed = _parseDoublePrimitive(p, ctxt);",
          "1063:                 _verifyEndArrayForSingle(p, ctxt);",
          "1064:                 return parsed;",
          "",
          "[Removed Lines]",
          "1061:                 p.nextToken();",
          "",
          "[Added Lines]",
          "1069:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "1070:                     return (double) handleNestedArrayForSingle(p, ctxt);",
          "1071:                 }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1214:                 default:",
          "1215:                 }",
          "1216:             } else if (unwrap) {",
          "1217:                 final Date parsed = _parseDate(p, ctxt);",
          "1218:                 _verifyEndArrayForSingle(p, ctxt);",
          "1219:                 return parsed;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227:                 if (t == JsonToken.START_ARRAY) {",
          "1228:                     return (java.util.Date) handleNestedArrayForSingle(p, ctxt);",
          "1229:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1991:     }",
          "1993:     protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException",
          "1994:     {",
          "1995:         JsonToken t = p.nextToken();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2012:     protected Object handleNestedArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException",
          "2013:     {",
          "2014:         String msg = String.format(",
          "2015: \"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",",
          "2016:                 ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,",
          "2017:                 \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
          "2018:         return ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, msg);",
          "2019:     }",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java -> src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package com.fasterxml.jackson.databind.deser.dos;",
          "3: import com.fasterxml.jackson.databind.*;",
          "4: import com.fasterxml.jackson.databind.exc.MismatchedInputException;",
          "6: public class DeepArrayWrappingForDeser3582Test extends BaseMapTest",
          "7: {",
          "9:     private final static int TOO_DEEP_NESTING = 9999;",
          "11:     private final ObjectMapper MAPPER = jsonMapperBuilder()",
          "12:             .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
          "13:             .build();",
          "15:     public void testArrayWrapping() throws Exception",
          "16:     {",
          "17:         final String doc = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"{}\");",
          "18:         try {",
          "19:             MAPPER.readValue(doc, Point.class);",
          "20:             fail(\"Should not pass\");",
          "21:         } catch (MismatchedInputException e) {",
          "22:             verifyException(e, \"Cannot deserialize\");",
          "23:             verifyException(e, \"nested JSON Array\");",
          "24:             verifyException(e, \"only single\");",
          "25:         }",
          "26:     }",
          "28:     private String _nestedDoc(int nesting, String open, String close, String content) {",
          "29:         StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));",
          "30:         for (int i = 0; i < nesting; ++i) {",
          "31:             sb.append(open);",
          "32:             if ((i & 31) == 0) {",
          "33:                 sb.append(\"\\n\");",
          "34:             }",
          "35:         }",
          "36:         sb.append(\"\\n\").append(content).append(\"\\n\");",
          "37:         for (int i = 0; i < nesting; ++i) {",
          "38:             sb.append(close);",
          "39:             if ((i & 31) == 0) {",
          "40:                 sb.append(\"\\n\");",
          "41:             }",
          "42:         }",
          "43:         return sb.toString();",
          "44:     }",
          "46: }",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java -> src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package com.fasterxml.jackson.databind.deser.dos;",
          "3: import java.util.Date;",
          "5: import com.fasterxml.jackson.databind.*;",
          "6: import com.fasterxml.jackson.databind.exc.MismatchedInputException;",
          "8: public class DeepArrayWrappingForDeser3590Test extends BaseMapTest",
          "9: {",
          "11:     private final static int TOO_DEEP_NESTING = 9999;",
          "13:     private final ObjectMapper MAPPER = jsonMapperBuilder()",
          "14:             .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
          "15:             .build();",
          "17:     private final static String TOO_DEEP_DOC = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"123\");",
          "19:     public void testArrayWrappingForBoolean() throws Exception",
          "20:     {",
          "21:         _testArrayWrappingFor(Boolean.class);",
          "22:         _testArrayWrappingFor(Boolean.TYPE);",
          "23:     }",
          "25:     public void testArrayWrappingForByte() throws Exception",
          "26:     {",
          "27:         _testArrayWrappingFor(Byte.class);",
          "28:         _testArrayWrappingFor(Byte.TYPE);",
          "29:     }",
          "31:     public void testArrayWrappingForShort() throws Exception",
          "32:     {",
          "33:         _testArrayWrappingFor(Short.class);",
          "34:         _testArrayWrappingFor(Short.TYPE);",
          "35:     }",
          "37:     public void testArrayWrappingForInt() throws Exception",
          "38:     {",
          "39:         _testArrayWrappingFor(Integer.class);",
          "40:         _testArrayWrappingFor(Integer.TYPE);",
          "41:     }",
          "43:     public void testArrayWrappingForLong() throws Exception",
          "44:     {",
          "45:         _testArrayWrappingFor(Long.class);",
          "46:         _testArrayWrappingFor(Long.TYPE);",
          "47:     }",
          "49:     public void testArrayWrappingForFloat() throws Exception",
          "50:     {",
          "51:         _testArrayWrappingFor(Float.class);",
          "52:         _testArrayWrappingFor(Float.TYPE);",
          "53:     }",
          "55:     public void testArrayWrappingForDouble() throws Exception",
          "56:     {",
          "57:         _testArrayWrappingFor(Double.class);",
          "58:         _testArrayWrappingFor(Double.TYPE);",
          "59:     }",
          "61:     public void testArrayWrappingForDate() throws Exception",
          "62:     {",
          "63:         _testArrayWrappingFor(Date.class);",
          "64:     }",
          "66:     private void _testArrayWrappingFor(Class<?> cls) throws Exception",
          "67:     {",
          "68:         try {",
          "69:             MAPPER.readValue(TOO_DEEP_DOC, cls);",
          "70:             fail(\"Should not pass\");",
          "71:         } catch (MismatchedInputException e) {",
          "72:             verifyException(e, \"Cannot deserialize\");",
          "73:             verifyException(e, \"nested Arrays not allowed\");",
          "74:         }",
          "75:     }",
          "77:     private static String _nestedDoc(int nesting, String open, String close, String content) {",
          "78:         StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));",
          "79:         for (int i = 0; i < nesting; ++i) {",
          "80:             sb.append(open);",
          "81:             if ((i & 31) == 0) {",
          "82:                 sb.append(\"\\n\");",
          "83:             }",
          "84:         }",
          "85:         sb.append(\"\\n\").append(content).append(\"\\n\");",
          "86:         for (int i = 0; i < nesting; ++i) {",
          "87:             sb.append(close);",
          "88:             if ((i & 31) == 0) {",
          "89:                 sb.append(\"\\n\");",
          "90:             }",
          "91:         }",
          "92:         return sb.toString();",
          "93:     }",
          "95: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c0a74ee77a0896e9a3fde3600066ea0b7490f5b",
      "candidate_info": {
        "commit_hash": "7c0a74ee77a0896e9a3fde3600066ea0b7490f5b",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/7c0a74ee77a0896e9a3fde3600066ea0b7490f5b",
        "files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java"
        ],
        "message": "Fix string-based creators with UNWRAP_SINGLE_VALUE_ARRAYS (#3666)",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java||src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java||src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:         final boolean unwrap = ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);",
          "618:         if (unwrap || (act != CoercionAction.Fail)) {",
          "621:                 switch (act) {",
          "622:                 case AsEmpty:",
          "623:                     return getEmptyValue(ctxt);",
          "",
          "[Removed Lines]",
          "619:             JsonToken t = p.nextToken();",
          "620:             if (t == JsonToken.END_ARRAY) {",
          "",
          "[Added Lines]",
          "619:             JsonToken unwrappedToken = p.nextToken();",
          "620:             if (unwrappedToken == JsonToken.END_ARRAY) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "631:             if (unwrap) {",
          "635:                     JavaType targetType = getValueType(ctxt);",
          "636:                     return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,",
          "637: \"Cannot deserialize value of type %s from deeply-nested Array: only single wrapper allowed with `%s`\",",
          "",
          "[Removed Lines]",
          "634:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "",
          "[Added Lines]",
          "634:                 if (unwrappedToken == JsonToken.START_ARRAY) {",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:             JsonToken t = p.currentToken();",
          "154:             if ((t != null) && !t.isScalarValue()) {",
          "156:                 value = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:             boolean unwrapping = false;",
          "155:             if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {",
          "156:                 t = p.nextToken();",
          "157:                 unwrapping = true;",
          "158:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:             } else {",
          "159:                 value = p.getValueAsString();",
          "160:             }",
          "161:         } else { // zero-args; just skip whatever value there may be",
          "162:             p.skipChildren();",
          "163:             try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:             if (unwrapping) {",
          "167:                 if (p.nextToken() != JsonToken.END_ARRAY) {",
          "168:                     handleMissingEndArrayForSingle(p, ctxt);",
          "169:                 }",
          "170:             }",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java||src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java -> src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         }",
          "63:     }",
          "65:     static enum EnumWithPropertiesModeJsonCreator {",
          "66:         TEST1,",
          "67:         TEST2,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     protected enum TestEnumFromString",
          "66:     {",
          "67:         ENUM_A, ENUM_B, ENUM_C;",
          "69:         @JsonCreator public static TestEnumFromString fromId(String id) {",
          "70:             return valueOf(id);",
          "71:         }",
          "72:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:         assertEquals(Enum3280.x, r.readValue(\"{\\\"a\\\":[], \\\"b\\\":\\\"x\\\"}\"));",
          "345:         assertEquals(Enum3280.x, r.readValue(\"{\\\"a\\\":{}, \\\"b\\\":\\\"x\\\"}\"));",
          "346:     }",
          "347: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:     public void testEnumsFromIntsUnwrapped() throws Exception",
          "359:     {",
          "360:         Object ob = newJsonMapper()",
          "361:                 .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
          "362:                 .readValue(\"[1]\", TestEnumFromInt.class);",
          "363:         assertEquals(TestEnumFromInt.class, ob.getClass());",
          "364:         assertSame(TestEnumFromInt.ENUM_A, ob);",
          "365:     }",
          "368:     public void testEnumsFromStringUnwrapped() throws Exception",
          "369:     {",
          "370:         Object ob = newJsonMapper()",
          "371:                 .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
          "372:                 .readValue(\"[\\\"ENUM_A\\\"]\", TestEnumFromString.class);",
          "373:         assertEquals(TestEnumFromString.class, ob.getClass());",
          "374:         assertSame(TestEnumFromString.ENUM_A, ob);",
          "375:     }",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java||src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java -> src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         assertEquals(\"DELEG:testProduct\",",
          "206:                 MAPPER.readValue(q(\"testProduct\"), Product1853.class).getName());",
          "207:     }",
          "208: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:     public void testDeserializationFromWrappedString() throws Exception {",
          "210:         assertEquals(\"DELEG:testProduct\",",
          "211:                 newJsonMapper()",
          "212:                         .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
          "213:                         .readValue(\"[\\\"testProduct\\\"]\", Product1853.class).getName());",
          "214:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ef87cbd06dced7ee8cf86b648188d3385cf30a5",
      "candidate_info": {
        "commit_hash": "7ef87cbd06dced7ee8cf86b648188d3385cf30a5",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/7ef87cbd06dced7ee8cf86b648188d3385cf30a5",
        "files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
        ],
        "message": "Minor wording change for exception to reduce use of \"JSON\" when talking about data",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:                 if (p.nextToken() == JsonToken.START_ARRAY) {",
          "635:                     JavaType targetType = getValueType(ctxt);",
          "636:                     return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,",
          "638:                             ClassUtil.getTypeDescription(targetType),",
          "639:                                     \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
          "640:                 }",
          "",
          "[Removed Lines]",
          "637: \"Cannot deserialize value of type %s from deeply-nested JSON Array: only single wrapper allowed with `%s`\",",
          "",
          "[Added Lines]",
          "637: \"Cannot deserialize value of type %s from deeply-nested Array: only single wrapper allowed with `%s`\",",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java -> src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:             fail(\"Should not pass\");",
          "21:         } catch (MismatchedInputException e) {",
          "22:             verifyException(e, \"Cannot deserialize\");",
          "24:             verifyException(e, \"only single\");",
          "25:         }",
          "26:     }",
          "",
          "[Removed Lines]",
          "23:             verifyException(e, \"nested JSON Array\");",
          "",
          "[Added Lines]",
          "23:             verifyException(e, \"nested Array\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35de19e7144c4df8ab178b800ba86e80c3d84252",
      "candidate_info": {
        "commit_hash": "35de19e7144c4df8ab178b800ba86e80c3d84252",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/35de19e7144c4df8ab178b800ba86e80c3d84252",
        "files": [
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
        ],
        "message": "Add a (failing) test for #3582",
        "before_after_code_files": [
          "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
          ],
          "candidate": [
            "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java||src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java -> src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3582Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package com.fasterxml.jackson.databind.deser.dos;",
          "3: import com.fasterxml.jackson.databind.*;",
          "5: public class DeepArrayWrappingForDeser3582Test extends BaseMapTest",
          "6: {",
          "10:     private final static int TOO_DEEP_NESTING = 1999;",
          "12:     private final ObjectMapper MAPPER = jsonMapperBuilder()",
          "13:             .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)",
          "14:             .build();",
          "16:     public void testArrayWrapping() throws Exception",
          "17:     {",
          "18:         final String doc = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"{}\");",
          "19:         Point p = MAPPER.readValue(doc, Point.class);",
          "20:         assertNotNull(p);",
          "21:     }",
          "23:     private String _nestedDoc(int nesting, String open, String close, String content) {",
          "24:         StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));",
          "25:         for (int i = 0; i < nesting; ++i) {",
          "26:             sb.append(open);",
          "27:             if ((i & 31) == 0) {",
          "28:                 sb.append(\"\\n\");",
          "29:             }",
          "30:         }",
          "31:         sb.append(\"\\n\").append(content).append(\"\\n\");",
          "32:         for (int i = 0; i < nesting; ++i) {",
          "33:             sb.append(close);",
          "34:             if ((i & 31) == 0) {",
          "35:                 sb.append(\"\\n\");",
          "36:             }",
          "37:         }",
          "38:         return sb.toString();",
          "39:     }",
          "41: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}