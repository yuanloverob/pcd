{
  "cve_id": "CVE-2023-0591",
  "cve_desc": "\nubireader_extract_files is vulnerable to path traversal when run against specifically crafted UBIFS files, allowing the attacker to overwrite files outside of the extraction directory (provided the process has write access to that file or directory).\n\nThis is due to the fact that a node name (dent_node.name) is considered trusted and joined to the extraction directory path during processing, then the node content is written to that joined path. By crafting a malicious UBIFS file with node names holding path traversal payloads (e.g. ../../tmp/outside.txt), it's possible to force ubi_reader to write outside of the extraction directory.\n\n\n\nThis issue affects ubi-reader before 0.8.5.\n\n",
  "repo": "jrspruitt/ubi_reader",
  "patch_hash": "d5d68e6b1b9f7070c29df5f67fc060f579ae9139",
  "patch_info": {
    "commit_hash": "d5d68e6b1b9f7070c29df5f67fc060f579ae9139",
    "repo": "jrspruitt/ubi_reader",
    "commit_url": "https://github.com/jrspruitt/ubi_reader/commit/d5d68e6b1b9f7070c29df5f67fc060f579ae9139",
    "files": [
      "ubireader/ubifs/output.py"
    ],
    "message": "Merge pull request #57 from onekey-sec/fix-path-traversal\n\nFix path traversal vulnerability.",
    "before_after_code_files": [
      "ubireader/ubifs/output.py||ubireader/ubifs/output.py"
    ]
  },
  "patch_diff": {
    "ubireader/ubifs/output.py||ubireader/ubifs/output.py": [
      "File: ubireader/ubifs/output.py -> ubireader/ubifs/output.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: from ubireader.ubifs.misc import decompress",
      "27: from ubireader.debug import error, log, verbose_log",
      "30: def extract_files(ubifs, out_path, perms=False):",
      "31:     \"\"\"Extract UBIFS contents to_path/",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: def is_safe_path(basedir, path):",
      "30:     basedir = os.path.realpath(basedir)",
      "31:     path = os.path.realpath(os.path.join(basedir, path))",
      "32:     return basedir == os.path.commonpath((basedir, path))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:         return",
      "61:     inode = inodes[dent_node.inum]",
      "64:     if dent_node.type == UBIFS_ITYPE_DIR:",
      "65:         try:",
      "66:             if not os.path.exists(dent_path):",
      "",
      "[Removed Lines]",
      "62:     dent_path = os.path.join(path, dent_node.name)",
      "",
      "[Added Lines]",
      "67:     if not is_safe_path(path, dent_node.name):",
      "68:         error(extract_dents, 'Warning', 'Path traversal attempt: %s, discarding' % (dent_node.name))",
      "69:         return",
      "70:     dent_path = os.path.realpath(os.path.join(path, dent_node.name))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6a1272b178a4a2a04cfc88c87f6e195b16eddb5",
      "candidate_info": {
        "commit_hash": "c6a1272b178a4a2a04cfc88c87f6e195b16eddb5",
        "repo": "jrspruitt/ubi_reader",
        "commit_url": "https://github.com/jrspruitt/ubi_reader/commit/c6a1272b178a4a2a04cfc88c87f6e195b16eddb5",
        "files": [
          "ubireader/ubifs/output.py"
        ],
        "message": "Fix path traversal vulnerability.\n\nubireader_extract_files could lead to path traversal when run against\nspecifically crafted UBIFS files, allowing the attacker to overwrite\nfiles outside of the extraction directory (provided the process has\nwrite access to that file or directory).",
        "before_after_code_files": [
          "ubireader/ubifs/output.py||ubireader/ubifs/output.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/onekey-sec/ubi_reader/pull/57"
        ],
        "olp_code_files": {
          "patch": [
            "ubireader/ubifs/output.py||ubireader/ubifs/output.py"
          ],
          "candidate": [
            "ubireader/ubifs/output.py||ubireader/ubifs/output.py"
          ]
        }
      },
      "candidate_diff": {
        "ubireader/ubifs/output.py||ubireader/ubifs/output.py": [
          "File: ubireader/ubifs/output.py -> ubireader/ubifs/output.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from ubireader.ubifs.misc import decompress",
          "27: from ubireader.debug import error, log, verbose_log",
          "30: def extract_files(ubifs, out_path, perms=False):",
          "31:     \"\"\"Extract UBIFS contents to_path/",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: def is_safe_path(basedir, path):",
          "30:     basedir = os.path.realpath(basedir)",
          "31:     path = os.path.realpath(os.path.join(basedir, path))",
          "32:     return basedir == os.path.commonpath((basedir, path))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         return",
          "61:     inode = inodes[dent_node.inum]",
          "64:     if dent_node.type == UBIFS_ITYPE_DIR:",
          "65:         try:",
          "66:             if not os.path.exists(dent_path):",
          "",
          "[Removed Lines]",
          "62:     dent_path = os.path.join(path, dent_node.name)",
          "",
          "[Added Lines]",
          "67:     if not is_safe_path(path, dent_node.name):",
          "68:         error(extract_dents, 'Warning', 'Path traversal attempt: %s, discarding' % (dent_node.name))",
          "69:         return",
          "70:     dent_path = os.path.realpath(os.path.join(path, dent_node.name))",
          "",
          "---------------"
        ]
      }
    }
  ]
}