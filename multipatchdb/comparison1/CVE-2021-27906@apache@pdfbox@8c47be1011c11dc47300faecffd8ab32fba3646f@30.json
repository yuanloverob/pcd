{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e15f5ee43504e183d0e44ebb85376bbe8b0a68e6",
      "candidate_info": {
        "commit_hash": "e15f5ee43504e183d0e44ebb85376bbe8b0a68e6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e15f5ee43504e183d0e44ebb85376bbe8b0a68e6",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java"
        ],
        "message": "PDFBOX-3017: improve log message, inspired by SO question 63457413\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881004 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:                 return;",
          "234:             }",
          "238:         }",
          "239:     }",
          "240: }",
          "",
          "[Removed Lines]",
          "237:             LOG.warn(\"Appearance generation for signature fields not yet implemented - you need to generate/update that manually\");",
          "",
          "[Added Lines]",
          "237:             LOG.warn(\"Appearance generation for signature fields not implemented here. \"",
          "238:                     + \"You need to generate/update that manually, see the \"",
          "239:                     + \"CreateVisibleSignature*.java files in the examples subproject \"",
          "240:                     + \"of the source code download\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "070efa38d106c1fe5833dae2da1b94b7f535b805",
      "candidate_info": {
        "commit_hash": "070efa38d106c1fe5833dae2da1b94b7f535b805",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/070efa38d106c1fe5833dae2da1b94b7f535b805",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ],
        "message": "PDFBOX-4892: adjust language\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892697 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/XrefTrailerResolver.java"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ]
      }
    },
    {
      "candidate_hash": "cfbb9e6a468c102ce6c0535b4ac0a6b01170ea6f",
      "candidate_info": {
        "commit_hash": "cfbb9e6a468c102ce6c0535b4ac0a6b01170ea6f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/cfbb9e6a468c102ce6c0535b4ac0a6b01170ea6f",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java"
        ],
        "message": "PDFBOX-4892: add alignment, inspired by SO question 63486407\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881001 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateSimpleForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary;",
          "34: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "35: import org.apache.pdfbox.pdmodel.interactive.form.PDTextField;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.apache.pdfbox.pdmodel.interactive.form.PDVariableText;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:         page.getAnnotations().add(widget);",
          "110:         textBox.setValue(\"Sample field content\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         textBox.setQ(PDVariableText.QUADDING_CENTERED);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bee6b5061d3119cb6e16e23849e3b7b8e5040d89",
      "candidate_info": {
        "commit_hash": "bee6b5061d3119cb6e16e23849e3b7b8e5040d89",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/bee6b5061d3119cb6e16e23849e3b7b8e5040d89",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java"
        ],
        "message": "PDFBOX-4940: increase test coverage for PDImageXObject convenience methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881111 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.graphics.image;",
          "19: import java.awt.image.BufferedImage;",
          "20: import java.io.File;",
          "21: import java.io.FileInputStream;",
          "22: import java.io.IOException;",
          "23: import java.net.URISyntaxException;",
          "24: import javax.imageio.ImageIO;",
          "25: import org.apache.pdfbox.io.IOUtils;",
          "26: import org.apache.pdfbox.pdmodel.PDDocument;",
          "27: import org.junit.After;",
          "28: import org.junit.AfterClass;",
          "29: import org.junit.Assert;",
          "30: import org.junit.Before;",
          "31: import org.junit.BeforeClass;",
          "32: import org.junit.Test;",
          "40: public class PDImageXObjectTest",
          "41: {",
          "43:     public PDImageXObjectTest()",
          "44:     {",
          "45:     }",
          "50:     @Test",
          "51:     public void testCreateFromFileByExtension() throws Exception",
          "52:     {",
          "53:         testCompareCreatedFileByExtensionWithCreatedByCCITTFactory(\"ccittg4.tif\");",
          "55:         testCompareCreatedFileByExtensionWithCreatedByJPEGFactory(\"jpeg.jpg\");",
          "56:         testCompareCreatedFileByExtensionWithCreatedByJPEGFactory(\"jpegcmyk.jpg\");",
          "58:         testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(\"gif.gif\");",
          "59:         testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(\"gif-1bit-transparent.gif\");",
          "60:         testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(\"png_indexed_8bit_alpha.png\");",
          "61:         testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(\"png.png\");",
          "62:     }",
          "67:     @Test",
          "68:     public void testCreateFromFile() throws Exception",
          "69:     {",
          "70:         testCompareCreatedFileWithCreatedByCCITTFactory(\"ccittg4.tif\");",
          "72:         testCompareCreatedFileWithCreatedByJPEGFactory(\"jpeg.jpg\");",
          "73:         testCompareCreatedFileWithCreatedByJPEGFactory(\"jpegcmyk.jpg\");",
          "75:         testCompareCreatedFileWithCreatedByLosslessFactory(\"gif.gif\");",
          "76:         testCompareCreatedFileWithCreatedByLosslessFactory(\"gif-1bit-transparent.gif\");",
          "77:         testCompareCreatedFileWithCreatedByLosslessFactory(\"png_indexed_8bit_alpha.png\");",
          "78:         testCompareCreatedFileWithCreatedByLosslessFactory(\"png.png\");",
          "79:     }",
          "85:     @Test",
          "86:     public void testCreateFromFileByContent() throws Exception",
          "87:     {",
          "88:         testCompareCreateByContentWithCreatedByCCITTFactory(\"ccittg4.tif\");",
          "90:         testCompareCreatedByContentWithCreatedByJPEGFactory(\"jpeg.jpg\");",
          "91:         testCompareCreatedByContentWithCreatedByJPEGFactory(\"jpegcmyk.jpg\");",
          "93:         testCompareCreatedByContentWithCreatedByLosslessFactory(\"gif.gif\");",
          "94:         testCompareCreatedByContentWithCreatedByLosslessFactory(\"gif-1bit-transparent.gif\");",
          "95:         testCompareCreatedByContentWithCreatedByLosslessFactory(\"png_indexed_8bit_alpha.png\");",
          "96:         testCompareCreatedByContentWithCreatedByLosslessFactory(\"png.png\");",
          "97:     }",
          "103:     @Test",
          "104:     public void testCreateFromByteArray() throws Exception",
          "105:     {",
          "106:         testCompareCreatedFromByteArrayWithCreatedByCCITTFactory(\"ccittg4.tif\");",
          "108:         testCompareCreatedFromByteArrayWithCreatedByJPEGFactory(\"jpeg.jpg\");",
          "109:         testCompareCreatedFromByteArrayWithCreatedByJPEGFactory(\"jpegcmyk.jpg\");",
          "111:         testCompareCreatedFromByteArrayWithCreatedByLosslessFactory(\"gif.gif\");",
          "112:         testCompareCreatedFromByteArrayWithCreatedByLosslessFactory(\"gif-1bit-transparent.gif\");",
          "113:         testCompareCreatedFromByteArrayWithCreatedByLosslessFactory(\"png_indexed_8bit_alpha.png\");",
          "114:         testCompareCreatedFromByteArrayWithCreatedByLosslessFactory(\"png.png\");",
          "115:     }",
          "117:     private void testCompareCreatedFileByExtensionWithCreatedByLosslessFactory(String filename)",
          "118:             throws IOException, URISyntaxException",
          "119:     {",
          "120:         PDDocument doc = new PDDocument();",
          "121:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "122:         PDImageXObject image = PDImageXObject.createFromFileByExtension(file, doc);",
          "124:         BufferedImage bim = ImageIO.read(PDImageXObjectTest.class.getResourceAsStream(filename));",
          "125:         PDImageXObject expectedImage = LosslessFactory.createFromImage(doc, bim);",
          "127:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "128:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "130:         doc.close();",
          "131:     }",
          "133:     private void testCompareCreatedFileByExtensionWithCreatedByCCITTFactory(String filename)",
          "134:             throws IOException, URISyntaxException",
          "135:     {",
          "136:         PDDocument doc = new PDDocument();",
          "137:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "138:         PDImageXObject image = PDImageXObject.createFromFileByExtension(file, doc);",
          "140:         PDImageXObject expectedImage = CCITTFactory.createFromFile(doc, file);",
          "142:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "143:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "145:         doc.close();",
          "146:     }",
          "148:     private void testCompareCreatedFileByExtensionWithCreatedByJPEGFactory(String filename)",
          "149:             throws IOException, URISyntaxException",
          "150:     {",
          "151:         PDDocument doc = new PDDocument();",
          "152:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "153:         PDImageXObject image = PDImageXObject.createFromFileByExtension(file, doc);",
          "155:         PDImageXObject expectedImage = JPEGFactory.createFromStream(doc, new FileInputStream(file));",
          "157:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "158:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "160:         doc.close();",
          "161:     }",
          "163:     private void testCompareCreatedFileWithCreatedByLosslessFactory(String filename)",
          "164:             throws IOException, URISyntaxException",
          "165:     {",
          "166:         PDDocument doc = new PDDocument();",
          "167:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "168:         PDImageXObject image = PDImageXObject.createFromFile(file.getAbsolutePath(), doc);",
          "170:         BufferedImage bim = ImageIO.read(PDImageXObjectTest.class.getResourceAsStream(filename));",
          "171:         PDImageXObject expectedImage = LosslessFactory.createFromImage(doc, bim);",
          "173:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "174:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "176:         doc.close();",
          "177:     }",
          "179:     private void testCompareCreatedFileWithCreatedByCCITTFactory(String filename)",
          "180:             throws IOException, URISyntaxException",
          "181:     {",
          "182:         PDDocument doc = new PDDocument();",
          "183:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "184:         PDImageXObject image = PDImageXObject.createFromFile(file.getAbsolutePath(), doc);",
          "186:         PDImageXObject expectedImage = CCITTFactory.createFromFile(doc, file);",
          "188:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "189:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "191:         doc.close();",
          "192:     }",
          "194:     private void testCompareCreatedFileWithCreatedByJPEGFactory(String filename)",
          "195:             throws IOException, URISyntaxException",
          "196:     {",
          "197:         PDDocument doc = new PDDocument();",
          "198:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "199:         PDImageXObject image = PDImageXObject.createFromFile(file.getAbsolutePath(), doc);",
          "201:         PDImageXObject expectedImage = JPEGFactory.createFromStream(doc, new FileInputStream(file));",
          "203:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "204:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "206:         doc.close();",
          "207:     }",
          "209:     private void testCompareCreatedByContentWithCreatedByLosslessFactory(String filename)",
          "210:             throws IOException, URISyntaxException",
          "211:     {",
          "212:         PDDocument doc = new PDDocument();",
          "213:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "214:         PDImageXObject image = PDImageXObject.createFromFileByContent(file, doc);",
          "216:         BufferedImage bim = ImageIO.read(PDImageXObjectTest.class.getResourceAsStream(filename));",
          "217:         PDImageXObject expectedImage = LosslessFactory.createFromImage(doc, bim);",
          "219:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "220:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "222:         doc.close();",
          "223:     }",
          "225:     private void testCompareCreateByContentWithCreatedByCCITTFactory(String filename)",
          "226:             throws IOException, URISyntaxException",
          "227:     {",
          "228:         PDDocument doc = new PDDocument();",
          "229:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "230:         PDImageXObject image = PDImageXObject.createFromFileByContent(file, doc);",
          "232:         PDImageXObject expectedImage = CCITTFactory.createFromFile(doc, file);",
          "234:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "235:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "237:         doc.close();",
          "238:     }",
          "240:     private void testCompareCreatedByContentWithCreatedByJPEGFactory(String filename)",
          "241:             throws IOException, URISyntaxException",
          "242:     {",
          "243:         PDDocument doc = new PDDocument();",
          "244:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "245:         PDImageXObject image = PDImageXObject.createFromFileByContent(file, doc);",
          "247:         PDImageXObject expectedImage = JPEGFactory.createFromStream(doc, new FileInputStream(file));",
          "249:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "250:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "252:         doc.close();",
          "253:     }",
          "258:     private void testCompareCreatedFromByteArrayWithCreatedByLosslessFactory(String filename)",
          "259:             throws IOException, URISyntaxException",
          "260:     {",
          "261:         PDDocument doc = new PDDocument();",
          "262:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "263:         byte[] byteArray = IOUtils.toByteArray(new FileInputStream(file));",
          "264:         PDImageXObject image = PDImageXObject.createFromByteArray(doc, byteArray, null);",
          "266:         BufferedImage bim = ImageIO.read(PDImageXObjectTest.class.getResourceAsStream(filename));",
          "267:         PDImageXObject expectedImage = LosslessFactory.createFromImage(doc, bim);",
          "269:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "270:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "272:         doc.close();",
          "273:     }",
          "275:     private void testCompareCreatedFromByteArrayWithCreatedByCCITTFactory(String filename)",
          "276:             throws IOException, URISyntaxException",
          "277:     {",
          "278:         PDDocument doc = new PDDocument();",
          "279:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "280:         byte[] byteArray = IOUtils.toByteArray(new FileInputStream(file));",
          "281:         PDImageXObject image = PDImageXObject.createFromByteArray(doc, byteArray, null);",
          "283:         PDImageXObject expectedImage = CCITTFactory.createFromFile(doc, file);",
          "285:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "286:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "288:         doc.close();",
          "289:     }",
          "291:     private void testCompareCreatedFromByteArrayWithCreatedByJPEGFactory(String filename)",
          "292:             throws IOException, URISyntaxException",
          "293:     {",
          "294:         PDDocument doc = new PDDocument();",
          "295:         File file = new File(PDImageXObjectTest.class.getResource(filename).toURI());",
          "296:         byte[] byteArray = IOUtils.toByteArray(new FileInputStream(file));",
          "297:         PDImageXObject image = PDImageXObject.createFromByteArray(doc, byteArray, null);",
          "299:         PDImageXObject expectedImage = JPEGFactory.createFromStream(doc, new FileInputStream(file));",
          "301:         Assert.assertEquals(expectedImage.getSuffix(), image.getSuffix());",
          "302:         checkIdentARGB(image.getImage(), expectedImage.getImage());",
          "304:         doc.close();",
          "305:     }",
          "307:     private void checkIdentARGB(BufferedImage expectedImage, BufferedImage actualImage)",
          "308:     {",
          "309:         String errMsg = \"\";",
          "311:         int w = expectedImage.getWidth();",
          "312:         int h = expectedImage.getHeight();",
          "313:         Assert.assertEquals(w, actualImage.getWidth());",
          "314:         Assert.assertEquals(h, actualImage.getHeight());",
          "315:         for (int y = 0; y < h; ++y)",
          "316:         {",
          "317:             for (int x = 0; x < w; ++x)",
          "318:             {",
          "319:                 if (expectedImage.getRGB(x, y) != actualImage.getRGB(x, y))",
          "320:                 {",
          "321:                     errMsg = String.format(\"(%d,%d) %06X != %06X\", x, y, expectedImage.getRGB(x, y), actualImage.getRGB(x, y));",
          "322:                 }",
          "323:                 Assert.assertEquals(errMsg, expectedImage.getRGB(x, y), actualImage.getRGB(x, y));",
          "324:             }",
          "325:         }",
          "326:     }",
          "327: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b73a5bee1cd823d7ef8f042b625f13b3420cf93a",
      "candidate_info": {
        "commit_hash": "b73a5bee1cd823d7ef8f042b625f13b3420cf93a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b73a5bee1cd823d7ef8f042b625f13b3420cf93a",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java"
        ],
        "message": "PDFBOX-5264: also consider key\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892580 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFJavaScript.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.pdfbox.cos.COSStream;",
          "26: import org.apache.pdfbox.cos.COSString;",
          "27: import org.apache.pdfbox.pdmodel.common.COSObjectable;",
          "28: import org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory;",
          "29: import org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.pdfbox.pdmodel.interactive.action.PDAction;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     public Map<String, PDActionJavaScript> getDoc()",
          "140:     {",
          "141:         Map<String, PDActionJavaScript> map = new LinkedHashMap<String, PDActionJavaScript>();",
          "143:         if (array == null)",
          "144:         {",
          "145:             return null;",
          "146:         }",
          "148:         {",
          "150:         }",
          "151:         return map;",
          "152:     }",
          "",
          "[Removed Lines]",
          "142:         COSArray array = (COSArray) dictionary.getDictionaryObject(COSName.DOC);",
          "147:         for (int i = 0; i < array.size(); i++)",
          "149:             PDActionFactory.createAction((COSDictionary) array.getObject(i));",
          "",
          "[Added Lines]",
          "143:         COSArray array = dictionary.getCOSArray(COSName.DOC);",
          "148:         for (int i = 0; i + 1 < array.size(); i += 2)",
          "150:             String name = array.getName(i);",
          "151:             if (name != null)",
          "152:             {",
          "153:                 COSBase base = array.getObject(i + 1);",
          "154:                 if (base instanceof COSDictionary)",
          "155:                 {",
          "156:                     PDAction action = PDActionFactory.createAction((COSDictionary) base);",
          "157:                     if (action instanceof PDActionJavaScript)",
          "158:                     {",
          "159:                         map.put(name, (PDActionJavaScript) action);",
          "160:                     }",
          "161:                 }",
          "162:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}