{
  "cve_id": "CVE-2023-41882",
  "cve_desc": "vantage6 is privacy preserving federated learning infrastructure. The endpoint /api/collaboration/{id}/task is used to collect all tasks from a certain collaboration. To get such tasks, a user should have permission to view the collaboration and to view the tasks in it. However, prior to version 4.0.0, it is only checked if the user has permission to view the collaboration. Version 4.0.0 contains a patch. There are no known workarounds.",
  "repo": "vantage6/vantage6",
  "patch_hash": "86564e103cbac5238ce2fe392e3357e0e8c20220",
  "patch_info": {
    "commit_hash": "86564e103cbac5238ce2fe392e3357e0e8c20220",
    "repo": "vantage6/vantage6",
    "commit_url": "https://github.com/vantage6/vantage6/commit/86564e103cbac5238ce2fe392e3357e0e8c20220",
    "files": [
      "vantage6-server/tests_server/test_resources.py",
      "vantage6-server/vantage6/server/__init__.py",
      "vantage6-server/vantage6/server/default_roles.py",
      "vantage6-server/vantage6/server/model/rule.py",
      "vantage6-server/vantage6/server/model/task.py",
      "vantage6-server/vantage6/server/permission.py",
      "vantage6-server/vantage6/server/resource/__init__.py",
      "vantage6-server/vantage6/server/resource/collaboration.py",
      "vantage6-server/vantage6/server/resource/node.py",
      "vantage6-server/vantage6/server/resource/organization.py",
      "vantage6-server/vantage6/server/resource/role.py",
      "vantage6-server/vantage6/server/resource/run.py",
      "vantage6-server/vantage6/server/resource/task.py",
      "vantage6-server/vantage6/server/resource/user.py",
      "vantage6-server/vantage6/server/utils.py"
    ],
    "message": "Merge pull request #711 from vantage6/feature/collaboration-scope\n\nFeature/collaboration scope",
    "before_after_code_files": [
      "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
      "vantage6-server/vantage6/server/__init__.py||vantage6-server/vantage6/server/__init__.py",
      "vantage6-server/vantage6/server/default_roles.py||vantage6-server/vantage6/server/default_roles.py",
      "vantage6-server/vantage6/server/model/rule.py||vantage6-server/vantage6/server/model/rule.py",
      "vantage6-server/vantage6/server/model/task.py||vantage6-server/vantage6/server/model/task.py",
      "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
      "vantage6-server/vantage6/server/resource/__init__.py||vantage6-server/vantage6/server/resource/__init__.py",
      "vantage6-server/vantage6/server/resource/collaboration.py||vantage6-server/vantage6/server/resource/collaboration.py",
      "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
      "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
      "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
      "vantage6-server/vantage6/server/resource/run.py||vantage6-server/vantage6/server/resource/run.py",
      "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py",
      "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py",
      "vantage6-server/vantage6/server/utils.py||vantage6-server/vantage6/server/utils.py"
    ]
  },
  "patch_diff": {
    "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py": [
      "File: vantage6-server/tests_server/test_resources.py -> vantage6-server/tests_server/test_resources.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "220:             The url of the list endpoint",
      "221:         headers: dict",
      "222:             The headers to use for the request",
      "224:         Returns",
      "225:         -------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:         kwargs: dict",
      "224:             Additional arguments to pass to the request",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "229:         result = self.app.get(url, headers=headers)",
      "230:         links = result.json.get('links')",
      "231:         page = 1",
      "233:         while links and links.get('next'):",
      "234:             page += 1",
      "235:             new_response = self.app.get(",
      "236:                 links.get('next'), headers=headers",
      "237:             )",
      "239:             links = new_response.json.get('links')",
      "240:         return result, json_data",
      "",
      "[Removed Lines]",
      "232:         json_data = result.json['data']",
      "238:             json_data += new_response.json.get('data')",
      "",
      "[Added Lines]",
      "234:         json_data = result.json.get('data')",
      "235:         if json_data is None:",
      "236:             json_data = []",
      "242:             json_data += new_response.json.get('data') \\",
      "243:                 if new_response.json.get('data') else []",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "411:         result1 = self.app.get(\"/api/run\", headers=headers)",
      "412:         self.assertEqual(result1.status_code, 200)",
      "415:                                headers=headers)",
      "416:         self.assertEqual(result2.status_code, 200)",
      "418:         result3 = self.app.get(\"/api/run?task_id=1\", headers=headers)",
      "419:         self.assertEqual(result3.status_code, 200)",
      "425:     def test_stats(self):",
      "426:         headers = self.login(\"root\")",
      "427:         result = self.app.get(\"/api/run\", headers=headers)",
      "",
      "[Removed Lines]",
      "414:         result2 = self.app.get(\"/api/run?state=open&&node_id=1\",",
      "421:         result4 = self.app.get(\"/api/run?task_id=1&&node_id=1\",",
      "422:                                headers=headers)",
      "423:         self.assertEqual(result4.status_code, 200)",
      "",
      "[Added Lines]",
      "419:         result2 = self.app.get(\"/api/run?state=open\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "620:         for field in expected_fields:",
      "621:             self.assertIn(field, body[0])",
      "623:     def test_create_role_as_root(self):",
      "624:         headers = self.login(\"root\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "624:     def test_view_role_permissions(self):",
      "625:         org = Organization()",
      "626:         org.save()",
      "627:         other_org = Organization()",
      "628:         other_org.save()",
      "629:         col = Collaboration(organizations=[org, other_org])",
      "630:         col.save()",
      "631:         org_outside_collab = Organization()",
      "632:         org_outside_collab.save()",
      "634:         # non-existing role",
      "635:         headers = self.login('root')",
      "636:         result = self.app.get(\"/api/role/9999\", headers=headers)",
      "637:         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)",
      "639:         # root user can view all roles",
      "640:         result, json_data = self.paginated_list('/api/role', headers=headers)",
      "641:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "642:         self.assertEqual(len(json_data), len(Role.get()))",
      "644:         role = Role(organization=org)",
      "645:         role.save()",
      "647:         # without permissions should allow you to view your own roles, which",
      "648:         # in this case is an empty list",
      "649:         headers = self.create_user_and_login()",
      "650:         result, json_data = self.paginated_list('/api/role', headers=headers)",
      "651:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "652:         self.assertEqual(len(json_data), 0)",
      "654:         # view roles of your organization",
      "655:         rule = Rule.get_by_(\"role\", Scope.ORGANIZATION, Operation.VIEW)",
      "656:         headers = self.create_user_and_login(org, rules=[rule])",
      "657:         result, json_data = self.paginated_list('/api/role', headers=headers)",
      "658:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "660:         # +3 for the root, container and node roles (other default roles are",
      "661:         # not generated for unit tests)",
      "662:         self.assertEqual(len(json_data), len(org.roles) + 3)",
      "664:         # view a single role of your organization",
      "665:         result = self.app.get(f'/api/role/{role.id}', headers=headers)",
      "666:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "668:         # check that user of other organization cannot view roles with",
      "669:         # organization scope",
      "670:         headers = self.create_user_and_login(other_org, rules=[rule])",
      "671:         result = self.app.get(",
      "672:             '/api/role', headers=headers,",
      "673:             query_string={'organization_id': org.id}",
      "674:         )",
      "675:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "677:         # user can view their own roles. This should always be possible",
      "678:         user = self.create_user(rules=[])",
      "679:         headers = self.login(user.username)",
      "680:         result = self.app.get('/api/role', headers=headers, query_string={",
      "681:             'user_id': user.id",
      "682:         })",
      "683:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "685:         # collaboration permission - in same collaboration with id",
      "686:         rule = Rule.get_by_(\"role\", Scope.COLLABORATION, Operation.VIEW)",
      "687:         headers = self.create_user_and_login(other_org, rules=[rule])",
      "688:         result = self.app.get(f\"/api/role/{role.id}\", headers=headers)",
      "689:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "691:         # collaboration permission - in same collaboration without id",
      "692:         result, json_data = self.paginated_list('/api/role', headers=headers)",
      "693:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "694:         # +3 for the root, container and node roles (other default roles are",
      "695:         # not generated for unit tests)",
      "696:         self.assertEqual(len(json_data), len([",
      "697:             role_ for org in col.organizations for role_ in org.roles",
      "698:         ]) + 3)",
      "700:         # collaboration permission - in different collaboration with id",
      "701:         headers = self.create_user_and_login(org_outside_collab, rules=[rule])",
      "702:         result = self.app.get(f\"/api/role/{role.id}\", headers=headers)",
      "703:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "705:         # collaboration permission - in different collaboration without id",
      "706:         result = self.app.get('/api/role', headers=headers,",
      "707:                               query_string={'collaboration_id': col.id})",
      "708:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "710:         # cleanup",
      "711:         org.delete()",
      "712:         other_org.delete()",
      "713:         org_outside_collab.delete()",
      "714:         col.delete()",
      "715:         role.delete()",
      "716:         user.delete()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "686:         body = {",
      "687:             \"name\": \"some-role-name\",",
      "689:             \"rules\": [rule.id for rule in all_rules],",
      "690:         }",
      "691:         result = self.app.post(\"/api/role\", headers=headers, json=body)",
      "692:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "694:         # check that user with a missing rule cannot create a role with that",
      "695:         # missing rule",
      "696:         headers = self.create_user_and_login(rules=(all_rules[:-2]))",
      "",
      "[Removed Lines]",
      "688:             \"description\": \"Testing if we can create a rol for another org\",",
      "",
      "[Added Lines]",
      "783:             \"description\": \"Testing if we can create a role for another org\",",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "719:         result = self.app.post(\"/api/role\", headers=headers, json=body)",
      "720:         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)",
      "722:     def test_edit_role(self):",
      "723:         headers = self.login('root')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "816:         # check creating role inside the collaboration",
      "817:         org1 = Organization()",
      "818:         org1.save()",
      "819:         org2 = Organization()",
      "820:         org2.save()",
      "821:         col = Collaboration(organizations=[org1, org2])",
      "822:         col.save()",
      "823:         rule = Rule.get_by_(\"role\", scope=Scope.COLLABORATION,",
      "824:                             operation=Operation.CREATE)",
      "825:         headers = self.create_user_and_login(organization=org1, rules=[rule])",
      "826:         body[\"rules\"] = [rule.id]",
      "827:         body[\"organization_id\"] = org2.id",
      "828:         result = self.app.post(\"/api/role\", headers=headers, json=body)",
      "829:         self.assertEqual(result.status_code, HTTPStatus.CREATED)",
      "831:         # check creating role outside the collaboration fails",
      "832:         org3 = Organization()",
      "833:         org3.save()",
      "834:         body[\"organization_id\"] = org3.id",
      "835:         result = self.app.post(\"/api/role\", headers=headers, json=body)",
      "836:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "773:         })",
      "774:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "776:     def test_remove_role(self):",
      "778:         org = Organization()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "892:         # test editing role inside the collaboration",
      "893:         org2 = Organization()",
      "894:         org2.save()",
      "895:         col = Collaboration(organizations=[org, org2])",
      "896:         col.save()",
      "897:         rule = Rule.get_by_(\"role\", scope=Scope.COLLABORATION,",
      "898:                             operation=Operation.EDIT)",
      "899:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "900:         result = self.app.patch(f\"/api/role/{role.id}\", headers=headers, json={",
      "901:             \"name\": \"new-role-name\",",
      "902:         })",
      "903:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "905:         # check editing role outside the collaboration fails",
      "906:         org3 = Organization()",
      "907:         org3.save()",
      "908:         role = Role(name=\"some-role-name\", organization=org3)",
      "909:         role.save()",
      "910:         result = self.app.patch(f\"/api/role/{role.id}\", headers=headers, json={",
      "911:             \"name\": \"this-will-not-be-updated\"",
      "912:         })",
      "913:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "805:         result = self.app.delete(f'/api/role/{role.id}', headers=headers)",
      "806:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "808:     def test_rules_from_role(self):",
      "809:         headers = self.login('root')",
      "810:         role = Role.get()[0]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "947:         # check removing role outside the collaboration fails",
      "948:         org2 = Organization()",
      "949:         org2.save()",
      "950:         col = Collaboration(organizations=[org, org2])",
      "951:         col.save()",
      "952:         role = Role(organization=org)  # because we removed it...",
      "953:         role.save()",
      "955:         org3 = Organization()",
      "956:         org3.save()",
      "957:         rule = Rule.get_by_(\"role\", Scope.COLLABORATION, Operation.DELETE)",
      "958:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "959:         result = self.app.delete(f\"/api/role/{role.id}\", headers=headers)",
      "960:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "962:         # test removing role inside the collaboration",
      "963:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "964:         result = self.app.delete(f\"/api/role/{role.id}\", headers=headers)",
      "965:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "967:         # cleanup",
      "968:         org3.delete()",
      "969:         org2.delete()",
      "970:         org.delete()",
      "971:         col.delete()",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "881:     def test_view_permission_rules(self):",
      "882:         rule = Rule.get_by_(\"role\", Scope.ORGANIZATION, Operation.VIEW)",
      "885:         role.save()",
      "887:         # user does not belong to organization",
      "",
      "[Removed Lines]",
      "884:         role = Role(name=\"some-role\", organization=Organization())",
      "",
      "[Added Lines]",
      "1049:         org = Organization()",
      "1050:         org.save()",
      "1051:         role = Role(name=\"some-role\", organization=org)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "901:         result = self.app.get(f'/api/role/{role.id}/rule', headers=headers)",
      "902:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "904:         role.delete()",
      "906:     def test_add_rule_to_role_permission(self):",
      "909:         role.save()",
      "911:         rule = Rule.get_by_(\"role\", Scope.ORGANIZATION, Operation.EDIT)",
      "",
      "[Removed Lines]",
      "908:         role = Role(name=\"new-role\", organization=Organization())",
      "",
      "[Added Lines]",
      "1071:         # cleanup",
      "1073:         org.delete()",
      "1076:         org = Organization()",
      "1077:         org.save()",
      "1078:         role = Role(name=\"new-role\", organization=org)",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "935:                                headers=headers)",
      "936:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "938:         role.delete()",
      "940:     def test_remove_rule_from_role_permissions(self):",
      "943:         role.save()",
      "944:         rule = Rule.get_by_(\"role\", Scope.ORGANIZATION,",
      "947:         # try removing without any permissions",
      "948:         headers = self.create_user_and_login()",
      "",
      "[Removed Lines]",
      "942:         role = Role(name=\"new-role\", organization=Organization())",
      "945:                             Operation.DELETE)",
      "",
      "[Added Lines]",
      "1108:         # test inside the collaboration",
      "1109:         org2 = Organization()",
      "1110:         org2.save()",
      "1111:         col = Collaboration(organizations=[org, org2])",
      "1112:         col.save()",
      "1113:         rule = Rule.get_by_(\"role\", scope=Scope.COLLABORATION,",
      "1114:                             operation=Operation.EDIT)",
      "1115:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "1116:         result = self.app.post(f'/api/role/{role.id}/rule/{rule.id}',",
      "1117:                                headers=headers)",
      "1118:         self.assertEqual(result.status_code, HTTPStatus.CREATED)",
      "1120:         # check outside the collaboration fails",
      "1121:         org3 = Organization()",
      "1122:         org3.save()",
      "1123:         role2 = Role(name=\"some-role-name\", organization=org3)",
      "1124:         role2.save()",
      "1125:         result = self.app.post(f'/api/role/{role2.id}/rule/{rule.id}',",
      "1126:                                headers=headers)",
      "1127:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1129:         # cleanup",
      "1131:         role2.delete()",
      "1132:         org.delete()",
      "1133:         org2.delete()",
      "1134:         org3.delete()",
      "1135:         col.delete()",
      "1138:         org = Organization()",
      "1139:         org.save()",
      "1140:         role = Role(name=\"new-role\", organization=org)",
      "1143:                             Operation.EDIT)",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "958:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "960:         # try removing rule which is not in the role",
      "963:         result = self.app.delete(f'/api/role/{role.id}/rule/{rule.id}',",
      "964:                                  headers=headers)",
      "965:         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)",
      "",
      "[Removed Lines]",
      "961:         headers = self.create_user_and_login(organization=role.organization,",
      "962:                                              rules=[rule])",
      "",
      "[Added Lines]",
      "1159:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "980:         # power users can edit other organization rules",
      "981:         power_rule = Rule.get_by_(\"role\", Scope.GLOBAL,",
      "983:         headers = self.create_user_and_login(rules=[power_rule, rule])",
      "984:         result = self.app.delete(f'/api/role/{role.id}/rule/{rule.id}',",
      "985:                                  headers=headers)",
      "986:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "988:         role.delete()",
      "990:     def test_view_permission_user(self):",
      "",
      "[Removed Lines]",
      "982:                                   Operation.DELETE)",
      "",
      "[Added Lines]",
      "1179:                                   Operation.EDIT)",
      "1185:         # test inside the collaboration",
      "1186:         org2 = Organization()",
      "1187:         org2.save()",
      "1188:         col = Collaboration(organizations=[org, org2])",
      "1189:         col.save()",
      "1190:         rule = Rule.get_by_(\"role\", scope=Scope.COLLABORATION,",
      "1191:                             operation=Operation.EDIT)",
      "1192:         role.rules.append(rule)",
      "1193:         role.save()",
      "1194:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "1195:         result = self.app.delete(f'/api/role/{role.id}/rule/{rule.id}',",
      "1196:                                  headers=headers)",
      "1197:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1199:         # check outside the collaboration fails",
      "1200:         org3 = Organization()",
      "1201:         org3.save()",
      "1202:         role2 = Role(name=\"some-role-name\", organization=org3)",
      "1203:         role2.rules.append(rule)",
      "1204:         role2.save()",
      "1205:         result = self.app.delete(f'/api/role/{role2.id}/rule/{rule.id}',",
      "1206:                                  headers=headers)",
      "1207:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1209:         # cleanup",
      "1211:         role2.delete()",
      "1212:         org.delete()",
      "1213:         org2.delete()",
      "1214:         org3.delete()",
      "1215:         col.delete()",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:         # view users of your organization",
      "1009:         rule = Rule.get_by_(\"user\", Scope.ORGANIZATION, Operation.VIEW)",
      "1011:         headers = self.create_user_and_login(org, rules=[rule])",
      "1012:         result, json_data = self.paginated_list('/api/user', headers=headers)",
      "1013:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "",
      "[Removed Lines]",
      "1010:         org = Organization.get(1)",
      "",
      "[Added Lines]",
      "1237:         org = Organization()",
      "1238:         org.save()",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1024:         result = self.app.get(f'/api/user/{user.id}', headers=headers)",
      "1025:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1027:     def test_bounce_existing_username_and_email(self):",
      "1028:         headers = self.create_user_and_login()",
      "1029:         User(username=\"something\", email=\"mail@me.org\").save()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1255:         # collaboration permission - view single user",
      "1256:         org2 = Organization()",
      "1257:         org2.save()",
      "1258:         org3 = Organization()",
      "1259:         org3.save()",
      "1260:         col = Collaboration(organizations=[org2, org3])",
      "1261:         col.save()",
      "1262:         user = self.create_user(organization=org2, rules=[])",
      "1263:         rule = Rule.get_by_(\"user\", scope=Scope.COLLABORATION,",
      "1264:                             operation=Operation.VIEW)",
      "1265:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "1266:         result = self.app.get(f'/api/user/{user.id}', headers=headers)",
      "1267:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1269:         # collaboration permission - view list of users",
      "1270:         result = self.app.get('/api/user', headers=headers)",
      "1271:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1272:         # expecting 2 users: 1 in org2 and the 1 in org3 which is logged in now",
      "1273:         self.assertEqual(len(result.json['data']), 2)",
      "1275:         # collaboration permission - viewing outside collaboration should fail",
      "1276:         org_outside_col = Organization()",
      "1277:         org_outside_col.save()",
      "1278:         headers = self.create_user_and_login(organization=org_outside_col,",
      "1279:                                              rules=[rule])",
      "1280:         result = self.app.get(f'/api/user/{user.id}', headers=headers)",
      "1281:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1283:         # collaboration permission - viewing other collaborations should fail",
      "1284:         result = self.app.get('/api/user', headers=headers, query_string={",
      "1285:             'collaboration_id': col.id",
      "1286:         })",
      "1287:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1289:         # cleanup",
      "1290:         org.delete()",
      "1291:         org2.delete()",
      "1292:         org3.delete()",
      "1293:         org_outside_col.delete()",
      "1294:         col.delete()",
      "1295:         user.delete()",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1073:         result = self.app.post('/api/user', headers=headers, json=userdata)",
      "1074:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1077:         rule_view_roles = Rule.get_by_(",
      "1078:             \"role\", Scope.ORGANIZATION, Operation.VIEW)",
      "1079:         headers = self.create_user_and_login(",
      "",
      "[Removed Lines]",
      "1076:         # you can only assign roles in which you have all rules",
      "",
      "[Added Lines]",
      "1346:         # test inside the collaboration",
      "1347:         org2 = Organization()",
      "1348:         org2.save()",
      "1349:         col = Collaboration(organizations=[org, org2])",
      "1350:         col.save()",
      "1351:         rule = Rule.get_by_(\"user\", scope=Scope.COLLABORATION,",
      "1352:                             operation=Operation.CREATE)",
      "1353:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "1354:         userdata['username'] = 'smarty4'",
      "1355:         userdata['email'] = 'mail4@me.org'",
      "1356:         userdata['organization_id'] = org2.id",
      "1357:         userdata['rules'] = [rule.id]",
      "1358:         result = self.app.post('/api/user', headers=headers, json=userdata)",
      "1359:         self.assertEqual(result.status_code, HTTPStatus.CREATED)",
      "1361:         # check outside the collaboration fails",
      "1362:         org3 = Organization()",
      "1363:         org3.save()",
      "1364:         userdata['username'] = 'smarty5'",
      "1365:         userdata['email'] = 'mail5@me.org'",
      "1366:         userdata['organization_id'] = org3.id",
      "1367:         result = self.app.post('/api/user', headers=headers, json=userdata)",
      "1368:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1370:         # you can only create users for in which you have all rules",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1092:                               query_string={'user_id': result.json['id']})",
      "1093:         self.assertEqual(len(result.json['data']), 1)",
      "1095:     def test_patch_user_permissions(self):",
      "1097:         org = Organization()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1389:         # cleanup",
      "1390:         org.delete()",
      "1391:         org2.delete()",
      "1392:         org3.delete()",
      "1393:         col.delete()",
      "1394:         role.delete()",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1174:         self.assertEqual(\"again\", user.firstname)",
      "1175:         self.assertEqual(\"and again\", user.lastname)",
      "1177:         # test that you cannot assign rules that you not own",
      "1178:         not_owning_rule = Rule.get_by_(\"user\", Scope.OWN,",
      "1179:                                        Operation.DELETE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1478:         # test editing user inside the collaboration",
      "1479:         org2 = Organization()",
      "1480:         org2.save()",
      "1481:         col = Collaboration(organizations=[org, org2])",
      "1482:         col.save()",
      "1483:         rule2 = Rule.get_by_(\"user\", scope=Scope.COLLABORATION,",
      "1484:                              operation=Operation.EDIT)",
      "1485:         headers = self.create_user_and_login(organization=org2, rules=[rule2])",
      "1486:         result = self.app.patch(f'/api/user/{user.id}', headers=headers, json={",
      "1487:             'firstname': 'something',",
      "1488:             'lastname': 'everything',",
      "1489:         })",
      "1490:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1492:         # check editing outside the collaboration fails",
      "1493:         org3 = Organization()",
      "1494:         org3.save()",
      "1495:         headers = self.create_user_and_login(organization=org3, rules=[rule2])",
      "1496:         result = self.app.patch(f'/api/user/{user.id}', headers=headers, json={",
      "1497:             'firstname': 'will-not-work',",
      "1498:         })",
      "1499:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1271:         user.delete()",
      "1272:         role.delete()",
      "1274:     def test_delete_user_permissions(self):",
      "1276:         user = User(firstname=\"Firstname\", lastname=\"Lastname\",",
      "1277:                     username=\"Username\", password=\"Password\", email=\"a@b.c\",",
      "1279:         user.save()",
      "1280:         self.credentials[user.username] = {'username': user.username,",
      "1281:                                            'password': \"Password\"}",
      "",
      "[Removed Lines]",
      "1278:                     organization=Organization())",
      "",
      "[Added Lines]",
      "1597:         org.delete()",
      "1598:         org2.delete()",
      "1599:         org3.delete()",
      "1600:         col.delete()",
      "1603:         org = Organization()",
      "1606:                     organization=org)",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "1338:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1339:         # user is deleted by endpoint! user.delete()",
      "1341:     def test_view_organization_as_user_permissions(self):",
      "1343:         # view without any permissions",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1669:         # check delete outside the collaboration fails",
      "1670:         user = User(firstname=\"Firstname\", lastname=\"Lastname\",",
      "1671:                     username=\"Username\", password=\"Password\", email=\"a@b.c\",",
      "1672:                     organization=org)",
      "1673:         user.save()",
      "1674:         org2 = Organization()",
      "1675:         org2.save()",
      "1676:         col = Collaboration(organizations=[org, org2])",
      "1677:         col.save()",
      "1678:         org3 = Organization()",
      "1679:         org3.save()",
      "1680:         rule = Rule.get_by_(\"user\", Scope.COLLABORATION,",
      "1681:                             Operation.DELETE)",
      "1682:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "1683:         result = self.app.delete(f'/api/user/{user.id}', headers=headers)",
      "1684:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1686:         # test delete inside the collaboration",
      "1687:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "1688:         result = self.app.delete(f'/api/user/{user.id}', headers=headers)",
      "1689:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1691:         # cleanup",
      "1692:         org.delete()",
      "1693:         org2.delete()",
      "1694:         org3.delete()",
      "1695:         col.delete()",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "1362:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1364:         # Missing organization with global view",
      "1367:         headers = self.create_user_and_login(rules=[rule])",
      "1368:         result = self.app.get('/api/organization/9999',",
      "1369:                               headers=headers)",
      "1370:         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)",
      "1372:         # test global view",
      "1375:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1377:     def test_view_organization_as_node_permission(self):",
      "1378:         node, api_key = self.create_node()",
      "1379:         headers = self.login_node(api_key)",
      "",
      "[Removed Lines]",
      "1365:         rule = Rule.get_by_(\"organization\", Scope.GLOBAL,",
      "1366:                             Operation.VIEW)",
      "1373:         result = self.app.get(f'/api/organization/{org.id}',",
      "1374:                               headers=headers)",
      "",
      "[Added Lines]",
      "1721:         rule = Rule.get_by_(\"organization\", Scope.GLOBAL, Operation.VIEW)",
      "1728:         result = self.app.get(f'/api/organization/{org.id}', headers=headers)",
      "1729:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "1731:         # test view inside the collaboration",
      "1732:         org2 = Organization()",
      "1733:         org2.save()",
      "1734:         col = Collaboration(organizations=[org, org2])",
      "1735:         col.save()",
      "1736:         rule = Rule.get_by_(\"organization\", scope=Scope.COLLABORATION,",
      "1737:                             operation=Operation.VIEW)",
      "1738:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "1739:         result = self.app.get(f'/api/organization/{org.id}', headers=headers)",
      "1742:         # check view outside the collaboration fails",
      "1743:         org3 = Organization()",
      "1744:         org3.save()",
      "1745:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "1746:         result = self.app.get(f'/api/organization/{org.id}', headers=headers)",
      "1747:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "1749:         # cleanup",
      "1750:         org.delete()",
      "1751:         org2.delete()",
      "1752:         org3.delete()",
      "1753:         col.delete()",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1464:         rule = Rule.get_by_(\"organization\", Scope.ORGANIZATION,",
      "1465:                             Operation.EDIT)",
      "1466:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "1471:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1472:         self.assertEqual(results.json['name'], \"third-name\")",
      "",
      "[Removed Lines]",
      "1467:         results = self.app.patch(f'/api/organization/{org.id}',",
      "1468:                                  headers=headers, json={",
      "1469:                                      \"name\": \"third-name\"",
      "1470:                                  })",
      "",
      "[Added Lines]",
      "1845:         results = self.app.patch(",
      "1846:             f'/api/organization/{org.id}', headers=headers,",
      "1847:             json={\"name\": \"third-name\"})",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1481:                                  })",
      "1482:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "1484:     def test_organization_view_nodes(self):",
      "1486:         # create organization, collaboration and node",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1861:         # test editing organization inside the collaboration",
      "1862:         org2 = Organization()",
      "1863:         org2.save()",
      "1864:         col = Collaboration(organizations=[org, org2])",
      "1865:         col.save()",
      "1866:         rule2 = Rule.get_by_(\"organization\", scope=Scope.COLLABORATION,",
      "1867:                              operation=Operation.EDIT)",
      "1868:         headers = self.create_user_and_login(organization=org2, rules=[rule2])",
      "1869:         results = self.app.patch(",
      "1870:             f'/api/organization/{org.id}', headers=headers,",
      "1871:             json={\"name\": \"fourth-name\"})",
      "1872:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1874:         # check editing outside the collaboration fails",
      "1875:         org3 = Organization()",
      "1876:         org3.save()",
      "1877:         headers = self.create_user_and_login(organization=org3, rules=[rule2])",
      "1878:         results = self.app.patch(",
      "1879:             f'/api/organization/{org.id}', headers=headers,",
      "1880:             json={\"name\": \"not-going-to-happen\"})",
      "1881:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1650:                                  })",
      "1651:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1652:         self.assertEqual(results.json[\"name\"], \"this-is-gonna-fly\")",
      "1654:     def test_delete_collaboration_permissions(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2052:         col.delete()",
      "2054:         # test editing collaboration from within the collaboration",
      "2055:         org = Organization()",
      "2056:         org.save()",
      "2057:         col = Collaboration(organizations=[org])",
      "2058:         col.save()",
      "2059:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
      "2060:                             operation=Operation.EDIT)",
      "2061:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2062:         results = self.app.patch(",
      "2063:             f'/api/collaboration/{col.id}', headers=headers,",
      "2064:             json={\"name\": \"some-name\"})",
      "2065:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2067:         # check editing collaboration outside the collaboration fails without",
      "2068:         # root access",
      "2069:         org2 = Organization()",
      "2070:         org2.save()",
      "2071:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "2072:         results = self.app.patch(",
      "2073:             f'/api/collaboration/{col.id}', headers=headers,",
      "2074:             json={\"name\": \"not-going-to-happen\"})",
      "2075:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2077:         # cleanup",
      "2078:         org.delete()",
      "2079:         org2.delete()",
      "2080:         col.delete()",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1674:                                   headers=headers)",
      "1675:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1677:     def test_view_collaboration_organization_permissions_as_user(self):",
      "1678:         headers = self.create_user_and_login()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2105:         # check deleting with collaboration permission outside the",
      "2106:         # collaboration fails",
      "2107:         org = Organization()",
      "2108:         org.save()",
      "2109:         col = Collaboration(organizations=[org])",
      "2110:         col.save()",
      "2111:         org_not_member = Organization()",
      "2112:         org_not_member.save()",
      "2113:         rule = Rule.get_by_(\"collaboration\", Scope.COLLABORATION,",
      "2114:                             Operation.DELETE)",
      "2115:         headers = self.create_user_and_login(organization=org_not_member,",
      "2116:                                              rules=[rule])",
      "2117:         result = self.app.delete(f\"/api/collaboration/{col.id}\",",
      "2118:                                  headers=headers)",
      "2119:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "2121:         # check deleting with collaboration permission inside the collaboration",
      "2122:         # succeeds",
      "2123:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2124:         result = self.app.delete(f\"/api/collaboration/{col.id}\",",
      "2125:                                  headers=headers)",
      "2126:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "2128:         # cleanup",
      "2129:         org.delete()",
      "2130:         org_not_member.delete()",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1778:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1779:         self.assertEqual(len(results.json), 2)",
      "1783:         org = Organization()",
      "1784:         org.save()",
      "1786:         col.save()",
      "1788:         # try to do it without permission",
      "",
      "[Removed Lines]",
      "1781:     def test_delete_collaboration_organization_pesmissions(self):",
      "1785:         col = Collaboration(organizations=[org])",
      "",
      "[Added Lines]",
      "2236:         # test adding new organization to collaboration from within the",
      "2237:         # collaboration",
      "2238:         org3 = Organization()",
      "2239:         org3.save()",
      "2240:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
      "2241:                             operation=Operation.EDIT)",
      "2242:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2243:         results = self.app.post(f\"/api/collaboration/{col.id}/organization\",",
      "2244:                                 headers=headers, json={'id': org3.id})",
      "2245:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2247:         # adding new organization to collaboration from outside the",
      "2248:         # collaboration should fail with collaboration permission",
      "2249:         org4 = Organization()",
      "2250:         org4.save()",
      "2251:         headers = self.create_user_and_login(organization=org4, rules=[rule])",
      "2252:         results = self.app.post(f\"/api/collaboration/{col.id}/organization\",",
      "2253:                                 headers=headers, json={'id': org4.id})",
      "2254:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2256:         # cleanup",
      "2257:         org.delete()",
      "2258:         org2.delete()",
      "2259:         org3.delete()",
      "2260:         org4.delete()",
      "2261:         col.delete()",
      "2263:     def test_delete_collaboration_organization_permissions(self):",
      "2267:         org2 = Organization()",
      "2268:         org2.save()",
      "2269:         col = Collaboration(organizations=[org, org2])",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1791:                                   headers=headers, json={'id': org.id})",
      "1792:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "1796:         headers = self.create_user_and_login(rules=[rule])",
      "1797:         results = self.app.delete(f\"/api/collaboration/{col.id}/organization\",",
      "1798:                                   headers=headers, json={'id': org.id})",
      "1799:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1802:     def test_view_collaboration_node_permissions(self):",
      "",
      "[Removed Lines]",
      "1794:         # delete it!",
      "1795:         rule = Rule.get_by_(\"collaboration\", Scope.GLOBAL, Operation.DELETE)",
      "1800:         self.assertEqual(results.json, [])",
      "",
      "[Added Lines]",
      "2278:         # delete first organization",
      "2279:         rule = Rule.get_by_(\"collaboration\", Scope.GLOBAL, Operation.EDIT)",
      "2284:         self.assertEqual(len(results.json), 1)  # one organization left",
      "2286:         # add back first organization",
      "2287:         col.organizations.append(org)",
      "2288:         col.save()",
      "2290:         # removing organization from collaboration from outside the",
      "2291:         # collaboration should fail with collaboration permission",
      "2292:         org3 = Organization()",
      "2293:         org3.save()",
      "2294:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
      "2295:                             operation=Operation.EDIT)",
      "2296:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "2297:         results = self.app.delete(f\"/api/collaboration/{col.id}/organization\",",
      "2298:                                   headers=headers, json={'id': org2.id})",
      "2299:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2301:         # test removing organization from collaboration from within the",
      "2302:         # collaboration",
      "2303:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2304:         results = self.app.delete(f\"/api/collaboration/{col.id}/organization\",",
      "2305:                                   headers=headers, json={'id': org2.id})",
      "2306:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2308:         # cleanup",
      "2309:         org.delete()",
      "2310:         org2.delete()",
      "2311:         org3.delete()",
      "2312:         col.delete()",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1849:         org = Organization()",
      "1850:         org.save()",
      "1852:         col.save()",
      "1853:         node = Node(organization=org)",
      "1854:         node.save()",
      "1856:         # try non-existant collaboration",
      "1857:         headers = self.create_user_and_login()",
      "",
      "[Removed Lines]",
      "1851:         col = Collaboration(organizations=[org])",
      "",
      "[Added Lines]",
      "2363:         org2 = Organization()",
      "2364:         org2.save()",
      "2365:         col = Collaboration(organizations=[org, org2])",
      "2369:         node2 = Node(organization=org2)",
      "2370:         node2.save()",
      "2372:         org3 = Organization()",
      "2373:         org3.save()",
      "2374:         node3 = Node(organization=org3)",
      "2375:         node3.save()",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1883:                                 headers=headers, json={'id': node.id})",
      "1884:         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)",
      "1886:         # cleanup",
      "1887:         node.delete()",
      "1889:     def test_delete_collaboration_node_permissions(self):",
      "1891:         org = Organization()",
      "1893:         node = Node(organization=org, collaboration=col)",
      "1894:         node.save()",
      "",
      "[Removed Lines]",
      "1892:         col = Collaboration(organizations=[org])",
      "",
      "[Added Lines]",
      "2407:         # adding new node to collaboration from an organization that is not",
      "2408:         # part of the collaboration should fail",
      "2409:         results = self.app.post(f'/api/collaboration/{col.id}/node',",
      "2410:                                 headers=headers, json={'id': node3.id})",
      "2411:         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)",
      "2413:         # test new node to collaboration from within the collaboration",
      "2414:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
      "2415:                             operation=Operation.EDIT)",
      "2416:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2417:         results = self.app.post(f'/api/collaboration/{col.id}/node',",
      "2418:                                 headers=headers, json={'id': node2.id})",
      "2419:         self.assertEqual(results.status_code, HTTPStatus.CREATED)",
      "2421:         # adding new node to collaboration from outside collaboration should",
      "2422:         # fail with collaboration-scope permission",
      "2423:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "2424:         results = self.app.post(f'/api/collaboration/{col.id}/node',",
      "2425:                                 headers=headers, json={'id': node3.id})",
      "2426:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2430:         node2.delete()",
      "2431:         node3.delete()",
      "2432:         org.delete()",
      "2433:         org2.delete()",
      "2434:         org3.delete()",
      "2435:         col.delete()",
      "2440:         org2 = Organization()",
      "2441:         col = Collaboration(organizations=[org, org2])",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1917:         results = self.app.delete(f'/api/collaboration/{col.id}/node',",
      "1918:                                   headers=headers, json={'id': node2.id})",
      "1919:         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)",
      "1922:         results = self.app.delete(f'/api/collaboration/{col.id}/node',",
      "1923:                                   headers=headers, json={'id': node.id})",
      "1924:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "1926:         # cleanup",
      "1927:         node.delete()",
      "1928:         node2.delete()",
      "1930:     def test_view_collaboration_task_permissions_as_user(self):",
      "",
      "[Removed Lines]",
      "1921:         # delete a node!",
      "",
      "[Added Lines]",
      "2469:         node2.delete()",
      "2471:         # delete node from collaboration!",
      "2476:         # removing node from collaboration from outside the",
      "2477:         # collaboration should fail with collaboration permission",
      "2478:         node2 = Node(organization=org2, collaboration=col)",
      "2479:         node2.save()",
      "2480:         org3 = Organization()",
      "2481:         org3.save()",
      "2482:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
      "2483:                             operation=Operation.EDIT)",
      "2484:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "2485:         results = self.app.delete(f\"/api/collaboration/{col.id}/node\",",
      "2486:                                   headers=headers, json={'id': node2.id})",
      "2487:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2489:         # test removing organization from collaboration from within the",
      "2490:         # collaboration",
      "2491:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2492:         results = self.app.delete(f\"/api/collaboration/{col.id}/node\",",
      "2493:                                   headers=headers, json={'id': node2.id})",
      "2494:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2499:         org.delete()",
      "2500:         org2.delete()",
      "2501:         org3.delete()",
      "2502:         col.delete()",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1946:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "1948:         # view from another organization",
      "1951:         headers = self.create_user_and_login(rules=[rule])",
      "1952:         results = self.app.get(f'/api/collaboration/{col.id}/task',",
      "1953:                                headers=headers)",
      "",
      "[Removed Lines]",
      "1949:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION,",
      "1950:                             Operation.VIEW)",
      "",
      "[Added Lines]",
      "2523:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.VIEW)",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1987:     def test_view_node_permissions_as_user(self):",
      "1989:         org = Organization()",
      "1991:         node = Node(organization=org, collaboration=col)",
      "1992:         node.save()",
      "1994:         # view non existing node",
      "1995:         headers = self.create_user_and_login()",
      "",
      "[Removed Lines]",
      "1990:         col = Collaboration(organizations=[org])",
      "",
      "[Added Lines]",
      "2563:         org2 = Organization()",
      "2564:         col = Collaboration(organizations=[org, org2])",
      "2567:         node2 = Node(organization=org2, collaboration=col)",
      "2568:         node2.save()",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "2021:         headers = self.create_user_and_login(organization=org, rules=[rule1])",
      "2022:         results = self.app.get('/api/node', headers=headers)",
      "2023:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2026:         # list global permissions",
      "2027:         headers = self.create_user_and_login(rules=[rule2])",
      "",
      "[Removed Lines]",
      "2024:         self.assertEqual(len(results.json['data']), len(col.nodes))",
      "",
      "[Added Lines]",
      "2600:         self.assertEqual(len(results.json['data']), 1)  # collab has 1 node",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "2029:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2030:         self.assertEqual(len(json_data), len(Node.get()))",
      "2032:         # cleanup",
      "2033:         node.delete()",
      "2035:     def test_view_node_permissions_as_node(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2608:         # collaboration permission inside the collaboration",
      "2609:         rule = Rule.get_by_(\"node\", scope=Scope.COLLABORATION,",
      "2610:                             operation=Operation.VIEW)",
      "2611:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "2612:         results = self.app.get(f'/api/node/{node.id}', headers=headers)",
      "2613:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2615:         # list collaboration permissions - in collaboration",
      "2616:         results = self.app.get('/api/node', headers=headers)",
      "2617:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2618:         self.assertEqual(len(results.json['data']), len(col.nodes))",
      "2620:         # collaboration permission outside the collaboration should fail",
      "2621:         org3 = Organization()",
      "2622:         org3.save()",
      "2623:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "2624:         results = self.app.get(f'/api/node/{node.id}', headers=headers)",
      "2625:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2627:         # list collaboration permissions - other collaboration",
      "2628:         results = self.app.get('/api/node', headers=headers,",
      "2629:                                query_string={'collaboration_id': col.id})",
      "2630:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2634:         node2.delete()",
      "2635:         org.delete()",
      "2636:         org2.delete()",
      "2637:         org3.delete()",
      "2638:         col.delete()",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "2089:         })",
      "2090:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2093:         # does not belong to the collaboration",
      "2095:         results = self.app.post('/api/node', headers=headers, json={",
      "2096:             'collaboration_id': col.id",
      "2097:         })",
      "",
      "[Removed Lines]",
      "2092:         # test adding a node to an collaboration from an organization witch",
      "2094:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "",
      "[Added Lines]",
      "2697:         # test adding a node to an collaboration from an organization which",
      "2699:         rule2 = Rule.get_by_(\"node\", Scope.GLOBAL, Operation.CREATE)",
      "2700:         headers = self.create_user_and_login(organization=org2, rules=[rule2])",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "2123:         })",
      "2124:         self.assertEqual(results.status_code, HTTPStatus.CREATED)",
      "2126:     def test_delete_node_permissions(self):",
      "2128:         org = Organization(name=str(uuid.uuid1()))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2732:         # test collaboration permissions",
      "2733:         org3 = Organization()",
      "2734:         org3.save()",
      "2735:         col.organizations.append(org3)",
      "2736:         col.save()",
      "2737:         rule = Rule.get_by_(\"node\", scope=Scope.COLLABORATION,",
      "2738:                             operation=Operation.CREATE)",
      "2739:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2740:         result = self.app.post('/api/node', headers=headers, json={",
      "2741:             'collaboration_id': col.id,",
      "2742:             'organization_id': org3.id",
      "2743:         })",
      "2744:         self.assertEqual(result.status_code, HTTPStatus.CREATED)",
      "2746:         # test collaboration permissions - outside of collaboration should fail",
      "2747:         org4 = Organization()",
      "2748:         org4.save()",
      "2749:         col.organizations.append(org4)",
      "2750:         col.save()",
      "2751:         headers = self.create_user_and_login(organization=Organization(),",
      "2752:                                              rules=[rule])",
      "2753:         result = self.app.post('/api/node', headers=headers, json={",
      "2754:             'collaboration_id': col.id,",
      "2755:             'organization_id': org4.id",
      "2756:         })",
      "2757:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "2759:         # cleanup",
      "2760:         node.delete()",
      "2761:         org.delete()",
      "2762:         org2.delete()",
      "2763:         org3.delete()",
      "2764:         org4.delete()",
      "2765:         col.delete()",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "2156:         results = self.app.delete(f'/api/node/{node2.id}', headers=headers)",
      "2157:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2159:     def test_patch_node_permissions_as_user(self):",
      "2160:         # test patching non-existant node",
      "2161:         headers = self.create_user_and_login()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2800:         # collaboration permission - removing node from outside collaboration",
      "2801:         # should fail",
      "2802:         org3 = Organization()",
      "2803:         node3 = Node(organization=org3, collaboration=col)",
      "2804:         node3.save()",
      "2805:         col.organizations.append(org3)",
      "2806:         col.save()",
      "2807:         org_not_in_collab = Organization()",
      "2808:         org_not_in_collab.save()",
      "2809:         rule = Rule.get_by_(\"node\", scope=Scope.COLLABORATION,",
      "2810:                             operation=Operation.DELETE)",
      "2811:         headers = self.create_user_and_login(organization=org_not_in_collab,",
      "2812:                                              rules=[rule])",
      "2813:         results = self.app.delete(f'/api/node/{node3.id}', headers=headers)",
      "2814:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2816:         # collaboration permission - now within collaboration",
      "2817:         headers = self.create_user_and_login(organization=org, rules=[rule])",
      "2818:         results = self.app.delete(f'/api/node/{node3.id}', headers=headers)",
      "2819:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2821:         # cleanup",
      "2822:         org.delete()",
      "2823:         org2.delete()",
      "2824:         org3.delete()",
      "2825:         org_not_in_collab.delete()",
      "2826:         col.delete()",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "2165:         # test user without any permissions",
      "2166:         org = Organization()",
      "2168:         node = Node(organization=org, collaboration=col)",
      "2169:         node.save()",
      "",
      "[Removed Lines]",
      "2167:         col = Collaboration(organizations=[org])",
      "",
      "[Added Lines]",
      "2836:         org2 = Organization()",
      "2837:         col = Collaboration(organizations=[org, org2])",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "2230:                                  json={'organization_id': 9999})",
      "2231:         self.assertEqual(results.status_code, HTTPStatus.NOT_FOUND)",
      "2233:         # cleanup",
      "2234:         node.delete()",
      "2236:     def test_view_task_permissions_as_user(self):",
      "2237:         # non existing task",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2903:         # collaboration permission - inside the collaboration",
      "2904:         rule = Rule.get_by_(\"node\", Scope.COLLABORATION, Operation.EDIT)",
      "2905:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
      "2906:         results = self.app.patch(f\"/api/node/{node.id}\", headers=headers,",
      "2907:                                  json={\"name\": \"A\"})",
      "2908:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2910:         # collaboration permission - outside the collaboration",
      "2911:         org3 = Organization()",
      "2912:         org3.save()",
      "2913:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
      "2914:         results = self.app.patch(f\"/api/node/{node.id}\", headers=headers,",
      "2915:                                  json={\"name\": \"A\"})",
      "2916:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2920:         org.delete()",
      "2921:         org2.delete()",
      "2922:         org3.delete()",
      "2923:         col.delete()",
      "2924:         col2.delete()",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "2242:         # test user without any permissions and id",
      "2243:         org = Organization()",
      "2246:         task.save()",
      "2248:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
      "2249:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2253:         headers = self.create_user_and_login(org, rules=[rule])",
      "2254:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
      "2255:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2256:         self.assertEqual(results.json['name'], 'unit')",
      "2258:         # test user with org permissions with id from another org",
      "2259:         headers = self.create_user_and_login(rules=[rule])",
      "2260:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
      "",
      "[Removed Lines]",
      "2244:         col = Collaboration(organizations=[org])",
      "2245:         task = Task(name=\"unit\", collaboration=col)",
      "2251:         # test user with org permissions with id",
      "2252:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.VIEW)",
      "",
      "[Added Lines]",
      "2934:         org2 = Organization()",
      "2935:         col = Collaboration(organizations=[org, org2])",
      "2936:         task = Task(name=\"unit\", collaboration=col, init_org=org)",
      "2942:         # test user with col permissions with id",
      "2943:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.VIEW)",
      "2949:         # collaboration permission outside the collaboration should fail",
      "2950:         org_not_in_collab = Organization()",
      "2951:         org_not_in_collab.save()",
      "2952:         headers = self.create_user_and_login(organization=org_not_in_collab,",
      "2953:                                              rules=[rule])",
      "2954:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
      "2955:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "2265:         results = self.app.get('/api/task', headers=headers)",
      "2266:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2268:         # test user with global permissions and id",
      "2269:         rule = Rule.get_by_(\"task\", Scope.GLOBAL, Operation.VIEW)",
      "2270:         headers = self.create_user_and_login(rules=[rule])",
      "2271:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
      "2272:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2274:         # test user with global permissions without id",
      "2275:         results = self.app.get('/api/task', headers=headers)",
      "2276:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2278:     def test_view_task_permissions_as_node_and_container(self):",
      "2279:         # test node with id",
      "2280:         org = Organization()",
      "2281:         org.save()",
      "2282:         col = Collaboration(organizations=[org])",
      "2283:         col.save()",
      "2285:         task.save()",
      "2286:         res = Run(task=task, status=TaskStatus.PENDING)",
      "2287:         res.save()",
      "",
      "[Removed Lines]",
      "2284:         task = Task(collaboration=col, image=\"some-image\")",
      "",
      "[Added Lines]",
      "2967:         # test that user is not allowed to view task results without id",
      "2968:         results = self.app.get('/api/task', headers=headers,",
      "2969:                                query_string={'include': 'results'})",
      "2970:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2972:         # test that user is allowed to view task results if they have the rule",
      "2973:         # to view results",
      "2974:         rule_view_results = Rule.get_by_(\"run\", Scope.GLOBAL, Operation.VIEW)",
      "2975:         headers = self.create_user_and_login(org,",
      "2976:                                              rules=[rule, rule_view_results])",
      "2977:         results = self.app.get('/api/task', headers=headers,",
      "2978:                                query_string={'include': 'results'})",
      "2979:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2987:         # test that user is not allowed to view task results with id",
      "2988:         results = self.app.get(f'/api/task/{task.id}', headers=headers,",
      "2989:                                query_string={'include': 'results'})",
      "2990:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2992:         # test that user is allowed to view task results if they have the rule",
      "2993:         # to view results",
      "2994:         headers = self.create_user_and_login(org,",
      "2995:                                              rules=[rule, rule_view_results])",
      "2996:         results = self.app.get(f'/api/task/{task.id}', headers=headers,",
      "2997:                                query_string={'include': 'results'})",
      "2998:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3004:         # list collaboration permissions - in collaboration",
      "3005:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.VIEW)",
      "3006:         headers = self.create_user_and_login(org, rules=[rule])",
      "3007:         results = self.app.get('/api/task', headers=headers)",
      "3008:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3009:         self.assertEqual(len(results.json['data']), len(col.tasks))",
      "3011:         # list collaboration permissions - other collaboration",
      "3012:         headers = self.create_user_and_login(org_not_in_collab, rules=[rule])",
      "3013:         results = self.app.get('/api/task', headers=headers,",
      "3014:                                query_string={'collaboration_id': col.id})",
      "3015:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "3017:         # list own organization permissions - same organization",
      "3018:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.VIEW)",
      "3019:         headers = self.create_user_and_login(org, rules=[rule])",
      "3020:         results = self.app.get('/api/task', headers=headers)",
      "3021:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3022:         self.assertEqual(len(results.json['data']), len(col.tasks))",
      "3024:         # list own organization permissions - other organization",
      "3025:         headers = self.create_user_and_login(org2, rules=[rule])",
      "3026:         results = self.app.get('/api/task', headers=headers, query_string={",
      "3027:             'init_org_id': org.id",
      "3028:         })",
      "3029:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "3031:         # list own user's task permissions - same user without id",
      "3032:         rule = Rule.get_by_(\"task\", Scope.OWN, Operation.VIEW)",
      "3033:         user = self.create_user(rules=[rule], organization=org)",
      "3034:         headers = self.login(user.username)",
      "3035:         task2 = Task(name=\"unit\", collaboration=col, init_org=org,",
      "3036:                      init_user=user)",
      "3037:         task2.save()",
      "3038:         results = self.app.get('/api/task', headers=headers)",
      "3039:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3040:         self.assertEqual(len(results.json['data']), 1)",
      "3042:         # list own user's task permissions - same user with id",
      "3043:         results = self.app.get(f'/api/task/{task2.id}', headers=headers)",
      "3044:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3046:         # list own user's task permissions - other user without id",
      "3047:         headers = self.create_user_and_login(org, rules=[rule])",
      "3048:         results = self.app.get('/api/task', headers=headers, query_string={",
      "3049:             'init_user_id': user.id",
      "3050:         })",
      "3051:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "3053:         # list own user's task permissions - other user with id",
      "3054:         results = self.app.get(f'/api/task/{task2.id}', headers=headers)",
      "3055:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "3057:         # cleanup",
      "3058:         task.delete()",
      "3059:         task2.delete()",
      "3060:         user.delete()",
      "3061:         org.delete()",
      "3062:         org2.delete()",
      "3063:         col.delete()",
      "3071:         task = Task(collaboration=col, image=\"some-image\", init_org=org)",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "2345:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2347:         # user with organization permissions for other organization",
      "2349:         headers = self.create_user_and_login(rules=[rule])",
      "2350:         results = self.app.post('/api/task', headers=headers, json=task_json)",
      "2351:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "",
      "[Removed Lines]",
      "2348:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.CREATE)",
      "",
      "[Added Lines]",
      "3135:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.CREATE)",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "2441:         # test with organization permissions from other organization",
      "2442:         org = Organization()",
      "2445:         task.save()",
      "2448:         headers = self.create_user_and_login(rules=[rule])",
      "2449:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
      "2450:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "2453:         headers = self.create_user_and_login(org, [rule])",
      "2454:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
      "2455:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "",
      "[Removed Lines]",
      "2443:         col = Collaboration(organizations=[org])",
      "2444:         task = Task(collaboration=col)",
      "2447:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.DELETE)",
      "2452:         # test with organization permissions",
      "",
      "[Added Lines]",
      "3230:         org2 = Organization()",
      "3231:         col = Collaboration(organizations=[org, org2])",
      "3232:         task = Task(collaboration=col, init_org=org)",
      "3235:         # test with user who is not member of collaboration",
      "3236:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.DELETE)",
      "3241:         # test with collaboration permissions",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "2471:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "2472:         self.assertIsNone(Task.get(run_id))",
      "2474:     def test_view_task_result_permissions_as_user(self):",
      "2476:         # non-existing task",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3263:         # test permission to delete tasks of own organization - other",
      "3264:         # organization should fail",
      "3265:         task = Task(collaboration=col, init_org=org)",
      "3266:         task.save()",
      "3267:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.DELETE)",
      "3268:         headers = self.create_user_and_login(rules=[rule], organization=org2)",
      "3269:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
      "3270:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "3272:         # test permission to delete tasks of own organization - should work",
      "3273:         headers = self.create_user_and_login(rules=[rule], organization=org)",
      "3274:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
      "3275:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3277:         # test permission to delete own tasks - other user of organization",
      "3278:         # should fail",
      "3279:         rule = Rule.get_by_(\"task\", Scope.OWN, Operation.DELETE)",
      "3280:         user = self.create_user(rules=[rule], organization=org)",
      "3281:         task = Task(collaboration=col, init_org=org, init_user=user)",
      "3282:         task.save()",
      "3283:         headers = self.create_user_and_login(rules=[rule], organization=org)",
      "3284:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
      "3285:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
      "3287:         # test permission to delete own tasks with same user",
      "3288:         headers = self.login(user.username)",
      "3289:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
      "3290:         self.assertEqual(results.status_code, HTTPStatus.OK)",
      "3292:         # cleanup",
      "3293:         user.delete()",
      "3294:         org.delete()",
      "3295:         org2.delete()",
      "3296:         col.delete()",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "2481:         # test with organization permissions from other organization",
      "2482:         org = Organization()",
      "2485:         # NB: node is used implicitly in task/{id}/result schema",
      "2486:         node = Node(organization=org, collaboration=col)",
      "2487:         res = Run(task=task, organization=org)",
      "2488:         res.save()",
      "2491:         headers = self.create_user_and_login(rules=[rule])",
      "2492:         result = self.app.get(f'/api/run?task_id={task.id}', headers=headers)",
      "2496:         headers = self.create_user_and_login(org, [rule])",
      "2497:         result = self.app.get(f'/api/run?task_id={task.id}', headers=headers)",
      "2498:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "",
      "[Removed Lines]",
      "2483:         col = Collaboration(organizations=[org])",
      "2484:         task = Task(collaboration=col)",
      "2490:         rule = Rule.get_by_(\"run\", Scope.ORGANIZATION, Operation.VIEW)",
      "2493:         self.assertEqual(len(result.json['data']), 0)",
      "2495:         # test with organization permission",
      "",
      "[Added Lines]",
      "3307:         org2 = Organization()",
      "3308:         col = Collaboration(organizations=[org, org2])",
      "3309:         col.save()",
      "3310:         task = Task(collaboration=col, init_org=org)",
      "3316:         # Test with permissions of someone who is not in the collaboration",
      "3317:         rule = Rule.get_by_(\"run\", Scope.COLLABORATION, Operation.VIEW)",
      "3320:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "3322:         # test with collaboration permission",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "2504:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "2506:         # test also result endpoint",
      "2508:         headers = self.create_user_and_login(rules=[rule])",
      "2509:         result = self.app.get(",
      "2510:             f'/api/result?task_id={task.id}', headers=headers)",
      "2514:         headers = self.create_user_and_login(org, [rule])",
      "2515:         result = self.app.get(",
      "2516:             f'/api/result?task_id={task.id}', headers=headers)",
      "2517:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "2520:         rule = Rule.get_by_(\"run\", Scope.GLOBAL, Operation.VIEW)",
      "2521:         headers = self.create_user_and_login(rules=[rule])",
      "2522:         result = self.app.get(",
      "2523:             f'/api/result?task_id={task.id}', headers=headers)",
      "2524:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "2526:         # cleanup",
      "2527:         node.delete()",
      "2529:     def test_view_task_run_permissions_as_container(self):",
      "2530:         # test if container can",
      "2531:         org = Organization()",
      "2532:         col = Collaboration(organizations=[org])",
      "2534:         task.save()",
      "2535:         res = Run(task=task, organization=org, status=TaskStatus.PENDING)",
      "2536:         res.save()",
      "",
      "[Removed Lines]",
      "2507:         rule = Rule.get_by_(\"run\", Scope.ORGANIZATION, Operation.VIEW)",
      "2511:         self.assertEqual(len(result.json['data']), 0)",
      "2513:         # test with organization permission",
      "2519:         # test with global permission",
      "2533:         task = Task(collaboration=col, image=\"some-image\")",
      "",
      "[Added Lines]",
      "3334:         rule = Rule.get_by_(\"run\", Scope.COLLABORATION, Operation.VIEW)",
      "3338:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "3340:         # test result endpoint with organization permission",
      "3346:         # test result endpoint with global permission",
      "3353:         # test with organization permission",
      "3354:         rule = Rule.get_by_(\"run\", Scope.ORGANIZATION, Operation.VIEW)",
      "3355:         headers = self.create_user_and_login(org, [rule])",
      "3356:         result = self.app.get(f'/api/run?task_id={task.id}', headers=headers)",
      "3357:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "3358:         result = self.app.get(f'/api/run/{res.id}', headers=headers)",
      "3359:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "3361:         # test with organization permission - other organization should fail",
      "3362:         headers = self.create_user_and_login(org2, [rule])",
      "3363:         result = self.app.get(",
      "3364:             f'/api/run?task_id={task.id}', headers=headers)",
      "3365:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "3366:         result = self.app.get(f'/api/run/{res.id}', headers=headers)",
      "3367:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "3369:         # test with permission to view own runs",
      "3370:         rule = Rule.get_by_(\"run\", Scope.OWN, Operation.VIEW)",
      "3371:         user = self.create_user(rules=[rule], organization=org)",
      "3372:         headers = self.login(user.username)",
      "3373:         task2 = Task(collaboration=col, init_org=org, init_user=user)",
      "3374:         task2.save()",
      "3375:         res2 = Run(task=task2, organization=org)",
      "3376:         res2.save()",
      "3377:         result = self.app.get(f'/api/run?task_id={task2.id}', headers=headers)",
      "3378:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "3379:         result = self.app.get(f'/api/run/{res2.id}', headers=headers)",
      "3380:         self.assertEqual(result.status_code, HTTPStatus.OK)",
      "3382:         # test with permission to view own runs - other user should fail",
      "3383:         headers = self.create_user_and_login(rules=[rule], organization=org)",
      "3384:         result = self.app.get(f'/api/run?task_id={task2.id}', headers=headers)",
      "3385:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "3386:         result = self.app.get(f'/api/run/{res2.id}', headers=headers)",
      "3387:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
      "3391:         task.delete()",
      "3392:         task2.delete()",
      "3393:         res.delete()",
      "3394:         res2.delete()",
      "3395:         org.delete()",
      "3396:         org2.delete()",
      "3397:         col.delete()",
      "3403:         task = Task(collaboration=col, image=\"some-image\", init_org=org)",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/__init__.py||vantage6-server/vantage6/server/__init__.py": [
      "File: vantage6-server/vantage6/server/__init__.py -> vantage6-server/vantage6/server/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: import importlib",
      "15: import logging",
      "17: import uuid",
      "18: import json",
      "19: import time",
      "20: import datetime as dt",
      "21: import traceback",
      "24: from http import HTTPStatus",
      "25: from werkzeug.exceptions import HTTPException",
      "26: from flasgger import Swagger",
      "",
      "[Removed Lines]",
      "16: import os",
      "23: from typing import Any",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/default_roles.py||vantage6-server/vantage6/server/default_roles.py": [
      "File: vantage6-server/vantage6/server/default_roles.py -> vantage6-server/vantage6/server/default_roles.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:         db.Rule.get_by_('collaboration', Scope.ORGANIZATION, Operation.VIEW),",
      "59:         db.Rule.get_by_('role', Scope.ORGANIZATION, Operation.VIEW),",
      "60:         db.Rule.get_by_('node', Scope.ORGANIZATION, Operation.VIEW),",
      "63:         db.Rule.get_by_('port', Scope.ORGANIZATION, Operation.VIEW),",
      "64:         db.Rule.get_by_('event', Scope.ORGANIZATION, Operation.RECEIVE),",
      "65:     ]",
      "",
      "[Removed Lines]",
      "61:         db.Rule.get_by_('task', Scope.ORGANIZATION, Operation.VIEW),",
      "62:         db.Rule.get_by_('run', Scope.ORGANIZATION, Operation.VIEW),",
      "",
      "[Added Lines]",
      "61:         db.Rule.get_by_('task', Scope.COLLABORATION, Operation.VIEW),",
      "62:         db.Rule.get_by_('run', Scope.COLLABORATION, Operation.VIEW),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71:     }",
      "72:     # 3. Researcher role",
      "73:     RESEARCHER_RULES = VIEWER_RULES + [",
      "75:         db.Rule.get_by_('task', Scope.ORGANIZATION, Operation.DELETE),",
      "76:     ]",
      "77:     RESEARCHER_ROLE = {",
      "",
      "[Removed Lines]",
      "74:         db.Rule.get_by_('task', Scope.ORGANIZATION, Operation.CREATE),",
      "",
      "[Added Lines]",
      "74:         db.Rule.get_by_('task', Scope.COLLABORATION, Operation.CREATE),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "102:     }",
      "103:     # 4. Collaboration administrator role",
      "104:     COLLAB_ADMIN_RULES = ORG_ADMIN_RULES + [",
      "108:         db.Rule.get_by_('organization', Scope.GLOBAL, Operation.VIEW),",
      "116:         db.Rule.get_by_('event', Scope.COLLABORATION, Operation.RECEIVE),",
      "117:         db.Rule.get_by_('event', Scope.COLLABORATION, Operation.SEND),",
      "118:     ]",
      "",
      "[Removed Lines]",
      "105:         db.Rule.get_by_('user', Scope.GLOBAL, Operation.VIEW),",
      "106:         db.Rule.get_by_('user', Scope.GLOBAL, Operation.CREATE),",
      "107:         db.Rule.get_by_('user', Scope.GLOBAL, Operation.EDIT),",
      "109:         db.Rule.get_by_('organization', Scope.GLOBAL, Operation.EDIT),",
      "110:         db.Rule.get_by_('collaboration', Scope.GLOBAL, Operation.VIEW),",
      "111:         db.Rule.get_by_('collaboration', Scope.GLOBAL, Operation.EDIT),",
      "112:         db.Rule.get_by_('role', Scope.GLOBAL, Operation.VIEW),",
      "113:         db.Rule.get_by_('node', Scope.GLOBAL, Operation.CREATE),",
      "114:         db.Rule.get_by_('node', Scope.GLOBAL, Operation.VIEW),",
      "115:         db.Rule.get_by_('node', Scope.GLOBAL, Operation.DELETE),",
      "",
      "[Added Lines]",
      "105:         db.Rule.get_by_('user', Scope.COLLABORATION, Operation.VIEW),",
      "106:         db.Rule.get_by_('user', Scope.COLLABORATION, Operation.CREATE),",
      "107:         db.Rule.get_by_('user', Scope.COLLABORATION, Operation.EDIT),",
      "108:         # The following rule is given so that a collaboration admin can",
      "109:         # view which organizations they may add to their collaboration",
      "111:         db.Rule.get_by_('organization', Scope.COLLABORATION, Operation.EDIT),",
      "112:         db.Rule.get_by_('collaboration', Scope.COLLABORATION, Operation.VIEW),",
      "113:         db.Rule.get_by_('collaboration', Scope.COLLABORATION, Operation.EDIT),",
      "114:         # The following rule is given so that a collaboration admin can",
      "115:         # create a new collaboration",
      "116:         db.Rule.get_by_('collaboration', Scope.GLOBAL, Operation.CREATE),",
      "117:         db.Rule.get_by_('role', Scope.COLLABORATION, Operation.VIEW),",
      "118:         db.Rule.get_by_('node', Scope.COLLABORATION, Operation.CREATE),",
      "119:         db.Rule.get_by_('node', Scope.COLLABORATION, Operation.VIEW),",
      "120:         db.Rule.get_by_('node', Scope.COLLABORATION, Operation.DELETE),",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/model/rule.py||vantage6-server/vantage6/server/model/rule.py": [
      "File: vantage6-server/vantage6/server/model/rule.py -> vantage6-server/vantage6/server/model/rule.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from vantage6.server.model.base import Base, DatabaseSessionManager",
      "11:     \"\"\" Enumerator of all available operations \"\"\"",
      "12:     VIEW = \"v\"",
      "13:     EDIT = \"e\"",
      "",
      "[Removed Lines]",
      "10: class Operation(Enumerate):",
      "",
      "[Added Lines]",
      "10: class Operation(str, Enumerate):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     RECEIVE = \"r\"",
      "21:     \"\"\" Enumerator of all available scopes \"\"\"",
      "22:     OWN = \"own\"",
      "23:     ORGANIZATION = \"org\"",
      "",
      "[Removed Lines]",
      "20: class Scope(Enumerate):",
      "",
      "[Added Lines]",
      "20: class Scope(str, Enumerate):",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/model/task.py||vantage6-server/vantage6/server/model/task.py": [
      "File: vantage6-server/vantage6/server/model/task.py -> vantage6-server/vantage6/server/model/task.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:         Id of the parent task (if any)",
      "33:     database : str",
      "34:         Name of the database that needs to be used for this task",
      "36:         Id of the organization that created this task",
      "37:     init_user_id : int",
      "38:         Id of the user that created this task",
      "",
      "[Removed Lines]",
      "35:     initiator_id : int",
      "",
      "[Added Lines]",
      "35:     init_org_id : int",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py": [
      "File: vantage6-server/vantage6/server/permission.py -> vantage6-server/vantage6/server/permission.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from vantage6.server.globals import RESOURCES",
      "8: from vantage6.server.default_roles import DefaultRole",
      "9: from vantage6.server.model.role import Role",
      "10: from vantage6.server.model.rule import Rule, Operation, Scope",
      "11: from vantage6.server.model.base import DatabaseSessionManager",
      "12: from vantage6.common import logger_name",
      "14: module_name = logger_name(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: from vantage6.server.model.base import Base",
      "13: from vantage6.server.utils import (",
      "14:     obtain_auth_collaborations, obtain_auth_organization",
      "15: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17: RuleNeed = namedtuple(\"RuleNeed\", [\"name\", \"scope\", \"operation\"])",
      "21:     \"\"\"",
      "22:     Class that tracks a set of all rules for a certain resource name",
      "",
      "[Removed Lines]",
      "20: class RuleCollection:",
      "",
      "[Added Lines]",
      "24: class RuleCollection(dict):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:             What operation the rule applies to",
      "43:         \"\"\"",
      "44:         permission = Permission(RuleNeed(self.name, scope, operation))",
      "48: class PermissionManager:",
      "",
      "[Removed Lines]",
      "45:         self.__setattr__(f'{operation.value}_{scope.value}', permission)",
      "",
      "[Added Lines]",
      "49:         self.__setattr__(f'{operation}_{scope}', permission)",
      "51:     def can_for_org(self, operation: Operation, subject_org_id: int) -> bool:",
      "52:         \"\"\"",
      "53:         Check if an operation is allowed on a certain organization",
      "55:         Parameters",
      "56:         ----------",
      "57:         operation: Operation",
      "58:             Operation to check if allowed",
      "59:         subject_org_id: int",
      "60:             Organization id on which the operation should be allowed",
      "62:         Returns",
      "63:         -------",
      "64:         bool",
      "65:             True if the operation is allowed on the organization, False",
      "66:             otherwise",
      "67:         \"\"\"",
      "68:         auth_org = obtain_auth_organization()",
      "70:         # check if the entity has global permission",
      "71:         global_perm = getattr(self, f'{operation}_{Scope.GLOBAL}')",
      "72:         if global_perm and global_perm.can():",
      "73:             return True",
      "75:         # check if the entity has organization permission and organization is",
      "76:         # the same as the subject organization",
      "77:         org_perm = getattr(self, f'{operation}_{Scope.ORGANIZATION}')",
      "78:         if auth_org.id == subject_org_id and org_perm and org_perm.can():",
      "79:             return True",
      "81:         # check if the entity has collaboration permission and the subject",
      "82:         # organization is in the collaboration of the own organization",
      "83:         col_perm = getattr(self, f'{operation}_{Scope.COLLABORATION}')",
      "84:         if col_perm and col_perm.can():",
      "85:             for col in auth_org.collaborations:",
      "86:                 if subject_org_id in [org.id for org in col.organizations]:",
      "87:                     return True",
      "89:         # no permission found",
      "90:         return False",
      "92:     def can_for_col(self, operation: Operation, collaboration_id: int) -> bool:",
      "93:         \"\"\"",
      "94:         Check if the user or node can perform the operation on a certain",
      "95:         collaboration",
      "97:         Parameters",
      "98:         ----------",
      "99:         operation: Operation",
      "100:             Operation to check if allowed",
      "101:         collaboration_id: int",
      "102:             Collaboration id on which the operation should be allowed",
      "103:         \"\"\"",
      "104:         auth_collabs = obtain_auth_collaborations()",
      "106:         # check if the entity has global permission",
      "107:         global_perm = getattr(self, f'{operation}_{Scope.GLOBAL}')",
      "108:         if global_perm and global_perm.can():",
      "109:             return True",
      "111:         # check if the entity has collaboration permission and the subject",
      "112:         # collaboration is in the collaborations of the user/node",
      "113:         col_perm = getattr(self, f'{operation}_{Scope.COLLABORATION}')",
      "114:         if col_perm and col_perm.can() and \\",
      "115:                 self._id_in_list(collaboration_id, auth_collabs):",
      "116:             return True",
      "118:         # no permission found",
      "119:         return False",
      "121:     def get_max_scope(self, operation: Operation) -> Scope | None:",
      "122:         \"\"\"",
      "123:         Get the highest scope that the entity has for a certain operation",
      "125:         Parameters",
      "126:         ----------",
      "127:         operation: Operation",
      "128:             Operation to check",
      "130:         Returns",
      "131:         -------",
      "132:         Scope | None",
      "133:             Highest scope that the entity has for the operation. None if the",
      "134:             entity has no permission for the operation",
      "135:         \"\"\"",
      "136:         if getattr(self, f'{operation}_{Scope.GLOBAL}'):",
      "137:             return Scope.GLOBAL",
      "138:         elif getattr(self, f'{operation}_{Scope.COLLABORATION}'):",
      "139:             return Scope.COLLABORATION",
      "140:         elif getattr(self, f'{operation}_{Scope.ORGANIZATION}'):",
      "141:             return Scope.ORGANIZATION",
      "142:         elif getattr(self, f'{operation}_{Scope.OWN}'):",
      "143:             return Scope.OWN",
      "144:         else:",
      "145:             return None",
      "147:     def has_at_least_scope(self, scope: Scope, operation: Operation) -> bool:",
      "148:         \"\"\"",
      "149:         Check if the entity has at least a certain scope for a certain",
      "150:         operation",
      "152:         Parameters",
      "153:         ----------",
      "154:         scope: Scope",
      "155:             Scope to check if the entity has at least",
      "156:         operation: Operation",
      "157:             Operation to check",
      "159:         Returns",
      "160:         -------",
      "161:         bool",
      "162:             True if the entity has at least the scope, False otherwise",
      "163:         \"\"\"",
      "164:         scopes: list[Scope] = self._get_scopes_from(scope)",
      "165:         for s in scopes:",
      "166:             perm = getattr(self, f'{operation}_{s}')",
      "167:             if perm and perm.can():",
      "168:                 return True",
      "169:         return False",
      "171:     def _id_in_list(self, id_: int, resource_list: list[Base]) -> bool:",
      "172:         \"\"\"",
      "173:         Check if resource list contains a resource with a certain ID",
      "175:         Parameters",
      "176:         ----------",
      "177:         id_ : int",
      "178:             ID of the resource",
      "179:         resource_list : list[db.Base]",
      "180:             List of resources",
      "182:         Returns",
      "183:         -------",
      "184:         bool",
      "185:             True if resource is in list, False otherwise",
      "186:         \"\"\"",
      "187:         return any(r.id == id_ for r in resource_list)",
      "189:     def _get_scopes_from(self, minimal_scope: Scope) -> list[Scope]:",
      "190:         \"\"\"",
      "191:         Get scopes that are at least equal to a certain scope",
      "193:         Parameters",
      "194:         ----------",
      "195:         minimal_scope: Scope",
      "196:             Minimal scope",
      "198:         Returns",
      "199:         -------",
      "200:         list[Scope]",
      "201:             List of scopes that are at least equal to the minimal scope",
      "203:         Raises",
      "204:         ------",
      "205:         ValueError",
      "206:             If the minimal scope is not known",
      "207:         \"\"\"",
      "208:         if minimal_scope == Scope.ORGANIZATION:",
      "209:             return [Scope.ORGANIZATION, Scope.COLLABORATION, Scope.GLOBAL]",
      "210:         elif minimal_scope == Scope.COLLABORATION:",
      "211:             return [Scope.COLLABORATION, Scope.GLOBAL]",
      "212:         elif minimal_scope == Scope.GLOBAL:",
      "213:             return [Scope.GLOBAL]",
      "214:         elif minimal_scope == Scope.OWN:",
      "215:             return [Scope.OWN, Scope.ORGANIZATION, Scope.COLLABORATION,",
      "216:                     Scope.GLOBAL]",
      "217:         else:",
      "218:             raise ValueError(f\"Unknown scope '{minimal_scope}'\")",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/__init__.py||vantage6-server/vantage6/server/resource/__init__.py": [
      "File: vantage6-server/vantage6/server/resource/__init__.py -> vantage6-server/vantage6/server/resource/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: from vantage6.common import logger_name",
      "18: from vantage6.server import db",
      "19: from vantage6.server.resource.common.output_schema import HATEOASModelSchema",
      "20: from vantage6.server.permission import PermissionManager",
      "21: from vantage6.server.resource.common.pagination import Page",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from vantage6.server.utils import (",
      "20:     obtain_auth_collaborations, obtain_auth_organization",
      "21: )",
      "22: from vantage6.server.model.authenticatable import Authenticatable",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "149:         db.Organization",
      "150:             Organization model",
      "151:         \"\"\"",
      "155: # ------------------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "152:         return db.Organization.get(cls.obtain_organization_id())",
      "",
      "[Added Lines]",
      "156:         return obtain_auth_organization()",
      "158:     @staticmethod",
      "159:     def obtain_auth_collaborations() -> list[db.Collaboration]:",
      "160:         \"\"\"",
      "161:         Obtain the collaborations that the auth is part of.",
      "163:         Returns",
      "164:         -------",
      "165:         list[db.Collaboration]",
      "166:             List of collaborations",
      "167:         \"\"\"",
      "168:         return obtain_auth_collaborations()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "267:     if dt:",
      "268:         return datetime.datetime.strptime(dt, '%Y-%m-%dT%H:%M:%S.%f')",
      "269:     return default",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288: def get_org_ids_from_collabs(auth: Authenticatable,",
      "289:                              collab_id: int = None) -> list[int]:",
      "290:     \"\"\"",
      "291:     Get all organization ids from the collaborations the user or node is in.",
      "293:     Parameters",
      "294:     ----------",
      "295:     auth : Authenticatable",
      "296:         User or node",
      "297:     collab_id : int, optional",
      "298:         Collaboration id. If given, only return the organization ids of this",
      "299:         collaboration. If not given, return all organization ids of all",
      "300:         collaborations the user or node is in.",
      "302:     Returns",
      "303:     -------",
      "304:     list[int]",
      "305:         List of organization ids",
      "306:     \"\"\"",
      "307:     if collab_id:",
      "308:         return [",
      "309:             org.id",
      "310:             for col in auth.organization.collaborations",
      "311:             for org in col.organizations",
      "312:             if col.id == collab_id",
      "313:         ]",
      "314:     else:",
      "315:         return [",
      "316:             org.id",
      "317:             for col in auth.organization.collaborations",
      "318:             for org in col.organizations",
      "319:         ]",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/collaboration.py||vantage6-server/vantage6/server/resource/collaboration.py": [
      "File: vantage6-server/vantage6/server/resource/collaboration.py -> vantage6-server/vantage6/server/resource/collaboration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:     CollaborationInputSchema",
      "14: )",
      "15: from vantage6.server.permission import (",
      "16:     Scope as S,",
      "17:     Operation as P,",
      "18:     PermissionManager",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:     RuleCollection,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:     add(scope=S.GLOBAL, operation=P.EDIT,",
      "124:         description=\"edit any collaboration\")",
      "126:     add(scope=S.GLOBAL, operation=P.CREATE,",
      "127:         description=\"create a new collaboration\")",
      "129:     add(scope=S.GLOBAL, operation=P.DELETE,",
      "130:         description=\"delete a collaboration\")",
      "133: # ------------------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:     add(scope=S.COLLABORATION, operation=P.EDIT,",
      "127:         description=\"edit any collaboration that your organization \"",
      "128:                     \"participates in\")",
      "135:     add(scope=S.COLLABORATION, operation=P.DELETE,",
      "136:         description=\"delete any collaboration that your organization \"",
      "137:                     \"participates in\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138:     def __init__(self, socketio, mail, api, permissions, config):",
      "139:         super().__init__(socketio, mail, api, permissions, config)",
      "143: class Collaborations(CollaborationBase):",
      "",
      "[Removed Lines]",
      "140:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "147:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "408:           Description|\\n",
      "409:           |--|--|--|--|--|--|\\n",
      "410:           |Collaboration|Global|Edit|\u274c|\u274c|Update a collaboration|\\n\\n",
      "412:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "418:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Update a collaboration that",
      "419:           you are already a member of|\\n\\n",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "459:                     \"can not be found\"}, HTTPStatus.NOT_FOUND  # 404",
      "461:         # verify permissions",
      "463:             return {'msg': 'You lack the permission to do that!'}, \\",
      "464:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "462:         if not self.r.e_glo.can():",
      "",
      "[Added Lines]",
      "471:         if not self.r.can_for_col(P.EDIT, collaboration.id):",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "505:           Description|\\n",
      "506:           |--|--|--|--|--|--|\\n",
      "507:           |Collaboration|Global|Delete|\u274c|\u274c|Remove collaboration|\\n\\n",
      "509:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "517:           |Collaboration|Collaboration|Delete|\u274c|\u274c|Remove collaborations",
      "518:           that you are part of yourself|\\n\\n",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "542:                 HTTPStatus.NOT_FOUND",
      "544:         # verify permissions",
      "546:             return {'msg': 'You lack the permission to do that!'}, \\",
      "547:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "545:         if not self.r.d_glo.can():",
      "",
      "[Added Lines]",
      "556:         if not self.r.can_for_col(P.DELETE, collaboration.id):",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "575:     def __init__(self, socketio, mail, api, permissions, config):",
      "576:         super().__init__(socketio, mail, api, permissions, config)",
      "579:     @only_for((\"node\", \"user\", \"container\"))",
      "580:     def get(self, id):",
      "",
      "[Removed Lines]",
      "577:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "588:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "663:           |--|--|--|--|--|--|\\n",
      "664:           |Collaboration|Global|Edit|\u274c|\u274c|Add organization to a",
      "665:           collaboration|\\n\\n",
      "667:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "677:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Add organization to a",
      "678:           collaboration that your organization is already a member of|\\n\\n",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "703:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
      "705:         # verify permissions",
      "707:             return {'msg': 'You lack the permission to do that!'}, \\",
      "708:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "706:         if not self.r.e_glo.can():",
      "",
      "[Added Lines]",
      "719:         if not self.r.can_for_col(P.EDIT, collaboration.id):",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "739:           |--|--|--|--|--|--|\\n",
      "740:           |Collaboration|Global|Edit|\u274c|\u274c|Remove an organization from an",
      "741:           existing collaboration|\\n\\n",
      "743:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "755:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Remove an organization from",
      "756:           an existing collaboration that your organization is a member of|\\n\\n",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "772:         # get collaboration from which organization should be removed",
      "773:         collaboration = db.Collaboration.get(id)",
      "774:         if not collaboration:",
      "776:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
      "778:         # get organization which should be deleted",
      "779:         data = request.get_json()",
      "780:         organization = db.Organization.get(data['id'])",
      "781:         if not organization:",
      "783:                 HTTPStatus.NOT_FOUND",
      "786:             return {'msg': 'You lack the permission to do that!'}, \\",
      "787:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "775:             return {\"msg\": f\"collaboration having collaboration_id={id} can \"",
      "782:             return {\"msg\": f\"organization with id={id} is not found\"}, \\",
      "785:         if not self.r.d_glo.can():",
      "",
      "[Added Lines]",
      "790:             return {\"msg\": f\"Collaboration with collaboration_id={id} can \"",
      "797:             return {\"msg\": f\"Organization with id={id} is not found\"}, \\",
      "800:         if not self.r.can_for_col(P.EDIT, collaboration.id):",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "799:     def __init__(self, socketio, mail, api, permissions, config):",
      "800:         super().__init__(socketio, mail, api, permissions, config)",
      "803:     @with_user",
      "804:     def get(self, id):",
      "",
      "[Removed Lines]",
      "801:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "816:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "883:           |Rule name|Scope|Operation|Assigned to node|Assigned to container|",
      "884:           Description|\\n",
      "885:           |--|--|--|--|--|--|\\n",
      "888:           Accessible to users.",
      "",
      "[Removed Lines]",
      "886:           |Collaboration|Global|Create|\u274c|\u274c|Add node to collaboration|\\n",
      "",
      "[Added Lines]",
      "901:           |Collaboration|Global|Edit|\u274c|\u274c|Add node to collaboration|\\n",
      "902:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Add node to collaboration",
      "903:           that your organization is a member of|\\n",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "924:             return {\"msg\": f\"collaboration having collaboration_id={id} can \"",
      "925:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
      "928:             return {'msg': 'You lack the permission to do that!'}, \\",
      "929:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "927:         if not self.r.e_glo.can():",
      "",
      "[Added Lines]",
      "944:         if not self.r.can_for_col(P.EDIT, collaboration.id):",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "939:         if not node:",
      "940:             return {\"msg\": f\"node id={data['id']} not found\"}, \\",
      "941:                 HTTPStatus.NOT_FOUND",
      "942:         if node in collaboration.nodes:",
      "943:             return {\"msg\": f\"node id={data['id']} is already in collaboration \"",
      "944:                     f\"id={id}\"}, HTTPStatus.BAD_REQUEST",
      "946:         collaboration.nodes.append(node)",
      "947:         collaboration.save()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "963:         elif node.organization not in collaboration.organizations:",
      "964:             return {",
      "965:                 \"msg\": f\"Node id={data['id']} belongs to an organization that \"",
      "966:                 f\"is not part of collaboration id={id}. Please add the \"",
      "967:                 \"organization to the collaboration first\"",
      "968:             }, HTTPStatus.BAD_REQUEST",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "960:           Description|\\n",
      "961:           |--|--|--|--|--|--|\\n",
      "962:           |Collaboration|Global|Edit|\u274c|\u274c|Remove node from collaboration|\\n",
      "964:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "987:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Remove node from",
      "988:           collaboration that your organization is a member of|\\n",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "997:             return {\"msg\": f\"collaboration having collaboration_id={id} can \"",
      "998:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
      "1001:             return {'msg': 'You lack the permission to do that!'}, \\",
      "1002:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "1000:         if not self.r.e_glo.can():",
      "",
      "[Added Lines]",
      "1026:         if not self.r.can_for_col(P.EDIT, collaboration.id):",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1087:         auth_org = self.obtain_auth_organization()",
      "1089:         if not self.r.v_glo.can():",
      "1091:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "1092:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "1090:             if not (self.r.v_org.can() and auth_org in col.organizations):",
      "",
      "[Added Lines]",
      "1117:             if not (self.r.v_col.can() and auth_org in col.organizations):",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py": [
      "File: vantage6-server/vantage6/server/resource/node.py -> vantage6-server/vantage6/server/resource/node.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: from vantage6.server.resource import with_user_or_node, with_user",
      "10: from vantage6.server.resource import ServicesResources",
      "11: from vantage6.server.resource.common.pagination import Pagination",
      "14: from vantage6.server import db",
      "15: from vantage6.server.resource.common.output_schema import NodeSchema",
      "16: from vantage6.server.resource.common.input_schema import NodeInputSchema",
      "",
      "[Removed Lines]",
      "12: from vantage6.server.permission import (Scope as S,",
      "13:                                         Operation as P, PermissionManager)",
      "",
      "[Added Lines]",
      "12: from vantage6.server.permission import (",
      "13:     RuleCollection, Scope as S, Operation as P, PermissionManager",
      "14: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:     add = permissions.appender(module_name)",
      "69:     add(scope=S.GLOBAL, operation=P.VIEW, description=\"view any node\")",
      "70:     add(scope=S.ORGANIZATION, operation=P.VIEW, assign_to_container=True,",
      "71:         description=\"view your own node info\", assign_to_node=True)",
      "73:     add(scope=S.GLOBAL, operation=P.EDIT, description=\"edit any node\")",
      "74:     add(scope=S.ORGANIZATION, operation=P.EDIT,",
      "75:         description=\"edit node that is part of your organization\",",
      "76:         assign_to_node=True)",
      "78:     add(scope=S.GLOBAL, operation=P.CREATE,",
      "79:         description=\"create node for any organization\")",
      "80:     add(scope=S.ORGANIZATION, operation=P.CREATE,",
      "81:         description=\"create new node for your organization\")",
      "83:     add(scope=S.GLOBAL, operation=P.DELETE, description=\"delete any node\")",
      "84:     add(scope=S.ORGANIZATION, operation=P.DELETE,",
      "85:         description=\"delete node that is part of your organization\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:     add(scope=S.COLLABORATION, operation=P.VIEW,",
      "72:         description=\"view any node in your collaborations\")",
      "77:     add(scope=S.COLLABORATION, operation=P.EDIT,",
      "78:         description=\"edit any node in your collaborations\")",
      "85:     add(scope=S.COLLABORATION, operation=P.CREATE,",
      "86:         description=\"create node for any organization in your collaborations\")",
      "91:     add(scope=S.COLLABORATION, operation=P.DELETE,",
      "92:         description=\"delete any node in your collaborations\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     def __init__(self, socketio, mail, api, permissions, config):",
      "98:         super().__init__(socketio, mail, api, permissions, config)",
      "102: class Nodes(NodeBase):",
      "",
      "[Removed Lines]",
      "99:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "108:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "115:             Description|\\n",
      "116:             |--|--|--|--|--|--|\\n",
      "117:             |Node|Global|View|\u274c|\u274c|View any node information|\\n",
      "118:             |Node|Organization|View|\u2705|\u2705|View node information for nodes that",
      "119:             belong to your organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:             |Node|Collaboration|View|\u274c|\u274c|View any node information for nodes",
      "128:             in your collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "196:         auth_org_id = self.obtain_organization_id()",
      "197:         args = request.args",
      "200:             if param in args:",
      "201:                 q = q.filter(getattr(db.Node, param) == args[param])",
      "202:         if 'name' in args:",
      "",
      "[Removed Lines]",
      "199:         for param in ['organization_id', 'collaboration_id', 'status', 'ip']:",
      "",
      "[Added Lines]",
      "210:         if 'organization_id' in args:",
      "211:             if not self.r.can_for_org(P.VIEW, args['organization_id']):",
      "212:                 return {",
      "213:                     'msg': 'You lack the permission view nodes from the '",
      "214:                     f'organization with id {args[\"organization_id\"]}!'",
      "215:                 }, HTTPStatus.UNAUTHORIZED",
      "216:             q = q.filter(db.Node.organization_id == args['organization_id'])",
      "218:         if 'collaboration_id' in args:",
      "219:             if not self.r.can_for_col(P.VIEW, args['collaboration_id']):",
      "220:                 return {",
      "221:                     'msg': 'You lack the permission view nodes from the '",
      "222:                     f'collaboration with id {args[\"collaboration_id\"]}!'",
      "223:                 }, HTTPStatus.UNAUTHORIZED",
      "224:             q = q.filter(db.Node.collaboration_id == args['collaboration_id'])",
      "226:         for param in ['status', 'ip']:",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "208:             q = q.filter(db.Node.last_seen >= args['last_seen_from'])",
      "210:         if not self.r.v_glo.can():",
      "212:                 # only the results of the user's organization are returned",
      "213:                 q = q.filter(db.Node.organization_id == auth_org_id)",
      "214:             else:",
      "",
      "[Removed Lines]",
      "211:             if self.r.v_org.can():",
      "",
      "[Added Lines]",
      "238:             if self.r.v_col.can():",
      "239:                 q = q.filter(db.Node.collaboration_id.in_(",
      "240:                     [col.id for col in self.obtain_auth_collaborations()]",
      "241:                 ))",
      "242:             elif self.r.v_org.can():",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "231:         \"\"\"Create node",
      "232:         ---",
      "233:         description: >-",
      "236:           The organization of the user needs to be within the collaboration.\\n",
      "238:           ### Permission Table\\n",
      "",
      "[Removed Lines]",
      "234:           Creates a new node-account belonging to a specific collaboration",
      "235:           which is specified in the POST body.\\n",
      "",
      "[Added Lines]",
      "265:           Creates a new node-account belonging to a specific organization and",
      "266:           collaboration which is specified in the POST body.\\n",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "240:           Description|\\n",
      "241:           |--|--|--|--|--|--|\\n",
      "242:           |Node|Global|Create|\u274c|\u274c|Create a new node account belonging to a",
      "244:           |Node|Organization|Create|\u274c|\u274c|Create a new node account belonging",
      "247:           Accessible to users.",
      "",
      "[Removed Lines]",
      "243:           specific collaboration|\\n",
      "245:           to a specific organization which is also part of the collaboration|\\n",
      "",
      "[Added Lines]",
      "274:           specific organization in any collaboration|\\n",
      "275:           |Node|Collaboration|Create|\u274c|\u274c|Create a new node account belonging",
      "276:           to a specific organization in your collaborations|\\n",
      "278:           to your organization|\\n",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "256:                     description: Collaboration id",
      "257:                   organization_id:",
      "258:                     type: integer",
      "261:                   name:",
      "262:                     type: string",
      "263:                     description: Human-readable name. If not provided a name",
      "266:         responses:",
      "267:           201:",
      "",
      "[Removed Lines]",
      "259:                     description: Organization id. If not provided, the user's",
      "260:                       organization is used",
      "264:                       is generated",
      "",
      "[Added Lines]",
      "292:                     description: Organization id. If not provided, this",
      "293:                       defaults to the organization of the user creating the",
      "294:                       node.",
      "298:                       is generated based on organization and collaboration",
      "299:                       name.",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "293:             return {\"msg\": f\"collaboration id={data['collaboration_id']} \"",
      "294:                     \"does not exist\"}, HTTPStatus.NOT_FOUND  # 404",
      "296:         # check permissions",
      "308:         # we need to check that the organization belongs to the",
      "309:         # collaboration",
      "",
      "[Removed Lines]",
      "297:         org_id = data.get(\"organization_id\", None)",
      "298:         user_org_id = g.user.organization.id",
      "299:         if not self.r.c_glo.can():",
      "300:             own = not org_id or org_id == user_org_id",
      "301:             if not (self.r.c_org.can() and own):",
      "302:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "303:                     HTTPStatus.UNAUTHORIZED",
      "304:             else:",
      "305:                 org_id = g.user.organization.id",
      "306:         organization = db.Organization.get(org_id or user_org_id)",
      "",
      "[Added Lines]",
      "331:         org_id = data[\"organization_id\"] \\",
      "332:             if data.get(\"organization_id\") is not None \\",
      "333:             else g.user.organization_id",
      "334:         organization = db.Organization.get(org_id)",
      "336:         # check that the organization exists",
      "337:         if not organization:",
      "338:             return {\"msg\": f\"organization id={org_id} does not exist\"}, \\",
      "339:                 HTTPStatus.NOT_FOUND",
      "342:         if not self.r.can_for_org(P.CREATE, org_id):",
      "343:             return {'msg': 'You lack the permission to do that!'}, \\",
      "344:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "359:           Description|\\n",
      "360:           |--|--|--|--|--|--|\\n",
      "361:           |Node|Global|View|\u274c|\u274c|View any node information|\\n",
      "362:           |Node|Organization|View|\u2705|\u2705|View node information for nodes that",
      "363:           belong to your organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "400:           |Node|Collaboration|View|\u274c|\u274c|View any node information for nodes",
      "401:           within your collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "367:         parameters:",
      "368:           - in: path",
      "370:             schema:",
      "371:               type: integer",
      "372:               minimum: 1",
      "",
      "[Removed Lines]",
      "369:             name: id",
      "",
      "[Added Lines]",
      "409:             name: id_",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "388:         \"\"\"",
      "389:         node = db.Node.get(id)",
      "390:         if not node:",
      "396:         # check permissions",
      "403:         return node_schema.dump(node, many=False), HTTPStatus.OK",
      "",
      "[Removed Lines]",
      "391:             return {'msg': f'Node id={id} is not found!'}, HTTPStatus.NOT_FOUND",
      "393:         # obtain authenticated model",
      "394:         auth = self.obtain_auth()",
      "397:         if not self.r.v_glo.can():",
      "398:             same_org = auth.organization.id == node.organization.id",
      "399:             if not (self.r.v_org.can() and same_org):",
      "400:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "401:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "431:             return {'msg': f'Node id={id} is not found!'}, \\",
      "432:                 HTTPStatus.NOT_FOUND",
      "435:         if not self.r.can_for_org(P.VIEW, node.organization_id):",
      "436:             return {'msg': 'You lack the permission to do that!'}, \\",
      "437:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "416:           Description|\\n",
      "417:           |--|--|--|--|--|--|\\n",
      "418:           |Node|Global|Delete|\u274c|\u274c|Delete a node|\\n",
      "419:           |Node|Organization|Delete|\u274c|\u274c|Delete a node that belongs to your",
      "420:           organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "455:           |Node|Collaboration|Delete|\u274c|\u274c|Delete a node that belongs to",
      "456:           one of the organizations in your collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "424:         parameters:",
      "425:           - in: path",
      "427:             schema:",
      "428:               type: integer",
      "429:               minimum: 1",
      "",
      "[Removed Lines]",
      "426:             name: id",
      "",
      "[Added Lines]",
      "464:             name: id_",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "447:         if not node:",
      "448:             return {\"msg\": f\"Node id={id} not found\"}, HTTPStatus.NOT_FOUND",
      "456:         node.delete()",
      "457:         return {\"msg\": f\"Successfully deleted node id={id}\"}, HTTPStatus.OK",
      "",
      "[Removed Lines]",
      "450:         if not self.r.d_glo.can():",
      "451:             own = node.organization == g.user.organization",
      "452:             if not (self.r.d_org.can() and own):",
      "453:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "454:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "488:         if not self.r.can_for_org(P.DELETE, node.organization_id):",
      "489:             return {'msg': 'You lack the permission to do that!'}, \\",
      "490:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "470:           Description|\\n",
      "471:           |--|--|--|--|--|--|\\n",
      "472:           |Node|Global|Edit|\u274c|\u274c|Update a node specified by id|\\n",
      "473:           |Node|Organization|Edit|\u274c|\u274c|Update a node specified by id which is",
      "474:           part of your organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "509:           |Node|Collaboration|Edit|\u274c|\u274c|Update a node specified by id which",
      "510:           is part of one of your collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "478:         parameters:",
      "479:           - in: path",
      "481:             schema:",
      "482:               type: integer",
      "483:             description: Node id",
      "",
      "[Removed Lines]",
      "480:             name: id",
      "",
      "[Added Lines]",
      "518:             name: id_",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "531:         if not node:",
      "532:             return {'msg': f'Node id={id} not found!'}, HTTPStatus.NOT_FOUND",
      "542:         # update fields",
      "543:         if 'name' in data:",
      "",
      "[Removed Lines]",
      "534:         auth = g.user or g.node",
      "536:         if not self.r.e_glo.can():",
      "537:             own = auth.organization.id == node.organization.id",
      "538:             if not (self.r.e_org.can() and own):",
      "539:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "540:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "572:         if not self.r.can_for_org(P.EDIT, node.organization_id):",
      "573:             return {'msg': 'You lack the permission to do that!'}, \\",
      "574:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "561:                         'not found!'}, HTTPStatus.NOT_FOUND",
      "562:             node.organization = organization",
      "564:         col_id = data.get('collaboration_id')",
      "565:         updated_col = col_id and col_id != node.collaboration.id",
      "566:         if updated_col:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598:         auth = self.obtain_auth()",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py": [
      "File: vantage6-server/vantage6/server/resource/organization.py -> vantage6-server/vantage6/server/resource/organization.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: from vantage6.server.permission import (",
      "12:     Scope as S,",
      "13:     Operation as P,",
      "15: )",
      "16: from vantage6.server.resource.common.input_schema import (",
      "17:     OrganizationInputSchema",
      "",
      "[Removed Lines]",
      "14:     PermissionManager",
      "",
      "[Added Lines]",
      "14:     PermissionManager,",
      "15:     RuleCollection",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:         description=\"edit any organization\")",
      "103:     add(scope=S.ORGANIZATION, operation=P.EDIT,",
      "104:         description=\"edit your own organization info\", assign_to_node=True)",
      "105:     add(scope=S.GLOBAL, operation=P.CREATE,",
      "106:         description=\"create a new organization\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:     add(scope=S.COLLABORATION, operation=P.EDIT,",
      "107:         description='edit collaborating organizations')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "118:     def __init__(self, socketio, mail, api, permissions, config):",
      "119:         super().__init__(socketio, mail, api, permissions, config)",
      "123: class Organizations(OrganizationBase):",
      "",
      "[Removed Lines]",
      "120:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "123:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "207:         if 'country' in args:",
      "208:             q = q.filter(db.Organization.country == args['country'])",
      "209:         if 'collaboration_id' in args:",
      "210:             q = q.join(db.Member).join(db.Collaboration)\\",
      "211:                  .filter(db.Collaboration.id == args['collaboration_id'])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:             # TODO we also need to check here if the user is part of the collab",
      "214:             if not self.r.can_for_col(P.VIEW, args['collaboration_id']):",
      "215:                 return {",
      "216:                     'msg': 'You lack the permission to get all organizations '",
      "217:                     'in your collaboration!'",
      "218:                 }, HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "220:             ).all()",
      "221:             g.session.commit()",
      "225:             org_ids = [o.id for col in collabs for o in col.organizations]",
      "226:             org_ids = list(set(org_ids + [auth_org.id]))",
      "",
      "[Removed Lines]",
      "223:             # list comprehension fetish, and add own organization in case",
      "224:             # this organization does not participate in any collaborations yet",
      "",
      "[Added Lines]",
      "232:             # filter orgs in own collaborations, and add own organization in",
      "233:             # case this organization does not participate in any collaborations",
      "234:             # yet",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "353:         tags: [\"Organization\"]",
      "354:         \"\"\"",
      "359:         # retrieve requested organization",
      "360:         req_org = db.Organization.get(id)",
      "361:         if not req_org:",
      "362:             return {'msg': f'Organization id={id} not found!'}, \\",
      "363:                 HTTPStatus.NOT_FOUND",
      "366:         # Check if auth has enough permissions",
      "383:             return {'msg': 'You do not have permission to do that!'}, \\",
      "384:                 HTTPStatus.UNAUTHORIZED",
      "386:     @only_for((\"user\", \"node\"))",
      "387:     def patch(self, id):",
      "388:         \"\"\"Update organization",
      "",
      "[Removed Lines]",
      "356:         # obtain organization of authenticated",
      "357:         auth_org = self.obtain_auth_organization()",
      "365:         accepted = False",
      "367:         if self.r.v_glo.can():",
      "368:             accepted = True",
      "369:         elif self.r.v_col.can():",
      "370:             # check if the organization is whithin a collaboration",
      "371:             for col in auth_org.collaborations:",
      "372:                 if req_org in col.organizations:",
      "373:                     accepted = True",
      "374:             # or that the organization is auths org",
      "375:             if req_org == auth_org:",
      "376:                 accepted = True",
      "377:         elif self.r.v_org.can():",
      "378:             accepted = auth_org == req_org",
      "380:         if accepted:",
      "381:             return org_schema.dump(req_org, many=False), HTTPStatus.OK",
      "382:         else:",
      "",
      "[Added Lines]",
      "373:         if not self.r.can_for_org(P.VIEW, id):",
      "377:         return org_schema.dump(req_org, many=False), HTTPStatus.OK",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "396:           |--|--|--|--|--|--|\\n",
      "397:           |Organization|Global|Edit|\u274c|\u274c|Update an organization with",
      "398:           specified id|\\n",
      "399:           |Organization|Organization|Edit|\u274c|\u274c|Update the organization that",
      "400:           the user is part of|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "392:           |Organization|Collaboration|Edit|\u274c|\u274c|Update an organization within",
      "393:           the collaboration the user is part of|\\n",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "442:             return {\"msg\": f\"Organization with id={id} not found\"}, \\",
      "443:                 HTTPStatus.NOT_FOUND",
      "450:             return {'msg': 'You lack the permission to do that!'}, \\",
      "451:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "445:         if not (",
      "446:             self.r.e_glo.can() or",
      "447:             (self.r.e_org.can() and g.user and id == g.user.organization.id) or",
      "448:             (self.r.e_org.can() and g.node and id == g.node.organization.id)",
      "449:         ):",
      "",
      "[Added Lines]",
      "440:         if not self.r.can_for_org(P.EDIT, id):",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py": [
      "File: vantage6-server/vantage6/server/resource/role.py -> vantage6-server/vantage6/server/resource/role.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: from vantage6.server import db",
      "11: from vantage6.server.resource import (",
      "12:     with_user,",
      "13:     ServicesResources",
      "14: )",
      "15: from vantage6.common import logger_name",
      "16: from vantage6.server.permission import (",
      "18: )",
      "19: from vantage6.server.model.rule import Operation, Scope",
      "20: from vantage6.server.resource.common.output_schema import RoleSchema, RuleSchema",
      "",
      "[Removed Lines]",
      "17:     PermissionManager",
      "",
      "[Added Lines]",
      "12:     get_org_ids_from_collabs,",
      "18:     PermissionManager,",
      "19:     RuleCollection,",
      "20:     Operation as P,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:     add = permissions.appender(module_name)",
      "88:     add(scope=Scope.GLOBAL, operation=Operation.VIEW,",
      "89:         description=\"View any role\")",
      "90:     add(scope=Scope.ORGANIZATION, operation=Operation.VIEW,",
      "91:         description=\"View the roles of your organization\")",
      "92:     add(scope=Scope.GLOBAL, operation=Operation.CREATE,",
      "93:         description=\"Create role for any organization\")",
      "94:     add(scope=Scope.ORGANIZATION, operation=Operation.CREATE,",
      "95:         description=\"Create role for your organization\")",
      "96:     add(scope=Scope.GLOBAL, operation=Operation.EDIT,",
      "97:         description=\"Edit any role\")",
      "98:     add(scope=Scope.ORGANIZATION, operation=Operation.EDIT,",
      "99:         description=\"Edit a role from your organization\")",
      "100:     add(scope=Scope.GLOBAL, operation=Operation.DELETE,",
      "102:     add(scope=Scope.ORGANIZATION, operation=Operation.DELETE,",
      "106: # -----------------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "101:         description=\"Delete any organization\")",
      "103:         description=\"Delete your organization\")",
      "",
      "[Added Lines]",
      "93:     add(scope=Scope.COLLABORATION, operation=Operation.VIEW,",
      "94:         description=\"View any role in your collaborations\")",
      "99:     add(scope=Scope.COLLABORATION, operation=Operation.CREATE,",
      "100:         description=\"Create role for any organization in your collaborations\")",
      "105:     add(scope=Scope.COLLABORATION, operation=Operation.EDIT,",
      "106:         description=\"Edit any role in your collaborations\")",
      "110:         description=\"Delete a role from any organization\")",
      "111:     add(scope=Scope.COLLABORATION, operation=Operation.DELETE,",
      "112:         description=\"Delete a role from any organization in your \"",
      "113:                     \"collaborations\")",
      "115:         description=\"Delete a role from your organization\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "116:     def __init__(self, socketio, mail, api, permissions, config):",
      "117:         super().__init__(socketio, mail, api, permissions, config)",
      "121: class Roles(RoleBase):",
      "",
      "[Removed Lines]",
      "118:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "130:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "135:             Description|\\n",
      "136:             |--|--|--|--|--|--|\\n",
      "137:             |Role|Global|View|\u274c|\u274c|View all roles|\\n",
      "138:             |Role|Organization|View|\u274c|\u274c|View roles that are part of your",
      "139:             organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150:             |Role|Collaboration|View|\u274c|\u274c|View all roles in your",
      "151:             collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "166:                 items:",
      "167:                   type: integer",
      "168:                   description: Organization id of which you want to get roles",
      "169:             - in: query",
      "170:               name: rule_id",
      "171:               schema:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:             - in: query",
      "184:               name: collaboration_id",
      "185:               schema:",
      "186:               type: integer",
      "187:               description: Collaboration id",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "214:         \"\"\"",
      "215:         q = g.session.query(db.Role)",
      "218:         args = request.args",
      "220:         # filter by organization ids (include root role if desired)",
      "221:         org_filters = args.getlist('organization_id')",
      "222:         if org_filters:",
      "223:             if 'include_root' in args and args['include_root']:",
      "224:                 q = q.filter(or_(",
      "225:                     db.Role.organization_id.in_(org_filters),",
      "227:                 ))",
      "228:             else:",
      "229:                 q = q.filter(db.Role.organization_id.in_(org_filters))",
      "231:         # filter by one or more names or descriptions",
      "232:         for param in ['name', 'description']:",
      "233:             filters = args.getlist(param)",
      "",
      "[Removed Lines]",
      "217:         auth_org_id = self.obtain_organization_id()",
      "226:                     db.Role.organization_id == None",
      "",
      "[Added Lines]",
      "236:         auth_org = self.obtain_auth_organization()",
      "242:             for org_id in org_filters:",
      "243:                 if not self.r.can_for_org(P.VIEW, org_id):",
      "244:                     return {",
      "245:                         'msg': 'You lack the permission view all roles from '",
      "246:                         f'organization {org_id}!'",
      "247:                     }, HTTPStatus.UNAUTHORIZED",
      "251:                     db.Role.organization_id.is_(None)",
      "256:         # filter by collaboration id",
      "257:         if 'collaboration_id' in args:",
      "258:             if not self.r.can_for_col(P.VIEW, args['collaboration_id']):",
      "259:                 return {",
      "260:                     'msg': 'You lack the permission view all roles from '",
      "261:                     f'collaboration {args[\"collaboration_id\"]}!'",
      "262:                 }, HTTPStatus.UNAUTHORIZED",
      "263:             org_ids = get_org_ids_from_collabs(g.user,",
      "264:                                                args['collaboration_id'])",
      "265:             if 'include_root' in args and args['include_root']:",
      "266:                 q = q.filter(or_(",
      "267:                     db.Role.organization_id.in_(org_ids),",
      "268:                     db.Role.organization_id.is_(None)",
      "269:                 ))",
      "270:             else:",
      "271:                 q = q.filter(db.Role.organization_id.in_(org_ids))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "239:         # find roles containing a specific rule",
      "240:         if 'rule_id' in args:",
      "241:             q = q.join(db.role_rule_association).join(db.Rule)\\",
      "242:                  .filter(db.Rule.id == args['rule_id'])",
      "244:         if 'user_id' in args:",
      "245:             q = q.join(db.Permission).join(db.User)\\",
      "246:                  .filter(db.User.id == args['user_id'])",
      "248:         if not self.r.v_glo.can():",
      "249:             own_role_ids = [role.id for role in g.user.roles]",
      "251:                 # allow user to view all roles of their organization and any",
      "252:                 # other roles they may have themselves, or default roles from",
      "253:                 # the root organization",
      "254:                 q = q.filter(or_(",
      "256:                         db.Role.id.in_(own_role_ids),",
      "258:                     ))",
      "259:             else:",
      "260:                 # allow users without permission to view only their own roles",
      "",
      "[Removed Lines]",
      "250:             if self.r.v_org.can():",
      "255:                         db.Role.organization_id == auth_org_id,",
      "257:                         db.Role.organization_id == None",
      "",
      "[Added Lines]",
      "283:             rule = db.Rule.get(args['rule_id'])",
      "284:             if not rule:",
      "285:                 return {'msg': f'Rule with id={args[\"rule_id\"]} does not '",
      "286:                         'exist!'}, HTTPStatus.BAD_REQUEST",
      "291:             user = db.User.get(args['user_id'])",
      "292:             if not user:",
      "293:                 return {'msg': f'User with id={args[\"user_id\"]} does not '",
      "294:                         'exist!'}, HTTPStatus.BAD_REQUEST",
      "295:             elif not self.r.can_for_org(P.VIEW, user.organization_id) and not \\",
      "296:                     g.user.id == user.id:",
      "297:                 return {",
      "298:                     'msg': 'You lack the permission view roles from the '",
      "299:                     f'organization that user id={user.id} belongs to!'",
      "300:                 }, HTTPStatus.UNAUTHORIZED",
      "306:             if self.r.v_col.can():",
      "307:                 q = q.filter(or_(",
      "308:                     db.Role.id.in_(own_role_ids),",
      "309:                     db.Role.organization_id.is_(None),",
      "310:                     db.Role.organization_id.in_(",
      "311:                         [",
      "312:                             org.id",
      "313:                             for col in self.obtain_auth_collaborations()",
      "314:                             for org in col.organizations",
      "315:                         ]",
      "316:                     )",
      "317:                 ))",
      "318:             elif self.r.v_org.can():",
      "323:                         db.Role.organization_id == auth_org.id,",
      "325:                         db.Role.organization_id.is_(None)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "282:           Description|\\n",
      "283:           |--|--|--|--|--|--|\\n",
      "284:           |Role|Global|Create|\u274c|\u274c|Create a role for any organization|\\n",
      "285:           |Role|Organization|Create|\u274c|\u274c|Create a role for your organization|\\n",
      "287:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "353:           |Role|Collaboration|Create|\u274c|\u274c|Create a role for organization in",
      "354:           your collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "356:                     'exist!'}, HTTPStatus.NOT_FOUND",
      "358:         # check if user is allowed to create this role",
      "361:             return {",
      "363:             }, HTTPStatus.UNAUTHORIZED",
      "368:         # create the actual role",
      "369:         role = db.Role(name=data.get(\"name\"),",
      "",
      "[Removed Lines]",
      "359:         if (not self.r.c_glo.can() and",
      "360:                 organization_id != g.user.organization_id):",
      "362:                 'msg': 'You cannot create roles for other organizations!'",
      "364:         elif not self.r.c_glo.can() and not self.r.c_org.can():",
      "365:             return {'msg': 'You lack the permission to create roles!'}, \\",
      "366:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "429:         if not self.r.can_for_org(P.CREATE, organization_id):",
      "431:                 'msg': 'You cannot create a role for this organization!'",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "388:           Description|\\n",
      "389:           |--|--|--|--|--|--|\\n",
      "390:           |Role|Global|View|\u274c|\u274c|View all roles|\\n",
      "391:           |Role|Organization|View|\u274c|\u274c|View roles that are part of your",
      "392:           organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "457:           |Role|Collaboration|View|\u274c|\u274c|View all roles for your",
      "458:           collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "420:                 HTTPStatus.NOT_FOUND",
      "422:         # check permissions. A user can always view their own roles",
      "429:         return role_schema.dump(role, many=False), HTTPStatus.OK",
      "",
      "[Removed Lines]",
      "423:         if not (self.r.v_glo.can() or role in g.user.roles):",
      "424:             if not (self.r.v_org.can()",
      "425:                     and role.organization == g.user.organization):",
      "426:                 return {\"msg\": \"You do not have permission to view this.\"},\\",
      "427:                      HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "491:         if not (",
      "492:             self.r.can_for_org(P.VIEW, role.organization_id) or",
      "493:             role in g.user.roles",
      "494:         ):",
      "495:             return {\"msg\": \"You do not have permission to view this.\"},\\",
      "496:                     HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "440:           Description|\\n",
      "441:           |--|--|--|--|--|--|\\n",
      "442:           |Role|Global|Edit|\u274c|\u274c|Update any role|\\n",
      "443:           |Role|Organization|Edit|\u274c|\u274c|Update a role from your organization|\\n",
      "445:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "512:           |Role|Collaboration|Edit|\u274c|\u274c|Update any role in your",
      "513:           collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "510:             }, HTTPStatus.BAD_REQUEST",
      "512:         # check permission of the user",
      "521:         # process patch",
      "522:         if 'name' in data:",
      "",
      "[Removed Lines]",
      "513:         if not self.r.e_glo.can():",
      "514:             if not self.r.e_org.can():",
      "515:                 return {'msg': 'You do not have permission to edit roles!'}, \\",
      "516:                     HTTPStatus.UNAUTHORIZED",
      "517:             elif g.user.organization_id != role.organization.id:",
      "518:                 return {'msg': 'You can\\'t edit roles from another '",
      "519:                         'organization'}, HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "584:         if not self.r.can_for_org(P.EDIT, role.organization_id):",
      "585:             return {'msg': 'You do not have permission to edit this role!'}, \\",
      "586:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "552:           Description|\\n",
      "553:           |--|--|--|--|--|--|\\n",
      "554:           |Role|Global|Delete|\u274c|\u274c|Delete any role|\\n",
      "555:           |Role|Organization|Delete|\u274c|\u274c|Delete a role in your organization|\\n",
      "557:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "622:           |Role|Collaboration|Delete|\u274c|\u274c|Delete any role in your",
      "623:           collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "574:         responses:",
      "575:           200:",
      "576:             description: Ok",
      "577:           401:",
      "578:             description: Unauthorized",
      "579:           404:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "646:           400:",
      "647:             description: Cannot delete default roles",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "589:             return {\"msg\": f\"Role with id={id} not found.\"}, \\",
      "590:                 HTTPStatus.NOT_FOUND",
      "600:         # check if role is assigned to users",
      "601:         if role.users:",
      "",
      "[Removed Lines]",
      "592:         if not self.r.d_glo.can():",
      "593:             if not self.r.d_org.can():",
      "594:                 return {'msg': 'You do not have permission to delete roles!'},\\",
      "595:                     HTTPStatus.UNAUTHORIZED",
      "596:             elif role.organization.id != g.user.organization.id:",
      "597:                 return {'msg': 'You can\\'t delete a role from another '",
      "598:                         'organization'}, HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "663:         if role.name in [role for role in DefaultRole]:",
      "664:             return {",
      "665:                 \"msg\": f\"This role ('{role.name}') is a default role. Default\"",
      "666:                        \" roles cannot be deleted.\"",
      "667:             }, HTTPStatus.BAD_REQUEST",
      "669:         if not self.r.can_for_org(P.DELETE, role.organization_id):",
      "670:             return {'msg': 'You do not have permission to delete this role!'},\\",
      "671:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "707:           Description|\\n",
      "708:           |--|--|--|--|--|--|\\n",
      "709:           |Role|Global|Edit|\u274c|\u274c|Edit any role|\\n",
      "710:           |Role|Organization|Edit|\u274c|\u274c|Edit any role in your organization|\\n",
      "712:           Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "783:           |Role|Collaboration|Edit|\u274c|\u274c|Edit any role in your collaborations",
      "784:           |\\n",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "747:                 HTTPStatus.NOT_FOUND",
      "749:         # check that this user can edit rules",
      "756:         # user needs to role to assign it",
      "757:         denied = self.permissions.check_user_rules([rule])",
      "",
      "[Removed Lines]",
      "750:         if not self.r.e_glo.can():",
      "751:             if not (self.r.e_org.can() and",
      "752:                     g.user.organization == role.organization):",
      "753:                 return {'msg': 'You lack permissions to do that'}, \\",
      "754:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "825:         if not self.r.can_for_org(P.EDIT, role.organization_id):",
      "826:             return {'msg': 'You lack permissions to do that'}, \\",
      "827:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "776:           |Rule name|Scope|Operation|Assigned to node|Assigned to container|",
      "777:           Description|\\n",
      "778:           |--|--|--|--|--|--|\\n",
      "781:           organization|\\n",
      "783:           Accessible to users.",
      "",
      "[Removed Lines]",
      "779:           |Role|Global|Delete|\u274c|\u274c|Delete any role rule|\\n",
      "780:           |Role|Organization|Delete|\u274c|\u274c|Delete any role rule in your",
      "",
      "[Added Lines]",
      "852:           |Role|Global|Edit|\u274c|\u274c|Delete any rule in a role|\\n",
      "853:           |Role|Collaboration|Edit|\u274c|\u274c|Delete any rule in roles in your",
      "854:           collaborations|\\n",
      "855:           |Role|Organization|Edit|\u274c|\u274c|Delete any rule in roles in your",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "813:             return {'msg': f'Rule id={rule_id} not found!'}, \\",
      "814:                 HTTPStatus.NOT_FOUND",
      "822:         # user needs to role to remove it",
      "823:         denied = self.permissions.check_user_rules([rule])",
      "",
      "[Removed Lines]",
      "816:         if not self.r.d_glo.can():",
      "817:             if not (self.r.d_org.can() and",
      "818:                     g.user.organization == role.organization):",
      "819:                 return {'msg': 'You lack permissions to do that'}, \\",
      "820:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "891:         if not self.r.can_for_org(P.EDIT, role.organization_id):",
      "892:             return {'msg': 'You lack permissions to do that'}, \\",
      "893:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/run.py||vantage6-server/vantage6/server/resource/run.py": [
      "File: vantage6-server/vantage6/server/resource/run.py -> vantage6-server/vantage6/server/resource/run.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: from vantage6.common import logger_name",
      "11: from vantage6.server import db",
      "12: from vantage6.server.permission import (",
      "13:     PermissionManager,",
      "14:     Scope as S,",
      "15:     Operation as P",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     RuleCollection,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88: def permissions(permissions: PermissionManager):",
      "89:     add = permissions.appender(module_name)",
      "94:         assign_to_node=True, description=\"view runs of your organizations \"",
      "95:         \"collaborations\")",
      "98: # ------------------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "91:     add(scope=S.GLOBAL, operation=P.VIEW,",
      "92:         description=\"view any run\")",
      "93:     add(scope=S.ORGANIZATION, operation=P.VIEW, assign_to_container=True,",
      "",
      "[Added Lines]",
      "92:     add(scope=S.GLOBAL, operation=P.VIEW, description=\"view any run\")",
      "93:     add(scope=S.COLLABORATION, operation=P.VIEW, assign_to_container=True,",
      "96:     add(scope=S.ORGANIZATION, operation=P.VIEW,",
      "97:         description=\"view any run of a task created by your organization\")",
      "98:     add(scope=S.OWN, operation=P.VIEW,",
      "99:         description=\"view any run of a task created by you\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "103:     def __init__(self, socketio, mail, api, permissions, config):",
      "104:         super().__init__(socketio, mail, api, permissions, config)",
      "108: class MultiRunBase(RunBase):",
      "109:     \"\"\"Base class for resources that return multiple runs or results\"\"\"",
      "112:         \"\"\"",
      "113:         Returns a query object that can be used to retrieve runs.",
      "",
      "[Removed Lines]",
      "105:         self.r = getattr(self.permissions, module_name)",
      "111:     def get_query_multiple_runs(self) -> Union[sa.orm.query.Query, tuple]:",
      "",
      "[Added Lines]",
      "109:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "115:     def get_query_multiple_runs(self) -> sa.orm.query.Query | tuple:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "124:         q = g.session.query(db_Run)",
      "126:         # relation filters",
      "131:         # date selections",
      "132:         for param in ['assigned', 'started', 'finished']:",
      "",
      "[Removed Lines]",
      "127:         for param in ['task_id', 'organization_id', 'port']:",
      "128:             if param in args:",
      "129:                 q = q.filter(getattr(db_Run, param) == args[param])",
      "",
      "[Added Lines]",
      "130:         if 'organization_id' in args:",
      "131:             if not self.r.can_for_org(P.VIEW, args['organization_id']):",
      "132:                 return {'msg': 'You lack the permission to view runs for '",
      "133:                         f'organization id={args[\"organization_id\"]}!'}, \\",
      "134:                     HTTPStatus.UNAUTHORIZED",
      "135:             q = q.filter(db_Run.organization_id == args['organization_id'])",
      "137:         if 'task_id' in args:",
      "138:             task = db.Task.get(args['task_id'])",
      "139:             if not task:",
      "140:                 return {'msg': f'Task id={args[\"task_id\"]} does not exist!'}, \\",
      "141:                     HTTPStatus.BAD_REQUEST",
      "142:             elif not self.r.can_for_org(P.VIEW, task.init_org_id) \\",
      "143:                     and not (self.r.v_own.can() and",
      "144:                              g.user.id == task.init_user_id):",
      "145:                 return {'msg': 'You lack the permission to view runs for '",
      "146:                         f'task id={args[\"task_id\"]}!'}, HTTPStatus.UNAUTHORIZED",
      "147:             q = q.filter(db_Run.task_id == args['task_id'])",
      "149:         if args.get('node_id'):",
      "150:             node = db.Node.get(args['node_id'])",
      "151:             if not node:",
      "152:                 return {'msg': f'Node id={args[\"node_id\"]} does not exist!'}, \\",
      "153:                     HTTPStatus.BAD_REQUEST",
      "154:             elif not self.r.can_for_col(P.VIEW, node.collaboration_id):",
      "155:                 return {'msg': 'You lack the permission to view runs for '",
      "156:                         f'node id={args[\"node_id\"]}!'}, HTTPStatus.UNAUTHORIZED",
      "157:             q = q.filter(db.Node.id == args.get('node_id'))\\",
      "158:                 .filter(db.Collaboration.id == db.Node.collaboration_id)",
      "161:         if 'port' in args:",
      "162:             q = q.filter(db_Run.port == args['port'])",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "139:         # custom filters",
      "140:         if args.get('state') == 'open':",
      "143:         q = q.join(Organization).join(Node).join(Task, db_Run.task)\\",
      "144:             .join(Collaboration)",
      "150:         # filter based on permissions",
      "151:         if not self.r.v_glo.can():",
      "153:                 col_ids = [col.id for col in auth_org.collaborations]",
      "154:                 q = q.filter(Collaboration.id.in_(col_ids))",
      "155:             else:",
      "156:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "157:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "141:             q = q.filter(db_Run.finished_at == None)",
      "146:         if args.get('node_id'):",
      "147:             q = q.filter(db.Node.id == args.get('node_id'))\\",
      "148:                 .filter(db.Collaboration.id == db.Node.collaboration_id)",
      "152:             if self.r.v_org.can():",
      "",
      "[Added Lines]",
      "174:             q = q.filter(db_Run.finished_at.is_(None))",
      "179:         if 'collaboration_id' in args:",
      "180:             if not self.r.can_for_col(P.VIEW, args['collaboration_id']):",
      "181:                 return {'msg': 'You lack the permission to view runs for '",
      "182:                         f'collaboration id={args[\"collaboration_id\"]}!'}, \\",
      "183:                     HTTPStatus.UNAUTHORIZED",
      "184:             q = q.filter(Collaboration.id == args['collaboration_id'])",
      "188:             if self.r.v_col.can():",
      "191:             elif self.r.v_org.can():",
      "192:                 q = q.filter(Organization.id == auth_org.id)",
      "193:             elif self.r.v_own.can():",
      "194:                 q = q.filter(Task.init_user_id == g.user.id)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "176:             Description|\\n",
      "177:             |--|--|--|--|--|--|\\n",
      "178:             |Run|Global|View|\u274c|\u274c|View any run|\\n",
      "180:             organization's collaborations|\\n",
      "182:             Accessible to users.",
      "",
      "[Removed Lines]",
      "179:             |Run|Organization|View|\u2705|\u2705|View the runs of your",
      "",
      "[Added Lines]",
      "219:             |Run|Collaboration|View|\u2705|\u2705|View the runs of your",
      "221:             |Run|Organization|View|\u274c|\u274c|View any run from a task created by",
      "222:             your organization|\\n",
      "223:             |Run|Own|View|\u274c|\u274c|View any run from a task created by you|\\n",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "192:               schema:",
      "193:                 type: integer",
      "194:               description: Organization id",
      "195:             - in: query",
      "196:               name: assigned_from",
      "197:               schema:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:             - in: query",
      "239:               name: collaboration_id",
      "240:               schema:",
      "241:                 type: integer",
      "242:               description: Collaboration id",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "295:             Description|\\n",
      "296:             |--|--|--|--|--|--|\\n",
      "297:             |Run|Global|View|\u274c|\u274c|View any result|\\n",
      "299:             organization's collaborations|\\n",
      "301:             Accessible to users.",
      "",
      "[Removed Lines]",
      "298:             |Run|Organization|View|\u2705|\u2705|View the results of your",
      "",
      "[Added Lines]",
      "346:             |Run|Collaboration|View|\u2705|\u2705|View the results of your",
      "348:             |Run|Organization|View|\u274c|\u274c|View any result from a task created",
      "349:             by your organization|\\n",
      "350:             |Run|Own|View|\u274c|\u274c|View any result from a task created by you|\\n",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "311:               schema:",
      "312:                 type: integer",
      "313:               description: Organization id",
      "314:             - in: query",
      "315:               name: assigned_from",
      "316:               schema:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "365:             - in: query",
      "366:               name: collaboration_id",
      "367:               schema:",
      "368:                 type: integer",
      "369:               description: Collaboration id",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "414:             An algorithm Run object, or a tuple with a message and HTTP error",
      "415:             code if the Run could not be retrieved",
      "416:         \"\"\"",
      "419:         run = db_Run.get(id)",
      "420:         if not run:",
      "421:             return {'msg': f'Run id={id} not found!'}, \\",
      "422:                 HTTPStatus.NOT_FOUND",
      "427:                     HTTPStatus.UNAUTHORIZED",
      "428:         return run",
      "",
      "[Removed Lines]",
      "417:         auth_org = self.obtain_auth_organization()",
      "423:         if not self.r.v_glo.can():",
      "424:             c_orgs = run.task.collaboration.organizations",
      "425:             if not (self.r.v_org.can() and auth_org in c_orgs):",
      "426:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "",
      "[Added Lines]",
      "478:         if not self.r.can_for_org(P.VIEW, run.task.init_org_id) \\",
      "479:                 and not (self.r.v_own.can() and",
      "480:                          run.task.init_user_id == g.user.id):",
      "481:             return {'msg': 'You lack the permission to do that!'}, \\",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "444:             Description|\\n",
      "445:             |--|--|--|--|--|--|\\n",
      "446:             |Run|Global|View|\u274c|\u274c|View any run|\\n",
      "450:             Accessible to users.",
      "",
      "[Removed Lines]",
      "447:             |Run|Organization|View|\u2705|\u2705|View the runs of your",
      "448:             organizations collaborations|\\n",
      "",
      "[Added Lines]",
      "502:             |Run|Collaboration|View|\u2705|\u2705|View the runs of your",
      "503:             organization's collaborations|\\n",
      "504:             |Run|Organization|View|\u274c|\u274c|View any run from a task created by",
      "505:             your organization|\\n",
      "506:             |Run|Own|View|\u274c|\u274c|View any run from a task created by you|\\n",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "600:             Description|\\n",
      "601:             |--|--|--|--|--|--|\\n",
      "602:             |Run|Global|View|\u274c|\u274c|View any result|\\n",
      "604:             organization's collaborations|\\n",
      "606:             Accessible to users.",
      "",
      "[Removed Lines]",
      "603:             |Run|Organization|View|\u2705|\u2705|View the results of your",
      "",
      "[Added Lines]",
      "661:             |Run|Collaboration|View|\u2705|\u2705|View the results of your",
      "663:             |Run|Organization|View|\u274c|\u274c|View any result from a task created",
      "664:             by your organization|\\n",
      "665:             |Run|Own|View|\u274c|\u274c|View any result from a task created by you|\\n",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py": [
      "File: vantage6-server/vantage6/server/resource/task.py -> vantage6-server/vantage6/server/resource/task.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: from vantage6.common.task_status import TaskStatus, has_task_finished",
      "12: from vantage6.server import db",
      "13: from vantage6.server.permission import (",
      "14:     Scope as S,",
      "15:     PermissionManager,",
      "16:     Operation as P",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:     RuleCollection,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     \"\"\"",
      "76:     add = permissions.appender(module_name)",
      "83:     add(scope=S.GLOBAL, operation=P.CREATE, description=\"create a new task\")",
      "85:         description=(",
      "86:             \"create a new task for collaborations in which your organization \"",
      "87:             \"participates with\"",
      "",
      "[Removed Lines]",
      "78:     add(scope=S.GLOBAL, operation=P.VIEW,",
      "79:         description=\"view any task\")",
      "80:     add(scope=S.ORGANIZATION, operation=P.VIEW, assign_to_container=True,",
      "81:         assign_to_node=True, description=\"view tasks of your organization\")",
      "84:     add(scope=S.ORGANIZATION, operation=P.CREATE,",
      "",
      "[Added Lines]",
      "79:     add(scope=S.GLOBAL, operation=P.VIEW, description=\"view any task\")",
      "80:     add(scope=S.COLLABORATION, operation=P.VIEW, assign_to_container=True,",
      "81:         assign_to_node=True, description=\"view tasks of your collaborations\")",
      "82:     add(scope=S.ORGANIZATION, operation=P.VIEW,",
      "83:         description=\"view tasks that your organization initiated\")",
      "84:     add(scope=S.OWN, operation=P.VIEW,",
      "85:         description=\"view tasks that you initiated\")",
      "88:     add(scope=S.COLLABORATION, operation=P.CREATE,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:     add(scope=S.GLOBAL, operation=P.DELETE,",
      "91:         description=\"delete a task\")",
      "92:     add(scope=S.ORGANIZATION, operation=P.DELETE,",
      "93:         description=(",
      "94:             \"delete a task from a collaboration in which your organization \"",
      "95:             \"participates with\"",
      "96:         ))",
      "99: # ------------------------------------------------------------------------------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:     add(scope=S.COLLABORATION, operation=P.DELETE,",
      "97:         description=\"delete a task from your collaborations\")",
      "103:     add(scope=S.OWN, operation=P.DELETE,",
      "104:         description=\"delete tasks that you created\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:     def __init__(self, socketio, mail, api, permissions, config):",
      "110:         super().__init__(socketio, mail, api, permissions, config)",
      "114: class Tasks(TaskBase):",
      "",
      "[Removed Lines]",
      "111:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "119:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "120:         # permissions for the run resource are also relevant for the task",
      "121:         # resource as they are sometimes included",
      "122:         self.r_run: RuleCollection = getattr(self.permissions, 'run')",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "125:           Description|\\n",
      "126:           |--|--|--|--|--|--|\\n",
      "127:           |Task|Global|View|\u274c|\u274c|View any task|\\n",
      "129:           \\n",
      "131:           Accessible to users.",
      "",
      "[Removed Lines]",
      "128:           |Task|Organization|View|\u2705|\u2705|View any task in your organization|",
      "",
      "[Added Lines]",
      "139:           |Task|Collaboration|View|\u2705|\u2705|View any task in your collaborations|",
      "141:           |Task|Organization|View|\u274c|\u274c|View any task that your organization",
      "142:           created|\\n",
      "143:           |Task|Own|View|\u274c|\u274c|View any task that you created|\\n",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "241:           200:",
      "242:             description: Ok",
      "243:           400:",
      "245:           401:",
      "246:             description: Unauthorized",
      "",
      "[Removed Lines]",
      "244:             description: Non-allowed parameter values",
      "",
      "[Added Lines]",
      "258:             description: Non-allowed or wrong parameter values",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "253:         q = g.session.query(db.Task)",
      "254:         args = request.args",
      "257:         auth_org_id = self.obtain_organization_id()",
      "259:         # check permissions and apply filter if neccassary",
      "260:         if not self.r.v_glo.can():",
      "262:                 q = q.join(db.Collaboration).join(db.Organization)\\",
      "263:                     .filter(db.Collaboration.organizations.any(id=auth_org_id))",
      "264:             else:",
      "265:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "266:                     HTTPStatus.UNAUTHORIZED",
      "273:         for param in ['name', 'image', 'description', 'status']:",
      "274:             if param in args:",
      "275:                 q = q.filter(getattr(db.Task, param).like(args[param]))",
      "276:         if 'run_id' in args:",
      "277:             q = q.join(db.Run).filter(db.Run.id == args['run_id'])",
      "278:         if 'database' in args:",
      "279:             q = q.join(db.TaskDatabase)\\",
      "280:                  .filter(db.TaskDatabase.database == args['database'])",
      "281:         if 'is_user_created' in args:",
      "282:             try:",
      "283:                 user_created = int(args['is_user_created'])",
      "",
      "[Removed Lines]",
      "256:         # obtain organization id",
      "261:             if self.r.v_org.can():",
      "268:         # filter based on arguments",
      "269:         for param in ['init_org_id', 'init_user_id', 'collaboration_id',",
      "270:                       'parent_id', 'job_id']:",
      "271:             if param in args:",
      "272:                 q = q.filter(getattr(db.Task, param) == args[param])",
      "",
      "[Added Lines]",
      "274:             if self.r.v_col.can():",
      "277:             elif self.r.v_org.can():",
      "278:                 q = q.join(db.Organization)\\",
      "279:                     .filter(db.Task.init_org_id == auth_org_id)",
      "280:             elif self.r.v_own.can():",
      "281:                 q = q.filter(db.Task.init_user_id == g.user.id)",
      "285:         # if results are included, check permissions on results",
      "286:         if self.is_included('results'):",
      "287:             max_scope_task = self.r.get_max_scope(P.VIEW)",
      "288:             if not self.r_run.has_at_least_scope(max_scope_task, P.VIEW):",
      "289:                 max_scope_run = self.r_run.get_max_scope(P.VIEW)",
      "290:                 return {",
      "291:                     'msg': 'You cannot view the results of all tasks, as you '",
      "292:                     f'are allowed to view tasks with scope {max_scope_task} '",
      "293:                     f'but you can only view results with scope {max_scope_run}'",
      "294:                 }, HTTPStatus.UNAUTHORIZED",
      "296:         if 'collaboration_id' in args:",
      "297:             if not self.r.can_for_col(P.VIEW, args['collaboration_id']):",
      "298:                 return {'msg': 'You lack the permission to view tasks '",
      "299:                         f'from collaboration {args[\"collaboration_id\"]}!'}, \\",
      "300:                     HTTPStatus.UNAUTHORIZED",
      "301:             q = q.join(db.Collaboration).filter(",
      "302:                 db.Collaboration.id == args['collaboration_id'])",
      "304:         if 'init_org_id' in args:",
      "305:             if not self.r.can_for_org(P.VIEW, args['init_org_id']):",
      "306:                 return {'msg': 'You lack the permission to view tasks '",
      "307:                         f'from organization id={args[\"init_org_id\"]}!'}, \\",
      "308:                     HTTPStatus.UNAUTHORIZED",
      "309:             q = q.filter(db.Task.init_org_id == args['init_org_id'])",
      "311:         if 'init_user_id' in args:",
      "312:             init_user = db.User.get(args['init_user_id'])",
      "313:             if not init_user:",
      "314:                 return {'msg': f'User id={args[\"init_user_id\"]} does not '",
      "315:                         'exist!'}, HTTPStatus.BAD_REQUEST",
      "316:             elif not self.r.can_for_org(P.VIEW, init_user.organization_id) \\",
      "317:                     and not (self.r.v_own.can() and g.user and",
      "318:                              init_user.id == g.user.id):",
      "319:                 return {'msg': 'You lack the permission to view tasks '",
      "320:                         f'from user id={args[\"init_user_id\"]}!'}, \\",
      "321:                     HTTPStatus.UNAUTHORIZED",
      "322:             q = q.filter(db.Task.init_user_id == args['init_user_id'])",
      "324:         if 'parent_id' in args:",
      "325:             parent = db.Task.get(args['parent_id'])",
      "326:             if not parent:",
      "327:                 return {'msg': f'Parent task id={args[\"parent_id\"]} does not '",
      "328:                         'exist!'}, HTTPStatus.BAD_REQUEST",
      "329:             elif not self.r.can_for_col(P.VIEW, parent.collaboration_id):",
      "330:                 return {'msg': 'You lack the permission to view tasks '",
      "331:                         'from the collaboration that the task with parent_id='",
      "332:                         f'{parent.collaboration_id} belongs to!'}, \\",
      "333:                     HTTPStatus.UNAUTHORIZED",
      "334:             q = q.filter(db.Task.parent_id == args['parent_id'])",
      "336:         if 'job_id' in args:",
      "337:             task_in_job = q.session.query(db.Task).filter(",
      "338:                 db.Task.job_id == args['job_id']).first()",
      "339:             if not task_in_job:",
      "340:                 return {'msg': f'Job id={args[\"job_id\"]} does not exist!'}, \\",
      "341:                     HTTPStatus.BAD_REQUEST",
      "342:             elif not self.r.can_for_col(P.VIEW, task_in_job.collaboration_id):",
      "343:                 return {'msg': 'You lack the permission to view tasks '",
      "344:                         'from the collaboration that the task with job_id='",
      "345:                         f'{task_in_job.collaboration_id} belongs to!'}, \\",
      "346:                     HTTPStatus.UNAUTHORIZED",
      "347:             q = q.filter(db.Task.job_id == args['job_id'])",
      "354:             run = db.Run.get(args['run_id'])",
      "355:             if not run:",
      "356:                 return {'msg': f'Run id={args[\"run_id\"]} does not exist!'}, \\",
      "357:                     HTTPStatus.BAD_REQUEST",
      "358:             elif not self.r.can_for_col(P.VIEW, run.collaboration_id):",
      "359:                 return {'msg': 'You lack the permission to view tasks '",
      "360:                         'from the collaboration that the run with id='",
      "361:                         f'{run.collaboration_id} belongs to!'}, \\",
      "362:                     HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "291:                     f\"'{args['is_user_created']}'. Should be an integer.\"",
      "292:                 )}, HTTPStatus.BAD_REQUEST",
      "294:         q = q.order_by(desc(db.Task.id))",
      "295:         # paginate tasks",
      "296:         try:",
      "297:             page = Pagination.from_query(query=q, request=request)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382:         # order to get latest task first",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "319:           Description|\\n",
      "320:           |--|--|--|--|--|--|\\n",
      "321:           |Task|Global|Create|\u274c|\u274c|Create a new task|\\n",
      "323:           collaboration in which your organization participates|\\n",
      "325:           ## Accessed as `User`\\n",
      "",
      "[Removed Lines]",
      "322:           |Task|Organization|Create|\u274c|\u2705|Create a new task for a specific",
      "",
      "[Added Lines]",
      "412:           |Task|Collaboration|Create|\u274c|\u2705|Create a new task for a specific",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "424:         image = data.get('image', '')",
      "426:         # verify permissions",
      "434:         elif g.container:",
      "435:             # verify that the container has permissions to create the task",
      "",
      "[Removed Lines]",
      "427:         if g.user:",
      "428:             if not self.r.c_glo.can():",
      "429:                 c_orgs = collaboration.organizations",
      "430:                 if not (self.r.c_org.can() and g.user.organization in c_orgs):",
      "431:                     return {'msg': 'You lack the permission to do that!'}, \\",
      "432:                         HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "517:         if g.user and not self.r.can_for_col(P.CREATE, collaboration.id):",
      "518:             return {'msg': 'You lack the permission to do that!'}, \\",
      "519:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "625:           Description|\\n",
      "626:           |--|--|--|--|--|--|\\n",
      "627:           |Task|Global|View|\u274c|\u274c|View any task|\\n",
      "630:           Accessible to users.",
      "",
      "[Removed Lines]",
      "628:           |Task|Organization|View|\u2705|\u2705|View any task in your organization|",
      "",
      "[Added Lines]",
      "715:           |Task|Collaboration|View|\u2705|\u2705|View any task in your collaborations|",
      "716:           |Task|Organization|View|\u274c|\u274c|View any task that your organization",
      "717:           created|\\n",
      "718:           |Task|Own|View|\u274c|\u274c|View any task that you created|\\n",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "659:         if not task:",
      "660:             return {\"msg\": f\"task id={id} is not found\"}, HTTPStatus.NOT_FOUND",
      "665:         # obtain schema",
      "666:         schema = task_result_schema if request.args.get('include') == \\",
      "667:             'results' else task_schema",
      "669:         # check permissions",
      "676:         return schema.dump(task, many=False), HTTPStatus.OK",
      "",
      "[Removed Lines]",
      "662:         # determine the organization to which the auth belongs",
      "663:         auth_org = self.obtain_auth_organization()",
      "670:         if not self.r.v_glo.can():",
      "671:             org_ids = [org.id for org in task.collaboration.organizations]",
      "672:             if not (self.r.v_org.can() and auth_org.id in org_ids):",
      "673:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "674:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "757:         if not self.r.can_for_org(P.VIEW, task.init_org_id) \\",
      "758:                 and not (self.r.v_own.can() and g.user and",
      "759:                          task.init_user_id == g.user.id):",
      "760:             return {'msg': 'You lack the permission to do that!'}, \\",
      "761:                 HTTPStatus.UNAUTHORIZED",
      "762:         # if results are included, check permissions for results",
      "763:         if self.is_included('results') and not \\",
      "764:                 self.r_run.can_for_org(P.VIEW, task.init_org_id) \\",
      "765:                 and not (self.r.v_own.can() and g.user and",
      "766:                          task.init_user_id == g.user.id):",
      "767:             return {'msg': 'You lack the permission to view results for this '",
      "768:                     'task!'}, HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "687:           Description|\\n",
      "688:           |--|--|--|--|--|--|\\n",
      "689:           |Task|Global|Delete|\u274c|\u274c|Delete a task|\\n",
      "691:           in which your organization participates|\\n",
      "693:           Accessible to users.",
      "",
      "[Removed Lines]",
      "690:           |Task|Organization|Delete|\u274c|\u274c|Delete a task from a collaboration",
      "",
      "[Added Lines]",
      "784:           |Task|Collaboration|Delete|\u274c|\u274c|Delete a task from a collaboration",
      "786:           |Task|Organization|Delete|\u274c|\u274c|Delete a task that your organization",
      "787:           initiated|\\n",
      "788:           |Task|Own|Delete|\u274c|\u274c|Delete a task you created yourself|\\n",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "717:         task = db.Task.get(id)",
      "718:         if not task:",
      "721:         # validate permissions",
      "728:         # kill the task if it is still running",
      "729:         if not has_task_finished(task.status):",
      "",
      "[Removed Lines]",
      "719:             return {\"msg\": f\"task id={id} not found\"}, HTTPStatus.NOT_FOUND",
      "722:         if not self.r.d_glo.can():",
      "723:             orgs = task.collaboration.organizations",
      "724:             if not (self.r.d_org.can() and g.user.organization in orgs):",
      "725:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "726:                     HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "816:             return {\"msg\": f\"Task id={id} not found\"}, HTTPStatus.NOT_FOUND",
      "819:         if not self.r.can_for_org(P.DELETE, task.init_org_id) and \\",
      "820:                 not (self.r.d_own.can() and task.init_user_id == g.user.id):",
      "821:             return {'msg': 'You lack the permission to do that!'}, \\",
      "822:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py": [
      "File: vantage6-server/vantage6/server/resource/user.py -> vantage6-server/vantage6/server/resource/user.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: from vantage6.server.permission import (",
      "12:     Scope as S,",
      "13:     Operation as P,",
      "15: )",
      "16: from vantage6.server.resource import (",
      "17:     with_user,",
      "18:     ServicesResources",
      "19: )",
      "",
      "[Removed Lines]",
      "14:     PermissionManager",
      "",
      "[Added Lines]",
      "14:     PermissionManager,",
      "15:     RuleCollection",
      "18:     get_org_ids_from_collabs,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:     add = permissions.appender(module_name)",
      "74:     add(S.GLOBAL, P.VIEW,",
      "75:         description='View any user')",
      "76:     add(S.ORGANIZATION, P.VIEW,",
      "77:         description='View users from your organization')",
      "78:     add(S.GLOBAL, P.CREATE,",
      "79:         description='Create a new user for any organization')",
      "80:     add(S.ORGANIZATION, P.CREATE,",
      "81:         description='Create a new user for your organization')",
      "84:     add(S.ORGANIZATION, P.EDIT,",
      "85:         description='Edit users from your organization')",
      "86:     add(S.OWN, P.EDIT,",
      "87:         description='Edit your own info')",
      "90:     add(S.ORGANIZATION, P.DELETE,",
      "91:         description='Delete users from your organization')",
      "92:     add(S.OWN, P.DELETE,",
      "",
      "[Removed Lines]",
      "82:     add(S.GLOBAL, P.EDIT,",
      "83:         description='Edit any user')",
      "88:     add(S.GLOBAL, P.DELETE,",
      "89:         description='Delete any user')",
      "",
      "[Added Lines]",
      "78:     add(S.COLLABORATION, P.VIEW,",
      "79:         description='View users from your collaboration')",
      "84:     add(S.COLLABORATION, P.CREATE,",
      "85:         description='Create a new user for organizations in your '",
      "86:                     'collaborations')",
      "89:     add(S.GLOBAL, P.EDIT, description='Edit any user')",
      "90:     add(S.COLLABORATION, P.EDIT,",
      "91:         description='Edit any user in your collaborations')",
      "96:     add(S.GLOBAL, P.DELETE, description='Delete any user')",
      "97:     add(S.COLLABORATION, P.DELETE,",
      "98:         description='Delete any user in your collaborations')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "105:     def __init__(self, socketio, mail, api, permissions, config):",
      "106:         super().__init__(socketio, mail, api, permissions, config)",
      "110: class Users(UserBase):",
      "",
      "[Removed Lines]",
      "107:         self.r = getattr(self.permissions, module_name)",
      "",
      "[Added Lines]",
      "116:         self.r: RuleCollection = getattr(self.permissions, module_name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:             Description|\\n",
      "122:             |--|--|--|--|--|--|\\n",
      "123:             |User|Global|View|\u274c|\u274c|View any user details|\\n",
      "124:             |User|Organization|View|\u274c|\u274c|View users from your organization|\\n",
      "126:             Accessible to users.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:             |User|Collaboration|View|\u274c|\u274c|View user details from your",
      "134:             collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "140:             schema:",
      "141:               type: integer",
      "142:             description: Organization id",
      "143:           - in: query",
      "144:             name: firstname",
      "145:             schema:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "154:           - in: query",
      "155:             name: collaboration_id",
      "156:             schema:",
      "157:               type: integer",
      "158:             description: Collaboration id",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "210:             description: Ok",
      "211:           401:",
      "212:             description: Unauthorized",
      "214:         security:",
      "215:             - bearerAuth: []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "229:           400:",
      "230:             description: Invalid values provided for request parameters",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "224:             if param in args:",
      "225:                 q = q.filter(getattr(db.User, param).like(args[param]))",
      "226:         if 'organization_id' in args:",
      "227:             q = q.filter(db.User.organization_id == args['organization_id'])",
      "228:         if 'last_seen_till' in args:",
      "229:             q = q.filter(db.User.last_seen <= args['last_seen_till'])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:             if not self.r.can_for_org(P.VIEW, args['organization_id']):",
      "246:                 return {",
      "247:                     'msg': 'You lack the permission view users from the '",
      "248:                     f'organization with id {args[\"organization_id\"]}!'",
      "249:                 }, HTTPStatus.UNAUTHORIZED",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "233:         # find users with a particulare role or rule assigned",
      "234:         if 'role_id' in args:",
      "235:             q = q.join(db.Permission).join(db.Role)\\",
      "236:                  .filter(db.Role.id == args['role_id'])",
      "237:         if 'rule_id' in args:",
      "238:             q = q.join(db.UserPermission).join(db.Rule)\\",
      "239:                  .filter(db.Rule.id == args['rule_id'])",
      "241:         # check permissions and apply filter if neccessary",
      "242:         if not self.r.v_glo.can():",
      "244:                 q = q.filter(db.User.organization_id == g.user.organization_id)",
      "245:             else:",
      "246:                 return {'msg': 'You lack the permission to do that!'}, \\",
      "",
      "[Removed Lines]",
      "243:             if self.r.v_org.can():",
      "",
      "[Added Lines]",
      "258:             role = db.Role.query.get(args['role_id'])",
      "259:             if not role:",
      "260:                 return {",
      "261:                     'msg': f'Role with id={args[\"role_id\"]} does not exist!'",
      "262:                 }, HTTPStatus.BAD_REQUEST",
      "263:             elif not self.r.can_for_org(P.VIEW, role.organization_id):",
      "264:                 return {",
      "265:                     'msg': 'You lack the permission view users from the '",
      "266:                     f'organization that role with id={role.organization_id} '",
      "267:                     'belongs to!'",
      "268:                 }, HTTPStatus.UNAUTHORIZED",
      "273:             rule = db.Rule.query.get(args['rule_id'])",
      "274:             if not rule:",
      "275:                 return {",
      "276:                     'msg': f'Rule with id={args[\"rule_id\"]} does not exist!'",
      "277:                 }, HTTPStatus.BAD_REQUEST",
      "281:         if 'collaboration_id' in args:",
      "282:             if not self.r.can_for_col(P.VIEW, args['collaboration_id']):",
      "283:                 return {",
      "284:                     'msg': 'You lack the permission view all users from '",
      "285:                     f'collaboration {args[\"collaboration_id\"]}!'",
      "286:                 }, HTTPStatus.UNAUTHORIZED",
      "287:             q = q.filter(db.User.organization_id.in_(",
      "288:                 get_org_ids_from_collabs(g.user, args['collaboration_id'])",
      "289:             ))",
      "293:             if self.r.v_col.can():",
      "294:                 q = q.filter(db.User.organization_id.in_(",
      "295:                     [org.id",
      "296:                      for col in g.user.organization.collaborations",
      "297:                      for org in col.organizations]",
      "298:                 ))",
      "299:             elif self.r.v_org.can():",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "267:           Description|\\n",
      "268:           |--|--|--|--|--|--|\\n",
      "269:           |User|Global|Create|\u274c|\u274c|Create a new user|\\n",
      "270:           |User|Organization|Create|\u274c|\u274c|Create a new user as part of your",
      "271:           organization|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "326:           |User|Collaboration|Create|\u274c|\u274c|Create a new user for any",
      "327:           organization in your collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "346:                     if not org:",
      "347:                         return {'msg': \"Organization does not exist.\"}, \\",
      "348:                             HTTPStatus.NOT_FOUND",
      "352:             organization_id = data['organization_id']",
      "354:         # check that user is allowed to create users",
      "356:             return {'msg': 'You lack the permission to do that!'}, \\",
      "357:                 HTTPStatus.UNAUTHORIZED",
      "",
      "[Removed Lines]",
      "349:                 else:  # not-root user cant create users for other organization",
      "350:                     return {'msg': 'You lack the permission to do that!'}, \\",
      "351:                         HTTPStatus.UNAUTHORIZED",
      "355:         if not (self.r.c_glo.can() or self.r.c_org.can()):",
      "",
      "[Added Lines]",
      "410:         if not self.r.can_for_org(P.CREATE, organization_id):",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "425:             Description|\\n",
      "426:             |-- |--|--|--|--|--|\\n",
      "427:             |User|Global|View|\u274c|\u274c|View any user details|\\n",
      "428:             |User|Organization|View|\u274c|\u274c|View users from your",
      "429:             organization|\\n",
      "430:             |User|Organization|Own|\u274c|\u274c|View details about your own user|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "483:             |User|Collaboration|View|\u274c|\u274c|View users from your",
      "484:             collaborations|\\n",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "457:             return {\"msg\": f\"user id={id} is not found\"}, HTTPStatus.NOT_FOUND",
      "459:         same_user = g.user.id == user.id",
      "471:             return user_schema.dump(user, many=False), HTTPStatus.OK",
      "472:         else:",
      "473:             return {'msg': 'You lack the permission to do that!'}, \\",
      "",
      "[Removed Lines]",
      "460:         same_org = g.user.organization.id == user.organization_id",
      "462:         # allow user to be returned if:",
      "463:         # 1. auth can see all users",
      "464:         # 2. auth can see organization users and user is within organization",
      "465:         # 3. auth is requesting own user details",
      "466:         if (",
      "467:             self.r.v_glo.can() or",
      "468:             (self.r.v_org.can() and same_org) or",
      "469:             same_user",
      "470:         ):",
      "",
      "[Added Lines]",
      "518:         # allow user to be returned if authenticated user can view users from",
      "519:         # that organization or if the user is the same as the authenticated",
      "520:         # user.",
      "521:         if (same_user or self.r.can_for_org(P.VIEW, user.organization_id)):",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "485:           Description|\\n",
      "486:           |--|--|--|--|--|--|\\n",
      "487:           |User|Global|Edit|\u274c|\u274c|Edit any user|\\n",
      "489:           |User|Own|Edit|\u274c|\u274c|Edit your own user account|\\n",
      "491:           Accessible to users.",
      "",
      "[Removed Lines]",
      "488:           |User|Organization|Edit|\u274c|\u274c|Edit any user in your organization|\\n",
      "",
      "[Added Lines]",
      "539:           |User|Collaboration|Edit|\u274c|\u274c|Edit users in your collaborations|\\n",
      "540:           |User|Organization|Edit|\u274c|\u274c|Edit users in your organization|\\n",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "557:             return {\"msg\": \"You cannot change your password here!\"}, \\",
      "558:                 HTTPStatus.BAD_REQUEST",
      "567:         if data.get(\"username\") is not None:",
      "568:             if user.username != data[\"username\"]:",
      "569:                 if db.User.exists(\"username\", data[\"username\"]):",
      "",
      "[Removed Lines]",
      "560:         if not self.r.e_glo.can():",
      "561:             if not (self.r.e_org.can() and user.organization ==",
      "562:                     g.user.organization):",
      "563:                 if not (self.r.e_own.can() and user == g.user):",
      "564:                     return {'msg': 'You lack the permission to do that!'}, \\",
      "565:                         HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "612:         # check permissions",
      "613:         if not (self.r.e_own.can() and user == g.user) and \\",
      "614:                 not self.r.can_for_org(P.EDIT, user.organization_id):",
      "615:             return {'msg': 'You lack the permission to do that!'}, \\",
      "616:                 HTTPStatus.UNAUTHORIZED",
      "618:         # update user and check for unique constraints",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "689:           Description|\\n",
      "690:           |--|--|--|--|--|--|\\n",
      "691:           |User|Global|Delete|\u274c|\u274c|Delete any user|\\n",
      "692:           |User|Organization|Delete|\u274c|\u274c|Delete users from your",
      "693:           organization|\\n",
      "694:           |User|Own|Delete|\u274c|\u274c|Delete your own account|\\n",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "744:           |User|Collaboration|Delete|\u274c|\u274c|Delete users from your",
      "745:           collaboration|\\n",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "727:             return {\"msg\": f\"user id={id} not found\"}, \\",
      "728:                 HTTPStatus.NOT_FOUND",
      "737:         # check if user created any tasks",
      "738:         if user.created_tasks:",
      "",
      "[Removed Lines]",
      "730:         if not self.r.d_glo.can():",
      "731:             if not (self.r.d_org.can() and user.organization ==",
      "732:                     g.user.organization):",
      "733:                 if not (self.r.d_own.can() and user == g.user):",
      "734:                     return {'msg': 'You lack the permission to do that!'}, \\",
      "735:                         HTTPStatus.UNAUTHORIZED",
      "",
      "[Added Lines]",
      "784:         if not (self.r.d_own.can() and user == g.user) and \\",
      "785:                 not self.r.can_for_org(P.DELETE, user.organization_id):",
      "786:             return {'msg': 'You lack the permission to do that!'}, \\",
      "787:                 HTTPStatus.UNAUTHORIZED",
      "",
      "---------------"
    ],
    "vantage6-server/vantage6/server/utils.py||vantage6-server/vantage6/server/utils.py": [
      "File: vantage6-server/vantage6/server/utils.py -> vantage6-server/vantage6/server/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from flask import g",
      "3: from vantage6.server import db",
      "6: def obtain_auth_collaborations() -> list[db.Collaboration]:",
      "7:     \"\"\"",
      "8:     Obtain the collaborations that the auth is part of.",
      "10:     Returns",
      "11:     -------",
      "12:     list[db.Collaboration]",
      "13:         List of collaborations",
      "14:     \"\"\"",
      "15:     if g.user:",
      "16:         return g.user.organization.collaborations",
      "17:     elif g.node:",
      "18:         return g.node.organization.collaborations",
      "19:     else:",
      "20:         return [db.Collaboration.get(g.container[\"collaboration_id\"])]",
      "23: def obtain_auth_organization() -> db.Organization:",
      "24:     \"\"\"",
      "25:     Obtain the organization model from the auth that is logged in.",
      "27:     Returns",
      "28:     -------",
      "29:     db.Organization",
      "30:         Organization model",
      "31:     \"\"\"",
      "32:     if g.user:",
      "33:         org_id = g.user.organization.id",
      "34:     elif g.node:",
      "35:         org_id = g.node.organization.id",
      "36:     else:",
      "37:         org_id = g.container[\"organization_id\"]",
      "38:     return db.Organization.get(org_id)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28c303675028513bc2f87be75be85e35bcb296e9",
      "candidate_info": {
        "commit_hash": "28c303675028513bc2f87be75be85e35bcb296e9",
        "repo": "vantage6/vantage6",
        "commit_url": "https://github.com/vantage6/vantage6/commit/28c303675028513bc2f87be75be85e35bcb296e9",
        "files": [
          "vantage6-server/vantage6/server/permission.py",
          "vantage6-server/vantage6/server/resource/__init__.py",
          "vantage6-server/vantage6/server/resource/node.py",
          "vantage6-server/vantage6/server/resource/organization.py",
          "vantage6-server/vantage6/server/resource/role.py",
          "vantage6-server/vantage6/server/resource/user.py"
        ],
        "message": "Updates to collaboration scope - implemented a few more endpoints and modified base functions to check permissions",
        "before_after_code_files": [
          "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
          "vantage6-server/vantage6/server/resource/__init__.py||vantage6-server/vantage6/server/resource/__init__.py",
          "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
          "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
          "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
          "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/vantage6/vantage6/pull/711"
        ],
        "olp_code_files": {
          "patch": [
            "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
            "vantage6-server/vantage6/server/resource/__init__.py||vantage6-server/vantage6/server/resource/__init__.py",
            "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
            "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
            "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py"
          ],
          "candidate": [
            "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
            "vantage6-server/vantage6/server/resource/__init__.py||vantage6-server/vantage6/server/resource/__init__.py",
            "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
            "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
            "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py"
          ]
        }
      },
      "candidate_diff": {
        "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py": [
          "File: vantage6-server/vantage6/server/permission.py -> vantage6-server/vantage6/server/permission.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from vantage6.server.model.rule import Rule, Operation, Scope",
          "11: from vantage6.server.model.base import DatabaseSessionManager",
          "12: from vantage6.server.model.organization import Organization",
          "13: from vantage6.common import logger_name",
          "15: module_name = logger_name(__name__)",
          "16: log = logging.getLogger(module_name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: from vantage6.server.model.collaboration import Collaboration",
          "16: from vantage6.server.resource import id_in_list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                 perms.append(perm)",
          "149:         return perms",
          "151:     def has_minimal_scope(self, operation: Operation,",
          "152:                           minimal_scope: Scope) -> bool:",
          "153:         \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     # TODO check if this function is still needed",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:         perms = self._get_relevant_perms(operation, minimal_scope)",
          "171:         return any([perm.can() for perm in perms])",
          "174: class PermissionManager:",
          "175:     \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     def can_for_collaboration(",
          "178:         self, operation: Operation, collaboration_id: int,",
          "179:         auth_collabs: list[Collaboration]",
          "180:     ) -> bool:",
          "181:         \"\"\"",
          "182:         Check if the user or node can perform the operation on a certain",
          "183:         collaboration",
          "185:         Parameters",
          "186:         ----------",
          "187:         operation: Operation",
          "188:             Operation to check if allowed",
          "189:         collaboration_id: int",
          "190:             Collaboration id on which the operation should be allowed",
          "191:         auth: Authenticatable",
          "192:             User or node that is performing the operation",
          "193:         \"\"\"",
          "194:         # check if the entity has global permission",
          "195:         global_perm = getattr(self, f'{operation.value}_{Scope.GLOBAL.value}')",
          "196:         if global_perm and global_perm.can():",
          "197:             return True",
          "199:         # check if the entity has collaboration permission and the subject",
          "200:         # collaboration is in the collaborations of the user/node",
          "201:         col_perm = getattr(self,",
          "202:                            f'{operation.value}_{Scope.COLLABORATION.value}')",
          "203:         if col_perm and col_perm.can() and \\",
          "204:                 id_in_list(collaboration_id, auth_collabs):",
          "205:             return True",
          "207:         # no permission found",
          "208:         return False",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/__init__.py||vantage6-server/vantage6/server/resource/__init__.py": [
          "File: vantage6-server/vantage6/server/resource/__init__.py -> vantage6-server/vantage6/server/resource/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from vantage6.common import logger_name",
          "19: from vantage6.server import db",
          "20: from vantage6.server.permission import PermissionManager",
          "21: from vantage6.server.resource.common.pagination import Page",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from vantage6.server.model.authenticatable import Authenticatable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:         \"\"\"",
          "152:         return db.Organization.get(cls.obtain_organization_id())",
          "155: # ------------------------------------------------------------------------------",
          "156: # Helper functions/decoraters ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     @staticmethod",
          "156:     def obtain_auth_collaborations() -> list[db.Collaboration]:",
          "157:         \"\"\"",
          "158:         Obtain the collaborations that the auth is part of.",
          "160:         Returns",
          "161:         -------",
          "162:         list[db.Collaboration]",
          "163:             List of collaborations",
          "164:         \"\"\"",
          "165:         if g.user:",
          "166:             return g.user.collaborations",
          "167:         elif g.node:",
          "168:             return g.node.collaborations",
          "169:         else:",
          "170:             return [db.Collaboration.get(g.container[\"collaboration_id\"])]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:     if dt:",
          "268:         return datetime.datetime.strptime(dt, '%Y-%m-%dT%H:%M:%S.%f')",
          "269:     return default",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: def id_in_list(id_: int, resource_list: list[db.Base], ) -> bool:",
          "291:     \"\"\"",
          "292:     Check if resource list contains a resource with a certain ID",
          "294:     Parameters",
          "295:     ----------",
          "296:     id_ : int",
          "297:         ID of the resource",
          "298:     resource_list : list[db.Base]",
          "299:         List of resources",
          "301:     Returns",
          "302:     -------",
          "303:     bool",
          "304:         True if resource is in list, False otherwise",
          "305:     \"\"\"",
          "306:     return any(r.id == id_ for r in resource_list)",
          "309: def get_org_ids_from_collabs(auth: Authenticatable,",
          "310:                              collab_id: int = None) -> list[int]:",
          "311:     \"\"\"",
          "312:     Get all organization ids from the collaborations the user or node is in.",
          "314:     Parameters",
          "315:     ----------",
          "316:     auth : Authenticatable",
          "317:         User or node",
          "318:     collab_id : int, optional",
          "319:         Collaboration id. If given, only return the organization ids of this",
          "320:         collaboration. If not given, return all organization ids of all",
          "321:         collaborations the user or node is in.",
          "323:     Returns",
          "324:     -------",
          "325:     list[int]",
          "326:         List of organization ids",
          "327:     \"\"\"",
          "328:     if collab_id:",
          "329:         return [",
          "330:             org.id",
          "331:             for col in auth.organization.collaborations",
          "332:             for org in col.organizations",
          "333:             if col.id == collab_id",
          "334:         ]",
          "335:     else:",
          "336:         return [",
          "337:             org.id",
          "338:             for col in auth.organization.collaborations",
          "339:             for org in col.organizations",
          "340:         ]",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py": [
          "File: vantage6-server/vantage6/server/resource/node.py -> vantage6-server/vantage6/server/resource/node.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from vantage6.server.resource import with_user_or_node, with_user",
          "11: from vantage6.server.resource import ServicesResources",
          "12: from vantage6.server.resource.common.pagination import Pagination",
          "15: from vantage6.server import db",
          "16: from vantage6.server.resource.common._schema import NodeSchema",
          "",
          "[Removed Lines]",
          "13: from vantage6.server.permission import (Scope as S,",
          "14:                                         Operation as P, PermissionManager)",
          "",
          "[Added Lines]",
          "13: from vantage6.server.permission import (",
          "14:     RuleCollection, Scope as S, Operation as P, PermissionManager",
          "15: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     add = permissions.appender(module_name)",
          "69:     add(scope=S.GLOBAL, operation=P.VIEW, description=\"view any node\")",
          "70:     add(scope=S.ORGANIZATION, operation=P.VIEW, assign_to_container=True,",
          "71:         description=\"view your own node info\", assign_to_node=True)",
          "73:     add(scope=S.GLOBAL, operation=P.EDIT, description=\"edit any node\")",
          "74:     add(scope=S.ORGANIZATION, operation=P.EDIT,",
          "75:         description=\"edit node that is part of your organization\",",
          "76:         assign_to_node=True)",
          "78:     add(scope=S.GLOBAL, operation=P.CREATE,",
          "79:         description=\"create node for any organization\")",
          "80:     add(scope=S.ORGANIZATION, operation=P.CREATE,",
          "81:         description=\"create new node for your organization\")",
          "83:     add(scope=S.GLOBAL, operation=P.DELETE, description=\"delete any node\")",
          "84:     add(scope=S.ORGANIZATION, operation=P.DELETE,",
          "85:         description=\"delete node that is part of your organization\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     add(scope=S.COLLABORATION, operation=P.VIEW,",
          "72:         description=\"view any node in your collaborations\")",
          "77:     add(scope=S.COLLABORATION, operation=P.EDIT,",
          "78:         description=\"edit any node in your collaborations\")",
          "85:     add(scope=S.COLLABORATION, operation=P.CREATE,",
          "86:         description=\"create node for any organization in your collaborations\")",
          "91:     add(scope=S.COLLABORATION, operation=P.DELETE,",
          "92:         description=\"delete any node in your collaborations\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     def __init__(self, socketio, mail, api, permissions, config):",
          "97:         super().__init__(socketio, mail, api, permissions, config)",
          "101: class Nodes(NodeBase):",
          "",
          "[Removed Lines]",
          "98:         self.r = getattr(self.permissions, module_name)",
          "",
          "[Added Lines]",
          "107:         self.r: RuleCollection = getattr(self.permissions, module_name)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:             Description|\\n",
          "115:             |--|--|--|--|--|--|\\n",
          "116:             |Node|Global|View|\u274c|\u274c|View any node information|\\n",
          "117:             |Node|Organization|View|\u2705|\u2705|View node information for nodes that",
          "118:             belong to your organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:             |Node|Collaboration|View|\u274c|\u274c|View any node information for nodes",
          "127:             in your collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193:         \"\"\"",
          "194:         q = g.session.query(db.Node)",
          "195:         auth_org_id = self.obtain_organization_id()",
          "196:         args = request.args",
          "199:             if param in args:",
          "200:                 q = q.filter(getattr(db.Node, param) == args[param])",
          "201:         if 'name' in args:",
          "",
          "[Removed Lines]",
          "198:         for param in ['organization_id', 'collaboration_id', 'status', 'ip']:",
          "",
          "[Added Lines]",
          "207:         auth = self.obtain_auth()",
          "210:         if 'organization_id' in args:",
          "211:             if not self.r.can_by_org(P.VIEW, args['organization_id'],",
          "212:                                      auth.organization):",
          "213:                 return {",
          "214:                     'msg': 'You lack the permission view nodes from the '",
          "215:                     f'organization with id {args[\"organization_id\"]}!'",
          "216:                 }, HTTPStatus.UNAUTHORIZED",
          "217:             q = q.filter(db.Node.organization_id == args['organization_id'])",
          "219:         if 'collaboration_id' in args:",
          "220:             if not self.r.can_for_collaboration(",
          "221:                 P.VIEW, args['collaboration_id'],",
          "222:                 self.obtain_auth_collaborations()",
          "223:             ):",
          "224:                 return {",
          "225:                     'msg': 'You lack the permission view nodes from the '",
          "226:                     f'collaboration with id {args[\"collaboration_id\"]}!'",
          "227:                 }, HTTPStatus.UNAUTHORIZED",
          "228:             q = q.filter(db.Node.collaboration_id == args['collaboration_id'])",
          "230:         for param in ['status', 'ip']:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230:         \"\"\"Create node",
          "231:         ---",
          "232:         description: >-",
          "235:           The organization of the user needs to be within the collaboration.\\n",
          "237:           ### Permission Table\\n",
          "",
          "[Removed Lines]",
          "233:           Creates a new node-account belonging to a specific collaboration",
          "234:           which is specified in the POST body.\\n",
          "",
          "[Added Lines]",
          "265:           Creates a new node-account belonging to a specific organization and",
          "266:           collaboration which is specified in the POST body.\\n",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239:           Description|\\n",
          "240:           |--|--|--|--|--|--|\\n",
          "241:           |Node|Global|Create|\u274c|\u274c|Create a new node account belonging to a",
          "243:           |Node|Organization|Create|\u274c|\u274c|Create a new node account belonging",
          "246:           Accessible to users.",
          "",
          "[Removed Lines]",
          "242:           specific collaboration|\\n",
          "244:           to a specific organization which is also part of the collaboration|\\n",
          "",
          "[Added Lines]",
          "274:           specific organization in any collaboration|\\n",
          "275:           |Node|Collaboration|Create|\u274c|\u274c|Create a new node account belonging",
          "276:           to a specific organization in your collaborations|\\n",
          "278:           to your organization|\\n",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:                     description: Collaboration id",
          "256:                   organization_id:",
          "257:                     type: integer",
          "259:                   name:",
          "260:                     type: str",
          "264:         responses:",
          "265:           201:",
          "",
          "[Removed Lines]",
          "258:                     description: Organization id",
          "261:                     description: Human-readable name, if not profided a name",
          "262:                       is generated",
          "",
          "[Added Lines]",
          "292:                     description: Organization id. If not provided, this",
          "293:                       defaults to the organization of the user creating the",
          "294:                       node.",
          "297:                     description: Human-readable name, if not provided a name",
          "298:                       is generated based on organization and collaboration",
          "299:                       name.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "292:             return {\"msg\": f\"collaboration id={data['collaboration_id']} \"",
          "293:                     \"does not exist\"}, HTTPStatus.NOT_FOUND  # 404",
          "295:         # check permissions",
          "307:         # we need to check that the organization belongs to the",
          "308:         # collaboration",
          "",
          "[Removed Lines]",
          "296:         org_id = data[\"organization_id\"]",
          "297:         user_org_id = g.user.organization.id",
          "298:         if not self.r.c_glo.can():",
          "299:             own = not org_id or org_id == user_org_id",
          "300:             if not (self.r.c_org.can() and own):",
          "301:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "302:                     HTTPStatus.UNAUTHORIZED",
          "303:             else:",
          "304:                 org_id = g.user.organization.id",
          "305:         organization = db.Organization.get(org_id or user_org_id)",
          "",
          "[Added Lines]",
          "332:         org_id = data[\"organization_id\"] if \"organization_id\" in data else \\",
          "333:             g.user.organization_id",
          "334:         organization = db.Organization.get(org_id)",
          "336:         # check that the organization exists",
          "337:         if not organization:",
          "338:             return {\"msg\": f\"organization id={org_id} does not exist\"}, \\",
          "339:                 HTTPStatus.NOT_FOUND",
          "342:         if not self.r.can_by_org(P.CREATE, org_id, g.user.organization):",
          "343:             return {'msg': 'You lack the permission to do that!'}, \\",
          "344:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "345: class Node(NodeBase):",
          "347:     @with_user_or_node",
          "349:         \"\"\"Get node",
          "350:         ---",
          "351:         description: >-",
          "",
          "[Removed Lines]",
          "348:     def get(self, id):",
          "",
          "[Added Lines]",
          "387:     def get(self, id_):",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "358:           Description|\\n",
          "359:           |--|--|--|--|--|--|\\n",
          "360:           |Node|Global|View|\u274c|\u274c|View any node information|\\n",
          "361:           |Node|Organization|View|\u2705|\u2705|View node information for nodes that",
          "362:           belong to your organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:           |Node|Collaboration|View|\u274c|\u274c|View any node information for nodes",
          "401:           within your collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "366:         parameters:",
          "367:           - in: path",
          "369:             schema:",
          "370:               type: integer",
          "371:               minimum: 1",
          "",
          "[Removed Lines]",
          "368:             name: id",
          "",
          "[Added Lines]",
          "409:             name: id_",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "386:         tags: [\"Node\"]",
          "387:         \"\"\"",
          "389:         if not node:",
          "392:         # obtain authenticated model",
          "393:         auth = self.obtain_auth()",
          "395:         # check permissions",
          "402:         return node_schema.dump(node, many=False).data, HTTPStatus.OK",
          "404:     @with_user",
          "406:         \"\"\"",
          "407:         Delete node",
          "408:         ---",
          "",
          "[Removed Lines]",
          "388:         node = db.Node.get(id)",
          "390:             return {'msg': f'Node id={id} is not found!'}, HTTPStatus.NOT_FOUND",
          "396:         if not self.r.v_glo.can():",
          "397:             same_org = auth.organization.id == node.organization.id",
          "398:             if not (self.r.v_org.can() and same_org):",
          "399:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "400:                     HTTPStatus.UNAUTHORIZED",
          "405:     def delete(self, id):",
          "",
          "[Added Lines]",
          "429:         node = db.Node.get(id_)",
          "431:             return {'msg': f'Node id={id_} is not found!'}, \\",
          "432:                 HTTPStatus.NOT_FOUND",
          "438:         if not self.r.can_by_org(P.VIEW, id_, auth.organization):",
          "439:             return {'msg': 'You lack the permission to do that!'}, \\",
          "440:                 HTTPStatus.UNAUTHORIZED",
          "445:     def delete(self, id_):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "415:           Description|\\n",
          "416:           |--|--|--|--|--|--|\\n",
          "417:           |Node|Global|Delete|\u274c|\u274c|Delete a node|\\n",
          "418:           |Node|Organization|Delete|\u274c|\u274c|Delete a node that belongs to your",
          "419:           organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:           |Node|Collaboration|Delete|\u274c|\u274c|Delete a node that belongs to",
          "459:           one of the organizations in your collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "423:         parameters:",
          "424:           - in: path",
          "426:             schema:",
          "427:               type: integer",
          "428:               minimum: 1",
          "",
          "[Removed Lines]",
          "425:             name: id",
          "",
          "[Added Lines]",
          "467:             name: id_",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "443:         tags: [\"Node\"]",
          "444:         \"\"\"",
          "446:         if not node:",
          "455:         node.delete()",
          "458:     @with_user_or_node",
          "460:         \"\"\"Update node",
          "461:         ---",
          "462:         description: >-",
          "",
          "[Removed Lines]",
          "445:         node = db.Node.get(id)",
          "447:             return {\"msg\": f\"Node id={id} not found\"}, HTTPStatus.NOT_FOUND",
          "449:         if not self.r.d_glo.can():",
          "450:             own = node.organization == g.user.organization",
          "451:             if not (self.r.d_org.can() and own):",
          "452:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "453:                     HTTPStatus.UNAUTHORIZED",
          "456:         return {\"msg\": f\"Successfully deleted node id={id}\"}, HTTPStatus.OK",
          "459:     def patch(self, id):",
          "",
          "[Added Lines]",
          "487:         node = db.Node.get(id_)",
          "489:             return {\"msg\": f\"Node id={id_} not found\"}, HTTPStatus.NOT_FOUND",
          "491:         if not self.r.can_by_org(P.DELETE, id_, g.user.organization):",
          "492:             return {'msg': 'You lack the permission to do that!'}, \\",
          "493:                 HTTPStatus.UNAUTHORIZED",
          "496:         return {\"msg\": f\"Successfully deleted node id={id_}\"}, HTTPStatus.OK",
          "499:     def patch(self, id_):",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "469:           Description|\\n",
          "470:           |--|--|--|--|--|--|\\n",
          "471:           |Node|Global|Edit|\u274c|\u274c|Update a node specified by id|\\n",
          "472:           |Node|Organization|Edit|\u274c|\u274c|Update a node specified by id which is",
          "473:           part of your organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:           |Node|Collaboration|Edit|\u274c|\u274c|Update a node specified by id which",
          "513:           is part of one of your collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "477:         parameters:",
          "478:           - in: path",
          "480:             schema:",
          "481:               type: integer",
          "482:             description: Node id",
          "",
          "[Removed Lines]",
          "479:             name: id",
          "",
          "[Added Lines]",
          "521:             name: id_",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "517:         tags: [\"Node\"]",
          "518:         \"\"\"",
          "520:         if not node:",
          "523:         auth = g.user or g.node",
          "531:         data = request.get_json()",
          "",
          "[Removed Lines]",
          "519:         node = db.Node.get(id)",
          "521:             return {'msg': f'Node id={id} not found!'}, HTTPStatus.NOT_FOUND",
          "525:         if not self.r.e_glo.can():",
          "526:             own = auth.organization.id == node.organization.id",
          "527:             if not (self.r.e_org.can() and own):",
          "528:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "529:                     HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "561:         node = db.Node.get(id_)",
          "563:             return {'msg': f'Node id={id_} not found!'}, HTTPStatus.NOT_FOUND",
          "567:         if not self.r.can_by_org(P.EDIT, id_, auth.organization):",
          "568:             return {'msg': 'You lack the permission to do that!'}, \\",
          "569:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py": [
          "File: vantage6-server/vantage6/server/resource/organization.py -> vantage6-server/vantage6/server/resource/organization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:         if 'country' in args:",
          "207:             q = q.filter(db.Organization.country == args['country'])",
          "208:         if 'collaboration_id' in args:",
          "210:                 return {",
          "211:                     'msg': 'You lack the permission to get all organizations '",
          "212:                     'in your collaboration!'",
          "",
          "[Removed Lines]",
          "209:             if not self.r.has_minimal_scope(P.VIEW, S.COLLABORATION):",
          "",
          "[Added Lines]",
          "209:             # TODO we also need to check here if the user is part of the collab",
          "210:             if not self.r.can_for_collaboration(",
          "211:                 P.VIEW, args['collaboration_id'],",
          "212:                 self.obtain_auth_collaborations()",
          "213:             ):",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py": [
          "File: vantage6-server/vantage6/server/resource/role.py -> vantage6-server/vantage6/server/resource/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from vantage6.server import db",
          "11: from vantage6.server.resource import (",
          "12:     with_user,",
          "13:     ServicesResources",
          "14: )",
          "15: from vantage6.common import logger_name",
          "16: from vantage6.server.permission import (",
          "18: )",
          "19: from vantage6.server.model.rule import Operation, Scope",
          "20: from vantage6.server.resource.common._schema import RoleSchema, RuleSchema",
          "",
          "[Removed Lines]",
          "17:     PermissionManager",
          "",
          "[Added Lines]",
          "12:     get_org_ids_from_collabs,",
          "18:     PermissionManager,",
          "19:     RuleCollection,",
          "20:     Operation as P,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     add = permissions.appender(module_name)",
          "87:     add(scope=Scope.GLOBAL, operation=Operation.VIEW,",
          "88:         description=\"View any role\")",
          "89:     add(scope=Scope.ORGANIZATION, operation=Operation.VIEW,",
          "90:         description=\"View the roles of your organization\")",
          "91:     add(scope=Scope.GLOBAL, operation=Operation.CREATE,",
          "92:         description=\"Create role for any organization\")",
          "93:     add(scope=Scope.ORGANIZATION, operation=Operation.CREATE,",
          "94:         description=\"Create role for your organization\")",
          "95:     add(scope=Scope.GLOBAL, operation=Operation.EDIT,",
          "96:         description=\"Edit any role\")",
          "97:     add(scope=Scope.ORGANIZATION, operation=Operation.EDIT,",
          "98:         description=\"Edit a role from your organization\")",
          "99:     add(scope=Scope.GLOBAL, operation=Operation.DELETE,",
          "101:     add(scope=Scope.ORGANIZATION, operation=Operation.DELETE,",
          "105: # -----------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "100:         description=\"Delete any organization\")",
          "102:         description=\"Delete your organization\")",
          "",
          "[Added Lines]",
          "92:     add(scope=Scope.COLLABORATION, operation=Operation.VIEW,",
          "93:         description=\"View any role in your collaborations\")",
          "98:     add(scope=Scope.COLLABORATION, operation=Operation.CREATE,",
          "99:         description=\"Create role for any organization in your collaborations\")",
          "104:     add(scope=Scope.COLLABORATION, operation=Operation.EDIT,",
          "105:         description=\"Edit any role in your collaborations\")",
          "109:         description=\"Delete a role from any organization\")",
          "110:     add(scope=Scope.COLLABORATION, operation=Operation.DELETE,",
          "111:         description=\"Delete a role from any organization in your \"",
          "112:                     \"collaborations\")",
          "114:         description=\"Delete a role from your organization\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     def __init__(self, socketio, mail, api, permissions, config):",
          "115:         super().__init__(socketio, mail, api, permissions, config)",
          "119: class Roles(RoleBase):",
          "",
          "[Removed Lines]",
          "116:         self.r = getattr(self.permissions, module_name)",
          "",
          "[Added Lines]",
          "128:         self.r: RuleCollection = getattr(self.permissions, module_name)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:             Description|\\n",
          "134:             |--|--|--|--|--|--|\\n",
          "135:             |Role|Global|View|\u274c|\u274c|View all roles|\\n",
          "136:             |Role|Organization|View|\u274c|\u274c|View roles that are part of your",
          "137:             organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:             |Role|Collaboration|View|\u274c|\u274c|View all roles in your",
          "149:             collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:                 items:",
          "165:                   type: integer",
          "166:                   description: Organization id of which you want to get roles",
          "167:             - in: query",
          "168:               name: rule_id",
          "169:               schema:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:             - in: query",
          "182:               name: collaboration_id",
          "183:               schema:",
          "184:               type: integer",
          "185:               description: Collaboration id",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:             if 'include_root' in args and args['include_root']:",
          "222:                 q = q.filter(or_(",
          "223:                     db.Role.organization_id.in_(org_filters),",
          "225:                 ))",
          "226:             else:",
          "227:                 q = q.filter(db.Role.organization_id.in_(org_filters))",
          "229:         # filter by one or more names or descriptions",
          "230:         for param in ['name', 'description']:",
          "231:             filters = args.getlist(param)",
          "",
          "[Removed Lines]",
          "224:                     db.Role.organization_id == None",
          "",
          "[Added Lines]",
          "243:                     db.Role.organization_id.is_(None)",
          "248:         # filter by collaboration id",
          "249:         if 'collaboration_id' in args:",
          "250:             if not self.r.can_for_collaboration(",
          "251:                 P.VIEW, args['collaboration_id'],",
          "252:                 self.obtain_auth_collaborations()",
          "253:             ):",
          "254:                 return {",
          "255:                     'msg': 'You lack the permission view all roles from '",
          "256:                     f'collaboration {args[\"collaboration_id\"]}!'",
          "257:                 }, HTTPStatus.UNAUTHORIZED",
          "258:             org_ids = get_org_ids_from_collabs(g.user,",
          "259:                                                args['collaboration_id'])",
          "260:             if 'include_root' in args and args['include_root']:",
          "261:                 q = q.filter(or_(",
          "262:                     db.Role.organization_id.in_(org_ids),",
          "263:                     db.Role.organization_id.is_(None)",
          "264:                 ))",
          "265:             else:",
          "266:                 q = q.filter(db.Role.organization_id.in_(org_ids))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "252:                 q = q.filter(or_(",
          "253:                         db.Role.organization_id == auth_org_id,",
          "254:                         db.Role.id.in_(own_role_ids),",
          "256:                     ))",
          "257:             else:",
          "258:                 # allow users without permission to view only their own roles",
          "",
          "[Removed Lines]",
          "255:                         db.Role.organization_id == None",
          "",
          "[Added Lines]",
          "294:                         db.Role.organization_id.is_(None)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "280:           Description|\\n",
          "281:           |--|--|--|--|--|--|\\n",
          "282:           |Role|Global|Create|\u274c|\u274c|Create a role for any organization|\\n",
          "283:           |Role|Organization|Create|\u274c|\u274c|Create a role for your organization|\\n",
          "285:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:           |Role|Collaboration|Create|\u274c|\u274c|Create a role for organization in",
          "323:           your collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "361:                     'exist!'}, HTTPStatus.NOT_FOUND",
          "363:         # check if user is allowed to create this role",
          "366:             return {",
          "368:             }, HTTPStatus.UNAUTHORIZED",
          "373:         # create the actual role",
          "374:         role = db.Role(name=data[\"name\"], description=data[\"description\"],",
          "",
          "[Removed Lines]",
          "364:         if (not self.r.c_glo.can() and",
          "365:                 organization_id != g.user.organization_id):",
          "367:                 'msg': 'You cannot create roles for other organizations!'",
          "369:         elif not self.r.c_glo.can() and not self.r.c_org.can():",
          "370:             return {'msg': 'You lack the permission to create roles!'}, \\",
          "371:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "405:         if not self.r.can_by_org(",
          "406:             P.CREATE, organization_id, g.user.organization",
          "407:         ):",
          "409:                 'msg': 'You cannot create a role for this organization!'",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "392:           Description|\\n",
          "393:           |--|--|--|--|--|--|\\n",
          "394:           |Role|Global|View|\u274c|\u274c|View all roles|\\n",
          "395:           |Role|Organization|View|\u274c|\u274c|View roles that are part of your",
          "396:           organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:           |Role|Collaboration|View|\u274c|\u274c|View all roles for your",
          "435:           collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "424:                 HTTPStatus.NOT_FOUND",
          "426:         # check permissions. A user can always view their own roles",
          "433:         return role_schema.dump(role, many=False).data, HTTPStatus.OK",
          "",
          "[Removed Lines]",
          "427:         if not (self.r.v_glo.can() or role in g.user.roles):",
          "428:             if not (self.r.v_org.can()",
          "429:                     and role.organization == g.user.organization):",
          "430:                 return {\"msg\": \"You do not have permission to view this.\"},\\",
          "431:                      HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "468:         if not (",
          "469:             self.r.can_by_org(P.VIEW, role.organization_id,",
          "470:                               g.user.organization) or",
          "471:             role in g.user.roles",
          "472:         ):",
          "473:             return {\"msg\": \"You do not have permission to view this.\"},\\",
          "474:                     HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "444:           Description|\\n",
          "445:           |--|--|--|--|--|--|\\n",
          "446:           |Role|Global|Edit|\u274c|\u274c|Update any role|\\n",
          "447:           |Role|Organization|Edit|\u274c|\u274c|Update a role from your organization|\\n",
          "449:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:           |Role|Collaboration|Edit|\u274c|\u274c|Update any role in your",
          "491:           collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "509:             }, HTTPStatus.BAD_REQUEST",
          "511:         # check permission of the user",
          "520:         # process patch",
          "521:         if 'name' in data:",
          "",
          "[Removed Lines]",
          "512:         if not self.r.e_glo.can():",
          "513:             if not self.r.e_org.can():",
          "514:                 return {'msg': 'You do not have permission to edit roles!'}, \\",
          "515:                     HTTPStatus.UNAUTHORIZED",
          "516:             elif g.user.organization_id != role.organization.id:",
          "517:                 return {'msg': 'You can\\'t edit roles from another '",
          "518:                         'organization'}, HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "557:         if not self.r.can_by_org(P.EDIT, role.organization_id,",
          "558:                                  g.user.organization):",
          "559:             return {'msg': 'You do not have permission to edit this role!'}, \\",
          "560:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "551:           Description|\\n",
          "552:           |--|--|--|--|--|--|\\n",
          "553:           |Role|Global|Delete|\u274c|\u274c|Delete any role|\\n",
          "554:           |Role|Organization|Delete|\u274c|\u274c|Delete a role in your organization|\\n",
          "556:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:           |Role|Collaboration|Delete|\u274c|\u274c|Delete any role in your",
          "597:           collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "567:         responses:",
          "568:           200:",
          "569:             description: Ok",
          "570:           401:",
          "571:             description: Unauthorized",
          "572:           404:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:           400:",
          "615:             description: Cannot delete default roles",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "582:             return {\"msg\": f\"Role with id={id} not found.\"}, \\",
          "583:                 HTTPStatus.NOT_FOUND",
          "593:         role.delete()",
          "",
          "[Removed Lines]",
          "585:         if not self.r.d_glo.can():",
          "586:             if not self.r.d_org.can():",
          "587:                 return {'msg': 'You do not have permission to delete roles!'},\\",
          "588:                     HTTPStatus.UNAUTHORIZED",
          "589:             elif role.organization.id != g.user.organization.id:",
          "590:                 return {'msg': 'You can\\'t delete a role from another '",
          "591:                         'organization'}, HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "631:         if role.name in [role for role in DefaultRole]:",
          "632:             return {",
          "633:                 \"msg\": f\"This role ('{role.name}') is a default role. Default\"",
          "634:                        \" roles cannot be deleted.\"",
          "635:             }, HTTPStatus.BAD_REQUEST",
          "637:         if not self.r.can_by_org(P.DELETE, role.organization_id,",
          "638:                                  g.user.organization):",
          "639:             return {'msg': 'You do not have permission to delete this role!'},\\",
          "640:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py": [
          "File: vantage6-server/vantage6/server/resource/user.py -> vantage6-server/vantage6/server/resource/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     RuleCollection",
          "16: )",
          "17: from vantage6.server.resource import (",
          "18:     with_user,",
          "19:     ServicesResources",
          "20: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:     get_org_ids_from_collabs,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:             schema:",
          "149:               type: integer",
          "150:             description: Organization id",
          "151:           - in: query",
          "152:             name: firstname",
          "153:             schema:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:           - in: query",
          "153:             name: collaboration_id",
          "154:             schema:",
          "155:               type: integer",
          "156:             description: Collaboration id",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:             q = q.join(db.UserPermission).join(db.Rule)\\",
          "253:                  .filter(db.Rule.id == args['rule_id'])",
          "258:         # check permissions and apply filter if neccessary",
          "259:         if not self.r.v_glo.can():",
          "",
          "[Removed Lines]",
          "255:         # TODO should we create an option to see all users of a collaboration?",
          "256:         # this could be achieved with the logic below for r.v_col()",
          "",
          "[Added Lines]",
          "261:         if 'collaboration_id' in args:",
          "262:             if not self.r.can_for_collaboration(",
          "263:                 P.VIEW, args['collaboration_id'],",
          "264:                 self.obtain_auth_collaborations()",
          "265:             ):",
          "266:                 return {",
          "267:                     'msg': 'You lack the permission view all users from '",
          "268:                     f'collaboration {args[\"collaboration_id\"]}!'",
          "269:                 }, HTTPStatus.UNAUTHORIZED",
          "270:             q = q.filter(db.User.organization_id.in_(",
          "271:                 get_org_ids_from_collabs(g.user, args['collaboration_id'])",
          "272:             ))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:           Description|\\n",
          "291:           |--|--|--|--|--|--|\\n",
          "292:           |User|Global|Create|\u274c|\u274c|Create a new user|\\n",
          "293:           |User|Organization|Create|\u274c|\u274c|Create a new user as part of your",
          "294:           organization|\\n",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:           |User|Collaboration|Create|\u274c|\u274c|Create a new user for any",
          "310:           organization in your collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:                     if not org:",
          "376:                         return {'msg': \"Organization does not exist.\"}, \\",
          "377:                             HTTPStatus.NOT_FOUND",
          "381:             organization_id = data['organization_id']",
          "383:         # check that user is allowed to create users",
          "385:             return {'msg': 'You lack the permission to do that!'}, \\",
          "386:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "378:                 else:  # not-root user cant create users for other organization",
          "379:                     return {'msg': 'You lack the permission to do that!'}, \\",
          "380:                         HTTPStatus.UNAUTHORIZED",
          "384:         if not (self.r.c_glo.can() or self.r.c_org.can()):",
          "",
          "[Added Lines]",
          "399:         if not self.r.can_by_org(P.CREATE, organization_id,",
          "400:                                  g.user.organization):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcd0f78349e1f1c0dbd189285d63370d1173f339",
      "candidate_info": {
        "commit_hash": "bcd0f78349e1f1c0dbd189285d63370d1173f339",
        "repo": "vantage6/vantage6",
        "commit_url": "https://github.com/vantage6/vantage6/commit/bcd0f78349e1f1c0dbd189285d63370d1173f339",
        "files": [
          "vantage6-server/vantage6/server/resource/collaboration.py",
          "vantage6-server/vantage6/server/resource/role.py"
        ],
        "message": "Added collaboration scope to double endpoints",
        "before_after_code_files": [
          "vantage6-server/vantage6/server/resource/collaboration.py||vantage6-server/vantage6/server/resource/collaboration.py",
          "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/vantage6/vantage6/pull/711"
        ],
        "olp_code_files": {
          "patch": [
            "vantage6-server/vantage6/server/resource/collaboration.py||vantage6-server/vantage6/server/resource/collaboration.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py"
          ],
          "candidate": [
            "vantage6-server/vantage6/server/resource/collaboration.py||vantage6-server/vantage6/server/resource/collaboration.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py"
          ]
        }
      },
      "candidate_diff": {
        "vantage6-server/vantage6/server/resource/collaboration.py||vantage6-server/vantage6/server/resource/collaboration.py": [
          "File: vantage6-server/vantage6/server/resource/collaboration.py -> vantage6-server/vantage6/server/resource/collaboration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "551:     def __init__(self, socketio, mail, api, permissions, config):",
          "552:         super().__init__(socketio, mail, api, permissions, config)",
          "555:     @only_for((\"node\", \"user\", \"container\"))",
          "556:     def get(self, id):",
          "",
          "[Removed Lines]",
          "553:         self.r = getattr(self.permissions, module_name)",
          "",
          "[Added Lines]",
          "553:         self.r: RuleCollection = getattr(self.permissions, module_name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:           |--|--|--|--|--|--|\\n",
          "640:           |Collaboration|Global|Edit|\u274c|\u274c|Add organization to a",
          "641:           collaboration|\\n\\n",
          "643:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Add organization to a",
          "643:           collaboration that your organization is already a member of|\\n\\n",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "679:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
          "681:         # verify permissions",
          "683:             return {'msg': 'You lack the permission to do that!'}, \\",
          "684:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "682:         if not self.r.e_glo.can():",
          "",
          "[Added Lines]",
          "684:         if not self.r.can_for_col(P.EDIT, collaboration.id,",
          "685:                                   self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "709:           |--|--|--|--|--|--|\\n",
          "710:           |Collaboration|Global|Edit|\u274c|\u274c|Remove an organization from an",
          "711:           existing collaboration|\\n\\n",
          "713:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Remove an organization from",
          "716:           an existing collaboration that your organization is a member of|\\n\\n",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "742:         # get collaboration from which organization should be removed",
          "743:         collaboration = db.Collaboration.get(id)",
          "744:         if not collaboration:",
          "746:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
          "748:         # get organization which should be deleted",
          "749:         data = request.get_json()",
          "750:         organization = db.Organization.get(data['id'])",
          "751:         if not organization:",
          "753:                 HTTPStatus.NOT_FOUND",
          "756:             return {'msg': 'You lack the permission to do that!'}, \\",
          "757:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "745:             return {\"msg\": f\"collaboration having collaboration_id={id} can \"",
          "752:             return {\"msg\": f\"organization with id={id} is not found\"}, \\",
          "755:         if not self.r.d_glo.can():",
          "",
          "[Added Lines]",
          "750:             return {\"msg\": f\"Collaboration with collaboration_id={id} can \"",
          "757:             return {\"msg\": f\"Organization with id={id} is not found\"}, \\",
          "760:         if not self.r.can_for_col(P.EDIT, collaboration.id,",
          "761:                                   self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "769:     def __init__(self, socketio, mail, api, permissions, config):",
          "770:         super().__init__(socketio, mail, api, permissions, config)",
          "773:     @with_user",
          "774:     def get(self, id):",
          "",
          "[Removed Lines]",
          "771:         self.r = getattr(self.permissions, module_name)",
          "",
          "[Added Lines]",
          "777:         self.r: RuleCollection = getattr(self.permissions, module_name)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "853:           |Rule name|Scope|Operation|Assigned to node|Assigned to container|",
          "854:           Description|\\n",
          "855:           |--|--|--|--|--|--|\\n",
          "858:           Accessible to users.",
          "",
          "[Removed Lines]",
          "856:           |Collaboration|Global|Create|\u274c|\u274c|Add node to collaboration|\\n",
          "",
          "[Added Lines]",
          "862:           |Collaboration|Global|Edit|\u274c|\u274c|Add node to collaboration|\\n",
          "863:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Add node to collaboration",
          "864:           that your organization is a member of|\\n",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "894:             return {\"msg\": f\"collaboration having collaboration_id={id} can \"",
          "895:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
          "898:             return {'msg': 'You lack the permission to do that!'}, \\",
          "899:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "897:         if not self.r.e_glo.can():",
          "",
          "[Added Lines]",
          "905:         if not self.r.can_for_col(P.EDIT, collaboration.id,",
          "906:                                   self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "924:           Description|\\n",
          "925:           |--|--|--|--|--|--|\\n",
          "926:           |Collaboration|Global|Edit|\u274c|\u274c|Remove node from collaboration|\\n",
          "928:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:           |Collaboration|Collaboration|Edit|\u274c|\u274c|Remove node from",
          "938:           collaboration that your organization is a member of|\\n",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "961:             return {\"msg\": f\"collaboration having collaboration_id={id} can \"",
          "962:                     \"not be found\"}, HTTPStatus.NOT_FOUND",
          "965:             return {'msg': 'You lack the permission to do that!'}, \\",
          "966:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "964:         if not self.r.e_glo.can():",
          "",
          "[Added Lines]",
          "976:         if not self.r.can_for_col(P.EDIT, collaboration.id,",
          "977:                                   self.obtain_auth_collaborations()):",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py": [
          "File: vantage6-server/vantage6/server/resource/role.py -> vantage6-server/vantage6/server/resource/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:           Description|\\n",
          "746:           |--|--|--|--|--|--|\\n",
          "747:           |Role|Global|Edit|\u274c|\u274c|Edit any role|\\n",
          "748:           |Role|Organization|Edit|\u274c|\u274c|Edit any role in your organization|\\n",
          "750:           Accessible to users.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:           |Role|Collaboration|Edit|\u274c|\u274c|Edit any role in your collaborations",
          "749:           |\\n",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "785:                 HTTPStatus.NOT_FOUND",
          "787:         # check that this user can edit rules",
          "794:         # user needs to role to assign it",
          "795:         denied = self.permissions.check_user_rules([rule])",
          "",
          "[Removed Lines]",
          "788:         if not self.r.e_glo.can():",
          "789:             if not (self.r.e_org.can() and",
          "790:                     g.user.organization == role.organization):",
          "791:                 return {'msg': 'You lack permissions to do that'}, \\",
          "792:                     HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "790:         if not self.r.can_for_org(P.EDIT, role.organization_id,",
          "791:                                   g.user.organization):",
          "792:             return {'msg': 'You lack permissions to do that'}, \\",
          "793:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:           |Rule name|Scope|Operation|Assigned to node|Assigned to container|",
          "816:           Description|\\n",
          "817:           |--|--|--|--|--|--|\\n",
          "820:           organization|\\n",
          "822:           Accessible to users.",
          "",
          "[Removed Lines]",
          "818:           |Role|Global|Delete|\u274c|\u274c|Delete any role rule|\\n",
          "819:           |Role|Organization|Delete|\u274c|\u274c|Delete any role rule in your",
          "",
          "[Added Lines]",
          "819:           |Role|Global|Edit|\u274c|\u274c|Delete any rule in a role|\\n",
          "820:           |Role|Collaboration|Edit|\u274c|\u274c|Delete any rule in roles in your",
          "821:           collaborations|\\n",
          "822:           |Role|Organization|Edit|\u274c|\u274c|Delete any rule in roles in your",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "852:             return {'msg': f'Rule id={rule_id} not found!'}, \\",
          "853:                 HTTPStatus.NOT_FOUND",
          "861:         # user needs to role to remove it",
          "862:         denied = self.permissions.check_user_rules([rule])",
          "",
          "[Removed Lines]",
          "855:         if not self.r.d_glo.can():",
          "856:             if not (self.r.d_org.can() and",
          "857:                     g.user.organization == role.organization):",
          "858:                 return {'msg': 'You lack permissions to do that'}, \\",
          "859:                     HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "858:         if not self.r.can_for_org(P.EDIT, role.organization_id,",
          "859:                                   g.user.organization):",
          "860:             return {'msg': 'You lack permissions to do that'}, \\",
          "861:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a077121cebac02a20d4885081f0947bb117b7a9e",
      "candidate_info": {
        "commit_hash": "a077121cebac02a20d4885081f0947bb117b7a9e",
        "repo": "vantage6/vantage6",
        "commit_url": "https://github.com/vantage6/vantage6/commit/a077121cebac02a20d4885081f0947bb117b7a9e",
        "files": [
          "vantage6-server/tests_server/test_resources.py",
          "vantage6-server/vantage6/server/resource/node.py",
          "vantage6-server/vantage6/server/resource/role.py"
        ],
        "message": "Extended unit tests with collaboration scope - and fixed some endpoint logic",
        "before_after_code_files": [
          "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
          "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
          "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/vantage6/vantage6/pull/711"
        ],
        "olp_code_files": {
          "patch": [
            "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
            "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py"
          ],
          "candidate": [
            "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
            "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py"
          ]
        }
      },
      "candidate_diff": {
        "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py": [
          "File: vantage6-server/tests_server/test_resources.py -> vantage6-server/tests_server/test_resources.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:         return headers",
          "211:     def paginated_list(",
          "213:     ) -> tuple[Response, list]:",
          "214:         \"\"\"",
          "215:         Get all resources of a list endpoint by browsing through all pages",
          "",
          "[Removed Lines]",
          "212:         self, url: str, headers: dict = None",
          "",
          "[Added Lines]",
          "212:         self, url: str, headers: dict = None, **kwargs",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:             The url of the list endpoint",
          "221:         headers: dict",
          "222:             The headers to use for the request",
          "224:         Returns",
          "225:         -------",
          "226:         tuple[flask.Response, list]",
          "227:             The response and the list of all resources",
          "228:         \"\"\"",
          "230:         links = result.json.get('links')",
          "231:         page = 1",
          "232:         json_data = result.json['data']",
          "233:         while links and links.get('next'):",
          "234:             page += 1",
          "235:             new_response = self.app.get(",
          "237:             )",
          "238:             json_data += new_response.json.get('data')",
          "239:             links = new_response.json.get('links')",
          "",
          "[Removed Lines]",
          "229:         result = self.app.get(url, headers=headers)",
          "236:                 links.get('next'), headers=headers",
          "",
          "[Added Lines]",
          "223:         kwargs: dict",
          "224:             Additional arguments to pass to the request",
          "231:         result = self.app.get(url, headers=headers, **kwargs)",
          "238:                 links.get('next'), headers=headers, **kwargs",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:         for field in expected_fields:",
          "617:             self.assertIn(field, body[0])",
          "619:     def test_create_role_as_root(self):",
          "620:         headers = self.login(\"root\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:     def test_view_role_permissions(self):",
          "622:         org = Organization()",
          "623:         other_org = Organization()",
          "624:         col = Collaboration(organizations=[org, other_org])",
          "625:         col.save()",
          "626:         org_outside_collab = Organization()",
          "627:         org_outside_collab.save()",
          "629:         # non-existing role",
          "630:         headers = self.login('root')",
          "631:         result = self.app.get(\"/api/role/9999\", headers=headers)",
          "632:         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)",
          "634:         # root user can view all roles",
          "635:         result, json_data = self.paginated_list('/api/user', headers=headers)",
          "636:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "637:         self.assertEqual(len(json_data), len(Role.get()))",
          "639:         role = Role(organization=org)",
          "640:         role.save()",
          "642:         # without permissions should allow you to view your own roles, which",
          "643:         # in this case is an empty list",
          "644:         headers = self.create_user_and_login()",
          "645:         result, json_data = self.paginated_list('/api/role', headers=headers)",
          "646:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "647:         self.assertEqual(len(json_data), 0)",
          "649:         # view roles of your organization",
          "650:         rule = Rule.get_by_(\"role\", Scope.ORGANIZATION, Operation.VIEW)",
          "651:         headers = self.create_user_and_login(org, rules=[rule])",
          "652:         result, json_data = self.paginated_list('/api/role', headers=headers)",
          "653:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "654:         # +3 for the root, container and node roles (other default roles are",
          "655:         # not generated for unit tests)",
          "656:         self.assertEqual(len(json_data), len(org.roles) + 3)",
          "658:         # view a single role of your organization",
          "659:         result = self.app.get(f'/api/role/{role.id}', headers=headers)",
          "660:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "662:         # check that user of other organization cannot view roles with",
          "663:         # organization scope",
          "664:         headers = self.create_user_and_login(other_org, rules=[rule])",
          "665:         result = self.app.get(",
          "666:             '/api/role', headers=headers, query_string={'organization_id': 1})",
          "667:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "669:         # user can view their own roles. This should always be possible",
          "670:         user = self.create_user(rules=[])",
          "671:         headers = self.login(user.username)",
          "672:         result = self.app.get('/api/role', headers=headers, query_string={",
          "673:             'user_id': user.id",
          "674:         })",
          "675:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "677:         # collaboration permission - in same collaboration with id",
          "678:         rule = Rule.get_by_(\"role\", Scope.COLLABORATION, Operation.VIEW)",
          "679:         headers = self.create_user_and_login(other_org, rules=[rule])",
          "680:         result = self.app.get(f\"/api/role/{role.id}\", headers=headers)",
          "681:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "683:         # collaboration permission - in same collaboration without id",
          "684:         result, json_data = self.paginated_list('/api/role', headers=headers)",
          "685:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "686:         # +3 for the root, container and node roles (other default roles are",
          "687:         # not generated for unit tests)",
          "688:         self.assertEqual(len(json_data), len([",
          "689:             role_ for org in col.organizations for role_ in org.roles",
          "690:         ]) + 3)",
          "692:         # collaboration permission - in different collaboration with id",
          "693:         headers = self.create_user_and_login(org_outside_collab, rules=[rule])",
          "694:         result = self.app.get(f\"/api/role/{role.id}\", headers=headers)",
          "695:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "697:         # collaboration permission - in different collaboration without id",
          "698:         result = self.app.get('/api/role', headers=headers,",
          "699:                               query_string={'collaboration_id': col.id})",
          "700:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "702:         # cleanup",
          "703:         org.delete()",
          "704:         other_org.delete()",
          "705:         org_outside_collab.delete()",
          "706:         col.delete()",
          "707:         role.delete()",
          "708:         user.delete()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1146:         result = self.app.get(f'/api/user/{user.id}', headers=headers)",
          "1147:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "1151:         org2 = Organization()",
          "1152:         org2.save()",
          "1154:         col.save()",
          "1155:         rule = Rule.get_by_(\"user\", scope=Scope.COLLABORATION,",
          "1156:                             operation=Operation.VIEW)",
          "1158:         result = self.app.get(f'/api/user/{user.id}', headers=headers)",
          "1159:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "1165:         result = self.app.get(f'/api/user/{user.id}', headers=headers)",
          "1166:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "1168:         # cleanup",
          "1169:         org.delete()",
          "1170:         org2.delete()",
          "1171:         org3.delete()",
          "1172:         col.delete()",
          "1173:         user.delete()",
          "",
          "[Removed Lines]",
          "1149:         # test inside the collaboration",
          "1150:         user = self.create_user(organization=org, rules=[])",
          "1153:         col = Collaboration(organizations=[org, org2])",
          "1157:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
          "1161:         # check outside the collaboration fails",
          "1162:         org3 = Organization()",
          "1163:         org3.save()",
          "1164:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "",
          "[Added Lines]",
          "1240:         # collaboration permission - view single user",
          "1243:         org3 = Organization()",
          "1244:         org3.save()",
          "1245:         col = Collaboration(organizations=[org2, org3])",
          "1247:         user = self.create_user(organization=org2, rules=[])",
          "1250:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "1254:         # collaboration permission - view list of users",
          "1255:         result = self.app.get('/api/user', headers=headers)",
          "1256:         self.assertEqual(result.status_code, HTTPStatus.OK)",
          "1257:         # expecting 2 users: 1 in org2 and the 1 in org3 which is logged in now",
          "1258:         self.assertEqual(len(result.json['data']), 2)",
          "1260:         # collaboration permission - viewing outside collaboration should fail",
          "1261:         org_outside_col = Organization()",
          "1262:         org_outside_col.save()",
          "1263:         headers = self.create_user_and_login(organization=org_outside_col,",
          "1264:                                              rules=[rule])",
          "1268:         # collaboration permission - viewing other collaborations should fail",
          "1269:         result = self.app.get('/api/user', headers=headers, query_string={",
          "1270:             'collaboration_id': col.id",
          "1271:         })",
          "1272:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "1278:         org_outside_col.delete()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2142:         results = self.app.delete(f\"/api/collaboration/{col.id}/organization\",",
          "2143:                                   headers=headers, json={'id': org.id})",
          "2144:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2150:         # removing organization from collaboration from outside the",
          "2151:         # collaboration should fail with collaboration permission",
          "",
          "[Removed Lines]",
          "2145:         print(results.json)",
          "2146:         print(type(results.json))",
          "2147:         print(results.json[0]['organizations'])",
          "2148:         self.assertEqual(results.json, [])",
          "",
          "[Added Lines]",
          "2252:         self.assertEqual(len(results.json), 1)  # one organization left",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2161:         # test removing organization from collaboration from within the",
          "2162:         # collaboration",
          "2164:         results = self.app.delete(f\"/api/collaboration/{col.id}/organization\",",
          "2165:                                   headers=headers, json={'id': org2.id})",
          "2166:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "",
          "[Removed Lines]",
          "2163:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
          "",
          "[Added Lines]",
          "2267:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2221:         org = Organization()",
          "2222:         org.save()",
          "2224:         col.save()",
          "2225:         node = Node(organization=org)",
          "2226:         node.save()",
          "2228:         # try non-existant collaboration",
          "2229:         headers = self.create_user_and_login()",
          "",
          "[Removed Lines]",
          "2223:         col = Collaboration(organizations=[org])",
          "",
          "[Added Lines]",
          "2327:         org2 = Organization()",
          "2328:         org2.save()",
          "2329:         col = Collaboration(organizations=[org, org2])",
          "2333:         node2 = Node(organization=org2)",
          "2334:         node2.save()",
          "2336:         org3 = Organization()",
          "2337:         org3.save()",
          "2338:         node3 = Node(organization=org3)",
          "2339:         node3.save()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2255:                                 headers=headers, json={'id': node.id})",
          "2256:         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)",
          "2258:         # cleanup",
          "2259:         node.delete()",
          "2261:     def test_delete_collaboration_node_permissions(self):",
          "2263:         org = Organization()",
          "2265:         node = Node(organization=org, collaboration=col)",
          "2266:         node.save()",
          "",
          "[Removed Lines]",
          "2264:         col = Collaboration(organizations=[org])",
          "",
          "[Added Lines]",
          "2371:         # adding new node to collaboration from an organization that is not",
          "2372:         # part of the collaboration should fail",
          "2373:         results = self.app.post(f'/api/collaboration/{col.id}/node',",
          "2374:                                 headers=headers, json={'id': node3.id})",
          "2375:         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)",
          "2377:         # test new node to collaboration from within the collaboration",
          "2378:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
          "2379:                             operation=Operation.EDIT)",
          "2380:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "2381:         results = self.app.post(f'/api/collaboration/{col.id}/node',",
          "2382:                                 headers=headers, json={'id': node2.id})",
          "2383:         self.assertEqual(results.status_code, HTTPStatus.CREATED)",
          "2385:         # adding new node to collaboration from outside collaboration should",
          "2386:         # fail with collaboration-scope permission",
          "2387:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "2388:         results = self.app.post(f'/api/collaboration/{col.id}/node',",
          "2389:                                 headers=headers, json={'id': node3.id})",
          "2390:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2394:         node2.delete()",
          "2395:         node3.delete()",
          "2396:         org.delete()",
          "2397:         org2.delete()",
          "2398:         org3.delete()",
          "2399:         col.delete()",
          "2404:         org2 = Organization()",
          "2405:         col = Collaboration(organizations=[org, org2])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2289:         results = self.app.delete(f'/api/collaboration/{col.id}/node',",
          "2290:                                   headers=headers, json={'id': node2.id})",
          "2291:         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)",
          "2294:         results = self.app.delete(f'/api/collaboration/{col.id}/node',",
          "2295:                                   headers=headers, json={'id': node.id})",
          "2296:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2298:         # cleanup",
          "2299:         node.delete()",
          "2300:         node2.delete()",
          "2302:     def test_view_collaboration_task_permissions_as_user(self):",
          "",
          "[Removed Lines]",
          "2293:         # delete a node!",
          "",
          "[Added Lines]",
          "2433:         node2.delete()",
          "2435:         # delete node from collaboration!",
          "2440:         # removing node from collaboration from outside the",
          "2441:         # collaboration should fail with collaboration permission",
          "2442:         node2 = Node(organization=org2, collaboration=col)",
          "2443:         node2.save()",
          "2444:         org3 = Organization()",
          "2445:         org3.save()",
          "2446:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
          "2447:                             operation=Operation.EDIT)",
          "2448:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "2449:         results = self.app.delete(f\"/api/collaboration/{col.id}/node\",",
          "2450:                                   headers=headers, json={'id': node2.id})",
          "2451:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2453:         # test removing organization from collaboration from within the",
          "2454:         # collaboration",
          "2455:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "2456:         results = self.app.delete(f\"/api/collaboration/{col.id}/node\",",
          "2457:                                   headers=headers, json={'id': node2.id})",
          "2458:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2463:         org.delete()",
          "2464:         org2.delete()",
          "2465:         org3.delete()",
          "2466:         col.delete()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2358:     def test_view_node_permissions_as_user(self):",
          "2360:         org = Organization()",
          "2362:         node = Node(organization=org, collaboration=col)",
          "2363:         node.save()",
          "2365:         # view non existing node",
          "2366:         headers = self.create_user_and_login()",
          "",
          "[Removed Lines]",
          "2361:         col = Collaboration(organizations=[org])",
          "",
          "[Added Lines]",
          "2527:         org2 = Organization()",
          "2528:         col = Collaboration(organizations=[org, org2])",
          "2531:         node2 = Node(organization=org2, collaboration=col)",
          "2532:         node2.save()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2392:         headers = self.create_user_and_login(organization=org, rules=[rule1])",
          "2393:         results = self.app.get('/api/node', headers=headers)",
          "2394:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2397:         # list global permissions",
          "2398:         headers = self.create_user_and_login(rules=[rule2])",
          "",
          "[Removed Lines]",
          "2395:         self.assertEqual(len(results.json['data']), len(col.nodes))",
          "",
          "[Added Lines]",
          "2564:         self.assertEqual(len(results.json['data']), 1)  # collab has 1 node",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2400:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2401:         self.assertEqual(len(json_data), len(Node.get()))",
          "2403:         # cleanup",
          "2404:         node.delete()",
          "2406:     def test_view_node_permissions_as_node(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2572:         # collaboration permission inside the collaboration",
          "2573:         rule = Rule.get_by_(\"node\", scope=Scope.COLLABORATION,",
          "2574:                             operation=Operation.VIEW)",
          "2575:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
          "2576:         results = self.app.get(f'/api/node/{node.id}', headers=headers)",
          "2577:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2579:         # list collaboration permissions - in collaboration",
          "2580:         results = self.app.get('/api/node', headers=headers)",
          "2581:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2582:         self.assertEqual(len(results.json['data']), len(col.nodes))",
          "2584:         # collaboration permission outside the collaboration should fail",
          "2585:         org3 = Organization()",
          "2586:         org3.save()",
          "2587:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "2588:         results = self.app.get(f'/api/node/{node.id}', headers=headers)",
          "2589:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2591:         # list collaboration permissions - other collaboration",
          "2592:         results = self.app.get('/api/node', headers=headers,",
          "2593:                                query_string={'collaboration_id': col.id})",
          "2594:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2598:         node2.delete()",
          "2599:         org.delete()",
          "2600:         org2.delete()",
          "2601:         org3.delete()",
          "2602:         col.delete()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2494:         })",
          "2495:         self.assertEqual(results.status_code, HTTPStatus.CREATED)",
          "2497:     def test_delete_node_permissions(self):",
          "2499:         org = Organization(name=str(uuid.uuid1()))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2695:         # test collaboration permissions",
          "2696:         org3 = Organization()",
          "2697:         org3.save()",
          "2698:         col.organizations.append(org3)",
          "2699:         col.save()",
          "2700:         rule = Rule.get_by_(\"node\", scope=Scope.COLLABORATION,",
          "2701:                             operation=Operation.CREATE)",
          "2702:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "2703:         result = self.app.post('/api/node', headers=headers, json={",
          "2704:             'collaboration_id': col.id,",
          "2705:             'organization_id': org3.id",
          "2706:         })",
          "2707:         self.assertEqual(result.status_code, HTTPStatus.CREATED)",
          "2709:         # test collaboration permissions - outside of collaboration should fail",
          "2710:         org4 = Organization()",
          "2711:         org4.save()",
          "2712:         col.organizations.append(org4)",
          "2713:         col.save()",
          "2714:         headers = self.create_user_and_login(organization=Organization(),",
          "2715:                                              rules=[rule])",
          "2716:         result = self.app.post('/api/node', headers=headers, json={",
          "2717:             'collaboration_id': col.id,",
          "2718:             'organization_id': org4.id",
          "2719:         })",
          "2720:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "2722:         # cleanup",
          "2723:         node.delete()",
          "2724:         org.delete()",
          "2725:         org2.delete()",
          "2726:         org3.delete()",
          "2727:         org4.delete()",
          "2728:         col.delete()",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2527:         results = self.app.delete(f'/api/node/{node2.id}', headers=headers)",
          "2528:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2530:     def test_patch_node_permissions_as_user(self):",
          "2531:         # test patching non-existant node",
          "2532:         headers = self.create_user_and_login()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2763:         # collaboration permission - removing node from outside collaboration",
          "2764:         # should fail",
          "2765:         org3 = Organization()",
          "2766:         node3 = Node(organization=org3, collaboration=col)",
          "2767:         node3.save()",
          "2768:         col.organizations.append(org3)",
          "2769:         col.save()",
          "2770:         org_not_in_collab = Organization()",
          "2771:         org_not_in_collab.save()",
          "2772:         rule = Rule.get_by_(\"node\", scope=Scope.COLLABORATION,",
          "2773:                             operation=Operation.DELETE)",
          "2774:         headers = self.create_user_and_login(organization=org_not_in_collab,",
          "2775:                                              rules=[rule])",
          "2776:         results = self.app.delete(f'/api/node/{node3.id}', headers=headers)",
          "2777:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2779:         # collaboration permission - now within collaboration",
          "2780:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "2781:         results = self.app.delete(f'/api/node/{node3.id}', headers=headers)",
          "2782:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2784:         # cleanup",
          "2785:         node.delete()",
          "2786:         node2.delete()",
          "2787:         node3.delete()",
          "2788:         org.delete()",
          "2789:         org2.delete()",
          "2790:         org3.delete()",
          "2791:         org_not_in_collab.delete()",
          "2792:         col.delete()",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2536:         # test user without any permissions",
          "2537:         org = Organization()",
          "2539:         node = Node(organization=org, collaboration=col)",
          "2540:         node.save()",
          "",
          "[Removed Lines]",
          "2538:         col = Collaboration(organizations=[org])",
          "",
          "[Added Lines]",
          "2802:         org2 = Organization()",
          "2803:         col = Collaboration(organizations=[org, org2])",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2600:                                  json={'organization_id': 9999})",
          "2601:         self.assertEqual(results.status_code, HTTPStatus.NOT_FOUND)",
          "2603:         # cleanup",
          "2604:         node.delete()",
          "2606:     def test_view_task_permissions_as_user(self):",
          "2607:         # non existing task",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2868:         # collaboration permission - inside the collaboration",
          "2869:         rule = Rule.get_by_(\"node\", Scope.COLLABORATION, Operation.EDIT)",
          "2870:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
          "2871:         results = self.app.patch(f\"/api/node/{node.id}\", headers=headers,",
          "2872:                                  json={\"name\": \"A\"})",
          "2873:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2875:         # collaboration permission - outside the collaboration",
          "2876:         org3 = Organization()",
          "2877:         org3.save()",
          "2878:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "2879:         results = self.app.patch(f\"/api/node/{node.id}\", headers=headers,",
          "2880:                                  json={\"name\": \"A\"})",
          "2881:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2885:         org.delete()",
          "2886:         org2.delete()",
          "2887:         org3.delete()",
          "2888:         col.delete()",
          "2889:         col2.delete()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2612:         # test user without any permissions and id",
          "2613:         org = Organization()",
          "2616:         task.save()",
          "2618:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
          "2619:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2622:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.VIEW)",
          "2623:         headers = self.create_user_and_login(org, rules=[rule])",
          "2624:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
          "2625:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2626:         self.assertEqual(results.json['name'], 'unit')",
          "2628:         # test user with org permissions with id from another org",
          "2629:         headers = self.create_user_and_login(rules=[rule])",
          "2630:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
          "",
          "[Removed Lines]",
          "2614:         col = Collaboration(organizations=[org])",
          "2615:         task = Task(name=\"unit\", collaboration=col)",
          "2621:         # test user with org permissions with id",
          "",
          "[Added Lines]",
          "2899:         org2 = Organization()",
          "2900:         col = Collaboration(organizations=[org, org2])",
          "2901:         task = Task(name=\"unit\", collaboration=col, init_org=org)",
          "2907:         # test user with col permissions with id",
          "2914:         # collaboration permission outside the collaboration should fail",
          "2915:         org_not_in_collab = Organization()",
          "2916:         org_not_in_collab.save()",
          "2917:         headers = self.create_user_and_login(organization=org_not_in_collab,",
          "2918:                                              rules=[rule])",
          "2919:         results = self.app.get(f'/api/task/{task.id}', headers=headers)",
          "2920:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2645:         results = self.app.get('/api/task', headers=headers)",
          "2646:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2648:     def test_view_task_permissions_as_node_and_container(self):",
          "2649:         # test node with id",
          "2650:         org = Organization()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2942:         # list collaboration permissions - in collaboration",
          "2943:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.VIEW)",
          "2944:         headers = self.create_user_and_login(org, rules=[rule])",
          "2945:         results = self.app.get('/api/task', headers=headers)",
          "2946:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2947:         self.assertEqual(len(results.json['data']), len(col.tasks))",
          "2949:         # list collaboration permissions - other collaboration",
          "2950:         headers = self.create_user_and_login(org_not_in_collab, rules=[rule])",
          "2951:         results = self.app.get('/api/task', headers=headers,",
          "2952:                                query_string={'collaboration_id': col.id})",
          "2953:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2955:         # list own organization permissions - same organization",
          "2956:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.VIEW)",
          "2957:         headers = self.create_user_and_login(org, rules=[rule])",
          "2958:         results = self.app.get('/api/task', headers=headers)",
          "2959:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2960:         self.assertEqual(len(results.json['data']), len(col.tasks))",
          "2962:         # list own organization permissions - other organization",
          "2963:         headers = self.create_user_and_login(org2, rules=[rule])",
          "2964:         results = self.app.get('/api/task', headers=headers, query_string={",
          "2965:             'init_org_id': org.id",
          "2966:         })",
          "2967:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2969:         # list own user's task permissions - same user without id",
          "2970:         rule = Rule.get_by_(\"task\", Scope.OWN, Operation.VIEW)",
          "2971:         user = self.create_user(rules=[rule], organization=org)",
          "2972:         headers = self.login(user.username)",
          "2973:         task2 = Task(name=\"unit\", collaboration=col, init_org=org,",
          "2974:                      init_user=user)",
          "2975:         task2.save()",
          "2976:         results = self.app.get('/api/task', headers=headers)",
          "2977:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2978:         self.assertEqual(len(results.json['data']), 1)",
          "2980:         # list own user's task permissions - same user with id",
          "2981:         results = self.app.get(f'/api/task/{task2.id}', headers=headers)",
          "2982:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2984:         # list own user's task permissions - other user without id",
          "2985:         headers = self.create_user_and_login(org, rules=[rule])",
          "2986:         results = self.app.get('/api/task', headers=headers, query_string={",
          "2987:             'init_user_id': user.id",
          "2988:         })",
          "2989:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2991:         # list own user's task permissions - other user with id",
          "2992:         results = self.app.get(f'/api/task/{task2.id}', headers=headers)",
          "2993:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2995:         # cleanup",
          "2996:         task.delete()",
          "2997:         task2.delete()",
          "2998:         user.delete()",
          "2999:         org.delete()",
          "3000:         org2.delete()",
          "3001:         col.delete()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2826:         # test with organization permissions from other organization",
          "2827:         org = Organization()",
          "2829:         task = Task(collaboration=col, init_org=org)",
          "2830:         task.save()",
          "2834:         headers = self.create_user_and_login(rules=[rule])",
          "2835:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
          "2836:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2839:         headers = self.create_user_and_login(org, [rule])",
          "2840:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
          "2841:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "",
          "[Removed Lines]",
          "2828:         col = Collaboration(organizations=[org])",
          "2832:         # test with user from other organization",
          "2833:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.DELETE)",
          "2838:         # test with organization permissions",
          "",
          "[Added Lines]",
          "3183:         org2 = Organization()",
          "3184:         col = Collaboration(organizations=[org, org2])",
          "3188:         # test with user who is not member of collaboration",
          "3189:         rule = Rule.get_by_(\"task\", Scope.COLLABORATION, Operation.DELETE)",
          "3194:         # test with collaboration permissions",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2857:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2858:         self.assertIsNone(Task.get(run_id))",
          "2860:     def test_view_task_result_permissions_as_user(self):",
          "2862:         # non-existing task",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3216:         # test permission to delete tasks of own organization - other",
          "3217:         # organization should fail",
          "3218:         task = Task(collaboration=col, init_org=org)",
          "3219:         task.save()",
          "3220:         rule = Rule.get_by_(\"task\", Scope.ORGANIZATION, Operation.DELETE)",
          "3221:         headers = self.create_user_and_login(rules=[rule], organization=org2)",
          "3222:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
          "3223:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "3225:         # test permission to delete tasks of own organization - should work",
          "3226:         headers = self.create_user_and_login(rules=[rule], organization=org)",
          "3227:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
          "3228:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "3230:         # test permission to delete own tasks - other user of organization",
          "3231:         # should fail",
          "3232:         rule = Rule.get_by_(\"task\", Scope.OWN, Operation.DELETE)",
          "3233:         user = self.create_user(rules=[rule], organization=org)",
          "3234:         task = Task(collaboration=col, init_org=org, init_user=user)",
          "3235:         task.save()",
          "3236:         headers = self.create_user_and_login(rules=[rule], organization=org)",
          "3237:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
          "3238:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "3240:         # test permission to delete own tasks with same user",
          "3241:         headers = self.login(user.username)",
          "3242:         results = self.app.delete(f'/api/task/{task.id}', headers=headers)",
          "3243:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "3245:         # cleanup",
          "3246:         user.delete()",
          "3247:         org.delete()",
          "3248:         org2.delete()",
          "3249:         col.delete()",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py": [
          "File: vantage6-server/vantage6/server/resource/node.py -> vantage6-server/vantage6/server/resource/node.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:             q = q.filter(db.Node.last_seen >= args['last_seen_from'])",
          "239:         if not self.r.v_glo.can():",
          "241:                 # only the results of the user's organization are returned",
          "242:                 q = q.filter(db.Node.organization_id == auth_org_id)",
          "243:             else:",
          "",
          "[Removed Lines]",
          "240:             if self.r.v_org.can():",
          "",
          "[Added Lines]",
          "240:             if self.r.v_col.can():",
          "241:                 q = q.filter(db.Node.collaboration_id.in_(",
          "242:                     [col.id for col in self.obtain_auth_collaborations()]",
          "243:                 ))",
          "244:             elif self.r.v_org.can():",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py": [
          "File: vantage6-server/vantage6/server/resource/role.py -> vantage6-server/vantage6/server/resource/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:         # filter by organization ids (include root role if desired)",
          "238:         org_filters = args.getlist('organization_id')",
          "239:         if org_filters:",
          "240:             if 'include_root' in args and args['include_root']:",
          "241:                 q = q.filter(or_(",
          "242:                     db.Role.organization_id.in_(org_filters),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:             for org_id in org_filters:",
          "241:                 if not self.r.can_for_org(P.VIEW, org_id, auth_org):",
          "242:                     return {",
          "243:                         'msg': 'You lack the permission view all roles from '",
          "244:                         f'organization {org_id}!'",
          "245:                     }, HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:         # find roles containing a specific rule",
          "275:         if 'rule_id' in args:",
          "277:             if not rule:",
          "278:                 return {'msg': f'Rule with id={args[\"rule_id\"]} does not '",
          "279:                         'exist!'}, HTTPStatus.BAD_REQUEST",
          "",
          "[Removed Lines]",
          "276:             rule = db.Rule.query.get(args['rule_id'])",
          "",
          "[Added Lines]",
          "282:             rule = db.Rule.get(args['rule_id'])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:                  .filter(db.Rule.id == args['rule_id'])",
          "283:         if 'user_id' in args:",
          "285:             if not user:",
          "286:                 return {'msg': f'User with id={args[\"user_id\"]} does not '",
          "287:                         'exist!'}, HTTPStatus.BAD_REQUEST",
          "",
          "[Removed Lines]",
          "284:             user = db.User.query.get(args['user_id'])",
          "",
          "[Added Lines]",
          "290:             user = db.User.get(args['user_id'])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:         if not self.r.v_glo.can():",
          "297:             own_role_ids = [role.id for role in g.user.roles]",
          "299:                 # allow user to view all roles of their organization and any",
          "300:                 # other roles they may have themselves, or default roles from",
          "301:                 # the root organization",
          "",
          "[Removed Lines]",
          "298:             if self.r.v_org.can():",
          "",
          "[Added Lines]",
          "304:             if self.r.v_col.can():",
          "305:                 q = q.filter(or_(",
          "306:                     db.Role.id.in_(own_role_ids),",
          "307:                     db.Role.organization_id.is_(None),",
          "308:                     db.Role.organization_id.in_(",
          "309:                         [",
          "310:                             org.id",
          "311:                             for col in self.obtain_auth_collaborations()",
          "312:                             for org in col.organizations",
          "313:                         ]",
          "314:                     )",
          "315:                 ))",
          "316:             elif self.r.v_org.can():",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5db5f54cbab0934b02f6863ad1ba7807d1ffdf0c",
      "candidate_info": {
        "commit_hash": "5db5f54cbab0934b02f6863ad1ba7807d1ffdf0c",
        "repo": "vantage6/vantage6",
        "commit_url": "https://github.com/vantage6/vantage6/commit/5db5f54cbab0934b02f6863ad1ba7807d1ffdf0c",
        "files": [
          "vantage6-server/tests_server/test_resources.py",
          "vantage6-server/vantage6/server/resource/organization.py",
          "vantage6-server/vantage6/server/resource/role.py",
          "vantage6-server/vantage6/server/resource/task.py"
        ],
        "message": "Fix unit tests for collaboration scope and after merges",
        "before_after_code_files": [
          "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
          "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
          "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
          "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/vantage6/vantage6/pull/711"
        ],
        "olp_code_files": {
          "patch": [
            "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
            "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
            "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py"
          ],
          "candidate": [
            "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py",
            "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
            "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py"
          ]
        }
      },
      "candidate_diff": {
        "vantage6-server/tests_server/test_resources.py||vantage6-server/tests_server/test_resources.py": [
          "File: vantage6-server/tests_server/test_resources.py -> vantage6-server/tests_server/test_resources.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1356:         result = self.app.post('/api/user', headers=headers, json=userdata)",
          "1357:         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)",
          "1360:         rule_view_roles = Rule.get_by_(",
          "1361:             \"role\", Scope.ORGANIZATION, Operation.VIEW)",
          "1362:         headers = self.create_user_and_login(",
          "",
          "[Removed Lines]",
          "1359:         # you can only assign roles in which you have all rules",
          "",
          "[Added Lines]",
          "1359:         # you can only create users for in which you have all rules",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2042:         # test editing collaboration from within the collaboration",
          "2043:         org = Organization()",
          "2044:         org.save()",
          "2048:         col.save()",
          "2049:         rule = Rule.get_by_(\"collaboration\", scope=Scope.COLLABORATION,",
          "2050:                             operation=Operation.EDIT)",
          "2052:         results = self.app.patch(",
          "2055:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2057:         # check editing collaboration outside the collaboration fails without",
          "2058:         # root access",
          "2062:         results = self.app.patch(",
          "2064:             json={\"name\": \"not-going-to-happen\"})",
          "2065:         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)",
          "2067:         # cleanup",
          "2068:         org.delete()",
          "2069:         org2.delete()",
          "2071:         col.delete()",
          "2073:     def test_delete_collaboration_permissions(self):",
          "",
          "[Removed Lines]",
          "2045:         org2 = Organization()",
          "2046:         org2.save()",
          "2047:         col = Collaboration(organizations=[org, org2])",
          "2051:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
          "2053:             f'/api/organization/{org.id}', headers=headers,",
          "2054:             json={\"name\": \"fourth-name\"})",
          "2059:         org3 = Organization()",
          "2060:         org3.save()",
          "2061:         headers = self.create_user_and_login(organization=org3, rules=[rule])",
          "2063:             f'/api/organization/{org.id}', headers=headers,",
          "2070:         org3.delete()",
          "",
          "[Added Lines]",
          "2045:         col = Collaboration(organizations=[org])",
          "2049:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "2051:             f'/api/collaboration/{col.id}', headers=headers,",
          "2052:             json={\"name\": \"some-name\"})",
          "2057:         org2 = Organization()",
          "2058:         org2.save()",
          "2059:         headers = self.create_user_and_login(organization=org2, rules=[rule])",
          "2061:             f'/api/collaboration/{col.id}', headers=headers,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2251:         org4.delete()",
          "2252:         col.delete()",
          "2256:         org = Organization()",
          "2257:         org.save()",
          "",
          "[Removed Lines]",
          "2254:     def test_delete_collaboration_organization_pesmissions(self):",
          "",
          "[Added Lines]",
          "2251:     def test_delete_collaboration_organization_permissions(self):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2274:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2275:         self.assertEqual(len(results.json), 1)  # one organization left",
          "2277:         # removing organization from collaboration from outside the",
          "2278:         # collaboration should fail with collaboration permission",
          "2279:         org3 = Organization()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2274:         # add back first organization",
          "2275:         col.organizations.append(org)",
          "2276:         col.save()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2290:         headers = self.create_user_and_login(organization=org, rules=[rule])",
          "2291:         results = self.app.delete(f\"/api/collaboration/{col.id}/organization\",",
          "2292:                                   headers=headers, json={'id': org2.id})",
          "2293:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2295:         # cleanup",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2294:         print(results.json)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2805:         self.assertEqual(results.status_code, HTTPStatus.OK)",
          "2807:         # cleanup",
          "2811:         org.delete()",
          "2812:         org2.delete()",
          "2813:         org3.delete()",
          "",
          "[Removed Lines]",
          "2808:         node.delete()",
          "2809:         node2.delete()",
          "2810:         node3.delete()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3029:         org.save()",
          "3030:         col = Collaboration(organizations=[org])",
          "3031:         col.save()",
          "3033:         task.save()",
          "3034:         res = Run(task=task, status=TaskStatus.PENDING)",
          "3035:         res.save()",
          "",
          "[Removed Lines]",
          "3032:         task = Task(collaboration=col, image=\"some-image\")",
          "",
          "[Added Lines]",
          "3031:         task = Task(collaboration=col, image=\"some-image\", init_org=org)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3376:         # test if container can",
          "3377:         org = Organization()",
          "3378:         col = Collaboration(organizations=[org])",
          "3380:         task.save()",
          "3381:         res = Run(task=task, organization=org, status=TaskStatus.PENDING)",
          "3382:         res.save()",
          "",
          "[Removed Lines]",
          "3379:         task = Task(collaboration=col, image=\"some-image\")",
          "",
          "[Added Lines]",
          "3378:         task = Task(collaboration=col, image=\"some-image\", init_org=org)",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py": [
          "File: vantage6-server/vantage6/server/resource/organization.py -> vantage6-server/vantage6/server/resource/organization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:             return {'msg': 'You do not have permission to do that!'}, \\",
          "369:                 HTTPStatus.UNAUTHORIZED",
          "373:     @only_for((\"user\", \"node\"))",
          "374:     def patch(self, id):",
          "",
          "[Removed Lines]",
          "371:         return org_schema.dump(req_org, many=False).data, HTTPStatus.OK",
          "",
          "[Added Lines]",
          "371:         return org_schema.dump(req_org, many=False), HTTPStatus.OK",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py": [
          "File: vantage6-server/vantage6/server/resource/role.py -> vantage6-server/vantage6/server/resource/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:             if not user:",
          "292:                 return {'msg': f'User with id={args[\"user_id\"]} does not '",
          "293:                         'exist!'}, HTTPStatus.BAD_REQUEST",
          "295:                 return {",
          "296:                     'msg': 'You lack the permission view roles from the '",
          "297:                     f'organization that user id={user.id} belongs to!'",
          "",
          "[Removed Lines]",
          "294:             elif self.r.can_for_org(P.VIEW, user.organization_id, auth_org):",
          "",
          "[Added Lines]",
          "294:             elif not self.r.can_for_org(P.VIEW, user.organization_id,",
          "295:                                         auth_org) and not \\",
          "296:                     g.user.id == user.id:",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py": [
          "File: vantage6-server/vantage6/server/resource/task.py -> vantage6-server/vantage6/server/resource/task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:           |Task|Global|View|\u274c|\u274c|View any task|\\n",
          "134:           |Task|Collaboration|View|\u2705|\u2705|View any task in your collaborations|",
          "135:           \\n",
          "137:           created|\\n",
          "140:           Accessible to users.",
          "",
          "[Removed Lines]",
          "136:           |Task|Organization|View|\u2705|\u2705|View any task that your organization",
          "138:           |Task|Own|View|\u2705|\u2705|View any task that you created|\\n",
          "",
          "[Added Lines]",
          "136:           |Task|Organization|View|\u274c|\u274c|View any task that your organization",
          "138:           |Task|Own|View|\u274c|\u274c|View any task that you created|\\n",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:           |--|--|--|--|--|--|\\n",
          "705:           |Task|Global|View|\u274c|\u274c|View any task|\\n",
          "706:           |Task|Collaboration|View|\u2705|\u2705|View any task in your collaborations|",
          "708:           created|\\n",
          "711:           Accessible to users.",
          "",
          "[Removed Lines]",
          "707:           |Task|Organization|View|\u2705|\u2705|View any task that your organization",
          "709:           |Task|Own|View|\u2705|\u2705|View any task that you created|\\n",
          "",
          "[Added Lines]",
          "707:           |Task|Organization|View|\u274c|\u274c|View any task that your organization",
          "709:           |Task|Own|View|\u274c|\u274c|View any task that you created|\\n",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5256dcc767d3fc76a702e55d1f8a054ddcc077a6",
      "candidate_info": {
        "commit_hash": "5256dcc767d3fc76a702e55d1f8a054ddcc077a6",
        "repo": "vantage6/vantage6",
        "commit_url": "https://github.com/vantage6/vantage6/commit/5256dcc767d3fc76a702e55d1f8a054ddcc077a6",
        "files": [
          "vantage6-server/vantage6/server/permission.py",
          "vantage6-server/vantage6/server/resource/node.py",
          "vantage6-server/vantage6/server/resource/organization.py",
          "vantage6-server/vantage6/server/resource/role.py",
          "vantage6-server/vantage6/server/resource/run.py",
          "vantage6-server/vantage6/server/resource/task.py",
          "vantage6-server/vantage6/server/resource/user.py"
        ],
        "message": "Extend collaboration scope to more endpoints\n\nFor task, run and result, changed organization scope to collaboration scope. Organization scope ceases to exist there",
        "before_after_code_files": [
          "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
          "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
          "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
          "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
          "vantage6-server/vantage6/server/resource/run.py||vantage6-server/vantage6/server/resource/run.py",
          "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py",
          "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/vantage6/vantage6/pull/711"
        ],
        "olp_code_files": {
          "patch": [
            "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
            "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
            "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
            "vantage6-server/vantage6/server/resource/run.py||vantage6-server/vantage6/server/resource/run.py",
            "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py",
            "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py"
          ],
          "candidate": [
            "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py",
            "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py",
            "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py",
            "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py",
            "vantage6-server/vantage6/server/resource/run.py||vantage6-server/vantage6/server/resource/run.py",
            "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py",
            "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py"
          ]
        }
      },
      "candidate_diff": {
        "vantage6-server/vantage6/server/permission.py||vantage6-server/vantage6/server/permission.py": [
          "File: vantage6-server/vantage6/server/permission.py -> vantage6-server/vantage6/server/permission.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         permission = Permission(RuleNeed(self.name, scope, operation))",
          "82:         self.__setattr__(f'{operation.value}_{scope.value}', permission)",
          "86:         \"\"\"",
          "89:         Parameters",
          "90:         ----------",
          "",
          "[Removed Lines]",
          "84:     def can_by_org(self, operation: Operation, subject_org_id: int,",
          "85:                    own_org: Organization) -> bool:",
          "87:         Check if an operation is on a certain organization",
          "",
          "[Added Lines]",
          "84:     def can_for_org(self, operation: Operation, subject_org_id: int,",
          "85:                     own_org: Organization) -> bool:",
          "87:         Check if an operation is allowed on a certain organization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:         perms = self._get_relevant_perms(operation, minimal_scope)",
          "175:         return any([perm.can() for perm in perms])",
          "178:         self, operation: Operation, collaboration_id: int,",
          "179:         auth_collabs: list[Collaboration]",
          "180:     ) -> bool:",
          "",
          "[Removed Lines]",
          "177:     def can_for_collaboration(",
          "",
          "[Added Lines]",
          "177:     def can_for_col(",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/node.py||vantage6-server/vantage6/server/resource/node.py": [
          "File: vantage6-server/vantage6/server/resource/node.py -> vantage6-server/vantage6/server/resource/node.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:         args = request.args",
          "210:         if 'organization_id' in args:",
          "213:                 return {",
          "214:                     'msg': 'You lack the permission view nodes from the '",
          "215:                     f'organization with id {args[\"organization_id\"]}!'",
          "",
          "[Removed Lines]",
          "211:             if not self.r.can_by_org(P.VIEW, args['organization_id'],",
          "212:                                      auth.organization):",
          "",
          "[Added Lines]",
          "211:             if not self.r.can_for_org(P.VIEW, args['organization_id'],",
          "212:                                       auth.organization):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:             q = q.filter(db.Node.organization_id == args['organization_id'])",
          "219:         if 'collaboration_id' in args:",
          "224:                 return {",
          "225:                     'msg': 'You lack the permission view nodes from the '",
          "226:                     f'collaboration with id {args[\"collaboration_id\"]}!'",
          "",
          "[Removed Lines]",
          "220:             if not self.r.can_for_collaboration(",
          "221:                 P.VIEW, args['collaboration_id'],",
          "222:                 self.obtain_auth_collaborations()",
          "223:             ):",
          "",
          "[Added Lines]",
          "220:             if not self.r.can_for_col(P.VIEW, args['collaboration_id'],",
          "221:                                       self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:                 HTTPStatus.NOT_FOUND",
          "341:         # check permissions",
          "343:             return {'msg': 'You lack the permission to do that!'}, \\",
          "344:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "342:         if not self.r.can_by_org(P.CREATE, org_id, g.user.organization):",
          "",
          "[Added Lines]",
          "340:         if not self.r.can_for_org(P.CREATE, org_id, g.user.organization):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "435:         auth = self.obtain_auth()",
          "437:         # check permissions",
          "439:             return {'msg': 'You lack the permission to do that!'}, \\",
          "440:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "438:         if not self.r.can_by_org(P.VIEW, id_, auth.organization):",
          "",
          "[Added Lines]",
          "436:         if not self.r.can_for_org(P.VIEW, id_, auth.organization):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:         if not node:",
          "489:             return {\"msg\": f\"Node id={id_} not found\"}, HTTPStatus.NOT_FOUND",
          "492:             return {'msg': 'You lack the permission to do that!'}, \\",
          "493:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "491:         if not self.r.can_by_org(P.DELETE, id_, g.user.organization):",
          "",
          "[Added Lines]",
          "489:         if not self.r.can_for_org(P.DELETE, id_, g.user.organization):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "565:         auth = g.user or g.node",
          "568:             return {'msg': 'You lack the permission to do that!'}, \\",
          "569:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "567:         if not self.r.can_by_org(P.EDIT, id_, auth.organization):",
          "",
          "[Added Lines]",
          "565:         if not self.r.can_for_org(P.EDIT, id_, auth.organization):",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/organization.py||vantage6-server/vantage6/server/resource/organization.py": [
          "File: vantage6-server/vantage6/server/resource/organization.py -> vantage6-server/vantage6/server/resource/organization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:             q = q.filter(db.Organization.country == args['country'])",
          "208:         if 'collaboration_id' in args:",
          "209:             # TODO we also need to check here if the user is part of the collab",
          "214:                 return {",
          "215:                     'msg': 'You lack the permission to get all organizations '",
          "216:                     'in your collaboration!'",
          "",
          "[Removed Lines]",
          "210:             if not self.r.can_for_collaboration(",
          "211:                 P.VIEW, args['collaboration_id'],",
          "212:                 self.obtain_auth_collaborations()",
          "213:             ):",
          "",
          "[Added Lines]",
          "210:             if not self.r.can_for_col(P.VIEW, args['collaboration_id'],",
          "211:                                       self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366:                 HTTPStatus.NOT_FOUND",
          "368:         # Check if auth has enough permissions",
          "370:             return {'msg': 'You do not have permission to do that!'}, \\",
          "371:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "369:         if not self.r.can_by_org(P.VIEW, id, auth_org):",
          "",
          "[Added Lines]",
          "367:         if not self.r.can_for_org(P.VIEW, id, auth_org):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:                 HTTPStatus.NOT_FOUND",
          "430:         own_org = g.user.organization if g.user else g.node.organization",
          "432:             return {'msg': 'You lack the permission to do that!'}, \\",
          "433:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "431:         if not self.r.can_by_org(P.EDIT, id, own_org):",
          "",
          "[Added Lines]",
          "429:         if not self.r.can_for_org(P.EDIT, id, own_org):",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/role.py||vantage6-server/vantage6/server/resource/role.py": [
          "File: vantage6-server/vantage6/server/resource/role.py -> vantage6-server/vantage6/server/resource/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         # filter by collaboration id",
          "249:         if 'collaboration_id' in args:",
          "254:                 return {",
          "255:                     'msg': 'You lack the permission view all roles from '",
          "256:                     f'collaboration {args[\"collaboration_id\"]}!'",
          "",
          "[Removed Lines]",
          "250:             if not self.r.can_for_collaboration(",
          "251:                 P.VIEW, args['collaboration_id'],",
          "252:                 self.obtain_auth_collaborations()",
          "253:             ):",
          "",
          "[Added Lines]",
          "250:             if not self.r.can_for_col(P.VIEW, args['collaboration_id'],",
          "251:                                       self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:                     'exist!'}, HTTPStatus.NOT_FOUND",
          "404:         # check if user is allowed to create this role",
          "406:             P.CREATE, organization_id, g.user.organization",
          "407:         ):",
          "408:             return {",
          "",
          "[Removed Lines]",
          "405:         if not self.r.can_by_org(",
          "",
          "[Added Lines]",
          "403:         if not self.r.can_for_org(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:         # check permissions. A user can always view their own roles",
          "468:         if not (",
          "471:             role in g.user.roles",
          "472:         ):",
          "473:             return {\"msg\": \"You do not have permission to view this.\"},\\",
          "",
          "[Removed Lines]",
          "469:             self.r.can_by_org(P.VIEW, role.organization_id,",
          "470:                               g.user.organization) or",
          "",
          "[Added Lines]",
          "467:             self.r.can_for_org(P.VIEW, role.organization_id,",
          "468:                                g.user.organization) or",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "554:             }, HTTPStatus.BAD_REQUEST",
          "556:         # check permission of the user",
          "559:             return {'msg': 'You do not have permission to edit this role!'}, \\",
          "560:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "557:         if not self.r.can_by_org(P.EDIT, role.organization_id,",
          "558:                                  g.user.organization):",
          "",
          "[Added Lines]",
          "555:         if not self.r.can_for_org(P.EDIT, role.organization_id,",
          "556:                                   g.user.organization):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "634:                        \" roles cannot be deleted.\"",
          "635:             }, HTTPStatus.BAD_REQUEST",
          "639:             return {'msg': 'You do not have permission to delete this role!'},\\",
          "640:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "637:         if not self.r.can_by_org(P.DELETE, role.organization_id,",
          "638:                                  g.user.organization):",
          "",
          "[Added Lines]",
          "635:         if not self.r.can_for_org(P.DELETE, role.organization_id,",
          "636:                                   g.user.organization):",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/run.py||vantage6-server/vantage6/server/resource/run.py": [
          "File: vantage6-server/vantage6/server/resource/run.py -> vantage6-server/vantage6/server/resource/run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from vantage6.common import logger_name",
          "11: from vantage6.server import db",
          "12: from vantage6.server.permission import (",
          "13:     PermissionManager,",
          "14:     Scope as S,",
          "15:     Operation as P",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     RuleCollection,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     add(scope=S.GLOBAL, operation=P.VIEW,",
          "90:         description=\"view any run\")",
          "92:         assign_to_node=True, description=\"view runs of your organizations \"",
          "93:         \"collaborations\")",
          "",
          "[Removed Lines]",
          "91:     add(scope=S.ORGANIZATION, operation=P.VIEW, assign_to_container=True,",
          "",
          "[Added Lines]",
          "92:     add(scope=S.COLLABORATION, operation=P.VIEW, assign_to_container=True,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     def __init__(self, socketio, mail, api, permissions, config):",
          "102:         super().__init__(socketio, mail, api, permissions, config)",
          "106: class MultiRunBase(RunBase):",
          "107:     \"\"\"Base class for resources that return multiple runs or results\"\"\"",
          "110:         \"\"\"",
          "111:         Returns a query object that can be used to retrieve runs.",
          "",
          "[Removed Lines]",
          "103:         self.r = getattr(self.permissions, module_name)",
          "109:     def get_query_multiple_runs(self) -> Union[sa.orm.query.Query, tuple]:",
          "",
          "[Added Lines]",
          "104:         self.r: RuleCollection = getattr(self.permissions, module_name)",
          "110:     def get_query_multiple_runs(self) -> sa.orm.query.Query | tuple:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:         q = g.session.query(db_Run)",
          "124:         # relation filters",
          "129:         # date selections",
          "130:         for param in ['assigned', 'started', 'finished']:",
          "",
          "[Removed Lines]",
          "125:         for param in ['task_id', 'organization_id', 'port']:",
          "126:             if param in args:",
          "127:                 q = q.filter(getattr(db_Run, param) == args[param])",
          "",
          "[Added Lines]",
          "125:         if 'organization_id' in args:",
          "126:             if not self.r.can_for_org(P.VIEW, args['organization_id'],",
          "127:                                       auth_org):",
          "128:                 return {'msg': 'You lack the permission to view runs for '",
          "129:                         f'organization id={args[\"organization_id\"]}!'}, \\",
          "130:                     HTTPStatus.UNAUTHORIZED",
          "131:             q = q.filter(db_Run.organization_id == args['organization_id'])",
          "133:         if 'task_id' in args:",
          "134:             task = db.Task.get(args['task_id'])",
          "135:             if not task:",
          "136:                 return {'msg': f'Task id={args[\"task_id\"]} does not exist!'}, \\",
          "137:                     HTTPStatus.BAD_REQUEST",
          "138:             elif not self.r.can_for_col(P.VIEW, task.collaboration_id,",
          "139:                                         self.obtain_auth_collaborations()):",
          "140:                 return {'msg': 'You lack the permission to view runs for '",
          "141:                         f'task id={args[\"task_id\"]}!'}, HTTPStatus.UNAUTHORIZED",
          "142:             q = q.filter(db_Run.task_id == args['task_id'])",
          "144:         if args.get('node_id'):",
          "145:             node = db.Node.get(args['node_id'])",
          "146:             if not node:",
          "147:                 return {'msg': f'Node id={args[\"node_id\"]} does not exist!'}, \\",
          "148:                     HTTPStatus.BAD_REQUEST",
          "149:             elif not self.r.can_for_col(P.VIEW, node.collaboration_id,",
          "150:                                         self.obtain_auth_collaborations()):",
          "151:                 return {'msg': 'You lack the permission to view runs for '",
          "152:                         f'node id={args[\"node_id\"]}!'}, HTTPStatus.UNAUTHORIZED",
          "153:             q = q.filter(db.Node.id == args.get('node_id'))\\",
          "154:                 .filter(db.Collaboration.id == db.Node.collaboration_id)",
          "157:         if 'port' in args:",
          "158:             q = q.filter(db_Run.port == args['port'])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:         # custom filters",
          "138:         if args.get('state') == 'open':",
          "141:         q = q.join(Organization).join(Node).join(Task, db_Run.task)\\",
          "142:             .join(Collaboration)",
          "148:         # filter based on permissions",
          "149:         if not self.r.v_glo.can():",
          "151:                 col_ids = [col.id for col in auth_org.collaborations]",
          "152:                 q = q.filter(Collaboration.id.in_(col_ids))",
          "153:             else:",
          "",
          "[Removed Lines]",
          "139:             q = q.filter(db_Run.finished_at == None)",
          "144:         if args.get('node_id'):",
          "145:             q = q.filter(db.Node.id == args.get('node_id'))\\",
          "146:                 .filter(db.Collaboration.id == db.Node.collaboration_id)",
          "150:             if self.r.v_org.can():",
          "",
          "[Added Lines]",
          "170:             q = q.filter(db_Run.finished_at.is_(None))",
          "177:             if self.r.v_col.can():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "174:             Description|\\n",
          "175:             |--|--|--|--|--|--|\\n",
          "176:             |Run|Global|View|\u274c|\u274c|View any run|\\n",
          "178:             organization's collaborations|\\n",
          "180:             Accessible to users.",
          "",
          "[Removed Lines]",
          "177:             |Run|Organization|View|\u2705|\u2705|View the runs of your",
          "",
          "[Added Lines]",
          "204:             |Run|Collaboration|View|\u2705|\u2705|View the runs of your",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "293:             Description|\\n",
          "294:             |--|--|--|--|--|--|\\n",
          "295:             |Run|Global|View|\u274c|\u274c|View any result|\\n",
          "297:             organization's collaborations|\\n",
          "299:             Accessible to users.",
          "",
          "[Removed Lines]",
          "296:             |Run|Organization|View|\u2705|\u2705|View the results of your",
          "",
          "[Added Lines]",
          "323:             |Run|Collaboration|View|\u2705|\u2705|View the results of your",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "412:             An algorithm Run object, or a tuple with a message and HTTP error",
          "413:             code if the Run could not be retrieved",
          "414:         \"\"\"",
          "417:         run = db_Run.get(id)",
          "418:         if not run:",
          "419:             return {'msg': f'Run id={id} not found!'}, \\",
          "420:                 HTTPStatus.NOT_FOUND",
          "425:                     HTTPStatus.UNAUTHORIZED",
          "426:         return run",
          "",
          "[Removed Lines]",
          "415:         auth_org = self.obtain_auth_organization()",
          "421:         if not self.r.v_glo.can():",
          "422:             c_orgs = run.task.collaboration.organizations",
          "423:             if not (self.r.v_org.can() and auth_org in c_orgs):",
          "424:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "",
          "[Added Lines]",
          "442:         auth_collabs = self.obtain_auth_collaborations()",
          "449:         if not self.r.can_for_col(P.VIEW, run.task.collaboration.id,",
          "450:                                   auth_collabs):",
          "451:             return {'msg': 'You lack the permission to do that!'}, \\",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "442:             Description|\\n",
          "443:             |--|--|--|--|--|--|\\n",
          "444:             |Run|Global|View|\u274c|\u274c|View any run|\\n",
          "448:             Accessible to users.",
          "",
          "[Removed Lines]",
          "445:             |Run|Organization|View|\u2705|\u2705|View the runs of your",
          "446:             organizations collaborations|\\n",
          "",
          "[Added Lines]",
          "472:             |Run|Collaboration|View|\u2705|\u2705|View the runs of your",
          "473:             organization's collaborations|\\n",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "590:             Description|\\n",
          "591:             |--|--|--|--|--|--|\\n",
          "592:             |Run|Global|View|\u274c|\u274c|View any result|\\n",
          "594:             organization's collaborations|\\n",
          "596:             Accessible to users.",
          "",
          "[Removed Lines]",
          "593:             |Run|Organization|View|\u2705|\u2705|View the results of your",
          "",
          "[Added Lines]",
          "620:             |Run|Collaboration|View|\u2705|\u2705|View the results of your",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/task.py||vantage6-server/vantage6/server/resource/task.py": [
          "File: vantage6-server/vantage6/server/resource/task.py -> vantage6-server/vantage6/server/resource/task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from vantage6.common.task_status import TaskStatus, has_task_finished",
          "12: from vantage6.server import db",
          "13: from vantage6.server.permission import (",
          "14:     Scope as S,",
          "15:     PermissionManager,",
          "16:     Operation as P",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:     RuleCollection,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     \"\"\"",
          "75:     add = permissions.appender(module_name)",
          "80:         assign_to_node=True, description=\"view tasks of your organization\")",
          "82:     add(scope=S.GLOBAL, operation=P.CREATE, description=\"create a new task\")",
          "84:         description=(",
          "85:             \"create a new task for collaborations in which your organization \"",
          "86:             \"participates with\"",
          "",
          "[Removed Lines]",
          "77:     add(scope=S.GLOBAL, operation=P.VIEW,",
          "78:         description=\"view any task\")",
          "79:     add(scope=S.ORGANIZATION, operation=P.VIEW, assign_to_container=True,",
          "83:     add(scope=S.ORGANIZATION, operation=P.CREATE,",
          "",
          "[Added Lines]",
          "78:     add(scope=S.GLOBAL, operation=P.VIEW, description=\"view any task\")",
          "79:     add(scope=S.COLLABORATION, operation=P.VIEW, assign_to_container=True,",
          "83:     add(scope=S.COLLABORATION, operation=P.CREATE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     add(scope=S.GLOBAL, operation=P.DELETE,",
          "90:         description=\"delete a task\")",
          "91:     add(scope=S.ORGANIZATION, operation=P.DELETE,",
          "92:         description=(",
          "93:             \"delete a task from a collaboration in which your organization \"",
          "94:             \"participates with\"",
          "95:         ))",
          "98: # ------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     add(scope=S.COLLABORATION, operation=P.DELETE,",
          "92:         description=\"delete a task from your collaborations\")",
          "98:     add(scope=S.OWN, operation=P.DELETE,",
          "99:         description=\"delete tasks that you created\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     def __init__(self, socketio, mail, api, permissions, config):",
          "108:         super().__init__(socketio, mail, api, permissions, config)",
          "112: class Tasks(TaskBase):",
          "",
          "[Removed Lines]",
          "109:         self.r = getattr(self.permissions, module_name)",
          "",
          "[Added Lines]",
          "113:         self.r: RuleCollection = getattr(self.permissions, module_name)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:           Description|\\n",
          "124:           |--|--|--|--|--|--|\\n",
          "125:           |Task|Global|View|\u274c|\u274c|View any task|\\n",
          "127:           \\n",
          "129:           Accessible to users.",
          "",
          "[Removed Lines]",
          "126:           |Task|Organization|View|\u2705|\u2705|View any task in your organization|",
          "",
          "[Added Lines]",
          "130:           |Task|Collaboration|View|\u2705|\u2705|View any task in your collaborations|",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:           200:",
          "240:             description: Ok",
          "241:           400:",
          "243:           401:",
          "244:             description: Unauthorized",
          "",
          "[Removed Lines]",
          "242:             description: Non-allowed parameter values",
          "",
          "[Added Lines]",
          "246:             description: Non-allowed or wrong parameter values",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:         # check permissions and apply filter if neccassary",
          "258:         if not self.r.v_glo.can():",
          "260:                 q = q.join(db.Collaboration).join(db.Organization)\\",
          "261:                     .filter(db.Collaboration.organizations.any(id=auth_org_id))",
          "262:             else:",
          "263:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "264:                     HTTPStatus.UNAUTHORIZED",
          "266:         # filter based on arguments",
          "269:             if param in args:",
          "270:                 q = q.filter(getattr(db.Task, param) == args[param])",
          "271:         for param in ['name', 'image', 'description', 'database', 'status']:",
          "",
          "[Removed Lines]",
          "259:             if self.r.v_org.can():",
          "267:         for param in ['init_org_id', 'init_user_id', 'collaboration_id',",
          "268:                       'parent_id', 'job_id']:",
          "",
          "[Added Lines]",
          "263:             if self.r.v_col.can():",
          "270:         if 'collaboration_id' in args:",
          "271:             if not self.r.can_for_col(",
          "272:                 P.VIEW, args['collaboration_id'],",
          "273:                 self.obtain_auth_collaborations()",
          "274:             ):",
          "275:                 return {'msg': 'You lack the permission to view tasks '",
          "276:                         f'from collaboration {args[\"collaboration_id\"]}!'}, \\",
          "277:                     HTTPStatus.UNAUTHORIZED",
          "278:             q = q.join(db.Collaboration).filter(",
          "279:                 db.Collaboration.id == args['collaboration_id'])",
          "281:         if 'init_org_id' in args:",
          "282:             if not self.r.can_for_org(P.VIEW, args['init_org_id'],",
          "283:                                       self.obtain_auth_organization()):",
          "284:                 return {'msg': 'You lack the permission to view tasks '",
          "285:                         f'from organization id={args[\"init_org_id\"]}!'}, \\",
          "286:                     HTTPStatus.UNAUTHORIZED",
          "287:             q = q.filter(db.Task.init_org_id == args['init_org_id'])",
          "289:         if 'init_user_id' in args:",
          "290:             init_user = db.User.get(args['init_user_id'])",
          "291:             if not init_user:",
          "292:                 return {'msg': f'User id={args[\"init_user_id\"]} does not '",
          "293:                         'exist!'}, HTTPStatus.BAD_REQUEST",
          "294:             elif not self.r.can_for_org(P.VIEW, init_user.organization_id,",
          "295:                                         self.obtain_auth_organization()):",
          "296:                 return {'msg': 'You lack the permission to view tasks '",
          "297:                         f'from user id={args[\"init_user_id\"]}!'}, \\",
          "298:                     HTTPStatus.UNAUTHORIZED",
          "301:         for param in ['parent_id', 'job_id']:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "286:                     f\"'{args['is_user_created']}'. Should be an integer.\"",
          "287:                 )}, HTTPStatus.BAD_REQUEST",
          "289:         q = q.order_by(desc(db.Task.id))",
          "290:         # paginate tasks",
          "291:         try:",
          "292:             page = Pagination.from_query(query=q, request=request)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:         # order to get latest task first",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "315:           Description|\\n",
          "316:           |--|--|--|--|--|--|\\n",
          "317:           |Task|Global|Create|\u274c|\u274c|Create a new task|\\n",
          "319:           collaboration in which your organization participates|\\n",
          "321:           ## Accessed as `User`\\n",
          "",
          "[Removed Lines]",
          "318:           |Task|Organization|Create|\u274c|\u2705|Create a new task for a specific",
          "",
          "[Added Lines]",
          "353:           |Task|Collaboration|Create|\u274c|\u2705|Create a new task for a specific",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "414:         image = data.get('image', '')",
          "416:         # verify permissions",
          "424:         elif g.container:",
          "425:             # verify that the container has permissions to create the task",
          "",
          "[Removed Lines]",
          "417:         if g.user:",
          "418:             if not self.r.c_glo.can():",
          "419:                 c_orgs = collaboration.organizations",
          "420:                 if not (self.r.c_org.can() and g.user.organization in c_orgs):",
          "421:                     return {'msg': 'You lack the permission to do that!'}, \\",
          "422:                         HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "452:         if g.user and not self.r.can_for_col(",
          "453:             P.CREATE, collaboration.id, self.obtain_auth_collaborations()",
          "454:         ):",
          "455:             return {'msg': 'You lack the permission to do that!'}, \\",
          "456:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "608:           Description|\\n",
          "609:           |--|--|--|--|--|--|\\n",
          "610:           |Task|Global|View|\u274c|\u274c|View any task|\\n",
          "613:           Accessible to users.",
          "",
          "[Removed Lines]",
          "611:           |Task|Organization|View|\u2705|\u2705|View any task in your organization|",
          "",
          "[Added Lines]",
          "645:           |Task|Collaboration|View|\u2705|\u2705|View any task in your collaborations|",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "642:         if not task:",
          "643:             return {\"msg\": f\"task id={id} is not found\"}, HTTPStatus.NOT_FOUND",
          "648:         # obtain schema",
          "649:         schema = task_result_schema if request.args.get('include') == \\",
          "650:             'results' else task_schema",
          "652:         # check permissions",
          "659:         return schema.dump(task, many=False).data, HTTPStatus.OK",
          "",
          "[Removed Lines]",
          "645:         # determine the organization to which the auth belongs",
          "646:         auth_org = self.obtain_auth_organization()",
          "653:         if not self.r.v_glo.can():",
          "654:             org_ids = [org.id for org in task.collaboration.organizations]",
          "655:             if not (self.r.v_org.can() and auth_org.id in org_ids):",
          "656:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "657:                     HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "684:         if not self.r.can_for_col(P.VIEW, task.collaboration_id,",
          "685:                                   self.obtain_auth_collaborations()):",
          "686:             return {'msg': 'You lack the permission to do that!'}, \\",
          "687:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "670:           Description|\\n",
          "671:           |--|--|--|--|--|--|\\n",
          "672:           |Task|Global|Delete|\u274c|\u274c|Delete a task|\\n",
          "674:           in which your organization participates|\\n",
          "676:           Accessible to users.",
          "",
          "[Removed Lines]",
          "673:           |Task|Organization|Delete|\u274c|\u274c|Delete a task from a collaboration",
          "",
          "[Added Lines]",
          "703:           |Task|Collaboration|Delete|\u274c|\u274c|Delete a task from a collaboration",
          "705:           |Task|Organization|Delete|\u274c|\u274c|Delete a task that your organization",
          "706:           initiated|\\n",
          "707:           |Task|Own|Delete|\u274c|\u274c|Delete a task you created yourself|\\n",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "700:         task = db.Task.get(id)",
          "701:         if not task:",
          "704:         # validate permissions",
          "711:         # kill the task if it is still running",
          "712:         if not has_task_finished(task.status):",
          "",
          "[Removed Lines]",
          "702:             return {\"msg\": f\"task id={id} not found\"}, HTTPStatus.NOT_FOUND",
          "705:         if not self.r.d_glo.can():",
          "706:             orgs = task.collaboration.organizations",
          "707:             if not (self.r.d_org.can() and g.user.organization in orgs):",
          "708:                 return {'msg': 'You lack the permission to do that!'}, \\",
          "709:                     HTTPStatus.UNAUTHORIZED",
          "",
          "[Added Lines]",
          "735:             return {\"msg\": f\"Task id={id} not found\"}, HTTPStatus.NOT_FOUND",
          "738:         if not self.r.can_for_org(",
          "739:             P.DELETE, task.organization_id, g.user.organization",
          "740:         ) and not (self.r.d_own.can() and task.init_user_id == g.user.id):",
          "741:             return {'msg': 'You lack the permission to do that!'}, \\",
          "742:                 HTTPStatus.UNAUTHORIZED",
          "",
          "---------------"
        ],
        "vantage6-server/vantage6/server/resource/user.py||vantage6-server/vantage6/server/resource/user.py": [
          "File: vantage6-server/vantage6/server/resource/user.py -> vantage6-server/vantage6/server/resource/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:             if param in args:",
          "239:                 q = q.filter(getattr(db.User, param).like(args[param]))",
          "240:         if 'organization_id' in args:",
          "243:                 return {",
          "244:                     'msg': 'You lack the permission view users from the '",
          "245:                     f'organization with id {args[\"organization_id\"]}!'",
          "",
          "[Removed Lines]",
          "241:             if not self.r.can_by_org(P.VIEW, args['organization_id'],",
          "242:                                      g.user.organization):",
          "",
          "[Added Lines]",
          "241:             if not self.r.can_for_org(P.VIEW, args['organization_id'],",
          "242:                                       g.user.organization):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:                  .filter(db.Rule.id == args['rule_id'])",
          "261:         if 'collaboration_id' in args:",
          "266:                 return {",
          "267:                     'msg': 'You lack the permission view all users from '",
          "268:                     f'collaboration {args[\"collaboration_id\"]}!'",
          "",
          "[Removed Lines]",
          "262:             if not self.r.can_for_collaboration(",
          "263:                 P.VIEW, args['collaboration_id'],",
          "264:                 self.obtain_auth_collaborations()",
          "265:             ):",
          "",
          "[Added Lines]",
          "262:             if not self.r.can_for_col(P.VIEW, args['collaboration_id'],",
          "263:                                       self.obtain_auth_collaborations()):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:             organization_id = data['organization_id']",
          "398:         # check that user is allowed to create users",
          "401:             return {'msg': 'You lack the permission to do that!'}, \\",
          "402:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "399:         if not self.r.can_by_org(P.CREATE, organization_id,",
          "400:                                  g.user.organization):",
          "",
          "[Added Lines]",
          "397:         if not self.r.can_for_org(P.CREATE, organization_id,",
          "398:                                   g.user.organization):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "508:         # allow user to be returned if authenticated user can view users from",
          "509:         # that organization or if the user is the same as the authenticated",
          "510:         # user.",
          "513:             return user_schema.dump(user, many=False).data, HTTPStatus.OK",
          "514:         else:",
          "515:             return {'msg': 'You lack the permission to do that!'}, \\",
          "",
          "[Removed Lines]",
          "511:         if (same_user or self.r.can_by_org(P.VIEW, user.organization_id,",
          "512:                                            g.user.organization)):",
          "",
          "[Added Lines]",
          "509:         if (same_user or self.r.can_for_org(P.VIEW, user.organization_id,",
          "510:                                             g.user.organization)):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "592:                 HTTPStatus.NOT_FOUND",
          "594:         if not (self.r.e_own.can() and user == g.user) and \\",
          "597:             return {'msg': 'You lack the permission to do that!'}, \\",
          "598:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "595:                 not self.r.can_by_org(P.EDIT, user.organization_id,",
          "596:                                       g.user.organization):",
          "",
          "[Added Lines]",
          "593:                 not self.r.can_for_org(P.EDIT, user.organization_id,",
          "594:                                        g.user.organization):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "782:                 HTTPStatus.NOT_FOUND",
          "784:         if not (self.r.d_own.can() and user == g.user) and \\",
          "787:             return {'msg': 'You lack the permission to do that!'}, \\",
          "788:                 HTTPStatus.UNAUTHORIZED",
          "",
          "[Removed Lines]",
          "785:                 not self.r.can_by_org(P.DELETE, user.organization_id,",
          "786:                                       g.user.organization):",
          "",
          "[Added Lines]",
          "783:                 not self.r.can_for_org(P.DELETE, user.organization_id,",
          "784:                                        g.user.organization):",
          "",
          "---------------"
        ]
      }
    }
  ]
}