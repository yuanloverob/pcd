{
  "cve_id": "CVE-2024-47780",
  "cve_desc": "TYPO3 is a free and open source Content Management Framework. Backend users could see items in the backend page tree without having access if the mounts pointed to pages restricted for their user/group, or if no mounts were configured but the pages allowed access to \"everybody.\" However, affected users could not manipulate these pages. Users are advised to update to TYPO3 versions 10.4.46 ELTS, 11.5.40 LTS, 12.4.21 LTS, 13.3.1 that fix the problem described. There are no known workarounds for this vulnerability.",
  "repo": "TYPO3-CMS/backend",
  "patch_hash": "a7b3c924014ada61632cd5e3fb9825fcc86c5719",
  "patch_info": {
    "commit_hash": "a7b3c924014ada61632cd5e3fb9825fcc86c5719",
    "repo": "TYPO3-CMS/backend",
    "commit_url": "https://github.com/TYPO3-CMS/backend/commit/a7b3c924014ada61632cd5e3fb9825fcc86c5719",
    "files": [
      "Classes/Controller/Page/TreeController.php",
      "Classes/Tree/Repository/PageTreeRepository.php",
      "Tests/Functional/Controller/Page/Fixtures/PagesWithBEPermissions.yaml",
      "Tests/Functional/Controller/Page/TreeControllerTest.php"
    ],
    "message": "[SECURITY] Show only explicitly configured page tree information\n\nBackend users were able see page tree items without having access:\n- in case no DB mounts were configured for a particular user\n  and page permissions configured to allow \"everybody\"\n- in case DB mounts were pointing to pages, but actually not having\n  any permission configured for these pages (user/group/everybody)\n\nIt was not possible to manipulate any of the affected pages.\n\nResolves: #104397\nReleases: main, 13.3, 12.4, 11.5\nChange-Id: I52079c8cef3d78946083403adb23a3e1a706c652\nSecurity-Bulletin: TYPO3-CORE-SA-2024-012\nSecurity-References: CVE-2024-47780\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/86495\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>\nTested-by: Oliver Hader <oliver.hader@typo3.org>",
    "before_after_code_files": [
      "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
      "Classes/Tree/Repository/PageTreeRepository.php||Classes/Tree/Repository/PageTreeRepository.php",
      "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
    ]
  },
  "patch_diff": {
    "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php": [
      "File: Classes/Controller/Page/TreeController.php -> Classes/Controller/Page/TreeController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:             'allowEdit' => $this->userHasAccessToModifyPagesAndToDefaultLanguage && $backendUser->doesUserHaveAccess($page, Permission::PAGE_EDIT),",
      "421:         ];",
      "424:             $item['hasChildren'] = true;",
      "428:         }",
      "429:         if (!empty($prefix)) {",
      "430:             $item['prefix'] = htmlspecialchars($prefix);",
      "",
      "[Removed Lines]",
      "423:         if (!empty($page['_children']) || $this->pageTreeRepository->hasChildren($pageId)) {",
      "425:             if ($depth >= $this->levelsToFetch) {",
      "426:                 $page = $this->pageTreeRepository->getTreeLevels($page, 1);",
      "427:             }",
      "",
      "[Added Lines]",
      "423:         if ($depth >= $this->levelsToFetch && $this->pageTreeRepository->hasChildren($pageId)) {",
      "424:             $page = $this->pageTreeRepository->getTreeLevels($page, 1);",
      "425:         }",
      "426:         if (!empty($page['_children'])) {",
      "",
      "---------------"
    ],
    "Classes/Tree/Repository/PageTreeRepository.php||Classes/Tree/Repository/PageTreeRepository.php": [
      "File: Classes/Tree/Repository/PageTreeRepository.php -> Classes/Tree/Repository/PageTreeRepository.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "175:     {",
      "176:         $groupedAndSortedPagesByPid = [];",
      "179:             $pageRecords = $this->getPageRecords($entryPointIds);",
      "180:             $groupedAndSortedPagesByPid[$pageTree['uid']] = $pageRecords;",
      "181:             $parentPageIds = $entryPointIds;",
      "184:         }",
      "186:         for ($i = 0; $i < $depth; $i++) {",
      "187:             if (empty($parentPageIds)) {",
      "188:                 break;",
      "189:             }",
      "190:             $pageRecords = $this->getChildPageRecords($parentPageIds);",
      "192:             $groupedAndSortedPagesByPid = $this->groupAndSortPages($pageRecords, $groupedAndSortedPagesByPid);",
      "194:             $parentPageIds = array_column($pageRecords, 'uid');",
      "195:         }",
      "196:         $this->addChildrenToPage($pageTree, $groupedAndSortedPagesByPid);",
      "",
      "[Removed Lines]",
      "174:     public function getTreeLevels(array $pageTree, int $depth, array $entryPointIds = []): array",
      "178:         if (count($entryPointIds) > 0) {",
      "182:         } else {",
      "183:             $parentPageIds = [$pageTree['uid']];",
      "",
      "[Added Lines]",
      "174:     public function getTreeLevels(array $pageTree, int $depth, ?array $entryPointIds = null): array",
      "178:         if ($entryPointIds === null) {",
      "179:             $parentPageIds = [$pageTree['uid']];",
      "181:         } elseif ($entryPointIds !== []) {",
      "",
      "---------------"
    ],
    "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php": [
      "File: Tests/Functional/Controller/Page/TreeControllerTest.php -> Tests/Functional/Controller/Page/TreeControllerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: use TYPO3\\CMS\\Core\\Context\\Context;",
      "24: use TYPO3\\CMS\\Core\\Context\\WorkspaceAspect;",
      "25: use TYPO3\\CMS\\Core\\Core\\Bootstrap;",
      "26: use TYPO3\\CMS\\Core\\Tests\\Functional\\SiteHandling\\SiteBasedTestTrait;",
      "27: use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;",
      "28: use TYPO3\\TestingFramework\\Core\\AccessibleObjectInterface;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: use TYPO3\\CMS\\Core\\Http\\ServerRequest;",
      "27: use TYPO3\\CMS\\Core\\Http\\Uri;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "291:                             ],",
      "292:                         ],",
      "293:                     ],",
      "294:                 ],",
      "295:             ],",
      "296:             [",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "296:                     [",
      "298:                         'uid' => 9100,",
      "299:                         'title' => 'Page 9100',",
      "300:                         '_children' => [],",
      "301:                     ],",
      "303:                     [",
      "305:                         'uid' => 9300,",
      "306:                         'title' => 'Page 9300',",
      "307:                         '_children' => [],",
      "308:                     ],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "723:         self::assertEquals($expected, $actual);",
      "724:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "741:     public static function fetchDataActionConsidersPermissionsDataProvider(): \\Generator",
      "742:     {",
      "743:         yield 'admin user can see all root pages' => [",
      "744:             'backendUser' => 1,",
      "745:             'expectation' => ['0', '1000', '2000', '7000', '8000', '9100', '9200', '9300'],",
      "746:         ];",
      "747:         yield 'editor with DB mounts can only see accessible pages' => [",
      "748:             'backendUser' => 9,",
      "749:             'expectation' => ['0', '1000', '8110'],",
      "750:         ];",
      "751:         yield 'editor with DB mounts cannot see inaccessible pages' => [",
      "752:             'backendUser' => 8,",
      "753:             'expectation' => ['0'],",
      "754:         ];",
      "755:         yield 'editor without DB mounts cannot see any pages' => [",
      "756:             'backendUser' => 7,",
      "757:             'expectation' => ['0'],",
      "758:         ];",
      "759:     }",
      "765:     public function fetchDataActionConsidersPermissions(int $backendUser, array $expectation): void",
      "766:     {",
      "767:         $this->backendUser = $this->setUpBackendUser($backendUser);",
      "768:         $request = (new ServerRequest(new Uri('https://example.com')))->withQueryParams(['depth' => 1]);",
      "769:         $response = (new TreeController())->fetchDataAction($request);",
      "770:         $data = json_decode((string)$response->getBody(), true);",
      "771:         $items = array_filter($data, static fn(array $page): bool => $page['depth'] <= 1);",
      "772:         $items = array_map(static fn(array $page): string => $page['identifier'], $items);",
      "773:         self::assertSame($expectation, array_values($items));",
      "774:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "970622bd75fd7956f468c2d84cef2204630760f7",
      "candidate_info": {
        "commit_hash": "970622bd75fd7956f468c2d84cef2204630760f7",
        "repo": "TYPO3-CMS/backend",
        "commit_url": "https://github.com/TYPO3-CMS/backend/commit/970622bd75fd7956f468c2d84cef2204630760f7",
        "files": [
          "Classes/Controller/Page/TreeController.php",
          "Tests/Functional/Controller/Page/TreeControllerTest.php"
        ],
        "message": "[BUGFIX] Fix pagetree subtree expansion in search mode\n\nThe TreeController was adapted with #104397 to reduce possibly\nunneeded getTreeLevels calls and refactored the condition that\nsets the hasChildren flag on a node object.\nIt turns out that this caused search queries to miss the\nhasChildren flag, as the depth pre-condition always evaluated\nto false (treeLevelsToFetch is 999 is search-mode).\n\nResolves: #105239\nRelated: #104397\nReleases: main, 12.4, 11.5\nChange-Id: I08dc14ae045afd8a526b83ac2b356841af84eacb\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/86535\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Benjamin Franzke <ben@bnf.dev>\nTested-by: Benjamin Franzke <ben@bnf.dev>\nTested-by: core-ci <typo3@b13.com>",
        "before_after_code_files": [
          "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
          "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
            "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
          ],
          "candidate": [
            "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
            "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php": [
          "File: Classes/Controller/Page/TreeController.php -> Classes/Controller/Page/TreeController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:             'allowEdit' => $this->userHasAccessToModifyPagesAndToDefaultLanguage && $backendUser->doesUserHaveAccess($page, Permission::PAGE_EDIT),",
          "421:         ];",
          "427:             $item['hasChildren'] = true;",
          "428:         }",
          "429:         if (!empty($prefix)) {",
          "430:             $item['prefix'] = htmlspecialchars($prefix);",
          "",
          "[Removed Lines]",
          "423:         if ($depth >= $this->levelsToFetch && $this->pageTreeRepository->hasChildren($pageId)) {",
          "424:             $page = $this->pageTreeRepository->getTreeLevels($page, 1);",
          "425:         }",
          "426:         if (!empty($page['_children'])) {",
          "",
          "[Added Lines]",
          "423:         if (!empty($page['_children']) || $this->pageTreeRepository->hasChildren($pageId)) {",
          "425:             if ($depth >= $this->levelsToFetch) {",
          "426:                 $page = $this->pageTreeRepository->getTreeLevels($page, 1);",
          "427:             }",
          "",
          "---------------"
        ],
        "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php": [
          "File: Tests/Functional/Controller/Page/TreeControllerTest.php -> Tests/Functional/Controller/Page/TreeControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:         self::assertSame($expectation, array_values($items));",
          "774:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:     public static function filterDataActionResolvesNestedPagesDataProvider(): \\Generator",
          "777:     {",
          "778:         yield 'searching \"Forecasts\"' => [",
          "779:             'query' => 'Forecasts',",
          "780:             'expectation' => [",
          "781:                 [",
          "782:                     'identifier' => '0',",
          "783:                     'depth' => 0,",
          "784:                     'name' => 'New TYPO3 site',",
          "785:                     'hasChildren' => true,",
          "786:                 ],",
          "787:                 [",
          "788:                     'identifier' => '1000',",
          "789:                     'depth' => 1,",
          "790:                     'name' => 'ACME Inc',",
          "791:                     'hasChildren' => true,",
          "792:                 ],",
          "793:                 [",
          "794:                     'identifier' => '1500',",
          "795:                     'depth' => 2,",
          "796:                     'name' => 'Internal',",
          "797:                     'hasChildren' => true,",
          "798:                 ],",
          "799:                 [",
          "800:                     'identifier' => '1520',",
          "801:                     'depth' => 3,",
          "802:                     'name' => 'Forecasts',",
          "804:                     'hasChildren' => true,",
          "805:                 ],",
          "806:                 [",
          "807:                     'identifier' => '8110',",
          "808:                     'depth' => 1,",
          "809:                     'name' => 'Europe',",
          "810:                     'hasChildren' => true,",
          "811:                 ],",
          "812:             ],",
          "813:         ];",
          "814:     }",
          "820:     public function filterDataActionResolvesNestedPages(string $query, array $expectation): void",
          "821:     {",
          "822:         $filterProperties = ['identifier', 'depth', 'name', 'hasChildren'];",
          "823:         $request = (new ServerRequest(new Uri('https://example.com')))->withQueryParams(['q' => $query]);",
          "824:         $response = (new TreeController())->filterDataAction($request);",
          "825:         $data = json_decode((string)$response->getBody(), true);",
          "826:         $items = array_map(",
          "827:             static fn(array $page): array => array_filter(",
          "828:                 $page,",
          "829:                 static fn(string $property): bool => in_array($property, $filterProperties, true),",
          "830:                 ARRAY_FILTER_USE_KEY",
          "831:             ),",
          "832:             $data,",
          "833:         );",
          "834:         self::assertSame($expectation, $items);",
          "835:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7906e023bc56d75491b4d985c5203828c3040473",
      "candidate_info": {
        "commit_hash": "7906e023bc56d75491b4d985c5203828c3040473",
        "repo": "TYPO3-CMS/backend",
        "commit_url": "https://github.com/TYPO3-CMS/backend/commit/7906e023bc56d75491b4d985c5203828c3040473",
        "files": [
          "Classes/Controller/Page/TreeController.php",
          "Classes/Tree/Repository/PageTreeRepository.php",
          "Tests/Functional/Controller/Page/Fixtures/PagesWithBEPermissions.yaml",
          "Tests/Functional/Controller/Page/Fixtures/be_users.csv",
          "Tests/Functional/Controller/Page/TreeControllerTest.php"
        ],
        "message": "[SECURITY] Show only explicitly configured page tree information\n\nBackend users were able see page tree items without having access:\n- in case no DB mounts were configured for a particular user\n  and page permissions configured to allow \"everybody\"\n- in case DB mounts were pointing to pages, but actually not having\n  any permission configured for these pages (user/group/everybody)\n\nIt was not possible to manipulate any of the affected pages.\n\nResolves: #104397\nReleases: main, 13.3, 12.4, 11.5\nChange-Id: I52079c8cef3d78946083403adb23a3e1a706c652\nSecurity-Bulletin: TYPO3-CORE-SA-2024-012\nSecurity-References: CVE-2024-47780\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/86501\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
        "before_after_code_files": [
          "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
          "Classes/Tree/Repository/PageTreeRepository.php||Classes/Tree/Repository/PageTreeRepository.php",
          "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
            "Classes/Tree/Repository/PageTreeRepository.php||Classes/Tree/Repository/PageTreeRepository.php",
            "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
          ],
          "candidate": [
            "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php",
            "Classes/Tree/Repository/PageTreeRepository.php||Classes/Tree/Repository/PageTreeRepository.php",
            "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "Classes/Controller/Page/TreeController.php||Classes/Controller/Page/TreeController.php": [
          "File: Classes/Controller/Page/TreeController.php -> Classes/Controller/Page/TreeController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:             'workspaceId' => !empty($page['t3ver_oid']) ? $page['t3ver_oid'] : $pageId,",
          "408:         ];",
          "411:             $item['hasChildren'] = true;",
          "415:         }",
          "416:         if (is_array($lockInfo)) {",
          "417:             $item['locked'] = true;",
          "",
          "[Removed Lines]",
          "410:         if (!empty($page['_children']) || $this->pageTreeRepository->hasChildren($pageId)) {",
          "412:             if ($depth >= $this->levelsToFetch) {",
          "413:                 $page = $this->pageTreeRepository->getTreeLevels($page, 1);",
          "414:             }",
          "",
          "[Added Lines]",
          "410:         if ($depth >= $this->levelsToFetch && $this->pageTreeRepository->hasChildren($pageId)) {",
          "411:             $page = $this->pageTreeRepository->getTreeLevels($page, 1);",
          "412:         }",
          "413:         if (!empty($page['_children'])) {",
          "",
          "---------------"
        ],
        "Classes/Tree/Repository/PageTreeRepository.php||Classes/Tree/Repository/PageTreeRepository.php": [
          "File: Classes/Tree/Repository/PageTreeRepository.php -> Classes/Tree/Repository/PageTreeRepository.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     {",
          "180:         $groupedAndSortedPagesByPid = [];",
          "183:             $pageRecords = $this->getPageRecords($entryPointIds);",
          "184:             $groupedAndSortedPagesByPid[$pageTree['uid']] = $pageRecords;",
          "185:             $parentPageIds = $entryPointIds;",
          "188:         }",
          "190:         for ($i = 0; $i < $depth; $i++) {",
          "191:             if (empty($parentPageIds)) {",
          "192:                 break;",
          "193:             }",
          "194:             $pageRecords = $this->getChildPageRecords($parentPageIds);",
          "196:             $groupedAndSortedPagesByPid = $this->groupAndSortPages($pageRecords, $groupedAndSortedPagesByPid);",
          "198:             $parentPageIds = array_column($pageRecords, 'uid');",
          "199:         }",
          "200:         $this->addChildrenToPage($pageTree, $groupedAndSortedPagesByPid);",
          "",
          "[Removed Lines]",
          "178:     public function getTreeLevels(array $pageTree, int $depth, array $entryPointIds = []): array",
          "182:         if (count($entryPointIds) > 0) {",
          "186:         } else {",
          "187:             $parentPageIds = [$pageTree['uid']];",
          "",
          "[Added Lines]",
          "178:     public function getTreeLevels(array $pageTree, int $depth, ?array $entryPointIds = null): array",
          "182:         if ($entryPointIds === null) {",
          "183:             $parentPageIds = [$pageTree['uid']];",
          "185:         } elseif ($entryPointIds !== []) {",
          "",
          "---------------"
        ],
        "Tests/Functional/Controller/Page/TreeControllerTest.php||Tests/Functional/Controller/Page/TreeControllerTest.php": [
          "File: Tests/Functional/Controller/Page/TreeControllerTest.php -> Tests/Functional/Controller/Page/TreeControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $this->withDatabaseSnapshot(function () {",
          "60:             $this->importCSVDataSet(__DIR__ . '/Fixtures/be_users.csv');",
          "64:             $scenarioFile = __DIR__ . '/Fixtures/PagesWithBEPermissions.yaml';",
          "65:             $factory = DataHandlerFactory::fromYamlFile($scenarioFile);",
          "67:             $writer->invokeFactory($factory);",
          "68:             self::failIfArrayIsNotEmpty($writer->getErrors());",
          "69:         }, function () {",
          "",
          "[Removed Lines]",
          "62:             $this->backendUser = $this->setUpBackendUser(1);",
          "63:             $GLOBALS['LANG'] = $this->get(LanguageServiceFactory::class)->createFromUserPreferences($this->backendUser);",
          "66:             $writer = DataHandlerWriter::withBackendUser($this->backendUser);",
          "",
          "[Added Lines]",
          "62:             $backendUser = $this->setUpBackendUser(1);",
          "63:             $GLOBALS['LANG'] = $this->get(LanguageServiceFactory::class)->createFromUserPreferences($backendUser);",
          "66:             $writer = DataHandlerWriter::withBackendUser($backendUser);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:                             ],",
          "288:                         ],",
          "289:                     ],",
          "290:                 ],",
          "291:             ],",
          "292:             [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:                     [",
          "292:                         'uid' => 9100,",
          "293:                         'title' => 'Page 9100',",
          "294:                         '_children' => [],",
          "295:                     ],",
          "297:                     [",
          "299:                         'uid' => 9300,",
          "300:                         'title' => 'Page 9300',",
          "301:                         '_children' => [],",
          "302:                     ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "813:         self::assertEquals('1000', $afterPageTreeItemsPreparedEvent->getItems()[1]['identifier']);",
          "814:         self::assertEquals('ACME Inc', $afterPageTreeItemsPreparedEvent->getItems()[1]['name']);",
          "815:     }",
          "816: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:     public static function fetchDataActionConsidersPermissionsDataProvider(): \\Generator",
          "831:     {",
          "832:         yield 'admin user can see all root pages' => [",
          "833:             'backendUser' => 1,",
          "834:             'expectation' => ['0', '1000', '2000', '7000', '8000', '9100', '9200', '9300'],",
          "835:         ];",
          "836:         yield 'editor with DB mounts can only see accessible pages' => [",
          "837:             'backendUser' => 9,",
          "838:             'expectation' => ['0', '1000', '8110'],",
          "839:         ];",
          "840:         yield 'editor with DB mounts cannot see inaccessible pages' => [",
          "841:             'backendUser' => 8,",
          "842:             'expectation' => ['0'],",
          "843:         ];",
          "844:         yield 'editor without DB mounts cannot see any pages' => [",
          "845:             'backendUser' => 7,",
          "846:             'expectation' => ['0'],",
          "847:         ];",
          "848:     }",
          "850:     #[Test]",
          "851:     #[DataProvider('fetchDataActionConsidersPermissionsDataProvider')]",
          "852:     public function fetchDataActionConsidersPermissions(int $backendUser, array $expectation): void",
          "853:     {",
          "854:         $this->backendUser = $this->setUpBackendUser($backendUser);",
          "855:         $request = (new ServerRequest(new Uri('https://example.com')))->withQueryParams(['depth' => 1]);",
          "856:         $response = $this->get(TreeController::class)->fetchDataAction($request);",
          "857:         $data = json_decode((string)$response->getBody(), true);",
          "858:         $items = array_filter($data, static fn(array $page): bool => $page['depth'] <= 1);",
          "859:         $items = array_map(static fn(array $page): string => $page['identifier'], $items);",
          "860:         self::assertSame($expectation, array_values($items));",
          "861:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}