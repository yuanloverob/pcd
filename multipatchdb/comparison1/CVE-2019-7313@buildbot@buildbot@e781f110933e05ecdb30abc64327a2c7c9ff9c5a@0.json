{
  "cve_id": "CVE-2019-7313",
  "cve_desc": "www/resource.py in Buildbot before 1.8.1 allows CRLF injection in the Location header of /auth/login and /auth/logout via the redirect parameter. This affects other web sites in the same domain.",
  "repo": "buildbot/buildbot",
  "patch_hash": "e781f110933e05ecdb30abc64327a2c7c9ff9c5a",
  "patch_info": {
    "commit_hash": "e781f110933e05ecdb30abc64327a2c7c9ff9c5a",
    "repo": "buildbot/buildbot",
    "commit_url": "https://github.com/buildbot/buildbot/commit/e781f110933e05ecdb30abc64327a2c7c9ff9c5a",
    "files": [
      "master/buildbot/test/unit/test_www_auth.py",
      "master/buildbot/test/unit/test_www_avatar.py",
      "master/buildbot/test/unit/test_www_oauth.py",
      "master/buildbot/test/unit/test_www_resource.py",
      "master/buildbot/www/resource.py"
    ],
    "message": "redirects: strip everything after a CR or a LF",
    "before_after_code_files": [
      "master/buildbot/test/unit/test_www_auth.py||master/buildbot/test/unit/test_www_auth.py",
      "master/buildbot/test/unit/test_www_avatar.py||master/buildbot/test/unit/test_www_avatar.py",
      "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py",
      "master/buildbot/test/unit/test_www_resource.py||master/buildbot/test/unit/test_www_resource.py",
      "master/buildbot/www/resource.py||master/buildbot/www/resource.py"
    ]
  },
  "patch_diff": {
    "master/buildbot/test/unit/test_www_auth.py||master/buildbot/test/unit/test_www_auth.py": [
      "File: master/buildbot/test/unit/test_www_auth.py -> master/buildbot/test/unit/test_www_auth.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "233:         self.auth.updateUserInfo = mock.Mock(side_effect=updateUserInfo)",
      "235:         res = yield self.render_resource(self.rsrc, b'/auth/login')",
      "237:         self.assertFalse(self.auth.maybeAutoLogin.called)",
      "238:         self.auth.updateUserInfo.assert_called_with(mock.ANY)",
      "239:         self.assertEqual(self.master.session.user_info,",
      "",
      "[Removed Lines]",
      "236:         self.assertEqual(res, {'redirected': 'h:/a/b/#/'})",
      "",
      "[Added Lines]",
      "236:         self.assertEqual(res, {'redirected': b'h:/a/b/#/'})",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "250:     def test_render(self):",
      "251:         self.master.session.expire = mock.Mock()",
      "252:         res = yield self.render_resource(self.rsrc, b'/auth/logout')",
      "254:         self.master.session.expire.assert_called_with()",
      "",
      "[Removed Lines]",
      "253:         self.assertEqual(res, {'redirected': 'h:/a/b/#/'})",
      "",
      "[Added Lines]",
      "253:         self.assertEqual(res, {'redirected': b'h:/a/b/#/'})",
      "254:         self.master.session.expire.assert_called_with()",
      "256:     @defer.inlineCallbacks",
      "257:     def test_render_with_crlf(self):",
      "258:         self.master.session.expire = mock.Mock()",
      "259:         res = yield self.render_resource(self.rsrc, b'/auth/logout?redirect=%0d%0abla')",
      "260:         # everything after a %0d shall be stripped",
      "261:         self.assertEqual(res, {'redirected': b'h:/a/b/#'})",
      "",
      "---------------"
    ],
    "master/buildbot/test/unit/test_www_avatar.py||master/buildbot/test/unit/test_www_avatar.py": [
      "File: master/buildbot/test/unit/test_www_avatar.py -> master/buildbot/test/unit/test_www_avatar.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:         rsrc.reconfigResource(master.config)",
      "44:         res = yield self.render_resource(rsrc, b'/?email=foo')",
      "48:     @defer.inlineCallbacks",
      "49:     def test_custom(self):",
      "",
      "[Removed Lines]",
      "45:         self.assertEqual(res, dict(redirected='//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
      "46:                                    'def654fccc4a4d8?d=retro&s=32'))",
      "",
      "[Added Lines]",
      "45:         self.assertEqual(res, dict(redirected=b'//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
      "46:                                    b'def654fccc4a4d8?d=retro&s=32'))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:         rsrc.reconfigResource(master.config)",
      "78:         res = yield self.render_resource(rsrc, b'/?email=foo')",
      "",
      "[Removed Lines]",
      "79:         self.assertEqual(res, dict(redirected='//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
      "80:                          'def654fccc4a4d8?d=retro&s=32'))",
      "",
      "[Added Lines]",
      "79:         self.assertEqual(res, dict(redirected=b'//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
      "80:                          b'def654fccc4a4d8?d=retro&s=32'))",
      "",
      "---------------"
    ],
    "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py": [
      "File: master/buildbot/test/unit/test_www_oauth.py -> master/buildbot/test/unit/test_www_oauth.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "426:         res = yield self.render_resource(rsrc, b'/')",
      "427:         rsrc.auth.getLoginURL.assert_called_once_with(None)",
      "428:         rsrc.auth.verifyCode.assert_not_called()",
      "430:         rsrc.auth.getLoginURL.reset_mock()",
      "431:         rsrc.auth.verifyCode.reset_mock()",
      "432:         res = yield self.render_resource(rsrc, b'/?code=code!')",
      "433:         rsrc.auth.getLoginURL.assert_not_called()",
      "434:         rsrc.auth.verifyCode.assert_called_once_with(b\"code!\")",
      "435:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
      "437:         res = yield self.render_resource(rsrc, b'/?token=token!')",
      "438:         rsrc.auth.getLoginURL.assert_not_called()",
      "439:         rsrc.auth.acceptToken.assert_called_once_with(b\"token!\")",
      "440:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
      "443:     def test_getConfig(self):",
      "444:         self.assertEqual(self.githubAuth.getConfigDict(), {'fa_icon': 'fa-github', 'autologin': False,",
      "",
      "[Removed Lines]",
      "429:         self.assertEqual(res, {'redirected': '://'})",
      "436:         self.assertEqual(res, {'redirected': '://me'})",
      "441:         self.assertEqual(res, {'redirected': '://me'})",
      "",
      "[Added Lines]",
      "429:         self.assertEqual(res, {'redirected': b'://'})",
      "436:         self.assertEqual(res, {'redirected': b'://me'})",
      "441:         self.assertEqual(res, {'redirected': b'://me'})",
      "",
      "---------------"
    ],
    "master/buildbot/test/unit/test_www_resource.py||master/buildbot/test/unit/test_www_resource.py": [
      "File: master/buildbot/test/unit/test_www_resource.py -> master/buildbot/test/unit/test_www_resource.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:         rsrc = resource.RedirectResource(master, b'foo')",
      "46:         self.render_resource(rsrc, b'/')",
      "47:         self.assertEqual(self.request.redirected_to, b'h:/a/b/foo')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:     def test_redirect_cr_lf(self):",
      "50:         master = self.make_master(url=b'h:/a/b/')",
      "51:         rsrc = resource.RedirectResource(master, b'foo\\r\\nbar')",
      "52:         self.render_resource(rsrc, b'/')",
      "53:         self.assertEqual(self.request.redirected_to, b'h:/a/b/foo')",
      "",
      "---------------"
    ],
    "master/buildbot/www/resource.py||master/buildbot/www/resource.py": [
      "File: master/buildbot/www/resource.py -> master/buildbot/www/resource.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: # Copyright Buildbot Team Members",
      "17: from twisted.internet import defer",
      "18: from twisted.python import log",
      "19: from twisted.web import resource",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import re",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: from buildbot.util import unicode2bytes",
      "28:     def __init__(self, url):",
      "29:         Error.__init__(self, 302, \"redirect\")",
      "33: class Resource(resource.Resource):",
      "",
      "[Removed Lines]",
      "26: class Redirect(Error):",
      "30:         self.url = url",
      "",
      "[Added Lines]",
      "27: _CR_LF_RE = re.compile(br\"[\\r\\n]+.*\")",
      "30: def protect_redirect_url(url):",
      "31:     return _CR_LF_RE.sub(b\"\", url)",
      "34: class Redirect(Error):",
      "37:         self.url = protect_redirect_url(unicode2bytes(url))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "114:     def render(self, request):",
      "115:         redir = self.base_url + self.basepath",
      "117:         return redir",
      "",
      "[Removed Lines]",
      "116:         request.redirect(redir)",
      "",
      "[Added Lines]",
      "123:         request.redirect(protect_redirect_url(redir))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e1dcfce4388bfb153428fb4078b70a7ac96fd5b1",
      "candidate_info": {
        "commit_hash": "e1dcfce4388bfb153428fb4078b70a7ac96fd5b1",
        "repo": "buildbot/buildbot",
        "commit_url": "https://github.com/buildbot/buildbot/commit/e1dcfce4388bfb153428fb4078b70a7ac96fd5b1",
        "files": [
          "master/buildbot/test/unit/test_www_oauth.py",
          "master/buildbot/www/oauth2.py"
        ],
        "message": "Revert \"master: Accept GitHub `access_token` directly from user\"\n\nThis reverts commit 8dd63f494af50ce58b0a8d79ad7eff2b25ca3460.\n\nThis should be done via API token",
        "before_after_code_files": [
          "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py",
          "master/buildbot/www/oauth2.py||master/buildbot/www/oauth2.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py"
          ],
          "candidate": [
            "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py"
          ]
        }
      },
      "candidate_diff": {
        "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py": [
          "File: master/buildbot/test/unit/test_www_oauth.py -> master/buildbot/test/unit/test_www_oauth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:                           'full_name': 'foo bar'}, res)",
          "224:     @defer.inlineCallbacks",
          "249:         requests.get.side_effect = []",
          "250:         requests.post.side_effect = [",
          "251:             FakeResponse(dict(access_token=\"TOK3N\"))]",
          "",
          "[Removed Lines]",
          "225:     def test_GithubAcceptToken(self):",
          "226:         requests.get.side_effect = []",
          "227:         requests.post.side_effect = [",
          "228:             FakeResponse(dict(access_token=\"TOK3N\"))]",
          "229:         self.githubAuth.get = mock.Mock(side_effect=[",
          "230:             dict(  # /user",
          "231:                 login=\"bar\",",
          "232:                 name=\"foo bar\",",
          "233:                 email=\"buzz@bar\"),",
          "234:             [  # /user/emails",
          "235:                 {'email': 'buzz@bar', 'verified': True, 'primary': False},",
          "236:                 {'email': 'bar@foo', 'verified': True, 'primary': True}],",
          "237:             [  # /user/orgs",
          "238:                 dict(login=\"hello\"),",
          "239:                 dict(login=\"grp\"),",
          "240:             ]])",
          "241:         res = yield self.githubAuth.acceptToken(\"TOK3N\")",
          "242:         self.assertEqual({'email': 'bar@foo',",
          "243:                           'username': 'bar',",
          "244:                           'groups': [\"hello\", \"grp\"],",
          "245:                           'full_name': 'foo bar'}, res)",
          "247:     @defer.inlineCallbacks",
          "248:     def test_GithubAcceptToken_v4(self):",
          "",
          "[Added Lines]",
          "225:     def test_GithubVerifyCode_v4(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:                 }",
          "275:             }",
          "276:         ])",
          "278:         self.assertEqual({'email': 'bar@foo',",
          "279:                           'username': 'bar',",
          "280:                           'groups': [\"hello\", \"grp\"],",
          "281:                           'full_name': 'foo bar'}, res)",
          "283:     @defer.inlineCallbacks",
          "285:         requests.get.side_effect = []",
          "286:         requests.post.side_effect = [",
          "287:             FakeResponse(dict(access_token=\"TOK3N\"))]",
          "",
          "[Removed Lines]",
          "277:         res = yield self.githubAuth_v4.acceptToken(\"TOK3N\")",
          "284:     def test_GithubAcceptToken_v4_teams(self):",
          "",
          "[Added Lines]",
          "254:         res = yield self.githubAuth_v4.verifyCode(\"code!\")",
          "261:     def test_GithubVerifyCode_v4_teams(self):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:                 }",
          "363:             }",
          "364:         ])",
          "366:         self.assertEqual({'email': 'bar@foo',",
          "367:                           'username': 'bar',",
          "368:                           'groups': [",
          "",
          "[Removed Lines]",
          "365:         res = yield self.githubAuth_v4_teams.acceptToken(\"TOK3N\")",
          "",
          "[Added Lines]",
          "342:         res = yield self.githubAuth_v4_teams.verifyCode(\"code!\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "465:         rsrc.auth.verifyCode.assert_called_once_with(b\"code!\")",
          "466:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
          "467:         self.assertEqual(res, {'redirected': b'://me'})",
          "468:         res = yield self.render_resource(rsrc, b'/?token=token!')",
          "474:     def test_getConfig(self):",
          "475:         self.assertEqual(self.githubAuth.getConfigDict(), {'fa_icon': 'fa-github', 'autologin': False,",
          "",
          "[Removed Lines]",
          "469:         rsrc.auth.getLoginURL.assert_not_called()",
          "470:         rsrc.auth.acceptToken.assert_called_once_with(b\"token!\")",
          "471:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
          "472:         self.assertEqual(res, {'redirected': b'://me'})",
          "",
          "[Added Lines]",
          "445:         # token not supported anymore",
          "447:         rsrc.auth.getLoginURL.assert_called_once()",
          "",
          "---------------"
        ],
        "master/buildbot/www/oauth2.py||master/buildbot/www/oauth2.py": [
          "File: master/buildbot/www/oauth2.py -> master/buildbot/www/oauth2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     @defer.inlineCallbacks",
          "51:     def renderLogin(self, request):",
          "52:         code = request.args.get(b\"code\", [b\"\"])[0]",
          "55:             url = request.args.get(b\"redirect\", [None])[0]",
          "56:             url = yield self.auth.getLoginURL(url)",
          "57:             raise resource.Redirect(url)",
          "63:         if self.auth.userInfoProvider is not None:",
          "64:             infos = yield self.auth.userInfoProvider.getUserInfo(details['username'])",
          "65:             details.update(infos)",
          "",
          "[Removed Lines]",
          "53:         token = request.args.get(b\"token\", [b\"\"])[0]",
          "54:         if not token and not code:",
          "59:         if not token:",
          "60:             details = yield self.auth.verifyCode(code)",
          "61:         else:",
          "62:             details = yield self.auth.acceptToken(token)",
          "",
          "[Added Lines]",
          "53:         if not code:",
          "58:         details = yield self.auth.verifyCode(code)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         ret = session.get(self.resourceEndpoint + path)",
          "134:         return ret.json()",
          "144:     # based on https://github.com/maraujop/requests-oauth",
          "145:     # from Miguel Araujo, augmented to support header based clientSecret",
          "146:     # passing",
          "",
          "[Removed Lines]",
          "136:     # If the user wants to authenticate directly with an access token they",
          "137:     # already have, go ahead and just directly accept an access_token from them.",
          "138:     def acceptToken(self, token):",
          "139:         def thd():",
          "140:             session = self.createSessionFromToken({'access_token': token})",
          "141:             return self.getUserInfoFromOAuthClient(session)",
          "142:         return threads.deferToThread(thd)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51339c9e29850094d8b213d9a6eb4bee8e02563b",
      "candidate_info": {
        "commit_hash": "51339c9e29850094d8b213d9a6eb4bee8e02563b",
        "repo": "buildbot/buildbot",
        "commit_url": "https://github.com/buildbot/buildbot/commit/51339c9e29850094d8b213d9a6eb4bee8e02563b",
        "files": [
          "master/buildbot/test/unit/test_www_oauth.py",
          "master/buildbot/www/oauth2.py"
        ],
        "message": "Revert \"master: Accept GitHub `access_token` directly from user\"\n\nThis reverts commit 8dd63f494af50ce58b0a8d79ad7eff2b25ca3460.\n\nThis should be done via API token",
        "before_after_code_files": [
          "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py",
          "master/buildbot/www/oauth2.py||master/buildbot/www/oauth2.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py"
          ],
          "candidate": [
            "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py"
          ]
        }
      },
      "candidate_diff": {
        "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py": [
          "File: master/buildbot/test/unit/test_www_oauth.py -> master/buildbot/test/unit/test_www_oauth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:                           'full_name': 'foo bar'}, res)",
          "224:     @defer.inlineCallbacks",
          "249:         requests.get.side_effect = []",
          "250:         requests.post.side_effect = [",
          "251:             FakeResponse(dict(access_token=\"TOK3N\"))]",
          "",
          "[Removed Lines]",
          "225:     def test_GithubAcceptToken(self):",
          "226:         requests.get.side_effect = []",
          "227:         requests.post.side_effect = [",
          "228:             FakeResponse(dict(access_token=\"TOK3N\"))]",
          "229:         self.githubAuth.get = mock.Mock(side_effect=[",
          "230:             dict(  # /user",
          "231:                 login=\"bar\",",
          "232:                 name=\"foo bar\",",
          "233:                 email=\"buzz@bar\"),",
          "234:             [  # /user/emails",
          "235:                 {'email': 'buzz@bar', 'verified': True, 'primary': False},",
          "236:                 {'email': 'bar@foo', 'verified': True, 'primary': True}],",
          "237:             [  # /user/orgs",
          "238:                 dict(login=\"hello\"),",
          "239:                 dict(login=\"grp\"),",
          "240:             ]])",
          "241:         res = yield self.githubAuth.acceptToken(\"TOK3N\")",
          "242:         self.assertEqual({'email': 'bar@foo',",
          "243:                           'username': 'bar',",
          "244:                           'groups': [\"hello\", \"grp\"],",
          "245:                           'full_name': 'foo bar'}, res)",
          "247:     @defer.inlineCallbacks",
          "248:     def test_GithubAcceptToken_v4(self):",
          "",
          "[Added Lines]",
          "225:     def test_GithubVerifyCode_v4(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:                 }",
          "275:             }",
          "276:         ])",
          "278:         self.assertEqual({'email': 'bar@foo',",
          "279:                           'username': 'bar',",
          "280:                           'groups': [\"hello\", \"grp\"],",
          "281:                           'full_name': 'foo bar'}, res)",
          "283:     @defer.inlineCallbacks",
          "285:         requests.get.side_effect = []",
          "286:         requests.post.side_effect = [",
          "287:             FakeResponse(dict(access_token=\"TOK3N\"))]",
          "",
          "[Removed Lines]",
          "277:         res = yield self.githubAuth_v4.acceptToken(\"TOK3N\")",
          "284:     def test_GithubAcceptToken_v4_teams(self):",
          "",
          "[Added Lines]",
          "254:         res = yield self.githubAuth_v4.verifyCode(\"code!\")",
          "261:     def test_GithubVerifyCode_v4_teams(self):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:                 }",
          "363:             }",
          "364:         ])",
          "366:         self.assertEqual({'email': 'bar@foo',",
          "367:                           'username': 'bar',",
          "368:                           'groups': [",
          "",
          "[Removed Lines]",
          "365:         res = yield self.githubAuth_v4_teams.acceptToken(\"TOK3N\")",
          "",
          "[Added Lines]",
          "342:         res = yield self.githubAuth_v4_teams.verifyCode(\"code!\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "465:         rsrc.auth.verifyCode.assert_called_once_with(b\"code!\")",
          "466:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
          "467:         self.assertEqual(res, {'redirected': b'://me'})",
          "468:         res = yield self.render_resource(rsrc, b'/?token=token!')",
          "474:     def test_getConfig(self):",
          "475:         self.assertEqual(self.githubAuth.getConfigDict(), {'fa_icon': 'fa-github', 'autologin': False,",
          "",
          "[Removed Lines]",
          "469:         rsrc.auth.getLoginURL.assert_not_called()",
          "470:         rsrc.auth.acceptToken.assert_called_once_with(b\"token!\")",
          "471:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
          "472:         self.assertEqual(res, {'redirected': b'://me'})",
          "",
          "[Added Lines]",
          "445:         # token not supported anymore",
          "447:         rsrc.auth.getLoginURL.assert_called_once()",
          "",
          "---------------"
        ],
        "master/buildbot/www/oauth2.py||master/buildbot/www/oauth2.py": [
          "File: master/buildbot/www/oauth2.py -> master/buildbot/www/oauth2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     @defer.inlineCallbacks",
          "51:     def renderLogin(self, request):",
          "52:         code = request.args.get(b\"code\", [b\"\"])[0]",
          "55:             url = request.args.get(b\"redirect\", [None])[0]",
          "56:             url = yield self.auth.getLoginURL(url)",
          "57:             raise resource.Redirect(url)",
          "63:         if self.auth.userInfoProvider is not None:",
          "64:             infos = yield self.auth.userInfoProvider.getUserInfo(details['username'])",
          "65:             details.update(infos)",
          "",
          "[Removed Lines]",
          "53:         token = request.args.get(b\"token\", [b\"\"])[0]",
          "54:         if not token and not code:",
          "59:         if not token:",
          "60:             details = yield self.auth.verifyCode(code)",
          "61:         else:",
          "62:             details = yield self.auth.acceptToken(token)",
          "",
          "[Added Lines]",
          "53:         if not code:",
          "58:         details = yield self.auth.verifyCode(code)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         ret = session.get(self.resourceEndpoint + path)",
          "134:         return ret.json()",
          "144:     # based on https://github.com/maraujop/requests-oauth",
          "145:     # from Miguel Araujo, augmented to support header based clientSecret",
          "146:     # passing",
          "",
          "[Removed Lines]",
          "136:     # If the user wants to authenticate directly with an access token they",
          "137:     # already have, go ahead and just directly accept an access_token from them.",
          "138:     def acceptToken(self, token):",
          "139:         def thd():",
          "140:             session = self.createSessionFromToken({'access_token': token})",
          "141:             return self.getUserInfoFromOAuthClient(session)",
          "142:         return threads.deferToThread(thd)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdae9fea4e8978b19e12425776b2d083febd91a6",
      "candidate_info": {
        "commit_hash": "bdae9fea4e8978b19e12425776b2d083febd91a6",
        "repo": "buildbot/buildbot",
        "commit_url": "https://github.com/buildbot/buildbot/commit/bdae9fea4e8978b19e12425776b2d083febd91a6",
        "files": [
          "master/buildbot/test/unit/test_www_auth.py",
          "master/buildbot/test/unit/test_www_avatar.py",
          "master/buildbot/test/unit/test_www_oauth.py",
          "master/buildbot/test/unit/test_www_resource.py",
          "master/buildbot/www/resource.py"
        ],
        "message": "redirects: strip everything after a CR or a LF",
        "before_after_code_files": [
          "master/buildbot/test/unit/test_www_auth.py||master/buildbot/test/unit/test_www_auth.py",
          "master/buildbot/test/unit/test_www_avatar.py||master/buildbot/test/unit/test_www_avatar.py",
          "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py",
          "master/buildbot/test/unit/test_www_resource.py||master/buildbot/test/unit/test_www_resource.py",
          "master/buildbot/www/resource.py||master/buildbot/www/resource.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "master/buildbot/test/unit/test_www_auth.py||master/buildbot/test/unit/test_www_auth.py",
            "master/buildbot/test/unit/test_www_avatar.py||master/buildbot/test/unit/test_www_avatar.py",
            "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py",
            "master/buildbot/test/unit/test_www_resource.py||master/buildbot/test/unit/test_www_resource.py",
            "master/buildbot/www/resource.py||master/buildbot/www/resource.py"
          ],
          "candidate": [
            "master/buildbot/test/unit/test_www_auth.py||master/buildbot/test/unit/test_www_auth.py",
            "master/buildbot/test/unit/test_www_avatar.py||master/buildbot/test/unit/test_www_avatar.py",
            "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py",
            "master/buildbot/test/unit/test_www_resource.py||master/buildbot/test/unit/test_www_resource.py",
            "master/buildbot/www/resource.py||master/buildbot/www/resource.py"
          ]
        }
      },
      "candidate_diff": {
        "master/buildbot/test/unit/test_www_auth.py||master/buildbot/test/unit/test_www_auth.py": [
          "File: master/buildbot/test/unit/test_www_auth.py -> master/buildbot/test/unit/test_www_auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:         self.auth.updateUserInfo = mock.Mock(side_effect=updateUserInfo)",
          "238:         res = yield self.render_resource(self.rsrc, b'/auth/login')",
          "240:         self.assertFalse(self.auth.maybeAutoLogin.called)",
          "241:         self.auth.updateUserInfo.assert_called_with(mock.ANY)",
          "242:         self.assertEqual(self.master.session.user_info,",
          "",
          "[Removed Lines]",
          "239:         self.assertEqual(res, {'redirected': 'h:/a/b/#/'})",
          "",
          "[Added Lines]",
          "239:         self.assertEqual(res, {'redirected': b'h:/a/b/#/'})",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:     def test_render(self):",
          "254:         self.master.session.expire = mock.Mock()",
          "255:         res = yield self.render_resource(self.rsrc, b'/auth/logout')",
          "257:         self.master.session.expire.assert_called_with()",
          "",
          "[Removed Lines]",
          "256:         self.assertEqual(res, {'redirected': 'h:/a/b/#/'})",
          "",
          "[Added Lines]",
          "256:         self.assertEqual(res, {'redirected': b'h:/a/b/#/'})",
          "257:         self.master.session.expire.assert_called_with()",
          "259:     @defer.inlineCallbacks",
          "260:     def test_render_with_crlf(self):",
          "261:         self.master.session.expire = mock.Mock()",
          "262:         res = yield self.render_resource(self.rsrc, b'/auth/logout?redirect=%0d%0abla')",
          "263:         # everything after a %0d shall be stripped",
          "264:         self.assertEqual(res, {'redirected': b'h:/a/b/#'})",
          "",
          "---------------"
        ],
        "master/buildbot/test/unit/test_www_avatar.py||master/buildbot/test/unit/test_www_avatar.py": [
          "File: master/buildbot/test/unit/test_www_avatar.py -> master/buildbot/test/unit/test_www_avatar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         rsrc.reconfigResource(master.config)",
          "47:         res = yield self.render_resource(rsrc, b'/?email=foo')",
          "51:     @defer.inlineCallbacks",
          "52:     def test_custom(self):",
          "",
          "[Removed Lines]",
          "48:         self.assertEqual(res, dict(redirected='//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
          "49:                                    'def654fccc4a4d8?d=retro&s=32'))",
          "",
          "[Added Lines]",
          "48:         self.assertEqual(res, dict(redirected=b'//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
          "49:                                    b'def654fccc4a4d8?d=retro&s=32'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         rsrc.reconfigResource(master.config)",
          "81:         res = yield self.render_resource(rsrc, b'/?email=foo')",
          "",
          "[Removed Lines]",
          "82:         self.assertEqual(res, dict(redirected='//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
          "83:                          'def654fccc4a4d8?d=retro&s=32'))",
          "",
          "[Added Lines]",
          "82:         self.assertEqual(res, dict(redirected=b'//www.gravatar.com/avatar/acbd18db4cc2f85ce'",
          "83:                          b'def654fccc4a4d8?d=retro&s=32'))",
          "",
          "---------------"
        ],
        "master/buildbot/test/unit/test_www_oauth.py||master/buildbot/test/unit/test_www_oauth.py": [
          "File: master/buildbot/test/unit/test_www_oauth.py -> master/buildbot/test/unit/test_www_oauth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:         res = yield self.render_resource(rsrc, b'/')",
          "430:         rsrc.auth.getLoginURL.assert_called_once_with(None)",
          "431:         rsrc.auth.verifyCode.assert_not_called()",
          "433:         rsrc.auth.getLoginURL.reset_mock()",
          "434:         rsrc.auth.verifyCode.reset_mock()",
          "435:         res = yield self.render_resource(rsrc, b'/?code=code!')",
          "436:         rsrc.auth.getLoginURL.assert_not_called()",
          "437:         rsrc.auth.verifyCode.assert_called_once_with(b\"code!\")",
          "438:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
          "440:         res = yield self.render_resource(rsrc, b'/?token=token!')",
          "441:         rsrc.auth.getLoginURL.assert_not_called()",
          "442:         rsrc.auth.acceptToken.assert_called_once_with(b\"token!\")",
          "443:         self.assertEqual(self.master.session.user_info, {'username': 'bar'})",
          "446:     def test_getConfig(self):",
          "447:         self.assertEqual(self.githubAuth.getConfigDict(), {'fa_icon': 'fa-github', 'autologin': False,",
          "",
          "[Removed Lines]",
          "432:         self.assertEqual(res, {'redirected': '://'})",
          "439:         self.assertEqual(res, {'redirected': '://me'})",
          "444:         self.assertEqual(res, {'redirected': '://me'})",
          "",
          "[Added Lines]",
          "432:         self.assertEqual(res, {'redirected': b'://'})",
          "439:         self.assertEqual(res, {'redirected': b'://me'})",
          "444:         self.assertEqual(res, {'redirected': b'://me'})",
          "",
          "---------------"
        ],
        "master/buildbot/test/unit/test_www_resource.py||master/buildbot/test/unit/test_www_resource.py": [
          "File: master/buildbot/test/unit/test_www_resource.py -> master/buildbot/test/unit/test_www_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         rsrc = resource.RedirectResource(master, b'foo')",
          "48:         self.render_resource(rsrc, b'/')",
          "49:         self.assertEqual(self.request.redirected_to, b'h:/a/b/foo')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     def test_redirect_cr_lf(self):",
          "52:         master = self.make_master(url=b'h:/a/b/')",
          "53:         rsrc = resource.RedirectResource(master, b'foo\\r\\nbar')",
          "54:         self.render_resource(rsrc, b'/')",
          "55:         self.assertEqual(self.request.redirected_to, b'h:/a/b/foo')",
          "",
          "---------------"
        ],
        "master/buildbot/www/resource.py||master/buildbot/www/resource.py": [
          "File: master/buildbot/www/resource.py -> master/buildbot/www/resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: from __future__ import absolute_import",
          "17: from __future__ import print_function",
          "19: from twisted.internet import defer",
          "20: from twisted.python import log",
          "21: from twisted.web import resource",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import re",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: from buildbot.util import unicode2bytes",
          "30:     def __init__(self, url):",
          "31:         Error.__init__(self, 302, \"redirect\")",
          "35: class Resource(resource.Resource):",
          "",
          "[Removed Lines]",
          "28: class Redirect(Error):",
          "32:         self.url = url",
          "",
          "[Added Lines]",
          "29: _CR_LF_RE = re.compile(br\"[\\r\\n]+.*\")",
          "32: def protect_redirect_url(url):",
          "33:     return _CR_LF_RE.sub(b\"\", url)",
          "36: class Redirect(Error):",
          "39:         self.url = protect_redirect_url(unicode2bytes(url))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     def render(self, request):",
          "117:         redir = self.base_url + self.basepath",
          "119:         return redir",
          "",
          "[Removed Lines]",
          "118:         request.redirect(redir)",
          "",
          "[Added Lines]",
          "125:         request.redirect(protect_redirect_url(redir))",
          "",
          "---------------"
        ]
      }
    }
  ]
}