{
  "cve_id": "CVE-2021-22881",
  "cve_desc": "The Host Authorization middleware in Action Pack before 6.1.2.1, 6.0.3.5 suffers from an open redirect vulnerability. Specially crafted `Host` headers in combination with certain \"allowed host\" formats can cause the Host Authorization middleware in Action Pack to redirect users to a malicious website. Impacted applications will have allowed hosts with a leading dot. When an allowed host contains a leading dot, a specially crafted `Host` header can be used to redirect to a malicious website.",
  "repo": "rails/rails",
  "patch_hash": "b5de7b3a4787d8a55aaad39f477c16e3af65e444",
  "patch_info": {
    "commit_hash": "b5de7b3a4787d8a55aaad39f477c16e3af65e444",
    "repo": "rails/rails",
    "commit_url": "https://github.com/rails/rails/commit/b5de7b3a4787d8a55aaad39f477c16e3af65e444",
    "files": [
      "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "actionpack/test/dispatch/host_authorization_test.rb"
    ],
    "message": "Prevent open redirect when allowed host starts with a dot\n\n[CVE-2021-22881]\n\nThanks to @tktech (https://hackerone.com/tktech) for reporting this\nissue and the patch!",
    "before_after_code_files": [
      "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
    ]
  },
  "patch_diff": {
    "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
      "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:     private",
      "105:       def authorized?(request)",
      "111:       end",
      "113:       def excluded?(request)",
      "",
      "[Removed Lines]",
      "106:         origin_host = request.get_header(\"HTTP_HOST\").to_s.sub(/:\\d+\\z/, \"\")",
      "107:         forwarded_host = request.x_forwarded_host.to_s.split(/,\\s?/).last.to_s.sub(/:\\d+\\z/, \"\")",
      "109:         @permissions.allows?(origin_host) &&",
      "110:           (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
      "",
      "[Added Lines]",
      "106:         valid_host = /",
      "107:           \\A",
      "108:           (?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])",
      "109:           (:\\d+)?",
      "110:           \\z",
      "111:         /x",
      "113:         origin_host = valid_host.match(",
      "114:           request.get_header(\"HTTP_HOST\").to_s.downcase)",
      "115:         forwarded_host = valid_host.match(",
      "116:           request.x_forwarded_host.to_s.split(/,\\s?/).last)",
      "118:         origin_host && @permissions.allows?(origin_host[:host]) && (",
      "119:           forwarded_host.nil? || @permissions.allows?(forwarded_host[:host]))",
      "",
      "---------------"
    ],
    "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
      "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "221:     assert_match \"Blocked host: www.example.com\", response.body",
      "222:   end",
      "224:   test \"config setting action_dispatch.hosts_response_app is deprecated\" do",
      "225:     assert_deprecated do",
      "226:       ActionDispatch::HostAuthorization.new(App, \"example.com\", ->(env) { true })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "224:   test \"only compare to valid hostnames\" do",
      "225:     @app = ActionDispatch::HostAuthorization.new(App, \".example.com\")",
      "227:     get \"/\", env: {",
      "228:       \"HOST\" => \"example.com#sub.example.com\",",
      "229:     }",
      "231:     assert_response :forbidden",
      "232:     assert_match \"Blocked host: example.com#sub.example.com\", response.body",
      "233:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aecba3c301b80e9d5a63c30ea1b287bceaf2c107",
      "candidate_info": {
        "commit_hash": "aecba3c301b80e9d5a63c30ea1b287bceaf2c107",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/aecba3c301b80e9d5a63c30ea1b287bceaf2c107",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Fix invalid forwarded host vulnerability\n\nPrior to this commit, it was possible to pass an unvalidated host\nthrough the `X-Forwarded-Host` header. If the value of the header\nwas prefixed with a invalid domain character (for example a `/`),\nit was always accepted as the actual host of that request.\n\nSince this host is used for all url helpers, an attacker could change\ngenerated links and redirects. If the header is set to\n`X-Forwarded-Host: //evil.hacker`, a redirect will be send to\n`https:////evil.hacker/`. Browsers will ignore these four slashes\nand redirect the user.\n\n[CVE-2021-44528]",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         def sanitize_string(host)",
          "53:           if host.start_with?(\".\")",
          "55:           else",
          "56:             /\\A#{Regexp.escape host}\\z/i",
          "57:           end",
          "",
          "[Removed Lines]",
          "54:             /\\A(.+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "[Added Lines]",
          "54:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     end",
          "104:     private",
          "109:       def authorized?(request)",
          "113:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "114:       end",
          "",
          "[Removed Lines]",
          "105:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
          "106:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
          "107:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
          "110:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
          "111:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
          "",
          "[Added Lines]",
          "106:         origin_host = request.get_header(\"HTTP_HOST\")",
          "107:         forwarded_host = request.x_forwarded_host&.split(/,\\s?/)&.last",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     assert_match \"Blocked host: 127.0.0.1\", response.body",
          "156:   end",
          "158:   test \"does not consider IP addresses in X-FORWARDED-HOST spoofed when disabled\" do",
          "159:     @app = ActionDispatch::HostAuthorization.new(App, nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:   test \"blocks requests with spoofed relative X-FORWARDED-HOST\" do",
          "159:     @app = ActionDispatch::HostAuthorization.new(App, [\"www.example.com\"])",
          "161:     get \"/\", env: {",
          "162:       \"HTTP_X_FORWARDED_HOST\" => \"//randomhost.com\",",
          "163:       \"HOST\" => \"www.example.com\",",
          "164:       \"action_dispatch.show_detailed_exceptions\" => true",
          "165:     }",
          "167:     assert_response :forbidden",
          "168:     assert_match \"Blocked host: //randomhost.com\", response.body",
          "169:   end",
          "171:   test \"forwarded secondary hosts are allowed when permitted\" do",
          "172:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "174:     get \"/\", env: {",
          "175:       \"HTTP_X_FORWARDED_HOST\" => \"example.com, my-sub.domain.com\",",
          "176:       \"HOST\" => \"domain.com\",",
          "177:     }",
          "179:     assert_response :ok",
          "180:     assert_equal \"Success\", body",
          "181:   end",
          "183:   test \"forwarded secondary hosts are blocked when mismatch\" do",
          "184:     @app = ActionDispatch::HostAuthorization.new(App, \"domain.com\")",
          "186:     get \"/\", env: {",
          "187:       \"HTTP_X_FORWARDED_HOST\" => \"domain.com, evil.com\",",
          "188:       \"HOST\" => \"domain.com\",",
          "189:       \"action_dispatch.show_detailed_exceptions\" => true",
          "190:     }",
          "192:     assert_response :forbidden",
          "193:     assert_match \"Blocked host: evil.com\", response.body",
          "194:   end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:     assert_match \"Blocked host: sub.domain.com\", response.body",
          "192:   end",
          "194:   test \"forwarded hosts are allowed when permitted\" do",
          "195:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "197:     get \"/\", env: {",
          "199:       \"HOST\" => \"domain.com\",",
          "200:     }",
          "",
          "[Removed Lines]",
          "198:       \"HTTP_X_FORWARDED_HOST\" => \"sub.domain.com\",",
          "",
          "[Added Lines]",
          "232:   test \"sub-sub domains should not be permitted\" do",
          "233:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
          "235:     get \"/\", env: {",
          "236:       \"HOST\" => \"secondary.sub.domain.com\",",
          "237:       \"action_dispatch.show_detailed_exceptions\" => true",
          "238:     }",
          "240:     assert_response :forbidden",
          "241:     assert_match \"Blocked host: secondary.sub.domain.com\", response.body",
          "242:   end",
          "248:       \"HTTP_X_FORWARDED_HOST\" => \"my-sub.domain.com\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     assert_equal \"Success\", body",
          "204:   end",
          "206:   test \"exclude matches allow any host\" do",
          "207:     @app = ActionDispatch::HostAuthorization.new(App, \"only.com\", exclude: ->(req) { req.path == \"/foo\" })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:   test \"lots of NG hosts\" do",
          "257:     ng_hosts = [",
          "258:       \"hacker%E3%80%82com\",",
          "259:       \"hacker%00.com\",",
          "260:       \"www.theirsite.com@yoursite.com\",",
          "261:       \"hacker.com/test/\",",
          "262:       \"hacker%252ecom\",",
          "263:       \".hacker.com\",",
          "264:       \"/\\/\\/hacker.com/\",",
          "265:       \"/hacker.com\",",
          "266:       \"../hacker.com\",",
          "267:       \".hacker.com\",",
          "268:       \"@hacker.com\",",
          "269:       \"hacker.com\",",
          "270:       \"hacker.com%23@example.com\",",
          "271:       \"hacker.com/.jpg\",",
          "272:       \"hacker.com\\texample.com/\",",
          "273:       \"hacker.com/example.com\",",
          "274:       \"hacker.com\\@example.com\",",
          "275:       \"hacker.com/example.com\",",
          "276:       \"hacker.com/\"",
          "277:     ]",
          "279:     @app = ActionDispatch::HostAuthorization.new(App, \"example.com\")",
          "281:     ng_hosts.each do |host|",
          "282:       get \"/\", env: {",
          "283:         \"HTTP_X_FORWARDED_HOST\" => host,",
          "284:         \"HOST\" => \"example.com\",",
          "285:         \"action_dispatch.show_detailed_exceptions\" => true",
          "286:       }",
          "288:       assert_response :forbidden",
          "289:       assert_match \"Blocked host: #{host}\", response.body",
          "290:     end",
          "291:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e9973d6e020b98a5ec71578aa1837efcf4d7b7e",
      "candidate_info": {
        "commit_hash": "5e9973d6e020b98a5ec71578aa1837efcf4d7b7e",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/5e9973d6e020b98a5ec71578aa1837efcf4d7b7e",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb",
          "railties/test/application/middleware/remote_ip_test.rb",
          "railties/test/isolation/abstract_unit.rb"
        ],
        "message": "Refactor CVE-2021-22881 fix\n\nFollow-up to 83a6ac3fee8fd538ce7e0088913ff54f0f9bcb6f.\n\nThis allows `HTTP_HOST` to be omitted as before, and reduces the number\nof object allocations per request.\n\nBenchmark:\n\n```ruby\n # frozen_string_literal: true\nrequire \"benchmark/memory\"\n\nHOST = \"example.com:80\"\nBEFORE_REGEXP = /\\A(?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\])(:\\d+)?\\z/\nAFTER_REGEXP = /(?:\\A|,[ ]?)([a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\])(?::\\d+)?\\z/i\n\nBenchmark.memory do |x|\n  x.report(\"BEFORE (non-nil X-Forwarded-Host)\") do\n    origin_host = BEFORE_REGEXP.match(HOST.to_s.downcase)[:host]\n    forwarded_host = BEFORE_REGEXP.match(HOST.to_s.split(/,\\s?/).last)[:host]\n  end\n\n  x.report(\"BEFORE (nil X-Forwarded-Host)\") do\n    origin_host = BEFORE_REGEXP.match(HOST.to_s.downcase)[:host]\n    forwarded_host = BEFORE_REGEXP.match(nil.to_s.split(/,\\s?/).last)\n  end\n\n  x.report(\"AFTER (non-nil X-Forwarded-Host)\") do\n    origin_host = HOST&.slice(AFTER_REGEXP, 1) || \"\"\n    forwarded_host = HOST&.slice(AFTER_REGEXP, 1) || \"\"\n  end\n\n  x.report(\"AFTER (nil X-Forwarded-Host)\") do\n    origin_host = HOST&.slice(AFTER_REGEXP, 1) || \"\"\n    forwarded_host = nil&.slice(AFTER_REGEXP, 1) || \"\"\n  end\nend\n```\n\nResults:\n\n```\nBEFORE (non-nil X-Forwarded-Host)\n                       616.000  memsize (   208.000  retained)\n                         9.000  objects (     2.000  retained)\n                         2.000  strings (     1.000  retained)\nBEFORE (nil X-Forwarded-Host)\n                       328.000  memsize (     0.000  retained)\n                         5.000  objects (     0.000  retained)\n                         2.000  strings (     0.000  retained)\nAFTER (non-nil X-Forwarded-Host)\n                       248.000  memsize (   168.000  retained)\n                         3.000  objects (     1.000  retained)\n                         1.000  strings (     0.000  retained)\nAFTER (nil X-Forwarded-Host)\n                        40.000  memsize (     0.000  retained)\n                         1.000  objects (     0.000  retained)\n                         1.000  strings (     0.000  retained)\n```\n\n[CVE-2021-22942]",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb",
          "railties/test/application/middleware/remote_ip_test.rb||railties/test/application/middleware/remote_ip_test.rb",
          "railties/test/isolation/abstract_unit.rb||railties/test/isolation/abstract_unit.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     end",
          "104:     private",
          "105:       def authorized?(request)",
          "120:       end",
          "122:       def excluded?(request)",
          "",
          "[Removed Lines]",
          "106:         valid_host = /",
          "107:           \\A",
          "108:           (?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\])",
          "109:           (:\\d+)?",
          "110:           \\z",
          "111:         /x",
          "113:         origin_host = valid_host.match(",
          "114:           request.get_header(\"HTTP_HOST\").to_s.downcase)",
          "115:         forwarded_host = valid_host.match(",
          "116:           request.x_forwarded_host.to_s.split(/,\\s?/).last)",
          "118:         origin_host && @permissions.allows?(origin_host[:host]) && (",
          "119:           forwarded_host.nil? || @permissions.allows?(forwarded_host[:host]))",
          "",
          "[Added Lines]",
          "105:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
          "106:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
          "107:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
          "110:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
          "111:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
          "113:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     assert_match \"Blocked host: www.example.com\", response.body",
          "222:   end",
          "225:     @app = ActionDispatch::HostAuthorization.new(App, \".example.com\")",
          "227:     get \"/\", env: {",
          "229:     }",
          "231:     assert_response :forbidden",
          "233:   end",
          "235:   test \"blocks requests to similar host\" do",
          "",
          "[Removed Lines]",
          "224:   test \"only compare to valid hostnames\" do",
          "228:       \"HOST\" => \"example.com#sub.example.com\",",
          "232:     assert_match \"Blocked host: example.com#sub.example.com\", response.body",
          "",
          "[Added Lines]",
          "224:   test \"blocks requests with invalid hostnames\" do",
          "228:       \"HOST\" => \"attacker.com#x.example.com\",",
          "232:     assert_match \"Blocked host: attacker.com#x.example.com\", response.body",
          "",
          "---------------"
        ],
        "railties/test/application/middleware/remote_ip_test.rb||railties/test/application/middleware/remote_ip_test.rb": [
          "File: railties/test/application/middleware/remote_ip_test.rb -> railties/test/application/middleware/remote_ip_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     def remote_ip(env = {})",
          "12:       remote_ip = nil",
          "13:       env = Rack::MockRequest.env_for(\"/\").merge(env).merge!(",
          "15:         \"action_dispatch.show_exceptions\" => false,",
          "16:         \"action_dispatch.key_generator\" => ActiveSupport::CachingKeyGenerator.new(",
          "17:           ActiveSupport::KeyGenerator.new(\"b3c631c314c0bbca50c1b2843150fe33\", iterations: 1000)",
          "",
          "[Removed Lines]",
          "14:         \"HTTP_HOST\" => \"example.com\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "railties/test/isolation/abstract_unit.rb||railties/test/isolation/abstract_unit.rb": [
          "File: railties/test/isolation/abstract_unit.rb -> railties/test/isolation/abstract_unit.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     end",
          "84:     def get(path)",
          "86:     end",
          "88:     def assert_welcome(resp)",
          "",
          "[Removed Lines]",
          "85:       @app.call(::Rack::MockRequest.env_for(path, \"HTTP_HOST\" => \"example.com\"))",
          "",
          "[Added Lines]",
          "85:       @app.call(::Rack::MockRequest.env_for(path))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32064abd0a8f78964906b616143df56af01637ea",
      "candidate_info": {
        "commit_hash": "32064abd0a8f78964906b616143df56af01637ea",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/32064abd0a8f78964906b616143df56af01637ea",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "railties/test/application/middleware/remote_ip_test.rb",
          "railties/test/isolation/abstract_unit.rb"
        ],
        "message": "Remove unnessary escape char in Regexp\n\nFix the test by defining a valid host on the mocked requests.",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "railties/test/application/middleware/remote_ip_test.rb||railties/test/application/middleware/remote_ip_test.rb",
          "railties/test/isolation/abstract_unit.rb||railties/test/isolation/abstract_unit.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:       def authorized?(request)",
          "106:         valid_host = /",
          "107:           \\A",
          "109:           (:\\d+)?",
          "110:           \\z",
          "111:         /x",
          "",
          "[Removed Lines]",
          "108:           (?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])",
          "",
          "[Added Lines]",
          "108:           (?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\])",
          "",
          "---------------"
        ],
        "railties/test/application/middleware/remote_ip_test.rb||railties/test/application/middleware/remote_ip_test.rb": [
          "File: railties/test/application/middleware/remote_ip_test.rb -> railties/test/application/middleware/remote_ip_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     def remote_ip(env = {})",
          "12:       remote_ip = nil",
          "13:       env = Rack::MockRequest.env_for(\"/\").merge(env).merge!(",
          "14:         \"action_dispatch.show_exceptions\" => false,",
          "16:           ActiveSupport::KeyGenerator.new(\"b3c631c314c0bbca50c1b2843150fe33\", iterations: 1000)",
          "17:         )",
          "18:       )",
          "",
          "[Removed Lines]",
          "15:         \"action_dispatch.key_generator\"   => ActiveSupport::CachingKeyGenerator.new(",
          "",
          "[Added Lines]",
          "14:         \"HTTP_HOST\" => \"example.com\",",
          "16:         \"action_dispatch.key_generator\" => ActiveSupport::CachingKeyGenerator.new(",
          "",
          "---------------"
        ],
        "railties/test/isolation/abstract_unit.rb||railties/test/isolation/abstract_unit.rb": [
          "File: railties/test/isolation/abstract_unit.rb -> railties/test/isolation/abstract_unit.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     end",
          "84:     def get(path)",
          "86:     end",
          "88:     def assert_welcome(resp)",
          "",
          "[Removed Lines]",
          "85:       @app.call(::Rack::MockRequest.env_for(path))",
          "",
          "[Added Lines]",
          "85:       @app.call(::Rack::MockRequest.env_for(path, \"HTTP_HOST\" => \"example.com\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a6ac3fee8fd538ce7e0088913ff54f0f9bcb6f",
      "candidate_info": {
        "commit_hash": "83a6ac3fee8fd538ce7e0088913ff54f0f9bcb6f",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/83a6ac3fee8fd538ce7e0088913ff54f0f9bcb6f",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Prevent open redirect when allowed host starts with a dot\n\n[CVE-2021-22881]\n\nThanks to @tktech (https://hackerone.com/tktech) for reporting this\nissue and the patch!",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     private",
          "105:       def authorized?(request)",
          "111:       end",
          "113:       def excluded?(request)",
          "",
          "[Removed Lines]",
          "106:         origin_host = request.get_header(\"HTTP_HOST\").to_s.sub(/:\\d+\\z/, \"\")",
          "107:         forwarded_host = request.x_forwarded_host.to_s.split(/,\\s?/).last.to_s.sub(/:\\d+\\z/, \"\")",
          "109:         @permissions.allows?(origin_host) &&",
          "110:           (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "",
          "[Added Lines]",
          "106:         valid_host = /",
          "107:           \\A",
          "108:           (?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])",
          "109:           (:\\d+)?",
          "110:           \\z",
          "111:         /x",
          "113:         origin_host = valid_host.match(",
          "114:           request.get_header(\"HTTP_HOST\").to_s.downcase)",
          "115:         forwarded_host = valid_host.match(",
          "116:           request.x_forwarded_host.to_s.split(/,\\s?/).last)",
          "118:         origin_host && @permissions.allows?(origin_host[:host]) && (",
          "119:           forwarded_host.nil? || @permissions.allows?(forwarded_host[:host]))",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     assert_match \"Blocked host: www.example.com\", response.body",
          "222:   end",
          "224:   test \"config setting action_dispatch.hosts_response_app is deprecated\" do",
          "225:     assert_deprecated do",
          "226:       ActionDispatch::HostAuthorization.new(App, \"example.com\", ->(env) { true })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:   test \"only compare to valid hostnames\" do",
          "225:     @app = ActionDispatch::HostAuthorization.new(App, \".example.com\")",
          "227:     get \"/\", env: {",
          "228:       \"HOST\" => \"example.com#sub.example.com\",",
          "229:     }",
          "231:     assert_response :forbidden",
          "232:     assert_match \"Blocked host: example.com#sub.example.com\", response.body",
          "233:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e33092740b3cc05f5abee197a5982eac31947e92",
      "candidate_info": {
        "commit_hash": "e33092740b3cc05f5abee197a5982eac31947e92",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/e33092740b3cc05f5abee197a5982eac31947e92",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Prevent open redirect when allowed host starts with a dot\n\n[CVE-2021-22881]\n\nThanks to @tktech (https://hackerone.com/tktech) for reporting this\nissue and the patch!",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     private",
          "89:       def authorized?(request)",
          "95:       end",
          "97:       def mark_as_authorized(request)",
          "",
          "[Removed Lines]",
          "90:         origin_host = request.get_header(\"HTTP_HOST\").to_s.sub(/:\\d+\\z/, \"\")",
          "91:         forwarded_host = request.x_forwarded_host.to_s.split(/,\\s?/).last.to_s.sub(/:\\d+\\z/, \"\")",
          "93:         @permissions.allows?(origin_host) &&",
          "94:           (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
          "",
          "[Added Lines]",
          "90:         valid_host = /",
          "91:           \\A",
          "92:           (?<host>[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])",
          "93:           (:\\d+)?",
          "94:           \\z",
          "95:         /x",
          "97:         origin_host = valid_host.match(",
          "98:           request.get_header(\"HTTP_HOST\").to_s.downcase)",
          "99:         forwarded_host = valid_host.match(",
          "100:           request.x_forwarded_host.to_s.split(/,\\s?/).last)",
          "102:         origin_host && @permissions.allows?(origin_host[:host]) && (",
          "103:           forwarded_host.nil? || @permissions.allows?(forwarded_host[:host]))",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     assert_response :ok",
          "159:     assert_equal \"Success\", body",
          "160:   end",
          "161: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:   test \"only compare to valid hostnames\" do",
          "163:     @app = ActionDispatch::HostAuthorization.new(App, \".example.com\")",
          "165:     get \"/\", env: {",
          "166:       \"HOST\" => \"example.com#sub.example.com\",",
          "167:     }",
          "169:     assert_response :forbidden",
          "170:     assert_match \"Blocked host: example.com#sub.example.com\", response.body",
          "171:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}