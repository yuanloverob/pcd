{
  "cve_id": "CVE-2024-10451",
  "cve_desc": "A flaw was found in Keycloak. This issue occurs because sensitive runtime values, such as passwords, may be captured during the Keycloak build process and embedded as default values in bytecode, leading to unintended information disclosure. In Keycloak 26, sensitive data specified directly in environment variables during the build process is also stored as a default values, making it accessible during runtime. Indirect usage of environment variables for SPI options and Quarkus properties is also vulnerable due to unconditional expansion by PropertyMapper logic, capturing sensitive data as default values in all Keycloak versions up to 26.0.2.",
  "repo": "keycloak/keycloak",
  "patch_hash": "198214310eb45b86707f823ccb5a2d65c814b528",
  "patch_info": {
    "commit_hash": "198214310eb45b86707f823ccb5a2d65c814b528",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/198214310eb45b86707f823ccb5a2d65c814b528",
    "files": [
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
      "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
    ],
    "message": "fix: ensures that properties are runtime properties are filtered (#35246)\n\ncloses: #CVE-2024-10451\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>",
    "before_after_code_files": [
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
      "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
      "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java"
    ]
  },
  "patch_diff": {
    "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
      "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: import org.keycloak.config.DeprecatedMetadata;",
      "43: import org.keycloak.config.Option;",
      "45: import org.keycloak.config.OptionCategory;",
      "46: import org.keycloak.quarkus.runtime.cli.PropertyException;",
      "47: import org.keycloak.quarkus.runtime.cli.ShortErrorMessageHandler;",
      "",
      "[Removed Lines]",
      "44: import org.keycloak.config.OptionBuilder;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: public class PropertyMapper<T> {",
      "78:     private final Option<T> option;",
      "79:     private final String to;",
      "80:     private BooleanSupplier enabled;",
      "",
      "[Removed Lines]",
      "58:     static PropertyMapper<?> IDENTITY = new PropertyMapper<>(",
      "59:             new OptionBuilder<>(null, String.class).build(),",
      "60:             null,",
      "61:             () -> false,",
      "62:             \"\",",
      "63:             null,",
      "64:             null,",
      "65:             null,",
      "66:             null,",
      "67:             false,",
      "68:             null,",
      "69:             null,",
      "70:             () -> false,",
      "71:             \"\") {",
      "72:         @Override",
      "73:         public ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
      "74:             return context.proceed(name);",
      "75:         }",
      "76:     };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java": [
      "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: import org.keycloak.quarkus.runtime.cli.command.Build;",
      "15: import org.keycloak.quarkus.runtime.cli.command.ShowConfig;",
      "16: import org.keycloak.quarkus.runtime.configuration.DisabledMappersInterceptor;",
      "17: import org.keycloak.quarkus.runtime.configuration.PersistedConfigSource;",
      "19: import java.util.ArrayList;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:     }",
      "76:     public static ConfigValue getValue(ConfigSourceInterceptorContext context, String name) {",
      "78:     }",
      "80:     public static boolean isSpiBuildTimeProperty(String name) {",
      "81:         return name.startsWith(KC_SPI_PREFIX) && (name.endsWith(\"-provider\") || name.endsWith(\"-enabled\") || name.endsWith(\"-provider-default\"));",
      "82:     }",
      "84:     public static Map<OptionCategory, List<PropertyMapper<?>>> getRuntimeMappers() {",
      "85:         return MAPPERS.getRuntimeMappers();",
      "86:     }",
      "",
      "[Removed Lines]",
      "77:         return getMapperOrDefault(name, PropertyMapper.IDENTITY).getConfigValue(name, context);",
      "",
      "[Added Lines]",
      "78:         PropertyMapper<?> mapper = getMapper(name);",
      "80:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper)) {",
      "81:             return ConfigValue.builder().withName(name).build();",
      "82:         }",
      "83:         if (mapper == null) {",
      "84:             return context.proceed(name);",
      "85:         }",
      "86:         return mapper.getConfigValue(name, context);",
      "93:     private static boolean isKeycloakRuntime(String name, PropertyMapper<?> mapper) {",
      "94:         if (mapper == null) {",
      "95:             return name.startsWith(MicroProfileConfigProvider.NS_KEYCLOAK) && !isSpiBuildTimeProperty(name);",
      "96:         }",
      "97:         return mapper.isRunTime();",
      "98:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:         };",
      "151:     }",
      "157:     public static PropertyMapper<?> getMapper(String property, OptionCategory category) {",
      "158:         return getMapperOrDefault(property, null, category);",
      "159:     }",
      "",
      "[Removed Lines]",
      "153:     private static PropertyMapper<?> getMapperOrDefault(String property, PropertyMapper<?> defaultMapper) {",
      "154:         return getMapperOrDefault(property, defaultMapper, null);",
      "155:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "172:     }",
      "174:     public static Optional<PropertyMapper<?>> getDisabledMapper(String property) {",
      "177:         PropertyMapper<?> mapper = getDisabledBuildTimeMappers().get(property);",
      "178:         if (mapper == null) {",
      "",
      "[Removed Lines]",
      "175:         if (property == null) return Optional.empty();",
      "",
      "[Added Lines]",
      "187:         if (property == null) {",
      "188:             return Optional.empty();",
      "189:         }",
      "",
      "---------------"
    ],
    "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java": [
      "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/StartCommandDistTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:         cliResult.assertError(\"File specified via '--config-file' or '-cf' option does not exist.\");",
      "248:         cliResult.assertError(String.format(\"Try '%s --help' for more information on the available options.\", KeycloakDistribution.SCRIPT_CMD));",
      "249:     }",
      "250: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @RawDistOnly(reason = \"Containers are immutable\")",
      "252:     @Test",
      "253:     void testRuntimeValuesAreNotCaptured(KeycloakDistribution dist) {",
      "256:         CLIResult cliResult = dist.run(\"start\", \"--spi-events-listener-jboss-logging-success-level=invalid\", \"--http-enabled\", \"true\", \"--hostname-strict\", \"false\");",
      "257:         cliResult.assertError(\"Failed to start quarkus\");",
      "260:         if (!cliResult.getOutput().contains(\"Server configuration updated and persisted\")) {",
      "261:             cliResult = dist.run(\"build\", \"--spi-events-listener-jboss-logging-success-level=invalid\");",
      "262:             cliResult.assertBuild();",
      "263:         }",
      "266:         cliResult = dist.run(\"start\", \"--http-enabled\", \"true\", \"--hostname-strict\", \"false\");",
      "267:         cliResult.assertNoBuild();",
      "268:         cliResult.assertStarted();",
      "269:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14e44f7d8cab3680d1cdabd1ead797cadefb666c",
      "candidate_info": {
        "commit_hash": "14e44f7d8cab3680d1cdabd1ead797cadefb666c",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/14e44f7d8cab3680d1cdabd1ead797cadefb666c",
        "files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java"
        ],
        "message": "task: refinements to propertymapping\n\ncloses: #32724\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>",
        "before_after_code_files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "4: import static org.keycloak.quarkus.runtime.configuration.Configuration.getOptionalKcValue;",
          "5: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Removed Lines]",
          "3: import static java.util.Optional.of;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:                     .paramLabel(\"stack\")",
          "39:                     .build(),",
          "40:               fromOption(CachingOptions.CACHE_CONFIG_FILE)",
          "42:                     .to(\"kc.spi-connections-infinispan-quarkus-config-file\")",
          "43:                     .transformer(CachingPropertyMappers::resolveConfigFile)",
          "44:                     .paramLabel(\"file\")",
          "",
          "[Removed Lines]",
          "41:                     .mapFrom(\"cache\")",
          "",
          "[Added Lines]",
          "40:                     .mapFrom(CachingOptions.CACHE, (value, context) -> {",
          "41:                         if (CachingOptions.Mechanism.local.name().equals(value)) {",
          "42:                             return \"cache-local.xml\";",
          "43:                         } else if (CachingOptions.Mechanism.ispn.name().equals(value)) {",
          "44:                             return \"cache-ispn.xml\";",
          "45:                         } else",
          "46:                             return null;",
          "47:                     })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         return getOptionalKcValue(CachingOptions.CACHE_REMOTE_HOST_PROPERTY).isPresent();",
          "101:     }",
          "110:         String pathPrefix;",
          "111:         String homeDir = Environment.getHomeDir();",
          "",
          "[Removed Lines]",
          "103:     private static Optional<String> resolveConfigFile(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "104:         if (\"local\".equals(value.get())) {",
          "105:             return of(\"cache-local.xml\");",
          "106:         } else if (\"ispn\".equals(value.get())) {",
          "107:             return of(\"cache-ispn.xml\");",
          "108:         }",
          "",
          "[Added Lines]",
          "109:     private static String resolveConfigFile(String value, ConfigSourceInterceptorContext context) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:             pathPrefix = homeDir + File.separator + \"conf\" + File.separator;",
          "117:         }",
          "120:     }",
          "122:     private static String getDefaultKeystorePathValue() {",
          "",
          "[Removed Lines]",
          "119:         return of(pathPrefix + value.get());",
          "",
          "[Added Lines]",
          "119:         return pathPrefix + value;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ClassLoaderPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import org.keycloak.quarkus.runtime.Environment;",
          "6: import org.keycloak.quarkus.runtime.configuration.IgnoredArtifacts;",
          "10: import static org.keycloak.config.ClassLoaderOptions.QUARKUS_REMOVED_ARTIFACTS_PROPERTY;",
          "11: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Removed Lines]",
          "8: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         };",
          "24:     }",
          "27:         if (Environment.isRebuildCheck() || Environment.isRebuild()) {",
          "29:         }",
          "31:         return value;",
          "",
          "[Removed Lines]",
          "26:     private static Optional<String> resolveIgnoredArtifacts(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "28:             return Optional.of(String.join(\",\", IgnoredArtifacts.getDefaultIgnoredArtifacts()));",
          "",
          "[Added Lines]",
          "24:     private static String resolveIgnoredArtifacts(String value, ConfigSourceInterceptorContext context) {",
          "26:             return String.join(\",\", IgnoredArtifacts.getDefaultIgnoredArtifacts());",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ConfigKeystorePropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import java.nio.file.Files;",
          "8: import java.nio.file.Path;",
          "11: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Removed Lines]",
          "9: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         };",
          "39:     }",
          "42:         ConfigValue path = context.proceed(SMALLRYE_KEYSTORE_PATH);",
          "43:         boolean isPasswordDefined = context.proceed(SMALLRYE_KEYSTORE_PASSWORD) != null;",
          "",
          "[Removed Lines]",
          "41:     private static Optional<String> validatePath(Optional<String> option, ConfigSourceInterceptorContext context) {",
          "",
          "[Added Lines]",
          "40:     private static String validatePath(String option, ConfigSourceInterceptorContext context) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:             throw new IllegalArgumentException(\"config-keystore path does not exist: \" + realPath);",
          "56:         }",
          "59:     }",
          "62:         boolean isPasswordDefined = context.proceed(SMALLRYE_KEYSTORE_PASSWORD).getValue() != null;",
          "63:         boolean isPathDefined = context.proceed(SMALLRYE_KEYSTORE_PATH) != null;",
          "",
          "[Removed Lines]",
          "58:         return Optional.of(realPath.toUri().toString());",
          "61:     private static Optional<String> validatePassword(Optional<String> option, ConfigSourceInterceptorContext context) {",
          "",
          "[Added Lines]",
          "57:         return realPath.toUri().toString();",
          "60:     private static String validatePassword(String option, ConfigSourceInterceptorContext context) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/DatabasePropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import org.keycloak.config.database.Database;",
          "8: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "13: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "15: final class DatabasePropertyMappers {",
          "",
          "[Removed Lines]",
          "10: import java.util.Optional;",
          "12: import static java.util.Optional.of;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     public static PropertyMapper<?>[] getDatabasePropertyMappers() {",
          "20:         return new PropertyMapper[] {",
          "21:                 fromOption(DatabaseOptions.DB_DIALECT)",
          "24:                         .build(),",
          "25:                 fromOption(DatabaseOptions.DB_DRIVER)",
          "27:                         .to(\"quarkus.datasource.jdbc.driver\")",
          "29:                         .paramLabel(\"driver\")",
          "30:                         .build(),",
          "31:                 fromOption(DatabaseOptions.DB)",
          "",
          "[Removed Lines]",
          "22:                         .mapFrom(\"db\")",
          "23:                         .transformer(DatabasePropertyMappers::transformDialect)",
          "26:                         .mapFrom(\"db\")",
          "28:                         .transformer(DatabasePropertyMappers::getXaOrNonXaDriver)",
          "",
          "[Added Lines]",
          "19:                         .mapFrom(DatabaseOptions.DB, DatabasePropertyMappers::transformDialect)",
          "22:                         .mapFrom(DatabaseOptions.DB, DatabasePropertyMappers::getXaOrNonXaDriver)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:                         .build(),",
          "36:                 fromOption(DatabaseOptions.DB_URL)",
          "37:                         .to(\"quarkus.datasource.jdbc.url\")",
          "40:                         .paramLabel(\"jdbc-url\")",
          "41:                         .build(),",
          "42:                 fromOption(DatabaseOptions.DB_URL_HOST)",
          "",
          "[Removed Lines]",
          "38:                         .mapFrom(\"db\")",
          "39:                         .transformer(DatabasePropertyMappers::getDatabaseUrl)",
          "",
          "[Added Lines]",
          "33:                         .mapFrom(DatabaseOptions.DB, DatabasePropertyMappers::getDatabaseUrl)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:         };",
          "85:     }",
          "95:     }",
          "98:         ConfigValue xaEnabledConfigValue = context.proceed(\"kc.transaction-xa-enabled\");",
          "99:         boolean isXaEnabled = xaEnabledConfigValue != null && Boolean.parseBoolean(xaEnabledConfigValue.getValue());",
          "108:     }",
          "112:     }",
          "115:         if (isDevModeDatabase(context)) {",
          "117:         }",
          "119:         return value;",
          "120:     }",
          "123:         if (isDevModeDatabase(context)) {",
          "125:         }",
          "127:         return value;",
          "",
          "[Removed Lines]",
          "87:     private static Optional<String> getDatabaseUrl(Optional<String> value, ConfigSourceInterceptorContext c) {",
          "88:         Optional<String> url = Database.getDefaultUrl(value.get());",
          "90:         if (url.isPresent()) {",
          "91:             return url;",
          "92:         }",
          "94:         return value;",
          "97:     private static Optional<String> getXaOrNonXaDriver(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "101:         Optional<String> driver = Database.getDriver(value.get(), isXaEnabled);",
          "103:         if (driver.isPresent()) {",
          "104:             return driver;",
          "105:         }",
          "107:         return value;",
          "110:     private static Optional<String> toDatabaseKind(Optional<String> db, ConfigSourceInterceptorContext context) {",
          "111:         return Database.getDatabaseKind(db.get());",
          "114:     private static Optional<String> resolveUsername(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "116:             return of(\"sa\");",
          "122:     private static Optional<String> resolvePassword(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "124:             return of(\"password\");",
          "",
          "[Added Lines]",
          "81:     private static String getDatabaseUrl(String value, ConfigSourceInterceptorContext c) {",
          "82:         return Database.getDefaultUrl(value).orElse(null);",
          "85:     private static String getXaOrNonXaDriver(String value, ConfigSourceInterceptorContext context) {",
          "89:         return Database.getDriver(value, isXaEnabled).orElse(null);",
          "92:     private static String toDatabaseKind(String db, ConfigSourceInterceptorContext context) {",
          "93:         return Database.getDatabaseKind(db).orElse(null);",
          "96:     private static String resolveUsername(String value, ConfigSourceInterceptorContext context) {",
          "98:             return \"sa\";",
          "104:     private static String resolvePassword(String value, ConfigSourceInterceptorContext context) {",
          "106:             return \"password\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:         return Database.getDatabaseKind(db).get().equals(DatabaseKind.H2);",
          "133:     }",
          "149:     }",
          "151: }",
          "",
          "[Removed Lines]",
          "135:     private static Optional<String> transformDialect(Optional<String> db, ConfigSourceInterceptorContext context) {",
          "136:         Optional<String> databaseKind = Database.getDatabaseKind(db.get());",
          "138:         if (databaseKind.isEmpty()) {",
          "139:             return db;",
          "140:         }",
          "142:         Optional<String> dialect = Database.getDialect(db.get());",
          "144:         if (dialect.isPresent()) {",
          "145:             return dialect;",
          "146:         }",
          "148:         return Database.getDialect(\"dev-file\");",
          "",
          "[Added Lines]",
          "117:     private static String transformDialect(String db, ConfigSourceInterceptorContext context) {",
          "118:         return Database.getDialect(db).orElse(null);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ExportPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "28: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "32: import static org.keycloak.exportimport.ExportImportConfig.PROVIDER;",
          "33: import static org.keycloak.quarkus.runtime.configuration.Configuration.getOptionalValue;",
          "34: import static org.keycloak.quarkus.runtime.configuration.Configuration.isBlank;",
          "",
          "[Removed Lines]",
          "30: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:                 .isPresent();",
          "118:     }",
          "121:         ConfigValue exporter = context.proceed(EXPORTER_PROPERTY);",
          "122:         if (exporter != null) {",
          "124:         }",
          "126:         var file = Configuration.getOptionalValue(\"kc.spi-export-single-file-file\").map(f -> SINGLE_FILE);",
          "",
          "[Removed Lines]",
          "120:     private static Optional<String> transformExporter(Optional<String> option, ConfigSourceInterceptorContext context) {",
          "123:             return Optional.of(exporter.getValue());",
          "",
          "[Added Lines]",
          "118:     private static String transformExporter(String option, ConfigSourceInterceptorContext context) {",
          "121:             return exporter.getValue();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:         boolean xor = file.isPresent() ^ dir.isPresent();",
          "135:     }",
          "137: }",
          "",
          "[Removed Lines]",
          "134:         return xor ? file.or(() -> dir) : Optional.empty();",
          "",
          "[Added Lines]",
          "132:         return xor ? file.or(() -> dir).get() : null;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/HttpPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import java.util.Optional;",
          "19: import java.util.function.BiFunction;",
          "23: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "25: public final class HttpPropertyMappers {",
          "",
          "[Removed Lines]",
          "21: import static java.util.Optional.empty;",
          "22: import static java.util.Optional.of;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:                 fromOption(HttpOptions.HTTPS_CERTIFICATES_RELOAD_PERIOD)",
          "70:                         .to(\"quarkus.http.ssl.certificate.reload-period\")",
          "73:                         .paramLabel(\"reload period\")",
          "74:                         .build(),",
          "75:                 fromOption(HttpOptions.HTTPS_CERTIFICATE_FILE)",
          "",
          "[Removed Lines]",
          "72:                         .transformer((value, context) -> \"-1\".equals(value.get()) ? null : value)",
          "",
          "[Added Lines]",
          "70:                         .transformer((value, context) -> \"-1\".equals(value) ? null : value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:                         .build(),",
          "95:                 fromOption(HttpOptions.HTTPS_KEY_STORE_TYPE)",
          "96:                         .to(\"quarkus.http.ssl.certificate.key-store-file-type\")",
          "99:                         .paramLabel(\"type\")",
          "100:                         .build(),",
          "101:                 fromOption(HttpOptions.HTTPS_TRUST_STORE_FILE)",
          "",
          "[Removed Lines]",
          "97:                         .mapFrom(SecurityOptions.FIPS_MODE.getKey())",
          "98:                         .transformer(HttpPropertyMappers::resolveKeyStoreType)",
          "",
          "[Added Lines]",
          "95:                         .mapFrom(SecurityOptions.FIPS_MODE, HttpPropertyMappers::resolveKeyStoreType)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:                         .build(),",
          "110:                 fromOption(HttpOptions.HTTPS_TRUST_STORE_TYPE)",
          "111:                         .to(\"quarkus.http.ssl.certificate.trust-store-file-type\")",
          "114:                         .paramLabel(\"type\")",
          "115:                         .build(),",
          "116:                 fromOption(HttpOptions.HTTP_MAX_QUEUED_REQUESTS)",
          "",
          "[Removed Lines]",
          "112:                         .mapFrom(SecurityOptions.FIPS_MODE.getKey())",
          "113:                         .transformer(HttpPropertyMappers::resolveKeyStoreType)",
          "",
          "[Added Lines]",
          "109:                         .mapFrom(SecurityOptions.FIPS_MODE, HttpPropertyMappers::resolveKeyStoreType)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:     }",
          "135:     public static void validateConfig() {",
          "137:         boolean trustStoreFile = Configuration.getOptionalKcValue(HttpOptions.HTTPS_TRUST_STORE_FILE.getKey()).isPresent();",
          "138:         boolean keyStoreFile = Configuration.getOptionalKcValue(HttpOptions.HTTPS_KEY_STORE_FILE.getKey()).isPresent();",
          "",
          "[Removed Lines]",
          "136:         boolean enabled = isHttpEnabled(Configuration.getOptionalKcValue(HttpOptions.HTTP_ENABLED.getKey()));",
          "",
          "[Added Lines]",
          "132:         boolean enabled = isHttpEnabled(Configuration.getOptionalKcValue(HttpOptions.HTTP_ENABLED.getKey()).orElse(null));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:         }",
          "195:     }",
          "199:     }",
          "203:     }",
          "212:         }",
          "214:     }",
          "216:     private static File getDefaultKeystorePathValue() {",
          "",
          "[Removed Lines]",
          "197:     private static BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> validatePath(String key) {",
          "198:         return (value, context) -> Environment.isWindows() ? value.filter(v -> v.equals(context.proceed(key).getValue())).map(p -> p.replace(\"\\\\\", \"/\")) : value;",
          "201:     private static Optional<String> getHttpEnabledTransformer(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "202:         return of(isHttpEnabled(value) ? \"enabled\" : \"disabled\");",
          "205:     private static boolean isHttpEnabled(Optional<String> value) {",
          "206:         boolean enabled = Boolean.parseBoolean(value.get());",
          "207:         Optional<String> proxy = Configuration.getOptionalKcValue(\"proxy\");",
          "209:         if (Environment.isDevMode() || Environment.isNonServerMode()",
          "210:                 || (\"edge\".equalsIgnoreCase(proxy.orElse(\"\")))) {",
          "211:             enabled = true;",
          "213:         return enabled;",
          "",
          "[Added Lines]",
          "193:     private static BiFunction<String, ConfigSourceInterceptorContext, String> validatePath(String key) {",
          "194:         return (value, context) -> Environment.isWindows() && value != null && value.equals(context.proceed(key).getValue()) ? value.replace(\"\\\\\", \"/\") : value;",
          "197:     private static String getHttpEnabledTransformer(String value, ConfigSourceInterceptorContext context) {",
          "198:         return isHttpEnabled(value) ? \"enabled\" : \"disabled\";",
          "201:     private static boolean isHttpEnabled(String value) {",
          "202:         if (Environment.isDevMode() || Environment.isNonServerMode()) {",
          "203:             return true;",
          "205:         return Boolean.parseBoolean(value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:         return null;",
          "228:     }",
          "231:             ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "240:         }",
          "242:     }",
          "245:             ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "248:         }",
          "249:         return value;",
          "250:     }",
          "",
          "[Removed Lines]",
          "230:     private static Optional<String> resolveKeyStoreType(Optional<String> value,",
          "232:         if (value.isPresent()) {",
          "233:             try {",
          "234:                 if (FipsMode.valueOfOption(value.get()).equals(FipsMode.STRICT)) {",
          "235:                     return of(\"BCFKS\");",
          "236:                 }",
          "237:                 return empty();",
          "238:             } catch (IllegalArgumentException ignore) {",
          "239:             }",
          "241:         return value;",
          "244:     private static Optional<String> resolveMaxThreads(Optional<String> value,",
          "246:         if (value.isEmpty()) {",
          "247:             return of(String.valueOf(Math.max(MIN_MAX_THREADS, 4 * Runtime.getRuntime().availableProcessors())));",
          "",
          "[Added Lines]",
          "222:     private static String resolveKeyStoreType(String value,",
          "224:         if (FipsMode.STRICT.toString().equals(value)) {",
          "225:             return \"BCFKS\";",
          "227:         return null;",
          "230:     private static String resolveMaxThreads(String value,",
          "232:         if (value == null) {",
          "233:             return String.valueOf(Math.max(MIN_MAX_THREADS, 4 * Runtime.getRuntime().availableProcessors()));",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ImportPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.keycloak.exportimport.Strategy;",
          "27: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "31: import static org.keycloak.exportimport.ExportImportConfig.PROVIDER;",
          "32: import static org.keycloak.quarkus.runtime.configuration.Configuration.getOptionalValue;",
          "33: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Removed Lines]",
          "29: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:                 .isPresent();",
          "96:     }",
          "101:         } else {",
          "103:         }",
          "104:     }",
          "107:         ConfigValue importer = context.proceed(IMPORTER_PROPERTY);",
          "108:         if (importer != null) {",
          "110:         }",
          "112:         var file = getOptionalValue(\"kc.spi-import-single-file-file\").map(f -> SINGLE_FILE);",
          "",
          "[Removed Lines]",
          "98:     private static Optional<String> transformOverride(Optional<String> option, ConfigSourceInterceptorContext context) {",
          "99:         if (option.isPresent() && Boolean.parseBoolean(option.get())) {",
          "100:             return Optional.of(Strategy.OVERWRITE_EXISTING.name());",
          "102:             return Optional.of(Strategy.IGNORE_EXISTING.name());",
          "106:     private static Optional<String> transformImporter(Optional<String> option, ConfigSourceInterceptorContext context) {",
          "109:             return Optional.of(importer.getValue());",
          "",
          "[Added Lines]",
          "96:     private static String transformOverride(String option, ConfigSourceInterceptorContext context) {",
          "97:         if (Boolean.parseBoolean(option)) {",
          "98:             return Strategy.OVERWRITE_EXISTING.name();",
          "100:             return Strategy.IGNORE_EXISTING.name();",
          "104:     private static String transformImporter(String option, ConfigSourceInterceptorContext context) {",
          "107:             return importer.getValue();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         boolean xor = file.isPresent() ^ dir.isPresent();",
          "121:     }",
          "123: }",
          "",
          "[Removed Lines]",
          "120:         return xor ? file.or(() -> dir) : Optional.empty();",
          "",
          "[Added Lines]",
          "118:         return xor ? file.or(() -> dir).get() : null;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "4: import static org.keycloak.config.LoggingOptions.DEFAULT_LOG_FORMAT;",
          "5: import static org.keycloak.quarkus.runtime.configuration.Configuration.isTrue;",
          "6: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "8: import java.io.File;",
          "9: import java.util.Locale;",
          "11: import java.util.function.BiFunction;",
          "12: import java.util.logging.Level;",
          "13: import java.util.stream.Stream;",
          "",
          "[Removed Lines]",
          "3: import static java.util.Optional.of;",
          "10: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: import org.keycloak.config.Option;",
          "18: import org.keycloak.quarkus.runtime.Messages;",
          "19: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "21: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "24: public final class LoggingPropertyMappers {",
          "",
          "[Removed Lines]",
          "22: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "",
          "[Added Lines]",
          "18: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:                         .to(\"quarkus.log.console.color\")",
          "63:                         .build(),",
          "64:                 fromOption(LoggingOptions.LOG_CONSOLE_ENABLED)",
          "66:                         .to(\"quarkus.log.console.enable\")",
          "68:                         .build(),",
          "70:                 fromOption(LoggingOptions.LOG_FILE_ENABLED)",
          "72:                         .to(\"quarkus.log.file.enable\")",
          "74:                         .build(),",
          "75:                 fromOption(LoggingOptions.LOG_FILE)",
          "76:                         .isEnabled(LoggingPropertyMappers::isFileEnabled, FILE_ENABLED_MSG)",
          "",
          "[Removed Lines]",
          "65:                         .mapFrom(\"log\")",
          "67:                         .transformer(LoggingPropertyMappers.resolveLogHandler(LoggingOptions.DEFAULT_LOG_HANDLER.name()))",
          "71:                         .mapFrom(\"log\")",
          "73:                         .transformer(LoggingPropertyMappers.resolveLogHandler(\"file\"))",
          "",
          "[Added Lines]",
          "63:                         .mapFrom(LoggingOptions.LOG, LoggingPropertyMappers.resolveLogHandler(LoggingOptions.DEFAULT_LOG_HANDLER.name()))",
          "68:                         .mapFrom(LoggingOptions.LOG, LoggingPropertyMappers.resolveLogHandler(\"file\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:                         .build(),",
          "110:                 fromOption(LoggingOptions.LOG_SYSLOG_ENABLED)",
          "112:                         .to(\"quarkus.log.syslog.enable\")",
          "114:                         .build(),",
          "115:                 fromOption(LoggingOptions.LOG_SYSLOG_ENDPOINT)",
          "116:                         .isEnabled(LoggingPropertyMappers::isSyslogEnabled, SYSLOG_ENABLED_MSG)",
          "",
          "[Removed Lines]",
          "111:                         .mapFrom(\"log\")",
          "113:                         .transformer(LoggingPropertyMappers.resolveLogHandler(\"syslog\"))",
          "",
          "[Added Lines]",
          "107:                         .mapFrom(LoggingOptions.LOG, LoggingPropertyMappers.resolveLogHandler(\"syslog\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:         return isTrue(LoggingOptions.LOG_SYSLOG_ENABLED);",
          "176:     }",
          "182:             String[] logHandlerValues = handlers.split(\",\");",
          "185:         };",
          "186:     }",
          "190:     }",
          "192:     private static Level toLevel(String categoryLevel) throws IllegalArgumentException {",
          "",
          "[Removed Lines]",
          "178:     private static BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> resolveLogHandler(String handler) {",
          "179:         return (parentValue, context) -> {",
          "180:             String handlers = parentValue.get();",
          "184:             return of(String.valueOf(Stream.of(logHandlerValues).anyMatch(handler::equals)));",
          "188:     private static Optional<String> resolveFileLogLocation(Optional<String> value, ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "189:         return value.map(location -> location.endsWith(File.separator) ? location + LoggingOptions.DEFAULT_LOG_FILENAME : location);",
          "",
          "[Added Lines]",
          "173:     private static BiFunction<String, ConfigSourceInterceptorContext, String> resolveLogHandler(String handler) {",
          "174:         return (handlers, context) -> {",
          "177:             return String.valueOf(Stream.of(logHandlerValues).anyMatch(handler::equals));",
          "181:     private static String resolveFileLogLocation(String value, ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "182:         return value.endsWith(File.separator) ? value + LoggingOptions.DEFAULT_LOG_FILENAME : value;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:         }",
          "222:     }",
          "228:             var categoryLevel = validateLogLevel(level);",
          "229:             if (categoryLevel.category == null) {",
          "231:             } else {",
          "232:                 setCategoryLevel(categoryLevel.category, categoryLevel.levelName);",
          "233:             }",
          "",
          "[Removed Lines]",
          "224:     private static Optional<String> resolveLogLevel(Optional<String> value, ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "225:         Optional<String> rootLevel = of(LoggingOptions.DEFAULT_LOG_LEVEL.name());",
          "227:         for (String level : value.get().split(\",\")) {",
          "230:                 rootLevel = of(categoryLevel.levelName);",
          "",
          "[Added Lines]",
          "217:     private static String resolveLogLevel(String value, ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "218:         String rootLevel = LoggingOptions.DEFAULT_LOG_LEVEL.name();",
          "220:         for (String level : value.split(\",\")) {",
          "223:                 rootLevel = categoryLevel.levelName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "236:         return rootLevel;",
          "237:     }",
          "245:     }",
          "251:         var isTracingEnabled = TracingPropertyMappers.isTracingEnabled();",
          "252:         var includeTrace = Configuration.isTrue(includeTraceOption);",
          "255:         if (!isTracingEnabled || !includeTrace || isChangedLogFormat) {",
          "256:             return value;",
          "257:         }",
          "260:     }",
          "261: }",
          "",
          "[Removed Lines]",
          "239:     private static Optional<String> resolveLogOutput(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "240:         if (value.get().equals(LoggingOptions.DEFAULT_CONSOLE_OUTPUT.name().toLowerCase(Locale.ROOT))) {",
          "241:             return of(Boolean.FALSE.toString());",
          "242:         }",
          "244:         return of(Boolean.TRUE.toString());",
          "250:     private static Optional<String> addTracingInfo(Optional<String> value, Option<Boolean> includeTraceOption) {",
          "253:         var isChangedLogFormat = !DEFAULT_LOG_FORMAT.equals(value.get());",
          "259:         return Optional.of(LoggingOptions.DEFAULT_LOG_TRACING_FORMAT);",
          "",
          "[Added Lines]",
          "232:     private static String resolveLogOutput(String value, ConfigSourceInterceptorContext context) {",
          "233:         boolean isDefault = LoggingOptions.DEFAULT_CONSOLE_OUTPUT.name().toLowerCase(Locale.ROOT).equals(value);",
          "234:         return Boolean.valueOf(!isDefault).toString();",
          "240:     private static String addTracingInfo(String value, Option<Boolean> includeTraceOption) {",
          "243:         var isChangedLogFormat = !DEFAULT_LOG_FORMAT.equals(value);",
          "249:         return LoggingOptions.DEFAULT_LOG_TRACING_FORMAT;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ManagementPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "25: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "29: import static org.keycloak.config.ManagementOptions.LEGACY_OBSERVABILITY_INTERFACE;",
          "30: import static org.keycloak.quarkus.runtime.configuration.Configuration.isTrue;",
          "31: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Removed Lines]",
          "27: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:                 fromOption(ManagementOptions.LEGACY_OBSERVABILITY_INTERFACE)",
          "45:                         .build(),",
          "46:                 fromOption(ManagementOptions.HTTP_MANAGEMENT_RELATIVE_PATH)",
          "48:                         .to(\"quarkus.management.root-path\")",
          "49:                         .paramLabel(\"path\")",
          "50:                         .build(),",
          "",
          "[Removed Lines]",
          "47:                         .mapFrom(HttpOptions.HTTP_RELATIVE_PATH.getKey())",
          "",
          "[Added Lines]",
          "45:                         .mapFrom(HttpOptions.HTTP_RELATIVE_PATH)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:                         .paramLabel(\"port\")",
          "54:                         .build(),",
          "55:                 fromOption(ManagementOptions.HTTP_MANAGEMENT_HOST)",
          "57:                         .to(\"quarkus.management.host\")",
          "58:                         .paramLabel(\"host\")",
          "59:                         .build(),",
          "61:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_CLIENT_AUTH)",
          "63:                         .to(\"quarkus.management.ssl.client-auth\")",
          "64:                         .paramLabel(\"auth\")",
          "65:                         .build(),",
          "66:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_CIPHER_SUITES)",
          "68:                         .to(\"quarkus.management.ssl.cipher-suites\")",
          "69:                         .paramLabel(\"ciphers\")",
          "70:                         .build(),",
          "71:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_PROTOCOLS)",
          "73:                         .to(\"quarkus.management.ssl.protocols\")",
          "74:                         .paramLabel(\"protocols\")",
          "75:                         .build(),",
          "76:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_CERTIFICATE_FILE)",
          "78:                         .to(\"quarkus.management.ssl.certificate.files\")",
          "79:                         .validator(value -> validateTlsProperties())",
          "80:                         .paramLabel(\"file\")",
          "81:                         .build(),",
          "82:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_CERTIFICATE_KEY_FILE)",
          "84:                         .to(\"quarkus.management.ssl.certificate.key-files\")",
          "85:                         .validator(value -> validateTlsProperties())",
          "86:                         .paramLabel(\"file\")",
          "87:                         .build(),",
          "88:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_KEY_STORE_FILE)",
          "90:                         .to(\"quarkus.management.ssl.certificate.key-store-file\")",
          "91:                         .validator(value -> validateTlsProperties())",
          "92:                         .paramLabel(\"file\")",
          "93:                         .build(),",
          "94:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_KEY_STORE_PASSWORD)",
          "96:                         .to(\"quarkus.management.ssl.certificate.key-store-password\")",
          "97:                         .validator(value -> validateTlsProperties())",
          "98:                         .paramLabel(\"password\")",
          "99:                         .isMasked(true)",
          "100:                         .build(),",
          "101:                 fromOption(ManagementOptions.HTTPS_MANAGEMENT_KEY_STORE_TYPE)",
          "103:                         .to(\"quarkus.management.ssl.certificate.key-store-file-type\")",
          "105:                         .paramLabel(\"type\")",
          "106:                         .build(),",
          "107:         };",
          "",
          "[Removed Lines]",
          "56:                         .mapFrom(HttpOptions.HTTP_HOST.getKey())",
          "62:                         .mapFrom(HttpOptions.HTTPS_CLIENT_AUTH.getKey())",
          "67:                         .mapFrom(HttpOptions.HTTPS_CIPHER_SUITES.getKey())",
          "72:                         .mapFrom(HttpOptions.HTTPS_PROTOCOLS.getKey())",
          "77:                         .mapFrom(HttpOptions.HTTPS_CERTIFICATE_FILE.getKey())",
          "83:                         .mapFrom(HttpOptions.HTTPS_CERTIFICATE_KEY_FILE.getKey())",
          "89:                         .mapFrom(HttpOptions.HTTPS_KEY_STORE_FILE.getKey())",
          "95:                         .mapFrom(HttpOptions.HTTPS_KEY_STORE_PASSWORD.getKey())",
          "102:                         .mapFrom(HttpOptions.HTTPS_KEY_STORE_TYPE.getKey())",
          "104:                         .transformer((value, config) -> value.or(() -> Configuration.getOptionalKcValue(HttpOptions.HTTPS_KEY_STORE_TYPE.getKey())))",
          "",
          "[Added Lines]",
          "54:                         .mapFrom(HttpOptions.HTTP_HOST)",
          "60:                         .mapFrom(HttpOptions.HTTPS_CLIENT_AUTH)",
          "65:                         .mapFrom(HttpOptions.HTTPS_CIPHER_SUITES)",
          "70:                         .mapFrom(HttpOptions.HTTPS_PROTOCOLS)",
          "75:                         .mapFrom(HttpOptions.HTTPS_CERTIFICATE_FILE)",
          "81:                         .mapFrom(HttpOptions.HTTPS_CERTIFICATE_KEY_FILE)",
          "87:                         .mapFrom(HttpOptions.HTTPS_KEY_STORE_FILE)",
          "93:                         .mapFrom(HttpOptions.HTTPS_KEY_STORE_PASSWORD)",
          "100:                         .mapFrom(HttpOptions.HTTPS_KEY_STORE_TYPE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:         return isManagementOccupied;",
          "116:     }",
          "120:     }",
          "122:     public static boolean isManagementTlsEnabled() {",
          "",
          "[Removed Lines]",
          "118:     private static Optional<String> managementEnabledTransformer() {",
          "119:         return Optional.of(Boolean.toString(isManagementEnabled()));",
          "",
          "[Added Lines]",
          "115:     private static String managementEnabledTransformer() {",
          "116:         return Boolean.toString(isManagementEnabled());",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "43: import org.keycloak.quarkus.runtime.cli.ShortErrorMessageHandler;",
          "44: import org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource;",
          "45: import org.keycloak.quarkus.runtime.configuration.KcEnvConfigSource;",
          "46: import org.keycloak.quarkus.runtime.configuration.KeycloakConfigSourceProvider;",
          "47: import org.keycloak.quarkus.runtime.Environment;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             null,",
          "59:             null,",
          "60:             null,",
          "61:             false,",
          "62:             null,",
          "63:             null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:             null,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     private final String to;",
          "72:     private BooleanSupplier enabled;",
          "73:     private String enabledWhen;",
          "75:     private final String mapFrom;",
          "76:     private final boolean mask;",
          "77:     private final String paramLabel;",
          "78:     private final String envVarFormat;",
          "",
          "[Removed Lines]",
          "74:     private final BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper;",
          "",
          "[Added Lines]",
          "76:     private final BiFunction<String, ConfigSourceInterceptorContext, String> mapper;",
          "78:     private final BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:     private final String description;",
          "83:     PropertyMapper(Option<T> option, String to, BooleanSupplier enabled, String enabledWhen,",
          "86:                    String description) {",
          "87:         this.option = option;",
          "88:         this.to = to == null ? getFrom() : to;",
          "89:         this.enabled = enabled;",
          "90:         this.enabledWhen = enabledWhen;",
          "92:         this.mapFrom = mapFrom;",
          "93:         this.paramLabel = paramLabel;",
          "94:         this.mask = mask;",
          "",
          "[Removed Lines]",
          "84:                    BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper,",
          "85:                    String mapFrom, String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "91:         this.mapper = mapper == null ? PropertyMapper::defaultTransformer : mapper;",
          "",
          "[Added Lines]",
          "87:                    BiFunction<String, ConfigSourceInterceptorContext, String> mapper,",
          "88:                    String mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper,",
          "89:                    String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "95:         this.mapper = mapper;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:         this.envVarFormat = toEnvVarFormat(getFrom());",
          "97:         this.validator = validator;",
          "98:         this.description = description;",
          "103:     }",
          "105:     ConfigValue getConfigValue(ConfigSourceInterceptorContext context) {",
          "",
          "[Removed Lines]",
          "99:     }",
          "101:     private static Optional<String> defaultTransformer(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "102:         return value;",
          "",
          "[Added Lines]",
          "103:         this.parentMapper = parentMapper;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:         ConfigValue config = convertValue(context.proceed(from));",
          "157:         }",
          "169:         }",
          "172:     }",
          "174:     public Option<T> getOption() {",
          "",
          "[Removed Lines]",
          "125:         if (config == null || config.getValue() == null) {",
          "126:             if (mapFrom != null) {",
          "128:                 String parentKey = MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + mapFrom;",
          "129:                 ConfigValue parentValue = convertValue(context.proceed(parentKey));",
          "131:                 if (parentValue == null) {",
          "133:                     PropertyMapper<?> parentMapper = PropertyMappers.getMapper(parentKey);",
          "135:                     if (parentMapper != null && parentMapper.getDefaultValue().isPresent()) {",
          "136:                         parentValue = ConfigValue.builder().withValue(Option.getDefaultValueString(parentMapper.getDefaultValue().get())).build();",
          "137:                     }",
          "138:                 }",
          "140:                 return transformValue(name, ofNullable(parentValue == null ? null : parentValue.getValue()), context, null);",
          "141:             }",
          "143:             ConfigValue defaultValue = transformValue(name, this.option.getDefaultValue().map(Option::getDefaultValueString), context, null);",
          "145:             if (defaultValue != null) {",
          "146:                 return defaultValue;",
          "147:             }",
          "150:             ConfigValue current = context.proceed(name);",
          "152:             if (current != null) {",
          "153:                 return transformValue(name, ofNullable(current.getValue()), context, current.getConfigSourceName());",
          "154:             }",
          "156:             return current;",
          "159:         ConfigValue transformedValue = transformValue(name, ofNullable(config.getValue()), context, config.getConfigSourceName());",
          "162:         if (transformedValue == null) {",
          "163:             return ConfigValue.builder()",
          "164:                     .withName(name)",
          "165:                     .withValue(null)",
          "166:                     .withRawValue(config.getValue())",
          "167:                     .withConfigSourceName(config.getConfigSourceName())",
          "168:                     .build();",
          "171:         return transformedValue;",
          "",
          "[Added Lines]",
          "126:         boolean parentValue = false;",
          "127:         if (mapFrom != null && (config == null || config.getValue() == null)) {",
          "129:             config = Configuration.getKcConfigValue(mapFrom);",
          "130:             parentValue = true;",
          "131:         }",
          "133:         if (config != null && config.getValue() != null) {",
          "134:             config = transformValue(name, config.getValue(), context, config.getConfigSourceName(), parentValue);",
          "135:         } else {",
          "136:             config = transformValue(name, this.option.getDefaultValue().map(Option::getDefaultValueString).orElse(null), context, null, false);",
          "139:         if (config != null) {",
          "140:             return config;",
          "144:         return context.proceed(name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "259:         return option.getDeprecatedMetadata();",
          "260:     }",
          "274:         }",
          "279:             return null;",
          "280:         }",
          "282:         return ConfigValue.builder()",
          "283:                 .withName(name)",
          "286:                 .withConfigSourceName(configSourceName)",
          "287:                 .build();",
          "288:     }",
          "",
          "[Removed Lines]",
          "262:     private ConfigValue transformValue(String name, Optional<String> value, ConfigSourceInterceptorContext context, String configSourceName) {",
          "263:         if (value == null) {",
          "264:             return null;",
          "265:         }",
          "267:         if (mapper == null || (mapFrom == null && name.equals(getFrom()))) {",
          "269:             return ConfigValue.builder()",
          "270:                     .withName(name)",
          "271:                     .withValue(value.orElse(null))",
          "272:                     .withConfigSourceName(configSourceName)",
          "273:                     .build();",
          "276:         Optional<String> mappedValue = mapper.apply(value, context);",
          "278:         if (mappedValue == null || mappedValue.isEmpty()) {",
          "284:                 .withValue(mappedValue.get())",
          "285:                 .withRawValue(value.orElse(null))",
          "",
          "[Added Lines]",
          "235:     private ConfigValue transformValue(String name, String value, ConfigSourceInterceptorContext context, String configSourceName, boolean parentValue) {",
          "236:         String mappedValue = value;",
          "238:         var theMapper = parentValue ? this.parentMapper : this.mapper;",
          "239:         if (theMapper != null && (!name.equals(getFrom()) || parentValue)) {",
          "240:             mappedValue = theMapper.apply(value, context);",
          "243:         if (value == null && mappedValue == null) {",
          "249:                 .withValue(mappedValue)",
          "250:                 .withRawValue(value)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "300:         private final Option<T> option;",
          "301:         private String to;",
          "303:         private String mapFrom = null;",
          "304:         private boolean isMasked = false;",
          "305:         private BooleanSupplier isEnabled = () -> true;",
          "306:         private String enabledWhen = \"\";",
          "",
          "[Removed Lines]",
          "302:         private BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper;",
          "",
          "[Added Lines]",
          "267:         private BiFunction<String, ConfigSourceInterceptorContext, String> mapper;",
          "269:         private BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "318:             return this;",
          "319:         }",
          "322:             this.mapper = mapper;",
          "323:             return this;",
          "324:         }",
          "",
          "[Removed Lines]",
          "321:         public Builder<T> transformer(BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper) {",
          "",
          "[Added Lines]",
          "292:         public Builder<T> transformer(BiFunction<String, ConfigSourceInterceptorContext, String> mapper) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "333:             return this;",
          "334:         }",
          "338:             return this;",
          "339:         }",
          "",
          "[Removed Lines]",
          "336:         public Builder<T> mapFrom(String mapFrom) {",
          "337:             this.mapFrom = mapFrom;",
          "",
          "[Added Lines]",
          "307:         public Builder<T> mapFrom(Option<?> mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper) {",
          "308:             this.mapFrom = mapFrom.getKey();",
          "309:             this.parentMapper = parentMapper;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "404:             if (paramLabel == null && Boolean.class.equals(option.getType())) {",
          "405:                 paramLabel = Boolean.TRUE + \"|\" + Boolean.FALSE;",
          "406:             }",
          "408:         }",
          "409:     }",
          "",
          "[Removed Lines]",
          "407:             return new PropertyMapper<T>(option, to, isEnabled, enabledWhen, mapper, mapFrom, paramLabel, isMasked, validator, description);",
          "",
          "[Added Lines]",
          "379:             return new PropertyMapper<T>(option, to, isEnabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, isMasked, validator, description);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/ProxyPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "7: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "11: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "13: final class ProxyPropertyMappers {",
          "",
          "[Removed Lines]",
          "9: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:                         .build(),",
          "27:                 fromOption(ProxyOptions.PROXY_FORWARDED_HOST)",
          "28:                         .to(\"quarkus.http.proxy.enable-forwarded-host\")",
          "31:                         .build(),",
          "32:                 fromOption(ProxyOptions.PROXY_FORWARDED_HEADER_ENABLED)",
          "33:                         .to(\"quarkus.http.proxy.allow-forwarded\")",
          "36:                         .build(),",
          "37:                 fromOption(ProxyOptions.PROXY_X_FORWARDED_HEADER_ENABLED)",
          "38:                         .to(\"quarkus.http.proxy.allow-x-forwarded\")",
          "41:                         .build(),",
          "42:                 fromOption(ProxyOptions.PROXY_TRUSTED_ADDRESSES)",
          "43:                         .to(\"quarkus.http.proxy.trusted-proxies\")",
          "",
          "[Removed Lines]",
          "29:                         .mapFrom(\"proxy-headers\")",
          "30:                         .transformer((v, c) -> proxyEnabled(null, v, c))",
          "34:                         .mapFrom(\"proxy-headers\")",
          "35:                         .transformer((v, c) -> proxyEnabled(ProxyOptions.Headers.forwarded, v, c))",
          "39:                         .mapFrom(\"proxy-headers\")",
          "40:                         .transformer((v, c) -> proxyEnabled(ProxyOptions.Headers.xforwarded, v, c))",
          "",
          "[Added Lines]",
          "27:                         .mapFrom(ProxyOptions.PROXY_HEADERS, (v, c) -> proxyEnabled(null, v, c))",
          "31:                         .mapFrom(ProxyOptions.PROXY_HEADERS, (v, c) -> proxyEnabled(ProxyOptions.Headers.forwarded, v, c))",
          "35:                         .mapFrom(ProxyOptions.PROXY_HEADERS, (v, c) -> proxyEnabled(ProxyOptions.Headers.xforwarded, v, c))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:         }",
          "58:     }",
          "61:         boolean enabled = false;",
          "64:             if (testHeader != null) {",
          "66:             } else {",
          "67:                 enabled = true;",
          "68:             }",
          "69:         }",
          "72:     }",
          "74: }",
          "",
          "[Removed Lines]",
          "60:     private static Optional<String> proxyEnabled(ProxyOptions.Headers testHeader, Optional<String> value, ConfigSourceInterceptorContext context) {",
          "63:         if (value.isPresent()) { // proxy-headers explicitly configured",
          "65:                 enabled = ProxyOptions.Headers.valueOf(value.get()).equals(testHeader);",
          "71:         return Optional.of(String.valueOf(enabled));",
          "",
          "[Added Lines]",
          "55:     private static String proxyEnabled(ProxyOptions.Headers testHeader, String value, ConfigSourceInterceptorContext context) {",
          "58:         if (value != null) { // proxy-headers explicitly configured",
          "60:                 enabled = ProxyOptions.Headers.valueOf(value).equals(testHeader);",
          "66:         return String.valueOf(enabled);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/SecurityPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "4: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "8: import org.keycloak.common.Profile;",
          "9: import org.keycloak.common.Profile.Feature;",
          "10: import org.keycloak.common.crypto.FipsMode;",
          "",
          "[Removed Lines]",
          "3: import static java.util.Optional.of;",
          "6: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:         };",
          "26:     }",
          "30:             if (Profile.isFeatureEnabled(Feature.FIPS)) {",
          "32:             }",
          "35:         }",
          "38:     }",
          "39: }",
          "",
          "[Removed Lines]",
          "28:     private static Optional<String> resolveFipsMode(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "29:         if (value.isEmpty()) {",
          "31:                 return of(FipsMode.NON_STRICT.toString());",
          "34:             return of(FipsMode.DISABLED.toString());",
          "37:         return of(FipsMode.valueOfOption(value.get()).toString());",
          "",
          "[Added Lines]",
          "25:     private static String resolveFipsMode(String value, ConfigSourceInterceptorContext context) {",
          "26:         if (value == null) {",
          "28:                 return FipsMode.NON_STRICT.toString();",
          "31:             return FipsMode.DISABLED.toString();",
          "34:         return value;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/TransactionPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import org.keycloak.config.TransactionOptions;",
          "8: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "12: public class TransactionPropertyMappers {",
          "14:     private static final String QUARKUS_TXPROP_TARGET = \"quarkus.datasource.jdbc.transactions\";",
          "",
          "[Removed Lines]",
          "7: import static java.util.Optional.of;",
          "10: import java.util.Optional;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         };",
          "25:     }",
          "30:         if (isXaEnabled) {",
          "32:         }",
          "35:     }",
          "36: }",
          "",
          "[Removed Lines]",
          "27:     private static Optional<String> getQuarkusTransactionsValue(Optional<String> txValue, ConfigSourceInterceptorContext context) {",
          "28:         boolean isXaEnabled = Boolean.parseBoolean(txValue.get());",
          "31:             return of(\"xa\");",
          "34:         return of(\"enabled\");",
          "",
          "[Added Lines]",
          "24:     private static String getQuarkusTransactionsValue(String txValue, ConfigSourceInterceptorContext context) {",
          "25:         boolean isXaEnabled = Boolean.parseBoolean(txValue);",
          "28:             return \"xa\";",
          "31:         return \"enabled\";",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:         System.clearProperty(org.keycloak.common.util.Environment.PROFILE);",
          "363:         Assert.assertEquals(\"cluster-foo.xml\", initConfig(\"connectionsInfinispan\", \"quarkus\").get(\"configFile\"));",
          "364:         System.setProperty(org.keycloak.common.util.Environment.PROFILE, \"dev\");",
          "",
          "[Removed Lines]",
          "361:         ConfigArgsConfigSource.setCliArgs(\"--cache=cluster-foo.xml\");",
          "",
          "[Added Lines]",
          "361:         ConfigArgsConfigSource.setCliArgs(\"--cache-config-file=cluster-foo.xml\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:         assertEquals(\"false\", createConfig().getConfigValue(\"kc.hostname-strict\").getValue());",
          "451:         Environment.setProfile(\"prod\");",
          "453:     }",
          "455:     @Test",
          "",
          "[Removed Lines]",
          "452:         assertEquals(\"true\", createConfig().getConfigValue(\"kc.hostname-strict\").getValue());",
          "",
          "[Added Lines]",
          "452:         assertEquals(\"true\", createConfig().getConfigValue(\"kc.spi-hostname-v2-hostname-strict\").getValue());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bbe568d4f15ded14f1331b64011f2849713e7d5",
      "candidate_info": {
        "commit_hash": "0bbe568d4f15ded14f1331b64011f2849713e7d5",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/0bbe568d4f15ded14f1331b64011f2849713e7d5",
        "files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt"
        ],
        "message": "Make cache-remote-host enabled when needed\n\nCloses #34536\n\nSigned-off-by: Pedro Ruivo <pruivo@redhat.com>",
        "before_after_code_files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import java.util.Set;",
          "47: import java.util.function.BiConsumer;",
          "48: import java.util.function.Consumer;",
          "50: import org.keycloak.common.profile.ProfileException;",
          "51: import org.keycloak.config.DeprecatedMetadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import java.util.function.Function;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:             parseConfigArgs(cliArgs, (k, v) -> {",
          "240:                 if (k.equals(Main.PROFILE_SHORT_NAME) || k.equals(Main.PROFILE_LONG_NAME)) {",
          "242:                 }",
          "243:             }, ignored -> {});",
          "244:         }",
          "",
          "[Removed Lines]",
          "241:                     Environment.setProfile(v);",
          "",
          "[Added Lines]",
          "242:                     Environment.setProfile(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:             final Set<String> disabledBuildTime = new HashSet<>();",
          "351:             final Set<String> disabledRunTime = new HashSet<>();",
          "352:             final Set<String> deprecatedInUse = new HashSet<>();",
          "354:             final Set<PropertyMapper<?>> disabledMappers = new HashSet<>();",
          "355:             if (options.includeBuildTime) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:             final Set<String> missingOption = new HashSet<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "369:                     ConfigValue configValue = Configuration.getConfigValue(mapper.getFrom());",
          "370:                     String configValueStr = configValue.getValue();",
          "373:                         continue;",
          "374:                     }",
          "",
          "[Removed Lines]",
          "372:                     if (configValueStr == null || !isUserModifiable(configValue)) {",
          "",
          "[Added Lines]",
          "375:                     if (configValueStr == null) {",
          "376:                         if (Environment.isRuntimeMode() && mapper.isEnabled() && mapper.isRequired()) {",
          "377:                             handleRequired(missingOption, mapper);",
          "378:                         }",
          "379:                         continue;",
          "380:                     }",
          "381:                     if (!isUserModifiable(configValue)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:                 }",
          "410:             }",
          "412:             if (!ignoredBuildTime.isEmpty()) {",
          "413:                 throw new PropertyException(format(\"The following build time options have values that differ from what is persisted - the new values will NOT be used until another build is run: %s\\n\",",
          "414:                         String.join(\", \", ignoredBuildTime)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:             if (!missingOption.isEmpty()) {",
          "422:                 throw new PropertyException(\"The following options are required: \\n%s\".formatted(String.join(\"\\n\", missingOption)));",
          "423:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "510:     }",
          "512:     private static void handleDisabled(Set<String> disabledInUse, PropertyMapper<?> mapper) {",
          "518:         final StringBuilder sb = new StringBuilder(\"\\t- \");",
          "519:         sb.append(optionName);",
          "530:     }",
          "532:     private static void warn(String text, PrintWriter outwriter) {",
          "533:         ColorScheme defaultColorScheme = picocli.CommandLine.Help.defaultColorScheme(Help.Ansi.AUTO);",
          "534:         outwriter.println(defaultColorScheme.apply(\"WARNING: \", Arrays.asList(Style.fg_yellow, Style.bold)) + text);",
          "",
          "[Removed Lines]",
          "513:         String optionName = mapper.getFrom();",
          "514:         if (optionName.startsWith(NS_KEYCLOAK_PREFIX)) {",
          "515:             optionName = optionName.substring(NS_KEYCLOAK_PREFIX.length());",
          "516:         }",
          "521:         if (mapper.getEnabledWhen().isPresent()) {",
          "522:             final String enabledWhen = mapper.getEnabledWhen().get();",
          "523:             sb.append(\": \");",
          "524:             sb.append(enabledWhen);",
          "525:             if (!enabledWhen.endsWith(\".\")) {",
          "526:                 sb.append(\".\");",
          "527:             }",
          "528:         }",
          "529:         disabledInUse.add(sb.toString());",
          "",
          "[Added Lines]",
          "525:         handleMessage(disabledInUse, mapper, PropertyMapper::getEnabledWhen);",
          "526:     }",
          "528:     private static void handleRequired(Set<String> requiredOptions, PropertyMapper<?> mapper) {",
          "529:         handleMessage(requiredOptions, mapper, PropertyMapper::getRequiredWhen);",
          "530:     }",
          "532:     private static void handleMessage(Set<String> messages, PropertyMapper<?> mapper, Function<PropertyMapper<?>, Optional<String>> retrieveMessage) {",
          "533:         var optionName = mapper.getOption().getKey();",
          "536:         retrieveMessage.apply(mapper).ifPresent(msg -> sb.append(\": \").append(msg).append(\".\"));",
          "537:         messages.add(sb.toString());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "749:                     } else if (mapper.getType().isEnum()) {",
          "753:                     }",
          "754:                 } else {",
          "755:                     optBuilder.type(String.class);",
          "",
          "[Removed Lines]",
          "752:                         optBuilder.type(String.class);",
          "",
          "[Added Lines]",
          "760:                         optBuilder.type(String.class);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "791:                 .ifPresent(transformedDesc::append);",
          "793:         mapper.getEnabledWhen().map(e -> format(\" %s.\", e)).ifPresent(transformedDesc::append);",
          "796:         mapper.getDeprecatedMetadata()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:         mapper.getRequiredWhen().map(e -> format(\" %s.\", e)).ifPresent(transformedDesc::append);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/CachingPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "6: import java.io.File;",
          "7: import java.nio.file.Paths;",
          "8: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "3: import static org.keycloak.quarkus.runtime.configuration.Configuration.getOptionalKcValue;",
          "4: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: import java.util.Optional;",
          "11: import java.util.function.BooleanSupplier;",
          "13: import org.keycloak.config.CachingOptions;",
          "14: import org.keycloak.infinispan.util.InfinispanUtils;",
          "15: import org.keycloak.quarkus.runtime.Environment;",
          "19: final class CachingPropertyMappers {",
          "21:     private static final String REMOTE_HOST_SET = \"remote host is set\";",
          "23:     private static final String CACHE_STACK_SET_TO_ISPN = \"'cache' type is set to '\" + CachingOptions.Mechanism.ispn.name() + \"'\";",
          "",
          "[Removed Lines]",
          "17: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "",
          "[Added Lines]",
          "10: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "11: import org.keycloak.common.Profile;",
          "13: import org.keycloak.config.Option;",
          "16: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "18: import static org.keycloak.quarkus.runtime.configuration.Configuration.getOptionalKcValue;",
          "19: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "24:     private static final String MULTI_SITE_OR_EMBEDDED_REMOTE_FEATURE_SET = \"feature '%s', '%s' or '%s' is set\".formatted(Profile.Feature.MULTI_SITE.getKey(), Profile.Feature.CLUSTERLESS.getKey(), Profile.Feature.CACHE_EMBEDDED_REMOTE_STORE.getKey());",
          "25:     private static final String MULTI_SITE_FEATURE_SET = \"feature '%s' or '%s' is set\".formatted(Profile.Feature.MULTI_SITE.getKey(), Profile.Feature.CLUSTERLESS.getKey());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:                     .build(),",
          "67:               fromOption(CachingOptions.CACHE_REMOTE_HOST)",
          "68:                     .paramLabel(\"hostname\")",
          "69:                     .build(),",
          "70:               fromOption(CachingOptions.CACHE_REMOTE_PORT)",
          "71:                     .isEnabled(CachingPropertyMappers::remoteHostSet, CachingPropertyMappers.REMOTE_HOST_SET)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:                     .addValidateEnabled(CachingPropertyMappers::isRemoteCacheHostEnabled, MULTI_SITE_OR_EMBEDDED_REMOTE_FEATURE_SET)",
          "74:                     .isRequired(InfinispanUtils::isRemoteInfinispan, MULTI_SITE_FEATURE_SET)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:                     .build(),",
          "77:               fromOption(CachingOptions.CACHE_REMOTE_USERNAME)",
          "78:                     .isEnabled(CachingPropertyMappers::remoteHostSet, CachingPropertyMappers.REMOTE_HOST_SET)",
          "79:                     .paramLabel(\"username\")",
          "80:                     .build(),",
          "81:               fromOption(CachingOptions.CACHE_REMOTE_PASSWORD)",
          "82:                     .isEnabled(CachingPropertyMappers::remoteHostSet, CachingPropertyMappers.REMOTE_HOST_SET)",
          "83:                     .paramLabel(\"password\")",
          "84:                     .isMasked(true)",
          "85:                     .build(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:                     .validator((value) -> validateCachingOptionIsPresent(CachingOptions.CACHE_REMOTE_USERNAME, CachingOptions.CACHE_REMOTE_PASSWORD))",
          "90:                     .validator((value) -> validateCachingOptionIsPresent(CachingOptions.CACHE_REMOTE_PASSWORD, CachingOptions.CACHE_REMOTE_USERNAME))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:               .paramLabel(\"max-count\")",
          "153:               .build();",
          "154:     }",
          "155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     private static boolean isRemoteCacheHostEnabled() {",
          "165:         return InfinispanUtils.isRemoteInfinispan() || Profile.isFeatureEnabled(Profile.Feature.CACHE_EMBEDDED_REMOTE_STORE);",
          "166:     }",
          "168:     private static void validateCachingOptionIsPresent(Option<?> optionSet, Option<?> optionRequired) {",
          "169:         if (getOptionalKcValue(optionRequired).isEmpty()) {",
          "170:             throw new PropertyException(\"The option '%s' is required when '%s' is set.\".formatted(optionRequired.getKey(), optionSet.getKey()));",
          "171:         }",
          "172:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             null,",
          "67:             false,",
          "68:             null,",
          "70:         @Override",
          "71:         public ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
          "72:             return context.proceed(name);",
          "",
          "[Removed Lines]",
          "69:             null) {",
          "",
          "[Added Lines]",
          "69:             null,",
          "70:             () -> false,",
          "71:             \"\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     private final String cliFormat;",
          "87:     private final BiConsumer<PropertyMapper<T>, ConfigValue> validator;",
          "88:     private final String description;",
          "90:     PropertyMapper(Option<T> option, String to, BooleanSupplier enabled, String enabledWhen,",
          "91:                    BiFunction<String, ConfigSourceInterceptorContext, String> mapper,",
          "93:                    String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "95:         this.option = option;",
          "96:         this.to = to == null ? getFrom() : to;",
          "97:         this.enabled = enabled;",
          "",
          "[Removed Lines]",
          "92:                    String mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper,",
          "94:                    String description) {",
          "",
          "[Added Lines]",
          "91:     private final BooleanSupplier required;",
          "92:     private final String requiredWhen;",
          "96:                    String mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper,",
          "98:                    String description, BooleanSupplier required, String requiredWhen) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         this.paramLabel = paramLabel;",
          "102:         this.mask = mask;",
          "103:         this.cliFormat = toCliFormat(option.getKey());",
          "104:         this.envVarFormat = toEnvVarFormat(getFrom());",
          "105:         this.validator = validator;",
          "106:         this.description = description;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:         this.required = required;",
          "109:         this.requiredWhen = requiredWhen;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:             config = Configuration.getKcConfigValue(mapFrom);",
          "134:             parentValue = true;",
          "137:         if (config != null && config.getValue() != null) {",
          "138:             config = transformValue(name, config, context, parentValue);",
          "",
          "[Removed Lines]",
          "135:         }",
          "",
          "[Added Lines]",
          "141:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:         this.enabledWhen = enabledWhen;",
          "174:     }",
          "176:     public Class<T> getType() {",
          "177:         return this.option.getType();",
          "178:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     public boolean isRequired() {",
          "183:         return required.getAsBoolean();",
          "184:     }",
          "186:     public Optional<String> getRequiredWhen() {",
          "187:         return Optional.of(requiredWhen)",
          "188:                 .filter(StringUtil::isNotBlank)",
          "189:                 .map(e -> \"Required when \" + e);",
          "190:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:         private String paramLabel;",
          "319:         private BiConsumer<PropertyMapper<T>, ConfigValue> validator = (mapper, value) -> mapper.validateValues(value, mapper::validateExpectedValues);",
          "320:         private String description;",
          "322:         public Builder(Option<T> option) {",
          "323:             this.option = option;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:         private BooleanSupplier isRequired = () -> false;",
          "338:         private String requiredWhen = \"\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "373:             return this;",
          "374:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:         public Builder<T> isRequired(BooleanSupplier isRequired, String requiredWhen) {",
          "402:             this.requiredWhen = Objects.requireNonNull(requiredWhen);",
          "403:             assert !requiredWhen.endsWith(\".\");",
          "404:             return isRequired(isRequired);",
          "405:         }",
          "412:         public Builder<T> isRequired(BooleanSupplier isRequired) {",
          "413:             this.isRequired = Objects.requireNonNull(isRequired);",
          "414:             return this;",
          "415:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "423:             if (paramLabel == null && Boolean.class.equals(option.getType())) {",
          "424:                 paramLabel = Boolean.TRUE + \"|\" + Boolean.FALSE;",
          "425:             }",
          "427:         }",
          "428:     }",
          "",
          "[Removed Lines]",
          "426:             return new PropertyMapper<T>(option, to, isEnabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, isMasked, validator, description);",
          "",
          "[Added Lines]",
          "467:             return new PropertyMapper<>(option, to, isEnabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, isMasked, validator, description, isRequired, requiredWhen);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "453:                 if (!result.isEmpty()) {",
          "454:                     result.append(\".\\n\");",
          "455:                 }",
          "458:                 continue;",
          "459:             }",
          "460:             try {",
          "",
          "[Removed Lines]",
          "456:                 result.append(\"Invalid value for multivalued option \" + getOptionAndSourceMessage(configValue)",
          "457:                         + \": list value '\" + v + \"' should not have leading nor trailing whitespace\");",
          "",
          "[Added Lines]",
          "497:                 result.append(\"Invalid value for multivalued option \")",
          "498:                         .append(getOptionAndSourceMessage(configValue))",
          "499:                         .append(\": list value '\")",
          "500:                         .append(v)",
          "501:                         .append(\"' should not have leading nor trailing whitespace\");",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.it.cli.dist;",
          "20: import io.quarkus.test.junit.main.Launch;",
          "21: import io.quarkus.test.junit.main.LaunchResult;",
          "22: import org.junit.jupiter.api.Assertions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.nio.file.Paths;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import org.keycloak.it.junit5.extension.WithEnvVars;",
          "31: import org.keycloak.it.utils.KeycloakDistribution;",
          "35: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "36: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "37: import static org.keycloak.quarkus.runtime.cli.command.Main.CONFIG_FILE_LONG_NAME;",
          "",
          "[Removed Lines]",
          "33: import java.nio.file.Paths;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         assertEquals(1, result.getErrorStream().stream().filter(s -> s.contains(\"Disabled option: '--log-console-color'. Available only when Console log handler is activated\")).count());",
          "130:         assertEquals(1, result.getErrorStream().stream().filter(s -> s.contains(\"Possible solutions: --log, --log-file, --log-file-level, --log-file-format, --log-file-output, --log-level\")).count());",
          "131:     }",
          "132: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     @Test",
          "134:     @Order(10)",
          "135:     @Launch({\"start-dev\", \"--cache-remote-host=localhost\"})",
          "136:     public void testCacheRemoteHostWithoutMultiSite(LaunchResult result) {",
          "137:         assertErrorStreamContains(result, \"cache-remote-host available only when feature 'multi-site', 'clusterless' or 'cache-embedded-remote-store' is set\");",
          "138:     }",
          "140:     @Test",
          "141:     @Order(11)",
          "142:     @Launch({\"start-dev\", \"--cache-remote-port=11222\"})",
          "143:     public void testCacheRemotePortWithoutCacheRemoteHost(LaunchResult result) {",
          "144:         assertDisabledDueToMissingRemoteHost(result, \"--cache-remote-port\");",
          "145:     }",
          "147:     @Test",
          "148:     @Order(12)",
          "149:     @Launch({\"start-dev\", \"--cache-remote-username=user\"})",
          "150:     public void testCacheRemoteUsernameWithoutCacheRemoteHost(LaunchResult result) {",
          "151:         assertDisabledDueToMissingRemoteHost(result, \"--cache-remote-username\");",
          "152:     }",
          "154:     @Test",
          "155:     @Order(13)",
          "156:     @Launch({\"start-dev\", \"--cache-remote-password=pass\"})",
          "157:     public void testCacheRemotePasswordWithoutCacheRemoteHost(LaunchResult result) {",
          "158:         assertDisabledDueToMissingRemoteHost(result, \"--cache-remote-password\");",
          "159:     }",
          "161:     @Test",
          "162:     @Order(14)",
          "163:     @Launch({\"start-dev\", \"--cache-remote-tls-enabled=false\"})",
          "164:     public void testCacheRemoteTlsEnabledWithoutCacheRemoteHost(LaunchResult result) {",
          "165:         assertDisabledDueToMissingRemoteHost(result, \"--cache-remote-tls-enabled\");",
          "166:     }",
          "168:     @Test",
          "169:     @Order(15)",
          "170:     @Launch({\"start-dev\", \"--features=multi-site\"})",
          "171:     public void testMultiSiteWithoutCacheRemoteHost(LaunchResult result) {",
          "172:         assertErrorStreamContains(result, \"- cache-remote-host: Required when feature 'multi-site' or 'clusterless' is set.\");",
          "173:     }",
          "175:     @Test",
          "176:     @Order(16)",
          "177:     @Launch({\"start-dev\", \"--features=multi-site\", \"--cache-remote-host=localhost\", \"--cache-remote-username=user\"})",
          "178:     public void testCacheRemoteUsernameWithoutCacheRemotePassword(LaunchResult result) {",
          "179:         assertErrorStreamContains(result, \"The option 'cache-remote-password' is required when 'cache-remote-username' is set.\");",
          "180:     }",
          "182:     @Test",
          "183:     @Order(17)",
          "184:     @Launch({\"start-dev\", \"--features=multi-site\", \"--cache-remote-host=localhost\", \"--cache-remote-password=secret\"})",
          "185:     public void testCacheRemotePasswordWithoutCacheRemoteUsername(LaunchResult result) {",
          "186:         assertErrorStreamContains(result, \"The option 'cache-remote-username' is required when 'cache-remote-password' is set.\");",
          "187:     }",
          "189:     private static void assertDisabledDueToMissingRemoteHost(LaunchResult result, String option) {",
          "190:         assertErrorStreamContains(result, \"Disabled option: '%s'. Available only when remote host is set\".formatted(option));",
          "191:     }",
          "193:     private static void assertErrorStreamContains(LaunchResult result, String msg) {",
          "194:         assertTrue(result.getErrorStream().stream().anyMatch(s -> s.contains(msg)));",
          "195:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aff423c7e929ba78b9f4e33e0db02bfb4ae93273",
      "candidate_info": {
        "commit_hash": "aff423c7e929ba78b9f4e33e0db02bfb4ae93273",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/aff423c7e929ba78b9f4e33e0db02bfb4ae93273",
        "files": [
          "pom.xml",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java",
          "test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java"
        ],
        "message": "Upgrade to Quarkus 3.17.8 (#36758)\n\nCloses #36757\nCloses #33475\nCloses #34454\n\nSigned-off-by: V\u00e1clav Muzik\u00e1\u0159 <vmuzikar@redhat.com>",
        "before_after_code_files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java",
          "test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java||test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java",
          "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:             }",
          "587:             ConfigValue value = Configuration.getNonPersistedConfigValue(name);",
          "588:             if (value.getValue() == null || value.getConfigSourceName() == null",
          "591:                 return;",
          "592:             }",
          "",
          "[Removed Lines]",
          "589:                     || (quarkus && !value.getConfigSourceName().equals(QuarkusPropertiesConfigSource.NAME))) {",
          "",
          "[Added Lines]",
          "589:                     || (quarkus && !value.getConfigSourceName().contains(QuarkusPropertiesConfigSource.NAME))) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Optional;",
          "24: import java.util.Properties;",
          "26: import io.smallrye.config.ConfigValue;",
          "27: import io.smallrye.config.SmallRyeConfig;",
          "30: import org.keycloak.config.Option;",
          "31: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper;",
          "32: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "",
          "[Removed Lines]",
          "29: import org.eclipse.microprofile.config.spi.ConfigProviderResolver;",
          "",
          "[Added Lines]",
          "26: import io.quarkus.runtime.configuration.ConfigUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     public static final String OPTION_PART_SEPARATOR = String.valueOf(OPTION_PART_SEPARATOR_CHAR);",
          "44:     public static final String KC_OPTIMIZED = NS_KEYCLOAK_PREFIX + \"optimized\";",
          "46:     private Configuration() {",
          "48:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     private static SmallRyeConfig config;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     }",
          "76:     public static synchronized SmallRyeConfig getConfig() {",
          "78:     }",
          "",
          "[Removed Lines]",
          "77:         return (SmallRyeConfig) ConfigProviderResolver.instance().getConfig();",
          "",
          "[Added Lines]",
          "79:         if (config == null) {",
          "80:             config = ConfigUtils.emptyConfigBuilder().addDiscoveredSources().build();",
          "81:         }",
          "82:         return config;",
          "83:     }",
          "85:     public static void resetConfig() {",
          "86:         config = null;",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         return properties;",
          "72:     }",
          "79: }",
          "",
          "[Removed Lines]",
          "74:     @Override",
          "76:     public String getName() {",
          "77:         return NAME;",
          "78:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakConfigSourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         return CONFIG_SOURCES;",
          "92:     }",
          "94:     @Override",
          "95:     public SmallRyeConfigBuilder configBuilder(SmallRyeConfigBuilder builder) {",
          "96:         return builder.withSources(CONFIG_SOURCES);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     public static List<ConfigSource> getConfigSources() {",
          "95:         return CONFIG_SOURCES;",
          "96:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KeycloakPropertiesConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     @Override",
          "66:     protected ConfigSource loadConfigSource(URL url, int ordinal) throws IOException {",
          "82:     }",
          "84:     public static class InClassPath extends KeycloakPropertiesConfigSource implements ConfigSourceProvider {",
          "",
          "[Removed Lines]",
          "70:         var cs = new PropertiesConfigSource(transform(ConfigSourceUtil.urlToMap(url)), url.toString(), ordinal) {",
          "71:             private String name;",
          "72:             @Override",
          "73:             public String getName() {",
          "74:                 return name;",
          "75:             }",
          "76:             public void setName(String name) {",
          "77:                 this.name = name;",
          "78:             }",
          "79:         };",
          "80:         cs.setName(url.toString());",
          "81:         return cs;",
          "",
          "[Added Lines]",
          "67:         return new PropertiesConfigSource(transform(ConfigSourceUtil.urlToMap(url)), url.toString(), ordinal);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PersistedConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         return INSTANCE;",
          "68:     }",
          "75:     @Override",
          "76:     public ConfigValue getConfigValue(String propertyName) {",
          "77:         if (isEnabled()) {",
          "",
          "[Removed Lines]",
          "70:     @Override",
          "71:     public String getName() {",
          "72:         return NAME;",
          "73:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/QuarkusPropertiesConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: public final class QuarkusPropertiesConfigSource extends AbstractLocationConfigSourceLoader implements ConfigSourceProvider {",
          "45:     private static final String FILE_NAME = \"quarkus.properties\";",
          "48:     public static Path getConfigurationFile() {",
          "49:         String homeDir = Environment.getHomeDir();",
          "",
          "[Removed Lines]",
          "46:     public static final String NAME = \"QuarkusProperties\";",
          "",
          "[Added Lines]",
          "46:     public static final String NAME = \"KcQuarkusPropertiesConfigSource\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     protected ConfigSource loadConfigSource(URL url, int ordinal) throws IOException {",
          "71:         String name = loadingFile ? NAME : (NAME + \" \" + url);",
          "72:         return new PropertiesConfigSource(ConfigSourceUtil.urlToMap(url), name, ordinal) {",
          "78:             @Override",
          "79:             public String getValue(String propertyName) {",
          "80:                 if (propertyName.startsWith(NS_QUARKUS)) {",
          "",
          "[Removed Lines]",
          "73:             @Override",
          "74:             public String getName() {",
          "75:                 return name;",
          "76:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import static org.keycloak.quarkus.runtime.configuration.Configuration.OPTION_PART_SEPARATOR_CHAR;",
          "24: import static org.keycloak.quarkus.runtime.configuration.Configuration.toCliFormat;",
          "25: import static org.keycloak.quarkus.runtime.configuration.Configuration.toEnvVarFormat;",
          "27: import java.util.Iterator;",
          "28: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import static org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:                    String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "86:                    String description, BooleanSupplier required, String requiredWhen, String from) {",
          "87:         this.option = option;",
          "89:         this.to = to == null ? getFrom() : to;",
          "90:         this.enabled = enabled;",
          "91:         this.enabledWhen = enabledWhen;",
          "",
          "[Removed Lines]",
          "88:         this.from = from == null ? MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + this.option.getKey() : from;",
          "",
          "[Added Lines]",
          "89:         this.from = from == null ? NS_KEYCLOAK_PREFIX + this.option.getKey() : from;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:             from = name.replace(to.substring(0, to.lastIndexOf('.')), from.substring(0, from.lastIndexOf(OPTION_PART_SEPARATOR_CHAR)));",
          "115:         }",
          "123:         ConfigValue config = convertValue(context.proceed(from));",
          "125:         boolean parentValue = false;",
          "126:         if (mapFrom != null && (config == null || config.getValue() == null)) {",
          "129:             parentValue = true;",
          "130:         }",
          "",
          "[Removed Lines]",
          "117:         if ((isRebuild() || Environment.isRebuildCheck()) && isRunTime()) {",
          "119:             return ConfigValue.builder().withName(name).build();",
          "120:         }",
          "128:             config = Configuration.getKcConfigValue(mapFrom);",
          "",
          "[Added Lines]",
          "125:             String mapFromWithPrefix = NS_KEYCLOAK_PREFIX + mapFrom;",
          "126:             config = PropertyMappers.getMapper(mapFromWithPrefix).getConfigValue(mapFromWithPrefix, context);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     }",
          "78:     public static ConfigValue getValue(ConfigSourceInterceptorContext context, String name) {",
          "79:         PropertyMapper<?> mapper = getMapper(name);",
          "82:             return ConfigValue.builder().withName(name).build();",
          "83:         }",
          "84:         if (mapper == null) {",
          "85:             return context.proceed(name);",
          "86:         }",
          "",
          "[Removed Lines]",
          "81:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper)) {",
          "",
          "[Added Lines]",
          "79:         name = removeProfilePrefixIfNeeded(name);",
          "87:         if ((isRebuild() || Environment.isRebuildCheck()) && isKeycloakRuntime(name, mapper) && !name.startsWith(\"quarkus.log.\")) {",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/AbstractConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:             }",
          "116:         });",
          "119:         PropertyMappers.reset();",
          "120:         ConfigArgsConfigSource.setCliArgs();",
          "121:         PersistedConfigSource.getInstance().getConfigValueProperties().clear();",
          "122:         Profile.reset();",
          "124:     }",
          "126:     @After",
          "",
          "[Removed Lines]",
          "118:         SmallRyeConfigProviderResolver.class.cast(ConfigProviderResolver.instance()).releaseConfig(ConfigProvider.getConfig());",
          "123:         ConfigProviderResolver.setInstance(null);",
          "",
          "[Added Lines]",
          "122:         Configuration.resetConfig();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     }",
          "136:     static protected SmallRyeConfig createConfig() {",
          "137:         KeycloakConfigSourceProvider.reload();",
          "145:     }",
          "147:     protected void assertConfig(String key, String expectedValue, boolean isExternal) {",
          "",
          "[Removed Lines]",
          "140:         SmallRyeConfig config = ConfigUtils.configBuilder(true, LaunchMode.NORMAL).build();",
          "141:         SmallRyeConfigProviderResolver resolver = new SmallRyeConfigProviderResolver();",
          "142:         resolver.registerConfig(config, Thread.currentThread().getContextClassLoader());",
          "143:         ConfigProviderResolver.setInstance(resolver);",
          "144:         return config;",
          "",
          "[Added Lines]",
          "136:         Configuration.resetConfig();",
          "138:         return Configuration.getConfig();",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/OptionsDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     @Test",
          "78:     @Order(5)",
          "80:     @Launch({\"start\", \"--db=dev-file\"})",
          "81:     public void testSettingEnvVars(CLIResult cliResult) {",
          "82:         cliResult.assertMessage(\"The following used run time options are UNAVAILABLE and will be ignored during build time:\");",
          "83:         cliResult.assertMessage(\"- log-file: Available only when File log handler is activated.\");",
          "86:     }",
          "88:     @DryRun",
          "",
          "[Removed Lines]",
          "79:     @WithEnvVars({\"KC_LOG\", \"console\", \"KC_LOG_CONSOLE_COLOR\", \"true\", \"KC_LOG_FILE\", \"something-env\", \"KC_HTTP_ENABLED\", \"true\", \"KC_HOSTNAME_STRICT\", \"false\"})",
          "84:         cliResult.assertMessage(\"quarkus.log.console.color\");",
          "85:         cliResult.assertMessage(\"config property is deprecated and should not be used anymore\");",
          "",
          "[Added Lines]",
          "79:     @WithEnvVars({\"KC_LOG\", \"console\", \"KC_LOG_FILE\", \"something-env\", \"KC_HTTP_ENABLED\", \"true\", \"KC_HOSTNAME_STRICT\", \"false\"})",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/ShowConfigCommandDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         assertThat(output, not(containsString(\"kc.db.password\")));",
          "94:         assertThat(output, not(containsString(\"secret-pass\")));",
          "95:     }",
          "96: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     @Test",
          "98:     @RawDistOnly(reason = \"Containers are immutable\")",
          "99:     void testConfigSourceNames(KeycloakDistribution distribution) {",
          "100:         CLIResult result = distribution.run(\"build\");",
          "101:         result.assertBuild();",
          "103:         distribution.setEnvVar(\"KC_LOG\", \"file\");",
          "105:         result = distribution.run(String.format(\"%s=%s\", CONFIG_FILE_LONG_NAME, Paths.get(\"src/test/resources/ShowConfigCommandTest/keycloak-keystore.conf\").toAbsolutePath().normalize()), ShowConfig.NAME, \"all\");",
          "107:         result.assertMessage(\"(CLI)\");",
          "108:         result.assertMessage(\"(ENV)\");",
          "109:         result.assertMessage(\"(quarkus.properties)\");",
          "110:         result.assertMessage(\"(Persisted)\");",
          "111:         result.assertMessage(\"(config-keystore)\");",
          "112:         result.assertMessage(\"(classpath keycloak.conf)\");",
          "113:         result.assertMessage(\"(keycloak-keystore.conf)\");",
          "114:     }",
          "",
          "---------------"
        ],
        "test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java||test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java": [
          "File: test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java -> test-framework/core/src/main/java/org/keycloak/testframework/config/Config.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:             } else {",
          "62:                 testConfig = Thread.currentThread().getContextClassLoader().getResource(\"keycloak-test.properties\");",
          "63:             }",
          "65:         } catch (Exception e) {",
          "66:             throw new RuntimeException(e);",
          "67:         }",
          "",
          "[Removed Lines]",
          "64:             return testConfig != null ? new PropertiesConfigSource(testConfig, \"KeycloakTestConfig\", 280) : null;",
          "",
          "[Added Lines]",
          "64:             return testConfig != null ? new PropertiesConfigSource(testConfig, 280) : null;",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java": [
          "File: testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java -> testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/KeycloakTestingClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     public static ResteasyClientBuilder getRestEasyClientBuilder(String serverUrl) {",
          "57:         ResteasyClientBuilder resteasyClientBuilder = (ResteasyClientBuilder) ResteasyClientBuilder.newBuilder();",
          "58:         resteasyClientBuilder.connectionPoolSize(10);",
          "61:             resteasyClientBuilder.disableTrustManager().hostnameVerification(ResteasyClientBuilder.HostnameVerificationPolicy.ANY);",
          "62:         }",
          "",
          "[Removed Lines]",
          "59:         if (serverUrl.startsWith(\"https\")) {",
          "",
          "[Added Lines]",
          "59:         if ((serverUrl != null && serverUrl.startsWith(\"https\")) || \"true\".equals(System.getProperty(\"auth.server.ssl.required\"))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         return resteasyClientBuilder;",
          "65:     }",
          "67:     public static KeycloakTestingClient getInstance(String serverUrl) {",
          "68:         return new KeycloakTestingClient(serverUrl, null);",
          "69:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     public static ResteasyClientBuilder getRestEasyClientBuilder() {",
          "68:         return getRestEasyClientBuilder(null);",
          "69:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java||testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java": [
          "File: testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java -> testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/AdminClientUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     public static ResteasyClient createResteasyClient(boolean ignoreUnknownProperties, Boolean followRedirects) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException {",
          "138:         ResteasyClientBuilder resteasyClientBuilder = (ResteasyClientBuilder) ResteasyClientBuilder.newBuilder();",
          "",
          "[Removed Lines]",
          "140:         if (\"true\".equals(System.getProperty(\"auth.server.ssl.required\"))) {",
          "141:             File truststore = new File(PROJECT_BUILD_DIRECTORY, \"dependency/keystore/keycloak.truststore\");",
          "142:             resteasyClientBuilder.sslContext(getSSLContextWithTruststore(truststore, \"secret\"));",
          "144:             System.setProperty(\"javax.net.ssl.trustStore\", truststore.getAbsolutePath());",
          "145:         }",
          "",
          "[Added Lines]",
          "140:         resteasyClientBuilder.sslContext(getSSLContextWithTruststore());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:         return theContext;",
          "200:     }",
          "202:     private static SSLContext getSSLContextWithTruststoreAndKeystore(",
          "203:         File trustStore, String truststorePassword, File keystore, String keystorePassword)",
          "204:         throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException, UnrecoverableKeyException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     public static SSLContext getSSLContextWithTruststore() {",
          "198:         try {",
          "199:             if (\"true\".equals(System.getProperty(\"auth.server.ssl.required\"))) {",
          "200:                 File truststore = new File(PROJECT_BUILD_DIRECTORY, \"dependency/keystore/keycloak.truststore\");",
          "201:                 System.setProperty(\"javax.net.ssl.trustStore\", truststore.getAbsolutePath());",
          "202:                 return getSSLContextWithTruststore(truststore, \"secret\");",
          "203:             }",
          "204:         } catch (Exception e) {",
          "205:             throw new RuntimeException(e);",
          "206:         }",
          "207:         return null;",
          "208:     }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLServletAdapterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1976:         BasicCookieStore cookieStore = new BasicCookieStore();",
          "1977:         try (Keycloak client = KeycloakBuilder.builder().serverUrl(loginPage.getAuthRoot()).realm(SAMLSERVLETDEMO)",
          "1978:                 .username(admin).password(adminPassword).clientId(Constants.ADMIN_CLI_CLIENT_ID)",
          "1980:                 CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultCookieStore(cookieStore).build()) {",
          "1981:             HttpUriRequest req = RequestBuilder.post()",
          "1982:                     .setUri(loginPage.getAuthRoot() + \"/admin/realms/\" + SAMLSERVLETDEMO + \"/users/\" + userId + \"/impersonation\")",
          "",
          "[Removed Lines]",
          "1979:                 .resteasyClient(ResteasyClientBuilder.newBuilder().build()).build();",
          "",
          "[Added Lines]",
          "1979:                 .resteasyClient(AdminClientUtil.createResteasyClient()).build();",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ImpersonationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.testsuite.admin;",
          "20: import org.apache.http.HttpResponse;",
          "21: import org.apache.http.client.methods.HttpUriRequest;",
          "22: import org.apache.http.client.methods.RequestBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import jakarta.ws.rs.ClientErrorException;",
          "21: import jakarta.ws.rs.core.HttpHeaders;",
          "22: import jakarta.ws.rs.core.Response;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.hamcrest.MatcherAssert;",
          "28: import org.jboss.arquillian.graphene.page.Page;",
          "29: import org.jboss.resteasy.client.jaxrs.ResteasyClient;",
          "31: import org.junit.Assert;",
          "32: import org.junit.Assume;",
          "33: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "30: import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: import org.keycloak.models.UserModel;",
          "53: import org.keycloak.models.UserSessionModel;",
          "54: import org.keycloak.models.utils.KeycloakModelUtils;",
          "56: import org.keycloak.testsuite.AbstractKeycloakTest;",
          "57: import org.keycloak.testsuite.AssertEvents;",
          "58: import org.keycloak.testsuite.auth.page.AuthRealm;",
          "59: import org.keycloak.testsuite.pages.AppPage;",
          "61: import org.openqa.selenium.Cookie;",
          "66: import java.io.IOException;",
          "67: import java.net.URL;",
          "69: import java.util.stream.Collectors;",
          "72: import static org.keycloak.testsuite.util.OAuthClient.AUTH_SERVER_ROOT;",
          "73: import static org.keycloak.testsuite.util.ServerURLs.getAuthServerContextRoot;",
          "",
          "[Removed Lines]",
          "55: import org.keycloak.representations.idm.*;",
          "60: import org.keycloak.testsuite.util.*;",
          "63: import jakarta.ws.rs.ClientErrorException;",
          "64: import jakarta.ws.rs.core.HttpHeaders;",
          "65: import jakarta.ws.rs.core.Response;",
          "68: import java.util.*;",
          "71: import static org.hamcrest.Matchers.*;",
          "",
          "[Added Lines]",
          "57: import org.keycloak.representations.idm.ClientRepresentation;",
          "58: import org.keycloak.representations.idm.ErrorRepresentation;",
          "59: import org.keycloak.representations.idm.EventRepresentation;",
          "60: import org.keycloak.representations.idm.RealmRepresentation;",
          "61: import org.keycloak.representations.idm.RoleRepresentation;",
          "62: import org.keycloak.representations.idm.UserRepresentation;",
          "67: import org.keycloak.testsuite.util.AdminClientUtil;",
          "68: import org.keycloak.testsuite.util.ClientBuilder;",
          "69: import org.keycloak.testsuite.util.ClientManager;",
          "70: import org.keycloak.testsuite.util.CredentialBuilder;",
          "71: import org.keycloak.testsuite.util.DroneUtils;",
          "72: import org.keycloak.testsuite.util.OAuthClient;",
          "73: import org.keycloak.testsuite.util.RealmBuilder;",
          "74: import org.keycloak.testsuite.util.UserBuilder;",
          "79: import java.util.HashMap;",
          "80: import java.util.LinkedList;",
          "81: import java.util.List;",
          "82: import java.util.Map;",
          "83: import java.util.Set;",
          "86: import static org.hamcrest.Matchers.containsString;",
          "87: import static org.hamcrest.Matchers.empty;",
          "88: import static org.hamcrest.Matchers.is;",
          "89: import static org.hamcrest.Matchers.not;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "293:     protected Set<Cookie> testSuccessfulImpersonation(String admin, String adminRealm) {",
          "300:         try (Keycloak client = login(admin, adminRealm, resteasyClient)) {",
          "",
          "[Removed Lines]",
          "294:         ResteasyClientBuilder resteasyClientBuilder = (ResteasyClientBuilder) ResteasyClientBuilder.newBuilder();",
          "295:         resteasyClientBuilder.connectionPoolSize(10);",
          "296:         resteasyClientBuilder.httpEngine(AdminClientUtil.getCustomClientHttpEngine(resteasyClientBuilder, 10, null));",
          "297:         ResteasyClient resteasyClient = resteasyClientBuilder.build();",
          "",
          "[Added Lines]",
          "312:         ResteasyClient resteasyClient = AdminClientUtil.createResteasyClient();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "387:             password = username.equals(\"admin\") ? \"admin\" : \"password\";",
          "388:         }",
          "390:         return KeycloakBuilder.builder().serverUrl(getAuthServerContextRoot() + \"/auth\")",
          "391:                 .realm(realm)",
          "392:                 .username(username)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:         if (resteasyClient == null) {",
          "406:             resteasyClient = AdminClientUtil.createResteasyClient();",
          "407:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "417:     protected Set<Cookie> testSuccessfulServiceAccountImpersonation(UserRepresentation serviceAccount, String serviceAccountRealm) {",
          "424:         try (Keycloak client = loginServiceAccount(serviceAccount, serviceAccountRealm, resteasyClient)) {",
          "",
          "[Removed Lines]",
          "418:         ResteasyClientBuilder resteasyClientBuilder = (ResteasyClientBuilder) ResteasyClientBuilder.newBuilder();",
          "419:         resteasyClientBuilder.connectionPoolSize(10);",
          "420:         resteasyClientBuilder.httpEngine(AdminClientUtil.getCustomClientHttpEngine(resteasyClientBuilder, 10, null));",
          "421:         ResteasyClient resteasyClient = resteasyClientBuilder.build();",
          "",
          "[Added Lines]",
          "437:         ResteasyClient resteasyClient = AdminClientUtil.createResteasyClient();",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/AbstractAdvancedBrokerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.keycloak.storage.UserStorageProvider;",
          "21: import org.keycloak.testsuite.Assert;",
          "22: import org.keycloak.testsuite.AssertEvents;",
          "23: import org.keycloak.testsuite.federation.DummyUserFederationProviderFactory;",
          "24: import org.keycloak.testsuite.util.AccountHelper;",
          "25: import org.keycloak.testsuite.util.ClientBuilder;",
          "26: import org.keycloak.testsuite.util.OAuthClient;",
          "27: import org.keycloak.testsuite.util.RealmBuilder;",
          "28: import org.keycloak.testsuite.util.TestAppHelper;",
          "30: import org.openqa.selenium.TimeoutException;",
          "32: import jakarta.ws.rs.client.Client;",
          "",
          "[Removed Lines]",
          "29: import org.keycloak.testsuite.util.WaitUtils;",
          "",
          "[Added Lines]",
          "23: import org.keycloak.testsuite.client.KeycloakTestingClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import java.net.URI;",
          "38: import java.util.Arrays;",
          "39: import java.util.Collections;",
          "41: import java.util.Set;",
          "42: import java.util.concurrent.TimeUnit;",
          "43: import java.util.concurrent.atomic.AtomicReference;",
          "",
          "[Removed Lines]",
          "40: import java.util.Map;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:         OAuthClient.AccessTokenResponse accessTokenResponse = oauth.realm(bc.consumerRealmName()).clientId(\"broker-app\").doGrantAccessTokenRequest(\"broker-app-secret\", bc.getUserLogin(), bc.getUserPassword());",
          "203:         AtomicReference<String> accessToken = (AtomicReference<String>) new AtomicReference<>(accessTokenResponse.getAccessToken());",
          "206:         try {",
          "207:             WebTarget target = client.target(Urls.identityProviderRetrieveToken(URI.create(getConsumerRoot() + \"/auth\"), bc.getIDPAlias(), bc.consumerRealmName()));",
          "",
          "[Removed Lines]",
          "204:         Client client = jakarta.ws.rs.client.ClientBuilder.newBuilder().register((ClientRequestFilter) request -> request.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken.get())).build();",
          "",
          "[Added Lines]",
          "203:         Client client = KeycloakTestingClient.getRestEasyClientBuilder().register((ClientRequestFilter) request -> request.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken.get())).build();",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:         assertEquals(Status.UNAUTHORIZED.getStatusCode(), accountRequest.asStatus());",
          "395:             try {",
          "396:                 adminClient.realms().realm(\"test\").toRepresentation();",
          "397:                 Assert.fail(\"Not expected to obtain realm\");",
          "",
          "[Removed Lines]",
          "394:         try (Keycloak adminClient = Keycloak.getInstance(OAuthClient.AUTH_SERVER_ROOT, \"test\", \"test-app\", accessTokenString)) {",
          "",
          "[Added Lines]",
          "394:         try (Keycloak adminClient = Keycloak.getInstance(OAuthClient.AUTH_SERVER_ROOT, \"test\", \"test-app\", accessTokenString, AdminClientUtil.getSSLContextWithTruststore())) {",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/hok/HoKTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: import org.keycloak.testsuite.Assert;",
          "64: import org.keycloak.testsuite.AssertEvents;",
          "65: import org.keycloak.testsuite.admin.ApiUtil;",
          "66: import org.keycloak.testsuite.drone.Different;",
          "67: import org.keycloak.testsuite.oauth.RefreshTokenTest;",
          "68: import org.keycloak.testsuite.util.ClientManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: import org.keycloak.testsuite.client.KeycloakTestingClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497:         events.expectCodeToToken(codeId, sessionId).assertEvent();",
          "502:         WebTarget userInfoTarget = null;",
          "503:         Response response = null;",
          "504:         try {",
          "",
          "[Removed Lines]",
          "500:         ClientBuilder clientBuilder = ClientBuilder.newBuilder();",
          "501:         Client client = clientBuilder.build();",
          "",
          "[Added Lines]",
          "501:         Client client = KeycloakTestingClient.getRestEasyClientBuilder().build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "506:             response = userInfoTarget.request().header(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokenResponse.getAccessToken()).get();",
          "507:             assertEquals(401, response.getStatus());",
          "508:         } finally {",
          "510:             client.close();",
          "511:         }",
          "",
          "[Removed Lines]",
          "509:             response.close();",
          "",
          "[Added Lines]",
          "509:             if (response != null) response.close();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9993e17346cb3f877a3736815b9f2783e9e7c763",
      "candidate_info": {
        "commit_hash": "9993e17346cb3f877a3736815b9f2783e9e7c763",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/9993e17346cb3f877a3736815b9f2783e9e7c763",
        "files": [
          "docs/documentation/release_notes/topics/26_1_0.adoc",
          "docs/guides/server/logging.adoc",
          "quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java",
          "quarkus/runtime/src/test/resources/META-INF/keycloak.conf",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt"
        ],
        "message": "Ability to specify log category levels through separate options (#35138)\n\nCloses #34957\n\nCo-authored-by: Steve Hawkins <shawkins@redhat.com>\nSigned-off-by: V\u00e1clav Muzik\u00e1\u0159 <vmuzikar@redhat.com>",
        "before_after_code_files": [
          "quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java",
          "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java",
          "quarkus/runtime/src/test/resources/META-INF/keycloak.conf||quarkus/runtime/src/test/resources/META-INF/keycloak.conf",
          "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java||quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java -> quarkus/config-api/src/main/java/org/keycloak/config/LoggingOptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:             .description(\"The log level of the root category or a comma-separated list of individual categories and their levels. For the root category, you don't need to specify a category.\")",
          "61:             .build();",
          "63:     public enum Output {",
          "64:         DEFAULT,",
          "65:         JSON;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     public static final Option<Level> LOG_LEVEL_CATEGORY = new OptionBuilder<>(\"log-level-<category>\", Level.class)",
          "64:             .category(OptionCategory.LOGGING)",
          "65:             .description(\"The log level of a category. Takes precedence over the 'log-level' option.\")",
          "66:             .caseInsensitiveExpectedValues(true)",
          "67:             .build();",
          "",
          "---------------"
        ],
        "quarkus/config-api/src/main/java/org/keycloak/config/Option.java||quarkus/config-api/src/main/java/org/keycloak/config/Option.java": [
          "File: quarkus/config-api/src/main/java/org/keycloak/config/Option.java -> quarkus/config-api/src/main/java/org/keycloak/config/Option.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.util.List;",
          "4: import java.util.Optional;",
          "5: import java.util.stream.Collectors;",
          "7: public class Option<T> {",
          "9:     private final Class<T> type;",
          "10:     private final String key;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import java.util.regex.Matcher;",
          "6: import java.util.regex.Pattern;",
          "10:     public static final Pattern WILDCARD_PLACEHOLDER_PATTERN = Pattern.compile(\"<.+>\");",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/Picocli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import java.util.function.BiConsumer;",
          "48: import java.util.function.Consumer;",
          "49: import java.util.function.Function;",
          "51: import org.keycloak.common.profile.ProfileException;",
          "52: import org.keycloak.config.DeprecatedMetadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     }",
          "103:     private ExecutionExceptionHandler errorHandler = new ExecutionExceptionHandler();",
          "105:     public void parseAndRun(List<String> cliArgs) {",
          "114:         String[] argArray = cliArgs.toArray(new String[0]);",
          "116:         try {",
          "",
          "[Removed Lines]",
          "107:         CommandLine cmd = createCommandLine(spec -> spec",
          "108:                 .addUnmatchedArgsBinding(CommandLine.Model.UnmatchedArgsBinding.forStringArrayConsumer(new ISetter() {",
          "109:                     @Override",
          "110:                     public <T> T set(T value) throws Exception {",
          "111:                         return null; // just ignore",
          "112:                     }",
          "113:                 })));",
          "",
          "[Added Lines]",
          "105:     private Set<PropertyMapper<?>> allowedMappers;",
          "106:     private List<String> unrecognizedArgs = new ArrayList<>();",
          "110:         CommandLine cmd = createCommandLine(spec -> {}).setUnmatchedArgumentsAllowed(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:                 currentSpec = subCommand.getCommandSpec();",
          "160:                 addHelp(currentSpec);",
          "161:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:                 currentSpec.addUnmatchedArgsBinding(CommandLine.Model.UnmatchedArgsBinding.forStringArrayConsumer(new ISetter() {",
          "158:                     @Override",
          "159:                     public <T> T set(T value) {",
          "160:                         if (value != null) {",
          "161:                             unrecognizedArgs.addAll(Arrays.asList((String[]) value));",
          "162:                         }",
          "163:                         return null; // doesn't matter",
          "164:                     }",
          "165:                 }));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:     public void validateConfig(List<String> cliArgs, AbstractCommand abstractCommand) {",
          "329:         if (cliArgs.contains(OPTIMIZED_BUILD_OPTION_LONG) && !wasBuildEverRun()) {",
          "330:             throw new PropertyException(Messages.optimizedUsedForFirstStartup());",
          "331:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:         unrecognizedArgs.removeIf(arg -> {",
          "337:             if (arg.contains(\"=\")) {",
          "338:                 arg = arg.substring(0, arg.indexOf(\"=\"));",
          "339:             }",
          "340:             PropertyMapper<?> mapper = PropertyMappers.getMapper(arg);",
          "341:             return mapper != null && mapper.hasWildcard() && allowedMappers.contains(mapper);",
          "342:         });",
          "343:         if (!unrecognizedArgs.isEmpty()) {",
          "344:             throw new KcUnmatchedArgumentException(abstractCommand.getCommandLine().orElseThrow(), unrecognizedArgs);",
          "345:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "363:                 Optional.ofNullable(PropertyMappers.getRuntimeMappers().get(category)).ifPresent(mappers::addAll);",
          "364:                 Optional.ofNullable(PropertyMappers.getBuildTimeMappers().get(category)).ifPresent(mappers::addAll);",
          "365:                 for (PropertyMapper<?> mapper : mappers) {",
          "373:                         }",
          "383:                         }",
          "391:                             }",
          "392:                         }",
          "401:                         }",
          "413:                 }",
          "414:             }",
          "",
          "[Removed Lines]",
          "366:                     ConfigValue configValue = Configuration.getConfigValue(mapper.getFrom());",
          "367:                     String configValueStr = configValue.getValue();",
          "370:                     if (configValueStr == null) {",
          "371:                         if (Environment.isRuntimeMode() && mapper.isEnabled() && mapper.isRequired()) {",
          "372:                             handleRequired(missingOption, mapper);",
          "374:                         continue;",
          "375:                     }",
          "376:                     if (!isUserModifiable(configValue)) {",
          "377:                         continue;",
          "378:                     }",
          "380:                     if (disabledMappers.contains(mapper)) {",
          "381:                         if (!PropertyMappers.isDisabledMapper(mapper.getFrom())) {",
          "382:                             continue; // we found enabled mapper with the same name",
          "386:                         if (!mapper.isRunTime() || !isRebuild()) {",
          "387:                             if (PropertyMapper.isCliOption(configValue)) {",
          "388:                                 throw new KcUnmatchedArgumentException(abstractCommand.getCommandLine().orElseThrow(), List.of(mapper.getCliFormat()));",
          "389:                             } else {",
          "390:                                 handleDisabled(mapper.isRunTime() ? disabledRunTime : disabledBuildTime, mapper);",
          "393:                         continue;",
          "394:                     }",
          "396:                     if (mapper.isBuildTime() && !options.includeBuildTime) {",
          "397:                         String currentValue = getRawPersistedProperty(mapper.getFrom()).orElse(null);",
          "398:                         if (!configValueStr.equals(currentValue)) {",
          "399:                             ignoredBuildTime.add(mapper.getFrom());",
          "400:                             continue;",
          "402:                     }",
          "403:                     if (mapper.isRunTime() && !options.includeRuntime) {",
          "404:                         ignoredRunTime.add(mapper.getFrom());",
          "405:                         continue;",
          "406:                     }",
          "408:                     mapper.validate(configValue);",
          "410:                     mapper.getDeprecatedMetadata().ifPresent(metadata -> {",
          "411:                         handleDeprecated(deprecatedInUse, mapper, configValueStr, metadata);",
          "412:                     });",
          "",
          "[Added Lines]",
          "384:                     mapper.getKcConfigValues().forEach(configValue -> {",
          "385:                         String configValueStr = configValue.getValue();",
          "388:                         if (configValueStr == null) {",
          "389:                             if (Environment.isRuntimeMode() && mapper.isEnabled() && mapper.isRequired()) {",
          "390:                                 handleRequired(missingOption, mapper);",
          "391:                             }",
          "392:                             return;",
          "394:                         if (!isUserModifiable(configValue)) {",
          "395:                             return;",
          "398:                         if (disabledMappers.contains(mapper)) {",
          "399:                             if (!PropertyMappers.isDisabledMapper(mapper.getFrom())) {",
          "400:                                 return; // we found enabled mapper with the same name",
          "404:                             if (!mapper.isRunTime() || !isRebuild()) {",
          "405:                                 if (PropertyMapper.isCliOption(configValue)) {",
          "406:                                     throw new KcUnmatchedArgumentException(abstractCommand.getCommandLine().orElseThrow(), List.of(mapper.getCliFormat()));",
          "407:                                 } else {",
          "408:                                     handleDisabled(mapper.isRunTime() ? disabledRunTime : disabledBuildTime, mapper);",
          "409:                                 }",
          "410:                             }",
          "411:                             return;",
          "414:                         if (mapper.isBuildTime() && !options.includeBuildTime) {",
          "415:                             String currentValue = getRawPersistedProperty(mapper.getFrom()).orElse(null);",
          "416:                             if (!configValueStr.equals(currentValue)) {",
          "417:                                 ignoredBuildTime.add(mapper.getFrom());",
          "418:                                 return;",
          "419:                             }",
          "420:                         }",
          "421:                         if (mapper.isRunTime() && !options.includeRuntime) {",
          "422:                             ignoredRunTime.add(mapper.getFrom());",
          "423:                             return;",
          "426:                         mapper.validate(configValue);",
          "428:                         mapper.getDeprecatedMetadata().ifPresent(metadata -> {",
          "429:                             handleDeprecated(deprecatedInUse, mapper, configValueStr, metadata);",
          "430:                         });",
          "431:                     });;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "641:         }",
          "642:     }",
          "645:         IncludeOptions result = new IncludeOptions();",
          "646:         if (abstractCommand == null) {",
          "647:             return result;",
          "",
          "[Removed Lines]",
          "644:     private static IncludeOptions getIncludeOptions(List<String> cliArgs, AbstractCommand abstractCommand, String commandName) {",
          "",
          "[Added Lines]",
          "663:     private IncludeOptions getIncludeOptions(List<String> cliArgs, AbstractCommand abstractCommand, String commandName) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "659:         return result;",
          "660:     }",
          "663:         if (command != null && command.getCommand() instanceof AbstractCommand) {",
          "664:             IncludeOptions options = getIncludeOptions(cliArgs, command.getCommand(), command.getCommandName());",
          "",
          "[Removed Lines]",
          "662:     private static void addCommandOptions(List<String> cliArgs, CommandLine command) {",
          "",
          "[Added Lines]",
          "681:     private void addCommandOptions(List<String> cliArgs, CommandLine command) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "671:         }",
          "672:     }",
          "675:         final Map<OptionCategory, List<PropertyMapper<?>>> mappers = new EnumMap<>(OptionCategory.class);",
          "",
          "[Removed Lines]",
          "674:     private static void addOptionsToCli(CommandLine commandLine, IncludeOptions includeOptions) {",
          "",
          "[Added Lines]",
          "693:     private void addOptionsToCli(CommandLine commandLine, IncludeOptions includeOptions) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "685:         }",
          "687:         addMappedOptionsToArgGroups(commandLine, mappers);",
          "688:     }",
          "690:     private static <T extends Map<OptionCategory, List<PropertyMapper<?>>>> void combinePropertyMappers(T origMappers, T additionalMappers) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:         allowedMappers = mappers.values().stream().flatMap(List::stream).collect(Collectors.toUnmodifiableSet());",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/cli/command/AbstractStartCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     @Override",
          "40:     public void run() {",
          "41:         doBeforeRun();",
          "44:         validateConfig();",
          "46:         if (isDevProfile()) {",
          "",
          "[Removed Lines]",
          "42:         HttpPropertyMappers.validateConfig();",
          "43:         HostnameV2PropertyMappers.validateConfig();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     }",
          "59:     @Override",
          "60:     public List<OptionCategory> getOptionCategories() {",
          "61:         EnumSet<OptionCategory> excludedCategories = excludedCategories();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     @Override",
          "58:     protected void validateConfig() {",
          "59:         super.validateConfig(); // we want to run the generic validation here first to check for unknown options",
          "60:         HttpPropertyMappers.validateConfig();",
          "61:         HostnameV2PropertyMappers.validateConfig();",
          "62:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/ConfigArgsConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:                 PropertyMapper<?> mapper = PropertyMappers.getMapper(key);",
          "131:                 if (mapper != null) {",
          "132:                     String to = mapper.getTo();",
          "134:                     if (to != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:                     mapper = mapper.forKey(key);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/KcEnvConfigSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                 PropertyMapper<?> mapper = PropertyMappers.getMapper(key);",
          "52:                 if (mapper != null) {",
          "53:                     String to = mapper.getTo();",
          "55:                     if (to != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:                     mapper = mapper.forEnvKey(key);",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/PropertyMappingInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import io.smallrye.config.Priorities;",
          "24: import jakarta.annotation.Priority;",
          "25: import org.apache.commons.collections4.iterators.FilterIterator;",
          "26: import org.keycloak.quarkus.runtime.Environment;",
          "27: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper;",
          "28: import org.keycloak.quarkus.runtime.configuration.mappers.PropertyMappers;",
          "30: import java.util.Iterator;",
          "32: import static org.keycloak.quarkus.runtime.Environment.isRebuild;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.commons.collections4.IteratorUtils;",
          "30: import org.keycloak.quarkus.runtime.configuration.mappers.WildcardPropertyMapper;",
          "33: import java.util.List;",
          "34: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: @Priority(Priorities.APPLICATION - 10)",
          "50: public class PropertyMappingInterceptor implements ConfigSourceInterceptor {",
          "54:     public static void disable() {",
          "55:         disable.set(true);",
          "",
          "[Removed Lines]",
          "52:     private static ThreadLocal<Boolean> disable = new ThreadLocal<>();",
          "",
          "[Added Lines]",
          "56:     private static final ThreadLocal<Boolean> disable = new ThreadLocal<>();",
          "57:     private static final ThreadLocal<Boolean> disableAdditionalNames = new ThreadLocal<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     @Override",
          "75:     public Iterator<String> iterateNames(ConfigSourceInterceptorContext context) {",
          "77:     }",
          "79:     @Override",
          "",
          "[Removed Lines]",
          "76:         return filterRuntime(context.iterateNames());",
          "",
          "[Added Lines]",
          "86:         List<String> mappedWildcardNames = List.of();",
          "87:         if (!Boolean.TRUE.equals(disableAdditionalNames.get())) {",
          "88:             disableAdditionalNames.set(true);",
          "89:             try {",
          "90:                 mappedWildcardNames = PropertyMappers.getWildcardMappers().stream()",
          "91:                         .map(WildcardPropertyMapper::getToWithWildcards)",
          "92:                         .flatMap(Set::stream)",
          "93:                         .toList();",
          "94:             } finally {",
          "95:                 disableAdditionalNames.remove();",
          "96:             }",
          "97:         }",
          "100:         return filterRuntime(IteratorUtils.chainedIterator(mappedWildcardNames.iterator(), context.iterateNames()));",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/LoggingPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import static org.keycloak.quarkus.runtime.configuration.mappers.PropertyMapper.fromOption;",
          "7: import java.io.File;",
          "8: import java.util.Locale;",
          "9: import java.util.function.BiFunction;",
          "10: import java.util.logging.Level;",
          "11: import java.util.stream.Stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import java.util.List;",
          "10: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     private static final String CONSOLE_ENABLED_MSG = \"Console log handler is activated\";",
          "25:     private static final String FILE_ENABLED_MSG = \"File log handler is activated\";",
          "26:     private static final String SYSLOG_ENABLED_MSG = \"Syslog is activated\";",
          "28:     private LoggingPropertyMappers() {",
          "29:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     private static final String DEFAULT_ROOT_LOG_LEVEL = toLevel(LoggingOptions.LOG_LEVEL.getDefaultValue().orElseThrow().get(0)).getName();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:                 fromOption(LoggingOptions.LOG_LEVEL)",
          "102:                         .to(\"quarkus.log.level\")",
          "104:                         .validator(LoggingPropertyMappers::validateLogLevel)",
          "105:                         .paramLabel(\"category:level\")",
          "106:                         .build(),",
          "108:                 fromOption(LoggingOptions.LOG_SYSLOG_ENABLED)",
          "109:                         .mapFrom(LoggingOptions.LOG, LoggingPropertyMappers.resolveLogHandler(\"syslog\"))",
          "",
          "[Removed Lines]",
          "103:                         .transformer(LoggingPropertyMappers::resolveLogLevel)",
          "",
          "[Added Lines]",
          "106:                         .transformer(LoggingPropertyMappers::resolveRootLogLevel)",
          "110:                 fromOption(LoggingOptions.LOG_LEVEL_CATEGORY)",
          "111:                         .to(\"quarkus.log.category.\\\"<categories>\\\".level\")",
          "112:                         .validator(LoggingPropertyMappers::validateCategoryLogLevel)",
          "113:                         .wildcardKeysTransformer(LoggingPropertyMappers::getConfiguredLogCategories)",
          "114:                         .transformer((v,c) -> toLevel(v).getName())",
          "115:                         .wildcardMapFrom(LoggingOptions.LOG_LEVEL, LoggingPropertyMappers::resolveCategoryLogLevelFromParentLogLevelOption) // a fallback to log-level",
          "116:                         .paramLabel(\"level\")",
          "117:                         .build(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:         return LogContext.getLogContext().getLevelForName(categoryLevel.toUpperCase(Locale.ROOT));",
          "190:     }",
          "196:     record CategoryLevel(String category, String levelName) {}",
          "198:     private static CategoryLevel validateLogLevel(String level) {",
          "",
          "[Removed Lines]",
          "192:     private static void setCategoryLevel(String category, String level) {",
          "193:         LogContext.getLogContext().getLogger(category).setLevel(toLevel(level));",
          "194:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:         }",
          "218:     }",
          "225:             if (categoryLevel.category == null) {",
          "229:             }",
          "230:         }",
          "232:         return rootLevel;",
          "233:     }",
          "235:     private static String resolveLogOutput(String value, ConfigSourceInterceptorContext context) {",
          "236:         boolean isDefault = LoggingOptions.DEFAULT_CONSOLE_OUTPUT.name().toLowerCase(Locale.ROOT).equals(value);",
          "237:         return Boolean.valueOf(!isDefault).toString();",
          "",
          "[Removed Lines]",
          "220:     private static String resolveLogLevel(String value, ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "221:         String rootLevel = LoggingOptions.DEFAULT_LOG_LEVEL.name();",
          "223:         for (String level : value.split(\",\")) {",
          "224:             var categoryLevel = validateLogLevel(level);",
          "226:                 rootLevel = categoryLevel.levelName;",
          "227:             } else {",
          "228:                 setCategoryLevel(categoryLevel.category, categoryLevel.levelName);",
          "",
          "[Added Lines]",
          "227:     private static String resolveRootLogLevel(String value, ConfigSourceInterceptorContext configSourceInterceptorContext) {",
          "228:         for (CategoryLevel categoryLevel : parseLogLevels(value)) {",
          "230:                 return categoryLevel.levelName;",
          "233:         return DEFAULT_ROOT_LOG_LEVEL; // defaults are not resolved in the mapper if transformer is present, so doing it explicitly here",
          "234:     }",
          "236:     private static Set<String> getConfiguredLogCategories(Set<String> categories) {",
          "237:         for (CategoryLevel categoryLevel : parseLogLevels(Configuration.getKcConfigValue(\"log-level\").getValue())) {",
          "238:             if (categoryLevel.category != null) {",
          "239:                 categories.add(categoryLevel.category);",
          "240:             }",
          "241:         }",
          "242:         return categories;",
          "243:     }",
          "245:     private static void validateCategoryLogLevel(String logLevel) {",
          "246:         try {",
          "247:             toLevel(logLevel);",
          "248:         } catch (IllegalArgumentException iae) {",
          "249:             throw new PropertyException(Messages.invalidLogLevel(logLevel));",
          "250:         }",
          "251:     }",
          "253:     private static String resolveCategoryLogLevelFromParentLogLevelOption(String category, String parentLogLevelValue, ConfigSourceInterceptorContext context) {",
          "254:         String rootLevel = DEFAULT_ROOT_LOG_LEVEL;",
          "255:         for (CategoryLevel categoryLevel : parseLogLevels(parentLogLevelValue)) {",
          "256:             if (category.equals(categoryLevel.category)) {",
          "257:                 return categoryLevel.levelName;",
          "258:             } else if (categoryLevel.category == null) {",
          "259:                 rootLevel = categoryLevel.levelName;",
          "260:             }",
          "261:         }",
          "265:     private static List<CategoryLevel> parseLogLevels(String value) {",
          "266:         if (value == null) {",
          "267:             return List.of();",
          "268:         }",
          "270:         return Stream.of(value.split(\",\"))",
          "271:                 .map(LoggingPropertyMappers::validateLogLevel)",
          "272:                 .toList();",
          "273:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "19: import static java.util.Optional.ofNullable;",
          "20: import static org.keycloak.quarkus.runtime.Environment.isRebuild;",
          "21: import static org.keycloak.quarkus.runtime.configuration.Configuration.OPTION_PART_SEPARATOR;",
          "22: import static org.keycloak.quarkus.runtime.configuration.Configuration.OPTION_PART_SEPARATOR_CHAR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.keycloak.config.Option.WILDCARD_PLACEHOLDER_PATTERN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import java.util.List;",
          "28: import java.util.Objects;",
          "29: import java.util.Optional;",
          "30: import java.util.function.BiConsumer;",
          "31: import java.util.function.BiFunction;",
          "32: import java.util.function.BooleanSupplier;",
          "33: import java.util.function.Consumer;",
          "34: import java.util.stream.Stream;",
          "36: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import java.util.Set;",
          "36: import java.util.function.Function;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: import io.smallrye.config.ConfigValue.ConfigValueBuilder;",
          "39: import io.smallrye.config.ExpressionConfigSourceInterceptor;",
          "40: import io.smallrye.config.Expressions;",
          "42: import org.keycloak.config.DeprecatedMetadata;",
          "43: import org.keycloak.config.Option;",
          "44: import org.keycloak.config.OptionCategory;",
          "45: import org.keycloak.quarkus.runtime.cli.PropertyException;",
          "46: import org.keycloak.quarkus.runtime.cli.ShortErrorMessageHandler;",
          "47: import org.keycloak.quarkus.runtime.configuration.ConfigArgsConfigSource;",
          "48: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "49: import org.keycloak.quarkus.runtime.configuration.KcEnvConfigSource;",
          "50: import org.keycloak.quarkus.runtime.configuration.KeycloakConfigSourceProvider;",
          "52: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "53: import org.keycloak.utils.StringUtil;",
          "55: public class PropertyMapper<T> {",
          "58:     private final String to;",
          "59:     private BooleanSupplier enabled;",
          "60:     private String enabledWhen;",
          "",
          "[Removed Lines]",
          "51: import org.keycloak.quarkus.runtime.Environment;",
          "57:     private final Option<T> option;",
          "",
          "[Added Lines]",
          "47: import org.keycloak.quarkus.runtime.Environment;",
          "59:     protected final Option<T> option;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69:     private final String description;",
          "70:     private final BooleanSupplier required;",
          "71:     private final String requiredWhen;",
          "73:     PropertyMapper(Option<T> option, String to, BooleanSupplier enabled, String enabledWhen,",
          "74:                    BiFunction<String, ConfigSourceInterceptorContext, String> mapper,",
          "75:                    String mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper,",
          "76:                    String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "78:         this.option = option;",
          "79:         this.to = to == null ? getFrom() : to;",
          "80:         this.enabled = enabled;",
          "81:         this.enabledWhen = enabledWhen;",
          "",
          "[Removed Lines]",
          "77:                    String description, BooleanSupplier required, String requiredWhen) {",
          "",
          "[Added Lines]",
          "74:     private final String from;",
          "76:     PropertyMapper(PropertyMapper<T> mapper, String from, String to, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper) {",
          "77:         this(mapper.option, to, mapper.enabled, mapper.enabledWhen, mapper.mapper, mapper.mapFrom, parentMapper,",
          "78:                 mapper.paramLabel, mapper.mask, mapper.validator, mapper.description, mapper.required,",
          "79:                 mapper.requiredWhen, from);",
          "80:     }",
          "86:                    String description, BooleanSupplier required, String requiredWhen, String from) {",
          "88:         this.from = from == null ? MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + this.option.getKey() : from;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:     }",
          "175:     public String getFrom() {",
          "177:     }",
          "179:     public String getDescription() {",
          "",
          "[Removed Lines]",
          "176:         return MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + this.option.getKey();",
          "",
          "[Added Lines]",
          "186:         return from;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "234:         return option.getDeprecatedMetadata();",
          "235:     }",
          "237:     private ConfigValue transformValue(String name, ConfigValue configValue, ConfigSourceInterceptorContext context, boolean parentValue) {",
          "238:         String value = configValue.getValue();",
          "239:         String mappedValue = value;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     public boolean hasWildcard() {",
          "252:         return false;",
          "253:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "261:         }",
          "265:     }",
          "267:     private ConfigValue convertValue(ConfigValue configValue) {",
          "",
          "[Removed Lines]",
          "264:         return configValue.from().withValue(mappedValue).withRawValue(value).withConfigSourceOrdinal(0).build();",
          "",
          "[Added Lines]",
          "282:         return configValue.from().withName(name).withValue(mappedValue).withRawValue(value).withConfigSourceOrdinal(0).build();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "272:         return configValue.withValue(ofNullable(configValue.getValue()).map(String::trim).orElse(null));",
          "273:     }",
          "275:     private final class ContextWrapper implements ConfigSourceInterceptorContext {",
          "276:         private final ConfigSourceInterceptorContext context;",
          "277:         private final ConfigValue value;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:     @FunctionalInterface",
          "294:     public interface ValueMapper {",
          "295:         String map(String name, String value, ConfigSourceInterceptorContext context);",
          "296:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "315:         private String description;",
          "316:         private BooleanSupplier isRequired = () -> false;",
          "317:         private String requiredWhen = \"\";",
          "319:         public Builder(Option<T> option) {",
          "320:             this.option = option;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:         private Function<Set<String>, Set<String>> wildcardKeysTransformer;",
          "342:         private ValueMapper wildcardMapFrom;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "439:             return this;",
          "440:         }",
          "442:         public PropertyMapper<T> build() {",
          "443:             if (paramLabel == null && Boolean.class.equals(option.getType())) {",
          "444:                 paramLabel = Boolean.TRUE + \"|\" + Boolean.FALSE;",
          "445:             }",
          "447:         }",
          "448:     }",
          "",
          "[Removed Lines]",
          "446:             return new PropertyMapper<>(option, to, isEnabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, isMasked, validator, description, isRequired, requiredWhen);",
          "",
          "[Added Lines]",
          "467:         public Builder<T> wildcardKeysTransformer(Function<Set<String>, Set<String>> wildcardValuesTransformer) {",
          "468:             this.wildcardKeysTransformer = wildcardValuesTransformer;",
          "469:             return this;",
          "470:         }",
          "472:         public Builder<T> wildcardMapFrom(Option<?> mapFrom, ValueMapper function) {",
          "473:             this.mapFrom = mapFrom.getKey();",
          "474:             this.wildcardMapFrom = function;",
          "475:             return this;",
          "476:         }",
          "483:             var fromWildcardMatcher = WILDCARD_PLACEHOLDER_PATTERN.matcher(option.getKey());",
          "484:             if (fromWildcardMatcher.find()) {",
          "485:                 return new WildcardPropertyMapper<>(option, to, isEnabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, isMasked, validator, description, isRequired, requiredWhen, fromWildcardMatcher, wildcardKeysTransformer, wildcardMapFrom);",
          "486:             }",
          "487:             if (wildcardKeysTransformer != null || wildcardMapFrom != null) {",
          "488:                 throw new AssertionError(\"Wildcard operations not expected with non-wildcard mapper\");",
          "489:             }",
          "490:             return new PropertyMapper<>(option, to, isEnabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, isMasked, validator, description, isRequired, requiredWhen, null);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "525:                 KeycloakConfigSourceProvider.getConfigSourceDisplayName(configValue.getConfigSourceName()));",
          "526:     }",
          "528: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:     public List<ConfigValue> getKcConfigValues() {",
          "579:         return List.of(Configuration.getConfigValue(getFrom()));",
          "580:     }",
          "587:     public PropertyMapper<?> forEnvKey(String key) {",
          "588:         return this;",
          "589:     }",
          "596:     public PropertyMapper<?> forKey(String key) {",
          "597:         return this;",
          "598:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.EnumMap;",
          "24: import java.util.EnumSet;",
          "25: import java.util.HashMap;",
          "26: import java.util.List;",
          "27: import java.util.Map;",
          "28: import java.util.Optional;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.HashSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         if (mapper == null) {",
          "84:             return context.proceed(name);",
          "85:         }",
          "87:     }",
          "89:     public static boolean isSpiBuildTimeProperty(String name) {",
          "",
          "[Removed Lines]",
          "86:         return mapper.getConfigValue(name, context);",
          "",
          "[Added Lines]",
          "87:         return mapper.forKey(name).getConfigValue(name, context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:         return MAPPERS.values().stream().flatMap(Collection::stream).collect(Collectors.toSet());",
          "179:     }",
          "181:     public static boolean isSupported(PropertyMapper<?> mapper) {",
          "182:         ConfigSupportLevel supportLevel = mapper.getCategory().getSupportLevel();",
          "183:         return supportLevel.equals(ConfigSupportLevel.SUPPORTED) || supportLevel.equals(ConfigSupportLevel.DEPRECATED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     public static Set<WildcardPropertyMapper<?>> getWildcardMappers() {",
          "183:         return MAPPERS.getWildcardMappers();",
          "184:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:         private final Map<String, PropertyMapper<?>> disabledBuildTimeMappers = new HashMap<>();",
          "222:         private final Map<String, PropertyMapper<?>> disabledRuntimeMappers = new HashMap<>();",
          "224:         public void addAll(PropertyMapper<?>[] mappers) {",
          "225:             for (PropertyMapper<?> mapper : mappers) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:         private final Set<WildcardPropertyMapper<?>> wildcardMappers = new HashSet<>();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "238:         }",
          "240:         public void addMapper(PropertyMapper<?> mapper) {",
          "241:             handleMapper(mapper, this::add);",
          "242:         }",
          "244:         public void removeMapper(PropertyMapper<?> mapper) {",
          "245:             handleMapper(mapper, this::remove);",
          "246:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:             if (mapper.hasWildcard()) {",
          "248:                 wildcardMappers.add((WildcardPropertyMapper<?>)mapper);",
          "249:             }",
          "254:             wildcardMappers.remove(mapper);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:             }",
          "253:         }",
          "255:         public void sanitizeDisabledMappers() {",
          "256:             if (Environment.getParsedCommand().isEmpty()) return; // do not sanitize when no command is present",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:         @Override",
          "266:         public List<PropertyMapper<?>> get(Object key) {",
          "268:             String strKey = (String) key;",
          "269:             List ret = wildcardMappers.stream()",
          "270:                     .filter(m -> m.matchesWildcardOptionName(strKey))",
          "271:                     .toList();",
          "272:             if (!ret.isEmpty()) {",
          "273:                 return ret;",
          "274:             }",
          "277:             return super.get(key);",
          "278:         }",
          "280:         @Override",
          "281:         public List<PropertyMapper<?>> remove(Object mapper) {",
          "282:             return super.remove(mapper);",
          "283:         }",
          "285:         public Set<WildcardPropertyMapper<?>> getWildcardMappers() {",
          "286:             return Collections.unmodifiableSet(wildcardMappers);",
          "287:         }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/WildcardPropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.keycloak.quarkus.runtime.configuration.mappers;",
          "3: import static org.keycloak.config.Option.WILDCARD_PLACEHOLDER_PATTERN;",
          "4: import static org.keycloak.quarkus.runtime.cli.Picocli.ARG_PREFIX;",
          "6: import java.util.List;",
          "7: import java.util.Optional;",
          "8: import java.util.Set;",
          "9: import java.util.function.BiConsumer;",
          "10: import java.util.function.BiFunction;",
          "11: import java.util.function.BooleanSupplier;",
          "12: import java.util.function.Function;",
          "13: import java.util.regex.Matcher;",
          "14: import java.util.regex.Pattern;",
          "15: import java.util.stream.Collectors;",
          "16: import java.util.stream.StreamSupport;",
          "18: import org.keycloak.config.Option;",
          "19: import org.keycloak.quarkus.runtime.configuration.Configuration;",
          "20: import org.keycloak.quarkus.runtime.configuration.MicroProfileConfigProvider;",
          "22: import io.smallrye.config.ConfigSourceInterceptorContext;",
          "23: import io.smallrye.config.ConfigValue;",
          "25: public class WildcardPropertyMapper<T> extends PropertyMapper<T> {",
          "27:     private final Matcher fromWildcardMatcher;",
          "28:     private final Pattern fromWildcardPattern;",
          "29:     private final Pattern envVarNameWildcardPattern;",
          "30:     private Matcher toWildcardMatcher;",
          "31:     private Pattern toWildcardPattern;",
          "32:     private final Function<Set<String>, Set<String>> wildcardKeysTransformer;",
          "33:     private final ValueMapper wildcardMapFrom;",
          "35:     public WildcardPropertyMapper(Option<T> option, String to, BooleanSupplier enabled, String enabledWhen,",
          "36:             BiFunction<String, ConfigSourceInterceptorContext, String> mapper,",
          "37:             String mapFrom, BiFunction<String, ConfigSourceInterceptorContext, String> parentMapper,",
          "38:             String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "39:             String description, BooleanSupplier required, String requiredWhen, Matcher fromWildcardMatcher, Function<Set<String>, Set<String>> wildcardKeysTransformer, ValueMapper wildcardMapFrom) {",
          "40:         super(option, to, enabled, enabledWhen, mapper, mapFrom, parentMapper, paramLabel, mask, validator, description, required, requiredWhen, null);",
          "41:         this.wildcardMapFrom = wildcardMapFrom;",
          "42:         this.fromWildcardMatcher = fromWildcardMatcher;",
          "44:         this.fromWildcardPattern = Pattern.compile(\"(?:\" + ARG_PREFIX + \"|kc\\\\.)\" + fromWildcardMatcher.replaceFirst(\"([\\\\\\\\\\\\\\\\.a-zA-Z0-9]+)\"));",
          "47:         Matcher envVarMatcher = WILDCARD_PLACEHOLDER_PATTERN.matcher(option.getKey().toUpperCase().replace(\"-\", \"_\"));",
          "48:         this.envVarNameWildcardPattern = Pattern.compile(\"KC_\" + envVarMatcher.replaceFirst(\"([_A-Z0-9]+)\"));",
          "50:         if (to != null) {",
          "51:             toWildcardMatcher = WILDCARD_PLACEHOLDER_PATTERN.matcher(to);",
          "52:             if (!toWildcardMatcher.find()) {",
          "53:                 throw new IllegalArgumentException(\"Attempted to map a wildcard option to a non-wildcard option\");",
          "54:             }",
          "56:             this.toWildcardPattern = Pattern.compile(toWildcardMatcher.replaceFirst(\"([\\\\\\\\\\\\\\\\.a-zA-Z0-9]+)\"));",
          "57:         }",
          "59:         this.wildcardKeysTransformer = wildcardKeysTransformer;",
          "60:     }",
          "62:     @Override",
          "63:     public boolean hasWildcard() {",
          "64:         return true;",
          "65:     }",
          "67:     String getTo(String wildcardKey) {",
          "68:         return toWildcardMatcher.replaceFirst(wildcardKey);",
          "69:     }",
          "71:     String getFrom(String wildcardKey) {",
          "72:         return MicroProfileConfigProvider.NS_KEYCLOAK_PREFIX + fromWildcardMatcher.replaceFirst(wildcardKey);",
          "73:     }",
          "75:     @Override",
          "76:     public List<ConfigValue> getKcConfigValues() {",
          "77:         return this.getWildcardKeys().stream().map(v -> Configuration.getConfigValue(getFrom(v))).toList();",
          "78:     }",
          "80:     public Set<String> getWildcardKeys() {",
          "83:         Set<String> values = StreamSupport.stream(Configuration.getPropertyNames().spliterator(), false)",
          "84:                 .map(n -> getMappedKey(n, false))",
          "85:                 .filter(Optional::isPresent)",
          "86:                 .map(Optional::get)",
          "87:                 .collect(Collectors.toSet());",
          "89:         if (wildcardKeysTransformer != null) {",
          "90:             return wildcardKeysTransformer.apply(values);",
          "91:         }",
          "93:         return values;",
          "94:     }",
          "102:     private Optional<String> getMappedKey(String originalKey, boolean tryTo) {",
          "103:         Matcher matcher = fromWildcardPattern.matcher(originalKey);",
          "104:         if (matcher.matches()) {",
          "105:             return Optional.of(matcher.group(1));",
          "106:         }",
          "108:         if (tryTo && toWildcardPattern != null) {",
          "109:             matcher = toWildcardPattern.matcher(originalKey);",
          "110:             if (matcher.matches()) {",
          "111:                 return Optional.of(matcher.group(1));",
          "112:             }",
          "113:         }",
          "115:         return Optional.empty();",
          "116:     }",
          "118:     public Set<String> getToWithWildcards() {",
          "119:         if (toWildcardMatcher == null) {",
          "120:             return Set.of();",
          "121:         }",
          "123:         return getWildcardKeys().stream()",
          "124:                 .map(v -> toWildcardMatcher.replaceFirst(v))",
          "125:                 .collect(Collectors.toSet());",
          "126:     }",
          "132:     public boolean matchesWildcardOptionName(String name) {",
          "133:         return fromWildcardPattern.matcher(name).matches() || envVarNameWildcardPattern.matcher(name).matches()",
          "134:                 || (toWildcardPattern != null && toWildcardPattern.matcher(name).matches());",
          "135:     }",
          "137:     @Override",
          "138:     public PropertyMapper<?> forEnvKey(String key) {",
          "139:         Matcher matcher = envVarNameWildcardPattern.matcher(key);",
          "140:         if (!matcher.matches()) {",
          "141:             throw new IllegalStateException(\"Env var '\" + key + \"' does not match the expected pattern '\" + envVarNameWildcardPattern + \"'\");",
          "142:         }",
          "143:         String value = matcher.group(1);",
          "144:         final String wildcardValue = value.toLowerCase().replace(\"_\", \".\"); // we opiniotatedly convert env var names to CLI format with dots",
          "145:         return forWildcardValue(wildcardValue);",
          "146:     }",
          "148:     private PropertyMapper<?> forWildcardValue(final String wildcardValue) {",
          "149:         String to = getTo(wildcardValue);",
          "150:         String from = getFrom(wildcardValue);",
          "151:         return new PropertyMapper<T>(this, from, to, wildcardMapFrom == null ? null : (v, context) -> wildcardMapFrom.map(wildcardValue, v, context));",
          "152:     }",
          "154:     @Override",
          "155:     public PropertyMapper<?> forKey(String key) {",
          "156:         final String wildcardValue = getMappedKey(key, true).orElseThrow();",
          "157:         return forWildcardValue(wildcardValue);",
          "158:     }",
          "160: }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/cli/PicocliTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:         assertEquals(Integer.MAX_VALUE, nonRunningPicocli.exitCode); // \"running\" state",
          "387:     }",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:     @Test",
          "390:     public void wrongLevelForCategory() {",
          "391:         NonRunningPicocli nonRunningPicocli = pseudoLaunch(\"start-dev\", \"--log-level-org.keycloak=wrong\");",
          "392:         assertEquals(CommandLine.ExitCode.USAGE, nonRunningPicocli.exitCode);",
          "393:         assertTrue(nonRunningPicocli.getErrString().contains(\"Invalid log level: wrong. Possible values are: warn, trace, debug, error, fatal, info.\"));",
          "394:     }",
          "396:     @Test",
          "397:     public void wildcardLevelForCategory() {",
          "398:         NonRunningPicocli nonRunningPicocli = pseudoLaunch(\"start-dev\", \"--log-level-org.keycloak=warn\");",
          "399:         assertEquals(CommandLine.ExitCode.OK, nonRunningPicocli.exitCode);",
          "400:         var value = nonRunningPicocli.config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\");",
          "401:         assertEquals(\"quarkus.log.category.\\\"org.keycloak\\\".level\", value.getName());",
          "402:         assertEquals(\"WARN\", value.getValue());",
          "403:     }",
          "405:     @Test",
          "406:     public void wildcardLevelFromParent() {",
          "407:         NonRunningPicocli nonRunningPicocli = pseudoLaunch(\"start-dev\", \"--log-level=org.keycloak:warn\");",
          "408:         assertEquals(CommandLine.ExitCode.OK, nonRunningPicocli.exitCode);",
          "409:         var value = nonRunningPicocli.config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\");",
          "410:         assertEquals(\"quarkus.log.category.\\\"org.keycloak\\\".level\", value.getName());",
          "411:         assertEquals(\"WARN\", value.getValue());",
          "412:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/ConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:             assertEquals(Integer.toString(maxCount), config.getConfigValue(prop).getValue());",
          "533:         }",
          "534:     }",
          "535: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     @Test",
          "537:     public void testWildcardCliOptionCanBeMappedToQuarkusOption() {",
          "538:         ConfigArgsConfigSource.setCliArgs(\"--log-level-org.keycloak=trace\");",
          "539:         SmallRyeConfig config = createConfig();",
          "540:         assertEquals(\"TRACE\", config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\").getValue());",
          "541:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.category.\\\"io.quarkus\\\".level\").getValue());",
          "542:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.category.\\\"foo.bar\\\".level\").getValue());",
          "543:     }",
          "545:     @Test",
          "546:     public void testWildcardEnvVarOptionCanBeMappedToQuarkusOption() {",
          "547:         putEnvVar(\"KC_LOG_LEVEL_IO_QUARKUS\", \"trace\");",
          "548:         SmallRyeConfig config = createConfig();",
          "549:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\").getValue());",
          "550:         assertEquals(\"TRACE\", config.getConfigValue(\"quarkus.log.category.\\\"io.quarkus\\\".level\").getValue());",
          "551:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.category.\\\"foo.bar\\\".level\").getValue());",
          "552:     }",
          "554:     @Test",
          "555:     public void testWildcardOptionFromConfigFile() {",
          "556:         putEnvVar(\"SOME_CATEGORY_LOG_LEVEL\", \"debug\");",
          "557:         SmallRyeConfig config = createConfig();",
          "558:         assertEquals(\"DEBUG\", config.getConfigValue(\"quarkus.log.category.\\\"io.k8s\\\".level\").getValue());",
          "559:     }",
          "561:     @Test",
          "562:     public void testWildcardPropertiesDontMatchEnvVarsFormat() {",
          "563:         SmallRyeConfig config = createConfig();",
          "564:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.category.\\\"io.quarkus\\\".level\").getValue());",
          "565:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java||quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java": [
          "File: quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java -> quarkus/runtime/src/test/java/org/keycloak/quarkus/runtime/configuration/test/LoggingConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:                 \"quarkus.log.file.level\", \"DEBUG\"",
          "185:         ));",
          "186:     }",
          "187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     @Test",
          "189:     public void logLevelTakesPrecedenceOverCategoryLevel() {",
          "190:         ConfigArgsConfigSource.setCliArgs(\"--log-level=org.keycloak:error\");",
          "191:         SmallRyeConfig config = createConfig();",
          "192:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.level\").getValue());",
          "193:         assertEquals(\"ERROR\", config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\").getValue());",
          "195:         ConfigArgsConfigSource.setCliArgs(\"--log-level=org.keycloak:error\", \"--log-level-org.keycloak=trace\");",
          "196:         config = createConfig();",
          "197:         assertEquals(\"INFO\", config.getConfigValue(\"quarkus.log.level\").getValue());",
          "198:         assertEquals(\"TRACE\", config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\").getValue());",
          "199:     }",
          "201:     @Test",
          "202:     public void unknownCategoryLevelIsResolvedFromRootLevel() {",
          "203:         ConfigArgsConfigSource.setCliArgs(\"--log-level=warn,org.keycloak:error\", \"--log-level-org.keycloak=trace\");",
          "204:         SmallRyeConfig config = createConfig();",
          "205:         assertEquals(\"WARN\", config.getConfigValue(\"quarkus.log.level\").getValue());",
          "206:         assertEquals(\"TRACE\", config.getConfigValue(\"quarkus.log.category.\\\"org.keycloak\\\".level\").getValue());",
          "207:         assertEquals(\"WARN\", config.getConfigValue(\"quarkus.log.category.\\\"foo.bar\\\".level\").getValue());",
          "208:     }",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/test/resources/META-INF/keycloak.conf||quarkus/runtime/src/test/resources/META-INF/keycloak.conf": [
          "File: quarkus/runtime/src/test/resources/META-INF/keycloak.conf -> quarkus/runtime/src/test/resources/META-INF/keycloak.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: spi-hostname-default-frontend-url = ${keycloak.frontendUrl:http://filepropdefault.unittest}",
          "2: %user-profile.spi-hostname-default-frontend-url = http://filepropprofile.unittest",
          "3: log-level=${SOME_LOG_LEVEL:info}",
          "4: config-keystore=src/test/resources/keystore",
          "5: config-keystore-password=secret",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: log-level-io.k8s=${SOME_CATEGORY_LOG_LEVEL}",
          "5: KC_LOG_LEVEL_IO_QUARKUS=trace",
          "",
          "---------------"
        ],
        "quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java||quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java": [
          "File: quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java -> quarkus/tests/integration/src/test/java/org/keycloak/it/cli/dist/LoggingDistTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.keycloak.config.LoggingOptions;",
          "37: import org.keycloak.it.junit5.extension.CLIResult;",
          "38: import org.keycloak.it.junit5.extension.DistributionTest;",
          "39: import org.keycloak.it.junit5.extension.RawDistOnly;",
          "40: import org.keycloak.it.utils.KeycloakDistribution;",
          "41: import org.keycloak.it.utils.RawDistRootPath;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.keycloak.it.junit5.extension.DryRun;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     @Test",
          "54:     @Launch({ \"start-dev\", \"--log-level=warn\" })",
          "55:     void testSetRootLevel(CLIResult cliResult) {",
          "57:         assertFalse(cliResult.getOutput().contains(\"Listening on:\"));",
          "58:         cliResult.assertStartedDevMode();",
          "59:     }",
          "",
          "[Removed Lines]",
          "56:         assertFalse(cliResult.getOutput().contains(\"INFO [io.quarkus]\"));",
          "",
          "[Added Lines]",
          "57:         assertFalse(cliResult.getOutput().contains(\"INFO  [io.quarkus]\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:     @Test",
          "170:     @Launch({\"start-dev\", \"--log-console-level=wrong\"})",
          "171:     void wrongLevelForHandlers(CLIResult cliResult) {",
          "172:         cliResult.assertError(\"Invalid value for option '--log-console-level': wrong. Expected values are (case insensitive): off, fatal, error, warn, info, debug, trace, all\");",
          "173:     }",
          "175:     @Test",
          "176:     @Launch({\"start-dev\", \"--log=console,file\", \"--log-console-level=debug\", \"--log-file-level=debug\"})",
          "177:     void levelRootDefault(CLIResult cliResult, RawDistRootPath path) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:     @DryRun",
          "177:     @Test",
          "178:     @Launch({\"start-dev\", \"--log-level-org.keycloak=wrong\"})",
          "179:     @DryRun",
          "180:     void wrongLevelForCategory(CLIResult cliResult) {",
          "181:         cliResult.assertError(\"Invalid log level: wrong. Possible values are: warn, trace, debug, error, fatal, info.\");",
          "182:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:         assertThat(output, not(containsString(\"DEBUG [org.hibernate\")));",
          "223:         var fileLog = readDefaultFileLog(path);",
          "224:         assertThat(fileLog, notNullValue());",
          "225:         assertTrue(fileLog.isBlank());",
          "226:     }",
          "228:     protected static String readDefaultFileLog(RawDistRootPath path) {",
          "229:         Path logFilePath = Paths.get(path.getDistRootPath() + File.separator + LoggingOptions.DEFAULT_LOG_PATH);",
          "230:         File logFile = new File(logFilePath.toString());",
          "",
          "[Removed Lines]",
          "220:         assertThat(output, not(containsString(\"INFO [org.keycloak\")));",
          "221:         assertThat(output, not(containsString(\"INFO [io.quarkus\")));",
          "",
          "[Added Lines]",
          "229:         assertThat(output, not(containsString(\"INFO  [org.keycloak\")));",
          "230:         assertThat(output, not(containsString(\"INFO  [io.quarkus\")));",
          "237:     @Test",
          "238:     @Launch({\"start-dev\", \"--log-level=error,org.keycloak:warn,org.hibernate:debug\", \"--log-level-org.keycloak=trace\"})",
          "239:     void categoryLogLevel(CLIResult cliResult) {",
          "240:         var output = cliResult.getOutput();",
          "242:         assertThat(output, containsString(\"DEBUG [org.hibernate\"));",
          "243:         assertThat(output, not(containsString(\"TRACE [org.hibernate\")));",
          "244:         assertThat(output, containsString(\"TRACE [org.keycloak\"));",
          "245:         assertThat(output, not(containsString(\"INFO  [io.quarkus\")));",
          "246:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fba6b391ede0126ea127265be0050b8a6441365",
      "candidate_info": {
        "commit_hash": "4fba6b391ede0126ea127265be0050b8a6441365",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/4fba6b391ede0126ea127265be0050b8a6441365",
        "files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.approved.txt",
          "quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt"
        ],
        "message": "fix: generalizing when enabled like behavior as a validator (#32325)\n\ncloses: #32318\n\nSigned-off-by: Steve Hawkins <shawkins@redhat.com>",
        "before_after_code_files": [
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java",
          "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ],
          "candidate": [
            "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java"
          ]
        }
      },
      "candidate_diff": {
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/BootstrapAdminPropertyMappers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         return new PropertyMapper[]{",
          "37:                 fromOption(BootstrapAdminOptions.USERNAME)",
          "38:                         .paramLabel(\"username\")",
          "44:                         .build(),",
          "45:                 fromOption(BootstrapAdminOptions.PASSWORD)",
          "46:                         .paramLabel(\"password\")",
          "",
          "[Removed Lines]",
          "39:                         .validator((mapper, value) -> {",
          "40:                             if (!isPasswordSet()) {",
          "41:                                 throw new PropertyException(mapper.getOption().getKey() + \" available only when \" + PASSWORD_SET);",
          "42:                             }",
          "43:                         })",
          "",
          "[Added Lines]",
          "39:                         .validateEnabled(BootstrapAdminPropertyMappers::isPasswordSet, PASSWORD_SET)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:                 fromOption(BootstrapAdminOptions.CLIENT_ID)",
          "54:                         .paramLabel(\"client id\")",
          "60:                         .build(),",
          "61:                 fromOption(BootstrapAdminOptions.CLIENT_SECRET)",
          "62:                         .paramLabel(\"client secret\")",
          "",
          "[Removed Lines]",
          "55:                         .validator((mapper, value) -> {",
          "56:                             if (!isClientSecretSet()) {",
          "57:                                 throw new PropertyException(mapper.getOption().getKey() + \" available only when \" + CLIENT_SECRET_SET);",
          "58:                             }",
          "59:                         })",
          "",
          "[Added Lines]",
          "51:                         .validateEnabled(BootstrapAdminPropertyMappers::isClientSecretSet, CLIENT_SECRET_SET)",
          "",
          "---------------"
        ],
        "quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java||quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java": [
          "File: quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java -> quarkus/runtime/src/main/java/org/keycloak/quarkus/runtime/configuration/mappers/PropertyMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:             null,",
          "57:             null,",
          "58:             false,",
          "59:             null) {",
          "60:         @Override",
          "61:         public ConfigValue getConfigValue(String name, ConfigSourceInterceptorContext context) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:             null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     private final String envVarFormat;",
          "75:     private final String cliFormat;",
          "76:     private final BiConsumer<PropertyMapper<T>, ConfigValue> validator;",
          "78:     PropertyMapper(Option<T> option, String to, BooleanSupplier enabled, String enabledWhen,",
          "79:                    BiFunction<Optional<String>, ConfigSourceInterceptorContext, Optional<String>> mapper,",
          "81:         this.option = option;",
          "82:         this.to = to == null ? getFrom() : to;",
          "83:         this.enabled = enabled;",
          "",
          "[Removed Lines]",
          "80:                    String mapFrom, String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator) {",
          "",
          "[Added Lines]",
          "78:     private final String description;",
          "82:                    String mapFrom, String paramLabel, boolean mask, BiConsumer<PropertyMapper<T>, ConfigValue> validator,",
          "83:                    String description) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         this.cliFormat = toCliFormat(option.getKey());",
          "90:         this.envVarFormat = toEnvVarFormat(getFrom());",
          "91:         this.validator = validator;",
          "92:     }",
          "94:     private static Optional<String> defaultTransformer(Optional<String> value, ConfigSourceInterceptorContext context) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:         this.description = description;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:     }",
          "192:     public String getDescription() {",
          "194:     }",
          "",
          "[Removed Lines]",
          "193:         return this.option.getDescription();",
          "",
          "[Added Lines]",
          "197:         return this.description;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:         private String enabledWhen = \"\";",
          "295:         private String paramLabel;",
          "296:         private BiConsumer<PropertyMapper<T>, ConfigValue> validator = (mapper, value) -> mapper.validateExpectedValues(value, mapper::validateSingleValue);",
          "298:         public Builder(Option<T> option) {",
          "299:             this.option = option;",
          "300:         }",
          "302:         public Builder<T> to(String to) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:         private String description;",
          "305:             this.description = this.option.getDescription();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:             this.validator = validator;",
          "345:             return this;",
          "346:         }",
          "348:         public PropertyMapper<T> build() {",
          "349:             if (paramLabel == null && Boolean.class.equals(option.getType())) {",
          "350:                 paramLabel = Boolean.TRUE + \"|\" + Boolean.FALSE;",
          "351:             }",
          "353:         }",
          "354:     }",
          "",
          "[Removed Lines]",
          "352:             return new PropertyMapper<T>(option, to, isEnabled, enabledWhen, mapper, mapFrom, paramLabel, isMasked, validator);",
          "",
          "[Added Lines]",
          "361:         public Builder<T> validateEnabled(BooleanSupplier isEnabled, String enabledWhen) {",
          "362:             this.validator = (mapper, value) -> {",
          "363:                 if (!isEnabled.getAsBoolean()) {",
          "364:                     throw new PropertyException(mapper.getOption().getKey() + \" available only when \" + enabledWhen);",
          "365:                 }",
          "366:             };",
          "367:             this.description = String.format(\"%s Available only when %s.\", this.description, enabledWhen);",
          "368:             return this;",
          "369:         }",
          "375:             return new PropertyMapper<T>(option, to, isEnabled, enabledWhen, mapper, mapFrom, paramLabel, isMasked, validator, description);",
          "",
          "---------------"
        ]
      }
    }
  ]
}