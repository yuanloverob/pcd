{
  "cve_id": "CVE-2019-1195",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
  "patch_info": {
    "commit_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/c70af488e435ebd552f3da0547dee39dc8437a64",
    "files": [
      "lib/Backend/BackwardPass.cpp",
      "lib/Backend/BackwardPass.h",
      "lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOpt.h",
      "lib/Backend/GlobOptArrays.cpp"
    ],
    "message": "[CVE-2019-1195] Chakra Type Confusion RCE",
    "before_after_code_files": [
      "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
      "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h",
      "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
      "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp"
    ]
  },
  "patch_diff": {
    "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
      "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: BackwardPass::BackwardPass(Func * func, GlobOpt * globOpt, Js::Phase tag)",
      "11:     : func(func), globOpt(globOpt), tag(tag), currentPrePassLoop(nullptr), tempAlloc(nullptr),",
      "12:     preOpBailOutInstrToProcess(nullptr),",
      "14:     isCollectionPass(false), currentRegion(nullptr),",
      "15:     collectionPassSubPhase(CollectionPassSubPhase::None),",
      "16:     isLoopPrepass(false)",
      "",
      "[Removed Lines]",
      "13:     considerSymAsRealUseInNoImplicitCallUses(nullptr),",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "412:     candidateSymsRequiredToBeInt = &localCandidateSymsRequiredToBeInt;",
      "413:     BVSparse<JitArenaAllocator> localCandidateSymsRequiredToBeLossyInt(tempAlloc);",
      "414:     candidateSymsRequiredToBeLossyInt = &localCandidateSymsRequiredToBeLossyInt;",
      "415:     intOverflowCurrentlyMattersInRange = true;",
      "417:     FloatSymEquivalenceMap localFloatSymEquivalenceMap(tempAlloc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "414:     BVSparse<JitArenaAllocator> localConsiderSymsAsRealUsesInNoImplicitCallUses(tempAlloc);",
      "415:     considerSymsAsRealUsesInNoImplicitCallUses = &localConsiderSymsAsRealUsesInNoImplicitCallUses;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3755:         block->loop->regAlloc.liveOnBackEdgeSyms = block->upwardExposedUses->CopyNew(this->func->m_alloc);",
      "3756:     }",
      "3760: #if DBG_DUMP",
      "3761:     TraceBlockUses(block, false);",
      "",
      "[Removed Lines]",
      "3758:     Assert(!considerSymAsRealUseInNoImplicitCallUses);",
      "",
      "[Added Lines]",
      "3759:     Assert(considerSymsAsRealUsesInNoImplicitCallUses->IsEmpty());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4228:             {",
      "4229:                 IR::RegOpnd *const regSrc = src->AsRegOpnd();",
      "4230:                 sym = regSrc->m_sym;",
      "4232:                 {",
      "4234:                     ProcessStackSymUse(sym->AsStackSym(), true);",
      "4235:                 }",
      "4236:                 if(regSrc->IsArrayRegOpnd())",
      "",
      "[Removed Lines]",
      "4231:                 if(considerSymAsRealUseInNoImplicitCallUses && considerSymAsRealUseInNoImplicitCallUses == sym)",
      "4233:                     considerSymAsRealUseInNoImplicitCallUses = nullptr;",
      "",
      "[Added Lines]",
      "4232:                 if(considerSymsAsRealUsesInNoImplicitCallUses->TestAndClear(sym->m_id))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4652:             IR::Opnd *const use =",
      "4653:                 FindNoImplicitCallUse(",
      "4654:                     instr,",
      "",
      "[Removed Lines]",
      "4651:             Assert(!considerSymAsRealUseInNoImplicitCallUses);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4659:                     });",
      "4660:             if(use)",
      "4661:             {",
      "4663:             }",
      "4664:         }",
      "4665:     }",
      "",
      "[Removed Lines]",
      "4662:                 considerSymAsRealUseInNoImplicitCallUses = arrayRegOpnd->HeadSegmentLengthSym();",
      "",
      "[Added Lines]",
      "4661:                 considerSymsAsRealUsesInNoImplicitCallUses->Set(arrayRegOpnd->HeadSegmentLengthSym()->m_id);",
      "",
      "---------------"
    ],
    "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h": [
      "File: lib/Backend/BackwardPass.h -> lib/Backend/BackwardPass.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:     BVSparse<JitArenaAllocator> * intOverflowDoesNotMatterInRangeBySymId;",
      "192:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeInt;",
      "193:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeLossyInt;",
      "195:     bool intOverflowCurrentlyMattersInRange;",
      "196:     bool isCollectionPass;",
      "197:     enum class CollectionPassSubPhase",
      "",
      "[Removed Lines]",
      "194:     StackSym * considerSymAsRealUseInNoImplicitCallUses;",
      "",
      "[Added Lines]",
      "194:     BVSparse<JitArenaAllocator> * considerSymsAsRealUsesInNoImplicitCallUses;",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
      "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "13149:     arraySrcOpt.Optimize();",
      "13150: }",
      "13152: void",
      "13153: GlobOpt::CaptureNoImplicitCallUses(",
      "13154:     IR::Opnd *opnd,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13152: void",
      "13153: GlobOpt::ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues)",
      "13154: {",
      "13155:     if (isLikelyJsArray)",
      "13156:     {",
      "13165:         this->CaptureNoImplicitCallUses(baseOpnd, isLikelyJsArray);",
      "13166:     }",
      "13167:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
      "13168:     {",
      "13172:         IR::RegOpnd *const headSegmentLengthOpnd =",
      "13173:             IR::RegOpnd::New(",
      "13174:                 baseArrayOpnd->HeadSegmentLengthSym(),",
      "13175:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
      "13176:                 instr->m_func);",
      "13178:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
      "13179:         this->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
      "13180:     }",
      "13181: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17038:     }",
      "17039: #endif",
      "17041:     RemoveMemOpSrcInstr(memopInstr, emitData->stElemInstr, emitData->block);",
      "17042:     if (!isMemset)",
      "17043:     {",
      "17044:         RemoveMemOpSrcInstr(memopInstr, ((MemCopyEmitData*)emitData)->ldElemInstr, emitData->block);",
      "17045:     }",
      "17046: }",
      "17048: bool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17072:     Assert(noImplicitCallUsesToInsert->Count() == 0);",
      "17073:     bool isLikelyJsArray;",
      "17074:     if (emitData->stElemInstr->GetDst()->IsIndirOpnd())",
      "17075:     {",
      "17076:         baseOpnd = emitData->stElemInstr->GetDst()->AsIndirOpnd()->GetBaseOpnd();",
      "17077:         isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
      "17078:         ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
      "17079:     }",
      "17083:         if (((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->IsIndirOpnd())",
      "17084:         {",
      "17085:             baseOpnd = ((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->AsIndirOpnd()->GetBaseOpnd();",
      "17086:             isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
      "17087:             ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
      "17088:         }",
      "17091:     InsertNoImplicitCallUses(memopInstr);",
      "17092:     noImplicitCallUsesToInsert->Clear();",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
      "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "721: private:",
      "722:     void                    CaptureNoImplicitCallUses(IR::Opnd *opnd, const bool usesNoMissingValuesInfo, IR::Instr *const includeCurrentInstr = nullptr);",
      "723:     void                    InsertNoImplicitCallUses(IR::Instr *const instr);",
      "724:     void                    PrepareLoopArrayCheckHoist();",
      "726: public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "724:     void                    ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues);",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp": [
      "File: lib/Backend/GlobOptArrays.cpp -> lib/Backend/GlobOptArrays.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1929:         baseArrayOpnd = nullptr;",
      "1930:     }",
      "1959:     const auto OnEliminated = [&](const Js::Phase phase, const char *const eliminatedLoad)",
      "1960:     {",
      "",
      "[Removed Lines]",
      "1932:     if (isLikelyJsArray)",
      "1933:     {",
      "1942:         globOpt->CaptureNoImplicitCallUses(baseOpnd, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
      "1943:     }",
      "1944:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
      "1945:     {",
      "1949:         IR::RegOpnd *const headSegmentLengthOpnd =",
      "1950:             IR::RegOpnd::New(",
      "1951:                 baseArrayOpnd->HeadSegmentLengthSym(),",
      "1952:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
      "1953:                 instr->m_func);",
      "1955:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
      "1956:         globOpt->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
      "1957:     }",
      "",
      "[Added Lines]",
      "1932:     globOpt->ProcessNoImplicitCallArrayUses(baseOpnd, baseArrayOpnd, instr, isLikelyJsArray, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dce7443ae45f82eceec3284974610e1a1bbe6792",
      "candidate_info": {
        "commit_hash": "dce7443ae45f82eceec3284974610e1a1bbe6792",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/dce7443ae45f82eceec3284974610e1a1bbe6792",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ],
        "message": "[CVE-2019-1196] Chakra Builtins Function Type Confusion",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h",
          "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp",
          "lib/Backend/Lower.h||lib/Backend/Lower.h",
          "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h",
          "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl",
          "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp",
          "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h",
          "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp",
          "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h",
          "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h",
          "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp"
          ],
          "candidate": [
            "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6555:             case Js::OpCode::Coerce_Regex:",
          "6556:             case Js::OpCode::Coerce_StrOrRegex:",
          "6557:             case Js::OpCode::Conv_PrimStr:",
          "6559:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc1());",
          "6560:                 SetNegativeZeroDoesNotMatterIfLastUse(instr->GetSrc2());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6558:             case Js::OpCode::Conv_Prop:",
          "",
          "---------------"
        ],
        "lib/Backend/JnHelperMethodList.h||lib/Backend/JnHelperMethodList.h": [
          "File: lib/Backend/JnHelperMethodList.h -> lib/Backend/JnHelperMethodList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: HELPERCALL_MATH(Op_MinInAnArray, Js::JavascriptMath::MinInAnArray, AttrCanThrow)",
          "136: HELPERCALLCHK(Op_ConvString, Js::JavascriptConversion::ToString, AttrCanThrow)",
          "137: HELPERCALLCHK(Op_CoerseString, Js::JavascriptConversion::CoerseString, AttrCanThrow)",
          "138: HELPERCALLCHK(Op_CoerseRegex, (Js::JavascriptRegExp* (*) (Js::Var aValue, Js::Var options, Js::ScriptContext *scriptContext))Js::JavascriptRegExp::CreateRegEx, AttrCanThrow)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: HELPERCALLCHK(Op_ConvPropertyKey, Js::JavascriptOperators::OP_ToPropertyKey, AttrCanThrow)",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.cpp||lib/Backend/Lower.cpp": [
          "File: lib/Backend/Lower.cpp -> lib/Backend/Lower.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2826:             this->LowerConvPrimStr(instr);",
          "2827:             break;",
          "2829:         case Js::OpCode::ClearAttributes:",
          "2830:             this->LowerBinaryHelper(instr, IR::HelperOP_ClearAttributes);",
          "2831:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2829:         case Js::OpCode::Conv_Prop:",
          "2830:             this->LowerConvPropertyKey(instr);",
          "2831:             break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25474:     return dstOpnd;",
          "25475: }",
          "25477: void",
          "25478: Lowerer::LowerConvStrCommon(IR::JnHelperMethod helper,  IR::Instr * instr)",
          "25479: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25481: void",
          "25482: Lowerer::LowerConvPropertyKey(IR::Instr* instr)",
          "25483: {",
          "25484:     LowerConvStrCommon(IR::HelperOp_ConvPropertyKey, instr);",
          "25485: }",
          "",
          "---------------"
        ],
        "lib/Backend/Lower.h||lib/Backend/Lower.h": [
          "File: lib/Backend/Lower.h -> lib/Backend/Lower.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "670:     void            LowerConvPrimStr(IR::Instr * instr);",
          "671:     void            LowerConvStrCommon(IR::JnHelperMethod helper, IR::Instr * instr);",
          "673:     void            GenerateRecyclerAlloc(IR::JnHelperMethod allocHelper, size_t allocSize, IR::RegOpnd* newObjDst, IR::Instr* insertionPointInstr, bool inOpHelper = false);",
          "675:     template <typename ArrayType>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673:     void            LowerConvPropertyKey(IR::Instr* instr);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h||lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h": [
          "File: lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h -> lib/Runtime/ByteCode/ByteCodeCacheReleaseFileVersion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const GUID byteCodeCacheReleaseFileVersion =",
          "",
          "[Removed Lines]",
          "10: { 0x26894CEE, 0xB780, 0x4CD4, { 0xB7, 0x93, 0x7B, 0x09, 0x72, 0xAE, 0xED, 0xD9 } };",
          "",
          "[Added Lines]",
          "10: { 0x3096a219, 0x129d, 0x4a4a, { 0xa6, 0x1c, 0x18, 0x6d, 0x3, 0xbb, 0x25, 0xb7 } };",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: }",
          "225: bool ApplyEnclosesArgs(ParseNode* fncDecl, ByteCodeGenerator* byteCodeGenerator);",
          "228: bool IsExpressionStatement(ParseNode* stmt, const Js::ScriptContext *const scriptContext);",
          "229: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo);",
          "230: void EmitInvoke(Js::RegSlot location, Js::RegSlot callObjLocation, Js::PropertyId propertyId, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot arg1Location);",
          "",
          "[Removed Lines]",
          "226: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall = false, ParseNode *bindPnode = nullptr, bool isTopLevel = false);",
          "227: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo);",
          "",
          "[Added Lines]",
          "226: void Emit(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue, bool isConstructorCall = false, Js::RegSlot bindingNameLocation = Js::Constants::NoRegister, bool isTopLevel = false);",
          "227: void EmitBinaryOpnds(ParseNode* pnode1, ParseNode* pnode2, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, Js::RegSlot computedPropertyLocation = Js::Constants::NoRegister);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:         EndStatement(stmt);",
          "954:     }",
          "957:     if (funcInfo->IsTmpReg(stmt->location))",
          "958:     {",
          "959:         if (!stmt->isUsed && !fReturnValue)",
          "",
          "[Removed Lines]",
          "956:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, nullptr/*bindPnode*/, true/*isTopLevel*/);",
          "",
          "[Added Lines]",
          "956:     Emit(stmt, this, funcInfo, fReturnValue, false/*isConstructorCall*/, Js::Constants::NoRegister/*computedPropertyLocation*/, true/*isTopLevel*/);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8224:     byteCodeGenerator->Writer()->CallI(Js::OpCode::CallI, location, location, 2, callSiteId);",
          "8225: }",
          "8243: void EmitMemberNode(ParseNode *memberNode, Js::RegSlot objectLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, ParseNode* parentNode, bool useStore, bool* isObjectEmpty = nullptr)",
          "8244: {",
          "8245:     ParseNode *nameNode = memberNode->AsParseNodeBin()->pnode1;",
          "",
          "[Removed Lines]",
          "8227: void EmitComputedFunctionNameVar(ParseNode *nameNode, ParseNodeFnc *exprNode, ByteCodeGenerator *byteCodeGenerator)",
          "8228: {",
          "8229:     AssertMsg(exprNode != nullptr, \"callers of this function should pass in a valid expression Node\");",
          "8230:     Assert(exprNode->HasComputedName());",
          "8232:     if (nameNode == nullptr)",
          "8233:     {",
          "8234:         return;",
          "8235:     }",
          "8237:     if (exprNode->pnodeName == nullptr)",
          "8238:     {",
          "8239:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, nameNode->location);",
          "8240:     }",
          "8241: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8254:         exprNode->AsParseNodeFnc()->SetHomeObjLocation(objectLocation);",
          "8255:     }",
          "8259:     if (nameNode->nop == knopComputedName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8241:     Js::RegSlot computedNamePropertyKey = Js::Constants::NoRegister;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8264:         nameNode->location = nameNode->AsParseNodeUni()->pnode1->location;",
          "8267:         {",
          "8269:         }",
          "8270:     }",
          "",
          "[Removed Lines]",
          "8265:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo);",
          "8266:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor())",
          "8268:             EmitComputedFunctionNameVar(nameNode, exprNode->AsParseNodeFnc(), byteCodeGenerator);",
          "",
          "[Added Lines]",
          "8251:         computedNamePropertyKey = funcInfo->AcquireTmpRegister();",
          "8253:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo, computedNamePropertyKey);",
          "8255:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor() && exprNode->AsParseNodeFnc()->pnodeName == nullptr)",
          "8257:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, computedNamePropertyKey);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8289:             (isClassMember ? Js::OpCode::InitClassMemberSetComputedName : Js::OpCode::InitSetElemI) :",
          "8290:             (isClassMember ? Js::OpCode::InitClassMemberComputedName : Js::OpCode::InitComputedProperty);",
          "8294:         funcInfo->ReleaseLoc(exprNode);",
          "8295:         funcInfo->ReleaseLoc(nameNode);",
          "8297:         return;",
          "8298:     }",
          "",
          "[Removed Lines]",
          "8292:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, nameNode->location, true);",
          "",
          "[Added Lines]",
          "8281:         byteCodeGenerator->Writer()->Element(setOp, exprNode->location, objectLocation, computedNamePropertyKey, true);",
          "8285:         funcInfo->ReleaseTmpRegister(computedNamePropertyKey);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9578:     }",
          "9579: }",
          "9582: {",
          "9584:     if (MayHaveSideEffectOnNode(pnode1, pnode2))",
          "",
          "[Removed Lines]",
          "9581: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "",
          "[Added Lines]",
          "9571: void EmitBinaryOpnds(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, Js::RegSlot computedPropertyLocation)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9589:     Emit(pnode1, byteCodeGenerator, funcInfo, false);",
          "9597:     {",
          "9599:     }",
          "9600: }",
          "9602: void EmitBinaryReference(ParseNode *pnode1, ParseNode *pnode2, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fLoadLhs)",
          "",
          "[Removed Lines]",
          "9591:     if (pnode1->nop == knopComputedName && pnode2->nop == knopClassDecl &&",
          "9592:         (pnode2->AsParseNodeClass()->pnodeConstructor == nullptr || pnode2->AsParseNodeClass()->pnodeConstructor->nop != knopVarDecl))",
          "9593:     {",
          "9594:         Emit(pnode2, byteCodeGenerator, funcInfo, false, false, pnode1);",
          "9595:     }",
          "9596:     else",
          "9598:         Emit(pnode2, byteCodeGenerator, funcInfo, false);",
          "",
          "[Added Lines]",
          "9581:     if (pnode1->nop == knopComputedName && computedPropertyLocation != Js::Constants::NoRegister)",
          "9583:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Prop, computedPropertyLocation, pnode1->location);",
          "9586:     Emit(pnode2, byteCodeGenerator, funcInfo, false, false, computedPropertyLocation);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10142:     }",
          "10143: }",
          "10146: {",
          "10147:     if (pnode == nullptr)",
          "10148:     {",
          "",
          "[Removed Lines]",
          "10145: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, ParseNode * bindPnode, bool isTopLevel)",
          "",
          "[Added Lines]",
          "10132: void Emit(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue, bool isConstructorCall, Js::RegSlot bindingNameLocation, bool isTopLevel)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10968:         Emit(pnodeClass->pnodeConstructor, byteCodeGenerator, funcInfo, false);",
          "10970:         if (pnodeClass->pnodeExtends)",
          "10971:         {",
          "10972:             byteCodeGenerator->StartStatement(pnodeClass->pnodeExtends);",
          "",
          "[Removed Lines]",
          "10969:         EmitComputedFunctionNameVar(bindPnode, pnodeClass->pnodeConstructor, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "10957:         if (bindingNameLocation != Js::Constants::NoRegister && !pnodeClass->pnodeConstructor->pnodeName)",
          "10958:         {",
          "10959:             Assert(pnodeClass->pnodeConstructor->HasComputedName());",
          "10960:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, pnodeClass->pnodeConstructor->location, bindingNameLocation);",
          "10961:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/OpCodes.h||lib/Runtime/ByteCode/OpCodes.h": [
          "File: lib/Runtime/ByteCode/OpCodes.h -> lib/Runtime/ByteCode/OpCodes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: MACRO_WMS(              Conv_Num,           Reg2,           OpSideEffect|OpTempNumberProducing|OpTempNumberTransfer|OpTempObjectSources|OpOpndHasImplicitCall|OpProducesNumber) // Convert to Number. [[ToNumber()]]",
          "322: MACRO_EXTEND_WMS(       Conv_Str,           Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324: MACRO_EXTEND_WMS(       Conv_Prop,          Reg2,           OpOpndHasImplicitCall|OpTempNumberSources|OpTempObjectSources|OpCanCSE|OpPostOpDbgBailOut)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterHandler.inl||lib/Runtime/Language/InterpreterHandler.inl": [
          "File: lib/Runtime/Language/InterpreterHandler.inl -> lib/Runtime/Language/InterpreterHandler.inl",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   DEF3_WMS(CALL,                    ProfiledReturnTypeCallIExtendedFlags,    PROFILEDOP(OP_ProfiledReturnTypeCallIExtendedFlags, OP_CallIExtendedFlags), ProfiledCallIExtendedFlags)",
          "96: EXDEF2_WMS(A1toA1Mem,               Conv_Str,                   JavascriptConversion::ToString)",
          "97:   DEF2_WMS(A1toA1Mem,               Conv_Obj,                   JavascriptOperators::ToObject)",
          "98: EXDEF2_WMS(A1toA1Mem,               NewUnscopablesWrapperObject,JavascriptOperators::ToUnscopablesWrapperObject)",
          "99:   DEF2_WMS(A1toA1Mem,               Conv_Num,                   JavascriptOperators::ToNumber)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: EXDEF2_WMS(A1toA1Mem,               Conv_Prop,                  JavascriptOperators::OP_ToPropertyKey)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptConversion.cpp||lib/Runtime/Language/JavascriptConversion.cpp": [
          "File: lib/Runtime/Language/JavascriptConversion.cpp -> lib/Runtime/Language/JavascriptConversion.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:         Var argument,",
          "272:         _In_ ScriptContext* scriptContext,",
          "273:         _Out_ const PropertyRecord** propertyRecord,",
          "",
          "[Removed Lines]",
          "270:     void JavascriptConversion::ToPropertyKey(",
          "",
          "[Added Lines]",
          "270:     Var JavascriptConversion::ToPropertyKey(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:             {",
          "290:                 propertyString = PropertyString::UnsafeFromVar(propName);",
          "291:             }",
          "292:         }",
          "294:         if (propString)",
          "295:         {",
          "297:         }",
          "298:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292:             key = propName;",
          "300:         return key;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptConversion.h||lib/Runtime/Language/JavascriptConversion.h": [
          "File: lib/Runtime/Language/JavascriptConversion.h -> lib/Runtime/Language/JavascriptConversion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         static Var ToPrimitive(_In_ Var aValue, _In_ ScriptContext * scriptContext);",
          "18:         static BOOL CanonicalNumericIndexString(JavascriptString *aValue, double *indexValue, ScriptContext * scriptContext);",
          "21:             Var argument,",
          "22:             _In_ ScriptContext* scriptContext,",
          "23:             _Out_ const PropertyRecord** propertyRecord,",
          "",
          "[Removed Lines]",
          "20:         static void ToPropertyKey(",
          "",
          "[Added Lines]",
          "20:         static Var ToPropertyKey(",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.cpp||lib/Runtime/Language/JavascriptOperators.cpp": [
          "File: lib/Runtime/Language/JavascriptOperators.cpp -> lib/Runtime/Language/JavascriptOperators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5208:         JIT_HELPER_END(Op_DeleteElementI);",
          "5209:     }",
          "5211:     Var JavascriptOperators::OP_GetLength(Var instance, ScriptContext* scriptContext)",
          "5212:     {",
          "5213:         return JavascriptOperators::OP_GetProperty(instance, PropertyIds::length, scriptContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5211:     Var JavascriptOperators::OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext)",
          "5212:     {",
          "5213:         JIT_HELPER_REENTRANT_HEADER(Op_ConvPropertyKey);",
          "5214:         PropertyRecord const* unused = nullptr;",
          "5215:         return JavascriptConversion::ToPropertyKey(argument, scriptContext, &unused, nullptr);",
          "5216:         JIT_HELPER_END(Op_ConvPropertyKey);",
          "5217:     }",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/JavascriptOperators.h||lib/Runtime/Language/JavascriptOperators.h": [
          "File: lib/Runtime/Language/JavascriptOperators.h -> lib/Runtime/Language/JavascriptOperators.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:         static Var OP_CmGt_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
          "454:         static Var OP_CmGe_A(Js::Var a,Js::Var b,ScriptContext* scriptContext);",
          "456:         static FunctionInfo * GetConstructorFunctionInfo(Var instance, ScriptContext * scriptContext);",
          "458:         static DetachedStateBase* DetachVarAndGetState(Var var, bool queueForDelayFree = true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:         static Var OP_ToPropertyKey(Js::Var argument, ScriptContext* scriptContext);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.bc.64b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h||lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h -> lib/Runtime/Library/InJavascript/Intl.js.nojit.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.bc.64b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.32b.h"
        ],
        "lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h||lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h": [
          "File: lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h -> lib/Runtime/Library/JsBuiltIn/JsBuiltIn.js.nojit.bc.64b.h"
        ]
      }
    },
    {
      "candidate_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
      "candidate_info": {
        "commit_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "test/Debugger/rlexe.xml"
        ],
        "message": "Handling exception while GetJSONObject in script debugger.\n\nDuring GetChildren phase when we try to build JSON object we might throw exception. That skipped calling .Detach on the AutoPtr - which leads to release\nthe debugger property again.\nFixed that by catching and discarding the exception.",
        "before_after_code_files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp": [
          "File: lib/Jsrt/JsrtDebuggerObject.cpp -> lib/Jsrt/JsrtDebuggerObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                 if (resolvedObjectDisplay != nullptr)",
          "86:                 {",
          "87:                     JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectProperty::Make(this->GetDebuggerObjectsManager(), objectDisplayWeakRef);",
          "91:                     {",
          "93:                     }",
          "95:                     {",
          "97:                     }",
          "98:                     objectDisplayWeakRef->ReleaseStrongReference();",
          "99:                     objectDisplayWeakRef.Detach();",
          "",
          "[Removed Lines]",
          "88:                     Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "89:                     Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "90:                     if (resolvedObjectDisplay->IsFake())",
          "92:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "94:                     else",
          "96:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "",
          "[Added Lines]",
          "88:                     try",
          "90:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "91:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "92:                         if (resolvedObjectDisplay->IsFake())",
          "93:                         {",
          "94:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "95:                         }",
          "96:                         else",
          "97:                         {",
          "98:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "99:                         }",
          "101:                     catch (const Js::JavascriptException& err)",
          "103:                         err.GetAndClear();   // discard exception object",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                     {",
          "416:                         AutoPtr<WeakArenaReference<Js::IDiagObjectModelDisplay>> objectDisplayWeakRef(resolvedObject.GetObjectDisplay());",
          "417:                         JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectScope::Make(debuggerObjectsManager, objectDisplayWeakRef, scopesCount);",
          "423:                         objectDisplayWeakRef.Detach();",
          "424:                     }",
          "425:                 }",
          "",
          "[Removed Lines]",
          "418:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "419:                         Assert(object != nullptr);",
          "420:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "421:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "422:                         scopesCount++;",
          "",
          "[Added Lines]",
          "425:                         try",
          "426:                         {",
          "427:                             Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "428:                             Assert(object != nullptr);",
          "429:                             Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "430:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "431:                             scopesCount++;",
          "432:                         }",
          "433:                         catch (const Js::JavascriptException& err)",
          "434:                         {",
          "435:                             err.GetAndClear();   // discard exception object",
          "436:                         }",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js": [
          "File: test/Debugger/exceptionWhileFetchingProp.js -> test/Debugger/exceptionWhileFetchingProp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var p = new Proxy({x:10}, {",
          "7:     getOwnPropertyDescriptor: function (oTarget, sKey) {",
          "8:         throw new Error('');",
          "9:         return { configurable: true, enumerable: true, value: 5 };",
          "10:     }",
          "11:   });",
          "13:   function f() {",
          "15:   }",
          "16:   f();",
          "17:   print('Pass');",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline": [
          "File: test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline -> test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [",
          "2:   {",
          "3:     \"evaluate\": {",
          "4:       \"p\": {",
          "5:         \"#__proto__\": \"Object {...}\",",
          "6:         \"[Proxy]\": \"Proxy {...}\"",
          "7:       }",
          "8:     }",
          "9:   }",
          "10: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb4a653442ebe6c8586412fc8d94a4b3e489cfac",
      "candidate_info": {
        "commit_hash": "fb4a653442ebe6c8586412fc8d94a4b3e489cfac",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/fb4a653442ebe6c8586412fc8d94a4b3e489cfac",
        "files": [
          "lib/Backend/GlobOpt.cpp"
        ],
        "message": "Prevent a use after free in memop",
        "before_after_code_files": [
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17080:     RemoveMemOpSrcInstr(memopInstr, emitData->stElemInstr, emitData->block);",
          "17081:     if (!isMemset)",
          "17082:     {",
          "17084:         {",
          "17086:             isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
          "17088:         }",
          "17090:     }",
          "17091:     InsertNoImplicitCallUses(memopInstr);",
          "17092:     noImplicitCallUsesToInsert->Clear();",
          "",
          "[Removed Lines]",
          "17083:         if (((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->IsIndirOpnd())",
          "17085:             baseOpnd = ((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->AsIndirOpnd()->GetBaseOpnd();",
          "17087:             ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
          "17089:         RemoveMemOpSrcInstr(memopInstr, ((MemCopyEmitData*)emitData)->ldElemInstr, emitData->block);",
          "",
          "[Added Lines]",
          "17083:         IR::Instr* ldElemInstr = ((MemCopyEmitData*)emitData)->ldElemInstr;",
          "17084:         if (ldElemInstr->GetSrc1()->IsIndirOpnd())",
          "17086:             baseOpnd = ldElemInstr->GetSrc1()->AsIndirOpnd()->GetBaseOpnd();",
          "17088:             ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, ldElemInstr, isLikelyJsArray, true);",
          "17090:         RemoveMemOpSrcInstr(memopInstr, ldElemInstr, emitData->block);",
          "",
          "---------------"
        ]
      }
    }
  ]
}