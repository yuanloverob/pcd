{
  "cve_id": "CVE-2019-16772",
  "cve_desc": "The serialize-to-js NPM package before version 3.0.1 is vulnerable to Cross-site Scripting (XSS). It does not properly mitigate against unsafe characters in serialized regular expressions. This vulnerability is not affected on Node.js environment since Node.js's implementation of RegExp.prototype.toString() backslash-escapes all forward slashes in regular expressions. If serialized data of regular expression objects are used in an environment other than Node.js, it is affected by this vulnerability.",
  "repo": "commenthol/serialize-to-js",
  "patch_hash": "181d7d583ae5293cd47cc99b14ad13352875f3e3",
  "patch_info": {
    "commit_hash": "181d7d583ae5293cd47cc99b14ad13352875f3e3",
    "repo": "commenthol/serialize-to-js",
    "commit_url": "https://github.com/commenthol/serialize-to-js/commit/181d7d583ae5293cd47cc99b14ad13352875f3e3",
    "files": [
      "lib/index.js",
      "test/fixtures.js"
    ],
    "message": "fix: for ghsa-3fjq-93xj-3f3f",
    "before_after_code_files": [
      "lib/index.js||lib/index.js",
      "test/fixtures.js||test/fixtures.js"
    ]
  },
  "patch_diff": {
    "lib/index.js||lib/index.js": [
      "File: lib/index.js -> lib/index.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:     out += !/^\\s*(function|\\([^)]*\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp",
      "76:   } else if (util.isObject(source)) {",
      "77:     if (util.isRegExp(source)) {",
      "79:     } else if (util.isDate(source)) {",
      "80:       out += 'new Date(\"' + source.toJSON() + '\")'",
      "81:     } else if (util.isError(source)) {",
      "",
      "[Removed Lines]",
      "78:       out += source.toString()",
      "",
      "[Added Lines]",
      "78:       out += 'new RegExp(\"' + source.source + '\", \"' + source.flags + '\")'",
      "",
      "---------------"
    ],
    "test/fixtures.js||test/fixtures.js": [
      "File: test/fixtures.js -> test/fixtures.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:   ],",
      "34:   'regex': [",
      "35:     /test(?:it)?/ig,",
      "37:   ],",
      "38:   'object': [",
      "39:     { a: 1, b: 2 },",
      "",
      "[Removed Lines]",
      "36:     '/test(?:it)?/gi'",
      "",
      "[Added Lines]",
      "36:     'new RegExp(\"test(?:it)?\", \"gi\")'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "138:     new Float64Array([1e12, 2000000, 3.1415, -4.9e2, 5]),",
      "139:     'new Float64Array([1000000000000, 2000000, 3.1415, -490, 5])',",
      "140:     'toString'",
      "141:   ]",
      "142: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141:   ],",
      "142:   'regexXss': [",
      "143:     /[</script><script>alert('xss')//]/i,",
      "144:     'new RegExp(\"[</script><script>alert(\\'xss\\')//]\", \"i\")'",
      "145:   ],",
      "146:   'regex no flags': [",
      "147:     /abc/,",
      "148:     'new RegExp(\"abc\", \"\")'",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef723b5b2924b9a2369b3b12f2417f256660ae49",
      "candidate_info": {
        "commit_hash": "ef723b5b2924b9a2369b3b12f2417f256660ae49",
        "repo": "commenthol/serialize-to-js",
        "commit_url": "https://github.com/commenthol/serialize-to-js/commit/ef723b5b2924b9a2369b3b12f2417f256660ae49",
        "files": [
          "README.md",
          "lib/deserialize.js",
          "lib/index.js",
          "package.json",
          "test/deserialize.js"
        ],
        "message": "break: remove deserialize method",
        "before_after_code_files": [
          "lib/deserialize.js||lib/deserialize.js",
          "lib/index.js||lib/index.js",
          "test/deserialize.js||test/deserialize.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/index.js||lib/index.js"
          ],
          "candidate": [
            "lib/index.js||lib/index.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/deserialize.js||lib/deserialize.js": [
          "File: lib/deserialize.js -> lib/deserialize.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/index.js||lib/index.js": [
          "File: lib/index.js -> lib/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module.exports = {",
          "2:   serialize: require('./serialize'),",
          "5: }",
          "",
          "[Removed Lines]",
          "3:   serializeToModule: require('./serializeToModule'),",
          "4:   deserialize: require('./deserialize')",
          "",
          "[Added Lines]",
          "3:   serializeToModule: require('./serializeToModule')",
          "",
          "---------------"
        ],
        "test/deserialize.js||test/deserialize.js": [
          "File: test/deserialize.js -> test/deserialize.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac0a7e557f3ede5bbb25a613d34680fbb0605f0e",
      "candidate_info": {
        "commit_hash": "ac0a7e557f3ede5bbb25a613d34680fbb0605f0e",
        "repo": "commenthol/serialize-to-js",
        "commit_url": "https://github.com/commenthol/serialize-to-js/commit/ac0a7e557f3ede5bbb25a613d34680fbb0605f0e",
        "files": [
          "README.md",
          "lib/index.js",
          "lib/internal/reference.js",
          "lib/internal/utils.js",
          "package.json",
          "test/fixtures.js",
          "test/index.test.js"
        ],
        "message": "fix: escape unsafe tags in functions\n\nrefactor unsafe mode usage\nuse es5 const and let instead of var",
        "before_after_code_files": [
          "lib/index.js||lib/index.js",
          "lib/internal/reference.js||lib/internal/reference.js",
          "lib/internal/utils.js||lib/internal/utils.js",
          "test/fixtures.js||test/fixtures.js",
          "test/index.test.js||test/index.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/index.js||lib/index.js",
            "test/fixtures.js||test/fixtures.js"
          ],
          "candidate": [
            "lib/index.js||lib/index.js",
            "test/fixtures.js||test/fixtures.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/index.js||lib/index.js": [
          "File: lib/index.js -> lib/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: 'use strict'",
          "",
          "[Removed Lines]",
          "9: var util = require('./internal/utils')",
          "10: var Ref = require('./internal/reference')",
          "",
          "[Added Lines]",
          "9: const utils = require('./internal/utils')",
          "10: const Ref = require('./internal/reference')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: function serialize (source, opts) {",
          "56:   opts = opts || {}",
          "57:   if (!opts._visited) {",
          "",
          "[Removed Lines]",
          "50:   var out = ''",
          "51:   var key",
          "52:   var tmp",
          "53:   var type",
          "54:   var i",
          "",
          "[Added Lines]",
          "50:   let type",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:   }",
          "60:   if (!opts._refs) {",
          "61:     opts.references = []",
          "63:   }",
          "90:         tmp.push(source[i])",
          "91:       }",
          "95:     } else {",
          "98:       if (!~opts._visited.indexOf(source)) {",
          "99:         opts._visited.push(source)",
          "103:               opts._refs.push(key)",
          "104:               if (!opts._refs.hasReference(source[key])) {",
          "106:               }",
          "107:               opts._refs.pop()",
          "108:             } else {",
          "110:             }",
          "111:           }",
          "112:         }",
          "114:         opts._visited.pop()",
          "115:       } else {",
          "116:         if (opts.ignoreCircular) {",
          "118:         } else {",
          "119:           throw new Error('can not convert circular structures.')",
          "120:         }",
          "121:       }",
          "122:     }",
          "125:   } else {",
          "127:   }",
          "129: }",
          "130: module.exports = serialize",
          "",
          "[Removed Lines]",
          "62:     opts._refs = new Ref(opts.references)",
          "65:   if (util.isNull(source)) {",
          "66:     out += 'null'",
          "67:   } else if (util.isArray(source)) {",
          "68:     tmp = source.map(function (item) {",
          "69:       return serialize(item, opts)",
          "70:     })",
          "71:     out += '[' + tmp.join(', ') + ']'",
          "72:   } else if (util.isFunction(source)) {",
          "73:     tmp = source.toString()",
          "75:     out += !/^\\s*(function|\\([^)]*\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp",
          "76:   } else if (util.isObject(source)) {",
          "77:     if (util.isRegExp(source)) {",
          "78:       out += 'new RegExp(' + serialize(source.source) + ', \"' + source.flags + '\")'",
          "79:     } else if (util.isDate(source)) {",
          "80:       out += 'new Date(\"' + source.toJSON() + '\")'",
          "81:     } else if (util.isError(source)) {",
          "82:       out += 'new Error(' + (source.message ? serialize(source.message) : '') + ')'",
          "83:     } else if (util.isBuffer(source)) {",
          "86:       out += \"Buffer.from('\" + source.toString('base64') + \"', 'base64')\"",
          "87:     } else if ((type = util.isTypedArray(source))) {",
          "88:       tmp = []",
          "89:       for (i = 0; i < source.length; i++) {",
          "92:       out += 'new ' + type + '(' +",
          "93:         '[' + tmp.join(', ') + ']' +",
          "94:         ')'",
          "96:       tmp = []",
          "100:         for (key in source) {",
          "101:           if (source.hasOwnProperty(key)) {",
          "102:             if (opts.reference && util.isObject(source[key])) {",
          "105:                 tmp.push(serialize(key) + ': ' + serialize(source[key], opts))",
          "109:               tmp.push(serialize(key) + ': ' + serialize(source[key], opts))",
          "113:         out += '{' + tmp.join(', ') + '}'",
          "117:           out += '{/*[Circular]*/}'",
          "123:   } else if (util.isString(source)) {",
          "124:     out += '\"' + (opts.unsafe ? util.unsafeString(source) : util.safeString(source)) + '\"'",
          "126:     out += '' + source",
          "128:   return out",
          "",
          "[Added Lines]",
          "58:     opts._refs = new Ref(opts.references, opts)",
          "61:   if (utils.isNull(source)) {",
          "62:     return 'null'",
          "63:   } else if (Array.isArray(source)) {",
          "64:     const tmp = source.map(item => serialize(item, opts))",
          "65:     return `[${tmp.join(', ')}]`",
          "66:   } else if (utils.isFunction(source)) {",
          "68:     const _tmp = source.toString()",
          "69:     const tmp = opts.unsafe ? _tmp : utils.saferFunctionString(_tmp, opts)",
          "71:     return !/^\\s*(function|\\([^)]*?\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp",
          "72:   } else if (utils.isObject(source)) {",
          "73:     if (utils.isRegExp(source)) {",
          "74:       return `new RegExp(${utils.quote(source.source, opts)}, \"${source.flags}\")`",
          "75:     } else if (utils.isDate(source)) {",
          "76:       return `new Date(${utils.quote(source.toJSON(), opts)})`",
          "77:     } else if (utils.isError(source)) {",
          "78:       return `new Error(${utils.quote(source.message, opts)})`",
          "79:     } else if (utils.isBuffer(source)) {",
          "82:       return `Buffer.from('${source.toString('base64')}', 'base64')`",
          "83:     } else if ((type = utils.isTypedArray(source))) {",
          "84:       const tmp = []",
          "85:       for (let i = 0; i < source.length; i++) {",
          "88:       return `new ${type}([${tmp.join(', ')}])`",
          "90:       const tmp = []",
          "94:         for (const key in source) {",
          "95:           if (Object.prototype.hasOwnProperty.call(source, key)) {",
          "96:             if (opts.reference && utils.isObject(source[key])) {",
          "99:                 tmp.push(Ref.wrapkey(key, opts) + ': ' + serialize(source[key], opts))",
          "103:               tmp.push(Ref.wrapkey(key, opts) + ': ' + serialize(source[key], opts))",
          "108:         return `{${tmp.join(', ')}}`",
          "111:           return '{/*[Circular]*/}'",
          "117:   } else if (utils.isString(source)) {",
          "118:     return utils.quote(source, opts)",
          "120:     return '' + source",
          "",
          "---------------"
        ],
        "lib/internal/reference.js||lib/internal/reference.js": [
          "File: lib/internal/reference.js -> lib/internal/reference.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: 'use strict'",
          "16:   this.keys = []",
          "17:   this.refs = []",
          "18:   this.key = []",
          "19:   this.references = references || []",
          "20: }",
          "",
          "[Removed Lines]",
          "8: var KEY = /^[a-zA-Z$_][a-zA-Z$_0-9]*$/",
          "15: function Ref (references) {",
          "",
          "[Added Lines]",
          "8: const utils = require('./utils')",
          "10: const KEY = /^[a-zA-Z$_][a-zA-Z$_0-9]*$/",
          "18: function Ref (references, opts) {",
          "23:   this._opts = opts || {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: }",
          "32: Ref.prototype = {",
          "",
          "[Removed Lines]",
          "28: Ref.wrapkey = function (key) {",
          "29:   return (KEY.test(key) ? key : '\"' + key.replace(/\"/g, '\\\\\"') + '\"')",
          "",
          "[Added Lines]",
          "32: Ref.wrapkey = function (key, opts) {",
          "33:   return (KEY.test(key) ? key : utils.quote(key, opts))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   join: function (key) {",
          "51:     key = key || this.key",
          "52:     if (typeof key === 'string') {",
          "53:       key = [key]",
          "54:     }",
          "57:       if (KEY.test(k)) {",
          "58:         out += '.' + k",
          "59:       } else {",
          "61:       }",
          "62:     })",
          "63:     return out",
          "",
          "[Removed Lines]",
          "50:     var out = ''",
          "56:     key.forEach(function (k) {",
          "60:         out += '[' + Ref.wrapkey(k) + ']'",
          "",
          "[Added Lines]",
          "54:     let out = ''",
          "60:     key.forEach(k => {",
          "64:         out += '[' + Ref.wrapkey(k, this._opts) + ']'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:   hasReference: function (source) {",
          "73:     if (~(idx = this.refs.indexOf(source))) {",
          "74:       this.references.push([this.join(), this.keys[idx]])",
          "75:       return true",
          "",
          "[Removed Lines]",
          "72:     var idx",
          "",
          "[Added Lines]",
          "76:     let idx",
          "",
          "---------------"
        ],
        "lib/internal/utils.js||lib/internal/utils.js": [
          "File: lib/internal/utils.js -> lib/internal/utils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: 'use strict'",
          "11:   '\"': '\\\\\"',",
          "12:   '\\n': '\\\\n',",
          "13:   '\\r': '\\\\r',",
          "14:   '\\t': '\\\\t',",
          "16:   '<': '\\\\u003C',",
          "17:   '>': '\\\\u003E',",
          "18:   '/': '\\\\u002F',",
          "",
          "[Removed Lines]",
          "2:   no-new-func: 0",
          "7: var UNSAFE_CHARS_REGEXP = /[\\\\\\r\\n\\t<>\\u2028\\u2029\"/]/g",
          "8: var CHARS_REGEXP = /[\\\\\\r\\n\\t\"]/g",
          "10: var UNICODE_CHARS = {",
          "15:   '\\\\': '\\\\\\\\',",
          "",
          "[Added Lines]",
          "3: const UNSAFE_CHARS_REGEXP = /[<>\\u2028\\u2029/\\\\\\r\\n\\t\"]/g",
          "4: const CHARS_REGEXP = /[\\\\\\r\\n\\t\"]/g",
          "6: const UNICODE_CHARS = {",
          "11:   '\\\\': '\\\\u005C',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: }",
          "23: function safeString (str) {",
          "25:     return UNICODE_CHARS[unsafeChar]",
          "26:   })",
          "28: }",
          "31: function unsafeString (str) {",
          "35:   return str",
          "36: }",
          "42: function isString (arg) {",
          "43:   return typeof arg === 'string'",
          "44: }",
          "47: function isNull (arg) {",
          "48:   return arg === null",
          "49: }",
          "52: function isRegExp (re) {",
          "53:   return isObject(re) && objectToString(re) === '[object RegExp]'",
          "54: }",
          "57: function isObject (arg) {",
          "58:   return typeof arg === 'object' && arg !== null",
          "59: }",
          "62: function isDate (d) {",
          "63:   return isObject(d) && objectToString(d) === '[object Date]'",
          "64: }",
          "67: function isError (e) {",
          "68:   return isObject(e) &&",
          "69:       (objectToString(e) === '[object Error]' || e instanceof Error)",
          "70: }",
          "73: function isFunction (arg) {",
          "74:   return typeof arg === 'function'",
          "75: }",
          "78: function isBuffer (arg) {",
          "79:   return arg instanceof Buffer",
          "80: }",
          "84:   'Int8Array',",
          "85:   'Uint8Array',",
          "86:   'Uint8ClampedArray',",
          "",
          "[Removed Lines]",
          "24:   str = str.replace(UNSAFE_CHARS_REGEXP, function (unsafeChar) {",
          "27:   return str",
          "29: exports.safeString = safeString",
          "32:   str = str.replace(CHARS_REGEXP, function (unsafeChar) {",
          "33:     return UNICODE_CHARS[unsafeChar]",
          "34:   })",
          "37: exports.unsafeString = unsafeString",
          "39: var isArray = exports.isArray = Array.isArray",
          "40: exports.isArray = isArray",
          "45: exports.isString = isString",
          "50: exports.isNull = isNull",
          "55: exports.isRegExp = isRegExp",
          "60: exports.isObject = isObject",
          "65: exports.isDate = isDate",
          "71: exports.isError = isError",
          "76: exports.isFunction = isFunction",
          "81: exports.isBuffer = isBuffer",
          "83: var TYPED_ARRAYS = [",
          "",
          "[Added Lines]",
          "20:   return str.replace(UNSAFE_CHARS_REGEXP, (unsafeChar) => {",
          "26:   str = str.replace(CHARS_REGEXP, (unsafeChar) => UNICODE_CHARS[unsafeChar])",
          "30: function quote (str, opts) {",
          "31:   const fn = opts.unsafe ? unsafeString : safeString",
          "32:   return str ? `\"${fn(str)}\"` : ''",
          "33: }",
          "35: function saferFunctionString (str, opts) {",
          "36:   return opts.unsafe",
          "37:     ? str",
          "38:     : str.replace(/(<\\/?)([a-z][^>]*?>)/ig, (m, m1, m2) => safeString(m1) + m2)",
          "39: }",
          "41: function objectToString (o) {",
          "42:   return Object.prototype.toString.call(o)",
          "43: }",
          "45: function toType (o) {",
          "46:   const type = objectToString(o)",
          "47:   return type.substring(8, type.length - 1)",
          "48: }",
          "83: const TYPED_ARRAYS = [",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: ]",
          "95: function isTypedArray (arg) {",
          "97:   if (TYPED_ARRAYS.indexOf(type) !== -1) {",
          "98:     return type",
          "99:   }",
          "100: }",
          "109: }",
          "",
          "[Removed Lines]",
          "96:   var type = toType(arg)",
          "101: exports.isTypedArray = isTypedArray",
          "103: function objectToString (o) {",
          "104:   return Object.prototype.toString.call(o)",
          "105: }",
          "107: function toType (o) {",
          "108:   return objectToString(o).replace(/^\\[object (.*)\\]$/, '$1')",
          "",
          "[Added Lines]",
          "96:   const type = toType(arg)",
          "102: module.exports = {",
          "103:   safeString,",
          "104:   unsafeString,",
          "105:   quote,",
          "106:   saferFunctionString,",
          "107:   isString,",
          "108:   isNull,",
          "109:   isRegExp,",
          "110:   isObject,",
          "111:   isDate,",
          "112:   isError,",
          "113:   isFunction,",
          "114:   isBuffer,",
          "115:   isTypedArray",
          "",
          "---------------"
        ],
        "test/fixtures.js||test/fixtures.js": [
          "File: test/fixtures.js -> test/fixtures.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "5: function log (arg) {",
          "6:   console.log(JSON.stringify(arg))",
          "",
          "[Removed Lines]",
          "3: var isBrowser = (typeof window !== 'undefined')",
          "",
          "[Added Lines]",
          "3: const isBrowser = (typeof window !== 'undefined')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: const isLessV12 = parseInt(process.versions.node.split('.')[0]) < 12",
          "11: module.exports = {",
          "13:     \"string's\\n\\\"new\\\"   line\",",
          "14:     '\"string\\'s\\\\n\\\\\"new\\\\\"   line\"'",
          "15:   ],",
          "16:   'string with unsafe characters': [",
          "17:     '<script type=\"application/javascript\">\\u2028\\u2029\\nvar a = 0;\\nvar b = 1; a > 1;\\n</script>',",
          "19:   ],",
          "21:     3.1415,",
          "22:     '3.1415'",
          "23:   ],",
          "25:     true,",
          "26:     'true'",
          "27:   ],",
          "29:     undefined,",
          "30:     'undefined'",
          "31:   ],",
          "33:     null,",
          "34:     'null'",
          "35:   ],",
          "37:     /test(?:it)?/ig,",
          "38:     'new RegExp(\"test(?:it)?\", \"gi\")'",
          "39:   ],",
          "41:     { a: 1, b: 2 },",
          "43:   ],",
          "44:   'empty object': [",
          "45:     {},",
          "",
          "[Removed Lines]",
          "12:   'string': [",
          "18:     '\"\\\\u003Cscript type=\\\\\"application\\\\u002Fjavascript\\\\\"\\\\u003E\\\\u2028\\\\u2029\\\\nvar a = 0;\\\\nvar b = 1; a \\\\u003E 1;\\\\n\\\\u003C\\\\u002Fscript\\\\u003E\"'",
          "20:   'number': [",
          "24:   'boolean': [",
          "28:   'undefined': [",
          "32:   'null': [",
          "36:   'regex': [",
          "40:   'object': [",
          "42:     '{\"a\": 1, \"b\": 2}'",
          "",
          "[Added Lines]",
          "12:   string: [",
          "18:     '\"\\\\u003Cscript type=\\\\\"application\\\\u002Fjavascript\\\\\"\\\\u003E\\\\u2028\\\\u2029\\\\nvar a = 0;\\\\nvar b = 1; a \\\\u003E 1;\\\\n\\\\u003C\\\\u002Fscript\\\\u003E\"',",
          "20:     '\"<script type=\\\\\"application/javascript\\\\\">\\u2028\\u2029\\\\nvar a = 0;\\\\nvar b = 1; a > 1;\\\\n</script>\"'",
          "22:   number: [",
          "26:   boolean: [",
          "30:   undefined: [",
          "34:   null: [",
          "38:   regex: [",
          "42:   object: [",
          "44:     '{a: 1, b: 2}'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   ],",
          "48:   'object with backslash': [",
          "49:     { backslash: '\\\\' },",
          "51:   ],",
          "52:   'object of primitives': [",
          "53:     {",
          "",
          "[Removed Lines]",
          "50:     '{\"backslash\": \"\\\\\\\\\"}'",
          "",
          "[Added Lines]",
          "52:     '{backslash: \"\\\\u005C\"}'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:       two: false,",
          "56:       'thr-ee': undefined,",
          "57:       four: 1,",
          "59:       six: -17,",
          "60:       'se ven': 'string'",
          "61:     },",
          "63:   ],",
          "65:     log,",
          "68:   ],",
          "69:   'arrow function': [",
          "70:     (a) => a + 1,",
          "",
          "[Removed Lines]",
          "58:       '5': 3.1415,",
          "62:     '{\"5\": 3.1415, \"one\": true, \"two\": false, \"thr-ee\": undefined, \"four\": 1, \"six\": -17, \"se ven\": \"string\"}'",
          "64:   'function': [",
          "66:     log.toString(),",
          "67:     'toString'",
          "",
          "[Added Lines]",
          "60:       5: 3.1415,",
          "64:     '{\"5\": 3.1415, one: true, two: false, \"thr-ee\": undefined, four: 1, six: -17, \"se ven\": \"string\"}'",
          "66:   function: [",
          "68:     log.toString()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "72:   ],",
          "73:   'shorthand method': [",
          "74:     { key(a) { return a + 1 } }, // eslint-disable-line",
          "76:   ],",
          "77:   'arrow function in object': [",
          "78:     { key: (a) => a + 1 },",
          "80:   ],",
          "82:     new Date(24 * 12 * 3600000),",
          "83:     'new Date(\"1970-01-13T00:00:00.000Z\")'",
          "84:   ],",
          "86:     new Error('error'),",
          "89:   ],",
          "90:   'empty error': [",
          "91:     new Error(),",
          "94:   ],",
          "95:   'array of primitives': [",
          "96:     [true, false, undefined, 1, 3.1415, -17, 'string'],",
          "97:     '[true, false, undefined, 1, 3.1415, -17, \"string\"]'",
          "98:   ],",
          "100:     new Int8Array([1, 2, 3, 4, 5]),",
          "103:   ],",
          "105:     new Uint8Array([1, 2, 3, 4, 5]),",
          "108:   ],",
          "110:     new Uint8ClampedArray([1, 2, 3, 4, 5]),",
          "113:   ],",
          "115:     new Int16Array([-1, 0, 2, 3, 4, 5]),",
          "118:   ],",
          "120:     new Uint16Array([1, 2, 3, 4, 5]),",
          "123:   ],",
          "125:     new Int32Array([1, 2, 3, 4, 5]),",
          "128:   ],",
          "130:     new Uint32Array([1, 2, 3, 4, 5]),",
          "133:   ],",
          "135:     new Float32Array([1e10, 2000000, 3.1415, -4.9e2, 5]),",
          "138:   ],",
          "140:     new Float64Array([1e12, 2000000, 3.1415, -4.9e2, 5]),",
          "143:   ],",
          "145:     /[</script><script>alert('xss')//]/i,",
          "146:     isLessV12",
          "149:   ],",
          "151:     /[</ script><script>alert('xss')//]/i,",
          "152:     isLessV12",
          "155:   ],",
          "156:   'regex no flags': [",
          "157:     /abc/,",
          "",
          "[Removed Lines]",
          "75:     '{\"key\": function key(a) { return a + 1 }}'",
          "79:     '{\"key\": (a) => a + 1}'",
          "81:   'date': [",
          "85:   'error': [",
          "87:     'new Error(\"error\")',",
          "88:     'toString' // safari has problems with deepEqual here",
          "92:     'new Error()',",
          "93:     'toString' // safari has problems with deepEqual here",
          "99:   'Int8Array': [",
          "101:     'new Int8Array([1, 2, 3, 4, 5])',",
          "102:     'toString'",
          "104:   'Uint8Array': [",
          "106:     'new Uint8Array([1, 2, 3, 4, 5])',",
          "107:     'toString'",
          "109:   'Uint8ClampedArray': [",
          "111:     'new Uint8ClampedArray([1, 2, 3, 4, 5])',",
          "112:     'toString'",
          "114:   'Int16Array': [",
          "116:     'new Int16Array([-1, 0, 2, 3, 4, 5])',",
          "117:     'toString'",
          "119:   'Uint16Array': [",
          "121:     'new Uint16Array([1, 2, 3, 4, 5])',",
          "122:     'toString'",
          "124:   'Int32Array': [",
          "126:     'new Int32Array([1, 2, 3, 4, 5])',",
          "127:     'toString'",
          "129:   'Uint32Array': [",
          "131:     'new Uint32Array([1, 2, 3, 4, 5])',",
          "132:     'toString'",
          "134:   'Float32Array': [",
          "136:     'new Float32Array([10000000000, 2000000, 3.1414999961853027, -490, 5])',",
          "137:     'toString'",
          "139:   'Float64Array': [",
          "141:     'new Float64Array([1000000000000, 2000000, 3.1415, -490, 5])',",
          "142:     'toString'",
          "144:   'regexXss': [",
          "147:       ? 'new RegExp(\"[\\\\u003C\\\\\\\\\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\\\\\\\\\u002F\\\\\\\\\\\\u002F]\", \"i\")'",
          "148:       : 'new RegExp(\"[\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F]\", \"i\")'",
          "150:   'regexXss2': [",
          "153:       ? 'new RegExp(\"[\\\\u003C\\\\\\\\\\\\u002F script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\\\\\\\\\u002F\\\\\\\\\\\\u002F]\", \"i\")'",
          "154:       : 'new RegExp(\"[\\\\u003C\\\\u002F script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F]\", \"i\")'",
          "",
          "[Added Lines]",
          "76:     '{key: function key(a) { return a + 1 }}'",
          "80:     '{key: (a) => a + 1}'",
          "82:   date: [",
          "86:   error: [",
          "88:     'new Error(\"error\")'",
          "92:     'new Error()'",
          "98:   Int8Array: [",
          "100:     'new Int8Array([1, 2, 3, 4, 5])'",
          "102:   Uint8Array: [",
          "104:     'new Uint8Array([1, 2, 3, 4, 5])'",
          "106:   Uint8ClampedArray: [",
          "108:     'new Uint8ClampedArray([1, 2, 3, 4, 5])'",
          "110:   Int16Array: [",
          "112:     'new Int16Array([-1, 0, 2, 3, 4, 5])'",
          "114:   Uint16Array: [",
          "116:     'new Uint16Array([1, 2, 3, 4, 5])'",
          "118:   Int32Array: [",
          "120:     'new Int32Array([1, 2, 3, 4, 5])'",
          "122:   Uint32Array: [",
          "124:     'new Uint32Array([1, 2, 3, 4, 5])'",
          "126:   Float32Array: [",
          "128:     'new Float32Array([10000000000, 2000000, 3.1414999961853027, -490, 5])'",
          "130:   Float64Array: [",
          "132:     'new Float64Array([1000000000000, 2000000, 3.1415, -490, 5])'",
          "134:   regexXss: [",
          "137:       ? `new RegExp(\"[\\\\u003C\\\\u005C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert('xss')\\\\u005C\\\\u002F\\\\u005C\\\\u002F]\", \"i\")`",
          "138:       : 'new RegExp(\"[\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F]\", \"i\")',",
          "140:     isLessV12",
          "141:       ? `new RegExp(\"[<\\\\u005C/script><script>alert('xss')\\\\u005C/\\\\u005C/]\", \"i\")`",
          "142:       : 'new RegExp(\"[</script><script>alert(\\'xss\\')//]\", \"i\")'",
          "144:   regexXss2: [",
          "147:       ? `new RegExp(\"[\\\\u003C\\\\u005C\\\\u002F script\\\\u003E\\\\u003Cscript\\\\u003Ealert('xss')\\\\u005C\\\\u002F\\\\u005C\\\\u002F]\", \"i\")`",
          "148:       : 'new RegExp(\"[\\\\u003C\\\\u002F script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F]\", \"i\")',",
          "150:     isLessV12",
          "151:       ? `new RegExp(\"[<\\\\u005C/ script><script>alert('xss')\\\\u005C/\\\\u005C/]\", \"i\")`",
          "152:       : 'new RegExp(\"[</ script><script>alert(\\'xss\\')//]\", \"i\")'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159:   ],",
          "160:   'error with unsafe message': [",
          "161:     new Error(\"</script><script>alert('xss')\"),",
          "163:   ],",
          "164:   'object with unsafe property name': [",
          "165:     { \"</script><script>alert('xss')//\": 0 },",
          "167:   ],",
          "168:   'object with backslash-escaped quote in property name': [",
          "169:     { '\\\\\": 0}; alert(\\'xss\\')//': 0 },",
          "171:   ]",
          "172: }",
          "174: if (!isBrowser) {",
          "175:   Object.assign(module.exports, {",
          "178:       \"Buffer.from('YnVmZmVy', 'base64')\"",
          "179:     ],",
          "180:     'empty buffer': [",
          "182:       \"Buffer.from('', 'base64')\"",
          "183:     ]",
          "184:   })",
          "",
          "[Removed Lines]",
          "162:     'new Error(\"\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\")'",
          "166:     '{\"\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F\": 0}'",
          "170:     '{\"\\\\\\\\\\\\\": 0}; alert(\\'xss\\')\\\\u002F\\\\u002F\": 0}'",
          "176:     'buffer': [",
          "177:       Buffer.from('buffer'), // eslint-disable-line node/no-deprecated-api",
          "181:       Buffer.from(''), // eslint-disable-line node/no-deprecated-api",
          "",
          "[Added Lines]",
          "160:     'new Error(\"\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\")',",
          "162:     'new Error(\"</script><script>alert(\\'xss\\')\")'",
          "166:     '{\"\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F\": 0}',",
          "168:     `{\"</script><script>alert('xss')//\": 0}`",
          "172:     `{\"\\\\u005C\\\\\": 0}; alert('xss')\\\\u002F\\\\u002F\": 0}`,",
          "174:     `{\"\\\\u005C\\\\\": 0}; alert('xss')//\": 0}`",
          "180:     buffer: [",
          "181:       Buffer.from('buffer'),",
          "185:       Buffer.from(''),",
          "",
          "---------------"
        ],
        "test/index.test.js||test/index.test.js": [
          "File: test/index.test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: 'use strict'",
          "10: if (typeof assert.deepStrictEqual === 'undefined') {",
          "11:   assert.deepStrictEqual = assert.deepEqual // eslint-disable-line",
          "",
          "[Removed Lines]",
          "6: var assert = require('assert')",
          "7: var serialize = require('..')",
          "8: var fixtures = require('./fixtures')",
          "",
          "[Added Lines]",
          "6: const assert = require('assert')",
          "7: const serialize = require('..')",
          "8: const fixtures = require('./fixtures')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: }",
          "18: describe('#serialize', function () {",
          "20:     Object.keys(fixtures).forEach(function (tcName) {",
          "21:       it(tcName, function () {",
          "26:         if (typeof exp === 'object') {",
          "27:           assert.deepStrictEqual(res, exp)",
          "28:         } else {",
          "",
          "[Removed Lines]",
          "19:   describe('simple', function () {",
          "22:         var tc = fixtures[tcName]",
          "23:         var inp = tc[0]",
          "24:         var exp = tc[1]",
          "25:         var res = serialize(inp)",
          "",
          "[Added Lines]",
          "19:   describe('fixtures', function () {",
          "22:         const tc = fixtures[tcName]",
          "23:         const inp = tc[0]",
          "24:         const exp = tc[1]",
          "25:         const res = serialize(inp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:       })",
          "32:     })",
          "33:   })",
          "50:   })",
          "58:       }",
          "66:         'spa ce': r",
          "91:       }",
          "102:       }",
          "131:   })",
          "132: })",
          "",
          "[Removed Lines]",
          "34:   it('converting an object of objects', function () {",
          "35:     var o1 = {",
          "36:       one: true,",
          "37:       'thr-ee': undefined,",
          "38:       '3': '3',",
          "39:       '4 four': 'four\\n<test></test>',",
          "40:       'five\"(5)': 5",
          "41:     }",
          "42:     var o = {",
          "43:       a: o1,",
          "44:       b: o1",
          "45:     }",
          "46:     var res = serialize(o)",
          "47:     var exp = '{\"a\": {\"3\": \"3\", \"one\": true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n\\\\u003Ctest\\\\u003E\\\\u003C\\\\u002Ftest\\\\u003E\", \"five\\\\\"(5)\": 5}, \"b\": {\"3\": \"3\", \"one\": true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n\\\\u003Ctest\\\\u003E\\\\u003C\\\\u002Ftest\\\\u003E\", \"five\\\\\"(5)\": 5}}'",
          "49:     assert.strictEqual(res, exp)",
          "51:   it('converting an object of objects using references', function () {",
          "52:     var r = {",
          "53:       one: true,",
          "54:       'thr-ee': undefined,",
          "55:       '3': '3',",
          "56:       '4 four': {",
          "57:         'four': 4",
          "59:     }",
          "60:     var o = {",
          "61:       a: r,",
          "62:       b: r,",
          "63:       c: {",
          "64:         d: r,",
          "65:         '0': r,",
          "67:       },",
          "68:       '0': r['4 four'],",
          "69:       'spa ce': r",
          "70:     }",
          "71:     var opts = {",
          "72:       reference: true",
          "73:     }",
          "74:     var res = serialize(o, opts)",
          "75:     var exp = '{\"0\": {\"four\": 4}, \"a\": {\"3\": \"3\", \"one\": true, \"thr-ee\": undefined}, \"c\": {}}'",
          "76:     var refs = [",
          "77:       ['.a[\"4 four\"]', '[\"0\"]'],",
          "78:       ['.b', '.a'],",
          "79:       ['.c[\"0\"]', '.a'],",
          "80:       ['.c.d', '.a'],",
          "81:       ['.c[\"spa ce\"]', '.a'],",
          "82:       ['[\"spa ce\"]', '.a']",
          "83:     ]",
          "84:     assert.strictEqual(res, exp)",
          "85:     assert.deepStrictEqual(opts.references, refs)",
          "86:   })",
          "87:   it('converting a circular object throws', function () {",
          "88:     var o = {",
          "89:       a: {",
          "90:         b: {}",
          "92:     }",
          "93:     o.a.b = o.a",
          "94:     assert.throws(function () {",
          "95:       serialize(o)",
          "96:     }, /can not convert circular structures/)",
          "97:   })",
          "98:   it('ignore circularity', function () {",
          "99:     var o = {",
          "100:       a: {",
          "101:         b: {}",
          "103:     }",
          "104:     o.a.b = o.a",
          "105:     var res = serialize(o, { ignoreCircular: true })",
          "106:     var exp = '{\"a\": {\"b\": {/*[Circular]*/}}}'",
          "107:     assert.deepStrictEqual(res, exp)",
          "108:   })",
          "109:   it('converting an object of objects with opts.unsafe', function () {",
          "110:     var o1 = {",
          "111:       one: true,",
          "112:       'thr-ee': undefined,",
          "113:       '3': '3',",
          "114:       '4 four': 'four\\n<test></test>',",
          "115:       'five\"(5)': 5",
          "116:     }",
          "117:     var o = {",
          "118:       a: o1,",
          "119:       b: o1",
          "120:     }",
          "121:     var res = serialize(o, { unsafe: true })",
          "122:     var exp = '{\"a\": {\"3\": \"3\", \"one\": true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n<test></test>\", \"five\\\\\"(5)\": 5}, \"b\": {\"3\": \"3\", \"one\": true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n<test></test>\", \"five\\\\\"(5)\": 5}}'",
          "123:     assert.strictEqual(res, exp)",
          "124:   })",
          "125:   it('correctly serializes regular expressions', function () {",
          "126:     for (var re of [ /\\//, /[</script><script>alert('xss')//]/i, /abc/, /[< /script>]/ ]) {",
          "127:       var re2 = eval(serialize(re)) // eslint-disable-line no-eval",
          "128:       assert.strictEqual(re.source, re2.source)",
          "129:       assert.strictEqual(re.flags, re2.flags)",
          "130:     }",
          "",
          "[Added Lines]",
          "34:   describe('fixtures unsafe mode', function () {",
          "35:     Object.keys(fixtures).forEach(function (tcName) {",
          "36:       it(tcName, function () {",
          "37:         const tc = fixtures[tcName]",
          "38:         const inp = tc[0]",
          "39:         const exp = tc[2] || tc[1]",
          "40:         const res = serialize(inp, { unsafe: true })",
          "41:         if (typeof exp === 'object') {",
          "42:           assert.deepStrictEqual(res, exp)",
          "43:         } else {",
          "44:           assert.strictEqual(res, exp)",
          "45:         }",
          "46:       })",
          "47:     })",
          "49:   describe('others', function () {",
          "50:     it('converting an object of objects', function () {",
          "51:       const o1 = {",
          "52:         one: true,",
          "53:         'thr-ee': undefined,",
          "54:         3: '3',",
          "55:         '4 four': 'four\\n<test></test>',",
          "56:         'five\"(5)': 5",
          "57:       }",
          "58:       const o = {",
          "59:         a: o1,",
          "60:         b: o1",
          "61:       }",
          "62:       const res = serialize(o)",
          "63:       const exp = '{a: {\"3\": \"3\", one: true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n\\\\u003Ctest\\\\u003E\\\\u003C\\\\u002Ftest\\\\u003E\", \"five\\\\\"(5)\": 5}, b: {\"3\": \"3\", one: true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n\\\\u003Ctest\\\\u003E\\\\u003C\\\\u002Ftest\\\\u003E\", \"five\\\\\"(5)\": 5}}'",
          "65:       assert.strictEqual(res, exp)",
          "66:     })",
          "67:     it('converting an object of objects using references', function () {",
          "68:       const r = {",
          "69:         one: true,",
          "70:         'thr-ee': undefined,",
          "71:         3: '3',",
          "72:         '4 four': {",
          "73:           four: 4",
          "74:         }",
          "76:       const o = {",
          "77:         a: r,",
          "78:         b: r,",
          "79:         c: {",
          "80:           d: r,",
          "81:           0: r,",
          "82:           'spa ce': r",
          "83:         },",
          "84:         0: r['4 four'],",
          "87:       const opts = {",
          "88:         reference: true",
          "90:       const res = serialize(o, opts)",
          "91:       const exp = '{\"0\": {four: 4}, a: {\"3\": \"3\", one: true, \"thr-ee\": undefined}, c: {}}'",
          "92:       const refs = [",
          "93:         ['.a[\"4 four\"]', '[\"0\"]'],",
          "94:         ['.b', '.a'],",
          "95:         ['.c[\"0\"]', '.a'],",
          "96:         ['.c.d', '.a'],",
          "97:         ['.c[\"spa ce\"]', '.a'],",
          "98:         ['[\"spa ce\"]', '.a']",
          "99:       ]",
          "100:       assert.strictEqual(res, exp)",
          "101:       assert.deepStrictEqual(opts.references, refs)",
          "102:     })",
          "103:     it('converting a circular object throws', function () {",
          "104:       const o = {",
          "105:         a: {",
          "106:           b: {}",
          "107:         }",
          "108:       }",
          "109:       o.a.b = o.a",
          "110:       assert.throws(function () {",
          "111:         serialize(o)",
          "112:       }, /can not convert circular structures/)",
          "113:     })",
          "114:     it('ignore circularity', function () {",
          "115:       const o = {",
          "116:         a: {",
          "117:           b: {}",
          "118:         }",
          "119:       }",
          "120:       o.a.b = o.a",
          "121:       const res = serialize(o, { ignoreCircular: true })",
          "122:       const exp = '{a: {b: {/*[Circular]*/}}}'",
          "123:       assert.deepStrictEqual(res, exp)",
          "124:     })",
          "125:     it('converting an object of objects with opts.unsafe', function () {",
          "126:       const o1 = {",
          "127:         one: true,",
          "128:         'thr-ee': undefined,",
          "129:         3: '3',",
          "130:         '4 four': 'four\\n<test></test>',",
          "131:         'five\"(5)': 5",
          "132:       }",
          "133:       const o = {",
          "134:         a: o1,",
          "135:         b: o1",
          "136:       }",
          "137:       const res = serialize(o, { unsafe: true })",
          "138:       const exp = '{a: {\"3\": \"3\", one: true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n<test></test>\", \"five\\\\\"(5)\": 5}, b: {\"3\": \"3\", one: true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n<test></test>\", \"five\\\\\"(5)\": 5}}'",
          "139:       assert.strictEqual(res, exp)",
          "140:     })",
          "141:     it('correctly serializes regular expressions', function () {",
          "142:       for (const re of [/\\//, /[</script><script>alert('xss')//]/i, /abc/, /[< /script>]/]) {",
          "143:         const re2 = eval(serialize(re)) // eslint-disable-line no-eval",
          "144:         assert.strictEqual(re.source, re2.source)",
          "145:         assert.strictEqual(re.flags, re2.flags)",
          "146:       }",
          "147:     })",
          "148:     it('serializes function with unsafe chars', function () {",
          "149:       function xss () {",
          "150:         const str = '</script><script>alert(\\'xss\\')//'",
          "151:         const o = { '\\\\\": 0}; alert(\\'xss\\')//': 0, str }",
          "152:         return o",
          "153:       }",
          "154:       const res = serialize(xss)",
          "155:         .replace(/\\n\\s+/mg, '\\n ')",
          "156:         .replace(/function xss\\(\\)/, 'function xss ()') // node v8 has no space before brackets",
          "157:       assert.strictEqual(res,",
          "158:         'function xss () {\\n' +",
          "159:         ` const str = '\\\\u003C\\\\u002Fscript>\\\\u003Cscript>alert(\\\\'xss\\\\')//'\\n` +",
          "160:         ` const o = { '\\\\\\\\\": 0}; alert(\\\\'xss\\\\')//': 0, str }\\n` +",
          "161:         ' return o\\n' +",
          "162:         ' }'",
          "163:       )",
          "164:       const fn = new Function('return ' + res)()",
          "165:       assert.deepStrictEqual(fn(), {",
          "166:         \"\\\\\\\": 0}; alert('xss')//\": 0,",
          "167:         str: \"</script><script>alert('xss')//\"",
          "168:       })",
          "169:     })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54f4e5330a70ea306e7bfe4a5dc97542c8535c76",
      "candidate_info": {
        "commit_hash": "54f4e5330a70ea306e7bfe4a5dc97542c8535c76",
        "repo": "commenthol/serialize-to-js",
        "commit_url": "https://github.com/commenthol/serialize-to-js/commit/54f4e5330a70ea306e7bfe4a5dc97542c8535c76",
        "files": [
          "lib/index.js",
          "test/fixtures.js",
          "test/index.test.js"
        ],
        "message": "Fix serialization of regular expressions.",
        "before_after_code_files": [
          "lib/index.js||lib/index.js",
          "test/fixtures.js||test/fixtures.js",
          "test/index.test.js||test/index.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/index.js||lib/index.js",
            "test/fixtures.js||test/fixtures.js"
          ],
          "candidate": [
            "lib/index.js||lib/index.js",
            "test/fixtures.js||test/fixtures.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/index.js||lib/index.js": [
          "File: lib/index.js -> lib/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     out += !/^\\s*(function|\\([^)]*\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp",
          "76:   } else if (util.isObject(source)) {",
          "77:     if (util.isRegExp(source)) {",
          "79:     } else if (util.isDate(source)) {",
          "80:       out += 'new Date(\"' + source.toJSON() + '\")'",
          "81:     } else if (util.isError(source)) {",
          "",
          "[Removed Lines]",
          "78:       out += 'new RegExp(\"' + source.source.replace(/<\\/script/ig, '<\\\\/script') + '\", \"' + source.flags + '\")'",
          "",
          "[Added Lines]",
          "78:       out += 'new RegExp(' + serialize(source.source) + ', \"' + source.flags + '\")'",
          "",
          "---------------"
        ],
        "test/fixtures.js||test/fixtures.js": [
          "File: test/fixtures.js -> test/fixtures.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   'regexXss': [",
          "145:     /[</script><script>alert('xss')//]/i,",
          "146:     isLessV12",
          "149:   ],",
          "150:   'regex no flags': [",
          "151:     /abc/,",
          "",
          "[Removed Lines]",
          "147:       ? 'new RegExp(\"[<\\\\/script><script>alert(\\'xss\\')\\\\/\\\\/]\", \"i\")'",
          "148:       : 'new RegExp(\"[<\\\\/script><script>alert(\\'xss\\')//]\", \"i\")'",
          "",
          "[Added Lines]",
          "147:       ? 'new RegExp(\"[\\\\u003C\\\\\\\\\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\\\\\\\\\u002F\\\\\\\\\\\\u002F]\", \"i\")'",
          "148:       : 'new RegExp(\"[\\\\u003C\\\\u002Fscript\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F]\", \"i\")'",
          "149:   ],",
          "150:   'regexXss2': [",
          "151:     /[</ script><script>alert('xss')//]/i,",
          "152:     isLessV12",
          "153:       ? 'new RegExp(\"[\\\\u003C\\\\\\\\\\\\u002F script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\\\\\\\\\u002F\\\\\\\\\\\\u002F]\", \"i\")'",
          "154:       : 'new RegExp(\"[\\\\u003C\\\\u002F script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\'xss\\')\\\\u002F\\\\u002F]\", \"i\")'",
          "",
          "---------------"
        ],
        "test/index.test.js||test/index.test.js": [
          "File: test/index.test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     var exp = '{a: {\"3\": \"3\", one: true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n<test></test>\", \"five\\\\\"(5)\": 5}, b: {\"3\": \"3\", one: true, \"thr-ee\": undefined, \"4 four\": \"four\\\\n<test></test>\", \"five\\\\\"(5)\": 5}}'",
          "123:     assert.strictEqual(res, exp)",
          "124:   })",
          "125: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   it('correctly serializes regular expressions', function () {",
          "126:     for (var re of [ /\\//, /[</script><script>alert('xss')//]/i, /abc/, /[< /script>]/ ]) {",
          "127:       var re2 = eval(serialize(re)) // eslint-disable-line no-eval",
          "128:       assert.strictEqual(re.source, re2.source)",
          "129:       assert.strictEqual(re.flags, re2.flags)",
          "130:     }",
          "131:   })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f49255a4c43f115f8c3702c88f3c6c6d610ca40a",
      "candidate_info": {
        "commit_hash": "f49255a4c43f115f8c3702c88f3c6c6d610ca40a",
        "repo": "commenthol/serialize-to-js",
        "commit_url": "https://github.com/commenthol/serialize-to-js/commit/f49255a4c43f115f8c3702c88f3c6c6d610ca40a",
        "files": [
          "README.md",
          "lib/index.js",
          "lib/serialize.js",
          "lib/serializeToModule.js",
          "package.json",
          "test/index.test.js",
          "test/serializeToModule.js"
        ],
        "message": "break: phase-out serializeToModule\n\nmove serializeToModule into separate package serialize-to-module\n\ndocu: fix md",
        "before_after_code_files": [
          "lib/index.js||lib/index.js",
          "lib/serialize.js||lib/serialize.js",
          "lib/serializeToModule.js||lib/serializeToModule.js",
          "test/index.test.js||test/index.test.js",
          "test/serializeToModule.js||test/serializeToModule.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/index.js||lib/index.js"
          ],
          "candidate": [
            "lib/index.js||lib/index.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/index.js||lib/index.js": [
          "File: lib/index.js -> lib/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: }",
          "",
          "[Removed Lines]",
          "1: module.exports = {",
          "2:   serialize: require('./serialize'),",
          "3:   serializeToModule: require('./serializeToModule')",
          "",
          "[Added Lines]",
          "6: 'use strict'",
          "9: var util = require('./internal/utils')",
          "10: var Ref = require('./internal/reference')",
          "49: function serialize (source, opts) {",
          "50:   var out = ''",
          "51:   var key",
          "52:   var tmp",
          "53:   var type",
          "54:   var i",
          "56:   opts = opts || {}",
          "57:   if (!opts._visited) {",
          "58:     opts._visited = []",
          "59:   }",
          "60:   if (!opts._refs) {",
          "61:     opts.references = []",
          "62:     opts._refs = new Ref(opts.references)",
          "63:   }",
          "65:   if (util.isNull(source)) {",
          "66:     out += 'null'",
          "67:   } else if (util.isArray(source)) {",
          "68:     tmp = source.map(function (item) {",
          "69:       return serialize(item, opts)",
          "70:     })",
          "71:     out += '[' + tmp.join(', ') + ']'",
          "72:   } else if (util.isFunction(source)) {",
          "73:     tmp = source.toString()",
          "75:     out += !/^\\s*(function|\\([^)]*\\)\\s*=>)/m.test(tmp) ? 'function ' + tmp : tmp",
          "76:   } else if (util.isObject(source)) {",
          "77:     if (util.isRegExp(source)) {",
          "78:       out += source.toString()",
          "79:     } else if (util.isDate(source)) {",
          "80:       out += 'new Date(\"' + source.toJSON() + '\")'",
          "81:     } else if (util.isError(source)) {",
          "82:       out += 'new Error(' + (source.message ? '\"' + source.message + '\"' : '') + ')'",
          "83:     } else if (util.isBuffer(source)) {",
          "86:       out += \"Buffer.from('\" + source.toString('base64') + \"', 'base64')\"",
          "87:     } else if ((type = util.isTypedArray(source))) {",
          "88:       tmp = []",
          "89:       for (i = 0; i < source.length; i++) {",
          "90:         tmp.push(source[i])",
          "91:       }",
          "92:       out += 'new ' + type + '(' +",
          "93:         '[' + tmp.join(', ') + ']' +",
          "94:         ')'",
          "95:     } else {",
          "96:       tmp = []",
          "98:       if (!~opts._visited.indexOf(source)) {",
          "99:         opts._visited.push(source)",
          "100:         for (key in source) {",
          "101:           if (source.hasOwnProperty(key)) {",
          "102:             if (opts.reference && util.isObject(source[key])) {",
          "103:               opts._refs.push(key)",
          "104:               if (!opts._refs.hasReference(source[key])) {",
          "105:                 tmp.push(Ref.wrapkey(key) + ': ' + serialize(source[key], opts))",
          "106:               }",
          "107:               opts._refs.pop()",
          "108:             } else {",
          "109:               tmp.push(Ref.wrapkey(key) + ': ' + serialize(source[key], opts))",
          "110:             }",
          "111:           }",
          "112:         }",
          "113:         out += '{' + tmp.join(', ') + '}'",
          "114:         opts._visited.pop()",
          "115:       } else {",
          "116:         if (opts.ignoreCircular) {",
          "117:           out += '{/*[Circular]*/}'",
          "118:         } else {",
          "119:           throw new Error('can not convert circular structures.')",
          "120:         }",
          "121:       }",
          "122:     }",
          "123:   } else if (util.isString(source)) {",
          "124:     out += '\"' + (opts.unsafe ? util.unsafeString(source) : util.safeString(source)) + '\"'",
          "125:   } else {",
          "126:     out += '' + source",
          "127:   }",
          "128:   return out",
          "130: module.exports = serialize",
          "",
          "---------------"
        ],
        "lib/serialize.js||lib/serialize.js": [
          "File: lib/serialize.js -> lib/serialize.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/serializeToModule.js||lib/serializeToModule.js": [
          "File: lib/serializeToModule.js -> lib/serializeToModule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index.test.js||test/index.test.js": [
          "File: test/index.test.js -> test/index.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: 'use strict'",
          "6: var assert = require('assert')",
          "9: var fixtures = require('./fixtures')",
          "11: if (typeof assert.deepStrictEqual === 'undefined') {",
          "",
          "[Removed Lines]",
          "7: var M = require('..')",
          "8: var serialize = M.serialize",
          "",
          "[Added Lines]",
          "7: var serialize = require('..')",
          "",
          "---------------"
        ],
        "test/serializeToModule.js||test/serializeToModule.js": [
          "File: test/serializeToModule.js -> test/serializeToModule.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8b80509399dffa4856e56f06bbc29816dd8867d",
      "candidate_info": {
        "commit_hash": "d8b80509399dffa4856e56f06bbc29816dd8867d",
        "repo": "commenthol/serialize-to-js",
        "commit_url": "https://github.com/commenthol/serialize-to-js/commit/d8b80509399dffa4856e56f06bbc29816dd8867d",
        "files": [
          "test/fixtures.js"
        ],
        "message": "chore: better var naming",
        "before_after_code_files": [
          "test/fixtures.js||test/fixtures.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fixtures.js||test/fixtures.js"
          ],
          "candidate": [
            "test/fixtures.js||test/fixtures.js"
          ]
        }
      },
      "candidate_diff": {
        "test/fixtures.js||test/fixtures.js": [
          "File: test/fixtures.js -> test/fixtures.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   console.log(JSON.stringify(arg))",
          "7: }",
          "11: module.exports = {",
          "12:   'string': [",
          "",
          "[Removed Lines]",
          "9: const isLessV13 = parseInt(process.versions.node.split('.')[0]) < 12",
          "",
          "[Added Lines]",
          "9: const isLessV12 = parseInt(process.versions.node.split('.')[0]) < 12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:   ],",
          "144:   'regexXss': [",
          "145:     /[</script><script>alert('xss')//]/i,",
          "147:       ? 'new RegExp(\"[<\\\\/script><script>alert(\\'xss\\')\\\\/\\\\/]\", \"i\")'",
          "148:       : 'new RegExp(\"[</script><script>alert(\\'xss\\')//]\", \"i\")'",
          "149:   ],",
          "",
          "[Removed Lines]",
          "146:     isLessV13",
          "",
          "[Added Lines]",
          "146:     isLessV12",
          "",
          "---------------"
        ]
      }
    }
  ]
}