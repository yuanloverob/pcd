{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9ffeb770d024369b19f6b0ae37d7faf2a9ff6b6",
      "candidate_info": {
        "commit_hash": "e9ffeb770d024369b19f6b0ae37d7faf2a9ff6b6",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/e9ffeb770d024369b19f6b0ae37d7faf2a9ff6b6",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "commit",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1521:         CallHelperTest::setCache($this->KEY_DATA_ADD_ENTITY, $data_add_entities);",
          "1522:     }",
          "1525:     {",
          "1527:         $table_names = CallHelperTest::getCache($this->KEY_LIST_CREATE_EMPTY_TABLES);",
          "",
          "[Removed Lines]",
          "1524:     public function testAddEditEmptyValueEntityCrudManagement()",
          "",
          "[Added Lines]",
          "1524:     public function testAddReadEmptyTableCrudManagement()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1753:     }",
          "1756:     {",
          "1758:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_EMPTY_TABLES);",
          "",
          "[Removed Lines]",
          "1755:     public function testAddEmptyTableEntity()",
          "",
          "[Added Lines]",
          "1755:     public function testAddEditEmptyTableEntity()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1764:             $fields[$value['badaso_type']] = $value;",
          "1765:         }",
          "",
          "[Removed Lines]",
          "1767:         $data_add_entities = [];",
          "1768:         foreach ($get_response_read_table_entities as $table_empty => $entities) {",
          "1769:             $entities = collect($entities)->filter(function ($entity) {",
          "1770:                 return $entity['add'];",
          "1771:             })->values();",
          "1773:             $data_add_entities[$table_empty] = [];",
          "1774:             for ($index = 1; $index <= $this->MAXIMAL_CREATE_ENTITY; $index++) {",
          "1776:                 $data = [];",
          "1777:                 foreach ($entities as $key => $entity) {",
          "1778:                     $field = $entity['field'];",
          "1779:                     if (array_key_exists($field, $fields)) {",
          "1780:                         if ($field == 'relation') {",
          "1781:                             $relation_value = DB::table($first_table)->insertGetId([]);",
          "1782:                             $data[$field] = $relation_value;",
          "1783:                         } else {",
          "1784:                             $data[$field] = $fields[$field]['example'];",
          "1785:                         }",
          "1786:                     }",
          "1787:                 }",
          "1788:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table_empty}/add\"), [",
          "1789:                     'data' => $data,",
          "1790:                 ]);",
          "1792:                 $response->assertSuccessful();",
          "1814:             }",
          "1815:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c79c9eb38c4e6a5d16d6c7304045d7674bf24bfe",
      "candidate_info": {
        "commit_hash": "c79c9eb38c4e6a5d16d6c7304045d7674bf24bfe",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/c79c9eb38c4e6a5d16d6c7304045d7674bf24bfe",
        "files": [
          "src/Controllers/Controller.php",
          "src/Helpers/GetData.php",
          "src/resources/js/lang/modules/en.js",
          "src/resources/js/lang/modules/id.js",
          "src/resources/js/pages/crud-generated/add.vue",
          "src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/crud-generated/edit.vue",
          "src/resources/js/pages/crud-generated/read.vue",
          "src/resources/js/pages/crud-management/add.vue",
          "src/resources/js/pages/crud-management/edit.vue"
        ],
        "message": "add feature has one and has many",
        "before_after_code_files": [
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js",
          "src/resources/js/lang/modules/id.js||src/resources/js/lang/modules/id.js",
          "src/resources/js/pages/crud-generated/add.vue||src/resources/js/pages/crud-generated/add.vue",
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue",
          "src/resources/js/pages/crud-generated/read.vue||src/resources/js/pages/crud-generated/read.vue",
          "src/resources/js/pages/crud-management/add.vue||src/resources/js/pages/crud-management/add.vue",
          "src/resources/js/pages/crud-management/edit.vue||src/resources/js/pages/crud-management/edit.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:         $data_rows = collect($data_type->dataRows);",
          "236:         $fields = collect($data_type->dataRows)->where('read', 1)->pluck('field')->all();",
          "237:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "240:         foreach ($data_rows as $key => $data_row) {",
          "243:             }",
          "244:         }",
          "247:         $data = null;",
          "248:         $record = null;",
          "",
          "[Removed Lines]",
          "238:         $field_manytomany = [];",
          "241:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "242:                 $field_manytomany[] = $data_row['field'];",
          "246:         $fields = array_diff(array_merge($fields, $ids), $field_manytomany);",
          "",
          "[Added Lines]",
          "238:         $field_other_relation = [];",
          "241:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] != 'belongs_to') {",
          "242:                 $field_other_relation[] = $data_row['field'];",
          "246:         $fields = array_diff(array_merge($fields, $ids), $field_other_relation);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:         } else {",
          "268:             $record = DB::table($data_type->name)->select($fields)->where('id', $id)->first();",
          "269:         }",
          "271:             foreach ($data_rows as $key => $data_row) {",
          "272:                 if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "273:                     $table_name = $data_type['name'];",
          "",
          "[Removed Lines]",
          "270:         if (count($field_manytomany) > 0) {",
          "",
          "[Added Lines]",
          "270:         if (count($field_other_relation) > 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "363:                     if ($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "365:                         $table_relation = $data_row['relation']['destination_table'];",
          "367:                     }",
          "368:                 } else {",
          "369:                     if (in_array($key, ['created_at', 'updated_at'])) {",
          "",
          "[Removed Lines]",
          "364:                         $field_manytomany = $data_row['field'];",
          "366:                         unset($new_data[$field_manytomany]);",
          "",
          "[Added Lines]",
          "364:                         $field_other_relation = $data_row['field'];",
          "366:                         unset($new_data[$field_other_relation]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:             foreach ($data as $key => $value) {",
          "378:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "379:                 if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "381:                     $table_relation = $data_row['relation']['destination_table'];",
          "383:                     $table_primary = $data_type['name'];",
          "384:                     foreach ($data_manytomany as $key => $value) {",
          "385:                         try {",
          "387:                                 $table_relation.'_id' => $value,",
          "388:                                 $table_primary.'_id' => $id,",
          "389:                             ]);",
          "",
          "[Removed Lines]",
          "380:                     $field_manytomany = $data_row['field'];",
          "382:                     $data_manytomany = $data[$field_manytomany];",
          "386:                             DB::table($field_manytomany)->insert([",
          "",
          "[Added Lines]",
          "380:                     $field_other_relation = $data_row['field'];",
          "382:                     $data_manytomany = $data[$field_other_relation];",
          "386:                             DB::table($field_other_relation)->insert([",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "459:                             'relatedKey'      => 'id',",
          "460:                         ];",
          "461:                     }",
          "462:                 }",
          "463:             }",
          "464:             $model->save();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462:                     if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'has_one') {",
          "463:                         $table_destination = $data_row->relation",
          "464:                         ['destination_table'];",
          "465:                         unset($model[$table_destination]);",
          "466:                     }",
          "467:                     if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'has_many') {",
          "468:                         $table_destination = $data_row->relation['destination_table'];",
          "469:                         unset($model[$table_destination]);",
          "470:                     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "473:                         $sync_data['parentKey'],",
          "474:                         $sync_data['relatedKey']",
          "475:                     )->sync($sync_data['content']);",
          "479:             }",
          "480:         } else {",
          "481:             $new_data = [];",
          "",
          "[Removed Lines]",
          "476:                 } catch (Exception $e) {",
          "477:                     dd($e);",
          "478:                 }",
          "",
          "[Added Lines]",
          "485:                 } catch (Exception $e) {}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "529:                             }",
          "530:                         }",
          "531:                     }",
          "533:                     if (in_array($data_row->type, [",
          "534:                         'upload_image',",
          "535:                         'upload_image_multiple',",
          "",
          "[Removed Lines]",
          "532:                 } else {",
          "",
          "[Added Lines]",
          "539:                 }elseif(isset($data_row->relation) && $data_row->relation['relation_type'] == 'has_one'){",
          "540:                     $table_destination = $data_row->relation['destination_table'];",
          "541:                     unset($data[$table_destination]);",
          "542:                 }elseif (isset($data_row->relation) && $data_row->relation['relation_type'] == 'has_many') {",
          "543:                     $table_destination = $data_row->relation['destination_table'];",
          "544:                     unset($data[$table_destination]);",
          "545:                 }else {",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Exception;",
          "6: use Illuminate\\Support\\Facades\\DB;",
          "7: use ReflectionClass;",
          "8: use Uasoft\\Badaso\\Models\\Permission;",
          "10: class GetData",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use Uasoft\\Badaso\\Models\\DataType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:         $fields = collect($data_type->dataRows)->where('browse', 1)->pluck('field')->all();",
          "16:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "17:         $fields = array_merge($fields, $ids, $fields_data_identifier);",
          "19:         $model = app($data_type->model_name);",
          "20:         $limit = $builder_params['limit'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:         $data_rows = collect($data_type->dataRows);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "23:         $filter_key = $builder_params['filter_key'];",
          "24:         $filter_operator = $builder_params['filter_operator'];",
          "25:         $filter_value = $builder_params['filter_value'];",
          "27:         $is_roles = false;",
          "28:         $field_identify_related_user = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:         $field_other_relation = [];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42:         $is_field = in_array($field_identify_related_user, array_merge($fields, $fields_data_identifier));",
          "44:         $records = [];",
          "45:         $query = $model::query()->select($fields);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         foreach ($data_rows as $key => $data_row) {",
          "48:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] != 'belongs_to') {",
          "49:                 $field_other_relation[] = $data_row['field'];",
          "50:             }",
          "51:         }",
          "53:         $fields = array_diff(array_merge($fields, $ids, $fields_data_identifier), $field_other_relation);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:     public static function clientSideWithModel($data_type, $builder_params, $only_data_soft_delete = false)",
          "99:     {",
          "100:         $fields_data_identifier = collect($data_type->dataRows)->where('type', 'data_identifier')->pluck('field')->all();",
          "102:         $fields = collect($data_type->dataRows)->where('browse', 1)->pluck('field')->all();",
          "103:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "106:         $is_roles = false;",
          "107:         $field_identify_related_user = null;",
          "",
          "[Removed Lines]",
          "101:         $data_rows = collect($data_type->dataRows);",
          "104:         $field_manytomany = [];",
          "",
          "[Added Lines]",
          "114:         $data_rows = collect($data_type->dataRows);",
          "115:         $field_other_relation = [];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "121:         $is_field = in_array($field_identify_related_user, array_merge($fields, $fields_data_identifier));",
          "123:         foreach ($data_rows as $key => $data_row) {",
          "126:             }",
          "127:         }",
          "131:         $model = app($data_type->model_name);",
          "132:         $order_field = $builder_params['order_field'];",
          "",
          "[Removed Lines]",
          "124:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "125:                 $field_manytomany[] = $data_row['field'];",
          "129:         $fields = array_diff(array_merge($fields, $ids, $fields_data_identifier), $field_manytomany);",
          "",
          "[Added Lines]",
          "135:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] != 'belongs_to') {",
          "136:                 $field_other_relation[] = $data_row['field'];",
          "140:         $fields = array_diff(array_merge($fields, $ids, $fields_data_identifier), $field_other_relation);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "209:         $fields = collect($data_type->dataRows)->where('browse', 1)->pluck('field')->all();",
          "210:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "211:         $fields = array_merge($fields, $ids, $fields_data_identifier);",
          "213:         $limit = $builder_params['limit'];",
          "214:         $page = $builder_params['page'];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:         $data_rows = collect($data_type->dataRows);",
          "224:         $field_other_relation = [];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "233:             $is_roles = in_array($user_role->name, $roles_can_see_all_data);",
          "234:         }",
          "236:         $is_field = in_array($field_identify_related_user, array_merge($fields, $fields_data_identifier));",
          "237:         $query = DB::table($data_type->name)->select($fields);",
          "239:         if (! $is_roles) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:         foreach ($data_rows as $key => $data_row) {",
          "250:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] != 'belongs_to') {",
          "251:                 $field_other_relation[] = $data_row['field'];",
          "252:             }",
          "253:         }",
          "256:         $fields = array_diff(array_merge($fields, $ids, $fields_data_identifier), $field_other_relation);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "302:         $data_rows = collect($data_type->dataRows);",
          "303:         $fields = $data_rows->where('browse', 1)->pluck('field')->all();",
          "304:         $ids = $data_rows->where('field', 'id')->pluck('field')->all();",
          "306:         $is_roles = false;",
          "307:         $field_identify_related_user = null;",
          "308:         $roles_can_see_all_data = [];",
          "",
          "[Removed Lines]",
          "305:         $field_manytomany = [];",
          "",
          "[Added Lines]",
          "325:         $field_other_relation = [];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:         }",
          "321:         foreach ($data_rows as $key => $data_row) {",
          "324:             }",
          "325:         }",
          "327:         $is_field = in_array($field_identify_related_user, array_merge($fields, $fields_data_identifier));",
          "329:         $order_field = $builder_params['order_field'];",
          "330:         $order_direction = $builder_params['order_direction'];",
          "",
          "[Removed Lines]",
          "322:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "323:                 $field_manytomany[] = $data_row['field'];",
          "328:         $fields = array_diff(array_merge($fields, $ids, $fields_data_identifier), $field_manytomany);",
          "",
          "[Added Lines]",
          "342:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] != 'belongs_to') {",
          "343:                 $field_other_relation[] = $data_row['field'];",
          "348:         $fields = array_diff(array_merge($fields, $ids, $fields_data_identifier), $field_other_relation);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "456:                         }",
          "457:                     }",
          "458:                 }",
          "474:                             }",
          "486:                                     }",
          "502:                 }",
          "503:             }",
          "504:         }",
          "",
          "[Removed Lines]",
          "460:                 if (isset($row->{$field->field})) {",
          "461:                     if ($field->relation['relation_type'] == 'belongs_to_many') {",
          "462:                         $data_table_destination = DB::table($destination_table)->get();",
          "463:                         $table_primary_id = $data_type['name'].'_id';",
          "464:                         $row->{$field->field}->filter(function ($fields, $key) use ($data_table_destination, $destination_table, $destination_table_display_column) {",
          "465:                             foreach ($data_table_destination as $key => $value) {",
          "466:                                 if ($fields->{$destination_table.'_id'} == $value->id) {",
          "467:                                     $fields->{$destination_table_display_column} = $value->{$destination_table_display_column};",
          "468:                                 }",
          "469:                             }",
          "470:                         });",
          "471:                         $row->{$field->field} = $row->{$field->field}->filter(function ($field, $key) use ($row, $table_primary_id) {",
          "472:                             if ($field->{$table_primary_id} == $row->id) {",
          "473:                                 return $field;",
          "475:                         });",
          "476:                     } else {",
          "477:                         $relation_data = DB::table($destination_table)->select($arr_query_select)",
          "478:                             ->where($destination_table_column, $row->{$field->field})",
          "479:                             ->get();",
          "480:                         switch ($relation_type) {",
          "481:                                 case 'belongs_to':",
          "482:                                     if (isset($row->{$destination_table})) {",
          "483:                                         array_push($row->{$destination_table}, collect($relation_data)->first());",
          "484:                                     } else {",
          "485:                                         $row->{$destination_table} = collect($relation_data)->toArray();",
          "487:                                     break;",
          "489:                                 case 'has_many':",
          "490:                                     $row->{$destination_table} = collect($relation_data)->toArray();",
          "491:                                     break;",
          "493:                                 case 'has_one':",
          "494:                                     $row->{$destination_table} = collect($relation_data)->first();",
          "495:                                     break;",
          "497:                                 default:",
          "499:                                     break;",
          "500:                             }",
          "501:                     }",
          "",
          "[Added Lines]",
          "480:                 if (isset($row->{$field->field}) && $field->relation['relation_type'] == 'belongs_to_many') {",
          "481:                     $data_table_destination = DB::table($destination_table)->get();",
          "482:                     $table_primary_id = $data_type['name'].'_id';",
          "483:                     $row->{$field->field}->filter(function ($fields, $key) use ($data_table_destination, $destination_table, $destination_table_display_column) {",
          "484:                         foreach ($data_table_destination as $key => $value) {",
          "485:                             if ($fields->{$destination_table.'_id'} == $value->id) {",
          "486:                                 $fields->{$destination_table_display_column} = $value->{$destination_table_display_column};",
          "488:                         }",
          "489:                     });",
          "490:                     $row->{$field->field} = $row->{$field->field}->filter(function ($field, $key) use ($row, $table_primary_id) {",
          "491:                         if ($field->{$table_primary_id} == $row->id) {",
          "492:                             return $field;",
          "493:                         }",
          "494:                     });",
          "495:                 } else {",
          "496:                     $relation_datas = DB::table($destination_table)->select($arr_query_select)",
          "497:                     ->get();",
          "498:                     switch ($relation_type) {",
          "499:                             case 'belongs_to':",
          "500:                                 if (isset($row->{$destination_table})) {",
          "501:                                     try {",
          "502:                                         array_push($row->{$destination_table}, collect($relation_datas)->first());",
          "503:                                     } catch (\\Throwable $th) {}",
          "504:                                 } else {",
          "505:                                     $row->{$destination_table} = collect($relation_datas)->toArray();",
          "506:                                 }",
          "507:                                 break;",
          "509:                             case 'has_many':",
          "510:                                 $row->{$destination_table} = [];",
          "511:                                 foreach ($relation_datas as $key => $relation_data) {",
          "512:                                     if ($relation_data->{$destination_table_column} == $row->id) {",
          "513:                                         try {",
          "514:                                             array_push($row->{$destination_table}, $relation_data);",
          "515:                                         } catch (\\Throwable $th) {",
          "516:                                             $model = DataType::where('slug', $destination_table)->pluck('model_name')->first();",
          "517:                                             $row->{$destination_table} = $model::where($destination_table_column, $row->id)->get();",
          "518:                                         }",
          "520:                                 }",
          "521:                                 break;",
          "523:                             case 'has_one':",
          "524:                                 $row->{$destination_table} = collect();",
          "525:                                 foreach ($relation_datas as $key => $relation_data) {",
          "526:                                     if($relation_data->{$destination_table_column} == $row->id){",
          "527:                                         $row->{$destination_table} = collect($relation_data);",
          "528:                                         break;",
          "529:                                     }",
          "530:                                 }",
          "531:                                 break;",
          "533:                             default:",
          "535:                                 break;",
          "536:                         }",
          "",
          "---------------"
        ],
        "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js": [
          "File: src/resources/js/lang/modules/en.js -> src/resources/js/lang/modules/en.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:         delete: \"Delete\",",
          "385:         displayName: \"Display Name\",",
          "386:         setRelation: \"Set Relation\",",
          "388:         relationType: \"Relation Type\",",
          "389:         destinationTable: \"Destination Table\",",
          "390:         destinationTableManytomany: \"Destination Table Many To Many\",",
          "",
          "[Removed Lines]",
          "387:         setRelationManytomany: \"Set Relation Many To Many\",",
          "",
          "[Added Lines]",
          "387:         setOtherRelation: \"Set Other Relation\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:         delete: \"Delete\",",
          "505:         displayName: \"Display Name\",",
          "506:         setRelation: \"Set Relation\",",
          "508:         relationType: \"Relation Type\",",
          "509:         destinationTable: \"Destination Table\",",
          "510:         destinationTableManytomany: \"Destination Table Many To Many\",",
          "",
          "[Removed Lines]",
          "507:         setRelationManytomany: \"Set Relation Many To Many\",",
          "",
          "[Added Lines]",
          "507:         setOtherRelation: \"Set Other Relation\",",
          "",
          "---------------"
        ],
        "src/resources/js/lang/modules/id.js||src/resources/js/lang/modules/id.js": [
          "File: src/resources/js/lang/modules/id.js -> src/resources/js/lang/modules/id.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "376:         add: \"Tambah\",",
          "377:         delete: \"Hapus\",",
          "378:         displayName: \"Nama Tampilan\",",
          "379:         setRelation: \"Set Relasi\",",
          "380:         relationType: \"Tipe Relasi\",",
          "381:         destinationTable: \"Tabel Tujuan\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:         setOtherRelation: \"Set Relasi Lainnya\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488:         delete: \"Hapus\",",
          "489:         displayName: \"Nama Tampilan\",",
          "490:         setRelation: \"Set Relasi\",",
          "491:         relationType: \"Tipe Relasi\",",
          "492:         destinationTable: \"Tabel Tujuan\",",
          "493:         destinationTableColumn: \"Kolom Tujuan\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:         setOtherRelation: \"Set Relasi Lainnya\",",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/add.vue||src/resources/js/pages/crud-generated/add.vue": [
          "File: src/resources/js/pages/crud-generated/add.vue -> src/resources/js/pages/crud-generated/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:                     \"",
          "226:                   ></badaso-color-picker>",
          "227:                   <badaso-hidden",
          "229:                     :label=\"dataRow.displayName\"",
          "230:                     :placeholder=\"dataRow.displayName\"",
          "231:                     v-model=\"dataRow.value\"",
          "",
          "[Removed Lines]",
          "228:                     v-if=\"dataRow.type == 'hidden' || dataRow.type == 'data_identifier'\"",
          "",
          "[Added Lines]",
          "228:                     v-if=\"dataRow.type == 'hidden' ||",
          "229:                           dataRow.type == 'data_identifier' ||",
          "230:                           dataRow.type == 'relation'\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:                       errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "308:                     \"",
          "309:                   ></badaso-select>",
          "324:                   <badaso-select-multiple",
          "325:                     v-if=\"dataRow.type == 'relation' &&",
          "326:                     dataRow.relation.relationType == 'belongs_to_many'\"",
          "",
          "[Removed Lines]",
          "310:                   <badaso-text",
          "311:                     v-if=\"",
          "312:                       dataRow.type == 'relation' &&",
          "313:                       dataRow.relation.relationType !== 'belongs_to' &&",
          "314:                       dataRow.relation.relationType !== 'belongs_to_many'",
          "315:                     \"",
          "316:                     :label=\"dataRow.displayName\"",
          "317:                     :placeholder=\"dataRow.displayName\"",
          "318:                     v-model=\"dataRow.value\"",
          "319:                     size=\"12\"",
          "320:                     :alert=\"",
          "321:                       errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "322:                     \"",
          "323:                   ></badaso-text>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1087:         const displayColumn = this.$caseConvert.stringSnakeToCamel(",
          "1088:           dataRow.relation.destinationTableDisplayColumn",
          "1089:         );",
          "1092:           const list = record[table];",
          "1093:           const flatList = list.map((ls) => {",
          "1095:           });",
          "1096:           return flatList.join(\", \");",
          "1097:         } else if(relationType == \"belongs_to\"){",
          "1099:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "1103:             }",
          "1107:         }  else if (relationType == \"belongs_to_many\") {",
          "1108:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "1109:           const lists = record[field]",
          "",
          "[Removed Lines]",
          "1091:         if (relationType == \"has_many\") {",
          "1094:                 return ls[displayColumn];",
          "1098:           const list = record[table];",
          "1100:           const flatList = list.map((ls) => {",
          "1101:             if(ls.id == record[field]){",
          "1102:               return ls[displayColumn];",
          "1104:             return null",
          "1105:           });",
          "1106:           return flatList.join(\",\").replace(\",\", \"\");",
          "",
          "[Added Lines]",
          "1090:         if (relationType == \"has_one\") {",
          "1091:           const list = record[table];",
          "1092:           return list[displayColumn] ? list[displayColumn] : null;",
          "1093:         } else if (relationType == \"has_many\") {",
          "1096:             return ls[displayColumn];",
          "1100:           const lists = record[table];",
          "1102:           for(let list of lists){",
          "1103:             if (list.id == record[field]){",
          "1104:               return list[displayColumn];",
          "1106:           }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue": [
          "File: src/resources/js/pages/crud-generated/edit.vue -> src/resources/js/pages/crud-generated/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:                     \"",
          "226:                   ></badaso-color-picker>",
          "227:                   <badaso-hidden",
          "229:                     :label=\"dataRow.displayName\"",
          "230:                     :placeholder=\"dataRow.displayName\"",
          "231:                     v-model=\"dataRow.value\"",
          "",
          "[Removed Lines]",
          "228:                     v-if=\"dataRow.type == 'hidden' || dataRow.type == 'data_identifier'\"",
          "",
          "[Added Lines]",
          "228:                     v-if=\"dataRow.type == 'hidden' ||",
          "229:                           dataRow.type == 'data_identifier' ||",
          "230:                           dataRow.type == 'relation'\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:                     \"",
          "326:                   >",
          "327:                   </badaso-select-multiple>",
          "339:                 </template>",
          "340:               </vs-col>",
          "341:             </vs-row>",
          "",
          "[Removed Lines]",
          "328:                   <badaso-text",
          "329:                     v-if=\"",
          "330:                       dataRow.type == 'relation' &&",
          "331:                       dataRow.relation.relationType !== 'belongs_to' &&",
          "332:                       dataRow.relation.relationType !== 'belongs_to_many'",
          "333:                     \"",
          "334:                     :label=\"dataRow.displayName\"",
          "335:                     :placeholder=\"dataRow.displayName\"",
          "336:                     v-model=\"dataRow.value\"",
          "337:                     size=\"12\"",
          "338:                   ></badaso-text>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/read.vue||src/resources/js/pages/crud-generated/read.vue": [
          "File: src/resources/js/pages/crud-generated/read.vue -> src/resources/js/pages/crud-generated/read.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         dataRow.relation.destinationTableDisplayColumn",
          "315:       );",
          "318:         const list = record[table];",
          "319:         const flatList = list.map((ls) => {",
          "320:           return ls[displayColumn];",
          "",
          "[Removed Lines]",
          "317:       if (dataRow.relation.relationType == \"has_many\") {",
          "",
          "[Added Lines]",
          "317:       if (dataRow.relation.relationType == \"has_one\") {",
          "318:         const list = record[table];",
          "319:         return list[displayColumn];",
          "320:       } else if(dataRow.relation.relationType == \"has_many\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:         return flatList.join(\", \");",
          "324:       } else if (dataRow.relation.relationType == \"belongs_to\") {",
          "330:           }",
          "334:       } else if (dataRow.relation.relationType == \"belongs_to_many\") {",
          "335:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "336:         const lists = record[field]",
          "",
          "[Removed Lines]",
          "325:         const list = record[table];",
          "326:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "327:         const flatList = list.map((ls) => {",
          "328:           if (ls.id == record[field]) {",
          "329:             return ls[displayColumn];",
          "331:           return null",
          "332:         });",
          "333:         return flatList.join(\",\").replace(\",\", \"\");",
          "",
          "[Added Lines]",
          "328:         const lists = record[table];",
          "329:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field);",
          "330:         for (let list of lists) {",
          "331:           if (list.id == record[field]) {",
          "332:             return list[displayColumn];",
          "334:         }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-management/add.vue||src/resources/js/pages/crud-management/add.vue": [
          "File: src/resources/js/pages/crud-management/add.vue -> src/resources/js/pages/crud-management/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:                       />",
          "461:                     </td>",
          "462:                     <td>",
          "467:                     </badaso-code-editor>",
          "477:                         color=\"danger\"",
          "478:                         type=\"relief\"",
          "481:                       >",
          "482:                         <vs-icon icon=\"delete\"></vs-icon>",
          "483:                       </vs-button>",
          "557:                     </td>",
          "558:                   </tr>",
          "559:                   <tr>",
          "",
          "[Removed Lines]",
          "463:                       <badaso-code-editor",
          "464:                         v-model=\"field.details\"",
          "465:                         v-if=\"field.type !== 'relation'\"",
          "466:                       >",
          "468:                       <vs-button",
          "469:                         color=\"primary\"",
          "470:                         type=\"relief\"",
          "471:                         @click.stop",
          "472:                         @click=\"openRelationSetup(field)\"",
          "473:                         v-else-if=\"field.relationType !== 'belongs_to_many'\"",
          "474:                         >{{ $t(\"crud.add.body.setRelation\") }}</vs-button",
          "475:                       >",
          "476:                       <vs-button",
          "479:                         @click=\"dropItemManytomany(index)\"",
          "480:                         v-else-if=\"field.relationType == 'belongs_to_many'\"",
          "484:                       <vs-popup",
          "485:                         :title=\"$t('crud.add.body.setRelation')\"",
          "486:                         :active.sync=\"field.setRelation\"",
          "487:                       >",
          "488:                         <vs-row>",
          "489:                           <badaso-select",
          "490:                             size=\"12\"",
          "491:                             v-model=\"relation.relationType\"",
          "492:                             :items=\"relationTypes\"",
          "493:                             :label=\"$t('crud.add.body.relationType')\"",
          "494:                           ></badaso-select>",
          "495:                           <vs-col",
          "496:                             vs-lg=\"12\"",
          "497:                             class=\"crud-management__relation-destination\"",
          "498:                           >",
          "499:                             <vs-select",
          "500:                               :label=\"$t('crud.add.body.destinationTable')\"",
          "501:                               width=\"100%\"",
          "502:                               v-model=\"relation.destinationTable\"",
          "503:                               @input=\"changeTable\"",
          "504:                             >",
          "505:                               <vs-select-item",
          "506:                                 :key=\"index\"",
          "507:                                 :value=\"item.value ? item.value : item\"",
          "508:                                 :text=\"item.label ? item.label : item\"",
          "509:                                 v-for=\"(item, index) in destinationTables\"",
          "510:                               />",
          "511:                             </vs-select>",
          "512:                           </vs-col>",
          "513:                           <badaso-select",
          "514:                             size=\"12\"",
          "515:                             v-model=\"relation.destinationTableColumn\"",
          "516:                             :items=\"destinationTableColumns\"",
          "517:                             :label=\"$t('crud.add.body.destinationTableColumn')\"",
          "518:                           ></badaso-select>",
          "519:                           <badaso-select",
          "520:                             size=\"12\"",
          "521:                             v-model=\"relation.destinationTableDisplayColumn\"",
          "522:                             :items=\"destinationTableColumns\"",
          "523:                             :label=\"",
          "524:                               $t('crud.add.body.destinationTableDisplayColumn')",
          "525:                             \"",
          "526:                           ></badaso-select>",
          "527:                           <badaso-select-multiple",
          "528:                             v-model=\"relation.destinationTableDisplayMoreColumn\"",
          "529:                             size=\"12\"",
          "530:                             :label=\"$t('crud.add.body.destinationTableDisplayMoreColumn')\"",
          "531:                             :items=\"destinationTableColumns\"",
          "532:                           ></badaso-select-multiple>",
          "533:                         </vs-row>",
          "534:                         <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "535:                           <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "536:                             <vs-button",
          "537:                               class=\"crud-management__button--block\"",
          "538:                               color=\"danger\"",
          "539:                               @click=\"field.setRelation = false\"",
          "540:                               type=\"relief\"",
          "541:                               >{{",
          "542:                                 $t(\"crud.add.body.cancelRelation\")",
          "543:                               }}</vs-button",
          "544:                             >",
          "545:                           </vs-col>",
          "546:                           <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "547:                             <vs-button",
          "548:                               class=\"crud-management__button--block\"",
          "549:                               color=\"primary\"",
          "550:                               @click=\"saveRelation(field)\"",
          "551:                               type=\"relief\"",
          "552:                               >{{ $t(\"crud.add.body.saveRelation\") }}</vs-button",
          "553:                             >",
          "554:                           </vs-col>",
          "555:                         </vs-row>",
          "556:                       </vs-popup>",
          "",
          "[Added Lines]",
          "463:                     <badaso-code-editor",
          "464:                       v-model=\"field.details\"",
          "465:                       v-if=\"field.type !== 'relation'\"",
          "466:                     >",
          "468:                     <vs-button",
          "469:                       color=\"primary\"",
          "470:                       type=\"relief\"",
          "471:                       @click.stop",
          "472:                       @click=\"openRelationSetup(field)\"",
          "473:                       v-if=\"field.type === 'relation'\"",
          "474:                       >{{ $t(\"crud.add.body.setRelation\") }}",
          "475:                     </vs-button>",
          "476:                     <vs-popup",
          "477:                       :title=\"$t('crud.add.body.setRelation')\"",
          "478:                       :active.sync=\"field.setRelation\"",
          "479:                     >",
          "480:                       <vs-row>",
          "481:                         <badaso-select",
          "482:                           size=\"12\"",
          "483:                           v-model=\"relation.relationType\"",
          "484:                           :items=\"field.relationType ? relationOtherTypes : relationTypes\"",
          "485:                           :label=\"$t('crud.add.body.relationType')\"",
          "486:                         ></badaso-select>",
          "487:                         <vs-col",
          "488:                           vs-lg=\"12\"",
          "489:                           class=\"crud-management__relation-destination\"",
          "490:                         >",
          "491:                           <vs-select",
          "492:                             :label=\"$t('crud.add.body.destinationTable')\"",
          "493:                             width=\"100%\"",
          "494:                             v-model=\"relation.destinationTable\"",
          "495:                             @input=\"changeTable\"",
          "496:                           >",
          "497:                             <vs-select-item",
          "498:                               :key=\"index\"",
          "499:                               :value=\"item.value ? item.value : item\"",
          "500:                               :text=\"item.label ? item.label : item\"",
          "501:                               v-for=\"(item, index) in destinationTables\"",
          "502:                             />",
          "503:                           </vs-select>",
          "504:                         </vs-col>",
          "505:                         <badaso-select",
          "506:                           size=\"12\"",
          "507:                           v-model=\"relation.destinationTableColumn\"",
          "508:                           :items=\"destinationTableColumns\"",
          "509:                           :label=\"$t('crud.add.body.destinationTableColumn')\"",
          "510:                         ></badaso-select>",
          "511:                         <badaso-select",
          "512:                           size=\"12\"",
          "513:                           v-model=\"relation.destinationTableDisplayColumn\"",
          "514:                           :items=\"destinationTableColumns\"",
          "515:                           :label=\"",
          "516:                             $t('crud.add.body.destinationTableDisplayColumn')",
          "517:                           \"",
          "518:                         ></badaso-select>",
          "519:                         <badaso-select-multiple",
          "520:                           v-model=\"relation.destinationTableDisplayMoreColumn\"",
          "521:                           size=\"12\"",
          "522:                           :label=\"$t('crud.add.body.destinationTableDisplayMoreColumn')\"",
          "523:                           :items=\"destinationTableColumns\"",
          "524:                         ></badaso-select-multiple>",
          "525:                       </vs-row>",
          "526:                       <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "527:                         <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "528:                           <vs-button",
          "529:                             class=\"crud-management__button--block\"",
          "530:                             color=\"danger\"",
          "531:                             @click=\"field.setRelation = false\"",
          "532:                             type=\"relief\"",
          "533:                             >{{",
          "534:                               $t(\"crud.add.body.cancelRelation\")",
          "535:                             }}</vs-button",
          "536:                           >",
          "537:                         </vs-col>",
          "538:                         <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "539:                           <vs-button",
          "540:                             class=\"crud-management__button--block\"",
          "541:                             color=\"primary\"",
          "542:                             @click=\"saveRelation(field)\"",
          "543:                             type=\"relief\"",
          "544:                             >{{ $t(\"crud.add.body.saveRelation\") }}</vs-button",
          "545:                           >",
          "546:                         </vs-col>",
          "547:                       </vs-row>",
          "548:                     </vs-popup>",
          "549:                     <vs-button",
          "552:                         @click=\"dropItemOtherRelation(index)\"",
          "553:                         v-if=\"field.relationType == 'belongs_to_many' || field.relationType == 'has_one' || field.relationType == 'has_many'\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:                       @click.stop",
          "565:                       @click=\"openRelationSetupManytomany()\"",
          "566:                       >",
          "568:                     </vs-button>",
          "569:                     <vs-popup",
          "570:                       :title=\"$t('crud.add.body.setRelation')\"",
          "572:                       <vs-row>",
          "573:                         <badaso-select size=\"12\"",
          "576:                           :label=\"$t('crud.add.body.relationType')\"",
          "577:                         ></badaso-select>",
          "578:                         <vs-col",
          "",
          "[Removed Lines]",
          "567:                       {{ $t(\"crud.add.body.setRelationManytomany\") }}",
          "571:                       :active.sync=\"setRelationManytomany\">",
          "574:                           v-model=\"relationManytomany.relationType\"",
          "575:                           :items=\"relationTypesBelongsToMany\"",
          "",
          "[Added Lines]",
          "567:                       {{ $t(\"crud.add.body.setOtherRelation\") }}",
          "571:                       :active.sync=\"setOtherRelation\">",
          "574:                           v-model=\"otherRelation.relationType\"",
          "575:                           :items=\"relationOtherTypes\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:                           <vs-select",
          "582:                             :label=\"$t('crud.add.body.destinationTable')\"",
          "583:                             width=\"100%\"",
          "585:                             @input=\"changeTableManytomany\">",
          "586:                             <vs-select-item",
          "587:                             :key=\"index\"",
          "",
          "[Removed Lines]",
          "584:                             v-model=\"relationManytomany.destinationTable\"",
          "",
          "[Added Lines]",
          "584:                             v-model=\"otherRelation.destinationTable\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "592:                         </vs-col>",
          "593:                         <badaso-select",
          "594:                           size=\"12\"",
          "596:                           :items=\"destinationTableColumns\"",
          "597:                           :label=\"$t('crud.add.body.destinationTableColumn')\"",
          "598:                         ></badaso-select>",
          "599:                         <badaso-select",
          "600:                           size=\"12\"",
          "602:                           :label=\"",
          "603:                           $t('crud.add.body.destinationTableDisplayColumn')",
          "604:                           \"",
          "",
          "[Removed Lines]",
          "595:                           v-model=\"relationManytomany.destinationTableColumn\"",
          "601:                           v-model=\"relationManytomany.destinationTableDisplayColumn\" :items=\"destinationTableColumns\"",
          "",
          "[Added Lines]",
          "595:                           v-model=\"otherRelation.destinationTableColumn\"",
          "601:                           v-model=\"otherRelation.destinationTableDisplayColumn\" :items=\"destinationTableColumns\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "759:                            <vs-button",
          "760:                             color=\"danger\"",
          "761:                             type=\"relief\"",
          "763:                             v-else-if=\"field.relationType == 'belongs_to_many'\"",
          "764:                           >",
          "765:                             <vs-icon icon=\"delete\"></vs-icon>",
          "",
          "[Removed Lines]",
          "762:                             @click=\"dropItemManytomany(index)\"",
          "",
          "[Added Lines]",
          "762:                             @click=\"dropItemOtherRelation(index)\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "884:                   @click.stop",
          "885:                   @click=\"openRelationSetupManytomany()\"",
          "886:                   >",
          "888:                 </vs-button>",
          "889:                 <vs-popup",
          "892:                 >",
          "893:                   <vs-row>",
          "894:                     <badaso-select",
          "895:                       size=\"12\"",
          "898:                       :label=\"$t('crud.add.body.relationType')\"",
          "899:                     ></badaso-select>",
          "900:                     <vs-col",
          "",
          "[Removed Lines]",
          "887:                   {{ $t(\"crud.add.body.setRelationManytomany\") }}",
          "890:                   :title=\"$t('crud.add.body.setRelationManytomany')\"",
          "891:                   :active.sync=\"setRelationManytomany\"",
          "896:                       v-model=\"relationManytomany.relationType\"",
          "897:                       :items=\"relationTypesBelongsToMany\"",
          "",
          "[Added Lines]",
          "887:                   {{ $t(\"crud.add.body.setOtherRelation\") }}",
          "890:                   :title=\"$t('crud.add.body.setOtherRelation')\"",
          "891:                   :active.sync=\"setOtherRelation\"",
          "896:                       v-model=\"otherRelation.relationType\"",
          "897:                       :items=\"relationOtherTypes\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "904:                       <vs-select",
          "905:                         :label=\"$t('crud.add.body.destinationTable')\"",
          "906:                         width=\"100%\"",
          "908:                         @input=\"changeTableManytomany\"",
          "909:                       >",
          "910:                         <vs-select-item",
          "",
          "[Removed Lines]",
          "907:                         v-model=\"relationManytomany.destinationTable\"",
          "",
          "[Added Lines]",
          "907:                         v-model=\"otherRelation.destinationTable\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "917:                     </vs-col>",
          "918:                     <badaso-select",
          "919:                       size=\"12\"",
          "921:                       :items=\"destinationTableColumns\"",
          "922:                       :label=\"",
          "923:                         $t('crud.add.body.destinationTableColumn')",
          "",
          "[Removed Lines]",
          "920:                       v-model=\"relationManytomany.destinationTableColumn\"",
          "",
          "[Added Lines]",
          "920:                       v-model=\"otherRelation.destinationTableColumn\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "925:                     ></badaso-select>",
          "926:                     <badaso-select",
          "927:                       size=\"12\"",
          "929:                       :items=\"destinationTableColumns\"",
          "930:                       :label=\"",
          "931:                         $t(",
          "",
          "[Removed Lines]",
          "928:                       v-model=\"relationManytomany.destinationTableDisplayColumn\"",
          "",
          "[Added Lines]",
          "928:                       v-model=\"otherRelation.destinationTableDisplayColumn\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1060:       rows: [],",
          "1061:     },",
          "1062:     relationTypes: [],",
          "1069:     destinationTables: [],",
          "1070:     destinationTableColumns: [],",
          "1073:       relationType: \"\",",
          "1074:       destinationTable: \"\",",
          "1075:       destinationTableColumn: \"\",",
          "",
          "[Removed Lines]",
          "1063:     relationTypesBelongsToMany: [",
          "1064:       {",
          "1065:         'label': 'Belongs To Many',",
          "1066:         'value': 'belongs_to_many'",
          "1067:       }",
          "1068:     ],",
          "1071:     setRelationManytomany:false,",
          "1072:     relationManytomany: {",
          "",
          "[Added Lines]",
          "1063:     relationOtherTypes: [],",
          "1066:     setOtherRelation:false,",
          "1067:     otherRelation: {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1174:       field.setRelation = false;",
          "1175:     },",
          "1176:     openRelationSetupManytomany() {",
          "1184:           : \"\",",
          "1187:           : \"\",",
          "1188:       };",
          "1189:     },",
          "1190:     changeTableManytomany(table) {",
          "1191:       if (table) {",
          "1195:         this.getDestinationTableColumns(table);",
          "1196:       }",
          "1197:     },",
          "1198:     saveRelationManytomany() {",
          "1202:         this.crudData.rows.push({",
          "1204:           type: \"relation\",",
          "1206:           required: 0,",
          "1207:           browse: 1,",
          "1208:           read: 1,",
          "",
          "[Removed Lines]",
          "1177:       this.setRelationManytomany = true;",
          "1178:       this.relationManytomany = {",
          "1179:         relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1180:         destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1181:         destinationTableManytomany: this.relationManytomany.destinationTableManytomany ? this.relationManytomany.destinationTableManytomany : \"\",",
          "1182:         destinationTableColumn: this.relationManytomany.destinationTableColumn",
          "1183:           ? this.relationManytomany.destinationTableColumn",
          "1185:         destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn",
          "1186:           ? this.relationManytomany.destinationTableDisplayColumn",
          "1192:         this.relationManytomany.destinationTableColumn = \"\";",
          "1193:         this.relationManytomany.destinationTableDisplayColumn = \"\";",
          "1194:         this.relationManytomany.destinationTableDisplayMoreColumn = \"\";",
          "1199:       let fielName = this.relationManytomanyAdvance.destinationTableManytomany ? this.relationManytomanyAdvance.destinationTableManytomany : this.crudData.name + \"_\" + this.relationManytomany.destinationTable + \"_relations\"",
          "1200:       const existKeyAutomatic = obj => obj.field === fielName;",
          "1201:       if (!this.crudData.rows.some(existKeyAutomatic) && this.relationManytomany.relationType != '') {",
          "1203:           field: fielName,",
          "1205:           displayName: this.crudData.name + \" \" + this.relationManytomany.destinationTable,",
          "",
          "[Added Lines]",
          "1172:       this.setOtherRelation = true;",
          "1173:       this.otherRelation = {",
          "1174:         relationType: this.otherRelation.relationType ? this.otherRelation.relationType : \"\",",
          "1175:         destinationTable: this.otherRelation.destinationTable ? this.otherRelation.destinationTable : \"\",",
          "1176:         destinationTableManytomany: this.otherRelation.destinationTableManytomany ? this.otherRelation.destinationTableManytomany : \"\",",
          "1177:         destinationTableColumn: this.otherRelation.destinationTableColumn",
          "1178:           ? this.otherRelation.destinationTableColumn",
          "1180:         destinationTableDisplayColumn: this.otherRelation.destinationTableDisplayColumn",
          "1181:           ? this.otherRelation.destinationTableDisplayColumn",
          "1187:         this.otherRelation.destinationTableColumn = \"\";",
          "1188:         this.otherRelation.destinationTableDisplayColumn = \"\";",
          "1189:         this.otherRelation.destinationTableDisplayMoreColumn = \"\";",
          "1194:       let fieldName = this.relationManytomanyAdvance.destinationTableManytomany ? this.relationManytomanyAdvance.destinationTableManytomany : this.crudData.name + \"_\" + this.otherRelation.destinationTable + \"_relations\";",
          "1195:       let displayName = this.crudData.name + \" \" + this.otherRelation.destinationTable;",
          "1197:       if(this.otherRelation.relationType != 'belongs_to_many'){",
          "1198:         fieldName = this.otherRelation.destinationTable;",
          "1199:         displayName = this.otherRelation.destinationTable;",
          "1200:       }",
          "1201:       const existKeyAutomatic = obj => obj.field === fieldName;",
          "1203:       if (!this.crudData.rows.some(existKeyAutomatic) && this.otherRelation.relationType != '') {",
          "1205:           field: fieldName,",
          "1207:           displayName: this.$helper.generateDisplayName(displayName),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1211:           delete: 1,",
          "1212:           details: \"{}\",",
          "1213:           order: 1,",
          "1217:             : \"\",",
          "1219:             : \"\",",
          "1220:           setRelation: false,",
          "1221:         });",
          "1222:       }",
          "1225:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "1226:     },",
          "1227:     cancelRelationManytomany() {",
          "1233:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "1234:     },",
          "1235:     dataNotificationEventHandle() {",
          "",
          "[Removed Lines]",
          "1214:           relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1215:           destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1216:           destinationTableColumn: this.relationManytomany.destinationTableColumn ? this.relationManytomany.destinationTableColumn",
          "1218:           destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn ? this.relationManytomany.destinationTableDisplayColumn",
          "1223:       this.setRelationManytomany = false",
          "1224:       this.relationManytomany = {}",
          "1228:       this.setRelationManytomany = false",
          "1229:       this.relationManytomany.relationType = \"\"",
          "1230:       this.relationManytomany.destinationTable = \"\"",
          "1231:       this.relationManytomany.destinationTableColumn = \"\"",
          "1232:       this.relationManytomany.destinationTableDisplayColumn = \"\"",
          "",
          "[Added Lines]",
          "1216:           relationType: this.otherRelation.relationType ? this.otherRelation.relationType : \"\",",
          "1217:           destinationTable: this.otherRelation.destinationTable ? this.otherRelation.destinationTable : \"\",",
          "1218:           destinationTableColumn: this.otherRelation.destinationTableColumn ? this.otherRelation.destinationTableColumn",
          "1220:           destinationTableDisplayColumn: this.otherRelation.destinationTableDisplayColumn ? this.otherRelation.destinationTableDisplayColumn",
          "1225:       this.setOtherRelation = false",
          "1226:       this.otherRelation = {}",
          "1230:       this.setOtherRelation = false",
          "1231:       this.otherRelation.relationType = \"\"",
          "1232:       this.otherRelation.destinationTable = \"\"",
          "1233:       this.otherRelation.destinationTableColumn = \"\"",
          "1234:       this.otherRelation.destinationTableDisplayColumn = \"\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1353:         .tableRelations()",
          "1354:         .then((response) => {",
          "1355:           this.$closeLoader();",
          "1357:         })",
          "1358:         .catch((error) => {",
          "1359:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "1356:           this.relationTypes = response.data.tableRelations;",
          "",
          "[Added Lines]",
          "1358:           let tableRelations =  response.data.tableRelations;",
          "1359:           for(let tableRelation of tableRelations){",
          "1360:             if(tableRelation.value == 'belongs_to'){",
          "1361:               this.relationTypes.push({",
          "1362:                 \"label\": tableRelation.label,",
          "1363:                 \"value\": tableRelation.value",
          "1364:               })",
          "1365:             }else{",
          "1366:               this.relationOtherTypes.push({",
          "1367:                 \"label\" : tableRelation.label,",
          "1368:                 \"value\" : tableRelation.value",
          "1369:               })",
          "1370:             }",
          "1371:           }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1431:       this.crudData.notification = notification;",
          "1432:     },",
          "1434:       this.$vs.dialog({",
          "1435:         type: \"confirm\",",
          "1436:         color: \"danger\",",
          "",
          "[Removed Lines]",
          "1433:     dropItemManytomany(key) {",
          "",
          "[Added Lines]",
          "1448:     dropItemOtherRelation(key) {",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-management/edit.vue||src/resources/js/pages/crud-management/edit.vue": [
          "File: src/resources/js/pages/crud-management/edit.vue -> src/resources/js/pages/crud-management/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:                         type=\"relief\"",
          "476:                         @click.stop",
          "477:                         @click=\"openRelationSetup(field)\"",
          "479:                         >{{ $t(\"crud.edit.body.setRelation\") }}</vs-button",
          "480:                       >",
          "489:                       <vs-popup",
          "490:                         :title=\"$t('crud.edit.body.setRelation')\"",
          "491:                         :active.sync=\"field.setRelation\"",
          "",
          "[Removed Lines]",
          "478:                         v-else-if=\"field.relationType !== 'belongs_to_many'\"",
          "481:                       <vs-button",
          "482:                         color=\"danger\"",
          "483:                         type=\"relief\"",
          "484:                         @click=\"dropItemManytomany(index)\"",
          "485:                         v-else-if=\"field.relationType == 'belongs_to_many'\"",
          "486:                       >",
          "487:                         <vs-icon icon=\"delete\"></vs-icon>",
          "488:                       </vs-button>",
          "",
          "[Added Lines]",
          "478:                         v-if=\"field.type === 'relation'\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:                           <badaso-select",
          "495:                             size=\"12\"",
          "496:                             v-model=\"relation.relationType\"",
          "498:                             :label=\"$t('crud.edit.body.relationType')\"",
          "499:                           ></badaso-select>",
          "500:                           <vs-col",
          "",
          "[Removed Lines]",
          "497:                             :items=\"relationTypes\"",
          "",
          "[Added Lines]",
          "489:                             :items=\"field.relationType ? relationOtherTypes : relationTypes\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "561:                           </vs-col>",
          "562:                         </vs-row>",
          "563:                       </vs-popup>",
          "564:                     </td>",
          "565:                   </tr>",
          "566:                   <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:                       <vs-button",
          "557:                           color=\"danger\"",
          "558:                           type=\"relief\"",
          "559:                           @click=\"dropItemOtherRelation(index)\"",
          "560:                           v-if=\"field.relationType == 'belongs_to_many' || field.relationType == 'has_one' || field.relationType == 'has_many'\"",
          "561:                       >",
          "562:                         <vs-icon icon=\"delete\"></vs-icon>",
          "563:                       </vs-button>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "571:                         type=\"relief\"",
          "572:                         @click.stop",
          "573:                         @click=\"openRelationSetupManytomany()\"",
          "575:                       >",
          "576:                     <vs-popup",
          "579:                     >",
          "580:                       <vs-row>",
          "581:                         <badaso-select",
          "582:                           size=\"12\"",
          "585:                           :label=\"$t('crud.edit.body.relationType')\"",
          "586:                         ></badaso-select>",
          "587:                         <vs-col",
          "",
          "[Removed Lines]",
          "574:                         >{{ $t(\"crud.edit.body.setRelationManytomany\") }}</vs-button",
          "577:                       :title=\"$t('crud.edit.body.setRelationManytomany')\"",
          "578:                       :active.sync=\"setRelationManytomany\"",
          "583:                           v-model=\"relationManytomany.relationType\"",
          "584:                           :items=\"relationTypesBelongsToMany\"",
          "",
          "[Added Lines]",
          "574:                         >{{ $t(\"crud.edit.body.setOtherRelation\") }}</vs-button",
          "577:                       :title=\"$t('crud.edit.body.setOtherRelation')\"",
          "578:                       :active.sync=\"setOtherRelation\"",
          "583:                           v-model=\"otherRelation.relationType\"",
          "584:                           :items=\"relationOtherTypes\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "591:                           <vs-select",
          "592:                             :label=\"$t('crud.edit.body.destinationTable')\"",
          "593:                             width=\"100%\"",
          "595:                             @input=\"changeTableManytomany\"",
          "596:                           >",
          "597:                             <vs-select-item",
          "",
          "[Removed Lines]",
          "594:                             v-model=\"relationManytomany.destinationTable\"",
          "",
          "[Added Lines]",
          "594:                             v-model=\"otherRelation.destinationTable\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "604:                         </vs-col>",
          "605:                         <badaso-select",
          "606:                           size=\"12\"",
          "608:                           :items=\"destinationTableColumns\"",
          "609:                           :label=\"$t('crud.edit.body.destinationTableColumn')\"",
          "610:                         ></badaso-select>",
          "611:                         <badaso-select",
          "612:                           size=\"12\"",
          "614:                           :items=\"destinationTableColumns\"",
          "615:                           :label=\"",
          "616:                             $t('crud.edit.body.destinationTableDisplayColumn')",
          "",
          "[Removed Lines]",
          "607:                           v-model=\"relationManytomany.destinationTableColumn\"",
          "613:                           v-model=\"relationManytomany.destinationTableDisplayColumn\"",
          "",
          "[Added Lines]",
          "607:                           v-model=\"otherRelation.destinationTableColumn\"",
          "613:                           v-model=\"otherRelation.destinationTableDisplayColumn\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "869:                   type=\"relief\"",
          "870:                   @click.stop",
          "871:                   @click=\"openRelationSetupManytomany()\"",
          "873:                 >",
          "874:                 <vs-popup",
          "875:                 class=\"holamundo\"",
          "876:                 :title=\"$t('crud.add.body.setRelation')\"",
          "878:                   <vs-row>",
          "879:                     <badaso-select",
          "880:                       size=\"12\"",
          "883:                       :label=\"$t('crud.add.body.relationType')\">",
          "884:                       </badaso-select",
          "885:                     >",
          "",
          "[Removed Lines]",
          "872:                 >{{ $t(\"crud.edit.body.setRelationManytomany\") }}</vs-button",
          "877:                 :active.sync=\"setRelationManytomany\">",
          "881:                       v-model=\"relationManytomany.relationType\"",
          "882:                       :items=\"relationTypesBelongsToMany\"",
          "",
          "[Added Lines]",
          "872:                 >{{ $t(\"crud.edit.body.setOtherRelation\") }}</vs-button",
          "877:                 :active.sync=\"setOtherRelation\">",
          "881:                       v-model=\"otherRelation.relationType\"",
          "882:                       :items=\"relationOtherTypes\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "890:                       <vs-select",
          "891:                         :label=\"$t('crud.add.body.destinationTable')\"",
          "892:                         width=\"100%\"",
          "894:                         @input=\"changeTableManytomany\"",
          "895:                       >",
          "896:                         <vs-select-item",
          "",
          "[Removed Lines]",
          "893:                         v-model=\"relationManytomany.destinationTable\"",
          "",
          "[Added Lines]",
          "893:                         v-model=\"otherRelation.destinationTable\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "901:                     </vs-col>",
          "902:                     <badaso-select",
          "903:                       size=\"12\"",
          "905:                       :items=\"destinationTableColumns\"",
          "906:                       :label=\"",
          "907:                             $t('crud.add.body.destinationTableColumn')",
          "908:                       \"></badaso-select>",
          "909:                     <badaso-select",
          "910:                     size=\"12\"",
          "912:                     :items=\"destinationTableColumns\"",
          "913:                     :label=\"",
          "914:                       $t(",
          "",
          "[Removed Lines]",
          "904:                       v-model=\"relationManytomany.destinationTableColumn\"",
          "911:                     v-model=\"relationManytomany.destinationTableDisplayColumn\"",
          "",
          "[Added Lines]",
          "904:                       v-model=\"otherRelation.destinationTableColumn\"",
          "911:                     v-model=\"otherRelation.destinationTableDisplayColumn\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1026:       notification: [],",
          "1027:       rows: [],",
          "1028:     },",
          "1030:     relationTypes: [],",
          "1037:     destinationTables: [],",
          "1038:     destinationTableColumns: [],",
          "1039:     relation: {},",
          "1041:       relationType: \"\",",
          "1042:       destinationTable: \"\",",
          "1043:       destinationTableColumn: \"\",",
          "",
          "[Removed Lines]",
          "1029:     setRelationManytomany: false,",
          "1031:     relationTypesBelongsToMany: [",
          "1032:       {",
          "1033:         'label' : 'Belongs To Many',",
          "1034:         'value' : 'belongs_to_many'",
          "1035:       }",
          "1036:     ],",
          "1040:     relationManytomany: {",
          "",
          "[Added Lines]",
          "1029:     setOtherRelation: false,",
          "1031:     relationOtherTypes: [],",
          "1035:     otherRelation: {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1131:       field.setRelation = false;",
          "1132:     },",
          "1133:     openRelationSetupManytomany() {",
          "1140:           : \"\",",
          "1143:           : \"\",",
          "1144:       };",
          "1147:       }",
          "1148:     },",
          "1149:     changeTableManytomany(table) {",
          "1150:       if (table) {",
          "1154:         this.getDestinationTableColumns(table);",
          "1155:       }",
          "1156:     },",
          "1157:     saveRelationManytomany() {",
          "1162:         this.crudData.dataRows.push({",
          "1164:           type: \"relation\",",
          "1166:           required: 0,",
          "1167:           browse: 1,",
          "1168:           read: 1,",
          "",
          "[Removed Lines]",
          "1134:       this.setRelationManytomany = true;",
          "1135:       this.relationManytomany = {",
          "1136:         relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1137:         destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1138:         destinationTableColumn: this.relationManytomany.destinationTableColumn",
          "1139:           ? this.relationManytomany.destinationTableColumn",
          "1141:         destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn",
          "1142:           ? this.relationManytomany.destinationTableDisplayColumn",
          "1145:       if (this.relationManytomany.destinationTable !== \"\") {",
          "1146:         this.getDestinationTableColumns(this.relationManytomany.destinationTable);",
          "1151:         this.relationManytomany.destinationTableColumn = \"\";",
          "1152:         this.relationManytomany.destinationTableDisplayColumn = \"\";",
          "1153:         this.relationManytomany.destinationTableDisplayMoreColumn = \"\";",
          "1158:       let fielName = this.relationManytomanyAdvance.destinationTableManytomany ? this.relationManytomanyAdvance.destinationTableManytomany : this.crudData.name + \"_\" + this.relationManytomany.destinationTable + \"_relations\"",
          "1159:       const existKeyAutomatic = obj => obj.field === fielName;",
          "1161:       if (!this.crudData.dataRows.some(existKeyAutomatic) && this.relationManytomany.relationType != '') {",
          "1163:           field: fielName,",
          "1165:           displayName: this.crudData.name + \" \" + this.relationManytomany.destinationTable,",
          "",
          "[Added Lines]",
          "1129:       this.setOtherRelation = true;",
          "1130:       this.otherRelation = {",
          "1131:         relationType: this.otherRelation.relationType ? this.otherRelation.relationType : \"\",",
          "1132:         destinationTable: this.otherRelation.destinationTable ? this.otherRelation.destinationTable : \"\",",
          "1133:         destinationTableColumn: this.otherRelation.destinationTableColumn",
          "1134:           ? this.otherRelation.destinationTableColumn",
          "1136:         destinationTableDisplayColumn: this.otherRelation.destinationTableDisplayColumn",
          "1137:           ? this.otherRelation.destinationTableDisplayColumn",
          "1140:       if (this.otherRelation.destinationTable !== \"\") {",
          "1141:         this.getDestinationTableColumns(this.otherRelation.destinationTable);",
          "1146:         this.otherRelation.destinationTableColumn = \"\";",
          "1147:         this.otherRelation.destinationTableDisplayColumn = \"\";",
          "1148:         this.otherRelation.destinationTableDisplayMoreColumn = \"\";",
          "1153:       let fieldName = this.relationManytomanyAdvance.destinationTableManytomany ? this.relationManytomanyAdvance.destinationTableManytomany : this.crudData.name + \"_\" + this.otherRelation.destinationTable + \"_relations\";",
          "1154:       let displayName = this.crudData.name + \" \" + this.otherRelation.destinationTable;",
          "1156:       if (this.otherRelation.relationType != 'belongs_to_many') {",
          "1157:         fieldName = this.otherRelation.destinationTable;",
          "1158:         displayName = this.otherRelation.destinationTable;",
          "1159:       }",
          "1161:       const existKeyAutomatic = obj => obj.field === fieldName;",
          "1163:       if (!this.crudData.dataRows.some(existKeyAutomatic) && this.otherRelation.relationType != '') {",
          "1165:           field: fieldName,",
          "1167:           displayName: this.$helper.generateDisplayName(displayName),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1171:           delete: 1,",
          "1172:           details: \"{}\",",
          "1173:           order: 1,",
          "1175:           setRelation: false,",
          "1176:         });",
          "1177:         this.crudData.rows.push({",
          "1179:           type: \"relation\",",
          "1181:           required: 0,",
          "1182:           browse: 1,",
          "1183:           read: 1,",
          "",
          "[Removed Lines]",
          "1174:           relation: this.relationManytomany,",
          "1178:           field: fielName,",
          "1180:           displayName: this.crudData.name + \" \" + this.relationManytomany.destinationTable,",
          "",
          "[Added Lines]",
          "1176:           relation: this.otherRelation,",
          "1180:           field: fieldName,",
          "1182:           displayName: this.$helper.generateDisplayName(displayName),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1186:           delete: 1,",
          "1187:           details: \"{}\",",
          "1188:           order: 1,",
          "1193:             : \"\",",
          "1196:             : \"\",",
          "1197:           setRelation: false,",
          "1198:         });",
          "1199:       }",
          "1202:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "1203:     },",
          "1204:     cancelRelationManytomany(){",
          "1210:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "1211:     },",
          "1212:     dataNotificationEventHandle() {",
          "",
          "[Removed Lines]",
          "1189:           relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1190:           destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1191:           destinationTableColumn: this.relationManytomany.destinationTableColumn",
          "1192:             ? this.relationManytomany.destinationTableColumn",
          "1194:           destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn",
          "1195:             ? this.relationManytomany.destinationTableDisplayColumn",
          "1200:       this.setRelationManytomany = false",
          "1201:       this.relationManytomany = {}",
          "1205:       this.setRelationManytomany = false",
          "1206:       this.relationManytomany.relationType = \"\"",
          "1207:       this.relationManytomany.destinationTable = \"\"",
          "1208:       this.relationManytomany.destinationTableColumn = \"\"",
          "1209:       this.relationManytomany.destinationTableDisplayColumn = \"\"",
          "",
          "[Added Lines]",
          "1191:           relationType: this.otherRelation.relationType ? this.otherRelation.relationType : \"\",",
          "1192:           destinationTable: this.otherRelation.destinationTable ? this.otherRelation.destinationTable : \"\",",
          "1193:           destinationTableColumn: this.otherRelation.destinationTableColumn",
          "1194:             ? this.otherRelation.destinationTableColumn",
          "1196:           destinationTableDisplayColumn: this.otherRelation.destinationTableDisplayColumn",
          "1197:             ? this.otherRelation.destinationTableDisplayColumn",
          "1202:       this.setOtherRelation = false",
          "1203:       this.otherRelation = {}",
          "1207:       this.setOtherRelation = false",
          "1208:       this.otherRelation.relationType = \"\"",
          "1209:       this.otherRelation.destinationTable = \"\"",
          "1210:       this.otherRelation.destinationTableColumn = \"\"",
          "1211:       this.otherRelation.destinationTableDisplayColumn = \"\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1344:         .tableRelations()",
          "1345:         .then((response) => {",
          "1346:           this.$closeLoader();",
          "1348:         })",
          "1349:         .catch((error) => {",
          "1350:           this.$closeLoader();",
          "",
          "[Removed Lines]",
          "1347:           this.relationTypes = response.data.tableRelations;",
          "",
          "[Added Lines]",
          "1349:           let tableRelations =  response.data.tableRelations;",
          "1350:           for(let tableRelation of tableRelations){",
          "1351:             if(tableRelation.value == 'belongs_to'){",
          "1352:               this.relationTypes.push({",
          "1353:                 \"label\": tableRelation.label,",
          "1354:                 \"value\": tableRelation.value",
          "1355:               })",
          "1356:             }else{",
          "1357:               this.relationOtherTypes.push({",
          "1358:                 \"label\" : tableRelation.label,",
          "1359:                 \"value\" : tableRelation.value",
          "1360:               })",
          "1361:             }",
          "1362:           }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1422:       this.crudData.notification = notification;",
          "1423:     },",
          "1425:       this.$vs.dialog({",
          "1426:         type: \"confirm\",",
          "1427:         color: \"danger\",",
          "1428:         title: this.$t(\"action.delete.title\"),",
          "1429:         text: this.$t(\"action.delete.text\"),",
          "1431:         acceptText: this.$t(\"action.delete.accept\"),",
          "1432:         cancelText: this.$t(\"action.delete.cancel\"),",
          "1433:         cancel: () => { },",
          "",
          "[Removed Lines]",
          "1424:     dropItemManytomany(key) {",
          "1430:         accept: () => this.$delete(this.crudData.rows, key),",
          "",
          "[Added Lines]",
          "1439:     dropItemOtherRelation(key) {",
          "1445:         accept: () => {",
          "1446:           this.$delete(this.crudData.rows, key)",
          "1447:           this.$delete(this.crudData.dataRows, key)",
          "1448:         },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "318f8afc9f3832f1823053166abbc63e6dd23140",
      "candidate_info": {
        "commit_hash": "318f8afc9f3832f1823053166abbc63e6dd23140",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/318f8afc9f3832f1823053166abbc63e6dd23140",
        "files": [
          "src/Commands/BadasoSetup.php",
          "src/Controllers/BadasoMaintenanceController.php",
          "src/resources/js/components/BadasoSwitch.vue",
          "src/resources/js/pages/configuration/browse.vue"
        ],
        "message": "add maintanance status .env",
        "before_after_code_files": [
          "src/Commands/BadasoSetup.php||src/Commands/BadasoSetup.php",
          "src/Controllers/BadasoMaintenanceController.php||src/Controllers/BadasoMaintenanceController.php",
          "src/resources/js/components/BadasoSwitch.vue||src/resources/js/components/BadasoSwitch.vue",
          "src/resources/js/pages/configuration/browse.vue||src/resources/js/pages/configuration/browse.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoSetup.php||src/Commands/BadasoSetup.php": [
          "File: src/Commands/BadasoSetup.php -> src/Commands/BadasoSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:             'BADASO_AUTH_TOKEN_LIFETIME' => '',",
          "254:             'BADASO_LICENSE_KEY' => '',",
          "255:             'ARCANEDEV_LOGVIEWER_MIDDLEWARE' => '',",
          "256:             'MIX_BADASO_PLUGINS' => '',",
          "257:             'MIX_DEFAULT_MENU' => 'general',",
          "258:             'MIX_BADASO_MENU' => '${MIX_DEFAULT_MENU}',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:             'MIX_BADASO_MAINTENANCE' => 'false',",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoMaintenanceController.php||src/Controllers/BadasoMaintenanceController.php": [
          "File: src/Controllers/BadasoMaintenanceController.php -> src/Controllers/BadasoMaintenanceController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     private function isUnderMaintenance()",
          "84:     {",
          "94:         }",
          "95:     }",
          "",
          "[Removed Lines]",
          "85:         try {",
          "86:             $configuration_model = ConfigurationRedis::get();",
          "87:             $maintenance = $configuration_model->where('key', 'maintenance')->firstOrFail();",
          "89:             return $maintenance->value == '1' ? true : false;",
          "90:         } catch (\\Exception $e) {",
          "91:             $maintenance = Configuration::where('key', 'maintenance')->firstOrFail();",
          "93:             return $maintenance->value == '1' ? true : false;",
          "",
          "[Added Lines]",
          "85:         if(env('MIX_BADASO_MAINTENANCE')){",
          "86:             return true;",
          "87:         }else{",
          "88:             try {",
          "89:                 $configuration_model = ConfigurationRedis::get();",
          "90:                 $maintenance = $configuration_model->where('key', 'maintenance')->firstOrFail();",
          "92:                 return $maintenance->value == '1' ? true : false;",
          "93:             } catch (\\Exception $e) {",
          "94:                 $maintenance = Configuration::where('key', 'maintenance')->firstOrFail();",
          "96:                 return $maintenance->value == '1' ? true : false;",
          "97:             }",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoSwitch.vue||src/resources/js/components/BadasoSwitch.vue": [
          "File: src/resources/js/components/BadasoSwitch.vue -> src/resources/js/components/BadasoSwitch.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:         <vs-icon icon=\"help_outline\" size=\"16px\" color=\"#A5A5A5\"></vs-icon>",
          "7:       </vs-tooltip>",
          "8:     </label>",
          "13:     <div v-if=\"additionalInfo\" v-html=\"additionalInfo\"></div>",
          "14:     <div v-if=\"alert\">",
          "15:       <div v-if=\"$helper.isArray(alert)\">",
          "",
          "[Removed Lines]",
          "9:     <vs-switch :value=\"value\" @change=\"onChange\" @input=\"handleInput($event)\">",
          "10:       <span slot=\"on\">{{ onLabel }}</span>",
          "11:       <span slot=\"off\">{{ offLabel }}</span>",
          "12:     </vs-switch>",
          "",
          "[Added Lines]",
          "9:     <div v-if=\"label == 'Maintenance for all pages.' && status === 'true'\">",
          "10:       <vs-switch :value=\"value\" @change=\"onChange\" :disabled=\"status === 'true'\" @input=\"handleInput($event)\">",
          "11:         <span slot=\"on\">{{ onLabel }}</span>",
          "12:         <span slot=\"off\">{{ offLabel }}</span>",
          "13:       </vs-switch>",
          "14:     </div>",
          "15:     <div v-else>",
          "16:       <vs-switch :value=\"value\" @change=\"onChange\" @input=\"handleInput($event)\">",
          "17:         <span slot=\"on\">{{ onLabel }}</span>",
          "18:         <span slot=\"off\">{{ offLabel }}</span>",
          "19:       </vs-switch>",
          "20:     </div>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:       type: String,",
          "76:       default: null,",
          "77:     },",
          "78:   },",
          "79:   methods: {",
          "80:     handleInput(val) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     status: {",
          "87:       type: String,",
          "88:       default: 'false',",
          "89:     }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/configuration/browse.vue||src/resources/js/pages/configuration/browse.vue": [
          "File: src/resources/js/pages/configuration/browse.vue -> src/resources/js/pages/configuration/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:                   v-if=\"config.type == 'switch'\"",
          "126:                   :label=\"config.displayName\"",
          "127:                   size=\"10\"",
          "128:                   v-model=\"config.value\"",
          "129:                 ></badaso-switch>",
          "130:                 <badaso-slider",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:                   :status=\"statusMaintenance\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     configurations: [],",
          "280:     role: [],",
          "281:     willDeleteConfigurationId: null,",
          "282:   }),",
          "283:   computed: {",
          "284:     groupList: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     statusMaintenance: process.env.MIX_BADASO_MAINTENANCE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1074bc819f3c6b1be5f9c29aa70b972edb3a6bfe",
      "candidate_info": {
        "commit_hash": "1074bc819f3c6b1be5f9c29aa70b972edb3a6bfe",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/1074bc819f3c6b1be5f9c29aa70b972edb3a6bfe",
        "files": [
          "tests/Feature/BadasoApiConfigurationTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "tests/Feature/BadasoApiConfigurationTest.php||tests/Feature/BadasoApiConfigurationTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiConfigurationTest.php||tests/Feature/BadasoApiConfigurationTest.php": [
          "File: tests/Feature/BadasoApiConfigurationTest.php -> tests/Feature/BadasoApiConfigurationTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     {",
          "17:         $set_key_maintenance = config(['badaso.badaso_maintenance' => null]);",
          "18:         $request_data = [",
          "20:         ];",
          "22:         $path_secret_login = config('badaso.secret_login_prefix');",
          "23:         $request_data_secret_login = [",
          "25:         ];",
          "28:         $data = $response['data'];",
          "29:         $this->assertFalse($data['maintenance']);",
          "32:         $data_secret_login = $response_secret_login['data'];",
          "33:         $this->assertFalse($data_secret_login['maintenance']);",
          "34:     }",
          "",
          "[Removed Lines]",
          "19:             \"path\" => \"/badaso-dashboard/login\"",
          "24:             \"path\" => \"/badaso-dashboard/\" . $path_secret_login",
          "27:         $response = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data);",
          "31:         $response_secret_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "",
          "[Added Lines]",
          "19:             'path' => '/badaso-dashboard/login',",
          "24:             'path' => '/badaso-dashboard/'.$path_secret_login,",
          "27:         $response = $this->json('POST', CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data);",
          "31:         $response_secret_login = $this->json('POST', CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     {",
          "38:         $set_key_maintenance = config(['badaso.badaso_maintenance' => true]);",
          "39:         $request_data = [",
          "41:         ];",
          "43:         $path_secret_login = config('badaso.secret_login_prefix');",
          "44:         $request_data_secret_login = [",
          "46:         ];",
          "49:         $data = $response['data'];",
          "50:         $this->assertTrue($data['maintenance']);",
          "53:         $data_secret_login = $response_secret_login['data'];",
          "54:         $this->assertFalse($data_secret_login['maintenance']);",
          "55:     }",
          "",
          "[Removed Lines]",
          "40:             \"path\" => \"/badaso-dashboard/login\"",
          "45:             \"path\" => \"/badaso-dashboard/\" . $path_secret_login",
          "48:         $response = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data);",
          "52:         $response_secret_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "",
          "[Added Lines]",
          "40:             'path' => '/badaso-dashboard/login',",
          "45:             'path' => '/badaso-dashboard/'.$path_secret_login,",
          "48:         $response = $this->json('POST', CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data);",
          "52:         $response_secret_login = $this->json('POST', CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     {",
          "59:         $set_key_maintenance = config(['badaso.badaso_maintenance' => false]);",
          "60:         $request_data_login = [",
          "62:         ];",
          "64:         $path_secret_login = config('badaso.secret_login_prefix');",
          "65:         $request_data_secret_login = [",
          "67:         ];",
          "70:         $data_login = $response_login['data'];",
          "71:         $this->assertFalse($data_login['maintenance']);",
          "74:         $data_secret_login = $response_secret_login['data'];",
          "75:         $this->assertFalse($data_secret_login['maintenance']);",
          "76:     }",
          "",
          "[Removed Lines]",
          "61:             \"path\" => \"/badaso-dashboard/login\"",
          "66:             \"path\" => \"/badaso-dashboard/\" . $path_secret_login",
          "69:         $response_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_login);",
          "73:         $response_secret_login = $this->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "",
          "[Added Lines]",
          "61:             'path' => '/badaso-dashboard/login',",
          "66:             'path' => '/badaso-dashboard/'.$path_secret_login,",
          "69:         $response_login = $this->json('POST', CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_login);",
          "73:         $response_secret_login = $this->json('POST', CallHelperTest::getUrlApiV1Prefix('/maintenance'), $request_data_secret_login);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae587a5abf918e0a48dd7cbdb828ae57d0e7ff07",
      "candidate_info": {
        "commit_hash": "ae587a5abf918e0a48dd7cbdb828ae57d0e7ff07",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/ae587a5abf918e0a48dd7cbdb828ae57d0e7ff07",
        "files": [
          "phpstan-baseline.neon"
        ],
        "message": "update phpstan",
        "before_after_code_files": [
          "phpstan-baseline.neon||phpstan-baseline.neon"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:     - '#Call to an undefined static method [a-zA-Z0-9-()\\\\_]+::[a-zA-Z0-9-()\\_]+.#'",
          "4:     - '#Call to an undefined method [a-zA-Z0-9-()\\\\_]+::[a-zA-Z0-9-()\\_]+.#'",
          "5:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class [a-zA-Z0-9-()\\_]+.#'",
          "7:     - '#Result of method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ [a-zA-Z0-9-()\\_]+ is used.#'",
          "8:     - '#Method [a-zA-Z0-9\\\\_]+::[a-zA-Z0-9-()\\_]+ should return int but return statement is missing.#'",
          "9:     - '#Call to sprintf contains 1 placeholder, 0 values given.#'",
          "",
          "[Removed Lines]",
          "6:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class $[a-zA-Z0-9-()\\\\_]+.#'",
          "",
          "[Added Lines]",
          "6:     - '#Call to static method [a-zA-Z0-9-()\\_]+ on an unknown class \\$[a-zA-Z0-9-()\\\\_]+.#'",
          "",
          "---------------"
        ]
      }
    }
  ]
}