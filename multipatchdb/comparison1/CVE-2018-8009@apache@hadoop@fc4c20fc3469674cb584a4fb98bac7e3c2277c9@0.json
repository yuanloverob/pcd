{
  "cve_id": "CVE-2018-8009",
  "cve_desc": "Apache Hadoop 3.1.0, 3.0.0-alpha to 3.0.2, 2.9.0 to 2.9.1, 2.8.0 to 2.8.4, 2.0.0-alpha to 2.7.6, 0.23.0 to 0.23.11 is exploitable via the zip slip vulnerability in places that accept a zip file.",
  "repo": "apache/hadoop",
  "patch_hash": "fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
  "patch_info": {
    "commit_hash": "fc4c20fc3469674cb584a4fb98bac7e3c2277c96",
    "repo": "apache/hadoop",
    "commit_url": "https://github.com/apache/hadoop/commit/fc4c20fc3469674cb584a4fb98bac7e3c2277c9",
    "files": [
      "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
    ],
    "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n\n(cherry picked from commit 745f203e577bacb35b042206db94615141fa5e6f)",
    "before_after_code_files": [
      "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
    ]
  },
  "patch_diff": {
    "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java": [
      "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:       throws IOException {",
      "618:     try (ZipInputStream zip = new ZipInputStream(inputStream)) {",
      "619:       int numOfFailedLastModifiedSet = 0;",
      "620:       for(ZipEntry entry = zip.getNextEntry();",
      "621:           entry != null;",
      "622:           entry = zip.getNextEntry()) {",
      "623:         if (!entry.isDirectory()) {",
      "624:           File file = new File(toDir, entry.getName());",
      "625:           File parent = file.getParentFile();",
      "626:           if (!parent.mkdirs() &&",
      "627:               !parent.isDirectory()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "620:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
      "626:           if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
      "627:             throw new IOException(\"expanding \" + entry.getName()",
      "628:                 + \" would create file outside of \" + toDir);",
      "629:           }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "657:     try {",
      "658:       entries = zipFile.entries();",
      "659:       while (entries.hasMoreElements()) {",
      "660:         ZipEntry entry = entries.nextElement();",
      "661:         if (!entry.isDirectory()) {",
      "662:           InputStream in = zipFile.getInputStream(entry);",
      "663:           try {",
      "664:             File file = new File(unzipDir, entry.getName());",
      "665:             if (!file.getParentFile().mkdirs()) {",
      "666:               if (!file.getParentFile().isDirectory()) {",
      "667:                 throw new IOException(\"Mkdirs failed to create \" +",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "664:       String targetDirPath = unzipDir.getCanonicalPath() + File.separator;",
      "671:             if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
      "672:               throw new IOException(\"expanding \" + entry.getName()",
      "673:                   + \" would create file outside of \" + unzipDir);",
      "674:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "945:   private static void unpackEntries(TarArchiveInputStream tis,",
      "946:       TarArchiveEntry entry, File outputDir) throws IOException {",
      "947:     if (entry.isDirectory()) {",
      "948:       File subDir = new File(outputDir, entry.getName());",
      "949:       if (!subDir.mkdirs() && !subDir.isDirectory()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "957:     String targetDirPath = outputDir.getCanonicalPath() + File.separator;",
      "958:     File outputFile = new File(outputDir, entry.getName());",
      "959:     if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {",
      "960:       throw new IOException(\"expanding \" + entry.getName()",
      "961:           + \" would create entry outside of \" + outputDir);",
      "962:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "966:       return;",
      "967:     }",
      "970:     if (!outputFile.getParentFile().exists()) {",
      "971:       if (!outputFile.getParentFile().mkdirs()) {",
      "972:         throw new IOException(\"Mkdirs failed to create tar internal dir \"",
      "",
      "[Removed Lines]",
      "969:     File outputFile = new File(outputDir, entry.getName());",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java": [
      "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: import static org.junit.Assert.assertNotEquals;",
      "24: import static org.junit.Assert.assertNull;",
      "25: import static org.junit.Assert.assertTrue;",
      "26: import static org.mockito.Mockito.mock;",
      "27: import static org.mockito.Mockito.when;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import static org.junit.Assert.fail;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38: import java.net.URISyntaxException;",
      "39: import java.net.URL;",
      "40: import java.net.UnknownHostException;",
      "41: import java.nio.file.FileSystems;",
      "42: import java.nio.file.Files;",
      "43: import java.util.ArrayList;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import java.nio.charset.StandardCharsets;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "720:     } catch (IOException ioe) {",
      "722:     }",
      "725:   @Test (timeout = 30000)",
      "",
      "[Removed Lines]",
      "723:   }",
      "",
      "[Added Lines]",
      "723:   }",
      "725:   @Test (timeout = 30000)",
      "726:   public void testUnZip2() throws IOException {",
      "727:     setupDirs();",
      "729:     final File simpleZip = new File(del, FILE);",
      "730:     OutputStream os = new FileOutputStream(simpleZip);",
      "731:     try (ZipOutputStream tos = new ZipOutputStream(os)) {",
      "733:       ZipEntry ze = new ZipEntry(\"../foo\");",
      "734:       byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);",
      "735:       ze.setSize(data.length);",
      "736:       tos.putNextEntry(ze);",
      "737:       tos.write(data);",
      "738:       tos.closeEntry();",
      "739:       tos.flush();",
      "740:       tos.finish();",
      "741:     }",
      "744:     try {",
      "745:       FileUtil.unZip(simpleZip, tmp);",
      "746:       fail(\"unZip should throw IOException.\");",
      "747:     } catch (IOException e) {",
      "748:       GenericTestUtils.assertExceptionContains(",
      "749:           \"would create file outside of\", e);",
      "750:     }",
      "751:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "745f203e577bacb35b042206db94615141fa5e6f",
      "candidate_info": {
        "commit_hash": "745f203e577bacb35b042206db94615141fa5e6f",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/745f203e577bacb35b042206db94615141fa5e6f",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:       throws IOException {",
          "618:     try (ZipInputStream zip = new ZipInputStream(inputStream)) {",
          "619:       int numOfFailedLastModifiedSet = 0;",
          "620:       for(ZipEntry entry = zip.getNextEntry();",
          "621:           entry != null;",
          "622:           entry = zip.getNextEntry()) {",
          "623:         if (!entry.isDirectory()) {",
          "624:           File file = new File(toDir, entry.getName());",
          "625:           File parent = file.getParentFile();",
          "626:           if (!parent.mkdirs() &&",
          "627:               !parent.isDirectory()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
          "626:           if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "627:             throw new IOException(\"expanding \" + entry.getName()",
          "628:                 + \" would create file outside of \" + toDir);",
          "629:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:     try {",
          "658:       entries = zipFile.entries();",
          "659:       while (entries.hasMoreElements()) {",
          "660:         ZipEntry entry = entries.nextElement();",
          "661:         if (!entry.isDirectory()) {",
          "662:           InputStream in = zipFile.getInputStream(entry);",
          "663:           try {",
          "664:             File file = new File(unzipDir, entry.getName());",
          "665:             if (!file.getParentFile().mkdirs()) {",
          "666:               if (!file.getParentFile().isDirectory()) {",
          "667:                 throw new IOException(\"Mkdirs failed to create \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:       String targetDirPath = unzipDir.getCanonicalPath() + File.separator;",
          "671:             if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "672:               throw new IOException(\"expanding \" + entry.getName()",
          "673:                   + \" would create file outside of \" + unzipDir);",
          "674:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "945:   private static void unpackEntries(TarArchiveInputStream tis,",
          "946:       TarArchiveEntry entry, File outputDir) throws IOException {",
          "947:     if (entry.isDirectory()) {",
          "948:       File subDir = new File(outputDir, entry.getName());",
          "949:       if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:     String targetDirPath = outputDir.getCanonicalPath() + File.separator;",
          "958:     File outputFile = new File(outputDir, entry.getName());",
          "959:     if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {",
          "960:       throw new IOException(\"expanding \" + entry.getName()",
          "961:           + \" would create entry outside of \" + outputDir);",
          "962:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "966:       return;",
          "967:     }",
          "970:     if (!outputFile.getParentFile().exists()) {",
          "971:       if (!outputFile.getParentFile().mkdirs()) {",
          "972:         throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "",
          "[Removed Lines]",
          "969:     File outputFile = new File(outputDir, entry.getName());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import static org.junit.Assert.assertNotEquals;",
          "24: import static org.junit.Assert.assertNull;",
          "25: import static org.junit.Assert.assertTrue;",
          "26: import static org.mockito.Mockito.mock;",
          "27: import static org.mockito.Mockito.when;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import static org.junit.Assert.fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import java.net.URISyntaxException;",
          "39: import java.net.URL;",
          "40: import java.net.UnknownHostException;",
          "41: import java.nio.file.FileSystems;",
          "42: import java.nio.file.Files;",
          "43: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:     } catch (IOException ioe) {",
          "722:     }",
          "725:   @Test (timeout = 30000)",
          "",
          "[Removed Lines]",
          "723:   }",
          "",
          "[Added Lines]",
          "723:   }",
          "725:   @Test (timeout = 30000)",
          "726:   public void testUnZip2() throws IOException {",
          "727:     setupDirs();",
          "729:     final File simpleZip = new File(del, FILE);",
          "730:     OutputStream os = new FileOutputStream(simpleZip);",
          "731:     try (ZipOutputStream tos = new ZipOutputStream(os)) {",
          "733:       ZipEntry ze = new ZipEntry(\"../foo\");",
          "734:       byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);",
          "735:       ze.setSize(data.length);",
          "736:       tos.putNextEntry(ze);",
          "737:       tos.write(data);",
          "738:       tos.closeEntry();",
          "739:       tos.flush();",
          "740:       tos.finish();",
          "741:     }",
          "744:     try {",
          "745:       FileUtil.unZip(simpleZip, tmp);",
          "746:       fail(\"unZip should throw IOException.\");",
          "747:     } catch (IOException e) {",
          "748:       GenericTestUtils.assertExceptionContains(",
          "749:           \"would create file outside of\", e);",
          "750:     }",
          "751:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cedc28d4ab2a27ba47e15ab2711218d96ec88d23",
      "candidate_info": {
        "commit_hash": "cedc28d4ab2a27ba47e15ab2711218d96ec88d23",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/cedc28d4ab2a27ba47e15ab2711218d96ec88d23",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:   public static void unZip(File inFile, File unzipDir) throws IOException {",
          "621:     Enumeration<? extends ZipEntry> entries;",
          "622:     ZipFile zipFile = new ZipFile(inFile);",
          "624:     try {",
          "625:       entries = zipFile.entries();",
          "626:       while (entries.hasMoreElements()) {",
          "627:         ZipEntry entry = entries.nextElement();",
          "628:         if (!entry.isDirectory()) {",
          "629:           InputStream in = zipFile.getInputStream(entry);",
          "630:           try {",
          "633:               if (!file.getParentFile().isDirectory()) {",
          "634:                 throw new IOException(\"Mkdirs failed to create \" +",
          "635:                                       file.getParentFile().toString());",
          "",
          "[Removed Lines]",
          "631:             File file = new File(unzipDir, entry.getName());",
          "632:             if (!file.getParentFile().mkdirs()) {",
          "",
          "[Added Lines]",
          "623:     String targetDirPath = unzipDir.getCanonicalPath() + File.separator;",
          "630:           File file = new File(unzipDir, entry.getName());",
          "631:           if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "632:             throw new IOException(\"expanding \" + entry.getName()",
          "633:                 + \" would create file outside of \" + unzipDir);",
          "634:           }",
          "637:             if (!file.getParentFile().mkdirs()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:   private static void unpackEntries(TarArchiveInputStream tis,",
          "740:       TarArchiveEntry entry, File outputDir) throws IOException {",
          "741:     if (entry.isDirectory()) {",
          "742:       File subDir = new File(outputDir, entry.getName());",
          "743:       if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:     String targetDirPath = outputDir.getCanonicalPath() + File.separator;",
          "747:     File outputFile = new File(outputDir, entry.getName());",
          "748:     if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {",
          "749:       throw new IOException(\"expanding \" + entry.getName()",
          "750:           + \" would create entry outside of \" + outputDir);",
          "751:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "752:       return;",
          "753:     }",
          "756:     if (!outputFile.getParentFile().exists()) {",
          "757:       if (!outputFile.getParentFile().mkdirs()) {",
          "758:         throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "",
          "[Removed Lines]",
          "755:     File outputFile = new File(outputDir, entry.getName());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import java.net.URISyntaxException;",
          "39: import java.net.URL;",
          "40: import java.net.UnknownHostException;",
          "41: import java.util.ArrayList;",
          "42: import java.util.Arrays;",
          "43: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775:     } catch (IOException ioe) {",
          "777:     }",
          "780:   @Test (timeout = 30000)",
          "",
          "[Removed Lines]",
          "778:   }",
          "",
          "[Added Lines]",
          "777:   }",
          "779:   @Test (timeout = 30000)",
          "780:   public void testUnZip2() throws IOException {",
          "781:     setupDirs();",
          "783:     final File simpleZip = new File(del, FILE);",
          "784:     OutputStream os = new FileOutputStream(simpleZip);",
          "785:     try (ZipOutputStream tos = new ZipOutputStream(os)) {",
          "787:       ZipEntry ze = new ZipEntry(\"../foo\");",
          "788:       byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);",
          "789:       ze.setSize(data.length);",
          "790:       tos.putNextEntry(ze);",
          "791:       tos.write(data);",
          "792:       tos.closeEntry();",
          "793:       tos.flush();",
          "794:       tos.finish();",
          "795:     }",
          "798:     try {",
          "799:       FileUtil.unZip(simpleZip, tmp);",
          "800:       Assert.fail(\"unZip should throw IOException.\");",
          "801:     } catch (IOException e) {",
          "802:       GenericTestUtils.assertExceptionContains(",
          "803:           \"would create file outside of\", e);",
          "804:     }",
          "805:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd98d4e77cf9f7b2f4b1afb4d5e5bad0f6b2fde3",
      "candidate_info": {
        "commit_hash": "bd98d4e77cf9f7b2f4b1afb4d5e5bad0f6b2fde3",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/bd98d4e77cf9f7b2f4b1afb4d5e5bad0f6b2fde3",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:   public static void unZip(File inFile, File unzipDir) throws IOException {",
          "586:     Enumeration<? extends ZipEntry> entries;",
          "587:     ZipFile zipFile = new ZipFile(inFile);",
          "589:     try {",
          "590:       entries = zipFile.entries();",
          "591:       while (entries.hasMoreElements()) {",
          "592:         ZipEntry entry = entries.nextElement();",
          "593:         if (!entry.isDirectory()) {",
          "594:           InputStream in = zipFile.getInputStream(entry);",
          "595:           try {",
          "597:             if (!file.getParentFile().mkdirs()) {",
          "598:               if (!file.getParentFile().isDirectory()) {",
          "599:                 throw new IOException(\"Mkdirs failed to create \" +",
          "",
          "[Removed Lines]",
          "596:             File file = new File(unzipDir, entry.getName());",
          "",
          "[Added Lines]",
          "588:     String targetDirPath = unzipDir.getCanonicalPath() + File.separator;",
          "595:           File file = new File(unzipDir, entry.getName());",
          "596:           if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "597:             throw new IOException(\"expanding \" + entry.getName()",
          "598:                 + \" would create file outside of \" + unzipDir);",
          "599:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "704:   private static void unpackEntries(TarArchiveInputStream tis,",
          "705:       TarArchiveEntry entry, File outputDir) throws IOException {",
          "706:     if (entry.isDirectory()) {",
          "707:       File subDir = new File(outputDir, entry.getName());",
          "708:       if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "711:     String targetDirPath = outputDir.getCanonicalPath() + File.separator;",
          "712:     File outputFile = new File(outputDir, entry.getName());",
          "713:     if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {",
          "714:       throw new IOException(\"expanding \" + entry.getName()",
          "715:           + \" would create entry outside of \" + outputDir);",
          "716:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "717:       return;",
          "718:     }",
          "721:     if (!outputFile.getParentFile().exists()) {",
          "722:       if (!outputFile.getParentFile().mkdirs()) {",
          "723:         throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "",
          "[Removed Lines]",
          "720:     File outputFile = new File(outputDir, entry.getName());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.net.URISyntaxException;",
          "38: import java.net.URL;",
          "39: import java.net.UnknownHostException;",
          "40: import java.util.ArrayList;",
          "41: import java.util.Arrays;",
          "42: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:     } catch (IOException ioe) {",
          "716:     }",
          "719:   @Test (timeout = 30000)",
          "",
          "[Removed Lines]",
          "717:   }",
          "",
          "[Added Lines]",
          "716:   }",
          "718:   @Test (timeout = 30000)",
          "719:   public void testUnZip2() throws IOException {",
          "720:     setupDirs();",
          "722:     final File simpleZip = new File(del, FILE);",
          "723:     OutputStream os = new FileOutputStream(simpleZip);",
          "724:     try (ZipOutputStream tos = new ZipOutputStream(os)) {",
          "726:       ZipEntry ze = new ZipEntry(\"../foo\");",
          "727:       byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);",
          "728:       ze.setSize(data.length);",
          "729:       tos.putNextEntry(ze);",
          "730:       tos.write(data);",
          "731:       tos.closeEntry();",
          "732:       tos.flush();",
          "733:       tos.finish();",
          "734:     }",
          "737:     try {",
          "738:       FileUtil.unZip(simpleZip, tmp);",
          "739:       Assert.fail(\"unZip should throw IOException.\");",
          "740:     } catch (IOException e) {",
          "741:       GenericTestUtils.assertExceptionContains(",
          "742:           \"would create file outside of\", e);",
          "743:     }",
          "744:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1373e3d8ad60e4da721a292912cb69243bfdf470",
      "candidate_info": {
        "commit_hash": "1373e3d8ad60e4da721a292912cb69243bfdf470",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/1373e3d8ad60e4da721a292912cb69243bfdf470",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n\n(cherry picked from commit cedc28d4ab2a27ba47e15ab2711218d96ec88d23)",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:   public static void unZip(File inFile, File unzipDir) throws IOException {",
          "621:     Enumeration<? extends ZipEntry> entries;",
          "622:     ZipFile zipFile = new ZipFile(inFile);",
          "624:     try {",
          "625:       entries = zipFile.entries();",
          "626:       while (entries.hasMoreElements()) {",
          "627:         ZipEntry entry = entries.nextElement();",
          "628:         if (!entry.isDirectory()) {",
          "629:           InputStream in = zipFile.getInputStream(entry);",
          "630:           try {",
          "633:               if (!file.getParentFile().isDirectory()) {",
          "634:                 throw new IOException(\"Mkdirs failed to create \" +",
          "635:                                       file.getParentFile().toString());",
          "",
          "[Removed Lines]",
          "631:             File file = new File(unzipDir, entry.getName());",
          "632:             if (!file.getParentFile().mkdirs()) {",
          "",
          "[Added Lines]",
          "623:     String targetDirPath = unzipDir.getCanonicalPath() + File.separator;",
          "630:           File file = new File(unzipDir, entry.getName());",
          "631:           if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "632:             throw new IOException(\"expanding \" + entry.getName()",
          "633:                 + \" would create file outside of \" + unzipDir);",
          "634:           }",
          "637:             if (!file.getParentFile().mkdirs()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:   private static void unpackEntries(TarArchiveInputStream tis,",
          "740:       TarArchiveEntry entry, File outputDir) throws IOException {",
          "741:     if (entry.isDirectory()) {",
          "742:       File subDir = new File(outputDir, entry.getName());",
          "743:       if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:     String targetDirPath = outputDir.getCanonicalPath() + File.separator;",
          "747:     File outputFile = new File(outputDir, entry.getName());",
          "748:     if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {",
          "749:       throw new IOException(\"expanding \" + entry.getName()",
          "750:           + \" would create entry outside of \" + outputDir);",
          "751:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "752:       return;",
          "753:     }",
          "756:     if (!outputFile.getParentFile().exists()) {",
          "757:       if (!outputFile.getParentFile().mkdirs()) {",
          "758:         throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "",
          "[Removed Lines]",
          "755:     File outputFile = new File(outputDir, entry.getName());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import java.net.URISyntaxException;",
          "39: import java.net.URL;",
          "40: import java.net.UnknownHostException;",
          "41: import java.util.ArrayList;",
          "42: import java.util.Arrays;",
          "43: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775:     } catch (IOException ioe) {",
          "777:     }",
          "780:   @Test (timeout = 30000)",
          "",
          "[Removed Lines]",
          "778:   }",
          "",
          "[Added Lines]",
          "777:   }",
          "779:   @Test (timeout = 30000)",
          "780:   public void testUnZip2() throws IOException {",
          "781:     setupDirs();",
          "783:     final File simpleZip = new File(del, FILE);",
          "784:     OutputStream os = new FileOutputStream(simpleZip);",
          "785:     try (ZipOutputStream tos = new ZipOutputStream(os)) {",
          "787:       ZipEntry ze = new ZipEntry(\"../foo\");",
          "788:       byte[] data = \"some-content\".getBytes(StandardCharsets.UTF_8);",
          "789:       ze.setSize(data.length);",
          "790:       tos.putNextEntry(ze);",
          "791:       tos.write(data);",
          "792:       tos.closeEntry();",
          "793:       tos.flush();",
          "794:       tos.finish();",
          "795:     }",
          "798:     try {",
          "799:       FileUtil.unZip(simpleZip, tmp);",
          "800:       Assert.fail(\"unZip should throw IOException.\");",
          "801:     } catch (IOException e) {",
          "802:       GenericTestUtils.assertExceptionContains(",
          "803:           \"would create file outside of\", e);",
          "804:     }",
          "805:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}