{
  "cve_id": "CVE-2024-48963",
  "cve_desc": "The package Snyk CLI before 1.1294.0 is vulnerable to Code Injection when scanning an untrusted PHP project. The vulnerability can be triggered if Snyk test is run inside the untrusted project due to the improper handling of the current working directory name. Snyk recommends only scanning trusted projects.",
  "repo": "snyk/snyk-php-plugin",
  "patch_hash": "9189f093b94f9ce51672f6919ffbc98171fd66d4",
  "patch_info": {
    "commit_hash": "9189f093b94f9ce51672f6919ffbc98171fd66d4",
    "repo": "snyk/snyk-php-plugin",
    "commit_url": "https://github.com/snyk/snyk-php-plugin/commit/9189f093b94f9ce51672f6919ffbc98171fd66d4",
    "files": [
      "lib/composer-cmds.ts",
      "lib/system-deps.ts"
    ],
    "message": "feat: pass command and args into spawn separately",
    "before_after_code_files": [
      "lib/composer-cmds.ts||lib/composer-cmds.ts",
      "lib/system-deps.ts||lib/system-deps.ts"
    ]
  },
  "patch_diff": {
    "lib/composer-cmds.ts||lib/composer-cmds.ts": [
      "File: lib/composer-cmds.ts -> lib/composer-cmds.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import * as path from 'path';",
      "2: import * as childProcess from 'child_process';",
      "10: }",
      "15: }",
      "",
      "[Removed Lines]",
      "4: export const composerCmd = 'composer --version';",
      "5: export const composerShowCmd = 'composer show -p';",
      "6: export const pharCmd = `php ${path.resolve(path.resolve() + '/composer.phar')} show -p --format=json`;",
      "8: export function cmdReturnsOk(cmd): boolean {",
      "9:   return cmd && childProcess.spawnSync(cmd, { shell: false }).status === 0;",
      "13: export function execWithResult(cmd, basePath): string {",
      "14:   return childProcess.spawnSync(cmd, { cwd: basePath, shell: false }).toString();",
      "",
      "[Added Lines]",
      "3: export const composerCmd = {command: 'composer', args: ['--version']};",
      "4: export const composerShowCmd = {command: 'composer', args: ['show', '-p']};",
      "5: export const pharCmd = {command: `php`, args:[`${path.resolve(path.resolve() + '/composer.phar')}`, 'show', '-p', '--format=json']",
      "6: };",
      "8: export function cmdReturnsOk(cmd, args: string[] = []): boolean {",
      "9:   const spawnOptions: childProcess.SpawnOptions = { shell: false };",
      "10:   return cmd && childProcess.spawnSync(cmd, args,spawnOptions).status === 0;",
      "14: export function execWithResult(cmd, basePath, args: string[] = []): string {",
      "15:   const spawnOptions: childProcess.SpawnOptions ={ cwd: basePath, shell: false }",
      "16:   return childProcess.spawnSync(cmd, args, spawnOptions).toString();",
      "",
      "---------------"
    ],
    "lib/system-deps.ts||lib/system-deps.ts": [
      "File: lib/system-deps.ts -> lib/system-deps.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: }",
      "11: export function systemDeps(basePath: string, options: PhpOptions): SystemPackages {",
      "13:   const composerPharOk = isSet(options.composerPharIsFine) ?",
      "16:   let finalVersionsObj = {};",
      "",
      "[Removed Lines]",
      "12:   const composerOk = isSet(options.composerIsFine) ? options.composerIsFine : cmds.cmdReturnsOk(cmds.composerCmd);",
      "14:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.pharCmd);",
      "",
      "[Added Lines]",
      "12:   const composerOk = isSet(options.composerIsFine) ? options.composerIsFine : cmds.cmdReturnsOk(cmds.composerCmd.command,cmds.composerCmd.args);",
      "14:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.pharCmd.command, cmds.pharCmd.args);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20:     finalVersionsObj = options.systemVersions;",
      "21:   } else if (composerOk) {",
      "23:     lines.forEach((line) => {",
      "24:       const [part1, part2] = line.split(/\\s+/);",
      "25:       if (part2) {",
      "",
      "[Removed Lines]",
      "22:     const lines = cmds.execWithResult(cmds.composerShowCmd, basePath).split(os.EOL);",
      "",
      "[Added Lines]",
      "22:     const lines = cmds.execWithResult(cmds.composerShowCmd.command, basePath, cmds.composerShowCmd.args).split(os.EOL);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "27:       }",
      "28:     });",
      "29:   } else if (composerPharOk) {",
      "31:     const versionsObj = JSON.parse(output).platform;",
      "32:     versionsObj.forEach(({name, version}) => {",
      "33:       finalVersionsObj[name] = version;",
      "",
      "[Removed Lines]",
      "30:     const output = cmds.execWithResult(cmds.pharCmd, basePath);",
      "",
      "[Added Lines]",
      "30:     const output = cmds.execWithResult(cmds.pharCmd.command, basePath, cmds.pharCmd.args);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d64ae5ee6f5fb48b12732ac63b64f9469dc3569",
      "candidate_info": {
        "commit_hash": "0d64ae5ee6f5fb48b12732ac63b64f9469dc3569",
        "repo": "snyk/snyk-php-plugin",
        "commit_url": "https://github.com/snyk/snyk-php-plugin/commit/0d64ae5ee6f5fb48b12732ac63b64f9469dc3569",
        "files": [
          "lib/composer-cmds.ts"
        ],
        "message": "feat: replace execSync with spawnSync",
        "before_after_code_files": [
          "lib/composer-cmds.ts||lib/composer-cmds.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts"
          ],
          "candidate": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/composer-cmds.ts||lib/composer-cmds.ts": [
          "File: lib/composer-cmds.ts -> lib/composer-cmds.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: export const pharCmd = `php ${path.resolve(path.resolve() + '/composer.phar')} show -p --format=json`;",
          "8: export function cmdReturnsOk(cmd): boolean {",
          "10: }",
          "13: export function execWithResult(cmd, basePath): string {",
          "15: }",
          "",
          "[Removed Lines]",
          "9:   return cmd && childProcess.spawnSync(cmd, { shell: true }).status === 0;",
          "14:   return childProcess.execSync(cmd, { cwd: basePath }).toString();",
          "",
          "[Added Lines]",
          "9:   return cmd && childProcess.spawnSync(cmd, { shell: false }).status === 0;",
          "14:   return childProcess.spawnSync(cmd, { cwd: basePath, shell: false }).toString();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19aa402feb2e544d8c786a673d9c7f7977c491f0",
      "candidate_info": {
        "commit_hash": "19aa402feb2e544d8c786a673d9c7f7977c491f0",
        "repo": "snyk/snyk-php-plugin",
        "commit_url": "https://github.com/snyk/snyk-php-plugin/commit/19aa402feb2e544d8c786a673d9c7f7977c491f0",
        "files": [
          "lib/composer-cmds.ts",
          "lib/system-deps.ts"
        ],
        "message": "feat: [OSM-2746] Removed support for non-JSON platform deps parsing",
        "before_after_code_files": [
          "lib/composer-cmds.ts||lib/composer-cmds.ts",
          "lib/system-deps.ts||lib/system-deps.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ],
          "candidate": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/composer-cmds.ts||lib/composer-cmds.ts": [
          "File: lib/composer-cmds.ts -> lib/composer-cmds.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as path from 'path';",
          "2: import * as childProcess from 'child_process';",
          "15: function cleanUpComposerWarnings(composerOutput: string): string {",
          "17:   const lines = composerOutput.split('\\n');",
          "20:   return lines.slice(jsonStartIndex).join('\\n');",
          "21: }",
          "",
          "[Removed Lines]",
          "4: export const composerVersionCmd = {command: 'composer', args: ['--version']};",
          "5: export const composerShowCmd = {command: 'composer', args: ['show', '-p']};",
          "6: export const pharVersionCmd = {",
          "7:   command: `php`,",
          "8:   args: [`${path.resolve(path.resolve() + '/composer.phar')}`, '--version']",
          "9: };",
          "10: export const pharShowCmd = {",
          "11:   command: `php`,",
          "12:   args: [`${path.resolve(path.resolve() + '/composer.phar')}`, 'show', '-p', '--format=json']",
          "13: };",
          "18:   const jsonStartIndex = lines.findIndex((line) => line.length > 0 && !line.startsWith('Deprecated:'));",
          "",
          "[Added Lines]",
          "4: export const composerCmd = {command: 'composer', args: []};",
          "5: export const composerPharCmd = {command: 'php', args: [`${path.resolve(path.resolve() + '/composer.phar')}`]};",
          "7: export const versionArgs = {args: ['--version']};",
          "8: export const showArgs = {args: ['show', '-p', '--format=json']};",
          "13:   const jsonStartIndex = lines.findIndex((line) => line.startsWith('{'));",
          "",
          "---------------"
        ],
        "lib/system-deps.ts||lib/system-deps.ts": [
          "File: lib/system-deps.ts -> lib/system-deps.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import * as cmds from './composer-cmds';",
          "8:   return typeof variable !== 'undefined';",
          "9: }",
          "11: export function systemDeps(basePath: string, options: PhpOptions): SystemPackages {",
          "12:   const composerOk = isSet(options.composerIsFine) ?",
          "14:   const composerPharOk = isSet(options.composerPharIsFine) ?",
          "17:   let finalVersionsObj = {};",
          "19:   if (options.systemVersions && (Object.keys(options.systemVersions).length > 0)) {",
          "21:     finalVersionsObj = options.systemVersions;",
          "32:     const versionsObj = JSON.parse(output).platform;",
          "34:     versionsObj.forEach(({name, version}) => {",
          "",
          "[Removed Lines]",
          "1: import * as os from 'os';",
          "2: import { SystemPackages } from '@snyk/composer-lockfile-parser';",
          "5: import { PhpOptions } from './types';",
          "7: function isSet(variable): boolean {",
          "13:     options.composerIsFine : cmds.cmdReturnsOk(cmds.composerVersionCmd.command, cmds.composerVersionCmd.args);",
          "15:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.pharVersionCmd.command, cmds.pharVersionCmd.args);",
          "22:   } else if (composerOk) {",
          "23:     const lines = cmds.execWithResult(cmds.composerShowCmd.command, basePath, cmds.composerShowCmd.args).split(os.EOL);",
          "24:     lines.forEach((line) => {",
          "25:       const [part1, part2] = line.split(/\\s+/);",
          "26:       if (part2) {",
          "27:         finalVersionsObj[part1] = part2;",
          "28:       }",
          "29:     });",
          "30:   } else if (composerPharOk) {",
          "31:     const output = cmds.execWithResult(cmds.pharShowCmd.command, basePath, cmds.pharShowCmd.args);",
          "",
          "[Added Lines]",
          "1: import {SystemPackages} from '@snyk/composer-lockfile-parser';",
          "4: import {PhpOptions} from './types';",
          "6: function isSet(variable: boolean | undefined): boolean {",
          "12:     options.composerIsFine : cmds.cmdReturnsOk(cmds.composerCmd.command, [...cmds.composerCmd.args, ...cmds.versionArgs.args]);",
          "14:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.composerPharCmd.command, [...cmds.composerPharCmd.args, ...cmds.versionArgs.args]);",
          "21:   } else if (composerOk || composerPharOk) {",
          "22:     const composer = composerOk ? cmds.composerCmd : cmds.composerPharCmd;",
          "24:     const output = cmds.execWithResult(composer.command, basePath, [...composer.args, ...cmds.showArgs.args]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1aae074426877a3d05e152dc6fbb8226a3e9961",
      "candidate_info": {
        "commit_hash": "e1aae074426877a3d05e152dc6fbb8226a3e9961",
        "repo": "snyk/snyk-php-plugin",
        "commit_url": "https://github.com/snyk/snyk-php-plugin/commit/e1aae074426877a3d05e152dc6fbb8226a3e9961",
        "files": [
          "lib/composer-cmds.ts",
          "lib/system-deps.ts"
        ],
        "message": "feat: [OSM-2746] Replaced class with objects",
        "before_after_code_files": [
          "lib/composer-cmds.ts||lib/composer-cmds.ts",
          "lib/system-deps.ts||lib/system-deps.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ],
          "candidate": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/composer-cmds.ts||lib/composer-cmds.ts": [
          "File: lib/composer-cmds.ts -> lib/composer-cmds.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as path from 'path';",
          "2: import * as childProcess from 'child_process';",
          "13: }",
          "33: }",
          "35: function cleanUpComposerWarnings(composerOutput: string): string {",
          "37:   const lines = composerOutput.split('\\n');",
          "",
          "[Removed Lines]",
          "4: class Command {",
          "5:   protected constructor(",
          "6:     readonly command: string,",
          "7:     readonly args: string[],",
          "8:   ) {}",
          "10:   protected withAdditionalArgs(args: string[]): Command {",
          "11:     return new Command(this.command, [...this.args, ...args]);",
          "12:   }",
          "15: export class Composer extends Command {",
          "16:   public static global(): Composer {",
          "17:     return new Composer('composer', []);",
          "18:   }",
          "20:   public static local(): Composer {",
          "21:     return new Composer('php', [",
          "22:       `${path.resolve(path.resolve() + '/composer.phar')}`,",
          "23:     ]);",
          "24:   }",
          "26:   version(): Command {",
          "27:     return this.withAdditionalArgs(['--version']);",
          "28:   }",
          "30:   listPlatformDeps(): Command {",
          "31:     return this.withAdditionalArgs(['show', '-p', '--format=json']);",
          "32:   }",
          "",
          "[Added Lines]",
          "4: type Command = {",
          "5:   command: string;",
          "6:   args: string[];",
          "7: };",
          "9: function versionCmd(this: Command): Command {",
          "10:   return {",
          "11:     command: this.command,",
          "12:     args: [...this.args, '--version'],",
          "13:   };",
          "16: function listPlatformDepsCmd(this: Command): Command {",
          "17:   return {",
          "18:     command: this.command,",
          "19:     args: [...this.args, 'show', '-p', '--format=json'],",
          "20:   };",
          "23: export const globalComposer = {",
          "24:   command: 'composer',",
          "25:   args: [],",
          "26:   version: versionCmd,",
          "27:   listPlatformDeps: listPlatformDepsCmd,",
          "28: };",
          "29: export const localComposer = {",
          "30:   command: 'php',",
          "31:   args: [`${path.resolve(path.resolve() + '/composer.phar')}`],",
          "32:   version: versionCmd,",
          "33:   listPlatformDeps: listPlatformDepsCmd,",
          "34: };",
          "",
          "---------------"
        ],
        "lib/system-deps.ts||lib/system-deps.ts": [
          "File: lib/system-deps.ts -> lib/system-deps.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   options: PhpOptions,",
          "9: ): SystemPackages {",
          "10:   const composerOk =",
          "13:   const composerPharOk =",
          "14:     options.composerPharIsFine ??",
          "17:   let finalVersionsObj = {};",
          "",
          "[Removed Lines]",
          "11:     options.composerIsFine ??",
          "12:     cmds.cmdReturnsOk(cmds.Composer.global().version());",
          "15:     cmds.cmdReturnsOk(cmds.Composer.local().version());",
          "",
          "[Added Lines]",
          "11:     options.composerIsFine ?? cmds.cmdReturnsOk(cmds.globalComposer.version());",
          "14:     cmds.cmdReturnsOk(cmds.localComposer.version());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     finalVersionsObj = options.systemVersions;",
          "25:   } else if (composerOk || composerPharOk) {",
          "30:     const output = cmds.execWithResult(composer.listPlatformDeps(), basePath);",
          "31:     const versionsObj = JSON.parse(output).platform;",
          "",
          "[Removed Lines]",
          "26:     const composer = composerOk",
          "27:       ? cmds.Composer.global()",
          "28:       : cmds.Composer.local();",
          "",
          "[Added Lines]",
          "25:     const composer = composerOk ? cmds.globalComposer : cmds.localComposer;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bf98b88c547ce1ef2db3e9b171243f3756aa8ac",
      "candidate_info": {
        "commit_hash": "3bf98b88c547ce1ef2db3e9b171243f3756aa8ac",
        "repo": "snyk/snyk-php-plugin",
        "commit_url": "https://github.com/snyk/snyk-php-plugin/commit/3bf98b88c547ce1ef2db3e9b171243f3756aa8ac",
        "files": [
          "lib/composer-cmds.ts",
          "lib/system-deps.ts"
        ],
        "message": "fix(OSM-2584): use spawnSync result stdout on success or throw an error",
        "before_after_code_files": [
          "lib/composer-cmds.ts||lib/composer-cmds.ts",
          "lib/system-deps.ts||lib/system-deps.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ],
          "candidate": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/composer-cmds.ts||lib/composer-cmds.ts": [
          "File: lib/composer-cmds.ts -> lib/composer-cmds.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as path from 'path';",
          "2: import * as childProcess from 'child_process';",
          "4: export const composerShowCmd = {command: 'composer', args: ['show', '-p']};",
          "6: };",
          "8: export function cmdReturnsOk(cmd, args: string[] = []): boolean {",
          "9:   const spawnOptions: childProcess.SpawnOptions = { shell: false };",
          "11: }",
          "14: export function execWithResult(cmd, basePath, args: string[] = []): string {",
          "17: }",
          "",
          "[Removed Lines]",
          "3: export const composerCmd = {command: 'composer', args: ['--version']};",
          "5: export const pharCmd = {command: `php`, args:[`${path.resolve(path.resolve() + '/composer.phar')}`, 'show', '-p', '--format=json']",
          "10:   return cmd && childProcess.spawnSync(cmd, args,spawnOptions).status === 0;",
          "15:   const spawnOptions: childProcess.SpawnOptions ={ cwd: basePath, shell: false }",
          "16:   return childProcess.spawnSync(cmd, args, spawnOptions).toString();",
          "",
          "[Added Lines]",
          "4: export const composerVersionCmd = {command: 'composer', args: ['--version']};",
          "6: export const pharVersionCmd = {",
          "7:   command: `php`,",
          "8:   args: [`${path.resolve(path.resolve() + '/composer.phar')}`, '--version']",
          "9: };",
          "10: export const pharShowCmd = {",
          "11:   command: `php`, args: [`${path.resolve(path.resolve() + '/composer.phar')}`, 'show', '-p', '--format=json']",
          "16:   return cmd && childProcess.spawnSync(cmd, args, spawnOptions).status === 0;",
          "21:   const spawnOptions: childProcess.SpawnOptions = { cwd: basePath, shell: false }",
          "22:   const execResult = childProcess.spawnSync(cmd, args, spawnOptions);",
          "23:   if (execResult.status !== 0) {",
          "24:     throw execResult;",
          "25:   }",
          "26:   return execResult.stdout.toString();",
          "",
          "---------------"
        ],
        "lib/system-deps.ts||lib/system-deps.ts": [
          "File: lib/system-deps.ts -> lib/system-deps.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: }",
          "11: export function systemDeps(basePath: string, options: PhpOptions): SystemPackages {",
          "13:   const composerPharOk = isSet(options.composerPharIsFine) ?",
          "16:   let finalVersionsObj = {};",
          "",
          "[Removed Lines]",
          "12:   const composerOk = isSet(options.composerIsFine) ? options.composerIsFine : cmds.cmdReturnsOk(cmds.composerCmd.command,cmds.composerCmd.args);",
          "14:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.pharCmd.command, cmds.pharCmd.args);",
          "",
          "[Added Lines]",
          "12:   const composerOk = isSet(options.composerIsFine) ?",
          "13:     options.composerIsFine : cmds.cmdReturnsOk(cmds.composerVersionCmd.command, cmds.composerVersionCmd.args);",
          "15:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.pharVersionCmd.command, cmds.pharVersionCmd.args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:       }",
          "28:     });",
          "29:   } else if (composerPharOk) {",
          "31:     const versionsObj = JSON.parse(output).platform;",
          "32:     versionsObj.forEach(({name, version}) => {",
          "33:       finalVersionsObj[name] = version;",
          "34:     });",
          "",
          "[Removed Lines]",
          "30:     const output = cmds.execWithResult(cmds.pharCmd.command, basePath, cmds.pharCmd.args);",
          "",
          "[Added Lines]",
          "31:     const output = cmds.execWithResult(cmds.pharShowCmd.command, basePath, cmds.pharShowCmd.args);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c88cc6bd9ae5bac4421278b44ea3551c19b0619",
      "candidate_info": {
        "commit_hash": "5c88cc6bd9ae5bac4421278b44ea3551c19b0619",
        "repo": "snyk/snyk-php-plugin",
        "commit_url": "https://github.com/snyk/snyk-php-plugin/commit/5c88cc6bd9ae5bac4421278b44ea3551c19b0619",
        "files": [
          "lib/composer-cmds.ts",
          "lib/system-deps.ts",
          "package.json"
        ],
        "message": "feat: [OSM-2746] Improved composer command handling",
        "before_after_code_files": [
          "lib/composer-cmds.ts||lib/composer-cmds.ts",
          "lib/system-deps.ts||lib/system-deps.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ],
          "candidate": [
            "lib/composer-cmds.ts||lib/composer-cmds.ts",
            "lib/system-deps.ts||lib/system-deps.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/composer-cmds.ts||lib/composer-cmds.ts": [
          "File: lib/composer-cmds.ts -> lib/composer-cmds.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as path from 'path';",
          "2: import * as childProcess from 'child_process';",
          "10: function cleanUpComposerWarnings(composerOutput: string): string {",
          "",
          "[Removed Lines]",
          "4: export const composerCmd = {command: 'composer', args: []};",
          "5: export const composerPharCmd = {command: 'php', args: [`${path.resolve(path.resolve() + '/composer.phar')}`]};",
          "7: export const versionArgs = {args: ['--version']};",
          "8: export const showArgs = {args: ['show', '-p', '--format=json']};",
          "",
          "[Added Lines]",
          "4: class Command {",
          "5:   protected constructor(readonly command: string, readonly args: string[]) {",
          "6:   }",
          "8:   protected withAdditionalArgs(args: string[]): Command {",
          "9:     return new Command(this.command, [...this.args, ...args]);",
          "10:   }",
          "11: }",
          "13: export class Composer extends Command {",
          "14:   public static global(): Composer {",
          "15:     return new Composer('composer', []);",
          "16:   }",
          "18:   public static local(): Composer {",
          "19:     return new Composer('php', [`${path.resolve(path.resolve() + '/composer.phar')}`]);",
          "20:   }",
          "22:   version(): Command {",
          "23:     return this.withAdditionalArgs(['--version']);",
          "24:   }",
          "26:   listPlatformDeps(): Command {",
          "27:     return this.withAdditionalArgs(['show', '-p', '--format=json']);",
          "28:   }",
          "29: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   return lines.slice(jsonStartIndex).join('\\n');",
          "16: }",
          "19:   const spawnOptions: childProcess.SpawnOptions = {shell: false};",
          "21: }",
          "25:   const spawnOptions: childProcess.SpawnOptions = {cwd: basePath, shell: false}",
          "29:   if (execResult.status !== 0) {",
          "",
          "[Removed Lines]",
          "18: export function cmdReturnsOk(cmd: string, args: string[] = []): boolean {",
          "20:   return !!cmd && childProcess.spawnSync(cmd, args, spawnOptions).status === 0;",
          "24: export function execWithResult(cmd: string, basePath: string, args: string[] = []): string {",
          "26:   const execResult = childProcess.spawnSync(cmd, args, spawnOptions);",
          "",
          "[Added Lines]",
          "39: export function cmdReturnsOk(cmd: Command): boolean {",
          "41:   return !!cmd && childProcess.spawnSync(cmd.command, cmd.args, spawnOptions).status === 0;",
          "45: export function execWithResult(cmd: Command, basePath: string): string {",
          "47:   const execResult = childProcess.spawnSync(cmd.command, cmd.args, spawnOptions);",
          "",
          "---------------"
        ],
        "lib/system-deps.ts||lib/system-deps.ts": [
          "File: lib/system-deps.ts -> lib/system-deps.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import * as cmds from './composer-cmds';",
          "4: import {PhpOptions} from './types';",
          "10: export function systemDeps(basePath: string, options: PhpOptions): SystemPackages {",
          "16:   let finalVersionsObj = {};",
          "",
          "[Removed Lines]",
          "6: function isSet(variable: boolean | undefined): boolean {",
          "7:   return typeof variable !== 'undefined';",
          "8: }",
          "11:   const composerOk = isSet(options.composerIsFine) ?",
          "12:     options.composerIsFine : cmds.cmdReturnsOk(cmds.composerCmd.command, [...cmds.composerCmd.args, ...cmds.versionArgs.args]);",
          "13:   const composerPharOk = isSet(options.composerPharIsFine) ?",
          "14:     options.composerPharIsFine : cmds.cmdReturnsOk(cmds.composerPharCmd.command, [...cmds.composerPharCmd.args, ...cmds.versionArgs.args]);",
          "",
          "[Added Lines]",
          "7:   const composerOk = options.composerIsFine ?? cmds.cmdReturnsOk(cmds.Composer.global().version());",
          "8:   const composerPharOk = options.composerPharIsFine ?? cmds.cmdReturnsOk(cmds.Composer.local().version());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     finalVersionsObj = options.systemVersions;",
          "21:   } else if (composerOk || composerPharOk) {",
          "25:     const versionsObj = JSON.parse(output).platform;",
          "27:     versionsObj.forEach(({name, version}) => {",
          "",
          "[Removed Lines]",
          "22:     const composer = composerOk ? cmds.composerCmd : cmds.composerPharCmd;",
          "24:     const output = cmds.execWithResult(composer.command, basePath, [...composer.args, ...cmds.showArgs.args]);",
          "",
          "[Added Lines]",
          "16:     const composer = composerOk ? cmds.Composer.global() : cmds.Composer.local();",
          "18:     const output = cmds.execWithResult(composer.listPlatformDeps(), basePath);",
          "",
          "---------------"
        ]
      }
    }
  ]
}