{
  "cve_id": "CVE-2024-28151",
  "cve_desc": "Jenkins HTML Publisher Plugin 1.32 and earlier archives invalid symbolic links in report directories on agents and recreates them on the controller, allowing attackers with Item/Configure permission to determine whether a path on the Jenkins controller file system exists, without being able to access it.",
  "repo": "jenkinsci/htmlpublisher-plugin",
  "patch_hash": "6b840248dd0d691bbac9b515cd750b3f925909b2",
  "patch_info": {
    "commit_hash": "6b840248dd0d691bbac9b515cd750b3f925909b2",
    "repo": "jenkinsci/htmlpublisher-plugin",
    "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/6b840248dd0d691bbac9b515cd750b3f925909b2",
    "files": [
      "pom.xml",
      "src/main/java/htmlpublisher/HtmlPublisher.java",
      "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
    ],
    "message": "SECURITY-3303",
    "before_after_code_files": [
      "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
      "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java": [
      "File: src/main/java/htmlpublisher/HtmlPublisher.java -> src/main/java/htmlpublisher/HtmlPublisher.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: import java.io.Reader;",
      "36: import java.nio.charset.Charset;",
      "37: import java.nio.charset.StandardCharsets;",
      "38: import java.security.MessageDigest;",
      "39: import java.security.NoSuchAlgorithmException;",
      "40: import java.util.ArrayList;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: import java.nio.file.LinkOption;",
      "39: import java.nio.file.OpenOption;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44: import java.util.List;",
      "46: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "47: import org.kohsuke.accmod.Restricted;",
      "48: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "49: import org.kohsuke.stapler.AncestorInPath;",
      "50: import org.kohsuke.stapler.DataBoundConstructor;",
      "51: import org.kohsuke.stapler.QueryParameter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: import hudson.util.DirScanner;",
      "50: import jenkins.util.SystemProperties;",
      "53: import org.kohsuke.accmod.restrictions.suppressions.SuppressRestrictedWarnings;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "86: public class HtmlPublisher extends Recorder {",
      "87:     private final List<HtmlPublisherTarget> reportTargets;",
      "89:     private static final String HEADER = \"/htmlpublisher/HtmlPublisher/header.html\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Yes it should, but this allows the ability to change it via script in runtime.\")",
      "97:     static /*almost final*/ boolean FOLLOW_SYMLINKS = SystemProperties.getBoolean(HtmlPublisher.class.getName() + \".FOLLOW_SYMLINKS\", false);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "239:                     targetDir.deleteRecursive();",
      "240:                 }",
      "243:                     if (!allowMissing) {",
      "244:                         listener.error(\"Directory '\" + archiveDir + \"' exists but failed copying to '\" + targetDir + \"'.\");",
      "245:                         final Result buildResult = build.getResult();",
      "",
      "[Removed Lines]",
      "242:                 if (archiveDir.copyRecursiveTo(reportTarget.getIncludes(), targetDir) == 0) {",
      "",
      "[Added Lines]",
      "252:                 int copied = 0;",
      "253:                 if (FOLLOW_SYMLINKS) {",
      "254:                     copied = archiveDir.copyRecursiveTo(reportTarget.getIncludes(), targetDir);",
      "255:                 } else {",
      "256:                     copied = archiveDir.copyRecursiveTo(dirScannerGlob(reportTarget.getIncludes(), null, true, LinkOption.NOFOLLOW_LINKS), targetDir, reportTarget.getIncludes());",
      "257:                 }",
      "258:                 if (copied == 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "252:                         continue;",
      "253:                     }",
      "254:                 }",
      "257:                 e.printStackTrace(listener.fatalError(\"HTML Publisher failure\"));",
      "258:                 build.setResult(Result.FAILURE);",
      "259:                 return true;",
      "",
      "[Removed Lines]",
      "255:             } catch (IOException e) {",
      "256:                 Util.displayIOException(e, listener);",
      "",
      "[Added Lines]",
      "271:             } catch (Exception e) {",
      "272:                 if (e instanceof IOException) {",
      "273:                     Util.displayIOException((IOException) e, listener);",
      "274:                 }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "367:         }",
      "368:     }",
      "370:     @Extension",
      "371:     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {",
      "372:         @Override",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "389:     @SuppressRestrictedWarnings(NoExternalUse.class)",
      "390:     public static DirScanner dirScannerGlob(String includes, String excludes, boolean useDefaultExcludes, OpenOption... openOptions) throws Exception {",
      "391:         return new DirScanner.Glob(includes, excludes, useDefaultExcludes, openOptions);",
      "392:     }",
      "",
      "---------------"
    ],
    "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java": [
      "File: src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java -> src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import hudson.Launcher;",
      "6: import hudson.model.*;",
      "7: import hudson.model.queue.QueueTaskFuture;",
      "8: import hudson.slaves.EnvironmentVariablesNodeProperty;",
      "9: import org.junit.Rule;",
      "10: import org.junit.Test;",
      "11: import org.jvnet.hudson.test.JenkinsRule;",
      "12: import org.jvnet.hudson.test.TestBuilder;",
      "14: import java.io.File;",
      "15: import java.io.IOException;",
      "16: import java.nio.file.Files;",
      "17: import java.util.ArrayList;",
      "18: import java.util.Arrays;",
      "19: import java.util.List;",
      "",
      "[Removed Lines]",
      "21: import static org.junit.Assert.*;",
      "",
      "[Added Lines]",
      "8: import hudson.remoting.VirtualChannel;",
      "9: import hudson.slaves.DumbSlave;",
      "11: import hudson.slaves.JNLPLauncher;",
      "12: import hudson.slaves.RetentionStrategy;",
      "13: import jenkins.MasterToSlaveFileCallable;",
      "14: import org.apache.commons.io.FileUtils;",
      "15: import org.junit.After;",
      "18: import org.jvnet.hudson.test.BuildWatcher;",
      "19: import org.jvnet.hudson.test.Issue;",
      "21: import org.jvnet.hudson.test.TemporaryDirectoryAllocator;",
      "23: import org.testcontainers.DockerClientFactory;",
      "24: import org.testcontainers.containers.GenericContainer;",
      "28: import java.nio.charset.StandardCharsets;",
      "30: import java.nio.file.Paths;",
      "34: import java.util.Map;",
      "36: import static org.hamcrest.MatcherAssert.assertThat;",
      "37: import static org.hamcrest.collection.IsEmptyCollection.empty;",
      "38: import static org.hamcrest.core.IsNot.not;",
      "39: import static org.junit.Assert.assertEquals;",
      "40: import static org.junit.Assert.assertFalse;",
      "41: import static org.junit.Assert.assertTrue;",
      "42: import static org.junit.Assert.assertNotNull;",
      "43: import static org.junit.Assume.assumeTrue;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26: public class HtmlPublisherIntegrationTest {",
      "27:     @Rule",
      "28:     public JenkinsRule j = new JenkinsRule();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:     @Rule",
      "52:     public BuildWatcher buildWatcher = new BuildWatcher();",
      "54:     public TemporaryDirectoryAllocator tmp = new TemporaryDirectoryAllocator();",
      "55:     private GenericContainer agentContainer;",
      "56:     private DumbSlave agent;",
      "58:     @After",
      "59:     public void dispose() throws IOException, InterruptedException {",
      "60:         tmp.dispose();",
      "61:         if (agentContainer != null) {",
      "62:             agentContainer.stop();",
      "63:         }",
      "64:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "84:         assertFalse(tab2Files.contains(\"dummy.html\"));",
      "85:     }",
      "87:     @Test",
      "88:     public void testVariableExpansion() throws Exception {",
      "89:         FreeStyleProject p = j.createFreeStyleProject(\"variable_job\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "123:     @Test @Issue(\"SECURITY-3303\")",
      "124:     public void testNotFollowingSymlinks() throws Exception {",
      "125:         createDockerAgent();",
      "126:         final File directoryOnController = tmp.allocate();",
      "127:         FileUtils.write(new File(directoryOnController, \"test.txt\"), \"test\", StandardCharsets.UTF_8);",
      "128:         final String directoryOnControllerPath = directoryOnController.getAbsolutePath();",
      "129:         FreeStyleProject p = j.createFreeStyleProject();",
      "130:         p.getBuildersList().add(new TestBuilder() {",
      "131:             @Override",
      "132:             public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
      "133:                 FilePath workspace = build.getWorkspace();",
      "134:                 workspace.act(new MakeSymlink(directoryOnControllerPath));",
      "135:                 workspace.child(\"test3.txt\").write(\"Hello\", \"UTF-8\");",
      "136:                 return true;",
      "137:             }",
      "138:         });",
      "139:         HtmlPublisherTarget target1 = new HtmlPublisherTarget(\"tab1\", \"\", \"tab1/test.txt,tab1/test2.txt,**/test3.txt\", true, false, true);",
      "140:         p.getPublishersList().add(new HtmlPublisher(Arrays.asList(target1)));",
      "141:         p.setAssignedLabel(Label.get(\"agent\"));",
      "142:         FreeStyleBuild build = j.buildAndAssertSuccess(p);",
      "143:         File base = new File(build.getRootDir(), \"htmlreports\");",
      "144:         String[] list = base.list();",
      "145:         assertNotNull(list);",
      "146:         assertThat(Arrays.asList(list), not(empty()));",
      "147:         File tab1 = new File(base, \"tab1\");",
      "148:         list = tab1.list();",
      "149:         assertNotNull(list);",
      "150:         assertThat(Arrays.asList(list), not(empty()));",
      "152:         File reports = new File(tab1, \"tab1\");",
      "153:         assertFalse(reports.exists());",
      "154:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "246:         j.jenkins.getGlobalNodeProperties().add(prop);",
      "247:     }",
      "250: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "318:     private void createDockerAgent() throws Exception {",
      "319:         assumeTrue(\"Needs Docker\", DockerClientFactory.instance().isDockerAvailable());",
      "320:         j.jenkins.setSlaveAgentPort(0);",
      "321:         int port = j.jenkins.getTcpSlaveAgentListener().getAdvertisedPort();",
      "322:         synchronized (j.jenkins) {",
      "323:             agent = new DumbSlave(\"dockeragentOne\", \"/home/jenkins/work\", new JNLPLauncher(true));",
      "324:             agent.setLabelString(\"agent\");",
      "325:             agent.setRetentionStrategy(RetentionStrategy.NOOP);",
      "326:             j.jenkins.addNode(agent);",
      "327:         }",
      "328:         Map<String, String> env = Map.of(\"JENKINS_URL\", JNLPLauncher.getInboundAgentUrl(),",
      "329:                 \"JENKINS_SECRET\", agent.getComputer().getJnlpMac(),",
      "330:                 \"JENKINS_AGENT_NAME\", agent.getNodeName(),",
      "331:                 \"JENKINS_AGENT_WORKDIR\", agent.getRemoteFS());",
      "332:         System.out.println(env);",
      "334:         agentContainer = new GenericContainer<>(\"jenkins/inbound-agent:jdk\" + System.getProperty(\"java.specification.version\"))",
      "335:                 .withEnv(env)",
      "336:                 .withNetworkMode(\"host\").withLogConsumer(outputFrame -> System.out.print(outputFrame.getUtf8String()));",
      "338:         agentContainer.start();",
      "339:         j.waitOnline(agent);",
      "340:     }",
      "342:     static class MakeSymlink extends MasterToSlaveFileCallable<Void> {",
      "343:         final String target;",
      "345:         MakeSymlink(String target) {",
      "346:             this.target = target;",
      "347:         }",
      "349:         @Override",
      "350:         public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {",
      "351:             Files.createSymbolicLink(Paths.get(f.getAbsolutePath(), \"tab1\"), Paths.get(target));",
      "352:             return null;",
      "353:         }",
      "354:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dcdf58d59b1e87ecfb3aac13a4a717ce1965c1f9",
      "candidate_info": {
        "commit_hash": "dcdf58d59b1e87ecfb3aac13a4a717ce1965c1f9",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/dcdf58d59b1e87ecfb3aac13a4a717ce1965c1f9",
        "files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "src/main/java/htmlpublisher/util/DirScanningQueueWriter.java",
          "src/main/java/htmlpublisher/util/FileEntryQueue.java",
          "src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java",
          "src/main/java/htmlpublisher/util/QueueReadingDirScanner.java",
          "src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html",
          "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java",
          "src/test/java/htmlpublisher/HtmlPublisherTest.java",
          "src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java",
          "src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java",
          "src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java",
          "src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java"
        ],
        "message": "Add the option to publish report files multithreaded (#280)\n\n* Add option to publish multithreaded\n\n* Add timeout for publishing workers (Default: 300 s)",
        "before_after_code_files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "src/main/java/htmlpublisher/util/DirScanningQueueWriter.java||src/main/java/htmlpublisher/util/DirScanningQueueWriter.java",
          "src/main/java/htmlpublisher/util/FileEntryQueue.java||src/main/java/htmlpublisher/util/FileEntryQueue.java",
          "src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java||src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java",
          "src/main/java/htmlpublisher/util/QueueReadingDirScanner.java||src/main/java/htmlpublisher/util/QueueReadingDirScanner.java",
          "src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java||src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly||src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties||src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html||src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html",
          "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java",
          "src/test/java/htmlpublisher/HtmlPublisherTest.java||src/test/java/htmlpublisher/HtmlPublisherTest.java",
          "src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java||src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java",
          "src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java||src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java",
          "src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java||src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java",
          "src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java||src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
          ],
          "candidate": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisher.java -> src/main/java/htmlpublisher/HtmlPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: import edu.umd.cs.findbugs.annotations.NonNull;",
          "84: import static hudson.Functions.htmlAttributeEscape;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: import htmlpublisher.util.MultithreadedFileCopyHelper;",
          "85: import jenkins.util.Timer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Yes it should, but this allows the ability to change it via script in runtime.\")",
          "99:     static /*almost final*/ boolean FOLLOW_SYMLINKS = SystemProperties.getBoolean(HtmlPublisher.class.getName() + \".FOLLOW_SYMLINKS\", false);",
          "100:     private final List<HtmlPublisherTarget> reportTargets;",
          "102:     private static final String HEADER = \"/htmlpublisher/HtmlPublisher/header.html\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     static /*almost final*/ int PUBLISH_WORKER_TIMEOUT = SystemProperties.getInteger(HtmlPublisher.class.getName() + \".PUBLISH_WORKER_TIMEOUT\", 300);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:                 if (FOLLOW_SYMLINKS) {",
          "256:                     copied = archiveDir.copyRecursiveTo(reportTarget.getIncludes(), targetDir);",
          "257:                 } else {",
          "259:                 }",
          "260:                 if (copied == 0) {",
          "261:                     if (!allowMissing) {",
          "",
          "[Removed Lines]",
          "258:                     copied = archiveDir.copyRecursiveTo(dirScannerGlob(reportTarget.getIncludes(), null, true, LinkOption.NOFOLLOW_LINKS), targetDir, reportTarget.getIncludes());",
          "",
          "[Added Lines]",
          "267:                  int numberOfWorkers = reportTarget.getNumberOfWorkers();",
          "268:                  DirScanner dirScanner = dirScannerGlob(reportTarget.getIncludes(), null, true, LinkOption.NOFOLLOW_LINKS);",
          "269:                  if (numberOfWorkers <= 1) {",
          "270:                   logger.println(\"[htmlpublisher] Copying recursive using current thread\");",
          "271:                         copied = archiveDir.copyRecursiveTo(dirScanner, targetDir, reportTarget.getIncludes());",
          "272:                  } else {",
          "273:                   logger.println(\"[htmlpublisher] Copying recursive using \" + numberOfWorkers + \" workers\");",
          "274:                   copied = MultithreadedFileCopyHelper.copyRecursiveTo(",
          "275:                     archiveDir, dirScanner, targetDir, reportTarget.getIncludes(), numberOfWorkers, Timer.get(), PUBLISH_WORKER_TIMEOUT, listener);",
          "276:                  }",
          "",
          "---------------"
        ],
        "src/main/java/htmlpublisher/HtmlPublisherTarget.java||src/main/java/htmlpublisher/HtmlPublisherTarget.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisherTarget.java -> src/main/java/htmlpublisher/HtmlPublisherTarget.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     private Boolean escapeUnderscores;",
          "95:     private Boolean useWrapperFileDirectly;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     private int numberOfWorkers = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     public void setUseWrapperFileDirectly(boolean useWrapperFileDirectly) {",
          "177:         this.useWrapperFileDirectly = useWrapperFileDirectly;",
          "178:     }",
          "180:     @DataBoundSetter",
          "181:     public void setReportTitles(String reportTitles) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     public int getNumberOfWorkers() {",
          "183:         return this.numberOfWorkers;",
          "184:     }",
          "186:     @DataBoundSetter",
          "187:     public void setNumberOfWorkers(int numberOfWorkers) {",
          "188:         this.numberOfWorkers = numberOfWorkers;",
          "189:     }",
          "",
          "---------------"
        ],
        "src/main/java/htmlpublisher/util/DirScanningQueueWriter.java||src/main/java/htmlpublisher/util/DirScanningQueueWriter.java": [
          "File: src/main/java/htmlpublisher/util/DirScanningQueueWriter.java -> src/main/java/htmlpublisher/util/DirScanningQueueWriter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import java.io.File;",
          "4: import java.io.IOException;",
          "6: import java.util.UUID;",
          "8: import hudson.FilePath;",
          "9: import hudson.remoting.VirtualChannel;",
          "10: import hudson.util.DirScanner;",
          "11: import hudson.util.FileVisitor;",
          "13: import jenkins.security.Roles;",
          "15: import org.jenkinsci.remoting.RoleChecker;",
          "21: public class DirScanningQueueWriter implements FilePath.FileCallable<FileEntryQueue.Statistic> {",
          "23:  private final UUID queueKey;",
          "24:  private final DirScanner dirScanner;",
          "29:  private static class Visitor extends FileVisitor {",
          "31:   private FileEntryQueue queue;",
          "33:   public Visitor(FileEntryQueue queue) {",
          "34:    this.queue = queue;",
          "35:   }",
          "37:   @Override",
          "38:   public void visit(File file, String relativePath) {",
          "39:    this.queue.add(file, relativePath);",
          "40:   }",
          "42:  }",
          "44:  public DirScanningQueueWriter(DirScanner dirScanner, UUID queueKey) {",
          "46:   this.queueKey = queueKey;",
          "47:   this.dirScanner = dirScanner;",
          "49:  }",
          "51:  @Override",
          "52:  public void checkRoles(RoleChecker checker) throws SecurityException {",
          "53:   checker.check(this, Roles.SLAVE);",
          "54:  }",
          "56:  @Override",
          "57:  public FileEntryQueue.Statistic invoke(File f, VirtualChannel channel) throws IOException {",
          "60:   FileEntryQueue queue = FileEntryQueue.getOrCreateQueue(this.queueKey);",
          "62:   try {",
          "64:    this.dirScanner.scan(f, new Visitor(queue));",
          "65:   } catch (IOException e) {",
          "67:    queue.shutdownNow();",
          "68:    throw e;",
          "69:   }",
          "72:   queue.shutdown();",
          "74:   return queue.getStatistic();",
          "76:  }",
          "78:  private static final long serialVersionUID = 1L;",
          "80: }",
          "",
          "---------------"
        ],
        "src/main/java/htmlpublisher/util/FileEntryQueue.java||src/main/java/htmlpublisher/util/FileEntryQueue.java": [
          "File: src/main/java/htmlpublisher/util/FileEntryQueue.java -> src/main/java/htmlpublisher/util/FileEntryQueue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import java.io.File;",
          "4: import java.io.Serializable;",
          "6: import java.util.concurrent.atomic.AtomicInteger;",
          "7: import java.util.concurrent.atomic.AtomicLong;",
          "8: import java.util.concurrent.ConcurrentHashMap;",
          "9: import java.util.concurrent.LinkedBlockingQueue;",
          "10: import java.util.UUID;",
          "11: import java.util.Map;",
          "20: public class FileEntryQueue {",
          "25:  private static final FileEntry POISON_PILL = new FileEntry(null, null);",
          "30:  private static final Map<UUID, FileEntryQueue> queues = new ConcurrentHashMap<>();",
          "35:  private final LinkedBlockingQueue<FileEntry> queue = new LinkedBlockingQueue<>();",
          "40:  private final AtomicInteger overallCount = new AtomicInteger(0);",
          "45:  private final AtomicLong overallSize = new AtomicLong(0);",
          "50:  public static class FileEntry implements Serializable {",
          "52:   private File file;",
          "53:   private String relativePath;",
          "55:   public FileEntry(File file, String relativePath) {",
          "57:    this.file = file;",
          "58:    this.relativePath = relativePath;",
          "60:   }",
          "62:   public File getFile() {",
          "63:    return this.file;",
          "64:   }",
          "66:   public String getRelativePath() {",
          "67:    return this.relativePath;",
          "68:   }",
          "70:   private static final long serialVersionUID = 1L;",
          "72:  }",
          "77:  public static class Statistic implements Serializable {",
          "79:   private int overallCount;",
          "80:   private long overallSize;",
          "82:   public Statistic(int overallCount, long overallSize) {",
          "83:    this.overallCount = overallCount;",
          "84:    this.overallSize = overallSize;",
          "85:   }",
          "87:   public int getOverallCount() {",
          "88:    return this.overallCount;",
          "89:   }",
          "91:   public long getOverallSize() {",
          "92:    return this.overallSize;",
          "93:   }",
          "95:   private static final long serialVersionUID = 1L;",
          "97:  }",
          "105:  public static FileEntryQueue getOrCreateQueue(UUID queueKey) {",
          "107:   return queues.computeIfAbsent(queueKey, key -> new FileEntryQueue());",
          "109:  }",
          "116:  public static FileEntryQueue remove(UUID queueKey) {",
          "118:   return queues.remove(queueKey);",
          "120:  }",
          "130:  public FileEntry add(File file, String relativePath) {",
          "132:   FileEntry entry = new FileEntry(file, relativePath);",
          "134:   this.queue.add(entry);",
          "136:   this.overallCount.incrementAndGet();",
          "137:   this.overallSize.addAndGet(file.length());",
          "139:   return entry;",
          "141:  }",
          "150:  public FileEntry take() throws InterruptedException {",
          "152:   FileEntry entry = this.queue.take();",
          "154:   if (entry == POISON_PILL) {",
          "155:    this.queue.add(FileEntryQueue.POISON_PILL);",
          "156:    throw new InterruptedException();",
          "157:   }",
          "159:   return entry;",
          "161:  }",
          "167:  public void shutdown() {",
          "169:   this.queue.add(POISON_PILL);",
          "171:  }",
          "177:  public void shutdownNow() {",
          "180:   this.queue.clear();",
          "183:   this.shutdown();",
          "185:  }",
          "190:  public int getOverallCount() {",
          "192:   return this.overallCount.get();",
          "194:  }",
          "199:  public long getOverallSize() {",
          "201:   return this.overallSize.get();",
          "203:  }",
          "208:  public Statistic getStatistic() {",
          "210:   return new FileEntryQueue.Statistic(this.getOverallCount(), this.getOverallSize());",
          "212:  }",
          "214: }",
          "",
          "---------------"
        ],
        "src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java||src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java": [
          "File: src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java -> src/main/java/htmlpublisher/util/MultithreadedFileCopyHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import java.io.IOException;",
          "4: import java.io.PrintStream;",
          "6: import java.util.concurrent.ExecutorService;",
          "7: import java.util.concurrent.ExecutionException;",
          "8: import java.util.concurrent.Future;",
          "9: import java.util.concurrent.TimeUnit;",
          "10: import java.util.concurrent.TimeoutException;",
          "11: import java.util.HashSet;",
          "12: import java.util.Set;",
          "13: import java.util.UUID;",
          "15: import hudson.FilePath;",
          "16: import hudson.model.TaskListener;",
          "17: import hudson.util.DirScanner;",
          "33: public class MultithreadedFileCopyHelper {",
          "38:  static public int copyRecursiveTo(FilePath archiveDir, DirScanner dirScanner, FilePath targetDir,",
          "39:    String description, int numberOfWorkers, ExecutorService executorService, int workerTimeoutInSeconds,",
          "40:    TaskListener listener) throws IOException, InterruptedException, TimeoutException {",
          "42:   PrintStream logger = listener.getLogger();",
          "44:   long startTime = System.currentTimeMillis();",
          "48:   UUID queueKey = UUID.randomUUID();",
          "50:   try {",
          "54:    Set<Future<Integer>> workers = new HashSet<>();",
          "55:    for (int i = 0; i < numberOfWorkers; i++) {",
          "56:     workers.add(executorService.submit(() -> {",
          "57:      QueueReadingDirScanner queueReadingDirScanner = new QueueReadingDirScanner(queueKey);",
          "58:      return archiveDir.copyRecursiveTo(queueReadingDirScanner, targetDir, description);",
          "59:     }));",
          "60:    }",
          "65:    FileEntryQueue.Statistic queueStatistic = archiveDir.act(new DirScanningQueueWriter(dirScanner, queueKey));",
          "70:    int transferedFiles = 0;",
          "71:    for (Future<Integer> worker : workers) {",
          "72:     try {",
          "73:      transferedFiles += worker.get(workerTimeoutInSeconds, TimeUnit.SECONDS); // Wait workers to finish",
          "74:     } catch (ExecutionException e) {",
          "75:      throw new IOException(e);",
          "76:     }",
          "77:    }",
          "82:    float overallSizeInMB = (float) queueStatistic.getOverallSize() / 1024 / 1024;",
          "83:    float overallDurationInSeconds = (float) (System.currentTimeMillis() - startTime) / 1000;",
          "84:    logger.format(\"Copied %,d file(s) / %,.1f MB --> %,.1f MB/s\", queueStatistic.getOverallCount(),",
          "85:      overallSizeInMB, overallSizeInMB / overallDurationInSeconds).println();",
          "88:    return transferedFiles;",
          "90:   } finally {",
          "95:    archiveDir.act(new QueueShutdownAndRemover(queueKey));",
          "96:   }",
          "98:  }",
          "100: }",
          "",
          "---------------"
        ],
        "src/main/java/htmlpublisher/util/QueueReadingDirScanner.java||src/main/java/htmlpublisher/util/QueueReadingDirScanner.java": [
          "File: src/main/java/htmlpublisher/util/QueueReadingDirScanner.java -> src/main/java/htmlpublisher/util/QueueReadingDirScanner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import java.io.File;",
          "4: import java.io.IOException;",
          "6: import java.util.UUID;",
          "8: import hudson.util.DirScanner;",
          "9: import hudson.util.FileVisitor;",
          "15: public class QueueReadingDirScanner extends DirScanner {",
          "17:  private UUID queueKey;",
          "19:  public QueueReadingDirScanner(UUID queueKey) {",
          "20:   this.queueKey = queueKey;",
          "21:  }",
          "23:  @Override",
          "24:  public void scan(File file, FileVisitor visitor) throws IOException {",
          "27:   FileEntryQueue queue = FileEntryQueue.getOrCreateQueue(this.queueKey);",
          "29:   try { // Process entries from the queue",
          "30:    while (true) {",
          "32:     FileEntryQueue.FileEntry entry = queue.take(); // throws InterruptedException on the end of the",
          "34:     visitor.visit(entry.getFile(), entry.getRelativePath());",
          "35:    }",
          "36:   } catch (InterruptedException e) {",
          "38:   } catch (IOException e) {",
          "39:    queue.shutdownNow(); // Clear all later tasks and signal shutdown",
          "40:    throw (e);",
          "41:   }",
          "43:  };",
          "45:  private static final long serialVersionUID = 1L;",
          "47: }",
          "",
          "---------------"
        ],
        "src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java||src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java": [
          "File: src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java -> src/main/java/htmlpublisher/util/QueueShutdownAndRemover.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import java.io.File;",
          "4: import java.io.IOException;",
          "6: import java.util.UUID;",
          "8: import hudson.FilePath;",
          "9: import hudson.remoting.VirtualChannel;",
          "11: import jenkins.security.Roles;",
          "13: import org.jenkinsci.remoting.RoleChecker;",
          "18: public class QueueShutdownAndRemover implements FilePath.FileCallable<Void> {",
          "20:  private final UUID queueKey;",
          "22:  public QueueShutdownAndRemover(UUID queueKey) {",
          "24:   this.queueKey = queueKey;",
          "26:  }",
          "28:  @Override",
          "29:  public void checkRoles(RoleChecker checker) throws SecurityException {",
          "30:   checker.check(this, Roles.SLAVE);",
          "31:  }",
          "33:  @Override",
          "34:  public Void invoke(File f, VirtualChannel channel) throws IOException {",
          "36:   FileEntryQueue queue = FileEntryQueue.remove(this.queueKey);",
          "38:   if (queue != null) {",
          "39:    queue.shutdownNow(); // Final call to shutdown the queue to ensure all workers get the kill signal",
          "40:   }",
          "42:   return null;",
          "44:  }",
          "46:  private static final long serialVersionUID = 1L;",
          "48: }",
          "",
          "---------------"
        ],
        "src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly||src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly": [
          "File: src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly -> src/main/resources/htmlpublisher/HtmlPublisherTarget/config.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     <f:entry field=\"useWrapperFileDirectly\" title=\"${%useWrapperFileDirectly.title}\">",
          "41:       <f:checkbox default=\"true\"/>",
          "42:     </f:entry>",
          "43:   </f:advanced>",
          "44: </j:jelly>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     <f:entry field=\"numberOfWorkers\" title=\"${%numberOfWorkers.title}\">",
          "44:       <f:number/>",
          "45:     </f:entry>",
          "",
          "---------------"
        ],
        "src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties||src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties": [
          "File: src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties -> src/main/resources/htmlpublisher/HtmlPublisherTarget/config.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: alwaysLinkToLastBuild.title=Always link to last build",
          "9: allowMissing.title=Allow missing report",
          "10: escapeUnderscores.title=Escape underscores in Report Title",
          "",
          "[Removed Lines]",
          "11: useWrapperFileDirectly.title=Use the legacy wrapper file",
          "",
          "[Added Lines]",
          "12: numberOfWorkers.title=Number of workers",
          "",
          "---------------"
        ],
        "src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html||src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html": [
          "File: src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html -> src/main/resources/htmlpublisher/HtmlPublisherTarget/help-numberOfWorkers.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <div>",
          "2:   By default, the report files are published sequentially.",
          "3:   If this option is provided, the report files will be published using the given number of workers.",
          "4: </div>",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java": [
          "File: src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java -> src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:         assertTrue(new File(build.getRootDir(), \"htmlreports/tab1/htmlpublisher-wrapper.html\").exists());",
          "285:         assertTrue(new File(build.getRootDir(), \"htmlreports/tab2/htmlpublisher-wrapper.html\").exists());",
          "286:     }",
          "288:     @Test",
          "289:     public void testPublishesTwoReportsOneJob() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:     @Test",
          "289:     public void testMultithreaded() throws Exception {",
          "290:         FreeStyleProject p = j.createFreeStyleProject(\"variable_job\");",
          "291:         p.getBuildersList().add(new TestBuilder() {",
          "292:             public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
          "293:                 FilePath ws = build.getWorkspace();",
          "294:                 ws.child(\"dirA\").child(\"file1.html\").write(\"hello\", \"UTF-8\");",
          "295:                 ws.child(\"dirA\").child(\"file2.html\").write(\"hello\", \"UTF-8\");",
          "296:                 return true;",
          "297:             }",
          "298:         });",
          "299:         HtmlPublisherTarget target1 = new HtmlPublisherTarget(\"reportnameB\", \"dirB\", \"\", true, true, true);",
          "300:         target1.setNumberOfWorkers(2);",
          "301:         HtmlPublisherTarget target2 = new HtmlPublisherTarget(\"reportnameA\", \"dirA\", \"\", true, true, false);",
          "302:         target2.setNumberOfWorkers(2);",
          "304:         List<HtmlPublisherTarget> targets = new ArrayList<>();",
          "305:         targets.add(target1);",
          "306:         targets.add(target2);",
          "307:         p.getPublishersList().add(new HtmlPublisher(targets));",
          "308:         AbstractBuild build = j.buildAndAssertSuccess(p);",
          "309:         assertTrue(\"reportnameA/htmlpublisher-wrapper.html must exist\", new File(build.getRootDir(), \"htmlreports/reportnameA/htmlpublisher-wrapper.html\").exists());",
          "310:         assertTrue(\"reportnameA/file1.html must exist\", new File(build.getRootDir(), \"htmlreports/reportnameA/file1.html\").exists());",
          "311:         assertTrue(\"reportnameA/file2.html must exist\", new File(build.getRootDir(), \"htmlreports/reportnameA/file2.html\").exists());",
          "312:         assertFalse(\"reportnameB/htmlpublisher-wrapper.html must not exist\", new File(build.getRootDir(), \"htmlreports/reportnameB/htmlpublisher-wrapper.html\").exists());",
          "313:     }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/HtmlPublisherTest.java||src/test/java/htmlpublisher/HtmlPublisherTest.java": [
          "File: src/test/java/htmlpublisher/HtmlPublisherTest.java -> src/test/java/htmlpublisher/HtmlPublisherTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:         assertEquals(HtmlPublisherTarget.sanitizeReportName(\"foo_bar\", false), HtmlPublisherTarget.sanitizeReportName(\"foo_bar\", false));",
          "36:     }",
          "37: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     @Test",
          "39:     public void testNumberOfWorkers() {",
          "40:         HtmlPublisherTarget target = new HtmlPublisherTarget(\"tab1\", \"target\", \"tab1.html\", true, true, false);",
          "43:         assertEquals(target.getNumberOfWorkers(), 0);",
          "46:         target.setNumberOfWorkers(0);",
          "47:         assertEquals(target.getNumberOfWorkers(), 0);",
          "49:         target.setNumberOfWorkers(1);",
          "50:         assertEquals(target.getNumberOfWorkers(), 1);",
          "51:     }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java||src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java": [
          "File: src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java -> src/test/java/htmlpublisher/util/DirScanningQueueWriterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import org.junit.Test;",
          "5: import java.io.File;",
          "6: import java.io.IOException;",
          "8: import hudson.util.DirScanner;",
          "9: import hudson.util.FileVisitor;",
          "11: import java.util.UUID;",
          "13: import static org.junit.Assert.assertThrows;",
          "15: public class DirScanningQueueWriterTest {",
          "17:  @Test",
          "18:  public void testInvokeWithIOException() {",
          "20:   UUID queueKey = UUID.randomUUID();",
          "21:   FileEntryQueue queue = FileEntryQueue.getOrCreateQueue(queueKey);",
          "24:   queue.add(new File(\"\"), \"\");",
          "26:   DirScanningQueueWriter queueWriter = new DirScanningQueueWriter(new DirScanner() {",
          "27:    public void scan(File file, FileVisitor visitor) throws IOException {",
          "28:     throw new IOException();",
          "29:    }",
          "31:    private static final long serialVersionUID = 1L;",
          "32:   }, queueKey);",
          "35:   assertThrows(IOException.class, () -> {",
          "36:    queueWriter.invoke(new File(\"\"), null);",
          "37:   });",
          "41:   assertThrows(\"Queue must be closed\", InterruptedException.class, () -> {",
          "42:    queue.take();",
          "43:   });",
          "45:  }",
          "47: }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java||src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java": [
          "File: src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java -> src/test/java/htmlpublisher/util/IOExceptionFileVisitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import hudson.util.FileVisitor;",
          "5: import java.io.File;",
          "6: import java.io.IOException;",
          "8: class IOExceptionFileVisitor extends FileVisitor {",
          "9:  public void visit(File f, String relativePath) throws IOException {",
          "10:   throw new IOException(\"Simulated IO Error\");",
          "11:  }",
          "12: }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java||src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java": [
          "File: src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java -> src/test/java/htmlpublisher/util/MultithreadedFileCopyHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import org.junit.Test;",
          "5: import hudson.model.TaskListener;",
          "6: import hudson.util.DirScanner;",
          "7: import hudson.util.FileVisitor;",
          "8: import hudson.FilePath;",
          "9: import jenkins.util.Timer;",
          "11: import java.io.File;",
          "12: import java.io.IOException;",
          "14: import java.util.concurrent.Executors;",
          "15: import java.util.concurrent.ExecutorService;",
          "16: import java.util.concurrent.TimeoutException;",
          "18: import static org.junit.Assert.assertThrows;",
          "20: public class MultithreadedFileCopyHelperTest {",
          "22:  @Test",
          "23:  public void testScanWithIOException() {",
          "26:   assertThrows(IOException.class, () -> {",
          "27:    MultithreadedFileCopyHelper.copyRecursiveTo(new FilePath(new File(\"\")),",
          "29:      new DirScanner() {",
          "30:       public void scan(File file, FileVisitor visitor) throws IOException {",
          "31:        throw new IOException();",
          "32:       }",
          "34:       private static final long serialVersionUID = 1L;",
          "35:      }, null, null, 1, Timer.get(), 10, TaskListener.NULL);",
          "36:   });",
          "38:  }",
          "40:  @Test",
          "41:  public void testWorkerWithTimeout() {",
          "45:   ExecutorService singleExecutorService = Executors.newSingleThreadScheduledExecutor();",
          "47:   singleExecutorService.submit(() -> {",
          "48:    Thread.sleep(10000);",
          "49:    return true;",
          "50:   });",
          "53:   assertThrows(TimeoutException.class, () -> {",
          "54:    MultithreadedFileCopyHelper.copyRecursiveTo(new FilePath(new File(\"\")), new DirScanner() {",
          "55:     public void scan(File file, FileVisitor visitor) {",
          "57:     }",
          "59:     private static final long serialVersionUID = 1L;",
          "60:    }, null, null, // No target path, no description",
          "61:      1, // Start one worker",
          "62:      singleExecutorService, // Limit parallel processing to 1 thread",
          "63:      1, // Timeout = 1 second (too short!)",
          "64:      TaskListener.NULL);",
          "65:   });",
          "67:  }",
          "69:  @Test",
          "70:  public void testWorkerWithoutTimeout() throws Exception {",
          "74:   ExecutorService singleExecutorService = Executors.newSingleThreadScheduledExecutor();",
          "76:   singleExecutorService.submit(() -> {",
          "77:    Thread.sleep(1000);",
          "78:    return true;",
          "79:   });",
          "82:   MultithreadedFileCopyHelper.copyRecursiveTo(new FilePath(new File(\"\")), new DirScanner() {",
          "83:    public void scan(File file, FileVisitor visitor) {",
          "85:    }",
          "87:    private static final long serialVersionUID = 1L;",
          "88:   }, new FilePath(new File(\"\")), // Target dir",
          "89:     null, // no description",
          "90:     1, // Start one worker",
          "91:     singleExecutorService, // Limit parallel processing to 1 thread",
          "92:     10, // Timeout = 10 seconds (enough time!)",
          "93:     TaskListener.NULL);",
          "95:  }",
          "97: }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java||src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java": [
          "File: src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java -> src/test/java/htmlpublisher/util/QueueReadingDirScannerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher.util;",
          "3: import org.junit.Test;",
          "5: import java.io.File;",
          "6: import java.io.IOException;",
          "8: import java.util.UUID;",
          "10: import static org.junit.Assert.assertThrows;",
          "12: public class QueueReadingDirScannerTest {",
          "14:  @Test",
          "15:  public void testVisitWithIOException() {",
          "17:   UUID queueKey = UUID.randomUUID();",
          "18:   FileEntryQueue queue = FileEntryQueue.getOrCreateQueue(queueKey);",
          "21:   queue.add(new File(\"\"), \"\");",
          "22:   queue.add(new File(\"\"), \"\");",
          "24:   QueueReadingDirScanner dirScanner = new QueueReadingDirScanner(queueKey);",
          "27:   assertThrows(IOException.class, () -> {",
          "28:    dirScanner.scan(new File(\"\"), new IOExceptionFileVisitor());",
          "29:   });",
          "33:   assertThrows(\"Queue must be empty and closed\", InterruptedException.class, () -> {",
          "34:    queue.take();",
          "35:   });",
          "37:  }",
          "39: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83370559cd57c0d566fceb6957f1d804dc14bc23",
      "candidate_info": {
        "commit_hash": "83370559cd57c0d566fceb6957f1d804dc14bc23",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/83370559cd57c0d566fceb6957f1d804dc14bc23",
        "files": [
          "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
        ],
        "message": "Fix test timeout when running in PCT",
        "before_after_code_files": [
          "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
          ],
          "candidate": [
            "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java": [
          "File: src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java -> src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:         Map<String, String> env = Map.of(\"JENKINS_URL\", JNLPLauncher.getInboundAgentUrl(),",
          "329:                 \"JENKINS_SECRET\", agent.getComputer().getJnlpMac(),",
          "330:                 \"JENKINS_AGENT_NAME\", agent.getNodeName(),",
          "332:         System.out.println(env);",
          "334:         agentContainer = new GenericContainer<>(\"jenkins/inbound-agent:jdk\" + System.getProperty(\"java.specification.version\"))",
          "",
          "[Removed Lines]",
          "331:                 \"JENKINS_AGENT_WORKDIR\", agent.getRemoteFS());",
          "",
          "[Added Lines]",
          "331:                 \"JENKINS_AGENT_WORKDIR\", agent.getRemoteFS(),",
          "332:                 \"JENKINS_WEB_SOCKET\", \"true\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e0e3a443775337ffa1e3693952c05a56c5a0709",
      "candidate_info": {
        "commit_hash": "7e0e3a443775337ffa1e3693952c05a56c5a0709",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/7e0e3a443775337ffa1e3693952c05a56c5a0709",
        "files": [
          "pom.xml",
          "src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
        ],
        "message": "SECURITY-3303",
        "before_after_code_files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
          ],
          "candidate": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisher.java -> src/main/java/htmlpublisher/HtmlPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import java.io.Reader;",
          "36: import java.nio.charset.Charset;",
          "37: import java.nio.charset.StandardCharsets;",
          "38: import java.security.MessageDigest;",
          "39: import java.security.NoSuchAlgorithmException;",
          "40: import java.util.ArrayList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import java.nio.file.LinkOption;",
          "39: import java.nio.file.OpenOption;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import java.util.List;",
          "46: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "47: import org.kohsuke.accmod.Restricted;",
          "48: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "49: import org.kohsuke.stapler.AncestorInPath;",
          "50: import org.kohsuke.stapler.DataBoundConstructor;",
          "51: import org.kohsuke.stapler.QueryParameter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import hudson.util.DirScanner;",
          "50: import jenkins.util.SystemProperties;",
          "53: import org.kohsuke.accmod.restrictions.suppressions.SuppressRestrictedWarnings;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: public class HtmlPublisher extends Recorder {",
          "87:     private final List<HtmlPublisherTarget> reportTargets;",
          "89:     private static final String HEADER = \"/htmlpublisher/HtmlPublisher/header.html\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Yes it should, but this allows the ability to change it via script in runtime.\")",
          "97:     static /*almost final*/ boolean FOLLOW_SYMLINKS = SystemProperties.getBoolean(HtmlPublisher.class.getName() + \".FOLLOW_SYMLINKS\", false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:                     targetDir.deleteRecursive();",
          "240:                 }",
          "243:                     if (!allowMissing) {",
          "244:                         listener.error(\"Directory '\" + archiveDir + \"' exists but failed copying to '\" + targetDir + \"'.\");",
          "245:                         final Result buildResult = build.getResult();",
          "",
          "[Removed Lines]",
          "242:                 if (archiveDir.copyRecursiveTo(reportTarget.getIncludes(), targetDir) == 0) {",
          "",
          "[Added Lines]",
          "252:                 int copied = 0;",
          "253:                 if (FOLLOW_SYMLINKS) {",
          "254:                     copied = archiveDir.copyRecursiveTo(reportTarget.getIncludes(), targetDir);",
          "255:                 } else {",
          "256:                     copied = archiveDir.copyRecursiveTo(dirScannerGlob(reportTarget.getIncludes(), null, true, LinkOption.NOFOLLOW_LINKS), targetDir, reportTarget.getIncludes());",
          "257:                 }",
          "258:                 if (copied == 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:                         continue;",
          "253:                     }",
          "254:                 }",
          "257:                 e.printStackTrace(listener.fatalError(\"HTML Publisher failure\"));",
          "258:                 build.setResult(Result.FAILURE);",
          "259:                 return true;",
          "",
          "[Removed Lines]",
          "255:             } catch (IOException e) {",
          "256:                 Util.displayIOException(e, listener);",
          "",
          "[Added Lines]",
          "271:             } catch (Exception e) {",
          "272:                 if (e instanceof IOException) {",
          "273:                     Util.displayIOException((IOException) e, listener);",
          "274:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "367:         }",
          "368:     }",
          "370:     @Extension",
          "371:     public static class DescriptorImpl extends BuildStepDescriptor<Publisher> {",
          "372:         @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:     @SuppressRestrictedWarnings(NoExternalUse.class)",
          "390:     public static DirScanner dirScannerGlob(String includes, String excludes, boolean useDefaultExcludes, OpenOption... openOptions) throws Exception {",
          "391:         return new DirScanner.Glob(includes, excludes, useDefaultExcludes, openOptions);",
          "392:     }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java||src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java": [
          "File: src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java -> src/test/java/htmlpublisher/HtmlPublisherIntegrationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import hudson.Launcher;",
          "6: import hudson.model.*;",
          "7: import hudson.model.queue.QueueTaskFuture;",
          "8: import hudson.slaves.EnvironmentVariablesNodeProperty;",
          "9: import org.junit.Rule;",
          "10: import org.junit.Test;",
          "11: import org.jvnet.hudson.test.JenkinsRule;",
          "12: import org.jvnet.hudson.test.TestBuilder;",
          "14: import java.io.File;",
          "15: import java.io.IOException;",
          "16: import java.nio.file.Files;",
          "17: import java.util.ArrayList;",
          "18: import java.util.Arrays;",
          "19: import java.util.List;",
          "",
          "[Removed Lines]",
          "21: import static org.junit.Assert.*;",
          "",
          "[Added Lines]",
          "8: import hudson.remoting.VirtualChannel;",
          "9: import hudson.slaves.DumbSlave;",
          "11: import hudson.slaves.JNLPLauncher;",
          "12: import hudson.slaves.RetentionStrategy;",
          "13: import jenkins.MasterToSlaveFileCallable;",
          "14: import org.apache.commons.io.FileUtils;",
          "15: import org.junit.After;",
          "18: import org.jvnet.hudson.test.BuildWatcher;",
          "19: import org.jvnet.hudson.test.Issue;",
          "21: import org.jvnet.hudson.test.TemporaryDirectoryAllocator;",
          "23: import org.testcontainers.DockerClientFactory;",
          "24: import org.testcontainers.containers.GenericContainer;",
          "28: import java.nio.charset.StandardCharsets;",
          "30: import java.nio.file.Paths;",
          "34: import java.util.Map;",
          "36: import static org.hamcrest.MatcherAssert.assertThat;",
          "37: import static org.hamcrest.collection.IsEmptyCollection.empty;",
          "38: import static org.hamcrest.core.IsNot.not;",
          "39: import static org.junit.Assert.assertEquals;",
          "40: import static org.junit.Assert.assertFalse;",
          "41: import static org.junit.Assert.assertTrue;",
          "42: import static org.junit.Assert.assertNotNull;",
          "43: import static org.junit.Assume.assumeTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: public class HtmlPublisherIntegrationTest {",
          "27:     @Rule",
          "28:     public JenkinsRule j = new JenkinsRule();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     @Rule",
          "52:     public BuildWatcher buildWatcher = new BuildWatcher();",
          "54:     public TemporaryDirectoryAllocator tmp = new TemporaryDirectoryAllocator();",
          "55:     private GenericContainer agentContainer;",
          "56:     private DumbSlave agent;",
          "58:     @After",
          "59:     public void dispose() throws IOException, InterruptedException {",
          "60:         tmp.dispose();",
          "61:         if (agentContainer != null) {",
          "62:             agentContainer.stop();",
          "63:         }",
          "64:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         assertFalse(tab2Files.contains(\"dummy.html\"));",
          "85:     }",
          "87:     @Test",
          "88:     public void testVariableExpansion() throws Exception {",
          "89:         FreeStyleProject p = j.createFreeStyleProject(\"variable_job\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     @Test @Issue(\"SECURITY-3303\")",
          "124:     public void testNotFollowingSymlinks() throws Exception {",
          "125:         createDockerAgent();",
          "126:         final File directoryOnController = tmp.allocate();",
          "127:         FileUtils.write(new File(directoryOnController, \"test.txt\"), \"test\", StandardCharsets.UTF_8);",
          "128:         final String directoryOnControllerPath = directoryOnController.getAbsolutePath();",
          "129:         FreeStyleProject p = j.createFreeStyleProject();",
          "130:         p.getBuildersList().add(new TestBuilder() {",
          "131:             @Override",
          "132:             public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {",
          "133:                 FilePath workspace = build.getWorkspace();",
          "134:                 workspace.act(new MakeSymlink(directoryOnControllerPath));",
          "135:                 workspace.child(\"test3.txt\").write(\"Hello\", \"UTF-8\");",
          "136:                 return true;",
          "137:             }",
          "138:         });",
          "139:         HtmlPublisherTarget target1 = new HtmlPublisherTarget(\"tab1\", \"\", \"tab1/test.txt,tab1/test2.txt,**/test3.txt\", true, false, true);",
          "140:         p.getPublishersList().add(new HtmlPublisher(Arrays.asList(target1)));",
          "141:         p.setAssignedLabel(Label.get(\"agent\"));",
          "142:         FreeStyleBuild build = j.buildAndAssertSuccess(p);",
          "143:         File base = new File(build.getRootDir(), \"htmlreports\");",
          "144:         String[] list = base.list();",
          "145:         assertNotNull(list);",
          "146:         assertThat(Arrays.asList(list), not(empty()));",
          "147:         File tab1 = new File(base, \"tab1\");",
          "148:         list = tab1.list();",
          "149:         assertNotNull(list);",
          "150:         assertThat(Arrays.asList(list), not(empty()));",
          "152:         File reports = new File(tab1, \"tab1\");",
          "153:         assertFalse(reports.exists());",
          "154:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:         j.jenkins.getGlobalNodeProperties().add(prop);",
          "247:     }",
          "250: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     private void createDockerAgent() throws Exception {",
          "319:         assumeTrue(\"Needs Docker\", DockerClientFactory.instance().isDockerAvailable());",
          "320:         j.jenkins.setSlaveAgentPort(0);",
          "321:         int port = j.jenkins.getTcpSlaveAgentListener().getAdvertisedPort();",
          "322:         synchronized (j.jenkins) {",
          "323:             agent = new DumbSlave(\"dockeragentOne\", \"/home/jenkins/work\", new JNLPLauncher(true));",
          "324:             agent.setLabelString(\"agent\");",
          "325:             agent.setRetentionStrategy(RetentionStrategy.NOOP);",
          "326:             j.jenkins.addNode(agent);",
          "327:         }",
          "328:         Map<String, String> env = Map.of(\"JENKINS_URL\", JNLPLauncher.getInboundAgentUrl(),",
          "329:                 \"JENKINS_SECRET\", agent.getComputer().getJnlpMac(),",
          "330:                 \"JENKINS_AGENT_NAME\", agent.getNodeName(),",
          "331:                 \"JENKINS_AGENT_WORKDIR\", agent.getRemoteFS());",
          "332:         System.out.println(env);",
          "334:         agentContainer = new GenericContainer<>(\"jenkins/inbound-agent:jdk\" + System.getProperty(\"java.specification.version\"))",
          "335:                 .withEnv(env)",
          "336:                 .withNetworkMode(\"host\").withLogConsumer(outputFrame -> System.out.print(outputFrame.getUtf8String()));",
          "338:         agentContainer.start();",
          "339:         j.waitOnline(agent);",
          "340:     }",
          "342:     static class MakeSymlink extends MasterToSlaveFileCallable<Void> {",
          "343:         final String target;",
          "345:         MakeSymlink(String target) {",
          "346:             this.target = target;",
          "347:         }",
          "349:         @Override",
          "350:         public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {",
          "351:             Files.createSymbolicLink(Paths.get(f.getAbsolutePath(), \"tab1\"), Paths.get(target));",
          "352:             return null;",
          "353:         }",
          "354:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}