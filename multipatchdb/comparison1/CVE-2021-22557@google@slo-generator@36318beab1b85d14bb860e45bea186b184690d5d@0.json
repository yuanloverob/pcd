{
  "cve_id": "CVE-2021-22557",
  "cve_desc": "SLO generator allows for loading of YAML files that if crafted in a specific format can allow for code execution within the context of the SLO Generator. We recommend upgrading SLO Generator past https://github.com/google/slo-generator/pull/173",
  "repo": "google/slo-generator",
  "patch_hash": "36318beab1b85d14bb860e45bea186b184690d5d",
  "patch_info": {
    "commit_hash": "36318beab1b85d14bb860e45bea186b184690d5d",
    "repo": "google/slo-generator",
    "commit_url": "https://github.com/google/slo-generator/commit/36318beab1b85d14bb860e45bea186b184690d5d",
    "files": [
      "slo_generator/migrations/migrator.py"
    ],
    "message": "fix: yaml loader security issue (#173)",
    "before_after_code_files": [
      "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py"
    ]
  },
  "patch_diff": {
    "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py": [
      "File: slo_generator/migrations/migrator.py -> slo_generator/migrations/migrator.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "226:     exp_keys = []",
      "227:     for exp_path in exporters_paths:",
      "228:         with open(exp_path, encoding='utf-8') as conf:",
      "230:         exporters = content",
      "232:         # If exporters file has sections, concatenate all of them",
      "",
      "[Removed Lines]",
      "229:             content = yaml.load(conf, Loader=yaml.Loader)",
      "",
      "[Added Lines]",
      "229:             content = yaml.load(conf, Loader=yaml.SafeLoader)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "261:     ebp_keys = []",
      "262:     for ebp_path in ebp_paths:",
      "263:         with open(ebp_path, encoding='utf-8') as conf:",
      "265:         for step in error_budget_policy:",
      "266:             step['name'] = step.pop('error_budget_policy_step_name')",
      "267:             step['burn_rate_threshold'] = step.pop(",
      "",
      "[Removed Lines]",
      "264:             error_budget_policy = yaml.load(conf, Loader=yaml.Loader)",
      "",
      "[Added Lines]",
      "264:             error_budget_policy = yaml.load(conf, Loader=yaml.SafeLoader)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "796442e92e35d2ceeecd12635a6e1a057791427b",
      "candidate_info": {
        "commit_hash": "796442e92e35d2ceeecd12635a6e1a057791427b",
        "repo": "google/slo-generator",
        "commit_url": "https://github.com/google/slo-generator/commit/796442e92e35d2ceeecd12635a6e1a057791427b",
        "files": [
          "slo_generator/migrations/__init__.py",
          "slo_generator/migrations/migrator.py"
        ],
        "message": "feat: Add migrator for v1 to v2 migration (#127)",
        "before_after_code_files": [
          "slo_generator/migrations/__init__.py||slo_generator/migrations/__init__.py",
          "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py"
          ],
          "candidate": [
            "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py"
          ]
        }
      },
      "candidate_diff": {
        "slo_generator/migrations/__init__.py||slo_generator/migrations/__init__.py": [
          "File: slo_generator/migrations/__init__.py -> slo_generator/migrations/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright 2021 Google Inc.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: # you may not use this file except in compliance with the License.",
          "5: # You may obtain a copy of the License at",
          "6: #",
          "7: #            http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: # See the License for the specific language governing permissions and",
          "13: # limitations under the License.",
          "",
          "---------------"
        ],
        "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py": [
          "File: slo_generator/migrations/migrator.py -> slo_generator/migrations/migrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright 2021 Google Inc.",
          "2: #",
          "3: # Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: # you may not use this file except in compliance with the License.",
          "5: # You may obtain a copy of the License at",
          "6: #",
          "7: #            http://www.apache.org/licenses/LICENSE-2.0",
          "8: #",
          "9: # Unless required by applicable law or agreed to in writing, software",
          "10: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: # See the License for the specific language governing permissions and",
          "13: # limitations under the License.",
          "14: \"\"\"",
          "15: `v1tov2.py`",
          "16: Migrate utilities for migrating slo-generator configs from v1 to v2.",
          "17: \"\"\"",
          "18: # pylint: disable=line-too-long, too-many-statements, too-many-ancestors, too-many-locals, too-many-nested-blocks, unused-argument",
          "19: # flake8: noqa",
          "20: import copy",
          "21: import itertools",
          "22: import pprint",
          "23: import random",
          "24: import string",
          "25: import sys",
          "26: from collections import OrderedDict",
          "27: from pathlib import Path",
          "29: import click",
          "30: import ruamel.yaml as yaml",
          "32: from slo_generator import utils",
          "33: from slo_generator.constants import (METRIC_LABELS_COMPAT,",
          "34:                                      METRIC_METADATA_LABELS_TOP_COMPAT,",
          "35:                                      PROVIDERS_COMPAT, CONFIG_SCHEMA,",
          "36:                                      SLO_CONFIG_SCHEMA, GREEN, RED, BOLD,",
          "37:                                      WARNING, ENDC, SUCCESS, FAIL, RIGHT_ARROW)",
          "39: yaml.explicit_start = True",
          "40: yaml.default_flow_style = None",
          "41: yaml.preserve_quotes = True",
          "44: def do_migrate(source,",
          "45:                target,",
          "46:                error_budget_policy_path,",
          "47:                glob,",
          "48:                version,",
          "49:                quiet=False,",
          "50:                verbose=0):",
          "51:     \"\"\"Process all SLO configs in folder and generate new SLO configurations.",
          "53:     Args:",
          "54:         source (str): Source SLO configs folder.",
          "55:         target (str): Target SLO configs folder.",
          "56:         error_budget_policy_path (str): Error budget policy path.",
          "57:         glob (str): Glob expression to add to source path.",
          "58:         version (str): slo-generator major version string (e.g: v1, v2, ...)",
          "59:         quiet (bool, optional): If true, do not prompt for user input.",
          "60:         verbose (int, optional): Verbose level.",
          "61:     \"\"\"",
          "62:     shared_config = CONFIG_SCHEMA",
          "63:     cwd = Path.cwd()",
          "64:     source = Path(source).resolve()",
          "65:     target = Path(target).resolve()",
          "66:     source_str = source.relative_to(cwd)  # human-readable path",
          "67:     target_str = target.relative_to(cwd)  # human-readable path",
          "68:     error_budget_policy_path = Path(error_budget_policy_path)",
          "70:     # Create target folder if it doesn't exist",
          "71:     target.mkdir(parents=True, exist_ok=True)",
          "73:     # Process SLO configs",
          "74:     click.secho('=' * 50)",
          "75:     click.secho(f\"Migrating slo-generator configs to {version} ...\",",
          "76:                 fg='cyan',",
          "77:                 bold=True)",
          "79:     paths = Path(source).glob(glob)",
          "81:     if not peek(paths):",
          "82:         click.secho(f\"{FAIL} No SLO configs found in {source}\",",
          "83:                     fg='red',",
          "84:                     bold=True)",
          "85:         sys.exit(1)",
          "87:     for source_path in paths:",
          "88:         source_path_str = source_path.relative_to(cwd)",
          "89:         if source == target == cwd:",
          "90:             target_path = target.joinpath(*source_path.relative_to(cwd).parts)",
          "91:         else:",
          "92:             target_path = target.joinpath(",
          "94:         target_path_str = target_path.relative_to(cwd)",
          "95:         slo_config_str = source_path.open().read()",
          "96:         slo_config, ind, blc = yaml.util.load_yaml_guess_indent(slo_config_str)",
          "97:         curver = get_config_version(slo_config)",
          "99:         # Source path info",
          "100:         click.secho(\"-\" * 50)",
          "101:         click.secho(f\"{WARNING}{source_path_str}{ENDC} [{curver}] \")",
          "103:         # If config version is same as target version, continue",
          "104:         if curver == version:",
          "105:             click.secho(",
          "106:                 f'{FAIL} {source_path_str} is already in {version} format',",
          "107:                 fg='red',",
          "108:                 bold=True)",
          "109:             continue",
          "111:         # Create target dirs if needed",
          "112:         target_path.parent.mkdir(parents=True, exist_ok=True)",
          "114:         # Run vx to vy migrator method",
          "115:         func = getattr(sys.modules[__name__], f\"slo_config_{curver}to{version}\")",
          "116:         slo_config_v2 = func(slo_config, shared_config, quiet=quiet)",
          "118:         # Write resulting config to target path",
          "119:         extra = '(replaced)' if target_path_str == source_path_str else ''",
          "120:         click.secho(",
          "121:             f\"{RIGHT_ARROW} {GREEN}{target_path_str}{ENDC} [{version}] {extra}\")",
          "122:         with target_path.open('w') as conf:",
          "123:             yaml.round_trip_dump(",
          "124:                 slo_config_v2,",
          "125:                 conf,",
          "126:                 indent=ind,",
          "127:                 block_seq_indent=blc,",
          "128:                 default_flow_style=None,",
          "129:             )",
          "130:         click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "132:     # Translate error budget policy to v2 and put into shared config",
          "133:     error_budget_policy = yaml.load(open(error_budget_policy_path),",
          "134:                                     Loader=yaml.Loader)",
          "135:     for step in error_budget_policy:",
          "136:         step['name'] = step.pop('error_budget_policy_step_name')",
          "137:         step['burn_rate_threshold'] = step.pop('alerting_burn_rate_threshold')",
          "138:         step['alert'] = step.pop('urgent_notification')",
          "139:         step['message_alert'] = step.pop('overburned_consequence_message')",
          "140:         step['message_ok'] = step.pop('achieved_consequence_message')",
          "141:         step['window'] = step.pop('measurement_window_seconds')",
          "143:     ebp = {'steps': error_budget_policy}",
          "144:     if error_budget_policy_path.name == 'error_budget_policy.yaml':",
          "145:         ebp_key = 'default'",
          "146:     else:",
          "147:         ebp_key = error_budget_policy_path.name",
          "148:     shared_config['error_budget_policies'][ebp_key] = ebp",
          "149:     shared_config_path = target / 'config.yaml'",
          "150:     shared_config_path_str = shared_config_path.relative_to(cwd)",
          "152:     # Write shared config to file",
          "153:     click.secho('=' * 50)",
          "154:     with shared_config_path.open('w') as conf:",
          "155:         click.secho(",
          "156:             f'Writing slo-generator config to {shared_config_path_str} ...',",
          "157:             fg='cyan',",
          "158:             bold=True)",
          "159:         yaml.round_trip_dump(",
          "160:             shared_config,",
          "161:             conf,",
          "162:             Dumper=CustomDumper,",
          "163:             indent=2,",
          "164:             block_seq_indent=0,",
          "165:             explicit_start=True,",
          "166:         )",
          "167:         click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "169:     # Remove error budget policy file",
          "170:     click.secho('=' * 50)",
          "171:     click.secho(f'Removing {error_budget_policy_path} ...',",
          "172:                 fg='cyan',",
          "173:                 bold=True)",
          "174:     error_budget_policy_path.unlink()",
          "175:     click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "177:     # Print next steps",
          "178:     click.secho('=' * 50)",
          "179:     click.secho(",
          "180:         f'\\n{SUCCESS} Migration of `slo-generator` configs to v2 completed successfully ! Configs path: {target_str}/.\\n',",
          "181:         fg='green',",
          "182:         bold=True)",
          "183:     click.secho('=' * 50)",
          "184:     click.secho(",
          "185:         f'{BOLD}PLEASE FOLLOW THE MANUAL STEPS BELOW TO FINISH YOUR MIGRATION:',",
          "186:         fg='red',",
          "187:         bold=True)",
          "188:     click.secho(f\"\"\"",
          "189:     1 - Commit the updated SLO configs and your shared SLO config to version control.",
          "190:     2 - [local/k8s/cloudbuild] Update your slo-generator command:",
          "191:     {RED}  [-] slo-generator -f {source_str} -b {error_budget_policy_path}{ENDC}",
          "192:     {GREEN}  [+] slo-generator -f {target_str} -c {target_str}/config.yaml{ENDC}",
          "193:     3 - [terraform] Upgrade your `terraform-google-slo` modules:",
          "194:     3.1 - Upgrade the module `version` to 2.0.0.",
          "195:     3.2 - Replace `error_budget_policy` field in your `slo` and `slo-pipeline` modules by `shared_config`",
          "196:     3.3 - Replace `error_budget_policy.yaml` local variable to `config.yaml`",
          "197:     \"\"\")",
          "200: def slo_config_v1tov2(slo_config, shared_config={}, quiet=False, verbose=0):",
          "201:     \"\"\"Process old SLO config v1 and generate SLO config v2.",
          "203:     Args:",
          "204:         slo_config (dict): SLO Config v1.",
          "205:         shared_config (dict): SLO Generator config.",
          "206:         quiet (bool): If true, do not ask for user input.",
          "207:         verbose (int): Verbose level.",
          "209:     Returns:",
          "210:         dict: SLO Config v2.",
          "211:     \"\"\"",
          "212:     # SLO config v2 skeleton",
          "213:     slo_config_v2 = OrderedDict(copy.deepcopy(SLO_CONFIG_SCHEMA))",
          "214:     slo_config_v2['apiVersion'] = 'sre.google.com/v2'",
          "215:     slo_config_v2['kind'] = 'ServiceLevelObjective'",
          "217:     # Get fields from old config",
          "218:     slo_metadata_name = '{service_name}-{feature_name}-{slo_name}'.format(",
          "220:     slo_description = slo_config.pop('slo_description')",
          "221:     slo_target = slo_config.pop('slo_target')",
          "222:     service_level_indicator = slo_config['backend'].pop('measurement', {})",
          "223:     backend = slo_config['backend']",
          "224:     method = backend.pop('method')",
          "225:     exporters = slo_config.get('exporters', [])",
          "226:     if isinstance(exporters, dict):  # single exporter, deprecated",
          "227:         exporters = [exporters]",
          "229:     # Fill spec",
          "230:     slo_config_v2['metadata']['name'] = slo_metadata_name",
          "231:     slo_config_v2['metadata']['labels'] = {",
          "232:         'service_name': slo_config['service_name'],",
          "233:         'feature_name': slo_config['feature_name'],",
          "234:         'slo_name': slo_config['slo_name'],",
          "235:     }",
          "236:     other_labels = {",
          "237:         k: v for k, v in slo_config.items() if k not in",
          "238:         ['service_name', 'feature_name', 'slo_name', 'backend', 'exporters']",
          "239:     }",
          "240:     slo_config_v2['metadata']['labels'].update(other_labels)",
          "241:     slo_config_v2['spec']['description'] = slo_description",
          "242:     slo_config_v2['spec']['goal'] = slo_target",
          "244:     # Process backend",
          "245:     backend = OrderedDict(backend)",
          "246:     backend_key = add_to_shared_config(backend,",
          "247:                                        shared_config,",
          "248:                                        'backends',",
          "249:                                        quiet=quiet)",
          "250:     slo_config_v2['spec']['backend'] = backend_key",
          "251:     slo_config_v2['spec']['method'] = method",
          "253:     # If exporter not in general config, add it and add an alias for the",
          "254:     # exporter. Refer to the alias in the SLO config file.",
          "255:     for exporter in exporters:",
          "256:         exporter = OrderedDict(exporter)",
          "257:         exp_key = add_to_shared_config(exporter,",
          "258:                                        shared_config,",
          "259:                                        'exporters',",
          "260:                                        quiet=quiet)",
          "261:         slo_config_v2['spec']['exporters'].append(exp_key)",
          "263:     # Fill spec",
          "264:     slo_config_v2['spec']['service_level_indicator'] = service_level_indicator",
          "266:     if verbose > 0:",
          "267:         pprint.pprint(dict(slo_config_v2))",
          "268:     return dict(slo_config_v2)",
          "271: def report_v2tov1(report):",
          "272:     \"\"\"Convert SLO report from v2 to v1 format, for exporters to be",
          "273:     backward-compatible with v1 data format.",
          "275:     Args:",
          "276:         report (dict): SLO report.",
          "278:     Returns:",
          "279:         dict: Converted SLO report.",
          "280:     \"\"\"",
          "281:     mapped_report = {}",
          "282:     for key, value in report.items():",
          "284:         # If a metadata label is passed, use the metadata label mapping",
          "285:         if key == 'metadata':",
          "286:             mapped_report['metadata'] = {}",
          "287:             for subkey, subvalue in value.items():",
          "289:                 # v2 `metadata.labels` attributes map to `metadata` attributes",
          "290:                 # in v1",
          "291:                 if subkey == 'labels':",
          "292:                     labels = subvalue",
          "293:                     for labelkey, labelval in labels.items():",
          "295:                         # Top-level labels like 'service_name', 'feature_name',",
          "296:                         # and 'slo_name'.",
          "297:                         if labelkey in METRIC_METADATA_LABELS_TOP_COMPAT:",
          "298:                             mapped_report[labelkey] = labelval",
          "300:                         # Other labels that are mapped to 'metadata' in the v1",
          "301:                         # report",
          "302:                         else:",
          "303:                             mapped_report['metadata'][labelkey] = labelval",
          "305:                 # ignore the name attribute which is just a concatenation of",
          "306:                 # service_name, feature_name and slo_name",
          "307:                 elif subkey == 'name':",
          "308:                     continue",
          "310:                 # other metadata labels are still mapped to the v1 `metadata`",
          "311:                 # attributes",
          "312:                 else:",
          "313:                     mapped_report['metadata'][subkey] = subvalue",
          "315:         # If a key in the default label mapping is passed, use the default",
          "316:         # label mapping",
          "317:         elif key in METRIC_LABELS_COMPAT.keys():",
          "318:             mapped_report.update({METRIC_LABELS_COMPAT[key]: value})",
          "320:         # Otherwise, write the label as is",
          "321:         else:",
          "322:             mapped_report.update({key: value})",
          "323:     return mapped_report",
          "326: def get_random_suffix():",
          "327:     \"\"\"Get random suffix for our backends / exporters when configs clash.\"\"\"",
          "328:     return ''.join(random.choices(string.digits, k=4))",
          "331: def add_to_shared_config(new_obj, shared_config, section, quiet=False):",
          "332:     \"\"\"Add an object to the shared_config.",
          "334:     If the object with the same config already exists in the shared config,",
          "335:     simply return its key.",
          "337:     If the object does not exist in the shared config:",
          "341:     Args:",
          "342:         new_obj (OrderedDict): Object to add to shared_config.",
          "343:         shared_config (dict): Shared config to add object to.",
          "344:         section (str): Section name in shared config to add the object under.",
          "345:         quiet (bool): If True, do not ask for user input.",
          "347:     Returns:",
          "348:         str: Object key in the shared config.",
          "349:     \"\"\"",
          "350:     shared_obj = shared_config[section]",
          "351:     key = new_obj.pop('class')",
          "352:     if '.' not in key:",
          "353:         key = utils.caml_to_snake(PROVIDERS_COMPAT.get(key, key))",
          "355:     existing_obj = {",
          "356:         k: v",
          "357:         for k, v in shared_obj.items()",
          "358:         if k.startswith(key.split('/')[0]) and str(v) == str(dict(new_obj))",
          "359:     }",
          "360:     if existing_obj:",
          "361:         key = next(iter(existing_obj))",
          "362:         # click.secho(f'Found existing {section} {key}')",
          "363:     else:",
          "364:         if key in shared_obj.keys():  # key conflicts",
          "365:             if quiet:",
          "366:                 key += '/' + get_random_suffix()",
          "367:             else:",
          "368:                 name = section.rstrip('s')",
          "369:                 cfg = pprint.pformat({key: dict(new_obj)})",
          "370:                 valid = False",
          "371:                 while not valid:",
          "372:                     click.secho(",
          "373:                         f'\\nNew {name} found with the following config:\\n{cfg}',",
          "374:                         fg='cyan',",
          "375:                         blink=True)",
          "376:                     user_input = click.prompt(",
          "377:                         f'\\n{RED}{BOLD}Please give this {name} a name:{ENDC}',",
          "378:                         type=str)",
          "379:                     key += '/' + user_input.lower()",
          "380:                     if key in shared_obj.keys():",
          "381:                         click.secho(",
          "382:                             f'{name.capitalize()} \"{key}\" already exists in shared config',",
          "383:                             fg='red',",
          "384:                             bold=True)",
          "385:                     else:",
          "386:                         valid = True",
          "387:                 click.secho(f'Backend {key} was added to shared config.',",
          "388:                             fg='green',",
          "389:                             bold=True)",
          "391:         # click.secho(f\"Adding new {section} {key}\")",
          "392:         shared_obj[key] = dict(new_obj)",
          "393:         shared_config[section] = dict(sorted(shared_obj.items()))",
          "394:     return key",
          "397: def get_config_version(config):",
          "398:     \"\"\"Return version of an slo-generator config based on the format.",
          "400:     Args:",
          "401:         config (dict): slo-generator configuration.",
          "403:     Returns:",
          "404:         str: SLO config version.",
          "405:     \"\"\"",
          "406:     api_version = config.get('apiVersion', '')",
          "407:     kind = config.get('kind', '')",
          "408:     if not kind:  # old v1 format",
          "409:         return 'v1'",
          "410:     return api_version.split('/')[-1]",
          "413: def peek(iterable):",
          "414:     \"\"\"Check if iterable is empty.",
          "416:     Args:",
          "417:         iterable (collections.Iterable): an iterable",
          "419:     Returns:",
          "420:         iterable (collections.Iterable): the same iterable, or None if empty.",
          "421:     \"\"\"",
          "422:     try:",
          "423:         first = next(iterable)",
          "424:     except StopIteration:",
          "425:         return None",
          "426:     return first, itertools.chain([first], iterable)",
          "429: class CustomDumper(yaml.RoundTripDumper):",
          "430:     \"\"\"Dedicated YAML dumper to insert lines between top-level objects.",
          "432:     Args:",
          "433:         data (str): Line data.",
          "434:     \"\"\"",
          "436:     # HACK: insert blank lines between top-level objects",
          "437:     # inspired by https://stackoverflow.com/a/44284819/3786245",
          "438:     def write_line_break(self, data=None):",
          "439:         super().write_line_break(data)",
          "441:         if len(self.indents) == 1:",
          "442:             super().write_line_break()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51b956b85e7769725c46be3579cc51c4b02bd333",
      "candidate_info": {
        "commit_hash": "51b956b85e7769725c46be3579cc51c4b02bd333",
        "repo": "google/slo-generator",
        "commit_url": "https://github.com/google/slo-generator/commit/51b956b85e7769725c46be3579cc51c4b02bd333",
        "files": [
          "Dockerfile",
          "setup.py",
          "slo_generator/backends/cloud_service_monitoring.py",
          "slo_generator/cli.py",
          "slo_generator/migrations/migrator.py",
          "slo_generator/report.py"
        ],
        "message": "fix: Migrator and dependency issues fixes (#160)\n\n* Update migrator to fail softly when invalid YAMLs are found\n\n* Add support for multiple error budget policies\n\n* Fix migrator\n\n* Fix lint\n\n* Fix dependency issue\n\n* Remove libgdal from Dockerfile",
        "before_after_code_files": [
          "setup.py||setup.py",
          "slo_generator/backends/cloud_service_monitoring.py||slo_generator/backends/cloud_service_monitoring.py",
          "slo_generator/cli.py||slo_generator/cli.py",
          "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py",
          "slo_generator/report.py||slo_generator/report.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py"
          ],
          "candidate": [
            "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     'prometheus': ['prometheus-client', 'prometheus-http-client'],",
          "43:     'datadog': ['datadog', 'retrying==1.3.3'],",
          "44:     'dynatrace': ['requests'],",
          "48:     'cloud_monitoring': [",
          "50:     ],",
          "51:     'cloud_service_monitoring': [",
          "59:     ],",
          "60:     'elasticsearch': ['elasticsearch'],",
          "61:     'dev': ['wheel', 'flake8', 'mock', 'coverage', 'nose', 'pylint']",
          "62: }",
          "",
          "[Removed Lines]",
          "45:     'bigquery': [",
          "46:         'google-api-python-client < 2.0.0', 'google-cloud-bigquery < 3.0.0'",
          "47:     ],",
          "49:         'google-api-python-client < 2.0.0', 'google-cloud-monitoring < 2.0.0'",
          "52:         'google-api-python-client < 2.0.0', 'google-cloud-monitoring < 2.0.0'",
          "53:     ],",
          "54:     'cloud_storage': [",
          "55:         'google-api-python-client < 2.0.0', 'google-cloud-storage'",
          "56:     ],",
          "57:     'pubsub': [",
          "58:         'google-api-python-client < 2.0.0', 'google-cloud-pubsub==1.7.0'",
          "",
          "[Added Lines]",
          "45:     'bigquery': ['google-api-python-client <2', 'google-cloud-bigquery <3'],",
          "47:         'google-api-python-client <2', 'google-cloud-monitoring <2'",
          "50:         'google-api-python-client <2', 'google-cloud-monitoring <2'",
          "52:     'cloud_storage': ['google-api-python-client <2', 'google-cloud-storage'],",
          "53:     'pubsub': ['google-api-python-client <2', 'google-cloud-pubsub <2'],",
          "",
          "---------------"
        ],
        "slo_generator/backends/cloud_service_monitoring.py||slo_generator/backends/cloud_service_monitoring.py": [
          "File: slo_generator/backends/cloud_service_monitoring.py -> slo_generator/backends/cloud_service_monitoring.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         for idx, string in enumerate(difflib.ndiff(string1, string2)):",
          "608:             if string[0] == ' ':",
          "609:                 continue",
          "610:             if string[0] == '-':",
          "612:                 lines.append(info)",
          "613:             elif string[0] == '+':",
          "615:                 lines.append(info)",
          "616:         return lines",
          "",
          "[Removed Lines]",
          "611:                 info = u'Delete \"{}\" from position {}'.format(string[-1], idx)",
          "614:                 info = u'Add \"{}\" to position {}'.format(string[-1], idx)",
          "",
          "[Added Lines]",
          "610:             last = string[-1]",
          "612:                 info = f'Delete \"{last}\" from position {idx}'",
          "615:                 info = f'Add \"{last}\" to position {idx}'",
          "",
          "---------------"
        ],
        "slo_generator/cli.py||slo_generator/cli.py": [
          "File: slo_generator/cli.py -> slo_generator/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:               '-b',",
          "161:               type=click.Path(exists=True, resolve_path=True, readable=True),",
          "162:               required=False,",
          "164:               help='Error budget policy path')",
          "165: @click.option('--glob',",
          "166:               type=str,",
          "167:               required=False,",
          "",
          "[Removed Lines]",
          "163:               default='error_budget_policy.yaml',",
          "",
          "[Added Lines]",
          "163:               multiple=True,",
          "164:               default=['error_budget_policy.yaml'],",
          "166: @click.option('--exporters-path',",
          "167:               '-e',",
          "168:               type=click.Path(exists=True, resolve_path=True, readable=True),",
          "169:               required=False,",
          "170:               multiple=True,",
          "171:               help='Exporters path')",
          "",
          "---------------"
        ],
        "slo_generator/migrations/migrator.py||slo_generator/migrations/migrator.py": [
          "File: slo_generator/migrations/migrator.py -> slo_generator/migrations/migrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from pathlib import Path",
          "29: import click",
          "32: from slo_generator import utils",
          "33: from slo_generator.constants import (METRIC_LABELS_COMPAT,",
          "",
          "[Removed Lines]",
          "30: import ruamel.yaml as yaml",
          "",
          "[Added Lines]",
          "30: from ruamel import yaml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: def do_migrate(source,",
          "45:                target,",
          "46:                error_budget_policy_path,",
          "47:                glob,",
          "48:                version,",
          "49:                quiet=False,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:                exporters_path,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     Args:",
          "54:         source (str): Source SLO configs folder.",
          "55:         target (str): Target SLO configs folder.",
          "57:         glob (str): Glob expression to add to source path.",
          "58:         version (str): slo-generator major version string (e.g: v1, v2, ...)",
          "59:         quiet (bool, optional): If true, do not prompt for user input.",
          "60:         verbose (int, optional): Verbose level.",
          "61:     \"\"\"",
          "62:     shared_config = CONFIG_SCHEMA",
          "63:     cwd = Path.cwd()",
          "64:     source = Path(source).resolve()",
          "65:     target = Path(target).resolve()",
          "66:     source_str = source.relative_to(cwd)  # human-readable path",
          "67:     target_str = target.relative_to(cwd)  # human-readable path",
          "70:     # Create target folder if it doesn't exist",
          "71:     target.mkdir(parents=True, exist_ok=True)",
          "73:     # Process SLO configs",
          "74:     click.secho('=' * 50)",
          "75:     click.secho(f\"Migrating slo-generator configs to {version} ...\",",
          "76:                 fg='cyan',",
          "77:                 bold=True)",
          "81:     if not peek(paths):",
          "82:         click.secho(f\"{FAIL} No SLO configs found in {source}\",",
          "83:                     fg='red',",
          "84:                     bold=True)",
          "85:         sys.exit(1)",
          "87:     for source_path in paths:",
          "88:         source_path_str = source_path.relative_to(cwd)",
          "89:         if source == target == cwd:",
          "",
          "[Removed Lines]",
          "56:         error_budget_policy_path (str): Error budget policy path.",
          "68:     error_budget_policy_path = Path(error_budget_policy_path)",
          "79:     paths = Path(source).glob(glob)",
          "",
          "[Added Lines]",
          "57:         error_budget_policy_path (list): Error budget policy paths.",
          "58:         exporters_path (list): Exporters paths.",
          "64:     curver = 'v1'",
          "71:     ebp_paths = [Path(ebp) for ebp in error_budget_policy_path]",
          "72:     exporters_paths = [Path(exp) for exp in exporters_path]",
          "77:     # Translate error budget policy to v2 and put into shared config",
          "78:     if ebp_paths:",
          "79:         ebp_func = getattr(sys.modules[__name__], f\"ebp_{curver}to{version}\")",
          "80:         ebp_func(",
          "81:             ebp_paths,",
          "82:             shared_config=shared_config,",
          "83:             quiet=quiet,",
          "84:         )",
          "86:     # Translate exporters to v2 and put into shared config",
          "87:     if exporters_paths:",
          "88:         exporters_func = getattr(sys.modules[__name__],",
          "89:                                  f\"exporters_{curver}to{version}\")",
          "90:         exp_keys = exporters_func(",
          "91:             exporters_paths,",
          "92:             shared_config=shared_config,",
          "93:             quiet=quiet,",
          "94:         )",
          "101:     paths = Path(source).glob(glob)  # find all files in source path",
          "108:     curver = ''",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         target_path_str = target_path.relative_to(cwd)",
          "95:         slo_config_str = source_path.open().read()",
          "96:         slo_config, ind, blc = yaml.util.load_yaml_guess_indent(slo_config_str)",
          "98:         if not curver:",
          "99:             continue",
          "",
          "[Removed Lines]",
          "97:         curver = get_config_version(slo_config)",
          "",
          "[Added Lines]",
          "119:         curver = detect_config_version(slo_config)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:         target_path.parent.mkdir(parents=True, exist_ok=True)",
          "116:         # Run vx to vy migrator method",
          "119:         if not slo_config_v2:",
          "120:             continue",
          "",
          "[Removed Lines]",
          "117:         func = getattr(sys.modules[__name__], f\"slo_config_{curver}to{version}\")",
          "118:         slo_config_v2 = func(slo_config, shared_config, quiet=quiet)",
          "",
          "[Added Lines]",
          "139:         slo_func = getattr(sys.modules[__name__],",
          "140:                            f\"slo_config_{curver}to{version}\")",
          "141:         slo_config_v2 = slo_func(",
          "142:             slo_config,",
          "143:             shared_config=shared_config,",
          "144:             shared_exporters=exp_keys,",
          "145:             quiet=quiet,",
          "146:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "133:             )",
          "134:         click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "156:     # Write shared config to file",
          "157:     click.secho('=' * 50)",
          "158:     with shared_config_path.open('w') as conf:",
          "159:         click.secho(",
          "160:             f'Writing slo-generator config to {shared_config_path_str} ...',",
          "",
          "[Removed Lines]",
          "136:     # Translate error budget policy to v2 and put into shared config",
          "137:     error_budget_policy = yaml.load(open(error_budget_policy_path),",
          "138:                                     Loader=yaml.Loader)",
          "139:     for step in error_budget_policy:",
          "140:         step['name'] = step.pop('error_budget_policy_step_name')",
          "141:         step['burn_rate_threshold'] = step.pop('alerting_burn_rate_threshold')",
          "142:         step['alert'] = step.pop('urgent_notification')",
          "143:         step['message_alert'] = step.pop('overburned_consequence_message')",
          "144:         step['message_ok'] = step.pop('achieved_consequence_message')",
          "145:         step['window'] = step.pop('measurement_window_seconds')",
          "147:     ebp = {'steps': error_budget_policy}",
          "148:     if error_budget_policy_path.name == 'error_budget_policy.yaml':",
          "149:         ebp_key = 'default'",
          "150:     else:",
          "151:         ebp_key = error_budget_policy_path.name",
          "152:     shared_config['error_budget_policies'][ebp_key] = ebp",
          "153:     shared_config_path = target / 'config.yaml'",
          "154:     shared_config_path_str = shared_config_path.relative_to(cwd)",
          "",
          "[Added Lines]",
          "166:     shared_config_path = target / 'config.yaml'",
          "167:     shared_config_path_str = shared_config_path.relative_to(cwd)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:         click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "173:     # Remove error budget policy file",
          "181:     # Print next steps",
          "182:     click.secho('=' * 50)",
          "183:     click.secho(",
          "184:         f'\\n{SUCCESS} Migration of `slo-generator` configs to v2 completed successfully ! Configs path: {target_str}/.\\n',",
          "",
          "[Removed Lines]",
          "174:     click.secho('=' * 50)",
          "175:     click.secho(f'Removing {error_budget_policy_path} ...',",
          "176:                 fg='cyan',",
          "177:                 bold=True)",
          "178:     error_budget_policy_path.unlink()",
          "179:     click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "",
          "[Added Lines]",
          "184:     # click.secho('=' * 50)",
          "185:     # click.secho(f'Removing {error_budget_policy_path} ...',",
          "186:     #             fg='cyan',",
          "187:     #             bold=True)",
          "188:     # error_budget_policy_path.unlink()",
          "189:     # click.secho(f'{SUCCESS} Success !', fg='green', bold=True)",
          "192:     relative_ebp_path = ebp_paths[0].relative_to(cwd)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "192:     click.secho(f\"\"\"",
          "193:     1 - Commit the updated SLO configs and your shared SLO config to version control.",
          "194:     2 - [local/k8s/cloudbuild] Update your slo-generator command:",
          "196:     {GREEN}  [+] slo-generator -f {target_str} -c {target_str}/config.yaml{ENDC}",
          "201:     \"\"\")",
          "205:     \"\"\"Process old SLO config v1 and generate SLO config v2.",
          "207:     Args:",
          "208:         slo_config (dict): SLO Config v1.",
          "209:         shared_config (dict): SLO Generator config.",
          "210:         quiet (bool): If true, do not ask for user input.",
          "211:         verbose (int): Verbose level.",
          "",
          "[Removed Lines]",
          "195:     {RED}  [-] slo-generator -f {source_str} -b {error_budget_policy_path}{ENDC}",
          "197:     3 - [terraform] Upgrade your `terraform-google-slo` modules:",
          "198:     3.1 - Upgrade the module `version` to 2.0.0.",
          "199:     3.2 - Replace `error_budget_policy` field in your `slo` and `slo-pipeline` modules by `shared_config`",
          "200:     3.3 - Replace `error_budget_policy.yaml` local variable to `config.yaml`",
          "204: def slo_config_v1tov2(slo_config, shared_config={}, quiet=False, verbose=0):",
          "",
          "[Added Lines]",
          "206:     {RED}  [-] slo-generator -f {source_str} -b {relative_ebp_path}{ENDC}",
          "209:     # 3 - [terraform] Upgrade your `terraform-google-slo` modules:",
          "210:     # 3.1 - Upgrade the module `version` to 2.0.0.",
          "211:     # 3.2 - Replace `error_budget_policy` field in your `slo` and `slo-pipeline` modules by `shared_config`",
          "212:     # 3.3 - Replace `error_budget_policy.yaml` local variable to `config.yaml`",
          "215: def exporters_v1tov2(exporters_paths, shared_config={}, quiet=False):",
          "216:     \"\"\"Translate exporters to v2 and put into shared config.",
          "218:     Args:",
          "219:         exporters_path (list): List of exporters file paths.",
          "220:         shared_config (dict): Shared config to add exporters to.",
          "221:         quiet (bool): Quiet mode.",
          "223:     Returns:",
          "224:         list: List of exporters keys added to shared config.",
          "225:     \"\"\"",
          "226:     exp_keys = []",
          "227:     for exp_path in exporters_paths:",
          "228:         with open(exp_path, encoding='utf-8') as conf:",
          "229:             content = yaml.load(conf, Loader=yaml.Loader)",
          "230:         exporters = content",
          "232:         # If exporters file has sections, concatenate all of them",
          "233:         if isinstance(content, dict):",
          "234:             exporters = []",
          "235:             for _, value in content.items():",
          "236:                 exporters.extend(value)",
          "237:             print(exporters)",
          "239:         # If exporter not in general config, add it and add an alias for the",
          "240:         # exporter. Refer to the alias in the SLO config file.",
          "241:         for exporter in exporters:",
          "242:             print(exporter)",
          "243:             exporter = OrderedDict(exporter)",
          "244:             exp_key = add_to_shared_config(exporter,",
          "245:                                            shared_config,",
          "246:                                            'exporters',",
          "247:                                            quiet=quiet)",
          "248:             exp_keys.append(exp_key)",
          "249:     return exp_keys",
          "252: def ebp_v1tov2(ebp_paths, shared_config={}, quiet=False):",
          "253:     \"\"\"Translate error budget policies to v2 and put into shared config",
          "255:     Args:",
          "256:         ebp_paths (list): List of error budget policies file paths.",
          "257:         shared_config (dict): Shared config to add exporters to.",
          "258:         quiet (bool): Quiet mode.",
          "260:     Returns:",
          "261:         list: List of error budget policies keys added to shared config.",
          "262:     \"\"\"",
          "263:     ebp_keys = []",
          "264:     for ebp_path in ebp_paths:",
          "265:         with open(ebp_path, encoding='utf-8') as conf:",
          "266:             error_budget_policy = yaml.load(conf, Loader=yaml.Loader)",
          "267:         for step in error_budget_policy:",
          "268:             step['name'] = step.pop('error_budget_policy_step_name')",
          "269:             step['burn_rate_threshold'] = step.pop(",
          "270:                 'alerting_burn_rate_threshold')",
          "271:             step['alert'] = step.pop('urgent_notification')",
          "272:             step['message_alert'] = step.pop('overburned_consequence_message')",
          "273:             step['message_ok'] = step.pop('achieved_consequence_message')",
          "274:             step['window'] = step.pop('measurement_window_seconds')",
          "276:         ebp = {'steps': error_budget_policy}",
          "277:         if ebp_path.name == 'error_budget_policy.yaml':",
          "278:             ebp_key = 'default'",
          "279:         else:",
          "280:             ebp_key = ebp_path.stem.replace('error_budget_policy_', '')",
          "281:         ebp_key = add_to_shared_config(ebp,",
          "282:                                        shared_config,",
          "283:                                        'error_budget_policies',",
          "284:                                        ebp_key,",
          "285:                                        quiet=quiet)",
          "286:         ebp_keys.append(ebp_key)",
          "287:     return ebp_keys",
          "290: def slo_config_v1tov2(slo_config,",
          "291:                       shared_config={},",
          "292:                       shared_exporters=[],",
          "293:                       quiet=False,",
          "294:                       verbose=0):",
          "300:         shared_exporters (list): Shared exporters keys to add to SLO configs.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "273:                                        quiet=quiet)",
          "274:         slo_config_v2['spec']['exporters'].append(exp_key)",
          "276:     # Fill spec",
          "277:     slo_config_v2['spec']['service_level_indicator'] = service_level_indicator",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     # Add shared exporters to slo config",
          "368:     for exp_key in shared_exporters:",
          "369:         slo_config_v2['spec']['exporters'].append(exp_key)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "341:     return ''.join(random.choices(string.digits, k=4))",
          "345:     \"\"\"Add an object to the shared_config.",
          "347:     If the object with the same config already exists in the shared config,",
          "",
          "[Removed Lines]",
          "344: def add_to_shared_config(new_obj, shared_config, section, quiet=False):",
          "",
          "[Added Lines]",
          "439: def add_to_shared_config(new_obj,",
          "440:                          shared_config,",
          "441:                          section,",
          "442:                          key=None,",
          "443:                          quiet=False):",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "355:         new_obj (OrderedDict): Object to add to shared_config.",
          "356:         shared_config (dict): Shared config to add object to.",
          "357:         section (str): Section name in shared config to add the object under.",
          "358:         quiet (bool): If True, do not ask for user input.",
          "360:     Returns:",
          "361:         str: Object key in the shared config.",
          "362:     \"\"\"",
          "363:     shared_obj = shared_config[section]",
          "365:     if '.' not in key:",
          "366:         key = utils.caml_to_snake(PROVIDERS_COMPAT.get(key, key))",
          "",
          "[Removed Lines]",
          "364:     key = new_obj.pop('class')",
          "",
          "[Added Lines]",
          "457:         key (str): Key if cannot be infered.",
          "464:     key = key or new_obj.pop('class', None)",
          "465:     if not key:",
          "466:         raise ValueError(\"Object key is undefined.\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "409:     return key",
          "413:     \"\"\"Return version of an slo-generator config based on the format.",
          "415:     Args:",
          "",
          "[Removed Lines]",
          "412: def get_config_version(config):",
          "",
          "[Added Lines]",
          "514: def detect_config_version(config):",
          "",
          "---------------"
        ],
        "slo_generator/report.py||slo_generator/report.py": [
          "File: slo_generator/report.py -> slo_generator/report.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:             if name not in kwargs:",
          "357:                 continue",
          "358:             value = kwargs[name]",
          "360:                 value = lambdas[name](value)",
          "361:             setattr(self, name, value)",
          "",
          "[Removed Lines]",
          "359:             if name in lambdas.keys():",
          "",
          "[Added Lines]",
          "359:             if name in lambdas:",
          "",
          "---------------"
        ]
      }
    }
  ]
}