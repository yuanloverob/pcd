{
  "cve_id": "CVE-2024-1892",
  "cve_desc": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the XMLFeedSpider class of the scrapy/scrapy project, specifically in the parsing of XML content. By crafting malicious XML content that exploits inefficient regular expression complexity used in the parsing process, an attacker can cause a denial-of-service (DoS) condition. This vulnerability allows for the system to hang and consume significant resources, potentially rendering services that utilize Scrapy for XML processing unresponsive.",
  "repo": "scrapy/scrapy",
  "patch_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
  "patch_info": {
    "commit_hash": "479619b340f197a8f24c5db45bc068fb8755f2c5",
    "repo": "scrapy/scrapy",
    "commit_url": "https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5",
    "files": [
      "docs/faq.rst",
      "docs/news.rst",
      "docs/topics/debug.rst",
      "scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py",
      "scrapy/utils/response.py",
      "tests/test_spider.py",
      "tests/test_utils_iterators.py",
      "tests/test_utils_response.py"
    ],
    "message": "Merge branch '2.11-redos' into 2.11",
    "before_after_code_files": [
      "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
      "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
      "scrapy/utils/response.py||scrapy/utils/response.py",
      "tests/test_spider.py||tests/test_spider.py",
      "tests/test_utils_iterators.py||tests/test_utils_iterators.py",
      "tests/test_utils_response.py||tests/test_utils_response.py"
    ]
  },
  "patch_diff": {
    "scrapy/spiders/feed.py||scrapy/spiders/feed.py": [
      "File: scrapy/spiders/feed.py -> scrapy/spiders/feed.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from scrapy.exceptions import NotConfigured, NotSupported",
      "8: from scrapy.selector import Selector",
      "9: from scrapy.spiders import Spider",
      "11: from scrapy.utils.spider import iterate_spider_output",
      "",
      "[Removed Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter",
      "",
      "[Added Lines]",
      "10: from scrapy.utils.iterators import csviter, xmliter_lxml",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:         return self.parse_nodes(response, nodes)",
      "86:     def _iternodes(self, response):",
      "88:             self._register_namespaces(node)",
      "89:             yield node",
      "",
      "[Removed Lines]",
      "87:         for node in xmliter(response, self.itertag):",
      "",
      "[Added Lines]",
      "87:         for node in xmliter_lxml(response, self.itertag):",
      "",
      "---------------"
    ],
    "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
      "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     cast,",
      "17:     overload,",
      "18: )",
      "20: from scrapy.http import Response, TextResponse",
      "21: from scrapy.selector import Selector",
      "22: from scrapy.utils.python import re_rsearch, to_unicode",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from warnings import warn",
      "21: from lxml import etree",
      "23: from scrapy.exceptions import ScrapyDeprecationWarning",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     - a unicode string",
      "39:     - a string encoded as utf-8",
      "40:     \"\"\"",
      "41:     nodename_patt = re.escape(nodename)",
      "43:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     warn(",
      "46:         (",
      "47:             \"xmliter is deprecated and its use strongly discouraged because \"",
      "48:             \"it is vulnerable to ReDoS attacks. Use xmliter_lxml instead. See \"",
      "49:             \"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\"",
      "50:         ),",
      "51:         ScrapyDeprecationWarning,",
      "52:         stacklevel=2,",
      "53:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     namespace: Optional[str] = None,",
      "82:     prefix: str = \"x\",",
      "83: ) -> Generator[Selector, Any, None]:",
      "86:     reader = _StreamReader(obj)",
      "87:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
      "88:     iterable = etree.iterparse(",
      "90:     )",
      "91:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
      "93:         nodetext = etree.tostring(node, encoding=\"unicode\")",
      "94:         node.clear()",
      "95:         xs = Selector(text=nodetext, type=\"xml\")",
      "",
      "[Removed Lines]",
      "84:     from lxml import etree",
      "89:         cast(\"SupportsReadClose[bytes]\", reader), tag=tag, encoding=reader.encoding",
      "92:     for _, node in iterable:",
      "",
      "[Added Lines]",
      "101:         cast(\"SupportsReadClose[bytes]\", reader),",
      "102:         encoding=reader.encoding,",
      "103:         events=(\"end\", \"start-ns\"),",
      "104:         huge_tree=True,",
      "107:     needs_namespace_resolution = not namespace and \":\" in nodename",
      "108:     if needs_namespace_resolution:",
      "109:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
      "110:     for event, data in iterable:",
      "111:         if event == \"start-ns\":",
      "112:             assert isinstance(data, tuple)",
      "113:             if needs_namespace_resolution:",
      "114:                 _prefix, _namespace = data",
      "115:                 if _prefix != prefix:",
      "116:                     continue",
      "117:                 namespace = _namespace",
      "118:                 needs_namespace_resolution = False",
      "119:                 selxpath = f\"//{prefix}:{nodename}\"",
      "120:                 tag = f\"{{{namespace}}}{nodename}\"",
      "121:             continue",
      "122:         assert isinstance(data, etree._Element)",
      "123:         node = data",
      "124:         if node.tag != tag:",
      "125:             continue",
      "",
      "---------------"
    ],
    "scrapy/utils/response.py||scrapy/utils/response.py": [
      "File: scrapy/utils/response.py -> scrapy/utils/response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     return b\"\".join(values)",
      "77: def open_in_browser(",
      "78:     response: Union[",
      "79:         \"scrapy.http.response.html.HtmlResponse\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77: def _remove_html_comments(body):",
      "78:     start = body.find(b\"<!--\")",
      "79:     while start != -1:",
      "80:         end = body.find(b\"-->\", start + 1)",
      "81:         if end == -1:",
      "82:             return body[:start]",
      "83:         else:",
      "84:             body = body[:start] + body[end + 3 :]",
      "85:             start = body.find(b\"<!--\")",
      "86:     return body",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     ],",
      "82:     _openfunc: Callable[[str], Any] = webbrowser.open,",
      "83: ) -> Any:",
      "86:     \"\"\"",
      "87:     from scrapy.http import HtmlResponse, TextResponse",
      "",
      "[Removed Lines]",
      "84:     \"\"\"Open the given response in a local web browser, populating the <base>",
      "85:     tag for external links to work",
      "",
      "[Added Lines]",
      "96:     \"\"\"Open *response* in a local web browser, adjusting the `base tag`_ for",
      "97:     external links to work, e.g. so that images and styles are displayed.",
      "99:     .. _base tag: https://www.w3schools.com/tags/tag_base.asp",
      "101:     For example:",
      "103:     .. code-block:: python",
      "105:         from scrapy.utils.response import open_in_browser",
      "108:         def parse_details(self, response):",
      "109:             if \"item name\" not in response.body:",
      "110:                 open_in_browser(response)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:     body = response.body",
      "91:     if isinstance(response, HtmlResponse):",
      "92:         if b\"<base\" not in body:",
      "96:         ext = \".html\"",
      "97:     elif isinstance(response, TextResponse):",
      "98:         ext = \".txt\"",
      "",
      "[Removed Lines]",
      "93:             repl = rf'\\1<base href=\"{response.url}\">'",
      "94:             body = re.sub(b\"<!--.*?-->\", b\"\", body, flags=re.DOTALL)",
      "95:             body = re.sub(rb\"(<head(?:>|\\s.*?>))\", to_bytes(repl), body)",
      "",
      "[Added Lines]",
      "118:             _remove_html_comments(body)",
      "119:             repl = rf'\\0<base href=\"{response.url}\">'",
      "120:             body = re.sub(rb\"<head(?:[^<>]*?>)\", to_bytes(repl), body, count=1)",
      "",
      "---------------"
    ],
    "tests/test_spider.py||tests/test_spider.py": [
      "File: tests/test_spider.py -> tests/test_spider.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "151:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "152:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
      "153:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
      "155:             <other value=\"bar\" y:custom=\"fuu\"/>",
      "156:         </url>",
      "158:         </urlset>\"\"\"",
      "159:         response = XmlResponse(url=\"http://example.com/sitemap.xml\", body=body)",
      "",
      "[Removed Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
      "",
      "[Added Lines]",
      "154:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated>",
      "157:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
      "",
      "---------------"
    ],
    "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
      "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: from twisted.trial import unittest",
      "4: from scrapy.http import Response, TextResponse, XmlResponse",
      "5: from scrapy.utils.iterators import _body_or_str, csviter, xmliter, xmliter_lxml",
      "6: from tests import get_testdata",
      "12:     def test_xmliter(self):",
      "13:         body = b\"\"\"",
      "14:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "1: from pytest import mark",
      "9: class XmliterTestCase(unittest.TestCase):",
      "10:     xmliter = staticmethod(xmliter)",
      "",
      "[Added Lines]",
      "1: import pytest",
      "4: from scrapy.exceptions import ScrapyDeprecationWarning",
      "10: class XmliterBaseTestCase:",
      "11:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:             attrs, [(\"001\", [\"Name 1\"], [\"Type 1\"]), (\"002\", [\"Name 2\"], [\"Type 2\"])]",
      "41:         )",
      "43:     def test_xmliter_unusual_node(self):",
      "44:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "45:             <root>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53:         ]",
      "54:         self.assertEqual(nodenames, [[\"matchme...\"]])",
      "56:     def test_xmliter_unicode(self):",
      "57:         # example taken from https://github.com/scrapy/scrapy/issues/1665",
      "58:         body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:                 [(\"26\", [\"-\"], [\"80\"]), (\"21\", [\"Ab\"], [\"76\"]), (\"27\", [\"A\"], [\"27\"])],",
      "113:             )",
      "115:     def test_xmliter_text(self):",
      "116:         body = (",
      "117:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "123:             [[\"one\"], [\"two\"]],",
      "124:         )",
      "126:     def test_xmliter_namespaces(self):",
      "127:         body = b\"\"\"",
      "128:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "162:         self.assertEqual(node.xpath(\"id/text()\").getall(), [])",
      "163:         self.assertEqual(node.xpath(\"price/text()\").getall(), [])",
      "165:     def test_xmliter_namespaced_nodename(self):",
      "166:         body = b\"\"\"",
      "167:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "190:             [\"http://www.mydummycompany.com/images/item1.jpg\"],",
      "191:         )",
      "193:     def test_xmliter_namespaced_nodename_missing(self):",
      "194:         body = b\"\"\"",
      "195:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "214:         with self.assertRaises(StopIteration):",
      "215:             next(my_iter)",
      "217:     def test_xmliter_exception(self):",
      "218:         body = (",
      "219:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "227:         self.assertRaises(StopIteration, next, iter)",
      "229:     def test_xmliter_objtype_exception(self):",
      "230:         i = self.xmliter(42, \"product\")",
      "231:         self.assertRaises(TypeError, next, i)",
      "233:     def test_xmliter_encoding(self):",
      "234:         body = (",
      "235:             b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "241:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "244:         )",
      "254:     def test_xmliter_iterate_namespace(self):",
      "255:         body = b\"\"\"",
      "",
      "[Removed Lines]",
      "247: class LxmlXmliterTestCase(XmliterTestCase):",
      "248:     xmliter = staticmethod(xmliter_lxml)",
      "250:     @mark.xfail(reason=\"known bug of the current implementation\")",
      "251:     def test_xmliter_namespaced_nodename(self):",
      "252:         super().test_xmliter_namespaced_nodename()",
      "",
      "[Added Lines]",
      "256: class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "257:     xmliter = staticmethod(xmliter)",
      "259:     def test_deprecation(self):",
      "260:         body = b\"\"\"",
      "261:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "262:             <products>",
      "263:               <product></product>",
      "264:             </products>",
      "265:         \"\"\"",
      "266:         with pytest.warns(",
      "267:             ScrapyDeprecationWarning,",
      "268:             match=\"xmliter\",",
      "269:         ):",
      "270:             next(self.xmliter(body, \"product\"))",
      "273: class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
      "274:     xmliter = staticmethod(xmliter_lxml)",
      "",
      "---------------"
    ],
    "tests/test_utils_response.py||tests/test_utils_response.py": [
      "File: tests/test_utils_response.py -> tests/test_utils_response.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import unittest",
      "2: import warnings",
      "3: from pathlib import Path",
      "4: from urllib.parse import urlparse",
      "6: from scrapy.exceptions import ScrapyDeprecationWarning",
      "7: from scrapy.http import HtmlResponse, Response, TextResponse",
      "8: from scrapy.utils.python import to_bytes",
      "9: from scrapy.utils.response import (",
      "10:     get_base_url,",
      "11:     get_meta_refresh,",
      "12:     open_in_browser,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from time import process_time",
      "7: import pytest",
      "13:     _remove_html_comments,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:         assert open_in_browser(",
      "199:             r5, _openfunc=check_base_url",
      "200:         ), \"Inject unique base url with conditional comment\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:     def test_open_in_browser_redos_comment(self):",
      "207:         MAX_CPU_TIME = 0.001",
      "209:         # Exploit input from",
      "210:         # https://makenowjust-labs.github.io/recheck/playground/",
      "211:         # for /<!--.*?-->/ (old pattern to remove comments).",
      "212:         body = b\"-><!--\\x00\" * 25_000 + b\"->\\n<!---->\"",
      "214:         response = HtmlResponse(\"https://example.com\", body=body)",
      "216:         start_time = process_time()",
      "218:         open_in_browser(response, lambda url: True)",
      "220:         end_time = process_time()",
      "221:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "223:     def test_open_in_browser_redos_head(self):",
      "224:         MAX_CPU_TIME = 0.001",
      "226:         # Exploit input from",
      "227:         # https://makenowjust-labs.github.io/recheck/playground/",
      "228:         # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
      "229:         body = b\"<head\\t\" * 8_000",
      "231:         response = HtmlResponse(\"https://example.com\", body=body)",
      "233:         start_time = process_time()",
      "235:         open_in_browser(response, lambda url: True)",
      "237:         end_time = process_time()",
      "238:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
      "241: @pytest.mark.parametrize(",
      "242:     \"input_body,output_body\",",
      "243:     (",
      "244:         (",
      "245:             b\"a<!--\",",
      "246:             b\"a\",",
      "247:         ),",
      "248:         (",
      "249:             b\"a<!---->b\",",
      "250:             b\"ab\",",
      "251:         ),",
      "252:         (",
      "253:             b\"a<!--b-->c\",",
      "254:             b\"ac\",",
      "255:         ),",
      "256:         (",
      "257:             b\"a<!--b-->c<!--\",",
      "258:             b\"ac\",",
      "259:         ),",
      "260:         (",
      "261:             b\"a<!--b-->c<!--d\",",
      "262:             b\"ac\",",
      "263:         ),",
      "264:         (",
      "265:             b\"a<!--b-->c<!---->d\",",
      "266:             b\"acd\",",
      "267:         ),",
      "268:         (",
      "269:             b\"a<!--b--><!--c-->d\",",
      "270:             b\"ad\",",
      "271:         ),",
      "272:     ),",
      "273: )",
      "274: def test_remove_html_comments(input_body, output_body):",
      "275:     assert (",
      "276:         _remove_html_comments(input_body) == output_body",
      "277:     ), f\"{_remove_html_comments(input_body)=} == {output_body=}\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9cc870387745f45f744ceef6ed226eefcce0e066",
      "candidate_info": {
        "commit_hash": "9cc870387745f45f744ceef6ed226eefcce0e066",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/9cc870387745f45f744ceef6ed226eefcce0e066",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py",
          "tests/sample_data/compressed/bomb-zstd.bin",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Protect against zstandard bombs",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import warnings",
          "4: from scrapy.exceptions import IgnoreRequest, NotConfigured",
          "5: from scrapy.http import Response, TextResponse",
          "6: from scrapy.responsetypes import responsetypes",
          "8: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
          "9: from scrapy.utils.gz import gunzip",
          "",
          "[Removed Lines]",
          "1: import io",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate, _unbrotli",
          "",
          "[Added Lines]",
          "6: from scrapy.utils._compression import (",
          "7:     _DecompressionMaxSizeExceeded,",
          "8:     _inflate,",
          "9:     _unbrotli,",
          "10:     _unzstd,",
          "11: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     ACCEPTED_ENCODINGS.append(b\"br\")",
          "20: try:",
          "22: except ImportError:",
          "23:     pass",
          "24: else:",
          "",
          "[Removed Lines]",
          "21:     import zstandard",
          "",
          "[Added Lines]",
          "25:     import zstandard  # noqa: F401",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
          "103:             return _unbrotli(body, max_size=self._max_size)",
          "104:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
          "109:         return body",
          "",
          "[Removed Lines]",
          "105:             # Using its streaming API since its simple API could handle only cases",
          "106:             # where there is content size data embedded in the frame",
          "107:             reader = zstandard.ZstdDecompressor().stream_reader(io.BytesIO(body))",
          "108:             return reader.read()",
          "",
          "[Added Lines]",
          "109:             return _unzstd(body, max_size=self._max_size)",
          "",
          "---------------"
        ],
        "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
          "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: except ImportError:",
          "8:     pass",
          "11: class _DecompressionMaxSizeExceeded(ValueError):",
          "12:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: try:",
          "11:     import zstandard",
          "12: except ImportError:",
          "13:     pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:             )",
          "66:         output_list.append(output_chunk)",
          "67:     return b\"\".join(output_list)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: def _unzstd(data: bytes, *, max_size: int = 0) -> bytes:",
          "76:     decompressor = zstandard.ZstdDecompressor()",
          "77:     stream_reader = decompressor.stream_reader(BytesIO(data))",
          "78:     output_list: List[bytes] = []",
          "79:     output_chunk = b\".\"",
          "80:     decompressed_size = 0",
          "81:     CHUNK_SIZE = 8196",
          "82:     while output_chunk:",
          "83:         output_chunk = stream_reader.read(CHUNK_SIZE)",
          "84:         decompressed_size += len(output_chunk)",
          "85:         if max_size and decompressed_size > max_size:",
          "86:             raise _DecompressionMaxSizeExceeded(",
          "87:                 f\"The number of bytes decompressed so far \"",
          "88:                 f\"({decompressed_size}B) exceed the specified maximum \"",
          "89:                 f\"({max_size}B).\"",
          "90:             )",
          "91:         output_list.append(output_chunk)",
          "92:     return b\"\".join(output_list)",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:             \"br\",  # 34 \u2192 11 511 612",
          "42:             \"deflate\",  # 27 968 \u2192 11 511 612",
          "43:             \"gzip\",  # 27 988 \u2192 11 511 612",
          "45:         )",
          "46:     },",
          "47: }",
          "",
          "[Removed Lines]",
          "44:             # \"zstd\",",
          "",
          "[Added Lines]",
          "44:             \"zstd\",  # 1 096 \u2192 11 511 612",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:     def test_compression_bomb_gzip(self):",
          "397:         self._test_compression_bomb(\"gzip\")",
          "400: class HttpCompressionSubclassTest(TestCase):",
          "401:     def test_init_missing_stats(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     def test_compression_bomb_zstd(self):",
          "400:         self._test_compression_bomb(\"zstd\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "502addc717b6b971425a9385359a382b8d0187a1",
      "candidate_info": {
        "commit_hash": "502addc717b6b971425a9385359a382b8d0187a1",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/502addc717b6b971425a9385359a382b8d0187a1",
        "files": [
          ".bumpversion.cfg",
          "scrapy/VERSION"
        ],
        "message": "Bump version: 2.11.0 \u2192 2.11.1",
        "before_after_code_files": [
          ".bumpversion.cfg||.bumpversion.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".bumpversion.cfg||.bumpversion.cfg": [
          "File: .bumpversion.cfg -> .bumpversion.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [bumpversion]",
          "3: commit = True",
          "4: tag = True",
          "5: tag_name = {new_version}",
          "",
          "[Removed Lines]",
          "2: current_version = 2.11.0",
          "",
          "[Added Lines]",
          "2: current_version = 2.11.1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d50f436a73ef13fca8d3d9c302ae1a48e984a4a5",
      "candidate_info": {
        "commit_hash": "d50f436a73ef13fca8d3d9c302ae1a48e984a4a5",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/d50f436a73ef13fca8d3d9c302ae1a48e984a4a5",
        "files": [
          "scrapy/utils/iterators.py"
        ],
        "message": "Enable huge_tree for xmliter_lxml",
        "before_after_code_files": [
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ],
          "candidate": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(data)",
          "87:     node_prefix, element_name = element_name.split(\":\", maxsplit=1)",
          "88:     ns_iterator = etree.iterparse(",
          "90:     )",
          "91:     for event, (_prefix, _namespace) in ns_iterator:",
          "92:         if _prefix != node_prefix:",
          "",
          "[Removed Lines]",
          "89:         reader, encoding=reader.encoding, events=(\"start-ns\",)",
          "",
          "[Added Lines]",
          "89:         reader,",
          "90:         encoding=reader.encoding,",
          "91:         events=(\"start-ns\",),",
          "92:         huge_tree=True,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(obj)",
          "108:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
          "109:     iterable = etree.iterparse(",
          "111:     )",
          "112:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
          "113:     for _, node in iterable:",
          "",
          "[Removed Lines]",
          "110:         cast(\"SupportsReadClose[bytes]\", reader), tag=tag, encoding=reader.encoding",
          "",
          "[Added Lines]",
          "113:         reader,",
          "114:         tag=tag,",
          "115:         encoding=reader.encoding,",
          "116:         huge_tree=True,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7c7a488b950806888691f58dda0b06478b98c7c",
      "candidate_info": {
        "commit_hash": "c7c7a488b950806888691f58dda0b06478b98c7c",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/c7c7a488b950806888691f58dda0b06478b98c7c",
        "files": [
          "scrapy/utils/iterators.py"
        ],
        "message": "Fix typing issues",
        "before_after_code_files": [
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ],
          "candidate": [
            "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     namespace: Optional[str] = None,",
          "96:     prefix: str = \"x\",",
          "97: ) -> Generator[Selector, Any, None]:",
          "99:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
          "100:     iterable = etree.iterparse(",
          "102:         encoding=reader.encoding,",
          "103:         events=(\"end\", \"start-ns\"),",
          "104:         huge_tree=True,",
          "",
          "[Removed Lines]",
          "98:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(obj)",
          "101:         reader,",
          "",
          "[Added Lines]",
          "98:     reader = _StreamReader(obj)",
          "101:         cast(\"SupportsReadClose[bytes]\", reader),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
          "110:     for event, data in iterable:",
          "111:         if event == \"start-ns\":",
          "112:             if needs_namespace_resolution:",
          "113:                 _prefix, _namespace = data",
          "114:                 if _prefix != prefix:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:             assert isinstance(data, tuple)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:                 selxpath = f\"//{prefix}:{nodename}\"",
          "119:                 tag = f\"{{{namespace}}}{nodename}\"",
          "120:             continue",
          "121:         node = data",
          "122:         if node.tag != tag:",
          "123:             continue",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         assert isinstance(data, etree._Element)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6969041c5f6891a0298d7e68ece762adee1bb222",
      "candidate_info": {
        "commit_hash": "6969041c5f6891a0298d7e68ece762adee1bb222",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/6969041c5f6891a0298d7e68ece762adee1bb222",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py",
          "scrapy/utils/gz.py",
          "tests/sample_data/compressed/bomb-gzip.bin",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Protect against gzip bombs",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
          "scrapy/utils/gz.py||scrapy/utils/gz.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import warnings",
          "3: import zlib",
          "6: from scrapy.http import Response, TextResponse",
          "7: from scrapy.responsetypes import responsetypes",
          "8: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
          "9: from scrapy.utils.gz import gunzip",
          "",
          "[Removed Lines]",
          "5: from scrapy.exceptions import NotConfigured",
          "",
          "[Added Lines]",
          "5: from scrapy.exceptions import IgnoreRequest, NotConfigured",
          "8: from scrapy.utils._compression import _DecompressionMaxSizeExceeded",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     \"\"\"This middleware allows compressed (gzip, deflate) traffic to be",
          "30:     sent/received from web sites\"\"\"",
          "35:     @classmethod",
          "36:     def from_crawler(cls, crawler):",
          "37:         if not crawler.settings.getbool(\"COMPRESSION_ENABLED\"):",
          "38:             raise NotConfigured",
          "39:         try:",
          "41:         except TypeError:",
          "42:             warnings.warn(",
          "43:                 \"HttpCompressionMiddleware subclasses must either modify \"",
          "46:                 ScrapyDeprecationWarning,",
          "47:             )",
          "48:             result = cls()",
          "49:             result.stats = crawler.stats",
          "50:             return result",
          "52:     def process_request(self, request, spider):",
          "",
          "[Removed Lines]",
          "32:     def __init__(self, stats=None):",
          "33:         self.stats = stats",
          "40:             return cls(stats=crawler.stats)",
          "44:                 \"their '__init__' method to support a 'stats' parameter or \"",
          "45:                 \"reimplement the 'from_crawler' method.\",",
          "",
          "[Added Lines]",
          "33:     def __init__(self, crawler=None):",
          "34:         self.stats = crawler.stats",
          "35:         self._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "42:             return cls(crawler=crawler)",
          "46:                 \"their '__init__' method to support a 'crawler' parameter or \"",
          "47:                 \"reimplement their 'from_crawler' method.\",",
          "52:             result._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:             content_encoding = response.headers.getlist(\"Content-Encoding\")",
          "60:             if content_encoding:",
          "61:                 encoding = content_encoding.pop()",
          "63:                 if self.stats:",
          "64:                     self.stats.inc_value(",
          "65:                         \"httpcompression/response_bytes\",",
          "",
          "[Removed Lines]",
          "62:                 decoded_body = self._decode(response.body, encoding.lower())",
          "",
          "[Added Lines]",
          "65:                 try:",
          "66:                     decoded_body = self._decode(response.body, encoding.lower())",
          "67:                 except _DecompressionMaxSizeExceeded:",
          "68:                     raise IgnoreRequest(",
          "69:                         f\"Ignored response {response} because its body \"",
          "70:                         f\"({len(response.body)}B) exceeded DOWNLOAD_MAXSIZE \"",
          "71:                         f\"({self._max_size}B) during decompression.\"",
          "72:                     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     def _decode(self, body, encoding):",
          "87:         if encoding == b\"gzip\" or encoding == b\"x-gzip\":",
          "90:         if encoding == b\"deflate\":",
          "91:             try:",
          "",
          "[Removed Lines]",
          "88:             body = gunzip(body)",
          "",
          "[Added Lines]",
          "98:             body = gunzip(body, max_size=self._max_size)",
          "",
          "---------------"
        ],
        "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
          "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: class _DecompressionMaxSizeExceeded(ValueError):",
          "2:     pass",
          "",
          "---------------"
        ],
        "scrapy/utils/gz.py||scrapy/utils/gz.py": [
          "File: scrapy/utils/gz.py -> scrapy/utils/gz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from scrapy.http import Response",
          "10:     \"\"\"Gunzip the given data and return as much data as possible.",
          "12:     This is resilient to CRC checksum errors.",
          "",
          "[Removed Lines]",
          "9: def gunzip(data: bytes) -> bytes:",
          "",
          "[Added Lines]",
          "8: from ._compression import _DecompressionMaxSizeExceeded",
          "11: def gunzip(data: bytes, max_size: int = 0) -> bytes:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:     f = GzipFile(fileobj=BytesIO(data))",
          "15:     output_list: List[bytes] = []",
          "16:     chunk = b\".\"",
          "17:     while chunk:",
          "18:         try:",
          "19:             chunk = f.read1(8196)",
          "21:         except (OSError, EOFError, struct.error):",
          "22:             # complete only if there is some data, otherwise re-raise",
          "23:             # see issue 87 about catching struct.error",
          "",
          "[Removed Lines]",
          "20:             output_list.append(chunk)",
          "",
          "[Added Lines]",
          "19:     decompressed_size = 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25:             if output_list:",
          "26:                 break",
          "27:             raise",
          "28:     return b\"\".join(output_list)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         decompressed_size += len(chunk)",
          "31:         if max_size and decompressed_size > max_size:",
          "32:             raise _DecompressionMaxSizeExceeded(",
          "33:                 f\"The number of bytes decompressed so far \"",
          "34:                 f\"({decompressed_size}B) exceed the specified maximum \"",
          "35:                 f\"({max_size}B).\"",
          "36:             )",
          "37:         output_list.append(chunk)",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     ACCEPTED_ENCODINGS,",
          "11:     HttpCompressionMiddleware,",
          "12: )",
          "14: from scrapy.http import HtmlResponse, Request, Response",
          "15: from scrapy.responsetypes import responsetypes",
          "16: from scrapy.spiders import Spider",
          "",
          "[Removed Lines]",
          "13: from scrapy.exceptions import NotConfigured, ScrapyDeprecationWarning",
          "",
          "[Added Lines]",
          "13: from scrapy.exceptions import IgnoreRequest, NotConfigured, ScrapyDeprecationWarning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         \"html-zstd-streaming-no-content-size.bin\",",
          "36:         \"zstd\",",
          "37:     ),",
          "38: }",
          "41: class HttpCompressionTest(TestCase):",
          "42:     def setUp(self):",
          "44:         self.spider = self.crawler._create_spider(\"scrapytest.org\")",
          "45:         self.mw = HttpCompressionMiddleware.from_crawler(self.crawler)",
          "46:         self.crawler.stats.open_spider(self.spider)",
          "",
          "[Removed Lines]",
          "43:         self.crawler = get_crawler(Spider)",
          "",
          "[Added Lines]",
          "39:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
          "40:         for format_id in (",
          "41:             # \"br\",",
          "42:             \"gzip\",  # 27 988 \u2192 11 511 612",
          "43:             # \"deflate\",",
          "44:             # \"zstd\",",
          "45:         )",
          "46:     },",
          "52:         settings = {",
          "53:             \"DOWNLOAD_MAXSIZE\": 10_000_000,  # For compression bomb tests.",
          "54:         }",
          "55:         self.crawler = get_crawler(Spider, settings_dict=settings)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:         self.assertStatsEqual(\"httpcompression/response_count\", None)",
          "374:         self.assertStatsEqual(\"httpcompression/response_bytes\", None)",
          "377: class HttpCompressionSubclassTest(TestCase):",
          "378:     def test_init_missing_stats(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388:     def _test_compression_bomb(self, compression_id):",
          "389:         response = self._getresponse(f\"bomb-{compression_id}\")",
          "390:         self.assertRaises(",
          "391:             IgnoreRequest,",
          "392:             self.mw.process_response,",
          "393:             response.request,",
          "394:             response,",
          "395:             self.spider,",
          "396:         )",
          "398:     def test_compression_bomb_gzip(self):",
          "399:         self._test_compression_bomb(\"gzip\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}