{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c365e55b29bf93a2a6d6eb32c5e1780ff66f823b",
      "candidate_info": {
        "commit_hash": "c365e55b29bf93a2a6d6eb32c5e1780ff66f823b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/c365e55b29bf93a2a6d6eb32c5e1780ff66f823b",
        "files": [
          ".changelog/24892.txt",
          "api/acl.go",
          "lib/auth/binder.go",
          "lib/auth/binder_test.go",
          "nomad/acl_endpoint.go",
          "nomad/acl_endpoint_test.go",
          "nomad/mock/acl.go",
          "nomad/structs/acl.go",
          "website/content/api-docs/acl/auth-methods.mdx"
        ],
        "message": "backport of commit d621211108c4d84f2622c108aa02bfd313b286e9 (#24923)\n\nCo-authored-by: Michael Smithhisler <michael.smithhisler@hashicorp.com>",
        "before_after_code_files": [
          "api/acl.go||api/acl.go",
          "lib/auth/binder.go||lib/auth/binder.go",
          "lib/auth/binder_test.go||lib/auth/binder_test.go",
          "nomad/acl_endpoint.go||nomad/acl_endpoint.go",
          "nomad/acl_endpoint_test.go||nomad/acl_endpoint_test.go",
          "nomad/mock/acl.go||nomad/mock/acl.go",
          "nomad/structs/acl.go||nomad/structs/acl.go",
          "website/content/api-docs/acl/auth-methods.mdx||website/content/api-docs/acl/auth-methods.mdx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "api/acl.go||api/acl.go": [
          "File: api/acl.go -> api/acl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "858:  ClaimMappings     map[string]string",
          "859:  ListClaimMappings map[string]string",
          "860: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "862:  VerboseLogging bool",
          "",
          "---------------"
        ],
        "lib/auth/binder.go||lib/auth/binder.go": [
          "File: lib/auth/binder.go -> lib/auth/binder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"strings\"",
          "10:  \"github.com/hashicorp/go-bexpr\"",
          "11:  \"github.com/hashicorp/go-memdb\"",
          "12:  \"github.com/hashicorp/hil\"",
          "13:  \"github.com/hashicorp/hil/ast\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/hashicorp/go-hclog\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: }",
          "57:  var (",
          "58:   bindings Bindings",
          "59:   err      error",
          "",
          "[Removed Lines]",
          "56: func (b *Binder) Bind(authMethod *structs.ACLAuthMethod, identity *Identity) (*Bindings, error) {",
          "",
          "[Added Lines]",
          "57: func (b *Binder) Bind(vlog hclog.Logger, authMethod *structs.ACLAuthMethod, identity *Identity) (*Bindings, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   rule := raw.(*structs.ACLBindingRule)",
          "76:   if doesSelectorMatch(rule.Selector, identity.Claims) {",
          "77:    matchingRules = append(matchingRules, rule)",
          "78:   }",
          "79:  }",
          "80:  if len(matchingRules) == 0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:    vlog.Debug(\"binding-rule selector matches an identity claim, will evaluate bind-name\", \"selector\", rule.Selector)",
          "80:   } else {",
          "81:    vlog.Debug(\"bind-rule selector did not match any claims\", \"selector\", rule.Selector)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:     bindings.Roles = append(bindings.Roles, &structs.ACLTokenRoleLink{",
          "104:      ID: role.ID,",
          "105:     })",
          "106:    }",
          "107:   case structs.ACLBindingRuleBindTypePolicy:",
          "108:    policy, err := b.store.ACLPolicyByName(nil, bindName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     vlog.Debug(\"role found with name matching ACL binding-rule\", \"name\", bindName)",
          "111:    } else {",
          "112:     vlog.Debug(\"no role found with name matching ACL binding-rule\", \"name\", bindName)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:    if policy != nil {",
          "114:     bindings.Policies = append(bindings.Policies, policy.Name)",
          "115:    }",
          "116:   case structs.ACLBindingRuleBindTypeManagement:",
          "117:    bindings.Management = true",
          "118:    bindings.Policies = nil",
          "119:    bindings.Roles = nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     vlog.Debug(\"policy found with name matching ACL binding-rule\", \"name\", bindName)",
          "123:    } else {",
          "124:     vlog.Debug(\"no policy found with name matching ACL binding-rule\", \"name\", bindName)",
          "127:    vlog.Debug(\"management ACL binding-rule found\", \"name\", bindName)",
          "",
          "---------------"
        ],
        "lib/auth/binder_test.go||lib/auth/binder_test.go": [
          "File: lib/auth/binder_test.go -> lib/auth/binder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"github.com/shoenig/test/must\"",
          "11:  \"github.com/hashicorp/nomad/ci\"",
          "12:  \"github.com/hashicorp/nomad/helper/uuid\"",
          "13:  \"github.com/hashicorp/nomad/nomad/mock\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/hashicorp/go-hclog\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:  }",
          "116:  for _, tt := range tests {",
          "117:   t.Run(tt.name, func(t *testing.T) {",
          "119:    if tt.wantErr {",
          "120:     must.Error(t, err)",
          "121:    } else {",
          "",
          "[Removed Lines]",
          "118:    got, err := testBind.Bind(tt.authMethod, tt.identity)",
          "",
          "[Added Lines]",
          "119:    l := hclog.NewNullLogger()",
          "120:    got, err := testBind.Bind(l, tt.authMethod, tt.identity)",
          "",
          "---------------"
        ],
        "nomad/acl_endpoint.go||nomad/acl_endpoint.go": [
          "File: nomad/acl_endpoint.go -> nomad/acl_endpoint.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"context\"",
          "8:  \"errors\"",
          "9:  \"fmt\"",
          "10:  \"net/http\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"encoding/json\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  aclLoginRequestExpiryTime = 60 * time.Second",
          "55: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:  verboseLoggingMessage = \"attempting login with verbose logging enabled\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2691:   return structs.NewErrRPCCodedf(http.StatusBadRequest, \"auth-method %q not found\", args.AuthMethodName)",
          "2692:  }",
          "2696:  if authMethod.TokenLocalityIsGlobal() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2700:  vlog := hclog.NewNullLogger()",
          "2701:  if authMethod.Config.VerboseLogging {",
          "2702:   vlog = a.logger",
          "2703:  }",
          "2705:  vlog.Debug(verboseLoggingMessage)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2761:   return err",
          "2762:  }",
          "2766:  oidcBinder := auth.NewBinder(stateSnapshot)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2778:  if authMethod.Config.VerboseLogging {",
          "2779:   idTokenClaimBytes, err := json.MarshalIndent(idTokenClaims, \"\", \" \")",
          "2780:   if err != nil {",
          "2781:    vlog.Debug(\"failed to marshal ID token claims\")",
          "2782:   }",
          "2784:   userClaimBytes, err := json.MarshalIndent(userClaims, \"\", \" \")",
          "2785:   if err != nil {",
          "2786:    vlog.Debug(\"failed to marshal user claims\")",
          "2787:   }",
          "2788:   vlog.Debug(\"claims from jwt token and user info endpoint\",",
          "2789:    \"token_claims\", string(idTokenClaimBytes),",
          "2790:    \"user_claims\", string(userClaimBytes),",
          "2791:   )",
          "2793:   internalClaimBytes, err := json.MarshalIndent(oidcInternalClaims.List, \"\", \" \")",
          "2794:   if err != nil {",
          "2795:    vlog.Debug(\"failed to marshal OIDC internal claims list\")",
          "2796:   }",
          "2797:   vlog.Debug(\"claims after mapping to nomad identity attributes\", \"internal_claims\", string(internalClaimBytes))",
          "2798:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2772:  if err != nil {",
          "2773:   return err",
          "2774:  }",
          "",
          "[Removed Lines]",
          "2771:  tokenBindings, err := oidcBinder.Bind(authMethod, auth.NewIdentity(authMethod.Config, oidcInternalClaims))",
          "",
          "[Added Lines]",
          "2807:  tokenBindings, err := oidcBinder.Bind(vlog, authMethod, auth.NewIdentity(authMethod.Config, oidcInternalClaims))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2910:   )",
          "2911:  }",
          "2915:  jwtBinder := auth.NewBinder(stateSnapshot)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2950:  vlog := hclog.NewNullLogger()",
          "2951:  if authMethod.Config.VerboseLogging {",
          "2952:   vlog = a.logger",
          "2953:  }",
          "2955:  vlog.Debug(verboseLoggingMessage)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2921:   return err",
          "2922:  }",
          "2925:  if err != nil {",
          "2926:   return err",
          "2927:  }",
          "",
          "[Removed Lines]",
          "2924:  tokenBindings, err := jwtBinder.Bind(authMethod, auth.NewIdentity(authMethod.Config, jwtClaims))",
          "",
          "[Added Lines]",
          "2969:  if authMethod.Config.VerboseLogging {",
          "2970:   idTokenClaimBytes, err := json.MarshalIndent(claims, \"\", \" \")",
          "2971:   if err != nil {",
          "2972:    vlog.Debug(\"failed to marshal token claims\")",
          "2973:   }",
          "2974:   vlog.Debug(\"jwt token claims\", \"token_claims\", string(idTokenClaimBytes))",
          "2976:   internalClaimBytes, err := json.MarshalIndent(jwtClaims.List, \"\", \" \")",
          "2977:   if err != nil {",
          "2978:    vlog.Debug(\"failed to marshal claims list\")",
          "2979:   }",
          "2980:   vlog.Debug(\"claims after mapping to nomad identity attributes\", \"internal_claims\", string(internalClaimBytes))",
          "2981:  }",
          "2983:  tokenBindings, err := jwtBinder.Bind(vlog, authMethod, auth.NewIdentity(authMethod.Config, jwtClaims))",
          "",
          "---------------"
        ],
        "nomad/acl_endpoint_test.go||nomad/acl_endpoint_test.go": [
          "File: nomad/acl_endpoint_test.go -> nomad/acl_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package nomad",
          "6: import (",
          "7:  \"fmt\"",
          "8:  \"net/url\"",
          "9:  \"os\"",
          "10:  \"path/filepath\"",
          "11:  \"testing\"",
          "12:  \"time\"",
          "14:  \"github.com/golang-jwt/jwt/v5\"",
          "15:  capOIDC \"github.com/hashicorp/cap/oidc\"",
          "16:  \"github.com/hashicorp/go-memdb\"",
          "17:  msgpackrpc \"github.com/hashicorp/net-rpc-msgpackrpc/v2\"",
          "18:  \"github.com/hashicorp/nomad/ci\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"bytes\"",
          "9:  \"io\"",
          "13:  \"strings\"",
          "19:  \"github.com/hashicorp/go-hclog\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3631: func TestACL_OIDCCompleteAuth(t *testing.T) {",
          "3632:  ci.Parallel(t)",
          "3635:  defer testServerCleanupFn()",
          "3636:  codec := rpcClient(t, testServer)",
          "3637:  testutil.WaitForLeader(t, testServer.RPC)",
          "",
          "[Removed Lines]",
          "3634:  testServer, _, testServerCleanupFn := TestACLServer(t, nil)",
          "",
          "[Added Lines]",
          "3639:  var buf bytes.Buffer",
          "3640:  testServer, _, testServerCleanupFn := TestACLServer(t, func(c *Config) {",
          "3641:   c.Logger = hclog.NewInterceptLogger(&hclog.LoggerOptions{",
          "3642:    Level:  hclog.Debug,",
          "3643:    Output: io.MultiWriter(&buf, os.Stderr),",
          "3644:   })",
          "3645:  })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3720:  must.Error(t, err)",
          "3721:  must.ErrorContains(t, err, \"400\")",
          "3722:  must.ErrorContains(t, err, \"no role or policy bindings matched\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3734:  must.False(t, strings.Contains(buf.String(), verboseLoggingMessage))",
          "3737:  buf.Reset()",
          "3738:  mockedAuthMethod.Config.VerboseLogging = true",
          "3739:  must.NoError(t, testServer.fsm.State().UpsertACLAuthMethods(11, []*structs.ACLAuthMethod{mockedAuthMethod}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3767:  must.Len(t, 1, completeAuthResp4.ACLToken.Roles)",
          "3768:  must.Eq(t, mockACLRole.Name, completeAuthResp4.ACLToken.Roles[0].Name)",
          "3769:  must.Eq(t, mockACLRole.ID, completeAuthResp4.ACLToken.Roles[0].ID)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3787:  must.True(t, strings.Contains(buf.String(), verboseLoggingMessage))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3803: func TestACL_Login(t *testing.T) {",
          "3804:  ci.Parallel(t)",
          "3807:  defer testServerCleanupFn()",
          "3808:  codec := rpcClient(t, testServer)",
          "3809:  testutil.WaitForLeader(t, testServer.RPC)",
          "",
          "[Removed Lines]",
          "3806:  testServer, _, testServerCleanupFn := TestACLServer(t, nil)",
          "",
          "[Added Lines]",
          "3825:  var buf bytes.Buffer",
          "3826:  testServer, _, testServerCleanupFn := TestACLServer(t, func(c *Config) {",
          "3827:   c.Logger = hclog.NewInterceptLogger(&hclog.LoggerOptions{",
          "3828:    Level:  hclog.Debug,",
          "3829:    Output: io.MultiWriter(&buf, os.Stderr),",
          "3830:   })",
          "3831:  })",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3885:  must.Error(t, err)",
          "3886:  must.ErrorContains(t, err, \"400\")",
          "3887:  must.ErrorContains(t, err, \"no role or policy bindings matched\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3913:  must.False(t, strings.Contains(buf.String(), verboseLoggingMessage))",
          "3916:  buf.Reset()",
          "3917:  mockedAuthMethod.Config.VerboseLogging = true",
          "3918:  must.NoError(t, testServer.fsm.State().UpsertACLAuthMethods(11, []*structs.ACLAuthMethod{mockedAuthMethod}))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3930:  must.Eq(t, mockACLRole.Name, completeAuthResp4.ACLToken.Roles[0].Name)",
          "3931:  must.Eq(t, mockACLRole.ID, completeAuthResp4.ACLToken.Roles[0].ID)",
          "3932:  must.Eq(t, mockedAuthMethod.Type+\"-\"+mockedAuthMethod.Name, completeAuthResp4.ACLToken.Name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3964:  must.True(t, strings.Contains(buf.String(), verboseLoggingMessage))",
          "",
          "---------------"
        ],
        "nomad/mock/acl.go||nomad/mock/acl.go": [
          "File: nomad/mock/acl.go -> nomad/mock/acl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:    SigningAlgs:         []string{\"RS256\"},",
          "284:    ClaimMappings:       map[string]string{\"foo\": \"bar\"},",
          "285:    ListClaimMappings:   map[string]string{\"foo\": \"bar\"},",
          "286:   },",
          "287:   CreateTime:  time.Now().UTC(),",
          "288:   CreateIndex: 10,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:    VerboseLogging:      false,",
          "",
          "---------------"
        ],
        "nomad/structs/acl.go||nomad/structs/acl.go": [
          "File: nomad/structs/acl.go -> nomad/structs/acl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:   _, _ = hash.Write([]byte(a.Config.OIDCClientID))",
          "786:   _, _ = hash.Write([]byte(a.Config.OIDCClientSecret))",
          "787:   _, _ = hash.Write([]byte(strconv.FormatBool(a.Config.OIDCDisableUserInfo)))",
          "788:   _, _ = hash.Write([]byte(a.Config.ExpirationLeeway.String()))",
          "789:   _, _ = hash.Write([]byte(a.Config.NotBeforeLeeway.String()))",
          "790:   _, _ = hash.Write([]byte(a.Config.ClockSkewLeeway.String()))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788:   _, _ = hash.Write([]byte(strconv.FormatBool(a.Config.VerboseLogging)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1034:  ClaimMappings     map[string]string",
          "1035:  ListClaimMappings map[string]string",
          "1036: }",
          "1038: func (a *ACLAuthMethodConfig) Copy() *ACLAuthMethodConfig {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1040:  VerboseLogging bool",
          "",
          "---------------"
        ],
        "website/content/api-docs/acl/auth-methods.mdx||website/content/api-docs/acl/auth-methods.mdx": [
          "File: website/content/api-docs/acl/auth-methods.mdx -> website/content/api-docs/acl/auth-methods.mdx",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     copied to a metadata field (value). Use this if the claim you are capturing is",
          "117:     list-like (such as groups).",
          "119: ### Sample payload",
          "121: ```json",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:   - `VerboseLogging` `(bool: false)` - When set to `true`, Nomad will log token claims",
          "120:     and information related to binding-rule and role/policy evaluations. Not recommended",
          "121:     in production since sensitive information may be present.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d316b7c3593fadb3a4b7648b501f0993004f183b",
      "candidate_info": {
        "commit_hash": "d316b7c3593fadb3a4b7648b501f0993004f183b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/d316b7c3593fadb3a4b7648b501f0993004f183b",
        "files": [
          "command/operator_raft_leadership_transfer.go"
        ],
        "message": "Backport of CLI: Update leadership transfer options docs into release/1.9.x (#24268)\n\nCo-authored-by: Habibi Mustafa <habibi@dicoding.com>",
        "before_after_code_files": [
          "command/operator_raft_leadership_transfer.go||command/operator_raft_leadership_transfer.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/operator_raft_leadership_transfer.go||command/operator_raft_leadership_transfer.go": [
          "File: command/operator_raft_leadership_transfer.go -> command/operator_raft_leadership_transfer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   ` + generalOptionsUsage(usageOptsDefault|usageOptsNoNamespace) + `",
          "40:   -peer-address=\"IP:port\"",
          "41:     Transfer leadership to the Nomad server with given Raft address.",
          "",
          "[Removed Lines]",
          "38: Remove Peer Options:",
          "",
          "[Added Lines]",
          "38: Transfer Leadership Options:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b0d6f63dd77db2ff7dc0dba090eb1c0f639ba54",
      "candidate_info": {
        "commit_hash": "0b0d6f63dd77db2ff7dc0dba090eb1c0f639ba54",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/0b0d6f63dd77db2ff7dc0dba090eb1c0f639ba54",
        "files": [
          ".go-version",
          "contributing/README.md",
          "scripts/linux-priv-go.sh",
          "scripts/release/mac-remote-build"
        ],
        "message": "backport of commit b36c77781fd134169686074ee33aabafd2ba8388 (#24446)\n\nCo-authored-by: Seth Hoenig <shoenig@duck.com>",
        "before_after_code_files": [
          "scripts/linux-priv-go.sh||scripts/linux-priv-go.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/linux-priv-go.sh||scripts/linux-priv-go.sh": [
          "File: scripts/linux-priv-go.sh -> scripts/linux-priv-go.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: esac",
          "23: function install_go() {",
          "25:  local download=\"https://storage.googleapis.com/golang/go${go_version}.linux-${ARCH}.tar.gz\"",
          "27:  if go version 2>&1 | grep -q \"${go_version}\"; then",
          "",
          "[Removed Lines]",
          "24:  local go_version=\"1.23.2\"",
          "",
          "[Added Lines]",
          "24:  local go_version=\"1.23.3\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d2a6900e7b158e20d46529bb4e3569f8fcc4712",
      "candidate_info": {
        "commit_hash": "4d2a6900e7b158e20d46529bb4e3569f8fcc4712",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/4d2a6900e7b158e20d46529bb4e3569f8fcc4712",
        "files": [
          ".changelog/25085.txt",
          "e2e/task_schedule/input/schedule.nomad.hcl",
          "e2e/task_schedule/task_schedule_test.go"
        ],
        "message": "backport of commit 92c90af5421da594eb375554ccd764b2f6146af3 (#25090)\n\nCo-authored-by: Daniel Bennett <dbennett@hashicorp.com>",
        "before_after_code_files": [
          "e2e/task_schedule/input/schedule.nomad.hcl||e2e/task_schedule/input/schedule.nomad.hcl",
          "e2e/task_schedule/task_schedule_test.go||e2e/task_schedule/task_schedule_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "e2e/task_schedule/input/schedule.nomad.hcl||e2e/task_schedule/input/schedule.nomad.hcl": [
          "File: e2e/task_schedule/input/schedule.nomad.hcl -> e2e/task_schedule/input/schedule.nomad.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   type = \"service\"",
          "10:   group \"group\" {",
          "12:     update { max_parallel = 0 }",
          "16:     task \"app\" {",
          "",
          "[Removed Lines]",
          "11:     # disable deployments",
          "13:     # restart faster",
          "14:     restart { delay = \"5s\" }",
          "",
          "[Added Lines]",
          "11:     # disable deployments, because any task started outside of the schedule",
          "12:     # will stay \"pending\" until the schedule starts it.",
          "15:     # pausing the task should be orthogonal to this restart{} block.",
          "16:     # restart{} config should only apply to the task stopping on its own,",
          "17:     # as with an application error.",
          "18:     restart {",
          "19:       # disable restarts entirely - any application exit fails the task.",
          "20:       attempts = 0",
          "21:       mode     = \"fail\"",
          "22:     }",
          "24:     # don't bother rescheduling this test app",
          "25:     reschedule {",
          "26:       attempts = 0",
          "27:     }",
          "",
          "---------------"
        ],
        "e2e/task_schedule/task_schedule_test.go||e2e/task_schedule/task_schedule_test.go": [
          "File: e2e/task_schedule/task_schedule_test.go -> e2e/task_schedule/task_schedule_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  t.Run(\"job update\", testJobUpdate)",
          "35:  t.Run(\"force run\", testForceRun(nomadClient))",
          "36:  t.Run(\"force stop\", testForceStop(nomadClient))",
          "37: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:  t.Run(\"repeat pause\", testRepeatPause(nomadClient))",
          "38:  t.Run(\"task dies\", testTaskDies(nomadClient))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:  }",
          "204: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: func testRepeatPause(api *nomadapi.Client) func(t *testing.T) {",
          "211:  return func(t *testing.T) {",
          "212:   now := time.Now()",
          "215:   job := runJob(t, now.Add(time.Hour), now.Add(2*time.Hour))",
          "216:   expectAllocStatus(t, job, \"pending\", 5*time.Second, \"task should be placed\")",
          "218:   alloc := &nomadapi.Allocation{",
          "219:    ID: job.AllocID(\"group\"),",
          "220:   }",
          "221:   expectScheduleState(t, api, alloc, \"scheduled_pause\")",
          "225:   for x := range 3 {",
          "226:    t.Run(fmt.Sprintf(\"attempt %d\", x+1), func(t *testing.T) {",
          "228:     must.NoError(t, api.Allocations().SetPauseState(alloc, nil, \"app\", \"run\"))",
          "229:     expectScheduleState(t, api, alloc, \"force_run\")",
          "230:     expectAllocStatus(t, job, \"running\", 5*time.Second, \"task should start\")",
          "233:     must.NoError(t, api.Allocations().SetPauseState(alloc, nil, \"app\", \"pause\"))",
          "234:     expectScheduleState(t, api, alloc, \"force_pause\")",
          "235:     expectAllocStatus(t, job, \"pending\", 5*time.Second, \"task should stop\")",
          "236:    })",
          "237:   }",
          "241:   expectTaskEvents(t, job, []string{",
          "242:    \"Running\", \"Started\", \"Pausing\", \"Terminated\", \"Restarting\",",
          "243:    \"Running\", \"Started\", \"Pausing\", \"Terminated\", \"Restarting\",",
          "244:   })",
          "245:  }",
          "246: }",
          "250: func testTaskDies(api *nomadapi.Client) func(t *testing.T) {",
          "251:  return func(t *testing.T) {",
          "252:   now := time.Now()",
          "254:   job := runJob(t, now.Add(-time.Hour), now.Add(time.Hour))",
          "255:   expectAllocStatus(t, job, \"running\", 5*time.Second, \"task should start\")",
          "257:   alloc := &nomadapi.Allocation{",
          "258:    ID: job.AllocID(\"group\"),",
          "259:   }",
          "262:   must.NoError(t, api.Allocations().Signal(alloc, nil, \"app\", \"SIGTERM\"))",
          "263:   expectAllocStatus(t, job, \"failed\", 5*time.Second, \"task should fail\")",
          "265:   expectTaskEvents(t, job, []string{",
          "266:    \"Received\", \"Task Setup\",",
          "267:    \"Started\", \"Signaling\", \"Terminated\", \"Not Restarting\",",
          "268:   })",
          "269:  }",
          "270: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4364652b42a4b70bd42feac59a7075c568ee601f",
      "candidate_info": {
        "commit_hash": "4364652b42a4b70bd42feac59a7075c568ee601f",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/4364652b42a4b70bd42feac59a7075c568ee601f",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/hashicorp/cap from 0.6.0 to 0.7.0 (#24763)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  github.com/gorilla/websocket v1.5.3",
          "43:  github.com/gosuri/uilive v0.0.4",
          "44:  github.com/grpc-ecosystem/go-grpc-middleware v1.4.0",
          "46:  github.com/hashicorp/cli v1.1.6",
          "47:  github.com/hashicorp/consul-template v0.39.0",
          "48:  github.com/hashicorp/consul/api v1.30.0",
          "",
          "[Removed Lines]",
          "45:  github.com/hashicorp/cap v0.6.0",
          "",
          "[Added Lines]",
          "45:  github.com/hashicorp/cap v0.7.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:  github.com/circonus-labs/circonusllhist v0.1.3 // indirect",
          "190:  github.com/containerd/console v1.0.4 // indirect",
          "191:  github.com/containerd/log v0.1.0 // indirect",
          "193:  github.com/coreos/go-systemd/v22 v22.5.0 // indirect",
          "194:  github.com/cyphar/filepath-securejoin v0.2.5 // indirect",
          "195:  github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect",
          "",
          "[Removed Lines]",
          "192:  github.com/coreos/go-oidc/v3 v3.10.0 // indirect",
          "",
          "[Added Lines]",
          "192:  github.com/coreos/go-oidc/v3 v3.11.0 // indirect",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:  github.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7 // indirect",
          "203:  github.com/felixge/httpsnoop v1.0.4 // indirect",
          "204:  github.com/fsnotify/fsnotify v1.6.0 // indirect",
          "206:  github.com/go-logr/logr v1.4.2 // indirect",
          "207:  github.com/go-logr/stdr v1.2.2 // indirect",
          "208:  github.com/go-ole/go-ole v1.2.6 // indirect",
          "",
          "[Removed Lines]",
          "205:  github.com/go-jose/go-jose/v4 v4.0.1 // indirect",
          "",
          "[Added Lines]",
          "205:  github.com/go-jose/go-jose/v4 v4.0.4 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "355: github.com/containernetworking/cni v1.2.3/go.mod h1:DuLgF+aPd3DzcTQTtp/Nvl1Kim23oFKdm2okJzBQA5M=",
          "356: github.com/coreos/go-iptables v0.8.0 h1:MPc2P89IhuVpLI7ETL/2tx3XZ61VeICZjYqDEgNsPRc=",
          "357: github.com/coreos/go-iptables v0.8.0/go.mod h1:Qe8Bv2Xik5FyTXwgIbLAnv2sWSBmvWdFETJConOQ//Q=",
          "360: github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=",
          "361: github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=",
          "362: github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=",
          "",
          "[Removed Lines]",
          "358: github.com/coreos/go-oidc/v3 v3.10.0 h1:tDnXHnLyiTVyT/2zLDGj09pFPkhND8Gl8lnTRhoEaJU=",
          "359: github.com/coreos/go-oidc/v3 v3.10.0/go.mod h1:5j11xcw0D3+SGxn6Z/WFADsgcWVMyNAlSQupk0KK3ac=",
          "",
          "[Added Lines]",
          "358: github.com/coreos/go-oidc/v3 v3.11.0 h1:Ia3MxdwpSw702YW0xgfmP1GVCMA9aEFWu12XUZ3/OtI=",
          "359: github.com/coreos/go-oidc/v3 v3.11.0/go.mod h1:gE3LgjOgFoHi9a4ce4/tJczr0Ai2/BoDhf0r5lltWI0=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439: github.com/go-jose/go-jose/v3 v3.0.0/go.mod h1:RNkWWRld676jZEYoV3+XK8L2ZnNSvIsxFMht0mSX+u8=",
          "440: github.com/go-jose/go-jose/v3 v3.0.3 h1:fFKWeig/irsp7XD2zBxvnmA/XaRWp5V3CBsZXJF7G7k=",
          "441: github.com/go-jose/go-jose/v3 v3.0.3/go.mod h1:5b+7YgP7ZICgJDBdfjZaIt+H/9L9T/YQrVfLAMboGkQ=",
          "444: github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=",
          "445: github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=",
          "446: github.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=",
          "",
          "[Removed Lines]",
          "442: github.com/go-jose/go-jose/v4 v4.0.1 h1:QVEPDE3OluqXBQZDcnNvQrInro2h0e4eqNbnZSWqS6U=",
          "443: github.com/go-jose/go-jose/v4 v4.0.1/go.mod h1:WVf9LFMHh/QVrmqrOfqun0C45tMe3RoiKJMPvgWwLfY=",
          "",
          "[Added Lines]",
          "442: github.com/go-jose/go-jose/v4 v4.0.4 h1:VsjPI33J0SB9vQM6PLmNjoHqMQNGPiZ0rHL7Ni7Q6/E=",
          "443: github.com/go-jose/go-jose/v4 v4.0.4/go.mod h1:NKb5HO1EZccyMpiZNbdUw/14tiXNyUJh188dfnMCAfc=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "618: github.com/grpc-ecosystem/go-grpc-middleware v1.4.0/go.mod h1:g5qyo/la0ALbONm6Vbp88Yd8NsDy6rZz+RcrMPxvld8=",
          "619: github.com/grpc-ecosystem/grpc-gateway v1.16.0 h1:gmcG1KaJ57LophUzW0Hy8NmPhnMZb4M0+kPpLofRdBo=",
          "620: github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=",
          "623: github.com/hashicorp/cli v1.1.6 h1:CMOV+/LJfL1tXCOKrgAX0uRKnzjj/mpmqNXloRSy2K8=",
          "624: github.com/hashicorp/cli v1.1.6/go.mod h1:MPon5QYlgjjo0BSoAiN0ESeT5fRzDjVRp+uioJ0piz4=",
          "625: github.com/hashicorp/consul-template v0.39.0 h1:Yp2iqdVw3pYW4RbNKPNF/dNpJWEasnAhUTC+wDPtDYM=",
          "",
          "[Removed Lines]",
          "621: github.com/hashicorp/cap v0.6.0 h1:uOSdbtXu8zsbRyjwpiTy6QiuX3+5paAbNkYlop7QexM=",
          "622: github.com/hashicorp/cap v0.6.0/go.mod h1:DwzHkoG6pxSARiqwvAgxmCPUpTTCCw2wVuPrIFOzpe0=",
          "",
          "[Added Lines]",
          "621: github.com/hashicorp/cap v0.7.0 h1:atLIEU5lJslYXo1qsv7RtUL1HrJVVxnfkErIT3uxLp0=",
          "622: github.com/hashicorp/cap v0.7.0/go.mod h1:UynhCoGX3pxL0OfVrfMzPWAyjMYp96bk11BNTf2zt8o=",
          "",
          "---------------"
        ]
      }
    }
  ]
}