{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "97743bc1b5caa2b0bd894dc8e128b47e4d771e4a",
  "patch_info": {
    "commit_hash": "97743bc1b5caa2b0bd894dc8e128b47e4d771e4a",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/97743bc1b5caa2b0bd894dc8e128b47e4d771e4a",
    "files": [
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Merge pull request #3539 from graphql-java/max-enf-count\n\nRestrict the number of ENFs created and take advantage in GoodFaith introspection",
    "before_after_code_files": [
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:         this.errors.set(builder.errors);",
      "87:         this.localContext = builder.localContext;",
      "88:         this.executionInput = builder.executionInput;",
      "90:     }",
      "",
      "[Removed Lines]",
      "89:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "89:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import java.util.Optional;",
      "19: import java.util.concurrent.atomic.AtomicBoolean;",
      "21: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "22: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "46:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "56:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "77:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "79:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "80:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "81:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "78:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "88:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:         return Optional.empty();",
      "91:     }",
      "93:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "94:         if (!isEnabledJvmWide()) {",
      "95:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "112:         Options options = Options.defaultOptions()",
      "113:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "114:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "115:                 .locale(executionContext.getLocale())",
      "116:                 .graphQLContext(executionContext.getGraphQLContext());",
      "118:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "119:                 executionContext.getOperationDefinition(),",
      "120:                 executionContext.getFragmentsByName(),",
      "121:                 executionContext.getCoercedVariables(),",
      "122:                 options);",
      "124:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "33:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "35:     public ExecutableNormalizedOperation(",
      "36:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "40:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "41:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:         this.operation = operation;",
      "45:         this.operationName = operationName;",
      "46:         this.topLevelFields = topLevelFields;",
      "",
      "[Removed Lines]",
      "42:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "43:     ) {",
      "",
      "[Added Lines]",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "48:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "49:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "50:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "51:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "64:         return operationName;",
      "65:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: import static graphql.util.FpKit.filterSet;",
      "65: import static graphql.util.FpKit.groupingBy;",
      "66: import static graphql.util.FpKit.intersection;",
      "67: import static java.util.Collections.singleton;",
      "68: import static java.util.Collections.singletonList;",
      "69: import static java.util.stream.Collectors.toCollection;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: import static java.util.Collections.max;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         private final GraphQLContext graphQLContext;",
      "81:         private final Locale locale;",
      "82:         private final int maxChildrenDepth;",
      "84:         private final boolean deferSupport;",
      "86:         private Options(GraphQLContext graphQLContext,",
      "87:                         Locale locale,",
      "88:                         int maxChildrenDepth,",
      "89:                         boolean deferSupport) {",
      "90:             this.graphQLContext = graphQLContext;",
      "91:             this.locale = locale;",
      "92:             this.maxChildrenDepth = maxChildrenDepth;",
      "93:             this.deferSupport = deferSupport;",
      "94:         }",
      "96:         public static Options defaultOptions() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         private final int maxFieldsCount;",
      "91:                         int maxFieldsCount,",
      "97:             this.maxFieldsCount = maxFieldsCount;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:                     GraphQLContext.getDefault(),",
      "99:                     Locale.getDefault(),",
      "100:                     Integer.MAX_VALUE,",
      "101:                     false);",
      "102:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:                     Integer.MAX_VALUE,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:         public Options locale(Locale locale) {",
      "115:         }",
      "",
      "[Removed Lines]",
      "114:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.deferSupport);",
      "",
      "[Added Lines]",
      "119:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "126:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "128:         }",
      "",
      "[Removed Lines]",
      "127:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.deferSupport);",
      "",
      "[Added Lines]",
      "132:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "138:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "140:         }",
      "",
      "[Removed Lines]",
      "139:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.deferSupport);",
      "",
      "[Added Lines]",
      "144:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
      "145:         }",
      "155:         public Options maxFieldsCount(int maxFieldsCount) {",
      "156:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount, this.deferSupport);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "149:         @ExperimentalApi",
      "150:         public Options deferSupport(boolean deferSupport) {",
      "152:         }",
      "",
      "[Removed Lines]",
      "151:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, deferSupport);",
      "",
      "[Added Lines]",
      "168:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, deferSupport);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "178:             return maxChildrenDepth;",
      "179:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "198:         public int getMaxFieldsCount() {",
      "199:             return maxFieldsCount;",
      "200:         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "266:                                                                                     OperationDefinition operationDefinition,",
      "267:                                                                                     Map<String, FragmentDefinition> fragments,",
      "268:                                                                                     CoercedVariables coercedVariableValues) {",
      "269:         return new ExecutableNormalizedOperationFactoryImpl(",
      "270:                 graphQLSchema,",
      "271:                 operationDefinition,",
      "272:                 fragments,",
      "273:                 coercedVariableValues,",
      "274:                 null,",
      "276:         ).createNormalizedQueryImpl();",
      "277:     }",
      "",
      "[Removed Lines]",
      "275:                 Options.defaultOptions()",
      "",
      "[Added Lines]",
      "290:         return createExecutableNormalizedOperation(graphQLSchema,",
      "291:                 operationDefinition,",
      "292:                 fragments,",
      "293:                 coercedVariableValues,",
      "294:                 Options.defaultOptions());",
      "295:     }",
      "308:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "309:                                                                                     OperationDefinition operationDefinition,",
      "310:                                                                                     Map<String, FragmentDefinition> fragments,",
      "311:                                                                                     CoercedVariables coercedVariableValues,",
      "312:                                                                                     Options options) {",
      "319:                 options",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "390:         private ExecutableNormalizedOperationFactoryImpl(",
      "391:                 GraphQLSchema graphQLSchema,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "433:         private int fieldCount = 0;",
      "434:         private int maxDepthSeen = 0;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "420:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "421:                 updateCoordinatedToNFMap(topLevel);",
      "424:                         topLevel,",
      "425:                         fieldAndAstParents,",
      "426:                         1);",
      "427:             }",
      "429:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "",
      "[Removed Lines]",
      "423:                 buildFieldWithChildren(",
      "",
      "[Added Lines]",
      "469:                 int depthSeen = buildFieldWithChildren(",
      "473:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "437:                     fieldToNormalizedField.build(),",
      "438:                     normalizedFieldToMergedField.build(),",
      "439:                     normalizedFieldToQueryDirectives.build(),",
      "441:             );",
      "442:         }",
      "",
      "[Removed Lines]",
      "440:                     coordinatesToNormalizedFields.build()",
      "",
      "[Added Lines]",
      "487:                     coordinatesToNormalizedFields.build(),",
      "488:                     fieldCount,",
      "489:                     maxDepthSeen",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "448:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "449:         }",
      "452:                                             ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "453:                                             int curLevel) {",
      "458:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "460:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "461:                 executableNormalizedField.addChild(childENF);",
      "462:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "",
      "[Removed Lines]",
      "451:         private void buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "454:             if (curLevel > this.options.getMaxChildrenDepth()) {",
      "455:                 throw new AbortExecutionException(\"Maximum query depth exceeded \" + curLevel + \" > \" + this.options.getMaxChildrenDepth());",
      "456:             }",
      "",
      "[Added Lines]",
      "500:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "503:             checkMaxDepthExceeded(curLevel);",
      "507:             int maxDepthSeen = curLevel;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "467:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "468:                 updateCoordinatedToNFMap(childENF);",
      "471:                         childFieldAndAstParents,",
      "472:                         curLevel + 1);",
      "473:             }",
      "474:         }",
      "",
      "[Removed Lines]",
      "470:                 buildFieldWithChildren(childENF,",
      "",
      "[Added Lines]",
      "518:                 int depthSeen = buildFieldWithChildren(childENF,",
      "521:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "523:                 checkMaxDepthExceeded(maxDepthSeen);",
      "524:             }",
      "525:             return maxDepthSeen;",
      "526:         }",
      "528:         private void checkMaxDepthExceeded(int depthSeen) {",
      "529:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "530:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "578:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "579:                                                    int level,",
      "580:                                                    ExecutableNormalizedField parent) {",
      "581:             Field field;",
      "582:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "583:             field = collectedFieldGroup.fields.iterator().next().field;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "640:             this.fieldCount++;",
      "641:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "642:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "643:             }",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "764:         private NormalizedDeferredExecution buildDeferredExecution(",
      "765:                 List<Directive> directives,",
      "768:                 return null;",
      "769:             }",
      "",
      "[Removed Lines]",
      "766:                 Set<GraphQLObjectType> newPossibleObjects)  {",
      "767:             if(!options.deferSupport) {",
      "",
      "[Added Lines]",
      "828:                 Set<GraphQLObjectType> newPossibleObjects) {",
      "829:             if (!options.deferSupport) {",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "893:         given:",
      "894:         def graphQLSchema = createComplexSchema()",
      "896:         when:",
      "898:             {",
      "899:                 nodeType: __type(name: \"Node\") {",
      "900:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "899:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "902:                         name",
      "903:                     }",
      "904:                 }",
      "906:                     possibleTypes {",
      "907:                         kind",
      "908:                         name",
      "",
      "[Removed Lines]",
      "905:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "907:             }",
      "908:         \"\"\"",
      "909:         def result = graphQL.execute(query)",
      "911:         then:",
      "912:         !result.errors",
      "913:         result.data == [",
      "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "915:         ]",
      "917:         when:",
      "918:         query = \"\"\"",
      "919:         {",
      "920:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "911:                         kind",
      "912:                         name",
      "913:                     }",
      "916:                     interfaces {",
      "917:                         kind",
      "918:                         name",
      "919:                     }",
      "920:                 }",
      "924:         then:",
      "925:         !result.errors",
      "926:         result.data == [",
      "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "930:         ]",
      "931:     }",
      "",
      "[Removed Lines]",
      "914:                 }",
      "915:                 imageType: __type(name: \"Image\") {",
      "921:             }",
      "922:         \"\"\")",
      "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "929:                 }",
      "930:         }",
      "931:         \"\"\"",
      "932:         result = graphQL.execute(query)",
      "934:         then:",
      "935:         !result.errors",
      "936:         result.data == [",
      "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "938:         ]",
      "940:         when:",
      "942:         query = \"\"\"",
      "943:         {",
      "944:             imageType: __type(name: \"Image\") {",
      "950:         }",
      "951:         \"\"\"",
      "952:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "8:         def query = \"\"\"",
      "9:             {",
      "10:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "7:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:                   possibleTypes { name }",
      "16:                   enumValues { name }",
      "17:                   inputFields { name }",
      "27:                 }",
      "28:             }",
      "29:             \"\"\"",
      "",
      "[Removed Lines]",
      "18:             }",
      "19:                 Pet: __type(name: \"Pet\") {",
      "20:                   kind",
      "21:                   name",
      "22:                   fields { name }",
      "23:                   interfaces { name }",
      "24:                   possibleTypes { name }",
      "25:                   enumValues { name }",
      "26:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:                 ],",
      "43:                 enumValues   : null,",
      "44:                 inputFields  : null",
      "47:                                       kind         : 'UNION',",
      "48:                                       name         : 'Pet',",
      "49:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "45:         ],",
      "46:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.GraphQL",
      "5: import graphql.TestUtil",
      "6: import graphql.execution.CoercedVariables",
      "7: import graphql.execution.MergedField",
      "8: import graphql.execution.RawVariables",
      "9: import graphql.execution.directives.QueryAppliedDirective",
      "10: import graphql.language.Document",
      "11: import graphql.language.Field",
      "12: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2876:         noExceptionThrown()",
      "2877:     }",
      "2879:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "2880:             GraphQLSchema graphQLSchema,",
      "2881:             Document document,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2880:     def \"big query exceeding fields count\"() {",
      "2881:         String schema = \"\"\"",
      "2882:         type Query {",
      "2883:             animal: Animal",
      "2884:         }",
      "2885:         interface Animal {",
      "2886:             name: String",
      "2887:             friends: [Friend]",
      "2888:         }",
      "2889:         union Pet = Dog | Cat",
      "2890:         type Friend {",
      "2891:             name: String",
      "2892:             isBirdOwner: Boolean",
      "2893:             isCatOwner: Boolean",
      "2894:             pets: [Pet]",
      "2895:         }",
      "2896:         type Bird implements Animal {",
      "2897:             name: String",
      "2898:             friends: [Friend]",
      "2899:         }",
      "2900:         type Cat implements Animal {",
      "2901:             name: String",
      "2902:             friends: [Friend]",
      "2903:             breed: String",
      "2904:         }",
      "2905:         type Dog implements Animal {",
      "2906:             name: String",
      "2907:             breed: String",
      "2908:             friends: [Friend]",
      "2909:         }",
      "2910:         \"\"\"",
      "2912:         def garbageFields = IntStream.range(0, 1000)",
      "2913:                 .mapToObj {",
      "2914:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2915:                 }",
      "2916:                 .collect(Collectors.joining(\"\\n\"))",
      "2918:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2920:         String query = \"\"\"",
      "2921:         {",
      "2922:             animal {",
      "2923:                 name",
      "2924:                 otherName: name",
      "2925:                 ... on Animal {",
      "2926:                     name",
      "2927:                 }",
      "2928:                 ... on Cat {",
      "2929:                     name",
      "2930:                     friends {",
      "2931:                         ... on Friend {",
      "2932:                             isCatOwner",
      "2933:                             pets {",
      "2934:                                 ... on Dog {",
      "2935:                                     name",
      "2936:                                 }",
      "2937:                             }",
      "2938:                         }",
      "2939:                     }",
      "2940:                 }",
      "2941:                 ... on Bird {",
      "2942:                     friends {",
      "2943:                         isBirdOwner",
      "2944:                     }",
      "2945:                     friends {",
      "2946:                         name",
      "2947:                         pets {",
      "2948:                             ... on Cat {",
      "2949:                                 breed",
      "2950:                             }",
      "2951:                         }",
      "2952:                     }",
      "2953:                 }",
      "2954:                 ... on Dog {",
      "2955:                     name",
      "2956:                 }",
      "2957:                 $garbageFields",
      "2958:             }",
      "2959:         }",
      "2960:         \"\"\"",
      "2962:         assertValidQuery(graphQLSchema, query)",
      "2964:         Document document = TestUtil.parseQuery(query)",
      "2966:         when:",
      "2967:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2968:                 graphQLSchema,",
      "2969:                 document,",
      "2970:                 null,",
      "2971:                 RawVariables.emptyVariables(),",
      "2972:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2974:         then:",
      "2975:         def e = thrown(AbortExecutionException)",
      "2976:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2977:     }",
      "2979:     def \"small query exceeding fields count\"() {",
      "2980:         String schema = \"\"\"",
      "2981:         type Query {",
      "2982:             hello: String",
      "2983:         }",
      "2984:         \"\"\"",
      "2986:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2988:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2990:         assertValidQuery(graphQLSchema, query)",
      "2992:         Document document = TestUtil.parseQuery(query)",
      "2994:         when:",
      "2995:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2996:                 graphQLSchema,",
      "2997:                 document,",
      "2998:                 null,",
      "2999:                 RawVariables.emptyVariables(),",
      "3000:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3002:         then:",
      "3003:         def e = thrown(AbortExecutionException)",
      "3004:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3007:     }",
      "3009:     def \"query not exceeding fields count\"() {",
      "3010:         String schema = \"\"\"",
      "3011:         type Query {",
      "3012:             dogs: [Dog]",
      "3013:         }",
      "3014:         type Dog {",
      "3015:             name: String",
      "3016:             breed: String",
      "3017:         }",
      "3018:         \"\"\"",
      "3020:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3022:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3024:         assertValidQuery(graphQLSchema, query)",
      "3026:         Document document = TestUtil.parseQuery(query)",
      "3028:         when:",
      "3029:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3030:                 graphQLSchema,",
      "3031:                 document,",
      "3032:                 null,",
      "3033:                 RawVariables.emptyVariables(),",
      "3034:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3036:         then:",
      "3037:         notThrown(AbortExecutionException)",
      "3040:     }",
      "3042:     def \"query with meta fields exceeding fields count\"() {",
      "3043:         String schema = \"\"\"",
      "3044:         type Query {",
      "3045:             hello: String",
      "3046:         }",
      "3047:         \"\"\"",
      "3049:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3051:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3053:         assertValidQuery(graphQLSchema, query)",
      "3055:         Document document = TestUtil.parseQuery(query)",
      "3057:         when:",
      "3058:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3059:                 graphQLSchema,",
      "3060:                 document,",
      "3061:                 null,",
      "3062:                 RawVariables.emptyVariables(),",
      "3063:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(188))",
      "3064:         println result.normalizedFieldToMergedField.size()",
      "3066:         then:",
      "3067:         def e = thrown(AbortExecutionException)",
      "3068:         e.message == \"Maximum field count exceeded. 189 > 188\"",
      "3069:     }",
      "3071:     def \"can capture depth and field count\"() {",
      "3072:         String schema = \"\"\"",
      "3073:         type Query {",
      "3074:             foo: Foo",
      "3075:         }",
      "3077:         type Foo {",
      "3078:             stop : String",
      "3079:             bar : Bar",
      "3080:         }",
      "3082:         type Bar {",
      "3083:             stop : String",
      "3084:             foo : Foo",
      "3085:         }",
      "3086:         \"\"\"",
      "3088:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3090:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3092:         assertValidQuery(graphQLSchema, query)",
      "3094:         Document document = TestUtil.parseQuery(query)",
      "3096:         when:",
      "3097:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3098:                 graphQLSchema,",
      "3099:                 document,",
      "3100:                 null,",
      "3101:                 RawVariables.emptyVariables()",
      "3102:                 )",
      "3104:         then:",
      "3105:         result.getOperationDepth() == 7",
      "3106:         result.getOperationFieldCount() == 8",
      "3107:     }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70895d7b8e3c31a61feedd0e54ab0ddef80f1f0c",
      "candidate_info": {
        "commit_hash": "70895d7b8e3c31a61feedd0e54ab0ddef80f1f0c",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/70895d7b8e3c31a61feedd0e54ab0ddef80f1f0c",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
        ],
        "message": "Check max depth seen more often",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3539"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "500:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
          "501:                                             ImmutableList<FieldAndAstParent> fieldAndAstParents,",
          "502:                                             int curLevel) {",
          "507:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "",
          "[Removed Lines]",
          "503:             if (curLevel > this.options.getMaxChildrenDepth()) {",
          "504:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + curLevel + \" > \" + this.options.getMaxChildrenDepth());",
          "505:             }",
          "",
          "[Added Lines]",
          "503:             checkMaxDepthExceeded(curLevel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:                         childFieldAndAstParents,",
          "522:                         curLevel + 1);",
          "523:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
          "524:             }",
          "525:             return maxDepthSeen;",
          "526:         }",
          "528:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
          "529:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
          "530:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:                 checkMaxDepthExceeded(maxDepthSeen);",
          "528:         private void checkMaxDepthExceeded(int depthSeen) {",
          "529:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
          "530:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
          "531:             }",
          "532:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b94f152a53ee4c69acc8d4c08611272342bf6a7b",
      "candidate_info": {
        "commit_hash": "b94f152a53ee4c69acc8d4c08611272342bf6a7b",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/b94f152a53ee4c69acc8d4c08611272342bf6a7b",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ],
        "message": "add the ability to restrict the number of ENFs created",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3539"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         private final GraphQLContext graphQLContext;",
          "81:         private final Locale locale;",
          "82:         private final int maxChildrenDepth;",
          "84:         private final boolean deferSupport;",
          "86:         private Options(GraphQLContext graphQLContext,",
          "87:                         Locale locale,",
          "88:                         int maxChildrenDepth,",
          "89:                         boolean deferSupport) {",
          "90:             this.graphQLContext = graphQLContext;",
          "91:             this.locale = locale;",
          "92:             this.maxChildrenDepth = maxChildrenDepth;",
          "93:             this.deferSupport = deferSupport;",
          "94:         }",
          "96:         public static Options defaultOptions() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         private final int maxFieldsCount;",
          "90:                         int maxFieldsCount,",
          "96:             this.maxFieldsCount = maxFieldsCount;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:                     GraphQLContext.getDefault(),",
          "99:                     Locale.getDefault(),",
          "100:                     Integer.MAX_VALUE,",
          "101:                     false);",
          "102:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:                     Integer.MAX_VALUE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:         public Options locale(Locale locale) {",
          "115:         }",
          "",
          "[Removed Lines]",
          "114:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.deferSupport);",
          "",
          "[Added Lines]",
          "118:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:         public Options graphQLContext(GraphQLContext graphQLContext) {",
          "128:         }",
          "",
          "[Removed Lines]",
          "127:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.deferSupport);",
          "",
          "[Added Lines]",
          "131:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:         public Options maxChildrenDepth(int maxChildrenDepth) {",
          "140:         }",
          "",
          "[Removed Lines]",
          "139:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.deferSupport);",
          "",
          "[Added Lines]",
          "143:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount, this.deferSupport);",
          "144:         }",
          "154:         public Options maxFieldsCount(int maxFieldsCount) {",
          "155:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount, this.deferSupport);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:         @ExperimentalApi",
          "150:         public Options deferSupport(boolean deferSupport) {",
          "152:         }",
          "",
          "[Removed Lines]",
          "151:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, deferSupport);",
          "",
          "[Added Lines]",
          "167:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount, deferSupport);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "178:             return maxChildrenDepth;",
          "179:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:         public int getMaxFieldsCount() {",
          "198:             return maxFieldsCount;",
          "199:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "390:         private ExecutableNormalizedOperationFactoryImpl(",
          "391:                 GraphQLSchema graphQLSchema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:         private int fieldCount = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "590:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "591:             }",
          "592:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "594:             return ExecutableNormalizedField.newNormalizedField()",
          "595:                     .alias(field.getAlias())",
          "596:                     .resolvedArguments(argumentValues)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:             this.fieldCount++;",
          "615:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "616:                 throw new AbortExecutionException(\"Maximum ENF count exceeded \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "617:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764:         private NormalizedDeferredExecution buildDeferredExecution(",
          "765:                 List<Directive> directives,",
          "768:                 return null;",
          "769:             }",
          "",
          "[Removed Lines]",
          "766:                 Set<GraphQLObjectType> newPossibleObjects)  {",
          "767:             if(!options.deferSupport) {",
          "",
          "[Added Lines]",
          "790:                 Set<GraphQLObjectType> newPossibleObjects) {",
          "791:             if (!options.deferSupport) {",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.GraphQL",
          "5: import graphql.TestUtil",
          "6: import graphql.execution.CoercedVariables",
          "7: import graphql.execution.MergedField",
          "8: import graphql.execution.RawVariables",
          "9: import graphql.execution.directives.QueryAppliedDirective",
          "10: import graphql.language.Document",
          "11: import graphql.language.Field",
          "12: import graphql.language.FragmentDefinition",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.AbortExecutionException",
          "11: import graphql.introspection.IntrospectionQuery",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2876:         noExceptionThrown()",
          "2877:     }",
          "2879:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
          "2880:             GraphQLSchema graphQLSchema,",
          "2881:             Document document,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2880:     def \"big query exceeding fields count\"() {",
          "2881:         String schema = \"\"\"",
          "2882:         type Query {",
          "2883:             animal: Animal",
          "2884:         }",
          "2885:         interface Animal {",
          "2886:             name: String",
          "2887:             friends: [Friend]",
          "2888:         }",
          "2889:         union Pet = Dog | Cat",
          "2890:         type Friend {",
          "2891:             name: String",
          "2892:             isBirdOwner: Boolean",
          "2893:             isCatOwner: Boolean",
          "2894:             pets: [Pet]",
          "2895:         }",
          "2896:         type Bird implements Animal {",
          "2897:             name: String",
          "2898:             friends: [Friend]",
          "2899:         }",
          "2900:         type Cat implements Animal {",
          "2901:             name: String",
          "2902:             friends: [Friend]",
          "2903:             breed: String",
          "2904:         }",
          "2905:         type Dog implements Animal {",
          "2906:             name: String",
          "2907:             breed: String",
          "2908:             friends: [Friend]",
          "2909:         }",
          "2910:         \"\"\"",
          "2912:         def garbageFields = IntStream.range(0, 1000)",
          "2913:                 .mapToObj {",
          "2914:                     \"\"\"test_$it: friends { name }\"\"\"",
          "2915:                 }",
          "2916:                 .collect(Collectors.joining(\"\\n\"))",
          "2918:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2920:         String query = \"\"\"",
          "2921:         {",
          "2922:             animal {",
          "2923:                 name",
          "2924:                 otherName: name",
          "2925:                 ... on Animal {",
          "2926:                     name",
          "2927:                 }",
          "2928:                 ... on Cat {",
          "2929:                     name",
          "2930:                     friends {",
          "2931:                         ... on Friend {",
          "2932:                             isCatOwner",
          "2933:                             pets {",
          "2934:                                 ... on Dog {",
          "2935:                                     name",
          "2936:                                 }",
          "2937:                             }",
          "2938:                         }",
          "2939:                     }",
          "2940:                 }",
          "2941:                 ... on Bird {",
          "2942:                     friends {",
          "2943:                         isBirdOwner",
          "2944:                     }",
          "2945:                     friends {",
          "2946:                         name",
          "2947:                         pets {",
          "2948:                             ... on Cat {",
          "2949:                                 breed",
          "2950:                             }",
          "2951:                         }",
          "2952:                     }",
          "2953:                 }",
          "2954:                 ... on Dog {",
          "2955:                     name",
          "2956:                 }",
          "2957:                 $garbageFields",
          "2958:             }",
          "2959:         }",
          "2960:         \"\"\"",
          "2962:         assertValidQuery(graphQLSchema, query)",
          "2964:         Document document = TestUtil.parseQuery(query)",
          "2966:         when:",
          "2967:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2968:                 graphQLSchema,",
          "2969:                 document,",
          "2970:                 null,",
          "2971:                 RawVariables.emptyVariables(),",
          "2972:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
          "2974:         then:",
          "2975:         def e = thrown(AbortExecutionException)",
          "2976:         e.message == \"Maximum ENF count exceeded 2014 > 2013\"",
          "2977:     }",
          "2979:     def \"small query exceeding fields count\"() {",
          "2980:         String schema = \"\"\"",
          "2981:         type Query {",
          "2982:             hello: String",
          "2983:         }",
          "2984:         \"\"\"",
          "2986:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2988:         String query = \"\"\" {hello a1: hello}\"\"\"",
          "2990:         assertValidQuery(graphQLSchema, query)",
          "2992:         Document document = TestUtil.parseQuery(query)",
          "2994:         when:",
          "2995:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2996:                 graphQLSchema,",
          "2997:                 document,",
          "2998:                 null,",
          "2999:                 RawVariables.emptyVariables(),",
          "3000:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
          "3002:         then:",
          "3003:         def e = thrown(AbortExecutionException)",
          "3004:         e.message == \"Maximum ENF count exceeded 2 > 1\"",
          "3007:     }",
          "3009:     def \"query not exceeding fields count\"() {",
          "3010:         String schema = \"\"\"",
          "3011:         type Query {",
          "3012:             dogs: [Dog]",
          "3013:         }",
          "3014:         type Dog {",
          "3015:             name: String",
          "3016:             breed: String",
          "3017:         }",
          "3018:         \"\"\"",
          "3020:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3022:         String query = \"\"\" {dogs{name breed }}\"\"\"",
          "3024:         assertValidQuery(graphQLSchema, query)",
          "3026:         Document document = TestUtil.parseQuery(query)",
          "3028:         when:",
          "3029:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3030:                 graphQLSchema,",
          "3031:                 document,",
          "3032:                 null,",
          "3033:                 RawVariables.emptyVariables(),",
          "3034:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
          "3036:         then:",
          "3037:         notThrown(AbortExecutionException)",
          "3040:     }",
          "3042:     def \"query with meta fields exceeding fields count\"() {",
          "3043:         String schema = \"\"\"",
          "3044:         type Query {",
          "3045:             hello: String",
          "3046:         }",
          "3047:         \"\"\"",
          "3049:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3051:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
          "3053:         assertValidQuery(graphQLSchema, query)",
          "3055:         Document document = TestUtil.parseQuery(query)",
          "3057:         when:",
          "3058:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3059:                 graphQLSchema,",
          "3060:                 document,",
          "3061:                 null,",
          "3062:                 RawVariables.emptyVariables(),",
          "3063:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(188))",
          "3064:         println result.normalizedFieldToMergedField.size()",
          "3066:         then:",
          "3067:         def e = thrown(AbortExecutionException)",
          "3068:         e.message == \"Maximum ENF count exceeded 189 > 188\"",
          "3069:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55f2e5d4e275da2568169f53ed38a34657b0e33c",
      "candidate_info": {
        "commit_hash": "55f2e5d4e275da2568169f53ed38a34657b0e33c",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/55f2e5d4e275da2568169f53ed38a34657b0e33c",
        "files": [
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ],
        "message": "Added benchmark code",
        "before_after_code_files": [
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3539"
        ],
        "olp_code_files": {
          "patch": [
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ],
          "candidate": [
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ]
        }
      },
      "candidate_diff": {
        "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
          "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package benchmark;",
          "3: import graphql.execution.CoercedVariables;",
          "4: import graphql.language.Document;",
          "5: import graphql.normalized.ExecutableNormalizedOperation;",
          "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
          "7: import graphql.parser.Parser;",
          "8: import graphql.schema.GraphQLSchema;",
          "9: import graphql.schema.idl.SchemaGenerator;",
          "10: import org.openjdk.jmh.annotations.Benchmark;",
          "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
          "12: import org.openjdk.jmh.annotations.Fork;",
          "13: import org.openjdk.jmh.annotations.Level;",
          "14: import org.openjdk.jmh.annotations.Measurement;",
          "15: import org.openjdk.jmh.annotations.Mode;",
          "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
          "17: import org.openjdk.jmh.annotations.Param;",
          "18: import org.openjdk.jmh.annotations.Scope;",
          "19: import org.openjdk.jmh.annotations.Setup;",
          "20: import org.openjdk.jmh.annotations.State;",
          "21: import org.openjdk.jmh.annotations.Warmup;",
          "22: import org.openjdk.jmh.runner.Runner;",
          "23: import org.openjdk.jmh.runner.RunnerException;",
          "24: import org.openjdk.jmh.runner.options.Options;",
          "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
          "27: import java.util.concurrent.TimeUnit;",
          "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
          "31: @State(Scope.Benchmark)",
          "32: @Warmup(iterations = 2, time = 5)",
          "33: @Measurement(iterations = 3, time = 5)",
          "34: @Fork(2)",
          "35: public class ENFBenchmarkDeepIntrospection {",
          "37:     @Param({\"2\", \"10\", \"20\"})",
          "38:     int howDeep = 2;",
          "40:     String query = \"\";",
          "42:     GraphQLSchema schema;",
          "43:     Document document;",
          "45:     @Setup(Level.Trial)",
          "46:     public void setUp() {",
          "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
          "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
          "50:         query = createDeepQuery(howDeep);",
          "51:         document = Parser.parse(query);",
          "52:     }",
          "53:     @Benchmark",
          "54:     @BenchmarkMode(Mode.AverageTime)",
          "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
          "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
          "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
          "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
          "59:                 document,",
          "60:                 null,",
          "61:                 CoercedVariables.emptyVariables(),",
          "62:                 options);",
          "63:         return executableNormalizedOperation;",
          "64:     }",
          "66:     public static void main(String[] args) throws RunnerException {",
          "67:         runAtStartup();",
          "69:         Options opt = new OptionsBuilder()",
          "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
          "71:                 .build();",
          "73:         new Runner(opt).run();",
          "74:     }",
          "76:     private static void runAtStartup() {",
          "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
          "79:         benchmarkIntrospection.howDeep = 2;",
          "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
          "82:                 benchmarkIntrospection::setUp,",
          "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
          "84:                 () ->{}",
          "85:         );",
          "86:     }",
          "90:     private static String createDeepQuery(int depth) {",
          "91:         String result = \"query test {\\n\" +",
          "92:                 \"  __schema {\\n\" +",
          "93:                 \"    types {\\n\" +",
          "94:                 \"      ...F1\\n\" +",
          "95:                 \"    }\\n\" +",
          "96:                 \"  }\\n\" +",
          "97:                 \"}\\n\";",
          "99:         for (int i = 1; i < depth; i++) {",
          "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
          "101:                     \"          fields {\\n\" +",
          "102:                     \"            type {\\n\" +",
          "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
          "104:                     \"            }\\n\" +",
          "105:                     \"          }\\n\" +",
          "106:                     \"\\n\" +",
          "107:                     \"          ofType {\\n\" +",
          "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
          "109:                     \"          }\\n\" +",
          "110:                     \"        }\\n\";",
          "111:         }",
          "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
          "113:                 \"          fields {\\n\" +",
          "114:                 \"            type {\\n\" +",
          "115:                 \"name\\n\" +",
          "116:                 \"            }\\n\" +",
          "117:                 \"          }\\n\" +",
          "118:                 \"}\\n\";",
          "119:         return result;",
          "120:     }",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c29b536f5dd1bbd1d14ed1f69309e1f7354cfb5",
      "candidate_info": {
        "commit_hash": "2c29b536f5dd1bbd1d14ed1f69309e1f7354cfb5",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/2c29b536f5dd1bbd1d14ed1f69309e1f7354cfb5",
        "files": [
          "src/main/java/graphql/introspection/GoodFaithIntrospection.java"
        ],
        "message": "Uppped limit as discussed",
        "before_after_code_files": [
          "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3539"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java"
          ],
          "candidate": [
            "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
          "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "52:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 100;",
          "",
          "[Added Lines]",
          "52:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd6ec10c13146cc3a001db89e6842bd973064949",
      "candidate_info": {
        "commit_hash": "bd6ec10c13146cc3a001db89e6842bd973064949",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/bd6ec10c13146cc3a001db89e6842bd973064949",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
        ],
        "message": "Fixed tests and also added unit test for depth in good faith",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3539"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
          "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
          "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "45:             int operationDepth) {",
          "46:         this.operation = operation;",
          "47:         this.operationName = operationName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:             int operationFieldCount,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
          "51:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
          "52:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
          "54:         this.operationDepth = operationDepth;",
          "55:     }",
          "",
          "[Removed Lines]",
          "53:         this.operationFieldCount = fieldToNormalizedField.keySet().size();",
          "",
          "[Added Lines]",
          "54:         this.operationFieldCount = operationFieldCount;",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "432:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "433:         private int fieldCount = 0;",
          "435:         private ExecutableNormalizedOperationFactoryImpl(",
          "436:                 GraphQLSchema graphQLSchema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:         private int maxDepthSeen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
          "460:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "461:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "462:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
          "",
          "[Removed Lines]",
          "459:             int maxDepthSeen = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "485:                     normalizedFieldToMergedField.build(),",
          "486:                     normalizedFieldToQueryDirectives.build(),",
          "487:                     coordinatesToNormalizedFields.build(),",
          "488:                     maxDepthSeen",
          "489:             );",
          "490:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:                     fieldCount,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "629:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
          "630:                                                    int level,",
          "631:                                                    ExecutableNormalizedField parent) {",
          "632:             Field field;",
          "633:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "634:             field = collectedFieldGroup.fields.iterator().next().field;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:             this.fieldCount++;",
          "635:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "636:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "637:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "642:             }",
          "643:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "648:             return ExecutableNormalizedField.newNormalizedField()",
          "649:                     .alias(field.getAlias())",
          "650:                     .resolvedArguments(argumentValues)",
          "",
          "[Removed Lines]",
          "644:             this.fieldCount++;",
          "645:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "646:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "647:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
          "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:         given:",
          "894:         def graphQLSchema = createComplexSchema()",
          "896:         when:",
          "898:             {",
          "899:                 nodeType: __type(name: \"Node\") {",
          "900:                     possibleTypes {",
          "",
          "[Removed Lines]",
          "897:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
          "",
          "[Added Lines]",
          "896:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
          "899:         String query = \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:                         name",
          "903:                     }",
          "904:                 }",
          "906:                     possibleTypes {",
          "907:                         kind",
          "908:                         name",
          "",
          "[Removed Lines]",
          "905:                 resourceType: __type(name: \"Resource\") {",
          "",
          "[Added Lines]",
          "907:             }",
          "908:         \"\"\"",
          "909:         def result = graphQL.execute(query)",
          "911:         then:",
          "912:         !result.errors",
          "913:         result.data == [",
          "914:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "915:         ]",
          "917:         when:",
          "918:         query = \"\"\"",
          "919:         {",
          "920:             resourceType: __type(name: \"Resource\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "911:                         kind",
          "912:                         name",
          "913:                     }",
          "916:                     interfaces {",
          "917:                         kind",
          "918:                         name",
          "919:                     }",
          "920:                 }",
          "924:         then:",
          "925:         !result.errors",
          "926:         result.data == [",
          "928:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
          "930:         ]",
          "931:     }",
          "",
          "[Removed Lines]",
          "914:                 }",
          "915:                 imageType: __type(name: \"Image\") {",
          "921:             }",
          "922:         \"\"\")",
          "927:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "929:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "",
          "[Added Lines]",
          "929:                 }",
          "930:         }",
          "931:         \"\"\"",
          "932:         result = graphQL.execute(query)",
          "934:         then:",
          "935:         !result.errors",
          "936:         result.data == [",
          "937:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "938:         ]",
          "940:         when:",
          "942:         query = \"\"\"",
          "943:         {",
          "944:             imageType: __type(name: \"Image\") {",
          "950:         }",
          "951:         \"\"\"",
          "952:         result = graphQL.execute(query)",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
          "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class UnionTest extends Specification {",
          "8:         def query = \"\"\"",
          "9:             {",
          "10:                 Named: __type(name: \"Named\") {",
          "",
          "[Removed Lines]",
          "7:     def \"can introspect on union and intersection types\"() {",
          "",
          "[Added Lines]",
          "7:     def \"can introspect on union types\"() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:                   possibleTypes { name }",
          "16:                   enumValues { name }",
          "17:                   inputFields { name }",
          "27:                 }",
          "28:             }",
          "29:             \"\"\"",
          "",
          "[Removed Lines]",
          "18:             }",
          "19:                 Pet: __type(name: \"Pet\") {",
          "20:                   kind",
          "21:                   name",
          "22:                   fields { name }",
          "23:                   interfaces { name }",
          "24:                   possibleTypes { name }",
          "25:                   enumValues { name }",
          "26:                   inputFields { name }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:                 ],",
          "43:                 enumValues   : null,",
          "44:                 inputFields  : null",
          "47:                                       kind         : 'UNION',",
          "48:                                       name         : 'Pet',",
          "49:                                       fields       : null,",
          "",
          "[Removed Lines]",
          "45:         ],",
          "46:                               Pet  : [",
          "",
          "[Added Lines]",
          "36:         ]]",
          "37:         when:",
          "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
          "40:         then:",
          "41:         executionResult.data == expectedResult",
          "44:     }",
          "46:     def \"can introspect on intersection types\"() {",
          "47:         def query = \"\"\"",
          "48:             {",
          "49:                 Pet: __type(name: \"Pet\") {",
          "50:                   kind",
          "51:                   name",
          "52:                   fields { name }",
          "53:                   interfaces { name }",
          "54:                   possibleTypes { name }",
          "55:                   enumValues { name }",
          "56:                   inputFields { name }",
          "57:                 }",
          "58:             }",
          "59:             \"\"\"",
          "61:         def expectedResult = [Pet  : [",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
          "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.ExecutionResult",
          "5: import graphql.TestUtil",
          "6: import graphql.execution.CoercedVariables",
          "7: import graphql.language.Document",
          "8: import graphql.normalized.ExecutableNormalizedOperationFactory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.AbortExecutionException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         when:",
          "25:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
          "29:         then:",
          "31:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
          "32:     }",
          "",
          "[Removed Lines]",
          "26:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(),document,",
          "27:         \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "30:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 62",
          "",
          "[Added Lines]",
          "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
          "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:                 a1: __type(name : \"t\") { name }",
          "90:                 a2 :  __type(name : \"t1\") { name }",
          "91:             }",
          "94:         \"\"\" query badActor {",
          "95:                 __schema { types { name} }",
          "",
          "[Removed Lines]",
          "92:         \"\"\"                                                | _",
          "",
          "[Added Lines]",
          "94:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:                 a1: __schema { types { name} }",
          "102:                 a2 : __schema { types { name} }",
          "103:             }",
          "106:     }",
          "",
          "[Removed Lines]",
          "104:         \"\"\"                                     | _",
          "",
          "[Added Lines]",
          "106:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:         !er.errors.isEmpty()",
          "162:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
          "163:     }",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     def \"can stop deep queries\"() {",
          "169:         when:",
          "170:         def query = createDeepQuery(depth)",
          "171:         def then = System.currentTimeMillis()",
          "172:         ExecutionResult er = graphql.execute(query)",
          "173:         def ms = System.currentTimeMillis()-then",
          "175:         then:",
          "176:         !er.errors.isEmpty()",
          "177:         er.errors[0].class == targetError",
          "178:         er.data == null // it stopped hard - it did not continue to normal business",
          "179:         println \"Took \" + ms + \"ms\"",
          "181:         where:",
          "182:         depth | targetError",
          "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
          "184:         10    | AbortExecutionException.class",
          "185:         15    | AbortExecutionException.class",
          "186:         20    | AbortExecutionException.class",
          "187:         25    | AbortExecutionException.class",
          "188:         50    | AbortExecutionException.class",
          "189:         100    | AbortExecutionException.class",
          "190:     }",
          "192:     String createDeepQuery(int depth = 25) {",
          "193:         def result = \"\"\"",
          "194: query test {",
          "195:   __schema {",
          "196:     types {",
          "197:       ...F1",
          "198:     }",
          "199:   }",
          "200: }",
          "201: \"\"\"",
          "202:         for (int i = 1; i < depth; i++) {",
          "203:             result += \"\"\"",
          "204:         fragment F$i on __Type {",
          "205:           fields {",
          "206:             type {",
          "207:               ...F${i + 1}",
          "208:             }",
          "209:           }",
          "211:   ofType {",
          "212:     ...F${i + 1}",
          "213:   }",
          "214: }",
          "217: \"\"\"",
          "218:         }",
          "219:         result += \"\"\"",
          "220:         fragment F$depth on __Type {",
          "221:           fields {",
          "222:             type {",
          "223: name",
          "224:             }",
          "225:           }",
          "226: }",
          "229: \"\"\"",
          "230:         return result",
          "231:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}