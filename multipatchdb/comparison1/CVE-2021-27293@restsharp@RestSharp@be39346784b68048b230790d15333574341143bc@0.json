{
  "cve_id": "CVE-2021-27293",
  "cve_desc": "RestSharp < 106.11.8-alpha.0.13 uses a regular expression which is vulnerable to Regular Expression Denial of Service (ReDoS) when converting strings into DateTimes. If a server responds with a malicious string, the client using RestSharp will be stuck processing it for an exceedingly long time. Thus the remote server can trigger Denial of Service.",
  "repo": "restsharp/RestSharp",
  "patch_hash": "be39346784b68048b230790d15333574341143bc",
  "patch_info": {
    "commit_hash": "be39346784b68048b230790d15333574341143bc",
    "repo": "restsharp/RestSharp",
    "commit_url": "https://github.com/restsharp/RestSharp/commit/be39346784b68048b230790d15333574341143bc",
    "files": [
      "src/RestSharp/Extensions/StringExtensions.cs",
      "test/RestSharp.Tests/JsonTests.cs",
      "test/RestSharp.Tests/RestSharp.Tests.csproj",
      "test/RestSharp.Tests/SampleClasses/misc.cs",
      "test/RestSharp.Tests/SampleData/newdatetimes.json"
    ],
    "message": "Fix NewDateRegex in StringExtensions #1556 (#1557)\n\n* Fix NewDateRegex in StringExtensions #1556\n\nPreviously it had exponential worst-case complexity and was vulnerable to REDoS.\n\n* Simple test for new Date(123)",
    "before_after_code_files": [
      "src/RestSharp/Extensions/StringExtensions.cs||src/RestSharp/Extensions/StringExtensions.cs",
      "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs",
      "test/RestSharp.Tests/RestSharp.Tests.csproj||test/RestSharp.Tests/RestSharp.Tests.csproj",
      "test/RestSharp.Tests/SampleClasses/misc.cs||test/RestSharp.Tests/SampleClasses/misc.cs"
    ]
  },
  "patch_diff": {
    "src/RestSharp/Extensions/StringExtensions.cs||src/RestSharp/Extensions/StringExtensions.cs": [
      "File: src/RestSharp/Extensions/StringExtensions.cs -> src/RestSharp/Extensions/StringExtensions.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     public static class StringExtensions",
      "26:     {",
      "27:         static readonly Regex DateRegex    = new Regex(@\"\\\\?/Date\\((-?\\d+)(-|\\+)?([0-9]{4})?\\)\\\\?/\");",
      "30:         static readonly Regex IsUpperCaseRegex = new Regex(@\"^[A-Z]+$\");",
      "",
      "[Removed Lines]",
      "28:         static readonly Regex NewDateRegex = new Regex(@\"newDate\\((-?\\d+)*\\)\");",
      "",
      "[Added Lines]",
      "28:         static readonly Regex NewDateRegex = new Regex(@\"newDate\\((-?\\d+)\\)\");",
      "",
      "---------------"
    ],
    "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs": [
      "File: test/RestSharp.Tests/JsonTests.cs -> test/RestSharp.Tests/JsonTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:             );",
      "117:         }",
      "119:         [Test]",
      "120:         public void Can_Deserialize_Decimal_With_Four_Zeros_After_Floating_Point()",
      "121:         {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:         [Test]",
      "120:         public void Can_Deserialize_NewDateTime()",
      "121:         {",
      "122:             var payload = GetPayLoad<NewDateTimeTestStructure>(\"newdatetimes.json\");",
      "124:             Assert.AreEqual(",
      "125:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
      "126:                 payload.DateTime",
      "127:             );",
      "128:         }",
      "130:         [Test]",
      "131:         public void Can_Deserialize_Negative_NewDateTime()",
      "132:         {",
      "133:             var payload = GetPayLoad<NewDateTimeTestStructure>(\"newdatetimes.json\");",
      "135:             Assert.AreEqual(",
      "136:                 new DateTime(1969, 12, 31, 23, 59, 59, 999, DateTimeKind.Utc),",
      "137:                 payload.DateTimeNegative",
      "138:             );",
      "139:         }",
      "",
      "---------------"
    ],
    "test/RestSharp.Tests/RestSharp.Tests.csproj||test/RestSharp.Tests/RestSharp.Tests.csproj": [
      "File: test/RestSharp.Tests/RestSharp.Tests.csproj -> test/RestSharp.Tests/RestSharp.Tests.csproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:     <None Update=\"SampleData\\NestedListSample.xml\">",
      "85:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
      "86:     </None>",
      "87:     <None Update=\"SampleData\\objectproperty.json\">",
      "88:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
      "89:     </None>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:     <None Update=\"SampleData\\newdatetimes.json\">",
      "88:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
      "89:     </None>",
      "",
      "---------------"
    ],
    "test/RestSharp.Tests/SampleClasses/misc.cs||test/RestSharp.Tests/SampleClasses/misc.cs": [
      "File: test/RestSharp.Tests/SampleClasses/misc.cs -> test/RestSharp.Tests/SampleClasses/misc.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "222:         public DateTime DateTimeWithOffset { get; set; }",
      "223:     }",
      "225:     public class TimeSpanTestStructure",
      "226:     {",
      "227:         public TimeSpan Tick { get; set; }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "225:     public class NewDateTimeTestStructure",
      "226:     {",
      "227:         public DateTime DateTime { get; set; }",
      "229:         public DateTime DateTimeNegative { get; set; }",
      "230:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c544837963b53f9f8bd0824eff945f060664da96",
      "candidate_info": {
        "commit_hash": "c544837963b53f9f8bd0824eff945f060664da96",
        "repo": "restsharp/RestSharp",
        "commit_url": "https://github.com/restsharp/RestSharp/commit/c544837963b53f9f8bd0824eff945f060664da96",
        "files": [
          "src/RestSharp/Serializers/Json/JsonSerializer.cs",
          "test/RestSharp.Tests/JsonTests.cs",
          "test/RestSharp.Tests/SampleClasses/misc.cs",
          "test/RestSharp.Tests/TestData/JsonData.cs"
        ],
        "message": "Double uppercase issue (#1601)\n\n* Addressed double-cap deserializing issue w/ tests\n\n* Updated to use predefined cultureInfo property",
        "before_after_code_files": [
          "src/RestSharp/Serializers/Json/JsonSerializer.cs||src/RestSharp/Serializers/Json/JsonSerializer.cs",
          "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs",
          "test/RestSharp.Tests/SampleClasses/misc.cs||test/RestSharp.Tests/SampleClasses/misc.cs",
          "test/RestSharp.Tests/TestData/JsonData.cs||test/RestSharp.Tests/TestData/JsonData.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs",
            "test/RestSharp.Tests/SampleClasses/misc.cs||test/RestSharp.Tests/SampleClasses/misc.cs"
          ],
          "candidate": [
            "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs",
            "test/RestSharp.Tests/SampleClasses/misc.cs||test/RestSharp.Tests/SampleClasses/misc.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/RestSharp/Serializers/Json/JsonSerializer.cs||src/RestSharp/Serializers/Json/JsonSerializer.cs": [
          "File: src/RestSharp/Serializers/Json/JsonSerializer.cs -> src/RestSharp/Serializers/Json/JsonSerializer.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:                 if (!data.TryGetValue(name, out var value))",
          "121:                 {",
          "122:                     var parts       = name.Split('.');",
          "125:                     for (var i = 0; i < parts.Length; ++i)",
          "126:                     {",
          "",
          "[Removed Lines]",
          "123:                     var currentData = data;",
          "",
          "[Added Lines]",
          "123:                     IDictionary<string, object> currentData = new Dictionary<string, object>(data, StringComparer.Create(Culture, true));",
          "",
          "---------------"
        ],
        "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs": [
          "File: test/RestSharp.Tests/JsonTests.cs -> test/RestSharp.Tests/JsonTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:             Assert.IsNotEmpty(output.Numbers);",
          "437:         }",
          "439:         [Test]",
          "440:         public void Can_Deserialize_Names_With_Dashes_With_Default_Root()",
          "441:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:         [Test]",
          "440:         public void Can_Deserialize_Names_With_Double_Uppercase()",
          "441:         {",
          "442:             var doc = JsonData.CreateJsonWithDoubleUppercase();",
          "443:             var serializer = new JsonSerializer();",
          "444:             var response = new RestResponse { Content = doc };",
          "445:             var p = serializer.Deserialize<PersonForJson>(response);",
          "447:             Assert.AreEqual(435, p.PersonId);",
          "448:         }",
          "",
          "---------------"
        ],
        "test/RestSharp.Tests/SampleClasses/misc.cs||test/RestSharp.Tests/SampleClasses/misc.cs": [
          "File: test/RestSharp.Tests/SampleClasses/misc.cs -> test/RestSharp.Tests/SampleClasses/misc.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         public Order Order { get; set; }",
          "129:         public Disposition Disposition { get; set; }",
          "130:     }",
          "132:     public enum Order { First, Second, Third }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:         public int PersonId { get; set; }",
          "",
          "---------------"
        ],
        "test/RestSharp.Tests/TestData/JsonData.cs||test/RestSharp.Tests/TestData/JsonData.cs": [
          "File: test/RestSharp.Tests/TestData/JsonData.cs -> test/RestSharp.Tests/TestData/JsonData.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:             return doc.ToString();",
          "127:         }",
          "129:         public static string CreateJson()",
          "130:         {",
          "131:             var doc = new JsonObject",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:         public static string CreateJsonWithDoubleUppercase()",
          "130:         {",
          "131:             var doc = new JsonObject",
          "132:             {",
          "133:                 [\"personID\"] = 435,",
          "134:             };",
          "135:             return doc.ToString();",
          "136:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef083ba52be3f8a7a5c25547c5fb2e8d1410dae7",
      "candidate_info": {
        "commit_hash": "ef083ba52be3f8a7a5c25547c5fb2e8d1410dae7",
        "repo": "restsharp/RestSharp",
        "commit_url": "https://github.com/restsharp/RestSharp/commit/ef083ba52be3f8a7a5c25547c5fb2e8d1410dae7",
        "files": [
          "src/RestSharp/Extensions/ReflectionExtensions.cs",
          "test/RestSharp.Tests/JsonTests.cs"
        ],
        "message": "Remove the trow when enum value isn't present in favour of a default value of the enum. It changes the behaviour for #1614",
        "before_after_code_files": [
          "src/RestSharp/Extensions/ReflectionExtensions.cs||src/RestSharp/Extensions/ReflectionExtensions.cs",
          "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs"
          ],
          "candidate": [
            "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/RestSharp/Extensions/ReflectionExtensions.cs||src/RestSharp/Extensions/ReflectionExtensions.cs": [
          "File: src/RestSharp/Extensions/ReflectionExtensions.cs -> src/RestSharp/Extensions/ReflectionExtensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:             if (enumValueAsUnderlyingType != null && Enum.IsDefined(type, enumValueAsUnderlyingType))",
          "94:                 ret = (Enum) Enum.ToObject(type, enumValueAsUnderlyingType);",
          "99:         }",
          "100:     }",
          "101: }",
          "",
          "[Removed Lines]",
          "96:             if (ret == null)",
          "97:                 throw new ArgumentOutOfRangeException(value + \" undefined for \" + type);",
          "98:             return ret;",
          "",
          "[Added Lines]",
          "96:             return ret ?? Activator.CreateInstance(type);",
          "",
          "---------------"
        ],
        "test/RestSharp.Tests/JsonTests.cs||test/RestSharp.Tests/JsonTests.cs": [
          "File: test/RestSharp.Tests/JsonTests.cs -> test/RestSharp.Tests/JsonTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using RestSharp.Tests.SampleClasses;",
          "6: using RestSharp.Tests.TestData;",
          "848:     }",
          "849: }",
          "",
          "[Removed Lines]",
          "8: namespace RestSharp.Tests {",
          "9:     public class JsonTests {",
          "10:         const string AlternativeCulture = \"pt-PT\";",
          "12:         static readonly string CurrentPath = AppDomain.CurrentDomain.BaseDirectory;",
          "14:         static T GetPayLoad<T>(string fileName) {",
          "15:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", fileName));",
          "16:             var response   = new RestResponse { Content = doc };",
          "17:             var serializer = new JsonSerializer();",
          "19:             return serializer.Deserialize<T>(response);",
          "20:         }",
          "22:         [Fact]",
          "23:         public void Can_Deserialize_4sq_Json_With_Root_Element_Specified() {",
          "24:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"4sq.json\"));",
          "25:             var serializer = new JsonSerializer { RootElement = \"response\" };",
          "26:             var output     = serializer.Deserialize<VenuesResponse>(new RestResponse { Content = doc });",
          "28:             Assert.NotEmpty(output.Groups);",
          "29:         }",
          "31:         [Fact]",
          "32:         public void Can_Deserialize_Custom_Formatted_Date() {",
          "33:             var          culture   = CultureInfo.InvariantCulture;",
          "34:             const string format    = \"dd yyyy MMM, hh:mm ss tt\";",
          "35:             var          date      = new DateTime(2010, 2, 8, 11, 11, 11);",
          "36:             var          formatted = new { StartDate = date.ToString(format, culture) };",
          "37:             var          data      = SimpleJson.SerializeObject(formatted);",
          "38:             var          response  = new RestResponse { Content = data };",
          "40:             var serializer = new JsonSerializer {",
          "41:                 DateFormat = format,",
          "42:                 Culture    = culture",
          "43:             };",
          "44:             var output = serializer.Deserialize<PersonForJson>(response);",
          "46:             Assert.Equal(date, output.StartDate);",
          "47:         }",
          "49:         [Fact]",
          "50:         public void Can_Deserialize_Date_With_Milliseconds() {",
          "51:             const string content    = \"{ \\\"CreatedOn\\\": \\\"2018-10-01T14:39:00.123Z\\\" }\";",
          "52:             var          serializer = new JsonSerializer();",
          "53:             var          output     = serializer.Deserialize<DateTimeResponse>(new RestResponse { Content = content });",
          "54:             var          expected   = DateTime.Parse(\"2018-10-01 14:39:00\", CultureInfo.InvariantCulture);",
          "56:             Assert.NotNull(output);",
          "57:             Assert.Equal(DateTimeKind.Utc, output.CreatedOn.Kind);",
          "59:             Assert.Equal(",
          "60:                 expected.ToString(CultureInfo.InvariantCulture),",
          "61:                 output.CreatedOn.ToString(CultureInfo.InvariantCulture)",
          "62:             );",
          "63:         }",
          "65:         [Fact]",
          "66:         public void Can_Deserialize_DateTime() {",
          "67:             var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "69:             Assert.Equal(",
          "70:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "71:                 payload.DateTime",
          "72:             );",
          "73:         }",
          "75:         [Fact]",
          "76:         public void Can_Deserialize_DateTime_With_DateTimeStyles() {",
          "77:             var item0 = new DateTime(2010, 2, 8, 11, 11, 11, DateTimeKind.Local);",
          "78:             var item1 = new DateTime(2011, 2, 8, 11, 11, 11, DateTimeKind.Utc);",
          "79:             var item2 = new DateTime(2012, 2, 8, 11, 11, 11, DateTimeKind.Unspecified);",
          "81:             var data = new JsonObject { [\"Items\"] = new JsonArray { item0, item1, item2, \"/Date(1309421746929+0000)/\" } };",
          "83:             var serializer = new JsonSerializer();",
          "84:             var response   = new RestResponse { Content = data.ToString() };",
          "85:             var p          = serializer.Deserialize<GenericWithList<DateTime>>(response);",
          "87:             Assert.NotEqual(item0.Kind, p.Items[0].Kind);",
          "88:             Assert.Equal(item1.Kind, p.Items[1].Kind);",
          "89:             Assert.Equal(DateTimeKind.Utc, p.Items[2].Kind);",
          "90:             Assert.Equal(DateTimeKind.Utc, p.Items[3].Kind);",
          "91:         }",
          "93:         [Fact]",
          "94:         public void Can_Deserialize_DateTimeOffset() {",
          "95:             var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "97:             Assert.Equal(",
          "98:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc).ToString(\"yyyy-MM-dd HH:mm:ss.fff\"),",
          "99:                 payload.DateTimeOffset.ToString(\"yyyy-MM-dd HH:mm:ss.fff\")",
          "100:             );",
          "101:         }",
          "103:         [Fact]",
          "104:         public void Can_Deserialize_NewDateTime() {",
          "105:             var payload = GetPayLoad<NewDateTimeTestStructure>(\"newdatetimes.json\");",
          "107:             Assert.Equal(",
          "108:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "109:                 payload.DateTime",
          "110:             );",
          "111:         }",
          "113:         [Fact]",
          "114:         public void Can_Deserialize_Negative_NewDateTime() {",
          "115:             var payload = GetPayLoad<NewDateTimeTestStructure>(\"newdatetimes.json\");",
          "117:             Assert.Equal(",
          "118:                 new DateTime(1969, 12, 31, 23, 59, 59, 999, DateTimeKind.Utc),",
          "119:                 payload.DateTimeNegative",
          "120:             );",
          "121:         }",
          "123:         [Fact]",
          "124:         public void Can_Deserialize_Decimal_With_Four_Zeros_After_Floating_Point() {",
          "125:             const string json       = \"{\\\"Value\\\":0.00005557}\";",
          "126:             var          response   = new RestResponse { Content = json };",
          "127:             var          serializer = new JsonSerializer();",
          "128:             var          result     = serializer.Deserialize<DecimalNumber>(response);",
          "130:             Assert.Equal(.00005557m, result.Value);",
          "131:         }",
          "133:         [Fact]",
          "134:         public void Can_Deserialize_Dictionary_of_Lists() {",
          "135:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary.json\"));",
          "136:             var serializer = new JsonSerializer { RootElement = \"response\" };",
          "137:             var output     = serializer.Deserialize<EmployeeTracker>(new RestResponse { Content = doc });",
          "139:             Assert.NotEmpty(output.EmployeesMail);",
          "140:             Assert.NotEmpty(output.EmployeesTime);",
          "141:             Assert.NotEmpty(output.EmployeesPay);",
          "142:         }",
          "144:         [Fact]",
          "145:         public void Can_Deserialize_Dictionary_with_Null() {",
          "146:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary_null.json\"));",
          "147:             var serializer = new JsonSerializer { RootElement = \"response\" };",
          "149:             IDictionary<string, object> output =",
          "150:                 serializer.Deserialize<Dictionary<string, object>>(new RestResponse { Content = doc });",
          "152:             var dictionary = (IDictionary<string, object>)output[\"SomeDictionary\"];",
          "153:             Assert.Equal(\"abra\", dictionary[\"NonNull\"]);",
          "154:             Assert.Null(dictionary[\"Null\"]);",
          "155:         }",
          "157:         [Fact]",
          "158:         public void Can_Deserialize_Dot_Field() {",
          "159:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"bearertoken.json\"));",
          "160:             var response   = new RestResponse { Content = data };",
          "161:             var serializer = new JsonSerializer();",
          "162:             var output     = serializer.Deserialize<BearerToken>(response);",
          "164:             var expectedIssued =",
          "165:                 DateTimeOffset.ParseExact(\"Mon, 14 Oct 2013 06:53:32 GMT\", \"r\", CultureInfo.InvariantCulture);",
          "167:             var expectedExpires =",
          "168:                 DateTimeOffset.ParseExact(\"Mon, 28 Oct 2013 06:53:32 GMT\", \"r\", CultureInfo.InvariantCulture);",
          "170:             Assert.Equal(\"boQtj0SCGz2GFGz[...]\", output.AccessToken);",
          "171:             Assert.Equal(\"bearer\", output.TokenType);",
          "172:             Assert.Equal(1209599L, output.ExpiresIn);",
          "173:             Assert.Equal(\"Alice\", output.UserName);",
          "174:             Assert.Equal(expectedIssued, output.Issued);",
          "175:             Assert.Equal(expectedExpires, output.Expires);",
          "176:         }",
          "178:         [Fact]",
          "179:         public void Can_Deserialize_Elements_to_Nullable_Values() {",
          "180:             var serializer = new JsonSerializer();",
          "182:             var output = serializer.Deserialize<NullableValues>(",
          "183:                 new RestResponse",
          "184:                     { Content = JsonData.CreateJsonWithoutEmptyValues }",
          "185:             );",
          "187:             Assert.NotNull(output.Id);",
          "188:             Assert.NotNull(output.StartDate);",
          "189:             Assert.NotNull(output.UniqueId);",
          "191:             Assert.Equal(123, output.Id);",
          "192:             Assert.NotNull(output.StartDate);",
          "194:             Assert.Equal(",
          "195:                 new DateTime(2010, 2, 21, 9, 35, 00, DateTimeKind.Utc),",
          "196:                 output.StartDate.Value",
          "197:             );",
          "198:             Assert.Equal(new Guid(JsonData.GUID_STRING), output.UniqueId);",
          "199:         }",
          "201:         [Fact]",
          "202:         public void Can_Deserialize_Empty_Elements_to_Nullable_Values() {",
          "203:             var serializer = new JsonSerializer();",
          "205:             var output =",
          "206:                 serializer.Deserialize<NullableValues>(new RestResponse { Content = JsonData.JsonWithEmptyValues });",
          "208:             Assert.Null(output.Id);",
          "209:             Assert.Null(output.StartDate);",
          "210:             Assert.Null(output.UniqueId);",
          "211:         }",
          "213:         [Fact]",
          "214:         public void Can_Deserialize_Exponential_Notation() {",
          "215:             const string content    = \"{ \\\"Value\\\": 4.8e-04 }\";",
          "216:             var          serializer = new JsonSerializer();",
          "217:             var          output     = serializer.Deserialize<DecimalNumber>(new RestResponse { Content = content });",
          "218:             var          expected   = decimal.Parse(\"4.8e-04\", NumberStyles.Float, CultureInfo.InvariantCulture);",
          "220:             Assert.NotNull(output);",
          "221:             Assert.Equal(expected, output.Value);",
          "222:         }",
          "224:         [Fact]",
          "225:         public void Can_Deserialize_From_Root_Element() {",
          "226:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"sojson.json\"));",
          "227:             var serializer = new JsonSerializer { RootElement = \"User\" };",
          "228:             var output     = serializer.Deserialize<SoUser>(new RestResponse { Content = doc });",
          "230:             Assert.Equal(\"John Sheehan\", output.DisplayName);",
          "231:         }",
          "233:         [Fact]",
          "234:         public void Can_Deserialize_Generic_List_of_DateTime() {",
          "235:             var item1 = new DateTime(2010, 2, 8, 11, 11, 11);",
          "236:             var item2 = item1.AddSeconds(12345);",
          "237:             var data  = new JsonObject { [\"Items\"] = new JsonArray { item1.ToString(\"u\"), item2.ToString(\"u\") } };",
          "239:             var serializer = new JsonSerializer();",
          "240:             var response   = new RestResponse { Content = data.ToString() };",
          "241:             var p          = serializer.Deserialize<GenericWithList<DateTime>>(response);",
          "243:             Assert.Equal(2, p.Items.Count);",
          "244:             Assert.Equal(item1, p.Items[0]);",
          "245:             Assert.Equal(item2, p.Items[1]);",
          "246:         }",
          "248:         [Fact]",
          "249:         public void Can_Deserialize_Generic_Members() {",
          "250:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"GenericWithList.json\"));",
          "251:             var serializer = new JsonSerializer();",
          "253:             var output =",
          "254:                 serializer.Deserialize<Generic<GenericWithList<Foe>>>(new RestResponse { Content = doc });",
          "256:             Assert.Equal(\"Foe sho\", output.Data.Items[0].Nickname);",
          "257:         }",
          "259:         [Fact]",
          "260:         public void Can_Deserialize_Guid_String_Fields() {",
          "261:             var doc        = new JsonObject { [\"Guid\"] = JsonData.GUID_STRING };",
          "262:             var serializer = new JsonSerializer();",
          "263:             var response   = new RestResponse { Content = doc.ToString() };",
          "264:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "266:             Assert.Equal(new Guid(JsonData.GUID_STRING), p.Guid);",
          "267:         }",
          "269:         [Fact]",
          "270:         public void Can_Deserialize_IEnumerable_of_Simple_Types() {",
          "271:             const string content    = \"{\\\"numbers\\\":[1,2,3,4,5]}\";",
          "272:             var          serializer = new JsonSerializer { RootElement = \"numbers\" };",
          "273:             var          output     = serializer.Deserialize<IEnumerable<int>>(new RestResponse { Content = content }).ToArray();",
          "275:             Assert.NotEmpty(output);",
          "276:             Assert.True(output.Length == 5);",
          "277:         }",
          "279:         [Fact]",
          "280:         public void Can_Deserialize_IList_of_Simple_Types() {",
          "281:             const string content    = \"{\\\"numbers\\\":[1,2,3,4,5]}\";",
          "282:             var          serializer = new JsonSerializer { RootElement = \"numbers\" };",
          "283:             var          output     = serializer.Deserialize<IList<int>>(new RestResponse { Content = content });",
          "285:             Assert.NotEmpty(output);",
          "286:             Assert.True(output.Count == 5);",
          "287:         }",
          "289:         [Fact]",
          "290:         public void Can_Deserialize_Int_to_Bool() {",
          "291:             var doc = new JsonObject { [\"IsCool\"] = 1 };",
          "293:             var serializer = new JsonSerializer();",
          "294:             var response   = new RestResponse { Content = doc.ToString() };",
          "295:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "297:             Assert.True(p.IsCool);",
          "298:         }",
          "300:         [Fact]",
          "301:         public void Can_Deserialize_Into_Struct() {",
          "302:             const string content    = \"{\\\"one\\\":\\\"oneOneOne\\\", \\\"two\\\":\\\"twoTwoTwo\\\", \\\"three\\\":3}\";",
          "303:             var          serializer = new JsonSerializer();",
          "304:             var          output     = serializer.Deserialize<SimpleStruct>(new RestResponse { Content = content });",
          "306:             Assert.Equal(\"oneOneOne\", output.One);",
          "307:             Assert.Equal(\"twoTwoTwo\", output.Two);",
          "308:             Assert.Equal(3, output.Three);",
          "309:         }",
          "311:         [Fact]",
          "312:         public void Can_Deserialize_Iso_Json_Dates() {",
          "313:             var doc        = JsonData.CreateIsoDateJson();",
          "314:             var serializer = new JsonSerializer();",
          "315:             var response   = new RestResponse { Content = doc };",
          "316:             var bd         = serializer.Deserialize<Birthdate>(response);",
          "318:             Assert.Equal(new DateTime(1910, 9, 25, 9, 30, 25, DateTimeKind.Utc), bd.Value);",
          "319:         }",
          "321:         [Fact]",
          "322:         public void Can_Deserialize_Iso8601DateTimeLocal() {",
          "323:             var payload = GetPayLoad<Iso8601DateTimeTestStructure>(\"iso8601datetimes.json\");",
          "325:             Assert.Equal(",
          "326:                 new DateTime(2012, 7, 19, 10, 23, 25, DateTimeKind.Utc),",
          "327:                 payload.DateTimeLocal",
          "328:             );",
          "329:         }",
          "331:         [Fact]",
          "332:         public void Can_Deserialize_Iso8601DateTimeWithOffset() {",
          "333:             var payload = GetPayLoad<Iso8601DateTimeTestStructure>(\"iso8601datetimes.json\");",
          "335:             Assert.Equal(",
          "336:                 new DateTime(2012, 7, 19, 10, 23, 25, 544, DateTimeKind.Utc),",
          "337:                 payload.DateTimeWithOffset.ToUniversalTime()",
          "338:             );",
          "339:         }",
          "341:         [Fact]",
          "342:         public void Can_Deserialize_Iso8601DateTimeZulu() {",
          "343:             var payload = GetPayLoad<Iso8601DateTimeTestStructure>(\"iso8601datetimes.json\");",
          "345:             Assert.Equal(",
          "346:                 new DateTime(2012, 7, 19, 10, 23, 25, 544, DateTimeKind.Utc),",
          "347:                 payload.DateTimeUtc.ToUniversalTime()",
          "348:             );",
          "349:         }",
          "351:         [Fact]",
          "352:         public void Can_Deserialize_Json_Using_DeserializeAs_Attribute() {",
          "353:             const string content =",
          "354:                 \"{\\\"sid\\\":\\\"asdasdasdasdasdasdasda\\\",\\\"friendlyName\\\":\\\"VeryNiceName\\\",\\\"oddballPropertyName\\\":\\\"blahblah\\\"}\";",
          "355:             var serializer = new JsonSerializer { RootElement = \"users\" };",
          "356:             var output     = serializer.Deserialize<Oddball>(new RestResponse { Content = content });",
          "358:             Assert.NotNull(output);",
          "359:             Assert.Equal(\"blahblah\", output.GoodPropertyName);",
          "360:         }",
          "362:         [Fact]",
          "363:         public void Can_Deserialize_JsonNet_Dates() {",
          "364:             var person = GetPayLoad<PersonForJson>(\"person.json\");",
          "366:             Assert.Equal(",
          "367:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "368:                 person.StartDate",
          "369:             );",
          "370:         }",
          "372:         [Fact]",
          "373:         public void Can_Deserialize_List_of_Guid() {",
          "374:             var id1  = new Guid(\"b0e5c11f-e944-478c-aadd-753b956d0c8c\");",
          "375:             var id2  = new Guid(\"809399fa-21c4-4dca-8dcd-34cb697fbca0\");",
          "376:             var data = new JsonObject { [\"Ids\"] = new JsonArray { id1, id2 } };",
          "378:             var serializer = new JsonSerializer();",
          "379:             var response   = new RestResponse { Content = data.ToString() };",
          "380:             var p          = serializer.Deserialize<GuidList>(response);",
          "382:             Assert.Equal(2, p.Ids.Count);",
          "383:             Assert.Equal(id1, p.Ids[0]);",
          "384:             Assert.Equal(id2, p.Ids[1]);",
          "385:         }",
          "387:         [Fact]",
          "388:         public void Can_Deserialize_Lists_of_Simple_Types() {",
          "389:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonlists.json\"));",
          "390:             var serializer = new JsonSerializer();",
          "391:             var output     = serializer.Deserialize<JsonLists>(new RestResponse { Content = doc });",
          "393:             Assert.NotEmpty(output.Names);",
          "394:             Assert.NotEmpty(output.Numbers);",
          "395:         }",
          "397:         [Fact]",
          "398:         public void Can_Deserialize_Names_With_Double_Uppercase() {",
          "399:             var doc        = JsonData.CreateJsonWithDoubleUppercase();",
          "400:             var serializer = new JsonSerializer();",
          "401:             var response   = new RestResponse { Content = doc };",
          "402:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "404:             Assert.Equal(435, p.PersonId);",
          "405:         }",
          "407:         [Fact]",
          "408:         public void Can_Deserialize_Names_With_Dashes_With_Default_Root() {",
          "409:             var doc        = JsonData.CreateJsonWithDashes();",
          "410:             var serializer = new JsonSerializer();",
          "411:             var response   = new RestResponse { Content = doc };",
          "412:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "414:             Assert.Equal(\"John Sheehan\", p.Name);",
          "416:             Assert.Equal(28, p.Age);",
          "417:             Assert.Equal(long.MaxValue, p.BigNumber);",
          "418:             Assert.Equal(99.9999m, p.Percent);",
          "419:             Assert.False(p.IsCool);",
          "420:             Assert.Equal(new Uri(\"http://example.com\", UriKind.RelativeOrAbsolute), p.Url);",
          "421:             Assert.Equal(new Uri(\"/foo/bar\", UriKind.RelativeOrAbsolute), p.UrlPath);",
          "422:             Assert.NotNull(p.Friends);",
          "423:             Assert.Equal(10, p.Friends.Count);",
          "424:             Assert.NotNull(p.BestFriend);",
          "425:             Assert.Equal(\"The Fonz\", p.BestFriend.Name);",
          "426:             Assert.Equal(1952, p.BestFriend.Since);",
          "427:             Assert.NotEmpty(p.Foes);",
          "428:             Assert.Equal(\"Foe 1\", p.Foes[\"dict1\"].Nickname);",
          "429:             Assert.Equal(\"Foe 2\", p.Foes[\"dict2\"].Nickname);",
          "430:         }",
          "432:         [Fact]",
          "433:         public void Can_Deserialize_Names_With_Dashes_With_Default_Root_Alternative_Culture() {",
          "434:             using (new CultureChange(AlternativeCulture)) Can_Deserialize_Names_With_Dashes_With_Default_Root();",
          "435:         }",
          "437:         [Fact]",
          "438:         public void Can_Deserialize_Names_With_Underscore_Prefix() {",
          "439:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"underscore_prefix.json\"));",
          "440:             var response   = new RestResponse { Content       = data };",
          "441:             var serializer = new JsonSerializer { RootElement = \"User\" };",
          "442:             var output     = serializer.Deserialize<SoUser>(response);",
          "444:             Assert.Equal(\"John Sheehan\", output.DisplayName);",
          "445:             Assert.Equal(1786, output.Id);",
          "446:         }",
          "448:         [Fact]",
          "449:         public void Can_Deserialize_Names_With_Underscores_With_Default_Root() {",
          "450:             var doc        = JsonData.CreateJsonWithUnderscores();",
          "451:             var serializer = new JsonSerializer();",
          "452:             var response   = new RestResponse { Content = doc };",
          "453:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "455:             Assert.Equal(\"John Sheehan\", p.Name);",
          "456:             Assert.Equal(new DateTime(2009, 9, 25, 0, 6, 1), p.StartDate);",
          "457:             Assert.Equal(28, p.Age);",
          "458:             Assert.Equal(long.MaxValue, p.BigNumber);",
          "459:             Assert.Equal(99.9999m, p.Percent);",
          "460:             Assert.False(p.IsCool);",
          "461:             Assert.Equal(new Uri(\"http://example.com\", UriKind.RelativeOrAbsolute), p.Url);",
          "462:             Assert.Equal(new Uri(\"/foo/bar\", UriKind.RelativeOrAbsolute), p.UrlPath);",
          "463:             Assert.NotNull(p.Friends);",
          "464:             Assert.Equal(10, p.Friends.Count);",
          "465:             Assert.NotNull(p.BestFriend);",
          "466:             Assert.Equal(\"The Fonz\", p.BestFriend.Name);",
          "467:             Assert.Equal(1952, p.BestFriend.Since);",
          "468:             Assert.NotEmpty(p.Foes);",
          "469:             Assert.Equal(\"Foe 1\", p.Foes[\"dict1\"].Nickname);",
          "470:             Assert.Equal(\"Foe 2\", p.Foes[\"dict2\"].Nickname);",
          "471:         }",
          "473:         [Fact]",
          "474:         public void Can_Deserialize_Names_With_Underscores_With_Default_Root_Alternative_Culture() {",
          "475:             using (new CultureChange(AlternativeCulture)) Can_Deserialize_Names_With_Underscores_With_Default_Root();",
          "476:         }",
          "478:         [Fact]",
          "479:         public void Can_Deserialize_Null_Elements_to_Nullable_Values() {",
          "480:             var serializer = new JsonSerializer();",
          "482:             var output =",
          "483:                 serializer.Deserialize<NullableValues>(new RestResponse { Content = JsonData.JsonWithNullValues });",
          "485:             Assert.Null(output.Id);",
          "486:             Assert.Null(output.StartDate);",
          "487:             Assert.Null(output.UniqueId);",
          "488:         }",
          "490:         [Fact]",
          "491:         public void Can_Deserialize_Nullable_DateTime_With_Null() {",
          "492:             var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "494:             Assert.Null(payload.NullableDateTimeWithNull);",
          "495:         }",
          "497:         [Fact]",
          "498:         public void Can_Deserialize_Nullable_DateTime_With_Value() {",
          "499:             var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "501:             Assert.NotNull(payload.NullableDateTimeWithValue);",
          "503:             Assert.Equal(",
          "504:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "505:                 payload.NullableDateTimeWithValue.Value",
          "506:             );",
          "507:         }",
          "509:         [Fact]",
          "510:         public void Can_Deserialize_Nullable_DateTimeOffset_With_Null() {",
          "511:             var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "513:             Assert.Null(payload.NullableDateTimeOffsetWithNull);",
          "514:         }",
          "516:         [Fact]",
          "517:         public void Can_Deserialize_Nullable_DateTimeOffset_With_Value() {",
          "518:             var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "520:             Assert.NotNull(payload.NullableDateTimeOffsetWithValue);",
          "522:             Assert.Equal(",
          "523:                 new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc).ToString(\"yyyy-MM-dd HH:mm:ss.fff\"),",
          "524:                 payload.NullableDateTimeOffsetWithValue.Value.ToString(\"yyyy-MM-dd HH:mm:ss.fff\")",
          "525:             );",
          "526:         }",
          "528:         [Fact]",
          "529:         public void Can_Deserialize_Object_Type_Property_With_Primitive_Vale() {",
          "530:             var payload = GetPayLoad<ObjectProperties>(\"objectproperty.json\");",
          "532:             Assert.Equal(42L, payload.ObjectProperty);",
          "533:         }",
          "535:         [Fact]",
          "536:         public void Can_Deserialize_Plain_Values() {",
          "537:             const string json       = \"\\\"c02bdd1e-cce3-4b9c-8473-165e6e93b92a\\\"\";",
          "538:             var          response   = new RestResponse { Content = json };",
          "539:             var          serializer = new JsonSerializer();",
          "540:             var          result     = serializer.Deserialize<Guid>(response);",
          "542:             Assert.Equal(result, new Guid(\"c02bdd1e-cce3-4b9c-8473-165e6e93b92a\"));",
          "543:         }",
          "545:         [Fact]",
          "546:         public void Can_Deserialize_Quoted_Primitive() {",
          "547:             var doc = new JsonObject { [\"Age\"] = \"28\" };",
          "549:             var serializer = new JsonSerializer();",
          "550:             var response   = new RestResponse { Content = doc.ToString() };",
          "551:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "553:             Assert.Equal(28, p.Age);",
          "554:         }",
          "556:         [Fact]",
          "557:         public void Can_Deserialize_Root_Json_Array_To_Inherited_List() {",
          "558:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonarray.json\"));",
          "559:             var response   = new RestResponse { Content = data };",
          "560:             var serializer = new JsonSerializer();",
          "561:             var output     = serializer.Deserialize<StatusList>(response);",
          "563:             Assert.Equal(4, output.Count);",
          "564:         }",
          "566:         [Fact]",
          "567:         public void Can_Deserialize_Root_Json_Array_To_List() {",
          "568:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonarray.json\"));",
          "569:             var response   = new RestResponse { Content = data };",
          "570:             var serializer = new JsonSerializer();",
          "571:             var output     = serializer.Deserialize<List<status>>(response);",
          "573:             Assert.Equal(4, output.Count);",
          "574:         }",
          "576:         [Fact]",
          "577:         public void Can_Deserialize_Select_Tokens() {",
          "578:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonarray.json\"));",
          "579:             var response   = new RestResponse { Content = data };",
          "580:             var serializer = new JsonSerializer();",
          "581:             var output     = serializer.Deserialize<StatusComplexList>(response);",
          "583:             Assert.Equal(4, output.Count);",
          "584:         }",
          "586:         [Fact]",
          "587:         public void Can_Deserialize_Simple_Generic_List_Given_Item_Without_Array() {",
          "588:             const string content    = \"{\\\"users\\\":\\\"johnsheehan\\\"}\";",
          "589:             var          serializer = new JsonSerializer { RootElement = \"users\" };",
          "590:             var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "592:             Assert.True(output.SequenceEqual(new[] { \"johnsheehan\" }));",
          "593:         }",
          "595:         [Fact]",
          "596:         public void Can_Deserialize_Simple_Generic_List_Given_Toplevel_Item_Without_Array() {",
          "597:             const string content    = \"\\\"johnsheehan\\\"\";",
          "598:             var          serializer = new JsonSerializer();",
          "599:             var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "601:             Assert.True(output.SequenceEqual(new[] { \"johnsheehan\" }));",
          "602:         }",
          "604:         [Fact]",
          "605:         public void Can_Deserialize_Simple_Generic_List_of_Simple_Types() {",
          "606:             const string content    = \"{\\\"users\\\":[\\\"johnsheehan\\\",\\\"jagregory\\\",\\\"drusellers\\\",\\\"structuremap\\\"]}\";",
          "607:             var          serializer = new JsonSerializer { RootElement = \"users\" };",
          "608:             var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "610:             Assert.NotEmpty(output);",
          "611:         }",
          "613:         [Fact]",
          "614:         public void Can_Deserialize_Simple_Generic_List_of_Simple_Types_With_Nulls() {",
          "615:             const string content    = \"{\\\"users\\\":[\\\"johnsheehan\\\",\\\"jagregory\\\",null,\\\"drusellers\\\",\\\"structuremap\\\"]}\";",
          "616:             var          serializer = new JsonSerializer { RootElement = \"users\" };",
          "617:             var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "619:             Assert.NotEmpty(output);",
          "620:             Assert.Null(output[2]);",
          "621:             Assert.Equal(5, output.Count);",
          "622:         }",
          "624:         [Fact]",
          "625:         public void Can_Deserialize_TimeSpan() {",
          "626:             var payload = GetPayLoad<TimeSpanTestStructure>(\"timespans.json\");",
          "628:             Assert.Equal(new TimeSpan(468006), payload.Tick);",
          "629:             Assert.Equal(new TimeSpan(0, 0, 0, 0, 125), payload.Millisecond);",
          "630:             Assert.Equal(new TimeSpan(0, 0, 8), payload.Second);",
          "631:             Assert.Equal(new TimeSpan(0, 55, 2), payload.Minute);",
          "632:             Assert.Equal(new TimeSpan(21, 30, 7), payload.Hour);",
          "633:             Assert.Null(payload.NullableWithoutValue);",
          "634:             Assert.NotNull(payload.NullableWithValue);",
          "635:             Assert.Equal(new TimeSpan(21, 30, 7), payload.NullableWithValue.Value);",
          "636:             Assert.Equal(new TimeSpan(0, 0, 10), payload.IsoSecond);",
          "637:             Assert.Equal(new TimeSpan(0, 3, 23), payload.IsoMinute);",
          "638:             Assert.Equal(new TimeSpan(5, 4, 9), payload.IsoHour);",
          "639:             Assert.Equal(new TimeSpan(1, 19, 27, 13), payload.IsoDay);",
          "641:             Assert.Equal(new TimeSpan(64, 3, 14, 19), payload.IsoMonth);",
          "643:             Assert.Equal(new TimeSpan(365, 9, 27, 48), payload.IsoYear);",
          "644:         }",
          "646:         [Fact]",
          "647:         public void Can_Deserialize_To_Dictionary_Int_Object() {",
          "648:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary_KeysType.json\"));",
          "649:             var serializer = new JsonSerializer();",
          "651:             var output =",
          "652:                 serializer.Deserialize<Dictionary<int, object>>(new RestResponse { Content = doc });",
          "654:             Assert.Equal(2, output.Keys.Count);",
          "656:             var firstKeysVal = output.FirstOrDefault().Value;",
          "658:             Assert.IsAssignableFrom<IDictionary>(firstKeysVal);",
          "659:         }",
          "661:         [Fact]",
          "662:         public void Can_Deserialize_To_Dictionary_String_Object() {",
          "663:             var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary.json\"));",
          "664:             var serializer = new JsonSerializer();",
          "666:             var output =",
          "667:                 serializer.Deserialize<Dictionary<string, object>>(new RestResponse { Content = doc });",
          "669:             Assert.Equal(3, output.Keys.Count);",
          "671:             var firstKeysVal = output.FirstOrDefault().Value;",
          "673:             Assert.IsAssignableFrom<IDictionary>(firstKeysVal);",
          "674:         }",
          "676:         [Fact]",
          "677:         public void Can_Deserialize_To_Dictionary_String_String() {",
          "678:             var serializer = new JsonSerializer();",
          "679:             var response   = new RestResponse { Content = JsonData.JsonStringDictionary };",
          "680:             var bd         = serializer.Deserialize<Dictionary<string, string>>(response);",
          "682:             Assert.Equal(\"Thing1\", bd[\"Thing1\"]);",
          "683:             Assert.Equal(\"Thing2\", bd[\"Thing2\"]);",
          "684:             Assert.Equal(\"ThingRed\", bd[\"ThingRed\"]);",
          "685:             Assert.Equal(\"ThingBlue\", bd[\"ThingBlue\"]);",
          "686:         }",
          "688:         [Fact]",
          "689:         public void Can_Deserialize_To_Dictionary_String_String_With_Dynamic_Values() {",
          "690:             var serializer = new JsonSerializer();",
          "691:             var response   = new RestResponse { Content = JsonData.DynamicJsonStringDictionary };",
          "692:             var bd         = serializer.Deserialize<Dictionary<string, string>>(response);",
          "694:             Assert.Equal(\"[\\\"Value1\\\",\\\"Value2\\\"]\", bd[\"Thing1\"]);",
          "695:             Assert.Equal(\"Thing2\", bd[\"Thing2\"]);",
          "696:             Assert.Equal(\"{\\\"Name\\\":\\\"ThingRed\\\",\\\"Color\\\":\\\"Red\\\"}\", bd[\"ThingRed\"]);",
          "697:             Assert.Equal(\"{\\\"Name\\\":\\\"ThingBlue\\\",\\\"Color\\\":\\\"Blue\\\"}\", bd[\"ThingBlue\"]);",
          "698:         }",
          "700:         [Fact]",
          "701:         public void Can_Deserialize_Unix_Json_Dates() {",
          "702:             var serializer = new JsonSerializer();",
          "703:             var response   = new RestResponse { Content = JsonData.UnixDateJson };",
          "704:             var bd         = serializer.Deserialize<Birthdate>(response);",
          "706:             Assert.Equal(new DateTime(2011, 6, 30, 8, 15, 46, DateTimeKind.Utc), bd.Value);",
          "707:         }",
          "709:         [Fact]",
          "710:         public void Can_Deserialize_Unix_Json_Millisecond_Dates() {",
          "711:             var serializer = new JsonSerializer();",
          "712:             var response   = new RestResponse { Content = JsonData.UnixDateMillisecondsJson };",
          "713:             var bd         = serializer.Deserialize<Birthdate>(response);",
          "715:             Assert.Equal(new DateTime(2011, 6, 30, 8, 15, 46, DateTimeKind.Utc), bd.Value);",
          "716:         }",
          "718:         [Fact]",
          "719:         public void Can_Deserialize_Various_Enum_Types() {",
          "720:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonenumtypes.json\"));",
          "721:             var response   = new RestResponse { Content = data };",
          "722:             var serializer = new JsonSerializer();",
          "723:             var output     = serializer.Deserialize<JsonEnumTypesTestStructure>(response);",
          "725:             Assert.Equal(ByteEnum.EnumMin, output.ByteEnumType);",
          "726:             Assert.Equal(SByteEnum.EnumMin, output.SByteEnumType);",
          "727:             Assert.Equal(ShortEnum.EnumMin, output.ShortEnumType);",
          "728:             Assert.Equal(UShortEnum.EnumMin, output.UShortEnumType);",
          "729:             Assert.Equal(IntEnum.EnumMin, output.IntEnumType);",
          "730:             Assert.Equal(UIntEnum.EnumMin, output.UIntEnumType);",
          "731:             Assert.Equal(LongEnum.EnumMin, output.LongEnumType);",
          "732:             Assert.Equal(ULongEnum.EnumMin, output.ULongEnumType);",
          "733:         }",
          "735:         [Fact]",
          "736:         public void Can_Deserialize_Various_Enum_Values() {",
          "737:             var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonenums.json\"));",
          "738:             var response   = new RestResponse { Content = data };",
          "739:             var serializer = new JsonSerializer();",
          "740:             var output     = serializer.Deserialize<JsonEnumsTestStructure>(response);",
          "742:             Assert.Equal(Disposition.Friendly, output.Upper);",
          "743:             Assert.Equal(Disposition.Friendly, output.Lower);",
          "744:             Assert.Equal(Disposition.SoSo, output.CamelCased);",
          "745:             Assert.Equal(Disposition.SoSo, output.Underscores);",
          "746:             Assert.Equal(Disposition.SoSo, output.LowerUnderscores);",
          "747:             Assert.Equal(Disposition.SoSo, output.Dashes);",
          "748:             Assert.Equal(Disposition.SoSo, output.LowerDashes);",
          "749:             Assert.Equal(Disposition.SoSo, output.Integer);",
          "750:         }",
          "752:         [Fact]",
          "753:         public void Can_Deserialize_With_Default_Root() {",
          "754:             var doc        = JsonData.CreateJson();",
          "755:             var serializer = new JsonSerializer();",
          "756:             var response   = new RestResponse { Content = doc };",
          "757:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "759:             Assert.Equal(\"John Sheehan\", p.Name);",
          "760:             Assert.Equal(new DateTime(2009, 9, 25, 0, 6, 1, DateTimeKind.Utc), p.StartDate);",
          "761:             Assert.Equal(28, p.Age);",
          "762:             Assert.Equal(long.MaxValue, p.BigNumber);",
          "763:             Assert.Equal(99.9999m, p.Percent);",
          "764:             Assert.False(p.IsCool);",
          "765:             Assert.Equal(new Uri(\"http://example.com\", UriKind.RelativeOrAbsolute), p.Url);",
          "766:             Assert.Equal(new Uri(\"/foo/bar\", UriKind.RelativeOrAbsolute), p.UrlPath);",
          "767:             Assert.Equal(Guid.Empty, p.EmptyGuid);",
          "768:             Assert.Equal(new Guid(JsonData.GUID_STRING), p.Guid);",
          "769:             Assert.Equal(Order.Third, p.Order);",
          "770:             Assert.Equal(Disposition.SoSo, p.Disposition);",
          "771:             Assert.NotNull(p.Friends);",
          "772:             Assert.Equal(10, p.Friends.Count);",
          "773:             Assert.NotNull(p.BestFriend);",
          "774:             Assert.Equal(\"The Fonz\", p.BestFriend.Name);",
          "775:             Assert.Equal(1952, p.BestFriend.Since);",
          "776:             Assert.NotEmpty(p.Foes);",
          "777:             Assert.Equal(\"Foe 1\", p.Foes[\"dict1\"].Nickname);",
          "778:             Assert.Equal(\"Foe 2\", p.Foes[\"dict2\"].Nickname);",
          "779:         }",
          "781:         [Fact]",
          "782:         public void Can_Deserialize_With_Default_Root_Alternative_Culture() {",
          "783:             using (new CultureChange(AlternativeCulture)) Can_Deserialize_With_Default_Root();",
          "784:         }",
          "786:         [Fact]",
          "787:         public void Deserialization_Of_Undefined_Int_Value_Returns_Enum_Default() {",
          "788:             const string data       = @\"{ \"\"Integer\"\" : 1024 }\";",
          "789:             var          response   = new RestResponse { Content = data };",
          "790:             var          serializer = new JsonSerializer();",
          "791:             var          result     = serializer.Deserialize<JsonEnumsTestStructure>(response);",
          "793:             Assert.Equal(Disposition.Friendly, result.Integer);",
          "794:         }",
          "796:         [Fact]",
          "797:         public void Ignore_Protected_Property_That_Exists_In_Data() {",
          "798:             var doc        = JsonData.CreateJson();",
          "799:             var serializer = new JsonSerializer();",
          "800:             var response   = new RestResponse { Content = doc };",
          "801:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "803:             Assert.Null(p.IgnoreProxy);",
          "804:         }",
          "806:         [Fact]",
          "807:         public void Ignore_ReadOnly_Property_That_Exists_In_Data() {",
          "808:             var doc        = JsonData.CreateJson();",
          "809:             var response   = new RestResponse { Content = doc };",
          "810:             var serializer = new JsonSerializer();",
          "811:             var p          = serializer.Deserialize<PersonForJson>(response);",
          "813:             Assert.Null(p.ReadOnlyProxy);",
          "814:         }",
          "816:         [Fact]",
          "817:         public void Serialize_Json_Does_Not_Double_Escape() {",
          "818:             var preformattedString = \"{ \\\"name\\\" : \\\"value\\\" }\";",
          "819:             var expectedSlashCount = preformattedString.Count(x => x == '\\\\');",
          "821:             var serializer       = new JsonSerializer();",
          "822:             var result           = serializer.Serialize(preformattedString);",
          "823:             var actualSlashCount = result.Count(x => x == '\\\\');",
          "825:             Assert.Equal(preformattedString, result);",
          "826:             Assert.Equal(expectedSlashCount, actualSlashCount);",
          "827:         }",
          "829:         [Fact]",
          "830:         public void Serialize_Json_Returns_Same_Json() {",
          "831:             var preformattedString = \"{ \\\"name\\\" : \\\"value\\\" } \";",
          "833:             var serializer = new JsonSerializer();",
          "834:             var result     = serializer.Serialize(preformattedString);",
          "836:             Assert.Equal(preformattedString, result);",
          "837:         }",
          "839:         [Fact]",
          "840:         public void Serialize_Json_Returns_Same_Json_Array() {",
          "841:             var preformattedString = \"[{ \\\"name\\\" : \\\"value\\\" }]\";",
          "843:             var serializer = new JsonSerializer();",
          "844:             var result     = serializer.Serialize(preformattedString);",
          "846:             Assert.Equal(preformattedString, result);",
          "847:         }",
          "",
          "[Added Lines]",
          "8: namespace RestSharp.Tests;",
          "10: public class JsonTests {",
          "11:     const string AlternativeCulture = \"pt-PT\";",
          "13:     static readonly string CurrentPath = AppDomain.CurrentDomain.BaseDirectory;",
          "15:     static T GetPayLoad<T>(string fileName) {",
          "16:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", fileName));",
          "17:         var response   = new RestResponse { Content = doc };",
          "18:         var serializer = new JsonSerializer();",
          "20:         return serializer.Deserialize<T>(response);",
          "21:     }",
          "23:     [Fact]",
          "24:     public void Can_Deserialize_4sq_Json_With_Root_Element_Specified() {",
          "25:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"4sq.json\"));",
          "26:         var serializer = new JsonSerializer { RootElement = \"response\" };",
          "27:         var output     = serializer.Deserialize<VenuesResponse>(new RestResponse { Content = doc });",
          "29:         Assert.NotEmpty(output.Groups);",
          "30:     }",
          "32:     [Fact]",
          "33:     public void Can_Deserialize_Custom_Formatted_Date() {",
          "34:         var          culture   = CultureInfo.InvariantCulture;",
          "35:         const string format    = \"dd yyyy MMM, hh:mm ss tt\";",
          "36:         var          date      = new DateTime(2010, 2, 8, 11, 11, 11);",
          "37:         var          formatted = new { StartDate = date.ToString(format, culture) };",
          "38:         var          data      = SimpleJson.SerializeObject(formatted);",
          "39:         var          response  = new RestResponse { Content = data };",
          "41:         var serializer = new JsonSerializer {",
          "42:             DateFormat = format,",
          "43:             Culture    = culture",
          "44:         };",
          "45:         var output = serializer.Deserialize<PersonForJson>(response);",
          "47:         Assert.Equal(date, output.StartDate);",
          "48:     }",
          "50:     [Fact]",
          "51:     public void Can_Deserialize_Date_With_Milliseconds() {",
          "52:         const string content    = \"{ \\\"CreatedOn\\\": \\\"2018-10-01T14:39:00.123Z\\\" }\";",
          "53:         var          serializer = new JsonSerializer();",
          "54:         var          output     = serializer.Deserialize<DateTimeResponse>(new RestResponse { Content = content });",
          "55:         var          expected   = DateTime.Parse(\"2018-10-01 14:39:00\", CultureInfo.InvariantCulture);",
          "57:         Assert.NotNull(output);",
          "58:         Assert.Equal(DateTimeKind.Utc, output.CreatedOn.Kind);",
          "60:         Assert.Equal(",
          "61:             expected.ToString(CultureInfo.InvariantCulture),",
          "62:             output.CreatedOn.ToString(CultureInfo.InvariantCulture)",
          "63:         );",
          "64:     }",
          "66:     [Fact]",
          "67:     public void Can_Deserialize_DateTime() {",
          "68:         var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "70:         Assert.Equal(",
          "71:             new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "72:             payload.DateTime",
          "73:         );",
          "74:     }",
          "76:     [Fact]",
          "77:     public void Can_Deserialize_DateTime_With_DateTimeStyles() {",
          "78:         var item0 = new DateTime(2010, 2, 8, 11, 11, 11, DateTimeKind.Local);",
          "79:         var item1 = new DateTime(2011, 2, 8, 11, 11, 11, DateTimeKind.Utc);",
          "80:         var item2 = new DateTime(2012, 2, 8, 11, 11, 11, DateTimeKind.Unspecified);",
          "82:         var data = new JsonObject { [\"Items\"] = new JsonArray { item0, item1, item2, \"/Date(1309421746929+0000)/\" } };",
          "84:         var serializer = new JsonSerializer();",
          "85:         var response   = new RestResponse { Content = data.ToString() };",
          "86:         var p          = serializer.Deserialize<GenericWithList<DateTime>>(response);",
          "88:         Assert.NotEqual(item0.Kind, p.Items[0].Kind);",
          "89:         Assert.Equal(item1.Kind, p.Items[1].Kind);",
          "90:         Assert.Equal(DateTimeKind.Utc, p.Items[2].Kind);",
          "91:         Assert.Equal(DateTimeKind.Utc, p.Items[3].Kind);",
          "92:     }",
          "94:     [Fact]",
          "95:     public void Can_Deserialize_DateTimeOffset() {",
          "96:         var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "98:         Assert.Equal(",
          "99:             new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc).ToString(\"yyyy-MM-dd HH:mm:ss.fff\"),",
          "100:             payload.DateTimeOffset.ToString(\"yyyy-MM-dd HH:mm:ss.fff\")",
          "101:         );",
          "102:     }",
          "104:     [Fact]",
          "105:     public void Can_Deserialize_NewDateTime() {",
          "106:         var payload = GetPayLoad<NewDateTimeTestStructure>(\"newdatetimes.json\");",
          "108:         Assert.Equal(",
          "109:             new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "110:             payload.DateTime",
          "111:         );",
          "112:     }",
          "114:     [Fact]",
          "115:     public void Can_Deserialize_Negative_NewDateTime() {",
          "116:         var payload = GetPayLoad<NewDateTimeTestStructure>(\"newdatetimes.json\");",
          "118:         Assert.Equal(",
          "119:             new DateTime(1969, 12, 31, 23, 59, 59, 999, DateTimeKind.Utc),",
          "120:             payload.DateTimeNegative",
          "121:         );",
          "122:     }",
          "124:     [Fact]",
          "125:     public void Can_Deserialize_Decimal_With_Four_Zeros_After_Floating_Point() {",
          "126:         const string json       = \"{\\\"Value\\\":0.00005557}\";",
          "127:         var          response   = new RestResponse { Content = json };",
          "128:         var          serializer = new JsonSerializer();",
          "129:         var          result     = serializer.Deserialize<DecimalNumber>(response);",
          "131:         Assert.Equal(.00005557m, result.Value);",
          "132:     }",
          "134:     [Fact]",
          "135:     public void Can_Deserialize_Dictionary_of_Lists() {",
          "136:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary.json\"));",
          "137:         var serializer = new JsonSerializer { RootElement = \"response\" };",
          "138:         var output     = serializer.Deserialize<EmployeeTracker>(new RestResponse { Content = doc });",
          "140:         Assert.NotEmpty(output.EmployeesMail);",
          "141:         Assert.NotEmpty(output.EmployeesTime);",
          "142:         Assert.NotEmpty(output.EmployeesPay);",
          "143:     }",
          "145:     [Fact]",
          "146:     public void Can_Deserialize_Dictionary_with_Null() {",
          "147:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary_null.json\"));",
          "148:         var serializer = new JsonSerializer { RootElement = \"response\" };",
          "150:         IDictionary<string, object> output =",
          "151:             serializer.Deserialize<Dictionary<string, object>>(new RestResponse { Content = doc });",
          "153:         var dictionary = (IDictionary<string, object>)output[\"SomeDictionary\"];",
          "154:         Assert.Equal(\"abra\", dictionary[\"NonNull\"]);",
          "155:         Assert.Null(dictionary[\"Null\"]);",
          "156:     }",
          "158:     [Fact]",
          "159:     public void Can_Deserialize_Dot_Field() {",
          "160:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"bearertoken.json\"));",
          "161:         var response   = new RestResponse { Content = data };",
          "162:         var serializer = new JsonSerializer();",
          "163:         var output     = serializer.Deserialize<BearerToken>(response);",
          "165:         var expectedIssued =",
          "166:             DateTimeOffset.ParseExact(\"Mon, 14 Oct 2013 06:53:32 GMT\", \"r\", CultureInfo.InvariantCulture);",
          "168:         var expectedExpires =",
          "169:             DateTimeOffset.ParseExact(\"Mon, 28 Oct 2013 06:53:32 GMT\", \"r\", CultureInfo.InvariantCulture);",
          "171:         Assert.Equal(\"boQtj0SCGz2GFGz[...]\", output.AccessToken);",
          "172:         Assert.Equal(\"bearer\", output.TokenType);",
          "173:         Assert.Equal(1209599L, output.ExpiresIn);",
          "174:         Assert.Equal(\"Alice\", output.UserName);",
          "175:         Assert.Equal(expectedIssued, output.Issued);",
          "176:         Assert.Equal(expectedExpires, output.Expires);",
          "177:     }",
          "179:     [Fact]",
          "180:     public void Can_Deserialize_Elements_to_Nullable_Values() {",
          "181:         var serializer = new JsonSerializer();",
          "183:         var output = serializer.Deserialize<NullableValues>(",
          "184:             new RestResponse",
          "185:                 { Content = JsonData.CreateJsonWithoutEmptyValues }",
          "186:         );",
          "188:         Assert.NotNull(output.Id);",
          "189:         Assert.NotNull(output.StartDate);",
          "190:         Assert.NotNull(output.UniqueId);",
          "192:         Assert.Equal(123, output.Id);",
          "193:         Assert.NotNull(output.StartDate);",
          "195:         Assert.Equal(",
          "196:             new DateTime(2010, 2, 21, 9, 35, 00, DateTimeKind.Utc),",
          "197:             output.StartDate.Value",
          "198:         );",
          "199:         Assert.Equal(new Guid(JsonData.GUID_STRING), output.UniqueId);",
          "200:     }",
          "202:     [Fact]",
          "203:     public void Can_Deserialize_Empty_Elements_to_Nullable_Values() {",
          "204:         var serializer = new JsonSerializer();",
          "206:         var output =",
          "207:             serializer.Deserialize<NullableValues>(new RestResponse { Content = JsonData.JsonWithEmptyValues });",
          "209:         Assert.Null(output.Id);",
          "210:         Assert.Null(output.StartDate);",
          "211:         Assert.Null(output.UniqueId);",
          "212:     }",
          "214:     [Fact]",
          "215:     public void Can_Deserialize_Exponential_Notation() {",
          "216:         const string content    = \"{ \\\"Value\\\": 4.8e-04 }\";",
          "217:         var          serializer = new JsonSerializer();",
          "218:         var          output     = serializer.Deserialize<DecimalNumber>(new RestResponse { Content = content });",
          "219:         var          expected   = decimal.Parse(\"4.8e-04\", NumberStyles.Float, CultureInfo.InvariantCulture);",
          "221:         Assert.NotNull(output);",
          "222:         Assert.Equal(expected, output.Value);",
          "223:     }",
          "225:     [Fact]",
          "226:     public void Can_Deserialize_From_Root_Element() {",
          "227:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"sojson.json\"));",
          "228:         var serializer = new JsonSerializer { RootElement = \"User\" };",
          "229:         var output     = serializer.Deserialize<SoUser>(new RestResponse { Content = doc });",
          "231:         Assert.Equal(\"John Sheehan\", output.DisplayName);",
          "232:     }",
          "234:     [Fact]",
          "235:     public void Can_Deserialize_Generic_List_of_DateTime() {",
          "236:         var item1 = new DateTime(2010, 2, 8, 11, 11, 11);",
          "237:         var item2 = item1.AddSeconds(12345);",
          "238:         var data  = new JsonObject { [\"Items\"] = new JsonArray { item1.ToString(\"u\"), item2.ToString(\"u\") } };",
          "240:         var serializer = new JsonSerializer();",
          "241:         var response   = new RestResponse { Content = data.ToString() };",
          "242:         var p          = serializer.Deserialize<GenericWithList<DateTime>>(response);",
          "244:         Assert.Equal(2, p.Items.Count);",
          "245:         Assert.Equal(item1, p.Items[0]);",
          "246:         Assert.Equal(item2, p.Items[1]);",
          "247:     }",
          "249:     [Fact]",
          "250:     public void Can_Deserialize_Generic_Members() {",
          "251:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"GenericWithList.json\"));",
          "252:         var serializer = new JsonSerializer();",
          "254:         var output =",
          "255:             serializer.Deserialize<Generic<GenericWithList<Foe>>>(new RestResponse { Content = doc });",
          "257:         Assert.Equal(\"Foe sho\", output.Data.Items[0].Nickname);",
          "258:     }",
          "260:     [Fact]",
          "261:     public void Can_Deserialize_Guid_String_Fields() {",
          "262:         var doc        = new JsonObject { [\"Guid\"] = JsonData.GUID_STRING };",
          "263:         var serializer = new JsonSerializer();",
          "264:         var response   = new RestResponse { Content = doc.ToString() };",
          "265:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "267:         Assert.Equal(new Guid(JsonData.GUID_STRING), p.Guid);",
          "268:     }",
          "270:     [Fact]",
          "271:     public void Can_Deserialize_IEnumerable_of_Simple_Types() {",
          "272:         const string content    = \"{\\\"numbers\\\":[1,2,3,4,5]}\";",
          "273:         var          serializer = new JsonSerializer { RootElement = \"numbers\" };",
          "274:         var          output     = serializer.Deserialize<IEnumerable<int>>(new RestResponse { Content = content }).ToArray();",
          "276:         Assert.NotEmpty(output);",
          "277:         Assert.True(output.Length == 5);",
          "278:     }",
          "280:     [Fact]",
          "281:     public void Can_Deserialize_IList_of_Simple_Types() {",
          "282:         const string content    = \"{\\\"numbers\\\":[1,2,3,4,5]}\";",
          "283:         var          serializer = new JsonSerializer { RootElement = \"numbers\" };",
          "284:         var          output     = serializer.Deserialize<IList<int>>(new RestResponse { Content = content });",
          "286:         Assert.NotEmpty(output);",
          "287:         Assert.True(output.Count == 5);",
          "288:     }",
          "290:     [Fact]",
          "291:     public void Can_Deserialize_Int_to_Bool() {",
          "292:         var doc = new JsonObject { [\"IsCool\"] = 1 };",
          "294:         var serializer = new JsonSerializer();",
          "295:         var response   = new RestResponse { Content = doc.ToString() };",
          "296:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "298:         Assert.True(p.IsCool);",
          "299:     }",
          "301:     [Fact]",
          "302:     public void Can_Deserialize_Into_Struct() {",
          "303:         const string content    = \"{\\\"one\\\":\\\"oneOneOne\\\", \\\"two\\\":\\\"twoTwoTwo\\\", \\\"three\\\":3}\";",
          "304:         var          serializer = new JsonSerializer();",
          "305:         var          output     = serializer.Deserialize<SimpleStruct>(new RestResponse { Content = content });",
          "307:         Assert.Equal(\"oneOneOne\", output.One);",
          "308:         Assert.Equal(\"twoTwoTwo\", output.Two);",
          "309:         Assert.Equal(3, output.Three);",
          "310:     }",
          "312:     [Fact]",
          "313:     public void Can_Deserialize_Iso_Json_Dates() {",
          "314:         var doc        = JsonData.CreateIsoDateJson();",
          "315:         var serializer = new JsonSerializer();",
          "316:         var response   = new RestResponse { Content = doc };",
          "317:         var bd         = serializer.Deserialize<Birthdate>(response);",
          "319:         Assert.Equal(new DateTime(1910, 9, 25, 9, 30, 25, DateTimeKind.Utc), bd.Value);",
          "320:     }",
          "322:     [Fact]",
          "323:     public void Can_Deserialize_Iso8601DateTimeLocal() {",
          "324:         var payload = GetPayLoad<Iso8601DateTimeTestStructure>(\"iso8601datetimes.json\");",
          "326:         Assert.Equal(",
          "327:             new DateTime(2012, 7, 19, 10, 23, 25, DateTimeKind.Utc),",
          "328:             payload.DateTimeLocal",
          "329:         );",
          "330:     }",
          "332:     [Fact]",
          "333:     public void Can_Deserialize_Iso8601DateTimeWithOffset() {",
          "334:         var payload = GetPayLoad<Iso8601DateTimeTestStructure>(\"iso8601datetimes.json\");",
          "336:         Assert.Equal(",
          "337:             new DateTime(2012, 7, 19, 10, 23, 25, 544, DateTimeKind.Utc),",
          "338:             payload.DateTimeWithOffset.ToUniversalTime()",
          "339:         );",
          "340:     }",
          "342:     [Fact]",
          "343:     public void Can_Deserialize_Iso8601DateTimeZulu() {",
          "344:         var payload = GetPayLoad<Iso8601DateTimeTestStructure>(\"iso8601datetimes.json\");",
          "346:         Assert.Equal(",
          "347:             new DateTime(2012, 7, 19, 10, 23, 25, 544, DateTimeKind.Utc),",
          "348:             payload.DateTimeUtc.ToUniversalTime()",
          "349:         );",
          "350:     }",
          "352:     [Fact]",
          "353:     public void Can_Deserialize_Json_Using_DeserializeAs_Attribute() {",
          "354:         const string content =",
          "355:             \"{\\\"sid\\\":\\\"asdasdasdasdasdasdasda\\\",\\\"friendlyName\\\":\\\"VeryNiceName\\\",\\\"oddballPropertyName\\\":\\\"blahblah\\\"}\";",
          "356:         var serializer = new JsonSerializer { RootElement = \"users\" };",
          "357:         var output     = serializer.Deserialize<Oddball>(new RestResponse { Content = content });",
          "359:         Assert.NotNull(output);",
          "360:         Assert.Equal(\"blahblah\", output.GoodPropertyName);",
          "361:     }",
          "363:     [Fact]",
          "364:     public void Can_Deserialize_JsonNet_Dates() {",
          "365:         var person = GetPayLoad<PersonForJson>(\"person.json\");",
          "367:         Assert.Equal(",
          "368:             new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "369:             person.StartDate",
          "370:         );",
          "371:     }",
          "373:     [Fact]",
          "374:     public void Can_Deserialize_List_of_Guid() {",
          "375:         var id1  = new Guid(\"b0e5c11f-e944-478c-aadd-753b956d0c8c\");",
          "376:         var id2  = new Guid(\"809399fa-21c4-4dca-8dcd-34cb697fbca0\");",
          "377:         var data = new JsonObject { [\"Ids\"] = new JsonArray { id1, id2 } };",
          "379:         var serializer = new JsonSerializer();",
          "380:         var response   = new RestResponse { Content = data.ToString() };",
          "381:         var p          = serializer.Deserialize<GuidList>(response);",
          "383:         Assert.Equal(2, p.Ids.Count);",
          "384:         Assert.Equal(id1, p.Ids[0]);",
          "385:         Assert.Equal(id2, p.Ids[1]);",
          "386:     }",
          "388:     [Fact]",
          "389:     public void Can_Deserialize_Lists_of_Simple_Types() {",
          "390:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonlists.json\"));",
          "391:         var serializer = new JsonSerializer();",
          "392:         var output     = serializer.Deserialize<JsonLists>(new RestResponse { Content = doc });",
          "394:         Assert.NotEmpty(output.Names);",
          "395:         Assert.NotEmpty(output.Numbers);",
          "396:     }",
          "398:     [Fact]",
          "399:     public void Can_Deserialize_Names_With_Double_Uppercase() {",
          "400:         var doc        = JsonData.CreateJsonWithDoubleUppercase();",
          "401:         var serializer = new JsonSerializer();",
          "402:         var response   = new RestResponse { Content = doc };",
          "403:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "405:         Assert.Equal(435, p.PersonId);",
          "406:     }",
          "408:     [Fact]",
          "409:     public void Can_Deserialize_Names_With_Dashes_With_Default_Root() {",
          "410:         var doc        = JsonData.CreateJsonWithDashes();",
          "411:         var serializer = new JsonSerializer();",
          "412:         var response   = new RestResponse { Content = doc };",
          "413:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "415:         Assert.Equal(\"John Sheehan\", p.Name);",
          "417:         Assert.Equal(28, p.Age);",
          "418:         Assert.Equal(long.MaxValue, p.BigNumber);",
          "419:         Assert.Equal(99.9999m, p.Percent);",
          "420:         Assert.False(p.IsCool);",
          "421:         Assert.Equal(new Uri(\"http://example.com\", UriKind.RelativeOrAbsolute), p.Url);",
          "422:         Assert.Equal(new Uri(\"/foo/bar\", UriKind.RelativeOrAbsolute), p.UrlPath);",
          "423:         Assert.NotNull(p.Friends);",
          "424:         Assert.Equal(10, p.Friends.Count);",
          "425:         Assert.NotNull(p.BestFriend);",
          "426:         Assert.Equal(\"The Fonz\", p.BestFriend.Name);",
          "427:         Assert.Equal(1952, p.BestFriend.Since);",
          "428:         Assert.NotEmpty(p.Foes);",
          "429:         Assert.Equal(\"Foe 1\", p.Foes[\"dict1\"].Nickname);",
          "430:         Assert.Equal(\"Foe 2\", p.Foes[\"dict2\"].Nickname);",
          "431:     }",
          "433:     [Fact]",
          "434:     public void Can_Deserialize_Names_With_Dashes_With_Default_Root_Alternative_Culture() {",
          "435:         using (new CultureChange(AlternativeCulture)) Can_Deserialize_Names_With_Dashes_With_Default_Root();",
          "436:     }",
          "438:     [Fact]",
          "439:     public void Can_Deserialize_Names_With_Underscore_Prefix() {",
          "440:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"underscore_prefix.json\"));",
          "441:         var response   = new RestResponse { Content       = data };",
          "442:         var serializer = new JsonSerializer { RootElement = \"User\" };",
          "443:         var output     = serializer.Deserialize<SoUser>(response);",
          "445:         Assert.Equal(\"John Sheehan\", output.DisplayName);",
          "446:         Assert.Equal(1786, output.Id);",
          "447:     }",
          "449:     [Fact]",
          "450:     public void Can_Deserialize_Names_With_Underscores_With_Default_Root() {",
          "451:         var doc        = JsonData.CreateJsonWithUnderscores();",
          "452:         var serializer = new JsonSerializer();",
          "453:         var response   = new RestResponse { Content = doc };",
          "454:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "456:         Assert.Equal(\"John Sheehan\", p.Name);",
          "457:         Assert.Equal(new DateTime(2009, 9, 25, 0, 6, 1), p.StartDate);",
          "458:         Assert.Equal(28, p.Age);",
          "459:         Assert.Equal(long.MaxValue, p.BigNumber);",
          "460:         Assert.Equal(99.9999m, p.Percent);",
          "461:         Assert.False(p.IsCool);",
          "462:         Assert.Equal(new Uri(\"http://example.com\", UriKind.RelativeOrAbsolute), p.Url);",
          "463:         Assert.Equal(new Uri(\"/foo/bar\", UriKind.RelativeOrAbsolute), p.UrlPath);",
          "464:         Assert.NotNull(p.Friends);",
          "465:         Assert.Equal(10, p.Friends.Count);",
          "466:         Assert.NotNull(p.BestFriend);",
          "467:         Assert.Equal(\"The Fonz\", p.BestFriend.Name);",
          "468:         Assert.Equal(1952, p.BestFriend.Since);",
          "469:         Assert.NotEmpty(p.Foes);",
          "470:         Assert.Equal(\"Foe 1\", p.Foes[\"dict1\"].Nickname);",
          "471:         Assert.Equal(\"Foe 2\", p.Foes[\"dict2\"].Nickname);",
          "472:     }",
          "474:     [Fact]",
          "475:     public void Can_Deserialize_Names_With_Underscores_With_Default_Root_Alternative_Culture() {",
          "476:         using (new CultureChange(AlternativeCulture)) Can_Deserialize_Names_With_Underscores_With_Default_Root();",
          "477:     }",
          "479:     [Fact]",
          "480:     public void Can_Deserialize_Null_Elements_to_Nullable_Values() {",
          "481:         var serializer = new JsonSerializer();",
          "483:         var output =",
          "484:             serializer.Deserialize<NullableValues>(new RestResponse { Content = JsonData.JsonWithNullValues });",
          "486:         Assert.Null(output.Id);",
          "487:         Assert.Null(output.StartDate);",
          "488:         Assert.Null(output.UniqueId);",
          "489:     }",
          "491:     [Fact]",
          "492:     public void Can_Deserialize_Nullable_DateTime_With_Null() {",
          "493:         var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "495:         Assert.Null(payload.NullableDateTimeWithNull);",
          "496:     }",
          "498:     [Fact]",
          "499:     public void Can_Deserialize_Nullable_DateTime_With_Value() {",
          "500:         var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "502:         Assert.NotNull(payload.NullableDateTimeWithValue);",
          "504:         Assert.Equal(",
          "505:             new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc),",
          "506:             payload.NullableDateTimeWithValue.Value",
          "507:         );",
          "508:     }",
          "510:     [Fact]",
          "511:     public void Can_Deserialize_Nullable_DateTimeOffset_With_Null() {",
          "512:         var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "514:         Assert.Null(payload.NullableDateTimeOffsetWithNull);",
          "515:     }",
          "517:     [Fact]",
          "518:     public void Can_Deserialize_Nullable_DateTimeOffset_With_Value() {",
          "519:         var payload = GetPayLoad<DateTimeTestStructure>(\"datetimes.json\");",
          "521:         Assert.NotNull(payload.NullableDateTimeOffsetWithValue);",
          "523:         Assert.Equal(",
          "524:             new DateTime(2011, 6, 30, 8, 15, 46, 929, DateTimeKind.Utc).ToString(\"yyyy-MM-dd HH:mm:ss.fff\"),",
          "525:             payload.NullableDateTimeOffsetWithValue.Value.ToString(\"yyyy-MM-dd HH:mm:ss.fff\")",
          "526:         );",
          "527:     }",
          "529:     [Fact]",
          "530:     public void Can_Deserialize_Object_Type_Property_With_Primitive_Vale() {",
          "531:         var payload = GetPayLoad<ObjectProperties>(\"objectproperty.json\");",
          "533:         Assert.Equal(42L, payload.ObjectProperty);",
          "534:     }",
          "536:     [Fact]",
          "537:     public void Can_Deserialize_Plain_Values() {",
          "538:         const string json       = \"\\\"c02bdd1e-cce3-4b9c-8473-165e6e93b92a\\\"\";",
          "539:         var          response   = new RestResponse { Content = json };",
          "540:         var          serializer = new JsonSerializer();",
          "541:         var          result     = serializer.Deserialize<Guid>(response);",
          "543:         Assert.Equal(result, new Guid(\"c02bdd1e-cce3-4b9c-8473-165e6e93b92a\"));",
          "544:     }",
          "546:     [Fact]",
          "547:     public void Can_Deserialize_Quoted_Primitive() {",
          "548:         var doc = new JsonObject { [\"Age\"] = \"28\" };",
          "550:         var serializer = new JsonSerializer();",
          "551:         var response   = new RestResponse { Content = doc.ToString() };",
          "552:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "554:         Assert.Equal(28, p.Age);",
          "555:     }",
          "557:     [Fact]",
          "558:     public void Can_Deserialize_Root_Json_Array_To_Inherited_List() {",
          "559:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonarray.json\"));",
          "560:         var response   = new RestResponse { Content = data };",
          "561:         var serializer = new JsonSerializer();",
          "562:         var output     = serializer.Deserialize<StatusList>(response);",
          "564:         Assert.Equal(4, output.Count);",
          "565:     }",
          "567:     [Fact]",
          "568:     public void Can_Deserialize_Root_Json_Array_To_List() {",
          "569:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonarray.json\"));",
          "570:         var response   = new RestResponse { Content = data };",
          "571:         var serializer = new JsonSerializer();",
          "572:         var output     = serializer.Deserialize<List<status>>(response);",
          "574:         Assert.Equal(4, output.Count);",
          "575:     }",
          "577:     [Fact]",
          "578:     public void Can_Deserialize_Select_Tokens() {",
          "579:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonarray.json\"));",
          "580:         var response   = new RestResponse { Content = data };",
          "581:         var serializer = new JsonSerializer();",
          "582:         var output     = serializer.Deserialize<StatusComplexList>(response);",
          "584:         Assert.Equal(4, output.Count);",
          "585:     }",
          "587:     [Fact]",
          "588:     public void Can_Deserialize_Simple_Generic_List_Given_Item_Without_Array() {",
          "589:         const string content    = \"{\\\"users\\\":\\\"johnsheehan\\\"}\";",
          "590:         var          serializer = new JsonSerializer { RootElement = \"users\" };",
          "591:         var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "593:         Assert.True(output.SequenceEqual(new[] { \"johnsheehan\" }));",
          "594:     }",
          "596:     [Fact]",
          "597:     public void Can_Deserialize_Simple_Generic_List_Given_Toplevel_Item_Without_Array() {",
          "598:         const string content    = \"\\\"johnsheehan\\\"\";",
          "599:         var          serializer = new JsonSerializer();",
          "600:         var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "602:         Assert.True(output.SequenceEqual(new[] { \"johnsheehan\" }));",
          "603:     }",
          "605:     [Fact]",
          "606:     public void Can_Deserialize_Simple_Generic_List_of_Simple_Types() {",
          "607:         const string content    = \"{\\\"users\\\":[\\\"johnsheehan\\\",\\\"jagregory\\\",\\\"drusellers\\\",\\\"structuremap\\\"]}\";",
          "608:         var          serializer = new JsonSerializer { RootElement = \"users\" };",
          "609:         var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "611:         Assert.NotEmpty(output);",
          "612:     }",
          "614:     [Fact]",
          "615:     public void Can_Deserialize_Simple_Generic_List_of_Simple_Types_With_Nulls() {",
          "616:         const string content    = \"{\\\"users\\\":[\\\"johnsheehan\\\",\\\"jagregory\\\",null,\\\"drusellers\\\",\\\"structuremap\\\"]}\";",
          "617:         var          serializer = new JsonSerializer { RootElement = \"users\" };",
          "618:         var          output     = serializer.Deserialize<List<string>>(new RestResponse { Content = content });",
          "620:         Assert.NotEmpty(output);",
          "621:         Assert.Null(output[2]);",
          "622:         Assert.Equal(5, output.Count);",
          "623:     }",
          "625:     [Fact]",
          "626:     public void Can_Deserialize_TimeSpan() {",
          "627:         var payload = GetPayLoad<TimeSpanTestStructure>(\"timespans.json\");",
          "629:         Assert.Equal(new TimeSpan(468006), payload.Tick);",
          "630:         Assert.Equal(new TimeSpan(0, 0, 0, 0, 125), payload.Millisecond);",
          "631:         Assert.Equal(new TimeSpan(0, 0, 8), payload.Second);",
          "632:         Assert.Equal(new TimeSpan(0, 55, 2), payload.Minute);",
          "633:         Assert.Equal(new TimeSpan(21, 30, 7), payload.Hour);",
          "634:         Assert.Null(payload.NullableWithoutValue);",
          "635:         Assert.NotNull(payload.NullableWithValue);",
          "636:         Assert.Equal(new TimeSpan(21, 30, 7), payload.NullableWithValue.Value);",
          "637:         Assert.Equal(new TimeSpan(0, 0, 10), payload.IsoSecond);",
          "638:         Assert.Equal(new TimeSpan(0, 3, 23), payload.IsoMinute);",
          "639:         Assert.Equal(new TimeSpan(5, 4, 9), payload.IsoHour);",
          "640:         Assert.Equal(new TimeSpan(1, 19, 27, 13), payload.IsoDay);",
          "642:         Assert.Equal(new TimeSpan(64, 3, 14, 19), payload.IsoMonth);",
          "644:         Assert.Equal(new TimeSpan(365, 9, 27, 48), payload.IsoYear);",
          "645:     }",
          "647:     [Fact]",
          "648:     public void Can_Deserialize_To_Dictionary_Int_Object() {",
          "649:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary_KeysType.json\"));",
          "650:         var serializer = new JsonSerializer();",
          "652:         var output =",
          "653:             serializer.Deserialize<Dictionary<int, object>>(new RestResponse { Content = doc });",
          "655:         Assert.Equal(2, output.Keys.Count);",
          "657:         var firstKeysVal = output.FirstOrDefault().Value;",
          "659:         Assert.IsAssignableFrom<IDictionary>(firstKeysVal);",
          "660:     }",
          "662:     [Fact]",
          "663:     public void Can_Deserialize_To_Dictionary_String_Object() {",
          "664:         var doc        = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsondictionary.json\"));",
          "665:         var serializer = new JsonSerializer();",
          "667:         var output =",
          "668:             serializer.Deserialize<Dictionary<string, object>>(new RestResponse { Content = doc });",
          "670:         Assert.Equal(3, output.Keys.Count);",
          "672:         var firstKeysVal = output.FirstOrDefault().Value;",
          "674:         Assert.IsAssignableFrom<IDictionary>(firstKeysVal);",
          "675:     }",
          "677:     [Fact]",
          "678:     public void Can_Deserialize_To_Dictionary_String_String() {",
          "679:         var serializer = new JsonSerializer();",
          "680:         var response   = new RestResponse { Content = JsonData.JsonStringDictionary };",
          "681:         var bd         = serializer.Deserialize<Dictionary<string, string>>(response);",
          "683:         Assert.Equal(\"Thing1\", bd[\"Thing1\"]);",
          "684:         Assert.Equal(\"Thing2\", bd[\"Thing2\"]);",
          "685:         Assert.Equal(\"ThingRed\", bd[\"ThingRed\"]);",
          "686:         Assert.Equal(\"ThingBlue\", bd[\"ThingBlue\"]);",
          "687:     }",
          "689:     [Fact]",
          "690:     public void Can_Deserialize_To_Dictionary_String_String_With_Dynamic_Values() {",
          "691:         var serializer = new JsonSerializer();",
          "692:         var response   = new RestResponse { Content = JsonData.DynamicJsonStringDictionary };",
          "693:         var bd         = serializer.Deserialize<Dictionary<string, string>>(response);",
          "695:         Assert.Equal(\"[\\\"Value1\\\",\\\"Value2\\\"]\", bd[\"Thing1\"]);",
          "696:         Assert.Equal(\"Thing2\", bd[\"Thing2\"]);",
          "697:         Assert.Equal(\"{\\\"Name\\\":\\\"ThingRed\\\",\\\"Color\\\":\\\"Red\\\"}\", bd[\"ThingRed\"]);",
          "698:         Assert.Equal(\"{\\\"Name\\\":\\\"ThingBlue\\\",\\\"Color\\\":\\\"Blue\\\"}\", bd[\"ThingBlue\"]);",
          "699:     }",
          "701:     [Fact]",
          "702:     public void Can_Deserialize_Unix_Json_Dates() {",
          "703:         var serializer = new JsonSerializer();",
          "704:         var response   = new RestResponse { Content = JsonData.UnixDateJson };",
          "705:         var bd         = serializer.Deserialize<Birthdate>(response);",
          "707:         Assert.Equal(new DateTime(2011, 6, 30, 8, 15, 46, DateTimeKind.Utc), bd.Value);",
          "708:     }",
          "710:     [Fact]",
          "711:     public void Can_Deserialize_Unix_Json_Millisecond_Dates() {",
          "712:         var serializer = new JsonSerializer();",
          "713:         var response   = new RestResponse { Content = JsonData.UnixDateMillisecondsJson };",
          "714:         var bd         = serializer.Deserialize<Birthdate>(response);",
          "716:         Assert.Equal(new DateTime(2011, 6, 30, 8, 15, 46, DateTimeKind.Utc), bd.Value);",
          "717:     }",
          "719:     [Fact]",
          "720:     public void Can_Deserialize_Various_Enum_Types() {",
          "721:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonenumtypes.json\"));",
          "722:         var response   = new RestResponse { Content = data };",
          "723:         var serializer = new JsonSerializer();",
          "724:         var output     = serializer.Deserialize<JsonEnumTypesTestStructure>(response);",
          "726:         Assert.Equal(ByteEnum.EnumMin, output.ByteEnumType);",
          "727:         Assert.Equal(SByteEnum.EnumMin, output.SByteEnumType);",
          "728:         Assert.Equal(ShortEnum.EnumMin, output.ShortEnumType);",
          "729:         Assert.Equal(UShortEnum.EnumMin, output.UShortEnumType);",
          "730:         Assert.Equal(IntEnum.EnumMin, output.IntEnumType);",
          "731:         Assert.Equal(UIntEnum.EnumMin, output.UIntEnumType);",
          "732:         Assert.Equal(LongEnum.EnumMin, output.LongEnumType);",
          "733:         Assert.Equal(ULongEnum.EnumMin, output.ULongEnumType);",
          "734:     }",
          "736:     [Fact]",
          "737:     public void Can_Deserialize_Various_Enum_Values() {",
          "738:         var data       = File.ReadAllText(Path.Combine(CurrentPath, \"SampleData\", \"jsonenums.json\"));",
          "739:         var response   = new RestResponse { Content = data };",
          "740:         var serializer = new JsonSerializer();",
          "741:         var output     = serializer.Deserialize<JsonEnumsTestStructure>(response);",
          "743:         Assert.Equal(Disposition.Friendly, output.Upper);",
          "744:         Assert.Equal(Disposition.Friendly, output.Lower);",
          "745:         Assert.Equal(Disposition.SoSo, output.CamelCased);",
          "746:         Assert.Equal(Disposition.SoSo, output.Underscores);",
          "747:         Assert.Equal(Disposition.SoSo, output.LowerUnderscores);",
          "748:         Assert.Equal(Disposition.SoSo, output.Dashes);",
          "749:         Assert.Equal(Disposition.SoSo, output.LowerDashes);",
          "750:         Assert.Equal(Disposition.SoSo, output.Integer);",
          "751:     }",
          "753:     [Fact]",
          "754:     public void Can_Deserialize_With_Default_Root() {",
          "755:         var doc        = JsonData.CreateJson();",
          "756:         var serializer = new JsonSerializer();",
          "757:         var response   = new RestResponse { Content = doc };",
          "758:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "760:         Assert.Equal(\"John Sheehan\", p.Name);",
          "761:         Assert.Equal(new DateTime(2009, 9, 25, 0, 6, 1, DateTimeKind.Utc), p.StartDate);",
          "762:         Assert.Equal(28, p.Age);",
          "763:         Assert.Equal(long.MaxValue, p.BigNumber);",
          "764:         Assert.Equal(99.9999m, p.Percent);",
          "765:         Assert.False(p.IsCool);",
          "766:         Assert.Equal(new Uri(\"http://example.com\", UriKind.RelativeOrAbsolute), p.Url);",
          "767:         Assert.Equal(new Uri(\"/foo/bar\", UriKind.RelativeOrAbsolute), p.UrlPath);",
          "768:         Assert.Equal(Guid.Empty, p.EmptyGuid);",
          "769:         Assert.Equal(new Guid(JsonData.GUID_STRING), p.Guid);",
          "770:         Assert.Equal(Order.Third, p.Order);",
          "771:         Assert.Equal(Disposition.SoSo, p.Disposition);",
          "772:         Assert.NotNull(p.Friends);",
          "773:         Assert.Equal(10, p.Friends.Count);",
          "774:         Assert.NotNull(p.BestFriend);",
          "775:         Assert.Equal(\"The Fonz\", p.BestFriend.Name);",
          "776:         Assert.Equal(1952, p.BestFriend.Since);",
          "777:         Assert.NotEmpty(p.Foes);",
          "778:         Assert.Equal(\"Foe 1\", p.Foes[\"dict1\"].Nickname);",
          "779:         Assert.Equal(\"Foe 2\", p.Foes[\"dict2\"].Nickname);",
          "780:     }",
          "782:     [Fact]",
          "783:     public void Can_Deserialize_With_Default_Root_Alternative_Culture() {",
          "784:         using (new CultureChange(AlternativeCulture)) Can_Deserialize_With_Default_Root();",
          "785:     }",
          "787:     [Fact]",
          "788:     public void Deserialization_Of_Undefined_Int_Value_Returns_Enum_Default() {",
          "789:         const string data = @\"{ \"\"Integer\"\" : 1024 }\";",
          "791:         var response   = new RestResponse { Content = data };",
          "792:         var serializer = new JsonSerializer();",
          "793:         var result     = serializer.Deserialize<JsonEnumsTestStructure>(response);",
          "795:         Assert.Equal(Disposition.Friendly, result.Integer);",
          "796:     }",
          "798:     [Fact]",
          "799:     public void Ignore_Protected_Property_That_Exists_In_Data() {",
          "800:         var doc        = JsonData.CreateJson();",
          "801:         var serializer = new JsonSerializer();",
          "802:         var response   = new RestResponse { Content = doc };",
          "803:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "805:         Assert.Null(p.IgnoreProxy);",
          "806:     }",
          "808:     [Fact]",
          "809:     public void Ignore_ReadOnly_Property_That_Exists_In_Data() {",
          "810:         var doc        = JsonData.CreateJson();",
          "811:         var response   = new RestResponse { Content = doc };",
          "812:         var serializer = new JsonSerializer();",
          "813:         var p          = serializer.Deserialize<PersonForJson>(response);",
          "815:         Assert.Null(p.ReadOnlyProxy);",
          "816:     }",
          "818:     [Fact]",
          "819:     public void Serialize_Json_Does_Not_Double_Escape() {",
          "820:         var preformattedString = \"{ \\\"name\\\" : \\\"value\\\" }\";",
          "821:         var expectedSlashCount = preformattedString.Count(x => x == '\\\\');",
          "823:         var serializer       = new JsonSerializer();",
          "824:         var result           = serializer.Serialize(preformattedString);",
          "825:         var actualSlashCount = result.Count(x => x == '\\\\');",
          "827:         Assert.Equal(preformattedString, result);",
          "828:         Assert.Equal(expectedSlashCount, actualSlashCount);",
          "829:     }",
          "831:     [Fact]",
          "832:     public void Serialize_Json_Returns_Same_Json() {",
          "833:         var preformattedString = \"{ \\\"name\\\" : \\\"value\\\" } \";",
          "835:         var serializer = new JsonSerializer();",
          "836:         var result     = serializer.Serialize(preformattedString);",
          "838:         Assert.Equal(preformattedString, result);",
          "839:     }",
          "841:     [Fact]",
          "842:     public void Serialize_Json_Returns_Same_Json_Array() {",
          "843:         var preformattedString = \"[{ \\\"name\\\" : \\\"value\\\" }]\";",
          "845:         var serializer = new JsonSerializer();",
          "846:         var result     = serializer.Serialize(preformattedString);",
          "848:         Assert.Equal(preformattedString, result);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ad2663b4dbf9386c7c387e09c022da5218ef52",
      "candidate_info": {
        "commit_hash": "a5ad2663b4dbf9386c7c387e09c022da5218ef52",
        "repo": "restsharp/RestSharp",
        "commit_url": "https://github.com/restsharp/RestSharp/commit/a5ad2663b4dbf9386c7c387e09c022da5218ef52",
        "files": [
          ".editorconfig",
          ".github/workflows/build-dev.yml",
          ".github/workflows/pull-request.yml",
          "src/Directory.Build.props",
          "src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj",
          "src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj",
          "src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj",
          "src/RestSharp/RestSharp.csproj",
          "test/Directory.Build.props",
          "test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs",
          "test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs",
          "test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs",
          "test/RestSharp.IntegrationTests/OAuth1Tests.cs",
          "test/RestSharp.IntegrationTests/RequestBodyTests.cs",
          "test/RestSharp.IntegrationTests/RequestHeadTests.cs",
          "test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj",
          "test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj",
          "test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs",
          "test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj",
          "test/RestSharp.Tests/RestSharp.Tests.csproj"
        ],
        "message": "Move to xUnit and some cleanup",
        "before_after_code_files": [
          "src/Directory.Build.props||src/Directory.Build.props",
          "src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj||src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj",
          "src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj||src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj",
          "src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj||src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj",
          "src/RestSharp/RestSharp.csproj||src/RestSharp/RestSharp.csproj",
          "test/Directory.Build.props||test/Directory.Build.props",
          "test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs||test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs",
          "test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs||test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs",
          "test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs||test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs",
          "test/RestSharp.IntegrationTests/OAuth1Tests.cs||test/RestSharp.IntegrationTests/OAuth1Tests.cs",
          "test/RestSharp.IntegrationTests/RequestBodyTests.cs||test/RestSharp.IntegrationTests/RequestBodyTests.cs",
          "test/RestSharp.IntegrationTests/RequestHeadTests.cs||test/RestSharp.IntegrationTests/RequestHeadTests.cs",
          "test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj||test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj",
          "test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj||test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj",
          "test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs||test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs",
          "test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj||test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj",
          "test/RestSharp.Tests/RestSharp.Tests.csproj||test/RestSharp.Tests/RestSharp.Tests.csproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/RestSharp.Tests/RestSharp.Tests.csproj||test/RestSharp.Tests/RestSharp.Tests.csproj"
          ],
          "candidate": [
            "test/RestSharp.Tests/RestSharp.Tests.csproj||test/RestSharp.Tests/RestSharp.Tests.csproj"
          ]
        }
      },
      "candidate_diff": {
        "src/Directory.Build.props||src/Directory.Build.props": [
          "File: src/Directory.Build.props -> src/Directory.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project>",
          "33:     <PropertyGroup>",
          "36:     </PropertyGroup>",
          "38: </Project>",
          "",
          "[Removed Lines]",
          "2:   <Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), 'RestSharp.sln'))\\props\\Common.props\" />",
          "3:   <PropertyGroup>",
          "4:     <PackageIcon>restsharp.png</PackageIcon>",
          "5:     <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>",
          "6:     <PackageProjectUrl>https://restsharp.dev</PackageProjectUrl>",
          "7:     <RepositoryUrl>https://github.com/restsharp/RestSharp.git</RepositoryUrl>",
          "8:     <RepositoryType>git</RepositoryType>",
          "9:     <Description>Simple REST and HTTP API Client</Description>",
          "10:     <Authors>John Sheehan, Andrew Young, Alexey Zimarev and RestSharp community</Authors>",
          "11:     <UpdateVersionProperties>true</UpdateVersionProperties>",
          "12:     <PublishRepositoryUrl>true</PublishRepositoryUrl>",
          "13:     <IncludeSymbols>true</IncludeSymbols>",
          "14:     <SymbolPackageFormat>snupkg</SymbolPackageFormat>",
          "15:     <MinVerSkip Condition=\"'$(Configuration)' == 'Debug'\">true</MinVerSkip>",
          "16:     <GenerateDocumentationFile>true</GenerateDocumentationFile>",
          "17:     <NoWarn>$(NoWarn);1591</NoWarn>",
          "18:   </PropertyGroup>",
          "20:   <ItemGroup>",
          "21:     <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.0.0\" PrivateAssets=\"All\"/>",
          "22:     <PackageReference Include=\"MinVer\" Version=\"2.5.0\" PrivateAssets=\"All\"/>",
          "23:     <PackageReference Include=\"JetBrains.Annotations\" Version=\"2021.3.0\" PrivateAssets=\"All\"/>",
          "24:     <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.2\" PrivateAssets=\"All\" />",
          "25:   </ItemGroup>",
          "27:   <ItemGroup>",
          "28:     <None Include=\"$(RepoRoot)\\restsharp.png\" Pack=\"true\" PackagePath=\"\\\"/>",
          "29:     <Using Remove=\"System.Net.Http\"/>",
          "30:   </ItemGroup>",
          "32:   <Target Name=\"CustomVersion\" AfterTargets=\"MinVer\">",
          "34:       <FileVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</FileVersion>",
          "35:       <AssemblyVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</AssemblyVersion>",
          "37:   </Target>",
          "",
          "[Added Lines]",
          "2:     <Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), 'RestSharp.sln'))\\props\\Common.props\"/>",
          "4:         <PackageIcon>restsharp.png</PackageIcon>",
          "5:         <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>",
          "6:         <PackageProjectUrl>https://restsharp.dev</PackageProjectUrl>",
          "7:         <RepositoryUrl>https://github.com/restsharp/RestSharp.git</RepositoryUrl>",
          "8:         <RepositoryType>git</RepositoryType>",
          "9:         <Description>Simple REST and HTTP API Client</Description>",
          "10:         <Authors>John Sheehan, Andrew Young, Alexey Zimarev and RestSharp community</Authors>",
          "11:         <UpdateVersionProperties>true</UpdateVersionProperties>",
          "12:         <PublishRepositoryUrl>true</PublishRepositoryUrl>",
          "13:         <IncludeSymbols>true</IncludeSymbols>",
          "14:         <SymbolPackageFormat>snupkg</SymbolPackageFormat>",
          "15:         <GenerateDocumentationFile>true</GenerateDocumentationFile>",
          "16:         <NoWarn>$(NoWarn);1591</NoWarn>",
          "17:     </PropertyGroup>",
          "18:     <PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">",
          "19:         <MinVerSkip>true</MinVerSkip>",
          "20:         <GenerateAssemblyInfo>false</GenerateAssemblyInfo>",
          "23:     <ItemGroup>",
          "24:         <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"1.0.0\" PrivateAssets=\"All\"/>",
          "25:         <PackageReference Include=\"MinVer\" Version=\"2.5.0\" PrivateAssets=\"All\"/>",
          "26:         <PackageReference Include=\"JetBrains.Annotations\" Version=\"2021.3.0\" PrivateAssets=\"All\"/>",
          "27:     </ItemGroup>",
          "29:     <ItemGroup>",
          "30:         <None Include=\"$(RepoRoot)\\restsharp.png\" Pack=\"true\" PackagePath=\"\\\"/>",
          "31:         <!--    <Using Remove=\"System.Net.Http\"/>-->",
          "32:     </ItemGroup>",
          "33:     <ItemGroup Condition=\"'$(TargetFramework)' == 'net452'\">",
          "34:         <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies.net452\" Version=\"1.0.2\" PrivateAssets=\"All\"/>",
          "35:     </ItemGroup>",
          "37:     <Target Name=\"CustomVersion\" AfterTargets=\"MinVer\">",
          "38:         <PropertyGroup>",
          "39:             <FileVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</FileVersion>",
          "40:             <AssemblyVersion>$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)</AssemblyVersion>",
          "41:         </PropertyGroup>",
          "42:     </Target>",
          "",
          "---------------"
        ],
        "src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj||src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj": [
          "File: src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj -> src/RestSharp.Serializers.NewtonsoftJson/RestSharp.Serializers.NewtonsoftJson.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   <ItemGroup>",
          "9:     <ProjectReference Include=\"..\\RestSharp\\RestSharp.csproj\" />",
          "10:   </ItemGroup>",
          "11: </Project>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:   <ItemGroup>",
          "12:     <Using Remove=\"System.Net.Http\"/>",
          "13:   </ItemGroup>",
          "",
          "---------------"
        ],
        "src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj||src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj": [
          "File: src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj -> src/RestSharp.Serializers.SystemTextJson/RestSharp.Serializers.SystemTextJson.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   <ItemGroup>",
          "9:     <ProjectReference Include=\"..\\RestSharp\\RestSharp.csproj\" />",
          "10:   </ItemGroup>",
          "11: </Project>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:   <ItemGroup>",
          "12:     <Using Remove=\"System.Net.Http\"/>",
          "13:   </ItemGroup>",
          "",
          "---------------"
        ],
        "src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj||src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj": [
          "File: src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj -> src/RestSharp.Serializers.Utf8Json/RestSharp.Serializers.Utf8Json.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   <ItemGroup>",
          "9:     <ProjectReference Include=\"..\\RestSharp\\RestSharp.csproj\" />",
          "10:   </ItemGroup>",
          "11: </Project>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:   <ItemGroup>",
          "12:     <Using Remove=\"System.Net.Http\"/>",
          "13:   </ItemGroup>",
          "",
          "---------------"
        ],
        "src/RestSharp/RestSharp.csproj||src/RestSharp/RestSharp.csproj": [
          "File: src/RestSharp/RestSharp.csproj -> src/RestSharp/RestSharp.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:     <PropertyGroup>",
          "3:         <TargetFrameworks>netstandard2.0;net452</TargetFrameworks>",
          "4:         <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>",
          "6:     </PropertyGroup>",
          "9:     </ItemGroup>",
          "10:     <ItemGroup>",
          "11:         <None Remove=\"RestSharp.csproj.DotSettings\"/>",
          "13:     </ItemGroup>",
          "14:     <Target DependsOnTargets=\"ResolveReferences\" Name=\"CopyProjectReferencesToPackage\">",
          "15:         <ItemGroup>",
          "",
          "[Removed Lines]",
          "5:         <Nullable>enable</Nullable>",
          "7:     <ItemGroup>",
          "8:         <Reference Include=\"System.Web\" Condition=\"'$(TargetFramework)' == 'net452'\"/>",
          "12:         <Using Remove=\"System.Net.Http\"/>",
          "",
          "[Added Lines]",
          "6:     <ItemGroup Condition=\"'$(TargetFramework)' == 'net452'\">",
          "7:         <Reference Include=\"System.Web\"/>",
          "8:         <Using Remove=\"System.Net.Http\"/>",
          "",
          "---------------"
        ],
        "test/Directory.Build.props||test/Directory.Build.props": [
          "File: test/Directory.Build.props -> test/Directory.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:     <PropertyGroup>",
          "4:         <IsTestProject>true</IsTestProject>",
          "5:         <IsPackable>false</IsPackable>",
          "6:     </PropertyGroup>",
          "8:     <ItemGroup>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:         <Nullable>disable</Nullable>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:         <PackageReference Include=\"xunit\" Version=\"2.4.1\"/>",
          "11:         <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\" PrivateAssets=\"All\"/>",
          "12:         <PackageReference Include=\"AutoFixture\" Version=\"4.17.0\"/>",
          "14:         <PackageReference Include=\"coverlet.collector\" Version=\"3.1.0\"/>",
          "16:     </ItemGroup>",
          "18:     <ItemGroup>",
          "",
          "[Removed Lines]",
          "13:         <PackageReference Include=\"FluentAssertions\" Version=\"6.2.0\"/>",
          "15:         <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.2\" PrivateAssets=\"All\"/>",
          "",
          "[Added Lines]",
          "14:         <PackageReference Include=\"FluentAssertions\" Version=\"5.10.3\"/>",
          "16:     </ItemGroup>",
          "17:     <ItemGroup Condition=\"'$(TargetFramework)' == 'net452'\">",
          "18:         <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies.net452\" Version=\"1.0.2\" PrivateAssets=\"All\"/>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "21:         <Using Include=\"FluentAssertions\"/>",
          "22:         <Using Include=\"FluentAssertions.Extensions\"/>",
          "23:         <Using Include=\"AutoFixture\"/>",
          "24:     </ItemGroup>",
          "25: </Project>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:         <Using Remove=\"System.Net.Http\"/>",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs||test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs": [
          "File: test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs -> test/RestSharp.IntegrationTests/AsyncRequestBodyTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeffusing System.Net;",
          "2: using RestSharp.Tests.Shared.Fixtures;",
          "6: public class AsyncRequestBodyTests {",
          "19:     static void AssertHasNoRequestBody() {",
          "20:         Assert.Null(RequestBodyCapturer.CapturedContentType);",
          "",
          "[Removed Lines]",
          "4: namespace RestSharp.IntegrationTests;",
          "7:     [OneTimeSetUp]",
          "8:     public void Setup() => _server = SimpleServer.Create(Handlers.Generic<RequestBodyCapturer>());",
          "10:     [OneTimeTearDown]",
          "11:     public void Teardown() => _server.Dispose();",
          "13:     [SetUp]",
          "14:     public void CreateClient() => _client = new RestClient(_server.Url);",
          "16:     SimpleServer _server;",
          "17:     RestClient   _client;",
          "",
          "[Added Lines]",
          "2: using RestSharp.IntegrationTests.Fixtures;",
          "5: namespace RestSharp.IntegrationTests;",
          "8:     public AsyncRequestBodyTests(RequestBodyFixture fixture) {",
          "9:         var server = fixture.Server;",
          "10:         _client = new RestClient(server.Url);",
          "11:     }",
          "13:     readonly RestClient _client;",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs||test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs": [
          "File: test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs -> test/RestSharp.IntegrationTests/Fixtures/RequestBodyFixture.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: using RestSharp.Tests.Shared.Fixtures;",
          "3: namespace RestSharp.IntegrationTests.Fixtures;",
          "5: public class RequestBodyFixture : IDisposable {",
          "6:     public SimpleServer Server { get; }",
          "8:     public RequestBodyFixture() => Server = SimpleServer.Create(Handlers.Generic<RequestBodyCapturer>());",
          "10:     public void Dispose() => Server.Dispose();",
          "11: }",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs||test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs": [
          "File: test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs -> test/RestSharp.IntegrationTests/NonProtocolExceptionHandlingTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: namespace RestSharp.IntegrationTests;",
          "8:     class StupidClass {",
          "9:         public string Property { get; set; }",
          "",
          "[Removed Lines]",
          "6: public class NonProtocolExceptionHandlingTests : IDisposable {",
          "",
          "[Added Lines]",
          "6: public sealed class NonProtocolExceptionHandlingTests : IDisposable {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     public void Dispose() => _server.Dispose();",
          "",
          "[Removed Lines]",
          "22:     SimpleServer _server;",
          "",
          "[Added Lines]",
          "22:     readonly SimpleServer _server;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:         Assert.Equal(ResponseStatus.TimedOut, response.ResponseStatus);",
          "113:     }",
          "115:     [Fact]",
          "119:     public async Task Task_Handles_Non_Existent_Domain() {",
          "120:         var client = new RestClient(\"http://this.cannot.exist:8001\");",
          "",
          "[Removed Lines]",
          "116: #if NETCORE",
          "117:         [Ignore(\"Not supported for .NET Core\")]",
          "118: #endif",
          "",
          "[Added Lines]",
          "115: #if !NETCORE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:         Assert.Equal(WebExceptionStatus.NameResolutionFailure, ((WebException)response.ErrorException).Status);",
          "130:         Assert.Equal(ResponseStatus.Error, response.ResponseStatus);",
          "131:     }",
          "132: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: #endif",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/OAuth1Tests.cs||test/RestSharp.IntegrationTests/OAuth1Tests.cs": [
          "File: test/RestSharp.IntegrationTests/OAuth1Tests.cs -> test/RestSharp.IntegrationTests/OAuth1Tests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using RestSharp.Authenticators;",
          "6: using RestSharp.Authenticators.OAuth;",
          "7: using RestSharp.IntegrationTests.Models;",
          "9: namespace RestSharp.IntegrationTests;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: using RestSharp.Tests.Shared.Extensions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:         Assert.NotNull(response);",
          "43:         Assert.Equal(HttpStatusCode.OK, response.StatusCode);",
          "46:         var oauthToken       = qs[\"oauth_token\"];",
          "47:         var oauthTokenSecret = qs[\"oauth_token_secret\"];",
          "48:         var applicationName  = qs[\"application_name\"];",
          "",
          "[Removed Lines]",
          "45:         var qs               = HttpUtility.ParseQueryString(response.Content);",
          "",
          "[Added Lines]",
          "47:         var qs               = new Uri(response.Content).ParseQuery();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         Assert.NotNull(response);",
          "78:         Assert.Equal(HttpStatusCode.OK, response.StatusCode);",
          "81:         oauthToken       = qs[\"oauth_token\"];",
          "82:         oauthTokenSecret = qs[\"oauth_token_secret\"];",
          "",
          "[Removed Lines]",
          "80:         qs               = HttpUtility.ParseQueryString(response.Content);",
          "",
          "[Added Lines]",
          "82:         qs               = new Uri(response.Content).ParseQuery();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:         Assert.NotNull(requestTokenResponse);",
          "126:         Assert.Equal(HttpStatusCode.OK, requestTokenResponse.StatusCode);",
          "129:         var requestToken                   = requestTokenResponseParameters[\"oauth_token\"];",
          "130:         var requestSecret                  = requestTokenResponseParameters[\"oauth_token_secret\"];",
          "",
          "[Removed Lines]",
          "128:         var requestTokenResponseParameters = HttpUtility.ParseQueryString(requestTokenResponse.Content);",
          "",
          "[Added Lines]",
          "130:         var requestTokenResponseParameters = new Uri(requestTokenResponse.Content).ParseQuery();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:         Debugger.Break();",
          "152:         var requestVerifier             = requestTokenQueryParameters[\"oauth_verifier\"];",
          "154:         client.Authenticator = OAuth1Authenticator.ForAccessToken(",
          "",
          "[Removed Lines]",
          "151:         var requestTokenQueryParameters = HttpUtility.ParseQueryString(new Uri(requestUrl).Query);",
          "",
          "[Added Lines]",
          "153:         var requestTokenQueryParameters = new Uri(requestUrl).ParseQuery();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:         Assert.NotNull(requestActionTokenResponse);",
          "166:         Assert.Equal(HttpStatusCode.OK, requestActionTokenResponse.StatusCode);",
          "169:         var accessToken                          = requestActionTokenResponseParameters[\"oauth_token\"];",
          "170:         var accessSecret                         = requestActionTokenResponseParameters[\"oauth_token_secret\"];",
          "",
          "[Removed Lines]",
          "168:         var requestActionTokenResponseParameters = HttpUtility.ParseQueryString(requestActionTokenResponse.Content);",
          "",
          "[Added Lines]",
          "170:         var requestActionTokenResponseParameters = new Uri(requestActionTokenResponse.Content).ParseQuery();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195:         authenticator.Authenticate(client, request);",
          "197:         var requestUri = client.BuildUri(request);",
          "200:         Assert.True(actual.SequenceEqual(expected));",
          "201:     }",
          "",
          "[Removed Lines]",
          "198:         var actual     = HttpUtility.ParseQueryString(requestUri.Query).AllKeys.ToList();",
          "",
          "[Added Lines]",
          "200:         var actual     = new Uri(requestUri.Query).ParseQuery().Select(x => x.Key).ToList();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244:         Assert.NotNull(response);",
          "245:         Assert.Equal(HttpStatusCode.OK, response.StatusCode);",
          "248:         var oauthToken       = qs[\"oauth_token\"];",
          "249:         var oauthTokenSecret = qs[\"oauth_token_secret\"];",
          "",
          "[Removed Lines]",
          "247:         var qs               = HttpUtility.ParseQueryString(response.Content);",
          "",
          "[Added Lines]",
          "249:         var qs               = new Uri(response.Content).ParseQuery();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "274:         Assert.NotNull(response);",
          "275:         Assert.Equal(HttpStatusCode.OK, response.StatusCode);",
          "278:         oauthToken       = qs[\"oauth_token\"];",
          "279:         oauthTokenSecret = qs[\"oauth_token_secret\"];",
          "",
          "[Removed Lines]",
          "277:         qs               = HttpUtility.ParseQueryString(response.Content);",
          "",
          "[Added Lines]",
          "279:         qs               = new Uri(response.Content).ParseQuery();",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/RequestBodyTests.cs||test/RestSharp.IntegrationTests/RequestBodyTests.cs": [
          "File: test/RestSharp.IntegrationTests/RequestBodyTests.cs -> test/RestSharp.IntegrationTests/RequestBodyTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace RestSharp.IntegrationTests;",
          "15:     [Fact]",
          "16:     public void Can_Be_Added_To_COPY_Request() {",
          "",
          "[Removed Lines]",
          "1: \ufeffusing RestSharp.Tests.Shared.Fixtures;",
          "5: public class RequestBodyTests {",
          "6:     SimpleServer _server;",
          "7:     const string NewLine = \"\\r\\n\";",
          "9:     [OneTimeSetUp]",
          "10:     public void Setup() => _server = SimpleServer.Create(Handlers.Generic<RequestBodyCapturer>());",
          "12:     [OneTimeTearDown]",
          "13:     public void Teardown() => _server.Dispose();",
          "",
          "[Added Lines]",
          "1: \ufeffusing RestSharp.IntegrationTests.Fixtures;",
          "2: using RestSharp.Tests.Shared.Fixtures;",
          "6: public class RequestBodyTests : IClassFixture<RequestBodyFixture> {",
          "7:     readonly SimpleServer _server;",
          "9:     const string NewLine = \"\\r\\n\";",
          "11:     public RequestBodyTests(RequestBodyFixture fixture) => _server = fixture.Server;",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/RequestHeadTests.cs||test/RestSharp.IntegrationTests/RequestHeadTests.cs": [
          "File: test/RestSharp.IntegrationTests/RequestHeadTests.cs -> test/RestSharp.IntegrationTests/RequestHeadTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: using RestSharp.IntegrationTests.Fixtures;",
          "3: using RestSharp.Tests.Shared.Fixtures;",
          "7: public class RequestHeadTests : CaptureFixture {",
          "8:     [Fact]",
          "",
          "[Removed Lines]",
          "5: namespace RestSharp.IntegrationTests;",
          "",
          "[Added Lines]",
          "5: namespace RestSharp.IntegrationTests;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         Assert.Null(RequestHeadCapturer.CapturedHeaders);",
          "51:     }",
          "53:     [Fact]",
          "57:     public void Passes_Default_Credentials_When_UseDefaultCredentials_Is_True() {",
          "58:         const Method httpMethod = Method.GET;",
          "",
          "[Removed Lines]",
          "54: #if NETCORE",
          "55:          [Ignore(\"Not supported for .NET Core\")]",
          "56: #endif",
          "",
          "[Added Lines]",
          "53: #if !NETCORE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:             \"Authorization header not present in HTTP request from client, even though UseDefaultCredentials = true\"",
          "77:         );",
          "78:     }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: #endif",
          "",
          "---------------"
        ],
        "test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj||test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj": [
          "File: test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj -> test/RestSharp.IntegrationTests/RestSharp.IntegrationTests.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
          "26: </Project>",
          "",
          "[Removed Lines]",
          "2:   <PropertyGroup>",
          "3:     <TargetFrameworks>net452;net5</TargetFrameworks>",
          "4:   </PropertyGroup>",
          "5:   <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net452|AnyCPU'\">",
          "6:     <WarningLevel>0</WarningLevel>",
          "7:   </PropertyGroup>",
          "8:   <PropertyGroup Condition=\"'$(TargetFramework)'=='net5'\">",
          "9:     <DefineConstants>NETCORE</DefineConstants>",
          "10:   </PropertyGroup>",
          "11:   <ItemGroup>",
          "12:     <ProjectReference Include=\"..\\..\\src\\RestSharp\\RestSharp.csproj\" />",
          "13:     <ProjectReference Include=\"..\\RestSharp.Tests.Shared\\RestSharp.Tests.Shared.csproj\" />",
          "14:   </ItemGroup>",
          "15:   <ItemGroup>",
          "16:     <Reference Include=\"System.Web\" Condition=\"'$(TargetFramework)' == 'net452'\" />",
          "17:   </ItemGroup>",
          "18:   <ItemGroup>",
          "19:     <None Update=\"Assets\\Koala.jpg\">",
          "20:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "21:     </None>",
          "22:     <None Update=\"Assets\\TestFile.txt\">",
          "23:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "24:     </None>",
          "25:   </ItemGroup>",
          "",
          "[Added Lines]",
          "2:     <PropertyGroup>",
          "3:         <TargetFrameworks>net452;net5</TargetFrameworks>",
          "4:     </PropertyGroup>",
          "5:     <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net452|AnyCPU'\">",
          "6:         <WarningLevel>0</WarningLevel>",
          "7:     </PropertyGroup>",
          "8:     <PropertyGroup Condition=\"'$(TargetFramework)'=='net5'\">",
          "9:         <DefineConstants>NETCORE</DefineConstants>",
          "10:     </PropertyGroup>",
          "11:     <ItemGroup>",
          "12:         <ProjectReference Include=\"..\\..\\src\\RestSharp\\RestSharp.csproj\" />",
          "13:         <ProjectReference Include=\"..\\RestSharp.Tests.Shared\\RestSharp.Tests.Shared.csproj\" />",
          "14:     </ItemGroup>",
          "15:     <ItemGroup>",
          "16:         <Using Remove=\"System.Net.Http\" />",
          "17:     </ItemGroup>",
          "18:     <ItemGroup>",
          "19:         <None Update=\"Assets\\Koala.jpg\" CopyToOutputDirectory=\"PreserveNewest\" />",
          "20:         <None Update=\"Assets\\TestFile.txt\" CopyToOutputDirectory=\"PreserveNewest\" />",
          "21:     </ItemGroup>",
          "",
          "---------------"
        ],
        "test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj||test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj": [
          "File: test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj -> test/RestSharp.InteractiveTests/RestSharp.InteractiveTests.csproj"
        ],
        "test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs||test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs": [
          "File: test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs -> test/RestSharp.Tests.Shared/Extensions/UriExtensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: namespace RestSharp.Tests.Shared.Extensions;",
          "3: public static class UriExtensions {",
          "4:     public static IDictionary<string, string> ParseQuery(this Uri uri) {",
          "5:         var query = uri.Query.Split('&');",
          "6:         return query.Select(x => x.Split('=')).ToDictionary(x => x[0], x => x[1]);",
          "7:     }",
          "8: }",
          "",
          "---------------"
        ],
        "test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj||test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj": [
          "File: test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj -> test/RestSharp.Tests.Shared/RestSharp.Tests.Shared.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project Sdk=\"Microsoft.NET.Sdk\">",
          "12: </Project>",
          "",
          "[Removed Lines]",
          "2:   <PropertyGroup>",
          "3:     <TargetFrameworks>net461;net5</TargetFrameworks>",
          "4:     <IsTestProject>false</IsTestProject>",
          "5:   </PropertyGroup>",
          "6:   <ItemGroup>",
          "7:     <Reference Include=\"System.Web\" Condition=\"'$(TargetFramework)' == 'net452'\"/>",
          "8:   </ItemGroup>",
          "9:   <ItemGroup>",
          "10:     <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.2\" PrivateAssets=\"All\"/>",
          "11:   </ItemGroup>",
          "",
          "[Added Lines]",
          "2:     <PropertyGroup>",
          "3:         <TargetFrameworks>net452;net5</TargetFrameworks>",
          "4:         <IsTestProject>false</IsTestProject>",
          "5:     </PropertyGroup>",
          "6:     <ItemGroup Condition=\"'$(TargetFramework)' == 'net452'\">",
          "7:         <PackageReference Include=\"System.Net.Http\" Version=\"4.3.*\" />",
          "8:     </ItemGroup>",
          "",
          "---------------"
        ],
        "test/RestSharp.Tests/RestSharp.Tests.csproj||test/RestSharp.Tests/RestSharp.Tests.csproj": [
          "File: test/RestSharp.Tests/RestSharp.Tests.csproj -> test/RestSharp.Tests/RestSharp.Tests.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5:   <ItemGroup>",
          "6:     <PackageReference Include=\"Moq\" Version=\"4.16.1\" />",
          "7:   </ItemGroup>",
          "8:   <ItemGroup>",
          "9:     <ProjectReference Include=\"..\\..\\src\\RestSharp\\RestSharp.csproj\" />",
          "10:   </ItemGroup>",
          "11:   <ItemGroup>",
          "111:   </ItemGroup>",
          "112: </Project>",
          "",
          "[Removed Lines]",
          "3:     <TargetFrameworks>net461;net5</TargetFrameworks>",
          "12:     <None Update=\"SampleData\\GoodreadsFormatError.xml\">",
          "13:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "14:     </None>",
          "15:     <None Update=\"SampleData\\header_and_rows.xml\">",
          "16:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "17:     </None>",
          "18:     <None Update=\"SampleData\\4sq.json\">",
          "19:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "20:     </None>",
          "21:     <None Update=\"SampleData\\bearertoken.json\">",
          "22:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "23:     </None>",
          "24:     <None Update=\"SampleData\\boolean_from_number.xml\">",
          "25:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "26:     </None>",
          "27:     <None Update=\"SampleData\\boolean_from_string.xml\">",
          "28:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "29:     </None>",
          "30:     <None Update=\"SampleData\\datetimes.json\">",
          "31:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "32:     </None>",
          "33:     <None Update=\"SampleData\\deserialize_as_list.xml\">",
          "34:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "35:     </None>",
          "36:     <None Update=\"SampleData\\directlists.xml\">",
          "37:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "38:     </None>",
          "39:     <None Update=\"SampleData\\eventful.xml\">",
          "40:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "41:     </None>",
          "42:     <None Update=\"SampleData\\GenericWithList.json\">",
          "43:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "44:     </None>",
          "45:     <None Update=\"SampleData\\Goodreads.xml\">",
          "46:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "47:     </None>",
          "48:     <None Update=\"SampleData\\GoogleWeather.xml\">",
          "49:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "50:     </None>",
          "51:     <None Update=\"SampleData\\InlineListSample.xml\">",
          "52:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "53:     </None>",
          "54:     <None Update=\"SampleData\\iso8601datetimes.json\">",
          "55:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "56:     </None>",
          "57:     <None Update=\"SampleData\\jsonarray.json\">",
          "58:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "59:     </None>",
          "60:     <None Update=\"SampleData\\jsondictionary.json\">",
          "61:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "62:     </None>",
          "63:     <None Update=\"SampleData\\jsondictionary_KeysType.json\">",
          "64:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "65:     </None>",
          "66:     <None Update=\"SampleData\\jsondictionary_null.json\">",
          "67:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "68:     </None>",
          "69:     <None Update=\"SampleData\\jsonenums.json\">",
          "70:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "71:     </None>",
          "72:     <None Update=\"SampleData\\jsonenumtypes.json\">",
          "73:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "74:     </None>",
          "75:     <None Update=\"SampleData\\jsonlists.json\">",
          "76:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "77:     </None>",
          "78:     <None Update=\"SampleData\\Lastfm.xml\">",
          "79:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "80:     </None>",
          "81:     <None Update=\"SampleData\\ListWithAttributes.xml\">",
          "82:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "83:     </None>",
          "84:     <None Update=\"SampleData\\NestedListSample.xml\">",
          "85:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "86:     </None>",
          "87:     <None Update=\"SampleData\\newdatetimes.json\">",
          "88:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "89:     </None>",
          "90:     <None Update=\"SampleData\\objectproperty.json\">",
          "91:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "92:     </None>",
          "93:     <None Update=\"SampleData\\person.json\">",
          "94:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "95:     </None>",
          "96:     <None Update=\"SampleData\\restsharp.nuspec\">",
          "97:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "98:     </None>",
          "99:     <None Update=\"SampleData\\sojson.json\">",
          "100:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "101:     </None>",
          "102:     <None Update=\"SampleData\\timespans.json\">",
          "103:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "104:     </None>",
          "105:     <None Update=\"SampleData\\underscore_prefix.json\">",
          "106:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "107:     </None>",
          "108:     <None Update=\"SampleData\\xmllists.xml\">",
          "109:       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>",
          "110:     </None>",
          "",
          "[Added Lines]",
          "3:     <TargetFrameworks>net452;net5</TargetFrameworks>",
          "10:     <Using Remove=\"System.Net.Http\"/>",
          "13:     <None Update=\"SampleData\\GoodreadsFormatError.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "14:     <None Update=\"SampleData\\header_and_rows.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "15:     <None Update=\"SampleData\\4sq.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "16:     <None Update=\"SampleData\\bearertoken.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "17:     <None Update=\"SampleData\\boolean_from_number.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "18:     <None Update=\"SampleData\\boolean_from_string.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "19:     <None Update=\"SampleData\\datetimes.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "20:     <None Update=\"SampleData\\deserialize_as_list.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "21:     <None Update=\"SampleData\\directlists.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "22:     <None Update=\"SampleData\\eventful.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "23:     <None Update=\"SampleData\\GenericWithList.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "24:     <None Update=\"SampleData\\Goodreads.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "25:     <None Update=\"SampleData\\GoogleWeather.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "26:     <None Update=\"SampleData\\InlineListSample.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "27:     <None Update=\"SampleData\\iso8601datetimes.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "28:     <None Update=\"SampleData\\jsonarray.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "29:     <None Update=\"SampleData\\jsondictionary.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "30:     <None Update=\"SampleData\\jsondictionary_KeysType.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "31:     <None Update=\"SampleData\\jsondictionary_null.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "32:     <None Update=\"SampleData\\jsonenums.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "33:     <None Update=\"SampleData\\jsonenumtypes.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "34:     <None Update=\"SampleData\\jsonlists.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "35:     <None Update=\"SampleData\\Lastfm.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "36:     <None Update=\"SampleData\\ListWithAttributes.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "37:     <None Update=\"SampleData\\NestedListSample.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "38:     <None Update=\"SampleData\\newdatetimes.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "39:     <None Update=\"SampleData\\objectproperty.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "40:     <None Update=\"SampleData\\person.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "41:     <None Update=\"SampleData\\restsharp.nuspec\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "42:     <None Update=\"SampleData\\sojson.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "43:     <None Update=\"SampleData\\timespans.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "44:     <None Update=\"SampleData\\underscore_prefix.json\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "45:     <None Update=\"SampleData\\xmllists.xml\" CopyToOutputDirectory=\"PreserveNewest\"/>",
          "",
          "---------------"
        ]
      }
    }
  ]
}