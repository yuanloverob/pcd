{
  "cve_id": "CVE-2017-4995",
  "cve_desc": "An issue was discovered in Pivotal Spring Security 4.2.0.RELEASE through 4.2.2.RELEASE, and Spring Security 5.0.0.M1. When configured to enable default typing, Jackson contained a deserialization vulnerability that could lead to arbitrary code execution. Jackson fixed this vulnerability by blacklisting known \"deserialization gadgets.\" Spring Security configures Jackson with global default typing enabled, which means that (through the previous exploit) arbitrary code could be executed if all of the following is true: (1) Spring Security's Jackson support is being leveraged by invoking SecurityJackson2Modules.getModules(ClassLoader) or SecurityJackson2Modules.enableDefaultTyping(ObjectMapper); (2) Jackson is used to deserialize data that is not trusted (Spring Security does not perform deserialization using Jackson, so this is an explicit choice of the user); and (3) there is an unknown (Jackson is not blacklisting it already) \"deserialization gadget\" that allows code execution present on the classpath. Jackson provides a blacklisting approach to protecting against this type of attack, but Spring Security should be proactive against blocking unknown \"deserialization gadgets\" when Spring Security enables default typing.",
  "repo": "FasterXML/jackson-databind",
  "patch_hash": "6ce32ffd18facac6abdbbf559c817b47fcb622c1",
  "patch_info": {
    "commit_hash": "6ce32ffd18facac6abdbbf559c817b47fcb622c1",
    "repo": "FasterXML/jackson-databind",
    "commit_url": "https://github.com/FasterXML/jackson-databind/commit/6ce32ffd18facac6abdbbf559c817b47fcb622c",
    "files": [
      "release-notes/VERSION",
      "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
    ],
    "message": "Fix #1599 for 2.7(.10)",
    "before_after_code_files": [
      "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
      "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:         if (!isPotentialBeanType(type.getRawClass())) {",
      "140:             return null;",
      "141:         }",
      "143:         return buildBeanDeserializer(ctxt, type, beanDesc);",
      "144:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:         checkIllegalTypes(ctxt, type, beanDesc);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "835:         return (status == null) ? false : status.booleanValue();",
      "836:     }",
      "837: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "843:     protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,",
      "844:             BeanDescription beanDesc)",
      "845:         throws JsonMappingException",
      "846:     {",
      "849:         Class<?> raw = type.getRawClass();",
      "850:         String name = raw.getSimpleName();",
      "852:         if (\"TemplatesImpl\".equals(name)) { // [databind#1599]",
      "853:             if (raw.getName().startsWith(\"com.sun.org.apache.xalan\")) {",
      "854:                 throw JsonMappingException.from(ctxt,",
      "855:                         String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\",",
      "856:                                 name));",
      "857:             }",
      "858:         }",
      "859:     }",
      "",
      "---------------"
    ],
    "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
      "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package com.fasterxml.jackson.databind.interop;",
      "3: import com.fasterxml.jackson.databind.*;",
      "9: public class IllegalTypesCheckTest extends BaseMapTest",
      "10: {",
      "11:     static class Bean1599 {",
      "12:         public int id;",
      "13:         public Object obj;",
      "14:     }",
      "16:     public void testIssue1599() throws Exception",
      "17:     {",
      "18:         final String JSON = aposToQuotes(",
      "19:  \"{'id': 124,\\n\"",
      "20: +\" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\\n\"",
      "21: +\"  {\\n\"",
      "22: +\"    'transletBytecodes' : [ 'AAIAZQ==' ],\\n\"",
      "23: +\"    'transletName' : 'a.b',\\n\"",
      "24: +\"    'outputProperties' : { }\\n\"",
      "25: +\"  }\\n\"",
      "26: +\" ]\\n\"",
      "27: +\"}\"",
      "28:         );",
      "29:         ObjectMapper mapper = new ObjectMapper();",
      "30:         mapper.enableDefaultTyping();",
      "31:         try {",
      "32:             mapper.readValue(JSON, Bean1599.class);",
      "33:             fail(\"Should not pass\");",
      "34:         } catch (JsonMappingException e) {",
      "35:             verifyException(e, \"Illegal type\");",
      "36:             verifyException(e, \"to deserialize\");",
      "37:             verifyException(e, \"prevented for security reasons\");",
      "38:         }",
      "39:     }",
      "40: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa87c1ddbe803ebb7295f5c2ebfe38e12f6e6162",
      "candidate_info": {
        "commit_hash": "fa87c1ddbe803ebb7295f5c2ebfe38e12f6e6162",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/fa87c1ddbe803ebb7295f5c2ebfe38e12f6e6162",
        "files": [
          "pom.xml",
          "release-notes/VERSION",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ],
        "message": "Backport #1599 in 2.6.x",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };",
          "42:     private final static Class<?>[] NO_VIEWS = new Class<?>[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     private final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;",
          "49:     static {",
          "50:         Set<String> s = new HashSet<String>();",
          "53:         s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");",
          "54:         s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
          "55:         s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
          "56:         s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");",
          "57:         s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
          "58:         s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
          "59:         s.add(\"org.springframework.beans.factory.ObjectFactory\");",
          "60:         s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
          "61:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "62:     }",
          "67:     private Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:         if (!isPotentialBeanType(type.getRawClass())) {",
          "139:             return null;",
          "140:         }",
          "142:         return buildBeanDeserializer(ctxt, type, beanDesc);",
          "143:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         checkIllegalTypes(ctxt, type, beanDesc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "837:         return (status == null) ? false : status.booleanValue();",
          "838:     }",
          "839: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:     private void checkIllegalTypes(DeserializationContext ctxt, JavaType type,",
          "868:             BeanDescription beanDesc)",
          "869:         throws JsonMappingException",
          "870:     {",
          "873:         String full = type.getRawClass().getName();",
          "875:         if (_cfgIllegalClassNames.contains(full)) {",
          "876:             String message = String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\",",
          "877:                     full);",
          "878:             throw ctxt.mappingException(\"Invalid type definition for type %s: %s\",",
          "879:                     beanDesc, message);",
          "880:         }",
          "881:     }",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package com.fasterxml.jackson.databind.interop;",
          "3: import com.fasterxml.jackson.databind.*;",
          "9: public class IllegalTypesCheckTest extends BaseMapTest",
          "10: {",
          "11:     static class Bean1599 {",
          "12:         public int id;",
          "13:         public Object obj;",
          "14:     }",
          "16:     public void testIssue1599() throws Exception",
          "17:     {",
          "18:         final String JSON = aposToQuotes(",
          "19:  \"{'id': 124,\\n\"",
          "20: +\" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\\n\"",
          "21: +\"  {\\n\"",
          "22: +\"    'transletBytecodes' : [ 'AAIAZQ==' ],\\n\"",
          "23: +\"    'transletName' : 'a.b',\\n\"",
          "24: +\"    'outputProperties' : { }\\n\"",
          "25: +\"  }\\n\"",
          "26: +\" ]\\n\"",
          "27: +\"}\"",
          "28:         );",
          "29:         ObjectMapper mapper = new ObjectMapper();",
          "30:         mapper.enableDefaultTyping();",
          "31:         try {",
          "32:             mapper.readValue(JSON, Bean1599.class);",
          "33:             fail(\"Should not pass\");",
          "34:         } catch (JsonMappingException e) {",
          "35:             verifyException(e, \"Illegal type\");",
          "36:             verifyException(e, \"to deserialize\");",
          "37:             verifyException(e, \"prevented for security reasons\");",
          "38:         }",
          "39:     }",
          "40: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bfbb835e530055c1941ddf87fde0b08d08dcd38",
      "candidate_info": {
        "commit_hash": "3bfbb835e530055c1941ddf87fde0b08d08dcd38",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/3bfbb835e530055c1941ddf87fde0b08d08dcd38",
        "files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
        ],
        "message": "Minor improvement wrt #1599 (also cover vanilla xalan impl)",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
          "58:         s.add(\"org.springframework.beans.factory.ObjectFactory\");",
          "59:         s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
          "60:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "61:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:         s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddfddfba6414adbecaff99684ef66eebd3a92e92",
      "candidate_info": {
        "commit_hash": "ddfddfba6414adbecaff99684ef66eebd3a92e92",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/ddfddfba6414adbecaff99684ef66eebd3a92e92",
        "files": [
          "release-notes/VERSION",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ],
        "message": "Fix #1737",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
          "63:         s.add(\"com.sun.rowset.JdbcRowSetImpl\");",
          "64:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "65:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:         s.add(\"java.util.logging.FileHandler\");",
          "66:         s.add(\"java.rmi.server.UnicastRemoteObject\");",
          "68:         s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "69:         s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "70:         s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "71:         s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package com.fasterxml.jackson.databind.interop;",
          "3: import com.fasterxml.jackson.databind.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import com.fasterxml.jackson.annotation.JsonTypeInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:         public int id;",
          "13:         public Object obj;",
          "14:     }",
          "17:     {",
          "18:         final String JSON = aposToQuotes(",
          "19:  \"{'id': 124,\\n\"",
          "21: +\"  {\\n\"",
          "22: +\"    'transletBytecodes' : [ 'AAIAZQ==' ],\\n\"",
          "23: +\"    'transletName' : 'a.b',\\n\"",
          "",
          "[Removed Lines]",
          "16:     public void testIssue1599() throws Exception",
          "20: +\" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\\n\"",
          "",
          "[Added Lines]",
          "17:     static class PolyWrapper {",
          "18:         @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,",
          "19:                 include = JsonTypeInfo.As.WRAPPER_ARRAY)",
          "20:         public Object v;",
          "21:     }",
          "29:     private final ObjectMapper MAPPER = objectMapper();",
          "33:     public void testXalanTypes1599() throws Exception",
          "35:         final String clsName = \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\";",
          "38: +\" 'obj':[ '\"+clsName+\"',\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:             mapper.readValue(JSON, Bean1599.class);",
          "33:             fail(\"Should not pass\");",
          "34:         } catch (JsonMappingException e) {",
          "38:         }",
          "39:     }",
          "40: }",
          "",
          "[Removed Lines]",
          "35:             verifyException(e, \"Illegal type\");",
          "36:             verifyException(e, \"to deserialize\");",
          "37:             verifyException(e, \"prevented for security reasons\");",
          "",
          "[Added Lines]",
          "53:             _verifySecurityException(e, clsName);",
          "54:         }",
          "55:     }",
          "59:     public void testJDKTypes1737() throws Exception",
          "60:     {",
          "61:         _testTypes1737(java.util.logging.FileHandler.class);",
          "62:         _testTypes1737(java.rmi.server.UnicastRemoteObject.class);",
          "63:     }",
          "70:     public void testSpringTypes1737() throws Exception",
          "71:     {",
          "72:         _testTypes1737(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "73:         _testTypes1737(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "74:     }",
          "76:     public void testC3P0Types1737() throws Exception",
          "77:     {",
          "78:         _testTypes1737(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "79:         _testTypes1737(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "80:     }",
          "83:     private void _testTypes1737(Class<?> nasty) throws Exception {",
          "84:         _testTypes1737(nasty.getName());",
          "85:     }",
          "87:     private void _testTypes1737(String clsName) throws Exception",
          "88:     {",
          "91:         String json = aposToQuotes(",
          "92:                 \"{'v':['\"+clsName+\"','/tmp/foobar.txt']}\"",
          "93:                 );",
          "94:         try {",
          "95:             MAPPER.readValue(json, PolyWrapper.class);",
          "96:             fail(\"Should not pass\");",
          "97:         } catch (JsonMappingException e) {",
          "98:             _verifySecurityException(e, clsName);",
          "99:         }",
          "100:     }",
          "102:     protected void _verifySecurityException(Throwable t, String clsName) throws Exception",
          "103:     {",
          "105:         _verifyException(t, JsonMappingException.class,",
          "106:             \"Illegal type\",",
          "107:             \"to deserialize\",",
          "108:             \"prevented for security reasons\");",
          "109:         verifyException(t, clsName);",
          "110:     }",
          "112:     protected void _verifyException(Throwable t, Class<?> expExcType,",
          "113:             String... patterns) throws Exception",
          "114:     {",
          "115:         Class<?> actExc = t.getClass();",
          "116:         if (!expExcType.isAssignableFrom(actExc)) {",
          "117:             fail(\"Expected Exception of type '\"+expExcType.getName()+\"', got '\"",
          "118:                     +actExc.getName()+\"', message: \"+t.getMessage());",
          "119:         }",
          "120:         for (String pattern : patterns) {",
          "121:             verifyException(t, pattern);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d50f202d01a48d7d48f9708cd1d1c308d9562f8",
      "candidate_info": {
        "commit_hash": "3d50f202d01a48d7d48f9708cd1d1c308d9562f8",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/3d50f202d01a48d7d48f9708cd1d1c308d9562f8",
        "files": [
          "src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java",
          "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java",
          "src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java",
          "src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java",
          "src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java",
          "src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java",
          "src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java",
          "src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java",
          "src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java",
          "src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java",
          "src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java",
          "src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java",
          "src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java",
          "src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java"
        ],
        "message": "Move the very last configurability piece out of ObjectMapper, into MapperBuilder",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java||src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java",
          "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java||src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java||src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
          "src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java||src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java",
          "src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java",
          "src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java||src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java",
          "src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java||src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java",
          "src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java",
          "src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java||src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java",
          "src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java||src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java||src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java||src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java||src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java",
          "src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java||src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java",
          "src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java||src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java",
          "src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java||src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java",
          "src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java||src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java",
          "src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java||src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java",
          "src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java||src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java",
          "src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java||src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java",
          "src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java||src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java",
          "src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java||src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ],
          "candidate": [
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java||src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java -> src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java"
        ],
        "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java||src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java -> src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import java.util.concurrent.ConcurrentHashMap;",
          "8: import java.util.concurrent.atomic.AtomicReference;",
          "12: import com.fasterxml.jackson.core.*;",
          "13: import com.fasterxml.jackson.core.io.CharacterEscapes;",
          "14: import com.fasterxml.jackson.core.io.SegmentedStringWriter;",
          "",
          "[Removed Lines]",
          "10: import com.fasterxml.jackson.annotation.*;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: import com.fasterxml.jackson.databind.introspect.*;",
          "24: import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
          "25: import com.fasterxml.jackson.databind.jsontype.*;",
          "27: import com.fasterxml.jackson.databind.node.*;",
          "28: import com.fasterxml.jackson.databind.ser.*;",
          "29: import com.fasterxml.jackson.databind.type.*;",
          "",
          "[Removed Lines]",
          "26: import com.fasterxml.jackson.databind.jsontype.impl.DefaultTypeResolverBuilder;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "545:         return _typeFactory.constructType(t);",
          "546:     }",
          "",
          "[Removed Lines]",
          "566:     public ObjectMapper enableDefaultTyping() {",
          "567:         return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);",
          "568:     }",
          "582:     public ObjectMapper enableDefaultTyping(DefaultTyping dti) {",
          "583:         return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);",
          "584:     }",
          "604:     public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs)",
          "605:     {",
          "608:         if (includeAs == JsonTypeInfo.As.EXTERNAL_PROPERTY) {",
          "609:             throw new IllegalArgumentException(\"Cannot use includeAs of \"+includeAs+\" for Default Typing\");",
          "610:         }",
          "611:         return setDefaultTyping(new DefaultTypeResolverBuilder(applicability, includeAs));",
          "612:     }",
          "628:     public ObjectMapper enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName)",
          "629:     {",
          "630:         return setDefaultTyping(new DefaultTypeResolverBuilder(applicability, propertyName));",
          "631:     }",
          "639:     public ObjectMapper disableDefaultTyping() {",
          "640:         return setDefaultTyping(null);",
          "641:     }",
          "655:     public ObjectMapper setDefaultTyping(TypeResolverBuilder<?> typer) {",
          "656:         _deserializationConfig = _deserializationConfig.with(typer);",
          "657:         _serializationConfig = _serializationConfig.with(typer);",
          "658:         return this;",
          "659:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java||src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java -> src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import com.fasterxml.jackson.annotation.JsonInclude;",
          "11: import com.fasterxml.jackson.annotation.JsonSetter;",
          "12: import com.fasterxml.jackson.core.*;",
          "13: import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;",
          "14: import com.fasterxml.jackson.core.util.Snapshottable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: import com.fasterxml.jackson.annotation.JsonTypeInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: import com.fasterxml.jackson.databind.introspect.VisibilityChecker;",
          "23: import com.fasterxml.jackson.databind.jsontype.NamedType;",
          "24: import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
          "25: import com.fasterxml.jackson.databind.jsontype.TypeResolverProvider;",
          "26: import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;",
          "27: import com.fasterxml.jackson.databind.node.JsonNodeFactory;",
          "28: import com.fasterxml.jackson.databind.ser.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;",
          "28: import com.fasterxml.jackson.databind.jsontype.impl.DefaultTypeResolverBuilder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1281:         return _this();",
          "1282:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1305:     public B enableDefaultTyping() {",
          "1306:         return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);",
          "1307:     }",
          "1321:     public B enableDefaultTyping(DefaultTyping dti) {",
          "1322:         return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);",
          "1323:     }",
          "1343:     public B enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs)",
          "1344:     {",
          "1347:         if (includeAs == JsonTypeInfo.As.EXTERNAL_PROPERTY) {",
          "1348:             throw new IllegalArgumentException(\"Cannot use includeAs of \"+includeAs+\" for Default Typing\");",
          "1349:         }",
          "1350:         return setDefaultTyping(new DefaultTypeResolverBuilder(applicability, includeAs));",
          "1351:     }",
          "1367:     public B enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName)",
          "1368:     {",
          "1369:         return setDefaultTyping(new DefaultTypeResolverBuilder(applicability, propertyName));",
          "1370:     }",
          "1378:     public B disableDefaultTyping() {",
          "1379:         return setDefaultTyping(null);",
          "1380:     }",
          "1394:     public B setDefaultTyping(TypeResolverBuilder<?> typer) {",
          "1395:         _baseSettings = _baseSettings.with(typer);",
          "1396:         return _this();",
          "1397:     }",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java||src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java -> src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java||src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java -> src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     {",
          "22:         Class<?> unmodSetType = Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();",
          "23:         ObjectMapper mapper = ObjectMapper.builder()",
          "24:                 .addMixIn(unmodSetType, UnmodifiableSetMixin.class)",
          "25:                 .build();",
          "28:         final String EXPECTED_JSON = \"[\\\"\"+unmodSetType.getName()+\"\\\",[]]\";",
          "30:         Set<?> foo = mapper.readValue(EXPECTED_JSON, Set.class);",
          "31:         assertTrue(foo.isEmpty());",
          "32:     }",
          "",
          "[Removed Lines]",
          "26:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "24:                 .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java -> src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:         enumMap.put(Enum1859.B, \"stuff\");",
          "158:         Pojo1859 input = new Pojo1859(enumMap);",
          "",
          "[Removed Lines]",
          "160:         ObjectMapper mapper = new ObjectMapper();",
          "161:         mapper.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@type\");",
          "",
          "[Added Lines]",
          "160:         ObjectMapper mapper = ObjectMapper.builder()",
          "161:                 .enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@type\")",
          "162:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java -> src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     public void testUnmodifiableSet() throws Exception",
          "50:     {",
          "54:         Set<String> theSet = Collections.unmodifiableSet(Collections.singleton(\"a\"));",
          "55:         String json = mapper.writeValueAsString(theSet);",
          "",
          "[Removed Lines]",
          "51:         ObjectMapper mapper = new ObjectMapper();",
          "52:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "51:         ObjectMapper mapper = ObjectMapper.builder()",
          "52:                 .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "53:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java -> src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: public class TestDefaultForUtilCollections1868 extends BaseMapTest",
          "12: {",
          "",
          "[Removed Lines]",
          "13:    private final ObjectMapper DEFAULT_MAPPER = new ObjectMapper();",
          "14:    {",
          "15:        DEFAULT_MAPPER.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "16:    }",
          "",
          "[Added Lines]",
          "13:    private final ObjectMapper DEFAULT_MAPPER = ObjectMapper.builder()",
          "14:            .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "15:            .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java||src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java -> src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:     public void testObjectSerializeWithLong() throws IOException",
          "216:     {",
          "219:         final long VALUE = 1337800584532L;",
          "221:         String serialized = \"{\\\"timestamp\\\":\"+VALUE+\"}\";",
          "",
          "[Removed Lines]",
          "217:         final ObjectMapper mapper = new ObjectMapper();",
          "218:         mapper.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT, As.PROPERTY);",
          "",
          "[Added Lines]",
          "217:         final ObjectMapper mapper = ObjectMapper.builder()",
          "218:                 .enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT, As.PROPERTY)",
          "219:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java||src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java -> src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     public void testPolymorphicPath() throws Exception",
          "26:     {",
          "29:         Path input = Paths.get(\"/tmp\", \"foo.txt\");",
          "31:         String json = mapper.writeValueAsString(new Object[] { input });",
          "",
          "[Removed Lines]",
          "27:         ObjectMapper mapper = new ObjectMapper();",
          "28:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "27:         ObjectMapper mapper = ObjectMapper.builder()",
          "28:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "29:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java||src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java -> src/test/java/com/fasterxml/jackson/databind/ext/jdk8/OptionalBasicTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  }",
          "171:  public void testWithTypingEnabled() throws Exception {",
          "177:   final OptionalData myData = new OptionalData();",
          "178:   myData.myString = Optional.ofNullable(\"abc\");",
          "182:     OptionalData.class);",
          "183:   assertEquals(myData.myString, deserializedMyData.myString);",
          "184:  }",
          "",
          "[Removed Lines]",
          "172:   final ObjectMapper objectMapper = newObjectMapper();",
          "174:   objectMapper",
          "175:     .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);",
          "180:   final String json = objectMapper.writeValueAsString(myData);",
          "181:   final OptionalData deserializedMyData = objectMapper.readValue(json,",
          "",
          "[Added Lines]",
          "172:      final ObjectMapper mapper = ObjectMapper.builder()",
          "174:              .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE)",
          "175:              .build();",
          "180:   final String json = mapper.writeValueAsString(myData);",
          "181:   final OptionalData deserializedMyData = mapper.readValue(json,",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: +\" ]\\n\"",
          "58: +\"}\"",
          "59:         );",
          "62:         try {",
          "63:             mapper.readValue(JSON, Bean1599.class);",
          "64:             fail(\"Should not pass\");",
          "",
          "[Removed Lines]",
          "60:         ObjectMapper mapper = new ObjectMapper();",
          "61:         mapper.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "60:         ObjectMapper mapper = ObjectMapper.builder()",
          "61:                 .enableDefaultTyping()",
          "62:                 .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     public void testJDKTypes1872() throws Exception",
          "103:     {",
          "107:         String json = aposToQuotes(String.format(\"{'@class':'%s','authorities':['java.util.ArrayList',[]]}\",",
          "108:                 Authentication1872.class.getName()));",
          "",
          "[Removed Lines]",
          "104:         ObjectMapper mapper = new ObjectMapper();",
          "105:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "105:         ObjectMapper mapper = ObjectMapper.builder()",
          "106:                 .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "107:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:         mapData.put(\"longAsField\", data);",
          "26:         ObjectMapper mapper = ObjectMapper.builder()",
          "27:                 .enable(SerializationFeature.INDENT_OUTPUT)",
          "28:                 .build();",
          "34:         String json = mapper.writeValueAsString(mapData);",
          "",
          "[Removed Lines]",
          "29:         StdTypeResolverBuilder resolver = new StdTypeResolverBuilder(JsonTypeInfo.Id.CLASS,",
          "30:                 JsonTypeInfo.As.PROPERTY, \"__t\");",
          "31:         mapper.setDefaultTyping(resolver);",
          "",
          "[Added Lines]",
          "26:         StdTypeResolverBuilder resolver = new StdTypeResolverBuilder(JsonTypeInfo.Id.CLASS,",
          "27:                 JsonTypeInfo.As.PROPERTY, \"__t\");",
          "30:                 .setDefaultTyping(resolver)",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     public void testWithIdNone() throws Exception",
          "26:     {",
          "30:         String json = mapper.writeValueAsString(new NoType());",
          "31:         assertEquals(\"{\\\"a\\\":3}\", json);",
          "",
          "[Removed Lines]",
          "27:         final ObjectMapper mapper = newObjectMapper();",
          "28:         mapper.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "27:         ObjectMapper mapper = ObjectMapper.builder()",
          "28:                 .enableDefaultTyping()",
          "29:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     public void testAtomicRefViaDefaultTyping() throws Exception",
          "62:     {",
          "65:         AtomicStringWrapper data = new AtomicStringWrapper(\"foo\");",
          "66:         String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(data);",
          "67:         AtomicStringWrapper result = mapper.readValue(json, AtomicStringWrapper.class);",
          "",
          "[Removed Lines]",
          "63:         ObjectMapper mapper = new ObjectMapper();",
          "64:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "63:         ObjectMapper mapper = ObjectMapper.builder()",
          "64:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "65:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     public void testInnerClassWithType() throws Exception",
          "130:     {",
          "133:         String json = mapper.writeValueAsString(new BeanWithAnon());",
          "134:         BeanWithAnon result = mapper.readValue(json, BeanWithAnon.class);",
          "135:         assertEquals(BeanWithAnon.class, result.getClass());",
          "",
          "[Removed Lines]",
          "131:         ObjectMapper mapper = new ObjectMapper();",
          "132:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "131:         ObjectMapper mapper = ObjectMapper.builder()",
          "132:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "133:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     public void testArrayTypingSimple() throws Exception",
          "45:     {",
          "48:         ArrayBean bean = new ArrayBean(new String[0]);",
          "51:         assertNotNull(result.values);",
          "52:         assertEquals(String[].class, result.values.getClass());",
          "53:     }",
          "",
          "[Removed Lines]",
          "46:         ObjectMapper m = new ObjectMapper();",
          "47:         m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);",
          "49:         String json = m.writeValueAsString(bean);",
          "50:         ArrayBean result = m.readValue(json, ArrayBean.class);",
          "",
          "[Added Lines]",
          "40:         ObjectMapper mapper = ObjectMapper.builder()",
          "41:                 .enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS)",
          "42:                 .build();",
          "44:         String json = mapper.writeValueAsString(bean);",
          "45:         ArrayBean result = mapper.readValue(json, ArrayBean.class);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     public void testArrayTypingNested() throws Exception",
          "57:     {",
          "60:         ArrayBean bean = new ArrayBean(new String[0][0]);",
          "63:         assertNotNull(result.values);",
          "64:         assertEquals(String[][].class, result.values.getClass());",
          "65:     }",
          "",
          "[Removed Lines]",
          "58:         ObjectMapper m = new ObjectMapper();",
          "59:         m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);",
          "61:         String json = m.writeValueAsString(bean);",
          "62:         ArrayBean result = m.readValue(json, ArrayBean.class);",
          "",
          "[Added Lines]",
          "53:         ObjectMapper mapper = ObjectMapper.builder()",
          "54:                 .enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS)",
          "55:                 .build();",
          "57:         String json = mapper.writeValueAsString(bean);",
          "58:         ArrayBean result = mapper.readValue(json, ArrayBean.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     public void testNodeInArray() throws Exception",
          "68:     {",
          "69:         JsonNode node = new ObjectMapper().readTree(\"{\\\"a\\\":3}\");",
          "73:         Object[] obs = new Object[] { node };",
          "76:         assertEquals(1, result.length);",
          "77:         Object ob = result[0];",
          "78:         assertTrue(ob instanceof JsonNode);",
          "79:     }",
          "81:     @SuppressWarnings(\"deprecation\")",
          "83:         Map<String, List<String>> outerMap = new HashMap<String, List<String>>();",
          "84:         outerMap.put(\"inner\", new ArrayList<String>());",
          "86:                 .build();",
          "90:         assertEquals(\"{}\", json);",
          "95:         Object[] obs = new Object[] { node };",
          "98:         assertEquals(\"{}\", result[0].toString());",
          "99:     }",
          "101:     public void testArraysOfArrays() throws Exception",
          "102:     {",
          "106:         Object value = new Object[][] { new Object[] {} };",
          "107:         String json = mapper.writeValueAsString(value);",
          "",
          "[Removed Lines]",
          "71:         ObjectMapper m = new ObjectMapper();",
          "72:         m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);",
          "74:         String json = m.writeValueAsString(obs);",
          "75:         Object[] result = m.readValue(json, Object[].class);",
          "82:     public void testNodeInEmptyArray() throws Exception {",
          "85:         ObjectMapper m = ObjectMapper.builder().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)",
          "87:         JsonNode tree = m.convertValue(outerMap, JsonNode.class);",
          "89:         String json = m.writeValueAsString(tree);",
          "92:         JsonNode node = new ObjectMapper().readTree(\"{\\\"a\\\":[]}\");",
          "94:         m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);",
          "96:         json = m.writeValueAsString(obs);",
          "97:         Object[] result = m.readValue(json, Object[].class);",
          "103:         ObjectMapper mapper = new ObjectMapper();",
          "104:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "66:         ObjectMapper mapper = ObjectMapper.builder()",
          "67:                 .enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT)",
          "68:                 .build();",
          "70:         String json = mapper.writeValueAsString(obs);",
          "71:         Object[] result = mapper.readValue(json, Object[].class);",
          "78:     public void testNodeInEmptyArray() throws Exception",
          "79:     {",
          "82:         ObjectMapper vanillaMapper = ObjectMapper.builder().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)",
          "84:         JsonNode tree = vanillaMapper.convertValue(outerMap, JsonNode.class);",
          "86:         String json = vanillaMapper.writeValueAsString(tree);",
          "89:         JsonNode node = vanillaMapper.readTree(\"{\\\"a\\\":[]}\");",
          "91:         ObjectMapper mapper = vanillaMapper.rebuild()",
          "92:                 .enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT)",
          "93:                 .build();",
          "95:         json = mapper.writeValueAsString(obs);",
          "96:         Object[] result = mapper.readValue(json, Object[].class);",
          "102:         ObjectMapper mapper = ObjectMapper.builder()",
          "103:                 .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "104:                 .build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     public void testArrayTypingForPrimitiveArrays() throws Exception",
          "116:     {",
          "128:     }",
          "130:     private void _testArrayTypingForPrimitiveArrays(ObjectMapper mapper, Object v) throws Exception {",
          "",
          "[Removed Lines]",
          "117:         ObjectMapper m = new ObjectMapper();",
          "118:         m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);",
          "119:         _testArrayTypingForPrimitiveArrays(m, new int[] { 1, 2, 3 });",
          "120:         _testArrayTypingForPrimitiveArrays(m, new long[] { 1, 2, 3 });",
          "121:         _testArrayTypingForPrimitiveArrays(m, new short[] { 1, 2, 3 });",
          "122:         _testArrayTypingForPrimitiveArrays(m, new double[] { 0.5, 5.5, -1.0 });",
          "123:         _testArrayTypingForPrimitiveArrays(m, new float[] { 0.5f, 5.5f, -1.0f });",
          "124:         _testArrayTypingForPrimitiveArrays(m, new boolean[] { true, false });",
          "125:         _testArrayTypingForPrimitiveArrays(m, new byte[] { 1, 2, 3 });",
          "127:         _testArrayTypingForPrimitiveArrays(m, new char[] { 'a', 'b' });",
          "",
          "[Added Lines]",
          "117:         ObjectMapper mapper = ObjectMapper.builder()",
          "118:                 .enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS)",
          "119:                 .build();",
          "120:         _testArrayTypingForPrimitiveArrays(mapper, new int[] { 1, 2, 3 });",
          "121:         _testArrayTypingForPrimitiveArrays(mapper, new long[] { 1, 2, 3 });",
          "122:         _testArrayTypingForPrimitiveArrays(mapper, new short[] { 1, 2, 3 });",
          "123:         _testArrayTypingForPrimitiveArrays(mapper, new double[] { 0.5, 5.5, -1.0 });",
          "124:         _testArrayTypingForPrimitiveArrays(mapper, new float[] { 0.5f, 5.5f, -1.0f });",
          "125:         _testArrayTypingForPrimitiveArrays(mapper, new boolean[] { true, false });",
          "126:         _testArrayTypingForPrimitiveArrays(mapper, new byte[] { 1, 2, 3 });",
          "128:         _testArrayTypingForPrimitiveArrays(mapper, new char[] { 'a', 'b' });",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         assertEquals(TimeUnit.SECONDS, result.timeUnit);",
          "47:         json = m.writeValueAsString(bean);",
          "48:         result = m.readValue(json, TimeUnitBean.class);",
          "",
          "[Removed Lines]",
          "45:         m = new ObjectMapper();",
          "46:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "45:         m = ObjectMapper.builder()",
          "46:                 .enableDefaultTyping()",
          "47:                 .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public void testSimpleEnumsInObjectArray() throws Exception",
          "54:     {",
          "60:         assertEquals(\"[[\\\"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\\\",\\\"A\\\"]]\", json);",
          "64:         assertEquals(1, value.length);",
          "65:         assertSame(TestEnum.A, value[0]);",
          "66:     }",
          "68:     public void testSimpleEnumsAsField() throws Exception",
          "69:     {",
          "73:         assertEquals(\"{\\\"value\\\":[\\\"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\\\",\\\"B\\\"]}\", json);",
          "75:         assertSame(TestEnum.B, holder.value);",
          "76:     }",
          "77: }",
          "",
          "[Removed Lines]",
          "55:         ObjectMapper m = new ObjectMapper();",
          "56:         m.enableDefaultTyping();",
          "59:         String json = m.writeValueAsString(new Object[] { TestEnum.A });",
          "63:         Object[] value = m.readValue(json, Object[].class);",
          "70:         ObjectMapper m = new ObjectMapper();",
          "71:         m.enableDefaultTyping();",
          "72:         String json = m.writeValueAsString(new EnumHolder(TestEnum.B));",
          "74:         EnumHolder holder = m.readValue(json, EnumHolder.class);",
          "",
          "[Added Lines]",
          "56:         ObjectMapper mapper = ObjectMapper.builder()",
          "57:                 .enableDefaultTyping()",
          "58:                 .build();",
          "61:         String json = mapper.writeValueAsString(new Object[] { TestEnum.A });",
          "65:         Object[] value = mapper.readValue(json, Object[].class);",
          "72:         ObjectMapper mapper = ObjectMapper.builder()",
          "73:                 .enableDefaultTyping()",
          "74:                 .build();",
          "75:         String json = mapper.writeValueAsString(new EnumHolder(TestEnum.B));",
          "77:         EnumHolder holder = mapper.readValue(json, EnumHolder.class);",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     public void testListOfLongs() throws Exception",
          "70:     {",
          "73:         ListOfLongs input = new ListOfLongs(1L, 2L, 3L);",
          "74:         String json = m.writeValueAsString(input);",
          "75:         assertEquals(\"{\\\"longs\\\":[\\\"java.util.ArrayList\\\",[1,2,3]]}\", json);",
          "",
          "[Removed Lines]",
          "71:         ObjectMapper m = new ObjectMapper();",
          "72:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "71:         ObjectMapper m = ObjectMapper.builder()",
          "72:                 .enableDefaultTyping()",
          "73:                 .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     public void testListOfNumbers() throws Exception",
          "92:     {",
          "95:         ListOfNumbers input = new ListOfNumbers(Long.valueOf(1L), Integer.valueOf(2), Double.valueOf(3.0));",
          "96:         String json = m.writeValueAsString(input);",
          "97:         assertEquals(\"{\\\"nums\\\":[\\\"java.util.ArrayList\\\",[[\\\"java.lang.Long\\\",1],2,3.0]]}\", json);",
          "",
          "[Removed Lines]",
          "93:         ObjectMapper m = new ObjectMapper();",
          "94:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "94:         ObjectMapper m = ObjectMapper.builder()",
          "95:                 .enableDefaultTyping()",
          "96:                 .build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:     public void testDateTypes() throws Exception",
          "108:     {",
          "111:         ObjectListBean input = new ObjectListBean();",
          "112:         List<Object> inputList = new ArrayList<Object>();",
          "113:         inputList.add(TimeZone.getTimeZone(\"EST\"));",
          "",
          "[Removed Lines]",
          "109:         ObjectMapper m = new ObjectMapper();",
          "110:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "111:         ObjectMapper m = ObjectMapper.builder()",
          "112:                 .enableDefaultTyping()",
          "113:                 .build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     public void testJackson628() throws Exception",
          "126:     {",
          "129:         ArrayList<Foo> data = new ArrayList<Foo>();",
          "130:         String json = mapper.writeValueAsString(data);",
          "131:         List<?> output = mapper.readValue(json, List.class);",
          "",
          "[Removed Lines]",
          "127:         ObjectMapper mapper = new ObjectMapper();",
          "128:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "130:         ObjectMapper mapper = ObjectMapper.builder()",
          "131:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "132:                 .build();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     public void testJackson667() throws Exception",
          "136:     {",
          "140:         String json = mapper.writeValueAsString(new SetBean(\"abc\"));",
          "141:         SetBean bean = mapper.readValue(json, SetBean.class);",
          "142:         assertNotNull(bean);",
          "",
          "[Removed Lines]",
          "137:         ObjectMapper mapper = new ObjectMapper();",
          "138:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL,",
          "139:                 JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "141:         ObjectMapper mapper = ObjectMapper.builder()",
          "142:                 .enableDefaultTyping(DefaultTyping.NON_FINAL,",
          "143:                         JsonTypeInfo.As.PROPERTY)",
          "144:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public void testJackson428() throws Exception",
          "73:     {",
          "76:         TypeResolverBuilder<?> serializerTyper = new DefaultTypeResolverBuilder(DefaultTyping.NON_FINAL,",
          "77:                 JsonTypeInfo.As.PROPERTY);",
          "83:         MapHolder holder = new MapHolder();",
          "",
          "[Removed Lines]",
          "74:         ObjectMapper serMapper = new ObjectMapper();",
          "80:         serMapper.setDefaultTyping(serializerTyper);",
          "",
          "[Added Lines]",
          "78:         ObjectMapper serMapper = ObjectMapper.builder()",
          "79:                 .setDefaultTyping(serializerTyper)",
          "80:                 .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         String json = serMapper.writeValueAsString(holder);",
          "92:         TypeResolverBuilder<?> deserializerTyper = new DefaultTypeResolverBuilder(DefaultTyping.NON_FINAL,",
          "93:                 JsonTypeInfo.As.PROPERTY);",
          "98:         MapHolder result = deserMapper.readValue(json, MapHolder.class);",
          "99:         assertNotNull(result);",
          "100:         Map<?,?> map = result.map;",
          "",
          "[Removed Lines]",
          "91:         ObjectMapper deserMapper = new ObjectMapper();",
          "96:         deserMapper.setDefaultTyping(deserializerTyper);",
          "",
          "[Added Lines]",
          "95:         ObjectMapper deserMapper = ObjectMapper.builder()",
          "96:                 .setDefaultTyping(deserializerTyper)",
          "97:                 .build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     public void testList() throws Exception",
          "125:     {",
          "128:         ItemList child = new ItemList();",
          "129:         child.value = \"I am child\";",
          "",
          "[Removed Lines]",
          "126:         final ObjectMapper mapper = new ObjectMapper();",
          "127:         mapper.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "126:         ObjectMapper mapper = ObjectMapper.builder()",
          "127:                 .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY)",
          "128:                 .build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:     public void testMap() throws Exception",
          "141:     {",
          "144:         ItemMap child = new ItemMap();",
          "145:         child.value = \"I am child\";",
          "",
          "[Removed Lines]",
          "142:         final ObjectMapper mapper = new ObjectMapper();",
          "143:         mapper.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "143:         ObjectMapper mapper = ObjectMapper.builder()",
          "144:                 .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY)",
          "145:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     public void testBeanAsObject() throws Exception",
          "91:     {",
          "97:         _verifySerializationAsMap(str);",
          "101:         assertNotNull(ob);",
          "102:         Object[] result = (Object[]) ob;",
          "103:         assertNotNull(result[0]);",
          "",
          "[Removed Lines]",
          "92:         ObjectMapper m = new ObjectMapper();",
          "93:         m.enableDefaultTyping();",
          "95:         String str = m.writeValueAsString(new Object[] { new StringBean(\"abc\") });",
          "100:         Object ob = m.readValue(str, Object[].class);",
          "",
          "[Added Lines]",
          "92:         ObjectMapper mapper = ObjectMapper.builder()",
          "93:                 .enableDefaultTyping()",
          "94:                 .build();",
          "96:         String str = mapper.writeValueAsString(new Object[] { new StringBean(\"abc\") });",
          "101:         Object ob = mapper.readValue(str, Object[].class);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     public void testBeanAsObjectUsingAsProperty() throws Exception",
          "110:     {",
          "119:         assertNotNull(result);",
          "120:         assertEquals(StringBean.class, result.getClass());",
          "121:         assertEquals(\"abc\", ((StringBean) result).name);",
          "",
          "[Removed Lines]",
          "111:         ObjectMapper m = new ObjectMapper();",
          "112:         m.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL,",
          "113:                 \".hype\");",
          "115:         String json = m.writeValueAsString(new StringBean(\"abc\"));",
          "118:         Object result = m.readValue(json, Object.class);",
          "",
          "[Added Lines]",
          "112:         ObjectMapper mapper = ObjectMapper.builder()",
          "113:                 .enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \".hype\")",
          "114:                 .build();",
          "116:         String json = mapper.writeValueAsString(new StringBean(\"abc\"));",
          "119:         Object result = mapper.readValue(json, Object.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         }",
          "145:         serial = m.writeValueAsString(input);",
          "146:         AbstractBean[] beans = m.readValue(serial, AbstractBean[].class);",
          "147:         assertEquals(1, beans.length);",
          "",
          "[Removed Lines]",
          "143:         m = new ObjectMapper();",
          "144:         m.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);",
          "",
          "[Added Lines]",
          "144:         m = ObjectMapper.builder()",
          "145:                 .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE)",
          "146:                 .build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:     public void testNonFinalBean() throws Exception",
          "157:     {",
          "161:         StringBean bean = new StringBean(\"x\");",
          "162:         assertEquals(\"{\\\"name\\\":\\\"x\\\"}\", m.writeValueAsString(bean));",
          "166:         assertEquals(\"[\\\"\"+StringBean.class.getName()+\"\\\",{\\\"name\\\":\\\"x\\\"}]\",",
          "167:             m.writeValueAsString(bean));",
          "168:     }",
          "170:     public void testNullValue() throws Exception",
          "171:     {",
          "174:         BeanHolder h = new BeanHolder();",
          "175:         String json = m.writeValueAsString(h);",
          "176:         assertNotNull(json);",
          "",
          "[Removed Lines]",
          "158:         ObjectMapper m = new ObjectMapper();",
          "160:         m.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);",
          "164:         m = new ObjectMapper();",
          "165:         m.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "172:         ObjectMapper m = new ObjectMapper();",
          "173:         m.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "161:         ObjectMapper m = ObjectMapper.builder()",
          "162:                 .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE)",
          "163:                 .build();",
          "167:         m = ObjectMapper.builder()",
          "168:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "169:                 .build();",
          "176:         ObjectMapper m = ObjectMapper.builder()",
          "177:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "178:                 .build();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "189:         assertEquals(\"[\\\"MAYBE\\\"]\", serializeAsString(input2));",
          "195:         String json = m.writeValueAsString(input);",
          "196:         assertEquals(\"[[\\\"\"+Choice.class.getName()+\"\\\",\\\"YES\\\"]]\", json);",
          "",
          "[Removed Lines]",
          "192:         ObjectMapper m = new ObjectMapper();",
          "193:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "197:         ObjectMapper m = ObjectMapper.builder()",
          "198:                 .enableDefaultTyping()",
          "199:                 .build();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:     {",
          "214:         EnumSet<Choice> set = EnumSet.of(Choice.NO);",
          "215:         Object[] input = new Object[] { set };",
          "218:         String json = m.writeValueAsString(input);",
          "219:         Object[] output = m.readValue(json, Object[].class);",
          "220:         assertEquals(1, output.length);",
          "",
          "[Removed Lines]",
          "216:         ObjectMapper m = new ObjectMapper();",
          "217:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "221:         ObjectMapper m = ObjectMapper.builder()",
          "222:                 .enableDefaultTyping()",
          "223:                 .build();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:         EnumMap<Choice,String> map = new EnumMap<Choice,String>(Choice.class);",
          "233:         map.put(Choice.NO, \"maybe\");",
          "234:         Object[] input = new Object[] { map };",
          "237:         String json = m.writeValueAsString(input);",
          "238:         Object[] output = m.readValue(json, Object[].class);",
          "239:         assertEquals(1, output.length);",
          "",
          "[Removed Lines]",
          "235:         ObjectMapper m = new ObjectMapper();",
          "236:         m.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "241:         ObjectMapper m = ObjectMapper.builder()",
          "242:                 .enableDefaultTyping()",
          "243:                 .build();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "248:     public void testJackson311() throws Exception",
          "249:     {",
          "252:         String json = mapper.writeValueAsString(new PolymorphicType(\"hello\", 2));",
          "253:         PolymorphicType value = mapper.readValue(json, PolymorphicType.class);",
          "254:         assertEquals(\"hello\", value.foo);",
          "",
          "[Removed Lines]",
          "250:         ObjectMapper mapper = new ObjectMapper();",
          "251:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "257:         ObjectMapper mapper = ObjectMapper.builder()",
          "258:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "259:                 .build();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "259:     public void testTokenBuffer() throws Exception",
          "260:     {",
          "265:         TokenBuffer buf = TokenBuffer.forGeneration();",
          "266:         buf.writeStartObject();",
          "",
          "[Removed Lines]",
          "261:         ObjectMapper mapper = new ObjectMapper();",
          "262:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "269:         ObjectMapper mapper = ObjectMapper.builder()",
          "270:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "271:                 .build();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311:         buf.close();",
          "312:     }",
          "317:     public void testIssue352() throws Exception",
          "318:     {",
          "321:         DiscussBean d1 = new DiscussBean();",
          "322:         d1.subject = \"mouse\";",
          "323:         d1.weight=88;",
          "",
          "[Removed Lines]",
          "319:         ObjectMapper mapper = new ObjectMapper();",
          "320:         mapper.enableDefaultTyping (DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "324:         ObjectMapper mapper = ObjectMapper.builder()",
          "325:                 .enableDefaultTyping (DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY)",
          "326:                 .build();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335:     public void testFeature432() throws Exception",
          "336:     {",
          "339:         String json = mapper.writeValueAsString(new BeanHolder(new StringBean(\"punny\")));",
          "340:         assertEquals(\"{\\\"bean\\\":{\\\"*CLASS*\\\":\\\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\\\",\\\"name\\\":\\\"punny\\\"}}\", json);",
          "341:     }",
          "343:     public void testNoGoWithExternalProperty() throws Exception",
          "344:     {",
          "346:         try {",
          "349:             fail(\"Should not have passed\");",
          "350:         } catch (IllegalArgumentException e) {",
          "351:             verifyException(e, \"Cannot use includeAs of EXTERNAL_PROPERTY\");",
          "",
          "[Removed Lines]",
          "337:         ObjectMapper mapper = new ObjectMapper();",
          "338:         mapper.enableDefaultTypingAsProperty(DefaultTyping.OBJECT_AND_NON_CONCRETE, \"*CLASS*\");",
          "345:         ObjectMapper mapper = new ObjectMapper();",
          "347:             mapper.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT,",
          "348:                     JsonTypeInfo.As.EXTERNAL_PROPERTY);",
          "",
          "[Added Lines]",
          "343:         ObjectMapper mapper = ObjectMapper.builder()",
          "344:                 .enableDefaultTypingAsProperty(DefaultTyping.OBJECT_AND_NON_CONCRETE, \"*CLASS*\")",
          "345:                 .build();",
          "354:                     .enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT,",
          "355:                     JsonTypeInfo.As.EXTERNAL_PROPERTY)",
          "356:                     .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForScalars.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     private final ObjectMapper DEFAULT_TYPING_MAPPER = ObjectMapper.builder()",
          "26:                     .enableDefaultTyping()",
          "27:                     .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     public void testNumericScalars() throws Exception",
          "32:     {",
          "41:     }",
          "43:     public void testDateScalars() throws Exception",
          "44:     {",
          "48:         long ts = 12345678L;",
          "49:         assertEquals(\"[[\\\"java.util.Date\\\",\"+ts+\"]]\",",
          "53:         Calendar c = Calendar.getInstance();",
          "54:         c.setTimeInMillis(ts);",
          "56:         assertEquals(\"[[\\\"\"+c.getClass().getName()+\"\\\",\"+ts+\"]]\", json);",
          "59:         assertEquals(1, result.length);",
          "60:         assertTrue(result[0] instanceof Calendar);",
          "61:         assertEquals(ts, ((Calendar) result[0]).getTimeInMillis());",
          "",
          "[Removed Lines]",
          "33:         ObjectMapper m = new ObjectMapper();",
          "34:         m.enableDefaultTyping();",
          "37:         assertEquals(\"[123]\", m.writeValueAsString(new Object[] { Integer.valueOf(123) }));",
          "38:         assertEquals(\"[[\\\"java.lang.Long\\\",37]]\", m.writeValueAsString(new Object[] { Long.valueOf(37) }));",
          "39:         assertEquals(\"[0.25]\", m.writeValueAsString(new Object[] { Double.valueOf(0.25) }));",
          "40:         assertEquals(\"[[\\\"java.lang.Float\\\",0.5]]\", m.writeValueAsString(new Object[] { Float.valueOf(0.5f) }));",
          "45:         ObjectMapper m = new ObjectMapper();",
          "46:         m.enableDefaultTyping();",
          "50:                 m.writeValueAsString(new Object[] { new Date(ts) }));",
          "55:         String json = m.writeValueAsString(new Object[] { c });",
          "58:         Object[] result = m.readValue(json, Object[].class);",
          "",
          "[Added Lines]",
          "38:         assertEquals(\"[123]\", DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { Integer.valueOf(123) }));",
          "39:         assertEquals(\"[[\\\"java.lang.Long\\\",37]]\", DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { Long.valueOf(37) }));",
          "40:         assertEquals(\"[0.25]\", DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { Double.valueOf(0.25) }));",
          "41:         assertEquals(\"[[\\\"java.lang.Float\\\",0.5]]\", DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { Float.valueOf(0.5f) }));",
          "48:                 DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { new Date(ts) }));",
          "53:         String json = DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { c });",
          "56:         Object[] result = DEFAULT_TYPING_MAPPER.readValue(json, Object[].class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     public void testMiscScalars() throws Exception",
          "65:     {",
          "72:     }",
          "",
          "[Removed Lines]",
          "66:         ObjectMapper m = new ObjectMapper();",
          "67:         m.enableDefaultTyping();",
          "70:         assertEquals(\"[\\\"abc\\\"]\", m.writeValueAsString(new Object[] { \"abc\" }));",
          "71:         assertEquals(\"[true,null,false]\", m.writeValueAsString(new Boolean[] { true, null, false }));",
          "",
          "[Added Lines]",
          "65:         assertEquals(\"[\\\"abc\\\"]\", DEFAULT_TYPING_MAPPER.writeValueAsString(new Object[] { \"abc\" }));",
          "66:         assertEquals(\"[true,null,false]\", DEFAULT_TYPING_MAPPER.writeValueAsString(new Boolean[] { true, null, false }));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:     public void testScalarArrays() throws Exception",
          "79:     {",
          "82:         Object[] input = new Object[] {",
          "83:                 \"abc\", new Date(1234567), null, Integer.valueOf(456)",
          "84:         };",
          "86:         assertEquals(\"[\\\"abc\\\",[\\\"java.util.Date\\\",1234567],null,456]\", json);",
          "90:         assertArrayEquals(input, output);",
          "91:     }",
          "96:     public void test417() throws Exception",
          "97:     {",
          "100:         Jackson417Bean input = new Jackson417Bean();",
          "103:         assertEquals(input.foo, result.foo);",
          "104:         assertEquals(input.bar, result.bar);",
          "105:     }",
          "",
          "[Removed Lines]",
          "80:         ObjectMapper m = new ObjectMapper();",
          "81:         m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);",
          "85:         String json = m.writeValueAsString(input);",
          "89:         Object[] output = m.readValue(json, Object[].class);",
          "98:         ObjectMapper m = new ObjectMapper();",
          "99:         m.enableDefaultTyping();",
          "101:         String json = m.writeValueAsString(input);",
          "102:         Jackson417Bean result = m.readValue(json, Jackson417Bean.class);",
          "",
          "[Added Lines]",
          "75:         ObjectMapper mapper = ObjectMapper.builder()",
          "76:                 .enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT)",
          "77:                 .build();",
          "81:         String json = mapper.writeValueAsString(input);",
          "85:         Object[] output = mapper.readValue(json, Object[].class);",
          "93:         String json = DEFAULT_TYPING_MAPPER.writeValueAsString(input);",
          "94:         Jackson417Bean result = DEFAULT_TYPING_MAPPER.readValue(json, Jackson417Bean.class);",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForTreeNodes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     public void testValueAsStringWithDefaultTyping() throws Exception",
          "27:     {",
          "28:         Foo foo = new Foo(\"baz\");",
          "",
          "[Removed Lines]",
          "21:     private final ObjectMapper DEFAULT_MAPPER = new ObjectMapper();",
          "22:     {",
          "23:         DEFAULT_MAPPER.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "24:     }",
          "",
          "[Added Lines]",
          "21:     private final ObjectMapper DEFAULT_MAPPER = ObjectMapper.builder()",
          "22:             .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "23:             .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultWithCreators.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     public void testWithCreators() throws Exception",
          "68:     {",
          "71:         UrlJob input = new UrlJob(123L, \"http://foo\", 3);",
          "72:         String json = mapper.writeValueAsString(input);",
          "73:         assertNotNull(json);",
          "",
          "[Removed Lines]",
          "69:         ObjectMapper mapper = new ObjectMapper();",
          "70:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "69:         ObjectMapper mapper = ObjectMapper.builder()",
          "70:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "71:                 .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     public void testWithCreatorAndJsonValue() throws Exception",
          "85:     {",
          "86:         final byte[] BYTES = new byte[] { 1, 2, 3, 4, 5 };",
          "89:         String json = mapper.writeValueAsString(new Bean1385Wrapper(",
          "90:                 new Bean1385(BYTES)",
          "91:         ));",
          "",
          "[Removed Lines]",
          "87:         ObjectMapper mapper = new ObjectMapper();",
          "88:         mapper.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "88:         ObjectMapper mapper = ObjectMapper.builder()",
          "89:                 .enableDefaultTyping()",
          "90:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         mapper = ObjectMapper.builder()",
          "252:             .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)",
          "253:             .build();",
          "255:         json = mapper.writeValueAsString(new EmptyNonFinal());",
          "256:         assertEquals(\"[\\\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\\\",{}]\", json);",
          "257:     }",
          "260:     public void testErrorMessage() throws Exception {",
          "261:         ObjectMapper mapper = new ObjectMapper();",
          "262:         try {",
          "",
          "[Removed Lines]",
          "254:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "253:             .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     public void testInArray() throws Exception",
          "152:     {",
          "158:         Animal[] animals = new Animal[] { new Cat(\"Miuku\", \"white\"), new Dog(\"Murre\", 9) };",
          "159:         Map<String,Object> map = new HashMap<String,Object>();",
          "",
          "[Removed Lines]",
          "154:         ObjectMapper m = new ObjectMapper();",
          "156:         m.disableDefaultTyping();",
          "",
          "[Added Lines]",
          "154:         ObjectMapper m = ObjectMapper.builder()",
          "156:                 .disableDefaultTyping()",
          "157:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     {",
          "162:         ObjectMapper om = objectMapperBuilder()",
          "163:                 .enable( SerializationFeature.INDENT_OUTPUT)",
          "164:                 .changeDefaultPropertyInclusion(incl -> incl.withValueInclusion(JsonInclude.Include.NON_NULL))",
          "165:                 .build();",
          "168:         MyClass mc = new MyClass();",
          "",
          "[Removed Lines]",
          "166:         om.enableDefaultTyping( DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY );",
          "",
          "[Added Lines]",
          "164:                 .enableDefaultTyping( DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY)",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java||src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java -> src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     {",
          "121:         final String TEST_INSTANCE_SERIALIZED =",
          "122:                 \"{\\\"mapProperty\\\":[\\\"java.util.HashMap\\\",{\\\"Compound|Key\\\":\\\"Value\\\"}]}\";",
          "125:         TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);",
          "126:         assertEquals(1, testInstance.mapProperty.size());",
          "127:         Object key = testInstance.mapProperty.keySet().iterator().next();",
          "",
          "[Removed Lines]",
          "123:         ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "123:         ObjectMapper mapper = ObjectMapper.builder()",
          "124:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "125:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java||src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java -> src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     public void testArrayWithDefaultTyping() throws Exception",
          "178:     {",
          "182:         JsonNode array = mapper.readTree(\"[ 1, 2 ]\");",
          "183:         assertTrue(array.isArray());",
          "184:         assertEquals(2, array.size());",
          "186:         JsonNode obj = mapper.readTree(\"{ \\\"a\\\" : 2 }\");",
          "187:         assertTrue(obj.isObject());",
          "188:         assertEquals(1, obj.size());",
          "",
          "[Removed Lines]",
          "179:         ObjectMapper mapper = new ObjectMapper()",
          "180:             .enableDefaultTyping();",
          "",
          "[Added Lines]",
          "179:         ObjectMapper mapper = ObjectMapper.builder()",
          "180:             .enableDefaultTyping()",
          "181:             .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java||src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java -> src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     }",
          "70:     public void testValueAsStringWithDefaultTyping() throws Exception {",
          "74:         Foo foo = new Foo(\"baz\");",
          "75:         String json = mapper.writeValueAsString(foo);",
          "",
          "[Removed Lines]",
          "71:         final ObjectMapper mapper = new ObjectMapper();",
          "72:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "71:         ObjectMapper mapper = ObjectMapper.builder()",
          "72:                 .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "73:                 .build();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     {",
          "83:         final String CLASS = Foo.class.getName();",
          "88:         String json = \"{\\\"@class\\\":\\\"\"+CLASS+\"\\\",\\\"bar\\\":\\\"baz\\\"}\";",
          "89:         JsonNode jsonNode = mapper.readTree(json);",
          "90:         assertEquals(jsonNode.get(\"bar\").textValue(), \"baz\");",
          "",
          "[Removed Lines]",
          "85:         final ObjectMapper mapper = new ObjectMapper();",
          "86:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL,",
          "87:                 JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "85:         ObjectMapper mapper = ObjectMapper.builder()",
          "86:                 .enableDefaultTyping(DefaultTyping.NON_FINAL,",
          "87:                         JsonTypeInfo.As.PROPERTY)",
          "88:                 .build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);",
          "98:     }",
          "104:         Foo foo = new Foo(\"baz\");",
          "105:         JsonNode jsonNode = mapper.valueToTree(foo);",
          "106:         assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);",
          "",
          "[Removed Lines]",
          "100:     public void testValueToTreeWithDefaultTyping() throws Exception {",
          "101:         final ObjectMapper mapper = new ObjectMapper();",
          "102:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "",
          "[Added Lines]",
          "101:     public void testValueToTreeWithDefaultTyping() throws Exception",
          "102:     {",
          "103:         ObjectMapper mapper = ObjectMapper.builder()",
          "104:                 .enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)",
          "105:                 .build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:         SimpleModule testModule = new SimpleModule(\"MyModule\", new Version(1, 0, 0, null, \"TEST\", \"TEST\"));",
          "112:         testModule.addDeserializer(SavedCookie.class, new SavedCookieDeserializer());",
          "113:         ObjectMapper mapper = ObjectMapper.builder()",
          "114:                 .addModule(testModule)",
          "115:                 .build();",
          "117:         SavedCookie savedCookie = new SavedCookie(\"key\", \"v\");",
          "118:         String json = mapper.writeValueAsString(savedCookie);",
          "119:         SavedCookie out = mapper.readerFor(SavedCookie.class).readValue(json);",
          "",
          "[Removed Lines]",
          "116:         mapper.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\");",
          "",
          "[Added Lines]",
          "116:                 .enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\")",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java||src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java -> src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     {",
          "140:         final ObjectMapper mapper = ObjectMapper.builder()",
          "141:                 .enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)",
          "142:                 .build();",
          "145:         String INPUT = aposToQuotes(",
          "146: \"{\\n\"+",
          "",
          "[Removed Lines]",
          "143:         mapper.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);",
          "",
          "[Added Lines]",
          "142:                 .enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE)",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java||src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java -> src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     static class TestD extends AbstractEntity { }",
          "32:     public void testDeserialize() throws Exception {",
          "33:         TestA a = new TestA();",
          "34:         a.oidString = \"oidA\";",
          "",
          "[Removed Lines]",
          "27:     private final ObjectMapper DEF_TYPING_MAPPER = new ObjectMapper();",
          "28:     {",
          "29:         DEF_TYPING_MAPPER.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "30:     }",
          "",
          "[Added Lines]",
          "27:     private final ObjectMapper DEF_TYPING_MAPPER = ObjectMapper.builder()",
          "28:             .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "29:             .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java||src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java -> src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         myList.add(two);",
          "60:         ListWrapper<BaseInterfaceImpl> result;",
          "64:         assertNotNull(result);",
          "",
          "[Removed Lines]",
          "55:         ObjectMapper om = new ObjectMapper();",
          "56:         om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\");",
          "59:         String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList);",
          "62:         result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { });",
          "",
          "[Added Lines]",
          "55:         ObjectMapper mapper = ObjectMapper.builder()",
          "56:                 .enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\")",
          "57:                 .build();",
          "60:         String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(myList);",
          "63:         result = mapper.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { });",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java||src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java -> src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     public void testIssue811() throws Exception",
          "132:     {",
          "133:         ObjectMapper om = ObjectMapper.builder()",
          "134:                 .enable(SerializationFeature.WRITE_ENUMS_USING_INDEX,",
          "135:                         SerializationFeature.INDENT_OUTPUT)",
          "136:                 .build();",
          "139:         Process p = new Process();",
          "140:         Scope s = new Scope(p, null);",
          "141:         FaultHandler fh = new FaultHandler(p);",
          "",
          "[Removed Lines]",
          "137:         om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\");",
          "",
          "[Added Lines]",
          "134:                 .enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\")",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java||src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java -> src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     public void testPolyCustomKeySerializer() throws Exception",
          "34:     {",
          "35:         ObjectMapper mapper = ObjectMapper.builder()",
          "36:                 .addModule(new SimpleModule(\"keySerializerModule\")",
          "37:                         .addKeySerializer(CustomKey.class, new CustomKeySerializer()))",
          "38:                 .build();",
          "40:         Map<CustomKey, String> map = new HashMap<CustomKey, String>();",
          "41:         CustomKey key = new CustomKey();",
          "42:         key.a = \"foo\";",
          "",
          "[Removed Lines]",
          "39:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "36:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java||src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java -> src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     public void testUnWrappedMapWithDefaultType() throws Exception{",
          "210:         SimpleModule mod = new SimpleModule(\"test\");",
          "211:         mod.addKeySerializer(ABC.class, new ABCKeySerializer());",
          "215:         TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(DefaultTyping.NON_FINAL,",
          "216:                 JsonTypeInfo.As.PROPERTY, JsonTypeInfo.Id.NAME, null)",
          "217:             .typeIdVisibility(true);",
          "220:         Map<ABC,String> stuff = new HashMap<ABC,String>();",
          "221:         stuff.put(ABC.B, \"bar\");",
          "",
          "[Removed Lines]",
          "212:         ObjectMapper mapper = ObjectMapper.builder()",
          "213:                 .addModule(mod)",
          "214:                 .build();",
          "218:         mapper.setDefaultTyping(typer);",
          "",
          "[Added Lines]",
          "215:         ObjectMapper mapper = ObjectMapper.builder()",
          "216:                 .addModule(mod)",
          "217:                 .setDefaultTyping(typer)",
          "218:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java||src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java -> src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:         assertEquals(aposToQuotes(\"[{'answer':42}]\"), json);",
          "189:         json = mapper.writeValueAsString(input);",
          "190:         assertEquals(aposToQuotes(\"['\"+StringIntMapEntry.class.getName()+\"',{'answer':42}]\"),",
          "191:                 json);",
          "194:     public void testMapEntryWrapper() throws IOException",
          "195:     {",
          "",
          "[Removed Lines]",
          "188:         ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "192:     }",
          "",
          "[Added Lines]",
          "188:         ObjectMapper mapper = ObjectMapper.builder()",
          "189:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "190:                 .build();",
          "194:     }",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java||src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java -> src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:         assertEquals(aposToQuotes(\"{'list':['a','b','c']}\"), json);",
          "278:         json = mapper.writeValueAsString(w);",
          "279:         assertEquals(aposToQuotes(String.format(\"['%s',{'list':['%s',['a','b','c']]}]\",",
          "280:                 w.getClass().getName(), w.list.getClass().getName())), json);",
          "",
          "[Removed Lines]",
          "276:         ObjectMapper mapper = new ObjectMapper();",
          "277:         mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "",
          "[Added Lines]",
          "276:         final ObjectMapper mapper = ObjectMapper.builder()",
          "277:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "278:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java||src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java -> src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     public void testRecursive1658() throws Exception",
          "30:     {",
          "31:         Tree<String> t = new Tree<String>(Arrays.asList(\"hello\", \"world\"));",
          "34:         final TypeResolverBuilder<?> typer = new StdTypeResolverBuilder(JsonTypeInfo.Id.CLASS,",
          "35:                 JsonTypeInfo.As.PROPERTY, null);",
          "37:         String res = mapper.writeValueAsString(t);",
          "38:         Tree<?> tRead = mapper.readValue(res, Tree.class);",
          "39:         assertNotNull(tRead);",
          "",
          "[Removed Lines]",
          "32:         ObjectMapper mapper = new ObjectMapper();",
          "36:         mapper.setDefaultTyping(typer);",
          "",
          "[Added Lines]",
          "34:         ObjectMapper mapper = ObjectMapper.builder()",
          "35:                 .setDefaultTyping(typer)",
          "36:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java||src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java": [
          "File: src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java -> src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     public void testCollectionWithOverride() throws Exception",
          "22:     {",
          "24:             .enableDefaultTypingAsProperty(DefaultTyping.OBJECT_AND_NON_CONCRETE,",
          "26:         String json = mapper.writeValueAsString(new ListWrapper());",
          "27:         assertEquals(aposToQuotes(\"{'stuff':[]}\"), json);",
          "28:     }",
          "",
          "[Removed Lines]",
          "23:         final ObjectMapper mapper = new ObjectMapper()",
          "25:                     \"$type\");",
          "",
          "[Added Lines]",
          "23:         ObjectMapper mapper = ObjectMapper.builder()",
          "25:                     \"$type\")",
          "26:             .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java||src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java": [
          "File: src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java -> src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:     public void testHierarchy() throws IOException {",
          "176:         Fleet fleet = initVehicle();",
          "",
          "[Removed Lines]",
          "173:         ObjectMapper mapper = new ObjectMapper();",
          "174:         mapper.enableDefaultTyping();",
          "",
          "[Added Lines]",
          "173:         ObjectMapper mapper = ObjectMapper.builder()",
          "174:                 .enableDefaultTyping()",
          "175:                 .build();",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java||src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java": [
          "File: src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java -> src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     public void testSetterlessWithPolymorphic() throws Exception",
          "51:     {",
          "52:         Issue501Bean input = new Issue501Bean(\"a\", new Poly(13));",
          "60:         assertNotNull(output);",
          "62:         assertEquals(1, output.l.size());",
          "",
          "[Removed Lines]",
          "53:         ObjectMapper m = new ObjectMapper();",
          "54:         assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));",
          "55:         m.enableDefaultTyping(DefaultTyping.NON_FINAL);",
          "57:         String json = m.writerWithDefaultPrettyPrinter().writeValueAsString(input);",
          "59:         Issue501Bean output = m.readValue(json, Issue501Bean.class);",
          "",
          "[Added Lines]",
          "53:         ObjectMapper mapper = ObjectMapper.builder()",
          "54:                 .enableDefaultTyping(DefaultTyping.NON_FINAL)",
          "55:                 .build();",
          "56:         String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(input);",
          "58:         Issue501Bean output = mapper.readValue(json, Issue501Bean.class);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "755e3bc0cbea30de0102f6a88519a0c34d571bbd",
      "candidate_info": {
        "commit_hash": "755e3bc0cbea30de0102f6a88519a0c34d571bbd",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/755e3bc0cbea30de0102f6a88519a0c34d571bbd",
        "files": [
          "pom.xml",
          "release-notes/VERSION",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "src/test/java/org/springframework/jacksontest/GrantedAuthority.java"
        ],
        "message": "Fix #1872",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java||src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "src/test/java/org/springframework/jacksontest/GrantedAuthority.java||src/test/java/org/springframework/jacksontest/GrantedAuthority.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import com.fasterxml.jackson.databind.introspect.*;",
          "14: import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
          "15: import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator;",
          "17: import com.fasterxml.jackson.databind.util.ClassUtil;",
          "18: import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;",
          "",
          "[Removed Lines]",
          "16: import com.fasterxml.jackson.databind.util.ArrayBuilders;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java||src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java -> src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:                     String name = cls.getSimpleName();",
          "86:                     if (\"AbstractPointcutAdvisor\".equals(name)",
          "",
          "[Removed Lines]",
          "82:             if (full.startsWith(PREFIX_STRING)) {",
          "83:                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {",
          "",
          "[Added Lines]",
          "83:             if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {",
          "84:                 for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package com.fasterxml.jackson.databind.interop;",
          "3: import org.springframework.jacksontest.BogusApplicationContext;",
          "4: import org.springframework.jacksontest.BogusPointcutAdvisor;",
          "6: import com.fasterxml.jackson.annotation.JsonTypeInfo;",
          "7: import com.fasterxml.jackson.databind.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import java.util.*;",
          "7: import org.springframework.jacksontest.GrantedAuthority;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:                 include = JsonTypeInfo.As.WRAPPER_ARRAY)",
          "23:         public Object v;",
          "24:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     static class Authentication1872 {",
          "30:          public List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();",
          "31:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:     }",
          "97:     private void _testIllegalType(Class<?> nasty) throws Exception {",
          "98:         _testIllegalType(nasty.getName());",
          "99:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     public void testJDKTypes1872() throws Exception",
          "106:     {",
          "107:         ObjectMapper mapper = new ObjectMapper();",
          "108:         mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);",
          "110:         String json = aposToQuotes(String.format(\"{'@class':'%s','authorities':['java.util.ArrayList',[]]}\",",
          "111:                 Authentication1872.class.getName()));",
          "112:         Authentication1872 result = mapper.readValue(json, Authentication1872.class);",
          "113:         assertNotNull(result);",
          "114:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/springframework/jacksontest/GrantedAuthority.java||src/test/java/org/springframework/jacksontest/GrantedAuthority.java": [
          "File: src/test/java/org/springframework/jacksontest/GrantedAuthority.java -> src/test/java/org/springframework/jacksontest/GrantedAuthority.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.springframework.jacksontest;",
          "3: public interface GrantedAuthority {",
          "5: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4e8de59a4739273d5692d029f15986bb57dd273",
      "candidate_info": {
        "commit_hash": "f4e8de59a4739273d5692d029f15986bb57dd273",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/f4e8de59a4739273d5692d029f15986bb57dd273",
        "files": [
          "pom.xml",
          "release-notes/VERSION",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
        ],
        "message": "Prepare for 2.7.9.1",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };",
          "41:     private final static Class<?>[] NO_VIEWS = new Class<?>[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;",
          "48:     static {",
          "49:         Set<String> s = new HashSet<String>();",
          "52:         s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");",
          "53:         s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
          "54:         s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
          "55:         s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");",
          "56:         s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
          "57:         s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
          "58:         s.add(\"org.springframework.beans.factory.ObjectFactory\");",
          "59:         s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
          "60:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "61:     }",
          "66:     protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "846:     {",
          "858:         }",
          "859:     }",
          "860: }",
          "",
          "[Removed Lines]",
          "849:         Class<?> raw = type.getRawClass();",
          "850:         String name = raw.getSimpleName();",
          "852:         if (\"TemplatesImpl\".equals(name)) { // [databind#1599]",
          "853:             if (raw.getName().startsWith(\"com.sun.org.apache.xalan\")) {",
          "854:                 throw JsonMappingException.from(ctxt,",
          "855:                         String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\",",
          "856:                                 name));",
          "857:             }",
          "",
          "[Added Lines]",
          "874:         String full = type.getRawClass().getName();",
          "876:         if (_cfgIllegalClassNames.contains(full)) {",
          "877:             throw JsonMappingException.from(ctxt,",
          "878:                     String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f031f27a31625d07922bdd090664c69544200a5d",
      "candidate_info": {
        "commit_hash": "f031f27a31625d07922bdd090664c69544200a5d",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/f031f27a31625d07922bdd090664c69544200a5d",
        "files": [
          "release-notes/VERSION",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ],
        "message": "Fix 1/3 of #1855",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "69:         s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "70:         s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "72:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "73:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");",
          "73:         s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     public void testJDKTypes1737() throws Exception",
          "60:     {",
          "63:     }",
          "",
          "[Removed Lines]",
          "61:         _testTypes1737(java.util.logging.FileHandler.class);",
          "62:         _testTypes1737(java.rmi.server.UnicastRemoteObject.class);",
          "",
          "[Added Lines]",
          "61:         _testIllegalType(java.util.logging.FileHandler.class);",
          "62:         _testIllegalType(java.rmi.server.UnicastRemoteObject.class);",
          "63:     }",
          "66:     public void testJDKTypes1855() throws Exception",
          "67:     {",
          "69:         _testIllegalType(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     public void testSpringTypes1737() throws Exception",
          "71:     {",
          "74:     }",
          "76:     public void testC3P0Types1737() throws Exception",
          "77:     {",
          "80:     }",
          "85:     }",
          "88:     {",
          "",
          "[Removed Lines]",
          "72:         _testTypes1737(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "73:         _testTypes1737(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "78:         _testTypes1737(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "79:         _testTypes1737(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "83:     private void _testTypes1737(Class<?> nasty) throws Exception {",
          "84:         _testTypes1737(nasty.getName());",
          "87:     private void _testTypes1737(String clsName) throws Exception",
          "",
          "[Added Lines]",
          "79:         _testIllegalType(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "80:         _testIllegalType(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "85:         _testIllegalType(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "86:         _testIllegalType(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "90:     private void _testIllegalType(Class<?> nasty) throws Exception {",
          "91:         _testIllegalType(nasty.getName());",
          "94:     private void _testIllegalType(String clsName) throws Exception",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e865a7a4464da63ded9f4b1a2328ad85c9ded78b",
      "candidate_info": {
        "commit_hash": "e865a7a4464da63ded9f4b1a2328ad85c9ded78b",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/e865a7a4464da63ded9f4b1a2328ad85c9ded78b",
        "files": [
          "release-notes/VERSION",
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ],
        "message": "Fix #1737 (#1857)",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
          "62:         s.add(\"com.sun.rowset.JdbcRowSetImpl\");",
          "63:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "64:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         s.add(\"java.util.logging.FileHandler\");",
          "65:         s.add(\"java.rmi.server.UnicastRemoteObject\");",
          "67:         s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "68:         s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "69:         s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "70:         s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "",
          "---------------"
        ],
        "src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java||src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java": [
          "File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java -> src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package com.fasterxml.jackson.databind.interop;",
          "3: import com.fasterxml.jackson.databind.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import com.fasterxml.jackson.annotation.JsonTypeInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:         public int id;",
          "13:         public Object obj;",
          "14:     }",
          "17:     {",
          "18:         final String JSON = aposToQuotes(",
          "19:  \"{'id': 124,\\n\"",
          "21: +\"  {\\n\"",
          "22: +\"    'transletBytecodes' : [ 'AAIAZQ==' ],\\n\"",
          "23: +\"    'transletName' : 'a.b',\\n\"",
          "",
          "[Removed Lines]",
          "16:     public void testIssue1599() throws Exception",
          "20: +\" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\\n\"",
          "",
          "[Added Lines]",
          "17:     static class PolyWrapper {",
          "18:         @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,",
          "19:                 include = JsonTypeInfo.As.WRAPPER_ARRAY)",
          "20:         public Object v;",
          "21:     }",
          "29:     private final ObjectMapper MAPPER = objectMapper();",
          "33:     public void testXalanTypes1599() throws Exception",
          "35:         final String clsName = \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\";",
          "38: +\" 'obj':[ '\"+clsName+\"',\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:             mapper.readValue(JSON, Bean1599.class);",
          "33:             fail(\"Should not pass\");",
          "34:         } catch (JsonMappingException e) {",
          "38:         }",
          "39:     }",
          "40: }",
          "",
          "[Removed Lines]",
          "35:             verifyException(e, \"Illegal type\");",
          "36:             verifyException(e, \"to deserialize\");",
          "37:             verifyException(e, \"prevented for security reasons\");",
          "",
          "[Added Lines]",
          "53:             _verifySecurityException(e, clsName);",
          "54:         }",
          "55:     }",
          "59:     public void testJDKTypes1737() throws Exception",
          "60:     {",
          "61:         _testTypes1737(java.util.logging.FileHandler.class);",
          "62:         _testTypes1737(java.rmi.server.UnicastRemoteObject.class);",
          "63:     }",
          "70:     public void testSpringTypes1737() throws Exception",
          "71:     {",
          "72:         _testTypes1737(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "73:         _testTypes1737(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "74:     }",
          "76:     public void testC3P0Types1737() throws Exception",
          "77:     {",
          "78:         _testTypes1737(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "79:         _testTypes1737(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "80:     }",
          "83:     private void _testTypes1737(Class<?> nasty) throws Exception {",
          "84:         _testTypes1737(nasty.getName());",
          "85:     }",
          "87:     private void _testTypes1737(String clsName) throws Exception",
          "88:     {",
          "91:         String json = aposToQuotes(",
          "92:                 \"{'v':['\"+clsName+\"','/tmp/foobar.txt']}\"",
          "93:                 );",
          "94:         try {",
          "95:             MAPPER.readValue(json, PolyWrapper.class);",
          "96:             fail(\"Should not pass\");",
          "97:         } catch (JsonMappingException e) {",
          "98:             _verifySecurityException(e, clsName);",
          "99:         }",
          "100:     }",
          "102:     protected void _verifySecurityException(Throwable t, String clsName) throws Exception",
          "103:     {",
          "105:         _verifyException(t, JsonMappingException.class,",
          "106:             \"Illegal type\",",
          "107:             \"to deserialize\",",
          "108:             \"prevented for security reasons\");",
          "109:         verifyException(t, clsName);",
          "110:     }",
          "112:     protected void _verifyException(Throwable t, Class<?> expExcType,",
          "113:             String... patterns) throws Exception",
          "114:     {",
          "115:         Class<?> actExc = t.getClass();",
          "116:         if (!expExcType.isAssignableFrom(actExc)) {",
          "117:             fail(\"Expected Exception of type '\"+expExcType.getName()+\"', got '\"",
          "118:                     +actExc.getName()+\"', message: \"+t.getMessage());",
          "119:         }",
          "120:         for (String pattern : patterns) {",
          "121:             verifyException(t, pattern);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "978798382ceb72229e5036aa1442943933d6d171",
      "candidate_info": {
        "commit_hash": "978798382ceb72229e5036aa1442943933d6d171",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/978798382ceb72229e5036aa1442943933d6d171",
        "files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        ],
        "message": "Fix minor regression wrt patch for #1855",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java||src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:             BeanDescription beanDesc)",
          "914:         throws JsonMappingException",
          "915:     {",
          "917:     }",
          "918: }",
          "",
          "[Removed Lines]",
          "916:         SubTypeValidator.instance().validateSubType(ctxt, type);",
          "",
          "[Added Lines]",
          "916:         SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc);",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java||src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java -> src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import java.util.HashSet;",
          "5: import java.util.Set;",
          "7: import com.fasterxml.jackson.databind.DeserializationContext;",
          "8: import com.fasterxml.jackson.databind.JavaType;",
          "9: import com.fasterxml.jackson.databind.JsonMappingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import com.fasterxml.jackson.databind.BeanDescription;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     public static SubTypeValidator instance() { return instance; }",
          "68:     {",
          "",
          "[Removed Lines]",
          "67:     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
          "",
          "[Added Lines]",
          "68:     public void validateSubType(DeserializationContext ctxt, JavaType type,",
          "69:             BeanDescription beanDesc) throws JsonMappingException",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:             return;",
          "93:         } while (false);",
          "97:     }",
          "98: }",
          "",
          "[Removed Lines]",
          "95:         throw JsonMappingException.from(ctxt,",
          "96:                 String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));",
          "",
          "[Added Lines]",
          "97:         ctxt.reportBadTypeDefinition(beanDesc,",
          "98:                 \"Illegal type (%s) to deserialize: prevented for security reasons\", full);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2235894210c75f624a3d0cd60bfb0434a20a18bf",
      "candidate_info": {
        "commit_hash": "2235894210c75f624a3d0cd60bfb0434a20a18bf",
        "repo": "FasterXML/jackson-databind",
        "commit_url": "https://github.com/FasterXML/jackson-databind/commit/2235894210c75f624a3d0cd60bfb0434a20a18bf",
        "files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        ],
        "message": "Fix #1855",
        "before_after_code_files": [
          "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java||src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ],
          "candidate": [
            "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java||src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java -> src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;",
          "13: import com.fasterxml.jackson.databind.introspect.*;",
          "14: import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
          "15: import com.fasterxml.jackson.databind.util.ArrayBuilders;",
          "16: import com.fasterxml.jackson.databind.util.ClassUtil;",
          "17: import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     private final static Class<?>[] NO_VIEWS = new Class<?>[0];",
          "",
          "[Removed Lines]",
          "47:     protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;",
          "48:     static {",
          "49:         Set<String> s = new HashSet<String>();",
          "52:         s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");",
          "53:         s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
          "54:         s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
          "55:         s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");",
          "56:         s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
          "57:         s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
          "58:         s.add(\"org.springframework.beans.factory.ObjectFactory\");",
          "59:         s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
          "60:         s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
          "62:         s.add(\"com.sun.rowset.JdbcRowSetImpl\");",
          "64:         s.add(\"java.util.logging.FileHandler\");",
          "65:         s.add(\"java.rmi.server.UnicastRemoteObject\");",
          "67:         s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");",
          "68:         s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "69:         s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "70:         s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "72:         s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");",
          "73:         s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
          "74:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "75:     }",
          "80:     protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:             return null;",
          "180:         }",
          "184:         return buildBeanDeserializer(ctxt, type, beanDesc);",
          "185:     }",
          "",
          "[Removed Lines]",
          "182:         checkIllegalTypes(ctxt, type, beanDesc);",
          "",
          "[Added Lines]",
          "145:         _validateSubType(ctxt, type, beanDesc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "877:     }",
          "883:             BeanDescription beanDesc)",
          "884:         throws JsonMappingException",
          "885:     {",
          "894:     }",
          "895: }",
          "",
          "[Removed Lines]",
          "882:     protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,",
          "888:         String full = type.getRawClass().getName();",
          "890:         if (_cfgIllegalClassNames.contains(full)) {",
          "891:             throw JsonMappingException.from(ctxt,",
          "892:                     String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));",
          "893:         }",
          "",
          "[Added Lines]",
          "845:     protected void _validateSubType(DeserializationContext ctxt, JavaType type,",
          "849:         SubTypeValidator.instance().validateSubType(ctxt, type);",
          "",
          "---------------"
        ],
        "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java||src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java": [
          "File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java -> src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package com.fasterxml.jackson.databind.jsontype.impl;",
          "3: import java.util.Collections;",
          "4: import java.util.HashSet;",
          "5: import java.util.Set;",
          "7: import com.fasterxml.jackson.databind.DeserializationContext;",
          "8: import com.fasterxml.jackson.databind.JavaType;",
          "9: import com.fasterxml.jackson.databind.JsonMappingException;",
          "19: public class SubTypeValidator",
          "20: {",
          "21:     protected final static String PREFIX_STRING = \"org.springframework.\";",
          "26:     protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;",
          "27:     static {",
          "28:         Set<String> s = new HashSet<String>();",
          "31:         s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");",
          "32:         s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
          "33:         s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
          "34:         s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");",
          "35:         s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
          "36:         s.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
          "37:         s.add(\"org.springframework.beans.factory.ObjectFactory\");",
          "38:         s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
          "39:         s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
          "41:         s.add(\"com.sun.rowset.JdbcRowSetImpl\");",
          "43:         s.add(\"java.util.logging.FileHandler\");",
          "44:         s.add(\"java.rmi.server.UnicastRemoteObject\");",
          "47:         s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
          "48:         s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");",
          "49:         s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
          "51:         s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");",
          "52:         s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
          "53:         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);",
          "54:     }",
          "59:     protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;",
          "61:     private final static SubTypeValidator instance = new SubTypeValidator();",
          "63:     protected SubTypeValidator() { }",
          "65:     public static SubTypeValidator instance() { return instance; }",
          "67:     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException",
          "68:     {",
          "71:         final Class<?> raw = type.getRawClass();",
          "72:         String full = raw.getName();",
          "74:         do {",
          "75:             if (_cfgIllegalClassNames.contains(full)) {",
          "76:                 break;",
          "77:             }",
          "81:             if (full.startsWith(PREFIX_STRING)) {",
          "82:                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {",
          "83:                     String name = cls.getSimpleName();",
          "85:                     if (\"AbstractPointcutAdvisor\".equals(name)",
          "87:                             || \"AbstractApplicationContext.equals\".equals(name)) {",
          "88:                         break;",
          "89:                     }",
          "90:                 }",
          "91:             }",
          "92:             return;",
          "93:         } while (false);",
          "95:         throw JsonMappingException.from(ctxt,",
          "96:                 String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));",
          "97:     }",
          "98: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}