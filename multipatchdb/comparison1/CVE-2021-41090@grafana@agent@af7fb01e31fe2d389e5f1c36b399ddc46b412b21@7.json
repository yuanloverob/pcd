{
  "cve_id": "CVE-2021-41090",
  "cve_desc": "Grafana Agent is a telemetry collector for sending metrics, logs, and trace data to the opinionated Grafana observability stack. Prior to versions 0.20.1 and 0.21.2, inline secrets defined within a metrics instance config are exposed in plaintext over two endpoints: metrics instance configs defined in the base YAML file are exposed at `/-/config` and metrics instance configs defined for the scraping service are exposed at `/agent/api/v1/configs/:key`. Inline secrets will be exposed to anyone being able to reach these endpoints. If HTTPS with client authentication is not configured, these endpoints are accessible to unauthenticated users. Secrets found in these sections are used for delivering metrics to a Prometheus Remote Write system, authenticating against a system for discovering Prometheus targets, and authenticating against a system for collecting metrics. This does not apply for non-inlined secrets, such as `*_file` based secrets. This issue is patched in Grafana Agent versions 0.20.1 and 0.21.2. A few workarounds are available. Users who cannot upgrade should use non-inline secrets where possible. Users may also desire to restrict API access to Grafana Agent with some combination of restricting the network interfaces Grafana Agent listens on through `http_listen_address` in the `server` block, configuring Grafana Agent to use HTTPS with client authentication, and/or using firewall rules to restrict external access to Grafana Agent's API.",
  "repo": "grafana/agent",
  "patch_hash": "af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
  "patch_info": {
    "commit_hash": "af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
    "repo": "grafana/agent",
    "commit_url": "https://github.com/grafana/agent/commit/af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
    "files": [
      "CHANGELOG.md",
      "docs/configuration/integrations/node-exporter-config.md",
      "docs/configuration/integrations/process-exporter-config.md",
      "docs/getting-started/_index.md",
      "docs/operator/custom-resource-quickstart.md",
      "docs/operator/getting-started.md",
      "docs/upgrade-guide/_index.md",
      "pkg/operator/defaults.go",
      "production/README.md",
      "production/grafanacloud-install.sh",
      "production/kubernetes/agent-bare.yaml",
      "production/kubernetes/agent-loki.yaml",
      "production/kubernetes/agent-traces.yaml",
      "production/kubernetes/build/lib/version.libsonnet",
      "production/kubernetes/install-bare.sh",
      "production/tanka/grafana-agent/v1/main.libsonnet",
      "production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
    ],
    "message": "announce patch releases for cve-2021-41090 (#1152)",
    "before_after_code_files": [
      "pkg/operator/defaults.go||pkg/operator/defaults.go",
      "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
      "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
      "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
      "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
      "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
    ]
  },
  "patch_diff": {
    "pkg/operator/defaults.go||pkg/operator/defaults.go": [
      "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   \"v0.18.4\",",
      "16:   \"v0.19.0\",",
      "17:   \"v0.20.0\",",
      "18:   \"v0.21.0\",",
      "19:   \"v0.21.1\",",
      "22:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:   \"v0.20.1\",",
      "21:   \"v0.21.2\",",
      "",
      "---------------"
    ],
    "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
      "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: #",
      "51: # Global constants.",
      "52: #",
      "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
      "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
      "",
      "[Removed Lines]",
      "53: RELEASE_VERSION=\"0.21.1\"",
      "",
      "[Added Lines]",
      "53: RELEASE_VERSION=\"0.21.2\"",
      "",
      "---------------"
    ],
    "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
      "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 'grafana/agent:v0.21.1'",
      "",
      "[Added Lines]",
      "1: 'grafana/agent:v0.21.2'",
      "",
      "---------------"
    ],
    "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
      "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: check_installed curl",
      "26: check_installed envsubst",
      "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
      "30: NAMESPACE=${NAMESPACE:-default}",
      "",
      "[Removed Lines]",
      "28: MANIFEST_BRANCH=v0.21.1",
      "",
      "[Added Lines]",
      "28: MANIFEST_BRANCH=v0.21.2",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
      "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: (import './lib/traces.libsonnet') +",
      "16: {",
      "17:   _images:: {",
      "20:   },",
      "",
      "[Removed Lines]",
      "18:     agent: 'grafana/agent:v0.21.1',",
      "19:     agentctl: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "18:     agent: 'grafana/agent:v0.21.2',",
      "19:     agentctl: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
      "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:   local this = self,",
      "12:   _images:: {",
      "15:   },",
      "16:   _config:: {",
      "17:     name: name,",
      "",
      "[Removed Lines]",
      "13:     agent: 'grafana/agent:v0.21.1',",
      "14:     agentctl: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "13:     agent: 'grafana/agent:v0.21.2',",
      "14:     agentctl: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
      "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: ) {",
      "15:   local _config = {",
      "16:     api: error 'api must be set',",
      "18:     schedule: '*/5 * * * *',",
      "19:     configs: [],",
      "20:   } + config,",
      "",
      "[Removed Lines]",
      "17:     image: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "17:     image: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12859192f64c6fca1ebe4170663f228c9484538e",
      "candidate_info": {
        "commit_hash": "12859192f64c6fca1ebe4170663f228c9484538e",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/12859192f64c6fca1ebe4170663f228c9484538e",
        "files": [
          "CHANGELOG.md",
          "Makefile",
          "docs/developer/releasing.md",
          "docs/user/configuration/integrations/node-exporter-config.md",
          "docs/user/configuration/integrations/process-exporter-config.md",
          "docs/user/getting-started/_index.md",
          "docs/user/operator/custom-resource-quickstart.md",
          "docs/user/operator/getting-started.md",
          "docs/user/upgrade-guide/_index.md",
          "pkg/operator/defaults.go",
          "production/README.md",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "sync with release-v0.24 (#1569)\n\n* Prepare for v0.24.0-rc.0 (#1564)\n\n* prepare for v0.24.0-rc.0\n\n* CHANGELOG: fix release date of v0.23.0\n\n(cherry picked from commit 2e752933c097f1def28560fa057f3da016973125)\n\n* Makefile: support release candidate versions (#1566)\n\n$IMAGE_BRANCH_TAG must not be an empty string for building images. This\ndefaults $IMAGE_BRANCH_TAG for release candidates to be the same as\n$RELEASE_TAG.\n\nThis will redundantly cause the image to be tagged twice as\n$RELEASE_TAG, but will avoid build errors.\n\n(cherry picked from commit 56140bc6ca590432cee86ce647ed39c6bf48be12)\n\n* docs: add missing header for v0.24.0 in upgrade guide (#1568)\n\n(cherry picked from commit f49969f8f3ba13a75e9fb80b9b839330756000ca)",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   \"v0.21.2\",",
          "22:   \"v0.22.0\",",
          "23:   \"v0.23.0\",",
          "26:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:   \"v0.24.0-rc.0\",",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"0.23.0\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"0.24.0-rc.0\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.23.0'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.24.0-rc.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.23.0",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.24.0-rc.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.23.0',",
          "19:     agentctl: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.24.0-rc.0',",
          "19:     agentctl: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.23.0',",
          "15:     agentctl: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.24.0-rc.0',",
          "15:     agentctl: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8824cc5e7e10e35bac2076a2adebb5b1ea8a5d19",
      "candidate_info": {
        "commit_hash": "8824cc5e7e10e35bac2076a2adebb5b1ea8a5d19",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/8824cc5e7e10e35bac2076a2adebb5b1ea8a5d19",
        "files": [
          "CHANGELOG.md",
          "docs/user/configuration/integrations/node-exporter-config.md",
          "docs/user/configuration/integrations/process-exporter-config.md",
          "docs/user/operator/custom-resource-quickstart.md",
          "docs/user/operator/getting-started.md",
          "pkg/operator/defaults.go",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "prepare v0.25.0-rc.0 (#1766)",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   \"v0.24.0\",",
          "25:   \"v0.24.1\",",
          "26:   \"v0.24.2\",",
          "29:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   \"v0.25.0-rc.0\",",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.24.2'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.25.0-rc.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.24.2",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.25.0-rc.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.24.2',",
          "19:     agentctl: 'grafana/agentctl:v0.24.2',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.25.0-rc.0',",
          "19:     agentctl: 'grafana/agentctl:v0.25.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.24.2',",
          "15:     agentctl: 'grafana/agentctl:v0.24.2',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.25.0-rc.0',",
          "15:     agentctl: 'grafana/agentctl:v0.25.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.24.2',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.25.0-rc.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e752933c097f1def28560fa057f3da016973125",
      "candidate_info": {
        "commit_hash": "2e752933c097f1def28560fa057f3da016973125",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/2e752933c097f1def28560fa057f3da016973125",
        "files": [
          "CHANGELOG.md",
          "docs/developer/releasing.md",
          "docs/user/configuration/integrations/node-exporter-config.md",
          "docs/user/configuration/integrations/process-exporter-config.md",
          "docs/user/getting-started/_index.md",
          "docs/user/operator/custom-resource-quickstart.md",
          "docs/user/operator/getting-started.md",
          "pkg/operator/defaults.go",
          "production/README.md",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "Prepare for v0.24.0-rc.0 (#1564)\n\n* prepare for v0.24.0-rc.0\n\n* CHANGELOG: fix release date of v0.23.0",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   \"v0.21.2\",",
          "22:   \"v0.22.0\",",
          "23:   \"v0.23.0\",",
          "26:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:   \"v0.24.0-rc.0\",",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"0.23.0\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"0.24.0-rc.0\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.23.0'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.24.0-rc.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.23.0",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.24.0-rc.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.23.0',",
          "19:     agentctl: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.24.0-rc.0',",
          "19:     agentctl: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.23.0',",
          "15:     agentctl: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.24.0-rc.0',",
          "15:     agentctl: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22115e60df38ca482d59d25075c8533741764b95",
      "candidate_info": {
        "commit_hash": "22115e60df38ca482d59d25075c8533741764b95",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/22115e60df38ca482d59d25075c8533741764b95",
        "files": [
          ".github/workflows/markdown.links.config.json",
          "cmd/grafana-agent-crow/README.md",
          "cmd/grafana-agent-crow/main.go",
          "example/k3d/README.md",
          "example/k3d/assets/alert_firing.png",
          "example/k3d/assets/alerts.png",
          "example/k3d/assets/console_failure.png",
          "example/k3d/assets/order.png",
          "example/k3d/assets/order.uml",
          "example/k3d/assets/pending_alert.png",
          "example/k3d/assets/trigger_change.png",
          "example/k3d/lib/avalanche/main.libsonnet",
          "example/k3d/lib/crow/main.libsonnet",
          "example/k3d/lib/default/mixins.libsonnet",
          "example/k3d/lib/grafana/config.libsonnet",
          "example/k3d/lib/grafana/main.libsonnet",
          "example/k3d/lib/kube-state-metrics/main.libsonnet",
          "example/k3d/lib/node-exporter/main.libsonnet",
          "example/k3d/lib/prometheus/main.libsonnet",
          "example/k3d/scripts/smoke-test.bash",
          "example/k3d/smoke/main.jsonnet",
          "example/k3d/smoke/monitoring/main.jsonnet",
          "example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet",
          "example/k3d/smoke/spec.json",
          "pkg/crow/crow.go",
          "pkg/crow/samples.go",
          "production/grafana-agent-mixin/debugging.libsonnet",
          "production/tanka/grafana-agent/config.libsonnet",
          "production/tanka/grafana-agent/v1/README.md",
          "production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet",
          "production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet",
          "production/tanka/grafana-agent/v2/README.md",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet",
          "production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet",
          "production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet",
          "production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet",
          "production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "production/tanka/grafana-agent/v2/main.libsonnet"
        ],
        "message": "Automated smoke tests for metrics (#825)\n\n* poc smoke test automation\n\n* finish smoke test environment\n\n* debug logs\n\n* fix typo, sync immediately\n\n* add crow, add crow-related alerts\n\n* have v0 and v1 libs use v2 lib\n\n* basic cpu, memory tests\n\n* fix chaos_loop to stop generating replica -3 which will never exist\n\n* Add initial documentation for crow.\n\n* update comments\n\n* Add uml\n\n* Cleanup documentation\n\n* Reformate/move docs\n\n* Fix some verbiage\n\n* Fix doc checking\n\n* Update cmd/grafana-agent-crow/README.md\n\nCo-authored-by: Robert Fratto <robertfratto@gmail.com>\n\n* Small nits\n\n* Fix pathing in readme\n\nCo-authored-by: Matt Durham <mattdurham@ppog.org>",
        "before_after_code_files": [
          "cmd/grafana-agent-crow/main.go||cmd/grafana-agent-crow/main.go",
          "example/k3d/assets/order.uml||example/k3d/assets/order.uml",
          "example/k3d/lib/avalanche/main.libsonnet||example/k3d/lib/avalanche/main.libsonnet",
          "example/k3d/lib/crow/main.libsonnet||example/k3d/lib/crow/main.libsonnet",
          "example/k3d/lib/default/mixins.libsonnet||example/k3d/lib/default/mixins.libsonnet",
          "example/k3d/lib/grafana/config.libsonnet||example/k3d/lib/grafana/config.libsonnet",
          "example/k3d/lib/grafana/main.libsonnet||example/k3d/lib/grafana/main.libsonnet",
          "example/k3d/lib/kube-state-metrics/main.libsonnet||example/k3d/lib/kube-state-metrics/main.libsonnet",
          "example/k3d/lib/node-exporter/main.libsonnet||example/k3d/lib/node-exporter/main.libsonnet",
          "example/k3d/lib/prometheus/main.libsonnet||example/k3d/lib/prometheus/main.libsonnet",
          "example/k3d/scripts/smoke-test.bash||example/k3d/scripts/smoke-test.bash",
          "example/k3d/smoke/main.jsonnet||example/k3d/smoke/main.jsonnet",
          "example/k3d/smoke/monitoring/main.jsonnet||example/k3d/smoke/monitoring/main.jsonnet",
          "example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet||example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet",
          "pkg/crow/crow.go||pkg/crow/crow.go",
          "pkg/crow/samples.go||pkg/crow/samples.go",
          "production/grafana-agent-mixin/debugging.libsonnet||production/grafana-agent-mixin/debugging.libsonnet",
          "production/tanka/grafana-agent/config.libsonnet||production/tanka/grafana-agent/config.libsonnet",
          "production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet||production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet",
          "production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet||production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet||production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet",
          "production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet||production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet",
          "production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet||production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet",
          "production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet||production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet",
          "production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet||production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "production/tanka/grafana-agent/v2/main.libsonnet||production/tanka/grafana-agent/v2/main.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "cmd/grafana-agent-crow/main.go||cmd/grafana-agent-crow/main.go": [
          "File: cmd/grafana-agent-crow/main.go -> cmd/grafana-agent-crow/main.go"
        ],
        "example/k3d/assets/order.uml||example/k3d/assets/order.uml": [
          "File: example/k3d/assets/order.uml -> example/k3d/assets/order.uml",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @startuml",
          "2: Crow -> Crow: Crow Generates Metrics",
          "3: Agent -> Crow: Agent scrapes /metrics endpoint",
          "4: Agent -> Prometheus: Agent sends results to prometheus",
          "5: Crow -> Prometheus: Crow checks that metrics were written to prometheus",
          "6: Crow -> Crow: Crow updates success/failure metrics and serves those via /validate",
          "7: Agent -> Crow: Agent scrapes /validate",
          "8: Agent -> Prometheus: Agent sends validate metrics",
          "9: Prometheus -> Prometheus: Prometheus checks alerts",
          "10: @enduml",
          "",
          "---------------"
        ],
        "example/k3d/lib/avalanche/main.libsonnet||example/k3d/lib/avalanche/main.libsonnet": [
          "File: example/k3d/lib/avalanche/main.libsonnet -> example/k3d/lib/avalanche/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "3: local configMap = k.core.v1.configMap;",
          "4: local container = k.core.v1.container;",
          "5: local containerPort = k.core.v1.containerPort;",
          "6: local deployment = k.apps.v1.deployment;",
          "7: local pvc = k.core.v1.persistentVolumeClaim;",
          "8: local service = k.core.v1.service;",
          "9: local volumeMount = k.core.v1.volumeMount;",
          "10: local volume = k.core.v1.volume;",
          "12: {",
          "13:   new(name='avalanche', replicas=1, namespace='', config={}):: {",
          "14:     local this = self,",
          "16:     _config+:: {",
          "17:       image: 'quay.io/freshtracks.io/avalanche:latest',",
          "19:       metric_count: 500,",
          "20:       label_count: 10,",
          "21:       series_count: 10,",
          "22:       metricname_length: 5,",
          "23:       labelname_length: 5,",
          "24:       value_interval: 30,",
          "25:       series_interval: 30,",
          "26:       metric_interval: 120,",
          "27:     } + config,",
          "29:     container::",
          "30:       container.new(name, this._config.image) +",
          "31:       container.withPorts([",
          "32:         containerPort.newNamed(name='http', containerPort=9001),",
          "33:       ]) +",
          "34:       container.withArgsMixin([",
          "35:         '--metric-count=%d' % this._config.metric_count,",
          "36:         '--label-count=%d' % this._config.label_count,",
          "37:         '--series-count=%d' % this._config.series_count,",
          "38:         '--metricname-length=%d' % this._config.metricname_length,",
          "39:         '--labelname-length=%d' % this._config.labelname_length,",
          "40:         '--value-interval=%d' % this._config.value_interval,",
          "41:         '--series-interval=%d' % this._config.series_interval,",
          "42:         '--metric-interval=%d' % this._config.metric_interval,",
          "43:       ]),",
          "45:     deployment:",
          "46:       deployment.new(name, replicas, [self.container]) +",
          "47:       deployment.mixin.metadata.withNamespace(namespace),",
          "48:   },",
          "49: }",
          "",
          "---------------"
        ],
        "example/k3d/lib/crow/main.libsonnet||example/k3d/lib/crow/main.libsonnet": [
          "File: example/k3d/lib/crow/main.libsonnet -> example/k3d/lib/crow/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "3: local configMap = k.core.v1.configMap;",
          "4: local container = k.core.v1.container;",
          "5: local containerPort = k.core.v1.containerPort;",
          "6: local deployment = k.apps.v1.deployment;",
          "7: local pvc = k.core.v1.persistentVolumeClaim;",
          "8: local service = k.core.v1.service;",
          "9: local volumeMount = k.core.v1.volumeMount;",
          "10: local volume = k.core.v1.volume;",
          "12: {",
          "13:   new(name='crow', namespace='', config={}):: {",
          "14:     local this = self,",
          "16:     _config+:: {",
          "17:       image: 'grafana/agent-crow:latest',",
          "18:       args: {},",
          "19:     } + config,",
          "21:     container::",
          "22:       container.new(name, this._config.image) +",
          "23:       container.withPorts([",
          "24:         containerPort.newNamed(name='http-metrics', containerPort=80),",
          "25:       ]) +",
          "26:       container.withArgsMixin(k.util.mapToFlags(this._config.args)),",
          "28:     deployment:",
          "29:       deployment.new(name, 1, [self.container]) +",
          "30:       deployment.mixin.metadata.withNamespace(namespace),",
          "31:   },",
          "32: }",
          "",
          "---------------"
        ],
        "example/k3d/lib/default/mixins.libsonnet||example/k3d/lib/default/mixins.libsonnet": [
          "File: example/k3d/lib/default/mixins.libsonnet -> example/k3d/lib/default/mixins.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: fix +",
          "14: cortex_mixin +",
          "15: agent_debugging_mixin +",
          "",
          "[Removed Lines]",
          "16: agent_mixin",
          "",
          "[Added Lines]",
          "16: agent_mixin {",
          "17:   _config+: {",
          "20:     job_names+: {",
          "21:       ingester: 'cortex',",
          "22:       distributor: 'cortex',",
          "23:       querier: 'cortex',",
          "24:       query_frontend: 'cortex',",
          "25:       table_manager: 'cortex',",
          "26:       store_gateway: 'cortex',",
          "27:       gateway: 'cortex',",
          "28:     },",
          "29:   },",
          "30: }",
          "",
          "---------------"
        ],
        "example/k3d/lib/grafana/config.libsonnet||example/k3d/lib/grafana/config.libsonnet": [
          "File: example/k3d/lib/grafana/config.libsonnet -> example/k3d/lib/grafana/config.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: {",
          "2:   _images: {",
          "4:   },",
          "6:   _config: {",
          "",
          "[Removed Lines]",
          "3:     grafana: 'grafana/grafana:7.0.1',",
          "",
          "[Added Lines]",
          "3:     grafana: 'grafana/grafana:8.0.3',",
          "",
          "---------------"
        ],
        "example/k3d/lib/grafana/main.libsonnet||example/k3d/lib/grafana/main.libsonnet": [
          "File: example/k3d/lib/grafana/main.libsonnet -> example/k3d/lib/grafana/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: local container = k.core.v1.container;",
          "6: local containerPort = k.core.v1.containerPort;",
          "7: local deployment = k.apps.v1.deployment;",
          "9: {",
          "10:   new(dashboards={}, datasources=[], namespace='default'):: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: local service = k.core.v1.service;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:     grafana_cm:",
          "22:       configMap.new('grafana-config') +",
          "23:       configMap.withData({",
          "24:         'grafana.ini': std.manifestIni(_config.grafana_ini),",
          "25:       }),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:       configMap.mixin.metadata.withNamespace(namespace) +",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:       then {}",
          "30:       else",
          "31:         configMap.new('dashboards') +",
          "32:         configMap.withDataMixin({",
          "33:           [name]: std.toString(",
          "34:             $.dashboards[name]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:         configMap.mixin.metadata.withNamespace(namespace) +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "40:     grafana_dashboard_cms: {",
          "41:       ['dashboard-%d' % shard]:",
          "42:         configMap.new('dashboards-%d' % shard) +",
          "43:         configMap.withDataMixin({",
          "44:           [name]: std.toString(",
          "45:             _dashboards[name]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         configMap.mixin.metadata.withNamespace(namespace) +",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "54:     grafana_datasource_cm:",
          "55:       configMap.new('grafana-datasources') +",
          "56:       configMap.withDataMixin(std.foldl(function(acc, obj) acc {",
          "57:         ['%s.yml' % obj.datasources[0].name]: k.util.manifestYaml(obj),",
          "58:       }, self._datasources, {})),",
          "60:     grafana_dashboard_provisioning_cm:",
          "61:       configMap.new('grafana-dashboard-provisioning') +",
          "62:       configMap.withData({",
          "63:         'dashboards.yml': k.util.manifestYaml({",
          "64:           apiVersion: 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:       configMap.mixin.metadata.withNamespace(namespace) +",
          "67:       configMap.mixin.metadata.withNamespace(namespace) +",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "92:     deployment:",
          "93:       deployment.new('grafana', 1, [self.container]) +",
          "94:       deployment.mixin.spec.template.spec.securityContext.withRunAsUser(0) +",
          "95:       k.util.configMapVolumeMount(self.grafana_cm, '/etc/grafana-config') +",
          "96:       k.util.configMapVolumeMount(self.grafana_datasource_cm, '%(provisioning_dir)s/datasources' % _config) +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:       deployment.mixin.metadata.withNamespace(namespace) +",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "111:       k.util.podPriority('critical'),",
          "113:     service:",
          "115:   },",
          "",
          "[Removed Lines]",
          "114:       k.util.serviceFor(self.deployment),",
          "",
          "[Added Lines]",
          "121:       k.util.serviceFor(self.deployment) +",
          "122:       service.mixin.metadata.withNamespace(namespace),",
          "",
          "---------------"
        ],
        "example/k3d/lib/kube-state-metrics/main.libsonnet||example/k3d/lib/kube-state-metrics/main.libsonnet": [
          "File: example/k3d/lib/kube-state-metrics/main.libsonnet -> example/k3d/lib/kube-state-metrics/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "3: local container = k.core.v1.container;",
          "4: local containerPort = k.core.v1.containerPort;",
          "5: local deployment = k.apps.v1.deployment;",
          "6: local service = k.core.v1.service;",
          "7: local serviceAccount = k.core.v1.serviceAccount;",
          "8: local policyRule = k.rbac.v1.policyRule;",
          "10: {",
          "11:   new(namespace=''):: {",
          "12:     local k = (import 'ksonnet-util/kausal.libsonnet') { _config+:: { namespace: namespace } },",
          "14:     container::",
          "15:       container.new('kube-state-metrics', 'k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0') +",
          "16:       container.withPorts([",
          "17:         containerPort.newNamed(name='http-metrics', containerPort=8080),",
          "18:         containerPort.newNamed(name='self-metrics', containerPort=8081),",
          "19:       ]) +",
          "20:       container.withArgs([",
          "21:         '--port=8080',",
          "22:         '--telemetry-host=0.0.0.0',",
          "23:         '--telemetry-port=8081',",
          "24:       ]),",
          "26:     rbac:",
          "27:       k.util.rbac('kube-state-metrics', [",
          "28:         policyRule.withApiGroups(['']) +",
          "29:         policyRule.withResources([",
          "30:           'configmaps',",
          "31:           'secrets',",
          "32:           'nodes',",
          "33:           'pods',",
          "34:           'services',",
          "35:           'resourcequotas',",
          "36:           'replicationcontrollers',",
          "37:           'limitranges',",
          "38:           'persistentvolumeclaims',",
          "39:           'persistentvolumes',",
          "40:           'namespaces',",
          "41:           'endpoints',",
          "42:         ]) +",
          "43:         policyRule.withVerbs(['list', 'watch']),",
          "45:         policyRule.withApiGroups(['extensions']) +",
          "46:         policyRule.withResources([",
          "47:           'daemonsets',",
          "48:           'deployments',",
          "49:           'replicasets',",
          "50:           'ingresses',",
          "51:         ]) +",
          "52:         policyRule.withVerbs(['list', 'watch']),",
          "54:         policyRule.withApiGroups(['apps']) +",
          "55:         policyRule.withResources([",
          "56:           'daemonsets',",
          "57:           'deployments',",
          "58:           'replicasets',",
          "59:           'statefulsets',",
          "60:         ]) +",
          "61:         policyRule.withVerbs(['list', 'watch']),",
          "63:         policyRule.withApiGroups(['batch']) +",
          "64:         policyRule.withResources([",
          "65:           'cronjobs',",
          "66:           'jobs',",
          "67:         ]) +",
          "68:         policyRule.withVerbs(['list', 'watch']),",
          "70:         policyRule.withApiGroups(['autoscaling']) +",
          "71:         policyRule.withResources([",
          "72:           'horizontalpodautoscalers',",
          "73:         ]) +",
          "74:         policyRule.withVerbs(['list', 'watch']),",
          "76:         policyRule.withApiGroups(['authorization.k8s.io']) +",
          "77:         policyRule.withResources(['subjectaccessreviews']) +",
          "78:         policyRule.withVerbs(['create']),",
          "80:         policyRule.withApiGroups(['ingresses']) +",
          "81:         policyRule.withResources(['ingress']) +",
          "82:         policyRule.withVerbs(['list', 'watch']),",
          "84:         policyRule.withApiGroups(['policy']) +",
          "85:         policyRule.withResources(['poddisruptionbudgets']) +",
          "86:         policyRule.withVerbs(['list', 'watch']),",
          "88:         policyRule.withApiGroups(['certificates.k8s.io']) +",
          "89:         policyRule.withResources(['certificatesigningrequests']) +",
          "90:         policyRule.withVerbs(['list', 'watch']),",
          "92:         policyRule.withApiGroups(['storage.k8s.io']) +",
          "93:         policyRule.withResources([",
          "94:           'storageclasses',",
          "95:           'volumeattachments',",
          "96:         ]) +",
          "97:         policyRule.withVerbs(['list', 'watch']),",
          "99:         policyRule.withApiGroups(['admissionregistration.k8s.io']) +",
          "100:         policyRule.withResources([",
          "101:           'mutatingwebhookconfigurations',",
          "102:           'validatingwebhookconfigurations',",
          "103:         ]) +",
          "104:         policyRule.withVerbs(['list', 'watch']),",
          "106:         policyRule.withApiGroups(['networking.k8s.io']) +",
          "107:         policyRule.withResources([",
          "108:           'networkpolicies',",
          "109:           'ingresses',",
          "110:         ]) +",
          "111:         policyRule.withVerbs(['list', 'watch']),",
          "113:         policyRule.withApiGroups(['coordination.k8s.io']) +",
          "114:         policyRule.withResources(['leases']) +",
          "115:         policyRule.withVerbs(['list', 'watch']),",
          "116:       ]) {",
          "117:         service_account+:",
          "118:           serviceAccount.mixin.metadata.withNamespace(namespace),",
          "119:       },",
          "121:     deployment:",
          "122:       deployment.new('kube-state-metrics', 1, [self.container]) +",
          "123:       deployment.mixin.metadata.withNamespace(namespace) +",
          "124:       deployment.mixin.spec.template.metadata.withAnnotationsMixin({ 'prometheus.io.scrape': 'false' }) +",
          "125:       deployment.mixin.spec.template.spec.withServiceAccount('kube-state-metrics') +",
          "126:       deployment.mixin.spec.template.spec.securityContext.withRunAsUser(65534) +",
          "127:       deployment.mixin.spec.template.spec.securityContext.withRunAsGroup(65534) +",
          "128:       deployment.mixin.spec.template.spec.securityContext.withFsGroup(0) +",
          "129:       k.util.podPriority('critical'),",
          "131:     service:",
          "132:       k.util.serviceFor(self.deployment) +",
          "133:       service.mixin.metadata.withNamespace(namespace),",
          "134:   },",
          "135: }",
          "",
          "---------------"
        ],
        "example/k3d/lib/node-exporter/main.libsonnet||example/k3d/lib/node-exporter/main.libsonnet": [
          "File: example/k3d/lib/node-exporter/main.libsonnet -> example/k3d/lib/node-exporter/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "3: local container = k.core.v1.container;",
          "4: local containerPort = k.core.v1.containerPort;",
          "5: local daemonSet = k.apps.v1.daemonSet;",
          "6: local service = k.core.v1.service;",
          "8: {",
          "9:   new(namespace=''):: {",
          "10:     container::",
          "11:       container.new('node-exporter', 'quay.io/prometheus/node-exporter:v1.1.2') +",
          "12:       container.withPorts([",
          "13:         containerPort.newNamed(name='http-metrics', containerPort=9100),",
          "14:       ]) +",
          "15:       container.withArgsMixin([",
          "16:         '--path.rootfs=/host/root',",
          "17:         '--path.procfs=/host/proc',",
          "18:         '--path.sysfs=/host/sys',",
          "19:         '--collector.netdev.device-exclude=^veth.+$',",
          "20:       ]) +",
          "21:       container.mixin.securityContext.withPrivileged(true) +",
          "22:       container.mixin.securityContext.withRunAsUser(0),",
          "24:     daemonSet:",
          "25:       daemonSet.new('node-exporter', [self.container]) +",
          "26:       daemonSet.mixin.metadata.withNamespace(namespace) +",
          "27:       daemonSet.mixin.spec.template.metadata.withAnnotationsMixin({ 'prometheus.io.scrape': 'false' }) +",
          "28:       daemonSet.mixin.spec.template.spec.withHostPid(true) +",
          "29:       daemonSet.mixin.spec.template.spec.withHostNetwork(true) +",
          "30:       k.util.hostVolumeMount('proc', '/proc', '/host/proc') +",
          "31:       k.util.hostVolumeMount('sys', '/sys', '/host/sys') +",
          "32:       k.util.hostVolumeMount('root', '/', '/host/root') +",
          "33:       k.util.podPriority('critical'),",
          "34:   },",
          "35: }",
          "",
          "---------------"
        ],
        "example/k3d/lib/prometheus/main.libsonnet||example/k3d/lib/prometheus/main.libsonnet": [
          "File: example/k3d/lib/prometheus/main.libsonnet -> example/k3d/lib/prometheus/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "3: local configMap = k.core.v1.configMap;",
          "4: local container = k.core.v1.container;",
          "5: local containerPort = k.core.v1.containerPort;",
          "6: local deployment = k.apps.v1.deployment;",
          "7: local statefulSet = k.apps.v1.statefulSet;",
          "8: local pvc = k.core.v1.persistentVolumeClaim;",
          "9: local service = k.core.v1.service;",
          "10: local volumeMount = k.core.v1.volumeMount;",
          "11: local volume = k.core.v1.volume;",
          "12: local serviceAccount = k.core.v1.serviceAccount;",
          "13: local policyRule = k.rbac.v1.policyRule;",
          "15: {",
          "16:   new(namespace=''):: {",
          "17:     local k = (import 'ksonnet-util/kausal.libsonnet') { _config+:: { namespace: namespace } },",
          "18:     local this = self,",
          "20:     _images:: {",
          "21:       prom: 'prom/prometheus:v2.28.0',",
          "22:     },",
          "24:     _config:: {",
          "25:       rule_files: ['/etc/prometheus/rules.yaml'],",
          "26:     },",
          "27:     _rules:: {},",
          "29:     rbac:",
          "30:       k.util.rbac('prometheus', [",
          "31:         policyRule.withApiGroups(['']) +",
          "32:         policyRule.withResources(['nodes', 'nodes/proxy', 'services', 'endpoints', 'pods']) +",
          "33:         policyRule.withVerbs(['get', 'list', 'watch']),",
          "35:         policyRule.withNonResourceUrls('/metrics') +",
          "36:         policyRule.withVerbs(['get']),",
          "37:       ]) {",
          "38:         service_account+:",
          "39:           serviceAccount.mixin.metadata.withNamespace(namespace),",
          "40:       },",
          "42:     configMap:",
          "43:       configMap.new('prometheus') +",
          "44:       configMap.mixin.metadata.withNamespace(namespace) +",
          "45:       configMap.withData({",
          "46:         'prometheus.yaml': k.util.manifestYaml(this._config),",
          "47:         'rules.yaml': k.util.manifestYaml(this._rules),",
          "48:       }),",
          "50:     container::",
          "51:       container.new('prometheus', this._images.prom) +",
          "52:       container.withPorts([",
          "53:         containerPort.newNamed(name='http-metrics', containerPort=9090),",
          "54:       ]) +",
          "55:       container.withVolumeMountsMixin(",
          "56:         volumeMount.new('prometheus-data', '/data'),",
          "57:       ) +",
          "58:       container.withArgsMixin([",
          "59:         '--config.file=/etc/prometheus/prometheus.yaml',",
          "60:         '--storage.tsdb.path=/data',",
          "61:       ]),",
          "63:     pvc::",
          "64:       { apiVersion: 'v1', kind: 'PersistentVolumeClaim' } +",
          "65:       pvc.new() +",
          "66:       pvc.mixin.metadata.withName('prometheus-data') +",
          "67:       pvc.mixin.metadata.withNamespace(namespace) +",
          "68:       pvc.mixin.spec.withAccessModes('ReadWriteOnce') +",
          "69:       pvc.mixin.spec.resources.withRequests({ storage: '10Gi' }),",
          "71:     statefulSet:",
          "72:       statefulSet.new(",
          "73:         name='prometheus',",
          "74:         replicas=1,",
          "75:         containers=[this.container],",
          "76:         volumeClaims=[this.pvc]",
          "77:       ) +",
          "78:       statefulSet.mixin.spec.withServiceName('prometheus') +",
          "79:       k.util.configMapVolumeMount(this.configMap, '/etc/prometheus') +",
          "80:       statefulSet.mixin.spec.template.spec.withServiceAccountName('prometheus') +",
          "81:       statefulSet.mixin.metadata.withNamespace(namespace),",
          "83:     service:",
          "84:       k.util.serviceFor(this.statefulSet) +",
          "85:       service.mixin.metadata.withNamespace(namespace),",
          "86:   },",
          "88:   withConfigMixin(config={}):: { _config+:: config },",
          "89:   withRulesMixin(rules={}):: { _rules+:: rules },",
          "90: }",
          "",
          "---------------"
        ],
        "example/k3d/scripts/smoke-test.bash||example/k3d/scripts/smoke-test.bash": [
          "File: example/k3d/scripts/smoke-test.bash -> example/k3d/scripts/smoke-test.bash",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env bash",
          "2: #",
          "3: # Usage:",
          "4: #   smoke-test.bash [-i] [-d] [-t <duration>]",
          "5: #",
          "6: # Dependencies:",
          "7: #   k3d >=3.0",
          "8: #   Tanka",
          "9: #   jq",
          "10: #",
          "11: # smoke-test.bash performs smoke tests that can be used to validate a release.",
          "12: # It only validates correctness, and does not attempt to do significant load",
          "13: # testing or performance benchmarks.",
          "14: #",
          "15: # It works by deploying a k3d cluster with two pairs of Agent deployments: one",
          "16: # using the scraping service, and one using host filtering. Each Agent deployment",
          "17: # monitors a unique set of correctness tools (Loki Canary, Tempo Vulture,",
          "18: # Cortex text-exporter). These tools expose correctness metrics, generated by",
          "19: # by querying the backends that the Grafana Agents are configured to send",
          "20: # telemetry data to.",
          "21: #",
          "22: # Grafana and Prometheus are deployed to the cluster and are responsible for",
          "23: # internal monitoring. Prometheus is configured with a set of alert rules that serve",
          "24: # as test cases for the smoke tests; alerts generated within the span of the testing",
          "25: # period are treated as failures.",
          "26: #",
          "27: # After the smoke-test duration period (defaulting to 3h), alerts will",
          "28: # be checked, and the script will end.",
          "29: #",
          "30: # The k3d cluster is kept alive after the test for analysis. To clean up assets created",
          "31: # by the script, re-run the script with the -d flag.",
          "33: set -euo pipefail",
          "35: # Constants",
          "36: ROOT=$(git rev-parse --show-toplevel)",
          "37: K3D_CLUSTER_NAME=\"agent-smoke-test\"",
          "38: MUTATION_FREQUENCY=\"5m\"",
          "39: CHAOS_FREQUENCY=\"30m\"",
          "41: # Variables",
          "43: # Which function will be called",
          "44: ENTRYPOINT=\"run\"",
          "45: TEST_DURATION=\"3h\"",
          "46: IMPORT_IMAGES=\"\"",
          "48: while getopts \"dt:ih\" opt; do",
          "49:   case $opt in",
          "50:     d) ENTRYPOINT=\"cleanup\" ;;",
          "51:     t) TEST_DURATION=$OPTARG ;;",
          "52:     i) IMPORT_IMAGES=\"yes\" ;;",
          "53:     h)",
          "54:       echo \"Usage: $0 [-i] [-d] [-t <duration>]\"",
          "55:       exit 0",
          "56:       ;;",
          "58:       echo \"Usage: $0 [-i] [-d] [-t <duration>]\"",
          "59:       exit 1",
          "60:       ;;",
          "61:   esac",
          "62: done",
          "64: # Run runs the smoke test for $TEST_DURATION.",
          "65: run() {",
          "66:   echo \"--- Creating k3d cluster $K3D_CLUSTER_NAME\"",
          "67:   k3d cluster create $K3D_CLUSTER_NAME \\",
          "68:     --port 50080:80@loadbalancer \\",
          "69:     --api-port 50443 \\",
          "70:     --kubeconfig-update-default=true \\",
          "71:     --kubeconfig-switch-context=true \\",
          "72:     --wait >/dev/null",
          "74:   # Give the cluster a little bit of time to settle before",
          "75:   # applying the environment",
          "76:   echo \"--- Waiting for cluster to warm up\"",
          "77:   sleep 10",
          "79:   if [[ ! -z \"$IMPORT_IMAGES\" ]]; then",
          "80:     echo \"--- Importing local images\"",
          "82:     k3d image import -c $K3D_CLUSTER_NAME \\",
          "83:       grafana/agent:latest \\",
          "84:       grafana/agentctl:latest \\",
          "85:       grafana/agent-crow:latest",
          "86:   fi",
          "88:   tk apply $ROOT/example/k3d/smoke --dangerous-auto-approve",
          "90:   echo \"--- Spawning background tasks\"",
          "91:   mutation_loop &",
          "92:   MUTATION_PID=$!",
          "93:   chaos_loop &",
          "94:   CHAOS_PID=$!",
          "96:   # Immediately create a job to sync configs so our two Agent deployments",
          "97:   # are synced up as closely as possible.",
          "98:   kubectl --context=k3d-$K3D_CLUSTER_NAME --namespace=smoke \\",
          "99:     create job --from=cronjob/grafana-agent-syncer \\",
          "100:     grafana-agent-syncer-startup",
          "102:   echo \"Your environment is now running for the next $TEST_DURATION.\"",
          "103:   echo \"Grafana URL: http://grafana.k3d.localhost:50080\"",
          "104:   echo \"Prometheus URL: http://prometheus.k3d.localhost:50080\"",
          "105:   sleep $TEST_DURATION",
          "107:   echo \"--- Stopping background tasks\"",
          "108:   kill $CHAOS_PID $MUTATION_PID",
          "110:   echo \"Smoke tests complete!\"",
          "111:   echo \"Grafana URL: http://grafana.k3d.localhost:50080\"",
          "112:   echo \"Prometheus URL: http://prometheus.k3d.localhost:50080\"",
          "113:   echo \"\"",
          "114:   echo \"Getting results...\"",
          "116:   get_results",
          "117: }",
          "119: # mutation_loop changes the number of replicas of Avalanche servers",
          "120: # randomly between 0-10 replicas (inclusive) every $MUTATION_FREQUENCY.",
          "121: mutation_loop() {",
          "122:   while true; do",
          "123:     sleep $MUTATION_FREQUENCY",
          "125:     NEW_REPLICAS=$(($RANDOM % 11))",
          "126:     echo \"--- Scaling Avalanche to $NEW_REPLICAS replicas\"",
          "127:     kubectl --context=k3d-$K3D_CLUSTER_NAME --namespace=smoke \\",
          "128:       scale --replicas=$NEW_REPLICAS deployment/avalanche",
          "129:   done",
          "130: }",
          "132: # chaos loop deletes pods every $CHAOS_FREQUENCY.",
          "133: chaos_loop() {",
          "134:   while true; do",
          "135:     sleep $CHAOS_FREQUENCY",
          "137:     echo \"--- Force deleting pod/grafana-agent-0\"",
          "138:     kubectl --context=k3d-$K3D_CLUSTER_NAME --namespace=smoke \\",
          "139:       delete --grace-period=0 --force pod/grafana-agent-0",
          "141:     REPLICA=$(($RANDOM % 3))",
          "142:     echo \"--- Force deleting pod/agent-cluster-$REPLICA\"",
          "143:     kubectl --context=k3d-$K3D_CLUSTER_NAME --namespace=smoke \\",
          "144:       delete --grace-period=0 --force pod/grafana-agent-cluster-$REPLICA",
          "145:   done",
          "146: }",
          "148: get_results() {",
          "149:   NUM_ALERTS=$(curl -s -G \\",
          "150:     -H \"Host: prometheus.k3d.localhost\"    \\",
          "151:     -d \"query=count_over_time(ALERTS{alertstate=\\\"firing\\\"}[$TEST_DURATION])\" \\",
          "152:     'http://localhost:50080/api/v1/query'  \\",
          "153:       | jq '.data.result | length'         \\",
          "154:   )",
          "156:   if test $NUM_ALERTS -ne 0; then",
          "157:     echo \"FAIL: $NUM_ALERTS alerts found over the last $TEST_DURATION.\"",
          "158:     echo \"More information: http://prometheus.k3d.localhost:50080/graph?g0.expr=count_over_time(ALERTS{alertstate%3D%22firing%22}[$TEST_DURATION])\"",
          "160:     exit 1",
          "161:   else",
          "162:     echo \"PASS: 0 alerts found over the last $TEST_DURATION. You're good to go!\"",
          "164:     exit 0",
          "165:   fi",
          "166: }",
          "168: cleanup() {",
          "169:   echo \"--- Deleting k3d cluster $K3D_CLUSTER_NAME\"",
          "170:   k3d cluster delete $K3D_CLUSTER_NAME >/dev/null",
          "171: }",
          "173: $ENTRYPOINT",
          "",
          "---------------"
        ],
        "example/k3d/smoke/main.jsonnet||example/k3d/smoke/main.jsonnet": [
          "File: example/k3d/smoke/main.jsonnet -> example/k3d/smoke/main.jsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local monitoring = import './monitoring/main.jsonnet';",
          "2: local avalanche = import 'avalanche/main.libsonnet';",
          "3: local cortex = import 'cortex/main.libsonnet';",
          "4: local crow = import 'crow/main.libsonnet';",
          "5: local etcd = import 'etcd/main.libsonnet';",
          "6: local gragent = import 'grafana-agent/v2/main.libsonnet';",
          "7: local k = import 'ksonnet-util/kausal.libsonnet';",
          "9: local namespace = k.core.v1.namespace;",
          "10: local pvc = k.core.v1.persistentVolumeClaim;",
          "11: local volumeMount = k.core.v1.volumeMount;",
          "13: local images = {",
          "14:   agent: 'grafana/agent:latest',",
          "15:   agentctl: 'grafana/agentctl:latest',",
          "16: };",
          "18: local new_crow(name, selector) =",
          "19:   crow.new(name, namespace='smoke', config={",
          "20:     args: {",
          "21:       'crow.prometheus-addr': 'http://cortex/api/prom',",
          "22:       'crow.extra-selectors': selector,",
          "23:     },",
          "24:   });",
          "26: local smoke = {",
          "27:   ns: namespace.new('smoke'),",
          "29:   cortex: cortex.new('smoke'),",
          "32:   etcd: etcd.new('smoke'),",
          "34:   avalanche: avalanche.new(replicas=3, namespace='smoke', config={",
          "37:     metric_count: 50,",
          "38:     series_interval: 300,",
          "39:     metric_interval: 600,",
          "40:   }),",
          "42:   crows: [",
          "43:     new_crow('crow-single', 'cluster=\"grafana-agent\"'),",
          "44:     new_crow('crow-cluster', 'cluster=\"grafana-agent-cluster\"'),",
          "45:   ],",
          "47:   local metric_instances(crow_name) = [{",
          "48:     name: 'crow',",
          "49:     remote_write: [{ url: 'http://cortex/api/prom/push' }],",
          "50:     scrape_configs: [",
          "51:       {",
          "52:         job_name: 'crow',",
          "53:         metrics_path: '/validate',",
          "55:         kubernetes_sd_configs: [{ role: 'pod' }],",
          "56:         tls_config: {",
          "57:           ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "58:         },",
          "59:         bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "61:         relabel_configs: [{",
          "62:           source_labels: ['__meta_kubernetes_namespace'],",
          "63:           regex: 'smoke',",
          "64:           action: 'keep',",
          "65:         }, {",
          "66:           source_labels: ['__meta_kubernetes_pod_container_name'],",
          "67:           regex: crow_name,",
          "68:           action: 'keep',",
          "69:         }],",
          "70:       },",
          "71:     ],",
          "72:   }, {",
          "73:     name: 'avalanche',",
          "74:     remote_write: [{ url: 'http://cortex/api/prom/push' }],",
          "75:     scrape_configs: [",
          "76:       {",
          "77:         job_name: 'avalanche',",
          "78:         kubernetes_sd_configs: [{ role: 'pod' }],",
          "79:         tls_config: {",
          "80:           ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "81:         },",
          "82:         bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "84:         relabel_configs: [{",
          "85:           source_labels: ['__meta_kubernetes_namespace'],",
          "86:           regex: 'smoke',",
          "87:           action: 'keep',",
          "88:         }, {",
          "89:           source_labels: ['__meta_kubernetes_pod_container_name'],",
          "90:           regex: 'avalanche',",
          "91:           action: 'keep',",
          "92:         }],",
          "93:       },",
          "94:     ],",
          "95:   }],",
          "97:   normal_agent:",
          "98:     gragent.new(name='grafana-agent', namespace='smoke') +",
          "99:     gragent.withImagesMixin(images) +",
          "100:     gragent.withStatefulSetController(",
          "101:       replicas=1,",
          "102:       volumeClaims=[",
          "103:         pvc.new() +",
          "104:         pvc.mixin.metadata.withName('agent-wal') +",
          "105:         pvc.mixin.metadata.withNamespace('smoke') +",
          "106:         pvc.mixin.spec.withAccessModes('ReadWriteOnce') +",
          "107:         pvc.mixin.spec.resources.withRequests({ storage: '5Gi' }),",
          "108:       ],",
          "109:     ) +",
          "110:     gragent.withVolumeMountsMixin([volumeMount.new('agent-wal', '/var/lib/agent')]) +",
          "111:     gragent.withAgentConfig({",
          "112:       server: { log_level: 'debug' },",
          "114:       prometheus: {",
          "115:         global: {",
          "116:           scrape_interval: '15s',",
          "117:           external_labels: {",
          "118:             cluster: 'grafana-agent',",
          "119:           },",
          "120:         },",
          "121:         wal_directory: '/var/lib/agent/data',",
          "122:         configs: metric_instances('crow-single'),",
          "123:       },",
          "124:     }),",
          "126:   cluster_agent:",
          "127:     gragent.new(name='grafana-agent-cluster', namespace='smoke') +",
          "128:     gragent.withImagesMixin(images) +",
          "129:     gragent.withStatefulSetController(",
          "130:       replicas=3,",
          "131:       volumeClaims=[",
          "132:         pvc.new() +",
          "133:         pvc.mixin.metadata.withName('agent-cluster-wal') +",
          "134:         pvc.mixin.metadata.withNamespace('smoke') +",
          "135:         pvc.mixin.spec.withAccessModes('ReadWriteOnce') +",
          "136:         pvc.mixin.spec.resources.withRequests({ storage: '5Gi' }),",
          "137:       ],",
          "138:     ) +",
          "139:     gragent.withVolumeMountsMixin([volumeMount.new('agent-cluster-wal', '/var/lib/agent')]) +",
          "140:     gragent.withAgentConfig({",
          "141:       server: { log_level: 'debug' },",
          "143:       prometheus: {",
          "144:         global: {",
          "145:           scrape_interval: '15s',",
          "146:           external_labels: {",
          "147:             cluster: 'grafana-agent-cluster',",
          "148:           },",
          "149:         },",
          "150:         wal_directory: '/var/lib/agent/data',",
          "152:         scraping_service: {",
          "153:           enabled: true,",
          "154:           dangerous_allow_reading_files: true,",
          "155:           kvstore: {",
          "156:             store: 'etcd',",
          "157:             etcd: { endpoints: ['etcd:2379'] },",
          "158:           },",
          "159:           lifecycler: {",
          "160:             ring: {",
          "161:               kvstore: {",
          "162:                 store: 'etcd',",
          "163:                 etcd: { endpoints: ['etcd:2379'] },",
          "164:               },",
          "165:             },",
          "166:           },",
          "167:         },",
          "168:       },",
          "169:     }),",
          "173:   sycner: gragent.newSyncer(",
          "174:     name='grafana-agent-syncer',",
          "175:     namespace='smoke',",
          "176:     config={",
          "177:       image: images.agentctl,",
          "178:       api: 'http://grafana-agent-cluster.smoke.svc.cluster.local',",
          "179:       configs: metric_instances('crow-cluster'),",
          "180:     }",
          "181:   ),",
          "182: };",
          "184: {",
          "185:   monitoring: monitoring,",
          "186:   smoke: smoke,",
          "187: }",
          "",
          "---------------"
        ],
        "example/k3d/smoke/monitoring/main.jsonnet||example/k3d/smoke/monitoring/main.jsonnet": [
          "File: example/k3d/smoke/monitoring/main.jsonnet -> example/k3d/smoke/monitoring/main.jsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local grafana_mixins = import 'default/mixins.libsonnet';",
          "2: local datasource = import 'grafana/datasource.libsonnet';",
          "3: local grafana = import 'grafana/main.libsonnet';",
          "4: local k = import 'ksonnet-util/kausal.libsonnet';",
          "5: local kube_state_metrics = import 'kube-state-metrics/main.libsonnet';",
          "6: local node_exporter = import 'node-exporter/main.libsonnet';",
          "7: local prometheus = import 'prometheus/main.libsonnet';",
          "9: local namespace = k.core.v1.namespace;",
          "10: local ingress = k.networking.v1beta1.ingress;",
          "11: local rule = k.networking.v1beta1.ingressRule;",
          "12: local path = k.networking.v1beta1.httpIngressPath;",
          "14: local prometheus_monitoring = import './prometheus_monitoring.libsonnet';",
          "16: {",
          "17:   ns: namespace.new('monitoring'),",
          "19:   grafana:",
          "20:     grafana.new(namespace='monitoring') +",
          "21:     grafana.withDashboards(grafana_mixins.grafanaDashboards) +",
          "22:     grafana.withDataSources([",
          "23:       datasource.new('Prometheus', 'http://prometheus.monitoring.svc.cluster.local:9090', default='true'),",
          "24:       datasource.new('Cortex', 'http://cortex.smoke.svc.cluster.local/api/prom'),",
          "25:     ]),",
          "27:   prometheus:",
          "28:     prometheus.new(namespace='monitoring') +",
          "29:     prometheus.withConfigMixin(prometheus_monitoring.config) +",
          "30:     prometheus.withRulesMixin(prometheus_monitoring.rules),",
          "32:   node_exporter: node_exporter.new(namespace='monitoring'),",
          "33:   kube_state_metrics: kube_state_metrics.new(namespace='monitoring'),",
          "35:   ingresses: {",
          "36:     prometheus:",
          "37:       ingress.new('prometheus') +",
          "38:       ingress.mixin.metadata.withNamespace('monitoring') +",
          "39:       ingress.mixin.spec.withRules([",
          "40:         rule.withHost('prometheus.k3d.localhost') +",
          "41:         rule.http.withPaths([",
          "42:           path.withPath('/') +",
          "43:           path.backend.withServiceName('prometheus') +",
          "44:           path.backend.withServicePort(9090),",
          "45:         ]),",
          "46:       ]),",
          "48:     grafana:",
          "49:       ingress.new('grafana') +",
          "50:       ingress.mixin.metadata.withNamespace('monitoring') +",
          "51:       ingress.mixin.spec.withRules([",
          "52:         rule.withHost('grafana.k3d.localhost') +",
          "53:         rule.http.withPaths([",
          "54:           path.withPath('/') +",
          "55:           path.backend.withServiceName('grafana') +",
          "56:           path.backend.withServicePort(80),",
          "57:         ]),",
          "58:       ]),",
          "59:   },",
          "60: }",
          "",
          "---------------"
        ],
        "example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet||example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet": [
          "File: example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet -> example/k3d/smoke/monitoring/prometheus_monitoring.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local agent_prometheus = import 'grafana-agent/v1/lib/prometheus.libsonnet';",
          "3: {",
          "4:   config: {",
          "5:     global: {",
          "6:       scrape_interval: '15s',",
          "7:     },",
          "8:     scrape_configs: agent_prometheus.scrapeInstanceKubernetes.scrape_configs,",
          "9:   },",
          "11:   rules: {",
          "12:     groups: [",
          "13:       {",
          "14:         name: 'GrafanaAgentChecks',",
          "15:         rules: [",
          "18:           {",
          "19:             alert: 'GrafanaAgentMissing',",
          "20:             expr: |||",
          "21:               absent(up{ namespace=\"smoke\", pod=\"grafana-agent-0\" })         == 1 or",
          "22:               absent(up{ namespace=\"smoke\", pod=\"grafana-agent-cluster-0\" }) == 1 or",
          "23:               absent(up{ namespace=\"smoke\", pod=\"grafana-agent-cluster-1\" }) == 1 or",
          "24:               absent(up{ namespace=\"smoke\", pod=\"grafana-agent-cluster-2\" }) == 1",
          "25:             |||,",
          "26:             'for': '5m',",
          "27:             annotations: {",
          "28:               summary: '{{ $labels.pod }} is not running.',",
          "29:             },",
          "30:           },",
          "31:           {",
          "32:             alert: 'GrafanaAgentDown',",
          "33:             expr: |||",
          "34:               up{",
          "35:                 namespace=\"smoke\",",
          "36:                 pod=~\"grafana-agent-(0|cluster-0|cluster-1|cluster-2)\",",
          "37:               } == 0",
          "38:             |||,",
          "39:             'for': '5m',",
          "40:             annotations: {",
          "41:               summary: '{{ $labels.job }} is down',",
          "42:             },",
          "43:           },",
          "44:           {",
          "45:             alert: 'GrafanaAgentFlapping',",
          "46:             expr: |||",
          "47:               avg_over_time(up{",
          "48:                 namespace=\"smoke\",",
          "49:                 pod=~\"grafana-agent-(0|cluster-0|cluster-1|cluster-2)\",",
          "50:               }[5m]) < 1",
          "51:             |||,",
          "52:             'for': '15m',",
          "53:             annotations: {",
          "54:               summary: '{{ $labels.job }} is flapping',",
          "55:             },",
          "56:           },",
          "62:           {",
          "63:             alert: 'GrafanaAgentCPUHigh',",
          "64:             expr: |||",
          "65:               rate(container_cpu_usage_seconds_total{namespace=\"smoke\", pod=~\"grafana-agent-.*\"}[1m]) > 0.05",
          "66:             |||,",
          "67:             'for': '5m',",
          "68:             annotations: {",
          "69:               summary: '{{ $labels.pod }} is using more than 5% CPU over the last 5 minutes',",
          "70:             },",
          "71:           },",
          "78:           {",
          "79:             alert: 'GrafanaAgentMemHigh',",
          "80:             expr: |||",
          "81:               sum without (pod, instance) (go_memstats_heap_inuse_bytes{job=~\"smoke/grafana-agent.*\"}) /",
          "82:               sum without (pod, instance, instance_group_name) (agent_wal_storage_active_series{job=~\"smoke/grafana-agent.*\"}) / 1e3 > 10",
          "83:             |||,",
          "84:             'for': '5m',",
          "85:             annotations: {",
          "86:               summary: '{{ $labels.job }} has used more than 10KB per series for more than 5 minutes',",
          "87:             },",
          "88:           },",
          "89:         ],",
          "90:       },",
          "91:       {",
          "92:         name: 'CrowChecks',",
          "93:         rules: [",
          "94:           {",
          "95:             alert: 'CrowMissing',",
          "96:             expr: |||",
          "97:               absent(up{container=\"crow-single\"})  == 1 or",
          "98:               absent(up{container=\"crow-cluster\"}) == 1",
          "99:             |||,",
          "100:             'for': '5m',",
          "101:             annotations: {",
          "102:               summary: '{{ $labels.container }} is not running.',",
          "103:             },",
          "104:           },",
          "105:           {",
          "106:             alert: 'CrowDown',",
          "107:             expr: |||",
          "108:               up{job=~\"smoke/crow-.*\"} == 0",
          "109:             |||,",
          "110:             'for': '5m',",
          "111:             annotations: {",
          "112:               summary: 'Crow {{ $labels.job }} is down.',",
          "113:             },",
          "114:           },",
          "115:           {",
          "116:             alert: 'CrowFlapping',",
          "117:             expr: |||",
          "118:               avg_over_time(up{job=~\"smoke/crow-.*\"}[5m]) < 1",
          "119:             |||,",
          "120:             'for': '15m',",
          "121:             annotations: {",
          "122:               summary: 'Crow {{ $labels.job }} is flapping.',",
          "123:             },",
          "124:           },",
          "125:           {",
          "126:             alert: 'CrowNotScraped',",
          "127:             expr: |||",
          "128:               rate(crow_test_samples_total[1m]) == 0",
          "129:             |||,",
          "130:             'for': '5m',",
          "131:             annotations: {",
          "132:               summary: 'Crow {{ $labels.job }} is not being scraped.',",
          "133:             },",
          "134:           },",
          "135:           {",
          "136:             alert: 'CrowFailures',",
          "137:             expr: |||",
          "138:               (",
          "139:                 rate(crow_test_sample_results_total{result=\"success\"}[1m])",
          "140:                 / ignoring(result) rate(crow_test_samples_total[1m])",
          "141:               ) < 1",
          "142:             |||,",
          "143:             'for': '5m',",
          "144:             annotations: {",
          "145:               summary: 'Crow {{ $labels.job }} has had failures for at least 5m',",
          "146:             },",
          "147:           },",
          "148:         ],",
          "149:       },",
          "150:     ],",
          "151:   },",
          "152: }",
          "",
          "---------------"
        ],
        "pkg/crow/crow.go||pkg/crow/crow.go": [
          "File: pkg/crow/crow.go -> pkg/crow/crow.go"
        ],
        "pkg/crow/samples.go||pkg/crow/samples.go": [
          "File: pkg/crow/samples.go -> pkg/crow/samples.go"
        ],
        "production/grafana-agent-mixin/debugging.libsonnet||production/grafana-agent-mixin/debugging.libsonnet": [
          "File: production/grafana-agent-mixin/debugging.libsonnet -> production/grafana-agent-mixin/debugging.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: local utils = import './utils.libsonnet';",
          "4: {",
          "5:   grafanaDashboards+:: {",
          "6:     'agent-operational.json':",
          "8:       .addMultiTemplate('cluster', 'agent_build_info', 'cluster')",
          "9:       .addMultiTemplate('namespace', 'agent_build_info', 'namespace')",
          "10:       .addMultiTemplate('container', 'agent_build_info', 'container')",
          "",
          "[Removed Lines]",
          "1: local g = import 'grafana-builder/grafana.libsonnet';",
          "7:       utils.injectUtils(g.dashboard('Agent Operational'))",
          "",
          "[Added Lines]",
          "2: local g = import 'grafana-builder/grafana.libsonnet';",
          "7:       utils.injectUtils(g.dashboard('Agent Operational'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:         .addPanel(",
          "22:           g.panel('Go Heap') +",
          "23:           { yaxes: g.yaxes('decbytes') } +",
          "25:           g.queryPanel(",
          "26:             'go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=~\"$container\", pod=~\"$pod\"}',",
          "27:             '{{pod}}',",
          "",
          "[Removed Lines]",
          "24:           { stack: 'true' } +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         .addPanel(",
          "79:           g.panel('Bytes/Series/Pod') +",
          "80:           { yaxes: g.yaxes('decbytes') } +",
          "82:           g.queryPanel(",
          "83:             |||",
          "84:               (sum by (pod) (avg_over_time(go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=~\"$container\", pod=~\"$pod\"}[1m])))",
          "",
          "[Removed Lines]",
          "81:           { stack: 'true' } +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:         .addPanel(",
          "92:           g.panel('Bytes/Series') +",
          "93:           { yaxes: g.yaxes('decbytes') } +",
          "95:           g.queryPanel(",
          "96:             |||",
          "97:               (sum by (container) (avg_over_time(go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=~\"$container\", pod=~\"$pod\"}[1m])))",
          "",
          "[Removed Lines]",
          "94:           { stack: 'true' } +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:         )",
          "104:         .addPanel(",
          "105:           g.panel('Series/Pod') +",
          "107:           g.queryPanel(",
          "108:             'sum by (pod) (agent_wal_storage_active_series{cluster=~\"$cluster\", namespace=~\"$namespace\", container=~\"$container\", pod=~\"$pod\"})',",
          "109:             '{{pod}}',",
          "",
          "[Removed Lines]",
          "106:           { stack: 'true' } +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "111:         )",
          "112:         .addPanel(",
          "113:           g.panel('Series/Config') +",
          "115:           g.queryPanel(",
          "116:             'sum by (instance_group_name) (agent_wal_storage_active_series{cluster=~\"$cluster\", namespace=~\"$namespace\", container=~\"$container\", pod=~\"$pod\"})',",
          "117:             '{{instance_group_name}}',",
          "",
          "[Removed Lines]",
          "114:           { stack: 'true' } +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "119:         )",
          "120:         .addPanel(",
          "121:           g.panel('Series') +",
          "123:           g.queryPanel(",
          "124:             'sum by (container) (agent_wal_storage_active_series{cluster=~\"$cluster\", namespace=~\"$namespace\", container=~\"$container\", pod=~\"$pod\"})',",
          "125:             '{{container}}',",
          "",
          "[Removed Lines]",
          "122:           { stack: 'true' } +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/config.libsonnet||production/tanka/grafana-agent/config.libsonnet": [
          "File: production/tanka/grafana-agent/config.libsonnet -> production/tanka/grafana-agent/config.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: {",
          "2:   _images+:: {",
          "3:     agent: 'grafana/agent:latest',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k8s_v2 = import './v2/internal/helpers/k8s.libsonnet';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     },",
          "405:     agent_remote_write: [],",
          "406:   },",
          "",
          "[Removed Lines]",
          "101:     deployment_scrape_configs: [",
          "102:       {",
          "103:         job_name: 'default/kubernetes',",
          "104:         kubernetes_sd_configs: [{",
          "105:           role:",
          "106:             if $._config.scrape_api_server_endpoints",
          "107:             then 'endpoints'",
          "108:             else 'service',",
          "109:         }],",
          "110:         scheme: 'https',",
          "112:         tls_config: {",
          "113:           ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "114:           insecure_skip_verify: $._config.prometheus_insecure_skip_verify,",
          "115:           server_name: 'kubernetes',",
          "116:         },",
          "117:         bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "118:         relabel_configs: [{",
          "119:           source_labels: ['__meta_kubernetes_service_label_component'],",
          "120:           regex: 'apiserver',",
          "121:           action: 'keep',",
          "122:         }],",
          "125:         metric_relabel_configs: [",
          "126:           {",
          "127:             source_labels: ['__name__'],",
          "128:             regex: 'workqueue_queue_duration_seconds_bucket|process_cpu_seconds_total|process_resident_memory_bytes|workqueue_depth|rest_client_request_duration_seconds_bucket|workqueue_adds_total|up|rest_client_requests_total|apiserver_request_total|go_goroutines',",
          "129:             action: 'keep',",
          "130:           },",
          "131:         ],",
          "133:       },",
          "134:     ],",
          "135:     kubernetes_scrape_configs: [",
          "136:       {",
          "137:         job_name: 'kubernetes-pods',",
          "138:         kubernetes_sd_configs: [{",
          "139:           role: 'pod',",
          "140:         }],",
          "148:         relabel_configs: [",
          "150:           {",
          "151:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scrape'],",
          "152:             action: 'drop',",
          "153:             regex: 'false',",
          "154:           },",
          "157:           {",
          "158:             source_labels: ['__meta_kubernetes_pod_container_port_name'],",
          "159:             action: 'keep',",
          "160:             regex: '.*-metrics',",
          "161:           },",
          "164:           {",
          "165:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scheme'],",
          "166:             action: 'replace',",
          "167:             target_label: '__scheme__',",
          "168:             regex: '(https?)',",
          "169:             replacement: '$1',",
          "170:           },",
          "173:           {",
          "174:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_path'],",
          "175:             action: 'replace',",
          "176:             target_label: '__metrics_path__',",
          "177:             regex: '(.+)',",
          "178:             replacement: '$1',",
          "179:           },",
          "182:           {",
          "183:             source_labels: ['__address__', '__meta_kubernetes_pod_annotation_prometheus_io_port'],",
          "184:             action: 'replace',",
          "185:             target_label: '__address__',",
          "186:             regex: '(.+?)(\\\\:\\\\d+)?;(\\\\d+)',",
          "187:             replacement: '$1:$3',",
          "188:           },",
          "191:           {",
          "192:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "193:             action: 'drop',",
          "194:             regex: '',",
          "195:           },",
          "198:           {",
          "199:             source_labels: ['__meta_kubernetes_namespace', '__meta_kubernetes_pod_label_name'],",
          "200:             action: 'replace',",
          "201:             separator: '/',",
          "202:             target_label: 'job',",
          "203:             replacement: '$1',",
          "204:           },",
          "207:           {",
          "208:             source_labels: ['__meta_kubernetes_namespace'],",
          "209:             action: 'replace',",
          "210:             target_label: 'namespace',",
          "211:           },",
          "212:           {",
          "213:             source_labels: ['__meta_kubernetes_pod_name'],",
          "214:             action: 'replace',",
          "215:             target_label: 'pod',  // Not 'pod_name', which disappeared in K8s 1.16.",
          "216:           },",
          "217:           {",
          "218:             source_labels: ['__meta_kubernetes_pod_container_name'],",
          "219:             action: 'replace',",
          "220:             target_label: 'container',  // Not 'container_name', which disappeared in K8s 1.16.",
          "221:           },",
          "225:           {",
          "226:             source_labels: [",
          "227:               '__meta_kubernetes_pod_name',",
          "228:               '__meta_kubernetes_pod_container_name',",
          "229:               '__meta_kubernetes_pod_container_port_name',",
          "230:             ],",
          "231:             action: 'replace',",
          "232:             separator: ':',",
          "233:             target_label: 'instance',",
          "234:           },",
          "237:           {",
          "238:             regex: '__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)',",
          "239:             action: 'labelmap',",
          "240:             replacement: '__param_$1',",
          "241:           },",
          "244:           {",
          "245:             source_labels: ['__meta_kubernetes_pod_phase'],",
          "246:             action: 'drop',",
          "247:             regex: 'Succeeded|Failed',",
          "248:           },",
          "249:         ],",
          "250:       },",
          "257:       {",
          "258:         job_name: '%s/kube-state-metrics' % $._config.namespace,",
          "259:         kubernetes_sd_configs: [{",
          "260:           role: 'pod',",
          "261:           namespaces: {",
          "262:             names: [$._config.namespace],",
          "263:           },",
          "264:         }],",
          "266:         relabel_configs: [",
          "268:           {",
          "269:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "270:             regex: 'kube-state-metrics',",
          "271:             action: 'keep',",
          "272:           },",
          "278:           {",
          "279:             source_labels: [",
          "280:               '__meta_kubernetes_pod_name',",
          "281:               '__meta_kubernetes_pod_container_name',",
          "282:               '__meta_kubernetes_pod_container_port_name',",
          "283:             ],",
          "284:             action: 'replace',",
          "285:             separator: ':',",
          "286:             target_label: 'instance',",
          "287:           },",
          "288:         ],",
          "289:       },",
          "293:       {",
          "294:         job_name: '%s/node-exporter' % $._config.namespace,",
          "295:         kubernetes_sd_configs: [{",
          "296:           role: 'pod',",
          "297:           namespaces: {",
          "298:             names: [$._config.namespace],",
          "299:           },",
          "300:         }],",
          "302:         relabel_configs: [",
          "304:           {",
          "305:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "306:             regex: 'node-exporter',",
          "307:             action: 'keep',",
          "308:           },",
          "311:           {",
          "312:             source_labels: ['__meta_kubernetes_pod_node_name'],",
          "313:             action: 'replace',",
          "314:             target_label: 'instance',",
          "315:           },",
          "319:           {",
          "320:             source_labels: ['__meta_kubernetes_namespace'],",
          "321:             action: 'replace',",
          "322:             target_label: 'namespace',",
          "323:           },",
          "324:         ],",
          "325:       },",
          "328:       {",
          "329:         job_name: 'kube-system/kubelet',",
          "330:         kubernetes_sd_configs: [{",
          "331:           role: 'node',",
          "332:         }],",
          "334:         tls_config: {",
          "335:           ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "336:           insecure_skip_verify: $._config.prometheus_insecure_skip_verify,",
          "337:         },",
          "338:         bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "340:         relabel_configs: [",
          "341:           {",
          "342:             target_label: '__address__',",
          "343:             replacement: $._config.prometheus_kubernetes_api_server_address,",
          "344:           },",
          "345:           {",
          "346:             target_label: '__scheme__',",
          "347:             replacement: 'https',",
          "348:           },",
          "349:           {",
          "350:             source_labels: ['__meta_kubernetes_node_name'],",
          "351:             regex: '(.+)',",
          "352:             target_label: '__metrics_path__',",
          "353:             replacement: '/api/v1/nodes/$1/proxy/metrics',",
          "354:           },",
          "355:         ],",
          "356:       },",
          "360:       {",
          "361:         job_name: 'kube-system/cadvisor',",
          "362:         kubernetes_sd_configs: [{",
          "363:           role: 'node',",
          "364:         }],",
          "365:         scheme: 'https',",
          "367:         tls_config: {",
          "368:           ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "369:           insecure_skip_verify: $._config.prometheus_insecure_skip_verify,",
          "370:         },",
          "371:         bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "373:         relabel_configs: [",
          "374:           {",
          "375:             target_label: '__address__',",
          "376:             replacement: $._config.prometheus_kubernetes_api_server_address,",
          "377:           },",
          "378:           {",
          "379:             source_labels: ['__meta_kubernetes_node_name'],",
          "380:             regex: '(.+)',",
          "381:             target_label: '__metrics_path__',",
          "382:             replacement: '/api/v1/nodes/$1/proxy/metrics/cadvisor',",
          "383:           },",
          "384:         ],",
          "386:         metric_relabel_configs: [",
          "388:           {",
          "389:             source_labels: ['__name__', 'image'],",
          "390:             regex: 'container_([a-z_]+);',",
          "391:             action: 'drop',",
          "392:           },",
          "396:           {",
          "397:             source_labels: ['__name__'],",
          "398:             regex: 'container_(network_tcp_usage_total|network_udp_usage_total|tasks_state|cpu_load_average_10s)',",
          "399:             action: 'drop',",
          "400:           },",
          "401:         ],",
          "402:       },",
          "403:     ],",
          "",
          "[Added Lines]",
          "96:     local all_scrape_configs = k8s_v2.metrics({",
          "97:       scrape_api_server_endpoints: $._config.scrape_api_server_endpoints,",
          "98:       insecure_skip_verify: $._config.prometheus_insecure_skip_verify,",
          "99:       kubernetes_api_server_address: $._config.prometheus_kubernetes_api_server_address,",
          "100:       ksm_namespace: $._config.namespace,",
          "101:       node_exporter_namespace: $._config.namespace,",
          "102:     }),",
          "110:     deployment_scrape_configs:",
          "111:       std.filter(function(job) job.job_name == 'default/kubernetes', all_scrape_configs),",
          "112:     kubernetes_scrape_configs:",
          "113:       std.filter(function(job) job.job_name != 'default/kubernetes', all_scrape_configs),",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet||production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet": [
          "File: production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet -> production/tanka/grafana-agent/v1/internal/kubernetes_instance.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: {",
          "10:   kubernetesScrapeInstanceConfig:: {",
          "",
          "[Removed Lines]",
          "1: local k8s_tls_config(config) = {",
          "2:   tls_config: {",
          "3:     ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "4:     insecure_skip_verify: config.insecure_skip_verify,",
          "5:   },",
          "6:   bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "7: };",
          "",
          "[Added Lines]",
          "1: local k8s_v2 = import '../../v2/internal/helpers/k8s.libsonnet';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   },",
          "19:   newKubernetesScrapeInstance(config, namespace='default'):: {",
          "304:   },",
          "305: }",
          "",
          "[Removed Lines]",
          "20:     name: 'kubernetes',",
          "21:     scrape_configs: [",
          "22:       k8s_tls_config(config) {",
          "23:         job_name: 'default/kubernetes',",
          "24:         kubernetes_sd_configs: [{",
          "25:           role: if config.scrape_api_server_endpoints then 'endpoints' else 'service',",
          "26:         }],",
          "27:         scheme: 'https',",
          "28:         tls_config+: {",
          "29:           server_name: 'kubernetes',",
          "30:         },",
          "32:         relabel_configs: [{",
          "33:           source_labels: ['__meta_kubernetes_service_label_component'],",
          "34:           regex: 'apiserver',",
          "35:           action: 'keep',",
          "36:         }],",
          "39:         metric_relabel_configs: [",
          "40:           {",
          "41:             source_labels: ['__name__'],",
          "42:             regex: 'workqueue_queue_duration_seconds_bucket|process_cpu_seconds_total|process_resident_memory_bytes|workqueue_depth|rest_client_request_duration_seconds_bucket|workqueue_adds_total|up|rest_client_requests_total|apiserver_request_total|go_goroutines',",
          "43:             action: 'keep',",
          "44:           },",
          "45:         ],",
          "46:       },",
          "48:       {",
          "49:         job_name: 'kubernetes-pods',",
          "50:         kubernetes_sd_configs: [{",
          "51:           role: 'pod',",
          "52:         }],",
          "60:         relabel_configs: [",
          "62:           {",
          "63:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scrape'],",
          "64:             action: 'drop',",
          "65:             regex: 'false',",
          "66:           },",
          "69:           {",
          "70:             source_labels: ['__meta_kubernetes_pod_container_port_name'],",
          "71:             action: 'keep',",
          "72:             regex: '.*-metrics',",
          "73:           },",
          "76:           {",
          "77:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scheme'],",
          "78:             action: 'replace',",
          "79:             target_label: '__scheme__',",
          "80:             regex: '(https?)',",
          "81:             replacement: '$1',",
          "82:           },",
          "85:           {",
          "86:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_path'],",
          "87:             action: 'replace',",
          "88:             target_label: '__metrics_path__',",
          "89:             regex: '(.+)',",
          "90:             replacement: '$1',",
          "91:           },",
          "94:           {",
          "95:             source_labels: ['__address__', '__meta_kubernetes_pod_annotation_prometheus_io_port'],",
          "96:             action: 'replace',",
          "97:             target_label: '__address__',",
          "98:             regex: '(.+?)(\\\\:\\\\d+)?;(\\\\d+)',",
          "99:             replacement: '$1:$3',",
          "100:           },",
          "103:           {",
          "104:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "105:             action: 'drop',",
          "106:             regex: '',",
          "107:           },",
          "110:           {",
          "111:             source_labels: ['__meta_kubernetes_namespace', '__meta_kubernetes_pod_label_name'],",
          "112:             action: 'replace',",
          "113:             separator: '/',",
          "114:             target_label: 'job',",
          "115:             replacement: '$1',",
          "116:           },",
          "119:           {",
          "120:             source_labels: ['__meta_kubernetes_namespace'],",
          "121:             action: 'replace',",
          "122:             target_label: 'namespace',",
          "123:           },",
          "124:           {",
          "125:             source_labels: ['__meta_kubernetes_pod_name'],",
          "126:             action: 'replace',",
          "127:             target_label: 'pod',  // Not 'pod_name', which disappeared in K8s 1.16.",
          "128:           },",
          "129:           {",
          "130:             source_labels: ['__meta_kubernetes_pod_container_name'],",
          "131:             action: 'replace',",
          "132:             target_label: 'container',  // Not 'container_name', which disappeared in K8s 1.16.",
          "133:           },",
          "137:           {",
          "138:             source_labels: [",
          "139:               '__meta_kubernetes_pod_name',",
          "140:               '__meta_kubernetes_pod_container_name',",
          "141:               '__meta_kubernetes_pod_container_port_name',",
          "142:             ],",
          "143:             action: 'replace',",
          "144:             separator: ':',",
          "145:             target_label: 'instance',",
          "146:           },",
          "149:           {",
          "150:             regex: '__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)',",
          "151:             action: 'labelmap',",
          "152:             replacement: '__param_$1',",
          "153:           },",
          "156:           {",
          "157:             source_labels: ['__meta_kubernetes_pod_phase'],",
          "158:             action: 'drop',",
          "159:             regex: 'Succeeded|Failed',",
          "160:           },",
          "161:         ],",
          "162:       },",
          "169:       {",
          "170:         job_name: '%s/kube-state-metrics' % namespace,",
          "171:         kubernetes_sd_configs: [{",
          "172:           role: 'pod',",
          "173:           namespaces: {",
          "174:             names: [namespace],",
          "175:           },",
          "176:         }],",
          "178:         relabel_configs: [",
          "180:           {",
          "181:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "182:             regex: 'kube-state-metrics',",
          "183:             action: 'keep',",
          "184:           },",
          "190:           {",
          "191:             source_labels: [",
          "192:               '__meta_kubernetes_pod_name',",
          "193:               '__meta_kubernetes_pod_container_name',",
          "194:               '__meta_kubernetes_pod_container_port_name',",
          "195:             ],",
          "196:             action: 'replace',",
          "197:             separator: ':',",
          "198:             target_label: 'instance',",
          "199:           },",
          "200:         ],",
          "201:       },",
          "205:       {",
          "206:         job_name: '%s/node-exporter' % namespace,",
          "207:         kubernetes_sd_configs: [{",
          "208:           role: 'pod',",
          "209:           namespaces: {",
          "210:             names: [namespace],",
          "211:           },",
          "212:         }],",
          "214:         relabel_configs: [",
          "216:           {",
          "217:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "218:             regex: 'node-exporter',",
          "219:             action: 'keep',",
          "220:           },",
          "223:           {",
          "224:             source_labels: ['__meta_kubernetes_pod_node_name'],",
          "225:             action: 'replace',",
          "226:             target_label: 'instance',",
          "227:           },",
          "231:           {",
          "232:             source_labels: ['__meta_kubernetes_namespace'],",
          "233:             action: 'replace',",
          "234:             target_label: 'namespace',",
          "235:           },",
          "236:         ],",
          "237:       },",
          "240:       k8s_tls_config(config) {",
          "241:         job_name: 'kube-system/kubelet',",
          "242:         kubernetes_sd_configs: [{",
          "243:           role: 'node',",
          "244:         }],",
          "246:         relabel_configs: [",
          "247:           {",
          "248:             target_label: '__address__',",
          "249:             replacement: config.kubernetes_api_server_address,",
          "250:           },",
          "251:           {",
          "252:             target_label: '__scheme__',",
          "253:             replacement: 'https',",
          "254:           },",
          "255:           {",
          "256:             source_labels: ['__meta_kubernetes_node_name'],",
          "257:             regex: '(.+)',",
          "258:             target_label: '__metrics_path__',",
          "259:             replacement: '/api/v1/nodes/${1}/proxy/metrics',",
          "260:           },",
          "261:         ],",
          "262:       },",
          "266:       k8s_tls_config(config) {",
          "267:         job_name: 'kube-system/cadvisor',",
          "268:         kubernetes_sd_configs: [{",
          "269:           role: 'node',",
          "270:         }],",
          "271:         scheme: 'https',",
          "273:         relabel_configs: [",
          "274:           {",
          "275:             target_label: '__address__',",
          "276:             replacement: config.kubernetes_api_server_address,",
          "277:           },",
          "278:           {",
          "279:             source_labels: ['__meta_kubernetes_node_name'],",
          "280:             regex: '(.+)',",
          "281:             target_label: '__metrics_path__',",
          "282:             replacement: '/api/v1/nodes/${1}/proxy/metrics/cadvisor',",
          "283:           },",
          "284:         ],",
          "286:         metric_relabel_configs: [",
          "288:           {",
          "289:             source_labels: ['__name__', 'image'],",
          "290:             regex: 'container_([a-z_]+);',",
          "291:             action: 'drop',",
          "292:           },",
          "296:           {",
          "297:             source_labels: ['__name__'],",
          "298:             regex: 'container_(network_tcp_usage_total|network_udp_usage_total|tasks_state|cpu_load_average_10s)',",
          "299:             action: 'drop',",
          "300:           },",
          "301:         ],",
          "302:       },",
          "303:     ],",
          "",
          "[Added Lines]",
          "14:     local _config = $.kubernetesScrapeInstanceConfig + config,",
          "16:     name: 'kubernetes',",
          "17:     scrape_configs: k8s_v2.metrics({",
          "18:       scrape_api_server_endpoints: _config.scrape_api_server_endpoints,",
          "19:       insecure_skip_verify: _config.insecure_skip_verify,",
          "20:       cluster_dns_tld: _config.cluster_dns_tld,",
          "21:       cluster_dns_suffix: _config.cluster_dns_suffix,",
          "22:       kubernetes_api_server_address: _config.kubernetes_api_server_address,",
          "23:       ksm_namespace: namespace,",
          "24:       node_exporter_namespace: namespace,",
          "25:     }),",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet||production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet": [
          "File: production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet -> production/tanka/grafana-agent/v1/internal/kubernetes_logs.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: {",
          "73:   newKubernetesLogsCollector():: {",
          "184:   },",
          "185: }",
          "",
          "[Removed Lines]",
          "1: local gen_scrape_config(job_name, pod_uid) = {",
          "2:   job_name: job_name,",
          "3:   pipeline_stages: [{",
          "4:     docker: {},",
          "5:   }],",
          "6:   kubernetes_sd_configs: [{",
          "7:     role: 'pod',",
          "8:   }],",
          "10:   relabel_configs: self.prelabel_config + [",
          "13:     {",
          "14:       source_labels: ['__meta_kubernetes_pod_node_name'],",
          "15:       target_label: '__host__',",
          "16:     },",
          "19:     {",
          "20:       source_labels: ['__service__'],",
          "21:       action: 'drop',",
          "22:       regex: '',",
          "23:     },",
          "28:     {",
          "29:       action: 'labelmap',",
          "30:       regex: '__meta_kubernetes_pod_label_(.+)',",
          "31:     },",
          "34:     {",
          "35:       source_labels: ['__meta_kubernetes_namespace', '__service__'],",
          "36:       action: 'replace',",
          "37:       separator: '/',",
          "38:       target_label: 'job',",
          "39:       replacement: '$1',",
          "40:     },",
          "46:     {",
          "47:       source_labels: ['__meta_kubernetes_namespace'],",
          "48:       action: 'replace',",
          "49:       target_label: 'namespace',",
          "50:     },",
          "51:     {",
          "52:       source_labels: ['__meta_kubernetes_pod_name'],",
          "53:       action: 'replace',",
          "54:       target_label: 'pod',  // Not 'pod_name', which disappeared in K8s 1.16.",
          "55:     },",
          "56:     {",
          "57:       source_labels: ['__meta_kubernetes_pod_container_name'],",
          "58:       action: 'replace',",
          "59:       target_label: 'container',  // Not 'container_name', which disappeared in K8s 1.16.",
          "60:     },",
          "63:     {",
          "64:       source_labels: [pod_uid, '__meta_kubernetes_pod_container_name'],",
          "65:       target_label: '__path__',",
          "66:       separator: '/',",
          "67:       replacement: '/var/log/pods/*$1/*.log',",
          "68:     },",
          "69:   ],",
          "70: };",
          "74:     scrape_configs: [",
          "76:       gen_scrape_config('kubernetes-pods-name', '__meta_kubernetes_pod_uid') {",
          "77:         prelabel_config:: [",
          "79:           {",
          "80:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "81:             target_label: '__service__',",
          "82:           },",
          "83:         ],",
          "84:       },",
          "87:       gen_scrape_config('kubernetes-pods-app', '__meta_kubernetes_pod_uid') {",
          "88:         prelabel_config:: [",
          "91:           {",
          "92:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "93:             action: 'drop',",
          "94:             regex: '.+',",
          "95:           },",
          "98:           {",
          "99:             source_labels: ['__meta_kubernetes_pod_label_app'],",
          "100:             target_label: '__service__',",
          "101:           },",
          "102:         ],",
          "103:       },",
          "107:       gen_scrape_config('kubernetes-pods-direct-controllers', '__meta_kubernetes_pod_uid') {",
          "108:         prelabel_config:: [",
          "111:           {",
          "112:             source_labels: ['__meta_kubernetes_pod_label_name', '__meta_kubernetes_pod_label_app'],",
          "113:             separator: '',",
          "114:             action: 'drop',",
          "115:             regex: '.+',",
          "116:           },",
          "120:           {",
          "121:             source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "122:             action: 'drop',",
          "123:             regex: '[0-9a-z-.]+-[0-9a-f]{8,10}',",
          "124:           },",
          "127:           {",
          "128:             source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "129:             target_label: '__service__',",
          "130:           },",
          "131:         ],",
          "132:       },",
          "136:       gen_scrape_config('kubernetes-pods-indirect-controller', '__meta_kubernetes_pod_uid') {",
          "137:         prelabel_config:: [",
          "140:           {",
          "141:             source_labels: ['__meta_kubernetes_pod_label_name', '__meta_kubernetes_pod_label_app'],",
          "142:             separator: '',",
          "143:             action: 'drop',",
          "144:             regex: '.+',",
          "145:           },",
          "148:           {",
          "149:             source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "150:             regex: '[0-9a-z-.]+-[0-9a-f]{8,10}',",
          "151:             action: 'keep',",
          "152:           },",
          "155:           {",
          "156:             source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "157:             action: 'replace',",
          "158:             regex: '([0-9a-z-.]+)-[0-9a-f]{8,10}',",
          "159:             target_label: '__service__',",
          "160:           },",
          "161:         ],",
          "162:       },",
          "166:       gen_scrape_config('kubernetes-pods-static', '__meta_kubernetes_pod_annotation_kubernetes_io_config_mirror') {",
          "167:         prelabel_config:: [",
          "169:           {",
          "170:             action: 'drop',",
          "171:             source_labels: ['__meta_kubernetes_pod_annotation_kubernetes_io_config_mirror'],",
          "172:             regex: '',",
          "173:           },",
          "176:           {",
          "177:             action: 'replace',",
          "178:             source_labels: ['__meta_kubernetes_pod_label_component'],",
          "179:             target_label: '__service__',",
          "180:           },",
          "181:         ],",
          "182:       },",
          "183:     ],",
          "",
          "[Added Lines]",
          "1: local k8s_v2 = import '../../v2/internal/helpers/k8s.libsonnet';",
          "5:     scrape_configs: k8s_v2.logs(),",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function(name='grafana-agent', namespace='') {",
          "2:   local k = (import 'ksonnet-util/kausal.libsonnet') { _config+:: { namespace: namespace } },",
          "4:   local container = k.core.v1.container,",
          "5:   local configMap = k.core.v1.configMap,",
          "6:   local containerPort = k.core.v1.containerPort,",
          "7:   local policyRule = k.rbac.v1.policyRule,",
          "8:   local serviceAccount = k.core.v1.serviceAccount,",
          "10:   local this = self,",
          "12:   _images:: {",
          "13:     agent: 'grafana/agent:v0.16.1',",
          "14:     agentctl: 'grafana/agentctl:v0.16.1',",
          "15:   },",
          "16:   _config:: {",
          "17:     name: name,",
          "18:     namespace: namespace,",
          "19:     config_hash: true,",
          "20:     agent_config: '',",
          "21:   },",
          "23:   rbac: k.util.rbac(name, [",
          "24:     policyRule.withApiGroups(['']) +",
          "25:     policyRule.withResources(['nodes', 'nodes/proxy', 'services', 'endpoints', 'pods']) +",
          "26:     policyRule.withVerbs(['get', 'list', 'watch']),",
          "28:     policyRule.withNonResourceUrls('/metrics') +",
          "29:     policyRule.withVerbs(['get']),",
          "30:   ]) {",
          "31:     service_account+: serviceAccount.mixin.metadata.withNamespace(namespace),",
          "32:   },",
          "34:   configMap:",
          "35:     configMap.new(name) +",
          "36:     configMap.mixin.metadata.withNamespace(namespace) +",
          "37:     configMap.withData({",
          "38:       'agent.yaml': k.util.manifestYaml(this._config.agent_config),",
          "39:     }),",
          "41:   container::",
          "42:     container.new(name, this._images.agent) +",
          "43:     container.withPorts(containerPort.new('http-metrics', 80)) +",
          "44:     container.withCommand('/bin/agent') +",
          "45:     container.withArgsMixin(k.util.mapToFlags({",
          "46:       'config.file': '/etc/agent/agent.yaml',",
          "47:     })),",
          "48: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet||production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet -> production/tanka/grafana-agent/v2/internal/controllers/daemonset.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function() {",
          "2:   local this = self,",
          "3:   local _config = this._config,",
          "4:   local name = _config.name,",
          "5:   local namespace = _config.namespace,",
          "7:   local k = (import 'ksonnet-util/kausal.libsonnet') { _config+:: this._config },",
          "8:   local daemonSet = k.apps.v1.daemonSet,",
          "10:   controller:",
          "11:     daemonSet.new(name, [this.container]) +",
          "12:     daemonSet.mixin.metadata.withNamespace(namespace) +",
          "13:     daemonSet.mixin.spec.template.spec.withServiceAccount(name) +",
          "14:     (",
          "15:       if _config.config_hash",
          "16:       then daemonSet.mixin.spec.template.metadata.withAnnotationsMixin({",
          "17:         config_hash: std.md5(std.toString(_config.agent_config)),",
          "18:       })",
          "19:       else {}",
          "20:     ) +",
          "21:     k.util.configVolumeMount(name, '/etc/agent'),",
          "22: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet||production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet -> production/tanka/grafana-agent/v2/internal/controllers/deployment.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function(replicas=1) {",
          "2:   local this = self,",
          "3:   local _config = this._config,",
          "4:   local name = _config.name,",
          "5:   local namespace = _config.namespace,",
          "7:   local k = (import 'ksonnet-util/kausal.libsonnet') { _config+:: this._config } },",
          "9:   local deployment = k.apps.v1.deployment,",
          "11:   controller:",
          "12:     deployment.new(name, replicas, [this.container]) +",
          "13:     deployment.mixin.metadata.withNamespace(namespace) +",
          "14:     deployment.mixin.spec.template.spec.withServiceAccount(name) +",
          "15:     (",
          "16:       if _config.config_hash",
          "17:       then deployment.mixin.spec.template.metadata.withAnnotationsMixin({",
          "18:         config_hash: std.md5(std.toString(_config.agent_config)),",
          "19:       })",
          "20:       else {}",
          "21:     ) +",
          "22:     k.util.configVolumeMount(name, '/etc/agent'),",
          "23: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet||production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet -> production/tanka/grafana-agent/v2/internal/controllers/statefulset.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function(replicas=1, volumeClaims=[]) {",
          "2:   local this = self,",
          "3:   local _config = this._config,",
          "4:   local name = _config.name,",
          "5:   local namespace = _config.namespace,",
          "7:   local k = (import 'ksonnet-util/kausal.libsonnet') { _config+:: this._config },",
          "9:   local statefulSet = k.apps.v1.statefulSet,",
          "10:   local service = k.core.v1.service,",
          "12:   controller:",
          "13:     statefulSet.new(name, replicas, [this.container], volumeClaims) +",
          "14:     statefulSet.mixin.metadata.withNamespace(namespace) +",
          "15:     statefulSet.mixin.spec.withServiceName(name) +",
          "16:     statefulSet.mixin.spec.template.spec.withServiceAccount(name) +",
          "17:     (",
          "18:       if _config.config_hash",
          "19:       then statefulSet.mixin.spec.template.metadata.withAnnotationsMixin({",
          "20:         config_hash: std.md5(std.toString(_config.agent_config)),",
          "21:       })",
          "22:       else {}",
          "23:     ) +",
          "24:     k.util.configVolumeMount(name, '/etc/agent'),",
          "26:   service:",
          "27:     k.util.serviceFor(this.controller) +",
          "28:     service.mixin.metadata.withNamespace(namespace),",
          "29: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet||production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet -> production/tanka/grafana-agent/v2/internal/helpers/k8s.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k8s_tls_config(config) = {",
          "2:   tls_config: {",
          "3:     ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "4:     insecure_skip_verify: config.insecure_skip_verify,",
          "5:   },",
          "6:   bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "7: };",
          "9: local gen_scrape_config(job_name, pod_uid) = {",
          "10:   job_name: job_name,",
          "11:   pipeline_stages: [{",
          "12:     docker: {},",
          "13:   }],",
          "14:   kubernetes_sd_configs: [{",
          "15:     role: 'pod',",
          "16:   }],",
          "18:   relabel_configs: self.prelabel_config + [",
          "21:     {",
          "22:       source_labels: ['__meta_kubernetes_pod_node_name'],",
          "23:       target_label: '__host__',",
          "24:     },",
          "27:     {",
          "28:       source_labels: ['__service__'],",
          "29:       action: 'drop',",
          "30:       regex: '',",
          "31:     },",
          "36:     {",
          "37:       action: 'labelmap',",
          "38:       regex: '__meta_kubernetes_pod_label_(.+)',",
          "39:     },",
          "42:     {",
          "43:       source_labels: ['__meta_kubernetes_namespace', '__service__'],",
          "44:       action: 'replace',",
          "45:       separator: '/',",
          "46:       target_label: 'job',",
          "47:       replacement: '$1',",
          "48:     },",
          "54:     {",
          "55:       source_labels: ['__meta_kubernetes_namespace'],",
          "56:       action: 'replace',",
          "57:       target_label: 'namespace',",
          "58:     },",
          "59:     {",
          "60:       source_labels: ['__meta_kubernetes_pod_name'],",
          "61:       action: 'replace',",
          "62:       target_label: 'pod',  // Not 'pod_name', which disappeared in K8s 1.16.",
          "63:     },",
          "64:     {",
          "65:       source_labels: ['__meta_kubernetes_pod_container_name'],",
          "66:       action: 'replace',",
          "67:       target_label: 'container',  // Not 'container_name', which disappeared in K8s 1.16.",
          "68:     },",
          "71:     {",
          "72:       source_labels: [pod_uid, '__meta_kubernetes_pod_container_name'],",
          "73:       target_label: '__path__',",
          "74:       separator: '/',",
          "75:       replacement: '/var/log/pods/*$1/*.log',",
          "76:     },",
          "77:   ],",
          "78: };",
          "80: {",
          "81:   metrics(config)::",
          "82:     local _config = {",
          "83:       scrape_api_server_endpoints: false,",
          "84:       insecure_skip_verify: false,",
          "86:       cluster_dns_tld: 'local',",
          "87:       cluster_dns_suffix: 'cluster.' + self.cluster_dns_tld,",
          "88:       kubernetes_api_server_address: 'kubernetes.default.svc.%(cluster_dns_suffix)s:443' % self,",
          "90:       ksm_namespace: 'kube-system',",
          "91:       node_exporter_namespace: 'kube-system',",
          "92:     } + config;",
          "94:     [",
          "95:       k8s_tls_config(_config) {",
          "96:         job_name: 'default/kubernetes',",
          "97:         kubernetes_sd_configs: [{",
          "98:           role: if _config.scrape_api_server_endpoints then 'endpoints' else 'service',",
          "99:         }],",
          "100:         scheme: 'https',",
          "101:         tls_config+: {",
          "102:           server_name: 'kubernetes',",
          "103:         },",
          "105:         relabel_configs: [{",
          "106:           source_labels: ['__meta_kubernetes_service_label_component'],",
          "107:           regex: 'apiserver',",
          "108:           action: 'keep',",
          "109:         }],",
          "112:         metric_relabel_configs: [",
          "113:           {",
          "114:             source_labels: ['__name__'],",
          "115:             regex: 'workqueue_queue_duration_seconds_bucket|process_cpu_seconds_total|process_resident_memory_bytes|workqueue_depth|rest_client_request_duration_seconds_bucket|workqueue_adds_total|up|rest_client_requests_total|apiserver_request_total|go_goroutines',",
          "116:             action: 'keep',",
          "117:           },",
          "118:         ],",
          "119:       },",
          "121:       {",
          "122:         job_name: 'kubernetes-pods',",
          "123:         kubernetes_sd_configs: [{",
          "124:           role: 'pod',",
          "125:         }],",
          "133:         relabel_configs: [",
          "135:           {",
          "136:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scrape'],",
          "137:             action: 'drop',",
          "138:             regex: 'false',",
          "139:           },",
          "142:           {",
          "143:             source_labels: ['__meta_kubernetes_pod_container_port_name'],",
          "144:             action: 'keep',",
          "145:             regex: '.*-metrics',",
          "146:           },",
          "149:           {",
          "150:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scheme'],",
          "151:             action: 'replace',",
          "152:             target_label: '__scheme__',",
          "153:             regex: '(https?)',",
          "154:             replacement: '$1',",
          "155:           },",
          "158:           {",
          "159:             source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_path'],",
          "160:             action: 'replace',",
          "161:             target_label: '__metrics_path__',",
          "162:             regex: '(.+)',",
          "163:             replacement: '$1',",
          "164:           },",
          "167:           {",
          "168:             source_labels: ['__address__', '__meta_kubernetes_pod_annotation_prometheus_io_port'],",
          "169:             action: 'replace',",
          "170:             target_label: '__address__',",
          "171:             regex: '(.+?)(\\\\:\\\\d+)?;(\\\\d+)',",
          "172:             replacement: '$1:$3',",
          "173:           },",
          "176:           {",
          "177:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "178:             action: 'drop',",
          "179:             regex: '',",
          "180:           },",
          "183:           {",
          "184:             source_labels: ['__meta_kubernetes_namespace', '__meta_kubernetes_pod_label_name'],",
          "185:             action: 'replace',",
          "186:             separator: '/',",
          "187:             target_label: 'job',",
          "188:             replacement: '$1',",
          "189:           },",
          "192:           {",
          "193:             source_labels: ['__meta_kubernetes_namespace'],",
          "194:             action: 'replace',",
          "195:             target_label: 'namespace',",
          "196:           },",
          "197:           {",
          "198:             source_labels: ['__meta_kubernetes_pod_name'],",
          "199:             action: 'replace',",
          "200:             target_label: 'pod',  // Not 'pod_name', which disappeared in K8s 1.16.",
          "201:           },",
          "202:           {",
          "203:             source_labels: ['__meta_kubernetes_pod_container_name'],",
          "204:             action: 'replace',",
          "205:             target_label: 'container',  // Not 'container_name', which disappeared in K8s 1.16.",
          "206:           },",
          "210:           {",
          "211:             source_labels: [",
          "212:               '__meta_kubernetes_pod_name',",
          "213:               '__meta_kubernetes_pod_container_name',",
          "214:               '__meta_kubernetes_pod_container_port_name',",
          "215:             ],",
          "216:             action: 'replace',",
          "217:             separator: ':',",
          "218:             target_label: 'instance',",
          "219:           },",
          "222:           {",
          "223:             regex: '__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)',",
          "224:             action: 'labelmap',",
          "225:             replacement: '__param_$1',",
          "226:           },",
          "229:           {",
          "230:             source_labels: ['__meta_kubernetes_pod_phase'],",
          "231:             action: 'drop',",
          "232:             regex: 'Succeeded|Failed',",
          "233:           },",
          "234:         ],",
          "235:       },",
          "242:       {",
          "243:         job_name: '%s/kube-state-metrics' % _config.ksm_namespace,",
          "244:         kubernetes_sd_configs: [{",
          "245:           role: 'pod',",
          "246:           namespaces: {",
          "247:             names: [_config.ksm_namespace],",
          "248:           },",
          "249:         }],",
          "251:         relabel_configs: [",
          "253:           {",
          "254:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "255:             regex: 'kube-state-metrics',",
          "256:             action: 'keep',",
          "257:           },",
          "263:           {",
          "264:             source_labels: [",
          "265:               '__meta_kubernetes_pod_name',",
          "266:               '__meta_kubernetes_pod_container_name',",
          "267:               '__meta_kubernetes_pod_container_port_name',",
          "268:             ],",
          "269:             action: 'replace',",
          "270:             separator: ':',",
          "271:             target_label: 'instance',",
          "272:           },",
          "273:         ],",
          "274:       },",
          "278:       {",
          "279:         job_name: '%s/node-exporter' % _config.node_exporter_namespace,",
          "280:         kubernetes_sd_configs: [{",
          "281:           role: 'pod',",
          "282:           namespaces: {",
          "283:             names: [_config.node_exporter_namespace],",
          "284:           },",
          "285:         }],",
          "287:         relabel_configs: [",
          "289:           {",
          "290:             source_labels: ['__meta_kubernetes_pod_label_name'],",
          "291:             regex: 'node-exporter',",
          "292:             action: 'keep',",
          "293:           },",
          "296:           {",
          "297:             source_labels: ['__meta_kubernetes_pod_node_name'],",
          "298:             action: 'replace',",
          "299:             target_label: 'instance',",
          "300:           },",
          "304:           {",
          "305:             source_labels: ['__meta_kubernetes_namespace'],",
          "306:             action: 'replace',",
          "307:             target_label: 'namespace',",
          "308:           },",
          "309:         ],",
          "310:       },",
          "313:       k8s_tls_config(_config) {",
          "314:         job_name: 'kube-system/kubelet',",
          "315:         kubernetes_sd_configs: [{ role: 'node' }],",
          "317:         relabel_configs: [",
          "318:           {",
          "319:             target_label: '__address__',",
          "320:             replacement: _config.kubernetes_api_server_address,",
          "321:           },",
          "322:           {",
          "323:             target_label: '__scheme__',",
          "324:             replacement: 'https',",
          "325:           },",
          "326:           {",
          "327:             source_labels: ['__meta_kubernetes_node_name'],",
          "328:             regex: '(.+)',",
          "329:             target_label: '__metrics_path__',",
          "330:             replacement: '/api/v1/nodes/${1}/proxy/metrics',",
          "331:           },",
          "332:         ],",
          "333:       },",
          "337:       k8s_tls_config(_config) {",
          "338:         job_name: 'kube-system/cadvisor',",
          "339:         kubernetes_sd_configs: [{",
          "340:           role: 'node',",
          "341:         }],",
          "342:         scheme: 'https',",
          "344:         relabel_configs: [",
          "345:           {",
          "346:             target_label: '__address__',",
          "347:             replacement: _config.kubernetes_api_server_address,",
          "348:           },",
          "349:           {",
          "350:             source_labels: ['__meta_kubernetes_node_name'],",
          "351:             regex: '(.+)',",
          "352:             target_label: '__metrics_path__',",
          "353:             replacement: '/api/v1/nodes/${1}/proxy/metrics/cadvisor',",
          "354:           },",
          "355:         ],",
          "357:         metric_relabel_configs: [",
          "359:           {",
          "360:             source_labels: ['__name__', 'image'],",
          "361:             regex: 'container_([a-z_]+);',",
          "362:             action: 'drop',",
          "363:           },",
          "367:           {",
          "368:             source_labels: ['__name__'],",
          "369:             regex: 'container_(network_tcp_usage_total|network_udp_usage_total|tasks_state|cpu_load_average_10s)',",
          "370:             action: 'drop',",
          "371:           },",
          "372:         ],",
          "373:       },",
          "374:     ],",
          "376:   logs(config={}):: [",
          "378:     gen_scrape_config('kubernetes-pods-name', '__meta_kubernetes_pod_uid') {",
          "379:       prelabel_config:: [",
          "381:         {",
          "382:           source_labels: ['__meta_kubernetes_pod_label_name'],",
          "383:           target_label: '__service__',",
          "384:         },",
          "385:       ],",
          "386:     },",
          "389:     gen_scrape_config('kubernetes-pods-app', '__meta_kubernetes_pod_uid') {",
          "390:       prelabel_config:: [",
          "393:         {",
          "394:           source_labels: ['__meta_kubernetes_pod_label_name'],",
          "395:           action: 'drop',",
          "396:           regex: '.+',",
          "397:         },",
          "400:         {",
          "401:           source_labels: ['__meta_kubernetes_pod_label_app'],",
          "402:           target_label: '__service__',",
          "403:         },",
          "404:       ],",
          "405:     },",
          "409:     gen_scrape_config('kubernetes-pods-direct-controllers', '__meta_kubernetes_pod_uid') {",
          "410:       prelabel_config:: [",
          "413:         {",
          "414:           source_labels: ['__meta_kubernetes_pod_label_name', '__meta_kubernetes_pod_label_app'],",
          "415:           separator: '',",
          "416:           action: 'drop',",
          "417:           regex: '.+',",
          "418:         },",
          "422:         {",
          "423:           source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "424:           action: 'drop',",
          "425:           regex: '[0-9a-z-.]+-[0-9a-f]{8,10}',",
          "426:         },",
          "429:         {",
          "430:           source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "431:           target_label: '__service__',",
          "432:         },",
          "433:       ],",
          "434:     },",
          "438:     gen_scrape_config('kubernetes-pods-indirect-controller', '__meta_kubernetes_pod_uid') {",
          "439:       prelabel_config:: [",
          "442:         {",
          "443:           source_labels: ['__meta_kubernetes_pod_label_name', '__meta_kubernetes_pod_label_app'],",
          "444:           separator: '',",
          "445:           action: 'drop',",
          "446:           regex: '.+',",
          "447:         },",
          "450:         {",
          "451:           source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "452:           regex: '[0-9a-z-.]+-[0-9a-f]{8,10}',",
          "453:           action: 'keep',",
          "454:         },",
          "457:         {",
          "458:           source_labels: ['__meta_kubernetes_pod_controller_name'],",
          "459:           action: 'replace',",
          "460:           regex: '([0-9a-z-.]+)-[0-9a-f]{8,10}',",
          "461:           target_label: '__service__',",
          "462:         },",
          "463:       ],",
          "464:     },",
          "468:     gen_scrape_config('kubernetes-pods-static', '__meta_kubernetes_pod_annotation_kubernetes_io_config_mirror') {",
          "469:       prelabel_config:: [",
          "471:         {",
          "472:           action: 'drop',",
          "473:           source_labels: ['__meta_kubernetes_pod_annotation_kubernetes_io_config_mirror'],",
          "474:           regex: '',",
          "475:         },",
          "478:         {",
          "479:           action: 'replace',",
          "480:           source_labels: ['__meta_kubernetes_pod_label_component'],",
          "481:           target_label: '__service__',",
          "482:         },",
          "483:       ],",
          "484:     },",
          "485:   ],",
          "487:   traces(conifg={}):: [",
          "488:     {",
          "489:       bearer_token_file: '/var/run/secrets/kubernetes.io/serviceaccount/token',",
          "490:       job_name: 'kubernetes-pods',",
          "491:       kubernetes_sd_configs: [{ role: 'pod' }],",
          "492:       relabel_configs: [",
          "493:         {",
          "494:           action: 'replace',",
          "495:           source_labels: ['__meta_kubernetes_namespace'],",
          "496:           target_label: 'namespace',",
          "497:         },",
          "498:         {",
          "499:           action: 'replace',",
          "500:           source_labels: ['__meta_kubernetes_pod_name'],",
          "501:           target_label: 'pod',",
          "502:         },",
          "503:         {",
          "504:           action: 'replace',",
          "505:           source_labels: ['__meta_kubernetes_pod_container_name'],",
          "506:           target_label: 'container',",
          "507:         },",
          "508:       ],",
          "509:       tls_config: {",
          "510:         ca_file: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt',",
          "511:         insecure_skip_verify: false,",
          "512:       },",
          "513:     },",
          "514:   ],",
          "515: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet||production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet -> production/tanka/grafana-agent/v2/internal/helpers/logs.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet',",
          "2: local container = k.core.v1.container,",
          "4: {",
          "5:   volumeMounts(config={}):: {",
          "6:     controller+:",
          "9:       k.util.hostVolumeMount('varlog', '/var/log', '/var/log') +",
          "10:       k.util.hostVolumeMount('varlibdockercontainers', '/var/lib/docker/containers', '/var/lib/docker/containers', readOnly=true) +",
          "13:       k.util.hostVolumeMount('etcmachineid', '/etc/machine-id', '/etc/machine-id', readOnly=true),",
          "14:   },",
          "16:   permissions(config={}):: {",
          "17:     container+::",
          "18:       container.mixin.securityContext.withPrivileged(true) +",
          "19:       container.mixin.securityContext.withRunAsUser(0),",
          "20:   }",
          "21: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "3: local cronJob = k.batch.v1beta1.cronJob;",
          "4: local configMap = k.core.v1.configMap;",
          "5: local container = k.core.v1.container;",
          "6: local deployment = k.apps.v1.deployment;",
          "7: local volumeMount = k.core.v1.volumeMount;",
          "8: local volume = k.core.v1.volume;",
          "10: function(",
          "11:   name='grafana-agent-syncer',",
          "12:   namespace='',",
          "13:   config={},",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "17:     image: 'grafana/agentctl:v0.16.1',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "22:   local this = self,",
          "23:   local _configs = std.foldl(",
          "24:     function(agg, cfg)",
          "27:       local name = std.strReplace(cfg.name, '/', '_');",
          "29:       agg { ['%s.yml' % name]: k.util.manifestYaml(cfg) },",
          "30:     _config.configs,",
          "31:     {},",
          "32:   ),",
          "34:   configMap:",
          "35:     configMap.new(name) +",
          "36:     configMap.mixin.metadata.withNamespace(namespace) +",
          "37:     configMap.withData(_configs),",
          "39:   container::",
          "40:     container.new(name, _config.image) +",
          "41:     container.withArgsMixin([",
          "42:       'config-sync',",
          "43:       '--addr=%s' % _config.api,",
          "44:       '/etc/configs',",
          "45:     ]) +",
          "46:     container.withVolumeMounts(volumeMount.new(name, '/etc/configs')),",
          "48:   job:",
          "49:     cronJob.new(name, _config.schedule, this.container) +",
          "50:     cronJob.mixin.metadata.withNamespace(namespace) +",
          "51:     cronJob.mixin.spec.withSuccessfulJobsHistoryLimit(1) +",
          "52:     cronJob.mixin.spec.withFailedJobsHistoryLimit(3) +",
          "53:     cronJob.mixin.spec.jobTemplate.spec.template.spec.withRestartPolicy('OnFailure') +",
          "54:     cronJob.mixin.spec.jobTemplate.spec.template.spec.withActiveDeadlineSeconds(600) +",
          "55:     cronJob.mixin.spec.jobTemplate.spec.withTtlSecondsAfterFinished(120) +",
          "56:     cronJob.mixin.spec.jobTemplate.spec.template.spec.withVolumes([",
          "57:       volume.fromConfigMap(",
          "58:         name=name,",
          "59:         configMapName=this.configMap.metadata.name,",
          "60:       ),",
          "61:     ]),",
          "62: }",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/main.libsonnet||production/tanka/grafana-agent/v2/main.libsonnet": [
          "File: production/tanka/grafana-agent/v2/main.libsonnet -> production/tanka/grafana-agent/v2/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local k = import 'ksonnet-util/kausal.libsonnet';",
          "2: local container = k.core.v1.container;",
          "4: {",
          "5:   new(name='grafana-agent', namespace='')::",
          "6:     (import './internal/base.libsonnet')(name, namespace),",
          "9:   withDeploymentController(replicas=1)::",
          "10:     (import './internal/controllers/deployment.libsonnet')(replicas),",
          "11:   withDaemonSetController()::",
          "12:     (import './internal/controllers/daemonset.libsonnet')(),",
          "13:   withStatefulSetController(replicas=1, volumeClaims=[])::",
          "14:     (import './internal/controllers/statefulset.libsonnet')(replicas, volumeClaims),",
          "17:   newSyncer(name='grafana-agent-syncer', namespace='', config={})::",
          "18:     (import './internal/syncer.libsonnet')(name, namespace, config),",
          "21:   withAgentConfig(config):: { _config+: { agent_config: config } },",
          "22:   withImagesMixin(images):: { _images+: images },",
          "23:   withConfigHash(include=true):: { _config+: { config_hash: include } },",
          "24:   withPortsMixin(ports=[]):: { container+:: container.withPortsMixin(ports) },",
          "25:   withVolumeMountsMixin(mounts=[]):: { container+:: container.withVolumeMountsMixin(mounts) },",
          "26:   withVolumesMixin(volumes=[]):: {",
          "27:     controller+: self.controller.mixin.spec.template.spec.withVolumesMixin(volumes),",
          "28:   },",
          "31:   newKubernetesMetrics(config)::",
          "32:     (import './internal/helpers/k8s.libsonnet').metrics(config),",
          "33:   newKubernetesLogs(config)::",
          "34:     (import './internal/helpers/k8s.libsonnet').logs(config),",
          "35:   newKubernetesTraces(config)::",
          "36:     (import './internal/helpers/k8s.libsonnet').traces(config),",
          "37:   withLogVolumeMounts(config)::",
          "38:     (import './internal/helpers/logs.libsonnet').volumeMounts(config),",
          "39:   withLogPermissions(config)::",
          "40:     (import './internal/helpers/logs.libsonnet').permissions(config),",
          "41: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b88be375ed620fc496dd6e63faf846f4e66a82a",
      "candidate_info": {
        "commit_hash": "2b88be375ed620fc496dd6e63faf846f4e66a82a",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/2b88be375ed620fc496dd6e63faf846f4e66a82a",
        "files": [
          "CHANGELOG.md",
          "Makefile",
          "docs/sources/configuration/integrations/node-exporter-config.md",
          "docs/sources/configuration/integrations/process-exporter-config.md",
          "docs/sources/configuration/server-config.md",
          "docs/sources/operator/custom-resource-quickstart.md",
          "docs/sources/operator/getting-started.md",
          "docs/sources/set-up/install-agent-docker.md",
          "pkg/operator/config/templates/component/metrics/service_monitor.libsonnet",
          "pkg/operator/defaults.go",
          "pkg/server/tls.go",
          "pkg/server/tls_certstore_windows.go",
          "pkg/server/tls_certstore_windows_test.go",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "Get patch v0.26.1 ready  (#1931)\n\n* Update windows certificate store so that the client certificate is no longer needer in certificate store (#1905)\n\n* Update windows certificate store so that the client certificate is not needed in the store.\n\n* Update capitalization\n\n* Add note that tls certificate is breaking change\n\n* move note around\n\n* operator/config: fix label used when targetPort is set in ServiceMonitor (#1925)\n\n* Use opt-out flag for ebpf_exporter when building release artifacts (#1929)\n\nSigned-off-by: Paschalis Tsilias <paschalis.tsilias@grafana.com>\n\n* Update changelog\n\n* Update changelog\n\n* Update version numbers\n\n* remove duplicated change in changelog\n\nCo-authored-by: Robert Fratto <robertfratto@gmail.com>\nCo-authored-by: Paschalis Tsilias <tpaschalis@users.noreply.github.com>",
        "before_after_code_files": [
          "pkg/operator/config/templates/component/metrics/service_monitor.libsonnet||pkg/operator/config/templates/component/metrics/service_monitor.libsonnet",
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "pkg/server/tls.go||pkg/server/tls.go",
          "pkg/server/tls_certstore_windows.go||pkg/server/tls_certstore_windows.go",
          "pkg/server/tls_certstore_windows_test.go||pkg/server/tls_certstore_windows_test.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/config/templates/component/metrics/service_monitor.libsonnet||pkg/operator/config/templates/component/metrics/service_monitor.libsonnet": [
          "File: pkg/operator/config/templates/component/metrics/service_monitor.libsonnet -> pkg/operator/config/templates/component/metrics/service_monitor.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:         action: 'keep',",
          "132:       } else if endpoint.TargetPort != null then (",
          "133:         if endpoint.TargetPort.StrVal != '' then {",
          "135:           regex: endpoint.TargetPort.StrVal,",
          "136:           action: 'keep',",
          "137:         } else if endpoint.TargetPort.IntVal != 0 then {",
          "",
          "[Removed Lines]",
          "134:           source_labels: ['__meta_kubernetes_pod_container_name'],",
          "",
          "[Added Lines]",
          "134:           source_labels: ['__meta_kubernetes_pod_container_port_name'],",
          "",
          "---------------"
        ],
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   \"v0.25.0\",",
          "28:   \"v0.25.1\",",
          "29:   \"v0.26.0\",",
          "32:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   \"v0.26.1\",",
          "",
          "---------------"
        ],
        "pkg/server/tls.go||pkg/server/tls.go": [
          "File: pkg/server/tls.go -> pkg/server/tls.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: type WindowsClientFilter struct {",
          "41:  IssuerCommonNames []string `yaml:\"issuer_common_names,omitempty\"`",
          "42:  SubjectRegEx      string   `yaml:\"subject_regex,omitempty\"`",
          "43:  TemplateID        string   `yaml:\"template_id,omitempty\"`",
          "",
          "[Removed Lines]",
          "39:  Store             string   `yaml:\"store,omitempty\"`",
          "40:  SystemStore       string   `yaml:\"system_store,omitempty\"`",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/server/tls_certstore_windows.go||pkg/server/tls_certstore_windows.go": [
          "File: pkg/server/tls_certstore_windows.go -> pkg/server/tls_certstore_windows.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"crypto/x509\"",
          "8:  \"encoding/asn1\"",
          "9:  \"fmt\"",
          "10:  \"regexp\"",
          "11:  \"sort\"",
          "12:  \"sync\"",
          "13:  \"time\"",
          "21: func (l *tlsListener) applyWindowsCertificateStore(c TLSConfig) error {",
          "",
          "[Removed Lines]",
          "15:  \"github.com/go-kit/log\"",
          "16:  \"github.com/go-kit/log/level\"",
          "18:  \"github.com/github/smimesign/certstore\"",
          "19: )",
          "",
          "[Added Lines]",
          "10:  \"github.com/github/smimesign/certstore\"",
          "11:  \"github.com/go-kit/log\"",
          "12:  \"github.com/go-kit/log/level\"",
          "17: )",
          "20: type winCertStoreHandler struct {",
          "21:  cfg          WindowsCertificateFilter",
          "22:  subjectRegEx *regexp.Regexp",
          "23:  log          log.Logger",
          "25:  winMut       sync.Mutex",
          "26:  serverCert   *x509.Certificate",
          "27:  serverSigner crypto.PrivateKey",
          "31:  serverIdentity certstore.Identity",
          "32:  clientAuth     tls.ClientAuthType",
          "34:  cancelContext context.Context",
          "35: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  if err != nil {",
          "59:   return err",
          "60:  }",
          "68:  config := &tls.Config{",
          "70:   VerifyPeerCertificate: cn.VerifyPeer,",
          "71:   GetCertificate: func(info *tls.ClientHelloInfo) (*tls.Certificate, error) {",
          "72:    cn.winMut.Lock()",
          "",
          "[Removed Lines]",
          "62:  var certPool *x509.CertPool",
          "63:  if cn.clientRootCA != nil {",
          "64:   certPool = x509.NewCertPool()",
          "65:   certPool.AddCert(cn.clientRootCA)",
          "66:  }",
          "69:   ClientCAs:             certPool,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:  return nil",
          "103: }",
          "124: }",
          "126: func (c *winCertStoreHandler) startUpdateTimer() {",
          "",
          "[Removed Lines]",
          "106: var asnTemplateOID = \"1.3.6.1.4.1.311.21.7\"",
          "108: type winCertStoreHandler struct {",
          "109:  cfg          WindowsCertificateFilter",
          "110:  subjectRegEx *regexp.Regexp",
          "111:  log          log.Logger",
          "113:  winMut       sync.Mutex",
          "114:  serverCert   *x509.Certificate",
          "115:  serverSigner crypto.PrivateKey",
          "119:  serverIdentity certstore.Identity",
          "120:  clientRootCA   *x509.Certificate",
          "121:  clientAuth     tls.ClientAuthType",
          "123:  cancelContext context.Context",
          "",
          "[Added Lines]",
          "115: func (c *winCertStoreHandler) VerifyPeer(_ [][]byte, verifiedChains [][]*x509.Certificate) error {",
          "116:  opts := x509.VerifyOptions{}",
          "117:  clientCert := verifiedChains[0][0]",
          "120:  issuerMatches := len(c.cfg.Client.IssuerCommonNames) == 0",
          "121:  for _, cn := range c.cfg.Client.IssuerCommonNames {",
          "122:   if cn == clientCert.Issuer.CommonName {",
          "123:    issuerMatches = true",
          "124:    break",
          "125:   }",
          "126:  }",
          "127:  if !issuerMatches {",
          "128:   return fmt.Errorf(\"unable to match client issuer\")",
          "129:  }",
          "132:  subjectMatches := true",
          "133:  if c.subjectRegEx != nil {",
          "134:   if !c.subjectRegEx.MatchString(clientCert.Subject.CommonName) {",
          "135:    subjectMatches = false",
          "136:   }",
          "137:  }",
          "138:  if !subjectMatches {",
          "139:   return fmt.Errorf(\"unable to match client subject\")",
          "140:  }",
          "143:  if c.cfg.Client.TemplateID != \"\" {",
          "144:   templateid := getTemplateID(clientCert)",
          "145:   if templateid != c.cfg.Client.TemplateID {",
          "146:    return fmt.Errorf(\"unable to match client template id\")",
          "147:   }",
          "148:  }",
          "151:  _, err := clientCert.Verify(opts)",
          "152:  return err",
          "154: }",
          "157: var asnTemplateOID = \"1.3.6.1.4.1.311.21.7\"",
          "159: type templateInformation struct {",
          "160:  Template     asn1.ObjectIdentifier",
          "161:  MajorVersion int",
          "162:  MinorVersion int",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:   c.serverIdentity.Close()",
          "160:  }",
          "161:  var serverIdentity certstore.Identity",
          "165:  defer func() {",
          "",
          "[Removed Lines]",
          "162:  var clientIdentity certstore.Identity",
          "163:  var clientCertificate *x509.Certificate",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:   if serverIdentity != nil && err != nil {",
          "169:    serverIdentity.Close()",
          "170:   }",
          "175:  }()",
          "176:  serverIdentity, err = c.findServerIdentity()",
          "177:  if err != nil {",
          "",
          "[Removed Lines]",
          "172:   if clientIdentity != nil {",
          "173:    clientIdentity.Close()",
          "174:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:   return fmt.Errorf(\"failed getting server signer %w\", err)",
          "188:  }",
          "203:  c.serverCert = sc",
          "204:  c.serverSigner = signer",
          "206:  c.serverIdentity = serverIdentity",
          "207:  return",
          "208: }",
          "",
          "[Removed Lines]",
          "189:  clientIdentity, err = c.findClientIdentity()",
          "190:  if err != nil {",
          "191:   return fmt.Errorf(\"failed getting client identity %w\", err)",
          "192:  }",
          "193:  if clientIdentity == nil && (c.clientAuth == tls.RequireAndVerifyClientCert || c.clientAuth == tls.RequestClientCert) {",
          "194:   return fmt.Errorf(\"client auth requires a certificate (RequireAndVerifyClientCert or RequestClientCert) and failed getting client identity\")",
          "195:  }",
          "196:  if clientIdentity != nil {",
          "197:   clientCertificate, err = clientIdentity.Certificate()",
          "198:   if err != nil {",
          "199:    return fmt.Errorf(\"failed getting client certificate %w\", err)",
          "200:   }",
          "201:  }",
          "205:  c.clientRootCA = clientCertificate",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210: func (c *winCertStoreHandler) findServerIdentity() (certstore.Identity, error) {",
          "211:  return c.findCertificate(c.cfg.Server.SystemStore, c.cfg.Server.Store, c.cfg.Server.IssuerCommonNames, c.cfg.Server.TemplateID, nil, c.getStore)",
          "212: }",
          "222: func (c *winCertStoreHandler) getStore(systemStore string, storeName string) (certstore.Store, error) {",
          "223:  st, err := certstore.StringToStoreType(systemStore)",
          "224:  if err != nil {",
          "",
          "[Removed Lines]",
          "213: func (c *winCertStoreHandler) findClientIdentity() (certstore.Identity, error) {",
          "216:  if c.cfg.Client == nil {",
          "217:   return nil, nil",
          "218:  }",
          "219:  return c.findCertificate(c.cfg.Client.SystemStore, c.cfg.Client.Store, c.cfg.Client.IssuerCommonNames, c.cfg.Client.TemplateID, c.subjectRegEx, c.getStore)",
          "220: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "325:   if err != nil {",
          "326:    return nil, err",
          "327:   }",
          "339:   }",
          "340:  }",
          "341:  return returnIdentities, nil",
          "342: }",
          "348: }",
          "350: func (c *winCertStoreHandler) filterBySubjectRegularExpression(input []certstore.Identity, regEx *regexp.Regexp) ([]certstore.Identity, error) {",
          "",
          "[Removed Lines]",
          "328:   for _, ext := range cert.Extensions {",
          "329:    if ext.Id.String() == asnTemplateOID {",
          "330:     templateInfo := &templateInformation{}",
          "331:     _, err := asn1.Unmarshal(ext.Value, templateInfo)",
          "332:     if err != nil {",
          "333:      return nil, err",
          "334:     }",
          "335:     if templateInfo.Template.String() == id {",
          "336:      returnIdentities = append(returnIdentities, identity)",
          "337:     }",
          "338:    }",
          "344: type templateInformation struct {",
          "345:  Template     asn1.ObjectIdentifier",
          "346:  MajorVersion int",
          "347:  MinorVersion int",
          "",
          "[Added Lines]",
          "341:   templateid := getTemplateID(cert)",
          "342:   if templateid == id {",
          "343:    returnIdentities = append(returnIdentities, identity)",
          "349: func getTemplateID(cert *x509.Certificate) string {",
          "350:  for _, ext := range cert.Extensions {",
          "351:   if ext.Id.String() == asnTemplateOID {",
          "352:    templateInfo := &templateInformation{}",
          "353:    _, err := asn1.Unmarshal(ext.Value, templateInfo)",
          "354:    if err != nil {",
          "355:     return \"\"",
          "356:    }",
          "357:    return templateInfo.Template.String()",
          "358:   }",
          "359:  }",
          "360:  return \"\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "364:  }",
          "365:  return returnIdentities, nil",
          "366: }",
          "",
          "[Removed Lines]",
          "368: func (c *winCertStoreHandler) VerifyPeer(_ [][]byte, verifiedChains [][]*x509.Certificate) error {",
          "369:  opts := x509.VerifyOptions{}",
          "370:  clientCert := verifiedChains[0][0]",
          "371:  _, err := clientCert.Verify(opts)",
          "372:  return err",
          "374: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/server/tls_certstore_windows_test.go||pkg/server/tls_certstore_windows_test.go": [
          "File: pkg/server/tls_certstore_windows_test.go -> pkg/server/tls_certstore_windows_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"crypto/x509/pkix\"",
          "7:  \"encoding/asn1\"",
          "8:  \"math/big\"",
          "10:  \"testing\"",
          "11:  \"time\"",
          "",
          "[Removed Lines]",
          "9:  \"regexp\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:  require.Equal(t, foundCert, shouldFind)",
          "155: }",
          "215: type fakeStore struct {",
          "216:  identities []fakeIdentity",
          "217:  closed     bool",
          "",
          "[Removed Lines]",
          "157: func TestRegularExpression(t *testing.T) {",
          "158:  c := &winCertStoreHandler{",
          "159:   cfg: WindowsCertificateFilter{",
          "160:    Client: &WindowsClientFilter{",
          "161:     Store:        \"My\",",
          "162:     SystemStore:  \"LocalMachine\",",
          "163:     TemplateID:   \"1.2.3\",",
          "164:     SubjectRegEx: \"[Villa]\",",
          "165:    },",
          "166:   },",
          "167:  }",
          "168:  var subjectRegEx *regexp.Regexp",
          "169:  subjectRegEx, err := regexp.Compile(c.cfg.Client.SubjectRegEx)",
          "170:  require.NoError(t, err)",
          "171:  c.subjectRegEx = subjectRegEx",
          "172:  serverSt := newFakeStore()",
          "173:  sc := makeCert(time.Now().Add(time.Duration(-5)*time.Minute), time.Now().Add(5*time.Minute), []int{1, 2, 3}, \"BobVilla\", \"\")",
          "174:  serverSt.identities = append(serverSt.identities, newFakeIdentity(sc))",
          "175:  findCert := func(systemStore, _ string) (certstore.Store, error) {",
          "176:   return serverSt, nil",
          "177:  }",
          "178:  identity, err := c.findCertificate(c.cfg.Client.SystemStore, c.cfg.Client.Store, c.cfg.Client.IssuerCommonNames, c.cfg.Client.TemplateID, c.subjectRegEx, findCert)",
          "180:  require.NoError(t, err)",
          "181:  foundCert, err := identity.Certificate()",
          "182:  require.NoError(t, err)",
          "183:  require.Equal(t, foundCert, sc)",
          "184: }",
          "186: func TestRegularExpression_Fail(t *testing.T) {",
          "187:  c := &winCertStoreHandler{",
          "188:   cfg: WindowsCertificateFilter{",
          "189:    Client: &WindowsClientFilter{",
          "190:     Store:        \"My\",",
          "191:     SystemStore:  \"LocalMachine\",",
          "192:     TemplateID:   \"1.2.3\",",
          "193:     SubjectRegEx: \"[Villa]\",",
          "194:    },",
          "195:   },",
          "196:  }",
          "197:  var subjectRegEx *regexp.Regexp",
          "198:  subjectRegEx, err := regexp.Compile(c.cfg.Client.SubjectRegEx)",
          "199:  require.NoError(t, err)",
          "200:  c.subjectRegEx = subjectRegEx",
          "201:  serverSt := newFakeStore()",
          "202:  sc := makeCert(time.Now().Add(time.Duration(-5)*time.Minute), time.Now().Add(5*time.Minute), []int{1, 2, 3}, \"BAD_EXAMPLE\", \"\")",
          "203:  serverSt.identities = append(serverSt.identities, newFakeIdentity(sc))",
          "205:  findCert := func(systemStore, _ string) (certstore.Store, error) {",
          "206:   return serverSt, nil",
          "207:  }",
          "208:  identity, err := c.findCertificate(c.cfg.Client.SystemStore, c.cfg.Client.Store, c.cfg.Client.IssuerCommonNames, c.cfg.Client.TemplateID, c.subjectRegEx, findCert)",
          "210:  require.Error(t, err)",
          "211:  require.Nil(t, identity)",
          "213: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"0.26.0\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"0.26.1\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.26.0'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.26.1'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.26.0",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.26.1",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.26.0',",
          "19:     agentctl: 'grafana/agentctl:v0.26.0',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.26.1',",
          "19:     agentctl: 'grafana/agentctl:v0.26.1',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.26.0',",
          "15:     agentctl: 'grafana/agentctl:v0.26.0',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.26.1',",
          "15:     agentctl: 'grafana/agentctl:v0.26.1',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.26.0',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.26.1',",
          "",
          "---------------"
        ]
      }
    }
  ]
}