{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee82816dd1bd8fd5eaaa51ea41794736f51ba20a",
      "candidate_info": {
        "commit_hash": "ee82816dd1bd8fd5eaaa51ea41794736f51ba20a",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/ee82816dd1bd8fd5eaaa51ea41794736f51ba20a",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql.expected/.part-00000-ddb834cd-5c9e-4c0b-8074-7238869f186c-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql.expected/part-00000-ddb834cd-5c9e-4c0b-8074-7238869f186c-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql.expected/.part-00000-c43fdd67-7c83-4382-82dd-bb19338fb3f5-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql.expected/part-00000-c43fdd67-7c83-4382-82dd-bb19338fb3f5-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql.expected/.part-00000-aa19cdab-4abc-4173-92d1-8d190775b8bd-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql.expected/part-00000-aa19cdab-4abc-4173-92d1-8d190775b8bd-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql.expected/.part-00000-5afae054-7f80-461f-ab4a-bc19d5f6bda3-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql.expected/part-00000-5afae054-7f80-461f-ab4a-bc19d5f6bda3-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql.expected/.part-00000-7f12f067-288d-4fa8-8ded-2613ec384f20-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql.expected/part-00000-7f12f067-288d-4fa8-8ded-2613ec384f20-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql.expected/.part-00000-17e15acc-11b7-42f9-8faf-913c2d4cbf62-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql.expected/part-00000-17e15acc-11b7-42f9-8faf-913c2d4cbf62-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql.expected/.part-00000-0220bf7e-f8b3-475f-b50b-09916d61637a-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql.expected/part-00000-0220bf7e-f8b3-475f-b50b-09916d61637a-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql.expected/.part-00000-29e1e80c-4fef-4263-9331-273675453c90-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql.expected/part-00000-29e1e80c-4fef-4263-9331-273675453c90-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql.expected/.part-00000-0745836b-bc11-4eac-807d-02c54e8b1337-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql.expected/part-00000-0745836b-bc11-4eac-807d-02c54e8b1337-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql.expected/.part-00000-ca31db76-924c-4045-bd66-369c632ce1e1-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql.expected/part-00000-ca31db76-924c-4045-bd66-369c632ce1e1-c000.csv",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql.expected/._SUCCESS.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql.expected/.part-00000-87c05bff-a47f-46e0-afcc-7bb0652e6880-c000.csv.crc",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql.expected/_SUCCESS",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql.expected/part-00000-87c05bff-a47f-46e0-afcc-7bb0652e6880-c000.csv",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java",
          "query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java",
          "query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java",
          "query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"
        ],
        "message": "KYLIN-4936 Exactly aggregation can't transform to project",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql",
          "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java",
          "query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java||query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java",
          "query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java||query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java",
          "query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java||query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2938:         return Integer.parseInt(getOptional(\"kylin.query.bitmap-upper-bound\", \"10000000\"));",
          "2939:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2941:     public boolean needReplaceAggWhenExactlyMatched() {",
          "2942:         return Boolean.parseBoolean(getOptional(\"kylin.query.need-replace-exactly-agg\", \"true\"));",
          "2943:     }",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query00.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "20:        sum(price) as GMV, count(1) as TRANS_CNT,",
          "21:        min(price) as minP, max(price) as maxP,",
          "22:        COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID)",
          "23: from test_kylin_fact",
          "24: group by LSTG_FORMAT_NAME,SLR_SEGMENT_CD,LSTG_SITE_ID",
          "25: ;{\"scanRowCount\":300,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[14336],\"exactlyMatched\":[true]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query01.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select LSTG_FORMAT_NAME,LSTG_SITE_ID,",
          "20:        sum(price) as GMV, count(1) as TRANS_CNT,",
          "21:        min(price) as minP, max(price) as maxP",
          "22: from test_kylin_fact",
          "23: where SLR_SEGMENT_CD > 3",
          "24: group by LSTG_FORMAT_NAME ,LSTG_SITE_ID",
          "25: ;{\"scanRowCount\":300,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[14336],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query02.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "20:        sum(price) as GMV, count(1) as TRANS_CNT,",
          "21:        min(price) as minP, max(price) as maxP,",
          "22:        COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID)",
          "23: from test_kylin_fact",
          "24: group by LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD",
          "25: union all",
          "26: select LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "27:        sum(price) as GMV, count(1) as TRANS_CNT,",
          "28:        min(price) as minP, max(price) as maxP,",
          "29:        COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID)",
          "30: from test_kylin_fact",
          "31: group by LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD",
          "32: ;{\"scanRowCount\":600,\"scanBytes\":0,\"scanFiles\":2,\"cuboidId\":[14336,14336],\"exactlyMatched\":[false,true,true]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query03.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: -- union subquery under join",
          "20: select  count(*) as cnt,TEST_A.LSTG_FORMAT_NAME",
          "21: FROM TEST_KYLIN_FACT as TEST_A",
          "22: inner join (",
          "23:     (",
          "24:         select LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "25:                sum(price) as GMV, count(1) as TRANS_CNT,",
          "26:                min(price) as minP, max(price) as maxP,",
          "27:                COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID)",
          "28:         from test_kylin_fact",
          "29:         group by LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD",
          "30:     )",
          "31:     union",
          "32:     (",
          "33:         select LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "34:                sum(price) as GMV, count(1) as TRANS_CNT,",
          "35:                min(price) as minP, max(price) as maxP,",
          "36:                COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID)",
          "37:         from test_kylin_fact",
          "38:         group by LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD",
          "39:      )",
          "40: ) TEST_B",
          "41: on TEST_A.LSTG_FORMAT_NAME = TEST_B.LSTG_FORMAT_NAME",
          "42: group by TEST_A.LSTG_FORMAT_NAME",
          "43: ;{\"scanRowCount\":900,\"scanBytes\":0,\"scanFiles\":3,\"cuboidId\":[14336,14336,14336],\"exactlyMatched\":[false,false,true,true]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query04.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: SELECT LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD, test_cal_dt.WEEK_BEG_DT,",
          "20:        sum(price) as GMV, COUNT(1) AS TRANS_CNT, min(price) as minP, max(price) as maxP,",
          "21:        COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID),",
          "22:        intersect_count( TEST_COUNT_DISTINCT_BITMAP, lstg_format_name, array['FP-GTC']) as a,",
          "23:        intersect_value( TEST_COUNT_DISTINCT_BITMAP, lstg_format_name, array['FP-GTC']) as a",
          "24: FROM test_kylin_fact",
          "25:          inner JOIN edw.test_cal_dt as test_cal_dt",
          "26:                     ON test_kylin_fact.cal_dt = test_cal_dt.cal_dt",
          "27:          inner JOIN test_category_groupings",
          "28:                     ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id",
          "29:          inner JOIN edw.test_sites as test_sites",
          "30:                     ON test_kylin_fact.lstg_site_id = test_sites.site_id",
          "31: WHERE test_cal_dt.WEEK_BEG_DT >= '2001-09-09'",
          "32:   AND test_cal_dt.WEEK_BEG_DT <= '2018-05-16'",
          "33: GROUP BY LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,test_cal_dt.WEEK_BEG_DT",
          "34: ;{\"scanRowCount\":10280,\"scanBytes\":0,\"scanFiles\":3,\"cuboidId\":[276480],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query05.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select CAL_DT, WEEK_BEG_DT from edw.test_cal_dt",
          "20: ;{\"scanRowCount\":731,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[-1],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query06.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "18: select",
          "19:     (case grouping(LSTG_SITE_ID) when 1 then 'ALL' else cast(LSTG_SITE_ID as varchar(256)) end) as dt,",
          "20:     (case grouping(slr_segment_cd) when 1 then 'ALL' else cast(slr_segment_cd as varchar(256)) end) as cd,",
          "21:     (case grouping(lstg_format_name) when 1 then 'ALL' else lstg_format_name end) as name,",
          "22:     sum(price) as GMV,",
          "23:     count(*) as TRANS_CNT from test_kylin_fact",
          "24: group by cube(lstg_format_name, LSTG_SITE_ID, slr_segment_cd)",
          "25: ;{\"scanRowCount\":300,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[14336],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query07.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "18: select",
          "19:     (case grouping(LSTG_SITE_ID) when 1 then 'ALL' else cast(LSTG_SITE_ID as varchar(256)) end) as dt,",
          "20:     (case grouping(slr_segment_cd) when 1 then 'ALL' else cast(slr_segment_cd as varchar(256)) end) as cd,",
          "21:     (case grouping(lstg_format_name) when 1 then 'ALL' else lstg_format_name end) as name,",
          "22:     sum(price) as GMV,",
          "23:     count(*) as TRANS_CNT from test_kylin_fact",
          "24: group by rollup(lstg_format_name, LSTG_SITE_ID, slr_segment_cd)",
          "25: ;{\"scanRowCount\":300,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[14336],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query08.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "18: select",
          "19:     (case grouping(LSTG_SITE_ID) when 1 then 'ALL' else cast(LSTG_SITE_ID as varchar(256)) end) as dt,",
          "20:     (case grouping(slr_segment_cd) when 1 then 'ALL' else cast(slr_segment_cd as varchar(256)) end) as cd,",
          "21:     (case grouping(lstg_format_name) when 1 then 'ALL' else lstg_format_name end) as name,",
          "22:     sum(price) as GMV,",
          "23:     count(*) as TRANS_CNT from test_kylin_fact",
          "24: group by grouping sets((lstg_format_name, LSTG_SITE_ID, slr_segment_cd), (LSTG_SITE_ID, slr_segment_cd), (lstg_format_name, slr_segment_cd))",
          "25: ;{\"scanRowCount\":300,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[14336],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query09.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: SELECT LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD,",
          "20:        sum(price) as GMV, COUNT(1) AS TRANS_CNT, min(price) as minP, max(price) as maxP,",
          "21:        COUNT(DISTINCT TEST_COUNT_DISTINCT_BITMAP), COUNT(DISTINCT SELLER_ID)",
          "22: FROM test_kylin_fact",
          "23:          inner JOIN test_category_groupings",
          "24:                     ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id",
          "25:          inner JOIN edw.test_sites as test_sites",
          "26:                     ON test_kylin_fact.lstg_site_id = test_sites.site_id",
          "27: GROUP BY LSTG_FORMAT_NAME,LSTG_SITE_ID,SLR_SEGMENT_CD",
          "28: ;{\"scanRowCount\":562,\"scanBytes\":0,\"scanFiles\":2,\"cuboidId\":[14336],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql||kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql": [
          "File: kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql -> kylin-it/src/test/resources/query/sql_exactly_agg/query10.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select min(cal_dt) as min_cal_dt",
          "20: from test_kylin_fact",
          "21: ;{\"scanRowCount\":731,\"scanBytes\":0,\"scanFiles\":1,\"cuboidId\":[262144],\"exactlyMatched\":[false]}",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/KylinFunctions.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.spark.sql.catalyst.analysis.FunctionRegistry.FunctionBuilder",
          "23: import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}",
          "24: import org.apache.spark.sql.types._",
          "26: import org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction",
          "27: import org.apache.spark.sql.udaf.{ApproxCountDistinct, IntersectCount, PreciseCountDistinct}",
          "",
          "[Removed Lines]",
          "25: import org.apache.spark.sql.catalyst.expressions.{BinaryExpression, DictEncode, Expression, ExpressionInfo, ExpressionUtils, ImplicitCastInputTypes, In, KylinAddMonths, Like, Literal, RoundBase, SplitPart, Sum0, TimestampAdd, TimestampDiff, Truncate, UnaryExpression}",
          "",
          "[Added Lines]",
          "25: import org.apache.spark.sql.catalyst.expressions.{ApproxCountDistinctDecode, BinaryExpression,",
          "26:   DictEncode, Expression, ExpressionInfo, ExpressionUtils, ImplicitCastInputTypes, In,",
          "27:   KylinAddMonths, Like, Literal, PreciseCountDistinctDecode, RoundBase, SplitPart, Sum0,",
          "28:   TimestampAdd, TimestampDiff, Truncate, UnaryExpression}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     Column(KylinSubtractMonths(date0.expr, date1.expr))",
          "63:   }",
          "65:   def precise_count_distinct(column: Column): Column =",
          "66:     Column(PreciseCountDistinct(column.expr).toAggregateExpression())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   def precise_count_distinct_decode(column: Column): Column =",
          "69:     Column(PreciseCountDistinctDecode(column.expr))",
          "71:   def approx_count_distinct_decode(column: Column, precision: Int): Column =",
          "72:     Column(ApproxCountDistinctDecode(column.expr, Literal(precision)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     FunctionEntity(ExpressionUtils.expression[TimestampDiff](\"TIMESTAMPDIFF\")),",
          "92:     FunctionEntity(ExpressionUtils.expression[Truncate](\"TRUNCATE\")),",
          "93:     FunctionEntity(ExpressionUtils.expression[DictEncode](\"DICTENCODE\")),",
          "95: }",
          "97: case class FunctionEntity(",
          "",
          "[Removed Lines]",
          "94:     FunctionEntity(ExpressionUtils.expression[SplitPart](\"split_part\")))",
          "",
          "[Added Lines]",
          "103:     FunctionEntity(ExpressionUtils.expression[SplitPart](\"split_part\")),",
          "104:     FunctionEntity(ExpressionUtils.expression[PreciseCountDistinctDecode]",
          "105:       (\"precise_count_distinct_decode\")),",
          "106:     FunctionEntity(ExpressionUtils.expression[ApproxCountDistinctDecode]",
          "107:       (\"approx_count_distinct_decode\"))",
          "108:   )",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/catalyst/expressions/KylinExpresssions.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.spark.sql.catalyst.expressions",
          "20: import org.apache.kylin.engine.spark.common.util.KylinDateTimeUtils",
          "21: import org.apache.spark.dict.{NBucketDictionary, NGlobalDictionary}",
          "22: import org.apache.spark.sql.catalyst.InternalRow",
          "23: import org.apache.spark.sql.catalyst.expressions.aggregate.DeclarativeAggregate",
          "25: import org.apache.spark.sql.types._",
          "",
          "[Removed Lines]",
          "24: import org.apache.spark.sql.catalyst.expressions.codegen.{CodegenContext, ExprCode}",
          "",
          "[Added Lines]",
          "20: import com.esotericsoftware.kryo.io.{Input, KryoDataInput}",
          "22: import org.apache.kylin.measure.hllc.HLLCounter",
          "26: import org.apache.spark.sql.catalyst.expressions.codegen.Block._",
          "27: import org.apache.spark.sql.catalyst.expressions.codegen.{CodeGenerator, CodegenContext, ExprCode}",
          "29: import org.roaringbitmap.longlong.Roaring64NavigableMap",
          "31: import java.nio.ByteBuffer",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:   }",
          "362:   override def children: Seq[Expression] = Seq(left, mid, right)",
          "363: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: }",
          "371: case class PreciseCountDistinctDecode(_child: Expression)",
          "372:   extends UnaryExpression with ExpectsInputTypes {",
          "374:   override def child: Expression = _child",
          "376:   override def inputTypes: Seq[AbstractDataType] = Seq(BinaryType)",
          "378:   override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {",
          "379:     val childEval = child.genCode(ctx)",
          "380:     ev.copy(code = code\"\"\"",
          "381:          | ${childEval.code}",
          "382:          | boolean ${ev.isNull} = ${childEval.isNull};",
          "383:          | ${CodeGenerator.javaType(dataType)} ${ev.value} = 0l;",
          "384:          | if (!${ev.isNull} && (${childEval.value}.length > 0)) {",
          "385:          |   try {",
          "386:          |     org.roaringbitmap.longlong.Roaring64NavigableMap roaringMap =",
          "387:          |       new org.roaringbitmap.longlong.Roaring64NavigableMap();",
          "388:          |     roaringMap.deserialize(",
          "389:          |       new com.esotericsoftware.kryo.io.KryoDataInput(",
          "390:          |         new com.esotericsoftware.kryo.io.Input(${childEval.value})));",
          "391:          |     ${ev.value} = roaringMap.getLongCardinality();",
          "392:          |   } catch (java.lang.Exception e) {",
          "393:          |     throw new RuntimeException(e);",
          "394:          |   }",
          "395:          | }",
          "396:          |\"\"\".stripMargin",
          "397:     )",
          "398:   }",
          "400:   override protected def nullSafeEval(bytes: Any): Any = {",
          "401:     val storageBytes = bytes.asInstanceOf[Array[Byte]]",
          "402:     if (storageBytes.nonEmpty) {",
          "403:       try {",
          "404:         val roaringMap = new Roaring64NavigableMap()",
          "405:         roaringMap.deserialize(new KryoDataInput(new Input(storageBytes)))",
          "406:         roaringMap.getLongCardinality",
          "407:       } catch {",
          "408:         case other: Throwable =>",
          "409:           throw new RuntimeException(other)",
          "410:       }",
          "411:     } else {",
          "412:       0L",
          "413:     }",
          "414:   }",
          "416:   override def eval(input: InternalRow): Any = {",
          "417:     if (input != null) {",
          "418:       super.eval(input)",
          "419:     } else {",
          "420:       0L",
          "421:     }",
          "422:   }",
          "424:   override def dataType: DataType = LongType",
          "426:   override def prettyName: String = \"precise_count_distinct_decode\"",
          "427: }",
          "429: case class ApproxCountDistinctDecode(_left: Expression, _right: Expression)",
          "430:   extends BinaryExpression with ExpectsInputTypes {",
          "432:   def left: Expression = _left",
          "433:   def right: Expression = _right",
          "435:   override def inputTypes: Seq[AbstractDataType] = Seq(BinaryType, IntegerType)",
          "437:   override protected def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {",
          "438:     val leftGen = left.genCode(ctx)",
          "439:     val rightGen = right.genCode(ctx)",
          "440:     ev.copy(code = code\"\"\"",
          "441:          | ${leftGen.code}",
          "442:          | ${rightGen.code}",
          "443:          | boolean ${ev.isNull} = ${leftGen.isNull} || ${rightGen.isNull};",
          "444:          | ${CodeGenerator.javaType(dataType)} ${ev.value} = 0l;",
          "445:          | if (!${ev.isNull} && (${leftGen.value}.length > 0)) {",
          "446:          |   try {",
          "447:          |     org.apache.kylin.measure.hllc.HLLCounter counter =",
          "448:          |       new org.apache.kylin.measure.hllc.HLLCounter(${rightGen.value});",
          "449:          |     counter.readRegisters(java.nio.ByteBuffer.wrap(${leftGen.value}));",
          "450:          |     ${ev.value} = counter.getCountEstimate();",
          "451:          |   } catch (java.lang.Exception e) {",
          "452:          |     throw new RuntimeException(e);",
          "453:          |   }",
          "454:          | }",
          "455:          |\"\"\".stripMargin",
          "456:     )",
          "457:   }",
          "459:   override protected def nullSafeEval(bytes: Any, precision: Any): Any = {",
          "460:     try {",
          "461:       val storageFormat = bytes.asInstanceOf[Array[Byte]]",
          "462:       val preciseValue = precision.asInstanceOf[Int]",
          "463:       if (storageFormat.nonEmpty) {",
          "464:         val counter = new HLLCounter(preciseValue)",
          "465:         counter.readRegisters(ByteBuffer.wrap(storageFormat))",
          "466:         counter.getCountEstimate",
          "467:       } else {",
          "468:         0L",
          "469:       }",
          "470:     } catch {",
          "471:       case other: Throwable =>",
          "472:         throw new RuntimeException(other)",
          "473:     }",
          "474:   }",
          "476:   override def eval(input: InternalRow): Any = {",
          "477:     if (input != null) {",
          "478:       super.eval(input)",
          "479:     } else {",
          "480:       0L",
          "481:     }",
          "482:   }",
          "484:   override def dataType: DataType = LongType",
          "486:   override def prettyName: String = \"approx_count_distinct_decode\"",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/AggregatePlan.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:       .map(groupId => col(schemaNames.apply(groupId)))",
          "54:       .toList",
          "60:       val prjList = groupList ++ aggCols",
          "61:       logInfo(s\"Query exactly match index, skip agg, project $prjList.\")",
          "62:       dataFrame.select(prjList: _*)",
          "",
          "[Removed Lines]",
          "56:     if (rel.getContext != null && rel.getContext.isExactlyAggregate) {",
          "58:       val aggCols = rel.getRewriteAggCalls.asScala",
          "59:         .map(call => col(schemaNames.apply(call.getArgList.get(0)))).toList",
          "",
          "[Added Lines]",
          "56:     rel.getContext.isExactlyAggregate = isExactlyCuboidMatched(rel, groupList)",
          "57:     if (rel.getContext.isExactlyAggregate) {",
          "59:       val hash = System.identityHashCode(rel).toString",
          "60:       val aggCols = rel.getRewriteAggCalls.asScala.zipWithIndex.map {",
          "61:         case (call: KylinAggregateCall, index: Int)",
          "62:           if OLAPAggregateRel.getAggrFuncName(call).equals(\"COUNT_DISTINCT\") =>",
          "63:           val dataType = call.getFunc.getReturnDataType",
          "64:           val funcName = OLAPAggregateRel.getAggrFuncName(call)",
          "65:           val argNames = call.getArgList.asScala.map(dataFrame.schema.names.apply(_))",
          "66:           val columnName = argNames.map(col)",
          "67:           val aggName = SchemaProcessor.replaceToAggravateSchemaName(index, funcName, hash, argNames: _*)",
          "68:           if (call.isHllCountDistinctFunc) {",
          "69:             KylinFunctions",
          "70:               .approx_count_distinct_decode(columnName.head, dataType.getPrecision)",
          "71:               .alias(aggName)",
          "72:           } else if (call.isBitmapCountDistinctFunc) {",
          "74:             KylinFunctions.precise_count_distinct_decode(columnName.head).alias(aggName)",
          "75:           } else {",
          "76:             throw new IllegalArgumentException(",
          "77:               s\"\"\"Unsupported function name $funcName\"\"\")",
          "78:           }",
          "79:         case (call: Any, index: Int) =>",
          "80:           col(schemaNames.apply(call.getArgList.get(0)))",
          "81:       }.toList",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         val registeredFuncName = RuntimeHelper.registerSingleByColName(funcName, dataType)",
          "115:         val aggName = SchemaProcessor.replaceToAggravateSchemaName(index, funcName, hash, argNames: _*)",
          "116:         if (funcName == FunctionDesc.FUNC_COUNT_DISTINCT) {",
          "119:               .approx_count_distinct(columnName.head, dataType.getPrecision)",
          "120:               .alias(aggName)",
          "123:             KylinFunctions.precise_count_distinct(columnName.head).alias(aggName)",
          "124:           } else {",
          "",
          "[Removed Lines]",
          "117:           if (dataType.getName == \"hllc\") {",
          "118:             org.apache.spark.sql.KylinFunctions",
          "121:           } else if (call.getAggregation().getName.equalsIgnoreCase(FunctionDesc.FUNC_COUNT_DISTINCT)) {",
          "",
          "[Added Lines]",
          "139:           if (call.isHllCountDistinctFunc) {",
          "140:             KylinFunctions",
          "143:           } else if (call.isBitmapCountDistinctFunc) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:               case (column: Column, _) => column",
          "130:             }",
          "131:             val upperBound = KylinConfig.getInstanceFromEnv.getBitmapValuesUpperBound",
          "133:               KylinFunctions.intersect_count(upperBound, columns.toList: _*)",
          "134:                 .alias(SchemaProcessor",
          "135:                   .replaceToAggravateSchemaName(index, FunctionDesc.FUNC_INTERSECT_COUNT, hash,",
          "",
          "[Removed Lines]",
          "132:             if (call.getAggregation().getName.equalsIgnoreCase(FunctionDesc.FUNC_INTERSECT_COUNT)) {",
          "",
          "[Added Lines]",
          "154:             if (call.isIntersectCountFunc) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:       .asInstanceOf[KylinAggregateCall]",
          "200:       .isSum0",
          "201:   }",
          "202: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:   val exactlyMatchSupportedFunctions = List(\"SUM\", \"MIN\", \"MAX\", \"COUNT_DISTINCT\")",
          "227:   def isExactlyCuboidMatched(rel: OLAPAggregateRel, groupByList: List[Column]): Boolean = {",
          "228:     val olapContext = rel.getContext",
          "229:     if (olapContext == null || olapContext.realization == null) return false",
          "230:     if (!olapContext.realization.getConfig.needReplaceAggWhenExactlyMatched) return false",
          "232:     val cuboid = olapContext.storageContext.getCuboid",
          "233:     if (cuboid == null) return false",
          "234:     if (olapContext.hasJoin) return false",
          "236:     if (rel.getGroupType() != Aggregate.Group.SIMPLE) return false",
          "238:     for (call <- rel.getRewriteAggCalls.asScala) {",
          "239:       if (!exactlyMatchSupportedFunctions.contains(OLAPAggregateRel.getAggrFuncName(call))) {",
          "240:         return false",
          "241:       }",
          "243:       if (call.getArgList.size() > 1) return false",
          "244:     }",
          "245:     val groupByCols = rel.getGroups.asScala.map(_.getIdentity).toSet",
          "246:     if (groupByCols.isEmpty) return false",
          "247:     val cuboidDims = cuboid.getColumns.asScala.map(_.getIdentity).toSet",
          "248:     groupByCols.equals(cuboidDims)",
          "249:   }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/query/runtime/plans/TableScanPlan.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     val query = new HadoopFileStorageQuery(cubeInstance)",
          "66:     val returnTupleInfo = olapContext.returnTupleInfo",
          "67:     val request = query.getStorageQueryRequest(",
          "70:       returnTupleInfo)",
          "72:     val cuboid = request.getCuboid",
          "73:     val gridTableMapping = cuboid.getCuboidToGridTableMapping",
          "",
          "[Removed Lines]",
          "68:       olapContext.storageContext,",
          "69:       olapContext.getSQLDigest,",
          "71:     request.getGroups",
          "",
          "[Added Lines]",
          "68:       olapContext,",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/kylin/storage/spark/HadoopFileStorageQuery.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.storage.spark;",
          "21: import org.apache.kylin.shaded.com.google.common.collect.Sets;",
          "22: import java.util.Collection;",
          "23: import java.util.LinkedHashSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.kylin.query.relnode.OLAPContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         throw new UnsupportedOperationException(\"Unsupported getGTStorage.\");",
          "50:     }",
          "54:                                                             TupleInfo returnTupleInfo) {",
          "55:         context.setStorageQuery(this);",
          "",
          "[Removed Lines]",
          "53:     public GTCubeStorageQueryRequest getStorageQueryRequest(StorageContext context, SQLDigest sqlDigest,",
          "",
          "[Added Lines]",
          "52:     public GTCubeStorageQueryRequest getStorageQueryRequest(OLAPContext olapContext,",
          "54:         StorageContext context = olapContext.storageContext;",
          "55:         SQLDigest sqlDigest = olapContext.getSQLDigest();",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java": [
          "File: kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java -> kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBuildAndQueryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:             tasks.add(new QueryCallable(CompareLevel.SAME, joinType, \"sql_dynamic\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:             tasks.add(new QueryCallable(CompareLevel.SAME, joinType, \"sql_exactly_agg\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:                     List<Quadruple<String, String, NExecAndComp.ITQueryMetrics, List<String>>> queries =",
          "356:                             NExecAndComp.fetchQueries2(KYLIN_SQL_BASE_DIR + File.separator + sqlFolder);",
          "357:                     NExecAndComp.execAndCompareNew2(queries, getProject(), compareLevel, joinType,",
          "359:                 }",
          "360:             } catch (Throwable th) {",
          "361:                 logger.error(\"Query fail on: {}\", identity);",
          "",
          "[Removed Lines]",
          "358:                             null);",
          "",
          "[Added Lines]",
          "360:                             null, sqlFolder);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java": [
          "File: kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java -> kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NExecAndComp.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:     public static void execAndCompareNew2(List<Quadruple<String, String, ITQueryMetrics, List<String>>> queries,",
          "188:                                           String prj, CompareLevel compareLevel, String joinType,",
          "190:         for (Quadruple<String, String, ITQueryMetrics, List<String>> query : queries) {",
          "192:             QueryContextFacade.resetCurrent();",
          "",
          "[Removed Lines]",
          "189:                                           Map<String, CompareEntity> recAndQueryResult) throws IOException{",
          "",
          "[Added Lines]",
          "189:                                           Map<String, CompareEntity> recAndQueryResult,",
          "190:                                           String sqlFolder) throws IOException{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:                             query.getFirst());",
          "243:                     throw new IllegalArgumentException(\"Query metrics not match!\");",
          "244:                 }",
          "245:             }",
          "247:             Dataset<Row> cubeResult = queryResult.getFirst();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:                 if (sqlFolder.equalsIgnoreCase(\"sql_exactly_agg\")) {",
          "247:                     if (!query.getThird().getExactlyMatched()",
          "248:                             .equals(collectedMetrics.getExactlyMatched())) {",
          "249:                         logger.error(\"Query metrics not match, excepted: {}, results: {} ! Please check \" +",
          "250:                                         \"SQL: {} in {}\", query.getThird(), collectedMetrics, sql,",
          "251:                                 query.getFirst());",
          "252:                         throw new IllegalArgumentException(\"Query metrics not match!\");",
          "253:                     }",
          "254:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "712:         long scanFiles = response.getTotalScanFiles();",
          "713:         long scanBytes = response.getTotalScanBytes();",
          "714:         List<Long> hitCuboids = new ArrayList<>();",
          "715:         Collection<OLAPContext> olapContexts = OLAPContext.getThreadLocalContexts();",
          "716:         if (olapContexts != null) {",
          "717:             Iterator<OLAPContext> olapContextIterator = olapContexts.iterator();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:         List<Boolean> exactlyMatcheds = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:                 if (olapContext.storageContext.getCuboid() != null) {",
          "721:                     hitCuboids.add(olapContext.storageContext.getCuboid().getId());",
          "722:                 }",
          "723:             }",
          "724:         }",
          "725:         if (hitCuboids.size() == 0) {",
          "726:             hitCuboids.add(-1L);",
          "727:             logger.warn(\"Query: ({}) not hit cuboid!\", sql);",
          "728:         }",
          "730:     }",
          "732:     private static Pair<List<List<String>>, List<SelectedColumnMeta>> createResponseFromResultSet(ResultSet resultSet) throws SQLException{",
          "",
          "[Removed Lines]",
          "729:         return new ITQueryMetrics(scanRowCount, scanBytes, scanFiles, hitCuboids);",
          "",
          "[Added Lines]",
          "734:                 exactlyMatcheds.add(olapContext.isExactlyAggregate);",
          "741:         return new ITQueryMetrics(scanRowCount, scanBytes, scanFiles, hitCuboids, exactlyMatcheds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "884:         private long scanBytes;",
          "885:         private long scanFiles;",
          "886:         private List<Long> cuboidId;",
          "888:         public ITQueryMetrics() {",
          "889:             this.scanRowCount = -1L;",
          "890:             this.scanBytes = -1L;",
          "891:             this.scanFiles = -1L;",
          "892:             this.cuboidId = new ArrayList<>();",
          "893:         }",
          "896:             this.scanRowCount = scanRowCount;",
          "897:             this.scanBytes = scanBytes;",
          "898:             this.scanFiles = scanFiles;",
          "899:             this.cuboidId = cuboidId;",
          "900:         }",
          "902:         public long getScanRowCount() {",
          "",
          "[Removed Lines]",
          "895:         public ITQueryMetrics(long scanRowCount, long scanBytes, long scanFiles, List<Long> cuboidId) {",
          "",
          "[Added Lines]",
          "899:         private List<Boolean> exactlyMatched;",
          "906:             this.exactlyMatched = new ArrayList<>();",
          "909:         public ITQueryMetrics(long scanRowCount, long scanBytes, long scanFiles,",
          "910:                               List<Long> cuboidId, List<Boolean> exactlyMatched) {",
          "915:             this.exactlyMatched = exactlyMatched;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "931:             this.cuboidId = cuboidId;",
          "932:         }",
          "934:         public boolean equals(ITQueryMetrics metrics) {",
          "935:             return this.cuboidId.equals(metrics.getCuboidId())",
          "936:                     && this.scanFiles == metrics.getScanFiles()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950:         public List<Boolean> getExactlyMatched() {",
          "951:             return exactlyMatched;",
          "952:         }",
          "954:         public void setExactlyMatched(List<Boolean> exactlyMatched) {",
          "955:             this.exactlyMatched = exactlyMatched;",
          "956:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "941:         public String toString() {",
          "942:             StringBuffer sb = new StringBuffer(\"QueryMetrics: \");",
          "943:             sb.append(\"cuboidId=\").append(this.getCuboidId()).append(\",\");",
          "944:             sb.append(\"scanBytes=\").append(this.getScanBytes()).append(\",\");",
          "945:             sb.append(\"scanFiles=\").append(this.getScanFiles()).append(\",\");",
          "946:             sb.append(\"scanRowCount=\").append(this.getScanRowCount());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "968:             sb.append(\"exactlyMatched=\").append(this.getExactlyMatched()).append(\",\");",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java||query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java": [
          "File: query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java -> query/src/main/java/org/apache/kylin/query/relnode/KylinAggregateCall.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.relnode;",
          "21: import org.apache.calcite.rel.core.AggregateCall;",
          "22: import org.apache.kylin.metadata.model.FunctionDesc;",
          "24: public class KylinAggregateCall extends AggregateCall {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import org.apache.kylin.measure.bitmap.BitmapMeasureType;",
          "23: import org.apache.kylin.measure.hllc.HLLCMeasureType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     public FunctionDesc getFunc() {",
          "38:         return func;",
          "39:     }",
          "40: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     public boolean isHllCountDistinctFunc() {",
          "44:         return (this.getFunc().getExpression()",
          "45:                 .equalsIgnoreCase(FunctionDesc.FUNC_COUNT_DISTINCT) &&",
          "46:           this.getFunc().getReturnDataType().getName()",
          "47:                   .equalsIgnoreCase(HLLCMeasureType.DATATYPE_HLLC));",
          "48:     }",
          "50:     public boolean isBitmapCountDistinctFunc() {",
          "51:         return (this.getFunc().getExpression()",
          "52:                         .equalsIgnoreCase(FunctionDesc.FUNC_COUNT_DISTINCT) &&",
          "53:                 this.getFunc().getReturnDataType().getName()",
          "54:                         .equalsIgnoreCase(BitmapMeasureType.DATATYPE_BITMAP) &&",
          "55:                 this.getAggregation().getName()",
          "56:                         .equalsIgnoreCase(FunctionDesc.FUNC_COUNT_DISTINCT));",
          "57:     }",
          "59:     public boolean isIntersectCountFunc() {",
          "60:         return (this.getFunc().getExpression()",
          "61:                         .equalsIgnoreCase(FunctionDesc.FUNC_COUNT_DISTINCT) &&",
          "62:                 this.getFunc().getReturnDataType().getName()",
          "63:                         .equalsIgnoreCase(BitmapMeasureType.DATATYPE_BITMAP) &&",
          "64:                 this.getAggregation().getName()",
          "65:                         .equalsIgnoreCase(FunctionDesc.FUNC_INTERSECT_COUNT));",
          "66:     }",
          "68:     public boolean isIntersectValueFunc() {",
          "69:         return (this.getFunc().getExpression()",
          "70:                         .equalsIgnoreCase(FunctionDesc.FUNC_COUNT_DISTINCT) &&",
          "71:                 this.getFunc().getReturnDataType().getName()",
          "72:                         .equalsIgnoreCase(BitmapMeasureType.DATATYPE_BITMAP) &&",
          "73:                 this.getAggregation().getName()",
          "74:                         .equalsIgnoreCase(FunctionDesc.FUNC_INTERSECT_VALUE));",
          "75:     }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java||query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java": [
          "File: query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java -> query/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:         ret.setDigest(\"_KY_COUNT(\" + colRef.getName() + \")\");",
          "688:         return ret;",
          "689:     }",
          "690: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691:     public List<TblColRef> getGroups() {",
          "692:         return groups;",
          "693:     }",
          "695:     public void setGroups(List<TblColRef> groups) {",
          "696:         this.groups = groups;",
          "697:     }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java||query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java": [
          "File: query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java -> query/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     public boolean groupByExpression = false; // checkout if group by column has operator",
          "140:     public boolean afterOuterAggregate = false;",
          "141:     public boolean disableLimitPushdown = !KylinConfig.getInstanceFromEnv().isLimitPushDownEnabled();",
          "145:     public IRealization realization;",
          "",
          "[Removed Lines]",
          "142:     public boolean isExactlyAggregate;",
          "",
          "[Added Lines]",
          "142:     public boolean isExactlyAggregate = false;",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java -> server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.util.Collection;",
          "38: import java.util.Collections;",
          "39: import java.util.HashMap;",
          "41: import java.util.Iterator;",
          "42: import java.util.LinkedList;",
          "43: import java.util.List;",
          "44: import java.util.Locale;",
          "45: import java.util.Map;",
          "46: import java.util.NoSuchElementException;",
          "49: import javax.annotation.PostConstruct;",
          "",
          "[Removed Lines]",
          "40: import java.util.HashSet;",
          "47: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     public void logQuery(final String queryId, final SQLRequest request, final SQLResponse response) {",
          "310:         final String user = aclEvaluate.getCurrentUserName();",
          "311:         final List<String> realizationNames = new LinkedList<>();",
          "313:         float duration = response.getDuration() / (float) 1000;",
          "314:         boolean storageCacheUsed = response.isStorageCacheUsed();",
          "315:         boolean isPushDown = response.isPushDown();",
          "",
          "[Removed Lines]",
          "312:         final Set<Long> cuboidIds = new HashSet<Long>();",
          "",
          "[Added Lines]",
          "310:         final List<Long> cuboidIds = new LinkedList<>();",
          "311:         final List<Boolean> isExactlyMatchSet = new LinkedList<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:                     cuboidIds.add(cuboid.getId());",
          "323:                 }",
          "325:                 if (ctx.realization != null) {",
          "326:                     realizationNames.add(ctx.realization.getCanonicalName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:                 isExactlyMatchSet.add(ctx.isExactlyAggregate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:         stringBuilder.append(\"Project: \").append(request.getProject()).append(newLine);",
          "371:         stringBuilder.append(\"Realization Names: \").append(realizationNames).append(newLine);",
          "372:         stringBuilder.append(\"Cuboid Ids: \").append(cuboidIds).append(newLine);",
          "373:         stringBuilder.append(\"Total scan count: \").append(response.getTotalScanCount()).append(newLine);",
          "374:         stringBuilder.append(\"Total scan files: \").append(response.getTotalScanFiles()).append(newLine);",
          "375:         stringBuilder.append(\"Total metadata time: \").append(response.getMetadataTime()).append(\"ms\").append(newLine);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:         stringBuilder.append(\"Is Exactly Matched: \").append(isExactlyMatchSet).append(newLine);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3aa72f3fdc1265aa2a819e5a475f4419d8efcc71",
      "candidate_info": {
        "commit_hash": "3aa72f3fdc1265aa2a819e5a475f4419d8efcc71",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/3aa72f3fdc1265aa2a819e5a475f4419d8efcc71",
        "files": [
          "build/conf/spark-driver-log4j.properties",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java"
        ],
        "message": "KYLIN-4875 Remove executor configurations when execute resource detect step (local mode)",
        "before_after_code_files": [
          "build/conf/spark-driver-log4j.properties||build/conf/spark-driver-log4j.properties",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java||kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "build/conf/spark-driver-log4j.properties||build/conf/spark-driver-log4j.properties": [
          "File: build/conf/spark-driver-log4j.properties -> build/conf/spark-driver-log4j.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: log4j.rootLogger=INFO,hdfs",
          "21: log4j.logger.org.apache.kylin=DEBUG",
          "22: log4j.logger.org.springframework=WARN",
          "24: log4j.logger.org.apache.spark=WARN",
          "27: # hdfs file appender",
          "28: log4j.appender.hdfs=org.apache.kylin.engine.spark.common.logging.SparkDriverHdfsLogAppender",
          "",
          "[Removed Lines]",
          "23: log4j.logger.org.springframework.security=WARN",
          "25: log4j.logger.org.apache.spark.ContextCleaner=WARN",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2923:         try {",
          "2926:             String path1 = \"\";",
          "2929:             }",
          "2931:             return getOptional(\"kylin.query.engine.sparder-additional-files\", path1);",
          "",
          "[Removed Lines]",
          "2922:     public String sparkUploadFiles() {",
          "2924:             File storageFile = FileUtils.findFile(KylinConfigBase.getKylinHome() + \"/conf\",",
          "2925:                     \"spark-executor-log4j.properties\");",
          "2927:             if (storageFile != null) {",
          "2928:                 path1 = storageFile.getCanonicalPath();",
          "",
          "[Added Lines]",
          "2924:     public String sparkUploadFiles(boolean isLocal) {",
          "2927:             if (!isLocal) {",
          "2928:                 File storageFile = FileUtils.findFile(KylinConfigBase.getKylinHome() + \"/conf\",",
          "2929:                         \"spark-executor-log4j.properties\");",
          "2930:                 if (storageFile != null) {",
          "2931:                     path1 = storageFile.getCanonicalPath();",
          "2933:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2934:         }",
          "2935:     }",
          "2937:     @ConfigTag(ConfigTag.Tag.NOT_CLEAR)",
          "2938:     public String sparderJars() {",
          "2939:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2945:     public String sparkUploadFiles() {",
          "2946:         return sparkUploadFiles(false);",
          "2947:     }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java||kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java": [
          "File: kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java -> kylin-spark-project/kylin-spark-common/src/main/java/org/apache/kylin/engine/spark/common/logging/AbstractHdfsLogAppender.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         logBufferQue = new LinkedBlockingDeque<>(getLogQueueCapacity());",
          "134:         appendHdfsService = Executors.newSingleThreadExecutor();",
          "135:         appendHdfsService.execute(this::checkAndFlushLog);",
          "138:         LogLog.warn(String.format(Locale.ROOT, \"%s started ...\", getAppenderName()));",
          "139:     }",
          "",
          "[Removed Lines]",
          "136:         Runtime.getRuntime().addShutdownHook(new Thread(this::close));",
          "",
          "[Added Lines]",
          "136:         Runtime.getRuntime().addShutdownHook(new Thread(this::closing));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         }",
          "154:     }",
          "156:     @Override",
          "157:     public void close() {",
          "158:         synchronized (closeLock) {",
          "159:             if (!this.closed) {",
          "160:                 this.closed = true;",
          "162:                 List<LoggingEvent> transaction = Lists.newArrayList();",
          "163:                 try {",
          "164:                     flushLog(getLogBufferQue().size(), transaction);",
          "167:                     if (appendHdfsService != null && !appendHdfsService.isShutdown()) {",
          "168:                         appendHdfsService.shutdownNow();",
          "169:                     }",
          "170:                 } catch (Exception e) {",
          "171:                     transaction.forEach(this::printLoggingEvent);",
          "172:                     try {",
          "",
          "[Removed Lines]",
          "166:                     closeWriter();",
          "",
          "[Added Lines]",
          "159:     public void closing() {",
          "160:         LogLog.warn(String.format(Locale.ROOT, \"%s flush log when shutdown ...\",",
          "161:                 getAppenderName()));",
          "162:         synchronized (closeLock) {",
          "163:             if (!this.closed) {",
          "164:                 List<LoggingEvent> transaction = Lists.newArrayList();",
          "165:                 try {",
          "166:                     flushLog(getLogBufferQue().size(), transaction);",
          "167:                 } catch (Exception e) {",
          "168:                     transaction.forEach(this::printLoggingEvent);",
          "169:                     try {",
          "170:                         while (!getLogBufferQue().isEmpty()) {",
          "171:                             printLoggingEvent(getLogBufferQue().take());",
          "172:                         }",
          "173:                     } catch (Exception ie) {",
          "174:                         LogLog.error(\"clear the logging buffer queue failed!\", ie);",
          "175:                     }",
          "176:                 }",
          "177:             }",
          "178:         }",
          "179:     }",
          "183:         LogLog.warn(String.format(Locale.ROOT, \"%s attempt to closing ...\",",
          "184:                 getAppenderName()));",
          "194:                     closeWriter();",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NResourceDetectStep.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: public class NResourceDetectStep extends NSparkExecutable {",
          "32:     public NResourceDetectStep() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     private final static String[] excludedSparkConf = new String[] {\"spark.executor.cores\",",
          "32:             \"spark.executor.memoryOverhead\", \"spark.executor.extraJavaOptions\",",
          "33:             \"spark.executor.instances\", \"spark.executor.memory\", \"spark.executor.extraClassPath\"};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         sparkConfigOverride.put(\"spark.master\", \"local\");",
          "63:         sparkConfigOverride.put(\"spark.sql.autoBroadcastJoinThreshold\", \"-1\");",
          "64:         sparkConfigOverride.put(\"spark.sql.adaptive.enabled\", \"false\");",
          "65:         return sparkConfigOverride;",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:         for (String sparkConf : excludedSparkConf) {",
          "70:             if (sparkConfigOverride.containsKey(sparkConf)) {",
          "71:                 sparkConfigOverride.remove(sparkConf);",
          "72:             }",
          "73:         }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:         }",
          "338:         sb.append(String.format(Locale.ROOT, \" -Dkylin.hdfs.working.dir=%s \", hdfsWorkingDir));",
          "339:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.log4j.appender.hdfs.File=%s \", sparkDriverHdfsLogPath));",
          "340:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.rest.server.ip=%s \", serverIp));",
          "341:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.rest.server.port=%s \", serverPort));",
          "342:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.param.taskId=%s \", getId()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:         sb.append(String.format(Locale.ROOT, \" -Dlog4j.debug=%s \", \"true\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:         for (Entry<String, String> entry : sparkConfs.entrySet()) {",
          "357:             appendSparkConf(sb, entry.getKey(), entry.getValue());",
          "358:         }",
          "360:         appendSparkConf(sb, \"spark.driver.extraClassPath\", kylinJobJar);",
          "362:         if (sparkConfs.containsKey(\"spark.sql.hive.metastore.jars\")) {",
          "363:             jars = jars + \",\" + sparkConfs.get(\"spark.sql.hive.metastore.jars\");",
          "364:         }",
          "366:         sb.append(\"--name job_step_%s \");",
          "367:         sb.append(\"--jars %s %s %s\");",
          "368:         String cmd = String.format(Locale.ROOT, sb.toString(), hadoopConf, sparkSubmitCmd, getId(), jars, kylinJobJar,",
          "",
          "[Removed Lines]",
          "359:         appendSparkConf(sb, \"spark.executor.extraClassPath\", Paths.get(kylinJobJar).getFileName().toString());",
          "365:         sb.append(\"--files \").append(config.sparkUploadFiles()).append(\" \");",
          "",
          "[Added Lines]",
          "360:         if (!isLocalMaster(sparkConfs)) {",
          "361:             appendSparkConf(sb, \"spark.executor.extraClassPath\", Paths.get(kylinJobJar).getFileName().toString());",
          "362:         }",
          "368:         String sparkUploadFiles = config.sparkUploadFiles(isLocalMaster(sparkConfs));",
          "369:         if (StringUtils.isNotBlank(sparkUploadFiles)) {",
          "370:             sb.append(\"--files \").append(sparkUploadFiles).append(\" \");",
          "371:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:         }",
          "411:     }",
          "413:     public boolean needMergeMetadata() {",
          "414:         return false;",
          "415:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:     protected boolean isLocalMaster(Map<String, String> sparkConfs) {",
          "420:         String master = sparkConfs.getOrDefault(\"spark.master\", \"yarn\");",
          "421:         return (master.equalsIgnoreCase(\"local\")) || (master.toLowerCase(Locale.ROOT)",
          "422:                 .startsWith(\"local[\"));",
          "423:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63a106813db149893e9a2ecae762698b23322ae8",
      "candidate_info": {
        "commit_hash": "63a106813db149893e9a2ecae762698b23322ae8",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/63a106813db149893e9a2ecae762698b23322ae8",
        "files": [
          "build/bin/prepare_hadoop_dependency.sh"
        ],
        "message": "KYLIN-5906 fix cdh6",
        "before_after_code_files": [
          "build/bin/prepare_hadoop_dependency.sh||build/bin/prepare_hadoop_dependency.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "build/bin/prepare_hadoop_dependency.sh||build/bin/prepare_hadoop_dependency.sh": [
          "File: build/bin/prepare_hadoop_dependency.sh -> build/bin/prepare_hadoop_dependency.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   cp ${configuration_jars} ${KYLIN_HOME}/lib",
          "131: fi",
          "134:    if [ -d \"${KYLIN_HOME}/bin/hadoop3_jars/cdh6\" ]; then",
          "135:      find ${SPARK_HOME}/jars -name \"hive-exec-*.jar\" -exec rm -f {} \\;",
          "136:      echo \"Copy jars from ${KYLIN_HOME}/bin/hadoop3_jars/cdh6\"",
          "138:    fi",
          "139: fi",
          "",
          "[Removed Lines]",
          "133: if [ $(is_cdh_6_x) == 1 ]; then",
          "137:      cp ${KYLIN_HOME}/hadoop3_jars/cdh6/*.jar ${SPARK_HOME}/jars",
          "",
          "[Added Lines]",
          "133: if [[ $(is_cdh_6_x) == 1 ]]; then",
          "137:      cp ${KYLIN_HOME}/bin/hadoop3_jars/cdh6/*.jar ${SPARK_HOME}/jars",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "faf9c3dc891ac13a917771e3561298ac05efe720",
      "candidate_info": {
        "commit_hash": "faf9c3dc891ac13a917771e3561298ac05efe720",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/faf9c3dc891ac13a917771e3561298ac05efe720",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/AclService.java",
          "server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java",
          "server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java"
        ],
        "message": "KYLIN-4714 Failed to revoke role access of the project\n\n(cherry picked from commit 65e1a703f6d1aac3a6a6cdf28b959dabd2d9e522)",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/AclService.java||server-base/src/main/java/org/apache/kylin/rest/service/AclService.java",
          "server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java||server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java",
          "server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java||server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/service/AclService.java||server-base/src/main/java/org/apache/kylin/rest/service/AclService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/AclService.java -> server-base/src/main/java/org/apache/kylin/rest/service/AclService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:             updater.update(record);",
          "308:             try {",
          "312:             } catch (WriteConflictException ise) {",
          "313:                 if (retry <= 0) {",
          "",
          "[Removed Lines]",
          "309:                 crud.save(record);",
          "310:                 return acl; // here we are done",
          "",
          "[Added Lines]",
          "309:                 AclRecord newRecord = crud.save(record);",
          "310:                 return new MutableAclRecord(newRecord); // here we are done",
          "",
          "---------------"
        ],
        "server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java||server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java": [
          "File: server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java -> server/src/test/java/org/apache/kylin/rest/controller/AccessControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         AccessRequest groupAccessRequest = getAccessRequest(sid, permission, false);",
          "265:         accessController.grant(PROJECT_INSTANCE, uuid, groupAccessRequest);",
          "266:     }",
          "267: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     @Test",
          "268:     public void testIndexInAclOfResponse() throws IOException {",
          "269:         swichToAdmin();",
          "270:         List<ProjectInstance> projects = projectController.getProjects(10000, 0);",
          "271:         assertTrue(projects.size() > 0);",
          "272:         ProjectInstance project = projects.get(0);",
          "273:         ManagedUser user = new ManagedUser(\"user_0\", \"kylin\", false, \"all_users\");",
          "274:         userService.createUser(user);",
          "275:         user = new ManagedUser(\"user_1\", \"kylin\", false, \"all_users\");",
          "276:         userService.createUser(user);",
          "277:         user = new ManagedUser(\"user_2\", \"kylin\", false, \"all_users\");",
          "278:         userService.createUser(user);",
          "279:         List<AccessEntryResponse> aes = accessController.getAccessEntities(PROJECT_INSTANCE,",
          "280:             project.getUuid());",
          "281:         assertEquals(0, aes.size());",
          "283:         AccessRequest accessRequest = getAccessRequest(\"user_0\", ADMINISTRATION, true);",
          "284:         aes = accessController.grant(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "285:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "286:             project.getUuid())));",
          "287:         assertEquals(1, aes.size());",
          "289:         int aeId = 0;",
          "290:         for (AccessEntryResponse ae : aes) {",
          "291:             aeId = (Integer) ae.getId();",
          "292:         }",
          "293:         accessRequest = new AccessRequest();",
          "294:         accessRequest.setAccessEntryId(aeId);",
          "295:         accessRequest.setPermission(READ);",
          "297:         aes = accessController.update(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "298:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "299:             project.getUuid())));",
          "300:         assertEquals(1, aes.size());",
          "302:         accessRequest = getAccessRequest(\"user_1\", ADMINISTRATION, true);",
          "303:         aes = accessController.grant(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "304:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "305:             project.getUuid())));",
          "306:         assertEquals(2, aes.size());",
          "308:         accessRequest = getAccessRequest(\"user_2\", ADMINISTRATION, true);",
          "309:         aes = accessController.grant(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "310:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "311:             project.getUuid())));",
          "312:         assertEquals(3, aes.size());",
          "315:         accessRequest = new AccessRequest();",
          "316:         accessRequest.setAccessEntryId(1);",
          "317:         accessRequest.setSid(\"user_1\");",
          "318:         accessRequest.setPrincipal(true);",
          "319:         aes = accessController.revoke(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "320:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "321:             project.getUuid())));",
          "322:         assertEquals(2, aes.size());",
          "324:         accessRequest = getAccessRequest(\"user_1\", ADMINISTRATION, true);",
          "325:         aes = accessController.grant(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "326:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "327:             project.getUuid())));",
          "328:         assertEquals(3, aes.size());",
          "330:         accessRequest = new AccessRequest();",
          "331:         accessRequest.setAccessEntryId(1);",
          "332:         accessRequest.setSid(\"user_1\");",
          "333:         accessRequest.setPrincipal(true);",
          "334:         aes = accessController.revoke(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "335:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "336:             project.getUuid())));",
          "337:         assertEquals(2, aes.size());",
          "339:         accessRequest = new AccessRequest();",
          "340:         accessRequest.setAccessEntryId(0);",
          "341:         accessRequest.setSid(\"user_0\");",
          "342:         accessRequest.setPrincipal(true);",
          "343:         aes = accessController.revoke(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "344:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "345:             project.getUuid())));",
          "346:         assertEquals(1, aes.size());",
          "348:         accessRequest = new AccessRequest();",
          "349:         accessRequest.setAccessEntryId(0);",
          "350:         accessRequest.setSid(\"user_2\");",
          "351:         accessRequest.setPrincipal(true);",
          "352:         aes = accessController.revoke(PROJECT_INSTANCE, project.getUuid(), accessRequest);",
          "353:         assertTrue(checkAccessEntryResponse(aes, accessController.getAccessEntities(PROJECT_INSTANCE,",
          "354:             project.getUuid())));",
          "355:         assertEquals(0, aes.size());",
          "356:     }",
          "358:     private boolean checkAccessEntryResponse(List<AccessEntryResponse> left, List<AccessEntryResponse> right) {",
          "359:         for (int i = 0; i < left.size(); i++) {",
          "360:             AccessEntryResponse leftAer = left.get(i);",
          "361:             AccessEntryResponse rightAer = right.get(i);",
          "362:             if (!(leftAer.getId().equals(rightAer.getId())",
          "363:                 && leftAer.getPermission().getMask() == rightAer.getPermission().getMask()",
          "364:                 && leftAer.getSid().equals(rightAer.getSid())",
          "365:                 && leftAer.isGranting() == rightAer.isGranting())) {",
          "366:                 return false;",
          "367:             }",
          "368:         }",
          "369:         return true;",
          "370:     }",
          "",
          "---------------"
        ],
        "server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java||server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java": [
          "File: server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java -> server/src/test/java/org/apache/kylin/rest/service/AccessServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:         accessService.revokeProjectPermission(\"ANALYST\", MetadataConstants.TYPE_USER);",
          "215:         Assert.assertEquals(0, accessService.getAcl(ae).getEntries().size());",
          "216:     }",
          "217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     @Test",
          "219:     public void testIndexInAclRecord() throws IOException {",
          "220:         List<ProjectInstance> projects = projectService.listProjects(10000, 0);",
          "221:         assertTrue(projects.size() > 0);",
          "222:         ProjectInstance project = projects.get(0);",
          "223:         RootPersistentEntity ae = accessService.getAclEntity(PROJECT_INSTANCE, project.getUuid());",
          "224:         final Map<Sid, Permission> sidToPerm = new HashMap<>();",
          "225:         for (int i = 0; i < 3; i++) {",
          "226:             sidToPerm.put(new PrincipalSid(\"user_\" + i), AclPermission.ADMINISTRATION);",
          "227:         }",
          "228:         accessService.batchGrant(ae, sidToPerm);",
          "229:         Assert.assertEquals(3, accessService.getAcl(ae).getEntries().size());",
          "232:         MutableAclRecord newRecord = accessService.revoke(ae, 1);",
          "233:         Assert.assertTrue(checkIndexInAclRecord(newRecord, accessService.getAcl(ae)));",
          "234:         Assert.assertEquals(2, accessService.getAcl(ae).getEntries().size());",
          "237:         PrincipalSid sid = new PrincipalSid(\"user_1\");",
          "238:         newRecord = accessService.grant(ae, AclPermission.ADMINISTRATION, sid);",
          "239:         Assert.assertTrue(checkIndexInAclRecord(newRecord, accessService.getAcl(ae)));",
          "240:         Assert.assertEquals(3, accessService.getAcl(ae).getEntries().size());",
          "243:         newRecord = accessService.update(ae, 2, AclPermission.OPERATION);",
          "244:         Assert.assertTrue(checkIndexInAclRecord(newRecord, accessService.getAcl(ae)));",
          "245:         Assert.assertEquals(3, accessService.getAcl(ae).getEntries().size());",
          "247:         newRecord = accessService.revoke(ae, 0);",
          "248:         Assert.assertTrue(checkIndexInAclRecord(newRecord, accessService.getAcl(ae)));",
          "249:         Assert.assertEquals(2, accessService.getAcl(ae).getEntries().size());",
          "251:         newRecord = accessService.revoke(ae, 0);",
          "252:         Assert.assertTrue(checkIndexInAclRecord(newRecord, accessService.getAcl(ae)));",
          "253:         Assert.assertEquals(1, accessService.getAcl(ae).getEntries().size());",
          "255:         newRecord = accessService.revoke(ae, 0);",
          "256:         Assert.assertTrue(checkIndexInAclRecord(newRecord, accessService.getAcl(ae)));",
          "257:         Assert.assertEquals(0, accessService.getAcl(ae).getEntries().size());",
          "258:     }",
          "260:     private boolean checkIndexInAclRecord(MutableAclRecord left, MutableAclRecord right) {",
          "261:         for (int i = 0; i < left.getEntries().size(); i++) {",
          "262:             AccessControlEntry leftAce = left.getEntries().get(i);",
          "263:             AccessControlEntry rightAce = right.getEntries().get(i);",
          "264:             if (!(leftAce.equals(rightAce) && leftAce.getId().equals(rightAce.getId()))) {",
          "265:                 return false;",
          "266:             }",
          "267:         }",
          "268:         return true;",
          "269:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3b963bbe4d91330455cf129e40a25e965c13e5d",
      "candidate_info": {
        "commit_hash": "b3b963bbe4d91330455cf129e40a25e965c13e5d",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b3b963bbe4d91330455cf129e40a25e965c13e5d",
        "files": [
          "cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java",
          "cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java",
          "server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/UserService.java",
          "server/src/main/resources/ehcache-test.xml",
          "server/src/main/resources/ehcache.xml"
        ],
        "message": "KYLIN-4505 Change guava cache to spring cache for user authentication\n\n(cherry picked from commit 84064d32a64c9f942e6c4cc0e1fac243a5ee2b89)",
        "before_after_code_files": [
          "cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java||cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java",
          "cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java||cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java",
          "server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java||server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java||server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/UserService.java||server-base/src/main/java/org/apache/kylin/rest/service/UserService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java||cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java": [
          "File: cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java -> cache/src/main/java/org/apache/kylin/cache/cachemanager/CacheConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: public class CacheConstants {",
          "22:     public static final String QUERY_CACHE = \"StorageCache\";",
          "23: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     public static final String USER_CACHE = \"UserCache\";",
          "",
          "---------------"
        ],
        "cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java||cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java": [
          "File: cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java -> cache/src/main/java/org/apache/kylin/cache/cachemanager/MemcachedCacheManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     protected Collection<? extends Cache> loadCaches() {",
          "60:         Cache successCache = new MemCachedCacheAdaptor(",
          "61:                 new MemcachedChunkingCache(MemcachedCache.create(memcachedCacheConfig, CacheConstants.QUERY_CACHE)));",
          "63:         addCache(successCache);",
          "65:         Collection<String> names = getCacheNames();",
          "66:         Collection<Cache> caches = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         Cache userCache = new MemCachedCacheAdaptor(",
          "63:                 new MemcachedCache(MemcachedCache.create(memcachedCacheConfig, CacheConstants.USER_CACHE, 86400)));",
          "66:         addCache(userCache);",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java||server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java -> server-base/src/main/java/org/apache/kylin/rest/security/KylinAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.security;",
          "21: import java.nio.charset.Charset;",
          "22: import java.util.Arrays;",
          "25: import org.apache.kylin.common.KylinConfig;",
          "26: import org.apache.kylin.rest.service.UserService;",
          "27: import org.slf4j.Logger;",
          "28: import org.slf4j.LoggerFactory;",
          "29: import org.springframework.beans.factory.annotation.Autowired;",
          "30: import org.springframework.beans.factory.annotation.Qualifier;",
          "31: import org.springframework.security.authentication.AuthenticationProvider;",
          "32: import org.springframework.security.core.Authentication;",
          "33: import org.springframework.security.core.AuthenticationException;",
          "",
          "[Removed Lines]",
          "23: import java.util.concurrent.TimeUnit;",
          "",
          "[Added Lines]",
          "21: import static org.apache.kylin.cache.cachemanager.CacheConstants.USER_CACHE;",
          "26: import javax.annotation.PostConstruct;",
          "35: import org.springframework.cache.Cache;",
          "36: import org.springframework.cache.CacheManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.springframework.security.core.userdetails.UsernameNotFoundException;",
          "37: import org.springframework.util.Assert;",
          "42: import org.apache.kylin.shaded.com.google.common.hash.HashFunction;",
          "43: import org.apache.kylin.shaded.com.google.common.hash.Hashing;",
          "",
          "[Removed Lines]",
          "39: import org.apache.kylin.shaded.com.google.common.cache.CacheBuilder;",
          "40: import org.apache.kylin.shaded.com.google.common.cache.RemovalListener;",
          "41: import org.apache.kylin.shaded.com.google.common.cache.RemovalNotification;",
          "",
          "[Added Lines]",
          "45: import org.apache.kylin.shaded.com.google.common.base.Preconditions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:     private static final Logger logger = LoggerFactory.getLogger(KylinAuthenticationProvider.class);",
          "63:     @Autowired",
          "64:     @Qualifier(\"userService\")",
          "65:     UserService userService;",
          "68:     private AuthenticationProvider authenticationProvider;",
          "",
          "[Removed Lines]",
          "52:     private final static org.apache.kylin.shaded.com.google.common.cache.Cache<String, Authentication> userCache = CacheBuilder.newBuilder()",
          "53:             .maximumSize(KylinConfig.getInstanceFromEnv().getServerUserCacheMaxEntries())",
          "54:             .expireAfterWrite(KylinConfig.getInstanceFromEnv().getServerUserCacheExpireSeconds(), TimeUnit.SECONDS)",
          "55:             .removalListener(new RemovalListener<String, Authentication>() {",
          "56:                 @Override",
          "57:                 public void onRemoval(RemovalNotification<String, Authentication> notification) {",
          "58:                     KylinAuthenticationProvider.logger.debug(\"User cache {} is removed due to {}\",",
          "59:                             notification.getKey(), notification.getCause());",
          "60:                 }",
          "61:             }).build();",
          "",
          "[Added Lines]",
          "60:     @Autowired",
          "61:     private CacheManager cacheManager;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:         hf = Hashing.murmur3_128();",
          "77:     }",
          "79:     @Override",
          "80:     public Authentication authenticate(Authentication authentication) throws AuthenticationException {",
          "82:         byte[] hashKey = hf.hashString(authentication.getName() + authentication.getCredentials(), Charset.defaultCharset()).asBytes();",
          "83:         String userKey = Arrays.toString(hashKey);",
          "92:             SecurityContextHolder.getContext().setAuthentication(authed);",
          "93:         } else {",
          "94:             try {",
          "",
          "[Removed Lines]",
          "85:         if (userService.isEvictCacheFlag()) {",
          "86:             userCache.invalidateAll();",
          "87:             userService.setEvictCacheFlag(false);",
          "88:         }",
          "89:         Authentication authed = userCache.getIfPresent(userKey);",
          "91:         if (null != authed) {",
          "",
          "[Added Lines]",
          "75:     @PostConstruct",
          "76:     public void init() {",
          "77:         Preconditions.checkNotNull(cacheManager, \"cacheManager is not injected yet\");",
          "78:     }",
          "86:         Authentication authed;",
          "87:         Cache.ValueWrapper authedUser = cacheManager.getCache(USER_CACHE).get(userKey);",
          "88:         if (authedUser != null) {",
          "89:             authed = (Authentication) authedUser.get();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:                     userService.updateUser(user);",
          "120:                 }",
          "123:             } catch (AuthenticationException e) {",
          "124:                 logger.error(\"Failed to auth user: \" + authentication.getName(), e);",
          "125:                 throw e;",
          "",
          "[Removed Lines]",
          "122:                 userCache.put(userKey, authed);",
          "",
          "[Added Lines]",
          "120:                 cacheManager.getCache(USER_CACHE).put(userKey, authed);",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java||server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java -> server-base/src/main/java/org/apache/kylin/rest/service/KylinUserService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     protected ResourceStore aclStore;",
          "126:     @PostConstruct",
          "127:     public void init() throws IOException {",
          "128:         aclStore = ResourceStore.getStore(KylinConfig.getInstanceFromEnv());",
          "",
          "[Removed Lines]",
          "114:     private boolean evictCacheFlag = false;",
          "116:     @Override",
          "117:     public boolean isEvictCacheFlag() {",
          "118:         return evictCacheFlag;",
          "119:     }",
          "121:     @Override",
          "122:     public void setEvictCacheFlag(boolean evictCacheFlag) {",
          "123:         this.evictCacheFlag = evictCacheFlag;",
          "124:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:         }",
          "157:         getKylinUserManager().update(managedUser);",
          "158:         logger.trace(\"update user : {}\", user.getUsername());",
          "160:     }",
          "162:     @Override",
          "",
          "[Removed Lines]",
          "159:         setEvictCacheFlag(true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:         }",
          "167:         getKylinUserManager().delete(userName);",
          "168:         logger.trace(\"delete user : {}\", userName);",
          "170:     }",
          "172:     @Override",
          "",
          "[Removed Lines]",
          "169:         setEvictCacheFlag(true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/UserService.java||server-base/src/main/java/org/apache/kylin/rest/service/UserService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/UserService.java -> server-base/src/main/java/org/apache/kylin/rest/service/UserService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.service;",
          "24: import java.io.IOException;",
          "25: import java.util.List;",
          "33:     List<ManagedUser> listUsers() throws IOException;",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.rest.security.ManagedUser;",
          "22: import org.springframework.security.provisioning.UserDetailsManager;",
          "27: public interface UserService extends UserDetailsManager {",
          "29:     boolean isEvictCacheFlag();",
          "31:     void setEvictCacheFlag(boolean evictCacheFlag);",
          "",
          "[Added Lines]",
          "24: import org.apache.kylin.rest.security.ManagedUser;",
          "25: import org.springframework.security.provisioning.UserDetailsManager;",
          "27: public interface UserService extends UserDetailsManager {",
          "",
          "---------------"
        ]
      }
    }
  ]
}