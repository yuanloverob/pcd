{
  "cve_id": "CVE-2021-40831",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been \u201coverridden\u201d. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to address this behavior. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.7.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.14.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.6.0 on macOS. Amazon Web Services AWS-C-IO 0.10.7 on macOS.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
  "patch_info": {
    "commit_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5aef82573202309063eb540b72cee0e565f85a2d",
    "files": [
      "setup.py"
    ],
    "message": "Fix CA override functions (#223)\n\nUpdate to awscrt 0.12.0. This fixes the issue where \"override_default_trust_store\" functions did not actually override the system trust store on Linux and Apple platforms.",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.12.0',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
      "candidate_info": {
        "commit_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0450ce68add7e3d05c6d781ecdac953c299c053a",
        "files": [
          "setup.py"
        ],
        "message": "Fix Mac SNI check with overridden root CA (#211)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.11.22',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.11.25',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e55e0654fe76b1a634a649530e18a022dfbd5468",
      "candidate_info": {
        "commit_hash": "e55e0654fe76b1a634a649530e18a022dfbd5468",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/e55e0654fe76b1a634a649530e18a022dfbd5468",
        "files": [
          "continuous-delivery/wait-for-pypi.py",
          "setup.py"
        ],
        "message": "update awscrt to 0.9.10 (#127)\n\n0.9.3 was missing wheels for several platforms",
        "before_after_code_files": [
          "continuous-delivery/wait-for-pypi.py||continuous-delivery/wait-for-pypi.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "continuous-delivery/wait-for-pypi.py||continuous-delivery/wait-for-pypi.py": [
          "File: continuous-delivery/wait-for-pypi.py -> continuous-delivery/wait-for-pypi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: def wait(package, version, index_url=DEFAULT_INDEX_URL, timeout=DEFAULT_TIMEOUT, interval=DEFAULT_INTERVAL):",
          "12:     give_up_time = time.time() + timeout",
          "13:     while True:",
          "15:         output = output.decode()",
          "17:         # output looks like: 'awscrt (0.3.1)  - A common runtime for AWS Python projects\\n...'",
          "",
          "[Removed Lines]",
          "14:         output = subprocess.check_output([sys.executable, '-m', 'pip', 'search', '--index', index_url, package])",
          "",
          "[Added Lines]",
          "14:         output = subprocess.check_output([sys.executable, '-m', 'pip', 'search',",
          "15:                                           '--no-cache-dir', '--index', index_url, package])",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "14:     packages=['awsiot'],",
          "15:     install_requires=[",
          "17:     ],",
          "18:     python_requires='>=3.5',",
          "19: )",
          "",
          "[Removed Lines]",
          "16:         'awscrt==0.9.3',",
          "",
          "[Added Lines]",
          "16:         'awscrt==0.9.10',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea9859752215d5c9a8172f1b4690d6431a804e19",
      "candidate_info": {
        "commit_hash": "ea9859752215d5c9a8172f1b4690d6431a804e19",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/ea9859752215d5c9a8172f1b4690d6431a804e19",
        "files": [
          "awsiot/eventstreamrpc.py",
          "awsiot/greengrasscoreipc/__init__.py",
          "awsiot/greengrasscoreipc/client.py",
          "awsiot/greengrasscoreipc/model.py",
          "setup.py",
          "test/echotestrpc/__init__.py",
          "test/echotestrpc/client.py",
          "test/echotestrpc/model.py",
          "test/test_rpc.py"
        ],
        "message": "New Greengrass IPC client added (#136)\n\nAdded Greengrass IPC client\nupgrade to awscrt 0.9.15\n\nCo-authored-by: Michael Graeb <graebm@amazon.com>",
        "before_after_code_files": [
          "awsiot/eventstreamrpc.py||awsiot/eventstreamrpc.py",
          "awsiot/greengrasscoreipc/client.py||awsiot/greengrasscoreipc/client.py",
          "awsiot/greengrasscoreipc/model.py||awsiot/greengrasscoreipc/model.py",
          "setup.py||setup.py",
          "test/echotestrpc/client.py||test/echotestrpc/client.py",
          "test/echotestrpc/model.py||test/echotestrpc/model.py",
          "test/test_rpc.py||test/test_rpc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/eventstreamrpc.py||awsiot/eventstreamrpc.py": [
          "File: awsiot/eventstreamrpc.py -> awsiot/eventstreamrpc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Classes for building a service that uses the event-stream RPC protocol.",
          "3: \"\"\"",
          "4: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "5: # SPDX-License-Identifier: Apache-2.0.",
          "7: from awscrt.eventstream import Header, HeaderType",
          "8: import awscrt.eventstream.rpc as protocol",
          "9: from awscrt.io import (ClientBootstrap, SocketOptions, TlsConnectionOptions)",
          "10: from concurrent.futures import Future",
          "11: from enum import Enum",
          "12: import json",
          "13: import logging",
          "14: from threading import Lock",
          "15: from typing import (Any, Callable, Dict, Optional, Sequence)",
          "17: VERSION_TUPLE = (0, 1, 0)",
          "18: VERSION_STRING = \"{v[0]}.{v[1]}.{v[2]}\".format(v=VERSION_TUPLE)",
          "20: VERSION_HEADER = \":version\"",
          "21: CONTENT_TYPE_HEADER = \":content-type\"",
          "22: CONTENT_TYPE_APPLICATION_TEXT = \"text/plain\"",
          "23: CONTENT_TYPE_APPLICATION_JSON = \"application/json\"",
          "24: SERVICE_MODEL_TYPE_HEADER = \"service-model-type\"",
          "27: logger = logging.getLogger(__name__)",
          "30: class ConnectionClosedError(RuntimeError):",
          "31:     \"\"\"",
          "32:     Connection is closed",
          "33:     \"\"\"",
          "34:     pass",
          "37: class StreamClosedError(RuntimeError):",
          "38:     \"\"\"",
          "39:     Stream is closed",
          "40:     \"\"\"",
          "41:     pass",
          "44: class EventStreamError(RuntimeError):",
          "45:     \"\"\"",
          "46:     For connection-level errors.",
          "47:     \"\"\"",
          "48:     pass",
          "51: class EventStreamOperationError(RuntimeError):",
          "52:     \"\"\"",
          "53:     Base for all errors that come across the wire.",
          "55:     These are not necessarily modeled shapes.",
          "56:     \"\"\"",
          "57:     pass",
          "60: class AccessDeniedError(EventStreamOperationError):",
          "61:     \"\"\"",
          "62:     Access Denied",
          "63:     \"\"\"",
          "65:     def __init__(self, *args):",
          "66:         super().__init__('aws#AccessDenied', *args)",
          "69: class UnmappedDataError(RuntimeError):",
          "70:     \"\"\"",
          "71:     Received data that does not map to a known model type.",
          "72:     \"\"\"",
          "73:     pass",
          "76: class SerializeError(RuntimeError):",
          "77:     \"\"\"",
          "78:     Error serializing data to send.",
          "79:     \"\"\"",
          "80:     pass",
          "83: class DeserializeError(RuntimeError):",
          "84:     \"\"\"",
          "85:     Error deserializing received data.",
          "86:     \"\"\"",
          "87:     pass",
          "90: class LifecycleHandler:",
          "91:     \"\"\"",
          "92:     Base class for handling connection events.",
          "94:     Inherit from this class and override methods to handle connection events.",
          "95:     All callbacks for this connection will be invoked on the same thread.",
          "96:     If the connection attempt fails, no callbacks will be invoked.",
          "97:     If the connection attempt succeeds, on_connect() will be the first callback",
          "98:     invoked and on_disconnect() will always be the last.",
          "100:     Note that an open network connection MUST be closed via Connection.close()",
          "101:     to avoid leaking resources.",
          "102:     \"\"\"",
          "104:     def on_connect(self):",
          "105:         \"\"\"",
          "106:         Invoked when the connection has been fully established.",
          "108:         This will always be the first callback invoked on the handler.",
          "109:         This will not be invoked if the connection attempt failed.",
          "110:         \"\"\"",
          "111:         pass",
          "113:     def on_disconnect(self, reason: Optional[Exception]):",
          "114:         \"\"\"",
          "115:         Invoked when an open connection has disconnected.",
          "117:         This will always be the last callback invoked on the handler.",
          "118:         This will not be invoked if the connection attempt failed.",
          "120:         Args:",
          "121:             reason: Reason will be None if the user initiated the shutdown,",
          "122:                 otherwise the reason will be an Exception.",
          "123:         \"\"\"",
          "124:         pass",
          "126:     def on_error(self, error: Exception) -> bool:",
          "127:         \"\"\"",
          "128:         Invoked when a connection-level error occurs.",
          "130:         Args:",
          "131:             reason: An Exception explaining the error",
          "133:         Returns:",
          "134:             True if the connection should be terminated as a result of the error,",
          "135:             or False if the connection should continute.",
          "136:         \"\"\"",
          "137:         pass",
          "139:     def on_ping(self, headers: Sequence[Header], payload: bytes):",
          "140:         \"\"\"",
          "141:         Invoked when a ping is received.",
          "142:         \"\"\"",
          "143:         pass",
          "146: class MessageAmendment:",
          "147:     \"\"\"",
          "148:     Data to add to an event-stream message.",
          "150:     Args:",
          "151:         headers: Headers to add (optional)",
          "153:         payload: Binary payload data (optional)",
          "154:     \"\"\"",
          "156:     def __init__(self, *, headers: Optional[Sequence[Header]] = None, payload: Optional[bytes] = None):",
          "157:         self.headers = headers",
          "158:         self.payload = payload",
          "160:     @staticmethod",
          "161:     def create_static_authtoken_amender(authtoken: str) -> Callable[[], 'MessageAmendment']:",
          "162:         \"\"\"",
          "163:         Create function that amends payload: b'{\"authToken\": \"...\"}'",
          "165:         Args:",
          "166:             authtoken: value of \"authToken\" in the payload.",
          "167:                 The same value is always used, even if the amender",
          "168:                 is called multiple times over the life of the application.",
          "170:         Returns:",
          "171:             The result is appropriate for passing to the Connection's",
          "172:             connect_message_amender init arg.",
          "173:         \"\"\"",
          "174:         def _amend():",
          "175:             payload_str = '{\"authToken\": \"%s\"}' % authtoken",
          "176:             return MessageAmendment(payload=payload_str.encode())",
          "178:         return _amend",
          "181: class _ClientState(Enum):",
          "182:     DISCONNECTED = 1",
          "183:     CONNECTING_TO_SOCKET = 2",
          "184:     WAITING_FOR_CONNECT_ACK = 3",
          "185:     CONNECTED = 4",
          "186:     DISCONNECTING = 5",
          "189: class _ProtocolConnectionHandler(protocol.ClientConnectionHandler):",
          "190:     def __init__(self, owner, lifecycle_handler):",
          "191:         self.owner = owner",
          "192:         self.lifecycle_handler = lifecycle_handler",
          "194:     def on_connection_setup(self, connection, error, **kwargs):",
          "195:         # if error is set, socket connection failed",
          "196:         if error:",
          "197:             logger.error(\"%r failed to establish connection: %r\", self.owner, error)",
          "198:             synced = self.owner._synced",
          "199:             with synced.lock:",
          "200:                 connect_future = synced.connect_future",
          "202:                 synced.connect_future = None",
          "203:                 synced.current_handler = None",
          "204:                 synced.close_reason = None",
          "205:                 synced.closed_future.set_exception(error)",
          "206:                 synced.state = _ClientState.DISCONNECTED",
          "207:             # complete future after lock is released",
          "208:             connect_future.set_exception(error)",
          "209:             return",
          "211:         # error is not set, so socket connection is established.",
          "212:         # next step is to send CONNECT message",
          "213:         try:",
          "214:             logger.debug(\"%r connection established, sending CONNECT message\", self.owner)",
          "215:             # invoke callback outside of holding the lock",
          "216:             if self.owner._connect_message_amender:",
          "217:                 amendment = self.owner._connect_message_amender()",
          "218:             else:",
          "219:                 amendment = MessageAmendment()",
          "221:             with self.owner._synced as synced:",
          "222:                 synced.current_connection = connection",
          "223:                 # check if close() was called before connection established",
          "224:                 if synced.state == _ClientState.DISCONNECTING:",
          "225:                     logger.debug(\"%r close() has been called, shutting down\", self.owner)",
          "226:                     connection.close()",
          "227:                 else:",
          "228:                     headers = [Header.from_string(",
          "229:                         VERSION_HEADER, VERSION_STRING)]",
          "230:                     # don't allow amendment to override required headers",
          "231:                     existing_names = [header.name.lower() for header in headers]",
          "232:                     if amendment.headers:",
          "233:                         for header in amendment.headers:",
          "234:                             if header.name.lower() not in existing_names:",
          "235:                                 headers.append(header)",
          "237:                     connection.send_protocol_message(",
          "238:                         headers=headers, payload=amendment.payload,",
          "239:                         message_type=protocol.MessageType.CONNECT)",
          "240:                     synced.state = _ClientState.WAITING_FOR_CONNECT_ACK",
          "241:         except Exception as e:",
          "242:             logger.debug(\"%r failure attempting to send CONNECT: %r\", self.owner, e)",
          "243:             with self.owner._synced as synced:",
          "244:                 synced.state = _ClientState.DISCONNECTING",
          "245:                 synced.current_connection = connection",
          "246:                 synced.close_reason = e",
          "247:                 connection.close()",
          "249:     def on_connection_shutdown(self, reason, **kwargs):",
          "250:         connect_future = None",
          "251:         with self.owner._synced as synced:",
          "252:             connect_future = synced.connect_future",
          "253:             if reason is None:",
          "254:                 reason = synced.close_reason",
          "256:             synced.connect_future = None",
          "257:             synced.state = _ClientState.DISCONNECTED",
          "258:             synced.current_handler = None",
          "259:             synced.current_connection = None",
          "260:             synced.close_reason = None",
          "261:             if reason is None:",
          "262:                 synced.closed_future.set_result(None)",
          "263:             else:",
          "264:                 synced.closed_future.set_exception(reason)",
          "266:         # complete futures, and invoke callbacks, after lock is released",
          "268:         # if connect_future still exists, mark that setup was a failure",
          "269:         if connect_future:",
          "270:             # if user called close() without a reason,",
          "271:             # set a reason that the setup_future has failed",
          "272:             if reason is None:",
          "273:                 reason = RuntimeError(\"close() called during connection setup\")",
          "274:             logger.error(\"%r connect failed: %r\", self.owner, reason)",
          "275:             connect_future.set_exception(reason)",
          "276:         else:",
          "277:             # connect_future no longer exists, which means on_setup fired,",
          "278:             # which means on_disconnect should fire now",
          "279:             if reason:",
          "280:                 logger.info(\"%r disconnected, reason: %r\", self.owner, reason)",
          "281:             else:",
          "282:                 logger.info(\"%r disconnected\", self.owner)",
          "283:             self.lifecycle_handler.on_disconnect(reason)",
          "285:     def on_protocol_message(self, headers, payload, message_type, flags, **kwargs):",
          "286:         try:",
          "287:             logger.debug(\"%r received %s headers=%s\", self.owner, message_type.name, headers)",
          "289:             # protocol enforces that CONNECT_ACK is first msg received",
          "290:             if message_type == protocol.MessageType.CONNECT_ACK:",
          "291:                 connect_future = None",
          "292:                 with self.owner._synced as synced:",
          "293:                     if synced.state == _ClientState.WAITING_FOR_CONNECT_ACK:",
          "294:                         if (flags & protocol.MessageFlag.CONNECTION_ACCEPTED):",
          "295:                             connect_future = synced.connect_future",
          "296:                             synced.connect_future = None",
          "297:                             synced.state = _ClientState.CONNECTED",
          "298:                         else:",
          "299:                             synced.state = _ClientState.DISCONNECTING",
          "300:                             synced.close_reason = AccessDeniedError(",
          "301:                                 \"Connection access denied to event stream RPC server\")",
          "302:                             synced.current_connection.close()",
          "303:                 # complete future and invoke callback after lock is released",
          "304:                 if connect_future:",
          "305:                     logger.info(\"%r connected\", self.owner)",
          "306:                     connect_future.set_result(None)",
          "307:                     self.lifecycle_handler.on_connect()",
          "308:             elif message_type == protocol.MessageType.PING_RESPONSE:",
          "309:                 pass",
          "310:             elif message_type == protocol.MessageType.PING:",
          "311:                 self.lifecycle_handler.on_ping(headers, payload)",
          "312:             elif message_type in (protocol.MessageType.PROTOCOL_ERROR, protocol.MessageType.INTERNAL_ERROR):",
          "313:                 error = EventStreamError(message_type, headers, payload)",
          "314:                 # If callback returns True (or forgets to return a value)",
          "315:                 # then close connection due to error",
          "316:                 return_val = self.lifecycle_handler.on_error(error)",
          "317:                 if return_val or return_val is None:",
          "318:                     self.owner.close(error)",
          "319:         except Exception as e:",
          "320:             logger.error(\"%r closing due to exception from LifecycleHandler callback: %r\", self.owner, e)",
          "321:             self.owner.close(e)",
          "324: class Connection:",
          "325:     \"\"\"",
          "326:     A client connection to event-stream RPC service.",
          "328:     connect() must be called to open the network connection before interacting",
          "329:     with the service.",
          "331:     Note that close() MUST be called to end an open network connection.",
          "332:     Failure to do so will result in leaked resources.",
          "334:     Reconnect is possible by calling connect() again after the connection",
          "335:     has finished closing/disconnecting.",
          "337:     Keyword Args:",
          "338:         host_name: Remote host name.",
          "340:         port: Remote port.",
          "342:         bootstrap: ClientBootstrap to use when initiating socket connection.",
          "344:         socket_options: Optional socket options.",
          "345:             If None is provided, the default options are used.",
          "347:         tls_connection_options: Optional TLS connection options.",
          "348:             If None is provided, then the connection will be attempted over",
          "349:             plain-text.",
          "350:     \"\"\"",
          "352:     class _Synced:",
          "353:         \"\"\"",
          "354:         Helper class holds all values that must not be read/written without a lock.",
          "355:         \"\"\"",
          "357:         def __init__(self):",
          "358:             self.lock = Lock()",
          "359:             self.state = _ClientState.DISCONNECTED",
          "360:             self.current_handler = None",
          "361:             self.current_connection = None",
          "362:             self.connect_future = None",
          "363:             self.close_reason = None",
          "364:             self.closed_future = Future()",
          "365:             # closed future starts out as complete,",
          "366:             # since we haven't even tried to connect yet",
          "367:             self.closed_future.set_result(None)",
          "369:         def __enter__(self):",
          "370:             self.lock.acquire()",
          "371:             return self",
          "373:         def __exit__(self, type, value, tb):",
          "374:             self.lock.release()",
          "376:     def __init__(self,",
          "378:                  host_name: str,",
          "379:                  port: int,",
          "380:                  bootstrap: ClientBootstrap,",
          "381:                  socket_options: Optional[SocketOptions] = None,",
          "382:                  tls_connection_options: Optional[TlsConnectionOptions] = None,",
          "383:                  connect_message_amender: Optional[Callable[[], MessageAmendment]] = None):",
          "385:         self.host_name = host_name",
          "386:         self.port = port",
          "387:         self._bootstrap = bootstrap",
          "388:         self._socket_options = socket_options",
          "389:         self._tls_connection_options = tls_connection_options",
          "390:         self._connect_message_amender = connect_message_amender",
          "392:         self._synced = Connection._Synced()",
          "394:     def connect(self, lifecycle_handler: LifecycleHandler) -> Future:",
          "395:         \"\"\"",
          "396:         Asynchronously open a network connection.",
          "398:         Note that close() MUST be called to end a network connection",
          "399:         that is open (or in the process of connecting).",
          "400:         Failure to do so will result in leaked resources.",
          "402:         Args:",
          "403:             lifecycle_handler: Handler for events over the course of this",
          "404:                 network connection. See :class:`LifecycleHandler` for more info.",
          "405:                 Handler methods will only be invoked if the connect attempt",
          "406:                 succeeds.",
          "408:         Returns:",
          "409:             A Future which completes when the connection succeeds or fails.",
          "410:             If successful, the Future will contain None.",
          "411:             Otherwise it will contain an exception explaining the reason",
          "412:             for failure.",
          "413:         \"\"\"",
          "414:         future = Future()",
          "415:         future.set_running_or_notify_cancel()  # prevent cancellation",
          "416:         with self._synced as synced:",
          "417:             old_closed_future = synced.closed_future",
          "418:             if synced.state != _ClientState.DISCONNECTED:",
          "419:                 raise RuntimeError(\"Connection already in progress\")",
          "420:             try:",
          "421:                 synced.current_handler = _ProtocolConnectionHandler(",
          "422:                     self, lifecycle_handler)",
          "423:                 synced.connect_future = future",
          "424:                 synced.state = _ClientState.CONNECTING_TO_SOCKET",
          "425:                 # start new closed_future",
          "426:                 synced.closed_future = Future()",
          "427:                 synced.closed_future.set_running_or_notify_cancel()",
          "428:                 protocol.ClientConnection.connect(",
          "429:                     handler=synced.current_handler,",
          "430:                     host_name=self.host_name,",
          "431:                     port=self.port,",
          "432:                     bootstrap=self._bootstrap,",
          "433:                     socket_options=self._socket_options,",
          "434:                     tls_connection_options=self._tls_connection_options)",
          "435:             except Exception as e:",
          "436:                 synced.current_handler = None",
          "437:                 synced.connect_future = None",
          "438:                 synced.closed_future = old_closed_future",
          "439:                 synced.state = _ClientState.DISCONNECTED",
          "440:                 raise e",
          "441:         return future",
          "443:     def close(self, reason: Optional[Exception] = None) -> Future:",
          "444:         \"\"\"",
          "445:         Close the connection.",
          "447:         Shutdown is asynchronous. This call has no effect if the connection",
          "448:         is already closed or closing.",
          "450:         Args:",
          "451:             reason (Optional[Exception]): If set, the connection will",
          "452:                 close with this error as the reason (unless",
          "453:                 it was already closing for another reason).",
          "455:         Returns:",
          "456:             concurrent.futures.Future: The future which will complete",
          "457:             when the shutdown process is done. The future will have an",
          "458:             exception if shutdown was caused by an error, or a result",
          "459:             of None if the shutdown was clean and user-initiated.",
          "460:         \"\"\"",
          "461:         with self._synced as synced:",
          "462:             if synced.state == _ClientState.DISCONNECTED:",
          "463:                 # do nothing, already disconnected",
          "464:                 pass",
          "465:             elif synced.state == _ClientState.DISCONNECTING:",
          "466:                 # do nothing, already disconnecting for some other reason",
          "467:                 pass",
          "468:             else:",
          "469:                 synced.close_reason = reason",
          "470:                 synced.state = _ClientState.DISCONNECTING",
          "471:                 # close connection if it exists.",
          "472:                 # if it doesn't exist yet, then it's connecting right now",
          "473:                 # and will get closed the moment it exists.",
          "474:                 if synced.current_connection:",
          "475:                     synced.current_connection.close()",
          "477:             return synced.closed_future",
          "479:     def _send_protocol_message(self, data, message_type):",
          "480:         with self._synced as synced:",
          "481:             if synced.state != _ClientState.CONNECTED:",
          "482:                 raise ConnectionClosedError()",
          "483:             return synced.current_connection.send_protocol_message(",
          "484:                 headers=data.headers if data else None,",
          "485:                 payload=data.payload if data else None,",
          "486:                 message_type=message_type)",
          "488:     def send_ping(self, data: Optional[MessageAmendment] = None) -> Future:",
          "489:         return self._send_protocol_message(data, protocol.MessageType.PING)",
          "491:     def send_ping_response(self, data: Optional[MessageAmendment] = None) -> Future:",
          "492:         return self._send_protocol_message(data, protocol.MessageType.PING_RESPONSE)",
          "494:     def _new_stream(self, handler: protocol.ClientContinuationHandler) -> protocol.ClientContinuation:",
          "495:         # public or private?",
          "496:         with self._synced as synced:",
          "497:             if synced.state != _ClientState.CONNECTED:",
          "498:                 raise ConnectionClosedError()",
          "499:             return synced.current_connection.new_stream(handler)",
          "501:     def __repr__(self):",
          "502:         return \"<%s at %#x %s:%d>\" % (self.__class__.__name__, id(self), self.host_name, self.port)",
          "505: class Shape:",
          "506:     \"\"\"",
          "507:     Base class for shapes serialized by a service",
          "508:     \"\"\"",
          "509:     @classmethod",
          "510:     def _model_name(cls):",
          "511:         raise NotImplementedError(cls.__name__ + \" must override _model_name()\")",
          "513:     @classmethod",
          "514:     def _from_payload(cls, payload):",
          "515:         raise NotImplementedError(cls.__name__ + \" must override _from_payload()\")",
          "517:     def _to_payload(self):",
          "518:         raise NotImplementedError(self.__class__.__name__ + \" must override _to_payload()\")",
          "521: class ErrorShape(Shape, EventStreamOperationError):",
          "522:     \"\"\"",
          "523:     Base class for all error shapes serialized by a service",
          "524:     \"\"\"",
          "525:     pass",
          "528: class ShapeIndex:",
          "529:     \"\"\"",
          "530:     Catalog of all shapes serialized by this service",
          "531:     \"\"\"",
          "533:     def __init__(self, shape_types: Sequence[type]):",
          "534:         self._shapes_type_by_name = {i._model_name(): i for i in shape_types}",
          "536:     def find_shape_type(self, model_name: str) -> type:",
          "537:         \"\"\"",
          "538:         Returns Shape type with given model_name, or None",
          "539:         \"\"\"",
          "540:         return self._shapes_type_by_name.get(model_name)",
          "543: class StreamResponseHandler:",
          "544:     \"\"\"",
          "545:     Base class for all operation stream handlers.",
          "547:     For operations with a streaming response (0+ messages that may arrive",
          "548:     after the initial response).",
          "549:     \"\"\"",
          "551:     def on_stream_event(self, event: Shape) -> None:",
          "552:         pass",
          "554:     def on_stream_error(self, error: Exception) -> bool:",
          "555:         return True",
          "557:     def on_stream_closed(self) -> None:",
          "558:         pass",
          "561: class Operation:",
          "562:     \"\"\"",
          "563:     Base class for an operation.",
          "564:     \"\"\"",
          "565:     @classmethod",
          "566:     def _model_name(cls) -> str:",
          "567:         raise NotImplementedError(cls.__name__ + \" must override _model_name()\")",
          "569:     @classmethod",
          "570:     def _request_type(cls) -> type:",
          "571:         raise NotImplementedError(cls.__name__ + \" must override _request_type()\")",
          "573:     @classmethod",
          "574:     def _request_stream_type(cls) -> type:",
          "575:         return None",
          "577:     @classmethod",
          "578:     def _response_type(cls) -> type:",
          "579:         raise NotImplementedError(cls.__name__ + \" must override _response_type()\")",
          "581:     @classmethod",
          "582:     def _response_stream_type(cls) -> type:",
          "583:         return None",
          "586: class ClientOperation(Operation):",
          "587:     \"\"\"",
          "588:     Base class for a client operation.",
          "590:     Nearly all functions are private/protected. Child classes should",
          "591:     rewrite public API to properly document the types they deal with.",
          "592:     \"\"\"",
          "594:     def __init__(self, stream_handler: StreamResponseHandler, shape_index: ShapeIndex, connection: Connection):",
          "595:         # do not instantiate directly, created by ServiceClient.new_operation()",
          "596:         # all callbacks that modify state fire on the same thread,",
          "597:         # so don't need locks to protect members",
          "598:         self._stream_handler = stream_handler",
          "599:         self._shape_index = shape_index",
          "600:         self._message_count = 0",
          "601:         self._closed_future = Future()",
          "602:         self._closed_future.set_running_or_notify_cancel()  # prevent cancel",
          "603:         self._initial_response_future = Future()",
          "604:         self._initial_response_future.set_running_or_notify_cancel()  # prevent cancel",
          "605:         self._protocol_handler = _ProtocolContinuationHandler(self)",
          "606:         self._continuation = connection._new_stream(self._protocol_handler)",
          "608:     def _activate(self, request: Shape) -> Future:",
          "609:         headers = [Header.from_string(CONTENT_TYPE_HEADER,",
          "610:                                       CONTENT_TYPE_APPLICATION_JSON),",
          "611:                    Header.from_string(SERVICE_MODEL_TYPE_HEADER,",
          "612:                                       request._model_name())]",
          "613:         payload = self._json_payload_from_shape(request)",
          "614:         logger.debug(\"%r sending request APPLICATION_MESSAGE %s %r\", self, headers, payload)",
          "615:         return self._continuation.activate(",
          "616:             operation=self._model_name(),",
          "617:             headers=headers,",
          "618:             payload=payload,",
          "619:             message_type=protocol.MessageType.APPLICATION_MESSAGE)",
          "621:     def _send_stream_event(self, event: Shape) -> Future:",
          "622:         headers = [Header.from_string(CONTENT_TYPE_HEADER,",
          "623:                                       CONTENT_TYPE_APPLICATION_JSON),",
          "624:                    Header.from_string(SERVICE_MODEL_TYPE_HEADER,",
          "625:                                       event._model_name())]",
          "626:         payload = self._json_payload_from_shape(event)",
          "627:         logger.debug(\"%r sending event APPLICATION_MESSAGE %s %r\", self, headers, payload)",
          "628:         return self._continuation.send_message(",
          "629:             headers=headers,",
          "630:             payload=payload,",
          "631:             message_type=protocol.MessageType.APPLICATION_MESSAGE)",
          "633:     def _get_response(self) -> Future:",
          "634:         return self._initial_response_future",
          "636:     def close(self) -> Future:",
          "637:         try:",
          "638:             # try to send empty APPLICATION_MESSAGE with TERMINATE_STREAM flag.",
          "639:             # this fails if stream is already closed, so just ignore errors.",
          "640:             self._continuation.send_message(",
          "641:                 message_type=protocol.MessageType.APPLICATION_MESSAGE,",
          "642:                 flags=protocol.MessageFlag.TERMINATE_STREAM)",
          "643:         except Exception:",
          "644:             pass",
          "645:         return self._closed_future",
          "647:     def _find_header(self, headers, name, header_type=HeaderType.STRING):",
          "648:         \"\"\"Return header value, or None\"\"\"",
          "649:         name_lower = name.lower()",
          "650:         for header in headers:",
          "651:             if header.name.lower() == name_lower:",
          "652:                 if header.type == header_type:",
          "653:                     return header.value",
          "654:         return None",
          "656:     def _shape_from_json_payload(self, payload_bytes, shape_type):",
          "657:         try:",
          "658:             payload_str = payload_bytes.decode()",
          "659:             payload_obj = json.loads(payload_str)",
          "660:             shape = shape_type._from_payload(payload_obj)",
          "661:             return shape",
          "662:         except Exception as e:",
          "663:             raise DeserializeError(\"Failed to deserialize %s\" % shape_type._model_name(), e, payload_bytes)",
          "665:     def _json_payload_from_shape(self, shape):",
          "666:         try:",
          "667:             payload_obj = shape._to_payload()",
          "668:             payload_str = json.dumps(payload_obj)",
          "669:             payload_bytes = payload_str.encode()",
          "670:             return payload_bytes",
          "671:         except Exception as e:",
          "672:             raise SerializeError(\"Failed to serialize\", shape, e)",
          "674:     def _on_continuation_message(",
          "675:             self,",
          "676:             headers: Sequence[Header],",
          "677:             payload: bytes,",
          "678:             message_type: protocol.MessageType,",
          "679:             flags: int,",
          "681:         self._message_count += 1",
          "682:         logger.debug(\"%r received #%d %s %s %r\", self, self._message_count, message_type.name, headers, payload)",
          "683:         try:",
          "684:             model_name = self._find_header(headers, SERVICE_MODEL_TYPE_HEADER)",
          "685:             if model_name is None:",
          "686:                 if flags & protocol.MessageFlag.TERMINATE_STREAM:",
          "687:                     # it's ok for a TERMINATE_STREAM message to be empty",
          "688:                     return",
          "689:                 msg = \"Missing header: \" + SERVICE_MODEL_TYPE_HEADER",
          "690:                 raise UnmappedDataError(msg, headers, payload)",
          "692:             content_type = self._find_header(headers, CONTENT_TYPE_HEADER)",
          "693:             if content_type is None:",
          "694:                 msg = \"Missing header: \" + CONTENT_TYPE_HEADER",
          "695:                 raise UnmappedDataError(msg, headers, payload)",
          "696:             if content_type != CONTENT_TYPE_APPLICATION_JSON:",
          "697:                 msg = \"Unexpected {}: '{}', expected: '{}'\".format(",
          "698:                     CONTENT_TYPE_HEADER, content_type, CONTENT_TYPE_APPLICATION_JSON)",
          "699:                 raise UnmappedDataError(msg, headers, payload)",
          "701:             if message_type == protocol.MessageType.APPLICATION_MESSAGE:",
          "702:                 self._handle_data(model_name, payload)",
          "703:                 return",
          "705:             # otherwise it's an APPLICATION_ERROR",
          "706:             found_type = self._shape_index.find_shape_type(model_name)",
          "707:             if found_type is None:",
          "708:                 msg = \"Unknown error type: {}\".format(model_name)",
          "709:                 raise UnmappedDataError(msg, payload)",
          "710:             if not issubclass(found_type, Exception):",
          "711:                 msg = \"Unexpected type: {} sent as APPLICATION_ERROR, expected subclass of Exception\".format(model_name)",
          "712:                 raise UnmappedDataError(msg, payload)",
          "713:             shape = self._shape_from_json_payload(payload, found_type)",
          "714:             raise shape",
          "715:         except Exception as e:",
          "716:             self._handle_error(e, flags)",
          "718:     def _handle_data(self, model_name, payload):",
          "719:         \"\"\"",
          "720:         Pass APPLICATION_MESSAGE payload along as a 1st response,",
          "721:         or subsequent stream-event. Any exceptions raised by this function",
          "722:         will be passed to _handle_error().",
          "723:         \"\"\"",
          "724:         if self._message_count == 1:",
          "725:             # 1st message is \"response\"",
          "726:             expected_type = self._response_type()",
          "727:             expected_name = expected_type._model_name()",
          "728:             if model_name != expected_name:",
          "729:                 msg = \"Unexpected response type: {}, expected: {}\".format(model_name, expected_name)",
          "730:                 raise UnmappedDataError(msg, payload)",
          "731:             shape = self._shape_from_json_payload(payload, expected_type)",
          "732:             self._initial_response_future.set_result(shape)",
          "733:         else:",
          "734:             # messages after the 1st are \"stream events\"",
          "735:             expected_type = self._response_stream_type()",
          "736:             if expected_type is None:",
          "737:                 msg = \"Operation does not support response stream events, received type: {}\".format(model_name)",
          "738:                 raise UnmappedDataError(msg, payload)",
          "739:             expected_name = expected_type._model_name()",
          "740:             if model_name != expected_name:",
          "741:                 msg = \"Unexpected response stream event type: {}, expected: {}\".format(model_name, expected_name)",
          "742:                 raise UnmappedDataError(msg, payload)",
          "743:             shape = self._shape_from_json_payload(payload, expected_type)",
          "744:             self._stream_handler.on_stream_event(shape)",
          "746:     def _handle_error(self, error, message_flags):",
          "747:         \"\"\"",
          "748:         Pass along an APPLICATION_ERROR payload, or an exception encountered while",
          "749:         processing an APPLICATION_MESSAGE, as a failed 1st response",
          "750:         or a stream-error.",
          "751:         \"\"\"",
          "752:         stream_already_terminated = message_flags & protocol.MessageFlag.TERMINATE_STREAM",
          "753:         try:",
          "754:             if self._message_count == 1:",
          "755:                 # error from 1st message is \"response\" error.",
          "756:                 self._initial_response_future.set_exception(error)",
          "757:                 # errors on initial response must terminate the stream",
          "758:                 if not stream_already_terminated:",
          "759:                     self.close()",
          "760:             elif self._stream_handler is not None:",
          "761:                 # error from subsequent messages are \"stream errors\"",
          "762:                 # If this callback returns True (or forgets to return a value)",
          "763:                 # then close the stream",
          "764:                 return_val = self._stream_handler.on_stream_error(error)",
          "765:                 if return_val or return_val is None:",
          "766:                     if not stream_already_terminated:",
          "767:                         self.close()",
          "768:             else:",
          "769:                 # this operation did not expect more than 1 message",
          "770:                 raise error",
          "771:         except Exception:",
          "772:             logger.exception(\"%r unhandled exception while receiving message\", self)",
          "774:     def _on_continuation_closed(self, **kwargs) -> None:",
          "775:         logger.debug(\"%r closed\", self)",
          "776:         if not self._initial_response_future.done():",
          "777:             self._initial_response_future.set_exception(StreamClosedError())",
          "779:         self._closed_future.set_result(None)",
          "781:         if self._stream_handler:",
          "782:             try:",
          "783:                 self._stream_handler.on_stream_closed()",
          "784:             except Exception:",
          "785:                 logger.exception(\"%r unhandled exception calling callback\", self)",
          "788: class _ProtocolContinuationHandler(protocol.ClientContinuationHandler):",
          "789:     \"\"\"Passes raw RPC stream/continuation events along to Operation\"\"\"",
          "791:     def __init__(self, operation: Operation):",
          "792:         self.operation = operation",
          "794:     def on_continuation_message(self, *args, **kwargs):",
          "795:         self.operation._on_continuation_message(*args, **kwargs)",
          "797:     def on_continuation_closed(self, *args, **kwargs):",
          "798:         self.operation._on_continuation_closed(*args, **kwargs)",
          "801: class Client:",
          "802:     \"\"\"",
          "803:     Base class for a service client.",
          "805:     Child class should add public API functions for each operation.",
          "806:     \"\"\"",
          "808:     def __init__(self, connection: Connection, shape_index: ShapeIndex):",
          "809:         self._connection = connection",
          "810:         self._shape_index = shape_index",
          "812:     def _new_operation(self, operation_type: type, stream_handler: StreamResponseHandler = None):",
          "813:         return operation_type(stream_handler, self._shape_index, self._connection)",
          "815:     @classmethod",
          "816:     def _model_name(cls):",
          "817:         raise NotImplementedError(cls.__name__ + \" must override _model_name()\")",
          "",
          "---------------"
        ],
        "awsiot/greengrasscoreipc/client.py||awsiot/greengrasscoreipc/client.py": [
          "File: awsiot/greengrasscoreipc/client.py -> awsiot/greengrasscoreipc/client.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: # This file is generated",
          "6: from . import model",
          "7: import awsiot.eventstreamrpc as rpc",
          "8: import concurrent.futures",
          "11: class SubscribeToIoTCoreStreamHandler(rpc.StreamResponseHandler):",
          "12:     \"\"\"",
          "13:     Event handler for SubscribeToIoTCoreOperation",
          "15:     Inherit from this class and override methods to handle",
          "16:     stream events during a SubscribeToIoTCoreOperation.",
          "17:     \"\"\"",
          "19:     def on_stream_event(self, event: model.IoTCoreMessage) -> None:",
          "20:         \"\"\"",
          "21:         Invoked when a IoTCoreMessage is received.",
          "22:         \"\"\"",
          "23:         pass",
          "25:     def on_stream_error(self, error: Exception) -> bool:",
          "26:         \"\"\"",
          "27:         Invoked when an error occurs on the operation stream.",
          "29:         Return True if operation should close as a result of this error,",
          "30:         \"\"\"",
          "31:         return True",
          "33:     def on_stream_closed(self) -> None:",
          "34:         \"\"\"",
          "35:         Invoked when the stream for this operation is closed.",
          "36:         \"\"\"",
          "37:         pass",
          "40: class SubscribeToIoTCoreOperation(model._SubscribeToIoTCoreOperation):",
          "41:     \"\"\"",
          "42:     SubscribeToIoTCoreOperation",
          "44:     Create with GreengrassCoreIPCClient.new_subscribe_to_iot_core()",
          "45:     \"\"\"",
          "47:     def activate(self, request: model.SubscribeToIoTCoreRequest) -> concurrent.futures.Future:",
          "48:         \"\"\"",
          "49:         Activate this operation by sending the initial SubscribeToIoTCoreRequest message.",
          "51:         Returns a Future which completes with a result of None if the",
          "52:         request is successfully written to the wire, or an exception if",
          "53:         the request fails to send.",
          "54:         \"\"\"",
          "55:         return self._activate(request)",
          "57:     def get_response(self) -> concurrent.futures.Future:",
          "58:         \"\"\"",
          "59:         Returns a Future which completes with a result of SubscribeToIoTCoreResponse,",
          "60:         when the initial response is received, or an exception.",
          "61:         \"\"\"",
          "62:         return self._get_response()",
          "64:     def close(self) -> concurrent.futures.Future:",
          "65:         \"\"\"",
          "66:         Close the operation, whether or not it has completed.",
          "68:         Returns a Future which completes with a result of None",
          "69:         when the operation has closed.",
          "70:         \"\"\"",
          "71:         return super().close()",
          "74: class PublishToTopicOperation(model._PublishToTopicOperation):",
          "75:     \"\"\"",
          "76:     PublishToTopicOperation",
          "78:     Create with GreengrassCoreIPCClient.new_publish_to_topic()",
          "79:     \"\"\"",
          "81:     def activate(self, request: model.PublishToTopicRequest) -> concurrent.futures.Future:",
          "82:         \"\"\"",
          "83:         Activate this operation by sending the initial PublishToTopicRequest message.",
          "85:         Returns a Future which completes with a result of None if the",
          "86:         request is successfully written to the wire, or an exception if",
          "87:         the request fails to send.",
          "88:         \"\"\"",
          "89:         return self._activate(request)",
          "91:     def get_response(self) -> concurrent.futures.Future:",
          "92:         \"\"\"",
          "93:         Returns a Future which completes with a result of PublishToTopicResponse,",
          "94:         when the initial response is received, or an exception.",
          "95:         \"\"\"",
          "96:         return self._get_response()",
          "98:     def close(self) -> concurrent.futures.Future:",
          "99:         \"\"\"",
          "100:         Close the operation, whether or not it has completed.",
          "102:         Returns a Future which completes with a result of None",
          "103:         when the operation has closed.",
          "104:         \"\"\"",
          "105:         return super().close()",
          "108: class PublishToIoTCoreOperation(model._PublishToIoTCoreOperation):",
          "109:     \"\"\"",
          "110:     PublishToIoTCoreOperation",
          "112:     Create with GreengrassCoreIPCClient.new_publish_to_iot_core()",
          "113:     \"\"\"",
          "115:     def activate(self, request: model.PublishToIoTCoreRequest) -> concurrent.futures.Future:",
          "116:         \"\"\"",
          "117:         Activate this operation by sending the initial PublishToIoTCoreRequest message.",
          "119:         Returns a Future which completes with a result of None if the",
          "120:         request is successfully written to the wire, or an exception if",
          "121:         the request fails to send.",
          "122:         \"\"\"",
          "123:         return self._activate(request)",
          "125:     def get_response(self) -> concurrent.futures.Future:",
          "126:         \"\"\"",
          "127:         Returns a Future which completes with a result of PublishToIoTCoreResponse,",
          "128:         when the initial response is received, or an exception.",
          "129:         \"\"\"",
          "130:         return self._get_response()",
          "132:     def close(self) -> concurrent.futures.Future:",
          "133:         \"\"\"",
          "134:         Close the operation, whether or not it has completed.",
          "136:         Returns a Future which completes with a result of None",
          "137:         when the operation has closed.",
          "138:         \"\"\"",
          "139:         return super().close()",
          "142: class SubscribeToConfigurationUpdateStreamHandler(rpc.StreamResponseHandler):",
          "143:     \"\"\"",
          "144:     Event handler for SubscribeToConfigurationUpdateOperation",
          "146:     Inherit from this class and override methods to handle",
          "147:     stream events during a SubscribeToConfigurationUpdateOperation.",
          "148:     \"\"\"",
          "150:     def on_stream_event(self, event: model.ConfigurationUpdateEvents) -> None:",
          "151:         \"\"\"",
          "152:         Invoked when a ConfigurationUpdateEvents is received.",
          "153:         \"\"\"",
          "154:         pass",
          "156:     def on_stream_error(self, error: Exception) -> bool:",
          "157:         \"\"\"",
          "158:         Invoked when an error occurs on the operation stream.",
          "160:         Return True if operation should close as a result of this error,",
          "161:         \"\"\"",
          "162:         return True",
          "164:     def on_stream_closed(self) -> None:",
          "165:         \"\"\"",
          "166:         Invoked when the stream for this operation is closed.",
          "167:         \"\"\"",
          "168:         pass",
          "171: class SubscribeToConfigurationUpdateOperation(model._SubscribeToConfigurationUpdateOperation):",
          "172:     \"\"\"",
          "173:     SubscribeToConfigurationUpdateOperation",
          "175:     Create with GreengrassCoreIPCClient.new_subscribe_to_configuration_update()",
          "176:     \"\"\"",
          "178:     def activate(self, request: model.SubscribeToConfigurationUpdateRequest) -> concurrent.futures.Future:",
          "179:         \"\"\"",
          "180:         Activate this operation by sending the initial SubscribeToConfigurationUpdateRequest message.",
          "182:         Returns a Future which completes with a result of None if the",
          "183:         request is successfully written to the wire, or an exception if",
          "184:         the request fails to send.",
          "185:         \"\"\"",
          "186:         return self._activate(request)",
          "188:     def get_response(self) -> concurrent.futures.Future:",
          "189:         \"\"\"",
          "190:         Returns a Future which completes with a result of SubscribeToConfigurationUpdateResponse,",
          "191:         when the initial response is received, or an exception.",
          "192:         \"\"\"",
          "193:         return self._get_response()",
          "195:     def close(self) -> concurrent.futures.Future:",
          "196:         \"\"\"",
          "197:         Close the operation, whether or not it has completed.",
          "199:         Returns a Future which completes with a result of None",
          "200:         when the operation has closed.",
          "201:         \"\"\"",
          "202:         return super().close()",
          "205: class ListComponentsOperation(model._ListComponentsOperation):",
          "206:     \"\"\"",
          "207:     ListComponentsOperation",
          "209:     Create with GreengrassCoreIPCClient.new_list_components()",
          "210:     \"\"\"",
          "212:     def activate(self, request: model.ListComponentsRequest) -> concurrent.futures.Future:",
          "213:         \"\"\"",
          "214:         Activate this operation by sending the initial ListComponentsRequest message.",
          "216:         Returns a Future which completes with a result of None if the",
          "217:         request is successfully written to the wire, or an exception if",
          "218:         the request fails to send.",
          "219:         \"\"\"",
          "220:         return self._activate(request)",
          "222:     def get_response(self) -> concurrent.futures.Future:",
          "223:         \"\"\"",
          "224:         Returns a Future which completes with a result of ListComponentsResponse,",
          "225:         when the initial response is received, or an exception.",
          "226:         \"\"\"",
          "227:         return self._get_response()",
          "229:     def close(self) -> concurrent.futures.Future:",
          "230:         \"\"\"",
          "231:         Close the operation, whether or not it has completed.",
          "233:         Returns a Future which completes with a result of None",
          "234:         when the operation has closed.",
          "235:         \"\"\"",
          "236:         return super().close()",
          "239: class CreateDebugPasswordOperation(model._CreateDebugPasswordOperation):",
          "240:     \"\"\"",
          "241:     CreateDebugPasswordOperation",
          "243:     Create with GreengrassCoreIPCClient.new_create_debug_password()",
          "244:     \"\"\"",
          "246:     def activate(self, request: model.CreateDebugPasswordRequest) -> concurrent.futures.Future:",
          "247:         \"\"\"",
          "248:         Activate this operation by sending the initial CreateDebugPasswordRequest message.",
          "250:         Returns a Future which completes with a result of None if the",
          "251:         request is successfully written to the wire, or an exception if",
          "252:         the request fails to send.",
          "253:         \"\"\"",
          "254:         return self._activate(request)",
          "256:     def get_response(self) -> concurrent.futures.Future:",
          "257:         \"\"\"",
          "258:         Returns a Future which completes with a result of CreateDebugPasswordResponse,",
          "259:         when the initial response is received, or an exception.",
          "260:         \"\"\"",
          "261:         return self._get_response()",
          "263:     def close(self) -> concurrent.futures.Future:",
          "264:         \"\"\"",
          "265:         Close the operation, whether or not it has completed.",
          "267:         Returns a Future which completes with a result of None",
          "268:         when the operation has closed.",
          "269:         \"\"\"",
          "270:         return super().close()",
          "273: class DeferComponentUpdateOperation(model._DeferComponentUpdateOperation):",
          "274:     \"\"\"",
          "275:     DeferComponentUpdateOperation",
          "277:     Create with GreengrassCoreIPCClient.new_defer_component_update()",
          "278:     \"\"\"",
          "280:     def activate(self, request: model.DeferComponentUpdateRequest) -> concurrent.futures.Future:",
          "281:         \"\"\"",
          "282:         Activate this operation by sending the initial DeferComponentUpdateRequest message.",
          "284:         Returns a Future which completes with a result of None if the",
          "285:         request is successfully written to the wire, or an exception if",
          "286:         the request fails to send.",
          "287:         \"\"\"",
          "288:         return self._activate(request)",
          "290:     def get_response(self) -> concurrent.futures.Future:",
          "291:         \"\"\"",
          "292:         Returns a Future which completes with a result of DeferComponentUpdateResponse,",
          "293:         when the initial response is received, or an exception.",
          "294:         \"\"\"",
          "295:         return self._get_response()",
          "297:     def close(self) -> concurrent.futures.Future:",
          "298:         \"\"\"",
          "299:         Close the operation, whether or not it has completed.",
          "301:         Returns a Future which completes with a result of None",
          "302:         when the operation has closed.",
          "303:         \"\"\"",
          "304:         return super().close()",
          "307: class SendConfigurationValidityReportOperation(model._SendConfigurationValidityReportOperation):",
          "308:     \"\"\"",
          "309:     SendConfigurationValidityReportOperation",
          "311:     Create with GreengrassCoreIPCClient.new_send_configuration_validity_report()",
          "312:     \"\"\"",
          "314:     def activate(self, request: model.SendConfigurationValidityReportRequest) -> concurrent.futures.Future:",
          "315:         \"\"\"",
          "316:         Activate this operation by sending the initial SendConfigurationValidityReportRequest message.",
          "318:         Returns a Future which completes with a result of None if the",
          "319:         request is successfully written to the wire, or an exception if",
          "320:         the request fails to send.",
          "321:         \"\"\"",
          "322:         return self._activate(request)",
          "324:     def get_response(self) -> concurrent.futures.Future:",
          "325:         \"\"\"",
          "326:         Returns a Future which completes with a result of SendConfigurationValidityReportResponse,",
          "327:         when the initial response is received, or an exception.",
          "328:         \"\"\"",
          "329:         return self._get_response()",
          "331:     def close(self) -> concurrent.futures.Future:",
          "332:         \"\"\"",
          "333:         Close the operation, whether or not it has completed.",
          "335:         Returns a Future which completes with a result of None",
          "336:         when the operation has closed.",
          "337:         \"\"\"",
          "338:         return super().close()",
          "341: class UpdateConfigurationOperation(model._UpdateConfigurationOperation):",
          "342:     \"\"\"",
          "343:     UpdateConfigurationOperation",
          "345:     Create with GreengrassCoreIPCClient.new_update_configuration()",
          "346:     \"\"\"",
          "348:     def activate(self, request: model.UpdateConfigurationRequest) -> concurrent.futures.Future:",
          "349:         \"\"\"",
          "350:         Activate this operation by sending the initial UpdateConfigurationRequest message.",
          "352:         Returns a Future which completes with a result of None if the",
          "353:         request is successfully written to the wire, or an exception if",
          "354:         the request fails to send.",
          "355:         \"\"\"",
          "356:         return self._activate(request)",
          "358:     def get_response(self) -> concurrent.futures.Future:",
          "359:         \"\"\"",
          "360:         Returns a Future which completes with a result of UpdateConfigurationResponse,",
          "361:         when the initial response is received, or an exception.",
          "362:         \"\"\"",
          "363:         return self._get_response()",
          "365:     def close(self) -> concurrent.futures.Future:",
          "366:         \"\"\"",
          "367:         Close the operation, whether or not it has completed.",
          "369:         Returns a Future which completes with a result of None",
          "370:         when the operation has closed.",
          "371:         \"\"\"",
          "372:         return super().close()",
          "375: class SubscribeToValidateConfigurationUpdatesStreamHandler(rpc.StreamResponseHandler):",
          "376:     \"\"\"",
          "377:     Event handler for SubscribeToValidateConfigurationUpdatesOperation",
          "379:     Inherit from this class and override methods to handle",
          "380:     stream events during a SubscribeToValidateConfigurationUpdatesOperation.",
          "381:     \"\"\"",
          "383:     def on_stream_event(self, event: model.ValidateConfigurationUpdateEvents) -> None:",
          "384:         \"\"\"",
          "385:         Invoked when a ValidateConfigurationUpdateEvents is received.",
          "386:         \"\"\"",
          "387:         pass",
          "389:     def on_stream_error(self, error: Exception) -> bool:",
          "390:         \"\"\"",
          "391:         Invoked when an error occurs on the operation stream.",
          "393:         Return True if operation should close as a result of this error,",
          "394:         \"\"\"",
          "395:         return True",
          "397:     def on_stream_closed(self) -> None:",
          "398:         \"\"\"",
          "399:         Invoked when the stream for this operation is closed.",
          "400:         \"\"\"",
          "401:         pass",
          "404: class SubscribeToValidateConfigurationUpdatesOperation(model._SubscribeToValidateConfigurationUpdatesOperation):",
          "405:     \"\"\"",
          "406:     SubscribeToValidateConfigurationUpdatesOperation",
          "408:     Create with GreengrassCoreIPCClient.new_subscribe_to_validate_configuration_updates()",
          "409:     \"\"\"",
          "411:     def activate(self, request: model.SubscribeToValidateConfigurationUpdatesRequest) -> concurrent.futures.Future:",
          "412:         \"\"\"",
          "413:         Activate this operation by sending the initial SubscribeToValidateConfigurationUpdatesRequest message.",
          "415:         Returns a Future which completes with a result of None if the",
          "416:         request is successfully written to the wire, or an exception if",
          "417:         the request fails to send.",
          "418:         \"\"\"",
          "419:         return self._activate(request)",
          "421:     def get_response(self) -> concurrent.futures.Future:",
          "422:         \"\"\"",
          "423:         Returns a Future which completes with a result of SubscribeToValidateConfigurationUpdatesResponse,",
          "424:         when the initial response is received, or an exception.",
          "425:         \"\"\"",
          "426:         return self._get_response()",
          "428:     def close(self) -> concurrent.futures.Future:",
          "429:         \"\"\"",
          "430:         Close the operation, whether or not it has completed.",
          "432:         Returns a Future which completes with a result of None",
          "433:         when the operation has closed.",
          "434:         \"\"\"",
          "435:         return super().close()",
          "438: class ValidateAuthorizationTokenOperation(model._ValidateAuthorizationTokenOperation):",
          "439:     \"\"\"",
          "440:     ValidateAuthorizationTokenOperation",
          "442:     Create with GreengrassCoreIPCClient.new_validate_authorization_token()",
          "443:     \"\"\"",
          "445:     def activate(self, request: model.ValidateAuthorizationTokenRequest) -> concurrent.futures.Future:",
          "446:         \"\"\"",
          "447:         Activate this operation by sending the initial ValidateAuthorizationTokenRequest message.",
          "449:         Returns a Future which completes with a result of None if the",
          "450:         request is successfully written to the wire, or an exception if",
          "451:         the request fails to send.",
          "452:         \"\"\"",
          "453:         return self._activate(request)",
          "455:     def get_response(self) -> concurrent.futures.Future:",
          "456:         \"\"\"",
          "457:         Returns a Future which completes with a result of ValidateAuthorizationTokenResponse,",
          "458:         when the initial response is received, or an exception.",
          "459:         \"\"\"",
          "460:         return self._get_response()",
          "462:     def close(self) -> concurrent.futures.Future:",
          "463:         \"\"\"",
          "464:         Close the operation, whether or not it has completed.",
          "466:         Returns a Future which completes with a result of None",
          "467:         when the operation has closed.",
          "468:         \"\"\"",
          "469:         return super().close()",
          "472: class RestartComponentOperation(model._RestartComponentOperation):",
          "473:     \"\"\"",
          "474:     RestartComponentOperation",
          "476:     Create with GreengrassCoreIPCClient.new_restart_component()",
          "477:     \"\"\"",
          "479:     def activate(self, request: model.RestartComponentRequest) -> concurrent.futures.Future:",
          "480:         \"\"\"",
          "481:         Activate this operation by sending the initial RestartComponentRequest message.",
          "483:         Returns a Future which completes with a result of None if the",
          "484:         request is successfully written to the wire, or an exception if",
          "485:         the request fails to send.",
          "486:         \"\"\"",
          "487:         return self._activate(request)",
          "489:     def get_response(self) -> concurrent.futures.Future:",
          "490:         \"\"\"",
          "491:         Returns a Future which completes with a result of RestartComponentResponse,",
          "492:         when the initial response is received, or an exception.",
          "493:         \"\"\"",
          "494:         return self._get_response()",
          "496:     def close(self) -> concurrent.futures.Future:",
          "497:         \"\"\"",
          "498:         Close the operation, whether or not it has completed.",
          "500:         Returns a Future which completes with a result of None",
          "501:         when the operation has closed.",
          "502:         \"\"\"",
          "503:         return super().close()",
          "506: class GetLocalDeploymentStatusOperation(model._GetLocalDeploymentStatusOperation):",
          "507:     \"\"\"",
          "508:     GetLocalDeploymentStatusOperation",
          "510:     Create with GreengrassCoreIPCClient.new_get_local_deployment_status()",
          "511:     \"\"\"",
          "513:     def activate(self, request: model.GetLocalDeploymentStatusRequest) -> concurrent.futures.Future:",
          "514:         \"\"\"",
          "515:         Activate this operation by sending the initial GetLocalDeploymentStatusRequest message.",
          "517:         Returns a Future which completes with a result of None if the",
          "518:         request is successfully written to the wire, or an exception if",
          "519:         the request fails to send.",
          "520:         \"\"\"",
          "521:         return self._activate(request)",
          "523:     def get_response(self) -> concurrent.futures.Future:",
          "524:         \"\"\"",
          "525:         Returns a Future which completes with a result of GetLocalDeploymentStatusResponse,",
          "526:         when the initial response is received, or an exception.",
          "527:         \"\"\"",
          "528:         return self._get_response()",
          "530:     def close(self) -> concurrent.futures.Future:",
          "531:         \"\"\"",
          "532:         Close the operation, whether or not it has completed.",
          "534:         Returns a Future which completes with a result of None",
          "535:         when the operation has closed.",
          "536:         \"\"\"",
          "537:         return super().close()",
          "540: class GetSecretValueOperation(model._GetSecretValueOperation):",
          "541:     \"\"\"",
          "542:     GetSecretValueOperation",
          "544:     Create with GreengrassCoreIPCClient.new_get_secret_value()",
          "545:     \"\"\"",
          "547:     def activate(self, request: model.GetSecretValueRequest) -> concurrent.futures.Future:",
          "548:         \"\"\"",
          "549:         Activate this operation by sending the initial GetSecretValueRequest message.",
          "551:         Returns a Future which completes with a result of None if the",
          "552:         request is successfully written to the wire, or an exception if",
          "553:         the request fails to send.",
          "554:         \"\"\"",
          "555:         return self._activate(request)",
          "557:     def get_response(self) -> concurrent.futures.Future:",
          "558:         \"\"\"",
          "559:         Returns a Future which completes with a result of GetSecretValueResponse,",
          "560:         when the initial response is received, or an exception.",
          "561:         \"\"\"",
          "562:         return self._get_response()",
          "564:     def close(self) -> concurrent.futures.Future:",
          "565:         \"\"\"",
          "566:         Close the operation, whether or not it has completed.",
          "568:         Returns a Future which completes with a result of None",
          "569:         when the operation has closed.",
          "570:         \"\"\"",
          "571:         return super().close()",
          "574: class UpdateStateOperation(model._UpdateStateOperation):",
          "575:     \"\"\"",
          "576:     UpdateStateOperation",
          "578:     Create with GreengrassCoreIPCClient.new_update_state()",
          "579:     \"\"\"",
          "581:     def activate(self, request: model.UpdateStateRequest) -> concurrent.futures.Future:",
          "582:         \"\"\"",
          "583:         Activate this operation by sending the initial UpdateStateRequest message.",
          "585:         Returns a Future which completes with a result of None if the",
          "586:         request is successfully written to the wire, or an exception if",
          "587:         the request fails to send.",
          "588:         \"\"\"",
          "589:         return self._activate(request)",
          "591:     def get_response(self) -> concurrent.futures.Future:",
          "592:         \"\"\"",
          "593:         Returns a Future which completes with a result of UpdateStateResponse,",
          "594:         when the initial response is received, or an exception.",
          "595:         \"\"\"",
          "596:         return self._get_response()",
          "598:     def close(self) -> concurrent.futures.Future:",
          "599:         \"\"\"",
          "600:         Close the operation, whether or not it has completed.",
          "602:         Returns a Future which completes with a result of None",
          "603:         when the operation has closed.",
          "604:         \"\"\"",
          "605:         return super().close()",
          "608: class GetConfigurationOperation(model._GetConfigurationOperation):",
          "609:     \"\"\"",
          "610:     GetConfigurationOperation",
          "612:     Create with GreengrassCoreIPCClient.new_get_configuration()",
          "613:     \"\"\"",
          "615:     def activate(self, request: model.GetConfigurationRequest) -> concurrent.futures.Future:",
          "616:         \"\"\"",
          "617:         Activate this operation by sending the initial GetConfigurationRequest message.",
          "619:         Returns a Future which completes with a result of None if the",
          "620:         request is successfully written to the wire, or an exception if",
          "621:         the request fails to send.",
          "622:         \"\"\"",
          "623:         return self._activate(request)",
          "625:     def get_response(self) -> concurrent.futures.Future:",
          "626:         \"\"\"",
          "627:         Returns a Future which completes with a result of GetConfigurationResponse,",
          "628:         when the initial response is received, or an exception.",
          "629:         \"\"\"",
          "630:         return self._get_response()",
          "632:     def close(self) -> concurrent.futures.Future:",
          "633:         \"\"\"",
          "634:         Close the operation, whether or not it has completed.",
          "636:         Returns a Future which completes with a result of None",
          "637:         when the operation has closed.",
          "638:         \"\"\"",
          "639:         return super().close()",
          "642: class SubscribeToTopicStreamHandler(rpc.StreamResponseHandler):",
          "643:     \"\"\"",
          "644:     Event handler for SubscribeToTopicOperation",
          "646:     Inherit from this class and override methods to handle",
          "647:     stream events during a SubscribeToTopicOperation.",
          "648:     \"\"\"",
          "650:     def on_stream_event(self, event: model.SubscriptionResponseMessage) -> None:",
          "651:         \"\"\"",
          "652:         Invoked when a SubscriptionResponseMessage is received.",
          "653:         \"\"\"",
          "654:         pass",
          "656:     def on_stream_error(self, error: Exception) -> bool:",
          "657:         \"\"\"",
          "658:         Invoked when an error occurs on the operation stream.",
          "660:         Return True if operation should close as a result of this error,",
          "661:         \"\"\"",
          "662:         return True",
          "664:     def on_stream_closed(self) -> None:",
          "665:         \"\"\"",
          "666:         Invoked when the stream for this operation is closed.",
          "667:         \"\"\"",
          "668:         pass",
          "671: class SubscribeToTopicOperation(model._SubscribeToTopicOperation):",
          "672:     \"\"\"",
          "673:     SubscribeToTopicOperation",
          "675:     Create with GreengrassCoreIPCClient.new_subscribe_to_topic()",
          "676:     \"\"\"",
          "678:     def activate(self, request: model.SubscribeToTopicRequest) -> concurrent.futures.Future:",
          "679:         \"\"\"",
          "680:         Activate this operation by sending the initial SubscribeToTopicRequest message.",
          "682:         Returns a Future which completes with a result of None if the",
          "683:         request is successfully written to the wire, or an exception if",
          "684:         the request fails to send.",
          "685:         \"\"\"",
          "686:         return self._activate(request)",
          "688:     def get_response(self) -> concurrent.futures.Future:",
          "689:         \"\"\"",
          "690:         Returns a Future which completes with a result of SubscribeToTopicResponse,",
          "691:         when the initial response is received, or an exception.",
          "692:         \"\"\"",
          "693:         return self._get_response()",
          "695:     def close(self) -> concurrent.futures.Future:",
          "696:         \"\"\"",
          "697:         Close the operation, whether or not it has completed.",
          "699:         Returns a Future which completes with a result of None",
          "700:         when the operation has closed.",
          "701:         \"\"\"",
          "702:         return super().close()",
          "705: class GetComponentDetailsOperation(model._GetComponentDetailsOperation):",
          "706:     \"\"\"",
          "707:     GetComponentDetailsOperation",
          "709:     Create with GreengrassCoreIPCClient.new_get_component_details()",
          "710:     \"\"\"",
          "712:     def activate(self, request: model.GetComponentDetailsRequest) -> concurrent.futures.Future:",
          "713:         \"\"\"",
          "714:         Activate this operation by sending the initial GetComponentDetailsRequest message.",
          "716:         Returns a Future which completes with a result of None if the",
          "717:         request is successfully written to the wire, or an exception if",
          "718:         the request fails to send.",
          "719:         \"\"\"",
          "720:         return self._activate(request)",
          "722:     def get_response(self) -> concurrent.futures.Future:",
          "723:         \"\"\"",
          "724:         Returns a Future which completes with a result of GetComponentDetailsResponse,",
          "725:         when the initial response is received, or an exception.",
          "726:         \"\"\"",
          "727:         return self._get_response()",
          "729:     def close(self) -> concurrent.futures.Future:",
          "730:         \"\"\"",
          "731:         Close the operation, whether or not it has completed.",
          "733:         Returns a Future which completes with a result of None",
          "734:         when the operation has closed.",
          "735:         \"\"\"",
          "736:         return super().close()",
          "739: class SubscribeToComponentUpdatesStreamHandler(rpc.StreamResponseHandler):",
          "740:     \"\"\"",
          "741:     Event handler for SubscribeToComponentUpdatesOperation",
          "743:     Inherit from this class and override methods to handle",
          "744:     stream events during a SubscribeToComponentUpdatesOperation.",
          "745:     \"\"\"",
          "747:     def on_stream_event(self, event: model.ComponentUpdatePolicyEvents) -> None:",
          "748:         \"\"\"",
          "749:         Invoked when a ComponentUpdatePolicyEvents is received.",
          "750:         \"\"\"",
          "751:         pass",
          "753:     def on_stream_error(self, error: Exception) -> bool:",
          "754:         \"\"\"",
          "755:         Invoked when an error occurs on the operation stream.",
          "757:         Return True if operation should close as a result of this error,",
          "758:         \"\"\"",
          "759:         return True",
          "761:     def on_stream_closed(self) -> None:",
          "762:         \"\"\"",
          "763:         Invoked when the stream for this operation is closed.",
          "764:         \"\"\"",
          "765:         pass",
          "768: class SubscribeToComponentUpdatesOperation(model._SubscribeToComponentUpdatesOperation):",
          "769:     \"\"\"",
          "770:     SubscribeToComponentUpdatesOperation",
          "772:     Create with GreengrassCoreIPCClient.new_subscribe_to_component_updates()",
          "773:     \"\"\"",
          "775:     def activate(self, request: model.SubscribeToComponentUpdatesRequest) -> concurrent.futures.Future:",
          "776:         \"\"\"",
          "777:         Activate this operation by sending the initial SubscribeToComponentUpdatesRequest message.",
          "779:         Returns a Future which completes with a result of None if the",
          "780:         request is successfully written to the wire, or an exception if",
          "781:         the request fails to send.",
          "782:         \"\"\"",
          "783:         return self._activate(request)",
          "785:     def get_response(self) -> concurrent.futures.Future:",
          "786:         \"\"\"",
          "787:         Returns a Future which completes with a result of SubscribeToComponentUpdatesResponse,",
          "788:         when the initial response is received, or an exception.",
          "789:         \"\"\"",
          "790:         return self._get_response()",
          "792:     def close(self) -> concurrent.futures.Future:",
          "793:         \"\"\"",
          "794:         Close the operation, whether or not it has completed.",
          "796:         Returns a Future which completes with a result of None",
          "797:         when the operation has closed.",
          "798:         \"\"\"",
          "799:         return super().close()",
          "802: class ListLocalDeploymentsOperation(model._ListLocalDeploymentsOperation):",
          "803:     \"\"\"",
          "804:     ListLocalDeploymentsOperation",
          "806:     Create with GreengrassCoreIPCClient.new_list_local_deployments()",
          "807:     \"\"\"",
          "809:     def activate(self, request: model.ListLocalDeploymentsRequest) -> concurrent.futures.Future:",
          "810:         \"\"\"",
          "811:         Activate this operation by sending the initial ListLocalDeploymentsRequest message.",
          "813:         Returns a Future which completes with a result of None if the",
          "814:         request is successfully written to the wire, or an exception if",
          "815:         the request fails to send.",
          "816:         \"\"\"",
          "817:         return self._activate(request)",
          "819:     def get_response(self) -> concurrent.futures.Future:",
          "820:         \"\"\"",
          "821:         Returns a Future which completes with a result of ListLocalDeploymentsResponse,",
          "822:         when the initial response is received, or an exception.",
          "823:         \"\"\"",
          "824:         return self._get_response()",
          "826:     def close(self) -> concurrent.futures.Future:",
          "827:         \"\"\"",
          "828:         Close the operation, whether or not it has completed.",
          "830:         Returns a Future which completes with a result of None",
          "831:         when the operation has closed.",
          "832:         \"\"\"",
          "833:         return super().close()",
          "836: class StopComponentOperation(model._StopComponentOperation):",
          "837:     \"\"\"",
          "838:     StopComponentOperation",
          "840:     Create with GreengrassCoreIPCClient.new_stop_component()",
          "841:     \"\"\"",
          "843:     def activate(self, request: model.StopComponentRequest) -> concurrent.futures.Future:",
          "844:         \"\"\"",
          "845:         Activate this operation by sending the initial StopComponentRequest message.",
          "847:         Returns a Future which completes with a result of None if the",
          "848:         request is successfully written to the wire, or an exception if",
          "849:         the request fails to send.",
          "850:         \"\"\"",
          "851:         return self._activate(request)",
          "853:     def get_response(self) -> concurrent.futures.Future:",
          "854:         \"\"\"",
          "855:         Returns a Future which completes with a result of StopComponentResponse,",
          "856:         when the initial response is received, or an exception.",
          "857:         \"\"\"",
          "858:         return self._get_response()",
          "860:     def close(self) -> concurrent.futures.Future:",
          "861:         \"\"\"",
          "862:         Close the operation, whether or not it has completed.",
          "864:         Returns a Future which completes with a result of None",
          "865:         when the operation has closed.",
          "866:         \"\"\"",
          "867:         return super().close()",
          "870: class CreateLocalDeploymentOperation(model._CreateLocalDeploymentOperation):",
          "871:     \"\"\"",
          "872:     CreateLocalDeploymentOperation",
          "874:     Create with GreengrassCoreIPCClient.new_create_local_deployment()",
          "875:     \"\"\"",
          "877:     def activate(self, request: model.CreateLocalDeploymentRequest) -> concurrent.futures.Future:",
          "878:         \"\"\"",
          "879:         Activate this operation by sending the initial CreateLocalDeploymentRequest message.",
          "881:         Returns a Future which completes with a result of None if the",
          "882:         request is successfully written to the wire, or an exception if",
          "883:         the request fails to send.",
          "884:         \"\"\"",
          "885:         return self._activate(request)",
          "887:     def get_response(self) -> concurrent.futures.Future:",
          "888:         \"\"\"",
          "889:         Returns a Future which completes with a result of CreateLocalDeploymentResponse,",
          "890:         when the initial response is received, or an exception.",
          "891:         \"\"\"",
          "892:         return self._get_response()",
          "894:     def close(self) -> concurrent.futures.Future:",
          "895:         \"\"\"",
          "896:         Close the operation, whether or not it has completed.",
          "898:         Returns a Future which completes with a result of None",
          "899:         when the operation has closed.",
          "900:         \"\"\"",
          "901:         return super().close()",
          "904: class GreengrassCoreIPCClient(rpc.Client):",
          "905:     \"\"\"",
          "906:     Client for the GreengrassCoreIPC service.",
          "908:     Args:",
          "909:         connection: Connection that this client will use.",
          "910:     \"\"\"",
          "912:     def __init__(self, connection: rpc.Connection):",
          "913:         super().__init__(connection, model.SHAPE_INDEX)",
          "915:     def new_subscribe_to_iot_core(self, stream_handler: SubscribeToIoTCoreStreamHandler) -> SubscribeToIoTCoreOperation:",
          "916:         \"\"\"",
          "917:         Create a new SubscribeToIoTCoreOperation.",
          "919:         This operation will not send or receive any data until activate()",
          "920:         is called. Call activate() when you're ready for callbacks and",
          "921:         events to fire.",
          "923:         Args:",
          "924:             stream_handler: Methods on this object will be called as",
          "925:                 stream events happen on this operation.",
          "926:         \"\"\"",
          "927:         return self._new_operation(SubscribeToIoTCoreOperation, stream_handler)",
          "929:     def new_publish_to_topic(self) -> PublishToTopicOperation:",
          "930:         \"\"\"",
          "931:         Create a new PublishToTopicOperation.",
          "933:         This operation will not send or receive any data until activate()",
          "934:         is called. Call activate() when you're ready for callbacks and",
          "935:         events to fire.",
          "936:         \"\"\"",
          "937:         return self._new_operation(PublishToTopicOperation)",
          "939:     def new_publish_to_iot_core(self) -> PublishToIoTCoreOperation:",
          "940:         \"\"\"",
          "941:         Create a new PublishToIoTCoreOperation.",
          "943:         This operation will not send or receive any data until activate()",
          "944:         is called. Call activate() when you're ready for callbacks and",
          "945:         events to fire.",
          "946:         \"\"\"",
          "947:         return self._new_operation(PublishToIoTCoreOperation)",
          "949:     def new_subscribe_to_configuration_update(self, stream_handler: SubscribeToConfigurationUpdateStreamHandler) -> SubscribeToConfigurationUpdateOperation:",
          "950:         \"\"\"",
          "951:         Create a new SubscribeToConfigurationUpdateOperation.",
          "953:         This operation will not send or receive any data until activate()",
          "954:         is called. Call activate() when you're ready for callbacks and",
          "955:         events to fire.",
          "957:         Args:",
          "958:             stream_handler: Methods on this object will be called as",
          "959:                 stream events happen on this operation.",
          "960:         \"\"\"",
          "961:         return self._new_operation(SubscribeToConfigurationUpdateOperation, stream_handler)",
          "963:     def new_list_components(self) -> ListComponentsOperation:",
          "964:         \"\"\"",
          "965:         Create a new ListComponentsOperation.",
          "967:         This operation will not send or receive any data until activate()",
          "968:         is called. Call activate() when you're ready for callbacks and",
          "969:         events to fire.",
          "970:         \"\"\"",
          "971:         return self._new_operation(ListComponentsOperation)",
          "973:     def new_create_debug_password(self) -> CreateDebugPasswordOperation:",
          "974:         \"\"\"",
          "975:         Create a new CreateDebugPasswordOperation.",
          "977:         This operation will not send or receive any data until activate()",
          "978:         is called. Call activate() when you're ready for callbacks and",
          "979:         events to fire.",
          "980:         \"\"\"",
          "981:         return self._new_operation(CreateDebugPasswordOperation)",
          "983:     def new_defer_component_update(self) -> DeferComponentUpdateOperation:",
          "984:         \"\"\"",
          "985:         Create a new DeferComponentUpdateOperation.",
          "987:         This operation will not send or receive any data until activate()",
          "988:         is called. Call activate() when you're ready for callbacks and",
          "989:         events to fire.",
          "990:         \"\"\"",
          "991:         return self._new_operation(DeferComponentUpdateOperation)",
          "993:     def new_send_configuration_validity_report(self) -> SendConfigurationValidityReportOperation:",
          "994:         \"\"\"",
          "995:         Create a new SendConfigurationValidityReportOperation.",
          "997:         This operation will not send or receive any data until activate()",
          "998:         is called. Call activate() when you're ready for callbacks and",
          "999:         events to fire.",
          "1000:         \"\"\"",
          "1001:         return self._new_operation(SendConfigurationValidityReportOperation)",
          "1003:     def new_update_configuration(self) -> UpdateConfigurationOperation:",
          "1004:         \"\"\"",
          "1005:         Create a new UpdateConfigurationOperation.",
          "1007:         This operation will not send or receive any data until activate()",
          "1008:         is called. Call activate() when you're ready for callbacks and",
          "1009:         events to fire.",
          "1010:         \"\"\"",
          "1011:         return self._new_operation(UpdateConfigurationOperation)",
          "1013:     def new_subscribe_to_validate_configuration_updates(self, stream_handler: SubscribeToValidateConfigurationUpdatesStreamHandler) -> SubscribeToValidateConfigurationUpdatesOperation:",
          "1014:         \"\"\"",
          "1015:         Create a new SubscribeToValidateConfigurationUpdatesOperation.",
          "1017:         This operation will not send or receive any data until activate()",
          "1018:         is called. Call activate() when you're ready for callbacks and",
          "1019:         events to fire.",
          "1021:         Args:",
          "1022:             stream_handler: Methods on this object will be called as",
          "1023:                 stream events happen on this operation.",
          "1024:         \"\"\"",
          "1025:         return self._new_operation(SubscribeToValidateConfigurationUpdatesOperation, stream_handler)",
          "1027:     def new_validate_authorization_token(self) -> ValidateAuthorizationTokenOperation:",
          "1028:         \"\"\"",
          "1029:         Create a new ValidateAuthorizationTokenOperation.",
          "1031:         This operation will not send or receive any data until activate()",
          "1032:         is called. Call activate() when you're ready for callbacks and",
          "1033:         events to fire.",
          "1034:         \"\"\"",
          "1035:         return self._new_operation(ValidateAuthorizationTokenOperation)",
          "1037:     def new_restart_component(self) -> RestartComponentOperation:",
          "1038:         \"\"\"",
          "1039:         Create a new RestartComponentOperation.",
          "1041:         This operation will not send or receive any data until activate()",
          "1042:         is called. Call activate() when you're ready for callbacks and",
          "1043:         events to fire.",
          "1044:         \"\"\"",
          "1045:         return self._new_operation(RestartComponentOperation)",
          "1047:     def new_get_local_deployment_status(self) -> GetLocalDeploymentStatusOperation:",
          "1048:         \"\"\"",
          "1049:         Create a new GetLocalDeploymentStatusOperation.",
          "1051:         This operation will not send or receive any data until activate()",
          "1052:         is called. Call activate() when you're ready for callbacks and",
          "1053:         events to fire.",
          "1054:         \"\"\"",
          "1055:         return self._new_operation(GetLocalDeploymentStatusOperation)",
          "1057:     def new_get_secret_value(self) -> GetSecretValueOperation:",
          "1058:         \"\"\"",
          "1059:         Create a new GetSecretValueOperation.",
          "1061:         This operation will not send or receive any data until activate()",
          "1062:         is called. Call activate() when you're ready for callbacks and",
          "1063:         events to fire.",
          "1064:         \"\"\"",
          "1065:         return self._new_operation(GetSecretValueOperation)",
          "1067:     def new_update_state(self) -> UpdateStateOperation:",
          "1068:         \"\"\"",
          "1069:         Create a new UpdateStateOperation.",
          "1071:         This operation will not send or receive any data until activate()",
          "1072:         is called. Call activate() when you're ready for callbacks and",
          "1073:         events to fire.",
          "1074:         \"\"\"",
          "1075:         return self._new_operation(UpdateStateOperation)",
          "1077:     def new_get_configuration(self) -> GetConfigurationOperation:",
          "1078:         \"\"\"",
          "1079:         Create a new GetConfigurationOperation.",
          "1081:         This operation will not send or receive any data until activate()",
          "1082:         is called. Call activate() when you're ready for callbacks and",
          "1083:         events to fire.",
          "1084:         \"\"\"",
          "1085:         return self._new_operation(GetConfigurationOperation)",
          "1087:     def new_subscribe_to_topic(self, stream_handler: SubscribeToTopicStreamHandler) -> SubscribeToTopicOperation:",
          "1088:         \"\"\"",
          "1089:         Create a new SubscribeToTopicOperation.",
          "1091:         This operation will not send or receive any data until activate()",
          "1092:         is called. Call activate() when you're ready for callbacks and",
          "1093:         events to fire.",
          "1095:         Args:",
          "1096:             stream_handler: Methods on this object will be called as",
          "1097:                 stream events happen on this operation.",
          "1098:         \"\"\"",
          "1099:         return self._new_operation(SubscribeToTopicOperation, stream_handler)",
          "1101:     def new_get_component_details(self) -> GetComponentDetailsOperation:",
          "1102:         \"\"\"",
          "1103:         Create a new GetComponentDetailsOperation.",
          "1105:         This operation will not send or receive any data until activate()",
          "1106:         is called. Call activate() when you're ready for callbacks and",
          "1107:         events to fire.",
          "1108:         \"\"\"",
          "1109:         return self._new_operation(GetComponentDetailsOperation)",
          "1111:     def new_subscribe_to_component_updates(self, stream_handler: SubscribeToComponentUpdatesStreamHandler) -> SubscribeToComponentUpdatesOperation:",
          "1112:         \"\"\"",
          "1113:         Create a new SubscribeToComponentUpdatesOperation.",
          "1115:         This operation will not send or receive any data until activate()",
          "1116:         is called. Call activate() when you're ready for callbacks and",
          "1117:         events to fire.",
          "1119:         Args:",
          "1120:             stream_handler: Methods on this object will be called as",
          "1121:                 stream events happen on this operation.",
          "1122:         \"\"\"",
          "1123:         return self._new_operation(SubscribeToComponentUpdatesOperation, stream_handler)",
          "1125:     def new_list_local_deployments(self) -> ListLocalDeploymentsOperation:",
          "1126:         \"\"\"",
          "1127:         Create a new ListLocalDeploymentsOperation.",
          "1129:         This operation will not send or receive any data until activate()",
          "1130:         is called. Call activate() when you're ready for callbacks and",
          "1131:         events to fire.",
          "1132:         \"\"\"",
          "1133:         return self._new_operation(ListLocalDeploymentsOperation)",
          "1135:     def new_stop_component(self) -> StopComponentOperation:",
          "1136:         \"\"\"",
          "1137:         Create a new StopComponentOperation.",
          "1139:         This operation will not send or receive any data until activate()",
          "1140:         is called. Call activate() when you're ready for callbacks and",
          "1141:         events to fire.",
          "1142:         \"\"\"",
          "1143:         return self._new_operation(StopComponentOperation)",
          "1145:     def new_create_local_deployment(self) -> CreateLocalDeploymentOperation:",
          "1146:         \"\"\"",
          "1147:         Create a new CreateLocalDeploymentOperation.",
          "1149:         This operation will not send or receive any data until activate()",
          "1150:         is called. Call activate() when you're ready for callbacks and",
          "1151:         events to fire.",
          "1152:         \"\"\"",
          "1153:         return self._new_operation(CreateLocalDeploymentOperation)",
          "",
          "---------------"
        ],
        "awsiot/greengrasscoreipc/model.py||awsiot/greengrasscoreipc/model.py": [
          "File: awsiot/greengrasscoreipc/model.py -> awsiot/greengrasscoreipc/model.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: # This file is generated",
          "6: import awsiot.eventstreamrpc as rpc",
          "7: import base64",
          "8: import datetime",
          "9: import typing",
          "12: class GreengrassCoreIPCError(rpc.ErrorShape):",
          "13:     \"\"\"",
          "14:     Base for all error messages sent by server.",
          "15:     \"\"\"",
          "17:     def _get_error_type_string(self) -> str:",
          "18:         # overridden in subclasses",
          "19:         raise NotImplementedError",
          "21:     def is_retryable(self) -> bool:",
          "22:         return self._get_error_type_string() == 'server'",
          "24:     def is_server_error(self) -> bool:",
          "25:         return self._get_error_type_string() == 'server'",
          "27:     def is_client_error(self) -> bool:",
          "28:         return self._get_error_type_string() == 'client'",
          "31: class RunWithInfo(rpc.Shape):",
          "32:     \"\"\"",
          "33:     RunWithInfo",
          "35:     All attributes are None by default, and may be set by keyword in the constructor.",
          "37:     Keyword Args:",
          "38:         posix_user:",
          "40:     Attributes:",
          "41:         posix_user:",
          "42:     \"\"\"",
          "44:     def __init__(self, *,",
          "45:                  posix_user: typing.Optional[str] = None):",
          "46:         super().__init__()",
          "47:         self.posix_user = posix_user  # type: typing.Optional[str]",
          "49:     def _to_payload(self):",
          "50:         payload = {}",
          "51:         if self.posix_user is not None:",
          "52:             payload['posixUser'] = self.posix_user",
          "53:         return payload",
          "55:     @classmethod",
          "56:     def _from_payload(cls, payload):",
          "57:         new = cls()",
          "58:         if 'posixUser' in payload:",
          "59:             new.posix_user = payload['posixUser']",
          "60:         return new",
          "62:     @classmethod",
          "63:     def _model_name(cls):",
          "64:         return 'aws.greengrass#RunWithInfo'",
          "66:     def __repr__(self):",
          "67:         attrs = []",
          "68:         for attr, val in self.__dict__.items():",
          "69:             if val is not None:",
          "70:                 attrs.append('%s=%r' % (attr, val))",
          "71:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "73:     def __eq__(self, other):",
          "74:         if isinstance(other, self.__class__):",
          "75:             return self.__dict__ == other.__dict__",
          "76:         return False",
          "79: class PostComponentUpdateEvent(rpc.Shape):",
          "80:     \"\"\"",
          "81:     PostComponentUpdateEvent",
          "83:     All attributes are None by default, and may be set by keyword in the constructor.",
          "85:     Keyword Args:",
          "86:         deployment_id:",
          "88:     Attributes:",
          "89:         deployment_id:",
          "90:     \"\"\"",
          "92:     def __init__(self, *,",
          "93:                  deployment_id: typing.Optional[str] = None):",
          "94:         super().__init__()",
          "95:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "97:     def _to_payload(self):",
          "98:         payload = {}",
          "99:         if self.deployment_id is not None:",
          "100:             payload['deploymentId'] = self.deployment_id",
          "101:         return payload",
          "103:     @classmethod",
          "104:     def _from_payload(cls, payload):",
          "105:         new = cls()",
          "106:         if 'deploymentId' in payload:",
          "107:             new.deployment_id = payload['deploymentId']",
          "108:         return new",
          "110:     @classmethod",
          "111:     def _model_name(cls):",
          "112:         return 'aws.greengrass#PostComponentUpdateEvent'",
          "114:     def __repr__(self):",
          "115:         attrs = []",
          "116:         for attr, val in self.__dict__.items():",
          "117:             if val is not None:",
          "118:                 attrs.append('%s=%r' % (attr, val))",
          "119:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "121:     def __eq__(self, other):",
          "122:         if isinstance(other, self.__class__):",
          "123:             return self.__dict__ == other.__dict__",
          "124:         return False",
          "127: class PreComponentUpdateEvent(rpc.Shape):",
          "128:     \"\"\"",
          "129:     PreComponentUpdateEvent",
          "131:     All attributes are None by default, and may be set by keyword in the constructor.",
          "133:     Keyword Args:",
          "134:         deployment_id:",
          "135:         is_ggc_restarting:",
          "137:     Attributes:",
          "138:         deployment_id:",
          "139:         is_ggc_restarting:",
          "140:     \"\"\"",
          "142:     def __init__(self, *,",
          "143:                  deployment_id: typing.Optional[str] = None,",
          "144:                  is_ggc_restarting: typing.Optional[bool] = None):",
          "145:         super().__init__()",
          "146:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "147:         self.is_ggc_restarting = is_ggc_restarting  # type: typing.Optional[bool]",
          "149:     def _to_payload(self):",
          "150:         payload = {}",
          "151:         if self.deployment_id is not None:",
          "152:             payload['deploymentId'] = self.deployment_id",
          "153:         if self.is_ggc_restarting is not None:",
          "154:             payload['isGgcRestarting'] = self.is_ggc_restarting",
          "155:         return payload",
          "157:     @classmethod",
          "158:     def _from_payload(cls, payload):",
          "159:         new = cls()",
          "160:         if 'deploymentId' in payload:",
          "161:             new.deployment_id = payload['deploymentId']",
          "162:         if 'isGgcRestarting' in payload:",
          "163:             new.is_ggc_restarting = payload['isGgcRestarting']",
          "164:         return new",
          "166:     @classmethod",
          "167:     def _model_name(cls):",
          "168:         return 'aws.greengrass#PreComponentUpdateEvent'",
          "170:     def __repr__(self):",
          "171:         attrs = []",
          "172:         for attr, val in self.__dict__.items():",
          "173:             if val is not None:",
          "174:                 attrs.append('%s=%r' % (attr, val))",
          "175:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "177:     def __eq__(self, other):",
          "178:         if isinstance(other, self.__class__):",
          "179:             return self.__dict__ == other.__dict__",
          "180:         return False",
          "183: class LifecycleState:",
          "184:     \"\"\"",
          "185:     LifecycleState enum",
          "186:     \"\"\"",
          "188:     RUNNING = 'RUNNING'",
          "189:     ERRORED = 'ERRORED'",
          "190:     NEW = 'NEW'",
          "191:     FINISHED = 'FINISHED'",
          "192:     INSTALLED = 'INSTALLED'",
          "193:     BROKEN = 'BROKEN'",
          "194:     STARTING = 'STARTING'",
          "195:     STOPPING = 'STOPPING'",
          "198: class DeploymentStatus:",
          "199:     \"\"\"",
          "200:     DeploymentStatus enum",
          "201:     \"\"\"",
          "203:     QUEUED = 'QUEUED'",
          "204:     IN_PROGRESS = 'IN_PROGRESS'",
          "205:     SUCCEEDED = 'SUCCEEDED'",
          "206:     FAILED = 'FAILED'",
          "209: class ValidateConfigurationUpdateEvent(rpc.Shape):",
          "210:     \"\"\"",
          "211:     ValidateConfigurationUpdateEvent",
          "213:     All attributes are None by default, and may be set by keyword in the constructor.",
          "215:     Keyword Args:",
          "216:         configuration:",
          "217:         deployment_id:",
          "219:     Attributes:",
          "220:         configuration:",
          "221:         deployment_id:",
          "222:     \"\"\"",
          "224:     def __init__(self, *,",
          "225:                  configuration: typing.Optional[typing.Dict[str, typing.Any]] = None,",
          "226:                  deployment_id: typing.Optional[str] = None):",
          "227:         super().__init__()",
          "228:         self.configuration = configuration  # type: typing.Optional[typing.Dict[str, typing.Any]]",
          "229:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "231:     def _to_payload(self):",
          "232:         payload = {}",
          "233:         if self.configuration is not None:",
          "234:             payload['configuration'] = self.configuration",
          "235:         if self.deployment_id is not None:",
          "236:             payload['deploymentId'] = self.deployment_id",
          "237:         return payload",
          "239:     @classmethod",
          "240:     def _from_payload(cls, payload):",
          "241:         new = cls()",
          "242:         if 'configuration' in payload:",
          "243:             new.configuration = payload['configuration']",
          "244:         if 'deploymentId' in payload:",
          "245:             new.deployment_id = payload['deploymentId']",
          "246:         return new",
          "248:     @classmethod",
          "249:     def _model_name(cls):",
          "250:         return 'aws.greengrass#ValidateConfigurationUpdateEvent'",
          "252:     def __repr__(self):",
          "253:         attrs = []",
          "254:         for attr, val in self.__dict__.items():",
          "255:             if val is not None:",
          "256:                 attrs.append('%s=%r' % (attr, val))",
          "257:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "259:     def __eq__(self, other):",
          "260:         if isinstance(other, self.__class__):",
          "261:             return self.__dict__ == other.__dict__",
          "262:         return False",
          "265: class ConfigurationValidityStatus:",
          "266:     \"\"\"",
          "267:     ConfigurationValidityStatus enum",
          "268:     \"\"\"",
          "270:     ACCEPTED = 'ACCEPTED'",
          "271:     REJECTED = 'REJECTED'",
          "274: class ConfigurationUpdateEvent(rpc.Shape):",
          "275:     \"\"\"",
          "276:     ConfigurationUpdateEvent",
          "278:     All attributes are None by default, and may be set by keyword in the constructor.",
          "280:     Keyword Args:",
          "281:         component_name:",
          "282:         key_path:",
          "284:     Attributes:",
          "285:         component_name:",
          "286:         key_path:",
          "287:     \"\"\"",
          "289:     def __init__(self, *,",
          "290:                  component_name: typing.Optional[str] = None,",
          "291:                  key_path: typing.Optional[typing.List[str]] = None):",
          "292:         super().__init__()",
          "293:         self.component_name = component_name  # type: typing.Optional[str]",
          "294:         self.key_path = key_path  # type: typing.Optional[typing.List[str]]",
          "296:     def _to_payload(self):",
          "297:         payload = {}",
          "298:         if self.component_name is not None:",
          "299:             payload['componentName'] = self.component_name",
          "300:         if self.key_path is not None:",
          "301:             payload['keyPath'] = self.key_path",
          "302:         return payload",
          "304:     @classmethod",
          "305:     def _from_payload(cls, payload):",
          "306:         new = cls()",
          "307:         if 'componentName' in payload:",
          "308:             new.component_name = payload['componentName']",
          "309:         if 'keyPath' in payload:",
          "310:             new.key_path = payload['keyPath']",
          "311:         return new",
          "313:     @classmethod",
          "314:     def _model_name(cls):",
          "315:         return 'aws.greengrass#ConfigurationUpdateEvent'",
          "317:     def __repr__(self):",
          "318:         attrs = []",
          "319:         for attr, val in self.__dict__.items():",
          "320:             if val is not None:",
          "321:                 attrs.append('%s=%r' % (attr, val))",
          "322:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "324:     def __eq__(self, other):",
          "325:         if isinstance(other, self.__class__):",
          "326:             return self.__dict__ == other.__dict__",
          "327:         return False",
          "330: class BinaryMessage(rpc.Shape):",
          "331:     \"\"\"",
          "332:     BinaryMessage",
          "334:     All attributes are None by default, and may be set by keyword in the constructor.",
          "336:     Keyword Args:",
          "337:         message:",
          "339:     Attributes:",
          "340:         message:",
          "341:     \"\"\"",
          "343:     def __init__(self, *,",
          "344:                  message: typing.Optional[bytes] = None):",
          "345:         super().__init__()",
          "346:         self.message = message  # type: typing.Optional[bytes]",
          "348:     def _to_payload(self):",
          "349:         payload = {}",
          "350:         if self.message is not None:",
          "351:             payload['message'] = base64.b64encode(self.message).decode()",
          "352:         return payload",
          "354:     @classmethod",
          "355:     def _from_payload(cls, payload):",
          "356:         new = cls()",
          "357:         if 'message' in payload:",
          "358:             new.message = base64.b64decode(payload['message'])",
          "359:         return new",
          "361:     @classmethod",
          "362:     def _model_name(cls):",
          "363:         return 'aws.greengrass#BinaryMessage'",
          "365:     def __repr__(self):",
          "366:         attrs = []",
          "367:         for attr, val in self.__dict__.items():",
          "368:             if val is not None:",
          "369:                 attrs.append('%s=%r' % (attr, val))",
          "370:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "372:     def __eq__(self, other):",
          "373:         if isinstance(other, self.__class__):",
          "374:             return self.__dict__ == other.__dict__",
          "375:         return False",
          "378: class JsonMessage(rpc.Shape):",
          "379:     \"\"\"",
          "380:     JsonMessage",
          "382:     All attributes are None by default, and may be set by keyword in the constructor.",
          "384:     Keyword Args:",
          "385:         message:",
          "387:     Attributes:",
          "388:         message:",
          "389:     \"\"\"",
          "391:     def __init__(self, *,",
          "392:                  message: typing.Optional[typing.Dict[str, typing.Any]] = None):",
          "393:         super().__init__()",
          "394:         self.message = message  # type: typing.Optional[typing.Dict[str, typing.Any]]",
          "396:     def _to_payload(self):",
          "397:         payload = {}",
          "398:         if self.message is not None:",
          "399:             payload['message'] = self.message",
          "400:         return payload",
          "402:     @classmethod",
          "403:     def _from_payload(cls, payload):",
          "404:         new = cls()",
          "405:         if 'message' in payload:",
          "406:             new.message = payload['message']",
          "407:         return new",
          "409:     @classmethod",
          "410:     def _model_name(cls):",
          "411:         return 'aws.greengrass#JsonMessage'",
          "413:     def __repr__(self):",
          "414:         attrs = []",
          "415:         for attr, val in self.__dict__.items():",
          "416:             if val is not None:",
          "417:                 attrs.append('%s=%r' % (attr, val))",
          "418:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "420:     def __eq__(self, other):",
          "421:         if isinstance(other, self.__class__):",
          "422:             return self.__dict__ == other.__dict__",
          "423:         return False",
          "426: class MQTTMessage(rpc.Shape):",
          "427:     \"\"\"",
          "428:     MQTTMessage",
          "430:     All attributes are None by default, and may be set by keyword in the constructor.",
          "432:     Keyword Args:",
          "433:         topic_name:",
          "434:         payload:",
          "436:     Attributes:",
          "437:         topic_name:",
          "438:         payload:",
          "439:     \"\"\"",
          "441:     def __init__(self, *,",
          "442:                  topic_name: typing.Optional[str] = None,",
          "443:                  payload: typing.Optional[bytes] = None):",
          "444:         super().__init__()",
          "445:         self.topic_name = topic_name  # type: typing.Optional[str]",
          "446:         self.payload = payload  # type: typing.Optional[bytes]",
          "448:     def _to_payload(self):",
          "449:         payload = {}",
          "450:         if self.topic_name is not None:",
          "451:             payload['topicName'] = self.topic_name",
          "452:         if self.payload is not None:",
          "453:             payload['payload'] = base64.b64encode(self.payload).decode()",
          "454:         return payload",
          "456:     @classmethod",
          "457:     def _from_payload(cls, payload):",
          "458:         new = cls()",
          "459:         if 'topicName' in payload:",
          "460:             new.topic_name = payload['topicName']",
          "461:         if 'payload' in payload:",
          "462:             new.payload = base64.b64decode(payload['payload'])",
          "463:         return new",
          "465:     @classmethod",
          "466:     def _model_name(cls):",
          "467:         return 'aws.greengrass#MQTTMessage'",
          "469:     def __repr__(self):",
          "470:         attrs = []",
          "471:         for attr, val in self.__dict__.items():",
          "472:             if val is not None:",
          "473:                 attrs.append('%s=%r' % (attr, val))",
          "474:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "476:     def __eq__(self, other):",
          "477:         if isinstance(other, self.__class__):",
          "478:             return self.__dict__ == other.__dict__",
          "479:         return False",
          "482: class ComponentUpdatePolicyEvents(rpc.Shape):",
          "483:     \"\"\"",
          "484:     MQTTMessage is a \"tagged union\" class.",
          "486:     When sending, only one of the attributes may be set.",
          "487:     When receiving, only one of the attributes will be set.",
          "488:     All other attributes will be None.",
          "490:     Keyword Args:",
          "491:         pre_update_event:",
          "492:         post_update_event:",
          "494:     Attributes:",
          "495:         pre_update_event:",
          "496:         post_update_event:",
          "497:     \"\"\"",
          "499:     def __init__(self, *,",
          "500:                  pre_update_event: typing.Optional[PreComponentUpdateEvent] = None,",
          "501:                  post_update_event: typing.Optional[PostComponentUpdateEvent] = None):",
          "502:         super().__init__()",
          "503:         self.pre_update_event = pre_update_event  # type: typing.Optional[PreComponentUpdateEvent]",
          "504:         self.post_update_event = post_update_event  # type: typing.Optional[PostComponentUpdateEvent]",
          "506:     def _to_payload(self):",
          "507:         payload = {}",
          "508:         if self.pre_update_event is not None:",
          "509:             payload['preUpdateEvent'] = self.pre_update_event._to_payload()",
          "510:         if self.post_update_event is not None:",
          "511:             payload['postUpdateEvent'] = self.post_update_event._to_payload()",
          "512:         return payload",
          "514:     @classmethod",
          "515:     def _from_payload(cls, payload):",
          "516:         new = cls()",
          "517:         if 'preUpdateEvent' in payload:",
          "518:             new.pre_update_event = PreComponentUpdateEvent._from_payload(payload['preUpdateEvent'])",
          "519:         if 'postUpdateEvent' in payload:",
          "520:             new.post_update_event = PostComponentUpdateEvent._from_payload(payload['postUpdateEvent'])",
          "521:         return new",
          "523:     @classmethod",
          "524:     def _model_name(cls):",
          "525:         return 'aws.greengrass#ComponentUpdatePolicyEvents'",
          "527:     def __repr__(self):",
          "528:         attrs = []",
          "529:         for attr, val in self.__dict__.items():",
          "530:             if val is not None:",
          "531:                 attrs.append('%s=%r' % (attr, val))",
          "532:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "534:     def __eq__(self, other):",
          "535:         if isinstance(other, self.__class__):",
          "536:             return self.__dict__ == other.__dict__",
          "537:         return False",
          "540: class ComponentDetails(rpc.Shape):",
          "541:     \"\"\"",
          "542:     ComponentDetails",
          "544:     All attributes are None by default, and may be set by keyword in the constructor.",
          "546:     Keyword Args:",
          "547:         component_name:",
          "548:         version:",
          "549:         state: LifecycleState enum value",
          "550:         configuration:",
          "552:     Attributes:",
          "553:         component_name:",
          "554:         version:",
          "555:         state: LifecycleState enum value",
          "556:         configuration:",
          "557:     \"\"\"",
          "559:     def __init__(self, *,",
          "560:                  component_name: typing.Optional[str] = None,",
          "561:                  version: typing.Optional[str] = None,",
          "562:                  state: typing.Optional[str] = None,",
          "563:                  configuration: typing.Optional[typing.Dict[str, typing.Any]] = None):",
          "564:         super().__init__()",
          "565:         self.component_name = component_name  # type: typing.Optional[str]",
          "566:         self.version = version  # type: typing.Optional[str]",
          "567:         self.state = state  # type: typing.Optional[str]",
          "568:         self.configuration = configuration  # type: typing.Optional[typing.Dict[str, typing.Any]]",
          "570:     def _to_payload(self):",
          "571:         payload = {}",
          "572:         if self.component_name is not None:",
          "573:             payload['componentName'] = self.component_name",
          "574:         if self.version is not None:",
          "575:             payload['version'] = self.version",
          "576:         if self.state is not None:",
          "577:             payload['state'] = self.state",
          "578:         if self.configuration is not None:",
          "579:             payload['configuration'] = self.configuration",
          "580:         return payload",
          "582:     @classmethod",
          "583:     def _from_payload(cls, payload):",
          "584:         new = cls()",
          "585:         if 'componentName' in payload:",
          "586:             new.component_name = payload['componentName']",
          "587:         if 'version' in payload:",
          "588:             new.version = payload['version']",
          "589:         if 'state' in payload:",
          "590:             new.state = payload['state']",
          "591:         if 'configuration' in payload:",
          "592:             new.configuration = payload['configuration']",
          "593:         return new",
          "595:     @classmethod",
          "596:     def _model_name(cls):",
          "597:         return 'aws.greengrass#ComponentDetails'",
          "599:     def __repr__(self):",
          "600:         attrs = []",
          "601:         for attr, val in self.__dict__.items():",
          "602:             if val is not None:",
          "603:                 attrs.append('%s=%r' % (attr, val))",
          "604:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "606:     def __eq__(self, other):",
          "607:         if isinstance(other, self.__class__):",
          "608:             return self.__dict__ == other.__dict__",
          "609:         return False",
          "612: class SubscriptionResponseMessage(rpc.Shape):",
          "613:     \"\"\"",
          "614:     ComponentDetails is a \"tagged union\" class.",
          "616:     When sending, only one of the attributes may be set.",
          "617:     When receiving, only one of the attributes will be set.",
          "618:     All other attributes will be None.",
          "620:     Keyword Args:",
          "621:         json_message:",
          "622:         binary_message:",
          "624:     Attributes:",
          "625:         json_message:",
          "626:         binary_message:",
          "627:     \"\"\"",
          "629:     def __init__(self, *,",
          "630:                  json_message: typing.Optional[JsonMessage] = None,",
          "631:                  binary_message: typing.Optional[BinaryMessage] = None):",
          "632:         super().__init__()",
          "633:         self.json_message = json_message  # type: typing.Optional[JsonMessage]",
          "634:         self.binary_message = binary_message  # type: typing.Optional[BinaryMessage]",
          "636:     def _to_payload(self):",
          "637:         payload = {}",
          "638:         if self.json_message is not None:",
          "639:             payload['jsonMessage'] = self.json_message._to_payload()",
          "640:         if self.binary_message is not None:",
          "641:             payload['binaryMessage'] = self.binary_message._to_payload()",
          "642:         return payload",
          "644:     @classmethod",
          "645:     def _from_payload(cls, payload):",
          "646:         new = cls()",
          "647:         if 'jsonMessage' in payload:",
          "648:             new.json_message = JsonMessage._from_payload(payload['jsonMessage'])",
          "649:         if 'binaryMessage' in payload:",
          "650:             new.binary_message = BinaryMessage._from_payload(payload['binaryMessage'])",
          "651:         return new",
          "653:     @classmethod",
          "654:     def _model_name(cls):",
          "655:         return 'aws.greengrass#SubscriptionResponseMessage'",
          "657:     def __repr__(self):",
          "658:         attrs = []",
          "659:         for attr, val in self.__dict__.items():",
          "660:             if val is not None:",
          "661:                 attrs.append('%s=%r' % (attr, val))",
          "662:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "664:     def __eq__(self, other):",
          "665:         if isinstance(other, self.__class__):",
          "666:             return self.__dict__ == other.__dict__",
          "667:         return False",
          "670: class ReportedLifecycleState:",
          "671:     \"\"\"",
          "672:     ReportedLifecycleState enum",
          "673:     \"\"\"",
          "675:     RUNNING = 'RUNNING'",
          "676:     ERRORED = 'ERRORED'",
          "679: class SecretValue(rpc.Shape):",
          "680:     \"\"\"",
          "681:     ComponentDetails is a \"tagged union\" class.",
          "683:     When sending, only one of the attributes may be set.",
          "684:     When receiving, only one of the attributes will be set.",
          "685:     All other attributes will be None.",
          "687:     Keyword Args:",
          "688:         secret_string:",
          "689:         secret_binary:",
          "691:     Attributes:",
          "692:         secret_string:",
          "693:         secret_binary:",
          "694:     \"\"\"",
          "696:     def __init__(self, *,",
          "697:                  secret_string: typing.Optional[str] = None,",
          "698:                  secret_binary: typing.Optional[bytes] = None):",
          "699:         super().__init__()",
          "700:         self.secret_string = secret_string  # type: typing.Optional[str]",
          "701:         self.secret_binary = secret_binary  # type: typing.Optional[bytes]",
          "703:     def _to_payload(self):",
          "704:         payload = {}",
          "705:         if self.secret_string is not None:",
          "706:             payload['secretString'] = self.secret_string",
          "707:         if self.secret_binary is not None:",
          "708:             payload['secretBinary'] = base64.b64encode(self.secret_binary).decode()",
          "709:         return payload",
          "711:     @classmethod",
          "712:     def _from_payload(cls, payload):",
          "713:         new = cls()",
          "714:         if 'secretString' in payload:",
          "715:             new.secret_string = payload['secretString']",
          "716:         if 'secretBinary' in payload:",
          "717:             new.secret_binary = base64.b64decode(payload['secretBinary'])",
          "718:         return new",
          "720:     @classmethod",
          "721:     def _model_name(cls):",
          "722:         return 'aws.greengrass#SecretValue'",
          "724:     def __repr__(self):",
          "725:         attrs = []",
          "726:         for attr, val in self.__dict__.items():",
          "727:             if val is not None:",
          "728:                 attrs.append('%s=%r' % (attr, val))",
          "729:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "731:     def __eq__(self, other):",
          "732:         if isinstance(other, self.__class__):",
          "733:             return self.__dict__ == other.__dict__",
          "734:         return False",
          "737: class LocalDeployment(rpc.Shape):",
          "738:     \"\"\"",
          "739:     LocalDeployment",
          "741:     All attributes are None by default, and may be set by keyword in the constructor.",
          "743:     Keyword Args:",
          "744:         deployment_id:",
          "745:         status: DeploymentStatus enum value",
          "747:     Attributes:",
          "748:         deployment_id:",
          "749:         status: DeploymentStatus enum value",
          "750:     \"\"\"",
          "752:     def __init__(self, *,",
          "753:                  deployment_id: typing.Optional[str] = None,",
          "754:                  status: typing.Optional[str] = None):",
          "755:         super().__init__()",
          "756:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "757:         self.status = status  # type: typing.Optional[str]",
          "759:     def _to_payload(self):",
          "760:         payload = {}",
          "761:         if self.deployment_id is not None:",
          "762:             payload['deploymentId'] = self.deployment_id",
          "763:         if self.status is not None:",
          "764:             payload['status'] = self.status",
          "765:         return payload",
          "767:     @classmethod",
          "768:     def _from_payload(cls, payload):",
          "769:         new = cls()",
          "770:         if 'deploymentId' in payload:",
          "771:             new.deployment_id = payload['deploymentId']",
          "772:         if 'status' in payload:",
          "773:             new.status = payload['status']",
          "774:         return new",
          "776:     @classmethod",
          "777:     def _model_name(cls):",
          "778:         return 'aws.greengrass#LocalDeployment'",
          "780:     def __repr__(self):",
          "781:         attrs = []",
          "782:         for attr, val in self.__dict__.items():",
          "783:             if val is not None:",
          "784:                 attrs.append('%s=%r' % (attr, val))",
          "785:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "787:     def __eq__(self, other):",
          "788:         if isinstance(other, self.__class__):",
          "789:             return self.__dict__ == other.__dict__",
          "790:         return False",
          "793: class RequestStatus:",
          "794:     \"\"\"",
          "795:     RequestStatus enum",
          "796:     \"\"\"",
          "798:     SUCCEEDED = 'SUCCEEDED'",
          "799:     FAILED = 'FAILED'",
          "802: class ValidateConfigurationUpdateEvents(rpc.Shape):",
          "803:     \"\"\"",
          "804:     LocalDeployment is a \"tagged union\" class.",
          "806:     When sending, only one of the attributes may be set.",
          "807:     When receiving, only one of the attributes will be set.",
          "808:     All other attributes will be None.",
          "810:     Keyword Args:",
          "811:         validate_configuration_update_event:",
          "813:     Attributes:",
          "814:         validate_configuration_update_event:",
          "815:     \"\"\"",
          "817:     def __init__(self, *,",
          "818:                  validate_configuration_update_event: typing.Optional[ValidateConfigurationUpdateEvent] = None):",
          "819:         super().__init__()",
          "820:         self.validate_configuration_update_event = validate_configuration_update_event  # type: typing.Optional[ValidateConfigurationUpdateEvent]",
          "822:     def _to_payload(self):",
          "823:         payload = {}",
          "824:         if self.validate_configuration_update_event is not None:",
          "825:             payload['validateConfigurationUpdateEvent'] = self.validate_configuration_update_event._to_payload()",
          "826:         return payload",
          "828:     @classmethod",
          "829:     def _from_payload(cls, payload):",
          "830:         new = cls()",
          "831:         if 'validateConfigurationUpdateEvent' in payload:",
          "832:             new.validate_configuration_update_event = ValidateConfigurationUpdateEvent._from_payload(payload['validateConfigurationUpdateEvent'])",
          "833:         return new",
          "835:     @classmethod",
          "836:     def _model_name(cls):",
          "837:         return 'aws.greengrass#ValidateConfigurationUpdateEvents'",
          "839:     def __repr__(self):",
          "840:         attrs = []",
          "841:         for attr, val in self.__dict__.items():",
          "842:             if val is not None:",
          "843:                 attrs.append('%s=%r' % (attr, val))",
          "844:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "846:     def __eq__(self, other):",
          "847:         if isinstance(other, self.__class__):",
          "848:             return self.__dict__ == other.__dict__",
          "849:         return False",
          "852: class ConfigurationValidityReport(rpc.Shape):",
          "853:     \"\"\"",
          "854:     ConfigurationValidityReport",
          "856:     All attributes are None by default, and may be set by keyword in the constructor.",
          "858:     Keyword Args:",
          "859:         status: ConfigurationValidityStatus enum value",
          "860:         deployment_id:",
          "861:         message:",
          "863:     Attributes:",
          "864:         status: ConfigurationValidityStatus enum value",
          "865:         deployment_id:",
          "866:         message:",
          "867:     \"\"\"",
          "869:     def __init__(self, *,",
          "870:                  status: typing.Optional[str] = None,",
          "871:                  deployment_id: typing.Optional[str] = None,",
          "872:                  message: typing.Optional[str] = None):",
          "873:         super().__init__()",
          "874:         self.status = status  # type: typing.Optional[str]",
          "875:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "876:         self.message = message  # type: typing.Optional[str]",
          "878:     def _to_payload(self):",
          "879:         payload = {}",
          "880:         if self.status is not None:",
          "881:             payload['status'] = self.status",
          "882:         if self.deployment_id is not None:",
          "883:             payload['deploymentId'] = self.deployment_id",
          "884:         if self.message is not None:",
          "885:             payload['message'] = self.message",
          "886:         return payload",
          "888:     @classmethod",
          "889:     def _from_payload(cls, payload):",
          "890:         new = cls()",
          "891:         if 'status' in payload:",
          "892:             new.status = payload['status']",
          "893:         if 'deploymentId' in payload:",
          "894:             new.deployment_id = payload['deploymentId']",
          "895:         if 'message' in payload:",
          "896:             new.message = payload['message']",
          "897:         return new",
          "899:     @classmethod",
          "900:     def _model_name(cls):",
          "901:         return 'aws.greengrass#ConfigurationValidityReport'",
          "903:     def __repr__(self):",
          "904:         attrs = []",
          "905:         for attr, val in self.__dict__.items():",
          "906:             if val is not None:",
          "907:                 attrs.append('%s=%r' % (attr, val))",
          "908:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "910:     def __eq__(self, other):",
          "911:         if isinstance(other, self.__class__):",
          "912:             return self.__dict__ == other.__dict__",
          "913:         return False",
          "916: class ConfigurationUpdateEvents(rpc.Shape):",
          "917:     \"\"\"",
          "918:     ConfigurationValidityReport is a \"tagged union\" class.",
          "920:     When sending, only one of the attributes may be set.",
          "921:     When receiving, only one of the attributes will be set.",
          "922:     All other attributes will be None.",
          "924:     Keyword Args:",
          "925:         configuration_update_event:",
          "927:     Attributes:",
          "928:         configuration_update_event:",
          "929:     \"\"\"",
          "931:     def __init__(self, *,",
          "932:                  configuration_update_event: typing.Optional[ConfigurationUpdateEvent] = None):",
          "933:         super().__init__()",
          "934:         self.configuration_update_event = configuration_update_event  # type: typing.Optional[ConfigurationUpdateEvent]",
          "936:     def _to_payload(self):",
          "937:         payload = {}",
          "938:         if self.configuration_update_event is not None:",
          "939:             payload['configurationUpdateEvent'] = self.configuration_update_event._to_payload()",
          "940:         return payload",
          "942:     @classmethod",
          "943:     def _from_payload(cls, payload):",
          "944:         new = cls()",
          "945:         if 'configurationUpdateEvent' in payload:",
          "946:             new.configuration_update_event = ConfigurationUpdateEvent._from_payload(payload['configurationUpdateEvent'])",
          "947:         return new",
          "949:     @classmethod",
          "950:     def _model_name(cls):",
          "951:         return 'aws.greengrass#ConfigurationUpdateEvents'",
          "953:     def __repr__(self):",
          "954:         attrs = []",
          "955:         for attr, val in self.__dict__.items():",
          "956:             if val is not None:",
          "957:                 attrs.append('%s=%r' % (attr, val))",
          "958:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "960:     def __eq__(self, other):",
          "961:         if isinstance(other, self.__class__):",
          "962:             return self.__dict__ == other.__dict__",
          "963:         return False",
          "966: class PublishMessage(rpc.Shape):",
          "967:     \"\"\"",
          "968:     ConfigurationValidityReport is a \"tagged union\" class.",
          "970:     When sending, only one of the attributes may be set.",
          "971:     When receiving, only one of the attributes will be set.",
          "972:     All other attributes will be None.",
          "974:     Keyword Args:",
          "975:         json_message:",
          "976:         binary_message:",
          "978:     Attributes:",
          "979:         json_message:",
          "980:         binary_message:",
          "981:     \"\"\"",
          "983:     def __init__(self, *,",
          "984:                  json_message: typing.Optional[JsonMessage] = None,",
          "985:                  binary_message: typing.Optional[BinaryMessage] = None):",
          "986:         super().__init__()",
          "987:         self.json_message = json_message  # type: typing.Optional[JsonMessage]",
          "988:         self.binary_message = binary_message  # type: typing.Optional[BinaryMessage]",
          "990:     def _to_payload(self):",
          "991:         payload = {}",
          "992:         if self.json_message is not None:",
          "993:             payload['jsonMessage'] = self.json_message._to_payload()",
          "994:         if self.binary_message is not None:",
          "995:             payload['binaryMessage'] = self.binary_message._to_payload()",
          "996:         return payload",
          "998:     @classmethod",
          "999:     def _from_payload(cls, payload):",
          "1000:         new = cls()",
          "1001:         if 'jsonMessage' in payload:",
          "1002:             new.json_message = JsonMessage._from_payload(payload['jsonMessage'])",
          "1003:         if 'binaryMessage' in payload:",
          "1004:             new.binary_message = BinaryMessage._from_payload(payload['binaryMessage'])",
          "1005:         return new",
          "1007:     @classmethod",
          "1008:     def _model_name(cls):",
          "1009:         return 'aws.greengrass#PublishMessage'",
          "1011:     def __repr__(self):",
          "1012:         attrs = []",
          "1013:         for attr, val in self.__dict__.items():",
          "1014:             if val is not None:",
          "1015:                 attrs.append('%s=%r' % (attr, val))",
          "1016:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1018:     def __eq__(self, other):",
          "1019:         if isinstance(other, self.__class__):",
          "1020:             return self.__dict__ == other.__dict__",
          "1021:         return False",
          "1024: class IoTCoreMessage(rpc.Shape):",
          "1025:     \"\"\"",
          "1026:     ConfigurationValidityReport is a \"tagged union\" class.",
          "1028:     When sending, only one of the attributes may be set.",
          "1029:     When receiving, only one of the attributes will be set.",
          "1030:     All other attributes will be None.",
          "1032:     Keyword Args:",
          "1033:         message:",
          "1035:     Attributes:",
          "1036:         message:",
          "1037:     \"\"\"",
          "1039:     def __init__(self, *,",
          "1040:                  message: typing.Optional[MQTTMessage] = None):",
          "1041:         super().__init__()",
          "1042:         self.message = message  # type: typing.Optional[MQTTMessage]",
          "1044:     def _to_payload(self):",
          "1045:         payload = {}",
          "1046:         if self.message is not None:",
          "1047:             payload['message'] = self.message._to_payload()",
          "1048:         return payload",
          "1050:     @classmethod",
          "1051:     def _from_payload(cls, payload):",
          "1052:         new = cls()",
          "1053:         if 'message' in payload:",
          "1054:             new.message = MQTTMessage._from_payload(payload['message'])",
          "1055:         return new",
          "1057:     @classmethod",
          "1058:     def _model_name(cls):",
          "1059:         return 'aws.greengrass#IoTCoreMessage'",
          "1061:     def __repr__(self):",
          "1062:         attrs = []",
          "1063:         for attr, val in self.__dict__.items():",
          "1064:             if val is not None:",
          "1065:                 attrs.append('%s=%r' % (attr, val))",
          "1066:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1068:     def __eq__(self, other):",
          "1069:         if isinstance(other, self.__class__):",
          "1070:             return self.__dict__ == other.__dict__",
          "1071:         return False",
          "1074: class QOS:",
          "1075:     \"\"\"",
          "1076:     QOS enum",
          "1077:     \"\"\"",
          "1079:     AT_MOST_ONCE = '0'",
          "1080:     AT_LEAST_ONCE = '1'",
          "1083: class InvalidArtifactsDirectoryPathError(GreengrassCoreIPCError):",
          "1084:     \"\"\"",
          "1085:     InvalidArtifactsDirectoryPathError",
          "1087:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1089:     Keyword Args:",
          "1090:         message:",
          "1092:     Attributes:",
          "1093:         message:",
          "1094:     \"\"\"",
          "1096:     def __init__(self, *,",
          "1097:                  message: typing.Optional[str] = None):",
          "1098:         super().__init__()",
          "1099:         self.message = message  # type: typing.Optional[str]",
          "1101:     def _get_error_type_string(self):",
          "1102:         return 'client'",
          "1104:     def _to_payload(self):",
          "1105:         payload = {}",
          "1106:         if self.message is not None:",
          "1107:             payload['message'] = self.message",
          "1108:         return payload",
          "1110:     @classmethod",
          "1111:     def _from_payload(cls, payload):",
          "1112:         new = cls()",
          "1113:         if 'message' in payload:",
          "1114:             new.message = payload['message']",
          "1115:         return new",
          "1117:     @classmethod",
          "1118:     def _model_name(cls):",
          "1119:         return 'aws.greengrass#InvalidArtifactsDirectoryPathError'",
          "1121:     def __repr__(self):",
          "1122:         attrs = []",
          "1123:         for attr, val in self.__dict__.items():",
          "1124:             if val is not None:",
          "1125:                 attrs.append('%s=%r' % (attr, val))",
          "1126:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1128:     def __eq__(self, other):",
          "1129:         if isinstance(other, self.__class__):",
          "1130:             return self.__dict__ == other.__dict__",
          "1131:         return False",
          "1134: class InvalidRecipeDirectoryPathError(GreengrassCoreIPCError):",
          "1135:     \"\"\"",
          "1136:     InvalidRecipeDirectoryPathError",
          "1138:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1140:     Keyword Args:",
          "1141:         message:",
          "1143:     Attributes:",
          "1144:         message:",
          "1145:     \"\"\"",
          "1147:     def __init__(self, *,",
          "1148:                  message: typing.Optional[str] = None):",
          "1149:         super().__init__()",
          "1150:         self.message = message  # type: typing.Optional[str]",
          "1152:     def _get_error_type_string(self):",
          "1153:         return 'client'",
          "1155:     def _to_payload(self):",
          "1156:         payload = {}",
          "1157:         if self.message is not None:",
          "1158:             payload['message'] = self.message",
          "1159:         return payload",
          "1161:     @classmethod",
          "1162:     def _from_payload(cls, payload):",
          "1163:         new = cls()",
          "1164:         if 'message' in payload:",
          "1165:             new.message = payload['message']",
          "1166:         return new",
          "1168:     @classmethod",
          "1169:     def _model_name(cls):",
          "1170:         return 'aws.greengrass#InvalidRecipeDirectoryPathError'",
          "1172:     def __repr__(self):",
          "1173:         attrs = []",
          "1174:         for attr, val in self.__dict__.items():",
          "1175:             if val is not None:",
          "1176:                 attrs.append('%s=%r' % (attr, val))",
          "1177:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1179:     def __eq__(self, other):",
          "1180:         if isinstance(other, self.__class__):",
          "1181:             return self.__dict__ == other.__dict__",
          "1182:         return False",
          "1185: class CreateLocalDeploymentResponse(rpc.Shape):",
          "1186:     \"\"\"",
          "1187:     CreateLocalDeploymentResponse",
          "1189:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1191:     Keyword Args:",
          "1192:         deployment_id:",
          "1194:     Attributes:",
          "1195:         deployment_id:",
          "1196:     \"\"\"",
          "1198:     def __init__(self, *,",
          "1199:                  deployment_id: typing.Optional[str] = None):",
          "1200:         super().__init__()",
          "1201:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "1203:     def _to_payload(self):",
          "1204:         payload = {}",
          "1205:         if self.deployment_id is not None:",
          "1206:             payload['deploymentId'] = self.deployment_id",
          "1207:         return payload",
          "1209:     @classmethod",
          "1210:     def _from_payload(cls, payload):",
          "1211:         new = cls()",
          "1212:         if 'deploymentId' in payload:",
          "1213:             new.deployment_id = payload['deploymentId']",
          "1214:         return new",
          "1216:     @classmethod",
          "1217:     def _model_name(cls):",
          "1218:         return 'aws.greengrass#CreateLocalDeploymentResponse'",
          "1220:     def __repr__(self):",
          "1221:         attrs = []",
          "1222:         for attr, val in self.__dict__.items():",
          "1223:             if val is not None:",
          "1224:                 attrs.append('%s=%r' % (attr, val))",
          "1225:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1227:     def __eq__(self, other):",
          "1228:         if isinstance(other, self.__class__):",
          "1229:             return self.__dict__ == other.__dict__",
          "1230:         return False",
          "1233: class CreateLocalDeploymentRequest(rpc.Shape):",
          "1234:     \"\"\"",
          "1235:     CreateLocalDeploymentRequest",
          "1237:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1239:     Keyword Args:",
          "1240:         group_name:",
          "1241:         root_component_versions_to_add:",
          "1242:         root_components_to_remove:",
          "1243:         component_to_configuration:",
          "1244:         component_to_run_with_info:",
          "1245:         recipe_directory_path:",
          "1246:         artifacts_directory_path:",
          "1248:     Attributes:",
          "1249:         group_name:",
          "1250:         root_component_versions_to_add:",
          "1251:         root_components_to_remove:",
          "1252:         component_to_configuration:",
          "1253:         component_to_run_with_info:",
          "1254:         recipe_directory_path:",
          "1255:         artifacts_directory_path:",
          "1256:     \"\"\"",
          "1258:     def __init__(self, *,",
          "1259:                  group_name: typing.Optional[str] = None,",
          "1260:                  root_component_versions_to_add: typing.Optional[typing.Dict[str, str]] = None,",
          "1261:                  root_components_to_remove: typing.Optional[typing.List[str]] = None,",
          "1262:                  component_to_configuration: typing.Optional[typing.Dict[str, typing.Dict[str, typing.Any]]] = None,",
          "1263:                  component_to_run_with_info: typing.Optional[typing.Dict[str, RunWithInfo]] = None,",
          "1264:                  recipe_directory_path: typing.Optional[str] = None,",
          "1265:                  artifacts_directory_path: typing.Optional[str] = None):",
          "1266:         super().__init__()",
          "1267:         self.group_name = group_name  # type: typing.Optional[str]",
          "1268:         self.root_component_versions_to_add = root_component_versions_to_add  # type: typing.Optional[typing.Dict[str, str]]",
          "1269:         self.root_components_to_remove = root_components_to_remove  # type: typing.Optional[typing.List[str]]",
          "1270:         self.component_to_configuration = component_to_configuration  # type: typing.Optional[typing.Dict[str, typing.Dict[str, typing.Any]]]",
          "1271:         self.component_to_run_with_info = component_to_run_with_info  # type: typing.Optional[typing.Dict[str, RunWithInfo]]",
          "1272:         self.recipe_directory_path = recipe_directory_path  # type: typing.Optional[str]",
          "1273:         self.artifacts_directory_path = artifacts_directory_path  # type: typing.Optional[str]",
          "1275:     def _to_payload(self):",
          "1276:         payload = {}",
          "1277:         if self.group_name is not None:",
          "1278:             payload['groupName'] = self.group_name",
          "1279:         if self.root_component_versions_to_add is not None:",
          "1280:             payload['rootComponentVersionsToAdd'] = self.root_component_versions_to_add",
          "1281:         if self.root_components_to_remove is not None:",
          "1282:             payload['rootComponentsToRemove'] = self.root_components_to_remove",
          "1283:         if self.component_to_configuration is not None:",
          "1284:             payload['componentToConfiguration'] = self.component_to_configuration",
          "1285:         if self.component_to_run_with_info is not None:",
          "1286:             payload['componentToRunWithInfo'] = {k: v._to_payload() for k, v in self.component_to_run_with_info.items()}",
          "1287:         if self.recipe_directory_path is not None:",
          "1288:             payload['recipeDirectoryPath'] = self.recipe_directory_path",
          "1289:         if self.artifacts_directory_path is not None:",
          "1290:             payload['artifactsDirectoryPath'] = self.artifacts_directory_path",
          "1291:         return payload",
          "1293:     @classmethod",
          "1294:     def _from_payload(cls, payload):",
          "1295:         new = cls()",
          "1296:         if 'groupName' in payload:",
          "1297:             new.group_name = payload['groupName']",
          "1298:         if 'rootComponentVersionsToAdd' in payload:",
          "1299:             new.root_component_versions_to_add = payload['rootComponentVersionsToAdd']",
          "1300:         if 'rootComponentsToRemove' in payload:",
          "1301:             new.root_components_to_remove = payload['rootComponentsToRemove']",
          "1302:         if 'componentToConfiguration' in payload:",
          "1303:             new.component_to_configuration = payload['componentToConfiguration']",
          "1304:         if 'componentToRunWithInfo' in payload:",
          "1305:             new.component_to_run_with_info = {k: RunWithInfo._from_payload(v) for k,v in payload['componentToRunWithInfo'].items()}",
          "1306:         if 'recipeDirectoryPath' in payload:",
          "1307:             new.recipe_directory_path = payload['recipeDirectoryPath']",
          "1308:         if 'artifactsDirectoryPath' in payload:",
          "1309:             new.artifacts_directory_path = payload['artifactsDirectoryPath']",
          "1310:         return new",
          "1312:     @classmethod",
          "1313:     def _model_name(cls):",
          "1314:         return 'aws.greengrass#CreateLocalDeploymentRequest'",
          "1316:     def __repr__(self):",
          "1317:         attrs = []",
          "1318:         for attr, val in self.__dict__.items():",
          "1319:             if val is not None:",
          "1320:                 attrs.append('%s=%r' % (attr, val))",
          "1321:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1323:     def __eq__(self, other):",
          "1324:         if isinstance(other, self.__class__):",
          "1325:             return self.__dict__ == other.__dict__",
          "1326:         return False",
          "1329: class StopComponentResponse(rpc.Shape):",
          "1330:     \"\"\"",
          "1331:     StopComponentResponse",
          "1333:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1335:     Keyword Args:",
          "1336:         stop_status: RequestStatus enum value",
          "1337:         message:",
          "1339:     Attributes:",
          "1340:         stop_status: RequestStatus enum value",
          "1341:         message:",
          "1342:     \"\"\"",
          "1344:     def __init__(self, *,",
          "1345:                  stop_status: typing.Optional[str] = None,",
          "1346:                  message: typing.Optional[str] = None):",
          "1347:         super().__init__()",
          "1348:         self.stop_status = stop_status  # type: typing.Optional[str]",
          "1349:         self.message = message  # type: typing.Optional[str]",
          "1351:     def _to_payload(self):",
          "1352:         payload = {}",
          "1353:         if self.stop_status is not None:",
          "1354:             payload['stopStatus'] = self.stop_status",
          "1355:         if self.message is not None:",
          "1356:             payload['message'] = self.message",
          "1357:         return payload",
          "1359:     @classmethod",
          "1360:     def _from_payload(cls, payload):",
          "1361:         new = cls()",
          "1362:         if 'stopStatus' in payload:",
          "1363:             new.stop_status = payload['stopStatus']",
          "1364:         if 'message' in payload:",
          "1365:             new.message = payload['message']",
          "1366:         return new",
          "1368:     @classmethod",
          "1369:     def _model_name(cls):",
          "1370:         return 'aws.greengrass#StopComponentResponse'",
          "1372:     def __repr__(self):",
          "1373:         attrs = []",
          "1374:         for attr, val in self.__dict__.items():",
          "1375:             if val is not None:",
          "1376:                 attrs.append('%s=%r' % (attr, val))",
          "1377:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1379:     def __eq__(self, other):",
          "1380:         if isinstance(other, self.__class__):",
          "1381:             return self.__dict__ == other.__dict__",
          "1382:         return False",
          "1385: class StopComponentRequest(rpc.Shape):",
          "1386:     \"\"\"",
          "1387:     StopComponentRequest",
          "1389:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1391:     Keyword Args:",
          "1392:         component_name:",
          "1394:     Attributes:",
          "1395:         component_name:",
          "1396:     \"\"\"",
          "1398:     def __init__(self, *,",
          "1399:                  component_name: typing.Optional[str] = None):",
          "1400:         super().__init__()",
          "1401:         self.component_name = component_name  # type: typing.Optional[str]",
          "1403:     def _to_payload(self):",
          "1404:         payload = {}",
          "1405:         if self.component_name is not None:",
          "1406:             payload['componentName'] = self.component_name",
          "1407:         return payload",
          "1409:     @classmethod",
          "1410:     def _from_payload(cls, payload):",
          "1411:         new = cls()",
          "1412:         if 'componentName' in payload:",
          "1413:             new.component_name = payload['componentName']",
          "1414:         return new",
          "1416:     @classmethod",
          "1417:     def _model_name(cls):",
          "1418:         return 'aws.greengrass#StopComponentRequest'",
          "1420:     def __repr__(self):",
          "1421:         attrs = []",
          "1422:         for attr, val in self.__dict__.items():",
          "1423:             if val is not None:",
          "1424:                 attrs.append('%s=%r' % (attr, val))",
          "1425:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1427:     def __eq__(self, other):",
          "1428:         if isinstance(other, self.__class__):",
          "1429:             return self.__dict__ == other.__dict__",
          "1430:         return False",
          "1433: class ListLocalDeploymentsResponse(rpc.Shape):",
          "1434:     \"\"\"",
          "1435:     ListLocalDeploymentsResponse",
          "1437:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1439:     Keyword Args:",
          "1440:         local_deployments:",
          "1442:     Attributes:",
          "1443:         local_deployments:",
          "1444:     \"\"\"",
          "1446:     def __init__(self, *,",
          "1447:                  local_deployments: typing.Optional[typing.List[LocalDeployment]] = None):",
          "1448:         super().__init__()",
          "1449:         self.local_deployments = local_deployments  # type: typing.Optional[typing.List[LocalDeployment]]",
          "1451:     def _to_payload(self):",
          "1452:         payload = {}",
          "1453:         if self.local_deployments is not None:",
          "1454:             payload['localDeployments'] = [i._to_payload() for i in self.local_deployments]",
          "1455:         return payload",
          "1457:     @classmethod",
          "1458:     def _from_payload(cls, payload):",
          "1459:         new = cls()",
          "1460:         if 'localDeployments' in payload:",
          "1461:             new.local_deployments = [LocalDeployment._from_payload(i) for i in payload['localDeployments']]",
          "1462:         return new",
          "1464:     @classmethod",
          "1465:     def _model_name(cls):",
          "1466:         return 'aws.greengrass#ListLocalDeploymentsResponse'",
          "1468:     def __repr__(self):",
          "1469:         attrs = []",
          "1470:         for attr, val in self.__dict__.items():",
          "1471:             if val is not None:",
          "1472:                 attrs.append('%s=%r' % (attr, val))",
          "1473:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1475:     def __eq__(self, other):",
          "1476:         if isinstance(other, self.__class__):",
          "1477:             return self.__dict__ == other.__dict__",
          "1478:         return False",
          "1481: class ListLocalDeploymentsRequest(rpc.Shape):",
          "1482:     \"\"\"",
          "1483:     ListLocalDeploymentsRequest",
          "1484:     \"\"\"",
          "1486:     def __init__(self):",
          "1487:         super().__init__()",
          "1489:     def _to_payload(self):",
          "1490:         payload = {}",
          "1491:         return payload",
          "1493:     @classmethod",
          "1494:     def _from_payload(cls, payload):",
          "1495:         new = cls()",
          "1496:         return new",
          "1498:     @classmethod",
          "1499:     def _model_name(cls):",
          "1500:         return 'aws.greengrass#ListLocalDeploymentsRequest'",
          "1502:     def __repr__(self):",
          "1503:         attrs = []",
          "1504:         for attr, val in self.__dict__.items():",
          "1505:             if val is not None:",
          "1506:                 attrs.append('%s=%r' % (attr, val))",
          "1507:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1509:     def __eq__(self, other):",
          "1510:         if isinstance(other, self.__class__):",
          "1511:             return self.__dict__ == other.__dict__",
          "1512:         return False",
          "1515: class SubscribeToComponentUpdatesResponse(rpc.Shape):",
          "1516:     \"\"\"",
          "1517:     SubscribeToComponentUpdatesResponse",
          "1518:     \"\"\"",
          "1520:     def __init__(self):",
          "1521:         super().__init__()",
          "1523:     def _to_payload(self):",
          "1524:         payload = {}",
          "1525:         return payload",
          "1527:     @classmethod",
          "1528:     def _from_payload(cls, payload):",
          "1529:         new = cls()",
          "1530:         return new",
          "1532:     @classmethod",
          "1533:     def _model_name(cls):",
          "1534:         return 'aws.greengrass#SubscribeToComponentUpdatesResponse'",
          "1536:     def __repr__(self):",
          "1537:         attrs = []",
          "1538:         for attr, val in self.__dict__.items():",
          "1539:             if val is not None:",
          "1540:                 attrs.append('%s=%r' % (attr, val))",
          "1541:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1543:     def __eq__(self, other):",
          "1544:         if isinstance(other, self.__class__):",
          "1545:             return self.__dict__ == other.__dict__",
          "1546:         return False",
          "1549: class SubscribeToComponentUpdatesRequest(rpc.Shape):",
          "1550:     \"\"\"",
          "1551:     SubscribeToComponentUpdatesRequest",
          "1552:     \"\"\"",
          "1554:     def __init__(self):",
          "1555:         super().__init__()",
          "1557:     def _to_payload(self):",
          "1558:         payload = {}",
          "1559:         return payload",
          "1561:     @classmethod",
          "1562:     def _from_payload(cls, payload):",
          "1563:         new = cls()",
          "1564:         return new",
          "1566:     @classmethod",
          "1567:     def _model_name(cls):",
          "1568:         return 'aws.greengrass#SubscribeToComponentUpdatesRequest'",
          "1570:     def __repr__(self):",
          "1571:         attrs = []",
          "1572:         for attr, val in self.__dict__.items():",
          "1573:             if val is not None:",
          "1574:                 attrs.append('%s=%r' % (attr, val))",
          "1575:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1577:     def __eq__(self, other):",
          "1578:         if isinstance(other, self.__class__):",
          "1579:             return self.__dict__ == other.__dict__",
          "1580:         return False",
          "1583: class GetComponentDetailsResponse(rpc.Shape):",
          "1584:     \"\"\"",
          "1585:     GetComponentDetailsResponse",
          "1587:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1589:     Keyword Args:",
          "1590:         component_details:",
          "1592:     Attributes:",
          "1593:         component_details:",
          "1594:     \"\"\"",
          "1596:     def __init__(self, *,",
          "1597:                  component_details: typing.Optional[ComponentDetails] = None):",
          "1598:         super().__init__()",
          "1599:         self.component_details = component_details  # type: typing.Optional[ComponentDetails]",
          "1601:     def _to_payload(self):",
          "1602:         payload = {}",
          "1603:         if self.component_details is not None:",
          "1604:             payload['componentDetails'] = self.component_details._to_payload()",
          "1605:         return payload",
          "1607:     @classmethod",
          "1608:     def _from_payload(cls, payload):",
          "1609:         new = cls()",
          "1610:         if 'componentDetails' in payload:",
          "1611:             new.component_details = ComponentDetails._from_payload(payload['componentDetails'])",
          "1612:         return new",
          "1614:     @classmethod",
          "1615:     def _model_name(cls):",
          "1616:         return 'aws.greengrass#GetComponentDetailsResponse'",
          "1618:     def __repr__(self):",
          "1619:         attrs = []",
          "1620:         for attr, val in self.__dict__.items():",
          "1621:             if val is not None:",
          "1622:                 attrs.append('%s=%r' % (attr, val))",
          "1623:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1625:     def __eq__(self, other):",
          "1626:         if isinstance(other, self.__class__):",
          "1627:             return self.__dict__ == other.__dict__",
          "1628:         return False",
          "1631: class GetComponentDetailsRequest(rpc.Shape):",
          "1632:     \"\"\"",
          "1633:     GetComponentDetailsRequest",
          "1635:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1637:     Keyword Args:",
          "1638:         component_name:",
          "1640:     Attributes:",
          "1641:         component_name:",
          "1642:     \"\"\"",
          "1644:     def __init__(self, *,",
          "1645:                  component_name: typing.Optional[str] = None):",
          "1646:         super().__init__()",
          "1647:         self.component_name = component_name  # type: typing.Optional[str]",
          "1649:     def _to_payload(self):",
          "1650:         payload = {}",
          "1651:         if self.component_name is not None:",
          "1652:             payload['componentName'] = self.component_name",
          "1653:         return payload",
          "1655:     @classmethod",
          "1656:     def _from_payload(cls, payload):",
          "1657:         new = cls()",
          "1658:         if 'componentName' in payload:",
          "1659:             new.component_name = payload['componentName']",
          "1660:         return new",
          "1662:     @classmethod",
          "1663:     def _model_name(cls):",
          "1664:         return 'aws.greengrass#GetComponentDetailsRequest'",
          "1666:     def __repr__(self):",
          "1667:         attrs = []",
          "1668:         for attr, val in self.__dict__.items():",
          "1669:             if val is not None:",
          "1670:                 attrs.append('%s=%r' % (attr, val))",
          "1671:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1673:     def __eq__(self, other):",
          "1674:         if isinstance(other, self.__class__):",
          "1675:             return self.__dict__ == other.__dict__",
          "1676:         return False",
          "1679: class SubscribeToTopicResponse(rpc.Shape):",
          "1680:     \"\"\"",
          "1681:     SubscribeToTopicResponse",
          "1683:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1685:     Keyword Args:",
          "1686:         topic_name:",
          "1688:     Attributes:",
          "1689:         topic_name:",
          "1690:     \"\"\"",
          "1692:     def __init__(self, *,",
          "1693:                  topic_name: typing.Optional[str] = None):",
          "1694:         super().__init__()",
          "1695:         self.topic_name = topic_name  # type: typing.Optional[str]",
          "1697:     def _to_payload(self):",
          "1698:         payload = {}",
          "1699:         if self.topic_name is not None:",
          "1700:             payload['topicName'] = self.topic_name",
          "1701:         return payload",
          "1703:     @classmethod",
          "1704:     def _from_payload(cls, payload):",
          "1705:         new = cls()",
          "1706:         if 'topicName' in payload:",
          "1707:             new.topic_name = payload['topicName']",
          "1708:         return new",
          "1710:     @classmethod",
          "1711:     def _model_name(cls):",
          "1712:         return 'aws.greengrass#SubscribeToTopicResponse'",
          "1714:     def __repr__(self):",
          "1715:         attrs = []",
          "1716:         for attr, val in self.__dict__.items():",
          "1717:             if val is not None:",
          "1718:                 attrs.append('%s=%r' % (attr, val))",
          "1719:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1721:     def __eq__(self, other):",
          "1722:         if isinstance(other, self.__class__):",
          "1723:             return self.__dict__ == other.__dict__",
          "1724:         return False",
          "1727: class SubscribeToTopicRequest(rpc.Shape):",
          "1728:     \"\"\"",
          "1729:     SubscribeToTopicRequest",
          "1731:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1733:     Keyword Args:",
          "1734:         topic:",
          "1736:     Attributes:",
          "1737:         topic:",
          "1738:     \"\"\"",
          "1740:     def __init__(self, *,",
          "1741:                  topic: typing.Optional[str] = None):",
          "1742:         super().__init__()",
          "1743:         self.topic = topic  # type: typing.Optional[str]",
          "1745:     def _to_payload(self):",
          "1746:         payload = {}",
          "1747:         if self.topic is not None:",
          "1748:             payload['topic'] = self.topic",
          "1749:         return payload",
          "1751:     @classmethod",
          "1752:     def _from_payload(cls, payload):",
          "1753:         new = cls()",
          "1754:         if 'topic' in payload:",
          "1755:             new.topic = payload['topic']",
          "1756:         return new",
          "1758:     @classmethod",
          "1759:     def _model_name(cls):",
          "1760:         return 'aws.greengrass#SubscribeToTopicRequest'",
          "1762:     def __repr__(self):",
          "1763:         attrs = []",
          "1764:         for attr, val in self.__dict__.items():",
          "1765:             if val is not None:",
          "1766:                 attrs.append('%s=%r' % (attr, val))",
          "1767:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1769:     def __eq__(self, other):",
          "1770:         if isinstance(other, self.__class__):",
          "1771:             return self.__dict__ == other.__dict__",
          "1772:         return False",
          "1775: class GetConfigurationResponse(rpc.Shape):",
          "1776:     \"\"\"",
          "1777:     GetConfigurationResponse",
          "1779:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1781:     Keyword Args:",
          "1782:         component_name:",
          "1783:         value:",
          "1785:     Attributes:",
          "1786:         component_name:",
          "1787:         value:",
          "1788:     \"\"\"",
          "1790:     def __init__(self, *,",
          "1791:                  component_name: typing.Optional[str] = None,",
          "1792:                  value: typing.Optional[typing.Dict[str, typing.Any]] = None):",
          "1793:         super().__init__()",
          "1794:         self.component_name = component_name  # type: typing.Optional[str]",
          "1795:         self.value = value  # type: typing.Optional[typing.Dict[str, typing.Any]]",
          "1797:     def _to_payload(self):",
          "1798:         payload = {}",
          "1799:         if self.component_name is not None:",
          "1800:             payload['componentName'] = self.component_name",
          "1801:         if self.value is not None:",
          "1802:             payload['value'] = self.value",
          "1803:         return payload",
          "1805:     @classmethod",
          "1806:     def _from_payload(cls, payload):",
          "1807:         new = cls()",
          "1808:         if 'componentName' in payload:",
          "1809:             new.component_name = payload['componentName']",
          "1810:         if 'value' in payload:",
          "1811:             new.value = payload['value']",
          "1812:         return new",
          "1814:     @classmethod",
          "1815:     def _model_name(cls):",
          "1816:         return 'aws.greengrass#GetConfigurationResponse'",
          "1818:     def __repr__(self):",
          "1819:         attrs = []",
          "1820:         for attr, val in self.__dict__.items():",
          "1821:             if val is not None:",
          "1822:                 attrs.append('%s=%r' % (attr, val))",
          "1823:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1825:     def __eq__(self, other):",
          "1826:         if isinstance(other, self.__class__):",
          "1827:             return self.__dict__ == other.__dict__",
          "1828:         return False",
          "1831: class GetConfigurationRequest(rpc.Shape):",
          "1832:     \"\"\"",
          "1833:     GetConfigurationRequest",
          "1835:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1837:     Keyword Args:",
          "1838:         component_name:",
          "1839:         key_path:",
          "1841:     Attributes:",
          "1842:         component_name:",
          "1843:         key_path:",
          "1844:     \"\"\"",
          "1846:     def __init__(self, *,",
          "1847:                  component_name: typing.Optional[str] = None,",
          "1848:                  key_path: typing.Optional[typing.List[str]] = None):",
          "1849:         super().__init__()",
          "1850:         self.component_name = component_name  # type: typing.Optional[str]",
          "1851:         self.key_path = key_path  # type: typing.Optional[typing.List[str]]",
          "1853:     def _to_payload(self):",
          "1854:         payload = {}",
          "1855:         if self.component_name is not None:",
          "1856:             payload['componentName'] = self.component_name",
          "1857:         if self.key_path is not None:",
          "1858:             payload['keyPath'] = self.key_path",
          "1859:         return payload",
          "1861:     @classmethod",
          "1862:     def _from_payload(cls, payload):",
          "1863:         new = cls()",
          "1864:         if 'componentName' in payload:",
          "1865:             new.component_name = payload['componentName']",
          "1866:         if 'keyPath' in payload:",
          "1867:             new.key_path = payload['keyPath']",
          "1868:         return new",
          "1870:     @classmethod",
          "1871:     def _model_name(cls):",
          "1872:         return 'aws.greengrass#GetConfigurationRequest'",
          "1874:     def __repr__(self):",
          "1875:         attrs = []",
          "1876:         for attr, val in self.__dict__.items():",
          "1877:             if val is not None:",
          "1878:                 attrs.append('%s=%r' % (attr, val))",
          "1879:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1881:     def __eq__(self, other):",
          "1882:         if isinstance(other, self.__class__):",
          "1883:             return self.__dict__ == other.__dict__",
          "1884:         return False",
          "1887: class UpdateStateResponse(rpc.Shape):",
          "1888:     \"\"\"",
          "1889:     UpdateStateResponse",
          "1890:     \"\"\"",
          "1892:     def __init__(self):",
          "1893:         super().__init__()",
          "1895:     def _to_payload(self):",
          "1896:         payload = {}",
          "1897:         return payload",
          "1899:     @classmethod",
          "1900:     def _from_payload(cls, payload):",
          "1901:         new = cls()",
          "1902:         return new",
          "1904:     @classmethod",
          "1905:     def _model_name(cls):",
          "1906:         return 'aws.greengrass#UpdateStateResponse'",
          "1908:     def __repr__(self):",
          "1909:         attrs = []",
          "1910:         for attr, val in self.__dict__.items():",
          "1911:             if val is not None:",
          "1912:                 attrs.append('%s=%r' % (attr, val))",
          "1913:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1915:     def __eq__(self, other):",
          "1916:         if isinstance(other, self.__class__):",
          "1917:             return self.__dict__ == other.__dict__",
          "1918:         return False",
          "1921: class UpdateStateRequest(rpc.Shape):",
          "1922:     \"\"\"",
          "1923:     UpdateStateRequest",
          "1925:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1927:     Keyword Args:",
          "1928:         state: ReportedLifecycleState enum value",
          "1930:     Attributes:",
          "1931:         state: ReportedLifecycleState enum value",
          "1932:     \"\"\"",
          "1934:     def __init__(self, *,",
          "1935:                  state: typing.Optional[str] = None):",
          "1936:         super().__init__()",
          "1937:         self.state = state  # type: typing.Optional[str]",
          "1939:     def _to_payload(self):",
          "1940:         payload = {}",
          "1941:         if self.state is not None:",
          "1942:             payload['state'] = self.state",
          "1943:         return payload",
          "1945:     @classmethod",
          "1946:     def _from_payload(cls, payload):",
          "1947:         new = cls()",
          "1948:         if 'state' in payload:",
          "1949:             new.state = payload['state']",
          "1950:         return new",
          "1952:     @classmethod",
          "1953:     def _model_name(cls):",
          "1954:         return 'aws.greengrass#UpdateStateRequest'",
          "1956:     def __repr__(self):",
          "1957:         attrs = []",
          "1958:         for attr, val in self.__dict__.items():",
          "1959:             if val is not None:",
          "1960:                 attrs.append('%s=%r' % (attr, val))",
          "1961:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "1963:     def __eq__(self, other):",
          "1964:         if isinstance(other, self.__class__):",
          "1965:             return self.__dict__ == other.__dict__",
          "1966:         return False",
          "1969: class GetSecretValueResponse(rpc.Shape):",
          "1970:     \"\"\"",
          "1971:     GetSecretValueResponse",
          "1973:     All attributes are None by default, and may be set by keyword in the constructor.",
          "1975:     Keyword Args:",
          "1976:         secret_id:",
          "1977:         version_id:",
          "1978:         version_stage:",
          "1979:         secret_value:",
          "1981:     Attributes:",
          "1982:         secret_id:",
          "1983:         version_id:",
          "1984:         version_stage:",
          "1985:         secret_value:",
          "1986:     \"\"\"",
          "1988:     def __init__(self, *,",
          "1989:                  secret_id: typing.Optional[str] = None,",
          "1990:                  version_id: typing.Optional[str] = None,",
          "1991:                  version_stage: typing.Optional[typing.List[str]] = None,",
          "1992:                  secret_value: typing.Optional[SecretValue] = None):",
          "1993:         super().__init__()",
          "1994:         self.secret_id = secret_id  # type: typing.Optional[str]",
          "1995:         self.version_id = version_id  # type: typing.Optional[str]",
          "1996:         self.version_stage = version_stage  # type: typing.Optional[typing.List[str]]",
          "1997:         self.secret_value = secret_value  # type: typing.Optional[SecretValue]",
          "1999:     def _to_payload(self):",
          "2000:         payload = {}",
          "2001:         if self.secret_id is not None:",
          "2002:             payload['secretId'] = self.secret_id",
          "2003:         if self.version_id is not None:",
          "2004:             payload['versionId'] = self.version_id",
          "2005:         if self.version_stage is not None:",
          "2006:             payload['versionStage'] = self.version_stage",
          "2007:         if self.secret_value is not None:",
          "2008:             payload['secretValue'] = self.secret_value._to_payload()",
          "2009:         return payload",
          "2011:     @classmethod",
          "2012:     def _from_payload(cls, payload):",
          "2013:         new = cls()",
          "2014:         if 'secretId' in payload:",
          "2015:             new.secret_id = payload['secretId']",
          "2016:         if 'versionId' in payload:",
          "2017:             new.version_id = payload['versionId']",
          "2018:         if 'versionStage' in payload:",
          "2019:             new.version_stage = payload['versionStage']",
          "2020:         if 'secretValue' in payload:",
          "2021:             new.secret_value = SecretValue._from_payload(payload['secretValue'])",
          "2022:         return new",
          "2024:     @classmethod",
          "2025:     def _model_name(cls):",
          "2026:         return 'aws.greengrass#GetSecretValueResponse'",
          "2028:     def __repr__(self):",
          "2029:         attrs = []",
          "2030:         for attr, val in self.__dict__.items():",
          "2031:             if val is not None:",
          "2032:                 attrs.append('%s=%r' % (attr, val))",
          "2033:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2035:     def __eq__(self, other):",
          "2036:         if isinstance(other, self.__class__):",
          "2037:             return self.__dict__ == other.__dict__",
          "2038:         return False",
          "2041: class GetSecretValueRequest(rpc.Shape):",
          "2042:     \"\"\"",
          "2043:     GetSecretValueRequest",
          "2045:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2047:     Keyword Args:",
          "2048:         secret_id:",
          "2049:         version_id:",
          "2050:         version_stage:",
          "2052:     Attributes:",
          "2053:         secret_id:",
          "2054:         version_id:",
          "2055:         version_stage:",
          "2056:     \"\"\"",
          "2058:     def __init__(self, *,",
          "2059:                  secret_id: typing.Optional[str] = None,",
          "2060:                  version_id: typing.Optional[str] = None,",
          "2061:                  version_stage: typing.Optional[str] = None):",
          "2062:         super().__init__()",
          "2063:         self.secret_id = secret_id  # type: typing.Optional[str]",
          "2064:         self.version_id = version_id  # type: typing.Optional[str]",
          "2065:         self.version_stage = version_stage  # type: typing.Optional[str]",
          "2067:     def _to_payload(self):",
          "2068:         payload = {}",
          "2069:         if self.secret_id is not None:",
          "2070:             payload['secretId'] = self.secret_id",
          "2071:         if self.version_id is not None:",
          "2072:             payload['versionId'] = self.version_id",
          "2073:         if self.version_stage is not None:",
          "2074:             payload['versionStage'] = self.version_stage",
          "2075:         return payload",
          "2077:     @classmethod",
          "2078:     def _from_payload(cls, payload):",
          "2079:         new = cls()",
          "2080:         if 'secretId' in payload:",
          "2081:             new.secret_id = payload['secretId']",
          "2082:         if 'versionId' in payload:",
          "2083:             new.version_id = payload['versionId']",
          "2084:         if 'versionStage' in payload:",
          "2085:             new.version_stage = payload['versionStage']",
          "2086:         return new",
          "2088:     @classmethod",
          "2089:     def _model_name(cls):",
          "2090:         return 'aws.greengrass#GetSecretValueRequest'",
          "2092:     def __repr__(self):",
          "2093:         attrs = []",
          "2094:         for attr, val in self.__dict__.items():",
          "2095:             if val is not None:",
          "2096:                 attrs.append('%s=%r' % (attr, val))",
          "2097:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2099:     def __eq__(self, other):",
          "2100:         if isinstance(other, self.__class__):",
          "2101:             return self.__dict__ == other.__dict__",
          "2102:         return False",
          "2105: class GetLocalDeploymentStatusResponse(rpc.Shape):",
          "2106:     \"\"\"",
          "2107:     GetLocalDeploymentStatusResponse",
          "2109:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2111:     Keyword Args:",
          "2112:         deployment:",
          "2114:     Attributes:",
          "2115:         deployment:",
          "2116:     \"\"\"",
          "2118:     def __init__(self, *,",
          "2119:                  deployment: typing.Optional[LocalDeployment] = None):",
          "2120:         super().__init__()",
          "2121:         self.deployment = deployment  # type: typing.Optional[LocalDeployment]",
          "2123:     def _to_payload(self):",
          "2124:         payload = {}",
          "2125:         if self.deployment is not None:",
          "2126:             payload['deployment'] = self.deployment._to_payload()",
          "2127:         return payload",
          "2129:     @classmethod",
          "2130:     def _from_payload(cls, payload):",
          "2131:         new = cls()",
          "2132:         if 'deployment' in payload:",
          "2133:             new.deployment = LocalDeployment._from_payload(payload['deployment'])",
          "2134:         return new",
          "2136:     @classmethod",
          "2137:     def _model_name(cls):",
          "2138:         return 'aws.greengrass#GetLocalDeploymentStatusResponse'",
          "2140:     def __repr__(self):",
          "2141:         attrs = []",
          "2142:         for attr, val in self.__dict__.items():",
          "2143:             if val is not None:",
          "2144:                 attrs.append('%s=%r' % (attr, val))",
          "2145:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2147:     def __eq__(self, other):",
          "2148:         if isinstance(other, self.__class__):",
          "2149:             return self.__dict__ == other.__dict__",
          "2150:         return False",
          "2153: class GetLocalDeploymentStatusRequest(rpc.Shape):",
          "2154:     \"\"\"",
          "2155:     GetLocalDeploymentStatusRequest",
          "2157:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2159:     Keyword Args:",
          "2160:         deployment_id:",
          "2162:     Attributes:",
          "2163:         deployment_id:",
          "2164:     \"\"\"",
          "2166:     def __init__(self, *,",
          "2167:                  deployment_id: typing.Optional[str] = None):",
          "2168:         super().__init__()",
          "2169:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "2171:     def _to_payload(self):",
          "2172:         payload = {}",
          "2173:         if self.deployment_id is not None:",
          "2174:             payload['deploymentId'] = self.deployment_id",
          "2175:         return payload",
          "2177:     @classmethod",
          "2178:     def _from_payload(cls, payload):",
          "2179:         new = cls()",
          "2180:         if 'deploymentId' in payload:",
          "2181:             new.deployment_id = payload['deploymentId']",
          "2182:         return new",
          "2184:     @classmethod",
          "2185:     def _model_name(cls):",
          "2186:         return 'aws.greengrass#GetLocalDeploymentStatusRequest'",
          "2188:     def __repr__(self):",
          "2189:         attrs = []",
          "2190:         for attr, val in self.__dict__.items():",
          "2191:             if val is not None:",
          "2192:                 attrs.append('%s=%r' % (attr, val))",
          "2193:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2195:     def __eq__(self, other):",
          "2196:         if isinstance(other, self.__class__):",
          "2197:             return self.__dict__ == other.__dict__",
          "2198:         return False",
          "2201: class ComponentNotFoundError(GreengrassCoreIPCError):",
          "2202:     \"\"\"",
          "2203:     ComponentNotFoundError",
          "2205:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2207:     Keyword Args:",
          "2208:         message:",
          "2210:     Attributes:",
          "2211:         message:",
          "2212:     \"\"\"",
          "2214:     def __init__(self, *,",
          "2215:                  message: typing.Optional[str] = None):",
          "2216:         super().__init__()",
          "2217:         self.message = message  # type: typing.Optional[str]",
          "2219:     def _get_error_type_string(self):",
          "2220:         return 'client'",
          "2222:     def _to_payload(self):",
          "2223:         payload = {}",
          "2224:         if self.message is not None:",
          "2225:             payload['message'] = self.message",
          "2226:         return payload",
          "2228:     @classmethod",
          "2229:     def _from_payload(cls, payload):",
          "2230:         new = cls()",
          "2231:         if 'message' in payload:",
          "2232:             new.message = payload['message']",
          "2233:         return new",
          "2235:     @classmethod",
          "2236:     def _model_name(cls):",
          "2237:         return 'aws.greengrass#ComponentNotFoundError'",
          "2239:     def __repr__(self):",
          "2240:         attrs = []",
          "2241:         for attr, val in self.__dict__.items():",
          "2242:             if val is not None:",
          "2243:                 attrs.append('%s=%r' % (attr, val))",
          "2244:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2246:     def __eq__(self, other):",
          "2247:         if isinstance(other, self.__class__):",
          "2248:             return self.__dict__ == other.__dict__",
          "2249:         return False",
          "2252: class RestartComponentResponse(rpc.Shape):",
          "2253:     \"\"\"",
          "2254:     RestartComponentResponse",
          "2256:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2258:     Keyword Args:",
          "2259:         restart_status: RequestStatus enum value",
          "2260:         message:",
          "2262:     Attributes:",
          "2263:         restart_status: RequestStatus enum value",
          "2264:         message:",
          "2265:     \"\"\"",
          "2267:     def __init__(self, *,",
          "2268:                  restart_status: typing.Optional[str] = None,",
          "2269:                  message: typing.Optional[str] = None):",
          "2270:         super().__init__()",
          "2271:         self.restart_status = restart_status  # type: typing.Optional[str]",
          "2272:         self.message = message  # type: typing.Optional[str]",
          "2274:     def _to_payload(self):",
          "2275:         payload = {}",
          "2276:         if self.restart_status is not None:",
          "2277:             payload['restartStatus'] = self.restart_status",
          "2278:         if self.message is not None:",
          "2279:             payload['message'] = self.message",
          "2280:         return payload",
          "2282:     @classmethod",
          "2283:     def _from_payload(cls, payload):",
          "2284:         new = cls()",
          "2285:         if 'restartStatus' in payload:",
          "2286:             new.restart_status = payload['restartStatus']",
          "2287:         if 'message' in payload:",
          "2288:             new.message = payload['message']",
          "2289:         return new",
          "2291:     @classmethod",
          "2292:     def _model_name(cls):",
          "2293:         return 'aws.greengrass#RestartComponentResponse'",
          "2295:     def __repr__(self):",
          "2296:         attrs = []",
          "2297:         for attr, val in self.__dict__.items():",
          "2298:             if val is not None:",
          "2299:                 attrs.append('%s=%r' % (attr, val))",
          "2300:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2302:     def __eq__(self, other):",
          "2303:         if isinstance(other, self.__class__):",
          "2304:             return self.__dict__ == other.__dict__",
          "2305:         return False",
          "2308: class RestartComponentRequest(rpc.Shape):",
          "2309:     \"\"\"",
          "2310:     RestartComponentRequest",
          "2312:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2314:     Keyword Args:",
          "2315:         component_name:",
          "2317:     Attributes:",
          "2318:         component_name:",
          "2319:     \"\"\"",
          "2321:     def __init__(self, *,",
          "2322:                  component_name: typing.Optional[str] = None):",
          "2323:         super().__init__()",
          "2324:         self.component_name = component_name  # type: typing.Optional[str]",
          "2326:     def _to_payload(self):",
          "2327:         payload = {}",
          "2328:         if self.component_name is not None:",
          "2329:             payload['componentName'] = self.component_name",
          "2330:         return payload",
          "2332:     @classmethod",
          "2333:     def _from_payload(cls, payload):",
          "2334:         new = cls()",
          "2335:         if 'componentName' in payload:",
          "2336:             new.component_name = payload['componentName']",
          "2337:         return new",
          "2339:     @classmethod",
          "2340:     def _model_name(cls):",
          "2341:         return 'aws.greengrass#RestartComponentRequest'",
          "2343:     def __repr__(self):",
          "2344:         attrs = []",
          "2345:         for attr, val in self.__dict__.items():",
          "2346:             if val is not None:",
          "2347:                 attrs.append('%s=%r' % (attr, val))",
          "2348:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2350:     def __eq__(self, other):",
          "2351:         if isinstance(other, self.__class__):",
          "2352:             return self.__dict__ == other.__dict__",
          "2353:         return False",
          "2356: class InvalidTokenError(GreengrassCoreIPCError):",
          "2357:     \"\"\"",
          "2358:     InvalidTokenError",
          "2360:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2362:     Keyword Args:",
          "2363:         message:",
          "2365:     Attributes:",
          "2366:         message:",
          "2367:     \"\"\"",
          "2369:     def __init__(self, *,",
          "2370:                  message: typing.Optional[str] = None):",
          "2371:         super().__init__()",
          "2372:         self.message = message  # type: typing.Optional[str]",
          "2374:     def _get_error_type_string(self):",
          "2375:         return 'server'",
          "2377:     def _to_payload(self):",
          "2378:         payload = {}",
          "2379:         if self.message is not None:",
          "2380:             payload['message'] = self.message",
          "2381:         return payload",
          "2383:     @classmethod",
          "2384:     def _from_payload(cls, payload):",
          "2385:         new = cls()",
          "2386:         if 'message' in payload:",
          "2387:             new.message = payload['message']",
          "2388:         return new",
          "2390:     @classmethod",
          "2391:     def _model_name(cls):",
          "2392:         return 'aws.greengrass#InvalidTokenError'",
          "2394:     def __repr__(self):",
          "2395:         attrs = []",
          "2396:         for attr, val in self.__dict__.items():",
          "2397:             if val is not None:",
          "2398:                 attrs.append('%s=%r' % (attr, val))",
          "2399:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2401:     def __eq__(self, other):",
          "2402:         if isinstance(other, self.__class__):",
          "2403:             return self.__dict__ == other.__dict__",
          "2404:         return False",
          "2407: class ValidateAuthorizationTokenResponse(rpc.Shape):",
          "2408:     \"\"\"",
          "2409:     ValidateAuthorizationTokenResponse",
          "2411:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2413:     Keyword Args:",
          "2414:         is_valid:",
          "2416:     Attributes:",
          "2417:         is_valid:",
          "2418:     \"\"\"",
          "2420:     def __init__(self, *,",
          "2421:                  is_valid: typing.Optional[bool] = None):",
          "2422:         super().__init__()",
          "2423:         self.is_valid = is_valid  # type: typing.Optional[bool]",
          "2425:     def _to_payload(self):",
          "2426:         payload = {}",
          "2427:         if self.is_valid is not None:",
          "2428:             payload['isValid'] = self.is_valid",
          "2429:         return payload",
          "2431:     @classmethod",
          "2432:     def _from_payload(cls, payload):",
          "2433:         new = cls()",
          "2434:         if 'isValid' in payload:",
          "2435:             new.is_valid = payload['isValid']",
          "2436:         return new",
          "2438:     @classmethod",
          "2439:     def _model_name(cls):",
          "2440:         return 'aws.greengrass#ValidateAuthorizationTokenResponse'",
          "2442:     def __repr__(self):",
          "2443:         attrs = []",
          "2444:         for attr, val in self.__dict__.items():",
          "2445:             if val is not None:",
          "2446:                 attrs.append('%s=%r' % (attr, val))",
          "2447:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2449:     def __eq__(self, other):",
          "2450:         if isinstance(other, self.__class__):",
          "2451:             return self.__dict__ == other.__dict__",
          "2452:         return False",
          "2455: class ValidateAuthorizationTokenRequest(rpc.Shape):",
          "2456:     \"\"\"",
          "2457:     ValidateAuthorizationTokenRequest",
          "2459:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2461:     Keyword Args:",
          "2462:         token:",
          "2464:     Attributes:",
          "2465:         token:",
          "2466:     \"\"\"",
          "2468:     def __init__(self, *,",
          "2469:                  token: typing.Optional[str] = None):",
          "2470:         super().__init__()",
          "2471:         self.token = token  # type: typing.Optional[str]",
          "2473:     def _to_payload(self):",
          "2474:         payload = {}",
          "2475:         if self.token is not None:",
          "2476:             payload['token'] = self.token",
          "2477:         return payload",
          "2479:     @classmethod",
          "2480:     def _from_payload(cls, payload):",
          "2481:         new = cls()",
          "2482:         if 'token' in payload:",
          "2483:             new.token = payload['token']",
          "2484:         return new",
          "2486:     @classmethod",
          "2487:     def _model_name(cls):",
          "2488:         return 'aws.greengrass#ValidateAuthorizationTokenRequest'",
          "2490:     def __repr__(self):",
          "2491:         attrs = []",
          "2492:         for attr, val in self.__dict__.items():",
          "2493:             if val is not None:",
          "2494:                 attrs.append('%s=%r' % (attr, val))",
          "2495:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2497:     def __eq__(self, other):",
          "2498:         if isinstance(other, self.__class__):",
          "2499:             return self.__dict__ == other.__dict__",
          "2500:         return False",
          "2503: class SubscribeToValidateConfigurationUpdatesResponse(rpc.Shape):",
          "2504:     \"\"\"",
          "2505:     SubscribeToValidateConfigurationUpdatesResponse",
          "2506:     \"\"\"",
          "2508:     def __init__(self):",
          "2509:         super().__init__()",
          "2511:     def _to_payload(self):",
          "2512:         payload = {}",
          "2513:         return payload",
          "2515:     @classmethod",
          "2516:     def _from_payload(cls, payload):",
          "2517:         new = cls()",
          "2518:         return new",
          "2520:     @classmethod",
          "2521:     def _model_name(cls):",
          "2522:         return 'aws.greengrass#SubscribeToValidateConfigurationUpdatesResponse'",
          "2524:     def __repr__(self):",
          "2525:         attrs = []",
          "2526:         for attr, val in self.__dict__.items():",
          "2527:             if val is not None:",
          "2528:                 attrs.append('%s=%r' % (attr, val))",
          "2529:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2531:     def __eq__(self, other):",
          "2532:         if isinstance(other, self.__class__):",
          "2533:             return self.__dict__ == other.__dict__",
          "2534:         return False",
          "2537: class SubscribeToValidateConfigurationUpdatesRequest(rpc.Shape):",
          "2538:     \"\"\"",
          "2539:     SubscribeToValidateConfigurationUpdatesRequest",
          "2540:     \"\"\"",
          "2542:     def __init__(self):",
          "2543:         super().__init__()",
          "2545:     def _to_payload(self):",
          "2546:         payload = {}",
          "2547:         return payload",
          "2549:     @classmethod",
          "2550:     def _from_payload(cls, payload):",
          "2551:         new = cls()",
          "2552:         return new",
          "2554:     @classmethod",
          "2555:     def _model_name(cls):",
          "2556:         return 'aws.greengrass#SubscribeToValidateConfigurationUpdatesRequest'",
          "2558:     def __repr__(self):",
          "2559:         attrs = []",
          "2560:         for attr, val in self.__dict__.items():",
          "2561:             if val is not None:",
          "2562:                 attrs.append('%s=%r' % (attr, val))",
          "2563:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2565:     def __eq__(self, other):",
          "2566:         if isinstance(other, self.__class__):",
          "2567:             return self.__dict__ == other.__dict__",
          "2568:         return False",
          "2571: class FailedUpdateConditionCheckError(GreengrassCoreIPCError):",
          "2572:     \"\"\"",
          "2573:     FailedUpdateConditionCheckError",
          "2575:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2577:     Keyword Args:",
          "2578:         message:",
          "2580:     Attributes:",
          "2581:         message:",
          "2582:     \"\"\"",
          "2584:     def __init__(self, *,",
          "2585:                  message: typing.Optional[str] = None):",
          "2586:         super().__init__()",
          "2587:         self.message = message  # type: typing.Optional[str]",
          "2589:     def _get_error_type_string(self):",
          "2590:         return 'client'",
          "2592:     def _to_payload(self):",
          "2593:         payload = {}",
          "2594:         if self.message is not None:",
          "2595:             payload['message'] = self.message",
          "2596:         return payload",
          "2598:     @classmethod",
          "2599:     def _from_payload(cls, payload):",
          "2600:         new = cls()",
          "2601:         if 'message' in payload:",
          "2602:             new.message = payload['message']",
          "2603:         return new",
          "2605:     @classmethod",
          "2606:     def _model_name(cls):",
          "2607:         return 'aws.greengrass#FailedUpdateConditionCheckError'",
          "2609:     def __repr__(self):",
          "2610:         attrs = []",
          "2611:         for attr, val in self.__dict__.items():",
          "2612:             if val is not None:",
          "2613:                 attrs.append('%s=%r' % (attr, val))",
          "2614:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2616:     def __eq__(self, other):",
          "2617:         if isinstance(other, self.__class__):",
          "2618:             return self.__dict__ == other.__dict__",
          "2619:         return False",
          "2622: class ConflictError(GreengrassCoreIPCError):",
          "2623:     \"\"\"",
          "2624:     ConflictError",
          "2626:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2628:     Keyword Args:",
          "2629:         message:",
          "2631:     Attributes:",
          "2632:         message:",
          "2633:     \"\"\"",
          "2635:     def __init__(self, *,",
          "2636:                  message: typing.Optional[str] = None):",
          "2637:         super().__init__()",
          "2638:         self.message = message  # type: typing.Optional[str]",
          "2640:     def _get_error_type_string(self):",
          "2641:         return 'client'",
          "2643:     def _to_payload(self):",
          "2644:         payload = {}",
          "2645:         if self.message is not None:",
          "2646:             payload['message'] = self.message",
          "2647:         return payload",
          "2649:     @classmethod",
          "2650:     def _from_payload(cls, payload):",
          "2651:         new = cls()",
          "2652:         if 'message' in payload:",
          "2653:             new.message = payload['message']",
          "2654:         return new",
          "2656:     @classmethod",
          "2657:     def _model_name(cls):",
          "2658:         return 'aws.greengrass#ConflictError'",
          "2660:     def __repr__(self):",
          "2661:         attrs = []",
          "2662:         for attr, val in self.__dict__.items():",
          "2663:             if val is not None:",
          "2664:                 attrs.append('%s=%r' % (attr, val))",
          "2665:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2667:     def __eq__(self, other):",
          "2668:         if isinstance(other, self.__class__):",
          "2669:             return self.__dict__ == other.__dict__",
          "2670:         return False",
          "2673: class UpdateConfigurationResponse(rpc.Shape):",
          "2674:     \"\"\"",
          "2675:     UpdateConfigurationResponse",
          "2676:     \"\"\"",
          "2678:     def __init__(self):",
          "2679:         super().__init__()",
          "2681:     def _to_payload(self):",
          "2682:         payload = {}",
          "2683:         return payload",
          "2685:     @classmethod",
          "2686:     def _from_payload(cls, payload):",
          "2687:         new = cls()",
          "2688:         return new",
          "2690:     @classmethod",
          "2691:     def _model_name(cls):",
          "2692:         return 'aws.greengrass#UpdateConfigurationResponse'",
          "2694:     def __repr__(self):",
          "2695:         attrs = []",
          "2696:         for attr, val in self.__dict__.items():",
          "2697:             if val is not None:",
          "2698:                 attrs.append('%s=%r' % (attr, val))",
          "2699:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2701:     def __eq__(self, other):",
          "2702:         if isinstance(other, self.__class__):",
          "2703:             return self.__dict__ == other.__dict__",
          "2704:         return False",
          "2707: class UpdateConfigurationRequest(rpc.Shape):",
          "2708:     \"\"\"",
          "2709:     UpdateConfigurationRequest",
          "2711:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2713:     Keyword Args:",
          "2714:         key_path:",
          "2715:         timestamp:",
          "2716:         value_to_merge:",
          "2718:     Attributes:",
          "2719:         key_path:",
          "2720:         timestamp:",
          "2721:         value_to_merge:",
          "2722:     \"\"\"",
          "2724:     def __init__(self, *,",
          "2725:                  key_path: typing.Optional[typing.List[str]] = None,",
          "2726:                  timestamp: typing.Optional[datetime.datetime] = None,",
          "2727:                  value_to_merge: typing.Optional[typing.Dict[str, typing.Any]] = None):",
          "2728:         super().__init__()",
          "2729:         self.key_path = key_path  # type: typing.Optional[typing.List[str]]",
          "2730:         self.timestamp = timestamp  # type: typing.Optional[datetime.datetime]",
          "2731:         self.value_to_merge = value_to_merge  # type: typing.Optional[typing.Dict[str, typing.Any]]",
          "2733:     def _to_payload(self):",
          "2734:         payload = {}",
          "2735:         if self.key_path is not None:",
          "2736:             payload['keyPath'] = self.key_path",
          "2737:         if self.timestamp is not None:",
          "2738:             payload['timestamp'] = self.timestamp.timestamp()",
          "2739:         if self.value_to_merge is not None:",
          "2740:             payload['valueToMerge'] = self.value_to_merge",
          "2741:         return payload",
          "2743:     @classmethod",
          "2744:     def _from_payload(cls, payload):",
          "2745:         new = cls()",
          "2746:         if 'keyPath' in payload:",
          "2747:             new.key_path = payload['keyPath']",
          "2748:         if 'timestamp' in payload:",
          "2749:             new.timestamp = datetime.datetime.fromtimestamp(payload['timestamp'], datetime.timezone.utc)",
          "2750:         if 'valueToMerge' in payload:",
          "2751:             new.value_to_merge = payload['valueToMerge']",
          "2752:         return new",
          "2754:     @classmethod",
          "2755:     def _model_name(cls):",
          "2756:         return 'aws.greengrass#UpdateConfigurationRequest'",
          "2758:     def __repr__(self):",
          "2759:         attrs = []",
          "2760:         for attr, val in self.__dict__.items():",
          "2761:             if val is not None:",
          "2762:                 attrs.append('%s=%r' % (attr, val))",
          "2763:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2765:     def __eq__(self, other):",
          "2766:         if isinstance(other, self.__class__):",
          "2767:             return self.__dict__ == other.__dict__",
          "2768:         return False",
          "2771: class SendConfigurationValidityReportResponse(rpc.Shape):",
          "2772:     \"\"\"",
          "2773:     SendConfigurationValidityReportResponse",
          "2774:     \"\"\"",
          "2776:     def __init__(self):",
          "2777:         super().__init__()",
          "2779:     def _to_payload(self):",
          "2780:         payload = {}",
          "2781:         return payload",
          "2783:     @classmethod",
          "2784:     def _from_payload(cls, payload):",
          "2785:         new = cls()",
          "2786:         return new",
          "2788:     @classmethod",
          "2789:     def _model_name(cls):",
          "2790:         return 'aws.greengrass#SendConfigurationValidityReportResponse'",
          "2792:     def __repr__(self):",
          "2793:         attrs = []",
          "2794:         for attr, val in self.__dict__.items():",
          "2795:             if val is not None:",
          "2796:                 attrs.append('%s=%r' % (attr, val))",
          "2797:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2799:     def __eq__(self, other):",
          "2800:         if isinstance(other, self.__class__):",
          "2801:             return self.__dict__ == other.__dict__",
          "2802:         return False",
          "2805: class SendConfigurationValidityReportRequest(rpc.Shape):",
          "2806:     \"\"\"",
          "2807:     SendConfigurationValidityReportRequest",
          "2809:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2811:     Keyword Args:",
          "2812:         configuration_validity_report:",
          "2814:     Attributes:",
          "2815:         configuration_validity_report:",
          "2816:     \"\"\"",
          "2818:     def __init__(self, *,",
          "2819:                  configuration_validity_report: typing.Optional[ConfigurationValidityReport] = None):",
          "2820:         super().__init__()",
          "2821:         self.configuration_validity_report = configuration_validity_report  # type: typing.Optional[ConfigurationValidityReport]",
          "2823:     def _to_payload(self):",
          "2824:         payload = {}",
          "2825:         if self.configuration_validity_report is not None:",
          "2826:             payload['configurationValidityReport'] = self.configuration_validity_report._to_payload()",
          "2827:         return payload",
          "2829:     @classmethod",
          "2830:     def _from_payload(cls, payload):",
          "2831:         new = cls()",
          "2832:         if 'configurationValidityReport' in payload:",
          "2833:             new.configuration_validity_report = ConfigurationValidityReport._from_payload(payload['configurationValidityReport'])",
          "2834:         return new",
          "2836:     @classmethod",
          "2837:     def _model_name(cls):",
          "2838:         return 'aws.greengrass#SendConfigurationValidityReportRequest'",
          "2840:     def __repr__(self):",
          "2841:         attrs = []",
          "2842:         for attr, val in self.__dict__.items():",
          "2843:             if val is not None:",
          "2844:                 attrs.append('%s=%r' % (attr, val))",
          "2845:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2847:     def __eq__(self, other):",
          "2848:         if isinstance(other, self.__class__):",
          "2849:             return self.__dict__ == other.__dict__",
          "2850:         return False",
          "2853: class InvalidArgumentsError(GreengrassCoreIPCError):",
          "2854:     \"\"\"",
          "2855:     InvalidArgumentsError",
          "2857:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2859:     Keyword Args:",
          "2860:         message:",
          "2862:     Attributes:",
          "2863:         message:",
          "2864:     \"\"\"",
          "2866:     def __init__(self, *,",
          "2867:                  message: typing.Optional[str] = None):",
          "2868:         super().__init__()",
          "2869:         self.message = message  # type: typing.Optional[str]",
          "2871:     def _get_error_type_string(self):",
          "2872:         return 'client'",
          "2874:     def _to_payload(self):",
          "2875:         payload = {}",
          "2876:         if self.message is not None:",
          "2877:             payload['message'] = self.message",
          "2878:         return payload",
          "2880:     @classmethod",
          "2881:     def _from_payload(cls, payload):",
          "2882:         new = cls()",
          "2883:         if 'message' in payload:",
          "2884:             new.message = payload['message']",
          "2885:         return new",
          "2887:     @classmethod",
          "2888:     def _model_name(cls):",
          "2889:         return 'aws.greengrass#InvalidArgumentsError'",
          "2891:     def __repr__(self):",
          "2892:         attrs = []",
          "2893:         for attr, val in self.__dict__.items():",
          "2894:             if val is not None:",
          "2895:                 attrs.append('%s=%r' % (attr, val))",
          "2896:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2898:     def __eq__(self, other):",
          "2899:         if isinstance(other, self.__class__):",
          "2900:             return self.__dict__ == other.__dict__",
          "2901:         return False",
          "2904: class DeferComponentUpdateResponse(rpc.Shape):",
          "2905:     \"\"\"",
          "2906:     DeferComponentUpdateResponse",
          "2907:     \"\"\"",
          "2909:     def __init__(self):",
          "2910:         super().__init__()",
          "2912:     def _to_payload(self):",
          "2913:         payload = {}",
          "2914:         return payload",
          "2916:     @classmethod",
          "2917:     def _from_payload(cls, payload):",
          "2918:         new = cls()",
          "2919:         return new",
          "2921:     @classmethod",
          "2922:     def _model_name(cls):",
          "2923:         return 'aws.greengrass#DeferComponentUpdateResponse'",
          "2925:     def __repr__(self):",
          "2926:         attrs = []",
          "2927:         for attr, val in self.__dict__.items():",
          "2928:             if val is not None:",
          "2929:                 attrs.append('%s=%r' % (attr, val))",
          "2930:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2932:     def __eq__(self, other):",
          "2933:         if isinstance(other, self.__class__):",
          "2934:             return self.__dict__ == other.__dict__",
          "2935:         return False",
          "2938: class DeferComponentUpdateRequest(rpc.Shape):",
          "2939:     \"\"\"",
          "2940:     DeferComponentUpdateRequest",
          "2942:     All attributes are None by default, and may be set by keyword in the constructor.",
          "2944:     Keyword Args:",
          "2945:         deployment_id:",
          "2946:         message:",
          "2947:         recheck_after_ms:",
          "2949:     Attributes:",
          "2950:         deployment_id:",
          "2951:         message:",
          "2952:         recheck_after_ms:",
          "2953:     \"\"\"",
          "2955:     def __init__(self, *,",
          "2956:                  deployment_id: typing.Optional[str] = None,",
          "2957:                  message: typing.Optional[str] = None,",
          "2958:                  recheck_after_ms: typing.Optional[int] = None):",
          "2959:         super().__init__()",
          "2960:         self.deployment_id = deployment_id  # type: typing.Optional[str]",
          "2961:         self.message = message  # type: typing.Optional[str]",
          "2962:         self.recheck_after_ms = recheck_after_ms  # type: typing.Optional[int]",
          "2964:     def _to_payload(self):",
          "2965:         payload = {}",
          "2966:         if self.deployment_id is not None:",
          "2967:             payload['deploymentId'] = self.deployment_id",
          "2968:         if self.message is not None:",
          "2969:             payload['message'] = self.message",
          "2970:         if self.recheck_after_ms is not None:",
          "2971:             payload['recheckAfterMs'] = self.recheck_after_ms",
          "2972:         return payload",
          "2974:     @classmethod",
          "2975:     def _from_payload(cls, payload):",
          "2976:         new = cls()",
          "2977:         if 'deploymentId' in payload:",
          "2978:             new.deployment_id = payload['deploymentId']",
          "2979:         if 'message' in payload:",
          "2980:             new.message = payload['message']",
          "2981:         if 'recheckAfterMs' in payload:",
          "2982:             new.recheck_after_ms = int(payload['recheckAfterMs'])",
          "2983:         return new",
          "2985:     @classmethod",
          "2986:     def _model_name(cls):",
          "2987:         return 'aws.greengrass#DeferComponentUpdateRequest'",
          "2989:     def __repr__(self):",
          "2990:         attrs = []",
          "2991:         for attr, val in self.__dict__.items():",
          "2992:             if val is not None:",
          "2993:                 attrs.append('%s=%r' % (attr, val))",
          "2994:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "2996:     def __eq__(self, other):",
          "2997:         if isinstance(other, self.__class__):",
          "2998:             return self.__dict__ == other.__dict__",
          "2999:         return False",
          "3002: class CreateDebugPasswordResponse(rpc.Shape):",
          "3003:     \"\"\"",
          "3004:     CreateDebugPasswordResponse",
          "3006:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3008:     Keyword Args:",
          "3009:         password:",
          "3010:         username:",
          "3011:         password_expiration:",
          "3013:     Attributes:",
          "3014:         password:",
          "3015:         username:",
          "3016:         password_expiration:",
          "3017:     \"\"\"",
          "3019:     def __init__(self, *,",
          "3020:                  password: typing.Optional[str] = None,",
          "3021:                  username: typing.Optional[str] = None,",
          "3022:                  password_expiration: typing.Optional[datetime.datetime] = None):",
          "3023:         super().__init__()",
          "3024:         self.password = password  # type: typing.Optional[str]",
          "3025:         self.username = username  # type: typing.Optional[str]",
          "3026:         self.password_expiration = password_expiration  # type: typing.Optional[datetime.datetime]",
          "3028:     def _to_payload(self):",
          "3029:         payload = {}",
          "3030:         if self.password is not None:",
          "3031:             payload['password'] = self.password",
          "3032:         if self.username is not None:",
          "3033:             payload['username'] = self.username",
          "3034:         if self.password_expiration is not None:",
          "3035:             payload['passwordExpiration'] = self.password_expiration.timestamp()",
          "3036:         return payload",
          "3038:     @classmethod",
          "3039:     def _from_payload(cls, payload):",
          "3040:         new = cls()",
          "3041:         if 'password' in payload:",
          "3042:             new.password = payload['password']",
          "3043:         if 'username' in payload:",
          "3044:             new.username = payload['username']",
          "3045:         if 'passwordExpiration' in payload:",
          "3046:             new.password_expiration = datetime.datetime.fromtimestamp(payload['passwordExpiration'], datetime.timezone.utc)",
          "3047:         return new",
          "3049:     @classmethod",
          "3050:     def _model_name(cls):",
          "3051:         return 'aws.greengrass#CreateDebugPasswordResponse'",
          "3053:     def __repr__(self):",
          "3054:         attrs = []",
          "3055:         for attr, val in self.__dict__.items():",
          "3056:             if val is not None:",
          "3057:                 attrs.append('%s=%r' % (attr, val))",
          "3058:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3060:     def __eq__(self, other):",
          "3061:         if isinstance(other, self.__class__):",
          "3062:             return self.__dict__ == other.__dict__",
          "3063:         return False",
          "3066: class CreateDebugPasswordRequest(rpc.Shape):",
          "3067:     \"\"\"",
          "3068:     CreateDebugPasswordRequest",
          "3069:     \"\"\"",
          "3071:     def __init__(self):",
          "3072:         super().__init__()",
          "3074:     def _to_payload(self):",
          "3075:         payload = {}",
          "3076:         return payload",
          "3078:     @classmethod",
          "3079:     def _from_payload(cls, payload):",
          "3080:         new = cls()",
          "3081:         return new",
          "3083:     @classmethod",
          "3084:     def _model_name(cls):",
          "3085:         return 'aws.greengrass#CreateDebugPasswordRequest'",
          "3087:     def __repr__(self):",
          "3088:         attrs = []",
          "3089:         for attr, val in self.__dict__.items():",
          "3090:             if val is not None:",
          "3091:                 attrs.append('%s=%r' % (attr, val))",
          "3092:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3094:     def __eq__(self, other):",
          "3095:         if isinstance(other, self.__class__):",
          "3096:             return self.__dict__ == other.__dict__",
          "3097:         return False",
          "3100: class ListComponentsResponse(rpc.Shape):",
          "3101:     \"\"\"",
          "3102:     ListComponentsResponse",
          "3104:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3106:     Keyword Args:",
          "3107:         components:",
          "3109:     Attributes:",
          "3110:         components:",
          "3111:     \"\"\"",
          "3113:     def __init__(self, *,",
          "3114:                  components: typing.Optional[typing.List[ComponentDetails]] = None):",
          "3115:         super().__init__()",
          "3116:         self.components = components  # type: typing.Optional[typing.List[ComponentDetails]]",
          "3118:     def _to_payload(self):",
          "3119:         payload = {}",
          "3120:         if self.components is not None:",
          "3121:             payload['components'] = [i._to_payload() for i in self.components]",
          "3122:         return payload",
          "3124:     @classmethod",
          "3125:     def _from_payload(cls, payload):",
          "3126:         new = cls()",
          "3127:         if 'components' in payload:",
          "3128:             new.components = [ComponentDetails._from_payload(i) for i in payload['components']]",
          "3129:         return new",
          "3131:     @classmethod",
          "3132:     def _model_name(cls):",
          "3133:         return 'aws.greengrass#ListComponentsResponse'",
          "3135:     def __repr__(self):",
          "3136:         attrs = []",
          "3137:         for attr, val in self.__dict__.items():",
          "3138:             if val is not None:",
          "3139:                 attrs.append('%s=%r' % (attr, val))",
          "3140:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3142:     def __eq__(self, other):",
          "3143:         if isinstance(other, self.__class__):",
          "3144:             return self.__dict__ == other.__dict__",
          "3145:         return False",
          "3148: class ListComponentsRequest(rpc.Shape):",
          "3149:     \"\"\"",
          "3150:     ListComponentsRequest",
          "3151:     \"\"\"",
          "3153:     def __init__(self):",
          "3154:         super().__init__()",
          "3156:     def _to_payload(self):",
          "3157:         payload = {}",
          "3158:         return payload",
          "3160:     @classmethod",
          "3161:     def _from_payload(cls, payload):",
          "3162:         new = cls()",
          "3163:         return new",
          "3165:     @classmethod",
          "3166:     def _model_name(cls):",
          "3167:         return 'aws.greengrass#ListComponentsRequest'",
          "3169:     def __repr__(self):",
          "3170:         attrs = []",
          "3171:         for attr, val in self.__dict__.items():",
          "3172:             if val is not None:",
          "3173:                 attrs.append('%s=%r' % (attr, val))",
          "3174:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3176:     def __eq__(self, other):",
          "3177:         if isinstance(other, self.__class__):",
          "3178:             return self.__dict__ == other.__dict__",
          "3179:         return False",
          "3182: class ResourceNotFoundError(GreengrassCoreIPCError):",
          "3183:     \"\"\"",
          "3184:     ResourceNotFoundError",
          "3186:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3188:     Keyword Args:",
          "3189:         message:",
          "3190:         resource_type:",
          "3191:         resource_name:",
          "3193:     Attributes:",
          "3194:         message:",
          "3195:         resource_type:",
          "3196:         resource_name:",
          "3197:     \"\"\"",
          "3199:     def __init__(self, *,",
          "3200:                  message: typing.Optional[str] = None,",
          "3201:                  resource_type: typing.Optional[str] = None,",
          "3202:                  resource_name: typing.Optional[str] = None):",
          "3203:         super().__init__()",
          "3204:         self.message = message  # type: typing.Optional[str]",
          "3205:         self.resource_type = resource_type  # type: typing.Optional[str]",
          "3206:         self.resource_name = resource_name  # type: typing.Optional[str]",
          "3208:     def _get_error_type_string(self):",
          "3209:         return 'client'",
          "3211:     def _to_payload(self):",
          "3212:         payload = {}",
          "3213:         if self.message is not None:",
          "3214:             payload['message'] = self.message",
          "3215:         if self.resource_type is not None:",
          "3216:             payload['resourceType'] = self.resource_type",
          "3217:         if self.resource_name is not None:",
          "3218:             payload['resourceName'] = self.resource_name",
          "3219:         return payload",
          "3221:     @classmethod",
          "3222:     def _from_payload(cls, payload):",
          "3223:         new = cls()",
          "3224:         if 'message' in payload:",
          "3225:             new.message = payload['message']",
          "3226:         if 'resourceType' in payload:",
          "3227:             new.resource_type = payload['resourceType']",
          "3228:         if 'resourceName' in payload:",
          "3229:             new.resource_name = payload['resourceName']",
          "3230:         return new",
          "3232:     @classmethod",
          "3233:     def _model_name(cls):",
          "3234:         return 'aws.greengrass#ResourceNotFoundError'",
          "3236:     def __repr__(self):",
          "3237:         attrs = []",
          "3238:         for attr, val in self.__dict__.items():",
          "3239:             if val is not None:",
          "3240:                 attrs.append('%s=%r' % (attr, val))",
          "3241:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3243:     def __eq__(self, other):",
          "3244:         if isinstance(other, self.__class__):",
          "3245:             return self.__dict__ == other.__dict__",
          "3246:         return False",
          "3249: class SubscribeToConfigurationUpdateResponse(rpc.Shape):",
          "3250:     \"\"\"",
          "3251:     SubscribeToConfigurationUpdateResponse",
          "3252:     \"\"\"",
          "3254:     def __init__(self):",
          "3255:         super().__init__()",
          "3257:     def _to_payload(self):",
          "3258:         payload = {}",
          "3259:         return payload",
          "3261:     @classmethod",
          "3262:     def _from_payload(cls, payload):",
          "3263:         new = cls()",
          "3264:         return new",
          "3266:     @classmethod",
          "3267:     def _model_name(cls):",
          "3268:         return 'aws.greengrass#SubscribeToConfigurationUpdateResponse'",
          "3270:     def __repr__(self):",
          "3271:         attrs = []",
          "3272:         for attr, val in self.__dict__.items():",
          "3273:             if val is not None:",
          "3274:                 attrs.append('%s=%r' % (attr, val))",
          "3275:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3277:     def __eq__(self, other):",
          "3278:         if isinstance(other, self.__class__):",
          "3279:             return self.__dict__ == other.__dict__",
          "3280:         return False",
          "3283: class SubscribeToConfigurationUpdateRequest(rpc.Shape):",
          "3284:     \"\"\"",
          "3285:     SubscribeToConfigurationUpdateRequest",
          "3287:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3289:     Keyword Args:",
          "3290:         component_name:",
          "3291:         key_path:",
          "3293:     Attributes:",
          "3294:         component_name:",
          "3295:         key_path:",
          "3296:     \"\"\"",
          "3298:     def __init__(self, *,",
          "3299:                  component_name: typing.Optional[str] = None,",
          "3300:                  key_path: typing.Optional[typing.List[str]] = None):",
          "3301:         super().__init__()",
          "3302:         self.component_name = component_name  # type: typing.Optional[str]",
          "3303:         self.key_path = key_path  # type: typing.Optional[typing.List[str]]",
          "3305:     def _to_payload(self):",
          "3306:         payload = {}",
          "3307:         if self.component_name is not None:",
          "3308:             payload['componentName'] = self.component_name",
          "3309:         if self.key_path is not None:",
          "3310:             payload['keyPath'] = self.key_path",
          "3311:         return payload",
          "3313:     @classmethod",
          "3314:     def _from_payload(cls, payload):",
          "3315:         new = cls()",
          "3316:         if 'componentName' in payload:",
          "3317:             new.component_name = payload['componentName']",
          "3318:         if 'keyPath' in payload:",
          "3319:             new.key_path = payload['keyPath']",
          "3320:         return new",
          "3322:     @classmethod",
          "3323:     def _model_name(cls):",
          "3324:         return 'aws.greengrass#SubscribeToConfigurationUpdateRequest'",
          "3326:     def __repr__(self):",
          "3327:         attrs = []",
          "3328:         for attr, val in self.__dict__.items():",
          "3329:             if val is not None:",
          "3330:                 attrs.append('%s=%r' % (attr, val))",
          "3331:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3333:     def __eq__(self, other):",
          "3334:         if isinstance(other, self.__class__):",
          "3335:             return self.__dict__ == other.__dict__",
          "3336:         return False",
          "3339: class PublishToIoTCoreResponse(rpc.Shape):",
          "3340:     \"\"\"",
          "3341:     PublishToIoTCoreResponse",
          "3342:     \"\"\"",
          "3344:     def __init__(self):",
          "3345:         super().__init__()",
          "3347:     def _to_payload(self):",
          "3348:         payload = {}",
          "3349:         return payload",
          "3351:     @classmethod",
          "3352:     def _from_payload(cls, payload):",
          "3353:         new = cls()",
          "3354:         return new",
          "3356:     @classmethod",
          "3357:     def _model_name(cls):",
          "3358:         return 'aws.greengrass#PublishToIoTCoreResponse'",
          "3360:     def __repr__(self):",
          "3361:         attrs = []",
          "3362:         for attr, val in self.__dict__.items():",
          "3363:             if val is not None:",
          "3364:                 attrs.append('%s=%r' % (attr, val))",
          "3365:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3367:     def __eq__(self, other):",
          "3368:         if isinstance(other, self.__class__):",
          "3369:             return self.__dict__ == other.__dict__",
          "3370:         return False",
          "3373: class PublishToIoTCoreRequest(rpc.Shape):",
          "3374:     \"\"\"",
          "3375:     PublishToIoTCoreRequest",
          "3377:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3379:     Keyword Args:",
          "3380:         topic_name:",
          "3381:         qos: QOS enum value",
          "3382:         payload:",
          "3384:     Attributes:",
          "3385:         topic_name:",
          "3386:         qos: QOS enum value",
          "3387:         payload:",
          "3388:     \"\"\"",
          "3390:     def __init__(self, *,",
          "3391:                  topic_name: typing.Optional[str] = None,",
          "3392:                  qos: typing.Optional[str] = None,",
          "3393:                  payload: typing.Optional[bytes] = None):",
          "3394:         super().__init__()",
          "3395:         self.topic_name = topic_name  # type: typing.Optional[str]",
          "3396:         self.qos = qos  # type: typing.Optional[str]",
          "3397:         self.payload = payload  # type: typing.Optional[bytes]",
          "3399:     def _to_payload(self):",
          "3400:         payload = {}",
          "3401:         if self.topic_name is not None:",
          "3402:             payload['topicName'] = self.topic_name",
          "3403:         if self.qos is not None:",
          "3404:             payload['qos'] = self.qos",
          "3405:         if self.payload is not None:",
          "3406:             payload['payload'] = base64.b64encode(self.payload).decode()",
          "3407:         return payload",
          "3409:     @classmethod",
          "3410:     def _from_payload(cls, payload):",
          "3411:         new = cls()",
          "3412:         if 'topicName' in payload:",
          "3413:             new.topic_name = payload['topicName']",
          "3414:         if 'qos' in payload:",
          "3415:             new.qos = payload['qos']",
          "3416:         if 'payload' in payload:",
          "3417:             new.payload = base64.b64decode(payload['payload'])",
          "3418:         return new",
          "3420:     @classmethod",
          "3421:     def _model_name(cls):",
          "3422:         return 'aws.greengrass#PublishToIoTCoreRequest'",
          "3424:     def __repr__(self):",
          "3425:         attrs = []",
          "3426:         for attr, val in self.__dict__.items():",
          "3427:             if val is not None:",
          "3428:                 attrs.append('%s=%r' % (attr, val))",
          "3429:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3431:     def __eq__(self, other):",
          "3432:         if isinstance(other, self.__class__):",
          "3433:             return self.__dict__ == other.__dict__",
          "3434:         return False",
          "3437: class PublishToTopicResponse(rpc.Shape):",
          "3438:     \"\"\"",
          "3439:     PublishToTopicResponse",
          "3440:     \"\"\"",
          "3442:     def __init__(self):",
          "3443:         super().__init__()",
          "3445:     def _to_payload(self):",
          "3446:         payload = {}",
          "3447:         return payload",
          "3449:     @classmethod",
          "3450:     def _from_payload(cls, payload):",
          "3451:         new = cls()",
          "3452:         return new",
          "3454:     @classmethod",
          "3455:     def _model_name(cls):",
          "3456:         return 'aws.greengrass#PublishToTopicResponse'",
          "3458:     def __repr__(self):",
          "3459:         attrs = []",
          "3460:         for attr, val in self.__dict__.items():",
          "3461:             if val is not None:",
          "3462:                 attrs.append('%s=%r' % (attr, val))",
          "3463:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3465:     def __eq__(self, other):",
          "3466:         if isinstance(other, self.__class__):",
          "3467:             return self.__dict__ == other.__dict__",
          "3468:         return False",
          "3471: class PublishToTopicRequest(rpc.Shape):",
          "3472:     \"\"\"",
          "3473:     PublishToTopicRequest",
          "3475:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3477:     Keyword Args:",
          "3478:         topic:",
          "3479:         publish_message:",
          "3481:     Attributes:",
          "3482:         topic:",
          "3483:         publish_message:",
          "3484:     \"\"\"",
          "3486:     def __init__(self, *,",
          "3487:                  topic: typing.Optional[str] = None,",
          "3488:                  publish_message: typing.Optional[PublishMessage] = None):",
          "3489:         super().__init__()",
          "3490:         self.topic = topic  # type: typing.Optional[str]",
          "3491:         self.publish_message = publish_message  # type: typing.Optional[PublishMessage]",
          "3493:     def _to_payload(self):",
          "3494:         payload = {}",
          "3495:         if self.topic is not None:",
          "3496:             payload['topic'] = self.topic",
          "3497:         if self.publish_message is not None:",
          "3498:             payload['publishMessage'] = self.publish_message._to_payload()",
          "3499:         return payload",
          "3501:     @classmethod",
          "3502:     def _from_payload(cls, payload):",
          "3503:         new = cls()",
          "3504:         if 'topic' in payload:",
          "3505:             new.topic = payload['topic']",
          "3506:         if 'publishMessage' in payload:",
          "3507:             new.publish_message = PublishMessage._from_payload(payload['publishMessage'])",
          "3508:         return new",
          "3510:     @classmethod",
          "3511:     def _model_name(cls):",
          "3512:         return 'aws.greengrass#PublishToTopicRequest'",
          "3514:     def __repr__(self):",
          "3515:         attrs = []",
          "3516:         for attr, val in self.__dict__.items():",
          "3517:             if val is not None:",
          "3518:                 attrs.append('%s=%r' % (attr, val))",
          "3519:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3521:     def __eq__(self, other):",
          "3522:         if isinstance(other, self.__class__):",
          "3523:             return self.__dict__ == other.__dict__",
          "3524:         return False",
          "3527: class UnauthorizedError(GreengrassCoreIPCError):",
          "3528:     \"\"\"",
          "3529:     UnauthorizedError",
          "3531:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3533:     Keyword Args:",
          "3534:         message:",
          "3536:     Attributes:",
          "3537:         message:",
          "3538:     \"\"\"",
          "3540:     def __init__(self, *,",
          "3541:                  message: typing.Optional[str] = None):",
          "3542:         super().__init__()",
          "3543:         self.message = message  # type: typing.Optional[str]",
          "3545:     def _get_error_type_string(self):",
          "3546:         return 'client'",
          "3548:     def _to_payload(self):",
          "3549:         payload = {}",
          "3550:         if self.message is not None:",
          "3551:             payload['message'] = self.message",
          "3552:         return payload",
          "3554:     @classmethod",
          "3555:     def _from_payload(cls, payload):",
          "3556:         new = cls()",
          "3557:         if 'message' in payload:",
          "3558:             new.message = payload['message']",
          "3559:         return new",
          "3561:     @classmethod",
          "3562:     def _model_name(cls):",
          "3563:         return 'aws.greengrass#UnauthorizedError'",
          "3565:     def __repr__(self):",
          "3566:         attrs = []",
          "3567:         for attr, val in self.__dict__.items():",
          "3568:             if val is not None:",
          "3569:                 attrs.append('%s=%r' % (attr, val))",
          "3570:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3572:     def __eq__(self, other):",
          "3573:         if isinstance(other, self.__class__):",
          "3574:             return self.__dict__ == other.__dict__",
          "3575:         return False",
          "3578: class ServiceError(GreengrassCoreIPCError):",
          "3579:     \"\"\"",
          "3580:     ServiceError",
          "3582:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3584:     Keyword Args:",
          "3585:         message:",
          "3587:     Attributes:",
          "3588:         message:",
          "3589:     \"\"\"",
          "3591:     def __init__(self, *,",
          "3592:                  message: typing.Optional[str] = None):",
          "3593:         super().__init__()",
          "3594:         self.message = message  # type: typing.Optional[str]",
          "3596:     def _get_error_type_string(self):",
          "3597:         return 'server'",
          "3599:     def _to_payload(self):",
          "3600:         payload = {}",
          "3601:         if self.message is not None:",
          "3602:             payload['message'] = self.message",
          "3603:         return payload",
          "3605:     @classmethod",
          "3606:     def _from_payload(cls, payload):",
          "3607:         new = cls()",
          "3608:         if 'message' in payload:",
          "3609:             new.message = payload['message']",
          "3610:         return new",
          "3612:     @classmethod",
          "3613:     def _model_name(cls):",
          "3614:         return 'aws.greengrass#ServiceError'",
          "3616:     def __repr__(self):",
          "3617:         attrs = []",
          "3618:         for attr, val in self.__dict__.items():",
          "3619:             if val is not None:",
          "3620:                 attrs.append('%s=%r' % (attr, val))",
          "3621:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3623:     def __eq__(self, other):",
          "3624:         if isinstance(other, self.__class__):",
          "3625:             return self.__dict__ == other.__dict__",
          "3626:         return False",
          "3629: class SubscribeToIoTCoreResponse(rpc.Shape):",
          "3630:     \"\"\"",
          "3631:     SubscribeToIoTCoreResponse",
          "3632:     \"\"\"",
          "3634:     def __init__(self):",
          "3635:         super().__init__()",
          "3637:     def _to_payload(self):",
          "3638:         payload = {}",
          "3639:         return payload",
          "3641:     @classmethod",
          "3642:     def _from_payload(cls, payload):",
          "3643:         new = cls()",
          "3644:         return new",
          "3646:     @classmethod",
          "3647:     def _model_name(cls):",
          "3648:         return 'aws.greengrass#SubscribeToIoTCoreResponse'",
          "3650:     def __repr__(self):",
          "3651:         attrs = []",
          "3652:         for attr, val in self.__dict__.items():",
          "3653:             if val is not None:",
          "3654:                 attrs.append('%s=%r' % (attr, val))",
          "3655:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3657:     def __eq__(self, other):",
          "3658:         if isinstance(other, self.__class__):",
          "3659:             return self.__dict__ == other.__dict__",
          "3660:         return False",
          "3663: class SubscribeToIoTCoreRequest(rpc.Shape):",
          "3664:     \"\"\"",
          "3665:     SubscribeToIoTCoreRequest",
          "3667:     All attributes are None by default, and may be set by keyword in the constructor.",
          "3669:     Keyword Args:",
          "3670:         topic_name:",
          "3671:         qos: QOS enum value",
          "3673:     Attributes:",
          "3674:         topic_name:",
          "3675:         qos: QOS enum value",
          "3676:     \"\"\"",
          "3678:     def __init__(self, *,",
          "3679:                  topic_name: typing.Optional[str] = None,",
          "3680:                  qos: typing.Optional[str] = None):",
          "3681:         super().__init__()",
          "3682:         self.topic_name = topic_name  # type: typing.Optional[str]",
          "3683:         self.qos = qos  # type: typing.Optional[str]",
          "3685:     def _to_payload(self):",
          "3686:         payload = {}",
          "3687:         if self.topic_name is not None:",
          "3688:             payload['topicName'] = self.topic_name",
          "3689:         if self.qos is not None:",
          "3690:             payload['qos'] = self.qos",
          "3691:         return payload",
          "3693:     @classmethod",
          "3694:     def _from_payload(cls, payload):",
          "3695:         new = cls()",
          "3696:         if 'topicName' in payload:",
          "3697:             new.topic_name = payload['topicName']",
          "3698:         if 'qos' in payload:",
          "3699:             new.qos = payload['qos']",
          "3700:         return new",
          "3702:     @classmethod",
          "3703:     def _model_name(cls):",
          "3704:         return 'aws.greengrass#SubscribeToIoTCoreRequest'",
          "3706:     def __repr__(self):",
          "3707:         attrs = []",
          "3708:         for attr, val in self.__dict__.items():",
          "3709:             if val is not None:",
          "3710:                 attrs.append('%s=%r' % (attr, val))",
          "3711:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "3713:     def __eq__(self, other):",
          "3714:         if isinstance(other, self.__class__):",
          "3715:             return self.__dict__ == other.__dict__",
          "3716:         return False",
          "3719: SHAPE_INDEX = rpc.ShapeIndex([",
          "3720:     RunWithInfo,",
          "3721:     PostComponentUpdateEvent,",
          "3722:     PreComponentUpdateEvent,",
          "3723:     ValidateConfigurationUpdateEvent,",
          "3724:     ConfigurationUpdateEvent,",
          "3725:     BinaryMessage,",
          "3726:     JsonMessage,",
          "3727:     MQTTMessage,",
          "3728:     ComponentDetails,",
          "3729:     LocalDeployment,",
          "3730:     ConfigurationValidityReport,",
          "3731:     InvalidArtifactsDirectoryPathError,",
          "3732:     InvalidRecipeDirectoryPathError,",
          "3733:     CreateLocalDeploymentResponse,",
          "3734:     CreateLocalDeploymentRequest,",
          "3735:     StopComponentResponse,",
          "3736:     StopComponentRequest,",
          "3737:     ListLocalDeploymentsResponse,",
          "3738:     ListLocalDeploymentsRequest,",
          "3739:     SubscribeToComponentUpdatesResponse,",
          "3740:     SubscribeToComponentUpdatesRequest,",
          "3741:     GetComponentDetailsResponse,",
          "3742:     GetComponentDetailsRequest,",
          "3743:     SubscribeToTopicResponse,",
          "3744:     SubscribeToTopicRequest,",
          "3745:     GetConfigurationResponse,",
          "3746:     GetConfigurationRequest,",
          "3747:     UpdateStateResponse,",
          "3748:     UpdateStateRequest,",
          "3749:     GetSecretValueResponse,",
          "3750:     GetSecretValueRequest,",
          "3751:     GetLocalDeploymentStatusResponse,",
          "3752:     GetLocalDeploymentStatusRequest,",
          "3753:     ComponentNotFoundError,",
          "3754:     RestartComponentResponse,",
          "3755:     RestartComponentRequest,",
          "3756:     InvalidTokenError,",
          "3757:     ValidateAuthorizationTokenResponse,",
          "3758:     ValidateAuthorizationTokenRequest,",
          "3759:     SubscribeToValidateConfigurationUpdatesResponse,",
          "3760:     SubscribeToValidateConfigurationUpdatesRequest,",
          "3761:     FailedUpdateConditionCheckError,",
          "3762:     ConflictError,",
          "3763:     UpdateConfigurationResponse,",
          "3764:     UpdateConfigurationRequest,",
          "3765:     SendConfigurationValidityReportResponse,",
          "3766:     SendConfigurationValidityReportRequest,",
          "3767:     InvalidArgumentsError,",
          "3768:     DeferComponentUpdateResponse,",
          "3769:     DeferComponentUpdateRequest,",
          "3770:     CreateDebugPasswordResponse,",
          "3771:     CreateDebugPasswordRequest,",
          "3772:     ListComponentsResponse,",
          "3773:     ListComponentsRequest,",
          "3774:     ResourceNotFoundError,",
          "3775:     SubscribeToConfigurationUpdateResponse,",
          "3776:     SubscribeToConfigurationUpdateRequest,",
          "3777:     PublishToIoTCoreResponse,",
          "3778:     PublishToIoTCoreRequest,",
          "3779:     PublishToTopicResponse,",
          "3780:     PublishToTopicRequest,",
          "3781:     UnauthorizedError,",
          "3782:     ServiceError,",
          "3783:     SubscribeToIoTCoreResponse,",
          "3784:     SubscribeToIoTCoreRequest,",
          "3785: ])",
          "3788: class _SubscribeToIoTCoreOperation(rpc.ClientOperation):",
          "3789:     @classmethod",
          "3790:     def _model_name(cls):",
          "3791:         return 'aws.greengrass#SubscribeToIoTCore'",
          "3793:     @classmethod",
          "3794:     def _request_type(cls):",
          "3795:         return SubscribeToIoTCoreRequest",
          "3797:     @classmethod",
          "3798:     def _request_stream_type(cls):",
          "3799:         return None",
          "3801:     @classmethod",
          "3802:     def _response_type(cls):",
          "3803:         return SubscribeToIoTCoreResponse",
          "3805:     @classmethod",
          "3806:     def _response_stream_type(cls):",
          "3807:         return IoTCoreMessage",
          "3810: class _PublishToTopicOperation(rpc.ClientOperation):",
          "3811:     @classmethod",
          "3812:     def _model_name(cls):",
          "3813:         return 'aws.greengrass#PublishToTopic'",
          "3815:     @classmethod",
          "3816:     def _request_type(cls):",
          "3817:         return PublishToTopicRequest",
          "3819:     @classmethod",
          "3820:     def _request_stream_type(cls):",
          "3821:         return None",
          "3823:     @classmethod",
          "3824:     def _response_type(cls):",
          "3825:         return PublishToTopicResponse",
          "3827:     @classmethod",
          "3828:     def _response_stream_type(cls):",
          "3829:         return None",
          "3832: class _PublishToIoTCoreOperation(rpc.ClientOperation):",
          "3833:     @classmethod",
          "3834:     def _model_name(cls):",
          "3835:         return 'aws.greengrass#PublishToIoTCore'",
          "3837:     @classmethod",
          "3838:     def _request_type(cls):",
          "3839:         return PublishToIoTCoreRequest",
          "3841:     @classmethod",
          "3842:     def _request_stream_type(cls):",
          "3843:         return None",
          "3845:     @classmethod",
          "3846:     def _response_type(cls):",
          "3847:         return PublishToIoTCoreResponse",
          "3849:     @classmethod",
          "3850:     def _response_stream_type(cls):",
          "3851:         return None",
          "3854: class _SubscribeToConfigurationUpdateOperation(rpc.ClientOperation):",
          "3855:     @classmethod",
          "3856:     def _model_name(cls):",
          "3857:         return 'aws.greengrass#SubscribeToConfigurationUpdate'",
          "3859:     @classmethod",
          "3860:     def _request_type(cls):",
          "3861:         return SubscribeToConfigurationUpdateRequest",
          "3863:     @classmethod",
          "3864:     def _request_stream_type(cls):",
          "3865:         return None",
          "3867:     @classmethod",
          "3868:     def _response_type(cls):",
          "3869:         return SubscribeToConfigurationUpdateResponse",
          "3871:     @classmethod",
          "3872:     def _response_stream_type(cls):",
          "3873:         return ConfigurationUpdateEvents",
          "3876: class _ListComponentsOperation(rpc.ClientOperation):",
          "3877:     @classmethod",
          "3878:     def _model_name(cls):",
          "3879:         return 'aws.greengrass#ListComponents'",
          "3881:     @classmethod",
          "3882:     def _request_type(cls):",
          "3883:         return ListComponentsRequest",
          "3885:     @classmethod",
          "3886:     def _request_stream_type(cls):",
          "3887:         return None",
          "3889:     @classmethod",
          "3890:     def _response_type(cls):",
          "3891:         return ListComponentsResponse",
          "3893:     @classmethod",
          "3894:     def _response_stream_type(cls):",
          "3895:         return None",
          "3898: class _CreateDebugPasswordOperation(rpc.ClientOperation):",
          "3899:     @classmethod",
          "3900:     def _model_name(cls):",
          "3901:         return 'aws.greengrass#CreateDebugPassword'",
          "3903:     @classmethod",
          "3904:     def _request_type(cls):",
          "3905:         return CreateDebugPasswordRequest",
          "3907:     @classmethod",
          "3908:     def _request_stream_type(cls):",
          "3909:         return None",
          "3911:     @classmethod",
          "3912:     def _response_type(cls):",
          "3913:         return CreateDebugPasswordResponse",
          "3915:     @classmethod",
          "3916:     def _response_stream_type(cls):",
          "3917:         return None",
          "3920: class _DeferComponentUpdateOperation(rpc.ClientOperation):",
          "3921:     @classmethod",
          "3922:     def _model_name(cls):",
          "3923:         return 'aws.greengrass#DeferComponentUpdate'",
          "3925:     @classmethod",
          "3926:     def _request_type(cls):",
          "3927:         return DeferComponentUpdateRequest",
          "3929:     @classmethod",
          "3930:     def _request_stream_type(cls):",
          "3931:         return None",
          "3933:     @classmethod",
          "3934:     def _response_type(cls):",
          "3935:         return DeferComponentUpdateResponse",
          "3937:     @classmethod",
          "3938:     def _response_stream_type(cls):",
          "3939:         return None",
          "3942: class _SendConfigurationValidityReportOperation(rpc.ClientOperation):",
          "3943:     @classmethod",
          "3944:     def _model_name(cls):",
          "3945:         return 'aws.greengrass#SendConfigurationValidityReport'",
          "3947:     @classmethod",
          "3948:     def _request_type(cls):",
          "3949:         return SendConfigurationValidityReportRequest",
          "3951:     @classmethod",
          "3952:     def _request_stream_type(cls):",
          "3953:         return None",
          "3955:     @classmethod",
          "3956:     def _response_type(cls):",
          "3957:         return SendConfigurationValidityReportResponse",
          "3959:     @classmethod",
          "3960:     def _response_stream_type(cls):",
          "3961:         return None",
          "3964: class _UpdateConfigurationOperation(rpc.ClientOperation):",
          "3965:     @classmethod",
          "3966:     def _model_name(cls):",
          "3967:         return 'aws.greengrass#UpdateConfiguration'",
          "3969:     @classmethod",
          "3970:     def _request_type(cls):",
          "3971:         return UpdateConfigurationRequest",
          "3973:     @classmethod",
          "3974:     def _request_stream_type(cls):",
          "3975:         return None",
          "3977:     @classmethod",
          "3978:     def _response_type(cls):",
          "3979:         return UpdateConfigurationResponse",
          "3981:     @classmethod",
          "3982:     def _response_stream_type(cls):",
          "3983:         return None",
          "3986: class _SubscribeToValidateConfigurationUpdatesOperation(rpc.ClientOperation):",
          "3987:     @classmethod",
          "3988:     def _model_name(cls):",
          "3989:         return 'aws.greengrass#SubscribeToValidateConfigurationUpdates'",
          "3991:     @classmethod",
          "3992:     def _request_type(cls):",
          "3993:         return SubscribeToValidateConfigurationUpdatesRequest",
          "3995:     @classmethod",
          "3996:     def _request_stream_type(cls):",
          "3997:         return None",
          "3999:     @classmethod",
          "4000:     def _response_type(cls):",
          "4001:         return SubscribeToValidateConfigurationUpdatesResponse",
          "4003:     @classmethod",
          "4004:     def _response_stream_type(cls):",
          "4005:         return ValidateConfigurationUpdateEvents",
          "4008: class _ValidateAuthorizationTokenOperation(rpc.ClientOperation):",
          "4009:     @classmethod",
          "4010:     def _model_name(cls):",
          "4011:         return 'aws.greengrass#ValidateAuthorizationToken'",
          "4013:     @classmethod",
          "4014:     def _request_type(cls):",
          "4015:         return ValidateAuthorizationTokenRequest",
          "4017:     @classmethod",
          "4018:     def _request_stream_type(cls):",
          "4019:         return None",
          "4021:     @classmethod",
          "4022:     def _response_type(cls):",
          "4023:         return ValidateAuthorizationTokenResponse",
          "4025:     @classmethod",
          "4026:     def _response_stream_type(cls):",
          "4027:         return None",
          "4030: class _RestartComponentOperation(rpc.ClientOperation):",
          "4031:     @classmethod",
          "4032:     def _model_name(cls):",
          "4033:         return 'aws.greengrass#RestartComponent'",
          "4035:     @classmethod",
          "4036:     def _request_type(cls):",
          "4037:         return RestartComponentRequest",
          "4039:     @classmethod",
          "4040:     def _request_stream_type(cls):",
          "4041:         return None",
          "4043:     @classmethod",
          "4044:     def _response_type(cls):",
          "4045:         return RestartComponentResponse",
          "4047:     @classmethod",
          "4048:     def _response_stream_type(cls):",
          "4049:         return None",
          "4052: class _GetLocalDeploymentStatusOperation(rpc.ClientOperation):",
          "4053:     @classmethod",
          "4054:     def _model_name(cls):",
          "4055:         return 'aws.greengrass#GetLocalDeploymentStatus'",
          "4057:     @classmethod",
          "4058:     def _request_type(cls):",
          "4059:         return GetLocalDeploymentStatusRequest",
          "4061:     @classmethod",
          "4062:     def _request_stream_type(cls):",
          "4063:         return None",
          "4065:     @classmethod",
          "4066:     def _response_type(cls):",
          "4067:         return GetLocalDeploymentStatusResponse",
          "4069:     @classmethod",
          "4070:     def _response_stream_type(cls):",
          "4071:         return None",
          "4074: class _GetSecretValueOperation(rpc.ClientOperation):",
          "4075:     @classmethod",
          "4076:     def _model_name(cls):",
          "4077:         return 'aws.greengrass#GetSecretValue'",
          "4079:     @classmethod",
          "4080:     def _request_type(cls):",
          "4081:         return GetSecretValueRequest",
          "4083:     @classmethod",
          "4084:     def _request_stream_type(cls):",
          "4085:         return None",
          "4087:     @classmethod",
          "4088:     def _response_type(cls):",
          "4089:         return GetSecretValueResponse",
          "4091:     @classmethod",
          "4092:     def _response_stream_type(cls):",
          "4093:         return None",
          "4096: class _UpdateStateOperation(rpc.ClientOperation):",
          "4097:     @classmethod",
          "4098:     def _model_name(cls):",
          "4099:         return 'aws.greengrass#UpdateState'",
          "4101:     @classmethod",
          "4102:     def _request_type(cls):",
          "4103:         return UpdateStateRequest",
          "4105:     @classmethod",
          "4106:     def _request_stream_type(cls):",
          "4107:         return None",
          "4109:     @classmethod",
          "4110:     def _response_type(cls):",
          "4111:         return UpdateStateResponse",
          "4113:     @classmethod",
          "4114:     def _response_stream_type(cls):",
          "4115:         return None",
          "4118: class _GetConfigurationOperation(rpc.ClientOperation):",
          "4119:     @classmethod",
          "4120:     def _model_name(cls):",
          "4121:         return 'aws.greengrass#GetConfiguration'",
          "4123:     @classmethod",
          "4124:     def _request_type(cls):",
          "4125:         return GetConfigurationRequest",
          "4127:     @classmethod",
          "4128:     def _request_stream_type(cls):",
          "4129:         return None",
          "4131:     @classmethod",
          "4132:     def _response_type(cls):",
          "4133:         return GetConfigurationResponse",
          "4135:     @classmethod",
          "4136:     def _response_stream_type(cls):",
          "4137:         return None",
          "4140: class _SubscribeToTopicOperation(rpc.ClientOperation):",
          "4141:     @classmethod",
          "4142:     def _model_name(cls):",
          "4143:         return 'aws.greengrass#SubscribeToTopic'",
          "4145:     @classmethod",
          "4146:     def _request_type(cls):",
          "4147:         return SubscribeToTopicRequest",
          "4149:     @classmethod",
          "4150:     def _request_stream_type(cls):",
          "4151:         return None",
          "4153:     @classmethod",
          "4154:     def _response_type(cls):",
          "4155:         return SubscribeToTopicResponse",
          "4157:     @classmethod",
          "4158:     def _response_stream_type(cls):",
          "4159:         return SubscriptionResponseMessage",
          "4162: class _GetComponentDetailsOperation(rpc.ClientOperation):",
          "4163:     @classmethod",
          "4164:     def _model_name(cls):",
          "4165:         return 'aws.greengrass#GetComponentDetails'",
          "4167:     @classmethod",
          "4168:     def _request_type(cls):",
          "4169:         return GetComponentDetailsRequest",
          "4171:     @classmethod",
          "4172:     def _request_stream_type(cls):",
          "4173:         return None",
          "4175:     @classmethod",
          "4176:     def _response_type(cls):",
          "4177:         return GetComponentDetailsResponse",
          "4179:     @classmethod",
          "4180:     def _response_stream_type(cls):",
          "4181:         return None",
          "4184: class _SubscribeToComponentUpdatesOperation(rpc.ClientOperation):",
          "4185:     @classmethod",
          "4186:     def _model_name(cls):",
          "4187:         return 'aws.greengrass#SubscribeToComponentUpdates'",
          "4189:     @classmethod",
          "4190:     def _request_type(cls):",
          "4191:         return SubscribeToComponentUpdatesRequest",
          "4193:     @classmethod",
          "4194:     def _request_stream_type(cls):",
          "4195:         return None",
          "4197:     @classmethod",
          "4198:     def _response_type(cls):",
          "4199:         return SubscribeToComponentUpdatesResponse",
          "4201:     @classmethod",
          "4202:     def _response_stream_type(cls):",
          "4203:         return ComponentUpdatePolicyEvents",
          "4206: class _ListLocalDeploymentsOperation(rpc.ClientOperation):",
          "4207:     @classmethod",
          "4208:     def _model_name(cls):",
          "4209:         return 'aws.greengrass#ListLocalDeployments'",
          "4211:     @classmethod",
          "4212:     def _request_type(cls):",
          "4213:         return ListLocalDeploymentsRequest",
          "4215:     @classmethod",
          "4216:     def _request_stream_type(cls):",
          "4217:         return None",
          "4219:     @classmethod",
          "4220:     def _response_type(cls):",
          "4221:         return ListLocalDeploymentsResponse",
          "4223:     @classmethod",
          "4224:     def _response_stream_type(cls):",
          "4225:         return None",
          "4228: class _StopComponentOperation(rpc.ClientOperation):",
          "4229:     @classmethod",
          "4230:     def _model_name(cls):",
          "4231:         return 'aws.greengrass#StopComponent'",
          "4233:     @classmethod",
          "4234:     def _request_type(cls):",
          "4235:         return StopComponentRequest",
          "4237:     @classmethod",
          "4238:     def _request_stream_type(cls):",
          "4239:         return None",
          "4241:     @classmethod",
          "4242:     def _response_type(cls):",
          "4243:         return StopComponentResponse",
          "4245:     @classmethod",
          "4246:     def _response_stream_type(cls):",
          "4247:         return None",
          "4250: class _CreateLocalDeploymentOperation(rpc.ClientOperation):",
          "4251:     @classmethod",
          "4252:     def _model_name(cls):",
          "4253:         return 'aws.greengrass#CreateLocalDeployment'",
          "4255:     @classmethod",
          "4256:     def _request_type(cls):",
          "4257:         return CreateLocalDeploymentRequest",
          "4259:     @classmethod",
          "4260:     def _request_stream_type(cls):",
          "4261:         return None",
          "4263:     @classmethod",
          "4264:     def _response_type(cls):",
          "4265:         return CreateLocalDeploymentResponse",
          "4267:     @classmethod",
          "4268:     def _response_stream_type(cls):",
          "4269:         return None",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "4: # SPDX-License-Identifier: Apache-2.0.",
          "8: setup(",
          "9:     name='awsiotsdk',",
          "",
          "[Removed Lines]",
          "6: from setuptools import setup",
          "",
          "[Added Lines]",
          "6: from setuptools import setup, find_packages",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:     description='AWS IoT SDK based on the AWS Common Runtime',",
          "12:     author='AWS SDK Common Runtime Team',",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "15:     install_requires=[",
          "17:     ],",
          "18:     python_requires='>=3.5',",
          "19: )",
          "",
          "[Removed Lines]",
          "14:     packages=['awsiot'],",
          "16:         'awscrt==0.9.10',",
          "",
          "[Added Lines]",
          "14:     packages=find_packages(include=['awsiot*']),",
          "16:         'awscrt==0.9.15',",
          "",
          "---------------"
        ],
        "test/echotestrpc/client.py||test/echotestrpc/client.py": [
          "File: test/echotestrpc/client.py -> test/echotestrpc/client.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: # This file is generated",
          "6: from . import model",
          "7: import awsiot.eventstreamrpc as rpc",
          "8: import concurrent.futures",
          "11: class GetAllProductsOperation(model._GetAllProductsOperation):",
          "12:     \"\"\"",
          "13:     GetAllProductsOperation",
          "15:     Create with EchoTestRPCClient.new_get_all_products()",
          "16:     \"\"\"",
          "18:     def activate(self, request: model.GetAllProductsRequest) -> concurrent.futures.Future:",
          "19:         \"\"\"",
          "20:         Activate this operation by sending the initial GetAllProductsRequest message.",
          "22:         Returns a Future which completes with a result of None if the",
          "23:         request is successfully written to the wire, or an exception if",
          "24:         the request fails to send.",
          "25:         \"\"\"",
          "26:         return self._activate(request)",
          "28:     def get_response(self) -> concurrent.futures.Future:",
          "29:         \"\"\"",
          "30:         Returns a Future which completes with a result of GetAllProductsResponse,",
          "31:         when the initial response is received, or an exception.",
          "32:         \"\"\"",
          "33:         return self._get_response()",
          "35:     def close(self) -> concurrent.futures.Future:",
          "36:         \"\"\"",
          "37:         Close the operation, whether or not it has completed.",
          "39:         Returns a Future which completes with a result of None",
          "40:         when the operation has closed.",
          "41:         \"\"\"",
          "42:         return super().close()",
          "45: class CauseServiceErrorOperation(model._CauseServiceErrorOperation):",
          "46:     \"\"\"",
          "47:     CauseServiceErrorOperation",
          "49:     Create with EchoTestRPCClient.new_cause_service_error()",
          "50:     \"\"\"",
          "52:     def activate(self, request: model.CauseServiceErrorRequest) -> concurrent.futures.Future:",
          "53:         \"\"\"",
          "54:         Activate this operation by sending the initial CauseServiceErrorRequest message.",
          "56:         Returns a Future which completes with a result of None if the",
          "57:         request is successfully written to the wire, or an exception if",
          "58:         the request fails to send.",
          "59:         \"\"\"",
          "60:         return self._activate(request)",
          "62:     def get_response(self) -> concurrent.futures.Future:",
          "63:         \"\"\"",
          "64:         Returns a Future which completes with a result of CauseServiceErrorResponse,",
          "65:         when the initial response is received, or an exception.",
          "66:         \"\"\"",
          "67:         return self._get_response()",
          "69:     def close(self) -> concurrent.futures.Future:",
          "70:         \"\"\"",
          "71:         Close the operation, whether or not it has completed.",
          "73:         Returns a Future which completes with a result of None",
          "74:         when the operation has closed.",
          "75:         \"\"\"",
          "76:         return super().close()",
          "79: class CauseStreamServiceToErrorStreamHandler(rpc.StreamResponseHandler):",
          "80:     \"\"\"",
          "81:     Event handler for CauseStreamServiceToErrorOperation",
          "83:     Inherit from this class and override methods to handle",
          "84:     stream events during a CauseStreamServiceToErrorOperation.",
          "85:     \"\"\"",
          "87:     def on_stream_event(self, event: model.EchoStreamingMessage) -> None:",
          "88:         \"\"\"",
          "89:         Invoked when a EchoStreamingMessage is received.",
          "90:         \"\"\"",
          "91:         pass",
          "93:     def on_stream_error(self, error: Exception) -> bool:",
          "94:         \"\"\"",
          "95:         Invoked when an error occurs on the operation stream.",
          "97:         Return True if operation should close as a result of this error,",
          "98:         \"\"\"",
          "99:         return True",
          "101:     def on_stream_closed(self) -> None:",
          "102:         \"\"\"",
          "103:         Invoked when the stream for this operation is closed.",
          "104:         \"\"\"",
          "105:         pass",
          "108: class CauseStreamServiceToErrorOperation(model._CauseStreamServiceToErrorOperation):",
          "109:     \"\"\"",
          "110:     CauseStreamServiceToErrorOperation",
          "112:     Create with EchoTestRPCClient.new_cause_stream_service_to_error()",
          "113:     \"\"\"",
          "115:     def activate(self, request: model.EchoStreamingRequest) -> concurrent.futures.Future:",
          "116:         \"\"\"",
          "117:         Activate this operation by sending the initial EchoStreamingRequest message.",
          "119:         Returns a Future which completes with a result of None if the",
          "120:         request is successfully written to the wire, or an exception if",
          "121:         the request fails to send.",
          "122:         \"\"\"",
          "123:         return self._activate(request)",
          "125:     def send_stream_event(self, event: model.EchoStreamingMessage) -> concurrent.futures.Future:",
          "126:         \"\"\"",
          "127:         Send next EchoStreamingMessage stream event.",
          "129:         activate() must be called before send_stream_event().",
          "131:         Returns a Future which completes with a result of None if the",
          "132:         event is successfully written to the wire, or an exception if",
          "133:         the event fails to send.",
          "134:         \"\"\"",
          "135:         return self._send_stream_event(event)",
          "137:     def get_response(self) -> concurrent.futures.Future:",
          "138:         \"\"\"",
          "139:         Returns a Future which completes with a result of EchoStreamingResponse,",
          "140:         when the initial response is received, or an exception.",
          "141:         \"\"\"",
          "142:         return self._get_response()",
          "144:     def close(self) -> concurrent.futures.Future:",
          "145:         \"\"\"",
          "146:         Close the operation, whether or not it has completed.",
          "148:         Returns a Future which completes with a result of None",
          "149:         when the operation has closed.",
          "150:         \"\"\"",
          "151:         return super().close()",
          "154: class EchoStreamMessagesStreamHandler(rpc.StreamResponseHandler):",
          "155:     \"\"\"",
          "156:     Event handler for EchoStreamMessagesOperation",
          "158:     Inherit from this class and override methods to handle",
          "159:     stream events during a EchoStreamMessagesOperation.",
          "160:     \"\"\"",
          "162:     def on_stream_event(self, event: model.EchoStreamingMessage) -> None:",
          "163:         \"\"\"",
          "164:         Invoked when a EchoStreamingMessage is received.",
          "165:         \"\"\"",
          "166:         pass",
          "168:     def on_stream_error(self, error: Exception) -> bool:",
          "169:         \"\"\"",
          "170:         Invoked when an error occurs on the operation stream.",
          "172:         Return True if operation should close as a result of this error,",
          "173:         \"\"\"",
          "174:         return True",
          "176:     def on_stream_closed(self) -> None:",
          "177:         \"\"\"",
          "178:         Invoked when the stream for this operation is closed.",
          "179:         \"\"\"",
          "180:         pass",
          "183: class EchoStreamMessagesOperation(model._EchoStreamMessagesOperation):",
          "184:     \"\"\"",
          "185:     EchoStreamMessagesOperation",
          "187:     Create with EchoTestRPCClient.new_echo_stream_messages()",
          "188:     \"\"\"",
          "190:     def activate(self, request: model.EchoStreamingRequest) -> concurrent.futures.Future:",
          "191:         \"\"\"",
          "192:         Activate this operation by sending the initial EchoStreamingRequest message.",
          "194:         Returns a Future which completes with a result of None if the",
          "195:         request is successfully written to the wire, or an exception if",
          "196:         the request fails to send.",
          "197:         \"\"\"",
          "198:         return self._activate(request)",
          "200:     def send_stream_event(self, event: model.EchoStreamingMessage) -> concurrent.futures.Future:",
          "201:         \"\"\"",
          "202:         Send next EchoStreamingMessage stream event.",
          "204:         activate() must be called before send_stream_event().",
          "206:         Returns a Future which completes with a result of None if the",
          "207:         event is successfully written to the wire, or an exception if",
          "208:         the event fails to send.",
          "209:         \"\"\"",
          "210:         return self._send_stream_event(event)",
          "212:     def get_response(self) -> concurrent.futures.Future:",
          "213:         \"\"\"",
          "214:         Returns a Future which completes with a result of EchoStreamingResponse,",
          "215:         when the initial response is received, or an exception.",
          "216:         \"\"\"",
          "217:         return self._get_response()",
          "219:     def close(self) -> concurrent.futures.Future:",
          "220:         \"\"\"",
          "221:         Close the operation, whether or not it has completed.",
          "223:         Returns a Future which completes with a result of None",
          "224:         when the operation has closed.",
          "225:         \"\"\"",
          "226:         return super().close()",
          "229: class EchoMessageOperation(model._EchoMessageOperation):",
          "230:     \"\"\"",
          "231:     EchoMessageOperation",
          "233:     Create with EchoTestRPCClient.new_echo_message()",
          "234:     \"\"\"",
          "236:     def activate(self, request: model.EchoMessageRequest) -> concurrent.futures.Future:",
          "237:         \"\"\"",
          "238:         Activate this operation by sending the initial EchoMessageRequest message.",
          "240:         Returns a Future which completes with a result of None if the",
          "241:         request is successfully written to the wire, or an exception if",
          "242:         the request fails to send.",
          "243:         \"\"\"",
          "244:         return self._activate(request)",
          "246:     def get_response(self) -> concurrent.futures.Future:",
          "247:         \"\"\"",
          "248:         Returns a Future which completes with a result of EchoMessageResponse,",
          "249:         when the initial response is received, or an exception.",
          "250:         \"\"\"",
          "251:         return self._get_response()",
          "253:     def close(self) -> concurrent.futures.Future:",
          "254:         \"\"\"",
          "255:         Close the operation, whether or not it has completed.",
          "257:         Returns a Future which completes with a result of None",
          "258:         when the operation has closed.",
          "259:         \"\"\"",
          "260:         return super().close()",
          "263: class GetAllCustomersOperation(model._GetAllCustomersOperation):",
          "264:     \"\"\"",
          "265:     GetAllCustomersOperation",
          "267:     Create with EchoTestRPCClient.new_get_all_customers()",
          "268:     \"\"\"",
          "270:     def activate(self, request: model.GetAllCustomersRequest) -> concurrent.futures.Future:",
          "271:         \"\"\"",
          "272:         Activate this operation by sending the initial GetAllCustomersRequest message.",
          "274:         Returns a Future which completes with a result of None if the",
          "275:         request is successfully written to the wire, or an exception if",
          "276:         the request fails to send.",
          "277:         \"\"\"",
          "278:         return self._activate(request)",
          "280:     def get_response(self) -> concurrent.futures.Future:",
          "281:         \"\"\"",
          "282:         Returns a Future which completes with a result of GetAllCustomersResponse,",
          "283:         when the initial response is received, or an exception.",
          "284:         \"\"\"",
          "285:         return self._get_response()",
          "287:     def close(self) -> concurrent.futures.Future:",
          "288:         \"\"\"",
          "289:         Close the operation, whether or not it has completed.",
          "291:         Returns a Future which completes with a result of None",
          "292:         when the operation has closed.",
          "293:         \"\"\"",
          "294:         return super().close()",
          "297: class EchoTestRPCClient(rpc.Client):",
          "298:     \"\"\"",
          "299:     Client for the EchoTestRPC service.",
          "301:     Args:",
          "302:         connection: Connection that this client will use.",
          "303:     \"\"\"",
          "305:     def __init__(self, connection: rpc.Connection):",
          "306:         super().__init__(connection, model.SHAPE_INDEX)",
          "308:     def new_get_all_products(self) -> GetAllProductsOperation:",
          "309:         \"\"\"",
          "310:         Create a new GetAllProductsOperation.",
          "312:         This operation will not send or receive any data until activate()",
          "313:         is called. Call activate() when you're ready for callbacks and",
          "314:         events to fire.",
          "315:         \"\"\"",
          "316:         return self._new_operation(GetAllProductsOperation)",
          "318:     def new_cause_service_error(self) -> CauseServiceErrorOperation:",
          "319:         \"\"\"",
          "320:         Create a new CauseServiceErrorOperation.",
          "322:         This operation will not send or receive any data until activate()",
          "323:         is called. Call activate() when you're ready for callbacks and",
          "324:         events to fire.",
          "325:         \"\"\"",
          "326:         return self._new_operation(CauseServiceErrorOperation)",
          "328:     def new_cause_stream_service_to_error(self, stream_handler: CauseStreamServiceToErrorStreamHandler) -> CauseStreamServiceToErrorOperation:",
          "329:         \"\"\"",
          "330:         Create a new CauseStreamServiceToErrorOperation.",
          "332:         This operation will not send or receive any data until activate()",
          "333:         is called. Call activate() when you're ready for callbacks and",
          "334:         events to fire.",
          "336:         Args:",
          "337:             stream_handler: Methods on this object will be called as",
          "338:                 stream events happen on this operation.",
          "339:         \"\"\"",
          "340:         return self._new_operation(CauseStreamServiceToErrorOperation, stream_handler)",
          "342:     def new_echo_stream_messages(self, stream_handler: EchoStreamMessagesStreamHandler) -> EchoStreamMessagesOperation:",
          "343:         \"\"\"",
          "344:         Create a new EchoStreamMessagesOperation.",
          "346:         This operation will not send or receive any data until activate()",
          "347:         is called. Call activate() when you're ready for callbacks and",
          "348:         events to fire.",
          "350:         Args:",
          "351:             stream_handler: Methods on this object will be called as",
          "352:                 stream events happen on this operation.",
          "353:         \"\"\"",
          "354:         return self._new_operation(EchoStreamMessagesOperation, stream_handler)",
          "356:     def new_echo_message(self) -> EchoMessageOperation:",
          "357:         \"\"\"",
          "358:         Create a new EchoMessageOperation.",
          "360:         This operation will not send or receive any data until activate()",
          "361:         is called. Call activate() when you're ready for callbacks and",
          "362:         events to fire.",
          "363:         \"\"\"",
          "364:         return self._new_operation(EchoMessageOperation)",
          "366:     def new_get_all_customers(self) -> GetAllCustomersOperation:",
          "367:         \"\"\"",
          "368:         Create a new GetAllCustomersOperation.",
          "370:         This operation will not send or receive any data until activate()",
          "371:         is called. Call activate() when you're ready for callbacks and",
          "372:         events to fire.",
          "373:         \"\"\"",
          "374:         return self._new_operation(GetAllCustomersOperation)",
          "",
          "---------------"
        ],
        "test/echotestrpc/model.py||test/echotestrpc/model.py": [
          "File: test/echotestrpc/model.py -> test/echotestrpc/model.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: # This file is generated",
          "6: import awsiot.eventstreamrpc as rpc",
          "7: import base64",
          "8: import datetime",
          "9: import typing",
          "12: class EchoTestRPCError(rpc.ErrorShape):",
          "13:     \"\"\"",
          "14:     Base for all error messages sent by server.",
          "15:     \"\"\"",
          "17:     def _get_error_type_string(self) -> str:",
          "18:         # overridden in subclasses",
          "19:         raise NotImplementedError",
          "21:     def is_retryable(self) -> bool:",
          "22:         return self._get_error_type_string() == 'server'",
          "24:     def is_server_error(self) -> bool:",
          "25:         return self._get_error_type_string() == 'server'",
          "27:     def is_client_error(self) -> bool:",
          "28:         return self._get_error_type_string() == 'client'",
          "31: class Customer(rpc.Shape):",
          "32:     \"\"\"",
          "33:     Customer",
          "35:     All attributes are None by default, and may be set by keyword in the constructor.",
          "37:     Keyword Args:",
          "38:         id:",
          "39:         first_name:",
          "40:         last_name:",
          "42:     Attributes:",
          "43:         id:",
          "44:         first_name:",
          "45:         last_name:",
          "46:     \"\"\"",
          "48:     def __init__(self, *,",
          "49:                  id: typing.Optional[int] = None,",
          "50:                  first_name: typing.Optional[str] = None,",
          "51:                  last_name: typing.Optional[str] = None):",
          "52:         super().__init__()",
          "53:         self.id = id  # type: typing.Optional[int]",
          "54:         self.first_name = first_name  # type: typing.Optional[str]",
          "55:         self.last_name = last_name  # type: typing.Optional[str]",
          "57:     def _to_payload(self):",
          "58:         payload = {}",
          "59:         if self.id is not None:",
          "60:             payload['id'] = self.id",
          "61:         if self.first_name is not None:",
          "62:             payload['firstName'] = self.first_name",
          "63:         if self.last_name is not None:",
          "64:             payload['lastName'] = self.last_name",
          "65:         return payload",
          "67:     @classmethod",
          "68:     def _from_payload(cls, payload):",
          "69:         new = cls()",
          "70:         if 'id' in payload:",
          "71:             new.id = int(payload['id'])",
          "72:         if 'firstName' in payload:",
          "73:             new.first_name = payload['firstName']",
          "74:         if 'lastName' in payload:",
          "75:             new.last_name = payload['lastName']",
          "76:         return new",
          "78:     @classmethod",
          "79:     def _model_name(cls):",
          "80:         return 'awstest#Customer'",
          "82:     def __repr__(self):",
          "83:         attrs = []",
          "84:         for attr, val in self.__dict__.items():",
          "85:             if val is not None:",
          "86:                 attrs.append('%s=%r' % (attr, val))",
          "87:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "89:     def __eq__(self, other):",
          "90:         if isinstance(other, self.__class__):",
          "91:             return self.__dict__ == other.__dict__",
          "92:         return False",
          "95: class FruitEnum:",
          "96:     \"\"\"",
          "97:     FruitEnum enum",
          "98:     \"\"\"",
          "100:     APPLE = 'apl'",
          "101:     ORANGE = 'org'",
          "102:     BANANA = 'ban'",
          "103:     PINEAPPLE = 'pin'",
          "106: class Pair(rpc.Shape):",
          "107:     \"\"\"",
          "108:     Pair",
          "110:     All attributes are None by default, and may be set by keyword in the constructor.",
          "112:     Keyword Args:",
          "113:         key:",
          "114:         value:",
          "116:     Attributes:",
          "117:         key:",
          "118:         value:",
          "119:     \"\"\"",
          "121:     def __init__(self, *,",
          "122:                  key: typing.Optional[str] = None,",
          "123:                  value: typing.Optional[str] = None):",
          "124:         super().__init__()",
          "125:         self.key = key  # type: typing.Optional[str]",
          "126:         self.value = value  # type: typing.Optional[str]",
          "128:     def _to_payload(self):",
          "129:         payload = {}",
          "130:         if self.key is not None:",
          "131:             payload['key'] = self.key",
          "132:         if self.value is not None:",
          "133:             payload['value'] = self.value",
          "134:         return payload",
          "136:     @classmethod",
          "137:     def _from_payload(cls, payload):",
          "138:         new = cls()",
          "139:         if 'key' in payload:",
          "140:             new.key = payload['key']",
          "141:         if 'value' in payload:",
          "142:             new.value = payload['value']",
          "143:         return new",
          "145:     @classmethod",
          "146:     def _model_name(cls):",
          "147:         return 'awstest#Pair'",
          "149:     def __repr__(self):",
          "150:         attrs = []",
          "151:         for attr, val in self.__dict__.items():",
          "152:             if val is not None:",
          "153:                 attrs.append('%s=%r' % (attr, val))",
          "154:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "156:     def __eq__(self, other):",
          "157:         if isinstance(other, self.__class__):",
          "158:             return self.__dict__ == other.__dict__",
          "159:         return False",
          "162: class Product(rpc.Shape):",
          "163:     \"\"\"",
          "164:     Product",
          "166:     All attributes are None by default, and may be set by keyword in the constructor.",
          "168:     Keyword Args:",
          "169:         name:",
          "170:         price:",
          "172:     Attributes:",
          "173:         name:",
          "174:         price:",
          "175:     \"\"\"",
          "177:     def __init__(self, *,",
          "178:                  name: typing.Optional[str] = None,",
          "179:                  price: typing.Optional[float] = None):",
          "180:         super().__init__()",
          "181:         self.name = name  # type: typing.Optional[str]",
          "182:         self.price = price  # type: typing.Optional[float]",
          "184:     def _to_payload(self):",
          "185:         payload = {}",
          "186:         if self.name is not None:",
          "187:             payload['name'] = self.name",
          "188:         if self.price is not None:",
          "189:             payload['price'] = self.price",
          "190:         return payload",
          "192:     @classmethod",
          "193:     def _from_payload(cls, payload):",
          "194:         new = cls()",
          "195:         if 'name' in payload:",
          "196:             new.name = payload['name']",
          "197:         if 'price' in payload:",
          "198:             new.price = float(payload['price'])",
          "199:         return new",
          "201:     @classmethod",
          "202:     def _model_name(cls):",
          "203:         return 'awstest#Product'",
          "205:     def __repr__(self):",
          "206:         attrs = []",
          "207:         for attr, val in self.__dict__.items():",
          "208:             if val is not None:",
          "209:                 attrs.append('%s=%r' % (attr, val))",
          "210:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "212:     def __eq__(self, other):",
          "213:         if isinstance(other, self.__class__):",
          "214:             return self.__dict__ == other.__dict__",
          "215:         return False",
          "218: class MessageData(rpc.Shape):",
          "219:     \"\"\"",
          "220:     MessageData",
          "222:     All attributes are None by default, and may be set by keyword in the constructor.",
          "224:     Keyword Args:",
          "225:         string_message:",
          "226:         boolean_message:",
          "227:         time_message:",
          "228:         document_message:",
          "229:         enum_message: FruitEnum enum value",
          "230:         blob_message:",
          "231:         string_list_message:",
          "232:         key_value_pair_list:",
          "234:     Attributes:",
          "235:         string_message:",
          "236:         boolean_message:",
          "237:         time_message:",
          "238:         document_message:",
          "239:         enum_message: FruitEnum enum value",
          "240:         blob_message:",
          "241:         string_list_message:",
          "242:         key_value_pair_list:",
          "243:     \"\"\"",
          "245:     def __init__(self, *,",
          "246:                  string_message: typing.Optional[str] = None,",
          "247:                  boolean_message: typing.Optional[bool] = None,",
          "248:                  time_message: typing.Optional[datetime.datetime] = None,",
          "249:                  document_message: typing.Optional[typing.Dict[str, typing.Any]] = None,",
          "250:                  enum_message: typing.Optional[str] = None,",
          "251:                  blob_message: typing.Optional[bytes] = None,",
          "252:                  string_list_message: typing.Optional[typing.List[str]] = None,",
          "253:                  key_value_pair_list: typing.Optional[typing.List[Pair]] = None):",
          "254:         super().__init__()",
          "255:         self.string_message = string_message  # type: typing.Optional[str]",
          "256:         self.boolean_message = boolean_message  # type: typing.Optional[bool]",
          "257:         self.time_message = time_message  # type: typing.Optional[datetime.datetime]",
          "258:         self.document_message = document_message  # type: typing.Optional[typing.Dict[str, typing.Any]]",
          "259:         self.enum_message = enum_message  # type: typing.Optional[str]",
          "260:         self.blob_message = blob_message  # type: typing.Optional[bytes]",
          "261:         self.string_list_message = string_list_message  # type: typing.Optional[typing.List[str]]",
          "262:         self.key_value_pair_list = key_value_pair_list  # type: typing.Optional[typing.List[Pair]]",
          "264:     def _to_payload(self):",
          "265:         payload = {}",
          "266:         if self.string_message is not None:",
          "267:             payload['stringMessage'] = self.string_message",
          "268:         if self.boolean_message is not None:",
          "269:             payload['booleanMessage'] = self.boolean_message",
          "270:         if self.time_message is not None:",
          "271:             payload['timeMessage'] = self.time_message.timestamp()",
          "272:         if self.document_message is not None:",
          "273:             payload['documentMessage'] = self.document_message",
          "274:         if self.enum_message is not None:",
          "275:             payload['enumMessage'] = self.enum_message",
          "276:         if self.blob_message is not None:",
          "277:             payload['blobMessage'] = base64.b64encode(self.blob_message).decode()",
          "278:         if self.string_list_message is not None:",
          "279:             payload['stringListMessage'] = self.string_list_message",
          "280:         if self.key_value_pair_list is not None:",
          "281:             payload['keyValuePairList'] = [i._to_payload() for i in self.key_value_pair_list]",
          "282:         return payload",
          "284:     @classmethod",
          "285:     def _from_payload(cls, payload):",
          "286:         new = cls()",
          "287:         if 'stringMessage' in payload:",
          "288:             new.string_message = payload['stringMessage']",
          "289:         if 'booleanMessage' in payload:",
          "290:             new.boolean_message = payload['booleanMessage']",
          "291:         if 'timeMessage' in payload:",
          "292:             new.time_message = datetime.datetime.fromtimestamp(payload['timeMessage'], datetime.timezone.utc)",
          "293:         if 'documentMessage' in payload:",
          "294:             new.document_message = payload['documentMessage']",
          "295:         if 'enumMessage' in payload:",
          "296:             new.enum_message = payload['enumMessage']",
          "297:         if 'blobMessage' in payload:",
          "298:             new.blob_message = base64.b64decode(payload['blobMessage'])",
          "299:         if 'stringListMessage' in payload:",
          "300:             new.string_list_message = payload['stringListMessage']",
          "301:         if 'keyValuePairList' in payload:",
          "302:             new.key_value_pair_list = [Pair._from_payload(i) for i in payload['keyValuePairList']]",
          "303:         return new",
          "305:     @classmethod",
          "306:     def _model_name(cls):",
          "307:         return 'awstest#MessageData'",
          "309:     def __repr__(self):",
          "310:         attrs = []",
          "311:         for attr, val in self.__dict__.items():",
          "312:             if val is not None:",
          "313:                 attrs.append('%s=%r' % (attr, val))",
          "314:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "316:     def __eq__(self, other):",
          "317:         if isinstance(other, self.__class__):",
          "318:             return self.__dict__ == other.__dict__",
          "319:         return False",
          "322: class EchoStreamingMessage(rpc.Shape):",
          "323:     \"\"\"",
          "324:     MessageData is a \"tagged union\" class.",
          "326:     When sending, only one of the attributes may be set.",
          "327:     When receiving, only one of the attributes will be set.",
          "328:     All other attributes will be None.",
          "330:     Keyword Args:",
          "331:         stream_message:",
          "332:         key_value_pair:",
          "334:     Attributes:",
          "335:         stream_message:",
          "336:         key_value_pair:",
          "337:     \"\"\"",
          "339:     def __init__(self, *,",
          "340:                  stream_message: typing.Optional[MessageData] = None,",
          "341:                  key_value_pair: typing.Optional[Pair] = None):",
          "342:         super().__init__()",
          "343:         self.stream_message = stream_message  # type: typing.Optional[MessageData]",
          "344:         self.key_value_pair = key_value_pair  # type: typing.Optional[Pair]",
          "346:     def _to_payload(self):",
          "347:         payload = {}",
          "348:         if self.stream_message is not None:",
          "349:             payload['streamMessage'] = self.stream_message._to_payload()",
          "350:         if self.key_value_pair is not None:",
          "351:             payload['keyValuePair'] = self.key_value_pair._to_payload()",
          "352:         return payload",
          "354:     @classmethod",
          "355:     def _from_payload(cls, payload):",
          "356:         new = cls()",
          "357:         if 'streamMessage' in payload:",
          "358:             new.stream_message = MessageData._from_payload(payload['streamMessage'])",
          "359:         if 'keyValuePair' in payload:",
          "360:             new.key_value_pair = Pair._from_payload(payload['keyValuePair'])",
          "361:         return new",
          "363:     @classmethod",
          "364:     def _model_name(cls):",
          "365:         return 'awstest#EchoStreamingMessage'",
          "367:     def __repr__(self):",
          "368:         attrs = []",
          "369:         for attr, val in self.__dict__.items():",
          "370:             if val is not None:",
          "371:                 attrs.append('%s=%r' % (attr, val))",
          "372:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "374:     def __eq__(self, other):",
          "375:         if isinstance(other, self.__class__):",
          "376:             return self.__dict__ == other.__dict__",
          "377:         return False",
          "380: class GetAllCustomersResponse(rpc.Shape):",
          "381:     \"\"\"",
          "382:     GetAllCustomersResponse",
          "384:     All attributes are None by default, and may be set by keyword in the constructor.",
          "386:     Keyword Args:",
          "387:         customers:",
          "389:     Attributes:",
          "390:         customers:",
          "391:     \"\"\"",
          "393:     def __init__(self, *,",
          "394:                  customers: typing.Optional[typing.List[Customer]] = None):",
          "395:         super().__init__()",
          "396:         self.customers = customers  # type: typing.Optional[typing.List[Customer]]",
          "398:     def _to_payload(self):",
          "399:         payload = {}",
          "400:         if self.customers is not None:",
          "401:             payload['customers'] = [i._to_payload() for i in self.customers]",
          "402:         return payload",
          "404:     @classmethod",
          "405:     def _from_payload(cls, payload):",
          "406:         new = cls()",
          "407:         if 'customers' in payload:",
          "408:             new.customers = [Customer._from_payload(i) for i in payload['customers']]",
          "409:         return new",
          "411:     @classmethod",
          "412:     def _model_name(cls):",
          "413:         return 'awstest#GetAllCustomersResponse'",
          "415:     def __repr__(self):",
          "416:         attrs = []",
          "417:         for attr, val in self.__dict__.items():",
          "418:             if val is not None:",
          "419:                 attrs.append('%s=%r' % (attr, val))",
          "420:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "422:     def __eq__(self, other):",
          "423:         if isinstance(other, self.__class__):",
          "424:             return self.__dict__ == other.__dict__",
          "425:         return False",
          "428: class GetAllCustomersRequest(rpc.Shape):",
          "429:     \"\"\"",
          "430:     GetAllCustomersRequest",
          "431:     \"\"\"",
          "433:     def __init__(self):",
          "434:         super().__init__()",
          "436:     def _to_payload(self):",
          "437:         payload = {}",
          "438:         return payload",
          "440:     @classmethod",
          "441:     def _from_payload(cls, payload):",
          "442:         new = cls()",
          "443:         return new",
          "445:     @classmethod",
          "446:     def _model_name(cls):",
          "447:         return 'awstest#GetAllCustomersRequest'",
          "449:     def __repr__(self):",
          "450:         attrs = []",
          "451:         for attr, val in self.__dict__.items():",
          "452:             if val is not None:",
          "453:                 attrs.append('%s=%r' % (attr, val))",
          "454:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "456:     def __eq__(self, other):",
          "457:         if isinstance(other, self.__class__):",
          "458:             return self.__dict__ == other.__dict__",
          "459:         return False",
          "462: class EchoMessageResponse(rpc.Shape):",
          "463:     \"\"\"",
          "464:     EchoMessageResponse",
          "466:     All attributes are None by default, and may be set by keyword in the constructor.",
          "468:     Keyword Args:",
          "469:         message:",
          "471:     Attributes:",
          "472:         message:",
          "473:     \"\"\"",
          "475:     def __init__(self, *,",
          "476:                  message: typing.Optional[MessageData] = None):",
          "477:         super().__init__()",
          "478:         self.message = message  # type: typing.Optional[MessageData]",
          "480:     def _to_payload(self):",
          "481:         payload = {}",
          "482:         if self.message is not None:",
          "483:             payload['message'] = self.message._to_payload()",
          "484:         return payload",
          "486:     @classmethod",
          "487:     def _from_payload(cls, payload):",
          "488:         new = cls()",
          "489:         if 'message' in payload:",
          "490:             new.message = MessageData._from_payload(payload['message'])",
          "491:         return new",
          "493:     @classmethod",
          "494:     def _model_name(cls):",
          "495:         return 'awstest#EchoMessageResponse'",
          "497:     def __repr__(self):",
          "498:         attrs = []",
          "499:         for attr, val in self.__dict__.items():",
          "500:             if val is not None:",
          "501:                 attrs.append('%s=%r' % (attr, val))",
          "502:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "504:     def __eq__(self, other):",
          "505:         if isinstance(other, self.__class__):",
          "506:             return self.__dict__ == other.__dict__",
          "507:         return False",
          "510: class EchoMessageRequest(rpc.Shape):",
          "511:     \"\"\"",
          "512:     EchoMessageRequest",
          "514:     All attributes are None by default, and may be set by keyword in the constructor.",
          "516:     Keyword Args:",
          "517:         message:",
          "519:     Attributes:",
          "520:         message:",
          "521:     \"\"\"",
          "523:     def __init__(self, *,",
          "524:                  message: typing.Optional[MessageData] = None):",
          "525:         super().__init__()",
          "526:         self.message = message  # type: typing.Optional[MessageData]",
          "528:     def _to_payload(self):",
          "529:         payload = {}",
          "530:         if self.message is not None:",
          "531:             payload['message'] = self.message._to_payload()",
          "532:         return payload",
          "534:     @classmethod",
          "535:     def _from_payload(cls, payload):",
          "536:         new = cls()",
          "537:         if 'message' in payload:",
          "538:             new.message = MessageData._from_payload(payload['message'])",
          "539:         return new",
          "541:     @classmethod",
          "542:     def _model_name(cls):",
          "543:         return 'awstest#EchoMessageRequest'",
          "545:     def __repr__(self):",
          "546:         attrs = []",
          "547:         for attr, val in self.__dict__.items():",
          "548:             if val is not None:",
          "549:                 attrs.append('%s=%r' % (attr, val))",
          "550:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "552:     def __eq__(self, other):",
          "553:         if isinstance(other, self.__class__):",
          "554:             return self.__dict__ == other.__dict__",
          "555:         return False",
          "558: class EchoStreamingResponse(rpc.Shape):",
          "559:     \"\"\"",
          "560:     EchoStreamingResponse",
          "561:     \"\"\"",
          "563:     def __init__(self):",
          "564:         super().__init__()",
          "566:     def _to_payload(self):",
          "567:         payload = {}",
          "568:         return payload",
          "570:     @classmethod",
          "571:     def _from_payload(cls, payload):",
          "572:         new = cls()",
          "573:         return new",
          "575:     @classmethod",
          "576:     def _model_name(cls):",
          "577:         return 'awstest#EchoStreamingResponse'",
          "579:     def __repr__(self):",
          "580:         attrs = []",
          "581:         for attr, val in self.__dict__.items():",
          "582:             if val is not None:",
          "583:                 attrs.append('%s=%r' % (attr, val))",
          "584:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "586:     def __eq__(self, other):",
          "587:         if isinstance(other, self.__class__):",
          "588:             return self.__dict__ == other.__dict__",
          "589:         return False",
          "592: class EchoStreamingRequest(rpc.Shape):",
          "593:     \"\"\"",
          "594:     EchoStreamingRequest",
          "595:     \"\"\"",
          "597:     def __init__(self):",
          "598:         super().__init__()",
          "600:     def _to_payload(self):",
          "601:         payload = {}",
          "602:         return payload",
          "604:     @classmethod",
          "605:     def _from_payload(cls, payload):",
          "606:         new = cls()",
          "607:         return new",
          "609:     @classmethod",
          "610:     def _model_name(cls):",
          "611:         return 'awstest#EchoStreamingRequest'",
          "613:     def __repr__(self):",
          "614:         attrs = []",
          "615:         for attr, val in self.__dict__.items():",
          "616:             if val is not None:",
          "617:                 attrs.append('%s=%r' % (attr, val))",
          "618:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "620:     def __eq__(self, other):",
          "621:         if isinstance(other, self.__class__):",
          "622:             return self.__dict__ == other.__dict__",
          "623:         return False",
          "626: class CauseServiceErrorResponse(rpc.Shape):",
          "627:     \"\"\"",
          "628:     CauseServiceErrorResponse",
          "629:     \"\"\"",
          "631:     def __init__(self):",
          "632:         super().__init__()",
          "634:     def _to_payload(self):",
          "635:         payload = {}",
          "636:         return payload",
          "638:     @classmethod",
          "639:     def _from_payload(cls, payload):",
          "640:         new = cls()",
          "641:         return new",
          "643:     @classmethod",
          "644:     def _model_name(cls):",
          "645:         return 'awstest#CauseServiceErrorResponse'",
          "647:     def __repr__(self):",
          "648:         attrs = []",
          "649:         for attr, val in self.__dict__.items():",
          "650:             if val is not None:",
          "651:                 attrs.append('%s=%r' % (attr, val))",
          "652:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "654:     def __eq__(self, other):",
          "655:         if isinstance(other, self.__class__):",
          "656:             return self.__dict__ == other.__dict__",
          "657:         return False",
          "660: class CauseServiceErrorRequest(rpc.Shape):",
          "661:     \"\"\"",
          "662:     CauseServiceErrorRequest",
          "663:     \"\"\"",
          "665:     def __init__(self):",
          "666:         super().__init__()",
          "668:     def _to_payload(self):",
          "669:         payload = {}",
          "670:         return payload",
          "672:     @classmethod",
          "673:     def _from_payload(cls, payload):",
          "674:         new = cls()",
          "675:         return new",
          "677:     @classmethod",
          "678:     def _model_name(cls):",
          "679:         return 'awstest#CauseServiceErrorRequest'",
          "681:     def __repr__(self):",
          "682:         attrs = []",
          "683:         for attr, val in self.__dict__.items():",
          "684:             if val is not None:",
          "685:                 attrs.append('%s=%r' % (attr, val))",
          "686:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "688:     def __eq__(self, other):",
          "689:         if isinstance(other, self.__class__):",
          "690:             return self.__dict__ == other.__dict__",
          "691:         return False",
          "694: class ServiceError(EchoTestRPCError):",
          "695:     \"\"\"",
          "696:     ServiceError",
          "698:     All attributes are None by default, and may be set by keyword in the constructor.",
          "700:     Keyword Args:",
          "701:         message:",
          "702:         value:",
          "704:     Attributes:",
          "705:         message:",
          "706:         value:",
          "707:     \"\"\"",
          "709:     def __init__(self, *,",
          "710:                  message: typing.Optional[str] = None,",
          "711:                  value: typing.Optional[str] = None):",
          "712:         super().__init__()",
          "713:         self.message = message  # type: typing.Optional[str]",
          "714:         self.value = value  # type: typing.Optional[str]",
          "716:     def _get_error_type_string(self):",
          "717:         return 'server'",
          "719:     def _to_payload(self):",
          "720:         payload = {}",
          "721:         if self.message is not None:",
          "722:             payload['message'] = self.message",
          "723:         if self.value is not None:",
          "724:             payload['value'] = self.value",
          "725:         return payload",
          "727:     @classmethod",
          "728:     def _from_payload(cls, payload):",
          "729:         new = cls()",
          "730:         if 'message' in payload:",
          "731:             new.message = payload['message']",
          "732:         if 'value' in payload:",
          "733:             new.value = payload['value']",
          "734:         return new",
          "736:     @classmethod",
          "737:     def _model_name(cls):",
          "738:         return 'awstest#ServiceError'",
          "740:     def __repr__(self):",
          "741:         attrs = []",
          "742:         for attr, val in self.__dict__.items():",
          "743:             if val is not None:",
          "744:                 attrs.append('%s=%r' % (attr, val))",
          "745:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "747:     def __eq__(self, other):",
          "748:         if isinstance(other, self.__class__):",
          "749:             return self.__dict__ == other.__dict__",
          "750:         return False",
          "753: class GetAllProductsResponse(rpc.Shape):",
          "754:     \"\"\"",
          "755:     GetAllProductsResponse",
          "757:     All attributes are None by default, and may be set by keyword in the constructor.",
          "759:     Keyword Args:",
          "760:         products:",
          "762:     Attributes:",
          "763:         products:",
          "764:     \"\"\"",
          "766:     def __init__(self, *,",
          "767:                  products: typing.Optional[typing.Dict[str, Product]] = None):",
          "768:         super().__init__()",
          "769:         self.products = products  # type: typing.Optional[typing.Dict[str, Product]]",
          "771:     def _to_payload(self):",
          "772:         payload = {}",
          "773:         if self.products is not None:",
          "774:             payload['products'] = {k: v._to_payload() for k, v in self.products.items()}",
          "775:         return payload",
          "777:     @classmethod",
          "778:     def _from_payload(cls, payload):",
          "779:         new = cls()",
          "780:         if 'products' in payload:",
          "781:             new.products = {k: Product._from_payload(v) for k,v in payload['products'].items()}",
          "782:         return new",
          "784:     @classmethod",
          "785:     def _model_name(cls):",
          "786:         return 'awstest#GetAllProductsResponse'",
          "788:     def __repr__(self):",
          "789:         attrs = []",
          "790:         for attr, val in self.__dict__.items():",
          "791:             if val is not None:",
          "792:                 attrs.append('%s=%r' % (attr, val))",
          "793:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "795:     def __eq__(self, other):",
          "796:         if isinstance(other, self.__class__):",
          "797:             return self.__dict__ == other.__dict__",
          "798:         return False",
          "801: class GetAllProductsRequest(rpc.Shape):",
          "802:     \"\"\"",
          "803:     GetAllProductsRequest",
          "804:     \"\"\"",
          "806:     def __init__(self):",
          "807:         super().__init__()",
          "809:     def _to_payload(self):",
          "810:         payload = {}",
          "811:         return payload",
          "813:     @classmethod",
          "814:     def _from_payload(cls, payload):",
          "815:         new = cls()",
          "816:         return new",
          "818:     @classmethod",
          "819:     def _model_name(cls):",
          "820:         return 'awstest#GetAllProductsRequest'",
          "822:     def __repr__(self):",
          "823:         attrs = []",
          "824:         for attr, val in self.__dict__.items():",
          "825:             if val is not None:",
          "826:                 attrs.append('%s=%r' % (attr, val))",
          "827:         return '%s(%s)' % (self.__class__.__name__, ', '.join(attrs))",
          "829:     def __eq__(self, other):",
          "830:         if isinstance(other, self.__class__):",
          "831:             return self.__dict__ == other.__dict__",
          "832:         return False",
          "835: SHAPE_INDEX = rpc.ShapeIndex([",
          "836:     Customer,",
          "837:     Pair,",
          "838:     Product,",
          "839:     MessageData,",
          "840:     GetAllCustomersResponse,",
          "841:     GetAllCustomersRequest,",
          "842:     EchoMessageResponse,",
          "843:     EchoMessageRequest,",
          "844:     EchoStreamingResponse,",
          "845:     EchoStreamingRequest,",
          "846:     CauseServiceErrorResponse,",
          "847:     CauseServiceErrorRequest,",
          "848:     ServiceError,",
          "849:     GetAllProductsResponse,",
          "850:     GetAllProductsRequest,",
          "851: ])",
          "854: class _GetAllProductsOperation(rpc.ClientOperation):",
          "855:     @classmethod",
          "856:     def _model_name(cls):",
          "857:         return 'awstest#GetAllProducts'",
          "859:     @classmethod",
          "860:     def _request_type(cls):",
          "861:         return GetAllProductsRequest",
          "863:     @classmethod",
          "864:     def _request_stream_type(cls):",
          "865:         return None",
          "867:     @classmethod",
          "868:     def _response_type(cls):",
          "869:         return GetAllProductsResponse",
          "871:     @classmethod",
          "872:     def _response_stream_type(cls):",
          "873:         return None",
          "876: class _CauseServiceErrorOperation(rpc.ClientOperation):",
          "877:     @classmethod",
          "878:     def _model_name(cls):",
          "879:         return 'awstest#CauseServiceError'",
          "881:     @classmethod",
          "882:     def _request_type(cls):",
          "883:         return CauseServiceErrorRequest",
          "885:     @classmethod",
          "886:     def _request_stream_type(cls):",
          "887:         return None",
          "889:     @classmethod",
          "890:     def _response_type(cls):",
          "891:         return CauseServiceErrorResponse",
          "893:     @classmethod",
          "894:     def _response_stream_type(cls):",
          "895:         return None",
          "898: class _CauseStreamServiceToErrorOperation(rpc.ClientOperation):",
          "899:     @classmethod",
          "900:     def _model_name(cls):",
          "901:         return 'awstest#CauseStreamServiceToError'",
          "903:     @classmethod",
          "904:     def _request_type(cls):",
          "905:         return EchoStreamingRequest",
          "907:     @classmethod",
          "908:     def _request_stream_type(cls):",
          "909:         return EchoStreamingMessage",
          "911:     @classmethod",
          "912:     def _response_type(cls):",
          "913:         return EchoStreamingResponse",
          "915:     @classmethod",
          "916:     def _response_stream_type(cls):",
          "917:         return EchoStreamingMessage",
          "920: class _EchoStreamMessagesOperation(rpc.ClientOperation):",
          "921:     @classmethod",
          "922:     def _model_name(cls):",
          "923:         return 'awstest#EchoStreamMessages'",
          "925:     @classmethod",
          "926:     def _request_type(cls):",
          "927:         return EchoStreamingRequest",
          "929:     @classmethod",
          "930:     def _request_stream_type(cls):",
          "931:         return EchoStreamingMessage",
          "933:     @classmethod",
          "934:     def _response_type(cls):",
          "935:         return EchoStreamingResponse",
          "937:     @classmethod",
          "938:     def _response_stream_type(cls):",
          "939:         return EchoStreamingMessage",
          "942: class _EchoMessageOperation(rpc.ClientOperation):",
          "943:     @classmethod",
          "944:     def _model_name(cls):",
          "945:         return 'awstest#EchoMessage'",
          "947:     @classmethod",
          "948:     def _request_type(cls):",
          "949:         return EchoMessageRequest",
          "951:     @classmethod",
          "952:     def _request_stream_type(cls):",
          "953:         return None",
          "955:     @classmethod",
          "956:     def _response_type(cls):",
          "957:         return EchoMessageResponse",
          "959:     @classmethod",
          "960:     def _response_stream_type(cls):",
          "961:         return None",
          "964: class _GetAllCustomersOperation(rpc.ClientOperation):",
          "965:     @classmethod",
          "966:     def _model_name(cls):",
          "967:         return 'awstest#GetAllCustomers'",
          "969:     @classmethod",
          "970:     def _request_type(cls):",
          "971:         return GetAllCustomersRequest",
          "973:     @classmethod",
          "974:     def _request_stream_type(cls):",
          "975:         return None",
          "977:     @classmethod",
          "978:     def _response_type(cls):",
          "979:         return GetAllCustomersResponse",
          "981:     @classmethod",
          "982:     def _response_stream_type(cls):",
          "983:         return None",
          "",
          "---------------"
        ],
        "test/test_rpc.py||test/test_rpc.py": [
          "File: test/test_rpc.py -> test/test_rpc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import test.echotestrpc.model as model",
          "2: import test.echotestrpc.client as client",
          "3: from awsiot.eventstreamrpc import (Connection, Header, LifecycleHandler,",
          "4:                                    MessageAmendment, SerializeError, StreamResponseHandler)",
          "5: from awscrt.io import (ClientBootstrap, DefaultHostResolver, EventLoopGroup,",
          "6:                        init_logging, LogLevel)",
          "7: from datetime import datetime, timezone",
          "8: import logging",
          "9: import os",
          "10: from queue import Queue",
          "11: from sys import stderr",
          "12: from threading import Event",
          "13: from typing import Optional, Sequence",
          "14: from unittest import skipUnless, TestCase",
          "16: import awsiot.greengrasscoreipc.client",
          "18: TIMEOUT = 10",
          "20: #logging.basicConfig(level=logging.DEBUG, format='[%(levelname)s] [%(name)s] - %(message)s')",
          "21: #init_logging(LogLevel.Trace, 'stderr')",
          "23: EVENTSTREAM_ECHO_TEST = os.getenv('EVENTSTREAM_ECHO_TEST')",
          "26: class ConnectionLifecycleHandler(LifecycleHandler):",
          "27:     def __init__(self, on_freakout):",
          "28:         self.connect_event = Event()",
          "29:         self.disconnect_event = Event()",
          "30:         self.disconnect_reason = None",
          "31:         self.errors = Queue()",
          "32:         self.pings = Queue()",
          "33:         # if something happens out of order, call this",
          "34:         self._freakout = on_freakout",
          "36:     def on_connect(self):",
          "37:         if self.disconnect_event.isSet():",
          "38:             self._freakout(\"on_disconnect fired before on_connect()\")",
          "39:         if self.connect_event.isSet():",
          "40:             self._freakout(\"on_connect fired multiple times\")",
          "41:         else:",
          "42:             self.connect_event.set()",
          "44:     def on_disconnect(self, reason: Optional[Exception]):",
          "45:         if not self.connect_event.isSet():",
          "46:             self._freakout(\"on_disconnect fired before on_connect\")",
          "47:         if self.disconnect_event.isSet():",
          "48:             self._freakout(\"on_disconnect fired multiple times\")",
          "49:         else:",
          "50:             if reason is not None and not isinstance(reason, Exception):",
          "51:                 self._freakout(\"on_disconnect reason is not an exception\")",
          "52:             self.disconnect_reason = reason",
          "53:             self.disconnect_event.set()",
          "55:     def on_error(self, error: Exception) -> bool:",
          "56:         self.errors.put(error)",
          "58:     def on_ping(self, headers: Sequence[Header], payload: bytes):",
          "59:         self.pings.put({'headers': headers, 'payload': payload})",
          "62: class StreamHandler(StreamResponseHandler):",
          "63:     def __init__(self, on_freakout):",
          "64:         super().__init__()",
          "65:         self.events = Queue()",
          "66:         self.errors = Queue()",
          "67:         self.closed = Event()",
          "68:         self.error_callback_return_val = True",
          "69:         # set this before activating operation",
          "70:         self.operation = None",
          "71:         # if something happens out of order, call this",
          "72:         self._freakout = on_freakout",
          "74:     def on_stream_event(self, event):",
          "75:         if not self.operation.get_response().done():",
          "76:             self._freakout(\"received event before initial response\")",
          "77:         if self.closed.is_set():",
          "78:             self._freakout(\"received event after close\")",
          "79:         self.events.put(event)",
          "81:     def on_stream_error(self, error: Exception) -> bool:",
          "82:         if not self.operation.get_response().done():",
          "83:             self._freakout(\"received event before initial response\")",
          "84:         if self.closed.is_set():",
          "85:             self._freakout(\"received event after close\")",
          "86:         if not isinstance(error, Exception):",
          "87:             self._freakout(\"on_stream_error delivered non-error\")",
          "88:         self.errors.put(error)",
          "89:         return self.error_callback_return_val",
          "91:     def on_stream_closed(self):",
          "92:         if self.closed.is_set():",
          "93:             self._freakout(\"received closed event twice\")",
          "94:         self.closed.set()",
          "97: def connect_amender():",
          "98:     headers = [Header.from_string('client-name', 'accepted.testy_mc_testerson')]",
          "99:     return MessageAmendment(headers=headers)",
          "102: def bad_connect_amender():",
          "103:     headers = [Header.from_string('client-name', 'rejected.testy_mc_failureson')]",
          "104:     return MessageAmendment(headers=headers)",
          "107: @skipUnless(EVENTSTREAM_ECHO_TEST, \"Skipping until we have permanent echo server\")",
          "108: class RpcTest(TestCase):",
          "109:     def _on_handler_freakout(self, msg):",
          "110:         print(msg, file=stderr)",
          "111:         if not hasattr(self, 'freakout_msg'):",
          "112:             self.freakout_msg = msg",
          "114:     def _assertNoHandlerFreakout(self):",
          "115:         self.assertIsNone(getattr(self, 'freakout_msg', None))",
          "117:     def _connect(self):",
          "118:         elg = EventLoopGroup()",
          "119:         resolver = DefaultHostResolver(elg)",
          "120:         bootstrap = ClientBootstrap(elg, resolver)",
          "121:         self.connection = Connection(",
          "122:             host_name='127.0.0.1',",
          "123:             port=8033,",
          "124:             bootstrap=bootstrap,",
          "125:             connect_message_amender=connect_amender)",
          "126:         self.lifecycle_handler = ConnectionLifecycleHandler(self._on_handler_freakout)",
          "127:         connect_future = self.connection.connect(self.lifecycle_handler)",
          "128:         connect_future.result(TIMEOUT)",
          "130:         self.echo_client = client.EchoTestRPCClient(self.connection)",
          "132:     def _bad_connect(self, bad_host=False, bad_client_name=False):",
          "133:         elg = EventLoopGroup()",
          "134:         resolver = DefaultHostResolver(elg)",
          "135:         bootstrap = ClientBootstrap(elg, resolver)",
          "136:         host_name = 'badhostname' if bad_host else '127.0.0.1'",
          "137:         amender = bad_connect_amender if bad_client_name else connect_amender",
          "138:         self.connection = Connection(",
          "139:             host_name=host_name,",
          "140:             port=8033,",
          "141:             bootstrap=bootstrap,",
          "142:             connect_message_amender=amender)",
          "143:         self.lifecycle_handler = ConnectionLifecycleHandler(self._on_handler_freakout)",
          "144:         connect_future = self.connection.connect(self.lifecycle_handler)",
          "145:         connect_exception = connect_future.exception(TIMEOUT)",
          "147:         # connect attempt should fail",
          "148:         self.assertIsNotNone(connect_exception)",
          "150:         # no lifecycle events should have fired",
          "151:         self.assertFalse(self.lifecycle_handler.connect_event.isSet())",
          "152:         self.assertFalse(self.lifecycle_handler.disconnect_event.isSet())",
          "153:         self.assertTrue(self.lifecycle_handler.errors.empty())",
          "155:         self._assertNoHandlerFreakout()",
          "157:     def test_connect_failed_socket(self):",
          "158:         # test failure from the CONNECTING_TO_SOCKET phase",
          "159:         self._bad_connect(bad_host=True)",
          "161:     def test_connect_failed_connack(self):",
          "162:         # test failure from the WAITING_FOR_CONNECT_ACK phse",
          "163:         self._bad_connect(bad_client_name=True)",
          "165:     def test_echo_message(self):",
          "166:         self._connect()",
          "168:         operation = self.echo_client.new_echo_message()",
          "170:         request = model.EchoMessageRequest(message=model.MessageData())",
          "171:         request.message.string_message = '\ud83d\udc41\ud83d\udc44\ud83d\udc41'",
          "172:         request.message.boolean_message = True",
          "173:         # hand-picked timestamp shouldn't lose precision when serialized to",
          "174:         # json as floating point. also setting timezone to UTC because",
          "175:         # response timezone will always be UTC",
          "176:         request.message.time_message = datetime.fromtimestamp(946684800, tz=timezone.utc)",
          "177:         request.message.document_message = {",
          "178:             'inty': 4,",
          "179:             'floaty': 4.0,",
          "180:             'listy': [1, \"two\", 3.0, False, True, {}, None],",
          "181:             'dicty': {'a': [1, 2, 3, {'e': 9}], 'b': None},",
          "182:             'stringy': \"qwer\",",
          "183:             'booly_t': True,",
          "184:             'booly_f': False,",
          "185:             'nully': None,",
          "186:         }",
          "187:         request.message.enum_message = model.FruitEnum.BANANA",
          "188:         request.message.blob_message = bytes(list(range(256)))",
          "189:         request.message.string_list_message = ['one', 'two', 'three']",
          "190:         request.message.key_value_pair_list = [",
          "191:             model.Pair(key='key1', value='value1'),",
          "192:             model.Pair(key='key1', value='value1')]",
          "194:         request_flush = operation.activate(request)",
          "195:         self.assertIsNone(request_flush.result(TIMEOUT))",
          "197:         response = operation.get_response().result(TIMEOUT)",
          "199:         self.assertIsInstance(response, model.EchoMessageResponse)",
          "200:         self.assertIsInstance(response.message, model.MessageData)",
          "201:         # explicit tests for each member so it's clear exactly what went wrong",
          "202:         self.assertEqual(request.message.string_message, response.message.string_message)",
          "203:         self.assertEqual(request.message.boolean_message, response.message.boolean_message)",
          "204:         self.assertEqual(request.message.document_message, response.message.document_message)",
          "205:         self.assertEqual(request.message.enum_message, response.message.enum_message)",
          "206:         self.assertEqual(request.message.blob_message, response.message.blob_message)",
          "207:         self.assertEqual(request.message.string_list_message, response.message.string_list_message)",
          "208:         self.assertEqual(request.message.key_value_pair_list, response.message.key_value_pair_list)",
          "209:         self.assertIsInstance(response.message.time_message, datetime)",
          "210:         self.assertAlmostEqual(request.message.time_message.timestamp(), response.message.time_message.timestamp())",
          "212:         # ok now compare a whole class",
          "213:         # if this fails, it's likely due to the datetime losing precision",
          "214:         # and timezone info due to datetime->timestamp->datetime conversion",
          "215:         self.assertEqual(request.message, response.message)",
          "217:         # must close connection",
          "218:         close_future = self.connection.close()",
          "219:         self.assertIsNone(close_future.exception(TIMEOUT))",
          "221:         self._assertNoHandlerFreakout()",
          "223:     def test_bad_activate(self):",
          "224:         self._connect()",
          "226:         operation = self.echo_client.new_echo_message()",
          "228:         bad_request = model.EchoMessageRequest()",
          "229:         bad_request.message = \".message is not supposed to be a string\"",
          "231:         with self.assertRaises(SerializeError):",
          "232:             operation.activate(bad_request)",
          "234:         # must close connection",
          "235:         close_future = self.connection.close()",
          "236:         self.assertIsNone(close_future.exception(TIMEOUT))",
          "238:         self._assertNoHandlerFreakout()",
          "240:     def test_echo_streaming_message(self):",
          "241:         self._connect()",
          "243:         handler = StreamHandler(self._on_handler_freakout)",
          "244:         operation = self.echo_client.new_echo_stream_messages(handler)",
          "245:         handler.operation = operation",
          "247:         # send initial request",
          "248:         flush = operation.activate(model.EchoStreamingRequest())",
          "249:         flush.result(TIMEOUT)",
          "251:         # send streaming request",
          "252:         request_event = model.EchoStreamingMessage(key_value_pair=model.Pair(key='Kiki', value='Valerie'))",
          "253:         flush = operation.send_stream_event(request_event)",
          "254:         flush.result(TIMEOUT)",
          "256:         # recv streaming response",
          "257:         response_event = handler.events.get(timeout=TIMEOUT)",
          "258:         self.assertEqual(request_event, response_event)",
          "260:         # must close connection",
          "261:         close_future = self.connection.close()",
          "262:         self.assertIsNone(close_future.exception(TIMEOUT))",
          "263:         self.assertTrue(handler.closed.is_set())",
          "265:         # make sure nothing went wrong that we didn't expect to go wrong",
          "266:         self.assertTrue(handler.errors.empty())",
          "267:         self._assertNoHandlerFreakout()",
          "269:     def test_cause_service_error(self):",
          "270:         # test the CauseServiceError operation,",
          "271:         # which always responds with a ServiceError",
          "272:         # and then terminates the connection",
          "273:         self._connect()",
          "275:         operation = self.echo_client.new_cause_service_error()",
          "277:         # send initial request",
          "278:         operation.activate(model.CauseServiceErrorRequest())",
          "280:         # get response",
          "281:         response_exception = operation.get_response().exception(TIMEOUT)",
          "282:         self.assertIsInstance(response_exception, model.ServiceError)",
          "284:         # close connection",
          "285:         close_future = self.connection.close()",
          "286:         self.assertIsNone(close_future.exception(TIMEOUT))",
          "287:         self._assertNoHandlerFreakout()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15a25be7d18ab61543a7937828bc9592e3c44493",
      "candidate_info": {
        "commit_hash": "15a25be7d18ab61543a7937828bc9592e3c44493",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/15a25be7d18ab61543a7937828bc9592e3c44493",
        "files": [
          "setup.py"
        ],
        "message": "update awscrt to 0.8.0 (#100)\n\n-    API CHANGE: awscrt.auth.AwsSigningConfig.signed_body_value is now a string instead of an enum.\n -   API CHANGE: Added check for iOS platform\n -   BUGFIX: websocket no longer hangs if CLOSE frame cannot be sent.\n  -  BUGFIX: Fixes a crash when shutting down an mqtt connection with an incomplete request with no callback from aws-c-mqtt\n\n\nCo-authored-by: Dengke Tang <dengket@amazon.com>",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "14:     packages = ['awsiot'],",
          "15:     install_requires=[",
          "17:         'futures;python_version<\"3.2\"',",
          "18:         'typing;python_version<\"3.5\"',",
          "19:     ],",
          "",
          "[Removed Lines]",
          "16:         'awscrt==0.6.2',",
          "",
          "[Added Lines]",
          "16:         'awscrt==0.8.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d2ffaaa57ce07be2b5d9260add6b0724e64a183",
      "candidate_info": {
        "commit_hash": "5d2ffaaa57ce07be2b5d9260add6b0724e64a183",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5d2ffaaa57ce07be2b5d9260add6b0724e64a183",
        "files": [
          "awsiot/eventstreamrpc.py",
          "setup.py"
        ],
        "message": "Fix memory leaks in greengrasscoreipc (#186)\n\n- Update awscrt to fix leaking headers\n- Break circular references in evenstreamrpc so garbage collector can clean them up",
        "before_after_code_files": [
          "awsiot/eventstreamrpc.py||awsiot/eventstreamrpc.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/eventstreamrpc.py||awsiot/eventstreamrpc.py": [
          "File: awsiot/eventstreamrpc.py -> awsiot/eventstreamrpc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         self._closed_future.set_running_or_notify_cancel()  # prevent cancel",
          "612:         self._initial_response_future = Future()",
          "613:         self._initial_response_future.set_running_or_notify_cancel()  # prevent cancel",
          "617:     def _activate(self, request: Shape) -> Future:",
          "618:         headers = [Header.from_string(CONTENT_TYPE_HEADER,",
          "",
          "[Removed Lines]",
          "614:         self._protocol_handler = _ProtocolContinuationHandler(self)",
          "615:         self._continuation = connection._new_stream(self._protocol_handler)",
          "",
          "[Added Lines]",
          "614:         protocol_handler = _ProtocolContinuationHandler(self)",
          "615:         self._continuation = connection._new_stream(protocol_handler)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "806:     def on_continuation_closed(self, *args, **kwargs):",
          "807:         self.operation._on_continuation_closed(*args, **kwargs)",
          "810: class Client:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:         # break circular reference between: ClientOperation, _ProtocolContinuationHandler, ClientContinuation",
          "809:         # so that garbage collector can clean them up",
          "810:         self.operation = None",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.8',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.12',",
          "",
          "---------------"
        ]
      }
    }
  ]
}