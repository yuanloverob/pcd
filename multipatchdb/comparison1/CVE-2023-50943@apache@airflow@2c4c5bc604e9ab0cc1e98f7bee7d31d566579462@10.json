{
  "cve_id": "CVE-2023-50943",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
  "patch_info": {
    "commit_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "files": [
      "airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py"
    ],
    "message": "Stop deserializing pickle when enable_xcom_pickling is False (#36255)\n\n* Stop deserializing pickle when enable_xcom_pickling is False\n\n* Fix unit tests\n\n(cherry picked from commit 63e97abec5d56bc62a293c93f5227f364561e51c)",
    "before_after_code_files": [
      "airflow/models/xcom.py||airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py||tests/models/test_xcom.py"
    ]
  },
  "patch_diff": {
    "airflow/models/xcom.py||airflow/models/xcom.py": [
      "File: airflow/models/xcom.py -> airflow/models/xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "685:             except pickle.UnpicklingError:",
      "686:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "687:         else:",
      "693:     @staticmethod",
      "694:     def deserialize_value(result: XCom) -> Any:",
      "",
      "[Removed Lines]",
      "688:             try:",
      "689:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "690:             except (json.JSONDecodeError, UnicodeDecodeError):",
      "691:                 return pickle.loads(result.value)",
      "",
      "[Added Lines]",
      "688:             # Since xcom_pickling is disabled, we should only try to deserialize with JSON",
      "689:             return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "",
      "---------------"
    ],
    "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py": [
      "File: tests/api_connexion/schemas/test_xcom_schema.py -> tests/api_connexion/schemas/test_xcom_schema.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from airflow.models import DagRun, XCom",
      "31: from airflow.utils.dates import parse_execution_date",
      "32: from airflow.utils.session import create_session",
      "34: pytestmark = pytest.mark.db_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     default_time = \"2016-04-02T21:00:00+00:00\"",
      "189:     default_time_parsed = parse_execution_date(default_time)",
      "191:     def test_serialize(self, create_xcom, session):",
      "192:         create_xcom(",
      "193:             dag_id=\"test_dag\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208:             \"map_index\": -1,",
      "209:         }",
      "211:     def test_deserialize(self):",
      "212:         xcom_dump = {",
      "213:             \"key\": \"test_key\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------"
    ],
    "tests/models/test_xcom.py||tests/models/test_xcom.py": [
      "File: tests/models/test_xcom.py -> tests/models/test_xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:             ret_value = XCom.get_value(key=\"xcom_test3\", ti_key=ti_key, session=session)",
      "141:         assert ret_value == {\"key\": \"value\"}",
      "144:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"}):",
      "145:             XCom.set(",
      "146:                 key=\"xcom_test3\",",
      "",
      "[Removed Lines]",
      "143:     def test_xcom_deserialize_with_pickle_to_json_switch(self, task_instance, session):",
      "",
      "[Added Lines]",
      "143:     def test_xcom_deserialize_pickle_when_xcom_pickling_is_disabled(self, task_instance, session):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:                 session=session,",
      "152:             )",
      "153:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"False\"}):",
      "163:     @conf_vars({(\"core\", \"xcom_enable_pickling\"): \"False\"})",
      "164:     def test_xcom_disable_pickle_type_fail_on_non_json(self, task_instance, session):",
      "",
      "[Removed Lines]",
      "154:             ret_value = XCom.get_one(",
      "155:                 key=\"xcom_test3\",",
      "156:                 dag_id=task_instance.dag_id,",
      "157:                 task_id=task_instance.task_id,",
      "158:                 run_id=task_instance.run_id,",
      "159:                 session=session,",
      "160:             )",
      "161:         assert ret_value == {\"key\": \"value\"}",
      "",
      "[Added Lines]",
      "154:             with pytest.raises(UnicodeDecodeError):",
      "155:                 XCom.get_one(",
      "156:                     key=\"xcom_test3\",",
      "157:                     dag_id=task_instance.dag_id,",
      "158:                     task_id=task_instance.task_id,",
      "159:                     run_id=task_instance.run_id,",
      "160:                     session=session,",
      "161:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4535686a9801f77cdfad7221e95315a657fa5153",
      "candidate_info": {
        "commit_hash": "4535686a9801f77cdfad7221e95315a657fa5153",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4535686a9801f77cdfad7221e95315a657fa5153",
        "files": [
          "airflow/hooks/filesystem.py"
        ],
        "message": "Follow BaseHook connection fields method signature in FSHook (#36444)\n\n(cherry picked from commit f5e5027e1c342237758424d7af50787a33329509)",
        "before_after_code_files": [
          "airflow/hooks/filesystem.py||airflow/hooks/filesystem.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/hooks/filesystem.py||airflow/hooks/filesystem.py": [
          "File: airflow/hooks/filesystem.py -> airflow/hooks/filesystem.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     conn_type = \"fs\"",
          "42:     hook_name = \"File (path)\"",
          "46:         \"\"\"Return connection widgets to add to connection form.\"\"\"",
          "47:         from flask_appbuilder.fieldwidgets import BS3TextFieldWidget",
          "48:         from flask_babel import lazy_gettext",
          "",
          "[Removed Lines]",
          "44:     @staticmethod",
          "45:     def get_connection_form_widgets() -> dict[str, Any]:",
          "",
          "[Added Lines]",
          "44:     @classmethod",
          "45:     def get_connection_form_widgets(cls) -> dict[str, Any]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         return {\"path\": StringField(lazy_gettext(\"Path\"), widget=BS3TextFieldWidget())}",
          "55:         \"\"\"Return custom field behaviour.\"\"\"",
          "56:         return {",
          "57:             \"hidden_fields\": [\"host\", \"schema\", \"port\", \"login\", \"password\", \"extra\"],",
          "",
          "[Removed Lines]",
          "53:     @staticmethod",
          "54:     def get_ui_field_behaviour() -> dict[str, Any]:",
          "",
          "[Added Lines]",
          "53:     @classmethod",
          "54:     def get_ui_field_behaviour(cls) -> dict[str, Any]:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "874227c2cf8b61dfc3d7d4a91d5441411404266c",
      "candidate_info": {
        "commit_hash": "874227c2cf8b61dfc3d7d4a91d5441411404266c",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/874227c2cf8b61dfc3d7d4a91d5441411404266c",
        "files": [
          "airflow/providers/amazon/provider.yaml",
          "airflow/providers/apache/hive/provider.yaml",
          "airflow/providers/common/sql/provider.yaml",
          "airflow/providers/exasol/provider.yaml",
          "airflow/providers/google/provider.yaml",
          "airflow/providers/presto/provider.yaml",
          "airflow/providers/salesforce/provider.yaml",
          "airflow/providers/trino/provider.yaml",
          "airflow/providers/weaviate/provider.yaml",
          "generated/provider_dependencies.json",
          "setup.py"
        ],
        "message": "Set min pandas dependency to 1.2.5 for all providers and airflow (#36698)\n\nWe had some REALLY old minimum version of Pandas set for all our\npandas dependency - Pandas 0.17.1 has been released in 2015 (!)\n\nLooking at the dependency tree - most of our dependencies had\n> 1.2.5 set - which is more than reasonable limit as Pandas 1.2.5\nhad been released in June 2021 - so more than 2.5 years ago.\n\nThis limit bump further helps us to limit the pip backtracking\nthat starts happening in certain situations.\n\nExtracted from: #36537\n\n(cherry picked from commit ecb2c9f24d1364642604c14f0deb681ab4894135)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "348: leveldb = [\"plyvel\"]",
          "349: otel = [\"opentelemetry-exporter-prometheus\"]",
          "350: pandas = [",
          "352: ]",
          "353: password = [",
          "354:     \"bcrypt>=2.0.0\",",
          "",
          "[Removed Lines]",
          "351:     \"pandas>=0.17.1\",",
          "",
          "[Added Lines]",
          "351:     \"pandas>=1.2.5\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c836c4c6f7be5880700aa1df3a3439052c76dbb3",
      "candidate_info": {
        "commit_hash": "c836c4c6f7be5880700aa1df3a3439052c76dbb3",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/c836c4c6f7be5880700aa1df3a3439052c76dbb3",
        "files": [
          ".pre-commit-config.yaml",
          "STATIC_CODE_CHECKS.rst",
          "TESTING.rst",
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "images/breeze/output_static-checks.svg",
          "images/breeze/output_static-checks.txt",
          "scripts/ci/docker-compose/integration-cassandra.yml",
          "scripts/ci/docker-compose/integration-celery.yml",
          "scripts/ci/docker-compose/integration-kafka.yml",
          "scripts/ci/docker-compose/integration-kerberos.yml",
          "scripts/ci/docker-compose/integration-mongo.yml",
          "scripts/ci/docker-compose/integration-openlineage.yml",
          "scripts/ci/docker-compose/integration-otel.yml",
          "scripts/ci/docker-compose/integration-pinot.yml",
          "scripts/ci/docker-compose/integration-statsd.yml",
          "scripts/ci/docker-compose/integration-trino.yml",
          "scripts/ci/pre_commit/pre_commit_check_integrations_list.py"
        ],
        "message": "Add pre-commit check to check integrations table. (#36497)\n\n(cherry picked from commit 9d1eba087b488d473f8e3a3b12df63d83c7364e8)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "scripts/ci/pre_commit/pre_commit_check_integrations_list.py||scripts/ci/pre_commit/pre_commit_check_integrations_list.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py": [
          "File: dev/breeze/src/airflow_breeze/pre_commit_ids.py -> dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     \"check-hooks-apply\",",
          "55:     \"check-incorrect-use-of-LoggingMixin\",",
          "56:     \"check-init-decorator-arguments\",",
          "57:     \"check-lazy-logging\",",
          "58:     \"check-links-to-example-dags-do-not-use-hardcoded-versions\",",
          "59:     \"check-merge-conflict\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     \"check-integrations-list-consistent\",",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/pre_commit_check_integrations_list.py||scripts/ci/pre_commit/pre_commit_check_integrations_list.py": [
          "File: scripts/ci/pre_commit/pre_commit_check_integrations_list.py -> scripts/ci/pre_commit/pre_commit_check_integrations_list.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: #",
          "3: # Licensed to the Apache Software Foundation (ASF) under one",
          "4: # or more contributor license agreements.  See the NOTICE file",
          "5: # distributed with this work for additional information",
          "6: # regarding copyright ownership.  The ASF licenses this file",
          "7: # to you under the Apache License, Version 2.0 (the",
          "8: # \"License\"); you may not use this file except in compliance",
          "9: # with the License.  You may obtain a copy of the License at",
          "10: #",
          "11: #   http://www.apache.org/licenses/LICENSE-2.0",
          "12: #",
          "13: # Unless required by applicable law or agreed to in writing,",
          "14: # software distributed under the License is distributed on an",
          "15: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "16: # KIND, either express or implied.  See the License for the",
          "17: # specific language governing permissions and limitations",
          "18: # under the License.",
          "19: \"\"\"",
          "20: Module to check integration tests are listed in documentation.",
          "22: Compare the contents of the integrations table and the docker-compose",
          "23: integration files, if there is a mismatch, the table is generated.",
          "24: \"\"\"",
          "25: from __future__ import annotations",
          "27: import re",
          "28: import sys",
          "29: from pathlib import Path",
          "30: from typing import Any",
          "32: import yaml",
          "34: # make sure common_precommit_utils is imported",
          "35: sys.path.insert(0, str(Path(__file__).parent.resolve()))",
          "36: from common_precommit_utils import (",
          "37:     AIRFLOW_SOURCES_ROOT_PATH,",
          "38:     console,",
          "39:     insert_documentation,",
          "40: )",
          "41: from tabulate import tabulate",
          "43: DOCUMENTATION_PATH = AIRFLOW_SOURCES_ROOT_PATH / \"TESTING.rst\"",
          "44: INTEGRATION_TESTS_PATH = AIRFLOW_SOURCES_ROOT_PATH / \"scripts\" / \"ci\" / \"docker-compose\"",
          "45: INTEGRATION_TEST_PREFIX = \"integration-*.yml\"",
          "46: DOCS_MARKER_START = \".. BEGIN AUTO-GENERATED INTEGRATION LIST\"",
          "47: DOCS_MARKER_END = \".. END AUTO-GENERATED INTEGRATION LIST\"",
          "48: _LIST_MATCH = r\"\\|[^|\\n]+\"",
          "51: def get_ci_integrations(",
          "52:     tests_path: Path = INTEGRATION_TESTS_PATH,",
          "53:     integration_prefix: str = INTEGRATION_TEST_PREFIX,",
          "54: ) -> dict[str, Path]:",
          "55:     \"\"\"Get list of integrations from matching filenames.\"\"\"",
          "56:     if not tests_path.is_dir() and tests_path.exists():",
          "57:         console.print(f\"[red]Bad tests path: {tests_path}. [/]\")",
          "58:         sys.exit(1)",
          "60:     integrations_files = [_i for _i in tests_path.glob(integration_prefix)]",
          "62:     if len(integrations_files) == 0:",
          "63:         console.print(",
          "64:             f\"[red]No integrations found.\"",
          "65:             f\"Pattern '{integration_prefix}' did not match any files under {tests_path}. [/]\"",
          "66:         )",
          "67:         sys.exit(1)",
          "69:     # parse into list of ids",
          "70:     integrations = {}",
          "71:     for _i in integrations_files:",
          "72:         try:",
          "73:             _key = _i.stem.split(\"-\")[1]",
          "74:             integrations[_key] = _i",
          "75:         except IndexError:",
          "76:             console.print(f\"[red]Tried to parse {_i.stem}, but did not contain '-' separator. [/]\")",
          "77:             continue",
          "79:     return integrations",
          "82: def get_docs_integrations(docs_path: Path = DOCUMENTATION_PATH):",
          "83:     \"\"\"Get integrations listed in docs.\"\"\"",
          "84:     table_lines = []",
          "85:     _list_start_line = None",
          "86:     with open(docs_path, encoding=\"utf8\") as f:",
          "87:         for line_n, line in enumerate(f):",
          "88:             if DOCS_MARKER_END in line:",
          "89:                 break",
          "90:             if DOCS_MARKER_START in line:",
          "91:                 _list_start_line = line_n",
          "92:             if _list_start_line is None:",
          "93:                 continue",
          "94:             if line_n > _list_start_line:",
          "95:                 table_lines.append(line)",
          "97:     if len(table_lines) == 0:",
          "98:         console.print(\"[red]No integrations table in docs.[/]\")",
          "99:         sys.exit(1)",
          "101:     table_cells = []",
          "102:     for line in table_lines:",
          "103:         m = re.findall(_LIST_MATCH, line)",
          "104:         if len(m) == 0:",
          "105:             continue",
          "106:         table_cells.append(m[0].strip(\"|\").strip())",
          "108:     def _list_matcher(j):",
          "109:         \"\"\"Filter callable to exclude header and empty cells.\"\"\"",
          "110:         if len(j) == 0:",
          "111:             return False",
          "112:         elif j in [\"Description\", \"Identifier\"]:",
          "113:             return False",
          "114:         else:",
          "115:             return True",
          "117:     table_cells = list(filter(_list_matcher, table_cells))",
          "118:     return table_cells",
          "121: def update_integration_tests_array(contents: dict[str, list[str]]):",
          "122:     \"\"\"Generate docs table.\"\"\"",
          "123:     rows = []",
          "124:     sorted_contents = dict(sorted(contents.items()))",
          "125:     for integration, description in sorted_contents.items():",
          "126:         formatted_hook_description = (",
          "127:             description[0] if len(description) == 1 else \"* \" + \"\\n* \".join(description)",
          "128:         )",
          "129:         rows.append((integration, formatted_hook_description))",
          "130:     formatted_table = \"\\n\" + tabulate(rows, tablefmt=\"grid\", headers=(\"Identifier\", \"Description\")) + \"\\n\\n\"",
          "131:     insert_documentation(",
          "132:         file_path=AIRFLOW_SOURCES_ROOT_PATH / \"TESTING.rst\",",
          "133:         content=formatted_table.splitlines(keepends=True),",
          "134:         header=DOCS_MARKER_START,",
          "135:         footer=DOCS_MARKER_END,",
          "136:     )",
          "139: def print_diff(source, target, msg):",
          "140:     difference = source - target",
          "141:     if difference:",
          "142:         console.print(msg)",
          "143:         for i in difference:",
          "144:             console.print(f\"[red]\\t- {i}[/]\")",
          "145:     return list(difference)",
          "148: def _get_breeze_description(parsed_compose: dict[str, Any], label_key: str = \"breeze.description\"):",
          "149:     \"\"\"Extract all breeze.description labels per image.\"\"\"",
          "150:     image_label_map = {}",
          "151:     # possible key error handled outside",
          "152:     for _img_name, img in parsed_compose[\"services\"].items():",
          "153:         try:",
          "154:             for _label_name, label in img[\"labels\"].items():",
          "155:                 if _label_name == label_key:",
          "156:                     image_label_map[_img_name] = label",
          "157:         except KeyError:",
          "158:             # service has no 'lables' entry",
          "159:             continue",
          "160:     return image_label_map",
          "163: def get_integration_descriptions(integrations: dict[str, Path]) -> dict[str, list[Any]]:",
          "164:     \"\"\"Pull breeze description from docker-compose files.\"\"\"",
          "165:     table = {}",
          "166:     for integration, path in integrations.items():",
          "167:         with open(path) as f:",
          "168:             _compose = yaml.safe_load(f)",
          "170:         try:",
          "171:             _labels = _get_breeze_description(_compose)",
          "172:         except KeyError:",
          "173:             console.print(f\"[red]No 'services' entry in compose file {path}.[/]\")",
          "174:             sys.exit(1)",
          "175:         table[integration] = list(_labels.values())",
          "176:     return table",
          "179: def main():",
          "180:     docs_integrations = get_docs_integrations()",
          "181:     ci_integrations = get_ci_integrations()",
          "183:     if len(ci_integrations) == 0:",
          "184:         console.print(\"[red]No integrations found.[/]\")",
          "185:         sys.exit(1)",
          "187:     _ci_items = set(ci_integrations)",
          "188:     _docs_items = set(docs_integrations)",
          "189:     diff = []",
          "190:     diff.append(print_diff(_ci_items, _docs_items, \"[red]Found in ci files, but not in docs: [/]\"))",
          "191:     diff.append(print_diff(_docs_items, _ci_items, \"[red]Found in docs, but not in ci files: [/]\"))",
          "192:     if diff:",
          "193:         console.print(",
          "194:             \"[yellow]Regenerating documentation table. Don't forget to review and commit possible changes.[/]\"",
          "195:         )",
          "197:     table_contents = get_integration_descriptions(ci_integrations)",
          "198:     update_integration_tests_array(table_contents)",
          "201: if __name__ == \"__main__\":",
          "202:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c10e93f6745e9f86c3be901839b89eaac374ce2",
      "candidate_info": {
        "commit_hash": "2c10e93f6745e9f86c3be901839b89eaac374ce2",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/2c10e93f6745e9f86c3be901839b89eaac374ce2",
        "files": [
          "airflow/__init__.py",
          "docs/docker-stack/README.md",
          "docs/docker-stack/docker-examples/extending/add-airflow-configuration/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-apt-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-build-essential-extend/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-providers/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-pypi-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-requirement-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/custom-providers/Dockerfile",
          "docs/docker-stack/docker-examples/extending/embedding-dags/Dockerfile",
          "docs/docker-stack/docker-examples/extending/writable-directory/Dockerfile",
          "docs/docker-stack/entrypoint.rst"
        ],
        "message": "Update version of airflow to 2.8.1.dev0",
        "before_after_code_files": [
          "airflow/__init__.py||airflow/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/__init__.py||airflow/__init__.py": [
          "File: airflow/__init__.py -> airflow/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: \"\"\"",
          "27: from __future__ import annotations",
          "31: # flake8: noqa: F401",
          "",
          "[Removed Lines]",
          "29: __version__ = \"2.8.0\"",
          "",
          "[Added Lines]",
          "29: __version__ = \"2.8.1.dev0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "667ec3b6e6b3a7ed5e7a17f2bb8ee6ed9afa21d6",
      "candidate_info": {
        "commit_hash": "667ec3b6e6b3a7ed5e7a17f2bb8ee6ed9afa21d6",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/667ec3b6e6b3a7ed5e7a17f2bb8ee6ed9afa21d6",
        "files": [
          ".github/workflows/ci.yml",
          ".pre-commit-config.yaml",
          "STATIC_CODE_CHECKS.rst",
          "airflow/decorators/__init__.pyi",
          "airflow/models/taskreschedule.py",
          "airflow/operators/latest_only.py",
          "airflow/providers/apache/druid/hooks/druid.py",
          "airflow/providers/databricks/hooks/databricks_sql.py",
          "airflow/providers/exasol/hooks/exasol.py",
          "airflow/providers/google/cloud/hooks/cloud_run.py",
          "airflow/providers/google/cloud/triggers/cloud_run.py",
          "airflow/providers/google/cloud/utils/credentials_provider.py",
          "airflow/providers/google/common/hooks/base_google.py",
          "airflow/providers/google/common/utils/id_token_credentials.py",
          "airflow/providers/grpc/hooks/grpc.py",
          "airflow/providers/openlineage/plugins/facets.py",
          "airflow/providers/postgres/hooks/postgres.py",
          "airflow/providers/snowflake/hooks/snowflake.py",
          "airflow/providers/trino/operators/trino.py",
          "airflow/providers/vertica/hooks/vertica.py",
          "airflow/providers_manager.py",
          "airflow/sensors/base.py",
          "airflow/utils/operator_helpers.py",
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "dev/breeze/tests/test_selective_checks.py",
          "images/breeze/output_static-checks.svg",
          "images/breeze/output_static-checks.txt",
          "scripts/ci/pre_commit/common_precommit_utils.py",
          "scripts/ci/pre_commit/pre_commit_mypy.py"
        ],
        "message": "Run mypy checks for full packages in CI (#36638)\n\nMyPy as used in our static checks has slightly different heuristics\nwhen running on on individual files and whole packages. This sometimes\ncauses semi-random failures when different set of files is produced\nwhen pre-commits split the files between parallel processes.\n\nThe regular `mypy-*` pre-commits work by passing filenames to mypy\nchecks, and when `--all-files` flag is passed to mypy, this means\nthat 2700 files are passed. In this case pre-commit will split such\nlong list of files to several sequential muypy executions. This\nis not very good because depending on the list of files passed,\nmypy can split the list diferently and results will be different\nwhen just list of files changes - so mypy might start detecting\nproblems that were not present before.\n\nThis PR introduces new `mypy` check that runs mypy for packages\nrather than individual files. We cannot run them for local\npre-commit runs, because in many cases, such package based\nmypy check will run for minutes when a single file changes,\ndue to cache invalidation rules - and we do not want to penalise\ncommits that are changing common airflow code (because such PRs\nwould invalidate a lot of mypy cache every time such common file\nchanges). So we still want to run file-based mypy for local\ncommits. But we do not want to pass 2700 files in CI, rather than\nthat on CI we want to run mypy checks \"per package\".\n\nThis PR introduces a new \"manual\" stage mypy pre-commit check that\nwill run \"package\" based mypy checks and adds selective check rules\nthat will decide properly when to run such tests and separate,\nmatrix-based CI job that will run such mypy checks - separately\nfor each of the packages: \"airflow\", \"providers\", \"docs\", \"dev\".\n\nAlso this job will skip providers checks in non-main branch and\nwill run all tests when \"full tests needed\" are requested.\n\nThis PR ignores some errors resulted from 3rd-party libraries used\nthat are randomply appearing when some files are modified (and fixes\nthe current main failures)\n\n(cherry picked from commit f7b663d9aff472d0a419e16c262fbae2a8a69ce1)",
        "before_after_code_files": [
          "airflow/decorators/__init__.pyi||airflow/decorators/__init__.pyi",
          "airflow/models/taskreschedule.py||airflow/models/taskreschedule.py",
          "airflow/operators/latest_only.py||airflow/operators/latest_only.py",
          "airflow/providers/apache/druid/hooks/druid.py||airflow/providers/apache/druid/hooks/druid.py",
          "airflow/providers/databricks/hooks/databricks_sql.py||airflow/providers/databricks/hooks/databricks_sql.py",
          "airflow/providers/exasol/hooks/exasol.py||airflow/providers/exasol/hooks/exasol.py",
          "airflow/providers/google/cloud/hooks/cloud_run.py||airflow/providers/google/cloud/hooks/cloud_run.py",
          "airflow/providers/google/cloud/triggers/cloud_run.py||airflow/providers/google/cloud/triggers/cloud_run.py",
          "airflow/providers/google/cloud/utils/credentials_provider.py||airflow/providers/google/cloud/utils/credentials_provider.py",
          "airflow/providers/google/common/hooks/base_google.py||airflow/providers/google/common/hooks/base_google.py",
          "airflow/providers/google/common/utils/id_token_credentials.py||airflow/providers/google/common/utils/id_token_credentials.py",
          "airflow/providers/grpc/hooks/grpc.py||airflow/providers/grpc/hooks/grpc.py",
          "airflow/providers/openlineage/plugins/facets.py||airflow/providers/openlineage/plugins/facets.py",
          "airflow/providers/postgres/hooks/postgres.py||airflow/providers/postgres/hooks/postgres.py",
          "airflow/providers/snowflake/hooks/snowflake.py||airflow/providers/snowflake/hooks/snowflake.py",
          "airflow/providers/trino/operators/trino.py||airflow/providers/trino/operators/trino.py",
          "airflow/providers/vertica/hooks/vertica.py||airflow/providers/vertica/hooks/vertica.py",
          "airflow/providers_manager.py||airflow/providers_manager.py",
          "airflow/sensors/base.py||airflow/sensors/base.py",
          "airflow/utils/operator_helpers.py||airflow/utils/operator_helpers.py",
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py",
          "scripts/ci/pre_commit/common_precommit_utils.py||scripts/ci/pre_commit/common_precommit_utils.py",
          "scripts/ci/pre_commit/pre_commit_mypy.py||scripts/ci/pre_commit/pre_commit_mypy.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/decorators/__init__.pyi||airflow/decorators/__init__.pyi": [
          "File: airflow/decorators/__init__.pyi -> airflow/decorators/__init__.pyi",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: class TaskDecoratorCollection:",
          "62:     @overload",
          "64:         self,",
          "66:         multiple_outputs: bool | None = None,",
          "",
          "[Removed Lines]",
          "63:     def python(",
          "",
          "[Added Lines]",
          "63:     def python(  # type: ignore[misc]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     def python(self, python_callable: Callable[FParams, FReturn]) -> Task[FParams, FReturn]: ...",
          "89:     # [END mixin_for_typing]",
          "90:     @overload",
          "92:         self,",
          "94:         multiple_outputs: bool | None = None,",
          "",
          "[Removed Lines]",
          "91:     def __call__(",
          "",
          "[Added Lines]",
          "91:     def __call__(  # type: ignore[misc]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     def __call__(self, python_callable: Callable[FParams, FReturn]) -> Task[FParams, FReturn]:",
          "102:         \"\"\"Aliasing ``python``; signature should match exactly.\"\"\"",
          "103:     @overload",
          "105:         self,",
          "107:         multiple_outputs: bool | None = None,",
          "",
          "[Removed Lines]",
          "104:     def virtualenv(",
          "",
          "[Added Lines]",
          "104:     def virtualenv(  # type: ignore[misc]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:             such as transmission a large amount of XCom to TaskAPI.",
          "188:         \"\"\"",
          "189:     @overload",
          "191:         \"\"\"Create a decorator to wrap the decorated callable into a BranchPythonOperator.",
          "193:         For more information on how to use this decorator, see :ref:`concepts:branching`.",
          "",
          "[Removed Lines]",
          "190:     def branch(self, *, multiple_outputs: bool | None = None, **kwargs) -> TaskDecorator:",
          "",
          "[Added Lines]",
          "190:     def branch(  # type: ignore[misc]",
          "191:         self, *, multiple_outputs: bool | None = None, **kwargs",
          "192:     ) -> TaskDecorator:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:     @overload",
          "200:     def branch(self, python_callable: Callable[FParams, FReturn]) -> Task[FParams, FReturn]: ...",
          "201:     @overload",
          "203:         self,",
          "205:         multiple_outputs: bool | None = None,",
          "",
          "[Removed Lines]",
          "202:     def branch_virtualenv(",
          "",
          "[Added Lines]",
          "204:     def branch_virtualenv(  # type: ignore[misc]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "292:         self, python_callable: Callable[FParams, FReturn]",
          "293:     ) -> Task[FParams, FReturn]: ...",
          "294:     @overload",
          "296:         self,",
          "298:         multiple_outputs: bool | None = None,",
          "",
          "[Removed Lines]",
          "295:     def short_circuit(",
          "",
          "[Added Lines]",
          "297:     def short_circuit(  # type: ignore[misc]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "627:         :param progress_callback: Callback function for receiving k8s container logs.",
          "628:         \"\"\"",
          "629:     @overload",
          "631:         self,",
          "633:         poke_interval: float = ...,",
          "",
          "[Removed Lines]",
          "630:     def sensor(",
          "",
          "[Added Lines]",
          "632:     def sensor(  # type: ignore[misc]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "664:     @overload",
          "665:     def sensor(self, python_callable: Callable[FParams, FReturn] | None = None) -> Task[FParams, FReturn]: ...",
          "666:     @overload",
          "668:         self,",
          "670:         multiple_outputs: bool | None = None,",
          "",
          "[Removed Lines]",
          "667:     def pyspark(",
          "",
          "[Added Lines]",
          "669:     def pyspark(  # type: ignore[misc]",
          "",
          "---------------"
        ],
        "airflow/models/taskreschedule.py||airflow/models/taskreschedule.py": [
          "File: airflow/models/taskreschedule.py -> airflow/models/taskreschedule.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     from airflow.models.operator import Operator",
          "40:     from airflow.models.taskinstance import TaskInstance",
          "43: class TaskReschedule(Base):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     from airflow.serialization.pydantic.taskinstance import TaskInstancePydantic",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     @classmethod",
          "104:     def stmt_for_task_instance(",
          "105:         cls,",
          "108:         try_number: int | None = None,",
          "109:         descending: bool = False,",
          "",
          "[Removed Lines]",
          "106:         ti: TaskInstance,",
          "",
          "[Added Lines]",
          "107:         ti: TaskInstance | TaskInstancePydantic,",
          "",
          "---------------"
        ],
        "airflow/operators/latest_only.py||airflow/operators/latest_only.py": [
          "File: airflow/operators/latest_only.py -> airflow/operators/latest_only.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     def choose_branch(self, context: Context) -> str | Iterable[str]:",
          "46:         # If the DAG Run is externally triggered, then return without",
          "47:         # skipping downstream tasks",
          "49:         if dag_run.external_trigger:",
          "50:             self.log.info(\"Externally triggered DAG_Run: allowing execution to proceed.\")",
          "51:             return list(context[\"task\"].get_direct_relative_ids(upstream=False))",
          "",
          "[Removed Lines]",
          "48:         dag_run: DagRun = context[\"dag_run\"]",
          "",
          "[Added Lines]",
          "48:         dag_run: DagRun = context[\"dag_run\"]  # type: ignore[assignment]",
          "",
          "---------------"
        ],
        "airflow/providers/apache/druid/hooks/druid.py||airflow/providers/apache/druid/hooks/druid.py": [
          "File: airflow/providers/apache/druid/hooks/druid.py -> airflow/providers/apache/druid/hooks/druid.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:         endpoint = conn.extra_dejson.get(\"endpoint\", \"druid/v2/sql\")",
          "201:         return f\"{conn_type}://{host}/{endpoint}\"",
          "204:         raise NotImplementedError()",
          "206:     def insert_rows(",
          "",
          "[Removed Lines]",
          "203:     def set_autocommit(self, conn: connect, autocommit: bool) -> NotImplementedError:",
          "",
          "[Added Lines]",
          "203:     def set_autocommit(self, conn: connect, autocommit: bool) -> None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:         commit_every: int = 1000,",
          "212:         replace: bool = False,",
          "215:         raise NotImplementedError()",
          "",
          "[Removed Lines]",
          "214:     ) -> NotImplementedError:",
          "",
          "[Added Lines]",
          "214:     ) -> None:",
          "",
          "---------------"
        ],
        "airflow/providers/databricks/hooks/databricks_sql.py||airflow/providers/databricks/hooks/databricks_sql.py": [
          "File: airflow/providers/databricks/hooks/databricks_sql.py -> airflow/providers/databricks/hooks/databricks_sql.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:             )",
          "146:         return self._sql_conn",
          "149:     def run(",
          "150:         self,",
          "151:         sql: str | Iterable[str],",
          "",
          "[Removed Lines]",
          "148:     @overload",
          "",
          "[Added Lines]",
          "148:     @overload  # type: ignore[override]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:                 self.set_autocommit(conn, autocommit)",
          "222:                 with closing(conn.cursor()) as cur:",
          "224:                     if handler is not None:",
          "225:                         result = self._make_serializable(handler(cur))",
          "226:                         if return_single_query_results(sql, return_last, split_statements):",
          "",
          "[Removed Lines]",
          "223:                     self._run_command(cur, sql_statement, parameters)",
          "",
          "[Added Lines]",
          "223:                     self._run_command(cur, sql_statement, parameters)  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/exasol/hooks/exasol.py||airflow/providers/exasol/hooks/exasol.py": [
          "File: airflow/providers/exasol/hooks/exasol.py -> airflow/providers/exasol/hooks/exasol.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:             )",
          "163:         return cols",
          "166:     def run(",
          "167:         self,",
          "168:         sql: str | Iterable[str],",
          "",
          "[Removed Lines]",
          "165:     @overload",
          "",
          "[Added Lines]",
          "165:     @overload  # type: ignore[override]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:                 with closing(conn.execute(sql_statement, parameters)) as exa_statement:",
          "233:                     self.log.info(\"Running statement: %s, parameters: %s\", sql_statement, parameters)",
          "234:                     if handler is not None:",
          "236:                         if return_single_query_results(sql, return_last, split_statements):",
          "237:                             _last_result = result",
          "238:                             _last_columns = self.get_description(exa_statement)",
          "",
          "[Removed Lines]",
          "235:                         result = handler(exa_statement)",
          "",
          "[Added Lines]",
          "235:                         result = self._make_common_data_structure(  # type: ignore[attr-defined]",
          "236:                             handler(exa_statement)",
          "237:                         )",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/hooks/cloud_run.py||airflow/providers/google/cloud/hooks/cloud_run.py": [
          "File: airflow/providers/google/cloud/hooks/cloud_run.py -> airflow/providers/google/cloud/hooks/cloud_run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     RunJobRequest,",
          "32:     UpdateJobRequest,",
          "33: )",
          "36: from airflow.exceptions import AirflowException",
          "37: from airflow.providers.google.common.consts import CLIENT_INFO",
          "",
          "[Removed Lines]",
          "34: from google.longrunning import operations_pb2",
          "",
          "[Added Lines]",
          "34: from google.longrunning import operations_pb2  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/triggers/cloud_run.py||airflow/providers/google/cloud/triggers/cloud_run.py": [
          "File: airflow/providers/google/cloud/triggers/cloud_run.py -> airflow/providers/google/cloud/triggers/cloud_run.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from airflow.triggers.base import BaseTrigger, TriggerEvent",
          "27: if TYPE_CHECKING:",
          "30: DEFAULT_BATCH_LOCATION = \"us-central1\"",
          "",
          "[Removed Lines]",
          "28:     from google.longrunning import operations_pb2",
          "",
          "[Added Lines]",
          "28:     from google.longrunning import operations_pb2  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/utils/credentials_provider.py||airflow/providers/google/cloud/utils/credentials_provider.py": [
          "File: airflow/providers/google/cloud/utils/credentials_provider.py -> airflow/providers/google/cloud/utils/credentials_provider.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import google.auth",
          "31: import google.auth.credentials",
          "32: import google.oauth2.service_account",
          "34: from google.auth.environment_vars import CREDENTIALS, LEGACY_PROJECT, PROJECT",
          "36: from airflow.exceptions import AirflowException",
          "",
          "[Removed Lines]",
          "33: from google.auth import impersonated_credentials",
          "",
          "[Added Lines]",
          "33: from google.auth import impersonated_credentials  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/google/common/hooks/base_google.py||airflow/providers/google/common/hooks/base_google.py": [
          "File: airflow/providers/google/common/hooks/base_google.py -> airflow/providers/google/common/hooks/base_google.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import tenacity",
          "37: from asgiref.sync import sync_to_async",
          "38: from google.api_core.exceptions import Forbidden, ResourceExhausted, TooManyRequests",
          "40: from google.auth.environment_vars import CLOUD_SDK_CONFIG_DIR, CREDENTIALS",
          "41: from google.auth.exceptions import RefreshError",
          "42: from google.auth.transport import _http_client",
          "",
          "[Removed Lines]",
          "39: from google.auth import _cloud_sdk, compute_engine",
          "",
          "[Added Lines]",
          "39: from google.auth import _cloud_sdk, compute_engine  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/google/common/utils/id_token_credentials.py||airflow/providers/google/common/utils/id_token_credentials.py": [
          "File: airflow/providers/google/common/utils/id_token_credentials.py -> airflow/providers/google/common/utils/id_token_credentials.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import google.auth.transport",
          "38: from google.auth import credentials as google_auth_credentials, environment_vars, exceptions",
          "41: if TYPE_CHECKING:",
          "42:     import google.oauth2",
          "",
          "[Removed Lines]",
          "39: from google.oauth2 import credentials as oauth2_credentials, service_account",
          "",
          "[Added Lines]",
          "39: from google.oauth2 import credentials as oauth2_credentials, service_account  # type: ignore[attr-defined]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     target_audience: str | None,",
          "147: ) -> google_auth_credentials.Credentials | None:",
          "148:     \"\"\"Gets the credentials and project ID from the Cloud SDK.\"\"\"",
          "151:     # Check if application default credentials exist.",
          "152:     credentials_filename = _cloud_sdk.get_application_default_credentials_path()",
          "",
          "[Removed Lines]",
          "149:     from google.auth import _cloud_sdk",
          "",
          "[Added Lines]",
          "149:     from google.auth import _cloud_sdk  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/grpc/hooks/grpc.py||airflow/providers/grpc/hooks/grpc.py": [
          "File: airflow/providers/grpc/hooks/grpc.py -> airflow/providers/grpc/hooks/grpc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import grpc",
          "23: from google import auth as google_auth",
          "25: from google.auth.transport import (",
          "26:     grpc as google_auth_transport_grpc,",
          "27:     requests as google_auth_transport_requests,",
          "",
          "[Removed Lines]",
          "24: from google.auth import jwt as google_auth_jwt",
          "",
          "[Added Lines]",
          "24: from google.auth import jwt as google_auth_jwt  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/openlineage/plugins/facets.py||airflow/providers/openlineage/plugins/facets.py": [
          "File: airflow/providers/openlineage/plugins/facets.py -> airflow/providers/openlineage/plugins/facets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     mapIndex: int",
          "29:     operatorClass: str",
          "33:     @classmethod",
          "34:     def from_task_instance(cls, task_instance):",
          "",
          "[Removed Lines]",
          "31:     _additional_skip_redact: list[str] = [\"operatorClass\"]",
          "",
          "[Added Lines]",
          "31:     _additional_skip_redact = [\"operatorClass\"]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     properties: dict[str, object]",
          "64:     type: str = \"operator\"",
          "69: @define(slots=False)",
          "",
          "[Removed Lines]",
          "66:     _skip_redact: list[str] = [\"name\", \"type\"]",
          "",
          "[Added Lines]",
          "66:     _skip_redact = [\"name\", \"type\"]",
          "",
          "---------------"
        ],
        "airflow/providers/postgres/hooks/postgres.py||airflow/providers/postgres/hooks/postgres.py": [
          "File: airflow/providers/postgres/hooks/postgres.py -> airflow/providers/postgres/hooks/postgres.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:         if is_redshift:",
          "333:             authority = self._get_openlineage_redshift_authority_part(connection)",
          "334:         else:",
          "337:         return DatabaseInfo(",
          "338:             scheme=\"postgres\" if not is_redshift else \"redshift\",",
          "",
          "[Removed Lines]",
          "335:             authority = DbApiHook.get_openlineage_authority_part(connection, default_port=5432)",
          "",
          "[Added Lines]",
          "335:             authority = DbApiHook.get_openlineage_authority_part(  # type: ignore[attr-defined]",
          "336:                 connection, default_port=5432",
          "337:             )",
          "",
          "---------------"
        ],
        "airflow/providers/snowflake/hooks/snowflake.py||airflow/providers/snowflake/hooks/snowflake.py": [
          "File: airflow/providers/snowflake/hooks/snowflake.py -> airflow/providers/snowflake/hooks/snowflake.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     def get_autocommit(self, conn):",
          "301:         return getattr(conn, \"autocommit_mode\", False)",
          "304:     def run(",
          "305:         self,",
          "306:         sql: str | Iterable[str],",
          "",
          "[Removed Lines]",
          "303:     @overload",
          "",
          "[Added Lines]",
          "303:     @overload  # type: ignore[override]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:             with self._get_cursor(conn, return_dictionaries) as cur:",
          "386:                 results = []",
          "387:                 for sql_statement in sql_list:",
          "390:                     if handler is not None:",
          "392:                         if return_single_query_results(sql, return_last, split_statements):",
          "393:                             _last_result = result",
          "394:                             _last_description = cur.description",
          "",
          "[Removed Lines]",
          "388:                     self._run_command(cur, sql_statement, parameters)",
          "391:                         result = handler(cur)",
          "",
          "[Added Lines]",
          "388:                     self._run_command(cur, sql_statement, parameters)  # type: ignore[attr-defined]",
          "391:                         result = self._make_common_data_structure(handler(cur))  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/trino/operators/trino.py||airflow/providers/trino/operators/trino.py": [
          "File: airflow/providers/trino/operators/trino.py -> airflow/providers/trino/operators/trino.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         )",
          "67:     def on_kill(self) -> None:",
          "70:             try:",
          "73:                     sql=f\"CALL system.runtime.kill_query(query_id => {query_id},message => 'Job \"",
          "74:                     f\"killed by \"",
          "75:                     f\"user');\",",
          "",
          "[Removed Lines]",
          "68:         if self._hook is not None and isinstance(self._hook, TrinoHook):",
          "69:             query_id = \"'\" + self._hook.query_id + \"'\"",
          "71:                 self.log.info(\"Stopping query run with queryId - %s\", self._hook.query_id)",
          "72:                 self._hook.run(",
          "",
          "[Added Lines]",
          "68:         if self._hook is not None and isinstance(self._hook, TrinoHook):  # type: ignore[attr-defined]",
          "69:             query_id = \"'\" + self._hook.query_id + \"'\"  # type: ignore[attr-defined]",
          "71:                 self.log.info(\"Stopping query run with queryId - %s\", self._hook.query_id)  # type: ignore[attr-defined]",
          "72:                 self._hook.run(  # type: ignore[attr-defined]",
          "",
          "---------------"
        ],
        "airflow/providers/vertica/hooks/vertica.py||airflow/providers/vertica/hooks/vertica.py": [
          "File: airflow/providers/vertica/hooks/vertica.py -> airflow/providers/vertica/hooks/vertica.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:         conn = connect(**conn_config)",
          "133:         return conn",
          "136:     def run(",
          "137:         self,",
          "138:         sql: str | Iterable[str],",
          "",
          "[Removed Lines]",
          "135:     @overload",
          "",
          "[Added Lines]",
          "135:     @overload  # type: ignore[override]",
          "",
          "---------------"
        ],
        "airflow/providers_manager.py||airflow/providers_manager.py": [
          "File: airflow/providers_manager.py -> airflow/providers_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:         return ProvidersManager._initialized",
          "406:     @staticmethod",
          "408:         return ProvidersManager._initialization_stack_trace",
          "410:     def __init__(self):",
          "",
          "[Removed Lines]",
          "407:     def initialization_stack_trace() -> str:",
          "",
          "[Added Lines]",
          "407:     def initialization_stack_trace() -> str | None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "418:         # Keeps dict of hooks keyed by connection type",
          "419:         self._hooks_dict: dict[str, HookInfo] = {}",
          "420:         self._fs_set: set[str] = set()",
          "422:         # keeps mapping between connection_types and hook class, package they come from",
          "423:         self._hook_provider_dict: dict[str, HookClassProvider] = {}",
          "424:         # Keeps dict of hooks keyed by connection type. They are lazy evaluated at access time",
          "",
          "[Removed Lines]",
          "421:         self._taskflow_decorators: dict[str, Callable] = LazyDictWithCache()",
          "",
          "[Added Lines]",
          "421:         self._taskflow_decorators: dict[str, Callable] = LazyDictWithCache()  # type: ignore[assignment]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1105:         \"\"\"Retrieve all configs defined in the providers.\"\"\"",
          "1106:         for provider_package, provider in self._provider_dict.items():",
          "1107:             if provider.data.get(\"config\"):",
          "1110:     def _discover_plugins(self) -> None:",
          "1111:         \"\"\"Retrieve all plugins defined in the providers.\"\"\"",
          "",
          "[Removed Lines]",
          "1108:                 self._provider_configs[provider_package] = provider.data.get(\"config\")",
          "",
          "[Added Lines]",
          "1108:                 self._provider_configs[provider_package] = (",
          "1109:                     provider.data.get(\"config\")  # type: ignore[assignment]",
          "1110:                 )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1175:     @property",
          "1176:     def taskflow_decorators(self) -> dict[str, TaskDecorator]:",
          "1177:         self.initialize_providers_taskflow_decorator()",
          "1180:     @property",
          "1181:     def extra_links_class_names(self) -> list[str]:",
          "",
          "[Removed Lines]",
          "1178:         return self._taskflow_decorators",
          "",
          "[Added Lines]",
          "1180:         return self._taskflow_decorators  # type: ignore[return-value]",
          "",
          "---------------"
        ],
        "airflow/sensors/base.py||airflow/sensors/base.py": [
          "File: airflow/sensors/base.py -> airflow/sensors/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         if self.reschedule:",
          "213:             # If reschedule, use the start date of the first try (first try can be either the very",
          "214:             # first execution of the task, or the first execution after the task was cleared.)",
          "216:             with create_session() as session:",
          "217:                 start_date = session.scalar(",
          "218:                     TaskReschedule.stmt_for_task_instance(",
          "",
          "[Removed Lines]",
          "215:             first_try_number = context[\"ti\"].max_tries - self.retries + 1",
          "",
          "[Added Lines]",
          "215:             max_tries: int = context[\"ti\"].max_tries or 0",
          "216:             retries: int = self.retries or 0",
          "217:             first_try_number = max_tries - retries + 1",
          "",
          "---------------"
        ],
        "airflow/utils/operator_helpers.py||airflow/utils/operator_helpers.py": [
          "File: airflow/utils/operator_helpers.py -> airflow/utils/operator_helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:     def unpacking(self) -> Mapping[str, Any]:",
          "174:         \"\"\"Dump the kwargs mapping to unpack with ``**`` in a function call.\"\"\"",
          "176:             return lazy_mapping_from_context(self._kwargs)",
          "177:         return self._kwargs",
          "",
          "[Removed Lines]",
          "175:         if self._wildcard and isinstance(self._kwargs, Context):",
          "",
          "[Added Lines]",
          "175:         if self._wildcard and isinstance(self._kwargs, Context):  # type: ignore[misc]",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py": [
          "File: dev/breeze/src/airflow_breeze/pre_commit_ids.py -> dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     \"lint-markdown\",",
          "104:     \"lint-openapi\",",
          "105:     \"mixed-line-ending\",",
          "106:     \"mypy-core\",",
          "107:     \"mypy-dev\",",
          "108:     \"mypy-docs\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     \"mypy\",",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/selective_checks.py||dev/breeze/src/airflow_breeze/utils/selective_checks.py": [
          "File: dev/breeze/src/airflow_breeze/utils/selective_checks.py -> dev/breeze/src/airflow_breeze/utils/selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:             )",
          "585:             return False",
          "587:     @cached_property",
          "588:     def needs_python_scans(self) -> bool:",
          "589:         return self._should_be_run(FileGroupForCi.PYTHON_PRODUCTION_FILES)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:     @cached_property",
          "588:     def mypy_packages(self) -> list[str]:",
          "589:         packages_to_run: list[str] = []",
          "590:         if (",
          "591:             self._matching_files(",
          "592:                 FileGroupForCi.ALL_AIRFLOW_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "593:             )",
          "594:             or self.full_tests_needed",
          "595:         ):",
          "596:             packages_to_run.append(\"airflow\")",
          "597:         if (",
          "598:             self._matching_files(",
          "599:                 FileGroupForCi.ALL_PROVIDERS_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "600:             )",
          "601:             or self._are_all_providers_affected()",
          "602:         ) and self._default_branch == \"main\":",
          "603:             packages_to_run.append(\"airflow/providers\")",
          "604:         if (",
          "605:             self._matching_files(",
          "606:                 FileGroupForCi.ALL_DOCS_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "607:             )",
          "608:             or self.full_tests_needed",
          "609:         ):",
          "610:             packages_to_run.append(\"docs\")",
          "611:         if (",
          "612:             self._matching_files(",
          "613:                 FileGroupForCi.ALL_DEV_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "614:             )",
          "615:             or self.full_tests_needed",
          "616:         ):",
          "617:             packages_to_run.append(\"dev\")",
          "618:         return packages_to_run",
          "620:     @cached_property",
          "621:     def needs_mypy(self) -> bool:",
          "622:         return self.mypy_packages != []",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "823:     def skip_pre_commits(self) -> str:",
          "824:         pre_commits_to_skip = set()",
          "825:         pre_commits_to_skip.add(\"identity\")",
          "826:         if self._default_branch != \"main\":",
          "827:             # Skip those tests on all \"release\" branches",
          "828:             pre_commits_to_skip.update(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:         # Skip all mypy \"individual\" file checks if we are running mypy checks in CI",
          "864:         # In the CI we always run mypy for the whole \"package\" rather than for `--all-files` because",
          "865:         # The pre-commit will semi-randomly skip such list of files into several groups and we want",
          "866:         # to make sure that such checks are always run in CI for whole \"group\" of files - i.e.",
          "867:         # whole package rather than for individual files. That's why we skip those checks in CI",
          "868:         # and run them via `mypy-all` command instead and dedicated CI job in matrix",
          "869:         # This will also speed up static-checks job usually as the jobs will be running in parallel",
          "870:         pre_commits_to_skip.update({\"mypy-providers\", \"mypy-core\", \"mypy-docs\", \"mypy-dev\"})",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "831:                     \"check-extra-packages-references\",",
          "832:                     \"check-provider-yaml-valid\",",
          "833:                     \"lint-helm-chart\",",
          "835:                 )",
          "836:             )",
          "837:         if self.full_tests_needed:",
          "838:             # when full tests are needed, we do not want to skip any checks and we should",
          "839:             # run all the pre-commits just to be sure everything is ok when some structural changes occurred",
          "840:             return \",\".join(sorted(pre_commits_to_skip))",
          "857:         if not self._matching_files(FileGroupForCi.WWW_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES):",
          "858:             pre_commits_to_skip.add(\"ts-compile-format-lint-www\")",
          "859:         if not self._matching_files(",
          "",
          "[Removed Lines]",
          "834:                     \"mypy-providers\",",
          "841:         if not self._matching_files(",
          "842:             FileGroupForCi.ALL_PROVIDERS_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "843:         ):",
          "844:             pre_commits_to_skip.add(\"mypy-providers\")",
          "845:         if not self._matching_files(",
          "846:             FileGroupForCi.ALL_AIRFLOW_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "847:         ):",
          "848:             pre_commits_to_skip.add(\"mypy-core\")",
          "849:         if not self._matching_files(",
          "850:             FileGroupForCi.ALL_DOCS_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "851:         ):",
          "852:             pre_commits_to_skip.add(\"mypy-docs\")",
          "853:         if not self._matching_files(",
          "854:             FileGroupForCi.ALL_DEV_PYTHON_FILES, CI_FILE_GROUP_MATCHES, CI_FILE_GROUP_EXCLUDES",
          "855:         ):",
          "856:             pre_commits_to_skip.add(\"mypy-dev\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dev/breeze/tests/test_selective_checks.py||dev/breeze/tests/test_selective_checks.py": [
          "File: dev/breeze/tests/test_selective_checks.py -> dev/breeze/tests/test_selective_checks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:                     print_in_color(\"\\nOutput received:\")",
          "76:                     print_in_color(received_output_as_dict)",
          "77:                     print_in_color()",
          "79:                 else:",
          "80:                     print(",
          "81:                         f\"\\n[red]ERROR: The key '{expected_key}' missing but \"",
          "",
          "[Removed Lines]",
          "78:                     assert expected_value == received_value",
          "",
          "[Added Lines]",
          "78:                     assert received_value == expected_value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:                     \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "112:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "113:                     \"parallel-test-types-list-as-string\": None,",
          "114:                 },",
          "115:                 id=\"No tests on simple change\",",
          "116:             )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:                     \"needs-mypy\": \"false\",",
          "115:                     \"mypy-packages\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:                     \"run-tests\": \"true\",",
          "131:                     \"run-amazon-tests\": \"false\",",
          "132:                     \"docs-build\": \"true\",",
          "134:                     \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "135:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "136:                     \"parallel-test-types-list-as-string\": \"API Always\",",
          "137:                 },",
          "138:                 id=\"Only API tests and DOCS should run\",",
          "139:             )",
          "",
          "[Removed Lines]",
          "133:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "",
          "[Added Lines]",
          "135:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,\"",
          "139:                     \"needs-mypy\": \"true\",",
          "140:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:                     \"run-tests\": \"true\",",
          "154:                     \"run-amazon-tests\": \"false\",",
          "155:                     \"docs-build\": \"true\",",
          "157:                     \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "158:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "159:                     \"parallel-test-types-list-as-string\": \"Always Operators\",",
          "160:                 },",
          "161:                 id=\"Only Operator tests and DOCS should run\",",
          "162:             )",
          "",
          "[Removed Lines]",
          "156:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "",
          "[Added Lines]",
          "160:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,\"",
          "164:                     \"needs-mypy\": \"true\",",
          "165:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176:                     \"run-tests\": \"true\",",
          "177:                     \"run-amazon-tests\": \"false\",",
          "178:                     \"docs-build\": \"true\",",
          "180:                     \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "181:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "182:                     \"parallel-test-types-list-as-string\": \"Always BranchExternalPython BranchPythonVenv \"",
          "183:                     \"ExternalPython Operators PythonVenv\",",
          "184:                 },",
          "185:                 id=\"Only Python tests\",",
          "186:             )",
          "",
          "[Removed Lines]",
          "179:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "",
          "[Added Lines]",
          "185:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,\"",
          "190:                     \"needs-mypy\": \"true\",",
          "191:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "200:                     \"run-tests\": \"true\",",
          "201:                     \"run-amazon-tests\": \"false\",",
          "202:                     \"docs-build\": \"true\",",
          "204:                     \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "205:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "206:                     \"parallel-test-types-list-as-string\": \"Always Serialization\",",
          "207:                 },",
          "208:                 id=\"Only Serialization tests\",",
          "209:             )",
          "",
          "[Removed Lines]",
          "203:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "",
          "[Added Lines]",
          "211:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,\"",
          "215:                     \"needs-mypy\": \"true\",",
          "216:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:                     \"run-tests\": \"true\",",
          "228:                     \"run-amazon-tests\": \"true\",",
          "229:                     \"docs-build\": \"true\",",
          "231:                     \"ts-compile-format-lint-www\",",
          "232:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "233:                     \"parallel-test-types-list-as-string\": \"API Always Providers[amazon] \"",
          "234:                     \"Providers[common.sql,openlineage,pgvector,postgres] Providers[google]\",",
          "235:                 },",
          "236:                 id=\"API and providers tests and docs should run\",",
          "237:             )",
          "",
          "[Removed Lines]",
          "230:                     \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-dev,mypy-docs,\"",
          "",
          "[Added Lines]",
          "240:                     \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,\"",
          "245:                     \"needs-mypy\": \"true\",",
          "246:                     \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "251:                     \"run-tests\": \"true\",",
          "252:                     \"run-amazon-tests\": \"false\",",
          "253:                     \"docs-build\": \"false\",",
          "255:                     \"ts-compile-format-lint-www\",",
          "256:                     \"run-kubernetes-tests\": \"false\",",
          "257:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "258:                     \"parallel-test-types-list-as-string\": \"Always Providers[apache.beam] Providers[google]\",",
          "259:                 },",
          "260:                 id=\"Selected Providers and docs should run\",",
          "261:             )",
          "",
          "[Removed Lines]",
          "254:                     \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,\"",
          "",
          "[Added Lines]",
          "266:                     \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,\"",
          "271:                     \"needs-mypy\": \"true\",",
          "272:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "280:                     \"run-kubernetes-tests\": \"false\",",
          "281:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "282:                     \"parallel-test-types-list-as-string\": None,",
          "283:                 },",
          "284:                 id=\"Only docs builds should run - no tests needed\",",
          "285:             )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:                     \"needs-mypy\": \"false\",",
          "298:                     \"mypy-packages\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "303:                     \"run-tests\": \"true\",",
          "304:                     \"run-amazon-tests\": \"true\",",
          "305:                     \"docs-build\": \"true\",",
          "307:                     \"run-kubernetes-tests\": \"true\",",
          "308:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "309:                     \"parallel-test-types-list-as-string\": \"Always Providers[amazon] \"",
          "310:                     \"Providers[common.sql,openlineage,pgvector,postgres] Providers[google]\",",
          "311:                 },",
          "312:                 id=\"Helm tests, providers (both upstream and downstream),\"",
          "313:                 \"kubernetes tests and docs should run\",",
          "",
          "[Removed Lines]",
          "306:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "322:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "327:                     \"needs-mypy\": \"true\",",
          "328:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "333:                     \"run-tests\": \"true\",",
          "334:                     \"run-amazon-tests\": \"true\",",
          "335:                     \"docs-build\": \"true\",",
          "337:                     \"run-kubernetes-tests\": \"true\",",
          "338:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "339:                     \"parallel-test-types-list-as-string\": \"Always \"",
          "340:                     \"Providers[airbyte,apache.livy,dbt.cloud,dingding,discord,http] Providers[amazon]\",",
          "341:                 },",
          "342:                 id=\"Helm tests, http and all relevant providers, kubernetes tests and \"",
          "343:                 \"docs should run even if unimportant files were added\",",
          "",
          "[Removed Lines]",
          "336:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "354:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "359:                     \"needs-mypy\": \"true\",",
          "360:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "362:                     \"run-tests\": \"true\",",
          "363:                     \"run-amazon-tests\": \"false\",",
          "364:                     \"docs-build\": \"true\",",
          "366:                     \"run-kubernetes-tests\": \"true\",",
          "367:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "368:                     \"parallel-test-types-list-as-string\": \"Always Providers[airbyte,http]\",",
          "369:                 },",
          "370:                 id=\"Helm tests, airbyte/http providers, kubernetes tests and \"",
          "371:                 \"docs should run even if unimportant files were added\",",
          "",
          "[Removed Lines]",
          "365:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "385:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "389:                     \"needs-mypy\": \"true\",",
          "390:                     \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "389:                     \"needs-helm-tests\": \"true\",",
          "390:                     \"run-tests\": \"true\",",
          "391:                     \"docs-build\": \"true\",",
          "393:                     \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "394:                     \"run-amazon-tests\": \"false\",",
          "395:                     \"run-kubernetes-tests\": \"true\",",
          "396:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "397:                     \"parallel-test-types-list-as-string\": \"Always\",",
          "398:                 },",
          "399:                 id=\"Docs should run even if unimportant files were added and prod image \"",
          "400:                 \"should be build for chart changes\",",
          "",
          "[Removed Lines]",
          "392:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,mypy-dev,\"",
          "",
          "[Added Lines]",
          "414:                     \"skip-pre-commits\": \"check-provider-yaml-valid,identity,mypy-core,mypy-dev,\"",
          "420:                     \"needs-mypy\": \"true\",",
          "421:                     \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "416:                     \"run-amazon-tests\": \"true\",",
          "417:                     \"docs-build\": \"true\",",
          "418:                     \"full-tests-needed\": \"true\",",
          "420:                     \"upgrade-to-newer-dependencies\": \"true\",",
          "421:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "422:                 },",
          "423:                 id=\"Everything should run - including all providers and upgrading to \"",
          "424:                 \"newer requirements as setup.py changed and all Python versions\",",
          "",
          "[Removed Lines]",
          "419:                     \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "443:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "446:                     \"needs-mypy\": \"true\",",
          "447:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "440:                     \"run-amazon-tests\": \"true\",",
          "441:                     \"docs-build\": \"true\",",
          "442:                     \"full-tests-needed\": \"true\",",
          "444:                     \"upgrade-to-newer-dependencies\": \"true\",",
          "445:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "446:                 },",
          "447:                 id=\"Everything should run and upgrading to newer requirements as dependencies change\",",
          "448:             )",
          "",
          "[Removed Lines]",
          "443:                     \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "469:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "472:                     \"needs-mypy\": \"true\",",
          "473:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "462:                 \"needs-helm-tests\": \"false\",",
          "463:                 \"run-tests\": \"true\",",
          "464:                 \"docs-build\": \"true\",",
          "466:                 \"run-kubernetes-tests\": \"false\",",
          "467:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "468:                 \"run-amazon-tests\": \"true\",",
          "469:                 \"parallel-test-types-list-as-string\": \"Always Providers[amazon] \"",
          "470:                 \"Providers[apache.hive,cncf.kubernetes,common.sql,exasol,ftp,http,\"",
          "471:                 \"imap,microsoft.azure,mongo,mysql,openlineage,postgres,salesforce,ssh] Providers[google]\",",
          "472:             },",
          "473:             id=\"Providers tests run including amazon tests if amazon provider files changed\",",
          "474:         ),",
          "",
          "[Removed Lines]",
          "465:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "493:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "500:                 \"needs-mypy\": \"true\",",
          "501:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "486:                 \"run-tests\": \"true\",",
          "487:                 \"run-amazon-tests\": \"false\",",
          "488:                 \"docs-build\": \"false\",",
          "490:                 \"run-kubernetes-tests\": \"false\",",
          "491:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "492:                 \"parallel-test-types-list-as-string\": \"Always Providers[airbyte,http]\",",
          "493:             },",
          "494:             id=\"Providers tests run without amazon tests if no amazon file changed\",",
          "495:         ),",
          "",
          "[Removed Lines]",
          "489:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "519:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "523:                 \"needs-mypy\": \"true\",",
          "524:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "509:                 \"run-tests\": \"true\",",
          "510:                 \"run-amazon-tests\": \"true\",",
          "511:                 \"docs-build\": \"true\",",
          "513:                 \"run-kubernetes-tests\": \"false\",",
          "514:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "515:                 \"parallel-test-types-list-as-string\": \"Always Providers[amazon] \"",
          "516:                 \"Providers[apache.hive,cncf.kubernetes,common.sql,exasol,ftp,http,\"",
          "517:                 \"imap,microsoft.azure,mongo,mysql,openlineage,postgres,salesforce,ssh] Providers[google]\",",
          "518:             },",
          "519:             id=\"Providers tests run including amazon tests if amazon provider files changed\",",
          "520:         ),",
          "",
          "[Removed Lines]",
          "512:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "544:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "550:                 \"needs-mypy\": \"true\",",
          "551:                 \"mypy-packages\": \"['airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "537:                 \"run-amazon-tests\": \"false\",",
          "538:                 \"docs-build\": \"false\",",
          "539:                 \"run-kubernetes-tests\": \"false\",",
          "540:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "541:                 \"parallel-test-types-list-as-string\": \"Always Providers[common.io]\",",
          "542:             },",
          "543:             id=\"Only Always and Common.IO tests should run when only common.io and tests/always changed\",",
          "544:         ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:                 \"skip-pre-commits\": \"identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "577:                 \"needs-mypy\": \"true\",",
          "578:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "578:                     \"docs-build\": \"true\",",
          "579:                     \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "580:                     \"full-tests-needed\": \"true\",",
          "582:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "583:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "584:                 },",
          "585:                 id=\"Everything should run including all providers when full tests are needed\",",
          "586:             )",
          "",
          "[Removed Lines]",
          "581:                     \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "618:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "621:                     \"needs-mypy\": \"true\",",
          "622:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "605:                     \"docs-build\": \"true\",",
          "606:                     \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "607:                     \"full-tests-needed\": \"true\",",
          "609:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "610:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "611:                 },",
          "612:                 id=\"Everything should run including full providers when full \"",
          "613:                 \"tests are needed even with different label set as well\",",
          "",
          "[Removed Lines]",
          "608:                     \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "647:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "650:                     \"needs-mypy\": \"true\",",
          "651:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "630:                     \"docs-build\": \"true\",",
          "631:                     \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "632:                     \"full-tests-needed\": \"true\",",
          "634:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "635:                     \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "636:                 },",
          "637:                 id=\"Everything should run including full providers when\"",
          "638:                 \"full tests are needed even if no files are changed\",",
          "",
          "[Removed Lines]",
          "633:                     \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "674:                     \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "677:                     \"needs-mypy\": \"true\",",
          "678:                     \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "655:                     \"docs-build\": \"true\",",
          "656:                     \"docs-list-as-string\": \"apache-airflow docker-stack\",",
          "657:                     \"full-tests-needed\": \"true\",",
          "661:                     \"skip-provider-tests\": \"true\",",
          "662:                     \"upgrade-to-newer-dependencies\": \"false\",",
          "663:                     \"parallel-test-types-list-as-string\": \"API Always BranchExternalPython \"",
          "664:                     \"BranchPythonVenv CLI Core ExternalPython Operators Other PlainAsserts \"",
          "665:                     \"PythonVenv Serialization WWW\",",
          "666:                 },",
          "667:                 id=\"Everything should run except Providers and lint pre-commit \"",
          "668:                 \"when full tests are needed for non-main branch\",",
          "",
          "[Removed Lines]",
          "658:                     \"skip-pre-commits\": \"check-airflow-provider-compatibility,\"",
          "659:                     \"check-extra-packages-references,check-provider-yaml-valid,identity,\"",
          "660:                     \"lint-helm-chart,mypy-providers\",",
          "",
          "[Added Lines]",
          "701:                     \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "707:                     \"needs-mypy\": \"true\",",
          "708:                     \"mypy-packages\": \"['airflow', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "707:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "708:                 \"skip-provider-tests\": \"true\",",
          "709:                 \"parallel-test-types-list-as-string\": None,",
          "710:             },",
          "711:             id=\"Nothing should run if only non-important files changed\",",
          "712:         ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:                 \"needs-mypy\": \"false\",",
          "754:                 \"mypy-packages\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "735:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "736:                 \"skip-provider-tests\": \"true\",",
          "737:                 \"parallel-test-types-list-as-string\": \"Always\",",
          "738:             },",
          "739:             id=\"No Helm tests, No providers no lint charts, should run if \"",
          "740:             \"only chart/providers changed in non-main but PROD image should be built\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:                 \"needs-mypy\": \"false\",",
          "784:                 \"mypy-packages\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "759:                 \"docs-build\": \"true\",",
          "760:                 \"docs-list-as-string\": \"apache-airflow docker-stack\",",
          "761:                 \"full-tests-needed\": \"false\",",
          "765:                 \"run-kubernetes-tests\": \"true\",",
          "766:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "767:                 \"skip-provider-tests\": \"true\",",
          "768:                 \"parallel-test-types-list-as-string\": \"Always CLI\",",
          "769:             },",
          "770:             id=\"Only CLI tests and Kubernetes tests should run if cli/chart files changed in non-main branch\",",
          "771:         ),",
          "",
          "[Removed Lines]",
          "762:                 \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,\"",
          "763:                 \"check-provider-yaml-valid,identity,lint-helm-chart,\"",
          "764:                 \"mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "809:                 \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "814:                 \"needs-mypy\": \"true\",",
          "815:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "788:                 \"run-kubernetes-tests\": \"false\",",
          "789:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "790:                 \"skip-provider-tests\": \"true\",",
          "794:                 \"parallel-test-types-list-as-string\": \"API Always BranchExternalPython BranchPythonVenv \"",
          "795:                 \"CLI Core ExternalPython Operators Other PlainAsserts PythonVenv Serialization WWW\",",
          "796:             },",
          "797:             id=\"All tests except Providers and helm lint pre-commit \"",
          "798:             \"should run if core file changed in non-main branch\",",
          "",
          "[Removed Lines]",
          "791:                 \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,\"",
          "792:                 \"check-provider-yaml-valid,identity,lint-helm-chart,\"",
          "793:                 \"mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "838:                 \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "841:                 \"needs-mypy\": \"true\",",
          "842:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "832:                 \"mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "833:                 \"skip-provider-tests\": \"true\",",
          "834:                 \"parallel-test-types-list-as-string\": None,",
          "835:             },",
          "836:             id=\"Nothing should run if only non-important files changed\",",
          "837:         ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:                 \"needs-mypy\": \"false\",",
          "883:                 \"mypy-packages\": \"[]\",",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "847:                 \"run-tests\": \"true\",",
          "848:                 \"docs-build\": \"true\",",
          "849:                 \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "852:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "853:                 \"skip-provider-tests\": \"true\",",
          "854:                 \"parallel-test-types-list-as-string\": \"Always\",",
          "855:             },",
          "856:             id=\"Only Always and docs build should run if only system tests changed\",",
          "857:         ),",
          "",
          "[Removed Lines]",
          "850:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,\"",
          "851:                 \"mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "899:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "903:                 \"needs-mypy\": \"true\",",
          "904:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "877:                 \"cncf.kubernetes common.sql facebook google hashicorp microsoft.azure \"",
          "878:                 \"microsoft.mssql mysql openlineage oracle postgres \"",
          "879:                 \"presto salesforce samba sftp ssh trino\",",
          "881:                 \"run-kubernetes-tests\": \"true\",",
          "882:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "883:                 \"skip-provider-tests\": \"false\",",
          "",
          "[Removed Lines]",
          "880:                 \"skip-pre-commits\": \"identity,mypy-dev,mypy-docs,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "930:                 \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "885:                 \"Providers[apache.beam,apache.cassandra,cncf.kubernetes,common.sql,facebook,hashicorp,\"",
          "886:                 \"microsoft.azure,microsoft.mssql,mysql,openlineage,oracle,postgres,presto,salesforce,\"",
          "887:                 \"samba,sftp,ssh,trino] Providers[google]\",",
          "888:             },",
          "889:             id=\"CLI tests and Google-related provider tests should run if cli/chart files changed but \"",
          "890:             \"prod image should be build too and k8s tests too\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "938:                 \"needs-mypy\": \"true\",",
          "939:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "906:                 \"run-tests\": \"true\",",
          "907:                 \"docs-build\": \"true\",",
          "908:                 \"docs-list-as-string\": \"apache-airflow\",",
          "911:                 \"run-kubernetes-tests\": \"false\",",
          "912:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "913:                 \"skip-provider-tests\": \"true\",",
          "914:                 \"parallel-test-types-list-as-string\": \"API Always CLI Operators WWW\",",
          "915:             },",
          "916:             id=\"No providers tests should run if only CLI/API/Operators/WWW file changed\",",
          "917:         ),",
          "",
          "[Removed Lines]",
          "909:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "910:                 \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "961:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "966:                 \"needs-mypy\": \"true\",",
          "967:                 \"mypy-packages\": \"['airflow']\",",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "927:                 \"run-tests\": \"true\",",
          "928:                 \"docs-build\": \"true\",",
          "929:                 \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "932:                 \"run-kubernetes-tests\": \"false\",",
          "933:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "934:                 \"skip-provider-tests\": \"false\",",
          "935:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "936:             },",
          "937:             id=\"Tests for all providers should run if model file changed\",",
          "938:         ),",
          "",
          "[Removed Lines]",
          "930:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "931:                 \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "983:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "988:                 \"needs-mypy\": \"true\",",
          "989:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "948:                 \"run-tests\": \"true\",",
          "949:                 \"docs-build\": \"true\",",
          "950:                 \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "953:                 \"run-kubernetes-tests\": \"false\",",
          "954:                 \"upgrade-to-newer-dependencies\": \"false\",",
          "955:                 \"skip-provider-tests\": \"false\",",
          "956:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "957:             },",
          "958:             id=\"Tests for all providers should run if any other than API/WWW/CLI/Operators file changed.\",",
          "959:         ),",
          "",
          "[Removed Lines]",
          "951:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-dev,\"",
          "952:                 \"mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "",
          "[Added Lines]",
          "1005:                 \"skip-pre-commits\": \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers,ts-compile-format-lint-www\",",
          "1010:                 \"needs-mypy\": \"true\",",
          "1011:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "990:                 \"run-tests\": \"true\",",
          "991:                 \"docs-build\": \"true\",",
          "992:                 \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "994:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "995:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "996:             },",
          "997:             id=\"All tests run on push even if unimportant file changed\",",
          "998:         ),",
          "",
          "[Removed Lines]",
          "993:                 \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "1048:                 \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "1051:                 \"needs-mypy\": \"true\",",
          "1052:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1009:                 \"needs-helm-tests\": \"false\",",
          "1010:                 \"run-tests\": \"true\",",
          "1011:                 \"docs-build\": \"true\",",
          "1014:                 \"docs-list-as-string\": \"apache-airflow docker-stack\",",
          "1015:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "1016:                 \"parallel-test-types-list-as-string\": \"API Always BranchExternalPython BranchPythonVenv \"",
          "1017:                 \"CLI Core ExternalPython Operators Other PlainAsserts PythonVenv Serialization WWW\",",
          "1018:             },",
          "1019:             id=\"All tests except Providers and Helm run on push\"",
          "1020:             \" even if unimportant file changed in non-main branch\",",
          "",
          "[Removed Lines]",
          "1012:                 \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,\"",
          "1013:                 \"check-provider-yaml-valid,identity,lint-helm-chart,mypy-providers\",",
          "",
          "[Added Lines]",
          "1069:                 \"skip-pre-commits\": \"check-airflow-provider-compatibility,check-extra-packages-references,check-provider-yaml-valid,identity,lint-helm-chart,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "1074:                 \"needs-mypy\": \"true\",",
          "1075:                 \"mypy-packages\": \"['airflow', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1032:                 \"needs-helm-tests\": \"true\",",
          "1033:                 \"run-tests\": \"true\",",
          "1034:                 \"docs-build\": \"true\",",
          "1036:                 \"docs-list-as-string\": ALL_DOCS_SELECTED_FOR_BUILD,",
          "1037:                 \"upgrade-to-newer-dependencies\": \"true\",",
          "1038:                 \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "1039:             },",
          "1040:             id=\"All tests run on push if core file changed\",",
          "1041:         ),",
          "",
          "[Removed Lines]",
          "1035:                 \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "1093:                 \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "1097:                 \"needs-mypy\": \"true\",",
          "1098:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1084:             \"needs-helm-tests\": \"true\",",
          "1085:             \"run-tests\": \"true\",",
          "1086:             \"docs-build\": \"true\",",
          "1088:             \"upgrade-to-newer-dependencies\": \"true\"",
          "1089:             if github_event in [GithubEvents.PUSH, GithubEvents.SCHEDULE]",
          "1090:             else \"false\",",
          "1091:             \"parallel-test-types-list-as-string\": ALL_CI_SELECTIVE_TEST_TYPES,",
          "1092:         },",
          "1093:         str(stderr),",
          "1094:     )",
          "",
          "[Removed Lines]",
          "1087:             \"skip-pre-commits\": \"identity\",",
          "",
          "[Added Lines]",
          "1147:             \"skip-pre-commits\": \"identity,mypy-core,mypy-dev,mypy-docs,mypy-providers\",",
          "1152:             \"needs-mypy\": \"true\",",
          "1153:             \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1577:         default_branch=\"main\",",
          "1578:     )",
          "1579:     assert_outputs_are_printed(expected_outputs, str(stderr))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1644: @pytest.mark.parametrize(",
          "1645:     \"files, expected_outputs, default_branch, pr_labels\",",
          "1646:     [",
          "1647:         pytest.param(",
          "1648:             (\"README.md\",),",
          "1649:             {",
          "1650:                 \"needs-mypy\": \"false\",",
          "1651:                 \"mypy-packages\": \"[]\",",
          "1652:             },",
          "1653:             \"main\",",
          "1654:             (),",
          "1655:             id=\"No mypy checks on non-python files\",",
          "1656:         ),",
          "1657:         pytest.param(",
          "1658:             (\"airflow/cli/file.py\",),",
          "1659:             {",
          "1660:                 \"needs-mypy\": \"true\",",
          "1661:                 \"mypy-packages\": \"['airflow']\",",
          "1662:             },",
          "1663:             \"main\",",
          "1664:             (),",
          "1665:             id=\"Airflow mypy checks on airflow regular files\",",
          "1666:         ),",
          "1667:         pytest.param(",
          "1668:             (\"airflow/models/file.py\",),",
          "1669:             {",
          "1670:                 \"needs-mypy\": \"true\",",
          "1671:                 \"mypy-packages\": \"['airflow', 'airflow/providers']\",",
          "1672:             },",
          "1673:             \"main\",",
          "1674:             (),",
          "1675:             id=\"Airflow mypy checks on airflow files that can trigger provider tests\",",
          "1676:         ),",
          "1677:         pytest.param(",
          "1678:             (\"airflow/providers/a_file.py\",),",
          "1679:             {",
          "1680:                 \"needs-mypy\": \"true\",",
          "1681:                 \"mypy-packages\": \"['airflow/providers']\",",
          "1682:             },",
          "1683:             \"main\",",
          "1684:             (),",
          "1685:             id=\"Airflow mypy checks on provider files\",",
          "1686:         ),",
          "1687:         pytest.param(",
          "1688:             (\"docs/a_file.py\",),",
          "1689:             {",
          "1690:                 \"needs-mypy\": \"true\",",
          "1691:                 \"mypy-packages\": \"['docs']\",",
          "1692:             },",
          "1693:             \"main\",",
          "1694:             (),",
          "1695:             id=\"Doc checks on doc files\",",
          "1696:         ),",
          "1697:         pytest.param(",
          "1698:             (\"dev/a_package/a_file.py\",),",
          "1699:             {",
          "1700:                 \"needs-mypy\": \"true\",",
          "1701:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "1702:             },",
          "1703:             \"main\",",
          "1704:             (),",
          "1705:             id=\"All mypy checks on def files changed (full tests needed are implicit)\",",
          "1706:         ),",
          "1707:         pytest.param(",
          "1708:             (\"readme.md\",),",
          "1709:             {",
          "1710:                 \"needs-mypy\": \"true\",",
          "1711:                 \"mypy-packages\": \"['airflow', 'airflow/providers', 'docs', 'dev']\",",
          "1712:             },",
          "1713:             \"main\",",
          "1714:             (\"full tests needed\",),",
          "1715:             id=\"All mypy checks on full tests needed\",",
          "1716:         ),",
          "1717:     ],",
          "1718: )",
          "1719: def test_mypy_matches(",
          "1720:     files: tuple[str, ...], expected_outputs: dict[str, str], default_branch: str, pr_labels: tuple[str, ...]",
          "1721: ):",
          "1722:     stderr = SelectiveChecks(",
          "1723:         files=files,",
          "1724:         commit_ref=\"HEAD\",",
          "1725:         default_branch=default_branch,",
          "1726:         github_event=GithubEvents.PULL_REQUEST,",
          "1727:         pr_labels=pr_labels,",
          "1728:     )",
          "1729:     assert_outputs_are_printed(expected_outputs, str(stderr))",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/common_precommit_utils.py||scripts/ci/pre_commit/common_precommit_utils.py": [
          "File: scripts/ci/pre_commit/common_precommit_utils.py -> scripts/ci/pre_commit/common_precommit_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     raise RuntimeError(\"Couldn't find __version__ in AST\")",
          "50:     default_branch = os.environ.get(\"DEFAULT_BRANCH\")",
          "51:     if not default_branch or default_branch == \"main\":",
          "52:         return files",
          "56: def insert_documentation(file_path: Path, content: list[str], header: str, footer: str):",
          "",
          "[Removed Lines]",
          "48: def filter_out_providers_on_non_main_branch(files: list[str]) -> list[str]:",
          "49:     \"\"\"When running build on non-main branch do not take providers into account\"\"\"",
          "53:     return [file for file in files if not file.startswith(f\"airflow{os.sep}providers\")]",
          "",
          "[Added Lines]",
          "48: def pre_process_files(files: list[str]) -> list[str]:",
          "49:     \"\"\"Pre-process files passed to mypy.",
          "54:     \"\"\"",
          "58:     result = [file for file in files if not file.startswith(f\"airflow{os.sep}providers\")]",
          "59:     if \"airflow/providers\" in files:",
          "60:         if len(files) > 1:",
          "61:             raise RuntimeError(",
          "62:                 \"When running `airflow/providers` package, you cannot run any other packages because only \"",
          "63:                 \"airflow/providers package requires --namespace-packages flag to be set\"",
          "64:             )",
          "65:         result.append(\"--namespace-packages\")",
          "66:     if \"airflow\" in files:",
          "67:         if len(files) > 1:",
          "68:             raise RuntimeError(",
          "69:                 \"When running `airflow` package, you cannot run any other packages because only \"",
          "70:                 \"airflow/providers package requires --exclude airflow/providers/.* flag to be set\"",
          "71:             )",
          "72:         result.extend([\"--exclude\", \"airflow/providers/.*\"])",
          "73:     return result",
          "",
          "---------------"
        ],
        "scripts/ci/pre_commit/pre_commit_mypy.py||scripts/ci/pre_commit/pre_commit_mypy.py": [
          "File: scripts/ci/pre_commit/pre_commit_mypy.py -> scripts/ci/pre_commit/pre_commit_mypy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from __future__ import annotations",
          "20: import os",
          "21: import sys",
          "22: from pathlib import Path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import shlex",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: from common_precommit_utils import (",
          "27:     console,",
          "29:     initialize_breeze_precommit,",
          "30:     run_command_via_breeze_shell,",
          "31: )",
          "33: initialize_breeze_precommit(__name__, __file__)",
          "37:     print(\"No files to tests. Quitting\")",
          "38:     sys.exit(0)",
          "",
          "[Removed Lines]",
          "28:     filter_out_providers_on_non_main_branch,",
          "35: files_to_test = filter_out_providers_on_non_main_branch(sys.argv[1:])",
          "36: if files_to_test == [\"--namespace-packages\"]:",
          "",
          "[Added Lines]",
          "30:     pre_process_files,",
          "36: files_to_test = pre_process_files(sys.argv[1:])",
          "37: mypy_packages = os.environ.get(\"MYPY_PACKAGES\")",
          "38: if mypy_packages:",
          "39:     files_to_test += shlex.split(mypy_packages)",
          "40: if files_to_test == [\"--namespace-packages\"] or files_to_test == []:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:         \"MOUNT_SOURCES\": \"selected\",",
          "52:     },",
          "53: )",
          "54: if res.returncode != 0:",
          "55:     upgrading = os.environ.get(\"UPGRADE_TO_NEWER_DEPENDENCIES\", \"false\") != \"false\"",
          "56:     if upgrading:",
          "57:         console.print(",
          "59:         )",
          "60:     flag = \" --upgrade-to-newer-dependencies\" if upgrading else \"\"",
          "61:     console.print(",
          "68:     )",
          "69: sys.exit(res.returncode)",
          "",
          "[Removed Lines]",
          "58:             \"[yellow]You are running mypy with the image that has dependencies upgraded automatically.\"",
          "62:         \"[yellow]If you see strange stacktraces above, \"",
          "63:         f\"run `breeze ci-image build --python 3.8{flag}` and try again. \"",
          "64:         \"You can also run `breeze down --cleanup-mypy-cache` to clean up the cache used. \"",
          "65:         \"Still sometimes diff heuristic in mypy is behaving abnormal, to double check you can \"",
          "66:         \"call `breeze static-checks --type mypy-[dev|core|providers|docs] --all-files` \"",
          "67:         'and then commit via `git commit --no-verify -m \"commit message\"`. CI will do a full check.'",
          "",
          "[Added Lines]",
          "58: ci_environment = os.environ.get(\"CI\")",
          "60:     if mypy_packages and ci_environment:",
          "61:         console.print(",
          "62:             \"[yellow]You are running mypy with the packages selected. If you want to\"",
          "63:             \"reproduce it locally, you need to run the following command:\\n\"",
          "64:         )",
          "65:         console.print(",
          "66:             f'MYPY_PACKAGES=\"{mypy_packages}\" pre-commit run --hook-stage manual mypy --all-files\\n'",
          "67:         )",
          "71:             \"[yellow]You are running mypy with the image that has dependencies upgraded automatically.\\n\"",
          "75:         \"[yellow]If you see strange stacktraces above, and can't reproduce it, please run\"",
          "76:         \" this command and try again:\\n\"",
          "78:     console.print(f\"breeze ci-image build --python 3.8{flag}\\n\")",
          "79:     console.print(\"[yellow]You can also run `breeze down --cleanup-mypy-cache` to clean up the cache used.\\n\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}