{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6201169d7a31932fb76bea61b3ada5b4f73af59",
      "candidate_info": {
        "commit_hash": "b6201169d7a31932fb76bea61b3ada5b4f73af59",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b6201169d7a31932fb76bea61b3ada5b4f73af59",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java"
        ],
        "message": "PDFBOX-4963: avoid memory leak when a SoftReference font cleared, as suggested by Maison\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882039 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java||fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java||fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java -> fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         data.close();",
          "62:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     @Override",
          "65:     protected void finalize() throws Throwable",
          "66:     {",
          "67:         super.finalize();",
          "69:         close();",
          "70:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deded15bb9d8c47184090fae37d46c623d540878",
      "candidate_info": {
        "commit_hash": "deded15bb9d8c47184090fae37d46c623d540878",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/deded15bb9d8c47184090fae37d46c623d540878",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java"
        ],
        "message": "PDFBOX-4892: clarify warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888878 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:             }",
          "169:             else",
          "170:             {",
          "172:             }",
          "173:         }",
          "",
          "[Removed Lines]",
          "171:                 LOG.warn(\"attempting to use subset font \" + font.getName() + \" without proper context\");",
          "",
          "[Added Lines]",
          "171:                 LOG.warn(\"Using the subsetted font '\" + font.getName() +",
          "172:                         \"' without a PDDocument context; call subset() before saving\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa3a96f3e26f2708be985bc972919ea81301d3cf",
      "candidate_info": {
        "commit_hash": "aa3a96f3e26f2708be985bc972919ea81301d3cf",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/aa3a96f3e26f2708be985bc972919ea81301d3cf",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java"
        ],
        "message": "PDFBOX-4892: avoid compiler warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887864 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java||pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java||pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java -> pdfbox/src/test/java/org/apache/pdfbox/text/TestTextStripper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:             {",
          "388:                 if (delta instanceof ChangeDelta)",
          "389:                 {",
          "391:                     diffPS.println(\"Org: \" + cdelta.getOriginal());",
          "392:                     diffPS.println(\"New: \" + cdelta.getRevised());",
          "393:                     diffPS.println();",
          "394:                 }",
          "395:                 else if (delta instanceof DeleteDelta)",
          "396:                 {",
          "398:                     diffPS.println(\"Org: \" + ddelta.getOriginal());",
          "399:                     diffPS.println(\"New: \" + ddelta.getRevised());",
          "400:                     diffPS.println();",
          "401:                 }",
          "402:                 else if (delta instanceof InsertDelta)",
          "403:                 {",
          "405:                     diffPS.println(\"Org: \" + idelta.getOriginal());",
          "406:                     diffPS.println(\"New: \" + idelta.getRevised());",
          "407:                     diffPS.println();",
          "",
          "[Removed Lines]",
          "390:                     ChangeDelta cdelta = (ChangeDelta) delta;",
          "397:                     DeleteDelta ddelta = (DeleteDelta) delta;",
          "404:                     InsertDelta idelta = (InsertDelta) delta;",
          "",
          "[Added Lines]",
          "390:                     ChangeDelta<String> cdelta = (ChangeDelta<String>) delta;",
          "397:                     DeleteDelta<String> ddelta = (DeleteDelta<String>) delta;",
          "404:                     InsertDelta<String> idelta = (InsertDelta<String>) delta;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9a72631220d1e696f37f09b7423d9e7bd8fe042",
      "candidate_info": {
        "commit_hash": "c9a72631220d1e696f37f09b7423d9e7bd8fe042",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/c9a72631220d1e696f37f09b7423d9e7bd8fe042",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890734 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:             throw new IOException(\"Error: destination PDF is closed.\");",
          "514:         }",
          "517:         PDDocumentCatalog srcCatalog = source.getDocumentCatalog();",
          "519:         if (isDynamicXfa(srcCatalog.getAcroForm()))",
          "520:         {",
          "521:             throw new IOException(\"Error: can't merge source document containing dynamic XFA form content.\");",
          "",
          "[Removed Lines]",
          "516:         PDDocumentCatalog destCatalog = destination.getDocumentCatalog();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "535:         }",
          "537:         int pageIndexOpenActionDest = -1;",
          "538:         if (destCatalog.getOpenAction() == null)",
          "539:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:         PDDocumentCatalog destCatalog = destination.getDocumentCatalog();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe00cd3870f6d9ec27fcb55c89409b420ade0826",
      "candidate_info": {
        "commit_hash": "fe00cd3870f6d9ec27fcb55c89409b420ade0826",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fe00cd3870f6d9ec27fcb55c89409b420ade0826",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java"
        ],
        "message": "PDFBOX-4985: apply fixes using new fixup package -  backported from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882977 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import org.apache.pdfbox.debugger.ui.ImageTypeMenu;",
          "54: import org.apache.pdfbox.debugger.ui.RenderDestinationMenu;",
          "55: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "56: import org.apache.pdfbox.pdmodel.interactive.action.PDAction;",
          "57: import org.apache.pdfbox.pdmodel.interactive.action.PDActionGoTo;",
          "58: import org.apache.pdfbox.pdmodel.interactive.action.PDActionURI;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import org.apache.pdfbox.pdmodel.fixup.AcroFormFixup;",
          "57: import org.apache.pdfbox.pdmodel.fixup.PDDocumentFixup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:     {",
          "164:         boolean repairSelected = PDFDebugger.repairAcroFormMenuItem.isSelected();",
          "166:         if (acroForm == null)",
          "167:         {",
          "168:             return;",
          "",
          "[Removed Lines]",
          "165:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(repairSelected);",
          "",
          "[Added Lines]",
          "167:         PDDocumentFixup fixup = repairSelected ? new AcroFormFixup(document) : null;",
          "168:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(fixup);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:         if (actionEvent.getSource() == PDFDebugger.repairAcroFormMenuItem)",
          "237:         {",
          "238:             boolean repairSelected = PDFDebugger.repairAcroFormMenuItem.isSelected();",
          "240:             startRendering();",
          "241:         }",
          "242:         else if (ZoomMenu.isZoomMenu(actionCommand) ||",
          "",
          "[Removed Lines]",
          "239:             document.getDocumentCatalog().getAcroForm(repairSelected);",
          "",
          "[Added Lines]",
          "243:             PDDocumentFixup fixup = repairSelected ? new AcroFormFixup(document) : null;",
          "244:             document.getDocumentCatalog().getAcroForm(fixup);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.pdfbox.pdmodel.common.PDPageLabels;",
          "37: import org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDMarkInfo;",
          "38: import org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDStructureTreeRoot;",
          "39: import org.apache.pdfbox.pdmodel.graphics.color.PDOutputIntent;",
          "40: import org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentProperties;",
          "41: import org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.pdfbox.pdmodel.fixup.AcroFormFixup;",
          "40: import org.apache.pdfbox.pdmodel.fixup.PDDocumentFixup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     private final COSDictionary root;",
          "62:     private final PDDocument document;",
          "64:     private PDAcroForm cachedAcroForm;",
          "",
          "[Removed Lines]",
          "63:     private boolean hasAcroFormFixesApplied;",
          "",
          "[Added Lines]",
          "65:     private PDDocumentFixup acroFormFixupApplied;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     public PDAcroForm getAcroForm()",
          "110:     {",
          "112:     }",
          "",
          "[Removed Lines]",
          "111:         return getAcroForm(true);",
          "",
          "[Added Lines]",
          "113:         return getAcroForm(new AcroFormFixup(document));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:     {",
          "130:         {",
          "131:             cachedAcroForm = null;",
          "133:         }",
          "135:         {",
          "137:         }",
          "139:         if (cachedAcroForm == null)",
          "140:         {",
          "141:             COSDictionary dict = (COSDictionary)root.getDictionaryObject(COSName.ACRO_FORM);",
          "143:         }",
          "144:         return cachedAcroForm;",
          "145:     }",
          "",
          "[Removed Lines]",
          "127:     public PDAcroForm getAcroForm(boolean applyFixes)",
          "129:         if (!hasAcroFormFixesApplied && applyFixes)",
          "132:             hasAcroFormFixesApplied = true;",
          "134:         else if (hasAcroFormFixesApplied && !applyFixes)",
          "136:             LOG.warn(\"AcroForm content has already been retrieved with applyFixes set to true - original content changed because of that\");",
          "142:             cachedAcroForm = dict == null ? null : new PDAcroForm(document, dict, applyFixes);",
          "",
          "[Added Lines]",
          "129:     public PDAcroForm getAcroForm(PDDocumentFixup acroFormFixup)",
          "131:         if (acroFormFixup != null && acroFormFixup != acroFormFixupApplied)",
          "133:             acroFormFixup.apply();",
          "135:             acroFormFixupApplied =  acroFormFixup;",
          "137:         else if (acroFormFixupApplied != null)",
          "139:             LOG.debug(\"AcroForm content has already been retrieved with fixes applied - original content changed because of that\");",
          "145:             cachedAcroForm = dict == null ? null : new PDAcroForm(document, dict);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AbstractFixup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup;",
          "19: import org.apache.pdfbox.pdmodel.PDDocument;",
          "21: public abstract class AbstractFixup implements PDDocumentFixup",
          "22: {",
          "23:     protected PDDocument document;",
          "25:     protected AbstractFixup(PDDocument document)",
          "26:     {",
          "27:         this.document = document;",
          "28:     }",
          "29: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/AcroFormFixup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup;",
          "19: import org.apache.pdfbox.pdmodel.PDDocument;",
          "20: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormDefaultsProcessor;",
          "21: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormGenerateAppearancesProcessor;",
          "22: import org.apache.pdfbox.pdmodel.fixup.processor.AcroFormOrphanWidgetsProcessor;",
          "24: public class AcroFormFixup extends AbstractFixup",
          "25: {",
          "26:     public AcroFormFixup(PDDocument document)",
          "27:     {",
          "28:         super(document);",
          "29:     }",
          "31:     @Override",
          "32:     public void apply() {",
          "33:         new AcroFormOrphanWidgetsProcessor(document).process();",
          "34:         new AcroFormDefaultsProcessor(document).process();",
          "35:         new AcroFormGenerateAppearancesProcessor(document).process();",
          "36:     }",
          "37: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/PDDocumentFixup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup;",
          "19: public interface PDDocumentFixup",
          "20: {",
          "21:     public void apply();",
          "22: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AbstractProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: import org.apache.pdfbox.pdmodel.PDDocument;",
          "21: public abstract class AbstractProcessor implements PDDocumentProcessor",
          "22: {",
          "23:     protected PDDocument document;",
          "25:     protected AbstractProcessor(PDDocument document)",
          "26:     {",
          "27:         this.document = document;",
          "28:     }",
          "29: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormDefaultsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: import org.apache.pdfbox.cos.COSDictionary;",
          "20: import org.apache.pdfbox.cos.COSName;",
          "21: import org.apache.pdfbox.pdmodel.PDDocument;",
          "22: import org.apache.pdfbox.pdmodel.PDResources;",
          "23: import org.apache.pdfbox.pdmodel.font.PDType1Font;",
          "24: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "38: public class AcroFormDefaultsProcessor extends AbstractProcessor",
          "39: {",
          "40:     public AcroFormDefaultsProcessor(PDDocument document)",
          "41:     {",
          "42:         super(document);",
          "43:     }",
          "45:     @Override",
          "46:     public void process() {",
          "54:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(null);",
          "55:         if (acroForm != null)",
          "56:         {",
          "57:             verifyOrCreateDefaults(acroForm);",
          "58:         }",
          "59:     }",
          "69:     private void verifyOrCreateDefaults(PDAcroForm acroForm)",
          "70:     {",
          "71:         final String adobeDefaultAppearanceString = \"/Helv 0 Tf 0 g \";",
          "74:         if (acroForm.getDefaultAppearance().length() == 0)",
          "75:         {",
          "76:             acroForm.setDefaultAppearance(adobeDefaultAppearanceString);",
          "77:             acroForm.getCOSObject().setNeedToBeUpdated(true);",
          "78:         }",
          "81:         PDResources defaultResources = acroForm.getDefaultResources();",
          "82:         if (defaultResources == null)",
          "83:         {",
          "84:             defaultResources = new PDResources();",
          "85:             acroForm.setDefaultResources(defaultResources);",
          "86:             acroForm.getCOSObject().setNeedToBeUpdated(true);",
          "87:         }",
          "95:         COSDictionary fontDict = defaultResources.getCOSObject().getCOSDictionary(COSName.FONT);",
          "96:         if (fontDict == null)",
          "97:         {",
          "98:             fontDict = new COSDictionary();",
          "99:             defaultResources.getCOSObject().setItem(COSName.FONT, fontDict);",
          "100:         }",
          "101:         if (!fontDict.containsKey(COSName.HELV))",
          "102:         {",
          "103:             defaultResources.put(COSName.HELV, PDType1Font.HELVETICA);",
          "104:             defaultResources.getCOSObject().setNeedToBeUpdated(true);",
          "105:             fontDict.setNeedToBeUpdated(true);",
          "106:         }",
          "107:         if (!fontDict.containsKey(COSName.ZA_DB))",
          "108:         {",
          "109:             defaultResources.put(COSName.ZA_DB, PDType1Font.ZAPF_DINGBATS);",
          "110:             defaultResources.getCOSObject().setNeedToBeUpdated(true);",
          "111:             fontDict.setNeedToBeUpdated(true);",
          "112:         }",
          "113:     }",
          "114: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormGenerateAppearancesProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: import java.io.IOException;",
          "21: import org.apache.commons.logging.Log;",
          "22: import org.apache.commons.logging.LogFactory;",
          "23: import org.apache.pdfbox.pdmodel.PDDocument;",
          "24: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "26: public class AcroFormGenerateAppearancesProcessor extends AbstractProcessor",
          "27: {",
          "29:     private static final Log LOG = LogFactory.getLog(AcroFormGenerateAppearancesProcessor.class);",
          "31:     public AcroFormGenerateAppearancesProcessor(PDDocument document)",
          "32:     {",
          "33:         super(document);",
          "34:     }",
          "36:     @Override",
          "37:     public void process() {",
          "45:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(null);",
          "49:         if (acroForm != null && acroForm.getNeedAppearances())",
          "50:         {",
          "51:             try",
          "52:             {",
          "53:                 LOG.debug(\"trying to generate appearance streams for fields as NeedAppearances is true()\");",
          "54:                 acroForm.refreshAppearances();",
          "55:                  acroForm.setNeedAppearances(false);",
          "56:             }",
          "57:             catch (IOException ioe)",
          "58:             {",
          "59:                 LOG.debug(\"couldn't generate appearance stream for some fields - check output\");",
          "60:                 LOG.debug(ioe.getMessage());",
          "61:             }",
          "62:         }",
          "63:     }",
          "64: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/AcroFormOrphanWidgetsProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: import java.io.IOException;",
          "20: import java.util.List;",
          "22: import org.apache.commons.logging.Log;",
          "23: import org.apache.commons.logging.LogFactory;",
          "24: import org.apache.fontbox.ttf.TrueTypeFont;",
          "25: import org.apache.pdfbox.cos.COSName;",
          "26: import org.apache.pdfbox.pdmodel.PDDocument;",
          "27: import org.apache.pdfbox.pdmodel.PDPage;",
          "28: import org.apache.pdfbox.pdmodel.PDResources;",
          "29: import org.apache.pdfbox.pdmodel.font.FontMapper;",
          "30: import org.apache.pdfbox.pdmodel.font.FontMappers;",
          "31: import org.apache.pdfbox.pdmodel.font.FontMapping;",
          "32: import org.apache.pdfbox.pdmodel.font.PDType0Font;",
          "33: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
          "34: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "35: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "36: import org.apache.pdfbox.pdmodel.interactive.form.PDField;",
          "37: import org.apache.pdfbox.pdmodel.interactive.form.PDFieldFactory;",
          "38: import org.apache.pdfbox.pdmodel.interactive.form.PDVariableText;",
          "45: public class AcroFormOrphanWidgetsProcessor extends AbstractProcessor",
          "46: {",
          "48:     private static final Log LOG = LogFactory.getLog(AcroFormOrphanWidgetsProcessor.class);",
          "50:     public AcroFormOrphanWidgetsProcessor(PDDocument document)",
          "51:     {",
          "52:         super(document);",
          "53:     }",
          "55:     @Override",
          "56:     public void process() {",
          "64:         PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm(null);",
          "68:         if (acroForm != null && acroForm.getNeedAppearances() && acroForm.getFields().isEmpty())",
          "69:         {",
          "70:             resolveFieldsFromWidgets(acroForm);",
          "71:         }",
          "72:     }",
          "74:     private void resolveFieldsFromWidgets(PDAcroForm acroForm)",
          "75:     {",
          "76:         LOG.debug(\"rebuilding fields from widgets\");",
          "77:         List<PDField> fields = acroForm.getFields();",
          "78:         for (PDPage page : document.getPages())",
          "79:         {",
          "80:             try",
          "81:             {",
          "82:                 List<PDAnnotation> annots = page.getAnnotations();",
          "83:                 for (PDAnnotation annot : annots)",
          "84:                 {",
          "85:                     if (annot instanceof PDAnnotationWidget)",
          "86:                     {",
          "87:                         PDField field = PDFieldFactory.createField(acroForm, annot.getCOSObject(), null);",
          "88:                         if (field instanceof PDVariableText)",
          "89:                         {",
          "90:                             ensureFontResources(acroForm.getDefaultResources(), (PDVariableText) field);",
          "91:                         }",
          "92:                         fields.add(field);",
          "93:                     }",
          "94:                 }",
          "95:             }",
          "96:             catch (IOException ioe)",
          "97:             {",
          "98:                 LOG.debug(\"couldn't read annotations for page \" + ioe.getMessage());",
          "99:             }",
          "100:         }",
          "101:         acroForm.setFields(fields);",
          "102:     }",
          "113:     private void ensureFontResources(PDResources defaultResources, PDVariableText field)",
          "114:     {",
          "115:         String daString = field.getDefaultAppearance();",
          "116:         if (daString.startsWith(\"/\") && daString.length() > 1)",
          "117:         {",
          "118:             COSName fontName = COSName.getPDFName(daString.substring(1, daString.indexOf(\" \")));",
          "119:             try{",
          "120:                 if (defaultResources != null && defaultResources.getFont(fontName) == null)",
          "121:                 {",
          "122:                     LOG.debug(\"trying to add missing font resource for field \" + field.getFullyQualifiedName());",
          "123:                     FontMapper mapper = FontMappers.instance();",
          "124:                     FontMapping<TrueTypeFont> fontMapping = mapper.getTrueTypeFont(fontName.getName() , null);",
          "125:                     if (fontMapping != null)",
          "126:                     {",
          "127:                         PDType0Font pdFont = PDType0Font.load(document, fontMapping.getFont(), false);",
          "128:                         LOG.debug(\"looked up font for \" + fontName.getName() + \" - found \" + fontMapping.getFont().getName());",
          "129:                         defaultResources.put(fontName, pdFont);",
          "130:                     }",
          "131:                     else",
          "132:                     {",
          "133:                         LOG.debug(\"no suitable font found for field \" + field.getFullyQualifiedName() + \" for font name \" + fontName.getName());",
          "134:                     }",
          "135:                 }",
          "136:             }",
          "137:             catch (IOException ioe)",
          "138:             {",
          "139:                 LOG.debug(\"Unable to handle font resources for field \" + field.getFullyQualifiedName() + \": \" + ioe.getMessage());",
          "140:             }",
          "141:         }",
          "142:     }",
          "143: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fixup/processor/PDDocumentProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.fixup.processor;",
          "19: public interface PDDocumentProcessor",
          "20: {",
          "21:     public void process();",
          "22: }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.commons.logging.Log;",
          "33: import org.apache.commons.logging.LogFactory;",
          "35: import org.apache.pdfbox.cos.COSArray;",
          "36: import org.apache.pdfbox.cos.COSBase;",
          "37: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "[Removed Lines]",
          "34: import org.apache.fontbox.ttf.TrueTypeFont;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.apache.pdfbox.pdmodel.fdf.FDFDictionary;",
          "50: import org.apache.pdfbox.pdmodel.fdf.FDFDocument;",
          "51: import org.apache.pdfbox.pdmodel.fdf.FDFField;",
          "57: import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
          "58: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
          "59: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
          "",
          "[Removed Lines]",
          "52: import org.apache.pdfbox.pdmodel.font.FontMapper;",
          "53: import org.apache.pdfbox.pdmodel.font.FontMappers;",
          "54: import org.apache.pdfbox.pdmodel.font.FontMapping;",
          "55: import org.apache.pdfbox.pdmodel.font.PDType0Font;",
          "56: import org.apache.pdfbox.pdmodel.font.PDType1Font;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:     public PDAcroForm(PDDocument doc, COSDictionary form)",
          "123:     {",
          "124:         document = doc;",
          "125:         dictionary = form;",
          "155:     }",
          "",
          "[Removed Lines]",
          "101:     {",
          "102:         this(doc, form, true);",
          "103:     }",
          "122:     public PDAcroForm(PDDocument doc, COSDictionary form, boolean applyFixes)",
          "127:         if (applyFixes) {",
          "128:             verifyOrCreateDefaults();",
          "132:             if (getNeedAppearances() && getFields().isEmpty())",
          "133:             {",
          "134:                 resolveFieldsFromWidgets(this);",
          "135:             }",
          "139:             if (getNeedAppearances())",
          "140:             {",
          "141:                 try",
          "142:                 {",
          "143:                     LOG.debug(\"trying to generate appearance streams for fields as NeedAppearances is true()\");",
          "144:                     refreshAppearances();",
          "145:                     setNeedAppearances(false);",
          "146:                 }",
          "147:                 catch (IOException ioe)",
          "148:                 {",
          "149:                     LOG.debug(\"couldn't generate appearance stream for some fields - check output\");",
          "150:                     LOG.debug(ioe.getMessage());",
          "151:                 }",
          "152:             }",
          "154:         }",
          "166:     private void verifyOrCreateDefaults()",
          "167:     {",
          "168:         final String adobeDefaultAppearanceString = \"/Helv 0 Tf 0 g \";",
          "171:         if (getDefaultAppearance().length() == 0)",
          "172:         {",
          "173:             setDefaultAppearance(adobeDefaultAppearanceString);",
          "174:             dictionary.setNeedToBeUpdated(true);",
          "175:         }",
          "178:         PDResources defaultResources = getDefaultResources();",
          "179:         if (defaultResources == null)",
          "180:         {",
          "181:             defaultResources = new PDResources();",
          "182:             setDefaultResources(defaultResources);",
          "183:             dictionary.setNeedToBeUpdated(true);",
          "184:         }",
          "192:         COSDictionary fontDict = defaultResources.getCOSObject().getCOSDictionary(COSName.FONT);",
          "193:         if (fontDict == null)",
          "194:         {",
          "195:             fontDict = new COSDictionary();",
          "196:             defaultResources.getCOSObject().setItem(COSName.FONT, fontDict);",
          "197:         }",
          "198:         if (!fontDict.containsKey(COSName.HELV))",
          "199:         {",
          "200:             defaultResources.put(COSName.HELV, PDType1Font.HELVETICA);",
          "201:             defaultResources.getCOSObject().setNeedToBeUpdated(true);",
          "202:             fontDict.setNeedToBeUpdated(true);",
          "203:         }",
          "204:         if (!fontDict.containsKey(COSName.ZA_DB))",
          "205:         {",
          "206:             defaultResources.put(COSName.ZA_DB, PDType1Font.ZAPF_DINGBATS);",
          "207:             defaultResources.getCOSObject().setNeedToBeUpdated(true);",
          "208:             fontDict.setNeedToBeUpdated(true);",
          "209:         }",
          "210:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "790:     {",
          "791:         this.scriptingHandler = scriptingHandler;",
          "792:     }",
          "865:     private Matrix resolveTransformationMatrix(PDAnnotation annotation, PDAppearanceStream appearanceStream)",
          "866:     {",
          "",
          "[Removed Lines]",
          "794:     private void resolveFieldsFromWidgets(PDAcroForm acroForm)",
          "795:     {",
          "797:         LOG.debug(\"rebuilding fields from widgets\");",
          "798:         List<PDField> fields = acroForm.getFields();",
          "799:         for (PDPage page : document.getPages())",
          "800:         {",
          "801:             try",
          "802:             {",
          "803:                 List<PDAnnotation> annots = page.getAnnotations();",
          "804:                 for (PDAnnotation annot : annots)",
          "805:                 {",
          "806:                     if (annot instanceof PDAnnotationWidget)",
          "807:                     {",
          "808:                         PDField field = PDFieldFactory.createField(acroForm, annot.getCOSObject(), null);",
          "809:                         if (field instanceof PDVariableText)",
          "810:                         {",
          "811:                             ensureFontResources((PDVariableText) field);",
          "812:                         }",
          "813:                         fields.add(field);",
          "814:                     }",
          "815:                 }",
          "816:             }",
          "817:             catch (IOException ioe)",
          "818:             {",
          "819:                 LOG.debug(\"couldn't read annotations for page \" + ioe.getMessage());",
          "820:             }",
          "821:         }",
          "822:         acroForm.setFields(fields);",
          "823:     }",
          "834:     private void ensureFontResources(PDVariableText field)",
          "835:     {",
          "836:         String daString = field.getDefaultAppearance();",
          "837:         if (daString.startsWith(\"/\") && daString.length() > 1)",
          "838:         {",
          "839:             COSName fontName = COSName.getPDFName(daString.substring(1, daString.indexOf(\" \")));",
          "840:             try{",
          "841:                 if (getDefaultResources() != null && getDefaultResources().getFont(fontName) == null)",
          "842:                 {",
          "843:                     LOG.debug(\"trying to add missing font resource for field \" + field.getFullyQualifiedName());",
          "844:                     FontMapper mapper = FontMappers.instance();",
          "845:                     FontMapping<TrueTypeFont> fontMapping = mapper.getTrueTypeFont(fontName.getName() , null);",
          "846:                     if (fontMapping != null)",
          "847:                     {",
          "848:                         PDType0Font pdFont = PDType0Font.load(getDocument(), fontMapping.getFont(), false);",
          "849:                         LOG.debug(\"looked up font for \" + fontName.getName() + \" - found \" + fontMapping.getFont().getName());",
          "850:                         getDefaultResources().put(fontName, pdFont);",
          "851:                     }",
          "852:                     else",
          "853:                     {",
          "854:                         LOG.debug(\"no suitable font found for field \" + field.getFullyQualifiedName() + \" for font name \" + fontName.getName());",
          "855:                     }",
          "856:                 }",
          "857:             }",
          "858:             catch (IOException ioe)",
          "859:             {",
          "860:                 LOG.debug(\"Unable to handle font resources for field \" + field.getFullyQualifiedName() + \": \" + ioe.getMessage());",
          "861:             }",
          "862:         }",
          "863:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: {",
          "31:     private static final String FIELD_TYPE_TEXT = \"Tx\";",
          "",
          "[Removed Lines]",
          "28: final class PDFieldFactory",
          "",
          "[Added Lines]",
          "28: public final class PDFieldFactory",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     {",
          "50:         String fieldType = findFieldType(field);",
          "",
          "[Removed Lines]",
          "48:     static PDField createField(PDAcroForm form, COSDictionary field, PDNonTerminalField parent)",
          "",
          "[Added Lines]",
          "48:     public static PDField createField(PDAcroForm form, COSDictionary field, PDNonTerminalField parent)",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.pdfbox.io.IOUtils;",
          "28: import org.apache.pdfbox.pdmodel.PDDocument;",
          "29: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "31: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.pdfbox.pdmodel.fixup.AcroFormFixup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         {",
          "58:             testPdf = PDDocument.load(new URL(acrobatSourceUrl).openStream());",
          "59:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "61:             numFormFieldsByAcrobat = acroForm.getFields().size();",
          "62:         }",
          "63:         finally",
          "",
          "[Removed Lines]",
          "60:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "",
          "[Added Lines]",
          "60:             PDAcroForm acroForm = catalog.getAcroForm(null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         {",
          "104:             testPdf = PDDocument.load(new URL(acrobatSourceUrl).openStream());",
          "105:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "107:             numFormFieldsByAcrobat = acroForm.getFields().size();",
          "108:         }",
          "109:         finally",
          "",
          "[Removed Lines]",
          "106:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "",
          "[Added Lines]",
          "106:             PDAcroForm acroForm = catalog.getAcroForm(null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "120:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "121:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "123:             assertEquals(\"After rebuild there shall be \" + numFormFieldsByAcrobat + \" fields\", numFormFieldsByAcrobat, acroForm.getFields().size());",
          "124:         }",
          "125:         finally",
          "",
          "[Removed Lines]",
          "122:             PDAcroForm acroForm = catalog.getAcroForm(true);",
          "",
          "[Added Lines]",
          "122:             PDAcroForm acroForm = catalog.getAcroForm(new AcroFormFixup(testPdf));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "154:             numCosFormFields = cosFields.size();",
          "155:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "157:             assertEquals(\"After call without correction there shall be \" + numCosFormFields + \" fields\", numCosFormFields, acroForm.getFields().size());",
          "158:         }",
          "159:         finally",
          "",
          "[Removed Lines]",
          "156:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "",
          "[Added Lines]",
          "156:             PDAcroForm acroForm = catalog.getAcroForm(null);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:             PDDocumentCatalog documentCatalog = pdfDocument.getDocumentCatalog();",
          "",
          "[Removed Lines]",
          "271:             PDAcroForm theAcroForm = documentCatalog.getAcroForm(false);",
          "",
          "[Added Lines]",
          "271:             PDAcroForm theAcroForm = documentCatalog.getAcroForm(null);",
          "",
          "---------------"
        ],
        "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java -> preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         PDDocumentCatalog catalog = ctx.getDocument().getDocumentCatalog();",
          "56:         if (catalog != null)",
          "57:         {",
          "59:             if (acroForm != null)",
          "60:             {",
          "61:                 checkNeedAppearences(ctx, acroForm);",
          "",
          "[Removed Lines]",
          "58:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "",
          "[Added Lines]",
          "58:             PDAcroForm acroForm = catalog.getAcroForm(null);",
          "",
          "---------------"
        ]
      }
    }
  ]
}