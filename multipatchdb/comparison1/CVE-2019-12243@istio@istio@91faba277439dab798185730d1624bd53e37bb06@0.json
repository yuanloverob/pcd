{
  "cve_id": "CVE-2019-12243",
  "cve_desc": "Istio 1.1.x through 1.1.6 has Incorrect Access Control.",
  "repo": "istio/istio",
  "patch_hash": "91faba277439dab798185730d1624bd53e37bb06",
  "patch_info": {
    "commit_hash": "91faba277439dab798185730d1624bd53e37bb06",
    "repo": "istio/istio",
    "commit_url": "https://github.com/istio/istio/pull/13893/commits/91faba277439dab798185730d1624bd53e37bb06",
    "files": [
      "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
      "pilot/pkg/networking/plugin/mixer/mixer.go"
    ],
    "message": "fix 13868\n\nSigned-off-by: Kuat Yessenov <kuat@google.com>",
    "before_after_code_files": [
      "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go||mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
      "pilot/pkg/networking/plugin/mixer/mixer.go||pilot/pkg/networking/plugin/mixer/mixer.go"
    ]
  },
  "patch_diff": {
    "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go||mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go": [
      "File: mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go -> mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:  }",
      "141:  snapshots := cache.NewSnapshotCache(true, mock{}, nil)",
      "143:  server := xds.NewServer(snapshots, nil)",
      "144:  discovery.RegisterAggregatedDiscoveryServiceServer(grpcServer, server)",
      "145:  go func() {",
      "",
      "[Removed Lines]",
      "142:  snapshots.SetSnapshot(id, makeSnapshot(s, t))",
      "",
      "[Added Lines]",
      "142:  snapshots.SetSnapshot(id, makeSnapshot(s, t, model.SidecarProxy))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:  defer s.TearDown()",
      "157:  s.WaitEnvoyReady()",
      "160:  if _, _, err := env.HTTPGet(fmt.Sprintf(\"http://localhost:%d/echo\", s.Ports().ClientProxyPort)); err != nil {",
      "161:   t.Errorf(\"Failed in request: %v\", err)",
      "162:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "158:  if _, _, err := env.HTTPGet(fmt.Sprintf(\"http://localhost:%d/echo\", s.Ports().ClientProxyPort)); err != nil {",
      "159:   t.Errorf(\"Failed in request: %v\", err)",
      "160:  }",
      "161:  s.VerifyCheck(\"tcp-inbound\", checkAttributesOkInbound)",
      "164:  snapshots.SetSnapshot(id, makeSnapshot(s, t, model.Router))",
      "165:  s.WaitEnvoyReady()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "201:  }",
      "202:  mesh = &model.Environment{",
      "203:   Mesh: &meshconfig.MeshConfig{",
      "207:   },",
      "208:   ServiceDiscovery: mock{},",
      "209:  }",
      "",
      "[Removed Lines]",
      "204:    MixerCheckServer:            \"mixer_server:9091\",",
      "205:    MixerReportServer:           \"mixer_server:9091\",",
      "206:    EnableClientSidePolicyCheck: true,",
      "",
      "[Added Lines]",
      "210:    MixerCheckServer:  \"mixer_server:9091\",",
      "211:    MixerReportServer: \"mixer_server:9091\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "212:    model.Hostname(\"svc.ns3\"): &svc,",
      "213:   },",
      "214:  }",
      "235: )",
      "237: func makeListener(port uint16, cluster string) *v2.Listener {",
      "",
      "[Removed Lines]",
      "215:  serverParams = plugin.InputParams{",
      "216:   ListenerProtocol: plugin.ListenerProtocolTCP,",
      "217:   Env:              mesh,",
      "218:   Node: &model.Proxy{",
      "219:    ID:   \"pod1.ns1\",",
      "220:    Type: model.SidecarProxy,",
      "221:   },",
      "222:   ServiceInstance: &model.ServiceInstance{Service: &svc},",
      "223:   Push:            &pushContext,",
      "224:  }",
      "225:  clientParams = plugin.InputParams{",
      "226:   ListenerProtocol: plugin.ListenerProtocolTCP,",
      "227:   Env:              mesh,",
      "228:   Node: &model.Proxy{",
      "229:    ID:   \"pod2.ns2\",",
      "230:    Type: model.SidecarProxy,",
      "231:   },",
      "232:   Service: &svc,",
      "233:   Push:    &pushContext,",
      "234:  }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "252:  }",
      "253: }",
      "256:  clientListener := makeListener(s.Ports().ClientProxyPort, \"outbound|||svc.ns3\")",
      "257:  serverListener := makeListener(s.Ports().ServerProxyPort, \"inbound|||backend\")",
      "259:  p := mixer.NewPlugin()",
      "261:  serverMutable := plugin.MutableObjects{Listener: serverListener, FilterChains: []plugin.FilterChain{{}}}",
      "262:  if err := p.OnInboundListener(&serverParams, &serverMutable); err != nil {",
      "263:   t.Error(err)",
      "",
      "[Removed Lines]",
      "255: func makeSnapshot(s *env.TestSetup, t *testing.T) cache.Snapshot {",
      "",
      "[Added Lines]",
      "240: func makeSnapshot(s *env.TestSetup, t *testing.T, node model.NodeType) cache.Snapshot {",
      "246:  serverParams := plugin.InputParams{",
      "247:   ListenerProtocol: plugin.ListenerProtocolTCP,",
      "248:   Env:              mesh,",
      "249:   Node: &model.Proxy{",
      "250:    ID:   \"pod1.ns1\",",
      "251:    Type: node,",
      "252:   },",
      "253:   ServiceInstance: &model.ServiceInstance{Service: &svc},",
      "254:   Push:            &pushContext,",
      "255:  }",
      "256:  clientParams := plugin.InputParams{",
      "257:   ListenerProtocol: plugin.ListenerProtocolTCP,",
      "258:   Env:              mesh,",
      "259:   Node: &model.Proxy{",
      "260:    ID:   \"pod2.ns2\",",
      "261:    Type: node,",
      "262:   },",
      "263:   Service: &svc,",
      "264:   Push:    &pushContext,",
      "265:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "271:  clientListener.FilterChains[0].Filters = append(clientMutable.FilterChains[0].TCP, clientListener.FilterChains[0].Filters...)",
      "273:  return cache.Snapshot{",
      "275:  }",
      "276: }",
      "",
      "[Removed Lines]",
      "274:   Listeners: cache.NewResources(\"tcp\", []cache.Resource{clientListener, serverListener}),",
      "",
      "[Added Lines]",
      "280:   Listeners: cache.NewResources(string(node), []cache.Resource{clientListener, serverListener}),",
      "",
      "---------------"
    ],
    "pilot/pkg/networking/plugin/mixer/mixer.go||pilot/pkg/networking/plugin/mixer/mixer.go": [
      "File: pilot/pkg/networking/plugin/mixer/mixer.go -> pilot/pkg/networking/plugin/mixer/mixer.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "494: func buildInboundTCPFilter(mesh *meshconfig.MeshConfig, attrs attributes, node *model.Proxy) listener.Filter {",
      "495:  config := &mccpb.TcpClientConfig{",
      "497:   MixerAttributes:   &mpb.Attributes{Attributes: attrs},",
      "498:   Transport:         buildTransport(mesh, node),",
      "499:  }",
      "",
      "[Removed Lines]",
      "496:   DisableCheckCalls: disablePolicyChecks(outbound, mesh, node),",
      "",
      "[Added Lines]",
      "496:   DisableCheckCalls: disablePolicyChecks(inbound, mesh, node),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "20f2381b7234706d80e4f9973f670f5477a84a8c",
      "candidate_info": {
        "commit_hash": "20f2381b7234706d80e4f9973f670f5477a84a8c",
        "repo": "istio/istio",
        "commit_url": "https://github.com/istio/istio/commit/20f2381b7234706d80e4f9973f670f5477a84a8c",
        "files": [
          "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
          "pilot/pkg/networking/plugin/mixer/mixer.go"
        ],
        "message": "fix 13868 (#13893)\n\nSigned-off-by: Kuat Yessenov <kuat@google.com>",
        "before_after_code_files": [
          "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go||mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
          "pilot/pkg/networking/plugin/mixer/mixer.go||pilot/pkg/networking/plugin/mixer/mixer.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/istio/istio/pull/13893"
        ],
        "olp_code_files": {
          "patch": [
            "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go||mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
            "pilot/pkg/networking/plugin/mixer/mixer.go||pilot/pkg/networking/plugin/mixer/mixer.go"
          ],
          "candidate": [
            "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go||mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
            "pilot/pkg/networking/plugin/mixer/mixer.go||pilot/pkg/networking/plugin/mixer/mixer.go"
          ]
        }
      },
      "candidate_diff": {
        "mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go||mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go": [
          "File: mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go -> mixer/test/client/pilotplugin_tcp/pilotplugin_tcp_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  }",
          "141:  snapshots := cache.NewSnapshotCache(true, mock{}, nil)",
          "143:  server := xds.NewServer(snapshots, nil)",
          "144:  discovery.RegisterAggregatedDiscoveryServiceServer(grpcServer, server)",
          "145:  go func() {",
          "",
          "[Removed Lines]",
          "142:  snapshots.SetSnapshot(id, makeSnapshot(s, t))",
          "",
          "[Added Lines]",
          "142:  snapshots.SetSnapshot(id, makeSnapshot(s, t, model.SidecarProxy))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  defer s.TearDown()",
          "157:  s.WaitEnvoyReady()",
          "160:  if _, _, err := env.HTTPGet(fmt.Sprintf(\"http://localhost:%d/echo\", s.Ports().ClientProxyPort)); err != nil {",
          "161:   t.Errorf(\"Failed in request: %v\", err)",
          "162:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:  if _, _, err := env.HTTPGet(fmt.Sprintf(\"http://localhost:%d/echo\", s.Ports().ClientProxyPort)); err != nil {",
          "159:   t.Errorf(\"Failed in request: %v\", err)",
          "160:  }",
          "161:  s.VerifyCheck(\"tcp-inbound\", checkAttributesOkInbound)",
          "164:  snapshots.SetSnapshot(id, makeSnapshot(s, t, model.Router))",
          "165:  s.WaitEnvoyReady()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  }",
          "202:  mesh = &model.Environment{",
          "203:   Mesh: &meshconfig.MeshConfig{",
          "207:   },",
          "208:   ServiceDiscovery: mock{},",
          "209:  }",
          "",
          "[Removed Lines]",
          "204:    MixerCheckServer:            \"mixer_server:9091\",",
          "205:    MixerReportServer:           \"mixer_server:9091\",",
          "206:    EnableClientSidePolicyCheck: true,",
          "",
          "[Added Lines]",
          "210:    MixerCheckServer:  \"mixer_server:9091\",",
          "211:    MixerReportServer: \"mixer_server:9091\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:    model.Hostname(\"svc.ns3\"): &svc,",
          "213:   },",
          "214:  }",
          "235: )",
          "237: func makeListener(port uint16, cluster string) *v2.Listener {",
          "",
          "[Removed Lines]",
          "215:  serverParams = plugin.InputParams{",
          "216:   ListenerProtocol: plugin.ListenerProtocolTCP,",
          "217:   Env:              mesh,",
          "218:   Node: &model.Proxy{",
          "219:    ID:   \"pod1.ns1\",",
          "220:    Type: model.SidecarProxy,",
          "221:   },",
          "222:   ServiceInstance: &model.ServiceInstance{Service: &svc},",
          "223:   Push:            &pushContext,",
          "224:  }",
          "225:  clientParams = plugin.InputParams{",
          "226:   ListenerProtocol: plugin.ListenerProtocolTCP,",
          "227:   Env:              mesh,",
          "228:   Node: &model.Proxy{",
          "229:    ID:   \"pod2.ns2\",",
          "230:    Type: model.SidecarProxy,",
          "231:   },",
          "232:   Service: &svc,",
          "233:   Push:    &pushContext,",
          "234:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:  }",
          "253: }",
          "256:  clientListener := makeListener(s.Ports().ClientProxyPort, \"outbound|||svc.ns3\")",
          "257:  serverListener := makeListener(s.Ports().ServerProxyPort, \"inbound|||backend\")",
          "259:  p := mixer.NewPlugin()",
          "261:  serverMutable := plugin.MutableObjects{Listener: serverListener, FilterChains: []plugin.FilterChain{{}}}",
          "262:  if err := p.OnInboundListener(&serverParams, &serverMutable); err != nil {",
          "263:   t.Error(err)",
          "",
          "[Removed Lines]",
          "255: func makeSnapshot(s *env.TestSetup, t *testing.T) cache.Snapshot {",
          "",
          "[Added Lines]",
          "240: func makeSnapshot(s *env.TestSetup, t *testing.T, node model.NodeType) cache.Snapshot {",
          "246:  serverParams := plugin.InputParams{",
          "247:   ListenerProtocol: plugin.ListenerProtocolTCP,",
          "248:   Env:              mesh,",
          "249:   Node: &model.Proxy{",
          "250:    ID:   \"pod1.ns1\",",
          "251:    Type: node,",
          "252:   },",
          "253:   ServiceInstance: &model.ServiceInstance{Service: &svc},",
          "254:   Push:            &pushContext,",
          "255:  }",
          "256:  clientParams := plugin.InputParams{",
          "257:   ListenerProtocol: plugin.ListenerProtocolTCP,",
          "258:   Env:              mesh,",
          "259:   Node: &model.Proxy{",
          "260:    ID:   \"pod2.ns2\",",
          "261:    Type: node,",
          "262:   },",
          "263:   Service: &svc,",
          "264:   Push:    &pushContext,",
          "265:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:  clientListener.FilterChains[0].Filters = append(clientMutable.FilterChains[0].TCP, clientListener.FilterChains[0].Filters...)",
          "273:  return cache.Snapshot{",
          "275:  }",
          "276: }",
          "",
          "[Removed Lines]",
          "274:   Listeners: cache.NewResources(\"tcp\", []cache.Resource{clientListener, serverListener}),",
          "",
          "[Added Lines]",
          "280:   Listeners: cache.NewResources(string(node), []cache.Resource{clientListener, serverListener}),",
          "",
          "---------------"
        ],
        "pilot/pkg/networking/plugin/mixer/mixer.go||pilot/pkg/networking/plugin/mixer/mixer.go": [
          "File: pilot/pkg/networking/plugin/mixer/mixer.go -> pilot/pkg/networking/plugin/mixer/mixer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "494: func buildInboundTCPFilter(mesh *meshconfig.MeshConfig, attrs attributes, node *model.Proxy) listener.Filter {",
          "495:  config := &mccpb.TcpClientConfig{",
          "497:   MixerAttributes:   &mpb.Attributes{Attributes: attrs},",
          "498:   Transport:         buildTransport(mesh, node),",
          "499:  }",
          "",
          "[Removed Lines]",
          "496:   DisableCheckCalls: disablePolicyChecks(outbound, mesh, node),",
          "",
          "[Added Lines]",
          "496:   DisableCheckCalls: disablePolicyChecks(inbound, mesh, node),",
          "",
          "---------------"
        ]
      }
    }
  ]
}