{
  "cve_id": "CVE-2024-25421",
  "cve_desc": "An issue in Ignite Realtime Openfire v.4.9.0 and before allows a remote attacker to escalate privileges via the ROOM_CACHE component.",
  "repo": "igniterealtime/Openfire",
  "patch_hash": "d66bddd29dbf56aa9b822635619fa66cca6f2112",
  "patch_info": {
    "commit_hash": "d66bddd29dbf56aa9b822635619fa66cca6f2112",
    "repo": "igniterealtime/Openfire",
    "commit_url": "https://github.com/igniterealtime/Openfire/commit/d66bddd29dbf56aa9b822635619fa66cca6f2112",
    "files": [
      "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
      "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java",
      "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
    ],
    "message": "OF-2795 / OF-2166: Remove MUC affiliation of a user that is being deleted. (#2420)\n\nThis prevents a new user by the same name to claim the affiliation.",
    "before_after_code_files": [
      "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
      "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java",
      "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
    ]
  },
  "patch_diff": {
    "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java": [
      "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: import org.jivesoftware.openfire.XMPPServer;",
      "25: import org.jivesoftware.openfire.auth.UnauthorizedException;",
      "26: import org.jivesoftware.openfire.event.GroupEventListener;",
      "27: import org.jivesoftware.openfire.group.*;",
      "28: import org.jivesoftware.openfire.muc.spi.*;",
      "29: import org.jivesoftware.openfire.user.UserAlreadyExistsException;",
      "30: import org.jivesoftware.openfire.user.UserNotFoundException;",
      "31: import org.jivesoftware.util.*;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import org.jivesoftware.openfire.event.UserEventListener;",
      "30: import org.jivesoftware.openfire.user.User;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48: import java.time.temporal.ChronoUnit;",
      "49: import java.util.*;",
      "50: import java.util.concurrent.*;",
      "51: import java.util.stream.Collectors;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: import java.util.concurrent.locks.Lock;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63: @JiveID(JiveConstants.MUC_ROOM)",
      "66:     private static final Logger Log = LoggerFactory.getLogger(MUCRoom.class);",
      "",
      "[Removed Lines]",
      "64: public class MUCRoom implements GroupEventListener, Externalizable, Result, Cacheable {",
      "",
      "[Added Lines]",
      "67: public class MUCRoom implements GroupEventListener, UserEventListener, Externalizable, Result, Cacheable {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3817:     public void groupCreated(Group group, Map params) {",
      "3819:     }",
      "3820: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3824:     @Override",
      "3825:     public void userCreated(User user, Map<String, Object> params)",
      "3826:     {}",
      "3828:     @Override",
      "3829:     public void userDeleting(User user, Map<String, Object> params)",
      "3830:     {",
      "3834:         final JID userJid = XMPPServer.getInstance().createJID(user.getUsername(), null);",
      "3836:         final Lock lock = getMUCService().getChatRoomLock(getJID().getNode());",
      "3837:         try {",
      "3838:             lock.lock();",
      "3840:             if (getAffiliation(userJid) == MUCRole.Affiliation.none) {",
      "3842:                 return;",
      "3843:             }",
      "3846:             if (getOwners().contains(userJid) && getOwners().size() == 1) {",
      "3847:                 final JID adminJid = XMPPServer.getInstance().getAdmins().iterator().next();",
      "3848:                 Log.info(\"User '{}' is being deleted, but is also the only owner of MUC room '{}'. To prevent having a room without owner, server admin '{}' was made owner of the room.\", user.getUsername(), getJID(), adminJid);",
      "3849:                 addOwner(adminJid, getRole());",
      "3850:             }",
      "3853:             addNone(userJid, getRole());",
      "3854:             getMUCService().syncChatRoom(this);",
      "3855:         } catch (Throwable t) {",
      "3856:             Log.warn(\"A problem occurred while trying to update room '{}' as a result of user '{}' being deleted from Openfire.\", getJID(), user);",
      "3857:         } finally {",
      "3858:             lock.unlock();",
      "3859:         }",
      "3860:     }",
      "3862:     @Override",
      "3863:     public void userModified(User user, Map<String, Object> params)",
      "3864:     {}",
      "",
      "---------------"
    ],
    "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java": [
      "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java"
    ],
    "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java": [
      "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import org.jivesoftware.openfire.cluster.ClusteredCacheEntryListener;",
      "21: import org.jivesoftware.openfire.cluster.NodeID;",
      "22: import org.jivesoftware.openfire.event.GroupEventDispatcher;",
      "23: import org.jivesoftware.openfire.muc.MUCRole;",
      "24: import org.jivesoftware.openfire.muc.MUCRoom;",
      "25: import org.jivesoftware.openfire.muc.MultiUserChatService;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import org.jivesoftware.openfire.event.UserEventDispatcher;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: import javax.annotation.Nonnull;",
      "37: import javax.annotation.Nullable;",
      "38: import java.time.Duration;",
      "47: import java.util.concurrent.locks.Lock;",
      "48: import java.util.stream.Collectors;",
      "",
      "[Removed Lines]",
      "39: import java.util.Collection;",
      "40: import java.util.Collections;",
      "41: import java.util.Date;",
      "42: import java.util.HashMap;",
      "43: import java.util.HashSet;",
      "44: import java.util.List;",
      "45: import java.util.Map;",
      "46: import java.util.Set;",
      "",
      "[Added Lines]",
      "40: import java.util.*;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "160:         }",
      "162:         GroupEventDispatcher.addListener(room); // TODO this event listener is added only in the node where the room is created. Does this mean that events are not propagated in a cluster?",
      "163:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:         UserEventDispatcher.addListener(room);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "234:             if (room != null) {",
      "235:                 room.getRoomHistory().purge();",
      "236:                 GroupEventDispatcher.removeListener(room);",
      "237:                 updateNonPersistentRoomStat(room, null);",
      "238:             }",
      "239:             localRooms.remove(roomName);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:                 UserEventDispatcher.removeListener(room);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2877d5bb47e366b3408c3fcf1935f0c9d8862a20",
      "candidate_info": {
        "commit_hash": "2877d5bb47e366b3408c3fcf1935f0c9d8862a20",
        "repo": "igniterealtime/Openfire",
        "commit_url": "https://github.com/igniterealtime/Openfire/commit/2877d5bb47e366b3408c3fcf1935f0c9d8862a20",
        "files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "xmppserver/src/main/webapp/muc-room-occupants.jsp",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java"
        ],
        "message": "OF-2862: Refactor MUC 'role' and 'affiliation' usage\n\nMany privileges in multi-user chat are tied to either \u2018roles\u2019 or \u2018permissions\u2019, as defined in XEP-0045. Openfire\u2019s existing implementation bases the \u2018MUCRole' implementation as the source of much. As the \u2018MUCRole' class is available only when a user is currently in the chat room, this prevents functionality that\u2019s aught to be allowable when a user is not.\n\nRefactor Openfire\u2019s implementation to explicitly base permission handing based on roles and affiliations.",
        "before_after_code_files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "xmppserver/src/main/webapp/muc-room-occupants.jsp||xmppserver/src/main/webapp/muc-room-occupants.jsp",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
          ],
          "candidate": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
          ]
        }
      },
      "candidate_diff": {
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:             final String property = roomConfig.get(\"muc#roomconfig_roomowners\");",
          "135:             if (property != null) {",
          "137:                 for (String jid : jids) {",
          "139:                         room.addFirstOwner(new JID(jid.trim().toLowerCase()).asBareJID());",
          "140:                     }",
          "141:                 }",
          "142:             }",
          "144:             try {",
          "146:             } catch (ForbiddenException e) {",
          "147:                 return false;",
          "148:             }",
          "",
          "[Removed Lines]",
          "136:                 String jids[] = property.split(\",\");",
          "138:                     if (jid != null && jid.trim().length() != 0) {",
          "145:                 room.unlock(room.getSelfRepresentation());",
          "",
          "[Added Lines]",
          "136:                 String[] jids = property.split(\",\");",
          "138:                     if (jid != null && !jid.trim().isEmpty()) {",
          "145:                 room.unlock(room.getSelfRepresentation().getAffiliation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         role = newRole;",
          "265:         synchronized (this) {",
          "266:             if (MUCRole.Role.none == role) {",
          "",
          "[Removed Lines]",
          "251:     public void setRole(MUCRole.Role newRole) throws NotAllowedException {",
          "253:         if (MUCRole.Affiliation.owner == affiliation || MUCRole.Affiliation.admin == affiliation) {",
          "254:             if (MUCRole.Role.moderator != newRole) {",
          "255:                 throw new NotAllowedException();",
          "256:             }",
          "257:         }",
          "259:         if (MUCRole.Role.moderator == role && MUCRole.Role.none == newRole && MUCRole.Affiliation.none != affiliation) {",
          "260:             throw new NotAllowedException();",
          "261:         }",
          "",
          "[Added Lines]",
          "249:     void setRole(MUCRole.Role newRole)",
          "250:     {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "301:         affiliation = newAffiliation;",
          "303:         synchronized (this) {",
          "",
          "[Removed Lines]",
          "294:     public void setAffiliation(MUCRole.Affiliation newAffiliation) throws NotAllowedException {",
          "296:         if (MUCRole.Affiliation.owner == affiliation || MUCRole.Affiliation.admin== affiliation) {",
          "297:             if (MUCRole.Affiliation.outcast == newAffiliation) {",
          "298:                 throw new NotAllowedException();",
          "299:             }",
          "300:         }",
          "",
          "[Added Lines]",
          "280:     void setAffiliation(MUCRole.Affiliation newAffiliation) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:     {",
          "570:         final List<MUCRole> filteredOccupants = occupants.stream()",
          "572:             .collect(Collectors.toList());",
          "574:         if (filteredOccupants.isEmpty()) {",
          "",
          "[Removed Lines]",
          "568:     public List<MUCRole> getOccupantsByBareJID(JID jid) throws UserNotFoundException",
          "571:             .filter(mucRole -> mucRole.getUserAddress().asBareJID().equals(jid))",
          "",
          "[Added Lines]",
          "568:     public List<MUCRole> getOccupantsByBareJID(@Nonnull final JID userAddress) throws UserNotFoundException",
          "571:             .filter(mucRole -> mucRole.getUserAddress().asBareJID().equals(userAddress.asBareJID()))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:     {",
          "590:         final List<MUCRole> filteredOccupants = occupants.stream()",
          "592:             .collect(Collectors.toList());",
          "594:         switch (filteredOccupants.size()) {",
          "595:             case 0: return null;",
          "596:             default:",
          "599:             case 1: return filteredOccupants.iterator().next();",
          "600:         }",
          "",
          "[Removed Lines]",
          "588:     public MUCRole getOccupantByFullJID(JID jid)",
          "591:             .filter(mucRole -> mucRole.getUserAddress().equals(jid))",
          "597:                 Log.warn(\"Room '{}' has more than one occupant with full JID '{}'!\", getJID(), jid);",
          "",
          "[Added Lines]",
          "588:     public MUCRole getOccupantByFullJID(@Nonnull final JID userAddress)",
          "591:             .filter(mucRole -> mucRole.getUserAddress().equals(userAddress))",
          "597:                 Log.warn(\"Room '{}' has more than one occupant with full JID '{}'!\", getJID(), userAddress);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "630:             .anyMatch(mucRole -> mucRole.getNickname().equalsIgnoreCase(nickname));",
          "631:     }",
          "634:     {",
          "635:         return occupants.stream()",
          "636:             .anyMatch(mucRole -> mucRole.getUserAddress().equals(jid) || mucRole.getUserAddress().asBareJID().equals(jid));",
          "637:     }",
          "647:         String answer = members.get(bareJID);",
          "649:             return null;",
          "650:         }",
          "651:         return answer;",
          "",
          "[Removed Lines]",
          "633:     public boolean hasOccupant(JID jid)",
          "645:     public String getReservedNickname(JID jid) {",
          "646:         final JID bareJID = jid.asBareJID();",
          "648:         if (answer == null || answer.trim().length() == 0) {",
          "",
          "[Added Lines]",
          "633:     public boolean hasOccupant(final JID jid)",
          "650:     public String findNickname(@Nullable final JID userAddress)",
          "651:     {",
          "652:         if (userAddress == null) {",
          "653:             return null;",
          "654:         }",
          "656:         final MUCRole fullJidOccupant = occupants.stream().filter(occupant -> occupant.getUserAddress().equals(userAddress)).findAny().orElse(null);",
          "657:         if (fullJidOccupant != null) {",
          "658:             return fullJidOccupant.getNickname();",
          "659:         }",
          "661:         final MUCRole bareJidOccupant = occupants.stream().filter(occupant -> occupant.getUserAddress().asBareJID().equals(userAddress)).findAny().orElse(null);",
          "662:         if (bareJidOccupant != null) {",
          "663:             return bareJidOccupant.getNickname();",
          "664:         }",
          "666:         return getReservedNickname(userAddress);",
          "667:     }",
          "675:     public String getReservedNickname(@Nonnull final JID userAddress) {",
          "676:         final JID bareJID = userAddress.asBareJID();",
          "678:         if (answer == null || answer.trim().isEmpty()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "662:         for (final Map.Entry<JID, String> entry : members.entrySet()) {",
          "663:             if (entry.getValue().equalsIgnoreCase(nickname)) {",
          "664:                 return entry.getKey();",
          "",
          "[Removed Lines]",
          "661:     public JID getMemberForReservedNickname(String nickname) {",
          "",
          "[Added Lines]",
          "691:     public JID getMemberForReservedNickname(@Nonnull final String nickname) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "682:         if (owners.includes(bareJID)) {",
          "683:             return MUCRole.Affiliation.owner;",
          "",
          "[Removed Lines]",
          "679:     public MUCRole.Affiliation getAffiliation(@Nonnull JID jid) {",
          "680:         final JID bareJID = jid.asBareJID();",
          "",
          "[Added Lines]",
          "709:     public MUCRole.Affiliation getAffiliation(@Nonnull final JID userAddress) {",
          "710:         final JID bareJID = userAddress.asBareJID();",
          "712:         if (mucService.isSysadmin(bareJID)) {",
          "714:             Log.debug( \"User '{}' is a sysadmin. Treat as owner.\", userAddress);",
          "715:             return MUCRole.Affiliation.owner;",
          "716:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "695:         return MUCRole.Affiliation.none;",
          "696:     }",
          "699:     {",
          "702:         if (owners.includes(bareJID)) {",
          "703:             return MUCRole.Role.moderator;",
          "",
          "[Removed Lines]",
          "698:     public MUCRole.Role getRole(@Nonnull JID jid)",
          "700:         final JID bareJID = jid.asBareJID();",
          "",
          "[Added Lines]",
          "734:     public MUCRole.Role getRole(@Nonnull JID userAddress)",
          "736:         final JID bareJID = userAddress.asBareJID();",
          "738:         if (mucService.isSysadmin(bareJID)) {",
          "740:             Log.debug( \"User '{}' is a sysadmin. Treat as owner.\", userAddress);",
          "741:             return MUCRole.Role.moderator;",
          "742:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "756:             final JID bareJID = realAddress.asBareJID();",
          "757:             MUCRole.Role role = getRole( bareJID );",
          "758:             MUCRole.Affiliation affiliation = getAffiliation( bareJID );",
          "765:             Log.debug( \"User '{}' role and affiliation in room '{} are determined to be: {}, {}\", realAddress, this.getJID(), role, affiliation );",
          "",
          "[Removed Lines]",
          "759:             if (affiliation != MUCRole.Affiliation.owner && mucService.isSysadmin(bareJID)) {",
          "761:                 Log.debug( \"User '{}' is a sysadmin. Treat as owner.\", realAddress);",
          "762:                 role = MUCRole.Role.moderator;",
          "763:                 affiliation = MUCRole.Affiliation.owner;",
          "764:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1448:         if (packet instanceof Message || ALLOWPM_BLOCKALL.getValue()){",
          "1450:             switch (sender.getRole()) { // intended fall-through",
          "1451:                 case none:",
          "1453:                 default:",
          "1454:                 case visitor:",
          "1455:                     if (canSendPrivateMessage().equals( \"participants\" )) throw new ForbiddenException();",
          "",
          "[Removed Lines]",
          "1446:     public void sendPrivatePacket(Packet packet, MUCRole sender) throws NotFoundException, ForbiddenException {",
          "1452:                     throw new ForbiddenException();",
          "",
          "[Added Lines]",
          "1482:     public void sendPrivatePacket(@Nonnull final Packet packet, final @Nullable MUCRole sender) throws NotFoundException, ForbiddenException, NotAcceptableException",
          "1483:     {",
          "1484:         if (sender == null) {",
          "1485:             throw new NotAcceptableException();",
          "1486:         }",
          "1492:                     throw new NotAcceptableException();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1799:         Element addresses = DocumentHelper.createElement(QName.get(\"addresses\", \"http://jabber.org/protocol/address\"));",
          "1800:         Element address = addresses.addElement(\"address\");",
          "1801:         address.addAttribute(\"type\", \"ofrom\");",
          "1803:         message.addExtension(new PacketExtension(addresses));",
          "1804:     }",
          "",
          "[Removed Lines]",
          "1802:         address.addAttribute(\"jid\", sender.getUserAddress().toBareJID());",
          "",
          "[Added Lines]",
          "1842:         address.addAttribute(\"jid\", sender.getUserAddress().toString());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1813:     }",
          "1834:         try {",
          "1836:         } catch (UserNotFoundException e) {",
          "1837:             return presences;",
          "1838:         }",
          "1847:             occupant.setRole(newRole);",
          "",
          "[Removed Lines]",
          "1828:     private List<Presence> changeOccupantAffiliation(MUCRole sender, JID jid, MUCRole.Affiliation newAffiliation, MUCRole.Role newRole)",
          "1829:         throws NotAllowedException {",
          "1830:         List<Presence> presences = new ArrayList<>();",
          "1832:         JID bareJID = jid.asBareJID();",
          "1833:         List<MUCRole> occupants;",
          "1835:             occupants = getOccupantsByBareJID(bareJID);",
          "1840:         for (MUCRole occupant : occupants) {",
          "1846:             occupant.setAffiliation(newAffiliation);",
          "",
          "[Added Lines]",
          "1866:     private List<Presence> applyRoleChange(@Nonnull final JID userAddress, @Nonnull final MUCRole.Role newRole)",
          "1867:     {",
          "1868:         final List<Presence> presences = new ArrayList<>();",
          "1870:         final List<MUCRole> occupants;",
          "1872:             occupants = getOccupantsByBareJID(userAddress);",
          "1878:         for (final MUCRole occupant : occupants)",
          "1879:         {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1854:     }",
          "1906:     }",
          "1917:     }",
          "1932:         synchronized (this) {",
          "1940:                 return Collections.emptyList();",
          "1941:             }",
          "1952:             }",
          "1954:             MUCPersistenceManager.saveAffiliationToDB(",
          "1955:                 this,",
          "1957:                 null,",
          "1958:                 MUCRole.Affiliation.owner,",
          "1959:                 oldAffiliation);",
          "1960:         }",
          "1964:     }",
          "1968:     }",
          "1983:         synchronized (this) {",
          "1990:                 throw new ConflictException();",
          "1991:             }",
          "1995:                 return Collections.emptyList();",
          "1996:             }",
          "2007:             }",
          "2009:             MUCPersistenceManager.saveAffiliationToDB(",
          "2010:                 this,",
          "2012:                 null,",
          "2013:                 MUCRole.Affiliation.admin,",
          "2014:                 oldAffiliation);",
          "2015:         }",
          "2019:     }",
          "2023:     }",
          "2040:         synchronized (this) {",
          "2060:                     throw new ConflictException();",
          "2061:                 }",
          "2063:                 throw new ConflictException();",
          "2064:             }",
          "2067:                 throw new ConflictException();",
          "2068:             }",
          "2072:                 return Collections.emptyList();",
          "2073:             }",
          "2086:             }",
          "2088:             MUCPersistenceManager.saveAffiliationToDB(",
          "2089:                 this,",
          "2091:                 nickname,",
          "2092:                 MUCRole.Affiliation.member,",
          "2093:                 oldAffiliation);",
          "",
          "[Removed Lines]",
          "1865:     private Presence changeOccupantRole(JID jid, MUCRole.Role newRole) throws NotAllowedException {",
          "1867:         MUCRole occupant = getOccupantByFullJID(jid);",
          "1872:         if (occupant != null) {",
          "1874:             occupant.setRole(newRole);",
          "1876:             return occupant.getPresence();",
          "1877:         }",
          "1878:         return null;",
          "1879:     }",
          "1881:     public static boolean isPrivilegedToChangeAffiliationAndRole(MUCRole.Affiliation actorAffiliation, MUCRole.Role actorRole, MUCRole.Affiliation occupantAffiliation, MUCRole.Role occupantRole, MUCRole.Affiliation newAffiliation, MUCRole.Role newRole) {",
          "1882:         switch (actorAffiliation) {",
          "1883:             case owner:",
          "1885:                 return true;",
          "1886:             case admin:",
          "1888:                 if (occupantAffiliation == newAffiliation) {",
          "1890:                     return occupantAffiliation != MUCRole.Affiliation.owner;",
          "1891:                 } else {",
          "1893:                     return occupantAffiliation != MUCRole.Affiliation.owner && newAffiliation != MUCRole.Affiliation.admin && newAffiliation != MUCRole.Affiliation.owner;",
          "1894:                 }",
          "1895:             default:",
          "1897:                 if (actorRole == MUCRole.Role.moderator && occupantAffiliation == newAffiliation) {",
          "1900:                     if (occupantRole == MUCRole.Role.moderator && newRole != MUCRole.Role.moderator) {",
          "1901:                         return occupantAffiliation != MUCRole.Affiliation.owner && occupantAffiliation != MUCRole.Affiliation.admin;",
          "1902:                     }",
          "1903:                 }",
          "1904:                 return false;",
          "1905:         }",
          "1915:     public void addFirstOwner(JID bareJID) {",
          "1916:         owners.add( bareJID.asBareJID() );",
          "1928:     public List<Presence> addOwner(JID jid, MUCRole actor) throws ForbiddenException {",
          "1930:         final JID bareJID = jid.asBareJID();",
          "1933:             MUCRole.Affiliation oldAffiliation = MUCRole.Affiliation.none;",
          "1934:             if (MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "1935:                 throw new ForbiddenException();",
          "1936:             }",
          "1938:             if (owners.contains(bareJID)) {",
          "1942:             owners.add(bareJID);",
          "1944:             if (removeAdmin(bareJID)) {",
          "1945:                 oldAffiliation = MUCRole.Affiliation.admin;",
          "1946:             }",
          "1947:             else if (removeMember(bareJID)) {",
          "1948:                 oldAffiliation = MUCRole.Affiliation.member;",
          "1949:             }",
          "1950:             else if (removeOutcast(bareJID)) {",
          "1951:                 oldAffiliation = MUCRole.Affiliation.outcast;",
          "1956:                 bareJID,",
          "1963:         return applyAffiliationChange(getSelfRepresentation(), bareJID, null);",
          "1966:     private boolean removeOwner(JID jid) {",
          "1967:         return owners.remove(jid.asBareJID());",
          "1980:     public List<Presence> addAdmin(JID jid, MUCRole actor) throws ForbiddenException,",
          "1981:         ConflictException {",
          "1982:         final JID bareJID = jid.asBareJID();",
          "1984:             MUCRole.Affiliation oldAffiliation = MUCRole.Affiliation.none;",
          "1985:             if (MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "1986:                 throw new ForbiddenException();",
          "1987:             }",
          "1989:             if (owners.contains(bareJID) && owners.size() == 1) {",
          "1993:             if (admins.contains(bareJID)) {",
          "1997:             admins.add(bareJID);",
          "1999:             if (removeOwner(bareJID)) {",
          "2000:                 oldAffiliation = MUCRole.Affiliation.owner;",
          "2001:             }",
          "2002:             else if (removeMember(bareJID)) {",
          "2003:                 oldAffiliation = MUCRole.Affiliation.member;",
          "2004:             }",
          "2005:             else if (removeOutcast(bareJID)) {",
          "2006:                 oldAffiliation = MUCRole.Affiliation.outcast;",
          "2011:                 bareJID,",
          "2018:         return applyAffiliationChange(getSelfRepresentation(), bareJID, null);",
          "2021:     private boolean removeAdmin(JID bareJID) {",
          "2022:         return admins.remove( bareJID.asBareJID() );",
          "2037:     public List<Presence> addMember(JID jid, String nickname, MUCRole actor)",
          "2038:         throws ForbiddenException, ConflictException {",
          "2039:         final JID bareJID = jid.asBareJID();",
          "2041:             MUCRole.Affiliation oldAffiliation = (members.containsKey(bareJID) ?",
          "2042:                 MUCRole.Affiliation.member : MUCRole.Affiliation.none);",
          "2043:             if (isMembersOnly()) {",
          "2044:                 if (!canOccupantsInvite()) {",
          "2045:                     if (MUCRole.Affiliation.admin != actor.getAffiliation()",
          "2046:                         && MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "2047:                         throw new ForbiddenException();",
          "2048:                     }",
          "2049:                 }",
          "2050:             }",
          "2051:             else {",
          "2052:                 if (MUCRole.Affiliation.admin != actor.getAffiliation()",
          "2053:                     && MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "2054:                     throw new ForbiddenException();",
          "2055:                 }",
          "2056:             }",
          "2058:             if (nickname != null && nickname.trim().length() > 0 && members.containsValue(nickname.toLowerCase())) {",
          "2059:                 if (!nickname.equals(members.get(bareJID))) {",
          "2062:             } else if (isLoginRestrictedToNickname() && (nickname == null || nickname.trim().length() == 0)) {",
          "2066:             if (owners.contains(bareJID) && owners.size() == 1) {",
          "2070:             if (members.containsKey(bareJID)) {",
          "2076:             members.put(bareJID, (nickname == null ? \"\" : nickname.toLowerCase()));",
          "2078:             if (removeOwner(bareJID)) {",
          "2079:                 oldAffiliation = MUCRole.Affiliation.owner;",
          "2080:             }",
          "2081:             else if (removeAdmin(bareJID)) {",
          "2082:                 oldAffiliation = MUCRole.Affiliation.admin;",
          "2083:             }",
          "2084:             else if (removeOutcast(bareJID)) {",
          "2085:                 oldAffiliation = MUCRole.Affiliation.outcast;",
          "2090:                 bareJID,",
          "",
          "[Added Lines]",
          "1897:     public void addFirstOwner(@Nonnull final JID targetUserAddress) {",
          "1898:         owners.add( targetUserAddress.asBareJID() );",
          "1910:     public List<Presence> addOwners(@Nonnull final List<JID> targetUserAddresses, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "1911:     {",
          "1912:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "1913:             throw new ForbiddenException();",
          "1914:         }",
          "1916:         synchronized (this) {",
          "1917:             final List<Presence> answer = new ArrayList<>(targetUserAddresses.size());",
          "1918:             for (final JID targetUserAddress : targetUserAddresses) {",
          "1919:                 final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "1920:                 if (!owners.contains(targetUserAddress)) {",
          "1922:                     answer.addAll(addOwner(targetUserAddressBare, actorAffiliation));",
          "1923:                 }",
          "1924:             }",
          "1925:             return answer;",
          "1926:         }",
          "1938:     public List<Presence> addOwner(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "1939:     {",
          "1940:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "1941:             throw new ForbiddenException();",
          "1942:         }",
          "1944:         final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "1948:             if (owners.contains(targetUserAddressBare)) {",
          "1954:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "1955:             switch (oldAffiliation) {",
          "1956:                 case admin:",
          "1957:                     removeAdmin(targetUserAddressBare, actorAffiliation);",
          "1958:                     break;",
          "1959:                 case member:",
          "1960:                     removeMember(targetUserAddressBare, actorAffiliation, null); // No need to calculate actor role, as the 'owner' affiliation is guaranteed to be allowed to perform this action.",
          "1961:                     break;",
          "1962:                 case outcast:",
          "1963:                     removeOutcast(targetUserAddressBare, actorAffiliation, null); // No need to calculate actor role, as the 'owner' affiliation is guaranteed to be allowed to perform this action.",
          "1964:                     break;",
          "1966:             owners.add(targetUserAddressBare);",
          "1971:                 targetUserAddressBare,",
          "1977:         return applyAffiliationChange(targetUserAddressBare);",
          "1978:     }",
          "1980:     private boolean removeOwner(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "1981:     {",
          "1982:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "1983:             throw new ForbiddenException();",
          "1984:         }",
          "1986:         return owners.remove(userAddress.asBareJID());",
          "1999:     public List<Presence> addAdmins(@Nonnull final List<JID> targetUserAddresses, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2000:     {",
          "2001:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "2002:             throw new ForbiddenException();",
          "2003:         }",
          "2005:         synchronized(this) {",
          "2006:             final List<Presence> answer = new ArrayList<>(targetUserAddresses.size());",
          "2007:             for (final JID newAdmin : targetUserAddresses) {",
          "2008:                 final JID bareJID = newAdmin.asBareJID();",
          "2009:                 if (!admins.contains(bareJID)) {",
          "2011:                     answer.addAll(addAdmin(bareJID, actorAffiliation));",
          "2012:                 }",
          "2013:             }",
          "2014:             return answer;",
          "2015:         }",
          "2028:     public List<Presence> addAdmin(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2029:     {",
          "2030:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "2031:             throw new ForbiddenException();",
          "2032:         }",
          "2034:         final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "2037:             if (owners.contains(targetUserAddressBare) && owners.size() == 1) {",
          "2041:             if (admins.contains(targetUserAddressBare)) {",
          "2045:             admins.add(targetUserAddressBare);",
          "2048:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "2049:             switch (oldAffiliation) {",
          "2050:                 case owner:",
          "2051:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "2052:                     break;",
          "2053:                 case member:",
          "2054:                     removeMember(targetUserAddressBare, actorAffiliation, null); // No need to calculate actor role, as the 'owner' affiliation is guaranteed to be allowed to perform this action.",
          "2055:                     break;",
          "2056:                 case outcast:",
          "2057:                     removeOutcast(targetUserAddressBare, actorAffiliation, null);  // No need to calculate actor role, as the 'owner' affiliation is guaranteed to be allowed to perform this action.",
          "2058:                     break;",
          "2063:                 targetUserAddressBare,",
          "2070:         return applyAffiliationChange(targetUserAddressBare);",
          "2073:     private boolean removeAdmin(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "2074:     {",
          "2075:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "2076:             throw new ForbiddenException();",
          "2077:         }",
          "2078:         return admins.remove( userAddress.asBareJID() );",
          "2093:     public List<Presence> addMember(@Nonnull final JID targetUserAddress, @Nullable final String nickname, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2094:     {",
          "2095:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation) {",
          "2096:             throw new ForbiddenException();",
          "2097:         }",
          "2099:         final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "2102:             if (nickname != null && !nickname.trim().isEmpty() && members.containsValue(nickname.toLowerCase())) {",
          "2103:                 if (!nickname.equals(members.get(targetUserAddressBare))) {",
          "2106:             } else if (isLoginRestrictedToNickname() && (nickname == null || nickname.trim().isEmpty())) {",
          "2110:             if (owners.contains(targetUserAddressBare) && owners.size() == 1) {",
          "2114:             if (members.containsKey(targetUserAddressBare)) {",
          "2120:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "2121:             switch (oldAffiliation) {",
          "2122:                 case owner:",
          "2123:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "2124:                     break;",
          "2125:                 case admin:",
          "2126:                     removeAdmin(targetUserAddressBare, actorAffiliation);",
          "2127:                     break;",
          "2128:                 case outcast:",
          "2129:                     removeOutcast(targetUserAddressBare, actorAffiliation, null);  // No need to calculate actor role, as both the 'owner' and 'admin' affiliation is guaranteed to be allowed to perform this action.",
          "2130:                     break;",
          "2134:             members.put(targetUserAddressBare, (nickname == null ? \"\" : nickname.toLowerCase()));",
          "2139:                 targetUserAddressBare,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2099:     }",
          "2103:     }",
          "2121:         synchronized (this) {",
          "2129:                 throw new ConflictException();",
          "2130:             }",
          "2134:                 return Collections.emptyList();",
          "2135:             }",
          "2148:             }",
          "2150:             MUCPersistenceManager.saveAffiliationToDB(",
          "2151:                 this,",
          "2153:                 null,",
          "2154:                 MUCRole.Affiliation.outcast,",
          "2155:                 oldAffiliation);",
          "2156:         }",
          "2160:     }",
          "2164:     }",
          "2180:         boolean jidWasAffiliated = false;",
          "2181:         synchronized (this) {",
          "2188:                 throw new ConflictException();",
          "2189:             }",
          "2205:             }",
          "2208:         }",
          "2209:         if (jidWasAffiliated) {",
          "2213:         } else {",
          "2215:             return Collections.emptyList();",
          "",
          "[Removed Lines]",
          "2098:         return applyAffiliationChange(getSelfRepresentation(), bareJID, null);",
          "2101:     private boolean removeMember(JID jid) {",
          "2102:         return members.remove(jid.asBareJID()) != null;",
          "2117:     public List<Presence> addOutcast(JID jid, String reason, MUCRole actor)",
          "2118:         throws NotAllowedException, ForbiddenException, ConflictException {",
          "2119:         final JID bareJID = jid.asBareJID();",
          "2122:             MUCRole.Affiliation oldAffiliation = MUCRole.Affiliation.none;",
          "2123:             if (MUCRole.Affiliation.admin != actor.getAffiliation()",
          "2124:                 && MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "2125:                 throw new ForbiddenException();",
          "2126:             }",
          "2128:             if (owners.contains(bareJID) && owners.size() == 1) {",
          "2132:             if (outcasts.contains(bareJID)) {",
          "2138:             outcasts.add(bareJID);",
          "2140:             if (removeOwner(bareJID)) {",
          "2141:                 oldAffiliation = MUCRole.Affiliation.owner;",
          "2142:             }",
          "2143:             else if (removeAdmin(bareJID)) {",
          "2144:                 oldAffiliation = MUCRole.Affiliation.admin;",
          "2145:             }",
          "2146:             else if (removeMember(bareJID)) {",
          "2147:                 oldAffiliation = MUCRole.Affiliation.member;",
          "2152:                 bareJID,",
          "2159:         return applyAffiliationChange(actor, bareJID, reason);",
          "2162:     private boolean removeOutcast(JID bareJID) {",
          "2163:         return outcasts.remove( bareJID.asBareJID() );",
          "2176:     public List<Presence> addNone(JID jid, MUCRole actor) throws ForbiddenException, ConflictException {",
          "2178:         final JID bareJID = jid.asBareJID();",
          "2179:         MUCRole.Affiliation oldAffiliation = MUCRole.Affiliation.none;",
          "2182:             if (MUCRole.Affiliation.admin != actor.getAffiliation()",
          "2183:                 && MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "2184:                 throw new ForbiddenException();",
          "2185:             }",
          "2187:             if (owners.contains(bareJID) && owners.size() == 1) {",
          "2191:             if (removeOwner(bareJID)) {",
          "2192:                 oldAffiliation = MUCRole.Affiliation.owner;",
          "2193:                 jidWasAffiliated = true;",
          "2194:             }",
          "2195:             else if (removeAdmin(bareJID)) {",
          "2196:                 oldAffiliation = MUCRole.Affiliation.admin;",
          "2197:                 jidWasAffiliated = true;",
          "2198:             }",
          "2199:             else if (removeMember(bareJID)) {",
          "2200:                 oldAffiliation = MUCRole.Affiliation.member;",
          "2201:                 jidWasAffiliated = true;",
          "2202:             }",
          "2203:             else if (removeOutcast(bareJID)) {",
          "2204:                 oldAffiliation = MUCRole.Affiliation.outcast;",
          "2207:             MUCPersistenceManager.removeAffiliationFromDB(this, bareJID, oldAffiliation);",
          "2212:             return applyAffiliationChange(actor, bareJID, null);",
          "",
          "[Added Lines]",
          "2147:         return applyAffiliationChange(targetUserAddressBare);",
          "2150:     private boolean removeMember(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2151:     {",
          "2152:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && actorRole != MUCRole.Role.moderator) {",
          "2153:             throw new ForbiddenException();",
          "2154:         }",
          "2156:         return members.remove(userAddress.asBareJID()) != null;",
          "2172:     public List<Presence> addOutcast(@Nonnull final JID targetUserAddress, @Nullable final String reason, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws NotAllowedException, ForbiddenException, ConflictException",
          "2173:     {",
          "2174:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "2175:             throw new ForbiddenException();",
          "2176:         }",
          "2178:         final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "2182:             if (owners.contains(targetUserAddressBare) && owners.size() == 1) {",
          "2186:             if (outcasts.contains(targetUserAddressBare)) {",
          "2192:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "2193:             switch (oldAffiliation) {",
          "2194:                 case owner:",
          "2195:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "2196:                     break;",
          "2197:                 case admin:",
          "2198:                     removeAdmin(targetUserAddressBare, actorAffiliation);",
          "2199:                     break;",
          "2200:                 case member:",
          "2201:                     removeMember(targetUserAddressBare, actorAffiliation, actorRole);",
          "2202:                     break;",
          "2206:             outcasts.add(targetUserAddressBare);",
          "2211:                 targetUserAddressBare,",
          "2218:         return applyAffiliationChange(targetUserAddressBare);",
          "2221:     private boolean removeOutcast(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2222:     {",
          "2223:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && actorRole != MUCRole.Role.moderator) {",
          "2224:             throw new ForbiddenException();",
          "2225:         }",
          "2226:         return outcasts.remove( userAddress.asBareJID() );",
          "2244:     public List<Presence> addNone(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2245:     {",
          "2246:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation) {",
          "2247:             throw new ForbiddenException();",
          "2248:         }",
          "2249:         final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "2254:             if (owners.contains(targetUserAddressBare) && owners.size() == 1) {",
          "2258:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "2259:             switch (oldAffiliation) {",
          "2260:                 case owner:",
          "2261:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "2262:                     jidWasAffiliated = true;",
          "2263:                     break;",
          "2264:                 case admin:",
          "2265:                     removeAdmin(targetUserAddressBare, actorAffiliation);",
          "2266:                     jidWasAffiliated = true;",
          "2267:                     break;",
          "2268:                 case member:",
          "2269:                     removeMember(targetUserAddressBare, actorAffiliation, null); // No need to calculate actor role, as both the 'owner' and 'admin' affiliation is guaranteed to be allowed to perform this action.",
          "2270:                     jidWasAffiliated = true;",
          "2271:                     break;",
          "2272:                 case outcast:",
          "2273:                     removeOutcast(targetUserAddressBare, actorAffiliation, null); // No need to calculate actor role, as both the 'owner' and 'admin' affiliation is guaranteed to be allowed to perform this action.",
          "2274:                     break;",
          "2277:             MUCPersistenceManager.removeAffiliationFromDB(this, targetUserAddressBare, oldAffiliation);",
          "2282:             return applyAffiliationChange(targetUserAddressBare);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2217:     }",
          "2240:             try {",
          "2245:                     if (hasOccupant(groupMember)) {",
          "2246:                         affectedOccupants.add(groupMember);",
          "2247:                     }",
          "2248:                 }",
          "2249:             } catch (GroupNotFoundException gnfe) {",
          "2251:             }",
          "2252:         } else {",
          "2255:             }",
          "2256:         }",
          "2265:             boolean kickMember = false, isOutcast = false;",
          "2266:             if (owners.includes(occupantJID)) {",
          "2267:                 newRole = MUCRole.Role.moderator;",
          "2268:                 newAffiliation = MUCRole.Affiliation.owner;",
          "",
          "[Removed Lines]",
          "2233:     private List<Presence> applyAffiliationChange(MUCRole actor, final JID affiliationJID, String reason) {",
          "2236:         List<JID> affectedOccupants = new ArrayList<>();",
          "2239:         if (GroupJID.isGroup(affiliationJID)) {",
          "2241:                 Group group = GroupManager.getInstance().getGroup(affiliationJID);",
          "2244:                 for (JID groupMember : group.getAll()) {",
          "2250:                 Log.error(\"Error updating group presences for \" + affiliationJID , gnfe);",
          "2253:             if (hasOccupant(affiliationJID)) {",
          "2254:                 affectedOccupants.add(affiliationJID);",
          "2259:         MUCRole.Role newRole;",
          "2260:         MUCRole.Affiliation newAffiliation;",
          "2261:         List<Presence> updatedPresences = new ArrayList<>();",
          "2263:         for (JID occupantJID : affectedOccupants) {",
          "2264:             Log.info(\"Applying affiliation change for \" + occupantJID);",
          "",
          "[Added Lines]",
          "2306:     public List<Presence> kickOccupant(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole, @Nullable final JID actorJID, @Nullable final String actorNickname, @Nullable final String reason) throws ForbiddenException",
          "2307:     {",
          "2308:         return kickOccupant(userAddress, actorAffiliation, actorRole, actorJID, actorNickname, reason, 307);",
          "2309:     }",
          "2327:     public List<Presence> kickOccupant(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole, @Nullable final JID actorJID, @Nullable final String actorNickname, @Nullable final String reason, final int status) throws ForbiddenException",
          "2328:     {",
          "2329:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "2330:             throw new ForbiddenException();",
          "2331:         }",
          "2334:         final List<Presence> updatedPresences = applyRoleChange(userAddress, MUCRole.Role.none);",
          "2337:         MUCRole sender;",
          "2338:         if ( actorJID == null ) {",
          "2339:             sender = getSelfRepresentation(); // originates from the room itself (eg: through admin console changes).",
          "2340:         } else {",
          "2341:             sender = getOccupantByFullJID(actorJID);",
          "2342:             if ( sender == null ) {",
          "2343:                 sender = getSelfRepresentation();",
          "2344:             }",
          "2345:         }",
          "2347:         Log.debug(\"Kicking '{}' from '{}' by '{}' because of: {} \", userAddress, getJID(), sender, reason);",
          "2349:         for (final Presence updatedPresence : updatedPresences)",
          "2350:         {",
          "2351:             final Element frag = updatedPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "2354:             frag.addElement(\"status\").addAttribute(\"code\", String.valueOf(status));",
          "2357:             if (reason != null && !reason.trim().isEmpty()) {",
          "2358:                 frag.element(\"item\").addElement(\"reason\").setText(reason);",
          "2359:             }",
          "2362:             kickPresence(updatedPresence, actorJID, actorNickname);",
          "2365:             broadcastPresence(updatedPresence, false, sender);",
          "2366:         }",
          "2368:         return updatedPresences;",
          "2369:     }",
          "2389:     private List<Presence> applyAffiliationChange(@Nonnull final JID target)",
          "2390:     {",
          "2392:         final List<JID> affectedOccupants = new ArrayList<>();",
          "2395:         if (GroupJID.isGroup(target)) {",
          "2397:                 final Group group = GroupManager.getInstance().getGroup(target);",
          "2400:                 for (final JID groupMember : group.getAll()) {",
          "2406:                 Log.error(\"Error updating group presences for \" + target , gnfe);",
          "2409:             if (hasOccupant(target)) {",
          "2410:                 affectedOccupants.add(target);",
          "2415:         final List<Presence> updatedPresences = new ArrayList<>();",
          "2417:         for (final JID occupantJID : affectedOccupants) {",
          "2419:             final MUCRole.Role newRole;",
          "2420:             final MUCRole.Affiliation newAffiliation;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2291:                 newRole = isModerated() ? MUCRole.Role.visitor : MUCRole.Role.participant;",
          "2292:                 newAffiliation = MUCRole.Affiliation.none;",
          "2293:             }",
          "2295:             try {",
          "2314:                 }",
          "2318:             }",
          "2319:         }",
          "2320:         return updatedPresences;",
          "2321:     }",
          "",
          "[Removed Lines]",
          "2294:             Log.info(\"New affiliation: \" + newAffiliation);",
          "2296:                 List<Presence> thisOccupant = changeOccupantAffiliation(actor, occupantJID, newAffiliation, newRole);",
          "2297:                 if (kickMember) {",
          "2301:                     for (Presence presence : thisOccupant) {",
          "2302:                         presence.setType(Presence.Type.unavailable);",
          "2303:                         presence.setStatus(null);",
          "2304:                         Element x = presence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "2305:                         if (reason != null && reason.trim().length() > 0) {",
          "2306:                             x.element(\"item\").addElement(\"reason\").setText(reason);",
          "2307:                         }",
          "2308:                         x.addElement(\"status\").addAttribute(\"code\", isOutcast ? \"301\" : \"321\");",
          "2312:                         kickPresence(presence, actor.getUserAddress(), actor.getNickname());",
          "2313:                     }",
          "2315:                 updatedPresences.addAll(thisOccupant);",
          "2316:             } catch (NotAllowedException e) {",
          "2317:                 Log.error(\"Error updating presences for \" + occupantJID, e);",
          "",
          "[Added Lines]",
          "2449:             Log.debug(\"Applying affiliation change for {}. New affiliation: {}\", occupantJID, newAffiliation);",
          "2451:             final List<Presence> presences = new ArrayList<>();",
          "2453:             final List<MUCRole> occupants;",
          "2455:                 occupants = getOccupantsByBareJID(occupantJID);",
          "2457:                 for (final MUCRole occupant : occupants) {",
          "2459:                     occupant.setAffiliation(newAffiliation);",
          "2460:                     occupant.setRole(newRole);",
          "2463:                     presences.add(occupant.getPresence());",
          "2465:             } catch (UserNotFoundException e) {",
          "2466:                 return presences;",
          "2469:             if (kickMember) {",
          "2473:                 for (final Presence presence : presences) {",
          "2474:                     presence.setType(Presence.Type.unavailable);",
          "2475:                     presence.setStatus(null);",
          "2477:                     final Element x = presence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "2478:                     x.addElement(\"status\").addAttribute(\"code\", isOutcast ? \"301\" : \"321\");",
          "2482:                     kickPresence(presence, null, null);",
          "2483:                 }",
          "2484:             }",
          "2485:             updatedPresences.addAll(presences);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2470:         throws ForbiddenException, CannotBeInvitedException {",
          "2471:         if (!isMembersOnly() || canOccupantsInvite()",
          "2476:             Message message = new Message();",
          "",
          "[Removed Lines]",
          "2469:     public void sendInvitation(JID to, String reason, MUCRole sender, List<Element> extensions)",
          "2472:             || MUCRole.Affiliation.admin == sender.getAffiliation()",
          "2473:             || MUCRole.Affiliation.owner == sender.getAffiliation()) {",
          "",
          "[Added Lines]",
          "2637:     public void sendInvitation(@Nonnull final JID to, @Nullable final String reason, @Nonnull final MUCRole.Affiliation senderAffiliation, @Nullable final JID senderUserAddress, @Nullable final List<Element> extensions)",
          "2640:             || MUCRole.Affiliation.admin == senderAffiliation",
          "2641:             || MUCRole.Affiliation.owner == senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2478:             message.setTo(to);",
          "2480:             if (mucService.getMUCDelegate() != null) {",
          "2482:                     case HANDLED_BY_DELEGATE:",
          "2484:                         return;",
          "",
          "[Removed Lines]",
          "2481:                 switch(mucService.getMUCDelegate().sendingInvitation(this, to, sender.getUserAddress(), reason)) {",
          "",
          "[Added Lines]",
          "2649:                 switch(mucService.getMUCDelegate().sendingInvitation(this, to, senderUserAddress, reason)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2500:             }",
          "2501:             Element frag = message.addChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "2504:             frag.addElement(\"invite\").addAttribute(\"from\", from.toBareJID());",
          "2506:                 Element invite = frag.element(\"invite\");",
          "2507:                 if (invite == null) {",
          "2508:                     invite = frag.addElement(\"invite\");",
          "",
          "[Removed Lines]",
          "2503:             final JID from = sender.getUserAddress() != null ? sender.getUserAddress() : getJID();",
          "2505:             if (reason != null && reason.length() > 0) {",
          "",
          "[Added Lines]",
          "2671:             final JID from = senderUserAddress != null ? senderUserAddress : getJID();",
          "2673:             if (reason != null && !reason.isEmpty()) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2667:             throw new ForbiddenException();",
          "2668:         }",
          "2677:     }",
          "2693:             throw new ForbiddenException();",
          "2694:         }",
          "2702:                 frag.element(\"item\").addElement(\"reason\").setText(reason);",
          "2703:             }",
          "2704:         }",
          "2706:     }",
          "",
          "[Removed Lines]",
          "2664:     public Presence addModerator(JID jid, MUCRole actor) throws ForbiddenException {",
          "2665:         if (MUCRole.Affiliation.admin != actor.getAffiliation()",
          "2666:             && MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "2670:         try {",
          "2671:             return changeOccupantRole(jid, MUCRole.Role.moderator);",
          "2672:         }",
          "2673:         catch (NotAllowedException e) {",
          "2675:             return null;",
          "2676:         }",
          "2690:     public Presence addParticipant(JID jid, String reason, MUCRole actor)",
          "2691:         throws NotAllowedException, ForbiddenException {",
          "2692:         if (MUCRole.Role.moderator != actor.getRole()) {",
          "2696:         Presence updatedPresence = changeOccupantRole(jid, MUCRole.Role.participant);",
          "2697:         if (updatedPresence != null) {",
          "2698:             Element frag = updatedPresence.getChildElement(",
          "2699:                 \"x\", \"http://jabber.org/protocol/muc#user\");",
          "2701:             if (reason != null && reason.trim().length() > 0) {",
          "2705:         return updatedPresence;",
          "",
          "[Added Lines]",
          "2831:     public List<Presence> addModerator(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "2832:     {",
          "2833:         if (MUCRole.Affiliation.admin != actorAffiliation&& MUCRole.Affiliation.owner != actorAffiliation) {",
          "2837:         return applyRoleChange(targetUserAddress, MUCRole.Role.moderator);",
          "2851:     public List<Presence> addParticipant(@Nonnull final JID targetUserAddress, @Nullable final String reason,",
          "2852:                                    @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2853:     {",
          "2855:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "2864:         final List<Presence> updatedPresences = applyRoleChange(targetUserAddress, MUCRole.Role.participant);",
          "2865:         for (final Presence updatedPresence : updatedPresences)",
          "2866:         {",
          "2867:             final Element frag = updatedPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "2869:             if (reason != null && !reason.trim().isEmpty()) {",
          "2873:         return updatedPresences;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2723:             throw new ForbiddenException();",
          "2724:         }",
          "2774:     }",
          "",
          "[Removed Lines]",
          "2720:     public Presence addVisitor(JID jid, MUCRole actor) throws NotAllowedException,",
          "2721:         ForbiddenException {",
          "2722:         if (MUCRole.Role.moderator != actor.getRole()) {",
          "2725:         return changeOccupantRole(jid, MUCRole.Role.visitor);",
          "2726:     }",
          "2739:     public Presence kickOccupant(JID jid, JID actorJID, String actorNickname, String reason)",
          "2740:         throws NotAllowedException {",
          "2742:         Presence updatedPresence = changeOccupantRole(jid, MUCRole.Role.none);",
          "2745:         MUCRole sender;",
          "2746:         if ( actorJID == null ) {",
          "2747:             sender = getSelfRepresentation(); // originates from the room itself (eg: through admin console changes).",
          "2748:         } else {",
          "2749:             sender = getOccupantByFullJID(actorJID);",
          "2750:             if ( sender == null ) {",
          "2751:                 sender = getSelfRepresentation();",
          "2752:             }",
          "2753:         }",
          "2755:         if (updatedPresence != null) {",
          "2756:             Element frag = updatedPresence.getChildElement(",
          "2757:                 \"x\", \"http://jabber.org/protocol/muc#user\");",
          "2760:             frag.addElement(\"status\").addAttribute(\"code\", \"307\");",
          "2762:             if (reason != null && reason.trim().length() > 0) {",
          "2763:                 frag.element(\"item\").addElement(\"reason\").setText(reason);",
          "2764:             }",
          "2767:             kickPresence(updatedPresence, actorJID, actorNickname);",
          "2770:             broadcastPresence(updatedPresence, false, sender);",
          "2771:         }",
          "2773:         return updatedPresence;",
          "",
          "[Added Lines]",
          "2887:     public List<Presence> addVisitor(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2888:     {",
          "2889:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "2892:         return applyRoleChange(targetUserAddress, MUCRole.Role.visitor);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2791:         final List<MUCRole> kickedOccupants;",
          "2792:         try {",
          "2793:             kickedOccupants = getOccupantsByNickname(kickPresence.getFrom().getResource());",
          "2794:             for (MUCRole kickedOccupant : kickedOccupants) {",
          "2803:                     }",
          "2804:                 }",
          "2808:                 final Presence kickSelfPresence = kickPresence.createCopy();",
          "2810:                 fragKickSelfPresence.addElement(\"status\").addAttribute(\"code\", \"110\");",
          "2811:                 kickedOccupant.send(kickSelfPresence);",
          "",
          "[Removed Lines]",
          "2789:     private void kickPresence(Presence kickPresence, JID actorJID, String nick) {",
          "2796:                 if (actorJID!=null && actorJID.toString().length() > 0) {",
          "2797:                     Element frag = kickPresence.getChildElement(",
          "2798:                         \"x\", \"http://jabber.org/protocol/muc#user\");",
          "2799:                     Element actor = frag.element(\"item\").addElement(\"actor\");",
          "2800:                     actor.addAttribute(\"jid\", actorJID.toBareJID());",
          "2801:                     if (nick!=null) {",
          "2802:                         actor.addAttribute(\"nick\", nick);",
          "2809:                 Element fragKickSelfPresence = kickSelfPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "",
          "[Added Lines]",
          "2907:     private void kickPresence(@Nonnull final Presence kickPresence, @Nullable final JID actorJID, @Nullable String actorNickname)",
          "2908:     {",
          "2910:         final boolean hasActorJid = actorJID != null;",
          "2911:         boolean hasActorNick = actorNickname != null && !actorNickname.isEmpty();",
          "2912:         if (!hasActorNick && hasActorJid) {",
          "2913:             actorNickname = findNickname(actorJID);",
          "2914:         }",
          "2915:         hasActorNick = actorNickname != null && !actorNickname.isEmpty();",
          "2922:                 if (hasActorJid || hasActorNick) {",
          "2923:                     final Element frag = kickPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "2924:                     final Element actor = frag.element(\"item\").addElement(\"actor\");",
          "2925:                     if (hasActorJid && canAnyoneDiscoverJID) {",
          "2926:                         actor.addAttribute(\"jid\", actorJID.toBareJID());",
          "2927:                     }",
          "2928:                     if (hasActorNick) {",
          "2929:                         actor.addAttribute(\"nick\", actorNickname);",
          "2936:                 final Element fragKickSelfPresence = kickSelfPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2979:         if (membersOnly && !this.membersOnly) {",
          "2991:             }",
          "2992:         }",
          "2993:         this.membersOnly = membersOnly;",
          "",
          "[Removed Lines]",
          "2977:     public List<Presence> setMembersOnly(boolean membersOnly) {",
          "2978:         List<Presence> presences = new CopyOnWriteArrayList<>();",
          "2981:             for (MUCRole occupant : getOccupants()) {",
          "2982:                 if (occupant.getAffiliation().compareTo(MUCRole.Affiliation.member) > 0) {",
          "2983:                     try {",
          "2984:                         presences.add(kickOccupant(occupant.getOccupantJID(), null, null,",
          "2985:                             LocaleUtils.getLocalizedString(\"muc.roomIsNowMembersOnly\")));",
          "2986:                     }",
          "2987:                     catch (NotAllowedException e) {",
          "2988:                         Log.error(e.getMessage(), e);",
          "2989:                     }",
          "2990:                 }",
          "",
          "[Added Lines]",
          "3104:     public List<Presence> setMembersOnly(final boolean membersOnly, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final JID actorJid) throws ForbiddenException",
          "3105:     {",
          "3106:         if (actorAffiliation != MUCRole.Affiliation.owner) {",
          "3107:             throw new ForbiddenException();",
          "3108:         }",
          "3110:         final List<Presence> presences = new CopyOnWriteArrayList<>();",
          "3111:         final String actorNickname = findNickname(actorJid);",
          "3114:             Log.debug(\"Room '{}' was not members-only, but now is. Kick occupants that aren't a member.\", getJID());",
          "3115:             final Set<JID> userAddressesToKick = getOccupants().stream()",
          "3116:                 .filter(mucOccupant -> mucOccupant.getAffiliation().equals(MUCRole.Affiliation.none) || mucOccupant.getAffiliation().equals(MUCRole.Affiliation.outcast))",
          "3117:                 .map(MUCRole::getUserAddress)",
          "3118:                 .collect(Collectors.toSet());",
          "3119:             for (final JID userAddressToKick : userAddressesToKick) {",
          "3120:                 presences.addAll(kickOccupant(userAddressToKick, actorAffiliation, null, actorJid, actorNickname, LocaleUtils.getLocalizedString(\"muc.roomIsNowMembersOnly\"), 322));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3383:             throw new ForbiddenException();",
          "3384:         }",
          "3385:         if (!isLocked()) {",
          "",
          "[Removed Lines]",
          "3381:     public void unlock(MUCRole actor) throws ForbiddenException {",
          "3382:         if (MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "",
          "[Added Lines]",
          "3511:     public void unlock(@Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException {",
          "3512:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3423:         return new Date(lockedTime);",
          "3424:     }",
          "",
          "[Removed Lines]",
          "3436:     public List<Presence> addAdmins(List<JID> newAdmins, MUCRole actor)",
          "3437:         throws ForbiddenException, ConflictException {",
          "3438:         List<Presence> answer = new ArrayList<>(newAdmins.size());",
          "3439:         for (JID newAdmin : newAdmins) {",
          "3440:             final JID bareJID = newAdmin.asBareJID();",
          "3441:             if (!admins.contains(bareJID)) {",
          "3442:                 answer.addAll(addAdmin(bareJID, actor));",
          "3443:             }",
          "3444:         }",
          "3445:         return answer;",
          "3446:     }",
          "3457:     public List<Presence> addOwners(List<JID> newOwners, MUCRole actor)",
          "3458:         throws ForbiddenException {",
          "3459:         List<Presence> answer = new ArrayList<>(newOwners.size());",
          "3460:         for (JID newOwner : newOwners) {",
          "3461:             final JID bareJID = newOwner.asBareJID();",
          "3462:             if (!owners.contains(newOwner)) {",
          "3463:                 answer.addAll(addOwner(bareJID, actor));",
          "3464:             }",
          "3465:         }",
          "3466:         return answer;",
          "3467:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3804:         GroupJID groupJID = group.getJID();",
          "3805:         try {",
          "3807:         } catch (Exception ex) {",
          "3808:             Log.error(\"Failed to remove deleted group from affiliation lists: \" + groupJID, ex);",
          "3809:         }",
          "",
          "[Removed Lines]",
          "3806:             addNone(groupJID, getSelfRepresentation());",
          "",
          "[Added Lines]",
          "3894:             addNone(groupJID, getSelfRepresentation().getAffiliation());",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3817:             GroupJID newJID = group.getJID();",
          "3818:             try {",
          "3819:                 if (owners.contains(originalJID)) {",
          "3821:                 } else if (admins.contains(originalJID)) {",
          "3823:                 } else if (outcasts.contains(originalJID)) {",
          "3825:                 } else if (members.containsKey(originalJID)) {",
          "3827:                 }",
          "3829:             } catch (Exception ex) {",
          "3830:                 Log.error(\"Failed to update group affiliation for \" + newJID, ex);",
          "3831:             }",
          "",
          "[Removed Lines]",
          "3820:                     addOwner(newJID, getSelfRepresentation());",
          "3822:                     addAdmin(newJID, getSelfRepresentation());",
          "3824:                     addOutcast(newJID, null, getSelfRepresentation());",
          "3826:                     addMember(newJID, null, getSelfRepresentation());",
          "3828:                 addNone(originalJID, getSelfRepresentation());",
          "",
          "[Added Lines]",
          "3908:                     addOwner(newJID, getSelfRepresentation().getAffiliation());",
          "3910:                     addAdmin(newJID, getSelfRepresentation().getAffiliation());",
          "3912:                     addOutcast(newJID, null, getSelfRepresentation().getAffiliation(), getSelfRepresentation().getRole());",
          "3914:                     addMember(newJID, null, getSelfRepresentation().getAffiliation());",
          "3916:                 addNone(originalJID, getSelfRepresentation().getAffiliation());",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3853:     }",
          "3855:     private void applyAffiliationChangeAndSendPresence(JID groupMember) {",
          "3857:         for (Presence presence : presences) {",
          "3858:             send(presence, this.getSelfRepresentation());",
          "3859:         }",
          "",
          "[Removed Lines]",
          "3856:         List<Presence> presences = applyAffiliationChange(getSelfRepresentation(), groupMember, null);",
          "",
          "[Added Lines]",
          "3944:         final List<Presence> presences = applyAffiliationChange(groupMember);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3889:             if (getOwners().contains(userJid) && getOwners().size() == 1) {",
          "3890:                 final JID adminJid = XMPPServer.getInstance().getAdmins().iterator().next();",
          "3891:                 Log.info(\"User '{}' is being deleted, but is also the only owner of MUC room '{}'. To prevent having a room without owner, server admin '{}' was made owner of the room.\", user.getUsername(), getJID(), adminJid);",
          "3893:             }",
          "3897:             getMUCService().syncChatRoom(this);",
          "3898:         } catch (Throwable t) {",
          "3899:             Log.warn(\"A problem occurred while trying to update room '{}' as a result of user '{}' being deleted from Openfire.\", getJID(), user);",
          "",
          "[Removed Lines]",
          "3892:                 addOwner(adminJid, getSelfRepresentation());",
          "3896:             addNone(userJid, getSelfRepresentation());",
          "",
          "[Added Lines]",
          "3980:                 addOwner(adminJid, getSelfRepresentation().getAffiliation());",
          "3984:             addNone(userJid, getSelfRepresentation().getAffiliation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.List;",
          "21: import java.util.Locale;",
          "23: import org.dom4j.Element;",
          "24: import org.jivesoftware.openfire.SessionManager;",
          "25: import org.jivesoftware.openfire.XMPPServer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.checkerframework.checker.units.qual.N;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import org.xmpp.packet.PacketError;",
          "39: import org.xmpp.packet.Presence;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import javax.annotation.Nonnull;",
          "43: import javax.annotation.Nullable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:             NotAllowedException, CannotBeInvitedException {",
          "88:         IQ reply = IQ.createResultIQ(packet);",
          "89:         Element element = packet.getChildElement();",
          "93:         List<Element> itemsList = element.elements(\"item\");",
          "95:         if (!itemsList.isEmpty()) {",
          "97:         }",
          "98:         else {",
          "",
          "[Removed Lines]",
          "86:     public void handleIQ(IQ packet, MUCRole sender) throws ForbiddenException, ConflictException,",
          "92:         @SuppressWarnings(\"unchecked\")",
          "96:             handleItemsElement(sender, itemsList, reply);",
          "",
          "[Added Lines]",
          "90:     public void handleIQ(@Nonnull final IQ packet, @Nullable final MUCRole actorOccupant) throws ForbiddenException, ConflictException,",
          "93:         final MUCRole.Affiliation senderAffiliation = actorOccupant != null ? actorOccupant.getAffiliation() : room.getAffiliation(packet.getFrom());",
          "94:         final MUCRole.Role senderRole = actorOccupant != null ? actorOccupant.getRole() : null;",
          "103:             handleItemsElement(senderAffiliation, senderRole, itemsList, reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:             throws ForbiddenException, ConflictException, NotAllowedException, CannotBeInvitedException {",
          "129:         String affiliation;",
          "130:         String roleAttribute;",
          "",
          "[Removed Lines]",
          "127:     private void handleItemsElement(MUCRole sender, List<Element> itemsList, IQ reply)",
          "",
          "[Added Lines]",
          "134:     private void handleItemsElement(@Nonnull final MUCRole.Affiliation senderAffiliation, @Nullable final MUCRole.Role senderRole, @Nonnull final List<Element> itemsList, @Nonnull final IQ reply)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:                 Element metaData;",
          "146:                 if (\"outcast\".equals(affiliation)) {",
          "150:                         throw new ForbiddenException();",
          "151:                     }",
          "152:                     for (JID jid : room.getOutcasts()) {",
          "",
          "[Removed Lines]",
          "148:                     if (MUCRole.Affiliation.admin != sender.getAffiliation()",
          "149:                             && MUCRole.Affiliation.owner != sender.getAffiliation()) {",
          "",
          "[Added Lines]",
          "155:                     if (MUCRole.Affiliation.admin != senderAffiliation",
          "156:                             && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:                     if (room.isMembersOnly()",
          "175:                         throw new ForbiddenException();",
          "176:                     }",
          "177:                     for (JID jid : room.getMembers()) {",
          "",
          "[Removed Lines]",
          "172:                             && MUCRole.Affiliation.member != sender.getAffiliation()",
          "173:                             && MUCRole.Affiliation.admin != sender.getAffiliation()",
          "174:                             && MUCRole.Affiliation.owner != sender.getAffiliation()) {",
          "",
          "[Added Lines]",
          "179:                             && MUCRole.Affiliation.member != senderAffiliation",
          "180:                             && MUCRole.Affiliation.admin != senderAffiliation",
          "181:                             && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:                     }",
          "192:                 } else if (\"moderator\".equals(roleAttribute)) {",
          "196:                         throw new ForbiddenException();",
          "197:                     }",
          "198:                     for (MUCRole role : room.getModerators()) {",
          "",
          "[Removed Lines]",
          "194:                     if (MUCRole.Affiliation.admin != sender.getAffiliation()",
          "195:                             && MUCRole.Affiliation.owner != sender.getAffiliation()) {",
          "",
          "[Added Lines]",
          "201:                     if (MUCRole.Affiliation.admin != senderAffiliation",
          "202:                             && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "204:                     }",
          "205:                 } else if (\"participant\".equals(roleAttribute)) {",
          "208:                         throw new ForbiddenException();",
          "209:                     }",
          "210:                     for (MUCRole role : room.getParticipants()) {",
          "",
          "[Removed Lines]",
          "207:                     if (MUCRole.Role.moderator != sender.getRole()) {",
          "",
          "[Added Lines]",
          "214:                     if (MUCRole.Role.moderator != senderRole) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:                     }",
          "217:                 } else if (\"owner\".equals(affiliation)) {",
          "219:                     for (JID jid : room.getOwners()) {",
          "220:                         if (GroupJID.isGroup(jid)) {",
          "221:                             try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:                     if (!room.canAnyoneDiscoverJID() && MUCRole.Affiliation.owner != senderAffiliation) {",
          "227:                         throw new ForbiddenException();",
          "228:                     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "233:                     }",
          "234:                 } else if (\"admin\".equals(affiliation)) {",
          "236:                     for (JID jid : room.getAdmins()) {",
          "237:                         if (GroupJID.isGroup(jid)) {",
          "238:                             try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:                     if (!room.canAnyoneDiscoverJID() && MUCRole.Affiliation.owner != senderAffiliation) {",
          "248:                         throw new ForbiddenException();",
          "249:                     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "288:                         switch (target) {",
          "289:                             case \"moderator\":",
          "292:                                 break;",
          "294:                             case \"owner\":",
          "296:                                 break;",
          "298:                             case \"admin\":",
          "300:                                 break;",
          "302:                             case \"participant\":",
          "305:                                     item.elementTextTrim(\"reason\"),",
          "307:                                 break;",
          "309:                             case \"visitor\":",
          "312:                                 break;",
          "314:                             case \"member\":",
          "316:                                 boolean hadAffiliation = room.getAffiliation(jid) != MUCRole.Affiliation.none;",
          "",
          "[Removed Lines]",
          "291:                                 presences.add(room.addModerator(jid, sender));",
          "295:                                 presences.addAll(room.addOwner(jid, sender));",
          "299:                                 presences.addAll(room.addAdmin(jid, sender));",
          "304:                                 presences.add(room.addParticipant(jid,",
          "306:                                     sender));",
          "311:                                 presences.add(room.addVisitor(jid, sender));",
          "317:                                 presences.addAll(room.addMember(jid, nick, sender));",
          "",
          "[Added Lines]",
          "306:                                 presences.addAll(room.addModerator(jid, senderAffiliation));",
          "310:                                 presences.addAll(room.addOwner(jid, senderAffiliation));",
          "314:                                 presences.addAll(room.addAdmin(jid, senderAffiliation));",
          "319:                                 presences.addAll(room.addParticipant(jid,",
          "321:                                     senderAffiliation, senderRole));",
          "326:                                 presences.addAll(room.addVisitor(jid, senderAffiliation, senderRole));",
          "332:                                 presences.addAll(room.addMember(jid, nick, senderAffiliation));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "331:                                         invitees.add(jid);",
          "332:                                     }",
          "333:                                     for (JID invitee : invitees) {",
          "335:                                     }",
          "336:                                 }",
          "337:                                 break;",
          "",
          "[Removed Lines]",
          "334:                                         room.sendInvitation(invitee, null, sender, null);",
          "",
          "[Added Lines]",
          "349:                                         room.sendInvitation(invitee, null, senderAffiliation, reply.getTo(), null);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "343:                                     final Locale localeForSession = SessionManager.getInstance().getLocaleForSession(originator);",
          "344:                                     reply.setError(PacketError.Condition.conflict);",
          "345:                                     reply.getError().setText(LocaleUtils.getLocalizedString(\"muc.room.affiliations.error_banning_self\", localeForSession), localeForSession != null ? localeForSession.getLanguage() : null);",
          "348:                                     final Locale localeForSession = SessionManager.getInstance().getLocaleForSession(originator);",
          "349:                                     reply.setError(PacketError.Condition.not_allowed);",
          "350:                                     reply.getError().setText(LocaleUtils.getLocalizedString(\"muc.room.affiliations.error_banning_owner_by_admin\", localeForSession), localeForSession != null ? localeForSession.getLanguage() : null);",
          "351:                                 } else {",
          "354:                                 }",
          "355:                                 break;",
          "357:                             case \"none\":",
          "358:                                 if (hasAffiliation) {",
          "361:                                 } else {",
          "364:                                         throw new ForbiddenException();",
          "365:                                     }",
          "368:                                 }",
          "369:                                 break;",
          "",
          "[Removed Lines]",
          "346:                                 } else if (sender.getAffiliation() == MUCRole.Affiliation.admin && room.getAffiliation(jid) == MUCRole.Affiliation.owner) {",
          "353:                                     presences.addAll(room.addOutcast(jid, item.elementTextTrim(\"reason\"), sender));",
          "360:                                     presences.addAll(room.addNone(jid, sender));",
          "363:                                     if (MUCRole.Role.moderator != sender.getRole()) {",
          "366:                                     presences.add(room.kickOccupant(jid, sender.getUserAddress(), sender.getNickname(),",
          "367:                                         item.elementTextTrim(\"reason\")));",
          "",
          "[Added Lines]",
          "361:                                 } else if (senderAffiliation == MUCRole.Affiliation.admin && room.getAffiliation(jid) == MUCRole.Affiliation.owner) {",
          "368:                                     presences.addAll(room.addOutcast(jid, item.elementTextTrim(\"reason\"), senderAffiliation, senderRole));",
          "375:                                     presences.addAll(room.addNone(jid, senderAffiliation));",
          "378:                                     if (MUCRole.Role.moderator != senderRole) {",
          "381:                                     presences.addAll(room.kickOccupant(jid, senderAffiliation, senderRole, reply.getTo(), null, item.elementTextTrim(\"reason\")));",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:                     if (ElementUtil.includesProperty(iq, \"query.remove\")) {",
          "180:                     }",
          "181:                     else {",
          "",
          "[Removed Lines]",
          "179:                         presences.addAll(room.addNone(packet.getFrom(), room.getSelfRepresentation()));",
          "",
          "[Added Lines]",
          "179:                         presences.addAll(room.addNone(packet.getFrom(), room.getSelfRepresentation().getAffiliation()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:                             presences.addAll(room.addMember(packet.getFrom(),",
          "199:                                     nickname,",
          "201:                         }",
          "202:                         else {",
          "203:                             reply.setChildElement(packet.getChildElement().createCopy());",
          "",
          "[Removed Lines]",
          "200:                                     room.getSelfRepresentation()));",
          "",
          "[Added Lines]",
          "200:                                     room.getSelfRepresentation().getAffiliation()));",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.xmpp.forms.FormField.Type;",
          "36: import org.xmpp.packet.*;",
          "38: import java.util.*;",
          "39: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import javax.annotation.Nonnull;",
          "39: import javax.annotation.Nullable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     {",
          "87:             throw new ForbiddenException();",
          "88:         }",
          "",
          "[Removed Lines]",
          "83:     public void handleIQ(IQ packet, MUCRole sender) throws ForbiddenException, ConflictException, CannotBeInvitedException, NotAcceptableException",
          "86:         if (MUCRole.Affiliation.owner != sender.getAffiliation()) {",
          "",
          "[Added Lines]",
          "85:     public void handleIQ(@Nonnull final IQ packet, @Nullable final MUCRole actorOccupant) throws ForbiddenException, ConflictException, CannotBeInvitedException, NotAcceptableException",
          "87:         final MUCRole.Affiliation actorAffiliation = actorOccupant != null ? actorOccupant.getAffiliation() : room.getAffiliation(packet.getFrom());",
          "90:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:         Element formElement = element.element(QName.get(\"x\", \"jabber:x:data\"));",
          "95:         if (formElement != null) {",
          "97:         }",
          "98:         else {",
          "99:             Element destroyElement = element.element(\"destroy\");",
          "100:             if (destroyElement != null) {",
          "101:                 if (room.getMUCService().getMUCDelegate() != null) {",
          "104:                         throw new ForbiddenException();",
          "105:                     }",
          "",
          "[Removed Lines]",
          "96:             handleDataFormElement(sender, formElement);",
          "102:                     if (!room.getMUCService().getMUCDelegate().destroyingRoom(room.getName(), sender.getUserAddress())) {",
          "",
          "[Added Lines]",
          "100:             handleDataFormElement(actorAffiliation, packet.getFrom(), formElement);",
          "106:                     if (!room.getMUCService().getMUCDelegate().destroyingRoom(room.getName(), packet.getFrom())) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:             throws ForbiddenException, ConflictException, NotAcceptableException {",
          "149:         DataForm completedForm = new DataForm(formElement);",
          "",
          "[Removed Lines]",
          "147:     private void handleDataFormElement(MUCRole sender, Element formElement)",
          "",
          "[Added Lines]",
          "152:     private void handleDataFormElement(@Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final JID actorJid, @Nonnull final Element formElement)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:             }",
          "166:             else {",
          "168:             }",
          "171:             if (room.isLocked() && !room.isManuallyLocked()) {",
          "173:             }",
          "174:             break;",
          "",
          "[Removed Lines]",
          "167:                 processConfigurationForm(completedForm, sender);",
          "172:                 room.unlock(sender);",
          "",
          "[Added Lines]",
          "172:                 processConfigurationForm(completedForm, actorAffiliation, actorJid);",
          "177:                 room.unlock(actorAffiliation);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:             throws ForbiddenException, ConflictException, NotAcceptableException",
          "194:     {",
          "195:         List<String> values;",
          "",
          "[Removed Lines]",
          "192:     private void processConfigurationForm(DataForm completedForm, MUCRole sender)",
          "",
          "[Added Lines]",
          "198:     private void processConfigurationForm(@Nonnull final DataForm completedForm, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final JID actorJid)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203:             for (String value : field.getValues()) {",
          "208:                     admins.add(GroupJID.fromString((value.trim())).asBareJID());",
          "209:                 }",
          "",
          "[Removed Lines]",
          "206:                 if (value != null && value.trim().length() != 0) {",
          "",
          "[Added Lines]",
          "212:                 if (value != null && !value.trim().isEmpty()) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218:             for(String value : field.getValues()) {",
          "223:                     owners.add(GroupJID.fromString((value.trim())).asBareJID());",
          "224:                 }",
          "",
          "[Removed Lines]",
          "221:                 if (value != null && value.trim().length() != 0) {",
          "",
          "[Added Lines]",
          "227:                 if (value != null && !value.trim().isEmpty()) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "288:         field = completedForm.getField(\"muc#roomconfig_membersonly\");",
          "289:         if (field != null) {",
          "291:         }",
          "293:         field = completedForm.getField(\"muc#roomconfig_allowinvites\");",
          "",
          "[Removed Lines]",
          "290:             presences.addAll(room.setMembersOnly( parseFirstValueAsBoolean( field, true ) ) );",
          "",
          "[Added Lines]",
          "296:             presences.addAll(room.setMembersOnly( parseFirstValueAsBoolean( field, true ), actorAffiliation, actorJid ) );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "411:         room.getFmucHandler().applyConfigurationChanges();",
          "417:         if (ownersSent) {",
          "",
          "[Removed Lines]",
          "414:         presences.addAll(room.addOwners(owners, sender));",
          "415:         presences.addAll(room.addAdmins(admins, sender));",
          "",
          "[Added Lines]",
          "420:         presences.addAll(room.addOwners(owners, actorAffiliation));",
          "421:         presences.addAll(room.addAdmins(admins, actorAffiliation));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "423:             for (JID jid : ownersToRemove) {",
          "425:                 if (!GroupJID.isGroup(jid)) {",
          "427:                 }",
          "428:             }",
          "429:         }",
          "",
          "[Removed Lines]",
          "426:                     presences.addAll(room.addMember(jid, null, sender));",
          "",
          "[Added Lines]",
          "432:                     presences.addAll(room.addMember(jid, null, actorAffiliation));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "437:             for (JID jid : adminsToRemove) {",
          "439:                 if (!GroupJID.isGroup(jid)) {",
          "441:                 }",
          "442:             }",
          "443:         }",
          "",
          "[Removed Lines]",
          "440:                     presences.addAll(room.addMember(jid, null, sender));",
          "",
          "[Added Lines]",
          "446:                     presences.addAll(room.addMember(jid, null, actorAffiliation));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "467:         }",
          "468:     }",
          "473:     private Element generateProbeResult(Locale preferredLocale) {",
          "474:         final DataForm configurationForm = new DataForm(DataForm.Type.form);",
          "475:         configurationForm.setTitle(LocaleUtils.getLocalizedString(\"muc.form.conf.title\", preferredLocale));",
          "",
          "[Removed Lines]",
          "470:     private void refreshConfigurationFormValues() {",
          "471:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.jivesoftware.openfire.cluster.NodeID;",
          "22: import org.jivesoftware.openfire.event.GroupEventDispatcher;",
          "23: import org.jivesoftware.openfire.event.UserEventDispatcher;",
          "28: import org.jivesoftware.openfire.spi.RoutingTableImpl;",
          "29: import org.jivesoftware.openfire.user.UserNotFoundException;",
          "30: import org.jivesoftware.util.cache.Cache;",
          "",
          "[Removed Lines]",
          "24: import org.jivesoftware.openfire.muc.MUCRole;",
          "25: import org.jivesoftware.openfire.muc.MUCRoom;",
          "26: import org.jivesoftware.openfire.muc.MultiUserChatService;",
          "27: import org.jivesoftware.openfire.muc.NotAllowedException;",
          "",
          "[Added Lines]",
          "24: import org.jivesoftware.openfire.muc.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "453:         try {",
          "461:             Log.debug(\"Kicked occupant '{}' out of room '{}'.\", userToBeKicked, room.getName());",
          "464:             Log.debug(\"Occupant '{}' not kicked out of room '{}' because of '{}'.\", userToBeKicked, room.getName(), e.getMessage());",
          "465:         }",
          "",
          "[Removed Lines]",
          "454:             final Presence kickedPresence = room.kickOccupant(userToBeKicked, null, null, \"Nickname clash with other user in the same room.\");",
          "456:             Log.trace(\"Kick presence to be sent to room: {}\", kickedPresence);",
          "459:             room.send(kickedPresence, room.getSelfRepresentation());",
          "462:         } catch (final NotAllowedException e) {",
          "",
          "[Added Lines]",
          "451:             final List<Presence> kickedPresences = room.kickOccupant(userToBeKicked, room.getSelfRepresentation().getAffiliation(), room.getSelfRepresentation().getRole(), null, null,\"Nickname clash with other user in the same room.\");",
          "453:             for(final Presence kickedPresence : kickedPresences) {",
          "454:                 Log.trace(\"Kick presence to be sent to room: {}\", kickedPresence);",
          "457:                 room.send(kickedPresence, room.getSelfRepresentation());",
          "458:             }",
          "461:         } catch (final ForbiddenException e) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:             room.setMaxUsers(rs.getInt(\"maxUsers\"));",
          "250:             room.setPublicRoom(rs.getInt(\"publicRoom\") == 1);",
          "251:             room.setModerated(rs.getInt(\"moderated\") == 1);",
          "253:             room.setCanOccupantsInvite(rs.getInt(\"canInvite\") == 1);",
          "254:             room.setPassword(rs.getString(\"roomPassword\"));",
          "255:             room.setCanAnyoneDiscoverJID(rs.getInt(\"canDiscoverJID\") == 1);",
          "",
          "[Removed Lines]",
          "252:             room.setMembersOnly(rs.getInt(\"membersOnly\") == 1);",
          "",
          "[Added Lines]",
          "252:             try {",
          "253:                 room.setMembersOnly(rs.getInt(\"membersOnly\") == 1, MUCRole.Affiliation.owner, null);",
          "254:             } catch (ForbiddenException e) {",
          "255:                 Log.error(\"Unable to set members-only when loading room from database (this is likely a bug in Openfire). Room: {}\", room.getJID(), e);",
          "256:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:                 try {",
          "325:                     switch (affiliation) {",
          "326:                         case owner:",
          "328:                             break;",
          "329:                         case admin:",
          "331:                             break;",
          "332:                         case outcast:",
          "334:                             break;",
          "335:                         default:",
          "336:                             Log.error(\"Unknown affiliation value {} for user {} in persistent room {}\", affiliation, affiliationJID.toBareJID(), room.getID());",
          "",
          "[Removed Lines]",
          "327:                             room.addOwner(affiliationJID, room.getSelfRepresentation());",
          "330:                             room.addAdmin(affiliationJID, room.getSelfRepresentation());",
          "333:                             room.addOutcast(affiliationJID, null, room.getSelfRepresentation());",
          "",
          "[Added Lines]",
          "331:                             room.addOwner(affiliationJID, room.getSelfRepresentation().getAffiliation());",
          "334:                             room.addAdmin(affiliationJID, room.getSelfRepresentation().getAffiliation());",
          "337:                             room.addOutcast(affiliationJID, null, room.getSelfRepresentation().getAffiliation(), room.getSelfRepresentation().getRole());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "348:             while (rs.next()) {",
          "349:                 try {",
          "350:                     final JID jid = GroupJID.fromString(rs.getString(\"jid\"));",
          "352:                 }",
          "353:                 catch (Exception e) {",
          "354:                     Log.error(\"Unable to load member for room: {}\", room.getName(), e);",
          "",
          "[Removed Lines]",
          "351:                     room.addMember(jid, rs.getString(\"nickname\"), room.getSelfRepresentation());",
          "",
          "[Added Lines]",
          "355:                     room.addMember(jid, rs.getString(\"nickname\"), room.getSelfRepresentation().getAffiliation());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "665:                     room.setMaxUsers(resultSet.getInt(\"maxUsers\"));",
          "666:                     room.setPublicRoom(resultSet.getInt(\"publicRoom\") == 1);",
          "667:                     room.setModerated(resultSet.getInt(\"moderated\") == 1);",
          "669:                     room.setCanOccupantsInvite(resultSet.getInt(\"canInvite\") == 1);",
          "670:                     room.setPassword(resultSet.getString(\"roomPassword\"));",
          "671:                     room.setCanAnyoneDiscoverJID(resultSet.getInt(\"canDiscoverJID\") == 1);",
          "",
          "[Removed Lines]",
          "668:                     room.setMembersOnly(resultSet.getInt(\"membersOnly\") == 1);",
          "",
          "[Added Lines]",
          "672:                     try {",
          "673:                         room.setMembersOnly(resultSet.getInt(\"membersOnly\") == 1, MUCRole.Affiliation.owner, null);",
          "674:                     } catch (ForbiddenException e) {",
          "675:                         Log.error(\"Unable to set members-only when loading room from database (this is likely a bug in Openfire). Room: {}\", room.getJID(), e);",
          "676:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927:                     try {",
          "928:                         switch (affiliation) {",
          "929:                             case owner:",
          "931:                                 break;",
          "932:                             case admin:",
          "934:                                 break;",
          "935:                             case outcast:",
          "937:                                 break;",
          "938:                             default:",
          "939:                                 Log.error(\"Unknown affiliation value \" + affiliation + \" for user \" + affiliationJID + \" in persistent room \" + room.getID());",
          "",
          "[Removed Lines]",
          "930:                                 room.addOwner(affiliationJID, room.getSelfRepresentation());",
          "933:                                 room.addAdmin(affiliationJID, room.getSelfRepresentation());",
          "936:                                 room.addOutcast(affiliationJID, null, room.getSelfRepresentation());",
          "",
          "[Added Lines]",
          "938:                                 room.addOwner(affiliationJID, room.getSelfRepresentation().getAffiliation());",
          "941:                                 room.addAdmin(affiliationJID, room.getSelfRepresentation().getAffiliation());",
          "944:                                 room.addOutcast(affiliationJID, null, room.getSelfRepresentation().getAffiliation(), room.getSelfRepresentation().getRole());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "972:                     try {",
          "974:                         affiliationJID = GroupJID.fromString(resultSet.getString(\"jid\"));",
          "976:                     } catch (ForbiddenException | ConflictException e) {",
          "977:                         Log.warn(\"Unable to add member to room.\", e);",
          "978:                     }",
          "",
          "[Removed Lines]",
          "975:                         room.addMember(affiliationJID, resultSet.getString(\"nickname\"), room.getSelfRepresentation());",
          "",
          "[Added Lines]",
          "983:                         room.addMember(affiliationJID, resultSet.getString(\"nickname\"), room.getSelfRepresentation().getAffiliation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:         final Message.Type type = packet.getType();",
          "812:         String nickname = packet.getTo().getResource();",
          "814:         {",
          "815:             nickname = null;",
          "816:         }",
          "",
          "[Removed Lines]",
          "813:         if ( nickname == null || nickname.trim().length() == 0 )",
          "",
          "[Added Lines]",
          "813:         if ( nickname == null || nickname.trim().isEmpty())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "928:             Log.debug(\"Rejecting private message from occupant '{}' to room '{}'. User addressing a non-existent recipient.\", packet.getFrom(), room.getName(), e);",
          "929:             sendErrorPacket(packet, PacketError.Condition.item_not_found, \"The intended recipient of your private message is not available.\");",
          "930:         }",
          "931:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "931:         catch ( NotAcceptableException e )",
          "932:         {",
          "933:             Log.debug(\"Rejecting private message from user '{}' to room '{}'. User is not in that room.\", packet.getFrom(), room.getName(), e);",
          "934:             sendErrorPacket(packet, PacketError.Condition.forbidden, \"You are not allowed to send a private messages in the room.\");",
          "935:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "962:                 if (room.isMembersOnly())",
          "963:                 {",
          "965:                 }",
          "969:             }",
          "970:         }",
          "971:         catch ( ForbiddenException e )",
          "",
          "[Removed Lines]",
          "964:                     room.addMember(jid, null, preExistingOccupantData);",
          "968:                 room.sendInvitation(jid, info.elementTextTrim(\"reason\"), preExistingOccupantData, extensions);",
          "",
          "[Added Lines]",
          "969:                     room.addMember(jid, null, preExistingOccupantData.getAffiliation());",
          "973:                 room.sendInvitation(jid, info.elementTextTrim(\"reason\"), preExistingOccupantData.getAffiliation(), preExistingOccupantData.getUserAddress(), extensions);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1014:         @Nullable final MUCRole occupantData )",
          "1015:     {",
          "1018:         {",
          "1025:             }",
          "1026:             return;",
          "1027:         }",
          "",
          "[Removed Lines]",
          "1017:         if ( occupantData == null || room == null)",
          "1019:             Log.debug(\"Ignoring stanza received from a non-occupant of a room (room might not even exist): {}\", packet.toXML());",
          "1020:             if ( packet.isRequest() )",
          "1021:             {",
          "1024:                 sendErrorPacket(packet, PacketError.Condition.bad_request, \"You are not an occupant of this room.\");",
          "",
          "[Added Lines]",
          "1022:         if (packet.isRequest() && packet.getTo().getResource() != null && occupantData == null && packet.getChildElement().getNamespace().getURI().startsWith(\"http://jabber.org/protocol/disco#\"))",
          "1026:             sendErrorPacket(packet, PacketError.Condition.bad_request, \"You are not an occupant of this room.\");",
          "1027:             return;",
          "1028:         }",
          "1030:         if (room == null)",
          "1031:         {",
          "1032:             Log.debug(\"Ignoring IQ stanza received for a room room (room might not even exist): {}\", packet.toXML());",
          "1033:             if (packet.isRequest()) {",
          "1034:                 sendErrorPacket(packet, PacketError.Condition.item_not_found, \"The room does not exist.\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1037:                     room.sendPrivatePacket(packet, occupantData);",
          "1038:                 }",
          "1040:                 {",
          "1042:                     Log.debug(\"Silently ignoring an IQ response sent to the room as a private message that caused an exception while being processed: {}\", packet.toXML(), e);",
          "",
          "[Removed Lines]",
          "1039:                 catch ( NotFoundException | ForbiddenException e )",
          "",
          "[Added Lines]",
          "1049:                 catch (NotFoundException | ForbiddenException | NotAcceptableException e)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1049:         }",
          "1050:         else",
          "1051:         {",
          "1060:             try",
          "1061:             {",
          "",
          "[Removed Lines]",
          "1053:             if ( !occupantData.getUserAddress().equals(packet.getFrom()) )",
          "1054:             {",
          "1055:                 Log.debug(\"Rejecting conflicting stanza with conflicting roles: {}\", packet.toXML());",
          "1056:                 sendErrorPacket(packet, PacketError.Condition.conflict, \"Another user uses this nickname.\");",
          "1057:                 return;",
          "1058:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1076:                     {",
          "1078:                         final boolean selfPingEnabled = JiveGlobals.getBooleanProperty(\"xmpp.muc.self-ping.enabled\", true);",
          "1080:                             && packet.getElement().element(QName.get(IQPingHandler.ELEMENT_NAME, IQPingHandler.NAMESPACE)) != null )",
          "1081:                         {",
          "1082:                             Log.trace(\"User '{}' is sending an IQ 'ping' to itself. See XEP-0410: MUC Self-Ping (Schr\u00f6dinger's Chat).\", packet.getFrom());",
          "",
          "[Removed Lines]",
          "1079:                         if ( selfPingEnabled && toNickname.equals(occupantData.getNickname()) && packet.isRequest()",
          "",
          "[Added Lines]",
          "1081:                         if ( selfPingEnabled && occupantData != null && toNickname.equals(occupantData.getNickname()) && packet.isRequest()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1301:             if ( mucInfo == null && room.isLocked() && !room.isManuallyLocked() )",
          "1302:             {",
          "1304:             }",
          "1305:         }",
          "1306:         catch ( UnauthorizedException e )",
          "",
          "[Removed Lines]",
          "1303:                 room.unlock(occupantData);",
          "",
          "[Added Lines]",
          "1305:                 room.unlock(occupantData.getAffiliation());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1731:             Log.debug(\"Removing/kicking {}: {}\", occupant, reason);",
          "1735:             syncChatRoom(room);",
          "1738:             Log.debug(\"Skip removing {}, because it's not allowed (this user likely is an owner of admin of the room).\", occupant, e);",
          "1739:         } finally {",
          "",
          "[Removed Lines]",
          "1732:             room.kickOccupant(occupant.getRealJID(), null, null, reason);",
          "1736:         } catch (final NotAllowedException e) {",
          "",
          "[Added Lines]",
          "1734:             room.kickOccupant(occupant.getRealJID(), room.getSelfRepresentation().getAffiliation(), room.getSelfRepresentation().getRole(), null, null, reason);",
          "1738:         } catch (final ForbiddenException e) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/webapp/muc-room-occupants.jsp||xmppserver/src/main/webapp/muc-room-occupants.jsp": [
          "File: xmppserver/src/main/webapp/muc-room-occupants.jsp -> xmppserver/src/main/webapp/muc-room-occupants.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         String consoleKickReason = JiveGlobals.getProperty(\"admin.mucRoom.consoleKickReason\", null);",
          "68:         List<MUCRole> occupants = room.getOccupantsByNickname(nickName);",
          "69:         if (occupants != null && !occupants.isEmpty()) {",
          "86:             }",
          "87:         }",
          "88:     }",
          "",
          "[Removed Lines]",
          "70:             try {",
          "71:                 for (MUCRole occupant : occupants) {",
          "72:                     room.kickOccupant(occupant.getUserAddress(), XMPPServer.getInstance().createJID(webManager.getUser().getUsername(), null), null, consoleKickReason);",
          "73:                 }",
          "74:                 webManager.getMultiUserChatManager().getMultiUserChatService(roomJID).syncChatRoom(room);",
          "77:                 webManager.logEvent(\"kicked MUC occupant \"+nickName+\" from \"+roomName, null);",
          "79:                 response.sendRedirect(\"muc-room-occupants.jsp?roomJID=\"+URLEncoder.encode(room.getJID().toBareJID(), \"UTF-8\")+\"&nickName=\"+URLEncoder.encode(nickName, \"UTF-8\")+\"&deletesuccess=true\");",
          "80:                 return;",
          "81:             }",
          "82:             catch (NotAllowedException e) {",
          "84:                 response.sendRedirect(\"muc-room-occupants.jsp?roomJID=\"+URLEncoder.encode(room.getJID().toBareJID(), \"UTF-8\")+\"&nickName=\"+URLEncoder.encode(nickName, \"UTF-8\")+\"&deletefailed=true\");",
          "85:                 return;",
          "",
          "[Added Lines]",
          "70:             for (MUCRole occupant : occupants) {",
          "71:                 room.kickOccupant(occupant.getUserAddress(), room.getSelfRepresentation().getAffiliation(), room.getSelfRepresentation().getRole(), XMPPServer.getInstance().createJID(webManager.getUser().getUsername(), null), null, consoleKickReason);",
          "73:             webManager.getMultiUserChatManager().getMultiUserChatService(roomJID).syncChatRoom(room);",
          "76:             webManager.logEvent(\"kicked MUC occupant \"+nickName+\" from \"+roomName, null);",
          "78:             response.sendRedirect(\"muc-room-occupants.jsp?roomJID=\"+URLEncoder.encode(room.getJID().toBareJID(), \"UTF-8\")+\"&nickName=\"+URLEncoder.encode(nickName, \"UTF-8\")+\"&deletesuccess=true\");",
          "79:             return;",
          "",
          "---------------"
        ],
        "xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java": [
          "File: xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java -> xmppserver/src/test/java/org/jivesoftware/openfire/muc/spi/MucPrivilegesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96184c70175694e73cb45d3447879f033dbc7e04",
      "candidate_info": {
        "commit_hash": "96184c70175694e73cb45d3447879f033dbc7e04",
        "repo": "igniterealtime/Openfire",
        "commit_url": "https://github.com/igniterealtime/Openfire/commit/96184c70175694e73cb45d3447879f033dbc7e04",
        "files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "xmppserver/src/main/webapp/muc-room-affiliations.jsp",
          "xmppserver/src/main/webapp/muc-room-edit-form.jsp",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java"
        ],
        "message": "OF-2860: Deprecate `org.jivesoftware.openfire.muc.MUCRoom#getRole()`\n\nMarks `org.jivesoftware.openfire.muc.MUCRoom#getRole()` for removal in 4.10.0.\n\nThis introduces a replacement method: `org.jivesoftware.openfire.muc.MUCRoom#getSelfRepresentation()` and refactors all known users from the old to the new method.\n\nIn 4.10.0, the replacement method's API will change, which will require users to refactor their code potentially twice (if they choose to use the replacement method prior to 4.10.0).",
        "before_after_code_files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "xmppserver/src/main/webapp/muc-room-affiliations.jsp||xmppserver/src/main/webapp/muc-room-affiliations.jsp",
          "xmppserver/src/main/webapp/muc-room-edit-form.jsp||xmppserver/src/main/webapp/muc-room-edit-form.jsp",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
          ],
          "candidate": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
          ]
        }
      },
      "candidate_diff": {
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCEventDelegate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:             }",
          "144:             try {",
          "146:             } catch (ForbiddenException e) {",
          "147:                 return false;",
          "148:             }",
          "",
          "[Removed Lines]",
          "145:                 room.unlock(room.getRole());",
          "",
          "[Added Lines]",
          "145:                 room.unlock(room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:         final JID reportingFmucAddress;",
          "499:         if (packet.getFrom().getResource() == null) {",
          "500:             Log.trace( \"Sender is the room itself: '{}'\", packet.getFrom() );",
          "502:         } else {",
          "503:             Log.trace( \"Sender is an occupant of the room: '{}'\", packet.getFrom() );",
          "",
          "[Removed Lines]",
          "501:             reportingFmucAddress = this.getChatRoom().getRole().getRoleAddress();",
          "",
          "[Added Lines]",
          "501:             reportingFmucAddress = this.getChatRoom().getSelfRepresentation().getRoleAddress();",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:         return this.emptyDate;",
          "513:     }",
          "520:     public MUCRole getRole() {",
          "521:         return selfOccupantData;",
          "522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:     public MUCRole getSelfRepresentation() {",
          "524:         return selfOccupantData;",
          "525:     }",
          "533:     @Deprecated(since = \"4.9.0\", forRemoval = true) // TODO remove in or after 4.10.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1327:         roomHistory.purge();",
          "1330:     }",
          "",
          "[Removed Lines]",
          "1329:         MUCEventDispatcher.roomDestroyed(getRole().getRoleAddress());",
          "",
          "[Added Lines]",
          "1343:         MUCEventDispatcher.roomDestroyed(getSelfRepresentation().getRoleAddress());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1378:         }",
          "1379:         send(message, sender);",
          "1382:             sender.getNickname(), message);",
          "1383:     }",
          "",
          "[Removed Lines]",
          "1381:         MUCEventDispatcher.messageReceived(getRole().getRoleAddress(), sender.getUserAddress(),",
          "",
          "[Added Lines]",
          "1395:         MUCEventDispatcher.messageReceived(getSelfRepresentation().getRoleAddress(), sender.getUserAddress(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1727:             }",
          "1728:         }",
          "1729:         if (isLogEnabled()) {",
          "1733:             if (message.getFrom() != null && message.getFrom().getResource() != null) {",
          "",
          "[Removed Lines]",
          "1730:             JID senderAddress = getRole().getRoleAddress(); // default to the room being the sender of the message.",
          "",
          "[Added Lines]",
          "1744:             JID senderAddress = getSelfRepresentation().getRoleAddress(); // default to the room being the sender of the message.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1736:                     senderAddress = getOccupantsByNickname(message.getFrom().getResource()).get(0).getUserAddress();",
          "1737:                 } catch (UserNotFoundException e) {",
          "1740:                 }",
          "1741:             }",
          "",
          "[Removed Lines]",
          "1739:                     senderAddress = getRole().getRoleAddress();",
          "",
          "[Added Lines]",
          "1753:                     senderAddress = getSelfRepresentation().getRoleAddress();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1916:         }",
          "1920:     }",
          "1922:     private boolean removeOwner(JID jid) {",
          "",
          "[Removed Lines]",
          "1919:         return applyAffiliationChange(getRole(), bareJID, null);",
          "",
          "[Added Lines]",
          "1933:         return applyAffiliationChange(getSelfRepresentation(), bareJID, null);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1971:         }",
          "1975:     }",
          "1977:     private boolean removeAdmin(JID bareJID) {",
          "",
          "[Removed Lines]",
          "1974:         return applyAffiliationChange(getRole(), bareJID, null);",
          "",
          "[Added Lines]",
          "1988:         return applyAffiliationChange(getSelfRepresentation(), bareJID, null);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2055:     }",
          "2057:     private boolean removeMember(JID jid) {",
          "",
          "[Removed Lines]",
          "2054:         return applyAffiliationChange(getRole(), bareJID, null);",
          "",
          "[Added Lines]",
          "2068:         return applyAffiliationChange(getSelfRepresentation(), bareJID, null);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2352:             occ.changeNickname(newNick);",
          "2356:         }",
          "",
          "[Removed Lines]",
          "2355:             MUCEventDispatcher.nicknameChanged(getRole().getRoleAddress(), occ.getUserAddress(), oldNick, newNick);",
          "",
          "[Added Lines]",
          "2369:             MUCEventDispatcher.nicknameChanged(getSelfRepresentation().getRoleAddress(), occ.getUserAddress(), oldNick, newNick);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2701:         MUCRole sender;",
          "2702:         if ( actorJID == null ) {",
          "2704:         } else {",
          "2705:             sender = getOccupantByFullJID(actorJID);",
          "2706:             if ( sender == null ) {",
          "2708:             }",
          "2709:         }",
          "",
          "[Removed Lines]",
          "2703:             sender = getRole(); // originates from the room itself (eg: through admin console changes).",
          "2707:                 sender = getRole();",
          "",
          "[Added Lines]",
          "2717:             sender = getSelfRepresentation(); // originates from the room itself (eg: through admin console changes).",
          "2721:                 sender = getSelfRepresentation();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3760:         GroupJID groupJID = group.getJID();",
          "3761:         try {",
          "3763:         } catch (Exception ex) {",
          "3764:             Log.error(\"Failed to remove deleted group from affiliation lists: \" + groupJID, ex);",
          "3765:         }",
          "",
          "[Removed Lines]",
          "3762:             addNone(groupJID, getRole());",
          "",
          "[Added Lines]",
          "3776:             addNone(groupJID, getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3773:             GroupJID newJID = group.getJID();",
          "3774:             try {",
          "3775:                 if (owners.contains(originalJID)) {",
          "3777:                 } else if (admins.contains(originalJID)) {",
          "3779:                 } else if (outcasts.contains(originalJID)) {",
          "3781:                 } else if (members.containsKey(originalJID)) {",
          "3783:                 }",
          "3785:             } catch (Exception ex) {",
          "3786:                 Log.error(\"Failed to update group affiliation for \" + newJID, ex);",
          "3787:             }",
          "",
          "[Removed Lines]",
          "3776:                     addOwner(newJID, getRole());",
          "3778:                     addAdmin(newJID, getRole());",
          "3780:                     addOutcast(newJID, null, getRole());",
          "3782:                     addMember(newJID, null, getRole());",
          "3784:                 addNone(originalJID, getRole());",
          "",
          "[Added Lines]",
          "3790:                     addOwner(newJID, getSelfRepresentation());",
          "3792:                     addAdmin(newJID, getSelfRepresentation());",
          "3794:                     addOutcast(newJID, null, getSelfRepresentation());",
          "3796:                     addMember(newJID, null, getSelfRepresentation());",
          "3798:                 addNone(originalJID, getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3809:     }",
          "3811:     private void applyAffiliationChangeAndSendPresence(JID groupMember) {",
          "3813:         for (Presence presence : presences) {",
          "3815:         }",
          "3816:     }",
          "",
          "[Removed Lines]",
          "3812:         List<Presence> presences = applyAffiliationChange(getRole(), groupMember, null);",
          "3814:             send(presence, this.getRole());",
          "",
          "[Added Lines]",
          "3826:         List<Presence> presences = applyAffiliationChange(getSelfRepresentation(), groupMember, null);",
          "3828:             send(presence, this.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3845:             if (getOwners().contains(userJid) && getOwners().size() == 1) {",
          "3846:                 final JID adminJid = XMPPServer.getInstance().getAdmins().iterator().next();",
          "3847:                 Log.info(\"User '{}' is being deleted, but is also the only owner of MUC room '{}'. To prevent having a room without owner, server admin '{}' was made owner of the room.\", user.getUsername(), getJID(), adminJid);",
          "3849:             }",
          "3853:             getMUCService().syncChatRoom(this);",
          "3854:         } catch (Throwable t) {",
          "3855:             Log.warn(\"A problem occurred while trying to update room '{}' as a result of user '{}' being deleted from Openfire.\", getJID(), user);",
          "",
          "[Removed Lines]",
          "3848:                 addOwner(adminJid, getRole());",
          "3852:             addNone(userJid, getRole());",
          "",
          "[Added Lines]",
          "3862:                 addOwner(adminJid, getSelfRepresentation());",
          "3866:             addNone(userJid, getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoomHistory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         if (!isSubjectChangeRequest &&",
          "77:             (fromJID == null || fromJID.toString().length() == 0 ||",
          "79:             return;",
          "80:         }",
          "",
          "[Removed Lines]",
          "78:              fromJID.equals(getRoom().getRole().getRoleAddress()))) {",
          "",
          "[Added Lines]",
          "78:              fromJID.equals(getRoom().getSelfRepresentation().getRoleAddress()))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:         message.setBody(body);",
          "232:         if (nickname != null && nickname.trim().length() > 0) {",
          "235:             message.setFrom(new JID(roomJID.getNode(), roomJID.getDomain(), nickname, true));",
          "236:         }",
          "237:         else {",
          "240:         }",
          "",
          "[Removed Lines]",
          "233:             JID roomJID = getRoom().getRole().getRoleAddress();",
          "239:             message.setFrom(getRoom().getRole().getRoleAddress());",
          "",
          "[Added Lines]",
          "233:             JID roomJID = getRoom().getSelfRepresentation().getRoleAddress();",
          "239:             message.setFrom(getRoom().getSelfRepresentation().getRoleAddress());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:         }",
          "249:         else {",
          "252:         }",
          "253:         return message;",
          "254:     }",
          "",
          "[Removed Lines]",
          "251:             delayInformation.addAttribute(\"from\", getRoom().getRole().getRoleAddress().toString());",
          "",
          "[Added Lines]",
          "251:             delayInformation.addAttribute(\"from\", getRoom().getSelfRepresentation().getRoleAddress().toString());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "383:             for (Presence presence : presences) {",
          "385:             }",
          "386:         }",
          "387:     }",
          "",
          "[Removed Lines]",
          "384:                 room.send(presence, room.getRole());",
          "",
          "[Added Lines]",
          "384:                 room.send(presence, room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:                     if (ElementUtil.includesProperty(iq, \"query.remove\")) {",
          "180:                     }",
          "181:                     else {",
          "",
          "[Removed Lines]",
          "179:                         presences.addAll(room.addNone(packet.getFrom(), room.getRole()));",
          "",
          "[Added Lines]",
          "179:                         presences.addAll(room.addNone(packet.getFrom(), room.getSelfRepresentation()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:                             presences.addAll(room.addMember(packet.getFrom(),",
          "199:                                     nickname,",
          "201:                         }",
          "202:                         else {",
          "203:                             reply.setChildElement(packet.getChildElement().createCopy());",
          "",
          "[Removed Lines]",
          "200:                                     room.getRole()));",
          "",
          "[Added Lines]",
          "200:                                     room.getSelfRepresentation()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:                     }",
          "208:                     for (Presence presence : presences) {",
          "210:                     }",
          "212:                 }",
          "",
          "[Removed Lines]",
          "209:                         room.send(presence, room.getRole());",
          "",
          "[Added Lines]",
          "209:                         room.send(presence, room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:         for (Presence presence : presences) {",
          "454:         }",
          "",
          "[Removed Lines]",
          "453:             room.send(presence, room.getRole());",
          "",
          "[Added Lines]",
          "453:             room.send(presence, room.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:             final Element x = message.addChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "464:             statusCodes.forEach(code -> x.addElement(\"status\").addAttribute(\"code\", String.valueOf(code)));",
          "467:         }",
          "468:     }",
          "",
          "[Removed Lines]",
          "466:             room.send(message, room.getRole());",
          "",
          "[Added Lines]",
          "466:             room.send(message, room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:             Log.trace(\"Kick presence to be sent to room: {}\", kickedPresence);",
          "461:             Log.debug(\"Kicked occupant '{}' out of room '{}'.\", userToBeKicked, room.getName());",
          "462:         } catch (final NotAllowedException e) {",
          "",
          "[Removed Lines]",
          "459:             room.send(kickedPresence, room.getRole());",
          "",
          "[Added Lines]",
          "459:             room.send(kickedPresence, room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:                 try {",
          "325:                     switch (affiliation) {",
          "326:                         case owner:",
          "328:                             break;",
          "329:                         case admin:",
          "331:                             break;",
          "332:                         case outcast:",
          "334:                             break;",
          "335:                         default:",
          "336:                             Log.error(\"Unknown affiliation value {} for user {} in persistent room {}\", affiliation, affiliationJID.toBareJID(), room.getID());",
          "",
          "[Removed Lines]",
          "327:                             room.addOwner(affiliationJID, room.getRole());",
          "330:                             room.addAdmin(affiliationJID, room.getRole());",
          "333:                             room.addOutcast(affiliationJID, null, room.getRole());",
          "",
          "[Added Lines]",
          "327:                             room.addOwner(affiliationJID, room.getSelfRepresentation());",
          "330:                             room.addAdmin(affiliationJID, room.getSelfRepresentation());",
          "333:                             room.addOutcast(affiliationJID, null, room.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:             while (rs.next()) {",
          "349:                 try {",
          "350:                     final JID jid = GroupJID.fromString(rs.getString(\"jid\"));",
          "352:                 }",
          "353:                 catch (Exception e) {",
          "354:                     Log.error(\"Unable to load member for room: {}\", room.getName(), e);",
          "",
          "[Removed Lines]",
          "351:                     room.addMember(jid, rs.getString(\"nickname\"), room.getRole());",
          "",
          "[Added Lines]",
          "351:                     room.addMember(jid, rs.getString(\"nickname\"), room.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "818:             if (!room.getRoomHistory().hasChangedSubject() && room.getSubject() != null &&",
          "819:                 room.getSubject().length() > 0) {",
          "821:                     null, room.getModificationDate(), room.getSubject(), null, null);",
          "822:                 room.getRoomHistory().addOldMessages(subject);",
          "823:             }",
          "",
          "[Removed Lines]",
          "820:                 final Message subject = room.getRoomHistory().parseHistoricMessage(room.getRole().getRoleAddress().toString(),",
          "",
          "[Added Lines]",
          "820:                 final Message subject = room.getRoomHistory().parseHistoricMessage(room.getSelfRepresentation().getRoleAddress().toString(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "879:                 && loadedRoom.getSubject().length() > 0)",
          "880:             {",
          "881:                 final Message message = loadedRoom.getRoomHistory().parseHistoricMessage(",
          "883:                                                             null,",
          "884:                                                             loadedRoom.getModificationDate(),",
          "885:                                                             loadedRoom.getSubject(),",
          "",
          "[Removed Lines]",
          "882:                                                             loadedRoom.getRole().getRoleAddress().toString(),",
          "",
          "[Added Lines]",
          "882:                                                             loadedRoom.getSelfRepresentation().getRoleAddress().toString(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927:                     try {",
          "928:                         switch (affiliation) {",
          "929:                             case owner:",
          "931:                                 break;",
          "932:                             case admin:",
          "934:                                 break;",
          "935:                             case outcast:",
          "937:                                 break;",
          "938:                             default:",
          "939:                                 Log.error(\"Unknown affiliation value \" + affiliation + \" for user \" + affiliationJID + \" in persistent room \" + room.getID());",
          "",
          "[Removed Lines]",
          "930:                                 room.addOwner(affiliationJID, room.getRole());",
          "933:                                 room.addAdmin(affiliationJID, room.getRole());",
          "936:                                 room.addOutcast(affiliationJID, null, room.getRole());",
          "",
          "[Added Lines]",
          "930:                                 room.addOwner(affiliationJID, room.getSelfRepresentation());",
          "933:                                 room.addAdmin(affiliationJID, room.getSelfRepresentation());",
          "936:                                 room.addOutcast(affiliationJID, null, room.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "972:                     try {",
          "974:                         affiliationJID = GroupJID.fromString(resultSet.getString(\"jid\"));",
          "976:                     } catch (ForbiddenException | ConflictException e) {",
          "977:                         Log.warn(\"Unable to add member to room.\", e);",
          "978:                     }",
          "",
          "[Removed Lines]",
          "975:                         room.addMember(affiliationJID, resultSet.getString(\"nickname\"), room.getRole());",
          "",
          "[Added Lines]",
          "975:                         room.addMember(affiliationJID, resultSet.getString(\"nickname\"), room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1947:         }",
          "1948:         if (created) {",
          "1951:         }",
          "1952:         if (loaded || created) {",
          "",
          "[Removed Lines]",
          "1950:             MUCEventDispatcher.roomCreated(room.getRole().getRoleAddress());",
          "",
          "[Added Lines]",
          "1950:             MUCEventDispatcher.roomCreated(room.getSelfRepresentation().getRoleAddress());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3140:             {",
          "3141:                 if (canDiscoverRoom(room, senderJID))",
          "3142:                 {",
          "3144:                         room.getNaturalLanguageName(), null, null));",
          "3145:                 }",
          "3146:             }",
          "",
          "[Removed Lines]",
          "3143:                     answer.add(new DiscoItem(room.getRole().getRoleAddress(),",
          "",
          "[Added Lines]",
          "3143:                     answer.add(new DiscoItem(room.getSelfRepresentation().getRoleAddress(),",
          "",
          "---------------"
        ],
        "xmppserver/src/main/webapp/muc-room-affiliations.jsp||xmppserver/src/main/webapp/muc-room-affiliations.jsp": [
          "File: xmppserver/src/main/webapp/muc-room-affiliations.jsp -> xmppserver/src/main/webapp/muc-room-affiliations.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <%@ page contentType=\"text/html; charset=UTF-8\" %>",
          "2: <%--",
          "3:   -",
          "5:   -",
          "6:   - Licensed under the Apache License, Version 2.0 (the \"License\");",
          "7:   - you may not use this file except in compliance with the License.",
          "",
          "[Removed Lines]",
          "4:   - Copyright (C) 2004-2008 Jive Software, 2017-2022 Ignite Realtime Foundation. All rights reserved.",
          "",
          "[Added Lines]",
          "4:   - Copyright (C) 2004-2008 Jive Software, 2017-2024 Ignite Realtime Foundation. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:                     item.addAttribute(\"nick\", nickName != null ? nickName : memberJID.getNode());",
          "122:                 }",
          "125:                 webManager.getMultiUserChatManager().getMultiUserChatService(roomJID).syncChatRoom(room);",
          "",
          "[Removed Lines]",
          "124:                 room.getIQAdminHandler().handleIQ(iq, room.getRole());",
          "",
          "[Added Lines]",
          "124:                 room.getIQAdminHandler().handleIQ(iq, room.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:         item.addAttribute(\"jid\", userJID);",
          "158:         try {",
          "161:         webManager.getMultiUserChatManager().getMultiUserChatService(roomJID).syncChatRoom(room);",
          "",
          "[Removed Lines]",
          "160:         room.getIQAdminHandler().handleIQ(iq, room.getRole());",
          "",
          "[Added Lines]",
          "160:         room.getIQAdminHandler().handleIQ(iq, room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/main/webapp/muc-room-edit-form.jsp||xmppserver/src/main/webapp/muc-room-edit-form.jsp": [
          "File: xmppserver/src/main/webapp/muc-room-edit-form.jsp -> xmppserver/src/main/webapp/muc-room-edit-form.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <%@ page contentType=\"text/html; charset=UTF-8\" %>",
          "2: <%--",
          "3:   -",
          "5:   -",
          "6:   - Licensed under the Apache License, Version 2.0 (the \"License\");",
          "7:   - you may not use this file except in compliance with the License.",
          "",
          "[Removed Lines]",
          "4:   - Copyright (C) 2004-2008 Jive Software, 2017-2023 Ignite Realtime Foundation. All rights reserved.",
          "",
          "[Added Lines]",
          "4:   - Copyright (C) 2004-2008 Jive Software, 2017-2024 Ignite Realtime Foundation. All rights reserved.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:                 Message message = new Message();",
          "263:                 message.setType(Message.Type.groupchat);",
          "264:                 message.setSubject(roomSubject);",
          "268:             }",
          "",
          "[Removed Lines]",
          "265:                 message.setFrom(room.getRole().getRoleAddress());",
          "266:                 message.setTo(room.getRole().getRoleAddress());",
          "267:                 room.changeSubject(message, room.getRole());",
          "",
          "[Added Lines]",
          "265:                 message.setFrom(room.getSelfRepresentation().getRoleAddress());",
          "266:                 message.setTo(room.getSelfRepresentation().getRoleAddress());",
          "267:                 room.changeSubject(message, room.getSelfRepresentation());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:             Element element = iq.setChildElement(\"query\", \"http://jabber.org/protocol/muc#owner\");",
          "273:             element.add(dataForm.getElement());",
          "277:             webManager.getMultiUserChatManager().getMultiUserChatService(roomJID).syncChatRoom(room);",
          "",
          "[Removed Lines]",
          "275:             room.getIQOwnerHandler().handleIQ(iq, room.getRole());",
          "",
          "[Added Lines]",
          "275:             room.getIQOwnerHandler().handleIQ(iq, room.getSelfRepresentation());",
          "",
          "---------------"
        ],
        "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java": [
          "File: xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java -> xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:         assertEquals(input.getCreationDate(), ((MUCRoom) result).getCreationDate());",
          "192:         assertEquals(input.getModificationDate(), ((MUCRoom) result).getModificationDate());",
          "193:         assertEquals(input.getEmptyDate(), ((MUCRoom) result).getEmptyDate());",
          "195:         assertEquals(input.getChatLength(), ((MUCRoom) result).getChatLength());",
          "196:         assertEquals(input.isLocked(), ((MUCRoom) result).isLocked());",
          "197:         assertEquals(input.isManuallyLocked(), ((MUCRoom) result).isManuallyLocked());",
          "",
          "[Removed Lines]",
          "194:         assertEquals(input.getRole(), ((MUCRoom) result).getRole());",
          "",
          "[Added Lines]",
          "194:         assertEquals(input.getSelfRepresentation(), ((MUCRoom) result).getSelfRepresentation());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "050ab64c0b0c2fe535acf6aecbee05995128141c",
      "candidate_info": {
        "commit_hash": "050ab64c0b0c2fe535acf6aecbee05995128141c",
        "repo": "igniterealtime/Openfire",
        "commit_url": "https://github.com/igniterealtime/Openfire/commit/050ab64c0b0c2fe535acf6aecbee05995128141c",
        "files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "xmppserver/src/main/webapp/muc-room-edit-form.jsp",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java"
        ],
        "message": "OF-2861: Move MUCRole.Role and MUCRole.Affiliation to upper level\n\nBoth public enums are first-class citizens, being explicitly defined in the XEP and used throughout the code.\n\nAs the MUCRole class is plenty large, lets move these two enums to a class of their own.",
        "before_after_code_files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "xmppserver/src/main/webapp/muc-room-edit-form.jsp||xmppserver/src/main/webapp/muc-room-edit-form.jsp",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java",
          "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java"
          ],
          "candidate": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java"
          ]
        }
      },
      "candidate_diff": {
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/Affiliation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.jivesoftware.openfire.muc;",
          "23: public enum Affiliation",
          "24: {",
          "29:     owner(10),",
          "34:     admin(20),",
          "40:     member(30),",
          "45:     outcast(40),",
          "51:     none(50);",
          "53:     private final int value;",
          "55:     Affiliation(int value)",
          "56:     {",
          "57:         this.value = value;",
          "58:     }",
          "65:     public int getValue()",
          "66:     {",
          "67:         return value;",
          "68:     }",
          "76:     public static Affiliation valueOf(int value)",
          "77:     {",
          "78:         switch (value) {",
          "79:             case 10:",
          "80:                 return owner;",
          "81:             case 20:",
          "82:                 return admin;",
          "83:             case 30:",
          "84:                 return member;",
          "85:             case 40:",
          "86:                 return outcast;",
          "87:             default:",
          "88:                 return none;",
          "89:         }",
          "90:     }",
          "91: }",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRole.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "87:     private MUCRole.Role role;",
          "93:     private MUCRole.Affiliation affiliation;",
          "",
          "[Added Lines]",
          "87:     private Role role;",
          "93:     private Affiliation affiliation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     public MUCRole(MUCRoom chatroom, String nickname,",
          "141:     {",
          "142:         this.roomJid = chatroom.getJID();",
          "143:         this.nick = nickname;",
          "",
          "[Removed Lines]",
          "140:                    MUCRole.Role role, MUCRole.Affiliation affiliation, JID userJid, Presence presence)",
          "",
          "[Added Lines]",
          "140:                    Role role, Affiliation affiliation, JID userJid, Presence presence)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:     {",
          "251:         role = newRole;",
          "252:         synchronized (this) {",
          "254:                 presence.setType(Presence.Type.unavailable);",
          "255:                 presence.setStatus(null);",
          "256:             }",
          "",
          "[Removed Lines]",
          "249:     void setRole(MUCRole.Role newRole)",
          "253:             if (MUCRole.Role.none == role) {",
          "",
          "[Added Lines]",
          "249:     void setRole(Role newRole)",
          "253:             if (Role.none == role) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:         return role;",
          "271:     }",
          "",
          "[Removed Lines]",
          "269:     public MUCRole.Role getRole() {",
          "",
          "[Added Lines]",
          "269:     public Role getRole() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "281:         affiliation = newAffiliation;",
          "283:         synchronized (this) {",
          "",
          "[Removed Lines]",
          "280:     void setAffiliation(MUCRole.Affiliation newAffiliation) {",
          "",
          "[Added Lines]",
          "280:     void setAffiliation(Affiliation newAffiliation) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:         return affiliation;",
          "296:     }",
          "",
          "[Removed Lines]",
          "294:     public MUCRole.Affiliation getAffiliation() {",
          "",
          "[Added Lines]",
          "294:     public Affiliation getAffiliation() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "595:         }",
          "596:     }",
          "721:     @Override",
          "722:     public int hashCode() {",
          "723:         final int prime = 31;",
          "",
          "[Removed Lines]",
          "602:     public enum Role {",
          "607:         moderator(0),",
          "613:         participant(1),",
          "618:         visitor(2),",
          "623:         none(3);",
          "625:         private final int value;",
          "627:         Role(int value) {",
          "628:             this.value = value;",
          "629:         }",
          "636:         public int getValue() {",
          "637:             return value;",
          "638:         }",
          "646:         public static MUCRole.Role valueOf(int value) {",
          "647:             switch (value) {",
          "648:                 case 0: return moderator;",
          "649:                 case 1: return participant;",
          "650:                 case 2: return visitor;",
          "651:                 default: return none;",
          "652:             }",
          "653:         }",
          "654:     }",
          "660:     public enum Affiliation {",
          "665:         owner(10),",
          "670:         admin(20),",
          "676:         member(30),",
          "681:         outcast(40),",
          "687:         none(50);",
          "689:         private final int value;",
          "691:         Affiliation(int value) {",
          "692:             this.value = value;",
          "693:         }",
          "700:         public int getValue() {",
          "701:             return value;",
          "702:         }",
          "710:         public static MUCRole.Affiliation valueOf(int value) {",
          "711:             switch (value) {",
          "712:                 case 10: return owner;",
          "713:                 case 20: return admin;",
          "714:                 case 30: return member;",
          "715:                 case 40: return outcast;",
          "716:                 default: return none;",
          "717:             }",
          "718:         }",
          "719:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "847:                     presence = null;",
          "848:                 }",
          "849:             }",
          "852:             voiceOnly = ExternalizableUtil.getInstance().readBoolean(in);",
          "853:             occupantJID = new JID(ExternalizableUtil.getInstance().readSafeUTF(in), false);",
          "854:             synchronized (this) { // Unlikely to be needed, as this should operate on a new instance. Will prevent static analyzers from complaining at negligible cost.",
          "",
          "[Removed Lines]",
          "850:             role = (MUCRole.Role) ExternalizableUtil.getInstance().readSerializable(in);",
          "851:             affiliation = (MUCRole.Affiliation) ExternalizableUtil.getInstance().readSerializable(in);",
          "",
          "[Added Lines]",
          "727:             role = (Role) ExternalizableUtil.getInstance().readSerializable(in);",
          "728:             affiliation = (Affiliation) ExternalizableUtil.getInstance().readSerializable(in);",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "184:     private List<MUCRole.Role> rolesToBroadcastPresence = new ArrayList<>();",
          "",
          "[Added Lines]",
          "184:     private List<Role> rolesToBroadcastPresence = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:         this.lockedTime = startTime;",
          "386:         selfOccupantData = MUCRole.createRoomSelfRepresentation(this);",
          "387:     }",
          "",
          "[Removed Lines]",
          "383:         rolesToBroadcastPresence.add(MUCRole.Role.moderator);",
          "384:         rolesToBroadcastPresence.add(MUCRole.Role.participant);",
          "385:         rolesToBroadcastPresence.add(MUCRole.Role.visitor);",
          "",
          "[Added Lines]",
          "383:         rolesToBroadcastPresence.add(Role.moderator);",
          "384:         rolesToBroadcastPresence.add(Role.participant);",
          "385:         rolesToBroadcastPresence.add(Role.visitor);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "710:         final JID bareJID = userAddress.asBareJID();",
          "712:         if (mucService.isSysadmin(bareJID)) {",
          "714:             Log.debug( \"User '{}' is a sysadmin. Treat as owner.\", userAddress);",
          "716:         }",
          "718:         if (owners.includes(bareJID)) {",
          "720:         }",
          "721:         else if (admins.includes(bareJID)) {",
          "723:         }",
          "725:         else if (outcasts.includes(bareJID)) {",
          "727:         }",
          "728:         else if (members.includesKey(bareJID)) {",
          "730:         }",
          "732:     }",
          "735:     {",
          "736:         final JID bareJID = userAddress.asBareJID();",
          "738:         if (mucService.isSysadmin(bareJID)) {",
          "740:             Log.debug( \"User '{}' is a sysadmin. Treat as owner.\", userAddress);",
          "742:         }",
          "744:         if (owners.includes(bareJID)) {",
          "746:         }",
          "747:         else if (admins.includes(bareJID)) {",
          "749:         }",
          "751:         else if (outcasts.contains(bareJID)) {",
          "",
          "[Removed Lines]",
          "709:     public MUCRole.Affiliation getAffiliation(@Nonnull final JID userAddress) {",
          "715:             return MUCRole.Affiliation.owner;",
          "719:             return MUCRole.Affiliation.owner;",
          "722:             return MUCRole.Affiliation.admin;",
          "726:             return MUCRole.Affiliation.outcast;",
          "729:             return MUCRole.Affiliation.member;",
          "731:         return MUCRole.Affiliation.none;",
          "734:     public MUCRole.Role getRole(@Nonnull JID userAddress)",
          "741:             return MUCRole.Role.moderator;",
          "745:             return MUCRole.Role.moderator;",
          "748:             return MUCRole.Role.moderator;",
          "",
          "[Added Lines]",
          "709:     public Affiliation getAffiliation(@Nonnull final JID userAddress) {",
          "715:             return Affiliation.owner;",
          "719:             return Affiliation.owner;",
          "722:             return Affiliation.admin;",
          "726:             return Affiliation.outcast;",
          "729:             return Affiliation.member;",
          "731:         return Affiliation.none;",
          "734:     public Role getRole(@Nonnull JID userAddress)",
          "741:             return Role.moderator;",
          "745:             return Role.moderator;",
          "748:             return Role.moderator;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "753:         }",
          "754:         else if (members.includesKey(bareJID)) {",
          "757:         }",
          "758:         else {",
          "760:         }",
          "761:     }",
          "",
          "[Removed Lines]",
          "756:             return MUCRole.Role.participant;",
          "759:             return isModerated() ? MUCRole.Role.visitor : MUCRole.Role.participant;",
          "",
          "[Added Lines]",
          "756:             return Role.participant;",
          "759:             return isModerated() ? Role.visitor : Role.participant;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "796:         synchronized (this) {",
          "798:             final JID bareJID = realAddress.asBareJID();",
          "801:             Log.debug( \"User '{}' role and affiliation in room '{} are determined to be: {}, {}\", realAddress, this.getJID(), role, affiliation );",
          "",
          "[Removed Lines]",
          "799:             MUCRole.Role role = getRole( bareJID );",
          "800:             MUCRole.Affiliation affiliation = getAffiliation( bareJID );",
          "",
          "[Added Lines]",
          "799:             Role role = getRole( bareJID );",
          "800:             Affiliation affiliation = getAffiliation( bareJID );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "932:     private void checkJoinRoomPreconditions(",
          "933:         @Nonnull final JID realAddress,",
          "934:         @Nonnull final String nickname,",
          "936:         @Nullable final String password,",
          "937:         @Nonnull final Presence presence)",
          "938:         throws ServiceUnavailableException, RoomLockedException, UserAlreadyExistsException, UnauthorizedException, ConflictException, NotAcceptableException, ForbiddenException, RegistrationRequiredException",
          "",
          "[Removed Lines]",
          "935:         @Nonnull final MUCRole.Affiliation affiliation,",
          "",
          "[Added Lines]",
          "935:         @Nonnull final Affiliation affiliation,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1116:     {",
          "1119:         Log.trace( \"{} Room join precondition 'is outcast': User '{}' {} join room '{}'.\", canJoin ? \"PASS\" : \"FAIL\", realAddress, canJoin ? \"can\" : \"cannot\", this.getJID() );",
          "1120:         if (!canJoin) {",
          "",
          "[Removed Lines]",
          "1115:     private void checkJoinRoomPreconditionIsOutcast(@Nonnull final JID realAddress, @Nonnull final MUCRole.Affiliation affiliation ) throws ForbiddenException",
          "1117:         boolean canJoin = affiliation != MUCRole.Affiliation.outcast;",
          "",
          "[Added Lines]",
          "1115:     private void checkJoinRoomPreconditionIsOutcast(@Nonnull final JID realAddress, @Nonnull final Affiliation affiliation ) throws ForbiddenException",
          "1117:         boolean canJoin = affiliation != Affiliation.outcast;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1132:     {",
          "1135:         Log.trace( \"{} Room join precondition 'member-only': User '{}' {} join room '{}'.\", canJoin ? \"PASS\" : \"FAIL\", realAddress, canJoin ? \"can\" : \"cannot\", this.getJID() );",
          "1136:         if (!canJoin) {",
          "",
          "[Removed Lines]",
          "1131:     private void checkJoinRoomPreconditionMemberOnly(@Nonnull final JID realAddress, @Nonnull final MUCRole.Affiliation affiliation ) throws RegistrationRequiredException",
          "1133:         boolean canJoin = !isMembersOnly() || Arrays.asList( MUCRole.Affiliation.admin, MUCRole.Affiliation.owner, MUCRole.Affiliation.member ).contains( affiliation );",
          "",
          "[Added Lines]",
          "1131:     private void checkJoinRoomPreconditionMemberOnly(@Nonnull final JID realAddress, @Nonnull final Affiliation affiliation ) throws RegistrationRequiredException",
          "1133:         boolean canJoin = !isMembersOnly() || Arrays.asList( Affiliation.admin, Affiliation.owner, Affiliation.member ).contains( affiliation );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1182:             }",
          "1184:             final Presence occupantPresence = occupant.getPresence(); // This returns a copy. Modifications will not be applied to the original.",
          "1187:                 final Element frag = occupantPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "1188:                 frag.element(\"item\").addAttribute(\"jid\", null);",
          "",
          "[Removed Lines]",
          "1185:             if (!canAnyoneDiscoverJID() && MUCRole.Role.moderator != joinedOccupant.getRole()) {",
          "",
          "[Added Lines]",
          "1185:             if (!canAnyoneDiscoverJID() && Role.moderator != joinedOccupant.getRole()) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1449:     public void sendPublicMessage(Message message, MUCRole sender) throws ForbiddenException {",
          "1452:             throw new ForbiddenException();",
          "1453:         }",
          "",
          "[Removed Lines]",
          "1451:         if (isModerated() && sender.getRole().compareTo(MUCRole.Role.participant) > 0) {",
          "",
          "[Added Lines]",
          "1451:         if (isModerated() && sender.getRole().compareTo(Role.participant) > 0) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1665:                     Log.trace( \"Sending self-presence of '{}' to {}\", presence.getFrom(), occupant.getUserAddress() );",
          "1666:                     toSend = selfPresence;",
          "1668:                     Log.trace( \"Sending anonymized presence of '{}' to {}: The room is semi-anon, and this occupant is not a moderator.\", presence.getFrom(), occupant.getUserAddress() );",
          "1669:                     toSend = anonPresence;",
          "1670:                 } else {",
          "",
          "[Removed Lines]",
          "1667:                 } else if ( !canAnyoneDiscoverJID && MUCRole.Role.moderator != occupant.getRole() ) {",
          "",
          "[Added Lines]",
          "1667:                 } else if ( !canAnyoneDiscoverJID && Role.moderator != occupant.getRole() ) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1867:     {",
          "1868:         final List<Presence> presences = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "1866:     private List<Presence> applyRoleChange(@Nonnull final JID userAddress, @Nonnull final MUCRole.Role newRole)",
          "",
          "[Added Lines]",
          "1866:     private List<Presence> applyRoleChange(@Nonnull final JID userAddress, @Nonnull final Role newRole)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1911:     {",
          "1913:             throw new ForbiddenException();",
          "1914:         }",
          "",
          "[Removed Lines]",
          "1910:     public List<Presence> addOwners(@Nonnull final List<JID> targetUserAddresses, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "1912:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "1910:     public List<Presence> addOwners(@Nonnull final List<JID> targetUserAddresses, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException",
          "1912:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1939:     {",
          "1941:             throw new ForbiddenException();",
          "1942:         }",
          "",
          "[Removed Lines]",
          "1938:     public List<Presence> addOwner(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "1940:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "1938:     public List<Presence> addOwner(@Nonnull final JID targetUserAddress, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException",
          "1940:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1951:             }",
          "1955:             switch (oldAffiliation) {",
          "1956:                 case admin:",
          "1957:                     removeAdmin(targetUserAddressBare, actorAffiliation);",
          "",
          "[Removed Lines]",
          "1954:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "[Added Lines]",
          "1954:             final Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1970:                 this,",
          "1971:                 targetUserAddressBare,",
          "1972:                 null,",
          "1974:                 oldAffiliation);",
          "1975:         }",
          "1977:         return applyAffiliationChange(targetUserAddressBare);",
          "1978:     }",
          "1981:     {",
          "1983:             throw new ForbiddenException();",
          "1984:         }",
          "",
          "[Removed Lines]",
          "1973:                 MUCRole.Affiliation.owner,",
          "1980:     private boolean removeOwner(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "1982:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "1973:                 Affiliation.owner,",
          "1980:     private boolean removeOwner(@Nonnull final JID userAddress, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException",
          "1982:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2000:     {",
          "2002:             throw new ForbiddenException();",
          "2003:         }",
          "",
          "[Removed Lines]",
          "1999:     public List<Presence> addAdmins(@Nonnull final List<JID> targetUserAddresses, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2001:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "1999:     public List<Presence> addAdmins(@Nonnull final List<JID> targetUserAddresses, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2001:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2029:     {",
          "2031:             throw new ForbiddenException();",
          "2032:         }",
          "",
          "[Removed Lines]",
          "2028:     public List<Presence> addAdmin(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2030:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "2028:     public List<Presence> addAdmin(@Nonnull final JID targetUserAddress, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2030:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2045:             admins.add(targetUserAddressBare);",
          "2049:             switch (oldAffiliation) {",
          "2050:                 case owner:",
          "2051:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "",
          "[Removed Lines]",
          "2048:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "[Added Lines]",
          "2048:             final Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2062:                 this,",
          "2063:                 targetUserAddressBare,",
          "2064:                 null,",
          "2066:                 oldAffiliation);",
          "2067:         }",
          "",
          "[Removed Lines]",
          "2065:                 MUCRole.Affiliation.admin,",
          "",
          "[Added Lines]",
          "2065:                 Affiliation.admin,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2070:         return applyAffiliationChange(targetUserAddressBare);",
          "2071:     }",
          "2074:     {",
          "2076:             throw new ForbiddenException();",
          "2077:         }",
          "2078:         return admins.remove( userAddress.asBareJID() );",
          "",
          "[Removed Lines]",
          "2073:     private boolean removeAdmin(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "2075:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "2073:     private boolean removeAdmin(@Nonnull final JID userAddress, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException",
          "2075:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2094:     {",
          "2096:             throw new ForbiddenException();",
          "2097:         }",
          "",
          "[Removed Lines]",
          "2093:     public List<Presence> addMember(@Nonnull final JID targetUserAddress, @Nullable final String nickname, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2095:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "2093:     public List<Presence> addMember(@Nonnull final JID targetUserAddress, @Nullable final String nickname, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2095:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2117:             }",
          "2121:             switch (oldAffiliation) {",
          "2122:                 case owner:",
          "2123:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "",
          "[Removed Lines]",
          "2120:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "[Added Lines]",
          "2120:             final Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2138:                 this,",
          "2139:                 targetUserAddressBare,",
          "2140:                 nickname,",
          "2142:                 oldAffiliation);",
          "2143:         }",
          "",
          "[Removed Lines]",
          "2141:                 MUCRole.Affiliation.member,",
          "",
          "[Added Lines]",
          "2141:                 Affiliation.member,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2147:         return applyAffiliationChange(targetUserAddressBare);",
          "2148:     }",
          "2151:     {",
          "2153:             throw new ForbiddenException();",
          "2154:         }",
          "",
          "[Removed Lines]",
          "2150:     private boolean removeMember(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2152:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && actorRole != MUCRole.Role.moderator) {",
          "",
          "[Added Lines]",
          "2150:     private boolean removeMember(@Nonnull final JID userAddress, @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole) throws ForbiddenException",
          "2152:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation && actorRole != Role.moderator) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2173:     {",
          "2175:             throw new ForbiddenException();",
          "2176:         }",
          "",
          "[Removed Lines]",
          "2172:     public List<Presence> addOutcast(@Nonnull final JID targetUserAddress, @Nullable final String reason, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws NotAllowedException, ForbiddenException, ConflictException",
          "2174:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "",
          "[Added Lines]",
          "2172:     public List<Presence> addOutcast(@Nonnull final JID targetUserAddress, @Nullable final String reason, @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole) throws NotAllowedException, ForbiddenException, ConflictException",
          "2174:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation && Role.moderator != actorRole) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2189:             }",
          "2193:             switch (oldAffiliation) {",
          "2194:                 case owner:",
          "2195:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "",
          "[Removed Lines]",
          "2192:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "[Added Lines]",
          "2192:             final Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2210:                 this,",
          "2211:                 targetUserAddressBare,",
          "2212:                 null,",
          "2214:                 oldAffiliation);",
          "2215:         }",
          "",
          "[Removed Lines]",
          "2213:                 MUCRole.Affiliation.outcast,",
          "",
          "[Added Lines]",
          "2213:                 Affiliation.outcast,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2218:         return applyAffiliationChange(targetUserAddressBare);",
          "2219:     }",
          "2222:     {",
          "2224:             throw new ForbiddenException();",
          "2225:         }",
          "2226:         return outcasts.remove( userAddress.asBareJID() );",
          "",
          "[Removed Lines]",
          "2221:     private boolean removeOutcast(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2223:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && actorRole != MUCRole.Role.moderator) {",
          "",
          "[Added Lines]",
          "2221:     private boolean removeOutcast(@Nonnull final JID userAddress, @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole) throws ForbiddenException",
          "2223:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation && actorRole != Role.moderator) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2245:     {",
          "2247:             throw new ForbiddenException();",
          "2248:         }",
          "2249:         final JID targetUserAddressBare = targetUserAddress.asBareJID();",
          "",
          "[Removed Lines]",
          "2244:     public List<Presence> addNone(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2246:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "2244:     public List<Presence> addNone(@Nonnull final JID targetUserAddress, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException, ConflictException",
          "2246:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2255:                 throw new ConflictException();",
          "2256:             }",
          "2259:             switch (oldAffiliation) {",
          "2260:                 case owner:",
          "2261:                     removeOwner(targetUserAddressBare, actorAffiliation);",
          "",
          "[Removed Lines]",
          "2258:             final MUCRole.Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "[Added Lines]",
          "2258:             final Affiliation oldAffiliation = getAffiliation(targetUserAddressBare);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2307:     {",
          "2308:         return kickOccupant(userAddress, actorAffiliation, actorRole, actorJID, actorNickname, reason, 307);",
          "2309:     }",
          "",
          "[Removed Lines]",
          "2306:     public List<Presence> kickOccupant(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole, @Nullable final JID actorJID, @Nullable final String actorNickname, @Nullable final String reason) throws ForbiddenException",
          "",
          "[Added Lines]",
          "2306:     public List<Presence> kickOccupant(@Nonnull final JID userAddress, @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole, @Nullable final JID actorJID, @Nullable final String actorNickname, @Nullable final String reason) throws ForbiddenException",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2328:     {",
          "2330:             throw new ForbiddenException();",
          "2331:         }",
          "2337:         MUCRole sender;",
          "",
          "[Removed Lines]",
          "2327:     public List<Presence> kickOccupant(@Nonnull final JID userAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole, @Nullable final JID actorJID, @Nullable final String actorNickname, @Nullable final String reason, final int status) throws ForbiddenException",
          "2329:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "2334:         final List<Presence> updatedPresences = applyRoleChange(userAddress, MUCRole.Role.none);",
          "",
          "[Added Lines]",
          "2327:     public List<Presence> kickOccupant(@Nonnull final JID userAddress, @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole, @Nullable final JID actorJID, @Nullable final String actorNickname, @Nullable final String reason, final int status) throws ForbiddenException",
          "2329:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation && Role.moderator != actorRole) {",
          "2334:         final List<Presence> updatedPresences = applyRoleChange(userAddress, Role.none);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2417:         for (final JID occupantJID : affectedOccupants) {",
          "2418:             boolean kickMember = false, isOutcast = false;",
          "2421:             if (owners.includes(occupantJID)) {",
          "2424:             }",
          "2425:             else if (admins.includes(occupantJID)) {",
          "2428:             }",
          "2430:             else if (outcasts.includes(occupantJID)) {",
          "2433:                 kickMember = true;",
          "2434:                 isOutcast = true;",
          "2435:             }",
          "2436:             else if (members.includesKey(occupantJID)) {",
          "2439:             }",
          "2440:             else if (isMembersOnly()) {",
          "2443:                 kickMember = true;",
          "2444:             }",
          "2445:             else {",
          "2448:             }",
          "2449:             Log.debug(\"Applying affiliation change for {}. New affiliation: {}\", occupantJID, newAffiliation);",
          "",
          "[Removed Lines]",
          "2419:             final MUCRole.Role newRole;",
          "2420:             final MUCRole.Affiliation newAffiliation;",
          "2422:                 newRole = MUCRole.Role.moderator;",
          "2423:                 newAffiliation = MUCRole.Affiliation.owner;",
          "2426:                 newRole = MUCRole.Role.moderator;",
          "2427:                 newAffiliation = MUCRole.Affiliation.admin;",
          "2431:                 newAffiliation = MUCRole.Affiliation.outcast;",
          "2432:                 newRole = MUCRole.Role.none;",
          "2437:                 newRole = MUCRole.Role.participant;",
          "2438:                 newAffiliation = MUCRole.Affiliation.member;",
          "2441:                 newRole = MUCRole.Role.none;",
          "2442:                 newAffiliation = MUCRole.Affiliation.none;",
          "2446:                 newRole = isModerated() ? MUCRole.Role.visitor : MUCRole.Role.participant;",
          "2447:                 newAffiliation = MUCRole.Affiliation.none;",
          "",
          "[Added Lines]",
          "2419:             final Role newRole;",
          "2420:             final Affiliation newAffiliation;",
          "2422:                 newRole = Role.moderator;",
          "2423:                 newAffiliation = Affiliation.owner;",
          "2426:                 newRole = Role.moderator;",
          "2427:                 newAffiliation = Affiliation.admin;",
          "2431:                 newAffiliation = Affiliation.outcast;",
          "2432:                 newRole = Role.none;",
          "2437:                 newRole = Role.participant;",
          "2438:                 newAffiliation = Affiliation.member;",
          "2441:                 newRole = Role.none;",
          "2442:                 newAffiliation = Affiliation.none;",
          "2446:                 newRole = isModerated() ? Role.visitor : Role.participant;",
          "2447:                 newAffiliation = Affiliation.none;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2584:     public void changeSubject(Message packet, MUCRole actor) throws ForbiddenException {",
          "2588:             subject = packet.getSubject();",
          "2589:             MUCPersistenceManager.updateRoomSubject(this);",
          "",
          "[Removed Lines]",
          "2585:         if ((canOccupantsChangeSubject() && actor.getRole().compareTo(MUCRole.Role.visitor) < 0) ||",
          "2586:             MUCRole.Role.moderator == actor.getRole()) {",
          "",
          "[Added Lines]",
          "2585:         if ((canOccupantsChangeSubject() && actor.getRole().compareTo(Role.visitor) < 0) ||",
          "2586:             Role.moderator == actor.getRole()) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2638:         throws ForbiddenException, CannotBeInvitedException {",
          "2639:         if (!isMembersOnly() || canOccupantsInvite()",
          "2644:             Message message = new Message();",
          "",
          "[Removed Lines]",
          "2637:     public void sendInvitation(@Nonnull final JID to, @Nullable final String reason, @Nonnull final MUCRole.Affiliation senderAffiliation, @Nullable final JID senderUserAddress, @Nullable final List<Element> extensions)",
          "2640:             || MUCRole.Affiliation.admin == senderAffiliation",
          "2641:             || MUCRole.Affiliation.owner == senderAffiliation) {",
          "",
          "[Added Lines]",
          "2637:     public void sendInvitation(@Nonnull final JID to, @Nullable final String reason, @Nonnull final Affiliation senderAffiliation, @Nullable final JID senderUserAddress, @Nullable final List<Element> extensions)",
          "2640:             || Affiliation.admin == senderAffiliation",
          "2641:             || Affiliation.owner == senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2802:     public Collection<MUCRole> getModerators() {",
          "2803:         final List<MUCRole> filteredOccupants = occupants.stream()",
          "2805:             .collect(Collectors.toList());",
          "2806:         return Collections.unmodifiableList(filteredOccupants);",
          "2807:     }",
          "",
          "[Removed Lines]",
          "2804:             .filter(mucRole -> mucRole.getRole() == MUCRole.Role.moderator)",
          "",
          "[Added Lines]",
          "2804:             .filter(mucRole -> mucRole.getRole() == Role.moderator)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2815:     public Collection<MUCRole> getParticipants() {",
          "2816:         final List<MUCRole> filteredOccupants = occupants.stream()",
          "2818:             .collect(Collectors.toList());",
          "2819:         return Collections.unmodifiableList(filteredOccupants);",
          "2820:     }",
          "",
          "[Removed Lines]",
          "2817:             .filter(mucRole -> mucRole.getRole() == MUCRole.Role.participant)",
          "",
          "[Added Lines]",
          "2817:             .filter(mucRole -> mucRole.getRole() == Role.participant)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2832:     {",
          "2834:             throw new ForbiddenException();",
          "2835:         }",
          "2838:     }",
          "",
          "[Removed Lines]",
          "2831:     public List<Presence> addModerator(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException",
          "2833:         if (MUCRole.Affiliation.admin != actorAffiliation&& MUCRole.Affiliation.owner != actorAffiliation) {",
          "2837:         return applyRoleChange(targetUserAddress, MUCRole.Role.moderator);",
          "",
          "[Added Lines]",
          "2831:     public List<Presence> addModerator(@Nonnull final JID targetUserAddress, @Nonnull final Affiliation actorAffiliation) throws ForbiddenException",
          "2833:         if (Affiliation.admin != actorAffiliation&& Affiliation.owner != actorAffiliation) {",
          "2837:         return applyRoleChange(targetUserAddress, Role.moderator);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2851:     public List<Presence> addParticipant(@Nonnull final JID targetUserAddress, @Nullable final String reason,",
          "2853:     {",
          "2856:             throw new ForbiddenException();",
          "2857:         }",
          "",
          "[Removed Lines]",
          "2852:                                    @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2855:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "",
          "[Added Lines]",
          "2852:                                          @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole) throws ForbiddenException",
          "2855:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation && Role.moderator != actorRole) {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2865:         for (final Presence updatedPresence : updatedPresences)",
          "2866:         {",
          "2867:             final Element frag = updatedPresence.getChildElement(\"x\", \"http://jabber.org/protocol/muc#user\");",
          "",
          "[Removed Lines]",
          "2864:         final List<Presence> updatedPresences = applyRoleChange(targetUserAddress, MUCRole.Role.participant);",
          "",
          "[Added Lines]",
          "2864:         final List<Presence> updatedPresences = applyRoleChange(targetUserAddress, Role.participant);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2888:     {",
          "2890:             throw new ForbiddenException();",
          "2891:         }",
          "2893:     }",
          "",
          "[Removed Lines]",
          "2887:     public List<Presence> addVisitor(@Nonnull final JID targetUserAddress, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final MUCRole.Role actorRole) throws ForbiddenException",
          "2889:         if (MUCRole.Affiliation.admin != actorAffiliation && MUCRole.Affiliation.owner != actorAffiliation && MUCRole.Role.moderator != actorRole) {",
          "2892:         return applyRoleChange(targetUserAddress, MUCRole.Role.visitor);",
          "",
          "[Added Lines]",
          "2887:     public List<Presence> addVisitor(@Nonnull final JID targetUserAddress, @Nonnull final Affiliation actorAffiliation, @Nullable final Role actorRole) throws ForbiddenException",
          "2889:         if (Affiliation.admin != actorAffiliation && Affiliation.owner != actorAffiliation && Role.moderator != actorRole) {",
          "2892:         return applyRoleChange(targetUserAddress, Role.visitor);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3105:     {",
          "3107:             throw new ForbiddenException();",
          "3108:         }",
          "",
          "[Removed Lines]",
          "3104:     public List<Presence> setMembersOnly(final boolean membersOnly, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final JID actorJid) throws ForbiddenException",
          "3106:         if (actorAffiliation != MUCRole.Affiliation.owner) {",
          "",
          "[Added Lines]",
          "3104:     public List<Presence> setMembersOnly(final boolean membersOnly, @Nonnull final Affiliation actorAffiliation, @Nullable final JID actorJid) throws ForbiddenException",
          "3106:         if (actorAffiliation != Affiliation.owner) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3113:         if (membersOnly && !this.membersOnly) {",
          "3114:             Log.debug(\"Room '{}' was not members-only, but now is. Kick occupants that aren't a member.\", getJID());",
          "3115:             final Set<JID> userAddressesToKick = getOccupants().stream()",
          "3117:                 .map(MUCRole::getUserAddress)",
          "3118:                 .collect(Collectors.toSet());",
          "3119:             for (final JID userAddressToKick : userAddressesToKick) {",
          "",
          "[Removed Lines]",
          "3116:                 .filter(mucOccupant -> mucOccupant.getAffiliation().equals(MUCRole.Affiliation.none) || mucOccupant.getAffiliation().equals(MUCRole.Affiliation.outcast))",
          "",
          "[Added Lines]",
          "3116:                 .filter(mucOccupant -> mucOccupant.getAffiliation().equals(Affiliation.none) || mucOccupant.getAffiliation().equals(Affiliation.outcast))",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3457:     @Nonnull",
          "3459:         return Collections.unmodifiableList(rolesToBroadcastPresence);",
          "3460:     }",
          "",
          "[Removed Lines]",
          "3458:     public List<MUCRole.Role> getRolesToBroadcastPresence() {",
          "",
          "[Added Lines]",
          "3458:     public List<Role> getRolesToBroadcastPresence() {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3472:         this.rolesToBroadcastPresence = rolesToBroadcastPresence;",
          "",
          "[Removed Lines]",
          "3469:     public void setRolesToBroadcastPresence(@Nonnull final List<MUCRole.Role> rolesToBroadcastPresence) {",
          "",
          "[Added Lines]",
          "3469:     public void setRolesToBroadcastPresence(@Nonnull final List<Role> rolesToBroadcastPresence) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3483:     }",
          "",
          "[Removed Lines]",
          "3481:     public boolean canBroadcastPresence(@Nonnull final MUCRole.Role roleToBroadcast) {",
          "3482:         return MUCRole.Role.none.equals(roleToBroadcast) || rolesToBroadcastPresence.contains(roleToBroadcast);",
          "",
          "[Added Lines]",
          "3481:     public boolean canBroadcastPresence(@Nonnull final Role roleToBroadcast) {",
          "3482:         return Role.none.equals(roleToBroadcast) || rolesToBroadcastPresence.contains(roleToBroadcast);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3492:     public void lock(MUCRole actor) throws ForbiddenException {",
          "3494:             throw new ForbiddenException();",
          "3495:         }",
          "3496:         if (isLocked()) {",
          "",
          "[Removed Lines]",
          "3493:         if (MUCRole.Affiliation.owner != actor.getAffiliation()) {",
          "",
          "[Added Lines]",
          "3493:         if (Affiliation.owner != actor.getAffiliation()) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3513:             throw new ForbiddenException();",
          "3514:         }",
          "3515:         if (!isLocked()) {",
          "",
          "[Removed Lines]",
          "3511:     public void unlock(@Nonnull final MUCRole.Affiliation actorAffiliation) throws ForbiddenException {",
          "3512:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "3511:     public void unlock(@Nonnull final Affiliation actorAffiliation) throws ForbiddenException {",
          "3512:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3570:                     this,",
          "3571:                     owner,",
          "3572:                     null,",
          "3575:             }",
          "3577:             for (JID admin : admins) {",
          "",
          "[Removed Lines]",
          "3573:                     MUCRole.Affiliation.owner,",
          "3574:                     MUCRole.Affiliation.none);",
          "",
          "[Added Lines]",
          "3573:                     Affiliation.owner,",
          "3574:                     Affiliation.none);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3579:                     this,",
          "3580:                     admin,",
          "3581:                     null,",
          "3584:             }",
          "3586:             for (JID bareJID : members.keySet()) {",
          "3587:                 MUCPersistenceManager.saveAffiliationToDB(this, bareJID, members.get(bareJID),",
          "3589:             }",
          "3591:             for (JID outcast : outcasts) {",
          "",
          "[Removed Lines]",
          "3582:                     MUCRole.Affiliation.admin,",
          "3583:                     MUCRole.Affiliation.none);",
          "3588:                     MUCRole.Affiliation.member, MUCRole.Affiliation.none);",
          "",
          "[Added Lines]",
          "3582:                     Affiliation.admin,",
          "3583:                     Affiliation.none);",
          "3588:                     Affiliation.member, Affiliation.none);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3593:                     this,",
          "3594:                     outcast,",
          "3595:                     null,",
          "3598:             }",
          "3599:         }",
          "3600:     }",
          "",
          "[Removed Lines]",
          "3596:                     MUCRole.Affiliation.outcast,",
          "3597:                     MUCRole.Affiliation.none);",
          "",
          "[Added Lines]",
          "3596:                     Affiliation.outcast,",
          "3597:                     Affiliation.none);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3728:         description = ExternalizableUtil.getInstance().readSafeUTF(in);",
          "3729:         canOccupantsChangeSubject = ExternalizableUtil.getInstance().readBoolean(in);",
          "3730:         maxUsers = ExternalizableUtil.getInstance().readInt(in);",
          "3732:         publicRoom = ExternalizableUtil.getInstance().readBoolean(in);",
          "3733:         persistent = ExternalizableUtil.getInstance().readBoolean(in);",
          "3734:         moderated = ExternalizableUtil.getInstance().readBoolean(in);",
          "",
          "[Removed Lines]",
          "3731:         rolesToBroadcastPresence.addAll(ExternalizableUtil.getInstance().readStringList(in).stream().map(MUCRole.Role::valueOf).collect(Collectors.toSet())); // This uses stringlist for compatibility with Openfire 4.6.0. Can be replaced the next major release.",
          "",
          "[Added Lines]",
          "3731:         rolesToBroadcastPresence.addAll(ExternalizableUtil.getInstance().readStringList(in).stream().map(Role::valueOf).collect(Collectors.toSet())); // This uses stringlist for compatibility with Openfire 4.6.0. Can be replaced the next major release.",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3968:         try {",
          "3969:             lock.lock();",
          "3973:                 return;",
          "3974:             }",
          "",
          "[Removed Lines]",
          "3971:             if (getAffiliation(userJid) == MUCRole.Affiliation.none) {",
          "",
          "[Added Lines]",
          "3971:             if (getAffiliation(userJid) == Affiliation.none) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/Role.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.jivesoftware.openfire.muc;",
          "23: public enum Role",
          "24: {",
          "29:     moderator(0),",
          "35:     participant(1),",
          "40:     visitor(2),",
          "45:     none(3);",
          "47:     private final int value;",
          "49:     Role(int value)",
          "50:     {",
          "51:         this.value = value;",
          "52:     }",
          "59:     public int getValue()",
          "60:     {",
          "61:         return value;",
          "62:     }",
          "70:     public static Role valueOf(int value)",
          "71:     {",
          "72:         switch (value) {",
          "73:             case 0:",
          "74:                 return moderator;",
          "75:             case 1:",
          "76:                 return participant;",
          "77:             case 2:",
          "78:                 return visitor;",
          "79:             default:",
          "80:                 return none;",
          "81:         }",
          "82:     }",
          "83: }",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/FMUCHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:         if (!room.canAnyoneDiscoverJID()) {",
          "785:                 mucUserItem.addAttribute(\"jid\", occupantData.getUserAddress().toString());",
          "786:             }",
          "787:             else {",
          "",
          "[Removed Lines]",
          "784:             if (MUCRole.Role.moderator == occupantData.getRole()) {",
          "",
          "[Added Lines]",
          "784:             if (Role.moderator == occupantData.getRole()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1141:         Log.debug( \"(room: '{}'): Occupant on remote peer '{}' joins the room with nickname '{}'.\", room.getJID(), remoteMUC, nickname );",
          "1144:         if ( mucUser != null && mucUser.element(\"item\") != null && mucUser.element(\"item\").attributeValue(\"role\") != null ) {",
          "1145:             try {",
          "1147:             } catch ( IllegalArgumentException e ) {",
          "1148:                 Log.info( \"Cannot parse role as received in FMUC join, using default role instead: {}\", presence, e );",
          "1150:             }",
          "1151:         } else {",
          "1152:             Log.info( \"Cannot parse role as received in FMUC join, using default role instead: {}\", presence );",
          "1154:         }",
          "1157:         if ( mucUser != null && mucUser.element(\"item\") != null && mucUser.element(\"item\").attributeValue(\"affiliation\") != null ) {",
          "1158:             try {",
          "1160:             } catch ( IllegalArgumentException e ) {",
          "1161:                 Log.info( \"Cannot parse affiliation as received in FMUC join, using default role instead: {}\", presence, e );",
          "1163:             }",
          "1164:         } else {",
          "1165:             Log.info( \"Cannot parse affiliation as received in FMUC join, using default role instead: {}\", presence );",
          "1167:         }",
          "1169:         final JID userJID = getFMUCFromJID( presence );",
          "",
          "[Removed Lines]",
          "1143:         MUCRole.Role role;",
          "1146:                 role = MUCRole.Role.valueOf(mucUser.element(\"item\").attributeValue(\"role\"));",
          "1149:                 role = MUCRole.Role.participant;",
          "1153:             role = MUCRole.Role.participant;",
          "1156:         MUCRole.Affiliation affiliation;",
          "1159:                 affiliation = MUCRole.Affiliation.valueOf(mucUser.element(\"item\").attributeValue(\"affiliation\"));",
          "1162:                 affiliation = MUCRole.Affiliation.none;",
          "1166:             affiliation = MUCRole.Affiliation.none;",
          "",
          "[Added Lines]",
          "1143:         Role role;",
          "1146:                 role = Role.valueOf(mucUser.element(\"item\").attributeValue(\"role\"));",
          "1149:                 role = Role.participant;",
          "1153:             role = Role.participant;",
          "1156:         Affiliation affiliation;",
          "1159:                 affiliation = Affiliation.valueOf(mucUser.element(\"item\").attributeValue(\"affiliation\"));",
          "1162:                 affiliation = Affiliation.none;",
          "1166:             affiliation = Affiliation.none;",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQAdminHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.List;",
          "21: import java.util.Locale;",
          "24: import org.dom4j.Element;",
          "25: import org.jivesoftware.openfire.SessionManager;",
          "26: import org.jivesoftware.openfire.XMPPServer;",
          "",
          "[Removed Lines]",
          "23: import org.checkerframework.checker.units.qual.N;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     public void handleIQ(@Nonnull final IQ packet, @Nullable final MUCRole actorOccupant) throws ForbiddenException, ConflictException,",
          "91:             NotAllowedException, CannotBeInvitedException {",
          "96:         IQ reply = IQ.createResultIQ(packet);",
          "97:         Element element = packet.getChildElement();",
          "",
          "[Removed Lines]",
          "93:         final MUCRole.Affiliation senderAffiliation = actorOccupant != null ? actorOccupant.getAffiliation() : room.getAffiliation(packet.getFrom());",
          "94:         final MUCRole.Role senderRole = actorOccupant != null ? actorOccupant.getRole() : null;",
          "",
          "[Added Lines]",
          "92:         final Affiliation senderAffiliation = actorOccupant != null ? actorOccupant.getAffiliation() : room.getAffiliation(packet.getFrom());",
          "93:         final Role senderRole = actorOccupant != null ? actorOccupant.getRole() : null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:             throws ForbiddenException, ConflictException, NotAllowedException, CannotBeInvitedException {",
          "136:         String affiliation;",
          "137:         String roleAttribute;",
          "",
          "[Removed Lines]",
          "134:     private void handleItemsElement(@Nonnull final MUCRole.Affiliation senderAffiliation, @Nullable final MUCRole.Role senderRole, @Nonnull final List<Element> itemsList, @Nonnull final IQ reply)",
          "",
          "[Added Lines]",
          "133:     private void handleItemsElement(@Nonnull final Affiliation senderAffiliation, @Nullable final Role senderRole, @Nonnull final List<Element> itemsList, @Nonnull final IQ reply)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:                 Element metaData;",
          "153:                 if (\"outcast\".equals(affiliation)) {",
          "157:                         throw new ForbiddenException();",
          "158:                     }",
          "159:                     for (JID jid : room.getOutcasts()) {",
          "",
          "[Removed Lines]",
          "155:                     if (MUCRole.Affiliation.admin != senderAffiliation",
          "156:                             && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "[Added Lines]",
          "154:                     if (Affiliation.admin != senderAffiliation",
          "155:                             && Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:                     if (room.isMembersOnly()",
          "182:                         throw new ForbiddenException();",
          "183:                     }",
          "184:                     for (JID jid : room.getMembers()) {",
          "",
          "[Removed Lines]",
          "179:                             && MUCRole.Affiliation.member != senderAffiliation",
          "180:                             && MUCRole.Affiliation.admin != senderAffiliation",
          "181:                             && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "[Added Lines]",
          "178:                             && Affiliation.member != senderAffiliation",
          "179:                             && Affiliation.admin != senderAffiliation",
          "180:                             && Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:                     }",
          "199:                 } else if (\"moderator\".equals(roleAttribute)) {",
          "203:                         throw new ForbiddenException();",
          "204:                     }",
          "205:                     for (MUCRole role : room.getModerators()) {",
          "",
          "[Removed Lines]",
          "201:                     if (MUCRole.Affiliation.admin != senderAffiliation",
          "202:                             && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "[Added Lines]",
          "200:                     if (Affiliation.admin != senderAffiliation",
          "201:                             && Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211:                     }",
          "212:                 } else if (\"participant\".equals(roleAttribute)) {",
          "215:                         throw new ForbiddenException();",
          "216:                     }",
          "217:                     for (MUCRole role : room.getParticipants()) {",
          "",
          "[Removed Lines]",
          "214:                     if (MUCRole.Role.moderator != senderRole) {",
          "",
          "[Added Lines]",
          "213:                     if (Role.moderator != senderRole) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "223:                     }",
          "224:                 } else if (\"owner\".equals(affiliation)) {",
          "227:                         throw new ForbiddenException();",
          "228:                     }",
          "",
          "[Removed Lines]",
          "226:                     if (!room.canAnyoneDiscoverJID() && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "[Added Lines]",
          "225:                     if (!room.canAnyoneDiscoverJID() && Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "244:                     }",
          "245:                 } else if (\"admin\".equals(affiliation)) {",
          "248:                         throw new ForbiddenException();",
          "249:                     }",
          "",
          "[Removed Lines]",
          "247:                     if (!room.canAnyoneDiscoverJID() && MUCRole.Affiliation.owner != senderAffiliation) {",
          "",
          "[Added Lines]",
          "246:                     if (!room.canAnyoneDiscoverJID() && Affiliation.owner != senderAffiliation) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "329:                             case \"member\":",
          "332:                                 presences.addAll(room.addMember(jid, nick, senderAffiliation));",
          "",
          "[Removed Lines]",
          "331:                                 boolean hadAffiliation = room.getAffiliation(jid) != MUCRole.Affiliation.none;",
          "",
          "[Added Lines]",
          "330:                                 boolean hadAffiliation = room.getAffiliation(jid) != Affiliation.none;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "358:                                     final Locale localeForSession = SessionManager.getInstance().getLocaleForSession(originator);",
          "359:                                     reply.setError(PacketError.Condition.conflict);",
          "360:                                     reply.getError().setText(LocaleUtils.getLocalizedString(\"muc.room.affiliations.error_banning_self\", localeForSession), localeForSession != null ? localeForSession.getLanguage() : null);",
          "363:                                     final Locale localeForSession = SessionManager.getInstance().getLocaleForSession(originator);",
          "364:                                     reply.setError(PacketError.Condition.not_allowed);",
          "",
          "[Removed Lines]",
          "361:                                 } else if (senderAffiliation == MUCRole.Affiliation.admin && room.getAffiliation(jid) == MUCRole.Affiliation.owner) {",
          "",
          "[Added Lines]",
          "360:                                 } else if (senderAffiliation == Affiliation.admin && room.getAffiliation(jid) == Affiliation.owner) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "375:                                     presences.addAll(room.addNone(jid, senderAffiliation));",
          "376:                                 } else {",
          "379:                                         throw new ForbiddenException();",
          "380:                                     }",
          "381:                                     presences.addAll(room.kickOccupant(jid, senderAffiliation, senderRole, reply.getTo(), null, item.elementTextTrim(\"reason\")));",
          "",
          "[Removed Lines]",
          "378:                                     if (MUCRole.Role.moderator != senderRole) {",
          "",
          "[Added Lines]",
          "377:                                     if (Role.moderator != senderRole) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQMUCRegisterHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:             }",
          "82:             else if (!room.isRegistrationEnabled() ||",
          "83:                      (packet.getFrom() != null &&",
          "87:                 reply = IQ.createResultIQ(packet);",
          "",
          "[Removed Lines]",
          "84:                       MUCRole.Affiliation.outcast == room.getAffiliation(packet.getFrom().asBareJID()))) {",
          "",
          "[Added Lines]",
          "84:                       Affiliation.outcast == room.getAffiliation(packet.getFrom().asBareJID()))) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/IQOwnerHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     public void handleIQ(@Nonnull final IQ packet, @Nullable final MUCRole actorOccupant) throws ForbiddenException, ConflictException, CannotBeInvitedException, NotAcceptableException",
          "86:     {",
          "91:             throw new ForbiddenException();",
          "92:         }",
          "",
          "[Removed Lines]",
          "87:         final MUCRole.Affiliation actorAffiliation = actorOccupant != null ? actorOccupant.getAffiliation() : room.getAffiliation(packet.getFrom());",
          "90:         if (MUCRole.Affiliation.owner != actorAffiliation) {",
          "",
          "[Added Lines]",
          "87:         final Affiliation actorAffiliation = actorOccupant != null ? actorOccupant.getAffiliation() : room.getAffiliation(packet.getFrom());",
          "90:         if (Affiliation.owner != actorAffiliation) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:             throws ForbiddenException, ConflictException, NotAcceptableException {",
          "154:         DataForm completedForm = new DataForm(formElement);",
          "",
          "[Removed Lines]",
          "152:     private void handleDataFormElement(@Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final JID actorJid, @Nonnull final Element formElement)",
          "",
          "[Added Lines]",
          "152:     private void handleDataFormElement(@Nonnull final Affiliation actorAffiliation, @Nullable final JID actorJid, @Nonnull final Element formElement)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:             throws ForbiddenException, ConflictException, NotAcceptableException",
          "200:     {",
          "201:         List<String> values;",
          "",
          "[Removed Lines]",
          "198:     private void processConfigurationForm(@Nonnull final DataForm completedForm, @Nonnull final MUCRole.Affiliation actorAffiliation, @Nullable final JID actorJid)",
          "",
          "[Added Lines]",
          "198:     private void processConfigurationForm(@Nonnull final DataForm completedForm, @Nonnull final Affiliation actorAffiliation, @Nullable final JID actorJid)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:         field = completedForm.getField(\"muc#roomconfig_presencebroadcast\");",
          "269:         if (field != null) {",
          "270:             values = new ArrayList<>(field.getValues());",
          "272:         }",
          "274:         field = completedForm.getField(\"muc#roomconfig_publicroom\");",
          "",
          "[Removed Lines]",
          "271:             room.setRolesToBroadcastPresence(values.stream().map(MUCRole.Role::valueOf).collect(Collectors.toList()));",
          "",
          "[Added Lines]",
          "271:             room.setRolesToBroadcastPresence(values.stream().map(Role::valueOf).collect(Collectors.toList()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "618:             field = configurationForm.getField(\"muc#roomconfig_presencebroadcast\");",
          "619:             field.clearValues();",
          "621:                 field.addValue(roleToBroadcast.toString());",
          "622:             }",
          "",
          "[Removed Lines]",
          "620:             for (MUCRole.Role roleToBroadcast : room.getRolesToBroadcastPresence()) {",
          "",
          "[Added Lines]",
          "620:             for (Role roleToBroadcast : room.getRolesToBroadcastPresence()) {",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MUCPersistenceManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:             room.setPublicRoom(rs.getInt(\"publicRoom\") == 1);",
          "251:             room.setModerated(rs.getInt(\"moderated\") == 1);",
          "252:             try {",
          "254:             } catch (ForbiddenException e) {",
          "255:                 Log.error(\"Unable to set members-only when loading room from database (this is likely a bug in Openfire). Room: {}\", room.getJID(), e);",
          "256:             }",
          "",
          "[Removed Lines]",
          "253:                 room.setMembersOnly(rs.getInt(\"membersOnly\") == 1, MUCRole.Affiliation.owner, null);",
          "",
          "[Added Lines]",
          "253:                 room.setMembersOnly(rs.getInt(\"membersOnly\") == 1, Affiliation.owner, null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:             room.setCanAnyoneDiscoverJID(rs.getInt(\"canDiscoverJID\") == 1);",
          "260:             room.setLogEnabled(rs.getInt(\"logEnabled\") == 1);",
          "261:             room.setSubject(rs.getString(\"subject\"));",
          "263:             String roles = StringUtils.zeroPadString(Integer.toBinaryString(rs.getInt(\"rolesToBroadcast\")), 3);",
          "264:             if (roles.charAt(0) == '1') {",
          "266:             }",
          "267:             if (roles.charAt(1) == '1') {",
          "269:             }",
          "270:             if (roles.charAt(2) == '1') {",
          "272:             }",
          "273:             room.setRolesToBroadcastPresence(rolesToBroadcast);",
          "274:             room.setLoginRestrictedToNickname(rs.getInt(\"useReservedNick\") == 1);",
          "",
          "[Removed Lines]",
          "262:             List<MUCRole.Role> rolesToBroadcast = new ArrayList<>();",
          "265:                 rolesToBroadcast.add(MUCRole.Role.moderator);",
          "268:                 rolesToBroadcast.add(MUCRole.Role.participant);",
          "271:                 rolesToBroadcast.add(MUCRole.Role.visitor);",
          "",
          "[Added Lines]",
          "262:             List<Role> rolesToBroadcast = new ArrayList<>();",
          "265:                 rolesToBroadcast.add(Role.moderator);",
          "268:                 rolesToBroadcast.add(Role.participant);",
          "271:                 rolesToBroadcast.add(Role.visitor);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:             while (rs.next()) {",
          "326:                 JID affiliationJID = GroupJID.fromString(rs.getString(\"jid\"));",
          "328:                 try {",
          "329:                     switch (affiliation) {",
          "330:                         case owner:",
          "",
          "[Removed Lines]",
          "327:                 MUCRole.Affiliation affiliation = MUCRole.Affiliation.valueOf(rs.getInt(\"affiliation\"));",
          "",
          "[Added Lines]",
          "327:                 Affiliation affiliation = Affiliation.valueOf(rs.getInt(\"affiliation\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670:                     room.setPublicRoom(resultSet.getInt(\"publicRoom\") == 1);",
          "671:                     room.setModerated(resultSet.getInt(\"moderated\") == 1);",
          "672:                     try {",
          "674:                     } catch (ForbiddenException e) {",
          "675:                         Log.error(\"Unable to set members-only when loading room from database (this is likely a bug in Openfire). Room: {}\", room.getJID(), e);",
          "676:                     }",
          "",
          "[Removed Lines]",
          "673:                         room.setMembersOnly(resultSet.getInt(\"membersOnly\") == 1, MUCRole.Affiliation.owner, null);",
          "",
          "[Added Lines]",
          "673:                         room.setMembersOnly(resultSet.getInt(\"membersOnly\") == 1, Affiliation.owner, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "679:                     room.setCanAnyoneDiscoverJID(resultSet.getInt(\"canDiscoverJID\") == 1);",
          "680:                     room.setLogEnabled(resultSet.getInt(\"logEnabled\") == 1);",
          "681:                     room.setSubject(resultSet.getString(\"subject\"));",
          "683:                     String roles = StringUtils.zeroPadString(Integer.toBinaryString(resultSet.getInt(\"rolesToBroadcast\")), 3);",
          "684:                     if (roles.charAt(0) == '1') {",
          "686:                     }",
          "687:                     if (roles.charAt(1) == '1') {",
          "689:                     }",
          "690:                     if (roles.charAt(2) == '1') {",
          "692:                     }",
          "693:                     room.setRolesToBroadcastPresence(rolesToBroadcast);",
          "694:                     room.setLoginRestrictedToNickname(resultSet.getInt(\"useReservedNick\") == 1);",
          "",
          "[Removed Lines]",
          "682:                     List<MUCRole.Role> rolesToBroadcast = new ArrayList<>();",
          "685:                         rolesToBroadcast.add(MUCRole.Role.moderator);",
          "688:                         rolesToBroadcast.add(MUCRole.Role.participant);",
          "691:                         rolesToBroadcast.add(MUCRole.Role.visitor);",
          "",
          "[Added Lines]",
          "682:                     List<Role> rolesToBroadcast = new ArrayList<>();",
          "685:                         rolesToBroadcast.add(Role.moderator);",
          "688:                         rolesToBroadcast.add(Role.participant);",
          "691:                         rolesToBroadcast.add(Role.visitor);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "917:                         continue;",
          "918:                     }",
          "922:                     final String jidValue = resultSet.getString(\"jid\");",
          "923:                     final JID affiliationJID;",
          "",
          "[Removed Lines]",
          "920:                     final MUCRole.Affiliation affiliation = MUCRole.Affiliation.valueOf(resultSet.getInt(\"affiliation\"));",
          "",
          "[Added Lines]",
          "920:                     final Affiliation affiliation = Affiliation.valueOf(resultSet.getInt(\"affiliation\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1093:     public static void saveAffiliationToDB(MUCRoom room, JID jid, String nickname,",
          "1095:     {",
          "1096:         final String affiliationJid = jid.toBareJID();",
          "1097:         if (!room.isPersistent() || !room.wasSavedToDB()) {",
          "1098:             return;",
          "1099:         }",
          "1103:                 Connection con = null;",
          "1104:                 PreparedStatement pstmt = null;",
          "",
          "[Removed Lines]",
          "1094:                                            MUCRole.Affiliation newAffiliation, MUCRole.Affiliation oldAffiliation)",
          "1100:         if (MUCRole.Affiliation.none == oldAffiliation) {",
          "1101:             if (MUCRole.Affiliation.member == newAffiliation) {",
          "",
          "[Added Lines]",
          "1094:                                            Affiliation newAffiliation, Affiliation oldAffiliation)",
          "1100:         if (Affiliation.none == oldAffiliation) {",
          "1101:             if (Affiliation.member == newAffiliation) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1138:             }",
          "1139:         }",
          "1140:         else {",
          "1143:             {",
          "1145:                 Connection con = null;",
          "",
          "[Removed Lines]",
          "1141:             if (MUCRole.Affiliation.member == newAffiliation &&",
          "1142:                     MUCRole.Affiliation.member == oldAffiliation)",
          "",
          "[Added Lines]",
          "1141:             if (Affiliation.member == newAffiliation &&",
          "1142:                     Affiliation.member == oldAffiliation)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1159:                     DbConnectionManager.closeConnection(pstmt, con);",
          "1160:                 }",
          "1161:             }",
          "1163:                 Connection con = null;",
          "1164:                 PreparedStatement pstmt = null;",
          "1165:                 boolean abortTransaction = false;",
          "",
          "[Removed Lines]",
          "1162:             else if (MUCRole.Affiliation.member == newAffiliation) {",
          "",
          "[Added Lines]",
          "1162:             else if (Affiliation.member == newAffiliation) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1188:                     DbConnectionManager.closeTransactionConnection(con, abortTransaction);",
          "1189:                 }",
          "1190:             }",
          "1192:                 Connection con = null;",
          "1193:                 PreparedStatement pstmt = null;",
          "1194:                 boolean abortTransaction = false;",
          "",
          "[Removed Lines]",
          "1191:             else if (MUCRole.Affiliation.member == oldAffiliation) {",
          "",
          "[Added Lines]",
          "1191:             else if (Affiliation.member == oldAffiliation) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1247:     public static void removeAffiliationFromDB(MUCRoom room, JID jid,",
          "1249:     {",
          "1250:         final String affiliationJID = jid.toBareJID();",
          "1251:         if (room.isPersistent() && room.wasSavedToDB()) {",
          "1254:                 Connection con = null;",
          "1255:                 PreparedStatement pstmt = null;",
          "",
          "[Removed Lines]",
          "1248:                                                MUCRole.Affiliation oldAffiliation)",
          "1252:             if (MUCRole.Affiliation.member == oldAffiliation) {",
          "",
          "[Added Lines]",
          "1248:                                                Affiliation oldAffiliation)",
          "1252:             if (Affiliation.member == oldAffiliation) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1372:     private static int marshallRolesToBroadcast(MUCRoom room) {",
          "1373:         final String buffer =",
          "1377:         return Integer.parseInt(buffer, 2);",
          "1378:     }",
          "",
          "[Removed Lines]",
          "1374:             (room.canBroadcastPresence(MUCRole.Role.moderator) ? \"1\" : \"0\") +",
          "1375:             (room.canBroadcastPresence(MUCRole.Role.participant) ? \"1\" : \"0\") +",
          "1376:             (room.canBroadcastPresence(MUCRole.Role.visitor) ? \"1\" : \"0\");",
          "",
          "[Added Lines]",
          "1374:             (room.canBroadcastPresence(Role.moderator) ? \"1\" : \"0\") +",
          "1375:             (room.canBroadcastPresence(Role.participant) ? \"1\" : \"0\") +",
          "1376:             (room.canBroadcastPresence(Role.visitor) ? \"1\" : \"0\");",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/MultiUserChatServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3170:             if (!allowToDiscoverMembersOnlyRooms && room.isMembersOnly()) {",
          "3171:                 return false;",
          "3172:             }",
          "3177:         }",
          "3178:         return true;",
          "3179:     }",
          "",
          "[Removed Lines]",
          "3173:             final MUCRole.Affiliation affiliation = room.getAffiliation(entity.asBareJID());",
          "3174:             return affiliation == MUCRole.Affiliation.owner",
          "3175:                 || affiliation == MUCRole.Affiliation.admin",
          "3176:                 || affiliation == MUCRole.Affiliation.member;",
          "",
          "[Added Lines]",
          "3173:             final Affiliation affiliation = room.getAffiliation(entity.asBareJID());",
          "3174:             return affiliation == Affiliation.owner",
          "3175:                 || affiliation == Affiliation.admin",
          "3176:                 || affiliation == Affiliation.member;",
          "",
          "---------------"
        ],
        "xmppserver/src/main/webapp/muc-room-edit-form.jsp||xmppserver/src/main/webapp/muc-room-edit-form.jsp": [
          "File: xmppserver/src/main/webapp/muc-room-edit-form.jsp -> xmppserver/src/main/webapp/muc-room-edit-form.jsp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: <%@ page import=\"org.jivesoftware.openfire.muc.NotAllowedException\"%>",
          "35: <%@ page import=\"org.jivesoftware.openfire.muc.spi.MUCPersistenceManager\" %>",
          "36: <%@ page import=\"org.jivesoftware.openfire.muc.MUCRole\" %>",
          "38: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>",
          "39: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: <%@ page import=\"org.jivesoftware.openfire.muc.Role\" %>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:             final FormField broadcastField = dataForm.addField(\"muc#roomconfig_presencebroadcast\", null, null);",
          "228:             if (broadcastModerator) {",
          "230:             }",
          "231:             if (broadcastParticipant) {",
          "233:             }",
          "234:             if (broadcastVisitor) {",
          "236:             }",
          "238:             dataForm.addField(\"muc#roomconfig_publicroom\", null, null).addValue(publicRoom ? \"1\": \"0\");",
          "",
          "[Removed Lines]",
          "229:                 broadcastField.addValue(MUCRole.Role.moderator);",
          "232:                 broadcastField.addValue(MUCRole.Role.participant);",
          "235:                 broadcastField.addValue(MUCRole.Role.visitor);",
          "",
          "[Added Lines]",
          "230:                 broadcastField.addValue(Role.moderator);",
          "233:                 broadcastField.addValue(Role.participant);",
          "236:                 broadcastField.addValue(Role.visitor);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321:             description = room.getDescription();",
          "322:             roomSubject = room.getSubject();",
          "323:             maxUsers = Integer.toString(room.getMaxUsers());",
          "327:             password = room.getPassword();",
          "328:             confirmPassword = room.getPassword();",
          "329:             whois = (room.canAnyoneDiscoverJID() ? \"anyone\" : \"moderator\");",
          "",
          "[Removed Lines]",
          "324:             broadcastModerator = room.canBroadcastPresence(MUCRole.Role.moderator);",
          "325:             broadcastParticipant = room.canBroadcastPresence(MUCRole.Role.participant);",
          "326:             broadcastVisitor = room.canBroadcastPresence(MUCRole.Role.visitor);",
          "",
          "[Added Lines]",
          "325:             broadcastModerator = room.canBroadcastPresence(Role.moderator);",
          "326:             broadcastParticipant = room.canBroadcastPresence(Role.participant);",
          "327:             broadcastVisitor = room.canBroadcastPresence(Role.visitor);",
          "",
          "---------------"
        ],
        "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java": [
          "File: xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java -> xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         final JID userAddress = new JID(\"unittest@example.org\");",
          "61:         final String nickname = \"nickname for test\";",
          "64:         final Presence presence = new Presence();",
          "65:         presence.setFrom(userAddress);",
          "66:         presence.setTo(mockRoom.getJID());",
          "",
          "[Removed Lines]",
          "62:         final MUCRole.Role role = MUCRole.Role.participant;",
          "63:         final MUCRole.Affiliation affiliation = MUCRole.Affiliation.admin;",
          "",
          "[Added Lines]",
          "62:         final Role role = Role.participant;",
          "63:         final Affiliation affiliation = Affiliation.admin;",
          "",
          "---------------"
        ],
        "xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java||xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java": [
          "File: xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java -> xmppserver/src/test/java/org/jivesoftware/openfire/muc/MUCRoomTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         final MUCRole roomSelfOccupant = new MUCRole();",
          "83:         populateField(roomSelfOccupant, \"roomJid\", new JID(\"room-test-role-jid@example.org\"));",
          "86:         populateField(roomSelfOccupant, \"occupantJID\", new JID(\"room-test-jid@conference.example.org\"));",
          "88:         final List<MUCRole> occupants = new ArrayList<>();",
          "89:         final MUCRole occupantA = new MUCRole();",
          "90:         populateField(occupantA, \"roomJid\", new JID(\"occupantA@example.org\"));",
          "93:         populateField(occupantA, \"occupantJID\", new JID(\"room-test-jid@conference.example.org/occupantA\"));",
          "94:         occupants.add(occupantA);",
          "96:         final MUCRole occupantB = new MUCRole();",
          "97:         populateField(occupantB, \"roomJid\", new JID(\"occupantBA@example.org\"));",
          "100:         populateField(occupantB, \"occupantJID\", new JID(\"room-test-jid@conference.example.org/occupantB\"));",
          "101:         occupants.add(occupantB);",
          "",
          "[Removed Lines]",
          "84:         populateField(roomSelfOccupant, \"role\", MUCRole.Role.visitor);",
          "85:         populateField(roomSelfOccupant, \"affiliation\", MUCRole.Affiliation.member);",
          "91:         populateField(occupantA, \"role\", MUCRole.Role.participant);",
          "92:         populateField(occupantA, \"affiliation\", MUCRole.Affiliation.member);",
          "98:         populateField(occupantB, \"role\", MUCRole.Role.none);",
          "99:         populateField(occupantB, \"affiliation\", MUCRole.Affiliation.member);",
          "",
          "[Added Lines]",
          "84:         populateField(roomSelfOccupant, \"role\", Role.visitor);",
          "85:         populateField(roomSelfOccupant, \"affiliation\", Affiliation.member);",
          "91:         populateField(occupantA, \"role\", Role.participant);",
          "92:         populateField(occupantA, \"affiliation\", Affiliation.member);",
          "98:         populateField(occupantB, \"role\", Role.none);",
          "99:         populateField(occupantB, \"affiliation\", Affiliation.member);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:         outcasts.add(new JID(\"unit-test-outcast-1@example.com\"));",
          "117:         outcasts.add(new JID(\"unit-test-outcast-2@example.org\"));",
          "124:         final MUCRoom input = new MUCRoom(); // Set all fields to a non-default value, for a more specific test!",
          "125:         populateField(input, \"mucService\", mockService);",
          "",
          "[Removed Lines]",
          "119:         final List<MUCRole.Role> rolesToBroadcastPresence = new ArrayList<>();",
          "120:         rolesToBroadcastPresence.add(MUCRole.Role.visitor);",
          "121:         rolesToBroadcastPresence.add(MUCRole.Role.none);",
          "122:         rolesToBroadcastPresence.add(MUCRole.Role.moderator);",
          "",
          "[Added Lines]",
          "119:         final List<Role> rolesToBroadcastPresence = new ArrayList<>();",
          "120:         rolesToBroadcastPresence.add(Role.visitor);",
          "121:         rolesToBroadcastPresence.add(Role.none);",
          "122:         rolesToBroadcastPresence.add(Role.moderator);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47fec35d9dfb29a4931c44efa4f4edf083e47df2",
      "candidate_info": {
        "commit_hash": "47fec35d9dfb29a4931c44efa4f4edf083e47df2",
        "repo": "igniterealtime/Openfire",
        "commit_url": "https://github.com/igniterealtime/Openfire/commit/47fec35d9dfb29a4931c44efa4f4edf083e47df2",
        "files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
        ],
        "message": "OF-2795 / OF-2166: Remove MUC affiliation of a user that is being deleted. (#2443)\n\nThis prevents a new user by the same name to claim the affiliation.\n\n(cherry picked from commit b8d3a7bc5a4cf07192f46830b8fe4143ce2607a0)\n\nCo-authored-by: Guus der Kinderen <guus.der.kinderen@gmail.com>",
        "before_after_code_files": [
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java",
          "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
          ],
          "candidate": [
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java",
            "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java"
          ]
        }
      },
      "candidate_diff": {
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MUCRoom.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.jivesoftware.openfire.XMPPServer;",
          "25: import org.jivesoftware.openfire.auth.UnauthorizedException;",
          "26: import org.jivesoftware.openfire.event.GroupEventListener;",
          "27: import org.jivesoftware.openfire.group.*;",
          "28: import org.jivesoftware.openfire.muc.spi.*;",
          "29: import org.jivesoftware.openfire.user.UserAlreadyExistsException;",
          "30: import org.jivesoftware.openfire.user.UserNotFoundException;",
          "31: import org.jivesoftware.util.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.jivesoftware.openfire.event.UserEventListener;",
          "30: import org.jivesoftware.openfire.user.User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import java.time.temporal.ChronoUnit;",
          "49: import java.util.*;",
          "50: import java.util.concurrent.*;",
          "51: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import java.util.concurrent.locks.Lock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: @JiveID(JiveConstants.MUC_ROOM)",
          "66:     private static final Logger Log = LoggerFactory.getLogger(MUCRoom.class);",
          "",
          "[Removed Lines]",
          "64: public class MUCRoom implements GroupEventListener, Externalizable, Result, Cacheable {",
          "",
          "[Added Lines]",
          "67: public class MUCRoom implements GroupEventListener, UserEventListener, Externalizable, Result, Cacheable {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3817:     public void groupCreated(Group group, Map params) {",
          "3819:     }",
          "3820: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3824:     @Override",
          "3825:     public void userCreated(User user, Map<String, Object> params)",
          "3826:     {}",
          "3828:     @Override",
          "3829:     public void userDeleting(User user, Map<String, Object> params)",
          "3830:     {",
          "3834:         final JID userJid = XMPPServer.getInstance().createJID(user.getUsername(), null);",
          "3836:         final Lock lock = getMUCService().getChatRoomLock(getJID().getNode());",
          "3837:         try {",
          "3838:             lock.lock();",
          "3840:             if (getAffiliation(userJid) == MUCRole.Affiliation.none) {",
          "3842:                 return;",
          "3843:             }",
          "3846:             if (getOwners().contains(userJid) && getOwners().size() == 1) {",
          "3847:                 final JID adminJid = XMPPServer.getInstance().getAdmins().iterator().next();",
          "3848:                 Log.info(\"User '{}' is being deleted, but is also the only owner of MUC room '{}'. To prevent having a room without owner, server admin '{}' was made owner of the room.\", user.getUsername(), getJID(), adminJid);",
          "3849:                 addOwner(adminJid, getRole());",
          "3850:             }",
          "3853:             addNone(userJid, getRole());",
          "3854:             getMUCService().syncChatRoom(this);",
          "3855:         } catch (Throwable t) {",
          "3856:             Log.warn(\"A problem occurred while trying to update room '{}' as a result of user '{}' being deleted from Openfire.\", getJID(), user);",
          "3857:         } finally {",
          "3858:             lock.unlock();",
          "3859:         }",
          "3860:     }",
          "3862:     @Override",
          "3863:     public void userModified(User user, Map<String, Object> params)",
          "3864:     {}",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/MultiUserChatManager.java"
        ],
        "xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java||xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java -> xmppserver/src/main/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoomManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.jivesoftware.openfire.cluster.ClusteredCacheEntryListener;",
          "21: import org.jivesoftware.openfire.cluster.NodeID;",
          "22: import org.jivesoftware.openfire.event.GroupEventDispatcher;",
          "23: import org.jivesoftware.openfire.muc.MUCRole;",
          "24: import org.jivesoftware.openfire.muc.MUCRoom;",
          "25: import org.jivesoftware.openfire.muc.MultiUserChatService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.jivesoftware.openfire.event.UserEventDispatcher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import javax.annotation.Nonnull;",
          "37: import javax.annotation.Nullable;",
          "38: import java.time.Duration;",
          "47: import java.util.concurrent.locks.Lock;",
          "48: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "39: import java.util.Collection;",
          "40: import java.util.Collections;",
          "41: import java.util.Date;",
          "42: import java.util.HashMap;",
          "43: import java.util.HashSet;",
          "44: import java.util.List;",
          "45: import java.util.Map;",
          "46: import java.util.Set;",
          "",
          "[Added Lines]",
          "40: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:         }",
          "162:         GroupEventDispatcher.addListener(room); // TODO this event listener is added only in the node where the room is created. Does this mean that events are not propagated in a cluster?",
          "163:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:         UserEventDispatcher.addListener(room);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:             if (room != null) {",
          "235:                 room.getRoomHistory().purge();",
          "236:                 GroupEventDispatcher.removeListener(room);",
          "237:                 updateNonPersistentRoomStat(room, null);",
          "238:             }",
          "239:             localRooms.remove(roomName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:                 UserEventDispatcher.removeListener(room);",
          "",
          "---------------"
        ]
      }
    }
  ]
}