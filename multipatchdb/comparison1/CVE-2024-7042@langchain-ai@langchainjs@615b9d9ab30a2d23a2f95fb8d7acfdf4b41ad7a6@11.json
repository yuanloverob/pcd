{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6488144b5fe698262310b7da7e8b743d4d7f4de",
      "candidate_info": {
        "commit_hash": "b6488144b5fe698262310b7da7e8b743d4d7f4de",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/b6488144b5fe698262310b7da7e8b743d4d7f4de",
        "files": [
          "docs/core_docs/docs/integrations/chat/deepseek.ipynb",
          "docs/core_docs/docs/integrations/chat/xai.ipynb",
          "examples/package.json",
          "libs/langchain-deepseek/.env.example",
          "libs/langchain-deepseek/.eslintrc.cjs",
          "libs/langchain-deepseek/.gitignore",
          "libs/langchain-deepseek/.prettierrc",
          "libs/langchain-deepseek/.release-it.json",
          "libs/langchain-deepseek/LICENSE",
          "libs/langchain-deepseek/README.md",
          "libs/langchain-deepseek/jest.config.cjs",
          "libs/langchain-deepseek/jest.env.cjs",
          "libs/langchain-deepseek/langchain.config.js",
          "libs/langchain-deepseek/package.json",
          "libs/langchain-deepseek/scripts/jest-setup-after-env.js",
          "libs/langchain-deepseek/src/chat_models.ts",
          "libs/langchain-deepseek/src/index.ts",
          "libs/langchain-deepseek/src/tests/chat_models.int.test.ts",
          "libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts",
          "libs/langchain-deepseek/src/tests/chat_models.standard.test.ts",
          "libs/langchain-deepseek/tsconfig.cjs.json",
          "libs/langchain-deepseek/tsconfig.json",
          "libs/langchain-deepseek/turbo.json",
          "libs/langchain-groq/src/chat_models.ts",
          "libs/langchain-xai/src/chat_models.ts",
          "yarn.lock"
        ],
        "message": "feat(deepseek): Adds Deepseek integration (#7604)",
        "before_after_code_files": [
          "libs/langchain-deepseek/.env.example||libs/langchain-deepseek/.env.example",
          "libs/langchain-deepseek/.eslintrc.cjs||libs/langchain-deepseek/.eslintrc.cjs",
          "libs/langchain-deepseek/jest.config.cjs||libs/langchain-deepseek/jest.config.cjs",
          "libs/langchain-deepseek/jest.env.cjs||libs/langchain-deepseek/jest.env.cjs",
          "libs/langchain-deepseek/langchain.config.js||libs/langchain-deepseek/langchain.config.js",
          "libs/langchain-deepseek/scripts/jest-setup-after-env.js||libs/langchain-deepseek/scripts/jest-setup-after-env.js",
          "libs/langchain-deepseek/src/chat_models.ts||libs/langchain-deepseek/src/chat_models.ts",
          "libs/langchain-deepseek/src/index.ts||libs/langchain-deepseek/src/index.ts",
          "libs/langchain-deepseek/src/tests/chat_models.int.test.ts||libs/langchain-deepseek/src/tests/chat_models.int.test.ts",
          "libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts||libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts",
          "libs/langchain-deepseek/src/tests/chat_models.standard.test.ts||libs/langchain-deepseek/src/tests/chat_models.standard.test.ts",
          "libs/langchain-groq/src/chat_models.ts||libs/langchain-groq/src/chat_models.ts",
          "libs/langchain-xai/src/chat_models.ts||libs/langchain-xai/src/chat_models.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-deepseek/.env.example||libs/langchain-deepseek/.env.example": [
          "File: libs/langchain-deepseek/.env.example -> libs/langchain-deepseek/.env.example",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: DEEPSEEK_API_KEY=\"your_key\"",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/.eslintrc.cjs||libs/langchain-deepseek/.eslintrc.cjs": [
          "File: libs/langchain-deepseek/.eslintrc.cjs -> libs/langchain-deepseek/.eslintrc.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: module.exports = {",
          "2:   extends: [",
          "3:     \"airbnb-base\",",
          "4:     \"eslint:recommended\",",
          "5:     \"prettier\",",
          "6:     \"plugin:@typescript-eslint/recommended\",",
          "7:   ],",
          "8:   parserOptions: {",
          "9:     ecmaVersion: 12,",
          "10:     parser: \"@typescript-eslint/parser\",",
          "11:     project: \"./tsconfig.json\",",
          "12:     sourceType: \"module\",",
          "13:   },",
          "14:   plugins: [\"@typescript-eslint\", \"no-instanceof\"],",
          "15:   ignorePatterns: [",
          "16:     \".eslintrc.cjs\",",
          "17:     \"scripts\",",
          "18:     \"node_modules\",",
          "19:     \"dist\",",
          "20:     \"dist-cjs\",",
          "21:     \"*.js\",",
          "22:     \"*.cjs\",",
          "23:     \"*.d.ts\",",
          "24:   ],",
          "25:   rules: {",
          "26:     \"no-process-env\": 2,",
          "27:     \"no-instanceof/no-instanceof\": 2,",
          "28:     \"@typescript-eslint/explicit-module-boundary-types\": 0,",
          "29:     \"@typescript-eslint/no-empty-function\": 0,",
          "30:     \"@typescript-eslint/no-shadow\": 0,",
          "31:     \"@typescript-eslint/no-empty-interface\": 0,",
          "32:     \"@typescript-eslint/no-use-before-define\": [\"error\", \"nofunc\"],",
          "33:     \"@typescript-eslint/no-unused-vars\": [\"warn\", { args: \"none\" }],",
          "34:     \"@typescript-eslint/no-floating-promises\": \"error\",",
          "35:     \"@typescript-eslint/no-misused-promises\": \"error\",",
          "36:     camelcase: 0,",
          "37:     \"class-methods-use-this\": 0,",
          "38:     \"import/extensions\": [2, \"ignorePackages\"],",
          "39:     \"import/no-extraneous-dependencies\": [",
          "40:       \"error\",",
          "41:       { devDependencies: [\"**/*.test.ts\"] },",
          "42:     ],",
          "43:     \"import/no-unresolved\": 0,",
          "44:     \"import/prefer-default-export\": 0,",
          "45:     \"keyword-spacing\": \"error\",",
          "46:     \"max-classes-per-file\": 0,",
          "47:     \"max-len\": 0,",
          "48:     \"no-await-in-loop\": 0,",
          "49:     \"no-bitwise\": 0,",
          "50:     \"no-console\": 0,",
          "51:     \"no-restricted-syntax\": 0,",
          "52:     \"no-shadow\": 0,",
          "53:     \"no-continue\": 0,",
          "54:     \"no-void\": 0,",
          "55:     \"no-underscore-dangle\": 0,",
          "56:     \"no-use-before-define\": 0,",
          "57:     \"no-useless-constructor\": 0,",
          "58:     \"no-return-await\": 0,",
          "59:     \"consistent-return\": 0,",
          "60:     \"no-else-return\": 0,",
          "61:     \"func-names\": 0,",
          "62:     \"no-lonely-if\": 0,",
          "63:     \"prefer-rest-params\": 0,",
          "64:     \"new-cap\": [\"error\", { properties: false, capIsNew: false }],",
          "65:   },",
          "66:   overrides: [",
          "67:     {",
          "68:       files: [\"**/*.test.ts\"],",
          "69:       rules: {",
          "70:         \"@typescript-eslint/no-unused-vars\": \"off\",",
          "71:       },",
          "72:     },",
          "73:   ],",
          "74: };",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/jest.config.cjs||libs/langchain-deepseek/jest.config.cjs": [
          "File: libs/langchain-deepseek/jest.config.cjs -> libs/langchain-deepseek/jest.config.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: module.exports = {",
          "3:   preset: \"ts-jest/presets/default-esm\",",
          "4:   testEnvironment: \"./jest.env.cjs\",",
          "5:   modulePathIgnorePatterns: [\"dist/\", \"docs/\"],",
          "6:   moduleNameMapper: {",
          "7:     \"^(\\\\.{1,2}/.*)\\\\.js$\": \"$1\",",
          "8:   },",
          "9:   transform: {",
          "10:     \"^.+\\\\.tsx?$\": [\"@swc/jest\"],",
          "11:   },",
          "12:   transformIgnorePatterns: [",
          "13:     \"/node_modules/\",",
          "14:     \"\\\\.pnp\\\\.[^\\\\/]+$\",",
          "15:     \"./scripts/jest-setup-after-env.js\",",
          "16:   ],",
          "17:   setupFiles: [\"dotenv/config\"],",
          "18:   testTimeout: 20_000,",
          "19:   passWithNoTests: true,",
          "20:   collectCoverageFrom: [\"src/**/*.ts\"],",
          "21: };",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/jest.env.cjs||libs/langchain-deepseek/jest.env.cjs": [
          "File: libs/langchain-deepseek/jest.env.cjs -> libs/langchain-deepseek/jest.env.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { TestEnvironment } = require(\"jest-environment-node\");",
          "3: class AdjustedTestEnvironmentToSupportFloat32Array extends TestEnvironment {",
          "4:   constructor(config, context) {",
          "7:     super(config, context);",
          "8:     this.global.Float32Array = Float32Array;",
          "9:   }",
          "10: }",
          "12: module.exports = AdjustedTestEnvironmentToSupportFloat32Array;",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/langchain.config.js||libs/langchain-deepseek/langchain.config.js": [
          "File: libs/langchain-deepseek/langchain.config.js -> libs/langchain-deepseek/langchain.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { resolve, dirname } from \"node:path\";",
          "2: import { fileURLToPath } from \"node:url\";",
          "8: function abs(relativePath) {",
          "9:   return resolve(dirname(fileURLToPath(import.meta.url)), relativePath);",
          "10: }",
          "12: export const config = {",
          "13:   internals: [/node\\:/, /@langchain\\/core\\//],",
          "14:   entrypoints: {",
          "15:     index: \"index\",",
          "16:   },",
          "17:   requiresOptionalDependency: [],",
          "18:   tsConfigPath: resolve(\"./tsconfig.json\"),",
          "19:   cjsSource: \"./dist-cjs\",",
          "20:   cjsDestination: \"./dist\",",
          "21:   abs,",
          "22: };",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/scripts/jest-setup-after-env.js||libs/langchain-deepseek/scripts/jest-setup-after-env.js": [
          "File: libs/langchain-deepseek/scripts/jest-setup-after-env.js -> libs/langchain-deepseek/scripts/jest-setup-after-env.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { awaitAllCallbacks } from \"@langchain/core/callbacks/promises\";",
          "2: import { afterAll, jest } from \"@jest/globals\";",
          "4: afterAll(awaitAllCallbacks);",
          "7: if (process.env.DISABLE_CONSOLE_LOGS === \"true\") {",
          "8:   console.log = jest.fn();",
          "9: }",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/src/chat_models.ts||libs/langchain-deepseek/src/chat_models.ts": [
          "File: libs/langchain-deepseek/src/chat_models.ts -> libs/langchain-deepseek/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { BaseLanguageModelInput } from \"@langchain/core/language_models/base\";",
          "2: import { BaseMessage } from \"@langchain/core/messages\";",
          "3: import { Runnable } from \"@langchain/core/runnables\";",
          "4: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "5: import {",
          "6:   ChatOpenAI,",
          "7:   ChatOpenAICallOptions,",
          "8:   ChatOpenAIFields,",
          "9:   ChatOpenAIStructuredOutputMethodOptions,",
          "10:   OpenAIClient,",
          "11: } from \"@langchain/openai\";",
          "12: import { z } from \"zod\";",
          "14: export interface ChatDeepSeekCallOptions extends ChatOpenAICallOptions {",
          "15:   headers?: Record<string, string>;",
          "16: }",
          "18: export interface ChatDeepSeekInput extends ChatOpenAIFields {",
          "23:   apiKey?: string;",
          "27:   model?: string;",
          "33:   stop?: Array<string>;",
          "38:   stopSequences?: Array<string>;",
          "42:   streaming?: boolean;",
          "46:   temperature?: number;",
          "51:   maxTokens?: number;",
          "52: }",
          "404: export class ChatDeepSeek extends ChatOpenAI<ChatDeepSeekCallOptions> {",
          "405:   static lc_name() {",
          "406:     return \"ChatDeepSeek\";",
          "407:   }",
          "409:   _llmType() {",
          "410:     return \"deepseek\";",
          "411:   }",
          "413:   get lc_secrets(): { [key: string]: string } | undefined {",
          "414:     return {",
          "415:       apiKey: \"DEEPSEEK_API_KEY\",",
          "416:     };",
          "417:   }",
          "419:   lc_serializable = true;",
          "421:   lc_namespace = [\"langchain\", \"chat_models\", \"deepseek\"];",
          "423:   constructor(fields?: Partial<ChatDeepSeekInput>) {",
          "424:     const apiKey = fields?.apiKey || getEnvironmentVariable(\"DEEPSEEK_API_KEY\");",
          "425:     if (!apiKey) {",
          "426:       throw new Error(",
          "427:         `Deepseek API key not found. Please set the DEEPSEEK_API_KEY environment variable or pass the key into \"apiKey\" field.`",
          "428:       );",
          "429:     }",
          "431:     super({",
          "432:       ...fields,",
          "433:       apiKey,",
          "434:       configuration: {",
          "435:         baseURL: \"https://api.deepseek.com\",",
          "436:         ...fields?.configuration,",
          "437:       },",
          "438:     });",
          "439:   }",
          "441:   protected override _convertOpenAIDeltaToBaseMessageChunk(",
          "443:     delta: Record<string, any>,",
          "444:     rawResponse: OpenAIClient.ChatCompletionChunk,",
          "445:     defaultRole?:",
          "446:       | \"function\"",
          "447:       | \"user\"",
          "448:       | \"system\"",
          "449:       | \"developer\"",
          "450:       | \"assistant\"",
          "451:       | \"tool\"",
          "452:   ) {",
          "453:     const messageChunk = super._convertOpenAIDeltaToBaseMessageChunk(",
          "454:       delta,",
          "455:       rawResponse,",
          "456:       defaultRole",
          "457:     );",
          "458:     messageChunk.additional_kwargs.reasoning_content = delta.reasoning_content;",
          "459:     return messageChunk;",
          "460:   }",
          "462:   protected override _convertOpenAIChatCompletionMessageToBaseMessage(",
          "463:     message: OpenAIClient.ChatCompletionMessage,",
          "464:     rawResponse: OpenAIClient.ChatCompletion",
          "465:   ) {",
          "466:     const langChainMessage =",
          "467:       super._convertOpenAIChatCompletionMessageToBaseMessage(",
          "468:         message,",
          "469:         rawResponse",
          "470:       );",
          "471:     langChainMessage.additional_kwargs.reasoning_content =",
          "473:       (message as any).reasoning_content;",
          "474:     return langChainMessage;",
          "475:   }",
          "477:   withStructuredOutput<",
          "479:     RunOutput extends Record<string, any> = Record<string, any>",
          "480:   >(",
          "481:     outputSchema:",
          "482:       | z.ZodType<RunOutput>",
          "484:       | Record<string, any>,",
          "485:     config?: ChatOpenAIStructuredOutputMethodOptions<false>",
          "486:   ): Runnable<BaseLanguageModelInput, RunOutput>;",
          "488:   withStructuredOutput<",
          "490:     RunOutput extends Record<string, any> = Record<string, any>",
          "491:   >(",
          "492:     outputSchema:",
          "493:       | z.ZodType<RunOutput>",
          "495:       | Record<string, any>,",
          "496:     config?: ChatOpenAIStructuredOutputMethodOptions<true>",
          "497:   ): Runnable<BaseLanguageModelInput, { raw: BaseMessage; parsed: RunOutput }>;",
          "499:   withStructuredOutput<",
          "501:     RunOutput extends Record<string, any> = Record<string, any>",
          "502:   >(",
          "503:     outputSchema:",
          "504:       | z.ZodType<RunOutput>",
          "506:       | Record<string, any>,",
          "507:     config?: ChatOpenAIStructuredOutputMethodOptions<boolean>",
          "508:   ):",
          "509:     | Runnable<BaseLanguageModelInput, RunOutput>",
          "510:     | Runnable<BaseLanguageModelInput, { raw: BaseMessage; parsed: RunOutput }>;",
          "512:   withStructuredOutput<",
          "514:     RunOutput extends Record<string, any> = Record<string, any>",
          "515:   >(",
          "516:     outputSchema:",
          "517:       | z.ZodType<RunOutput>",
          "519:       | Record<string, any>,",
          "520:     config?: ChatOpenAIStructuredOutputMethodOptions<boolean>",
          "521:   ):",
          "522:     | Runnable<BaseLanguageModelInput, RunOutput>",
          "523:     | Runnable<",
          "524:         BaseLanguageModelInput,",
          "525:         { raw: BaseMessage; parsed: RunOutput }",
          "526:       > {",
          "527:     const ensuredConfig = { ...config };",
          "529:     if (ensuredConfig?.method === undefined) {",
          "530:       ensuredConfig.method = \"functionCalling\";",
          "531:     }",
          "532:     return super.withStructuredOutput<RunOutput>(outputSchema, ensuredConfig);",
          "533:   }",
          "534: }",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/src/index.ts||libs/langchain-deepseek/src/index.ts": [
          "File: libs/langchain-deepseek/src/index.ts -> libs/langchain-deepseek/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export * from \"./chat_models.js\";",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/src/tests/chat_models.int.test.ts||libs/langchain-deepseek/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-deepseek/src/tests/chat_models.int.test.ts -> libs/langchain-deepseek/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { test, expect } from \"@jest/globals\";",
          "4: import { ChatDeepSeek } from \"../chat_models.js\";",
          "6: test(\"Can send deepseek-reasoner requests\", async () => {",
          "7:   const llm = new ChatDeepSeek({",
          "8:     model: \"deepseek-reasoner\",",
          "9:   });",
          "10:   const input = `Translate \"I love programming\" into French.`;",
          "12:   const result = await llm.invoke(input);",
          "13:   expect(",
          "14:     (result.additional_kwargs.reasoning_content as any).length",
          "15:   ).toBeGreaterThan(10);",
          "16: });",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts||libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts": [
          "File: libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts -> libs/langchain-deepseek/src/tests/chat_models.standard.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { test } from \"@jest/globals\";",
          "3: import { ChatModelIntegrationTests } from \"@langchain/standard-tests\";",
          "4: import { AIMessageChunk } from \"@langchain/core/messages\";",
          "9: import { ChatDeepSeek, ChatDeepSeekCallOptions } from \"../chat_models.js\";",
          "13: class ChatDeepSeekStandardIntegrationTests extends ChatModelIntegrationTests<",
          "14:   ChatDeepSeekCallOptions,",
          "15:   AIMessageChunk",
          "16: > {",
          "17:   constructor() {",
          "18:     if (!process.env.DEEPSEEK_API_KEY) {",
          "19:       throw new Error(",
          "20:         \"DEEPSEEK_API_KEY must be set to run standard integration tests.\"",
          "21:       );",
          "22:     }",
          "23:     super({",
          "24:       Cls: ChatDeepSeek,",
          "25:       chatModelHasToolCalling: true,",
          "26:       chatModelHasStructuredOutput: true,",
          "27:       supportsParallelToolCalls: false,",
          "28:       constructorArgs: {",
          "29:         model: \"deepseek-chat\",",
          "30:         maxRetries: 0,",
          "31:       },",
          "32:     });",
          "33:   }",
          "35:   supportedUsageMetadataDetails: {",
          "36:     invoke: Array<",
          "37:       \"audio_input\" | \"audio_output\"",
          "41:     >;",
          "42:     stream: Array<",
          "43:       \"audio_input\" | \"audio_output\"",
          "47:     >;",
          "48:   } = {",
          "49:     invoke: [",
          "51:     ],",
          "52:     stream: [],",
          "53:   };",
          "92:   async testInvokeMoreComplexTools() {",
          "93:     this.skipTestMessage(",
          "94:       \"testInvokeMoreComplexTools\",",
          "95:       \"ChatDeepSeek\",",
          "96:       \"Deepseek does not support tool schemas which contain object with unknown/any parameters.\" +",
          "97:         \"\\nDeepseek only supports objects in schemas when the parameters are defined.\"",
          "98:     );",
          "99:   }",
          "100: }",
          "102: const testClass = new ChatDeepSeekStandardIntegrationTests();",
          "104: test(\"ChatDeepSeekStandardIntegrationTests\", async () => {",
          "105:   const testResults = await testClass.runTests();",
          "106:   expect(testResults).toBe(true);",
          "107: });",
          "",
          "---------------"
        ],
        "libs/langchain-deepseek/src/tests/chat_models.standard.test.ts||libs/langchain-deepseek/src/tests/chat_models.standard.test.ts": [
          "File: libs/langchain-deepseek/src/tests/chat_models.standard.test.ts -> libs/langchain-deepseek/src/tests/chat_models.standard.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { test, expect } from \"@jest/globals\";",
          "3: import { ChatModelUnitTests } from \"@langchain/standard-tests\";",
          "4: import { AIMessageChunk } from \"@langchain/core/messages\";",
          "5: import { ChatDeepSeek, ChatDeepSeekCallOptions } from \"../chat_models.js\";",
          "7: class ChatDeepSeekStandardUnitTests extends ChatModelUnitTests<",
          "8:   ChatDeepSeekCallOptions,",
          "9:   AIMessageChunk",
          "10: > {",
          "11:   constructor() {",
          "12:     super({",
          "13:       Cls: ChatDeepSeek,",
          "14:       chatModelHasToolCalling: true,",
          "15:       chatModelHasStructuredOutput: true,",
          "16:       constructorArgs: {},",
          "17:     });",
          "21:     process.env.DEEPSEEK_API_KEY = \"test\";",
          "22:   }",
          "24:   testChatModelInitApiKey() {",
          "27:     process.env.DEEPSEEK_API_KEY = \"\";",
          "28:     super.testChatModelInitApiKey();",
          "30:     process.env.DEEPSEEK_API_KEY = \"test\";",
          "31:   }",
          "32: }",
          "34: const testClass = new ChatDeepSeekStandardUnitTests();",
          "36: test(\"ChatDeepSeekStandardUnitTests\", () => {",
          "37:   const testResults = testClass.runTests();",
          "38:   expect(testResults).toBe(true);",
          "39: });",
          "",
          "---------------"
        ],
        "libs/langchain-groq/src/chat_models.ts||libs/langchain-groq/src/chat_models.ts": [
          "File: libs/langchain-groq/src/chat_models.ts -> libs/langchain-groq/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { zodToJsonSchema } from \"zod-to-json-schema\";",
          "3: import { NewTokenIndices } from \"@langchain/core/callbacks/base\";",
          "4: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "",
          "[Removed Lines]",
          "1: import { z } from \"zod\";",
          "",
          "[Added Lines]",
          "1: import type { z } from \"zod\";",
          "",
          "---------------"
        ],
        "libs/langchain-xai/src/chat_models.ts||libs/langchain-xai/src/chat_models.ts": [
          "File: libs/langchain-xai/src/chat_models.ts -> libs/langchain-xai/src/chat_models.ts"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12465:   languageName: unknown",
          "12466:   linkType: soft",
          "12468: \"@langchain/exa@workspace:*, @langchain/exa@workspace:libs/langchain-exa\":",
          "12469:   version: 0.0.0-use.local",
          "12470:   resolution: \"@langchain/exa@workspace:libs/langchain-exa\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12468: \"@langchain/deepseek@workspace:*, @langchain/deepseek@workspace:libs/langchain-deepseek\":",
          "12469:   version: 0.0.0-use.local",
          "12470:   resolution: \"@langchain/deepseek@workspace:libs/langchain-deepseek\"",
          "12471:   dependencies:",
          "12472:     \"@jest/globals\": ^29.5.0",
          "12473:     \"@langchain/core\": \"workspace:*\"",
          "12474:     \"@langchain/openai\": ^0.4.2",
          "12475:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12476:     \"@langchain/standard-tests\": \"workspace:*\"",
          "12477:     \"@swc/core\": ^1.3.90",
          "12478:     \"@swc/jest\": ^0.2.29",
          "12479:     \"@tsconfig/recommended\": ^1.0.3",
          "12480:     \"@typescript-eslint/eslint-plugin\": ^6.12.0",
          "12481:     \"@typescript-eslint/parser\": ^6.12.0",
          "12482:     dotenv: ^16.3.1",
          "12483:     dpdm: ^3.12.0",
          "12484:     eslint: ^8.33.0",
          "12485:     eslint-config-airbnb-base: ^15.0.0",
          "12486:     eslint-config-prettier: ^8.6.0",
          "12487:     eslint-plugin-import: ^2.27.5",
          "12488:     eslint-plugin-no-instanceof: ^1.0.1",
          "12489:     eslint-plugin-prettier: ^4.2.1",
          "12490:     jest: ^29.5.0",
          "12491:     jest-environment-node: ^29.6.4",
          "12492:     prettier: ^2.8.3",
          "12493:     release-it: ^15.10.1",
          "12494:     rollup: ^4.5.2",
          "12495:     ts-jest: ^29.1.0",
          "12496:     typescript: <5.2.0",
          "12497:     zod: ^3.24.1",
          "12498:   peerDependencies:",
          "12499:     \"@langchain/core\": \">=0.3.0 <0.4.0\"",
          "12500:   languageName: unknown",
          "12501:   linkType: soft",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12968:   languageName: unknown",
          "12969:   linkType: soft",
          "12972:   version: 0.0.0-use.local",
          "12973:   resolution: \"@langchain/openai@workspace:libs/langchain-openai\"",
          "12974:   dependencies:",
          "",
          "[Removed Lines]",
          "12971: \"@langchain/openai@>=0.1.0 <0.5.0, @langchain/openai@>=0.2.0 <0.5.0, @langchain/openai@workspace:*, @langchain/openai@workspace:^, @langchain/openai@workspace:libs/langchain-openai\":",
          "",
          "[Added Lines]",
          "13006: \"@langchain/openai@>=0.1.0 <0.5.0, @langchain/openai@>=0.2.0 <0.5.0, @langchain/openai@^0.4.2, @langchain/openai@workspace:*, @langchain/openai@workspace:^, @langchain/openai@workspace:libs/langchain-openai\":",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13170:   languageName: unknown",
          "13171:   linkType: soft",
          "13174:   version: 0.0.0-use.local",
          "13175:   resolution: \"@langchain/standard-tests@workspace:libs/langchain-standard-tests\"",
          "13176:   dependencies:",
          "",
          "[Removed Lines]",
          "13173: \"@langchain/standard-tests@0.0.0, @langchain/standard-tests@workspace:libs/langchain-standard-tests\":",
          "",
          "[Added Lines]",
          "13208: \"@langchain/standard-tests@0.0.0, @langchain/standard-tests@workspace:*, @langchain/standard-tests@workspace:libs/langchain-standard-tests\":",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "27806:     \"@langchain/cohere\": \"workspace:*\"",
          "27807:     \"@langchain/community\": \"workspace:*\"",
          "27808:     \"@langchain/core\": \"workspace:*\"",
          "27809:     \"@langchain/exa\": \"workspace:*\"",
          "27810:     \"@langchain/google-common\": \"workspace:*\"",
          "27811:     \"@langchain/google-genai\": \"workspace:*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27844:     \"@langchain/deepseek\": \"workspace:*\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90692bab1954eb7a28b93521d6c9119936637b29",
      "candidate_info": {
        "commit_hash": "90692bab1954eb7a28b93521d6c9119936637b29",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/90692bab1954eb7a28b93521d6c9119936637b29",
        "files": [
          "docs/core_docs/docs/concepts/streaming.mdx",
          "docs/core_docs/docs/integrations/chat/google_generativeai.ipynb",
          "langchain-core/src/language_models/chat_models.ts",
          "libs/langchain-google-genai/package.json",
          "libs/langchain-google-genai/src/chat_models.ts",
          "libs/langchain-google-genai/src/tests/chat_models.int.test.ts",
          "libs/langchain-google-genai/src/types.ts",
          "libs/langchain-google-genai/src/utils/common.ts",
          "libs/langchain-google-genai/src/utils/tools.ts",
          "libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts",
          "yarn.lock"
        ],
        "message": "feat(google-genai): Add support for search retrieval and code execution tools (#7138)",
        "before_after_code_files": [
          "langchain-core/src/language_models/chat_models.ts||langchain-core/src/language_models/chat_models.ts",
          "libs/langchain-google-genai/src/chat_models.ts||libs/langchain-google-genai/src/chat_models.ts",
          "libs/langchain-google-genai/src/tests/chat_models.int.test.ts||libs/langchain-google-genai/src/tests/chat_models.int.test.ts",
          "libs/langchain-google-genai/src/types.ts||libs/langchain-google-genai/src/types.ts",
          "libs/langchain-google-genai/src/utils/common.ts||libs/langchain-google-genai/src/utils/common.ts",
          "libs/langchain-google-genai/src/utils/tools.ts||libs/langchain-google-genai/src/utils/tools.ts",
          "libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts||libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain-core/src/language_models/chat_models.ts||langchain-core/src/language_models/chat_models.ts": [
          "File: langchain-core/src/language_models/chat_models.ts -> langchain-core/src/language_models/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import { isZodSchema } from \"../utils/types/is_zod_schema.js\";",
          "",
          "[Removed Lines]",
          "54: type ToolChoice = string | Record<string, any> | \"auto\" | \"any\";",
          "",
          "[Added Lines]",
          "54: export type ToolChoice = string | Record<string, any> | \"auto\" | \"any\";",
          "",
          "---------------"
        ],
        "libs/langchain-google-genai/src/chat_models.ts||libs/langchain-google-genai/src/chat_models.ts": [
          "File: libs/langchain-google-genai/src/chat_models.ts -> libs/langchain-google-genai/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   GenerateContentRequest,",
          "8:   SafetySetting,",
          "9:   Part as GenerativeAIPart,",
          "13: } from \"@google/generative-ai\";",
          "14: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "15: import {",
          "",
          "[Removed Lines]",
          "10:   Tool as GenerativeAITool,",
          "11:   ToolConfig,",
          "12:   FunctionCallingMode,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   BaseLanguageModelInput,",
          "31:   StructuredOutputMethodOptions,",
          "32: } from \"@langchain/core/language_models/base\";",
          "34: import {",
          "35:   Runnable,",
          "36:   RunnablePassthrough,",
          "",
          "[Removed Lines]",
          "33: import { StructuredToolInterface } from \"@langchain/core/tools\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: import {",
          "44:   convertBaseMessagesToContent,",
          "45:   convertResponseContentToChatGenerationChunk,",
          "47:   mapGenerateContentResultToChatResult,",
          "48: } from \"./utils/common.js\";",
          "49: import { GoogleGenerativeAIToolsOutputParser } from \"./output_parsers.js\";",
          "50: import { GoogleGenerativeAIToolType } from \"./types.js\";",
          "52: interface TokenUsage {",
          "53:   completionTokens?: number;",
          "",
          "[Removed Lines]",
          "46:   convertToGenerativeAITools,",
          "",
          "[Added Lines]",
          "46: import { convertToolsToGenAI } from \"./utils/tools.js\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "682:     AIMessageChunk,",
          "683:     GoogleGenerativeAIChatCallOptions",
          "684:   > {",
          "686:   }",
          "688:   invocationParams(",
          "689:     options?: this[\"ParsedCallOptions\"]",
          "690:   ): Omit<GenerateContentRequest, \"contents\"> {",
          "746:     return {",
          "749:     };",
          "750:   }",
          "",
          "[Removed Lines]",
          "685:     return this.bind({ tools: convertToGenerativeAITools(tools), ...kwargs });",
          "691:     let genaiTools: GenerativeAITool[] | undefined;",
          "692:     if (",
          "693:       Array.isArray(options?.tools) &&",
          "694:       !options?.tools.some(",
          "696:         (t: any) => !(\"lc_namespace\" in t)",
          "697:       )",
          "698:     ) {",
          "700:       genaiTools = convertToGenerativeAITools(",
          "701:         options?.tools as StructuredToolInterface[]",
          "702:       );",
          "703:     } else {",
          "704:       genaiTools = options?.tools as GenerativeAITool[];",
          "705:     }",
          "707:     let toolConfig: ToolConfig | undefined;",
          "708:     if (genaiTools?.length && options?.tool_choice) {",
          "709:       if ([\"any\", \"auto\", \"none\"].some((c) => c === options.tool_choice)) {",
          "710:         const modeMap: Record<string, FunctionCallingMode> = {",
          "711:           any: FunctionCallingMode.ANY,",
          "712:           auto: FunctionCallingMode.AUTO,",
          "713:           none: FunctionCallingMode.NONE,",
          "714:         };",
          "716:         toolConfig = {",
          "717:           functionCallingConfig: {",
          "718:             mode:",
          "719:               modeMap[options.tool_choice as keyof typeof modeMap] ??",
          "720:               \"MODE_UNSPECIFIED\",",
          "721:             allowedFunctionNames: options.allowedFunctionNames,",
          "722:           },",
          "723:         };",
          "724:       } else if (typeof options.tool_choice === \"string\") {",
          "725:         toolConfig = {",
          "726:           functionCallingConfig: {",
          "727:             mode: FunctionCallingMode.ANY,",
          "728:             allowedFunctionNames: [",
          "729:               ...(options.allowedFunctionNames ?? []),",
          "730:               options.tool_choice,",
          "731:             ],",
          "732:           },",
          "733:         };",
          "734:       }",
          "736:       if (!options.tool_choice && options.allowedFunctionNames) {",
          "737:         toolConfig = {",
          "738:           functionCallingConfig: {",
          "739:             mode: FunctionCallingMode.ANY,",
          "740:             allowedFunctionNames: options.allowedFunctionNames,",
          "741:           },",
          "742:         };",
          "743:       }",
          "744:     }",
          "747:       tools: genaiTools,",
          "748:       toolConfig,",
          "",
          "[Added Lines]",
          "681:     return this.bind({ tools: convertToolsToGenAI(tools)?.tools, ...kwargs });",
          "687:     const toolsAndConfig = options?.tools?.length",
          "688:       ? convertToolsToGenAI(options.tools, {",
          "689:           toolChoice: options.tool_choice,",
          "690:           allowedFunctionNames: options.allowedFunctionNames,",
          "691:         })",
          "692:       : undefined;",
          "695:       ...(toolsAndConfig?.tools ? { tools: toolsAndConfig.tools } : {}),",
          "696:       ...(toolsAndConfig?.toolConfig",
          "697:         ? { toolConfig: toolsAndConfig.toolConfig }",
          "698:         : {}),",
          "",
          "---------------"
        ],
        "libs/langchain-google-genai/src/tests/chat_models.int.test.ts||libs/langchain-google-genai/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-google-genai/src/tests/chat_models.int.test.ts -> libs/langchain-google-genai/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: } from \"@langchain/core/prompts\";",
          "18: import { StructuredTool } from \"@langchain/core/tools\";",
          "19: import { z } from \"zod\";",
          "21: import { ChatGoogleGenerativeAI } from \"../chat_models.js\";",
          "",
          "[Removed Lines]",
          "20: import { FunctionDeclarationSchemaType } from \"@google/generative-ai\";",
          "",
          "[Added Lines]",
          "20: import {",
          "21:   CodeExecutionTool,",
          "22:   DynamicRetrievalMode,",
          "23:   SchemaType as FunctionDeclarationSchemaType,",
          "24:   GoogleSearchRetrievalTool,",
          "25: } from \"@google/generative-ai\";",
          "26: import { concat } from \"@langchain/core/utils/stream\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:   );",
          "568:   expect(response.tool_calls?.length).toBe(1);",
          "569: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: describe(\"GoogleSearchRetrievalTool\", () => {",
          "578:   test(\"Supports GoogleSearchRetrievalTool\", async () => {",
          "579:     const searchRetrievalTool: GoogleSearchRetrievalTool = {",
          "580:       googleSearchRetrieval: {",
          "581:         dynamicRetrievalConfig: {",
          "582:           mode: DynamicRetrievalMode.MODE_DYNAMIC,",
          "583:           dynamicThreshold: 0.7, // default is 0.7",
          "584:         },",
          "585:       },",
          "586:     };",
          "587:     const model = new ChatGoogleGenerativeAI({",
          "588:       model: \"gemini-1.5-pro\",",
          "589:       temperature: 0,",
          "590:       maxRetries: 0,",
          "591:     }).bindTools([searchRetrievalTool]);",
          "593:     const result = await model.invoke(\"Who won the 2024 MLB World Series?\");",
          "595:     expect(result.response_metadata?.groundingMetadata).toBeDefined();",
          "596:     expect(result.content as string).toContain(\"Dodgers\");",
          "597:   });",
          "599:   test(\"Can stream GoogleSearchRetrievalTool\", async () => {",
          "600:     const searchRetrievalTool: GoogleSearchRetrievalTool = {",
          "601:       googleSearchRetrieval: {",
          "602:         dynamicRetrievalConfig: {",
          "603:           mode: DynamicRetrievalMode.MODE_DYNAMIC,",
          "604:           dynamicThreshold: 0.7, // default is 0.7",
          "605:         },",
          "606:       },",
          "607:     };",
          "608:     const model = new ChatGoogleGenerativeAI({",
          "609:       model: \"gemini-1.5-pro\",",
          "610:       temperature: 0,",
          "611:       maxRetries: 0,",
          "612:     }).bindTools([searchRetrievalTool]);",
          "614:     const stream = await model.stream(\"Who won the 2024 MLB World Series?\");",
          "615:     let finalMsg: AIMessageChunk | undefined;",
          "616:     for await (const msg of stream) {",
          "617:       finalMsg = finalMsg ? concat(finalMsg, msg) : msg;",
          "618:     }",
          "619:     if (!finalMsg) {",
          "620:       throw new Error(\"finalMsg is undefined\");",
          "621:     }",
          "622:     expect(finalMsg.response_metadata?.groundingMetadata).toBeDefined();",
          "623:     expect(finalMsg.content as string).toContain(\"Dodgers\");",
          "624:   });",
          "625: });",
          "627: describe(\"CodeExecutionTool\", () => {",
          "628:   test(\"Supports CodeExecutionTool\", async () => {",
          "629:     const codeExecutionTool: CodeExecutionTool = {",
          "630:       codeExecution: {}, // Simply pass an empty object to enable it.",
          "631:     };",
          "632:     const model = new ChatGoogleGenerativeAI({",
          "633:       model: \"gemini-1.5-pro\",",
          "634:       temperature: 0,",
          "635:       maxRetries: 0,",
          "636:     }).bindTools([codeExecutionTool]);",
          "638:     const result = await model.invoke(",
          "639:       \"Use code execution to find the sum of the first and last 3 numbers in the following list: [1, 2, 3, 72638, 8, 727, 4, 5, 6]\"",
          "640:     );",
          "642:     expect(Array.isArray(result.content)).toBeTruthy();",
          "643:     if (!Array.isArray(result.content)) {",
          "644:       throw new Error(\"Content is not an array\");",
          "645:     }",
          "646:     const texts = result.content",
          "647:       .flatMap((item) => (\"text\" in item ? [item.text] : []))",
          "648:       .join(\"\\n\");",
          "649:     expect(texts).toContain(\"21\");",
          "651:     const executableCode = result.content.find(",
          "652:       (item) => item.type === \"executableCode\"",
          "653:     );",
          "654:     expect(executableCode).toBeDefined();",
          "655:     const codeResult = result.content.find(",
          "656:       (item) => item.type === \"codeExecutionResult\"",
          "657:     );",
          "658:     expect(codeResult).toBeDefined();",
          "659:   });",
          "661:   test(\"CodeExecutionTool contents can be passed in chat history\", async () => {",
          "662:     const codeExecutionTool: CodeExecutionTool = {",
          "663:       codeExecution: {}, // Simply pass an empty object to enable it.",
          "664:     };",
          "665:     const model = new ChatGoogleGenerativeAI({",
          "666:       model: \"gemini-1.5-pro\",",
          "667:       temperature: 0,",
          "668:       maxRetries: 0,",
          "669:     }).bindTools([codeExecutionTool]);",
          "671:     const codeResult = await model.invoke(",
          "672:       \"Use code execution to find the sum of the first and last 3 numbers in the following list: [1, 2, 3, 72638, 8, 727, 4, 5, 6]\"",
          "673:     );",
          "675:     const explanation = await model.invoke([",
          "676:       codeResult,",
          "677:       {",
          "678:         role: \"user\",",
          "679:         content:",
          "680:           \"Please explain the question I asked, the code you wrote, and the answer you got.\",",
          "681:       },",
          "682:     ]);",
          "684:     expect(typeof explanation.content).toBe(\"string\");",
          "685:     expect(explanation.content.length).toBeGreaterThan(10);",
          "686:   });",
          "688:   test(\"Can stream CodeExecutionTool\", async () => {",
          "689:     const codeExecutionTool: CodeExecutionTool = {",
          "690:       codeExecution: {}, // Simply pass an empty object to enable it.",
          "691:     };",
          "692:     const model = new ChatGoogleGenerativeAI({",
          "693:       model: \"gemini-1.5-pro\",",
          "694:       temperature: 0,",
          "695:       maxRetries: 0,",
          "696:     }).bindTools([codeExecutionTool]);",
          "698:     const stream = await model.stream(",
          "699:       \"Use code execution to find the sum of the first and last 3 numbers in the following list: [1, 2, 3, 72638, 8, 727, 4, 5, 6]\"",
          "700:     );",
          "701:     let finalMsg: AIMessageChunk | undefined;",
          "702:     for await (const msg of stream) {",
          "703:       finalMsg = finalMsg ? concat(finalMsg, msg) : msg;",
          "704:     }",
          "706:     if (!finalMsg) {",
          "707:       throw new Error(\"finalMsg is undefined\");",
          "708:     }",
          "709:     expect(Array.isArray(finalMsg.content)).toBeTruthy();",
          "710:     if (!Array.isArray(finalMsg.content)) {",
          "711:       throw new Error(\"Content is not an array\");",
          "712:     }",
          "713:     const texts = finalMsg.content",
          "714:       .flatMap((item) => (\"text\" in item ? [item.text] : []))",
          "715:       .join(\"\\n\");",
          "716:     expect(texts).toContain(\"21\");",
          "718:     const executableCode = finalMsg.content.find(",
          "719:       (item) => item.type === \"executableCode\"",
          "720:     );",
          "721:     expect(executableCode).toBeDefined();",
          "722:     const codeResult = finalMsg.content.find(",
          "723:       (item) => item.type === \"codeExecutionResult\"",
          "724:     );",
          "725:     expect(codeResult).toBeDefined();",
          "726:   });",
          "727: });",
          "",
          "---------------"
        ],
        "libs/langchain-google-genai/src/types.ts||libs/langchain-google-genai/src/types.ts": [
          "File: libs/langchain-google-genai/src/types.ts -> libs/langchain-google-genai/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { BindToolsInput } from \"@langchain/core/language_models/chat_models\";",
          "4: export type GoogleGenerativeAIToolType =",
          "5:   | BindToolsInput",
          "",
          "[Removed Lines]",
          "1: import { FunctionDeclarationsTool as GoogleGenerativeAIFunctionDeclarationsTool } from \"@google/generative-ai\";",
          "6:   | GoogleGenerativeAIFunctionDeclarationsTool;",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   CodeExecutionTool,",
          "3:   FunctionDeclarationsTool as GoogleGenerativeAIFunctionDeclarationsTool,",
          "4:   GoogleSearchRetrievalTool,",
          "5: } from \"@google/generative-ai\";",
          "10:   | GoogleGenerativeAIFunctionDeclarationsTool",
          "11:   | CodeExecutionTool",
          "12:   | GoogleSearchRetrievalTool;",
          "",
          "---------------"
        ],
        "libs/langchain-google-genai/src/utils/common.ts||libs/langchain-google-genai/src/utils/common.ts": [
          "File: libs/langchain-google-genai/src/utils/common.ts -> libs/langchain-google-genai/src/utils/common.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   AIMessageChunk,",
          "14:   BaseMessage,",
          "15:   ChatMessage,",
          "16:   MessageContentComplex,",
          "17:   UsageMetadata,",
          "18:   isBaseMessage,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:   MessageContent,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         args: tc.args,",
          "107:       },",
          "108:     }));",
          "110:     functionResponses = [",
          "111:       {",
          "112:         functionResponse: {",
          "",
          "[Removed Lines]",
          "109:   } else if (message._getType() === \"tool\" && message.name && message.content) {",
          "",
          "[Added Lines]",
          "110:   } else if (message.getType() === \"tool\" && message.name && message.content) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         return {",
          "122:           text: c.text,",
          "123:         };",
          "124:       }",
          "126:       if (c.type === \"image_url\") {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:       } else if (c.type === \"executableCode\") {",
          "126:         return {",
          "127:           executableCode: c.executableCode,",
          "128:         };",
          "129:       } else if (c.type === \"codeExecutionResult\") {",
          "130:         return {",
          "131:           codeExecutionResult: c.codeExecutionResult,",
          "132:         };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "254:   const functionCalls = response.functionCalls();",
          "255:   const [candidate] = response.candidates;",
          "259:   const generation: ChatGeneration = {",
          "260:     text,",
          "261:     message: new AIMessage({",
          "263:       tool_calls: functionCalls?.map((fc) => ({",
          "264:         ...fc,",
          "265:         type: \"tool_call\",",
          "",
          "[Removed Lines]",
          "256:   const { content, ...generationInfo } = candidate;",
          "257:   const text = content?.parts[0]?.text ?? \"\";",
          "262:       content: text,",
          "",
          "[Added Lines]",
          "265:   const { content: candidateContent, ...generationInfo } = candidate;",
          "266:   let content: MessageContent;",
          "267:   if (candidateContent?.parts.length === 1 && candidateContent.parts[0].text) {",
          "268:     content = candidateContent.parts[0].text;",
          "269:   } else {",
          "270:     content = candidateContent.parts.map((p) => {",
          "271:       if (\"text\" in p) {",
          "272:         return {",
          "273:           type: \"text\",",
          "274:           text: p.text,",
          "275:         };",
          "276:       } else if (\"executableCode\" in p) {",
          "277:         return {",
          "278:           type: \"executableCode\",",
          "279:           executableCode: p.executableCode,",
          "280:         };",
          "281:       } else if (\"codeExecutionResult\" in p) {",
          "282:         return {",
          "283:           type: \"codeExecutionResult\",",
          "284:           codeExecutionResult: p.codeExecutionResult,",
          "285:         };",
          "286:       }",
          "287:       return p;",
          "288:     });",
          "289:   }",
          "291:   let text = \"\";",
          "292:   if (typeof content === \"string\") {",
          "293:     text = content;",
          "294:   } else if (\"text\" in content[0]) {",
          "295:     text = content[0].text;",
          "296:   }",
          "301:       content,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:   }",
          "290:   const functionCalls = response.functionCalls();",
          "291:   const [candidate] = response.candidates;",
          "295:   const toolCallChunks: ToolCallChunk[] = [];",
          "296:   if (functionCalls) {",
          "",
          "[Removed Lines]",
          "292:   const { content, ...generationInfo } = candidate;",
          "293:   const text = content?.parts?.[0]?.text ?? \"\";",
          "",
          "[Added Lines]",
          "331:   const { content: candidateContent, ...generationInfo } = candidate;",
          "332:   let content: MessageContent | undefined;",
          "334:   if (",
          "335:     candidateContent?.parts &&",
          "336:     candidateContent.parts.every((p) => \"text\" in p)",
          "337:   ) {",
          "338:     content = candidateContent.parts.map((p) => p.text).join(\"\");",
          "339:   } else if (candidateContent.parts) {",
          "340:     content = candidateContent.parts.map((p) => {",
          "341:       if (\"text\" in p) {",
          "342:         return {",
          "343:           type: \"text\",",
          "344:           text: p.text,",
          "345:         };",
          "346:       } else if (\"executableCode\" in p) {",
          "347:         return {",
          "348:           type: \"executableCode\",",
          "349:           executableCode: p.executableCode,",
          "350:         };",
          "351:       } else if (\"codeExecutionResult\" in p) {",
          "352:         return {",
          "353:           type: \"codeExecutionResult\",",
          "354:           codeExecutionResult: p.codeExecutionResult,",
          "355:         };",
          "356:       }",
          "357:       return p;",
          "358:     });",
          "359:   }",
          "361:   let text = \"\";",
          "362:   if (content && typeof content === \"string\") {",
          "363:     text = content;",
          "364:   } else if (content && typeof content === \"object\" && \"text\" in content[0]) {",
          "365:     text = content[0].text;",
          "366:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "303:       }))",
          "304:     );",
          "305:   }",
          "306:   return new ChatGenerationChunk({",
          "307:     text,",
          "308:     message: new AIMessageChunk({",
          "311:       tool_call_chunks: toolCallChunks,",
          "",
          "[Removed Lines]",
          "309:       content: text,",
          "310:       name: !content ? undefined : content.role,",
          "",
          "[Added Lines]",
          "383:       content: content || \"\",",
          "384:       name: !candidateContent ? undefined : candidateContent.role,",
          "",
          "---------------"
        ],
        "libs/langchain-google-genai/src/utils/tools.ts||libs/langchain-google-genai/src/utils/tools.ts": [
          "File: libs/langchain-google-genai/src/utils/tools.ts -> libs/langchain-google-genai/src/utils/tools.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   Tool as GenerativeAITool,",
          "3:   ToolConfig,",
          "4:   FunctionCallingMode,",
          "5:   FunctionDeclaration,",
          "6: } from \"@google/generative-ai\";",
          "7: import { ToolChoice } from \"@langchain/core/language_models/chat_models\";",
          "8: import { StructuredToolInterface } from \"@langchain/core/tools\";",
          "9: import { isLangChainTool } from \"@langchain/core/utils/function_calling\";",
          "10: import { convertToGenerativeAITools } from \"./common.js\";",
          "11: import { GoogleGenerativeAIToolType } from \"../types.js\";",
          "13: export function convertToolsToGenAI(",
          "14:   tools: GoogleGenerativeAIToolType[],",
          "15:   extra?: {",
          "16:     toolChoice?: ToolChoice;",
          "17:     allowedFunctionNames?: string[];",
          "18:   }",
          "19: ): {",
          "20:   tools: GenerativeAITool[];",
          "21:   toolConfig?: ToolConfig;",
          "22: } {",
          "24:   const genAITools = processTools(tools);",
          "27:   const toolConfig = createToolConfig(genAITools, extra);",
          "29:   return { tools: genAITools, toolConfig };",
          "30: }",
          "32: function processTools(tools: GoogleGenerativeAIToolType[]): GenerativeAITool[] {",
          "33:   let functionDeclarationTools: FunctionDeclaration[] = [];",
          "34:   const genAITools: GenerativeAITool[] = [];",
          "36:   tools.forEach((tool) => {",
          "37:     if (isLangChainTool(tool)) {",
          "38:       const [convertedTool] = convertToGenerativeAITools([",
          "39:         tool as StructuredToolInterface,",
          "40:       ]);",
          "41:       if (convertedTool.functionDeclarations) {",
          "42:         functionDeclarationTools.push(...convertedTool.functionDeclarations);",
          "43:       }",
          "44:     } else {",
          "45:       genAITools.push(tool as GenerativeAITool);",
          "46:     }",
          "47:   });",
          "49:   const genAIFunctionDeclaration = genAITools.find(",
          "50:     (t) => \"functionDeclarations\" in t",
          "51:   );",
          "52:   if (genAIFunctionDeclaration) {",
          "53:     return genAITools.map((tool) => {",
          "54:       if (",
          "55:         functionDeclarationTools?.length > 0 &&",
          "56:         \"functionDeclarations\" in tool",
          "57:       ) {",
          "58:         const newTool = {",
          "59:           functionDeclarations: [",
          "60:             ...(tool.functionDeclarations || []),",
          "61:             ...functionDeclarationTools,",
          "62:           ],",
          "63:         };",
          "65:         functionDeclarationTools = [];",
          "66:         return newTool;",
          "67:       }",
          "68:       return tool;",
          "69:     });",
          "70:   }",
          "72:   return [",
          "73:     ...genAITools,",
          "74:     ...(functionDeclarationTools.length > 0",
          "75:       ? [",
          "76:           {",
          "77:             functionDeclarations: functionDeclarationTools,",
          "78:           },",
          "79:         ]",
          "80:       : []),",
          "81:   ];",
          "82: }",
          "84: function createToolConfig(",
          "85:   genAITools: GenerativeAITool[],",
          "86:   extra?: {",
          "87:     toolChoice?: ToolChoice;",
          "88:     allowedFunctionNames?: string[];",
          "89:   }",
          "90: ): ToolConfig | undefined {",
          "91:   if (!genAITools.length || !extra) return undefined;",
          "93:   const { toolChoice, allowedFunctionNames } = extra;",
          "95:   const modeMap: Record<string, FunctionCallingMode> = {",
          "96:     any: FunctionCallingMode.ANY,",
          "97:     auto: FunctionCallingMode.AUTO,",
          "98:     none: FunctionCallingMode.NONE,",
          "99:   };",
          "101:   if (toolChoice && [\"any\", \"auto\", \"none\"].includes(toolChoice as string)) {",
          "102:     return {",
          "103:       functionCallingConfig: {",
          "104:         mode: modeMap[toolChoice as keyof typeof modeMap] ?? \"MODE_UNSPECIFIED\",",
          "105:         allowedFunctionNames,",
          "106:       },",
          "107:     };",
          "108:   }",
          "110:   if (typeof toolChoice === \"string\" || allowedFunctionNames) {",
          "111:     return {",
          "112:       functionCallingConfig: {",
          "113:         mode: FunctionCallingMode.ANY,",
          "114:         allowedFunctionNames: [",
          "115:           ...(allowedFunctionNames ?? []),",
          "116:           ...(toolChoice && typeof toolChoice === \"string\" ? [toolChoice] : []),",
          "117:         ],",
          "118:       },",
          "119:     };",
          "120:   }",
          "122:   return undefined;",
          "123: }",
          "",
          "---------------"
        ],
        "libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts||libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts": [
          "File: libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts -> libs/langchain-google-genai/src/utils/zod_to_genai_parameters.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { zodToJsonSchema } from \"zod-to-json-schema\";",
          "5: import {",
          "6:   type FunctionDeclarationSchema as GenerativeAIFunctionDeclarationSchema,",
          "8: } from \"@google/generative-ai\";",
          "10: export interface GenerativeAIJsonSchema extends Record<string, unknown> {",
          "",
          "[Removed Lines]",
          "7:   FunctionDeclarationSchemaType,",
          "",
          "[Added Lines]",
          "7:   type SchemaType as FunctionDeclarationSchemaType,",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "10306:   languageName: node",
          "10307:   linkType: hard",
          "10309: \"@google/generative-ai@npm:^0.7.0\":",
          "10310:   version: 0.7.1",
          "10311:   resolution: \"@google/generative-ai@npm:0.7.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10309: \"@google/generative-ai@npm:^0.21.0\":",
          "10310:   version: 0.21.0",
          "10311:   resolution: \"@google/generative-ai@npm:0.21.0\"",
          "10312:   checksum: 91345a8399b5e71382193d0eac47a4b264613a9d7e48a431290b523e3fbb44a207a33bdead304f181987e5a0127a84168c4e21cf461c1087cd3b0ebc5125d13d",
          "10313:   languageName: node",
          "10314:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12140:   version: 0.0.0-use.local",
          "12141:   resolution: \"@langchain/google-genai@workspace:libs/langchain-google-genai\"",
          "12142:   dependencies:",
          "12144:     \"@jest/globals\": ^29.5.0",
          "12145:     \"@langchain/core\": \"workspace:*\"",
          "12146:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "",
          "[Removed Lines]",
          "12143:     \"@google/generative-ai\": ^0.7.0",
          "",
          "[Added Lines]",
          "12150:     \"@google/generative-ai\": ^0.21.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6997cb7d78b681809c7518383bfe096ba392ce4f",
      "candidate_info": {
        "commit_hash": "6997cb7d78b681809c7518383bfe096ba392ce4f",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/6997cb7d78b681809c7518383bfe096ba392ce4f",
        "files": [
          "examples/package.json",
          "langchain-core/package.json",
          "langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "langchain-core/src/tracers/tracer_langchain.ts",
          "langchain/package.json",
          "libs/langchain-community/package.json",
          "yarn.lock"
        ],
        "message": "feat(core,langchain,community): Bump to LangSmith 0.2.0 (#7058)",
        "before_after_code_files": [
          "langchain-core/src/tracers/tests/langsmith_interop.test.ts||langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "langchain-core/src/tracers/tracer_langchain.ts||langchain-core/src/tracers/tracer_langchain.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain-core/src/tracers/tests/langsmith_interop.test.ts||langchain-core/src/tracers/tests/langsmith_interop.test.ts": [
          "File: langchain-core/src/tracers/tests/langsmith_interop.test.ts -> langchain-core/src/tracers/tests/langsmith_interop.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: const originalTracingEnvValue = process.env.LANGCHAIN_TRACING_V2;",
          "22: beforeEach(() => {",
          "28:   process.env.LANGCHAIN_TRACING_V2 = \"true\";",
          "29: });",
          "",
          "[Removed Lines]",
          "23:   fetchMock = jest",
          "24:     .spyOn(global, \"fetch\")",
          "25:     .mockImplementation(() =>",
          "26:       Promise.resolve({ ok: true, text: () => \"\" } as any)",
          "27:     );",
          "",
          "[Added Lines]",
          "23:   fetchMock = jest.spyOn(global, \"fetch\").mockImplementation(() =>",
          "24:     Promise.resolve({",
          "25:       ok: true,",
          "26:       text: () => \"\",",
          "27:       json: () => {",
          "28:         return {};",
          "29:       },",
          "30:     } as any)",
          "31:   );",
          "",
          "---------------"
        ],
        "langchain-core/src/tracers/tracer_langchain.ts||langchain-core/src/tracers/tracer_langchain.ts": [
          "File: langchain-core/src/tracers/tracer_langchain.ts -> langchain-core/src/tracers/tracer_langchain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:       getEnvironmentVariable(\"LANGCHAIN_PROJECT\") ??",
          "60:       getEnvironmentVariable(\"LANGCHAIN_SESSION\");",
          "61:     this.exampleId = exampleId;",
          "64:     const traceableTree = LangChainTracer.getTraceableRunTree();",
          "65:     if (traceableTree) {",
          "",
          "[Removed Lines]",
          "62:     this.client = client ?? new Client({});",
          "",
          "[Added Lines]",
          "62:     this.client =",
          "63:       client ??",
          "64:       new Client({",
          "66:         blockOnRootRunFinalization: true,",
          "67:       });",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11583:     jsdom: ^22.1.0",
          "11584:     jsonwebtoken: ^9.0.2",
          "11585:     langchain: \">=0.2.3 <0.4.0\"",
          "11587:     llmonitor: ^0.5.9",
          "11588:     lodash: ^4.17.21",
          "11589:     lunary: ^0.7.10",
          "",
          "[Removed Lines]",
          "11586:     langsmith: ~0.1.56",
          "",
          "[Added Lines]",
          "11586:     langsmith: ^0.2.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12015:     jest: ^29.5.0",
          "12016:     jest-environment-node: ^29.6.4",
          "12017:     js-tiktoken: ^1.0.12",
          "12019:     ml-matrix: ^6.10.4",
          "12020:     mustache: ^4.2.0",
          "12021:     p-queue: ^6.6.2",
          "",
          "[Removed Lines]",
          "12018:     langsmith: ^0.1.65",
          "",
          "[Added Lines]",
          "12018:     langsmith: ^0.2.0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27338:     ioredis: ^5.3.2",
          "27339:     js-yaml: ^4.1.0",
          "27340:     langchain: \"workspace:*\"",
          "27342:     mongodb: ^6.3.0",
          "27343:     pg: ^8.11.0",
          "27344:     pickleparser: ^0.2.1",
          "",
          "[Removed Lines]",
          "27341:     langsmith: ^0.1.56",
          "",
          "[Added Lines]",
          "27341:     langsmith: ^0.2.0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "32921:     js-tiktoken: ^1.0.12",
          "32922:     js-yaml: ^4.1.0",
          "32923:     jsonpointer: ^5.0.1",
          "32925:     openai: ^4.41.1",
          "32926:     openapi-types: ^12.1.3",
          "32927:     p-retry: 4",
          "",
          "[Removed Lines]",
          "32924:     langsmith: ^0.1.56",
          "",
          "[Added Lines]",
          "32924:     langsmith: ^0.2.0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "33000:   languageName: unknown",
          "33001:   linkType: soft",
          "33025:   dependencies:",
          "33026:     \"@types/uuid\": ^10.0.0",
          "33027:     commander: ^10.0.1",
          "",
          "[Removed Lines]",
          "33003: \"langsmith@npm:^0.1.56, langsmith@npm:~0.1.56\":",
          "33004:   version: 0.1.56",
          "33005:   resolution: \"langsmith@npm:0.1.56\"",
          "33006:   dependencies:",
          "33007:     \"@types/uuid\": ^10.0.0",
          "33008:     commander: ^10.0.1",
          "33009:     p-queue: ^6.6.2",
          "33010:     p-retry: 4",
          "33011:     semver: ^7.6.3",
          "33012:     uuid: ^10.0.0",
          "33013:   peerDependencies:",
          "33014:     openai: \"*\"",
          "33015:   peerDependenciesMeta:",
          "33016:     openai:",
          "33017:       optional: true",
          "33018:   checksum: 61db6dc3016e35d14d25e78a8ecebcc6356f2efc00310f5582dce9d28a88377525425622d1b98f053e73c0b3233d44c5a2f9d5654ca72ee2e61163edd5be2d28",
          "33019:   languageName: node",
          "33020:   linkType: hard",
          "33022: \"langsmith@npm:^0.1.65\":",
          "33023:   version: 0.1.65",
          "33024:   resolution: \"langsmith@npm:0.1.65\"",
          "",
          "[Added Lines]",
          "33003: \"langsmith@npm:^0.2.0\":",
          "33004:   version: 0.2.0",
          "33005:   resolution: \"langsmith@npm:0.2.0\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "33034:   peerDependenciesMeta:",
          "33035:     openai:",
          "33036:       optional: true",
          "33038:   languageName: node",
          "33039:   linkType: hard",
          "",
          "[Removed Lines]",
          "33037:   checksum: ca44f26733fbb20675b84f2586b90622b8cf1aedc82123f5574af04e88ba29348e28b2b63f410479aeb7e5c174d2fef13b4bd9eb68581d93a104950b1fafa40f",
          "",
          "[Added Lines]",
          "33018:   checksum: 0cd92d0e31526d309af197a3502c93a00ac8c09f6b2864161a18a5c1e8b95b0e8203bad2dfe3b4beb26055fc815a8d70730592a58c9af7e202917b13d01f695c",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4dd136e8eeace7d85b2595966e75a482b0daa6f",
      "candidate_info": {
        "commit_hash": "d4dd136e8eeace7d85b2595966e75a482b0daa6f",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/d4dd136e8eeace7d85b2595966e75a482b0daa6f",
        "files": [
          "libs/langchain-openai/package.json",
          "libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "yarn.lock"
        ],
        "message": "release(openai): 0.3.17 (#7508)",
        "before_after_code_files": [
          "libs/langchain-openai/src/tests/chat_models.int.test.ts||libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-openai/src/tests/chat_models.int.test.ts||libs/langchain-openai/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-openai/src/tests/chat_models.int.test.ts -> libs/langchain-openai/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "977:   expect(finalChunk?.id?.startsWith(\"chatcmpl-\")).toBe(true);",
          "978: });",
          "991: describe(\"Audio output\", () => {",
          "992:   test(\"Audio output\", async () => {",
          "993:     const model = new ChatOpenAI({",
          "",
          "[Removed Lines]",
          "980: test(\"Test ChatOpenAI stream method\", async () => {",
          "981:   const model = new ChatOpenAI({ model: \"o1-mini\" });",
          "982:   const stream = await model.stream(\"Print hello world.\");",
          "983:   const chunks = [];",
          "984:   for await (const chunk of stream) {",
          "985:     console.log(chunk);",
          "986:     chunks.push(chunk);",
          "987:   }",
          "988:   expect(chunks.length).toEqual(1);",
          "989: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12999:     zod: ^3.22.4",
          "13000:     zod-to-json-schema: ^3.22.3",
          "13001:   peerDependencies:",
          "13003:   languageName: unknown",
          "13004:   linkType: soft",
          "",
          "[Removed Lines]",
          "13002:     \"@langchain/core\": \">=0.2.26 <0.4.0\"",
          "",
          "[Added Lines]",
          "13002:     \"@langchain/core\": \">=0.3.29 <0.4.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bddcc285b723b7743428583acca339b47c1a3fa",
      "candidate_info": {
        "commit_hash": "8bddcc285b723b7743428583acca339b47c1a3fa",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/8bddcc285b723b7743428583acca339b47c1a3fa",
        "files": [
          "langchain/package.json",
          "langchain/src/chat_models/universal.ts",
          "yarn.lock"
        ],
        "message": "feat: Add google-vertexai-web to initChatModel (#7473)",
        "before_after_code_files": [
          "langchain/src/chat_models/universal.ts||langchain/src/chat_models/universal.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain/src/chat_models/universal.ts||langchain/src/chat_models/universal.ts": [
          "File: langchain/src/chat_models/universal.ts -> langchain/src/chat_models/universal.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   \"azure_openai\",",
          "41:   \"cohere\",",
          "42:   \"google-vertexai\",",
          "43:   \"google-genai\",",
          "44:   \"ollama\",",
          "45:   \"together\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   \"google-vertexai-web\",",
          "44:   \"google-genai\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         const { ChatVertexAI } = await import(\"@langchain/google-vertexai\");",
          "98:         return new ChatVertexAI({ model, ...passedParams });",
          "99:       }",
          "100:       case \"google-genai\": {",
          "101:         const { ChatGoogleGenerativeAI } = await import(",
          "102:           \"@langchain/google-genai\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:       case \"google-vertexai-web\": {",
          "103:         const { ChatVertexAI } = await import(\"@langchain/google-vertexai-web\");",
          "104:         return new ChatVertexAI({ model, ...passedParams });",
          "105:       }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12603:   languageName: unknown",
          "12604:   linkType: soft",
          "12607:   version: 0.0.0-use.local",
          "12608:   resolution: \"@langchain/google-vertexai-web@workspace:libs/langchain-google-vertexai-web\"",
          "12609:   dependencies:",
          "",
          "[Removed Lines]",
          "12606: \"@langchain/google-vertexai-web@workspace:*, @langchain/google-vertexai-web@workspace:libs/langchain-google-vertexai-web\":",
          "",
          "[Added Lines]",
          "12606: \"@langchain/google-vertexai-web@*, @langchain/google-vertexai-web@workspace:*, @langchain/google-vertexai-web@workspace:libs/langchain-google-vertexai-web\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33433:     \"@langchain/core\": \"workspace:*\"",
          "33434:     \"@langchain/google-genai\": \"*\"",
          "33435:     \"@langchain/google-vertexai\": \"*\"",
          "33436:     \"@langchain/groq\": \"*\"",
          "33437:     \"@langchain/mistralai\": \"*\"",
          "33438:     \"@langchain/ollama\": \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33436:     \"@langchain/google-vertexai-web\": \"*\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33492:     \"@langchain/core\": \">=0.2.21 <0.4.0\"",
          "33493:     \"@langchain/google-genai\": \"*\"",
          "33494:     \"@langchain/google-vertexai\": \"*\"",
          "33495:     \"@langchain/groq\": \"*\"",
          "33496:     \"@langchain/mistralai\": \"*\"",
          "33497:     \"@langchain/ollama\": \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33496:     \"@langchain/google-vertexai-web\": \"*\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "33513:       optional: true",
          "33514:     \"@langchain/google-vertexai\":",
          "33515:       optional: true",
          "33516:     \"@langchain/groq\":",
          "33517:       optional: true",
          "33518:     \"@langchain/mistralai\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33518:     \"@langchain/google-vertexai-web\":",
          "33519:       optional: true",
          "",
          "---------------"
        ]
      }
    }
  ]
}