{
  "cve_id": "CVE-2024-24557",
  "cve_desc": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
  "repo": "moby/moby",
  "patch_hash": "3e230cfdcc989dc524882f6579f9e0dac77400ae",
  "patch_info": {
    "commit_hash": "3e230cfdcc989dc524882f6579f9e0dac77400ae",
    "repo": "moby/moby",
    "commit_url": "https://github.com/moby/moby/commit/3e230cfdcc989dc524882f6579f9e0dac77400ae",
    "files": [
      "builder/builder.go",
      "builder/dockerfile/copy.go",
      "builder/dockerfile/dispatchers.go",
      "builder/dockerfile/imageprobe.go",
      "builder/dockerfile/internals.go",
      "builder/dockerfile/mockbackend_test.go",
      "daemon/containerd/cache.go",
      "daemon/images/image_builder.go",
      "daemon/images/image_commit.go",
      "image/cache/cache.go",
      "image/cache/compare.go",
      "image/store.go"
    ],
    "message": "Merge pull request from GHSA-xw73-rw38-6vjc\n\nimage/cache: Restrict cache candidates to locally built images",
    "before_after_code_files": [
      "builder/builder.go||builder/builder.go",
      "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
      "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
      "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
      "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
      "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
      "daemon/containerd/cache.go||daemon/containerd/cache.go",
      "daemon/images/image_builder.go||daemon/images/image_builder.go",
      "daemon/images/image_commit.go||daemon/images/image_commit.go",
      "image/cache/cache.go||image/cache/cache.go",
      "image/cache/compare.go||image/cache/compare.go",
      "image/store.go||image/store.go"
    ]
  },
  "patch_diff": {
    "builder/builder.go||builder/builder.go": [
      "File: builder/builder.go -> builder/builder.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:  \"github.com/docker/docker/image\"",
      "15:  \"github.com/docker/docker/layer\"",
      "16:  \"github.com/opencontainers/go-digest\"",
      "17: )",
      "19: const (",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85: type ImageCache interface {",
      "89: }",
      "",
      "[Removed Lines]",
      "88:  GetCache(parentID string, cfg *container.Config) (imageID string, err error)",
      "",
      "[Added Lines]",
      "89:  GetCache(parentID string, cfg *container.Config, platform ocispec.Platform) (imageID string, err error)",
      "",
      "---------------"
    ],
    "builder/dockerfile/copy.go||builder/dockerfile/copy.go": [
      "File: builder/dockerfile/copy.go -> builder/dockerfile/copy.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"net/url\"",
      "9:  \"os\"",
      "10:  \"path/filepath\"",
      "12:  \"sort\"",
      "13:  \"strings\"",
      "14:  \"time\"",
      "",
      "[Removed Lines]",
      "11:  \"runtime\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  source      builder.Source",
      "75:  pathCache   pathCache",
      "76:  download    sourceDownloader",
      "",
      "[Removed Lines]",
      "77:  platform    *ocispec.Platform",
      "",
      "[Added Lines]",
      "76:  platform    ocispec.Platform",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83: }",
      "85: func copierFromDispatchRequest(req dispatchRequest, download sourceDownloader, imageSource *imageMount) copier {",
      "100:  return copier{",
      "101:   source:      req.source,",
      "",
      "[Removed Lines]",
      "86:  platform := req.builder.platform",
      "87:  if platform == nil {",
      "89:   platform = &ocispec.Platform{}",
      "90:  }",
      "91:  if platform.OS == \"\" {",
      "93:   platform.OS = req.state.operatingSystem",
      "94:  }",
      "95:  if platform.OS == \"\" {",
      "97:   platform.OS = runtime.GOOS",
      "98:  }",
      "",
      "[Added Lines]",
      "85:  platform := req.builder.getPlatform(req.state)",
      "",
      "---------------"
    ],
    "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go": [
      "File: builder/dockerfile/dispatchers.go -> builder/dockerfile/dispatchers.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "348:   saveCmd = prependEnvOnCmd(d.state.buildArgs, buildArgs, cmdFromArgs)",
      "349:  }",
      "351:  runConfigForCacheProbe := copyRunConfig(stateRunConfig,",
      "352:   withCmd(saveCmd),",
      "354:   withEntrypointOverride(saveCmd, nil))",
      "355:  if hit, err := d.builder.probeCache(d.state, runConfigForCacheProbe); err != nil || hit {",
      "356:   return err",
      "",
      "[Removed Lines]",
      "353:   withArgsEscaped(argsEscaped),",
      "",
      "[Added Lines]",
      "351:  cacheArgsEscaped := argsEscaped",
      "354:  if d.state.operatingSystem == \"windows\" {",
      "355:   cacheArgsEscaped = stateRunConfig.ArgsEscaped",
      "356:  }",
      "360:   withArgsEscaped(cacheArgsEscaped),",
      "",
      "---------------"
    ],
    "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go": [
      "File: builder/dockerfile/imageprobe.go -> builder/dockerfile/imageprobe.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  \"github.com/containerd/log\"",
      "7:  \"github.com/docker/docker/api/types/container\"",
      "8:  \"github.com/docker/docker/builder\"",
      "9: )",
      "13: type ImageProber interface {",
      "14:  Reset(ctx context.Context) error",
      "16: }",
      "18: type resetFunc func(context.Context) (builder.ImageCache, error)",
      "",
      "[Removed Lines]",
      "15:  Probe(parentID string, runConfig *container.Config) (string, error)",
      "",
      "[Added Lines]",
      "9:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
      "16:  Probe(parentID string, runConfig *container.Config, platform ocispec.Platform) (string, error)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:  if c.cacheBusted {",
      "56:   return \"\", nil",
      "57:  }",
      "59:  if err != nil {",
      "60:   return \"\", err",
      "61:  }",
      "",
      "[Removed Lines]",
      "54: func (c *imageProber) Probe(parentID string, runConfig *container.Config) (string, error) {",
      "58:  cacheID, err := c.cache.GetCache(parentID, runConfig)",
      "",
      "[Added Lines]",
      "55: func (c *imageProber) Probe(parentID string, runConfig *container.Config, platform ocispec.Platform) (string, error) {",
      "59:  cacheID, err := c.cache.GetCache(parentID, runConfig, platform)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "74:  return nil",
      "75: }",
      "78:  return \"\", nil",
      "79: }",
      "",
      "[Removed Lines]",
      "77: func (c *nopProber) Probe(_ string, _ *container.Config) (string, error) {",
      "",
      "[Added Lines]",
      "78: func (c *nopProber) Probe(_ string, _ *container.Config, _ ocispec.Platform) (string, error) {",
      "",
      "---------------"
    ],
    "builder/dockerfile/internals.go||builder/dockerfile/internals.go": [
      "File: builder/dockerfile/internals.go -> builder/dockerfile/internals.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  \"fmt\"",
      "11:  \"strings\"",
      "13:  \"github.com/containerd/log\"",
      "14:  \"github.com/docker/docker/api/types\"",
      "15:  \"github.com/docker/docker/api/types/backend\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:  \"github.com/containerd/containerd/platforms\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "328: }",
      "330: func (b *Builder) probeCache(dispatchState *dispatchState, runConfig *container.Config) (bool, error) {",
      "332:  if cachedID == \"\" || err != nil {",
      "333:   return false, err",
      "334:  }",
      "",
      "[Removed Lines]",
      "331:  cachedID, err := b.imageProber.Probe(dispatchState.imageID, runConfig)",
      "",
      "[Added Lines]",
      "332:  cachedID, err := b.imageProber.Probe(dispatchState.imageID, runConfig, b.getPlatform(dispatchState))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "388:  }",
      "389:  return hc",
      "390: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "393: func (b *Builder) getPlatform(state *dispatchState) ocispec.Platform {",
      "395:  out := platforms.DefaultSpec()",
      "396:  if b.platform != nil {",
      "397:   out = *b.platform",
      "398:  }",
      "400:  if state.operatingSystem != \"\" {",
      "401:   out.OS = state.operatingSystem",
      "402:  }",
      "404:  return out",
      "405: }",
      "",
      "---------------"
    ],
    "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go": [
      "File: builder/dockerfile/mockbackend_test.go -> builder/dockerfile/mockbackend_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:  \"github.com/docker/docker/image\"",
      "14:  \"github.com/docker/docker/layer\"",
      "15:  \"github.com/opencontainers/go-digest\"",
      "16: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:  getCacheFunc func(parentID string, cfg *container.Config) (string, error)",
      "107: }",
      "110:  if mic.getCacheFunc != nil {",
      "111:   return mic.getCacheFunc(parentID, cfg)",
      "112:  }",
      "",
      "[Removed Lines]",
      "109: func (mic *mockImageCache) GetCache(parentID string, cfg *container.Config) (string, error) {",
      "",
      "[Added Lines]",
      "110: func (mic *mockImageCache) GetCache(parentID string, cfg *container.Config, _ ocispec.Platform) (string, error) {",
      "",
      "---------------"
    ],
    "daemon/containerd/cache.go||daemon/containerd/cache.go": [
      "File: daemon/containerd/cache.go -> daemon/containerd/cache.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  \"github.com/docker/docker/builder\"",
      "12:  \"github.com/docker/docker/errdefs\"",
      "13:  \"github.com/docker/docker/image\"",
      "14:  \"github.com/opencontainers/go-digest\"",
      "15:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
      "16: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14:  \"github.com/docker/docker/image/cache\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:  imageService *ImageService",
      "54: }",
      "57:  ctx := context.TODO()",
      "59:  var children []image.ID",
      "",
      "[Removed Lines]",
      "56: func (ic *localCache) GetCache(parentID string, cfg *container.Config) (imageID string, err error) {",
      "",
      "[Added Lines]",
      "57: func (ic *localCache) GetCache(parentID string, cfg *container.Config, platform ocispec.Platform) (imageID string, err error) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:    return \"\", err",
      "99:   }",
      "103:    if err != nil {",
      "104:     return \"\", err",
      "105:    }",
      "",
      "[Removed Lines]",
      "101:   if isMatch(&cc, cfg) {",
      "102:    childImage, err := ic.imageService.GetImage(ctx, child.String(), backend.GetImageOpts{})",
      "",
      "[Added Lines]",
      "102:   if cache.CompareConfig(&cc, cfg) {",
      "103:    childImage, err := ic.imageService.GetImage(ctx, child.String(), backend.GetImageOpts{Platform: &platform})",
      "105:     if errdefs.IsNotFound(err) {",
      "106:      continue",
      "107:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "123:  lc           *localCache",
      "124: }",
      "127:  ctx := context.TODO()",
      "130:  if err != nil {",
      "131:   return \"\", err",
      "132:  }",
      "",
      "[Removed Lines]",
      "126: func (ic *imageCache) GetCache(parentID string, cfg *container.Config) (imageID string, err error) {",
      "129:  imgID, err := ic.lc.GetCache(parentID, cfg)",
      "",
      "[Added Lines]",
      "130: func (ic *imageCache) GetCache(parentID string, cfg *container.Config, platform ocispec.Platform) (imageID string, err error) {",
      "133:  imgID, err := ic.lc.GetCache(parentID, cfg, platform)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "142:  lenHistory := 0",
      "144:  if parentID != \"\" {",
      "146:   if err != nil {",
      "147:    return \"\", err",
      "148:   }",
      "",
      "[Removed Lines]",
      "145:   parent, err = ic.imageService.GetImage(ctx, parentID, backend.GetImageOpts{})",
      "",
      "[Added Lines]",
      "149:   parent, err = ic.imageService.GetImage(ctx, parentID, backend.GetImageOpts{Platform: &platform})",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "206:  }",
      "207:  return ic.isParent(ctx, p, parentID)",
      "208: }",
      "",
      "[Removed Lines]",
      "212: func isMatch(a, b *container.Config) bool {",
      "213:  if a == nil || b == nil ||",
      "214:   a.OpenStdin || b.OpenStdin {",
      "215:   return false",
      "216:  }",
      "217:  if a.AttachStdout != b.AttachStdout ||",
      "218:   a.AttachStderr != b.AttachStderr ||",
      "219:   a.User != b.User ||",
      "220:   a.OpenStdin != b.OpenStdin ||",
      "221:   a.Tty != b.Tty {",
      "222:   return false",
      "223:  }",
      "225:  if len(a.Cmd) != len(b.Cmd) ||",
      "226:   len(a.Env) != len(b.Env) ||",
      "227:   len(a.Labels) != len(b.Labels) ||",
      "228:   len(a.ExposedPorts) != len(b.ExposedPorts) ||",
      "229:   len(a.Entrypoint) != len(b.Entrypoint) ||",
      "230:   len(a.Volumes) != len(b.Volumes) {",
      "231:   return false",
      "232:  }",
      "234:  for i := 0; i < len(a.Cmd); i++ {",
      "235:   if a.Cmd[i] != b.Cmd[i] {",
      "236:    return false",
      "237:   }",
      "238:  }",
      "239:  for i := 0; i < len(a.Env); i++ {",
      "240:   if a.Env[i] != b.Env[i] {",
      "241:    return false",
      "242:   }",
      "243:  }",
      "244:  for k, v := range a.Labels {",
      "245:   if v != b.Labels[k] {",
      "246:    return false",
      "247:   }",
      "248:  }",
      "249:  for k := range a.ExposedPorts {",
      "250:   if _, exists := b.ExposedPorts[k]; !exists {",
      "251:    return false",
      "252:   }",
      "253:  }",
      "255:  for i := 0; i < len(a.Entrypoint); i++ {",
      "256:   if a.Entrypoint[i] != b.Entrypoint[i] {",
      "257:    return false",
      "258:   }",
      "259:  }",
      "260:  for key := range a.Volumes {",
      "261:   if _, exists := b.Volumes[key]; !exists {",
      "262:    return false",
      "263:   }",
      "264:  }",
      "265:  return true",
      "266: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "daemon/images/image_builder.go||daemon/images/image_builder.go": [
      "File: daemon/images/image_builder.go -> daemon/images/image_builder.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "254:    return nil, errors.Wrapf(err, \"failed to set parent %s\", parent)",
      "255:   }",
      "256:  }",
      "258:  return i.imageStore.Get(id)",
      "259: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257:  if err := i.imageStore.SetBuiltLocally(id); err != nil {",
      "258:   return nil, errors.Wrapf(err, \"failed to mark image %s as built locally\", id)",
      "259:  }",
      "",
      "---------------"
    ],
    "daemon/images/image_commit.go||daemon/images/image_commit.go": [
      "File: daemon/images/image_commit.go -> daemon/images/image_commit.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:  if err != nil {",
      "63:   return \"\", err",
      "64:  }",
      "66:  if c.ParentImageID != \"\" {",
      "67:   if err := i.imageStore.SetParent(id, image.ID(c.ParentImageID)); err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:  if err := i.imageStore.SetBuiltLocally(id); err != nil {",
      "66:   return \"\", err",
      "67:  }",
      "",
      "---------------"
    ],
    "image/cache/cache.go||image/cache/cache.go": [
      "File: image/cache/cache.go -> image/cache/cache.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package cache // import \"github.com/docker/docker/image/cache\"",
      "3: import (",
      "4:  \"encoding/json\"",
      "5:  \"fmt\"",
      "6:  \"reflect\"",
      "7:  \"strings\"",
      "9:  containertypes \"github.com/docker/docker/api/types/container\"",
      "10:  \"github.com/docker/docker/dockerversion\"",
      "11:  \"github.com/docker/docker/image\"",
      "12:  \"github.com/docker/docker/layer\"",
      "13:  \"github.com/pkg/errors\"",
      "14: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:  \"context\"",
      "10:  \"github.com/containerd/containerd/platforms\"",
      "11:  \"github.com/containerd/log\"",
      "16:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26: }",
      "31: }",
      "",
      "[Removed Lines]",
      "29: func (lic *LocalImageCache) GetCache(imgID string, config *containertypes.Config) (string, error) {",
      "30:  return getImageIDAndError(getLocalCachedImage(lic.store, image.ID(imgID), config))",
      "",
      "[Added Lines]",
      "33: func (lic *LocalImageCache) GetCache(imgID string, config *containertypes.Config, platform ocispec.Platform) (string, error) {",
      "34:  return getImageIDAndError(getLocalCachedImage(lic.store, image.ID(imgID), config, platform))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "51: }",
      "56:  if err != nil {",
      "57:   return \"\", err",
      "58:  }",
      "",
      "[Removed Lines]",
      "54: func (ic *ImageCache) GetCache(parentID string, cfg *containertypes.Config) (string, error) {",
      "55:  imgID, err := ic.localImageCache.GetCache(parentID, cfg)",
      "",
      "[Added Lines]",
      "58: func (ic *ImageCache) GetCache(parentID string, cfg *containertypes.Config, platform ocispec.Platform) (string, error) {",
      "59:  imgID, err := ic.localImageCache.GetCache(parentID, cfg, platform)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "220:  getMatch := func(siblings []image.ID) (*image.Image, error) {",
      "221:   var match *image.Image",
      "",
      "[Removed Lines]",
      "218: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config) (*image.Image, error) {",
      "",
      "[Added Lines]",
      "222: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config, platform ocispec.Platform) (*image.Image, error) {",
      "223:  if config == nil {",
      "224:   return nil, nil",
      "225:  }",
      "227:  isBuiltLocally := func(id image.ID) bool {",
      "228:   builtLocally, err := imageStore.IsBuiltLocally(id)",
      "229:   if err != nil {",
      "230:    log.G(context.TODO()).WithFields(log.Fields{",
      "231:     \"error\": err,",
      "232:     \"id\":    id,",
      "233:    }).Warn(\"failed to check if image was built locally\")",
      "234:    return false",
      "235:   }",
      "236:   return builtLocally",
      "237:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "225:     return nil, fmt.Errorf(\"unable to find image %q\", id)",
      "226:    }",
      "228:    if compare(&img.ContainerConfig, config) {",
      "230:     if img.Created != nil && (match == nil || match.Created.Before(*img.Created)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "248:    if !isBuiltLocally(id) {",
      "249:     continue",
      "250:    }",
      "252:    imgPlatform := img.Platform()",
      "254:    if imgPlatform.OS == \"\" && imgPlatform.Architecture == \"\" {",
      "255:     continue",
      "256:    }",
      "257:    if !platforms.OnlyStrict(platform).Match(imgPlatform) {",
      "258:     continue",
      "259:    }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "239:  if imgID == \"\" {",
      "240:   images := imageStore.Map()",
      "241:   var siblings []image.ID",
      "242:   for id, img := range images {",
      "245:    }",
      "246:   }",
      "247:   return getMatch(siblings)",
      "248:  }",
      "",
      "[Removed Lines]",
      "243:    if img.Parent == imgID {",
      "244:     siblings = append(siblings, id)",
      "",
      "[Added Lines]",
      "277:    if img.Parent != \"\" {",
      "278:     continue",
      "281:    if !isBuiltLocally(id) {",
      "282:     continue",
      "283:    }",
      "292:    if !strSliceEqual(img.ContainerConfig.Cmd, config.Cmd) {",
      "293:     continue",
      "294:    }",
      "296:    siblings = append(siblings, id)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "251:  siblings := imageStore.Children(imgID)",
      "252:  return getMatch(siblings)",
      "253: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: func strSliceEqual(a, b []string) bool {",
      "307:  if len(a) != len(b) {",
      "308:   return false",
      "309:  }",
      "310:  for i := 0; i < len(a); i++ {",
      "311:   if a[i] != b[i] {",
      "312:    return false",
      "313:   }",
      "314:  }",
      "315:  return true",
      "316: }",
      "",
      "---------------"
    ],
    "image/cache/compare.go||image/cache/compare.go": [
      "File: image/cache/compare.go -> image/cache/compare.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"github.com/docker/docker/api/types/container\"",
      "5: )",
      "9: func compare(a, b *container.Config) bool {",
      "12:   return false",
      "13:  }",
      "19:   return false",
      "20:  }",
      "28:   return false",
      "29:  }",
      "31:  for i := 0; i < len(a.Cmd); i++ {",
      "32:   if a.Cmd[i] != b.Cmd[i] {",
      "33:    return false",
      "34:   }",
      "35:  }",
      "38:    return false",
      "39:   }",
      "40:  }",
      "43:    return false",
      "44:   }",
      "45:  }",
      "",
      "[Removed Lines]",
      "10:  if a == nil || b == nil ||",
      "11:   a.OpenStdin || b.OpenStdin {",
      "14:  if a.AttachStdout != b.AttachStdout ||",
      "15:   a.AttachStderr != b.AttachStderr ||",
      "16:   a.User != b.User ||",
      "17:   a.OpenStdin != b.OpenStdin ||",
      "18:   a.Tty != b.Tty {",
      "22:  if len(a.Cmd) != len(b.Cmd) ||",
      "23:   len(a.Env) != len(b.Env) ||",
      "24:   len(a.Labels) != len(b.Labels) ||",
      "25:   len(a.ExposedPorts) != len(b.ExposedPorts) ||",
      "26:   len(a.Entrypoint) != len(b.Entrypoint) ||",
      "27:   len(a.Volumes) != len(b.Volumes) {",
      "36:  for i := 0; i < len(a.Env); i++ {",
      "37:   if a.Env[i] != b.Env[i] {",
      "41:  for k, v := range a.Labels {",
      "42:   if v != b.Labels[k] {",
      "",
      "[Added Lines]",
      "9: func CompareConfig(a, b *container.Config) bool {",
      "10:  return compare(a, b)",
      "11: }",
      "19:  if a == nil || b == nil {",
      "20:   return false",
      "21:  }",
      "23:  if len(a.Env) != len(b.Env) {",
      "26:  if len(a.Cmd) != len(b.Cmd) {",
      "29:  if len(a.Entrypoint) != len(b.Entrypoint) {",
      "30:   return false",
      "31:  }",
      "32:  if len(a.Shell) != len(b.Shell) {",
      "33:   return false",
      "34:  }",
      "35:  if len(a.ExposedPorts) != len(b.ExposedPorts) {",
      "36:   return false",
      "37:  }",
      "38:  if len(a.Volumes) != len(b.Volumes) {",
      "39:   return false",
      "40:  }",
      "41:  if len(a.Labels) != len(b.Labels) {",
      "42:   return false",
      "43:  }",
      "44:  if len(a.OnBuild) != len(b.OnBuild) {",
      "48:  for i := 0; i < len(a.Env); i++ {",
      "49:   if a.Env[i] != b.Env[i] {",
      "50:    return false",
      "51:   }",
      "52:  }",
      "53:  for i := 0; i < len(a.OnBuild); i++ {",
      "54:   if a.OnBuild[i] != b.OnBuild[i] {",
      "55:    return false",
      "56:   }",
      "57:  }",
      "63:  for i := 0; i < len(a.Entrypoint); i++ {",
      "64:   if a.Entrypoint[i] != b.Entrypoint[i] {",
      "68:  for i := 0; i < len(a.Shell); i++ {",
      "69:   if a.Shell[i] != b.Shell[i] {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:    return false",
      "49:   }",
      "50:  }",
      "54:    return false",
      "55:   }",
      "56:  }",
      "59:    return false",
      "60:   }",
      "61:  }",
      "62:  return true",
      "63: }",
      "",
      "[Removed Lines]",
      "52:  for i := 0; i < len(a.Entrypoint); i++ {",
      "53:   if a.Entrypoint[i] != b.Entrypoint[i] {",
      "57:  for key := range a.Volumes {",
      "58:   if _, exists := b.Volumes[key]; !exists {",
      "",
      "[Added Lines]",
      "78:  for key := range a.Volumes {",
      "79:   if _, exists := b.Volumes[key]; !exists {",
      "80:    return false",
      "81:   }",
      "82:  }",
      "83:  for k, v := range a.Labels {",
      "84:   if v != b.Labels[k] {",
      "85:    return false",
      "86:   }",
      "87:  }",
      "89:  if a.AttachStdin != b.AttachStdin {",
      "90:   return false",
      "91:  }",
      "92:  if a.AttachStdout != b.AttachStdout {",
      "93:   return false",
      "94:  }",
      "95:  if a.AttachStderr != b.AttachStderr {",
      "96:   return false",
      "97:  }",
      "98:  if a.NetworkDisabled != b.NetworkDisabled {",
      "99:   return false",
      "100:  }",
      "101:  if a.Tty != b.Tty {",
      "102:   return false",
      "103:  }",
      "104:  if a.OpenStdin != b.OpenStdin {",
      "105:   return false",
      "106:  }",
      "107:  if a.StdinOnce != b.StdinOnce {",
      "108:   return false",
      "109:  }",
      "110:  if a.ArgsEscaped != b.ArgsEscaped {",
      "111:   return false",
      "112:  }",
      "113:  if a.User != b.User {",
      "114:   return false",
      "115:  }",
      "116:  if a.WorkingDir != b.WorkingDir {",
      "117:   return false",
      "118:  }",
      "119:  if a.StopSignal != b.StopSignal {",
      "120:   return false",
      "121:  }",
      "123:  if (a.StopTimeout == nil) != (b.StopTimeout == nil) {",
      "124:   return false",
      "125:  }",
      "126:  if a.StopTimeout != nil && b.StopTimeout != nil {",
      "127:   if *a.StopTimeout != *b.StopTimeout {",
      "131:  if (a.Healthcheck == nil) != (b.Healthcheck == nil) {",
      "132:   return false",
      "133:  }",
      "134:  if a.Healthcheck != nil && b.Healthcheck != nil {",
      "135:   if a.Healthcheck.Interval != b.Healthcheck.Interval {",
      "136:    return false",
      "137:   }",
      "138:   if a.Healthcheck.StartInterval != b.Healthcheck.StartInterval {",
      "141:   if a.Healthcheck.StartPeriod != b.Healthcheck.StartPeriod {",
      "142:    return false",
      "143:   }",
      "144:   if a.Healthcheck.Timeout != b.Healthcheck.Timeout {",
      "145:    return false",
      "146:   }",
      "147:   if a.Healthcheck.Retries != b.Healthcheck.Retries {",
      "148:    return false",
      "149:   }",
      "150:   if len(a.Healthcheck.Test) != len(b.Healthcheck.Test) {",
      "151:    return false",
      "152:   }",
      "153:   for i := 0; i < len(a.Healthcheck.Test); i++ {",
      "154:    if a.Healthcheck.Test[i] != b.Healthcheck.Test[i] {",
      "155:     return false",
      "156:    }",
      "157:   }",
      "",
      "---------------"
    ],
    "image/store.go||image/store.go": [
      "File: image/store.go -> image/store.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"context\"",
      "5:  \"fmt\"",
      "6:  \"sync\"",
      "7:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  \"os\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:  GetParent(id ID) (ID, error)",
      "25:  SetLastUpdated(id ID) error",
      "26:  GetLastUpdated(id ID) (time.Time, error)",
      "27:  Children(id ID) []ID",
      "28:  Map() map[ID]*Image",
      "29:  Heads() map[ID]*Image",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28:  SetBuiltLocally(id ID) error",
      "29:  IsBuiltLocally(id ID) (bool, error)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "295:  return time.Parse(time.RFC3339Nano, string(bytes))",
      "296: }",
      "298: func (is *store) Children(id ID) []ID {",
      "299:  is.RLock()",
      "300:  defer is.RUnlock()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "302: func (is *store) SetBuiltLocally(id ID) error {",
      "303:  return is.fs.SetMetadata(id.Digest(), \"builtLocally\", []byte{1})",
      "304: }",
      "307: func (is *store) IsBuiltLocally(id ID) (bool, error) {",
      "308:  bytes, err := is.fs.GetMetadata(id.Digest(), \"builtLocally\")",
      "309:  if err != nil || len(bytes) == 0 {",
      "310:   if errors.Is(err, os.ErrNotExist) {",
      "311:    err = nil",
      "312:   }",
      "313:   return false, err",
      "314:  }",
      "315:  return bytes[0] == 1, nil",
      "316: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fca702de7f71362c8d103073c7e4a1d0a467fadd",
      "candidate_info": {
        "commit_hash": "fca702de7f71362c8d103073c7e4a1d0a467fadd",
        "repo": "moby/moby",
        "commit_url": "https://github.com/moby/moby/commit/fca702de7f71362c8d103073c7e4a1d0a467fadd",
        "files": [
          "builder/builder.go",
          "builder/dockerfile/copy.go",
          "builder/dockerfile/dispatchers.go",
          "builder/dockerfile/imageprobe.go",
          "builder/dockerfile/internals.go",
          "builder/dockerfile/mockbackend_test.go",
          "daemon/containerd/cache.go",
          "daemon/images/image_builder.go",
          "daemon/images/image_commit.go",
          "image/cache/cache.go",
          "image/cache/compare.go",
          "image/store.go"
        ],
        "message": "Merge pull request from GHSA-xw73-rw38-6vjc\n\n[24.0 backport] image/cache: Restrict cache candidates to locally built images",
        "before_after_code_files": [
          "builder/builder.go||builder/builder.go",
          "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
          "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
          "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
          "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
          "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
          "daemon/containerd/cache.go||daemon/containerd/cache.go",
          "daemon/images/image_builder.go||daemon/images/image_builder.go",
          "daemon/images/image_commit.go||daemon/images/image_commit.go",
          "image/cache/cache.go||image/cache/cache.go",
          "image/cache/compare.go||image/cache/compare.go",
          "image/store.go||image/store.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "builder/builder.go||builder/builder.go",
            "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
            "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
            "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
            "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
            "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
            "daemon/containerd/cache.go||daemon/containerd/cache.go",
            "daemon/images/image_builder.go||daemon/images/image_builder.go",
            "daemon/images/image_commit.go||daemon/images/image_commit.go",
            "image/cache/cache.go||image/cache/cache.go",
            "image/cache/compare.go||image/cache/compare.go",
            "image/store.go||image/store.go"
          ],
          "candidate": [
            "builder/builder.go||builder/builder.go",
            "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
            "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
            "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
            "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
            "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
            "daemon/containerd/cache.go||daemon/containerd/cache.go",
            "daemon/images/image_builder.go||daemon/images/image_builder.go",
            "daemon/images/image_commit.go||daemon/images/image_commit.go",
            "image/cache/cache.go||image/cache/cache.go",
            "image/cache/compare.go||image/cache/compare.go",
            "image/store.go||image/store.go"
          ]
        }
      },
      "candidate_diff": {
        "builder/builder.go||builder/builder.go": [
          "File: builder/builder.go -> builder/builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/docker/docker/image\"",
          "16:  \"github.com/docker/docker/layer\"",
          "17:  \"github.com/opencontainers/go-digest\"",
          "18: )",
          "20: const (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: type ImageCache interface {",
          "93: }",
          "",
          "[Removed Lines]",
          "92:  GetCache(parentID string, cfg *container.Config) (imageID string, err error)",
          "",
          "[Added Lines]",
          "93:  GetCache(parentID string, cfg *container.Config, platform ocispec.Platform) (imageID string, err error)",
          "",
          "---------------"
        ],
        "builder/dockerfile/copy.go||builder/dockerfile/copy.go": [
          "File: builder/dockerfile/copy.go -> builder/dockerfile/copy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"net/url\"",
          "9:  \"os\"",
          "10:  \"path/filepath\"",
          "12:  \"sort\"",
          "13:  \"strings\"",
          "14:  \"time\"",
          "",
          "[Removed Lines]",
          "11:  \"runtime\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:  source      builder.Source",
          "75:  pathCache   pathCache",
          "76:  download    sourceDownloader",
          "",
          "[Removed Lines]",
          "77:  platform    *ocispec.Platform",
          "",
          "[Added Lines]",
          "76:  platform    ocispec.Platform",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: }",
          "85: func copierFromDispatchRequest(req dispatchRequest, download sourceDownloader, imageSource *imageMount) copier {",
          "100:  return copier{",
          "101:   source:      req.source,",
          "",
          "[Removed Lines]",
          "86:  platform := req.builder.platform",
          "87:  if platform == nil {",
          "89:   platform = &ocispec.Platform{}",
          "90:  }",
          "91:  if platform.OS == \"\" {",
          "93:   platform.OS = req.state.operatingSystem",
          "94:  }",
          "95:  if platform.OS == \"\" {",
          "97:   platform.OS = runtime.GOOS",
          "98:  }",
          "",
          "[Added Lines]",
          "85:  platform := req.builder.getPlatform(req.state)",
          "",
          "---------------"
        ],
        "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go": [
          "File: builder/dockerfile/dispatchers.go -> builder/dockerfile/dispatchers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:   saveCmd = prependEnvOnCmd(d.state.buildArgs, buildArgs, cmdFromArgs)",
          "350:  }",
          "352:  runConfigForCacheProbe := copyRunConfig(stateRunConfig,",
          "353:   withCmd(saveCmd),",
          "355:   withEntrypointOverride(saveCmd, nil))",
          "356:  if hit, err := d.builder.probeCache(d.state, runConfigForCacheProbe); err != nil || hit {",
          "357:   return err",
          "",
          "[Removed Lines]",
          "354:   withArgsEscaped(argsEscaped),",
          "",
          "[Added Lines]",
          "352:  cacheArgsEscaped := argsEscaped",
          "355:  if d.state.operatingSystem == \"windows\" {",
          "356:   cacheArgsEscaped = stateRunConfig.ArgsEscaped",
          "357:  }",
          "361:   withArgsEscaped(cacheArgsEscaped),",
          "",
          "---------------"
        ],
        "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go": [
          "File: builder/dockerfile/imageprobe.go -> builder/dockerfile/imageprobe.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"github.com/docker/docker/api/types/container\"",
          "7:  \"github.com/docker/docker/builder\"",
          "8:  \"github.com/sirupsen/logrus\"",
          "9: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: type ImageProber interface {",
          "14:  Reset(ctx context.Context) error",
          "16: }",
          "18: type resetFunc func(context.Context) (builder.ImageCache, error)",
          "",
          "[Removed Lines]",
          "15:  Probe(parentID string, runConfig *container.Config) (string, error)",
          "",
          "[Added Lines]",
          "16:  Probe(parentID string, runConfig *container.Config, platform ocispec.Platform) (string, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:  if c.cacheBusted {",
          "56:   return \"\", nil",
          "57:  }",
          "59:  if err != nil {",
          "60:   return \"\", err",
          "61:  }",
          "",
          "[Removed Lines]",
          "54: func (c *imageProber) Probe(parentID string, runConfig *container.Config) (string, error) {",
          "58:  cacheID, err := c.cache.GetCache(parentID, runConfig)",
          "",
          "[Added Lines]",
          "55: func (c *imageProber) Probe(parentID string, runConfig *container.Config, platform ocispec.Platform) (string, error) {",
          "59:  cacheID, err := c.cache.GetCache(parentID, runConfig, platform)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:  return nil",
          "75: }",
          "78:  return \"\", nil",
          "79: }",
          "",
          "[Removed Lines]",
          "77: func (c *nopProber) Probe(_ string, _ *container.Config) (string, error) {",
          "",
          "[Added Lines]",
          "78: func (c *nopProber) Probe(_ string, _ *container.Config, _ ocispec.Platform) (string, error) {",
          "",
          "---------------"
        ],
        "builder/dockerfile/internals.go||builder/dockerfile/internals.go": [
          "File: builder/dockerfile/internals.go -> builder/dockerfile/internals.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"fmt\"",
          "11:  \"strings\"",
          "13:  \"github.com/docker/docker/api/types\"",
          "14:  \"github.com/docker/docker/api/types/backend\"",
          "15:  \"github.com/docker/docker/api/types/container\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  \"github.com/containerd/containerd/platforms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328: }",
          "330: func (b *Builder) probeCache(dispatchState *dispatchState, runConfig *container.Config) (bool, error) {",
          "332:  if cachedID == \"\" || err != nil {",
          "333:   return false, err",
          "334:  }",
          "",
          "[Removed Lines]",
          "331:  cachedID, err := b.imageProber.Probe(dispatchState.imageID, runConfig)",
          "",
          "[Added Lines]",
          "332:  cachedID, err := b.imageProber.Probe(dispatchState.imageID, runConfig, b.getPlatform(dispatchState))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:  }",
          "389:  return hc",
          "390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: func (b *Builder) getPlatform(state *dispatchState) ocispec.Platform {",
          "395:  out := platforms.DefaultSpec()",
          "396:  if b.platform != nil {",
          "397:   out = *b.platform",
          "398:  }",
          "400:  if state.operatingSystem != \"\" {",
          "401:   out.OS = state.operatingSystem",
          "402:  }",
          "404:  return out",
          "405: }",
          "",
          "---------------"
        ],
        "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go": [
          "File: builder/dockerfile/mockbackend_test.go -> builder/dockerfile/mockbackend_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"github.com/docker/docker/image\"",
          "15:  \"github.com/docker/docker/layer\"",
          "16:  \"github.com/opencontainers/go-digest\"",
          "17: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  getCacheFunc func(parentID string, cfg *container.Config) (string, error)",
          "112: }",
          "115:  if mic.getCacheFunc != nil {",
          "116:   return mic.getCacheFunc(parentID, cfg)",
          "117:  }",
          "",
          "[Removed Lines]",
          "114: func (mic *mockImageCache) GetCache(parentID string, cfg *container.Config) (string, error) {",
          "",
          "[Added Lines]",
          "115: func (mic *mockImageCache) GetCache(parentID string, cfg *container.Config, _ ocispec.Platform) (string, error) {",
          "",
          "---------------"
        ],
        "daemon/containerd/cache.go||daemon/containerd/cache.go": [
          "File: daemon/containerd/cache.go -> daemon/containerd/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/docker/docker/api/types/container\"",
          "9:  imagetype \"github.com/docker/docker/api/types/image\"",
          "10:  \"github.com/docker/docker/builder\"",
          "11:  \"github.com/docker/docker/image\"",
          "12: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/docker/docker/errdefs\"",
          "13:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:  c      *ImageService",
          "30: }",
          "33:  ctx := context.TODO()",
          "35:  if parentID == \"\" {",
          "",
          "[Removed Lines]",
          "32: func (ic *imageCache) GetCache(parentID string, cfg *container.Config) (imageID string, err error) {",
          "",
          "[Added Lines]",
          "34: func (ic *imageCache) GetCache(parentID string, cfg *container.Config, platform ocispec.Platform) (imageID string, err error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:   return \"\", nil",
          "38:  }",
          "41:  if err != nil {",
          "42:   return \"\", err",
          "43:  }",
          "",
          "[Removed Lines]",
          "40:  parent, err := ic.c.GetImage(ctx, parentID, imagetype.GetImageOpts{})",
          "",
          "[Added Lines]",
          "42:  parent, err := ic.c.GetImage(ctx, parentID, imagetype.GetImageOpts{Platform: &platform})",
          "44:   if errdefs.IsNotFound(err) {",
          "45:    return \"\", nil",
          "46:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54:  }",
          "56:  for _, children := range children {",
          "58:   if err != nil {",
          "59:    return \"\", err",
          "60:   }",
          "",
          "[Removed Lines]",
          "57:   childImage, err := ic.c.GetImage(ctx, children.String(), imagetype.GetImageOpts{})",
          "",
          "[Added Lines]",
          "62:   childImage, err := ic.c.GetImage(ctx, children.String(), imagetype.GetImageOpts{Platform: &platform})",
          "64:    if errdefs.IsNotFound(err) {",
          "65:     continue",
          "66:    }",
          "",
          "---------------"
        ],
        "daemon/images/image_builder.go||daemon/images/image_builder.go": [
          "File: daemon/images/image_builder.go -> daemon/images/image_builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:    return nil, errors.Wrapf(err, \"failed to set parent %s\", parent)",
          "258:   }",
          "259:  }",
          "261:  return i.imageStore.Get(id)",
          "262: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:  if err := i.imageStore.SetBuiltLocally(id); err != nil {",
          "261:   return nil, errors.Wrapf(err, \"failed to mark image %s as built locally\", id)",
          "262:  }",
          "",
          "---------------"
        ],
        "daemon/images/image_commit.go||daemon/images/image_commit.go": [
          "File: daemon/images/image_commit.go -> daemon/images/image_commit.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  if err != nil {",
          "63:   return \"\", err",
          "64:  }",
          "66:  if c.ParentImageID != \"\" {",
          "67:   if err := i.imageStore.SetParent(id, image.ID(c.ParentImageID)); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:  if err := i.imageStore.SetBuiltLocally(id); err != nil {",
          "66:   return \"\", err",
          "67:  }",
          "",
          "---------------"
        ],
        "image/cache/cache.go||image/cache/cache.go": [
          "File: image/cache/cache.go -> image/cache/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"reflect\"",
          "7:  \"strings\"",
          "9:  containertypes \"github.com/docker/docker/api/types/container\"",
          "10:  \"github.com/docker/docker/dockerversion\"",
          "11:  \"github.com/docker/docker/image\"",
          "12:  \"github.com/docker/docker/layer\"",
          "13:  \"github.com/pkg/errors\"",
          "14: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"github.com/containerd/containerd/platforms\"",
          "14:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "16:  \"github.com/sirupsen/logrus\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: }",
          "31: }",
          "",
          "[Removed Lines]",
          "29: func (lic *LocalImageCache) GetCache(imgID string, config *containertypes.Config) (string, error) {",
          "30:  return getImageIDAndError(getLocalCachedImage(lic.store, image.ID(imgID), config))",
          "",
          "[Added Lines]",
          "32: func (lic *LocalImageCache) GetCache(imgID string, config *containertypes.Config, platform ocispec.Platform) (string, error) {",
          "33:  return getImageIDAndError(getLocalCachedImage(lic.store, image.ID(imgID), config, platform))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: }",
          "56:  if err != nil {",
          "57:   return \"\", err",
          "58:  }",
          "",
          "[Removed Lines]",
          "54: func (ic *ImageCache) GetCache(parentID string, cfg *containertypes.Config) (string, error) {",
          "55:  imgID, err := ic.localImageCache.GetCache(parentID, cfg)",
          "",
          "[Added Lines]",
          "57: func (ic *ImageCache) GetCache(parentID string, cfg *containertypes.Config, platform ocispec.Platform) (string, error) {",
          "58:  imgID, err := ic.localImageCache.GetCache(parentID, cfg, platform)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:  getMatch := func(siblings []image.ID) (*image.Image, error) {",
          "221:   var match *image.Image",
          "",
          "[Removed Lines]",
          "218: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config) (*image.Image, error) {",
          "",
          "[Added Lines]",
          "221: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config, platform ocispec.Platform) (*image.Image, error) {",
          "222:  if config == nil {",
          "223:   return nil, nil",
          "224:  }",
          "226:  isBuiltLocally := func(id image.ID) bool {",
          "227:   builtLocally, err := imageStore.IsBuiltLocally(id)",
          "228:   if err != nil {",
          "229:    logrus.WithFields(logrus.Fields{",
          "230:     \"error\": err,",
          "231:     \"id\":    id,",
          "232:    }).Warn(\"failed to check if image was built locally\")",
          "233:    return false",
          "234:   }",
          "235:   return builtLocally",
          "236:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:     return nil, fmt.Errorf(\"unable to find image %q\", id)",
          "226:    }",
          "228:    if compare(&img.ContainerConfig, config) {",
          "230:     if match == nil || match.Created.Before(img.Created) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:    if !isBuiltLocally(id) {",
          "248:     continue",
          "249:    }",
          "251:    imgPlatform := ocispec.Platform{",
          "252:     Architecture: img.Architecture,",
          "253:     OS:           img.OS,",
          "254:     OSVersion:    img.OSVersion,",
          "255:     OSFeatures:   img.OSFeatures,",
          "256:     Variant:      img.Variant,",
          "257:    }",
          "259:    if imgPlatform.OS == \"\" && imgPlatform.Architecture == \"\" {",
          "260:     continue",
          "261:    }",
          "262:    if !platforms.OnlyStrict(platform).Match(imgPlatform) {",
          "263:     continue",
          "264:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:  if imgID == \"\" {",
          "240:   images := imageStore.Map()",
          "241:   var siblings []image.ID",
          "242:   for id, img := range images {",
          "245:    }",
          "246:   }",
          "247:   return getMatch(siblings)",
          "248:  }",
          "",
          "[Removed Lines]",
          "243:    if img.Parent == imgID {",
          "244:     siblings = append(siblings, id)",
          "",
          "[Added Lines]",
          "282:    if img.Parent != \"\" {",
          "283:     continue",
          "286:    if !isBuiltLocally(id) {",
          "287:     continue",
          "288:    }",
          "297:    if !strSliceEqual(img.ContainerConfig.Cmd, config.Cmd) {",
          "298:     continue",
          "299:    }",
          "301:    siblings = append(siblings, id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "251:  siblings := imageStore.Children(imgID)",
          "252:  return getMatch(siblings)",
          "253: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: func strSliceEqual(a, b []string) bool {",
          "312:  if len(a) != len(b) {",
          "313:   return false",
          "314:  }",
          "315:  for i := 0; i < len(a); i++ {",
          "316:   if a[i] != b[i] {",
          "317:    return false",
          "318:   }",
          "319:  }",
          "320:  return true",
          "321: }",
          "",
          "---------------"
        ],
        "image/cache/compare.go||image/cache/compare.go": [
          "File: image/cache/compare.go -> image/cache/compare.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"github.com/docker/docker/api/types/container\"",
          "5: )",
          "9: func compare(a, b *container.Config) bool {",
          "12:   return false",
          "13:  }",
          "19:   return false",
          "20:  }",
          "28:   return false",
          "29:  }",
          "31:  for i := 0; i < len(a.Cmd); i++ {",
          "32:   if a.Cmd[i] != b.Cmd[i] {",
          "33:    return false",
          "34:   }",
          "35:  }",
          "38:    return false",
          "39:   }",
          "40:  }",
          "43:    return false",
          "44:   }",
          "45:  }",
          "",
          "[Removed Lines]",
          "10:  if a == nil || b == nil ||",
          "11:   a.OpenStdin || b.OpenStdin {",
          "14:  if a.AttachStdout != b.AttachStdout ||",
          "15:   a.AttachStderr != b.AttachStderr ||",
          "16:   a.User != b.User ||",
          "17:   a.OpenStdin != b.OpenStdin ||",
          "18:   a.Tty != b.Tty {",
          "22:  if len(a.Cmd) != len(b.Cmd) ||",
          "23:   len(a.Env) != len(b.Env) ||",
          "24:   len(a.Labels) != len(b.Labels) ||",
          "25:   len(a.ExposedPorts) != len(b.ExposedPorts) ||",
          "26:   len(a.Entrypoint) != len(b.Entrypoint) ||",
          "27:   len(a.Volumes) != len(b.Volumes) {",
          "36:  for i := 0; i < len(a.Env); i++ {",
          "37:   if a.Env[i] != b.Env[i] {",
          "41:  for k, v := range a.Labels {",
          "42:   if v != b.Labels[k] {",
          "",
          "[Added Lines]",
          "9: func CompareConfig(a, b *container.Config) bool {",
          "10:  return compare(a, b)",
          "11: }",
          "19:  if a == nil || b == nil {",
          "20:   return false",
          "21:  }",
          "23:  if len(a.Env) != len(b.Env) {",
          "26:  if len(a.Cmd) != len(b.Cmd) {",
          "29:  if len(a.Entrypoint) != len(b.Entrypoint) {",
          "30:   return false",
          "31:  }",
          "32:  if len(a.Shell) != len(b.Shell) {",
          "33:   return false",
          "34:  }",
          "35:  if len(a.ExposedPorts) != len(b.ExposedPorts) {",
          "36:   return false",
          "37:  }",
          "38:  if len(a.Volumes) != len(b.Volumes) {",
          "39:   return false",
          "40:  }",
          "41:  if len(a.Labels) != len(b.Labels) {",
          "42:   return false",
          "43:  }",
          "44:  if len(a.OnBuild) != len(b.OnBuild) {",
          "48:  for i := 0; i < len(a.Env); i++ {",
          "49:   if a.Env[i] != b.Env[i] {",
          "50:    return false",
          "51:   }",
          "52:  }",
          "53:  for i := 0; i < len(a.OnBuild); i++ {",
          "54:   if a.OnBuild[i] != b.OnBuild[i] {",
          "55:    return false",
          "56:   }",
          "57:  }",
          "63:  for i := 0; i < len(a.Entrypoint); i++ {",
          "64:   if a.Entrypoint[i] != b.Entrypoint[i] {",
          "68:  for i := 0; i < len(a.Shell); i++ {",
          "69:   if a.Shell[i] != b.Shell[i] {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:    return false",
          "49:   }",
          "50:  }",
          "54:    return false",
          "55:   }",
          "56:  }",
          "59:    return false",
          "60:   }",
          "61:  }",
          "62:  return true",
          "63: }",
          "",
          "[Removed Lines]",
          "52:  for i := 0; i < len(a.Entrypoint); i++ {",
          "53:   if a.Entrypoint[i] != b.Entrypoint[i] {",
          "57:  for key := range a.Volumes {",
          "58:   if _, exists := b.Volumes[key]; !exists {",
          "",
          "[Added Lines]",
          "78:  for key := range a.Volumes {",
          "79:   if _, exists := b.Volumes[key]; !exists {",
          "80:    return false",
          "81:   }",
          "82:  }",
          "83:  for k, v := range a.Labels {",
          "84:   if v != b.Labels[k] {",
          "85:    return false",
          "86:   }",
          "87:  }",
          "89:  if a.AttachStdin != b.AttachStdin {",
          "90:   return false",
          "91:  }",
          "92:  if a.AttachStdout != b.AttachStdout {",
          "93:   return false",
          "94:  }",
          "95:  if a.AttachStderr != b.AttachStderr {",
          "96:   return false",
          "97:  }",
          "98:  if a.NetworkDisabled != b.NetworkDisabled {",
          "99:   return false",
          "100:  }",
          "101:  if a.Tty != b.Tty {",
          "102:   return false",
          "103:  }",
          "104:  if a.OpenStdin != b.OpenStdin {",
          "105:   return false",
          "106:  }",
          "107:  if a.StdinOnce != b.StdinOnce {",
          "108:   return false",
          "109:  }",
          "110:  if a.ArgsEscaped != b.ArgsEscaped {",
          "111:   return false",
          "112:  }",
          "113:  if a.User != b.User {",
          "114:   return false",
          "115:  }",
          "116:  if a.WorkingDir != b.WorkingDir {",
          "117:   return false",
          "118:  }",
          "119:  if a.StopSignal != b.StopSignal {",
          "120:   return false",
          "121:  }",
          "123:  if (a.StopTimeout == nil) != (b.StopTimeout == nil) {",
          "124:   return false",
          "125:  }",
          "126:  if a.StopTimeout != nil && b.StopTimeout != nil {",
          "127:   if *a.StopTimeout != *b.StopTimeout {",
          "131:  if (a.Healthcheck == nil) != (b.Healthcheck == nil) {",
          "132:   return false",
          "133:  }",
          "134:  if a.Healthcheck != nil && b.Healthcheck != nil {",
          "135:   if a.Healthcheck.Interval != b.Healthcheck.Interval {",
          "138:   if a.Healthcheck.StartPeriod != b.Healthcheck.StartPeriod {",
          "139:    return false",
          "140:   }",
          "141:   if a.Healthcheck.Timeout != b.Healthcheck.Timeout {",
          "142:    return false",
          "143:   }",
          "144:   if a.Healthcheck.Retries != b.Healthcheck.Retries {",
          "145:    return false",
          "146:   }",
          "147:   if len(a.Healthcheck.Test) != len(b.Healthcheck.Test) {",
          "148:    return false",
          "149:   }",
          "150:   for i := 0; i < len(a.Healthcheck.Test); i++ {",
          "151:    if a.Healthcheck.Test[i] != b.Healthcheck.Test[i] {",
          "152:     return false",
          "153:    }",
          "154:   }",
          "",
          "---------------"
        ],
        "image/store.go||image/store.go": [
          "File: image/store.go -> image/store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"sync\"",
          "6:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  GetParent(id ID) (ID, error)",
          "25:  SetLastUpdated(id ID) error",
          "26:  GetLastUpdated(id ID) (time.Time, error)",
          "27:  Children(id ID) []ID",
          "28:  Map() map[ID]*Image",
          "29:  Heads() map[ID]*Image",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:  SetBuiltLocally(id ID) error",
          "29:  IsBuiltLocally(id ID) (bool, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:  return time.Parse(time.RFC3339Nano, string(bytes))",
          "296: }",
          "298: func (is *store) Children(id ID) []ID {",
          "299:  is.RLock()",
          "300:  defer is.RUnlock()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: func (is *store) SetBuiltLocally(id ID) error {",
          "303:  return is.fs.SetMetadata(id.Digest(), \"builtLocally\", []byte{1})",
          "304: }",
          "307: func (is *store) IsBuiltLocally(id ID) (bool, error) {",
          "308:  bytes, err := is.fs.GetMetadata(id.Digest(), \"builtLocally\")",
          "309:  if err != nil || len(bytes) == 0 {",
          "310:   if errors.Is(err, os.ErrNotExist) {",
          "311:    err = nil",
          "312:   }",
          "313:   return false, err",
          "314:  }",
          "315:  return bytes[0] == 1, nil",
          "316: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79de67d98936cd93105678986c9a4bb95078db2f",
      "candidate_info": {
        "commit_hash": "79de67d98936cd93105678986c9a4bb95078db2f",
        "repo": "moby/moby",
        "commit_url": "https://github.com/moby/moby/commit/79de67d98936cd93105678986c9a4bb95078db2f",
        "files": [
          "builder/builder.go",
          "builder/dockerfile/copy.go",
          "builder/dockerfile/dispatchers.go",
          "builder/dockerfile/imageprobe.go",
          "builder/dockerfile/internals.go",
          "builder/dockerfile/mockbackend_test.go",
          "daemon/images/image_builder.go",
          "daemon/images/image_commit.go",
          "image/cache/cache.go",
          "image/cache/compare.go",
          "image/store.go"
        ],
        "message": "Merge pull request from GHSA-xw73-rw38-6vjc\n\n[23.0 backport] image/cache: Restrict cache candidates to locally built images",
        "before_after_code_files": [
          "builder/builder.go||builder/builder.go",
          "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
          "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
          "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
          "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
          "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
          "daemon/images/image_builder.go||daemon/images/image_builder.go",
          "daemon/images/image_commit.go||daemon/images/image_commit.go",
          "image/cache/cache.go||image/cache/cache.go",
          "image/cache/compare.go||image/cache/compare.go",
          "image/store.go||image/store.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "builder/builder.go||builder/builder.go",
            "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
            "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
            "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
            "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
            "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
            "daemon/images/image_builder.go||daemon/images/image_builder.go",
            "daemon/images/image_commit.go||daemon/images/image_commit.go",
            "image/cache/cache.go||image/cache/cache.go",
            "image/cache/compare.go||image/cache/compare.go",
            "image/store.go||image/store.go"
          ],
          "candidate": [
            "builder/builder.go||builder/builder.go",
            "builder/dockerfile/copy.go||builder/dockerfile/copy.go",
            "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go",
            "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go",
            "builder/dockerfile/internals.go||builder/dockerfile/internals.go",
            "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go",
            "daemon/images/image_builder.go||daemon/images/image_builder.go",
            "daemon/images/image_commit.go||daemon/images/image_commit.go",
            "image/cache/cache.go||image/cache/cache.go",
            "image/cache/compare.go||image/cache/compare.go",
            "image/store.go||image/store.go"
          ]
        }
      },
      "candidate_diff": {
        "builder/builder.go||builder/builder.go": [
          "File: builder/builder.go -> builder/builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/docker/docker/image\"",
          "16:  \"github.com/docker/docker/layer\"",
          "17:  \"github.com/docker/docker/pkg/containerfs\"",
          "18: )",
          "20: const (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: type ImageCache interface {",
          "93: }",
          "",
          "[Removed Lines]",
          "92:  GetCache(parentID string, cfg *container.Config) (imageID string, err error)",
          "",
          "[Added Lines]",
          "93:  GetCache(parentID string, cfg *container.Config, platform ocispec.Platform) (imageID string, err error)",
          "",
          "---------------"
        ],
        "builder/dockerfile/copy.go||builder/dockerfile/copy.go": [
          "File: builder/dockerfile/copy.go -> builder/dockerfile/copy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"net/url\"",
          "10:  \"os\"",
          "11:  \"path/filepath\"",
          "13:  \"sort\"",
          "14:  \"strings\"",
          "15:  \"time\"",
          "",
          "[Removed Lines]",
          "12:  \"runtime\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  \"github.com/docker/docker/pkg/streamformatter\"",
          "26:  \"github.com/docker/docker/pkg/system\"",
          "27:  \"github.com/moby/buildkit/frontend/dockerfile/instructions\"",
          "29:  \"github.com/pkg/errors\"",
          "30: )",
          "",
          "[Removed Lines]",
          "28:  specs \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "[Added Lines]",
          "27:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:  source      builder.Source",
          "76:  pathCache   pathCache",
          "77:  download    sourceDownloader",
          "",
          "[Removed Lines]",
          "78:  platform    *specs.Platform",
          "",
          "[Added Lines]",
          "77:  platform    ocispec.Platform",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: }",
          "86: func copierFromDispatchRequest(req dispatchRequest, download sourceDownloader, imageSource *imageMount) copier {",
          "101:  return copier{",
          "102:   source:      req.source,",
          "",
          "[Removed Lines]",
          "87:  platform := req.builder.platform",
          "88:  if platform == nil {",
          "90:   platform = &specs.Platform{}",
          "91:  }",
          "92:  if platform.OS == \"\" {",
          "94:   platform.OS = req.state.operatingSystem",
          "95:  }",
          "96:  if platform.OS == \"\" {",
          "98:   platform.OS = runtime.GOOS",
          "99:  }",
          "",
          "[Added Lines]",
          "86:  platform := req.builder.getPlatform(req.state)",
          "",
          "---------------"
        ],
        "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go": [
          "File: builder/dockerfile/dispatchers.go -> builder/dockerfile/dispatchers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:   saveCmd = prependEnvOnCmd(d.state.buildArgs, buildArgs, cmdFromArgs)",
          "346:  }",
          "348:  runConfigForCacheProbe := copyRunConfig(stateRunConfig,",
          "349:   withCmd(saveCmd),",
          "351:   withEntrypointOverride(saveCmd, nil))",
          "352:  if hit, err := d.builder.probeCache(d.state, runConfigForCacheProbe); err != nil || hit {",
          "353:   return err",
          "",
          "[Removed Lines]",
          "350:   withArgsEscaped(argsEscaped),",
          "",
          "[Added Lines]",
          "348:  cacheArgsEscaped := argsEscaped",
          "351:  if d.state.operatingSystem == \"windows\" {",
          "352:   cacheArgsEscaped = stateRunConfig.ArgsEscaped",
          "353:  }",
          "357:   withArgsEscaped(cacheArgsEscaped),",
          "",
          "---------------"
        ],
        "builder/dockerfile/imageprobe.go||builder/dockerfile/imageprobe.go": [
          "File: builder/dockerfile/imageprobe.go -> builder/dockerfile/imageprobe.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"github.com/docker/docker/api/types/container\"",
          "5:  \"github.com/docker/docker/builder\"",
          "6:  \"github.com/sirupsen/logrus\"",
          "7: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: type ImageProber interface {",
          "12:  Reset()",
          "14: }",
          "16: type imageProber struct {",
          "",
          "[Removed Lines]",
          "13:  Probe(parentID string, runConfig *container.Config) (string, error)",
          "",
          "[Added Lines]",
          "14:  Probe(parentID string, runConfig *container.Config, platform ocispec.Platform) (string, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:  if c.cacheBusted {",
          "42:   return \"\", nil",
          "43:  }",
          "45:  if err != nil {",
          "46:   return \"\", err",
          "47:  }",
          "",
          "[Removed Lines]",
          "40: func (c *imageProber) Probe(parentID string, runConfig *container.Config) (string, error) {",
          "44:  cacheID, err := c.cache.GetCache(parentID, runConfig)",
          "",
          "[Added Lines]",
          "41: func (c *imageProber) Probe(parentID string, runConfig *container.Config, platform ocispec.Platform) (string, error) {",
          "45:  cacheID, err := c.cache.GetCache(parentID, runConfig, platform)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59: func (c *nopProber) Reset() {}",
          "62:  return \"\", nil",
          "63: }",
          "",
          "[Removed Lines]",
          "61: func (c *nopProber) Probe(_ string, _ *container.Config) (string, error) {",
          "",
          "[Added Lines]",
          "62: func (c *nopProber) Probe(_ string, _ *container.Config, _ ocispec.Platform) (string, error) {",
          "",
          "---------------"
        ],
        "builder/dockerfile/internals.go||builder/dockerfile/internals.go": [
          "File: builder/dockerfile/internals.go -> builder/dockerfile/internals.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"io\"",
          "11:  \"strings\"",
          "13:  \"github.com/docker/docker/api/types\"",
          "14:  \"github.com/docker/docker/api/types/backend\"",
          "15:  \"github.com/docker/docker/api/types/container\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  \"github.com/containerd/containerd/platforms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364: }",
          "366: func (b *Builder) probeCache(dispatchState *dispatchState, runConfig *container.Config) (bool, error) {",
          "368:  if cachedID == \"\" || err != nil {",
          "369:   return false, err",
          "370:  }",
          "",
          "[Removed Lines]",
          "367:  cachedID, err := b.imageProber.Probe(dispatchState.imageID, runConfig)",
          "",
          "[Added Lines]",
          "368:  cachedID, err := b.imageProber.Probe(dispatchState.imageID, runConfig, b.getPlatform(dispatchState))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:  }",
          "425:  return hc",
          "426: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429: func (b *Builder) getPlatform(state *dispatchState) specs.Platform {",
          "431:  out := platforms.DefaultSpec()",
          "432:  if b.platform != nil {",
          "433:   out = *b.platform",
          "434:  }",
          "436:  if state.operatingSystem != \"\" {",
          "437:   out.OS = state.operatingSystem",
          "438:  }",
          "440:  return out",
          "441: }",
          "",
          "---------------"
        ],
        "builder/dockerfile/mockbackend_test.go||builder/dockerfile/mockbackend_test.go": [
          "File: builder/dockerfile/mockbackend_test.go -> builder/dockerfile/mockbackend_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"github.com/docker/docker/image\"",
          "15:  \"github.com/docker/docker/layer\"",
          "16:  \"github.com/docker/docker/pkg/containerfs\"",
          "17: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  getCacheFunc func(parentID string, cfg *container.Config) (string, error)",
          "112: }",
          "115:  if mic.getCacheFunc != nil {",
          "116:   return mic.getCacheFunc(parentID, cfg)",
          "117:  }",
          "",
          "[Removed Lines]",
          "114: func (mic *mockImageCache) GetCache(parentID string, cfg *container.Config) (string, error) {",
          "",
          "[Added Lines]",
          "115: func (mic *mockImageCache) GetCache(parentID string, cfg *container.Config, _ ocispec.Platform) (string, error) {",
          "",
          "---------------"
        ],
        "daemon/images/image_builder.go||daemon/images/image_builder.go": [
          "File: daemon/images/image_builder.go -> daemon/images/image_builder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:    return nil, errors.Wrapf(err, \"failed to set parent %s\", parent)",
          "251:   }",
          "252:  }",
          "254:  return i.imageStore.Get(id)",
          "255: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  if err := i.imageStore.SetBuiltLocally(id); err != nil {",
          "254:   return nil, errors.Wrapf(err, \"failed to mark image %s as built locally\", id)",
          "255:  }",
          "",
          "---------------"
        ],
        "daemon/images/image_commit.go||daemon/images/image_commit.go": [
          "File: daemon/images/image_commit.go -> daemon/images/image_commit.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  if err != nil {",
          "58:   return \"\", err",
          "59:  }",
          "61:  if c.ParentImageID != \"\" {",
          "62:   if err := i.imageStore.SetParent(id, image.ID(c.ParentImageID)); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:  if err := i.imageStore.SetBuiltLocally(id); err != nil {",
          "61:   return \"\", err",
          "62:  }",
          "",
          "---------------"
        ],
        "image/cache/cache.go||image/cache/cache.go": [
          "File: image/cache/cache.go -> image/cache/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"reflect\"",
          "7:  \"strings\"",
          "9:  containertypes \"github.com/docker/docker/api/types/container\"",
          "10:  \"github.com/docker/docker/dockerversion\"",
          "11:  \"github.com/docker/docker/image\"",
          "12:  \"github.com/docker/docker/layer\"",
          "13:  \"github.com/pkg/errors\"",
          "14: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"github.com/containerd/containerd/platforms\"",
          "14:  ocispec \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "16:  \"github.com/sirupsen/logrus\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: }",
          "31: }",
          "",
          "[Removed Lines]",
          "29: func (lic *LocalImageCache) GetCache(imgID string, config *containertypes.Config) (string, error) {",
          "30:  return getImageIDAndError(getLocalCachedImage(lic.store, image.ID(imgID), config))",
          "",
          "[Added Lines]",
          "32: func (lic *LocalImageCache) GetCache(imgID string, config *containertypes.Config, platform ocispec.Platform) (string, error) {",
          "33:  return getImageIDAndError(getLocalCachedImage(lic.store, image.ID(imgID), config, platform))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: }",
          "56:  if err != nil {",
          "57:   return \"\", err",
          "58:  }",
          "",
          "[Removed Lines]",
          "54: func (ic *ImageCache) GetCache(parentID string, cfg *containertypes.Config) (string, error) {",
          "55:  imgID, err := ic.localImageCache.GetCache(parentID, cfg)",
          "",
          "[Added Lines]",
          "57: func (ic *ImageCache) GetCache(parentID string, cfg *containertypes.Config, platform ocispec.Platform) (string, error) {",
          "58:  imgID, err := ic.localImageCache.GetCache(parentID, cfg, platform)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:  getMatch := func(siblings []image.ID) (*image.Image, error) {",
          "221:   var match *image.Image",
          "",
          "[Removed Lines]",
          "218: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config) (*image.Image, error) {",
          "",
          "[Added Lines]",
          "221: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config, platform ocispec.Platform) (*image.Image, error) {",
          "222:  if config == nil {",
          "223:   return nil, nil",
          "224:  }",
          "226:  isBuiltLocally := func(id image.ID) bool {",
          "227:   builtLocally, err := imageStore.IsBuiltLocally(id)",
          "228:   if err != nil {",
          "229:    logrus.WithFields(logrus.Fields{",
          "230:     \"error\": err,",
          "231:     \"id\":    id,",
          "232:    }).Warn(\"failed to check if image was built locally\")",
          "233:    return false",
          "234:   }",
          "235:   return builtLocally",
          "236:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:     return nil, fmt.Errorf(\"unable to find image %q\", id)",
          "226:    }",
          "228:    if compare(&img.ContainerConfig, config) {",
          "230:     if match == nil || match.Created.Before(img.Created) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:    if !isBuiltLocally(id) {",
          "248:     continue",
          "249:    }",
          "251:    imgPlatform := ocispec.Platform{",
          "252:     Architecture: img.Architecture,",
          "253:     OS:           img.OS,",
          "254:     OSVersion:    img.OSVersion,",
          "255:     OSFeatures:   img.OSFeatures,",
          "256:     Variant:      img.Variant,",
          "257:    }",
          "259:    if imgPlatform.OS == \"\" && imgPlatform.Architecture == \"\" {",
          "260:     continue",
          "261:    }",
          "262:    if !platforms.OnlyStrict(platform).Match(imgPlatform) {",
          "263:     continue",
          "264:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "239:  if imgID == \"\" {",
          "240:   images := imageStore.Map()",
          "241:   var siblings []image.ID",
          "242:   for id, img := range images {",
          "245:    }",
          "246:   }",
          "247:   return getMatch(siblings)",
          "248:  }",
          "",
          "[Removed Lines]",
          "243:    if img.Parent == imgID {",
          "244:     siblings = append(siblings, id)",
          "",
          "[Added Lines]",
          "282:    if img.Parent != \"\" {",
          "283:     continue",
          "286:    if !isBuiltLocally(id) {",
          "287:     continue",
          "288:    }",
          "297:    if !strSliceEqual(img.ContainerConfig.Cmd, config.Cmd) {",
          "298:     continue",
          "299:    }",
          "301:    siblings = append(siblings, id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "251:  siblings := imageStore.Children(imgID)",
          "252:  return getMatch(siblings)",
          "253: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: func strSliceEqual(a, b []string) bool {",
          "312:  if len(a) != len(b) {",
          "313:   return false",
          "314:  }",
          "315:  for i := 0; i < len(a); i++ {",
          "316:   if a[i] != b[i] {",
          "317:    return false",
          "318:   }",
          "319:  }",
          "320:  return true",
          "321: }",
          "",
          "---------------"
        ],
        "image/cache/compare.go||image/cache/compare.go": [
          "File: image/cache/compare.go -> image/cache/compare.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"github.com/docker/docker/api/types/container\"",
          "5: )",
          "9: func compare(a, b *container.Config) bool {",
          "12:   return false",
          "13:  }",
          "19:   return false",
          "20:  }",
          "28:   return false",
          "29:  }",
          "31:  for i := 0; i < len(a.Cmd); i++ {",
          "32:   if a.Cmd[i] != b.Cmd[i] {",
          "33:    return false",
          "34:   }",
          "35:  }",
          "38:    return false",
          "39:   }",
          "40:  }",
          "43:    return false",
          "44:   }",
          "45:  }",
          "",
          "[Removed Lines]",
          "10:  if a == nil || b == nil ||",
          "11:   a.OpenStdin || b.OpenStdin {",
          "14:  if a.AttachStdout != b.AttachStdout ||",
          "15:   a.AttachStderr != b.AttachStderr ||",
          "16:   a.User != b.User ||",
          "17:   a.OpenStdin != b.OpenStdin ||",
          "18:   a.Tty != b.Tty {",
          "22:  if len(a.Cmd) != len(b.Cmd) ||",
          "23:   len(a.Env) != len(b.Env) ||",
          "24:   len(a.Labels) != len(b.Labels) ||",
          "25:   len(a.ExposedPorts) != len(b.ExposedPorts) ||",
          "26:   len(a.Entrypoint) != len(b.Entrypoint) ||",
          "27:   len(a.Volumes) != len(b.Volumes) {",
          "36:  for i := 0; i < len(a.Env); i++ {",
          "37:   if a.Env[i] != b.Env[i] {",
          "41:  for k, v := range a.Labels {",
          "42:   if v != b.Labels[k] {",
          "",
          "[Added Lines]",
          "9: func CompareConfig(a, b *container.Config) bool {",
          "10:  return compare(a, b)",
          "11: }",
          "19:  if a == nil || b == nil {",
          "20:   return false",
          "21:  }",
          "23:  if len(a.Env) != len(b.Env) {",
          "26:  if len(a.Cmd) != len(b.Cmd) {",
          "29:  if len(a.Entrypoint) != len(b.Entrypoint) {",
          "30:   return false",
          "31:  }",
          "32:  if len(a.Shell) != len(b.Shell) {",
          "33:   return false",
          "34:  }",
          "35:  if len(a.ExposedPorts) != len(b.ExposedPorts) {",
          "36:   return false",
          "37:  }",
          "38:  if len(a.Volumes) != len(b.Volumes) {",
          "39:   return false",
          "40:  }",
          "41:  if len(a.Labels) != len(b.Labels) {",
          "42:   return false",
          "43:  }",
          "44:  if len(a.OnBuild) != len(b.OnBuild) {",
          "48:  for i := 0; i < len(a.Env); i++ {",
          "49:   if a.Env[i] != b.Env[i] {",
          "50:    return false",
          "51:   }",
          "52:  }",
          "53:  for i := 0; i < len(a.OnBuild); i++ {",
          "54:   if a.OnBuild[i] != b.OnBuild[i] {",
          "55:    return false",
          "56:   }",
          "57:  }",
          "63:  for i := 0; i < len(a.Entrypoint); i++ {",
          "64:   if a.Entrypoint[i] != b.Entrypoint[i] {",
          "68:  for i := 0; i < len(a.Shell); i++ {",
          "69:   if a.Shell[i] != b.Shell[i] {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:    return false",
          "49:   }",
          "50:  }",
          "54:    return false",
          "55:   }",
          "56:  }",
          "59:    return false",
          "60:   }",
          "61:  }",
          "62:  return true",
          "63: }",
          "",
          "[Removed Lines]",
          "52:  for i := 0; i < len(a.Entrypoint); i++ {",
          "53:   if a.Entrypoint[i] != b.Entrypoint[i] {",
          "57:  for key := range a.Volumes {",
          "58:   if _, exists := b.Volumes[key]; !exists {",
          "",
          "[Added Lines]",
          "78:  for key := range a.Volumes {",
          "79:   if _, exists := b.Volumes[key]; !exists {",
          "80:    return false",
          "81:   }",
          "82:  }",
          "83:  for k, v := range a.Labels {",
          "84:   if v != b.Labels[k] {",
          "85:    return false",
          "86:   }",
          "87:  }",
          "89:  if a.AttachStdin != b.AttachStdin {",
          "90:   return false",
          "91:  }",
          "92:  if a.AttachStdout != b.AttachStdout {",
          "93:   return false",
          "94:  }",
          "95:  if a.AttachStderr != b.AttachStderr {",
          "96:   return false",
          "97:  }",
          "98:  if a.NetworkDisabled != b.NetworkDisabled {",
          "99:   return false",
          "100:  }",
          "101:  if a.Tty != b.Tty {",
          "102:   return false",
          "103:  }",
          "104:  if a.OpenStdin != b.OpenStdin {",
          "105:   return false",
          "106:  }",
          "107:  if a.StdinOnce != b.StdinOnce {",
          "108:   return false",
          "109:  }",
          "110:  if a.ArgsEscaped != b.ArgsEscaped {",
          "111:   return false",
          "112:  }",
          "113:  if a.User != b.User {",
          "114:   return false",
          "115:  }",
          "116:  if a.WorkingDir != b.WorkingDir {",
          "117:   return false",
          "118:  }",
          "119:  if a.StopSignal != b.StopSignal {",
          "120:   return false",
          "121:  }",
          "123:  if (a.StopTimeout == nil) != (b.StopTimeout == nil) {",
          "124:   return false",
          "125:  }",
          "126:  if a.StopTimeout != nil && b.StopTimeout != nil {",
          "127:   if *a.StopTimeout != *b.StopTimeout {",
          "131:  if (a.Healthcheck == nil) != (b.Healthcheck == nil) {",
          "132:   return false",
          "133:  }",
          "134:  if a.Healthcheck != nil && b.Healthcheck != nil {",
          "135:   if a.Healthcheck.Interval != b.Healthcheck.Interval {",
          "138:   if a.Healthcheck.StartPeriod != b.Healthcheck.StartPeriod {",
          "139:    return false",
          "140:   }",
          "141:   if a.Healthcheck.Timeout != b.Healthcheck.Timeout {",
          "142:    return false",
          "143:   }",
          "144:   if a.Healthcheck.Retries != b.Healthcheck.Retries {",
          "145:    return false",
          "146:   }",
          "147:   if len(a.Healthcheck.Test) != len(b.Healthcheck.Test) {",
          "148:    return false",
          "149:   }",
          "150:   for i := 0; i < len(a.Healthcheck.Test); i++ {",
          "151:    if a.Healthcheck.Test[i] != b.Healthcheck.Test[i] {",
          "152:     return false",
          "153:    }",
          "154:   }",
          "",
          "---------------"
        ],
        "image/store.go||image/store.go": [
          "File: image/store.go -> image/store.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"sync\"",
          "6:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  GetParent(id ID) (ID, error)",
          "25:  SetLastUpdated(id ID) error",
          "26:  GetLastUpdated(id ID) (time.Time, error)",
          "27:  Children(id ID) []ID",
          "28:  Map() map[ID]*Image",
          "29:  Heads() map[ID]*Image",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:  SetBuiltLocally(id ID) error",
          "29:  IsBuiltLocally(id ID) (bool, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:  return time.Parse(time.RFC3339Nano, string(bytes))",
          "292: }",
          "294: func (is *store) Children(id ID) []ID {",
          "295:  is.RLock()",
          "296:  defer is.RUnlock()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298: func (is *store) SetBuiltLocally(id ID) error {",
          "299:  return is.fs.SetMetadata(id.Digest(), \"builtLocally\", []byte{1})",
          "300: }",
          "303: func (is *store) IsBuiltLocally(id ID) (bool, error) {",
          "304:  bytes, err := is.fs.GetMetadata(id.Digest(), \"builtLocally\")",
          "305:  if err != nil || len(bytes) == 0 {",
          "306:   if errors.Is(err, os.ErrNotExist) {",
          "307:    err = nil",
          "308:   }",
          "309:   return false, err",
          "310:  }",
          "311:  return bytes[0] == 1, nil",
          "312: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9e21b6bf16859a9de0b264e4bde659e56f358b2",
      "candidate_info": {
        "commit_hash": "e9e21b6bf16859a9de0b264e4bde659e56f358b2",
        "repo": "moby/moby",
        "commit_url": "https://github.com/moby/moby/commit/e9e21b6bf16859a9de0b264e4bde659e56f358b2",
        "files": [
          "image/cache/compare.go"
        ],
        "message": "image/cache: Compare all config fields\n\nAdd checks for some image config fields that were missing.\n\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>\n(cherry picked from commit 537348763faeb7adc515305e87910e11bdb14b00)\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>\n(cherry picked from commit 593b754d8f20947fc7532541d1c683f37e4aa8de)\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>",
        "before_after_code_files": [
          "image/cache/compare.go||image/cache/compare.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "image/cache/compare.go||image/cache/compare.go"
          ],
          "candidate": [
            "image/cache/compare.go||image/cache/compare.go"
          ]
        }
      },
      "candidate_diff": {
        "image/cache/compare.go||image/cache/compare.go": [
          "File: image/cache/compare.go -> image/cache/compare.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"github.com/docker/docker/api/types/container\"",
          "5: )",
          "9: func compare(a, b *container.Config) bool {",
          "12:   return false",
          "13:  }",
          "19:   return false",
          "20:  }",
          "28:   return false",
          "29:  }",
          "31:  for i := 0; i < len(a.Cmd); i++ {",
          "32:   if a.Cmd[i] != b.Cmd[i] {",
          "33:    return false",
          "34:   }",
          "35:  }",
          "38:    return false",
          "39:   }",
          "40:  }",
          "43:    return false",
          "44:   }",
          "45:  }",
          "",
          "[Removed Lines]",
          "10:  if a == nil || b == nil ||",
          "11:   a.OpenStdin || b.OpenStdin {",
          "14:  if a.AttachStdout != b.AttachStdout ||",
          "15:   a.AttachStderr != b.AttachStderr ||",
          "16:   a.User != b.User ||",
          "17:   a.OpenStdin != b.OpenStdin ||",
          "18:   a.Tty != b.Tty {",
          "22:  if len(a.Cmd) != len(b.Cmd) ||",
          "23:   len(a.Env) != len(b.Env) ||",
          "24:   len(a.Labels) != len(b.Labels) ||",
          "25:   len(a.ExposedPorts) != len(b.ExposedPorts) ||",
          "26:   len(a.Entrypoint) != len(b.Entrypoint) ||",
          "27:   len(a.Volumes) != len(b.Volumes) {",
          "36:  for i := 0; i < len(a.Env); i++ {",
          "37:   if a.Env[i] != b.Env[i] {",
          "41:  for k, v := range a.Labels {",
          "42:   if v != b.Labels[k] {",
          "",
          "[Added Lines]",
          "9: func CompareConfig(a, b *container.Config) bool {",
          "10:  return compare(a, b)",
          "11: }",
          "19:  if a == nil || b == nil {",
          "20:   return false",
          "21:  }",
          "23:  if len(a.Env) != len(b.Env) {",
          "26:  if len(a.Cmd) != len(b.Cmd) {",
          "29:  if len(a.Entrypoint) != len(b.Entrypoint) {",
          "30:   return false",
          "31:  }",
          "32:  if len(a.Shell) != len(b.Shell) {",
          "33:   return false",
          "34:  }",
          "35:  if len(a.ExposedPorts) != len(b.ExposedPorts) {",
          "36:   return false",
          "37:  }",
          "38:  if len(a.Volumes) != len(b.Volumes) {",
          "39:   return false",
          "40:  }",
          "41:  if len(a.Labels) != len(b.Labels) {",
          "42:   return false",
          "43:  }",
          "44:  if len(a.OnBuild) != len(b.OnBuild) {",
          "48:  for i := 0; i < len(a.Env); i++ {",
          "49:   if a.Env[i] != b.Env[i] {",
          "50:    return false",
          "51:   }",
          "52:  }",
          "53:  for i := 0; i < len(a.OnBuild); i++ {",
          "54:   if a.OnBuild[i] != b.OnBuild[i] {",
          "55:    return false",
          "56:   }",
          "57:  }",
          "63:  for i := 0; i < len(a.Entrypoint); i++ {",
          "64:   if a.Entrypoint[i] != b.Entrypoint[i] {",
          "68:  for i := 0; i < len(a.Shell); i++ {",
          "69:   if a.Shell[i] != b.Shell[i] {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:    return false",
          "49:   }",
          "50:  }",
          "54:    return false",
          "55:   }",
          "56:  }",
          "59:    return false",
          "60:   }",
          "61:  }",
          "62:  return true",
          "63: }",
          "",
          "[Removed Lines]",
          "52:  for i := 0; i < len(a.Entrypoint); i++ {",
          "53:   if a.Entrypoint[i] != b.Entrypoint[i] {",
          "57:  for key := range a.Volumes {",
          "58:   if _, exists := b.Volumes[key]; !exists {",
          "",
          "[Added Lines]",
          "78:  for key := range a.Volumes {",
          "79:   if _, exists := b.Volumes[key]; !exists {",
          "80:    return false",
          "81:   }",
          "82:  }",
          "83:  for k, v := range a.Labels {",
          "84:   if v != b.Labels[k] {",
          "85:    return false",
          "86:   }",
          "87:  }",
          "89:  if a.AttachStdin != b.AttachStdin {",
          "90:   return false",
          "91:  }",
          "92:  if a.AttachStdout != b.AttachStdout {",
          "93:   return false",
          "94:  }",
          "95:  if a.AttachStderr != b.AttachStderr {",
          "96:   return false",
          "97:  }",
          "98:  if a.NetworkDisabled != b.NetworkDisabled {",
          "99:   return false",
          "100:  }",
          "101:  if a.Tty != b.Tty {",
          "102:   return false",
          "103:  }",
          "104:  if a.OpenStdin != b.OpenStdin {",
          "105:   return false",
          "106:  }",
          "107:  if a.StdinOnce != b.StdinOnce {",
          "108:   return false",
          "109:  }",
          "110:  if a.ArgsEscaped != b.ArgsEscaped {",
          "111:   return false",
          "112:  }",
          "113:  if a.User != b.User {",
          "114:   return false",
          "115:  }",
          "116:  if a.WorkingDir != b.WorkingDir {",
          "117:   return false",
          "118:  }",
          "119:  if a.StopSignal != b.StopSignal {",
          "120:   return false",
          "121:  }",
          "123:  if (a.StopTimeout == nil) != (b.StopTimeout == nil) {",
          "124:   return false",
          "125:  }",
          "126:  if a.StopTimeout != nil && b.StopTimeout != nil {",
          "127:   if *a.StopTimeout != *b.StopTimeout {",
          "131:  if (a.Healthcheck == nil) != (b.Healthcheck == nil) {",
          "132:   return false",
          "133:  }",
          "134:  if a.Healthcheck != nil && b.Healthcheck != nil {",
          "135:   if a.Healthcheck.Interval != b.Healthcheck.Interval {",
          "136:    return false",
          "137:   }",
          "138:   if a.Healthcheck.StartInterval != b.Healthcheck.StartInterval {",
          "141:   if a.Healthcheck.StartPeriod != b.Healthcheck.StartPeriod {",
          "142:    return false",
          "143:   }",
          "144:   if a.Healthcheck.Timeout != b.Healthcheck.Timeout {",
          "145:    return false",
          "146:   }",
          "147:   if a.Healthcheck.Retries != b.Healthcheck.Retries {",
          "148:    return false",
          "149:   }",
          "150:   if len(a.Healthcheck.Test) != len(b.Healthcheck.Test) {",
          "151:    return false",
          "152:   }",
          "153:   for i := 0; i < len(a.Healthcheck.Test); i++ {",
          "154:    if a.Healthcheck.Test[i] != b.Healthcheck.Test[i] {",
          "155:     return false",
          "156:    }",
          "157:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5eebf9e1938bf0097ed205ccdbf18ebd214bece",
      "candidate_info": {
        "commit_hash": "d5eebf9e1938bf0097ed205ccdbf18ebd214bece",
        "repo": "moby/moby",
        "commit_url": "https://github.com/moby/moby/commit/d5eebf9e1938bf0097ed205ccdbf18ebd214bece",
        "files": [
          "builder/dockerfile/dispatchers.go"
        ],
        "message": "builder/windows: Don't set ArgsEscaped for RUN cache probe\n\nPreviously this was done indirectly - the `compare` function didn't\ncheck the `ArgsEscaped`.\n\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>\n(cherry picked from commit 96d461d27e8da97b64620c94a4a1b2448511c058)\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>",
        "before_after_code_files": [
          "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go"
          ],
          "candidate": [
            "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go"
          ]
        }
      },
      "candidate_diff": {
        "builder/dockerfile/dispatchers.go||builder/dockerfile/dispatchers.go": [
          "File: builder/dockerfile/dispatchers.go -> builder/dockerfile/dispatchers.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:   saveCmd = prependEnvOnCmd(d.state.buildArgs, buildArgs, cmdFromArgs)",
          "349:  }",
          "351:  runConfigForCacheProbe := copyRunConfig(stateRunConfig,",
          "352:   withCmd(saveCmd),",
          "354:   withEntrypointOverride(saveCmd, nil))",
          "355:  if hit, err := d.builder.probeCache(d.state, runConfigForCacheProbe); err != nil || hit {",
          "356:   return err",
          "",
          "[Removed Lines]",
          "353:   withArgsEscaped(argsEscaped),",
          "",
          "[Added Lines]",
          "351:  cacheArgsEscaped := argsEscaped",
          "354:  if d.state.operatingSystem == \"windows\" {",
          "355:   cacheArgsEscaped = stateRunConfig.ArgsEscaped",
          "356:  }",
          "360:   withArgsEscaped(cacheArgsEscaped),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75c70b08b5db9cad2342061acfda64d61c9edcd5",
      "candidate_info": {
        "commit_hash": "75c70b08b5db9cad2342061acfda64d61c9edcd5",
        "repo": "moby/moby",
        "commit_url": "https://github.com/moby/moby/commit/75c70b08b5db9cad2342061acfda64d61c9edcd5",
        "files": [
          "image/cache/cache.go"
        ],
        "message": "image/cache: Restrict cache candidates to locally built images\n\nRestrict cache candidates only to images that were built locally.\nThis doesn't affect builds using `--cache-from`.\n\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>\n(cherry picked from commit 96ac22768a8a745b1fb5e4531eaca8d2ad7327ad)\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>\n(cherry picked from commit 17af50f46bfdbcb3af9d1f327adcbc8ce73e539d)\nSigned-off-by: Pawe\u0142 Gronowski <pawel.gronowski@docker.com>",
        "before_after_code_files": [
          "image/cache/cache.go||image/cache/cache.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "image/cache/cache.go||image/cache/cache.go"
          ],
          "candidate": [
            "image/cache/cache.go||image/cache/cache.go"
          ]
        }
      },
      "candidate_diff": {
        "image/cache/cache.go||image/cache/cache.go": [
          "File: image/cache/cache.go -> image/cache/cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package cache // import \"github.com/docker/docker/image/cache\"",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"fmt\"",
          "6:  \"reflect\"",
          "7:  \"strings\"",
          "9:  containertypes \"github.com/docker/docker/api/types/container\"",
          "10:  \"github.com/docker/docker/dockerversion\"",
          "11:  \"github.com/docker/docker/image\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:  \"context\"",
          "10:  \"github.com/containerd/log\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218: func getLocalCachedImage(imageStore image.Store, imgID image.ID, config *containertypes.Config) (*image.Image, error) {",
          "220:  getMatch := func(siblings []image.ID) (*image.Image, error) {",
          "221:   var match *image.Image",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:  if config == nil {",
          "222:   return nil, nil",
          "223:  }",
          "225:  isBuiltLocally := func(id image.ID) bool {",
          "226:   builtLocally, err := imageStore.IsBuiltLocally(id)",
          "227:   if err != nil {",
          "228:    log.G(context.TODO()).WithFields(log.Fields{",
          "229:     \"error\": err,",
          "230:     \"id\":    id,",
          "231:    }).Warn(\"failed to check if image was built locally\")",
          "232:    return false",
          "233:   }",
          "234:   return builtLocally",
          "235:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:     return nil, fmt.Errorf(\"unable to find image %q\", id)",
          "226:    }",
          "228:    if compare(&img.ContainerConfig, config) {",
          "230:     if match == nil || match.Created.Before(img.Created) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:    if !isBuiltLocally(id) {",
          "247:     continue",
          "248:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:  if imgID == \"\" {",
          "240:   images := imageStore.Map()",
          "241:   var siblings []image.ID",
          "242:   for id, img := range images {",
          "245:    }",
          "246:   }",
          "247:   return getMatch(siblings)",
          "248:  }",
          "",
          "[Removed Lines]",
          "243:    if img.Parent == imgID {",
          "244:     siblings = append(siblings, id)",
          "",
          "[Added Lines]",
          "266:    if img.Parent != \"\" {",
          "267:     continue",
          "268:    }",
          "270:    if !isBuiltLocally(id) {",
          "271:     continue",
          "281:    if !strSliceEqual(img.ContainerConfig.Cmd, config.Cmd) {",
          "282:     continue",
          "283:    }",
          "285:    siblings = append(siblings, id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251:  siblings := imageStore.Children(imgID)",
          "252:  return getMatch(siblings)",
          "253: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: func strSliceEqual(a, b []string) bool {",
          "296:  if len(a) != len(b) {",
          "297:   return false",
          "298:  }",
          "299:  for i := 0; i < len(a); i++ {",
          "300:   if a[i] != b[i] {",
          "301:    return false",
          "302:   }",
          "303:  }",
          "304:  return true",
          "305: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}