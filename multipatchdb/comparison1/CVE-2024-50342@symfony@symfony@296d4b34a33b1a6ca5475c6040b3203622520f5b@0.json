{
  "cve_id": "CVE-2024-50342",
  "cve_desc": "symfony/http-client is a module for the Symphony PHP framework which provides powerful methods to fetch HTTP resources synchronously or asynchronously. When using the `NoPrivateNetworkHttpClient`, some internal information is still leaking during host resolution, which leads to possible IP/port enumeration. As of versions 5.4.46, 6.4.14, and 7.1.7 the `NoPrivateNetworkHttpClient` now filters blocked IPs earlier to prevent such leaks. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "symfony/symfony",
  "patch_hash": "296d4b34a33b1a6ca5475c6040b3203622520f5b",
  "patch_info": {
    "commit_hash": "296d4b34a33b1a6ca5475c6040b3203622520f5b",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/296d4b34a33b1a6ca5475c6040b3203622520f5b",
    "files": [
      "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
      "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
    ],
    "message": "[HttpClient] Filter private IPs before connecting when Host == IP",
    "before_after_code_files": [
      "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
      "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php": [
      "File: src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php -> src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:         }",
      "79:         $subnets = $this->subnets;",
      "80:         $lastPrimaryIp = '';",
      "83:             if ($info['primary_ip'] !== $lastPrimaryIp) {",
      "84:                 if ($info['primary_ip'] && IpUtils::checkIp($info['primary_ip'], $subnets ?? self::PRIVATE_SUBNETS)) {",
      "85:                     throw new TransportException(sprintf('IP \"%s\" is blocked for \"%s\".', $info['primary_ip'], $info['url']));",
      "",
      "[Removed Lines]",
      "82:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use ($onProgress, $subnets, &$lastPrimaryIp): void {",
      "",
      "[Added Lines]",
      "80:         $lastUrl = '';",
      "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
      "84:             if ($info['url'] !== $lastUrl) {",
      "85:                 $host = trim(parse_url($info['url'], PHP_URL_HOST) ?: '', '[]');",
      "87:                 if ($host && IpUtils::checkIp($host, $subnets ?? self::PRIVATE_SUBNETS)) {",
      "88:                     throw new TransportException(sprintf('Host \"%s\" is blocked for \"%s\".', $host, $info['url']));",
      "89:                 }",
      "91:                 $lastUrl = $info['url'];",
      "92:             }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php": [
      "File: src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:     {",
      "70:         $content = 'foo';",
      "73:         if ($mustThrow) {",
      "74:             $this->expectException(TransportException::class);",
      "",
      "[Removed Lines]",
      "68:     public function testExclude(string $ipAddr, $subnets, bool $mustThrow)",
      "71:         $url = sprintf('http://%s/', 0 < substr_count($ipAddr, ':') ? sprintf('[%s]', $ipAddr) : $ipAddr);",
      "",
      "[Added Lines]",
      "68:     public function testExcludeByIp(string $ipAddr, $subnets, bool $mustThrow)",
      "71:         $url = sprintf('http://%s/', strtr($ipAddr, '.:', '--'));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:         }",
      "86:     }",
      "88:     public function testCustomOnProgressCallback()",
      "89:     {",
      "90:         $ipAddr = '104.26.14.6';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:         }",
      "86:     }",
      "91:     public function testExcludeByHost(string $ipAddr, $subnets, bool $mustThrow)",
      "92:     {",
      "93:         $content = 'foo';",
      "94:         $url = sprintf('http://%s/', str_contains($ipAddr, ':') ? sprintf('[%s]', $ipAddr) : $ipAddr);",
      "96:         if ($mustThrow) {",
      "97:             $this->expectException(TransportException::class);",
      "98:             $this->expectExceptionMessage(sprintf('Host \"%s\" is blocked for \"%s\".', $ipAddr, $url));",
      "99:         }",
      "101:         $previousHttpClient = $this->getHttpClientMock($url, $ipAddr, $content);",
      "102:         $client = new NoPrivateNetworkHttpClient($previousHttpClient, $subnets);",
      "103:         $response = $client->request('GET', $url);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "134eab23df3343e6eb1cfb1e840401aea662e25b",
      "candidate_info": {
        "commit_hash": "134eab23df3343e6eb1cfb1e840401aea662e25b",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/134eab23df3343e6eb1cfb1e840401aea662e25b",
        "files": [
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php"
        ],
        "message": "fix PHP 7.2 compatibility",
        "before_after_code_files": [
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php -> src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
          "84:             if ($info['url'] !== $lastUrl) {",
          "85:                 $host = trim(parse_url($info['url'], PHP_URL_HOST) ?: '', '[]');",
          "88:                 if (($ip = $host)",
          "89:                     && !filter_var($ip, \\FILTER_VALIDATE_IP, \\FILTER_FLAG_IPV6)",
          "",
          "[Removed Lines]",
          "86:                 $resolve ??= static fn () => null;",
          "",
          "[Added Lines]",
          "87:                 if (null === $resolve) {",
          "88:                     $resolve = static function () { return null; };",
          "89:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01153f275dec086202095c5d2b60dee88094dc33",
      "candidate_info": {
        "commit_hash": "01153f275dec086202095c5d2b60dee88094dc33",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/01153f275dec086202095c5d2b60dee88094dc33",
        "files": [
          "src/Symfony/Component/HttpClient/CurlHttpClient.php",
          "src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "src/Symfony/Component/HttpClient/Response/AsyncContext.php",
          "src/Symfony/Component/HttpClient/Response/AsyncResponse.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php",
          "src/Symfony/Component/HttpClient/TraceableHttpClient.php",
          "src/Symfony/Contracts/HttpClient/HttpClientInterface.php"
        ],
        "message": "[HttpClient] Various cleanups after recent changes",
        "before_after_code_files": [
          "src/Symfony/Component/HttpClient/CurlHttpClient.php||src/Symfony/Component/HttpClient/CurlHttpClient.php",
          "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/AmpResponse.php||src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "src/Symfony/Component/HttpClient/Response/AsyncContext.php||src/Symfony/Component/HttpClient/Response/AsyncContext.php",
          "src/Symfony/Component/HttpClient/Response/AsyncResponse.php||src/Symfony/Component/HttpClient/Response/AsyncResponse.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php",
          "src/Symfony/Component/HttpClient/TraceableHttpClient.php||src/Symfony/Component/HttpClient/TraceableHttpClient.php",
          "src/Symfony/Contracts/HttpClient/HttpClientInterface.php||src/Symfony/Contracts/HttpClient/HttpClientInterface.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
            "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
            "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpClient/CurlHttpClient.php||src/Symfony/Component/HttpClient/CurlHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/CurlHttpClient.php -> src/Symfony/Component/HttpClient/CurlHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:             }",
          "422:         }",
          "425:             try {",
          "427:                 $location = self::parseUrl($location);",
          "428:                 $url = self::parseUrl(curl_getinfo($ch, \\CURLINFO_EFFECTIVE_URL));",
          "429:                 $url = self::resolveUrl($location, $url);",
          "",
          "[Removed Lines]",
          "424:         return static function ($ch, string $location, bool $noContent, bool &$locationHasHost) use (&$redirectHeaders, $options) {",
          "426:                 $locationHasHost = false;",
          "",
          "[Added Lines]",
          "424:         return static function ($ch, string $location, bool $noContent) use (&$redirectHeaders, $options) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:                 $redirectHeaders['with_auth'] = array_filter($redirectHeaders['with_auth'], $filterContentHeaders);",
          "440:             }",
          "445:                 $requestHeaders = parse_url($location['authority'], \\PHP_URL_HOST) === $redirectHeaders['host'] ? $redirectHeaders['with_auth'] : $redirectHeaders['no_auth'];",
          "446:                 curl_setopt($ch, \\CURLOPT_HTTPHEADER, $requestHeaders);",
          "447:             } elseif ($noContent && $redirectHeaders) {",
          "",
          "[Removed Lines]",
          "442:             $locationHasHost = isset($location['authority']);",
          "444:             if ($redirectHeaders && $locationHasHost) {",
          "",
          "[Added Lines]",
          "441:             if ($redirectHeaders && isset($location['authority'])) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NativeHttpClient.php -> src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:                 $progressInfo = $info;",
          "158:                 $progressInfo['url'] = implode('', $info['url']);",
          "159:                 unset($progressInfo['size_body']);",
          "161:                 if ($progress && -1 === $progress[0]) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:                 $progressInfo['resolve'] = $resolve;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:                     $lastProgress = $progress ?: $lastProgress;",
          "166:                 }",
          "169:             };",
          "170:         } elseif (0 < $options['max_duration']) {",
          "171:             $maxDuration = $options['max_duration'];",
          "",
          "[Removed Lines]",
          "168:                 $onProgress($lastProgress[0], $lastProgress[1], $progressInfo, $resolve);",
          "",
          "[Added Lines]",
          "169:                 $onProgress($lastProgress[0], $lastProgress[1], $progressInfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:             $multi->dnsCache[$host] = $ip = $ip[0];",
          "350:             $info['debug'] .= \"* Added {$host}:0:{$ip} to DNS cache\\n\";",
          "351:         } else {",
          "352:             $info['debug'] .= \"* Hostname was found in DNS cache\\n\";",
          "353:             $host = str_contains($ip, ':') ? \"[$ip]\" : $ip;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:             $host = $ip;",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php -> src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         $lastUrl = '';",
          "81:         $lastPrimaryIp = '';",
          "84:             if ($info['url'] !== $lastUrl) {",
          "95:                 ) {",
          "101:                 }",
          "103:                 if ($ip && IpUtils::checkIp($ip, $subnets ?? self::PRIVATE_SUBNETS)) {",
          "",
          "[Removed Lines]",
          "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
          "85:                 $host = trim(parse_url($info['url'], PHP_URL_HOST) ?: '', '[]');",
          "87:                 if (null === $resolve) {",
          "88:                     $resolve = static function () { return null; };",
          "89:                 }",
          "91:                 if (($ip = $host)",
          "92:                     && !filter_var($ip, \\FILTER_VALIDATE_IP, \\FILTER_FLAG_IPV6)",
          "93:                     && !filter_var($ip, \\FILTER_VALIDATE_IP, \\FILTER_FLAG_IPV4)",
          "94:                     && !$ip = $resolve($host)",
          "96:                     if ($ip = @(dns_get_record($host, \\DNS_A)[0]['ip'] ?? null)) {",
          "97:                         $resolve($host, $ip);",
          "98:                     } elseif ($ip = @(dns_get_record($host, \\DNS_AAAA)[0]['ipv6'] ?? null)) {",
          "99:                         $resolve($host, '['.$ip.']');",
          "100:                     }",
          "",
          "[Added Lines]",
          "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
          "85:                 $host = parse_url($info['url'], PHP_URL_HOST) ?: '';",
          "86:                 $resolve = $info['resolve'] ?? static function () { return null; };",
          "88:                 if (($ip = trim($host, '[]'))",
          "89:                     && !filter_var($ip, \\FILTER_VALIDATE_IP)",
          "90:                     && !($ip = $resolve($host))",
          "91:                     && $ip = @(gethostbynamel($host)[0] ?? dns_get_record($host, \\DNS_AAAA)[0]['ipv6'] ?? null)",
          "93:                     $resolve($host, $ip);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AmpResponse.php||src/Symfony/Component/HttpClient/Response/AmpResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/AmpResponse.php -> src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         $onProgress = $options['on_progress'] ?? static function () {};",
          "100:         $onProgress = $this->onProgress = static function () use (&$info, $onProgress, $resolve) {",
          "101:             $info['total_time'] = microtime(true) - $info['start_time'];",
          "103:         };",
          "105:         $pauseDeferred = new Deferred();",
          "",
          "[Removed Lines]",
          "102:             $onProgress((int) $info['size_download'], ((int) (1 + $info['download_content_length']) ?: 1) - 1, (array) $info, $resolve);",
          "",
          "[Added Lines]",
          "102:             $info['resolve'] = $resolve;",
          "103:             $onProgress((int) $info['size_download'], ((int) (1 + $info['download_content_length']) ?: 1) - 1, (array) $info);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AsyncContext.php||src/Symfony/Component/HttpClient/Response/AsyncContext.php": [
          "File: src/Symfony/Component/HttpClient/Response/AsyncContext.php -> src/Symfony/Component/HttpClient/Response/AsyncContext.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         $this->info['previous_info'][] = $info = $this->response->getInfo();",
          "157:         if (null !== $onProgress = $options['on_progress'] ?? null) {",
          "158:             $thisInfo = &$this->info;",
          "161:             };",
          "162:         }",
          "163:         if (0 < ($info['max_duration'] ?? 0) && 0 < ($info['total_time'] ?? 0)) {",
          "",
          "[Removed Lines]",
          "159:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use (&$thisInfo, $onProgress) {",
          "160:                 $onProgress($dlNow, $dlSize, $thisInfo + $info, $resolve);",
          "",
          "[Added Lines]",
          "159:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info) use (&$thisInfo, $onProgress) {",
          "160:                 $onProgress($dlNow, $dlSize, $thisInfo + $info);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AsyncResponse.php||src/Symfony/Component/HttpClient/Response/AsyncResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/AsyncResponse.php -> src/Symfony/Component/HttpClient/Response/AsyncResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         if (null !== $onProgress = $options['on_progress'] ?? null) {",
          "53:             $thisInfo = &$this->info;",
          "56:             };",
          "57:         }",
          "58:         $this->response = $client->request($method, $url, ['buffer' => false] + $options);",
          "",
          "[Removed Lines]",
          "54:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use (&$thisInfo, $onProgress) {",
          "55:                 $onProgress($dlNow, $dlSize, $thisInfo + $info, $resolve);",
          "",
          "[Added Lines]",
          "54:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info) use (&$thisInfo, $onProgress) {",
          "55:                 $onProgress($dlNow, $dlSize, $thisInfo + $info);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     public function getInfo(?string $type = null)",
          "119:     {",
          "120:         if (null !== $type) {",
          "121:             return $this->info[$type] ?? $this->response->getInfo($type);",
          "122:         }",
          "125:     }",
          "127:     public function toStream(bool $throw = true)",
          "",
          "[Removed Lines]",
          "124:         return $this->info + $this->response->getInfo();",
          "",
          "[Added Lines]",
          "120:         if ('debug' === ($type ?? 'debug')) {",
          "121:             $debug = implode('', array_column($this->info['previous_info'] ?? [], 'debug'));",
          "122:             $debug .= $this->response->getInfo('debug');",
          "124:             if ('debug' === $type) {",
          "125:                 return $debug;",
          "126:             }",
          "127:         }",
          "133:         return array_merge($this->info + $this->response->getInfo(), ['debug' => $debug]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:                 return;",
          "250:             }",
          "252:             foreach ($client->stream($wrappedResponses, $timeout) as $response => $chunk) {",
          "253:                 $r = $asyncMap[$response];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:             $chunk = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291:                 }",
          "292:             }",
          "294:             if (null === $chunk->getError() && $chunk->isLast()) {",
          "295:                 $r->yieldedState = self::LAST_CHUNK_YIELDED;",
          "296:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:             if (null === $chunk) {",
          "305:                 throw new \\LogicException(\\sprintf('\"%s\" is not compliant with HttpClientInterface: its \"stream()\" method didn\\'t yield any chunks when it should have.', get_debug_type($client)));",
          "306:             }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/CurlResponse.php -> src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:                 try {",
          "129:                     rewind($debugBuffer);",
          "130:                     $debug = ['debug' => stream_get_contents($debugBuffer)];",
          "132:                 } catch (\\Throwable $e) {",
          "133:                     $multi->handlesActivity[(int) $ch][] = null;",
          "134:                     $multi->handlesActivity[(int) $ch][] = $e;",
          "",
          "[Removed Lines]",
          "131:                     $onProgress($dlNow, $dlSize, $url + curl_getinfo($ch) + $info + $debug, $resolve);",
          "",
          "[Added Lines]",
          "131:                     $onProgress($dlNow, $dlSize, $url + curl_getinfo($ch) + $info + $debug + ['resolve' => $resolve]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:                 $info['http_method'] = 'HEAD' === $info['http_method'] ? 'HEAD' : 'GET';",
          "437:                 curl_setopt($ch, \\CURLOPT_CUSTOMREQUEST, $info['http_method']);",
          "438:             }",
          "442:                 $options['max_redirects'] = curl_getinfo($ch, \\CURLINFO_REDIRECT_COUNT);",
          "443:                 curl_setopt($ch, \\CURLOPT_FOLLOWLOCATION, false);",
          "444:                 curl_setopt($ch, \\CURLOPT_MAXREDIRS, $options['max_redirects']);",
          "454:             }",
          "455:         }",
          "",
          "[Removed Lines]",
          "439:             $locationHasHost = false;",
          "441:             if (null === $info['redirect_url'] = $resolveRedirect($ch, $location, $noContent, $locationHasHost)) {",
          "445:             } elseif ($locationHasHost) {",
          "446:                 $url = parse_url($info['redirect_url']);",
          "448:                 if (null !== $ip = $multi->dnsCache->hostnames[$url['host'] = strtolower($url['host'])] ?? null) {",
          "450:                     $port = $url['port'] ?? ('http' === $url['scheme'] ? 80 : 443);",
          "451:                     curl_setopt($ch, \\CURLOPT_RESOLVE, [\"{$url['host']}:$port:$ip\"]);",
          "452:                     $multi->dnsCache->removals[\"-{$url['host']}:$port\"] = \"-{$url['host']}:$port\";",
          "453:                 }",
          "",
          "[Added Lines]",
          "440:             if (null === $info['redirect_url'] = $resolveRedirect($ch, $location, $noContent)) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:             $this->expectExceptionMessage(sprintf('IP \"%s\" is blocked for \"%s\".', $ipAddr, $url));",
          "76:         }",
          "79:         $client = new NoPrivateNetworkHttpClient($previousHttpClient, $subnets);",
          "80:         $response = $client->request('GET', $url);",
          "",
          "[Removed Lines]",
          "78:         $previousHttpClient = $this->getHttpClientMock($url, $ipAddr, $content);",
          "",
          "[Added Lines]",
          "78:         $previousHttpClient = $this->getMockHttpClient($ipAddr, $content);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     public function testExcludeByHost(string $ipAddr, $subnets, bool $mustThrow)",
          "92:     {",
          "93:         $content = 'foo';",
          "96:         if ($mustThrow) {",
          "97:             $this->expectException(TransportException::class);",
          "99:         }",
          "102:         $client = new NoPrivateNetworkHttpClient($previousHttpClient, $subnets);",
          "103:         $response = $client->request('GET', $url);",
          "",
          "[Removed Lines]",
          "94:         $url = sprintf('http://%s/', str_contains($ipAddr, ':') ? sprintf('[%s]', $ipAddr) : $ipAddr);",
          "98:             $this->expectExceptionMessage(sprintf('Host \"%s\" is blocked for \"%s\".', $ipAddr, $url));",
          "101:         $previousHttpClient = $this->getHttpClientMock($url, $ipAddr, $content);",
          "",
          "[Added Lines]",
          "94:         $host = str_contains($ipAddr, ':') ? sprintf('[%s]', $ipAddr) : $ipAddr;",
          "95:         $url = sprintf('http://%s/', $host);",
          "99:             $this->expectExceptionMessage(sprintf('Host \"%s\" is blocked for \"%s\".', $host, $url));",
          "102:         $previousHttpClient = $this->getMockHttpClient($ipAddr, $content);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:             ++$executionCount;",
          "120:         };",
          "123:         $client = new NoPrivateNetworkHttpClient($previousHttpClient);",
          "124:         $response = $client->request('GET', $url, ['on_progress' => $customCallback]);",
          "",
          "[Removed Lines]",
          "122:         $previousHttpClient = $this->getHttpClientMock($url, $ipAddr, $content);",
          "",
          "[Added Lines]",
          "123:         $previousHttpClient = $this->getMockHttpClient($ipAddr, $content);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:     {",
          "133:         $ipAddr = '104.26.14.6';",
          "134:         $url = sprintf('http://%s/', $ipAddr);",
          "136:         $customCallback = sprintf('cb_%s', microtime(true));",
          "138:         $this->expectException(InvalidArgumentException::class);",
          "",
          "[Removed Lines]",
          "135:         $content = 'bar';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:         new NoPrivateNetworkHttpClient(new MockHttpClient(), 3);",
          "151:     }",
          "154:     {",
          "186:     }",
          "187: }",
          "",
          "[Removed Lines]",
          "153:     private function getHttpClientMock(string $url, string $ipAddr, string $content)",
          "155:         $previousHttpClient = $this",
          "156:             ->getMockBuilder(HttpClientInterface::class)",
          "157:             ->getMock();",
          "159:         $previousHttpClient",
          "160:             ->expects($this->once())",
          "161:             ->method('request')",
          "162:             ->with(",
          "163:                 'GET',",
          "164:                 $url,",
          "165:                 $this->callback(function ($options) {",
          "166:                     $this->assertArrayHasKey('on_progress', $options);",
          "167:                     $onProgress = $options['on_progress'];",
          "168:                     $this->assertIsCallable($onProgress);",
          "170:                     return true;",
          "171:                 })",
          "172:             )",
          "173:             ->willReturnCallback(function ($method, $url, $options) use ($ipAddr, $content): ResponseInterface {",
          "174:                 $info = [",
          "175:                     'primary_ip' => $ipAddr,",
          "176:                     'url' => $url,",
          "177:                 ];",
          "179:                 $onProgress = $options['on_progress'];",
          "180:                 $onProgress(0, 0, $info);",
          "182:                 return MockResponse::fromRequest($method, $url, [], new MockResponse($content));",
          "183:             });",
          "185:         return $previousHttpClient;",
          "",
          "[Added Lines]",
          "153:     private function getMockHttpClient(string $ipAddr, string $content)",
          "155:         return new MockHttpClient(new MockResponse($content, ['primary_ip' => $ipAddr]));",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/TraceableHttpClient.php||src/Symfony/Component/HttpClient/TraceableHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/TraceableHttpClient.php -> src/Symfony/Component/HttpClient/TraceableHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:             $content = false;",
          "59:         }",
          "62:             $traceInfo = $info;",
          "64:             if (null !== $onProgress) {",
          "66:             }",
          "67:         };",
          "",
          "[Removed Lines]",
          "61:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use (&$traceInfo, $onProgress) {",
          "65:                 $onProgress($dlNow, $dlSize, $info, $resolve);",
          "",
          "[Added Lines]",
          "61:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use (&$traceInfo, $onProgress) {",
          "65:                 $onProgress($dlNow, $dlSize, $info);",
          "",
          "---------------"
        ],
        "src/Symfony/Contracts/HttpClient/HttpClientInterface.php||src/Symfony/Contracts/HttpClient/HttpClientInterface.php": [
          "File: src/Symfony/Contracts/HttpClient/HttpClientInterface.php -> src/Symfony/Contracts/HttpClient/HttpClientInterface.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         'buffer' => true,       // bool|resource|\\Closure - whether the content of the response should be buffered or not,",
          "56:         'resolve' => [],        // string[] - a map of host to IP address that SHOULD replace DNS resolution",
          "57:         'proxy' => null,        // string - by default, the proxy-related env vars handled by curl SHOULD be honored",
          "58:         'no_proxy' => null,     // string - a comma separated list of hosts that do not require a proxy to be reached",
          "",
          "[Removed Lines]",
          "51:         'on_progress' => null,  // callable(int $dlNow, int $dlSize, array $info, ?Closure $resolve = null) - throwing any",
          "",
          "[Added Lines]",
          "51:         'on_progress' => null,  // callable(int $dlNow, int $dlSize, array $info) - throwing any exceptions MUST abort the",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90e6b7e4f3e4bd003d572662095251c9fb6631af",
      "candidate_info": {
        "commit_hash": "90e6b7e4f3e4bd003d572662095251c9fb6631af",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/90e6b7e4f3e4bd003d572662095251c9fb6631af",
        "files": [
          "src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php",
          "src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php",
          "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
        ],
        "message": "[HttpClient] Fix checking for private IPs before connecting",
        "before_after_code_files": [
          "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/AmpResponse.php||src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php",
          "src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php||src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php",
          "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
            "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
            "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NativeHttpClient.php -> src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:             $lastProgress = [0, 0];",
          "143:             $maxDuration = 0 < $options['max_duration'] ? $options['max_duration'] : \\INF;",
          "153:                 if ($info['total_time'] >= $maxDuration) {",
          "154:                     throw new TransportException(sprintf('Max duration was reached for \"%s\".', implode('', $info['url'])));",
          "155:                 }",
          "157:                 $progressInfo = $info;",
          "158:                 $progressInfo['url'] = implode('', $info['url']);",
          "160:                 unset($progressInfo['size_body']);",
          "162:                 if ($progress && -1 === $progress[0]) {",
          "",
          "[Removed Lines]",
          "144:             $multi = $this->multi;",
          "145:             $resolve = static function (string $host, ?string $ip = null) use ($multi): ?string {",
          "146:                 if (null !== $ip) {",
          "147:                     $multi->dnsCache[$host] = $ip;",
          "148:                 }",
          "150:                 return $multi->dnsCache[$host] ?? null;",
          "151:             };",
          "152:             $onProgress = static function (...$progress) use ($onProgress, &$lastProgress, &$info, $maxDuration, $resolve) {",
          "159:                 $progressInfo['resolve'] = $resolve;",
          "",
          "[Added Lines]",
          "144:             $onProgress = static function (...$progress) use ($onProgress, &$lastProgress, &$info, $maxDuration) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php -> src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use Psr\\Log\\LoggerAwareInterface;",
          "15: use Psr\\Log\\LoggerInterface;",
          "17: use Symfony\\Component\\HttpClient\\Exception\\TransportException;",
          "18: use Symfony\\Component\\HttpFoundation\\IpUtils;",
          "19: use Symfony\\Contracts\\HttpClient\\HttpClientInterface;",
          "20: use Symfony\\Contracts\\HttpClient\\ResponseInterface;",
          "21: use Symfony\\Contracts\\HttpClient\\ResponseStreamInterface;",
          "",
          "[Removed Lines]",
          "16: use Symfony\\Component\\HttpClient\\Exception\\InvalidArgumentException;",
          "",
          "[Added Lines]",
          "17: use Symfony\\Component\\HttpClient\\Response\\AsyncContext;",
          "18: use Symfony\\Component\\HttpClient\\Response\\AsyncResponse;",
          "20: use Symfony\\Contracts\\HttpClient\\ChunkInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: final class NoPrivateNetworkHttpClient implements HttpClientInterface, LoggerAwareInterface, ResetInterface",
          "30: {",
          "31:     use HttpClientTrait;",
          "33:     private const PRIVATE_SUBNETS = [",
          "34:         '127.0.0.0/8',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     use AsyncDecoratorTrait;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:         '::/128',",
          "46:     ];",
          "48:     private $client;",
          "49:     private $subnets;",
          "55:     public function __construct(HttpClientInterface $client, $subnets = null)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     private $defaultOptions = self::OPTIONS_DEFAULTS;",
          "55:     private $ipFlags;",
          "56:     private $dnsCache;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:             throw new \\LogicException(sprintf('You cannot use \"%s\" if the HttpFoundation component is not installed. Try running \"composer require symfony/http-foundation\".', __CLASS__));",
          "63:         }",
          "65:         $this->client = $client;",
          "67:     }",
          "",
          "[Removed Lines]",
          "66:         $this->subnets = $subnets;",
          "",
          "[Added Lines]",
          "72:         if (null === $subnets) {",
          "73:             $ipFlags = \\FILTER_FLAG_IPV4 | \\FILTER_FLAG_IPV6;",
          "74:         } else {",
          "75:             $ipFlags = 0;",
          "76:             foreach ((array) $subnets as $subnet) {",
          "77:                 $ipFlags |= str_contains($subnet, ':') ? \\FILTER_FLAG_IPV6 : \\FILTER_FLAG_IPV4;",
          "78:             }",
          "79:         }",
          "81:         if (!\\defined('STREAM_PF_INET6')) {",
          "82:             $ipFlags &= ~\\FILTER_FLAG_IPV6;",
          "83:         }",
          "86:         $this->subnets = null !== $subnets ? (array) $subnets : null;",
          "87:         $this->ipFlags = $ipFlags;",
          "88:         $this->dnsCache = new \\ArrayObject();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "72:     public function request(string $method, string $url, array $options = []): ResponseInterface",
          "73:     {",
          "101:             }",
          "108:                 $lastPrimaryIp = $info['primary_ip'];",
          "109:             }",
          "111:             null !== $onProgress && $onProgress($dlNow, $dlSize, $info);",
          "112:         };",
          "115:     }",
          "",
          "[Removed Lines]",
          "74:         $onProgress = $options['on_progress'] ?? null;",
          "75:         if (null !== $onProgress && !\\is_callable($onProgress)) {",
          "76:             throw new InvalidArgumentException(sprintf('Option \"on_progress\" must be callable, \"%s\" given.', get_debug_type($onProgress)));",
          "77:         }",
          "79:         $subnets = $this->subnets;",
          "80:         $lastUrl = '';",
          "81:         $lastPrimaryIp = '';",
          "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
          "84:             if ($info['url'] !== $lastUrl) {",
          "85:                 $host = parse_url($info['url'], PHP_URL_HOST) ?: '';",
          "86:                 $resolve = $info['resolve'] ?? static function () { return null; };",
          "88:                 if (($ip = trim($host, '[]'))",
          "89:                     && !filter_var($ip, \\FILTER_VALIDATE_IP)",
          "90:                     && !($ip = $resolve($host))",
          "91:                     && $ip = @(gethostbynamel($host)[0] ?? dns_get_record($host, \\DNS_AAAA)[0]['ipv6'] ?? null)",
          "92:                 ) {",
          "93:                     $resolve($host, $ip);",
          "94:                 }",
          "96:                 if ($ip && IpUtils::checkIp($ip, $subnets ?? self::PRIVATE_SUBNETS)) {",
          "97:                     throw new TransportException(sprintf('Host \"%s\" is blocked for \"%s\".', $host, $info['url']));",
          "98:                 }",
          "100:                 $lastUrl = $info['url'];",
          "103:             if ($info['primary_ip'] !== $lastPrimaryIp) {",
          "104:                 if ($info['primary_ip'] && IpUtils::checkIp($info['primary_ip'], $subnets ?? self::PRIVATE_SUBNETS)) {",
          "105:                     throw new TransportException(sprintf('IP \"%s\" is blocked for \"%s\".', $info['primary_ip'], $info['url']));",
          "106:                 }",
          "114:         return $this->client->request($method, $url, $options);",
          "",
          "[Added Lines]",
          "96:         [$url, $options] = self::prepareRequest($method, $url, $options, $this->defaultOptions, true);",
          "98:         $redirectHeaders = parse_url($url['authority']);",
          "99:         $host = $redirectHeaders['host'];",
          "100:         $url = implode('', $url);",
          "101:         $dnsCache = $this->dnsCache;",
          "103:         $ip = self::dnsResolve($dnsCache, $host, $this->ipFlags, $options);",
          "104:         self::ipCheck($ip, $this->subnets, $this->ipFlags, $host, $url);",
          "106:         if (0 < $maxRedirects = $options['max_redirects']) {",
          "107:             $options['max_redirects'] = 0;",
          "108:             $redirectHeaders['with_auth'] = $redirectHeaders['no_auth'] = $options['headers'];",
          "110:             if (isset($options['normalized_headers']['host']) || isset($options['normalized_headers']['authorization']) || isset($options['normalized_headers']['cookie'])) {",
          "111:                 $redirectHeaders['no_auth'] = array_filter($redirectHeaders['no_auth'], static function ($h) {",
          "112:                     return 0 !== stripos($h, 'Host:') && 0 !== stripos($h, 'Authorization:') && 0 !== stripos($h, 'Cookie:');",
          "113:                 });",
          "115:         }",
          "117:         $onProgress = $options['on_progress'] ?? null;",
          "118:         $subnets = $this->subnets;",
          "119:         $ipFlags = $this->ipFlags;",
          "120:         $lastPrimaryIp = '';",
          "122:         $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info) use ($onProgress, $subnets, $ipFlags, &$lastPrimaryIp): void {",
          "123:             if (($info['primary_ip'] ?? '') !== $lastPrimaryIp) {",
          "124:                 self::ipCheck($info['primary_ip'], $subnets, $ipFlags, null, $info['url']);",
          "131:         return new AsyncResponse($this->client, $method, $url, $options, static function (ChunkInterface $chunk, AsyncContext $context) use (&$method, &$options, $maxRedirects, &$redirectHeaders, $subnets, $ipFlags, $dnsCache): \\Generator {",
          "132:             if (null !== $chunk->getError() || $chunk->isTimeout() || !$chunk->isFirst()) {",
          "133:                 yield $chunk;",
          "135:                 return;",
          "136:             }",
          "138:             $statusCode = $context->getStatusCode();",
          "140:             if ($statusCode < 300 || 400 <= $statusCode || null === $url = $context->getInfo('redirect_url')) {",
          "141:                 $context->passthru();",
          "143:                 yield $chunk;",
          "145:                 return;",
          "146:             }",
          "148:             $host = parse_url($url, \\PHP_URL_HOST);",
          "149:             $ip = self::dnsResolve($dnsCache, $host, $ipFlags, $options);",
          "150:             self::ipCheck($ip, $subnets, $ipFlags, $host, $url);",
          "153:             if (303 === $statusCode || 'POST' === $method && \\in_array($statusCode, [301, 302], true)) {",
          "154:                 $method = 'HEAD' === $method ? 'HEAD' : 'GET';",
          "155:                 unset($options['body'], $options['json']);",
          "157:                 if (isset($options['normalized_headers']['content-length']) || isset($options['normalized_headers']['content-type']) || isset($options['normalized_headers']['transfer-encoding'])) {",
          "158:                     $filterContentHeaders = static function ($h) {",
          "159:                         return 0 !== stripos($h, 'Content-Length:') && 0 !== stripos($h, 'Content-Type:') && 0 !== stripos($h, 'Transfer-Encoding:');",
          "160:                     };",
          "161:                     $options['header'] = array_filter($options['header'], $filterContentHeaders);",
          "162:                     $redirectHeaders['no_auth'] = array_filter($redirectHeaders['no_auth'], $filterContentHeaders);",
          "163:                     $redirectHeaders['with_auth'] = array_filter($redirectHeaders['with_auth'], $filterContentHeaders);",
          "164:                 }",
          "165:             }",
          "168:             $options['headers'] = $redirectHeaders['host'] === $host ? $redirectHeaders['with_auth'] : $redirectHeaders['no_auth'];",
          "170:             static $redirectCount = 0;",
          "171:             $context->setInfo('redirect_count', ++$redirectCount);",
          "173:             $context->replaceRequest($method, $url, $options);",
          "175:             if ($redirectCount >= $maxRedirects) {",
          "176:                 $context->passthru();",
          "177:             }",
          "178:         });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:     {",
          "140:         $clone = clone $this;",
          "141:         $clone->client = $this->client->withOptions($options);",
          "143:         return $clone;",
          "144:     }",
          "146:     public function reset()",
          "147:     {",
          "148:         if ($this->client instanceof ResetInterface) {",
          "149:             $this->client->reset();",
          "150:         }",
          "151:     }",
          "152: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:         $clone->defaultOptions = self::mergeDefaultOptions($options, $this->defaultOptions);",
          "213:         $this->dnsCache->exchangeArray([]);",
          "220:     private static function dnsResolve(\\ArrayObject $dnsCache, string $host, int $ipFlags, array &$options): string",
          "221:     {",
          "222:         if ($ip = filter_var(trim($host, '[]'), \\FILTER_VALIDATE_IP) ?: $options['resolve'][$host] ?? false) {",
          "223:             return $ip;",
          "224:         }",
          "226:         if ($dnsCache->offsetExists($host)) {",
          "227:             return $dnsCache[$host];",
          "228:         }",
          "230:         if ((\\FILTER_FLAG_IPV4 & $ipFlags) && $ip = gethostbynamel($host)) {",
          "231:             return $options['resolve'][$host] = $dnsCache[$host] = $ip[0];",
          "232:         }",
          "234:         if (!(\\FILTER_FLAG_IPV6 & $ipFlags)) {",
          "235:             return $host;",
          "236:         }",
          "238:         if ($ip = dns_get_record($host, \\DNS_AAAA)) {",
          "239:             $ip = $ip[0]['ipv6'];",
          "240:         } elseif (extension_loaded('sockets')) {",
          "241:             if (!$info = socket_addrinfo_lookup($host, 0, ['ai_socktype' => \\SOCK_STREAM, 'ai_family' => \\AF_INET6])) {",
          "242:                 return $host;",
          "243:             }",
          "245:             $ip = socket_addrinfo_explain($info[0])['ai_addr']['sin6_addr'];",
          "246:         } elseif ('localhost' === $host || 'localhost.' === $host) {",
          "247:             $ip = '::1';",
          "248:         } else {",
          "249:             return $host;",
          "250:         }",
          "252:         return $options['resolve'][$host] = $dnsCache[$host] = $ip;",
          "253:     }",
          "255:     private static function ipCheck(string $ip, ?array $subnets, int $ipFlags, ?string $host, string $url): void",
          "256:     {",
          "257:         if (null === $subnets) {",
          "259:             $ipFlags |= \\FILTER_FLAG_NO_PRIV_RANGE | \\FILTER_FLAG_NO_RES_RANGE;",
          "260:         }",
          "262:         if (false !== filter_var($ip, \\FILTER_VALIDATE_IP, $ipFlags) && !IpUtils::checkIp($ip, $subnets ?? self::PRIVATE_SUBNETS)) {",
          "263:             return;",
          "264:         }",
          "266:         if (null !== $host) {",
          "267:             $type = 'Host';",
          "268:         } else {",
          "269:             $host = $ip;",
          "270:             $type = 'IP';",
          "271:         }",
          "273:         throw new TransportException($type.\\sprintf(' \"%s\" is blocked for \"%s\".', $host, $url));",
          "274:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AmpResponse.php||src/Symfony/Component/HttpClient/Response/AmpResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/AmpResponse.php -> src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         $info['max_duration'] = $options['max_duration'];",
          "90:         $info['debug'] = '';",
          "99:         $onProgress = $options['on_progress'] ?? static function () {};",
          "101:             $info['total_time'] = microtime(true) - $info['start_time'];",
          "103:             $onProgress((int) $info['size_download'], ((int) (1 + $info['download_content_length']) ?: 1) - 1, (array) $info);",
          "104:         };",
          "",
          "[Removed Lines]",
          "92:         $resolve = static function (string $host, ?string $ip = null) use ($multi): ?string {",
          "93:             if (null !== $ip) {",
          "94:                 $multi->dnsCache[$host] = $ip;",
          "95:             }",
          "97:             return $multi->dnsCache[$host] ?? null;",
          "98:         };",
          "100:         $onProgress = $this->onProgress = static function () use (&$info, $onProgress, $resolve) {",
          "102:             $info['resolve'] = $resolve;",
          "",
          "[Added Lines]",
          "93:         $onProgress = $this->onProgress = static function () use (&$info, $onProgress) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/CurlResponse.php -> src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         curl_pause($ch, \\CURLPAUSE_CONT);",
          "117:         if ($onProgress = $options['on_progress']) {",
          "125:             $url = isset($info['url']) ? ['url' => $info['url']] : [];",
          "126:             curl_setopt($ch, \\CURLOPT_NOPROGRESS, false);",
          "128:                 try {",
          "129:                     rewind($debugBuffer);",
          "130:                     $debug = ['debug' => stream_get_contents($debugBuffer)];",
          "132:                 } catch (\\Throwable $e) {",
          "133:                     $multi->handlesActivity[(int) $ch][] = null;",
          "134:                     $multi->handlesActivity[(int) $ch][] = $e;",
          "",
          "[Removed Lines]",
          "118:             $resolve = static function (string $host, ?string $ip = null) use ($multi): ?string {",
          "119:                 if (null !== $ip) {",
          "120:                     $multi->dnsCache->hostnames[$host] = $ip;",
          "121:                 }",
          "123:                 return $multi->dnsCache->hostnames[$host] ?? null;",
          "124:             };",
          "127:             curl_setopt($ch, \\CURLOPT_PROGRESSFUNCTION, static function ($ch, $dlSize, $dlNow) use ($onProgress, &$info, $url, $multi, $debugBuffer, $resolve) {",
          "131:                     $onProgress($dlNow, $dlSize, $url + curl_getinfo($ch) + $info + $debug + ['resolve' => $resolve]);",
          "",
          "[Added Lines]",
          "120:             curl_setopt($ch, \\CURLOPT_PROGRESSFUNCTION, static function ($ch, $dlSize, $dlNow) use ($onProgress, &$info, $url, $multi, $debugBuffer) {",
          "124:                     $onProgress($dlNow, $dlSize, $url + curl_getinfo($ch) + $info + $debug);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/AmpHttpClientTest.php"
        ],
        "src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/CurlHttpClientTest.php"
        ],
        "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php||src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php": [
          "File: src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php -> src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\HttpClient\\Tests;",
          "14: use PHPUnit\\Framework\\SkippedTestSuiteError;",
          "15: use Symfony\\Component\\HttpClient\\Exception\\ClientException;",
          "16: use Symfony\\Component\\HttpClient\\Exception\\InvalidArgumentException;",
          "17: use Symfony\\Component\\HttpClient\\Exception\\TransportException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Symfony\\Bridge\\PhpUnit\\DnsMock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:         $client->request('GET', 'http://symfony.com', ['resolve' => ['symfony.com' => '127.0.0.1']]);",
          "491:     }",
          "493:     public function testNoRedirectWithInvalidLocation()",
          "494:     {",
          "495:         $client = $this->getHttpClient(__FUNCTION__);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     public function testNoPrivateNetworkWithResolveAndRedirect()",
          "495:     {",
          "496:         DnsMock::withMockedHosts([",
          "497:             'localhost' => [",
          "498:                 [",
          "499:                     'host' => 'localhost',",
          "500:                     'class' => 'IN',",
          "501:                     'ttl' => 15,",
          "502:                     'type' => 'A',",
          "503:                     'ip' => '127.0.0.1',",
          "504:                 ],",
          "505:             ],",
          "506:             'symfony.com' => [",
          "507:                 [",
          "508:                     'host' => 'symfony.com',",
          "509:                     'class' => 'IN',",
          "510:                     'ttl' => 15,",
          "511:                     'type' => 'A',",
          "512:                     'ip' => '10.0.0.1',",
          "513:                 ],",
          "514:             ],",
          "515:         ]);",
          "517:         $client = $this->getHttpClient(__FUNCTION__);",
          "518:         $client = new NoPrivateNetworkHttpClient($client, '10.0.0.1/32');",
          "520:         $this->expectException(TransportException::class);",
          "521:         $this->expectExceptionMessage('Host \"symfony.com\" is blocked');",
          "523:         $client->request('GET', 'http://localhost:8057/302?location=https://symfony.com/');",
          "524:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/NativeHttpClientTest.php"
        ],
        "src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/NoPrivateNetworkHttpClientTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Symfony\\Component\\HttpClient\\Tests;",
          "14: use PHPUnit\\Framework\\TestCase;",
          "15: use Symfony\\Component\\HttpClient\\Exception\\InvalidArgumentException;",
          "16: use Symfony\\Component\\HttpClient\\Exception\\TransportException;",
          "17: use Symfony\\Component\\HttpClient\\MockHttpClient;",
          "18: use Symfony\\Component\\HttpClient\\NoPrivateNetworkHttpClient;",
          "19: use Symfony\\Component\\HttpClient\\Response\\MockResponse;",
          "23: class NoPrivateNetworkHttpClientTest extends TestCase",
          "24: {",
          "26:     {",
          "27:         return [",
          "",
          "[Removed Lines]",
          "20: use Symfony\\Contracts\\HttpClient\\HttpClientInterface;",
          "21: use Symfony\\Contracts\\HttpClient\\ResponseInterface;",
          "25:     public static function getExcludeData(): array",
          "",
          "[Added Lines]",
          "15: use Symfony\\Bridge\\PhpUnit\\DnsMock;",
          "24:     public static function getExcludeIpData(): array",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:             ['104.26.14.6',            '104.26.14.0/24',    true],",
          "52:             ['2606:4700:20::681a:e06', null,                false],",
          "53:             ['2606:4700:20::681a:e06', '2606:4700:20::/43', true],",
          "63:     }",
          "68:     public function testExcludeByIp(string $ipAddr, $subnets, bool $mustThrow)",
          "69:     {",
          "70:         $content = 'foo';",
          "73:         if ($mustThrow) {",
          "74:             $this->expectException(TransportException::class);",
          "76:         }",
          "78:         $previousHttpClient = $this->getMockHttpClient($ipAddr, $content);",
          "",
          "[Removed Lines]",
          "56:             ['2606:4700:20::681a:e06', '::/0',      true],",
          "57:             ['104.26.14.6',            '0.0.0.0/0', true],",
          "60:             ['10.0.0.1', 'fc00::/7',   false],",
          "61:             ['fc00::1',  '10.0.0.0/8', false],",
          "62:         ];",
          "71:         $url = sprintf('http://%s/', strtr($ipAddr, '.:', '--'));",
          "75:             $this->expectExceptionMessage(sprintf('IP \"%s\" is blocked for \"%s\".', $ipAddr, $url));",
          "",
          "[Added Lines]",
          "53:         ];",
          "54:     }",
          "56:     public static function getExcludeHostData(): iterable",
          "57:     {",
          "58:         yield from self::getExcludeIpData();",
          "61:         yield ['2606:4700:20::681a:e06', '::/0',      true];",
          "62:         yield ['104.26.14.6',            '0.0.0.0/0', true];",
          "65:         yield ['10.0.0.1', 'fc00::/7',   true];",
          "66:         yield ['fc00::1',  '10.0.0.0/8', true];",
          "75:         $host = strtr($ipAddr, '.:', '--');",
          "76:         DnsMock::withMockedHosts([",
          "77:             $host => [",
          "78:                 str_contains($ipAddr, ':') ? [",
          "79:                     'type' => 'AAAA',",
          "80:                     'ipv6' => '3706:5700:20::ac43:4826',",
          "81:                 ] : [",
          "82:                     'type' => 'A',",
          "83:                     'ip' => '105.26.14.6',",
          "84:                 ],",
          "85:             ],",
          "86:         ]);",
          "89:         $url = \\sprintf('http://%s/', $host);",
          "93:             $this->expectExceptionMessage(\\sprintf('IP \"%s\" is blocked for \"%s\".', $ipAddr, $url));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:     }",
          "91:     public function testExcludeByHost(string $ipAddr, $subnets, bool $mustThrow)",
          "92:     {",
          "93:         $content = 'foo';",
          "97:         if ($mustThrow) {",
          "98:             $this->expectException(TransportException::class);",
          "100:         }",
          "102:         $previousHttpClient = $this->getMockHttpClient($ipAddr, $content);",
          "",
          "[Removed Lines]",
          "94:         $host = str_contains($ipAddr, ':') ? sprintf('[%s]', $ipAddr) : $ipAddr;",
          "95:         $url = sprintf('http://%s/', $host);",
          "99:             $this->expectExceptionMessage(sprintf('Host \"%s\" is blocked for \"%s\".', $host, $url));",
          "",
          "[Added Lines]",
          "112:         $host = strtr($ipAddr, '.:', '--');",
          "113:         DnsMock::withMockedHosts([",
          "114:             $host => [",
          "115:                 str_contains($ipAddr, ':') ? [",
          "116:                     'type' => 'AAAA',",
          "117:                     'ipv6' => $ipAddr,",
          "118:                 ] : [",
          "119:                     'type' => 'A',",
          "120:                     'ip' => $ipAddr,",
          "121:                 ],",
          "122:             ],",
          "123:         ]);",
          "126:         $url = \\sprintf('http://%s/', $host);",
          "130:             $this->expectExceptionMessage(\\sprintf('Host \"%s\" is blocked for \"%s\".', $host, $url));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa",
      "candidate_info": {
        "commit_hash": "b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/b4bf5afdbdcb2fd03da513ee03beeabeb551e5fa",
        "files": [
          "src/Symfony/Component/HttpClient/HttpOptions.php",
          "src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "src/Symfony/Component/HttpClient/Response/AsyncContext.php",
          "src/Symfony/Component/HttpClient/Response/AsyncResponse.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php",
          "src/Symfony/Component/HttpClient/TraceableHttpClient.php",
          "src/Symfony/Contracts/HttpClient/HttpClientInterface.php"
        ],
        "message": "[HttpClient] Resolve hostnames in NoPrivateNetworkHttpClient",
        "before_after_code_files": [
          "src/Symfony/Component/HttpClient/HttpOptions.php||src/Symfony/Component/HttpClient/HttpOptions.php",
          "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/AmpResponse.php||src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "src/Symfony/Component/HttpClient/Response/AsyncContext.php||src/Symfony/Component/HttpClient/Response/AsyncContext.php",
          "src/Symfony/Component/HttpClient/Response/AsyncResponse.php||src/Symfony/Component/HttpClient/Response/AsyncResponse.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php||src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php",
          "src/Symfony/Component/HttpClient/TraceableHttpClient.php||src/Symfony/Component/HttpClient/TraceableHttpClient.php",
          "src/Symfony/Contracts/HttpClient/HttpClientInterface.php||src/Symfony/Contracts/HttpClient/HttpClientInterface.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpClient/HttpOptions.php||src/Symfony/Component/HttpClient/HttpOptions.php": [
          "File: src/Symfony/Component/HttpClient/HttpOptions.php -> src/Symfony/Component/HttpClient/HttpOptions.php"
        ],
        "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NativeHttpClient.php -> src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:             $lastProgress = [0, 0];",
          "140:             $maxDuration = 0 < $options['max_duration'] ? $options['max_duration'] : \\INF;",
          "142:                 if ($info['total_time'] >= $maxDuration) {",
          "143:                     throw new TransportException(sprintf('Max duration was reached for \"%s\".', implode('', $info['url'])));",
          "144:                 }",
          "",
          "[Removed Lines]",
          "141:             $onProgress = static function (...$progress) use ($onProgress, &$lastProgress, &$info, $maxDuration) {",
          "",
          "[Added Lines]",
          "141:             $multi = $this->multi;",
          "142:             $resolve = static function (string $host, ?string $ip = null) use ($multi): ?string {",
          "143:                 if (null !== $ip) {",
          "144:                     $multi->dnsCache[$host] = $ip;",
          "145:                 }",
          "147:                 return $multi->dnsCache[$host] ?? null;",
          "148:             };",
          "149:             $onProgress = static function (...$progress) use ($onProgress, &$lastProgress, &$info, $maxDuration, $resolve) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:                     $lastProgress = $progress ?: $lastProgress;",
          "155:                 }",
          "158:             };",
          "159:         } elseif (0 < $options['max_duration']) {",
          "160:             $maxDuration = $options['max_duration'];",
          "",
          "[Removed Lines]",
          "157:                 $onProgress($lastProgress[0], $lastProgress[1], $progressInfo);",
          "",
          "[Added Lines]",
          "165:                 $onProgress($lastProgress[0], $lastProgress[1], $progressInfo, $resolve);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php||src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php -> src/Symfony/Component/HttpClient/NoPrivateNetworkHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         $lastUrl = '';",
          "81:         $lastPrimaryIp = '';",
          "84:             if ($info['url'] !== $lastUrl) {",
          "85:                 $host = trim(parse_url($info['url'], PHP_URL_HOST) ?: '', '[]');",
          "88:                     throw new TransportException(sprintf('Host \"%s\" is blocked for \"%s\".', $host, $info['url']));",
          "89:                 }",
          "",
          "[Removed Lines]",
          "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
          "87:                 if ($host && IpUtils::checkIp($host, $subnets ?? self::PRIVATE_SUBNETS)) {",
          "",
          "[Added Lines]",
          "83:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use ($onProgress, $subnets, &$lastUrl, &$lastPrimaryIp): void {",
          "86:                 $resolve ??= static fn () => null;",
          "88:                 if (($ip = $host)",
          "89:                     && !filter_var($ip, \\FILTER_VALIDATE_IP, \\FILTER_FLAG_IPV6)",
          "90:                     && !filter_var($ip, \\FILTER_VALIDATE_IP, \\FILTER_FLAG_IPV4)",
          "91:                     && !$ip = $resolve($host)",
          "92:                 ) {",
          "93:                     if ($ip = @(dns_get_record($host, \\DNS_A)[0]['ip'] ?? null)) {",
          "94:                         $resolve($host, $ip);",
          "95:                     } elseif ($ip = @(dns_get_record($host, \\DNS_AAAA)[0]['ipv6'] ?? null)) {",
          "96:                         $resolve($host, '['.$ip.']');",
          "97:                     }",
          "98:                 }",
          "100:                 if ($ip && IpUtils::checkIp($ip, $subnets ?? self::PRIVATE_SUBNETS)) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AmpResponse.php||src/Symfony/Component/HttpClient/Response/AmpResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/AmpResponse.php -> src/Symfony/Component/HttpClient/Response/AmpResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         $info['max_duration'] = $options['max_duration'];",
          "90:         $info['debug'] = '';",
          "92:         $onProgress = $options['on_progress'] ?? static function () {};",
          "94:             $info['total_time'] = microtime(true) - $info['start_time'];",
          "96:         };",
          "98:         $pauseDeferred = new Deferred();",
          "",
          "[Removed Lines]",
          "93:         $onProgress = $this->onProgress = static function () use (&$info, $onProgress) {",
          "95:             $onProgress((int) $info['size_download'], ((int) (1 + $info['download_content_length']) ?: 1) - 1, (array) $info);",
          "",
          "[Added Lines]",
          "92:         $resolve = static function (string $host, ?string $ip = null) use ($multi): ?string {",
          "93:             if (null !== $ip) {",
          "94:                 $multi->dnsCache[$host] = $ip;",
          "95:             }",
          "97:             return $multi->dnsCache[$host] ?? null;",
          "98:         };",
          "100:         $onProgress = $this->onProgress = static function () use (&$info, $onProgress, $resolve) {",
          "102:             $onProgress((int) $info['size_download'], ((int) (1 + $info['download_content_length']) ?: 1) - 1, (array) $info, $resolve);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AsyncContext.php||src/Symfony/Component/HttpClient/Response/AsyncContext.php": [
          "File: src/Symfony/Component/HttpClient/Response/AsyncContext.php -> src/Symfony/Component/HttpClient/Response/AsyncContext.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         $this->info['previous_info'][] = $info = $this->response->getInfo();",
          "157:         if (null !== $onProgress = $options['on_progress'] ?? null) {",
          "158:             $thisInfo = &$this->info;",
          "161:             };",
          "162:         }",
          "163:         if (0 < ($info['max_duration'] ?? 0) && 0 < ($info['total_time'] ?? 0)) {",
          "",
          "[Removed Lines]",
          "159:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info) use (&$thisInfo, $onProgress) {",
          "160:                 $onProgress($dlNow, $dlSize, $thisInfo + $info);",
          "",
          "[Added Lines]",
          "159:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use (&$thisInfo, $onProgress) {",
          "160:                 $onProgress($dlNow, $dlSize, $thisInfo + $info, $resolve);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/AsyncResponse.php||src/Symfony/Component/HttpClient/Response/AsyncResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/AsyncResponse.php -> src/Symfony/Component/HttpClient/Response/AsyncResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         if (null !== $onProgress = $options['on_progress'] ?? null) {",
          "53:             $thisInfo = &$this->info;",
          "56:             };",
          "57:         }",
          "58:         $this->response = $client->request($method, $url, ['buffer' => false] + $options);",
          "",
          "[Removed Lines]",
          "54:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info) use (&$thisInfo, $onProgress) {",
          "55:                 $onProgress($dlNow, $dlSize, $thisInfo + $info);",
          "",
          "[Added Lines]",
          "54:             $options['on_progress'] = static function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use (&$thisInfo, $onProgress) {",
          "55:                 $onProgress($dlNow, $dlSize, $thisInfo + $info, $resolve);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/CurlResponse.php -> src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         curl_pause($ch, \\CURLPAUSE_CONT);",
          "117:         if ($onProgress = $options['on_progress']) {",
          "118:             $url = isset($info['url']) ? ['url' => $info['url']] : [];",
          "119:             curl_setopt($ch, \\CURLOPT_NOPROGRESS, false);",
          "121:                 try {",
          "122:                     rewind($debugBuffer);",
          "123:                     $debug = ['debug' => stream_get_contents($debugBuffer)];",
          "125:                 } catch (\\Throwable $e) {",
          "126:                     $multi->handlesActivity[(int) $ch][] = null;",
          "127:                     $multi->handlesActivity[(int) $ch][] = $e;",
          "",
          "[Removed Lines]",
          "120:             curl_setopt($ch, \\CURLOPT_PROGRESSFUNCTION, static function ($ch, $dlSize, $dlNow) use ($onProgress, &$info, $url, $multi, $debugBuffer) {",
          "124:                     $onProgress($dlNow, $dlSize, $url + curl_getinfo($ch) + $info + $debug);",
          "",
          "[Added Lines]",
          "118:             $resolve = static function (string $host, ?string $ip = null) use ($multi): ?string {",
          "119:                 if (null !== $ip) {",
          "120:                     $multi->dnsCache->hostnames[$host] = $ip;",
          "121:                 }",
          "123:                 return $multi->dnsCache->hostnames[$host] ?? null;",
          "124:             };",
          "127:             curl_setopt($ch, \\CURLOPT_PROGRESSFUNCTION, static function ($ch, $dlSize, $dlNow) use ($onProgress, &$info, $url, $multi, $debugBuffer, $resolve) {",
          "131:                     $onProgress($dlNow, $dlSize, $url + curl_getinfo($ch) + $info + $debug, $resolve);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php||src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php": [
          "File: src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php -> src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: use Symfony\\Component\\HttpClient\\Exception\\InvalidArgumentException;",
          "17: use Symfony\\Component\\HttpClient\\Exception\\TransportException;",
          "18: use Symfony\\Component\\HttpClient\\Internal\\ClientState;",
          "19: use Symfony\\Component\\HttpClient\\Response\\StreamWrapper;",
          "20: use Symfony\\Component\\Process\\Exception\\ProcessFailedException;",
          "21: use Symfony\\Component\\Process\\Process;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: use Symfony\\Component\\HttpClient\\NoPrivateNetworkHttpClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:         $httpClient->request('GET', 'http:/localhost:8057/');",
          "468:     }",
          "469: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     public function testNoPrivateNetwork()",
          "472:     {",
          "473:         $client = $this->getHttpClient(__FUNCTION__);",
          "474:         $client = new NoPrivateNetworkHttpClient($client);",
          "476:         $this->expectException(TransportException::class);",
          "477:         $this->expectExceptionMessage('Host \"localhost\" is blocked');",
          "479:         $client->request('GET', 'http://localhost:8888');",
          "480:     }",
          "482:     public function testNoPrivateNetworkWithResolve()",
          "483:     {",
          "484:         $client = $this->getHttpClient(__FUNCTION__);",
          "485:         $client = new NoPrivateNetworkHttpClient($client);",
          "487:         $this->expectException(TransportException::class);",
          "488:         $this->expectExceptionMessage('Host \"symfony.com\" is blocked');",
          "490:         $client->request('GET', 'http://symfony.com', ['resolve' => ['symfony.com' => '127.0.0.1']]);",
          "491:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php||src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php -> src/Symfony/Component/HttpClient/Tests/MockHttpClientTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:         switch ($testCase) {",
          "306:             default:",
          "308:                     try {",
          "310:                         $response = $client->request($method, $url, ['buffer' => false] + $options);",
          "",
          "[Removed Lines]",
          "307:                 return new MockHttpClient(function (string $method, string $url, array $options) use ($client) {",
          "",
          "[Added Lines]",
          "307:                 return new MockHttpClient(function (string $method, string $url, array $options) use ($client, $testCase) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:                         return new MockResponse($content, $response->getInfo());",
          "314:                     } catch (\\Throwable $e) {",
          "315:                         $this->fail($e->getMessage());",
          "316:                     }",
          "317:                 });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:                         if (str_starts_with($testCase, 'testNoPrivateNetwork')) {",
          "316:                             throw $e;",
          "317:                         }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/TraceableHttpClient.php||src/Symfony/Component/HttpClient/TraceableHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/TraceableHttpClient.php -> src/Symfony/Component/HttpClient/TraceableHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:             $content = false;",
          "59:         }",
          "62:             $traceInfo = $info;",
          "64:             if (null !== $onProgress) {",
          "66:             }",
          "67:         };",
          "",
          "[Removed Lines]",
          "61:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info) use (&$traceInfo, $onProgress) {",
          "65:                 $onProgress($dlNow, $dlSize, $info);",
          "",
          "[Added Lines]",
          "61:         $options['on_progress'] = function (int $dlNow, int $dlSize, array $info, ?\\Closure $resolve = null) use (&$traceInfo, $onProgress) {",
          "65:                 $onProgress($dlNow, $dlSize, $info, $resolve);",
          "",
          "---------------"
        ],
        "src/Symfony/Contracts/HttpClient/HttpClientInterface.php||src/Symfony/Contracts/HttpClient/HttpClientInterface.php": [
          "File: src/Symfony/Contracts/HttpClient/HttpClientInterface.php -> src/Symfony/Contracts/HttpClient/HttpClientInterface.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         'buffer' => true,       // bool|resource|\\Closure - whether the content of the response should be buffered or not,",
          "54:         'resolve' => [],        // string[] - a map of host to IP address that SHOULD replace DNS resolution",
          "55:         'proxy' => null,        // string - by default, the proxy-related env vars handled by curl SHOULD be honored",
          "56:         'no_proxy' => null,     // string - a comma separated list of hosts that do not require a proxy to be reached",
          "",
          "[Removed Lines]",
          "51:         'on_progress' => null,  // callable(int $dlNow, int $dlSize, array $info) - throwing any exceptions MUST abort",
          "",
          "[Added Lines]",
          "51:         'on_progress' => null,  // callable(int $dlNow, int $dlSize, array $info, ?Closure $resolve = null) - throwing any",
          "",
          "---------------"
        ]
      }
    }
  ]
}