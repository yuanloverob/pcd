{
  "cve_id": "CVE-2024-7042",
  "cve_desc": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchainjs versions 0.2.5 and all versions with this class allows for prompt injection, leading to SQL injection. This vulnerability permits unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database.",
  "repo": "langchain-ai/langchainjs",
  "patch_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
  "patch_info": {
    "commit_hash": "615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "repo": "langchain-ai/langchainjs",
    "commit_url": "https://github.com/langchain-ai/langchainjs/commit/615b9d9ab30a2d23a2f95fb8d7acfdf4b41ad7a6",
    "files": [
      "examples/package.json",
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/package.json",
      "libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock"
    ],
    "message": "feat(community): Remove required param from LanceDB integration (#6706)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
    "before_after_code_files": [
      "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts",
      "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "examples/src/indexes/vector_stores/lancedb/fromDocs.ts||examples/src/indexes/vector_stores/lancedb/fromDocs.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromDocs.ts -> examples/src/indexes/vector_stores/lancedb/fromDocs.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import fs from \"node:fs/promises\";",
      "5: import path from \"node:path\";",
      "6: import os from \"node:os\";",
      "10: const loader = new TextLoader(\"src/document_loaders/example_data/example.txt\");",
      "11: const docs = await loader.load();",
      "13: export const run = async () => {",
      "14:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "26:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "27:   console.log(resultOne);",
      "",
      "[Removed Lines]",
      "7: import { connect } from \"vectordb\";",
      "15:   const db = await connect(dir);",
      "16:   const table = await db.createTable(\"vectors\", [",
      "17:     { vector: Array(1536), text: \"sample\", source: \"a\" },",
      "18:   ]);",
      "20:   const vectorStore = await LanceDB.fromDocuments(",
      "21:     docs,",
      "22:     new OpenAIEmbeddings(),",
      "23:     { table }",
      "24:   );",
      "",
      "[Added Lines]",
      "13:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "15:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "16:   console.log(resultOne);",
      "24: };",
      "26: export const run_with_existing_table = async () => {",
      "29:   const vectorStore = await LanceDB.fromDocuments(docs, new OpenAIEmbeddings());",
      "",
      "---------------"
    ],
    "examples/src/indexes/vector_stores/lancedb/fromTexts.ts||examples/src/indexes/vector_stores/lancedb/fromTexts.ts": [
      "File: examples/src/indexes/vector_stores/lancedb/fromTexts.ts -> examples/src/indexes/vector_stores/lancedb/fromTexts.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { LanceDB } from \"@langchain/community/vectorstores/lancedb\";",
      "2: import { OpenAIEmbeddings } from \"@langchain/openai\";",
      "4: import * as fs from \"node:fs/promises\";",
      "5: import * as path from \"node:path\";",
      "6: import os from \"node:os\";",
      "8: export const run = async () => {",
      "15:   const vectorStore = await LanceDB.fromTexts(",
      "16:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "17:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "20:   );",
      "22:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "",
      "[Removed Lines]",
      "3: import { connect } from \"vectordb\";",
      "9:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "10:   const db = await connect(dir);",
      "11:   const table = await db.createTable(\"vectors\", [",
      "12:     { vector: Array(1536), text: \"sample\", id: 1 },",
      "13:   ]);",
      "18:     new OpenAIEmbeddings(),",
      "19:     { table }",
      "",
      "[Added Lines]",
      "8:   const vectorStore = await LanceDB.fromTexts(",
      "9:     [\"Hello world\", \"Bye bye\", \"hello nice world\"],",
      "10:     [{ id: 2 }, { id: 1 }, { id: 3 }],",
      "11:     new OpenAIEmbeddings()",
      "12:   );",
      "14:   const resultOne = await vectorStore.similaritySearch(\"hello world\", 1);",
      "15:   console.log(resultOne);",
      "17: };",
      "19: export const run_with_existing_table = async () => {",
      "20:   const dir = await fs.mkdtemp(path.join(os.tmpdir(), \"lancedb-\"));",
      "24:     new OpenAIEmbeddings()",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/lancedb.ts||libs/langchain-community/src/vectorstores/lancedb.ts": [
      "File: libs/langchain-community/src/vectorstores/lancedb.ts -> libs/langchain-community/src/vectorstores/lancedb.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import type { EmbeddingsInterface } from \"@langchain/core/embeddings\";",
      "3: import { VectorStore } from \"@langchain/core/vectorstores\";",
      "4: import { Document } from \"@langchain/core/documents\";",
      "",
      "[Removed Lines]",
      "1: import { Table } from \"vectordb\";",
      "",
      "[Added Lines]",
      "1: import { connect, Table, Connection, WriteMode } from \"vectordb\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "10: export type LanceDBArgs = {",
      "12:   textKey?: string;",
      "13: };",
      "",
      "[Removed Lines]",
      "11:   table: Table;",
      "",
      "[Added Lines]",
      "11:   table?: Table;",
      "13:   uri?: string;",
      "14:   tableName?: string;",
      "15:   mode?: WriteMode;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: export class LanceDB extends VectorStore {",
      "23:   private textKey: string;",
      "28:     this.embeddings = embeddings;",
      "30:   }",
      "",
      "[Removed Lines]",
      "21:   private table: Table;",
      "25:   constructor(embeddings: EmbeddingsInterface, args: LanceDBArgs) {",
      "26:     super(embeddings, args);",
      "27:     this.table = args.table;",
      "29:     this.textKey = args.textKey || \"text\";",
      "",
      "[Added Lines]",
      "24:   private table?: Table;",
      "28:   private uri: string;",
      "30:   private tableName: string;",
      "32:   private mode?: WriteMode;",
      "34:   constructor(embeddings: EmbeddingsInterface, args?: LanceDBArgs) {",
      "35:     super(embeddings, args || {});",
      "36:     this.table = args?.table;",
      "38:     this.textKey = args?.textKey || \"text\";",
      "39:     this.uri = args?.uri || \"~/lancedb\";",
      "40:     this.tableName = args?.tableName || \"langchain\";",
      "41:     this.mode = args?.mode || WriteMode.Overwrite;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "71:       });",
      "72:       data.push(record);",
      "73:     }",
      "74:     await this.table.add(data);",
      "75:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:     if (!this.table) {",
      "87:       const db: Connection = await connect(this.uri);",
      "88:       this.table = await db.createTable(this.tableName, data, {",
      "89:         writeMode: this.mode,",
      "90:       });",
      "92:       return;",
      "93:     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "85:     query: number[],",
      "86:     k: number",
      "87:   ): Promise<[Document, number][]> {",
      "88:     const results = await this.table.search(query).limit(k).execute();",
      "90:     const docsAndScore: [Document, number][] = [];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:     if (!this.table) {",
      "109:       throw new Error(",
      "110:         \"Table not found. Please add vectors to the table first.\"",
      "111:       );",
      "112:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "119:     texts: string[],",
      "120:     metadatas: object[] | object,",
      "121:     embeddings: EmbeddingsInterface,",
      "123:   ): Promise<LanceDB> {",
      "124:     const docs: Document[] = [];",
      "125:     for (let i = 0; i < texts.length; i += 1) {",
      "",
      "[Removed Lines]",
      "122:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "147:     dbConfig?: LanceDBArgs",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "143:   static async fromDocuments(",
      "144:     docs: Document[],",
      "145:     embeddings: EmbeddingsInterface,",
      "147:   ): Promise<LanceDB> {",
      "148:     const instance = new this(embeddings, dbConfig);",
      "149:     await instance.addDocuments(docs);",
      "",
      "[Removed Lines]",
      "146:     dbConfig: LanceDBArgs",
      "",
      "[Added Lines]",
      "171:     dbConfig?: LanceDBArgs",
      "",
      "---------------"
    ],
    "libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts||libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts": [
      "File: libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts -> libs/langchain-community/src/vectorstores/tests/lancedb.int.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     expect(resultsTwo.length).toBe(5);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: describe(\"LanceDB empty schema\", () => {",
      "50:   test(\"Test fromTexts + addDocuments\", async () => {",
      "51:     const embeddings = new OpenAIEmbeddings();",
      "52:     const vectorStore = await LanceDB.fromTexts(",
      "53:       [\"hello bye\", \"hello world\", \"bye bye\"],",
      "54:       [{ id: 1 }, { id: 2 }, { id: 3 }],",
      "55:       embeddings",
      "56:     );",
      "58:     const results = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "59:     expect(results.length).toBe(3);",
      "61:     await vectorStore.addDocuments([",
      "62:       new Document({",
      "63:         pageContent: \"a new world\",",
      "64:         metadata: { id: 4 },",
      "65:       }),",
      "66:     ]);",
      "68:     const resultsTwo = await vectorStore.similaritySearch(\"hello bye\", 10);",
      "69:     expect(resultsTwo.length).toBe(4);",
      "70:   });",
      "71: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:   languageName: node",
      "252:   linkType: hard",
      "272: \"@apify/consts@npm:^2.13.0, @apify/consts@npm:^2.9.0\":",
      "273:   version: 2.13.0",
      "274:   resolution: \"@apify/consts@npm:2.13.0\"",
      "",
      "[Removed Lines]",
      "254: \"@apache-arrow/ts@npm:^12.0.0\":",
      "255:   version: 12.0.0",
      "256:   resolution: \"@apache-arrow/ts@npm:12.0.0\"",
      "257:   dependencies:",
      "258:     \"@types/command-line-args\": 5.2.0",
      "259:     \"@types/command-line-usage\": 5.0.2",
      "260:     \"@types/node\": 18.14.5",
      "261:     \"@types/pad-left\": 2.1.1",
      "262:     command-line-args: 5.2.1",
      "263:     command-line-usage: 6.1.3",
      "264:     flatbuffers: 23.3.3",
      "265:     json-bignum: ^0.0.3",
      "266:     pad-left: ^2.1.0",
      "267:     tslib: ^2.5.0",
      "268:   checksum: 67b2791e14d5377b1d160a0d8390decc386e013c517713f8b9c100737a0e478a394086d91a8c846848d4e30289070a119d8e65191998f4c2555b18a29564df50",
      "269:   languageName: node",
      "270:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "11112:   languageName: node",
      "11113:   linkType: hard",
      "11115: \"@langchain/anthropic@*, @langchain/anthropic@workspace:*, @langchain/anthropic@workspace:libs/langchain-anthropic\":",
      "11116:   version: 0.0.0-use.local",
      "11117:   resolution: \"@langchain/anthropic@workspace:libs/langchain-anthropic\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11097: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\":",
      "11098:   version: 0.4.20",
      "11099:   resolution: \"@lancedb/vectordb-darwin-arm64@npm:0.4.20\"",
      "11100:   conditions: os=darwin & cpu=arm64",
      "11101:   languageName: node",
      "11102:   linkType: hard",
      "11104: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\":",
      "11105:   version: 0.4.20",
      "11106:   resolution: \"@lancedb/vectordb-darwin-x64@npm:0.4.20\"",
      "11107:   conditions: os=darwin & cpu=x64",
      "11108:   languageName: node",
      "11109:   linkType: hard",
      "11111: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\":",
      "11112:   version: 0.4.20",
      "11113:   resolution: \"@lancedb/vectordb-linux-arm64-gnu@npm:0.4.20\"",
      "11114:   conditions: os=linux & cpu=arm64",
      "11115:   languageName: node",
      "11116:   linkType: hard",
      "11118: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\":",
      "11119:   version: 0.4.20",
      "11120:   resolution: \"@lancedb/vectordb-linux-x64-gnu@npm:0.4.20\"",
      "11121:   conditions: os=linux & cpu=x64",
      "11122:   languageName: node",
      "11123:   linkType: hard",
      "11125: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\":",
      "11126:   version: 0.4.20",
      "11127:   resolution: \"@lancedb/vectordb-win32-x64-msvc@npm:0.4.20\"",
      "11128:   conditions: os=win32 & cpu=x64",
      "11129:   languageName: node",
      "11130:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "11577:     typesense: ^1.5.3",
      "11578:     usearch: ^1.1.1",
      "11579:     uuid: ^10.0.0",
      "11581:     voy-search: 0.6.2",
      "11582:     weaviate-ts-client: ^1.4.0",
      "11583:     web-auth-library: ^1.0.3",
      "",
      "[Removed Lines]",
      "11580:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "11597:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "13039:   languageName: node",
      "13040:   linkType: hard",
      "13042: \"@neondatabase/serverless@npm:0.6.0\":",
      "13043:   version: 0.6.0",
      "13044:   resolution: \"@neondatabase/serverless@npm:0.6.0\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13059: \"@neon-rs/load@npm:^0.0.74\":",
      "13060:   version: 0.0.74",
      "13061:   resolution: \"@neon-rs/load@npm:0.0.74\"",
      "13062:   checksum: d26ec9b08cdf1a7c5aeefe98f77112d205d11b4005a7934b21fe8fd27528847e08e4749e7e6c3fc05ae9f701175a58c11a095ae6af449634df3991a2c82e1dfa",
      "13063:   languageName: node",
      "13064:   linkType: hard",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "20774:   languageName: node",
      "20775:   linkType: hard",
      "20797: \"apache-arrow@npm:^12.0.1\":",
      "20798:   version: 12.0.1",
      "20799:   resolution: \"apache-arrow@npm:12.0.1\"",
      "",
      "[Removed Lines]",
      "20777: \"apache-arrow@npm:^12.0.0\":",
      "20778:   version: 12.0.0",
      "20779:   resolution: \"apache-arrow@npm:12.0.0\"",
      "20780:   dependencies:",
      "20781:     \"@types/command-line-args\": 5.2.0",
      "20782:     \"@types/command-line-usage\": 5.0.2",
      "20783:     \"@types/node\": 18.14.5",
      "20784:     \"@types/pad-left\": 2.1.1",
      "20785:     command-line-args: 5.2.1",
      "20786:     command-line-usage: 6.1.3",
      "20787:     flatbuffers: 23.3.3",
      "20788:     json-bignum: ^0.0.3",
      "20789:     pad-left: ^2.1.0",
      "20790:     tslib: ^2.5.0",
      "20791:   bin:",
      "20792:     arrow2csv: bin/arrow2csv.js",
      "20793:   checksum: 3285189517c2b298cda42852321ce127754918513116eade6e4914c57983f68b6ba96605cfaa2202796d3d6e14755d3b3758f76c1374492affa3d95714eaca40",
      "20794:   languageName: node",
      "20795:   linkType: hard",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "27133:     typescript: ~5.1.6",
      "27134:     typesense: ^1.5.3",
      "27135:     uuid: ^10.0.0",
      "27137:     voy-search: 0.6.2",
      "27138:     weaviate-ts-client: ^2.0.0",
      "27139:     zod: ^3.22.4",
      "",
      "[Removed Lines]",
      "27136:     vectordb: ^0.1.4",
      "",
      "[Added Lines]",
      "27140:     vectordb: ^0.9.0",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "42444:   languageName: node",
      "42445:   linkType: hard",
      "42454:   languageName: node",
      "42455:   linkType: hard",
      "",
      "[Removed Lines]",
      "42447: \"vectordb@npm:^0.1.4\":",
      "42448:   version: 0.1.4",
      "42449:   resolution: \"vectordb@npm:0.1.4\"",
      "42450:   dependencies:",
      "42451:     \"@apache-arrow/ts\": ^12.0.0",
      "42452:     apache-arrow: ^12.0.0",
      "42453:   checksum: 8a40abf4466479b0b9e61687416b5ab232458401917bf9a1d5f3d8ea8c8320ecc5691174f4d4c0cfef0bb6c16328a9088419fd90ac85fd7267dbccdd1f9e55d7",
      "",
      "[Added Lines]",
      "42451: \"vectordb@npm:^0.9.0\":",
      "42452:   version: 0.9.0",
      "42453:   resolution: \"vectordb@npm:0.9.0\"",
      "42454:   dependencies:",
      "42455:     \"@lancedb/vectordb-darwin-arm64\": 0.4.20",
      "42456:     \"@lancedb/vectordb-darwin-x64\": 0.4.20",
      "42457:     \"@lancedb/vectordb-linux-arm64-gnu\": 0.4.20",
      "42458:     \"@lancedb/vectordb-linux-x64-gnu\": 0.4.20",
      "42459:     \"@lancedb/vectordb-win32-x64-msvc\": 0.4.20",
      "42460:     \"@neon-rs/load\": ^0.0.74",
      "42461:     axios: ^1.4.0",
      "42462:   peerDependencies:",
      "42463:     \"@apache-arrow/ts\": ^14.0.2",
      "42464:     apache-arrow: ^14.0.2",
      "42465:   dependenciesMeta:",
      "42466:     \"@lancedb/vectordb-darwin-arm64\":",
      "42467:       optional: true",
      "42468:     \"@lancedb/vectordb-darwin-x64\":",
      "42469:       optional: true",
      "42470:     \"@lancedb/vectordb-linux-arm64-gnu\":",
      "42471:       optional: true",
      "42472:     \"@lancedb/vectordb-linux-x64-gnu\":",
      "42473:       optional: true",
      "42474:     \"@lancedb/vectordb-win32-x64-msvc\":",
      "42475:       optional: true",
      "42476:   conditions: (os=darwin | os=linux | os=win32) & (cpu=x64 | cpu=arm64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5dde37f27c58e0eb971c8729004c594a714d898f",
      "candidate_info": {
        "commit_hash": "5dde37f27c58e0eb971c8729004c594a714d898f",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/5dde37f27c58e0eb971c8729004c594a714d898f",
        "files": [
          "docs/core_docs/docs/integrations/chat/cerebras.ipynb",
          "langchain/package.json",
          "langchain/src/chat_models/universal.ts",
          "libs/langchain-cerebras/.eslintrc.cjs",
          "libs/langchain-cerebras/.gitignore",
          "libs/langchain-cerebras/.prettierrc",
          "libs/langchain-cerebras/.release-it.json",
          "libs/langchain-cerebras/LICENSE",
          "libs/langchain-cerebras/README.md",
          "libs/langchain-cerebras/jest.config.cjs",
          "libs/langchain-cerebras/jest.env.cjs",
          "libs/langchain-cerebras/langchain.config.js",
          "libs/langchain-cerebras/package.json",
          "libs/langchain-cerebras/scripts/jest-setup-after-env.js",
          "libs/langchain-cerebras/src/chat_models.ts",
          "libs/langchain-cerebras/src/index.ts",
          "libs/langchain-cerebras/src/tests/chat_models.int.test.ts",
          "libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts",
          "libs/langchain-cerebras/src/tests/chat_models.standard.test.ts",
          "libs/langchain-cerebras/src/utils.ts",
          "libs/langchain-cerebras/tsconfig.cjs.json",
          "libs/langchain-cerebras/tsconfig.json",
          "libs/langchain-cerebras/turbo.json",
          "yarn.lock"
        ],
        "message": "feat(cerebras): Adds Cerebras chat model integration (#7457)",
        "before_after_code_files": [
          "langchain/src/chat_models/universal.ts||langchain/src/chat_models/universal.ts",
          "libs/langchain-cerebras/.eslintrc.cjs||libs/langchain-cerebras/.eslintrc.cjs",
          "libs/langchain-cerebras/jest.config.cjs||libs/langchain-cerebras/jest.config.cjs",
          "libs/langchain-cerebras/jest.env.cjs||libs/langchain-cerebras/jest.env.cjs",
          "libs/langchain-cerebras/langchain.config.js||libs/langchain-cerebras/langchain.config.js",
          "libs/langchain-cerebras/scripts/jest-setup-after-env.js||libs/langchain-cerebras/scripts/jest-setup-after-env.js",
          "libs/langchain-cerebras/src/chat_models.ts||libs/langchain-cerebras/src/chat_models.ts",
          "libs/langchain-cerebras/src/index.ts||libs/langchain-cerebras/src/index.ts",
          "libs/langchain-cerebras/src/tests/chat_models.int.test.ts||libs/langchain-cerebras/src/tests/chat_models.int.test.ts",
          "libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts||libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts",
          "libs/langchain-cerebras/src/tests/chat_models.standard.test.ts||libs/langchain-cerebras/src/tests/chat_models.standard.test.ts",
          "libs/langchain-cerebras/src/utils.ts||libs/langchain-cerebras/src/utils.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "langchain/src/chat_models/universal.ts||langchain/src/chat_models/universal.ts": [
          "File: langchain/src/chat_models/universal.ts -> langchain/src/chat_models/universal.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         const { ChatGroq } = await import(\"@langchain/groq\");",
          "116:         return new ChatGroq({ model, ...passedParams });",
          "117:       }",
          "118:       case \"bedrock\": {",
          "119:         const { ChatBedrockConverse } = await import(\"@langchain/aws\");",
          "120:         return new ChatBedrockConverse({ model, ...passedParams });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:       case \"cerebras\": {",
          "119:         const { ChatCerebras } = await import(\"@langchain/cerebras\");",
          "120:         return new ChatCerebras({ model, ...passedParams });",
          "121:       }",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/.eslintrc.cjs||libs/langchain-cerebras/.eslintrc.cjs": [
          "File: libs/langchain-cerebras/.eslintrc.cjs -> libs/langchain-cerebras/.eslintrc.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: module.exports = {",
          "2:   extends: [",
          "3:     \"airbnb-base\",",
          "4:     \"eslint:recommended\",",
          "5:     \"prettier\",",
          "6:     \"plugin:@typescript-eslint/recommended\",",
          "7:   ],",
          "8:   parserOptions: {",
          "9:     ecmaVersion: 12,",
          "10:     parser: \"@typescript-eslint/parser\",",
          "11:     project: \"./tsconfig.json\",",
          "12:     sourceType: \"module\",",
          "13:   },",
          "14:   plugins: [\"@typescript-eslint\", \"no-instanceof\"],",
          "15:   ignorePatterns: [",
          "16:     \".eslintrc.cjs\",",
          "17:     \"scripts\",",
          "18:     \"node_modules\",",
          "19:     \"dist\",",
          "20:     \"dist-cjs\",",
          "21:     \"*.js\",",
          "22:     \"*.cjs\",",
          "23:     \"*.d.ts\",",
          "24:   ],",
          "25:   rules: {",
          "26:     \"no-process-env\": 2,",
          "27:     \"no-instanceof/no-instanceof\": 2,",
          "28:     \"@typescript-eslint/explicit-module-boundary-types\": 0,",
          "29:     \"@typescript-eslint/no-empty-function\": 0,",
          "30:     \"@typescript-eslint/no-shadow\": 0,",
          "31:     \"@typescript-eslint/no-empty-interface\": 0,",
          "32:     \"@typescript-eslint/no-use-before-define\": [\"error\", \"nofunc\"],",
          "33:     \"@typescript-eslint/no-unused-vars\": [\"warn\", { args: \"none\" }],",
          "34:     \"@typescript-eslint/no-floating-promises\": \"error\",",
          "35:     \"@typescript-eslint/no-misused-promises\": \"error\",",
          "36:     camelcase: 0,",
          "37:     \"class-methods-use-this\": 0,",
          "38:     \"import/extensions\": [2, \"ignorePackages\"],",
          "39:     \"import/no-extraneous-dependencies\": [",
          "40:       \"error\",",
          "41:       { devDependencies: [\"**/*.test.ts\"] },",
          "42:     ],",
          "43:     \"import/no-unresolved\": 0,",
          "44:     \"import/prefer-default-export\": 0,",
          "45:     \"keyword-spacing\": \"error\",",
          "46:     \"max-classes-per-file\": 0,",
          "47:     \"max-len\": 0,",
          "48:     \"no-await-in-loop\": 0,",
          "49:     \"no-bitwise\": 0,",
          "50:     \"no-console\": 0,",
          "51:     \"no-restricted-syntax\": 0,",
          "52:     \"no-shadow\": 0,",
          "53:     \"no-continue\": 0,",
          "54:     \"no-void\": 0,",
          "55:     \"no-underscore-dangle\": 0,",
          "56:     \"no-use-before-define\": 0,",
          "57:     \"no-useless-constructor\": 0,",
          "58:     \"no-return-await\": 0,",
          "59:     \"consistent-return\": 0,",
          "60:     \"no-else-return\": 0,",
          "61:     \"func-names\": 0,",
          "62:     \"no-lonely-if\": 0,",
          "63:     \"prefer-rest-params\": 0,",
          "64:     \"new-cap\": [\"error\", { properties: false, capIsNew: false }],",
          "65:   },",
          "66:   overrides: [",
          "67:     {",
          "68:       files: [\"**/*.test.ts\"],",
          "69:       rules: {",
          "70:         \"@typescript-eslint/no-unused-vars\": \"off\",",
          "71:       },",
          "72:     },",
          "73:   ],",
          "74: };",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/jest.config.cjs||libs/langchain-cerebras/jest.config.cjs": [
          "File: libs/langchain-cerebras/jest.config.cjs -> libs/langchain-cerebras/jest.config.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: module.exports = {",
          "3:   preset: \"ts-jest/presets/default-esm\",",
          "4:   testEnvironment: \"./jest.env.cjs\",",
          "5:   modulePathIgnorePatterns: [\"dist/\", \"docs/\"],",
          "6:   moduleNameMapper: {",
          "7:     \"^(\\\\.{1,2}/.*)\\\\.js$\": \"$1\",",
          "8:   },",
          "9:   transform: {",
          "10:     \"^.+\\\\.tsx?$\": [\"@swc/jest\"],",
          "11:   },",
          "12:   transformIgnorePatterns: [",
          "13:     \"/node_modules/\",",
          "14:     \"\\\\.pnp\\\\.[^\\\\/]+$\",",
          "15:     \"./scripts/jest-setup-after-env.js\",",
          "16:   ],",
          "17:   setupFiles: [\"dotenv/config\"],",
          "18:   testTimeout: 20_000,",
          "19:   passWithNoTests: true,",
          "20:   collectCoverageFrom: [\"src/**/*.ts\"],",
          "21: };",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/jest.env.cjs||libs/langchain-cerebras/jest.env.cjs": [
          "File: libs/langchain-cerebras/jest.env.cjs -> libs/langchain-cerebras/jest.env.cjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const { TestEnvironment } = require(\"jest-environment-node\");",
          "3: class AdjustedTestEnvironmentToSupportFloat32Array extends TestEnvironment {",
          "4:   constructor(config, context) {",
          "7:     super(config, context);",
          "8:     this.global.Float32Array = Float32Array;",
          "9:   }",
          "10: }",
          "12: module.exports = AdjustedTestEnvironmentToSupportFloat32Array;",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/langchain.config.js||libs/langchain-cerebras/langchain.config.js": [
          "File: libs/langchain-cerebras/langchain.config.js -> libs/langchain-cerebras/langchain.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { resolve, dirname } from \"node:path\";",
          "2: import { fileURLToPath } from \"node:url\";",
          "8: function abs(relativePath) {",
          "9:   return resolve(dirname(fileURLToPath(import.meta.url)), relativePath);",
          "10: }",
          "12: export const config = {",
          "13:   internals: [/node\\:/, /@langchain\\/core\\//],",
          "14:   entrypoints: {",
          "15:     index: \"index\",",
          "16:   },",
          "17:   requiresOptionalDependency: [],",
          "18:   tsConfigPath: resolve(\"./tsconfig.json\"),",
          "19:   cjsSource: \"./dist-cjs\",",
          "20:   cjsDestination: \"./dist\",",
          "21:   abs,",
          "22: };",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/scripts/jest-setup-after-env.js||libs/langchain-cerebras/scripts/jest-setup-after-env.js": [
          "File: libs/langchain-cerebras/scripts/jest-setup-after-env.js -> libs/langchain-cerebras/scripts/jest-setup-after-env.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { awaitAllCallbacks } from \"@langchain/core/callbacks/promises\";",
          "2: import { afterAll, jest } from \"@jest/globals\";",
          "4: afterAll(awaitAllCallbacks);",
          "7: if (process.env.DISABLE_CONSOLE_LOGS === \"true\") {",
          "8:   console.log = jest.fn();",
          "9: }",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/src/chat_models.ts||libs/langchain-cerebras/src/chat_models.ts": [
          "File: libs/langchain-cerebras/src/chat_models.ts -> libs/langchain-cerebras/src/chat_models.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import Cerebras from \"@cerebras/cerebras_cloud_sdk\";",
          "3: import {",
          "4:   AIMessage,",
          "5:   AIMessageChunk,",
          "6:   UsageMetadata,",
          "7:   type BaseMessage,",
          "8: } from \"@langchain/core/messages\";",
          "9: import { CallbackManagerForLLMRun } from \"@langchain/core/callbacks/manager\";",
          "10: import {",
          "11:   BaseChatModel,",
          "12:   BaseChatModelCallOptions,",
          "13:   type BaseChatModelParams,",
          "14:   BindToolsInput,",
          "15:   LangSmithParams,",
          "16:   ToolChoice,",
          "17: } from \"@langchain/core/language_models/chat_models\";",
          "18: import { getEnvironmentVariable } from \"@langchain/core/utils/env\";",
          "19: import { ChatGenerationChunk, ChatResult } from \"@langchain/core/outputs\";",
          "20: import {",
          "21:   Runnable,",
          "22:   RunnableLambda,",
          "23:   RunnablePassthrough,",
          "24:   RunnableSequence,",
          "25: } from \"@langchain/core/runnables\";",
          "26: import {",
          "27:   BaseLanguageModelInput,",
          "28:   StructuredOutputMethodOptions,",
          "29:   ToolDefinition,",
          "30: } from \"@langchain/core/language_models/base\";",
          "31: import { convertToOpenAITool } from \"@langchain/core/utils/function_calling\";",
          "32: import { concat } from \"@langchain/core/utils/stream\";",
          "33: import { isZodSchema } from \"@langchain/core/utils/types\";",
          "34: import { zodToJsonSchema } from \"zod-to-json-schema\";",
          "35: import { z } from \"zod\";",
          "37: import {",
          "38:   convertToCerebrasMessageParams,",
          "39:   formatToCerebrasToolChoice,",
          "40: } from \"./utils.js\";",
          "45: export interface ChatCerebrasInput extends BaseChatModelParams {",
          "46:   model: string;",
          "47:   apiKey?: string;",
          "48:   streaming?: boolean;",
          "49:   maxTokens?: number;",
          "50:   maxCompletionTokens?: number;",
          "51:   temperature?: number;",
          "52:   topP?: number;",
          "53:   seed?: number;",
          "54:   timeout?: number;",
          "56:   fetch?: (...args: any) => any;",
          "57: }",
          "59: export interface ChatCerebrasCallOptions",
          "60:   extends BaseChatModelCallOptions,",
          "61:     Pick<Cerebras.RequestOptions, \"httpAgent\" | \"headers\"> {",
          "62:   tools?: BindToolsInput[];",
          "63:   tool_choice?: ToolChoice;",
          "64:   user?: string;",
          "65:   response_format?: Cerebras.ChatCompletionCreateParams[\"response_format\"];",
          "66: }",
          "407: export class ChatCerebras",
          "408:   extends BaseChatModel<ChatCerebrasCallOptions>",
          "409:   implements ChatCerebrasInput",
          "410: {",
          "411:   static lc_name() {",
          "412:     return \"ChatCerebras\";",
          "413:   }",
          "415:   lc_serializable = true;",
          "417:   get lc_secrets(): { [key: string]: string } | undefined {",
          "418:     return {",
          "419:       apiKey: \"CEREBRAS_API_KEY\",",
          "420:     };",
          "421:   }",
          "423:   get lc_aliases(): { [key: string]: string } | undefined {",
          "424:     return {",
          "425:       apiKey: \"CEREBRAS_API_KEY\",",
          "426:     };",
          "427:   }",
          "429:   getLsParams(options: this[\"ParsedCallOptions\"]): LangSmithParams {",
          "430:     const params = this.invocationParams(options);",
          "431:     return {",
          "432:       ls_provider: \"cerebras\",",
          "433:       ls_model_name: this.model,",
          "434:       ls_model_type: \"chat\",",
          "435:       ls_temperature: params.temperature ?? undefined,",
          "436:       ls_max_tokens: params.max_completion_tokens ?? undefined,",
          "437:       ls_stop: options.stop,",
          "438:     };",
          "439:   }",
          "441:   client: Cerebras;",
          "443:   model: string;",
          "445:   maxCompletionTokens?: number;",
          "447:   temperature?: number;",
          "449:   topP?: number;",
          "451:   seed?: number;",
          "453:   streaming?: boolean;",
          "455:   constructor(fields: ChatCerebrasInput) {",
          "456:     super(fields ?? {});",
          "457:     this.model = fields.model;",
          "458:     this.maxCompletionTokens = fields.maxCompletionTokens;",
          "459:     this.temperature = fields.temperature;",
          "460:     this.topP = fields.topP;",
          "461:     this.seed = fields.seed;",
          "462:     this.streaming = fields.streaming;",
          "463:     this.client = new Cerebras({",
          "464:       apiKey: fields.apiKey ?? getEnvironmentVariable(\"CEREBRAS_API_KEY\"),",
          "465:       timeout: fields.timeout,",
          "467:       maxRetries: 0,",
          "468:       fetch: fields.fetch,",
          "469:     });",
          "470:   }",
          "473:   _llmType() {",
          "474:     return \"cerebras\";",
          "475:   }",
          "477:   override bindTools(",
          "478:     tools: BindToolsInput[],",
          "479:     kwargs?: Partial<this[\"ParsedCallOptions\"]>",
          "480:   ): Runnable<BaseLanguageModelInput, AIMessageChunk, ChatCerebrasCallOptions> {",
          "481:     return this.bind({",
          "482:       tools: tools.map((tool) => convertToOpenAITool(tool)),",
          "483:       ...kwargs,",
          "484:     });",
          "485:   }",
          "493:   override invocationParams(",
          "494:     options?: this[\"ParsedCallOptions\"]",
          "495:   ): Omit<Cerebras.ChatCompletionCreateParams, \"stream\" | \"messages\"> {",
          "496:     return {",
          "497:       model: this.model,",
          "498:       max_completion_tokens: this.maxCompletionTokens,",
          "499:       temperature: this.temperature,",
          "500:       top_p: this.topP,",
          "501:       seed: this.seed,",
          "502:       stop: options?.stop,",
          "503:       response_format: options?.response_format,",
          "504:       user: options?.user,",
          "505:       tools: options?.tools?.length",
          "506:         ? options.tools.map(",
          "507:             (tool) =>",
          "508:               convertToOpenAITool(",
          "509:                 tool",
          "510:               ) as Cerebras.ChatCompletionCreateParams.Tool",
          "511:           )",
          "512:         : undefined,",
          "513:       tool_choice: formatToCerebrasToolChoice(options?.tool_choice),",
          "514:     };",
          "515:   }",
          "517:   async _generate(",
          "518:     messages: BaseMessage[],",
          "519:     options: this[\"ParsedCallOptions\"],",
          "520:     runManager?: CallbackManagerForLLMRun",
          "521:   ): Promise<ChatResult> {",
          "523:     if (this.streaming) {",
          "524:       let finalChunk: AIMessageChunk | undefined;",
          "525:       for await (const chunk of this._streamResponseChunks(",
          "526:         messages,",
          "527:         options,",
          "528:         runManager",
          "529:       )) {",
          "530:         if (!finalChunk) {",
          "531:           finalChunk = chunk.message;",
          "532:         } else {",
          "533:           finalChunk = concat(finalChunk, chunk.message);",
          "534:         }",
          "535:       }",
          "538:       const nonChunkMessage = new AIMessage({",
          "539:         id: finalChunk?.id,",
          "540:         content: finalChunk?.content ?? \"\",",
          "541:         tool_calls: finalChunk?.tool_calls,",
          "542:         response_metadata: finalChunk?.response_metadata,",
          "543:         usage_metadata: finalChunk?.usage_metadata,",
          "544:       });",
          "545:       return {",
          "546:         generations: [",
          "547:           {",
          "548:             text:",
          "549:               typeof nonChunkMessage.content === \"string\"",
          "550:                 ? nonChunkMessage.content",
          "551:                 : \"\",",
          "552:             message: nonChunkMessage,",
          "553:           },",
          "554:         ],",
          "555:       };",
          "556:     }",
          "558:     const res = await this.caller.call(async () => {",
          "559:       const res = await this.client.chat.completions.create(",
          "560:         {",
          "561:           ...this.invocationParams(options),",
          "562:           messages: convertToCerebrasMessageParams(messages),",
          "563:           stream: false,",
          "564:         },",
          "565:         {",
          "566:           headers: options.headers,",
          "567:           httpAgent: options.httpAgent,",
          "568:         }",
          "569:       );",
          "570:       return res;",
          "571:     });",
          "573:     const { choices, usage, ...rest } = res;",
          "576:     const choice = (choices as any)[0];",
          "577:     const content = choice?.message?.content ?? \"\";",
          "578:     const usageMetadata: UsageMetadata = {",
          "580:       input_tokens: (usage as any)?.prompt_tokens,",
          "582:       output_tokens: (usage as any)?.completion_tokens,",
          "584:       total_tokens: (usage as any)?.total_tokens,",
          "585:     };",
          "587:     return {",
          "588:       generations: [",
          "589:         {",
          "590:           text: content,",
          "591:           message: new AIMessage({",
          "592:             content,",
          "593:             tool_calls: choice?.message?.tool_calls?.map(",
          "595:               (toolCall: any) => ({",
          "596:                 id: toolCall.id,",
          "597:                 name: toolCall.function?.name,",
          "598:                 args: JSON.parse(toolCall.function?.arguments),",
          "599:                 index: toolCall.index,",
          "600:                 type: \"tool_call\",",
          "601:               })",
          "602:             ),",
          "603:             usage_metadata: usageMetadata,",
          "604:             response_metadata: rest,",
          "605:           }),",
          "606:         },",
          "607:       ],",
          "608:     };",
          "609:   }",
          "615:   async *_streamResponseChunks(",
          "616:     messages: BaseMessage[],",
          "617:     options: this[\"ParsedCallOptions\"],",
          "618:     runManager?: CallbackManagerForLLMRun",
          "619:   ): AsyncGenerator<ChatGenerationChunk> {",
          "620:     const stream = await this.caller.call(async () => {",
          "621:       const res = await this.client.chat.completions.create(",
          "622:         {",
          "623:           ...this.invocationParams(options),",
          "624:           messages: convertToCerebrasMessageParams(messages),",
          "625:           stream: true,",
          "626:         },",
          "627:         {",
          "628:           headers: options.headers,",
          "629:           httpAgent: options.httpAgent,",
          "630:         }",
          "631:       );",
          "632:       return res;",
          "633:     });",
          "634:     for await (const chunk of stream) {",
          "635:       const { choices, system_fingerprint, model, id, object, usage, ...rest } =",
          "636:         chunk;",
          "639:       const choice = (choices as any)[0];",
          "640:       const content = choice?.delta?.content ?? \"\";",
          "641:       let usageMetadata: UsageMetadata | undefined;",
          "642:       if (usage !== undefined) {",
          "643:         usageMetadata = {",
          "645:           input_tokens: (usage as any).prompt_tokens,",
          "647:           output_tokens: (usage as any).completion_tokens,",
          "649:           total_tokens: (usage as any).total_tokens,",
          "650:         };",
          "651:       }",
          "654:       const generationInfo: Record<string, any> = {};",
          "655:       if (choice.finish_reason != null) {",
          "656:         generationInfo.finish_reason = choice.finish_reason;",
          "659:         generationInfo.id = id;",
          "660:         generationInfo.system_fingerprint = system_fingerprint;",
          "661:         generationInfo.model = model;",
          "662:         generationInfo.object = object;",
          "663:       }",
          "664:       const generationChunk = new ChatGenerationChunk({",
          "665:         text: content,",
          "666:         message: new AIMessageChunk({",
          "667:           content,",
          "668:           tool_call_chunks: choice?.delta.tool_calls?.map(",
          "670:             (toolCallChunk: any) => ({",
          "671:               id: toolCallChunk.id,",
          "672:               name: toolCallChunk.function?.name,",
          "673:               args: toolCallChunk.function?.arguments,",
          "674:               index: toolCallChunk.index,",
          "675:               type: \"tool_call_chunk\",",
          "676:             })",
          "677:           ),",
          "678:           usage_metadata: usageMetadata,",
          "679:           response_metadata: rest,",
          "680:         }),",
          "681:         generationInfo,",
          "682:       });",
          "683:       yield generationChunk;",
          "684:       await runManager?.handleLLMNewToken(",
          "685:         content,",
          "686:         undefined,",
          "687:         undefined,",
          "688:         undefined,",
          "689:         undefined,",
          "690:         { chunk: generationChunk }",
          "691:       );",
          "692:     }",
          "693:   }",
          "695:   withStructuredOutput<",
          "697:     RunOutput extends Record<string, any> = Record<string, any>",
          "698:   >(",
          "699:     outputSchema:",
          "700:       | z.ZodType<RunOutput>",
          "702:       | Record<string, any>,",
          "703:     config?: StructuredOutputMethodOptions<false>",
          "704:   ): Runnable<BaseLanguageModelInput, RunOutput>;",
          "706:   withStructuredOutput<",
          "708:     RunOutput extends Record<string, any> = Record<string, any>",
          "709:   >(",
          "710:     outputSchema:",
          "711:       | z.ZodType<RunOutput>",
          "713:       | Record<string, any>,",
          "714:     config?: StructuredOutputMethodOptions<true>",
          "715:   ): Runnable<BaseLanguageModelInput, { raw: BaseMessage; parsed: RunOutput }>;",
          "717:   withStructuredOutput<",
          "719:     RunOutput extends Record<string, any> = Record<string, any>",
          "720:   >(",
          "721:     outputSchema:",
          "722:       | z.ZodType<RunOutput>",
          "724:       | Record<string, any>,",
          "725:     config?: StructuredOutputMethodOptions<boolean>",
          "726:   ):",
          "727:     | Runnable<BaseLanguageModelInput, RunOutput>",
          "728:     | Runnable<",
          "729:         BaseLanguageModelInput,",
          "730:         {",
          "731:           raw: BaseMessage;",
          "732:           parsed: RunOutput;",
          "733:         }",
          "734:       > {",
          "735:     if (config?.strict) {",
          "736:       throw new Error(",
          "737:         `\"strict\" mode is not supported for this model by default.`",
          "738:       );",
          "739:     }",
          "741:     const schema: z.ZodType<RunOutput> | Record<string, any> = outputSchema;",
          "742:     const name = config?.name;",
          "743:     const description = schema.description ?? \"A function available to call.\";",
          "744:     const method = config?.method;",
          "745:     const includeRaw = config?.includeRaw;",
          "746:     if (method === \"jsonMode\") {",
          "747:       throw new Error(",
          "748:         `Cerebras withStructuredOutput implementation only supports \"functionCalling\" as a method.`",
          "749:       );",
          "750:     }",
          "751:     let functionName = name ?? \"extract\";",
          "752:     let tools: ToolDefinition[];",
          "753:     if (isZodSchema(schema)) {",
          "754:       tools = [",
          "755:         {",
          "756:           type: \"function\",",
          "757:           function: {",
          "758:             name: functionName,",
          "759:             description,",
          "760:             parameters: zodToJsonSchema(schema),",
          "761:           },",
          "762:         },",
          "763:       ];",
          "764:     } else {",
          "765:       if (\"name\" in schema) {",
          "766:         functionName = schema.name;",
          "767:       }",
          "768:       tools = [",
          "769:         {",
          "770:           type: \"function\",",
          "771:           function: {",
          "772:             name: functionName,",
          "773:             description,",
          "774:             parameters: schema,",
          "775:           },",
          "776:         },",
          "777:       ];",
          "778:     }",
          "780:     const llm = this.bindTools(tools, {",
          "781:       tool_choice: tools[0].function.name,",
          "782:     });",
          "783:     const outputParser = RunnableLambda.from<AIMessageChunk, RunOutput>(",
          "784:       (input: AIMessageChunk): RunOutput => {",
          "785:         if (!input.tool_calls || input.tool_calls.length === 0) {",
          "786:           throw new Error(\"No tool calls found in the response.\");",
          "787:         }",
          "788:         const toolCall = input.tool_calls.find(",
          "789:           (tc) => tc.name === functionName",
          "790:         );",
          "791:         if (!toolCall) {",
          "792:           throw new Error(`No tool call found with name ${functionName}.`);",
          "793:         }",
          "794:         return toolCall.args as RunOutput;",
          "795:       }",
          "796:     );",
          "798:     if (!includeRaw) {",
          "799:       return llm.pipe(outputParser).withConfig({",
          "800:         runName: \"ChatCerebrasStructuredOutput\",",
          "801:       }) as Runnable<BaseLanguageModelInput, RunOutput>;",
          "802:     }",
          "804:     const parserAssign = RunnablePassthrough.assign({",
          "806:       parsed: (input: any, config) => outputParser.invoke(input.raw, config),",
          "807:     });",
          "808:     const parserNone = RunnablePassthrough.assign({",
          "809:       parsed: () => null,",
          "810:     });",
          "811:     const parsedWithFallback = parserAssign.withFallbacks({",
          "812:       fallbacks: [parserNone],",
          "813:     });",
          "814:     return RunnableSequence.from<",
          "815:       BaseLanguageModelInput,",
          "816:       { raw: BaseMessage; parsed: RunOutput }",
          "817:     >([",
          "818:       {",
          "819:         raw: llm,",
          "820:       },",
          "821:       parsedWithFallback,",
          "822:     ]).withConfig({",
          "823:       runName: \"ChatCerebrasStructuredOutput\",",
          "824:     });",
          "825:   }",
          "826: }",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/src/index.ts||libs/langchain-cerebras/src/index.ts": [
          "File: libs/langchain-cerebras/src/index.ts -> libs/langchain-cerebras/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export * from \"./chat_models.js\";",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/src/tests/chat_models.int.test.ts||libs/langchain-cerebras/src/tests/chat_models.int.test.ts": [
          "File: libs/langchain-cerebras/src/tests/chat_models.int.test.ts -> libs/langchain-cerebras/src/tests/chat_models.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { test } from \"@jest/globals\";",
          "2: import {",
          "3:   AIMessage,",
          "4:   AIMessageChunk,",
          "5:   HumanMessage,",
          "6:   ToolMessage,",
          "7: } from \"@langchain/core/messages\";",
          "8: import { tool } from \"@langchain/core/tools\";",
          "9: import { z } from \"zod\";",
          "10: import { concat } from \"@langchain/core/utils/stream\";",
          "11: import { ChatCerebras } from \"../chat_models.js\";",
          "13: test(\"invoke\", async () => {",
          "14:   const chat = new ChatCerebras({",
          "15:     model: \"llama3.1-8b\",",
          "16:     maxRetries: 2,",
          "17:   });",
          "18:   const message = new HumanMessage(\"What color is the sky?\");",
          "19:   const res = await chat.invoke([message]);",
          "21:   expect(res.content.length).toBeGreaterThan(10);",
          "22: });",
          "24: test(\"invoke with stop sequence\", async () => {",
          "25:   const chat = new ChatCerebras({",
          "26:     model: \"llama3.1-8b\",",
          "27:     maxRetries: 2,",
          "28:   });",
          "29:   const message = new HumanMessage(\"Count to ten.\");",
          "30:   const res = await chat.bind({ stop: [\"5\", \"five\"] }).invoke([message]);",
          "32:   expect((res.content as string).toLowerCase()).not.toContain(\"6\");",
          "33:   expect((res.content as string).toLowerCase()).not.toContain(\"six\");",
          "34: });",
          "36: test(\"invoke with streaming: true\", async () => {",
          "37:   const chat = new ChatCerebras({",
          "38:     model: \"llama3.1-8b\",",
          "39:     maxRetries: 2,",
          "40:     streaming: true,",
          "41:   });",
          "42:   const message = new HumanMessage(\"What color is the sky?\");",
          "43:   const res = await chat.invoke([message]);",
          "44:   console.log({ res });",
          "45:   expect(res.content.length).toBeGreaterThan(10);",
          "46: });",
          "48: test(\"invoke should respect passed headers\", async () => {",
          "49:   const chat = new ChatCerebras({",
          "50:     model: \"llama3.1-8b\",",
          "51:     maxRetries: 2,",
          "52:   });",
          "53:   const message = new HumanMessage(\"Count to ten.\");",
          "54:   await expect(async () => {",
          "55:     await chat.invoke([message], {",
          "56:       headers: { Authorization: \"badbadbad\" },",
          "57:     });",
          "58:   }).rejects.toThrowError();",
          "59: });",
          "61: test(\"stream should respect passed headers\", async () => {",
          "62:   const chat = new ChatCerebras({",
          "63:     model: \"llama3.1-8b\",",
          "64:     maxRetries: 2,",
          "65:   });",
          "66:   const message = new HumanMessage(\"Count to ten.\");",
          "67:   await expect(async () => {",
          "68:     await chat.stream([message], {",
          "69:       headers: { Authorization: \"badbadbad\" },",
          "70:     });",
          "71:   }).rejects.toThrowError();",
          "72: });",
          "74: test(\"generate\", async () => {",
          "75:   const chat = new ChatCerebras({",
          "76:     model: \"llama3.1-8b\",",
          "77:     maxRetries: 2,",
          "78:   });",
          "79:   const message = new HumanMessage(\"Hello!\");",
          "80:   const res = await chat.generate([[message]]);",
          "82:   expect(res.generations[0][0].text.length).toBeGreaterThan(10);",
          "83: });",
          "85: test(\"streaming\", async () => {",
          "86:   const chat = new ChatCerebras({",
          "87:     model: \"llama3.1-8b\",",
          "88:     maxRetries: 2,",
          "89:   });",
          "90:   const message = new HumanMessage(\"What color is the sky?\");",
          "91:   const stream = await chat.stream([message]);",
          "92:   let iters = 0;",
          "93:   let finalRes = \"\";",
          "94:   for await (const chunk of stream) {",
          "95:     iters += 1;",
          "96:     finalRes += chunk.content;",
          "97:   }",
          "99:   expect(iters).toBeGreaterThan(1);",
          "100: });",
          "102: test(\"invoke with bound tools\", async () => {",
          "103:   const chat = new ChatCerebras({",
          "104:     model: \"llama3.1-8b\",",
          "105:     maxRetries: 2,",
          "106:   });",
          "107:   const message = new HumanMessage(\"What is the current weather in Hawaii?\");",
          "108:   const res = await chat",
          "109:     .bind({",
          "110:       tools: [",
          "111:         {",
          "112:           type: \"function\",",
          "113:           function: {",
          "114:             name: \"get_current_weather\",",
          "115:             description: \"Get the current weather in a given location\",",
          "116:             parameters: {",
          "117:               type: \"object\",",
          "118:               properties: {",
          "119:                 location: {",
          "120:                   type: \"string\",",
          "121:                   description: \"The city and state, e.g. San Francisco, CA\",",
          "122:                 },",
          "123:                 unit: { type: \"string\", enum: [\"celsius\", \"fahrenheit\"] },",
          "124:               },",
          "125:               required: [\"location\"],",
          "126:             },",
          "127:           },",
          "128:         },",
          "129:       ],",
          "130:       tool_choice: \"auto\",",
          "131:     })",
          "132:     .invoke([message]);",
          "133:   expect(typeof res.tool_calls?.[0].args).toEqual(\"object\");",
          "134: });",
          "136: test(\"stream with bound tools, yielding a single chunk\", async () => {",
          "137:   const chat = new ChatCerebras({",
          "138:     model: \"llama3.1-8b\",",
          "139:     maxRetries: 2,",
          "140:   });",
          "141:   const message = new HumanMessage(\"What is the current weather in Hawaii?\");",
          "142:   const stream = await chat",
          "143:     .bind({",
          "144:       tools: [",
          "145:         {",
          "146:           type: \"function\",",
          "147:           function: {",
          "148:             name: \"get_current_weather\",",
          "149:             description: \"Get the current weather in a given location\",",
          "150:             parameters: {",
          "151:               type: \"object\",",
          "152:               properties: {",
          "153:                 location: {",
          "154:                   type: \"string\",",
          "155:                   description: \"The city and state, e.g. San Francisco, CA\",",
          "156:                 },",
          "157:                 unit: { type: \"string\", enum: [\"celsius\", \"fahrenheit\"] },",
          "158:               },",
          "159:               required: [\"location\"],",
          "160:             },",
          "161:           },",
          "162:         },",
          "163:       ],",
          "164:       tool_choice: \"auto\",",
          "165:     })",
          "166:     .stream([message]);",
          "169:   for await (const chunk of stream) {",
          "171:   }",
          "172: });",
          "174: test(\"Few shotting with tool calls\", async () => {",
          "175:   const chat = new ChatCerebras({",
          "176:     model: \"llama3.1-8b\",",
          "177:     temperature: 0,",
          "178:   }).bind({",
          "179:     tools: [",
          "180:       {",
          "181:         type: \"function\",",
          "182:         function: {",
          "183:           name: \"get_current_weather\",",
          "184:           description: \"Get the current weather in a given location\",",
          "185:           parameters: {",
          "186:             type: \"object\",",
          "187:             properties: {",
          "188:               location: {",
          "189:                 type: \"string\",",
          "190:                 description: \"The city and state, e.g. San Francisco, CA\",",
          "191:               },",
          "192:               unit: { type: \"string\", enum: [\"celsius\", \"fahrenheit\"] },",
          "193:             },",
          "194:             required: [\"location\"],",
          "195:           },",
          "196:         },",
          "197:       },",
          "198:     ],",
          "199:     tool_choice: \"auto\",",
          "200:   });",
          "201:   const res = await chat.invoke([",
          "202:     new HumanMessage(\"What is the weather in SF?\"),",
          "203:     new AIMessage({",
          "204:       content: \"\",",
          "205:       tool_calls: [",
          "206:         {",
          "207:           id: \"12345\",",
          "208:           name: \"get_current_weather\",",
          "209:           args: {",
          "210:             location: \"SF\",",
          "211:           },",
          "212:         },",
          "213:       ],",
          "214:     }),",
          "215:     new ToolMessage({",
          "216:       tool_call_id: \"12345\",",
          "217:       content: \"It is currently 24 degrees with hail in SF.\",",
          "218:     }),",
          "219:     new AIMessage(\"It is currently 24 degrees in SF with hail in SF.\"),",
          "220:     new HumanMessage(\"What did you say the weather was?\"),",
          "221:   ]);",
          "223:   expect(res.content).toContain(\"24\");",
          "224: });",
          "226: test(\"Cerebras can stream tool calls\", async () => {",
          "227:   const model = new ChatCerebras({",
          "228:     model: \"llama3.1-8b\",",
          "229:     temperature: 0,",
          "230:   });",
          "232:   const weatherTool = tool((_) => \"The temperature is 24 degrees with hail.\", {",
          "233:     name: \"get_current_weather\",",
          "234:     schema: z.object({",
          "235:       location: z",
          "236:         .string()",
          "237:         .describe(\"The location to get the current weather for.\"),",
          "238:     }),",
          "239:     description: \"Get the current weather in a given location.\",",
          "240:   });",
          "242:   const modelWithTools = model.bindTools([weatherTool]);",
          "244:   const stream = await modelWithTools.stream(",
          "245:     \"What is the weather in San Francisco?\"",
          "246:   );",
          "248:   let finalMessage: AIMessageChunk | undefined;",
          "249:   for await (const chunk of stream) {",
          "250:     finalMessage = !finalMessage ? chunk : concat(finalMessage, chunk);",
          "251:   }",
          "253:   expect(finalMessage).toBeDefined();",
          "254:   if (!finalMessage) return;",
          "256:   expect(finalMessage.tool_calls?.[0]).toBeDefined();",
          "257:   if (!finalMessage.tool_calls?.[0]) return;",
          "259:   expect(finalMessage.tool_calls?.[0].name).toBe(\"get_current_weather\");",
          "260:   expect(finalMessage.tool_calls?.[0].args).toHaveProperty(\"location\");",
          "261:   expect(finalMessage.tool_calls?.[0].id).toBeDefined();",
          "262: });",
          "264: test(\"json mode\", async () => {",
          "265:   const llm = new ChatCerebras({",
          "266:     model: \"llama3.1-8b\",",
          "267:     temperature: 0,",
          "268:   });",
          "270:   const messages = [",
          "271:     {",
          "272:       role: \"system\",",
          "273:       content:",
          "274:         \"You are a math tutor that handles math exercises and makes output in json in format { result: number }.\",",
          "275:     },",
          "276:     { role: \"user\", content: \"2 + 2\" },",
          "277:   ];",
          "279:   const res = await llm.invoke(messages, {",
          "280:     response_format: { type: \"json_object\" },",
          "281:   });",
          "283:   expect(JSON.parse(res.content as string)).toEqual({ result: 4 });",
          "284: });",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts||libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts": [
          "File: libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts -> libs/langchain-cerebras/src/tests/chat_models.standard.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { test, expect } from \"@jest/globals\";",
          "4: import { ChatModelIntegrationTests } from \"@langchain/standard-tests\";",
          "5: import { AIMessageChunk } from \"@langchain/core/messages\";",
          "6: import { ChatCerebras, ChatCerebrasCallOptions } from \"../chat_models.js\";",
          "8: class ChatCerebrasStandardIntegrationTests extends ChatModelIntegrationTests<",
          "9:   ChatCerebrasCallOptions,",
          "10:   AIMessageChunk",
          "11: > {",
          "12:   constructor() {",
          "13:     if (!process.env.CEREBRAS_API_KEY) {",
          "14:       throw new Error(",
          "15:         \"Can not run Cerebras integration tests because CEREBRAS_API_KEY_API_KEY is not set\"",
          "16:       );",
          "17:     }",
          "18:     super({",
          "19:       Cls: ChatCerebras as any,",
          "20:       chatModelHasToolCalling: true,",
          "21:       chatModelHasStructuredOutput: true,",
          "22:       constructorArgs: {",
          "23:         model: \"llama3.1-8b\",",
          "24:         maxRetries: 1,",
          "25:         temperature: 0,",
          "26:       },",
          "27:     });",
          "28:   }",
          "29: }",
          "31: const testClass = new ChatCerebrasStandardIntegrationTests();",
          "33: test(\"ChatCerebrasStandardIntegrationTests\", async () => {",
          "34:   console.warn = (..._args: unknown[]) => {",
          "36:   };",
          "37:   const testResults = await testClass.runTests();",
          "38:   expect(testResults).toBe(true);",
          "39: });",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/src/tests/chat_models.standard.test.ts||libs/langchain-cerebras/src/tests/chat_models.standard.test.ts": [
          "File: libs/langchain-cerebras/src/tests/chat_models.standard.test.ts -> libs/langchain-cerebras/src/tests/chat_models.standard.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { test, expect } from \"@jest/globals\";",
          "4: import { ChatModelUnitTests } from \"@langchain/standard-tests\";",
          "5: import { AIMessageChunk } from \"@langchain/core/messages\";",
          "6: import { ChatCerebras, ChatCerebrasCallOptions } from \"../chat_models.js\";",
          "8: class ChatCerebrasStandardUnitTests extends ChatModelUnitTests<",
          "9:   ChatCerebrasCallOptions,",
          "10:   AIMessageChunk",
          "11: > {",
          "12:   constructor() {",
          "13:     super({",
          "14:       Cls: ChatCerebras as any,",
          "15:       chatModelHasToolCalling: true,",
          "16:       chatModelHasStructuredOutput: true,",
          "17:       constructorArgs: {",
          "18:         model: \"llama3.1-8b\",",
          "19:         maxRetries: 1,",
          "20:         temperature: 0,",
          "21:       },",
          "22:     });",
          "26:     process.env.CEREBRAS_API_KEY = \"test\";",
          "27:   }",
          "29:   testChatModelInitApiKey() {",
          "32:     process.env.CEREBRAS_API_KEY = \"\";",
          "33:     super.testChatModelInitApiKey();",
          "35:     process.env.CEREBRAS_API_KEY = \"test\";",
          "36:   }",
          "37: }",
          "39: const testClass = new ChatCerebrasStandardUnitTests();",
          "41: test(\"ChatCerebrasStandardUnitTests\", () => {",
          "42:   const testResults = testClass.runTests();",
          "43:   expect(testResults).toBe(true);",
          "44: });",
          "",
          "---------------"
        ],
        "libs/langchain-cerebras/src/utils.ts||libs/langchain-cerebras/src/utils.ts": [
          "File: libs/langchain-cerebras/src/utils.ts -> libs/langchain-cerebras/src/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   AIMessage,",
          "3:   AIMessageChunk,",
          "4:   BaseMessage,",
          "5:   HumanMessage,",
          "6:   MessageContentText,",
          "7:   SystemMessage,",
          "8:   ToolMessage,",
          "9:   UsageMetadata,",
          "10: } from \"@langchain/core/messages\";",
          "11: import { v4 as uuidv4 } from \"uuid\";",
          "12: import Cerebras from \"@cerebras/cerebras_cloud_sdk\";",
          "13: import { ToolChoice } from \"@langchain/core/language_models/chat_models\";",
          "15: export type CerebrasMessageParam =",
          "16:   | Cerebras.ChatCompletionCreateParams.AssistantMessageRequest",
          "17:   | Cerebras.ChatCompletionCreateParams.SystemMessageRequest",
          "18:   | Cerebras.ChatCompletionCreateParams.ToolMessageRequest",
          "19:   | Cerebras.ChatCompletionCreateParams.UserMessageRequest;",
          "20: export type CerebrasToolCall =",
          "21:   Cerebras.ChatCompletion.ChatCompletionResponse.Choice.Message.ToolCall;",
          "23: export function convertCerebrasMessagesToLangChain(",
          "24:   messages: Cerebras.ChatCompletion.ChatCompletionResponse.Choice.Message,",
          "25:   extra?: {",
          "27:     responseMetadata?: Record<string, any>;",
          "28:     usageMetadata?: UsageMetadata;",
          "29:   }",
          "30: ): AIMessageChunk {",
          "31:   return new AIMessageChunk({",
          "32:     content: messages.content ?? \"\",",
          "33:     tool_call_chunks: messages.tool_calls?.map((tc) => ({",
          "34:       name: tc.function.name,",
          "35:       args: JSON.stringify(tc.function.arguments),",
          "36:       type: \"tool_call_chunk\",",
          "37:       index: 0,",
          "38:       id: uuidv4(),",
          "39:     })),",
          "40:     response_metadata: extra?.responseMetadata,",
          "41:     usage_metadata: extra?.usageMetadata,",
          "42:   });",
          "43: }",
          "45: function extractBase64FromDataUrl(dataUrl: string): string {",
          "46:   const match = dataUrl.match(/^data:.*?;base64,(.*)$/);",
          "47:   return match ? match[1] : \"\";",
          "48: }",
          "50: function convertAIMessageToCerebras(",
          "51:   messages: AIMessage",
          "52: ): CerebrasMessageParam[] {",
          "53:   if (typeof messages.content === \"string\") {",
          "54:     return [",
          "55:       {",
          "56:         role: \"assistant\",",
          "57:         content: messages.content,",
          "58:       },",
          "59:     ];",
          "60:   }",
          "62:   const textFields = messages.content.filter(",
          "63:     (c) => c.type === \"text\" && typeof c.text === \"string\"",
          "64:   );",
          "65:   const textMessages: CerebrasMessageParam[] = (",
          "66:     textFields as MessageContentText[]",
          "67:   ).map((c) => ({",
          "68:     role: \"assistant\",",
          "69:     content: c.text,",
          "70:   }));",
          "71:   let toolCallMsgs: CerebrasMessageParam | undefined;",
          "73:   if (",
          "74:     messages.content.find((c) => c.type === \"tool_use\") &&",
          "75:     messages.tool_calls?.length",
          "76:   ) {",
          "78:     const toolCalls: CerebrasToolCall[] | undefined = messages.tool_calls?.map(",
          "79:       (tc) => ({",
          "80:         id: tc.id!,",
          "81:         type: \"function\",",
          "82:         function: {",
          "83:           name: tc.name,",
          "84:           arguments: JSON.stringify(tc.args),",
          "85:         },",
          "86:       })",
          "87:     );",
          "89:     if (toolCalls) {",
          "90:       toolCallMsgs = {",
          "91:         role: \"assistant\",",
          "92:         tool_calls: toolCalls,",
          "93:         content: \"\",",
          "94:       };",
          "95:     }",
          "96:   } else if (",
          "97:     messages.content.find((c) => c.type === \"tool_use\") &&",
          "98:     !messages.tool_calls?.length",
          "99:   ) {",
          "100:     throw new Error(",
          "101:       \"'tool_use' content type is not supported without tool calls.\"",
          "102:     );",
          "103:   }",
          "105:   return [...textMessages, ...(toolCallMsgs ? [toolCallMsgs] : [])];",
          "106: }",
          "108: function convertHumanGenericMessagesToCerebras(",
          "109:   message: HumanMessage",
          "110: ): CerebrasMessageParam[] {",
          "111:   if (typeof message.content === \"string\") {",
          "112:     return [",
          "113:       {",
          "114:         role: \"user\",",
          "115:         content: message.content,",
          "116:       },",
          "117:     ];",
          "118:   }",
          "119:   return message.content.map((c) => {",
          "120:     if (c.type === \"text\") {",
          "121:       return {",
          "122:         role: \"user\",",
          "123:         content: c.text,",
          "124:       };",
          "125:     } else if (c.type === \"image_url\") {",
          "126:       if (typeof c.image_url === \"string\") {",
          "127:         return {",
          "128:           role: \"user\",",
          "129:           content: \"\",",
          "130:           images: [extractBase64FromDataUrl(c.image_url)],",
          "131:         };",
          "132:       } else if (c.image_url.url && typeof c.image_url.url === \"string\") {",
          "133:         return {",
          "134:           role: \"user\",",
          "135:           content: \"\",",
          "136:           images: [extractBase64FromDataUrl(c.image_url.url)],",
          "137:         };",
          "138:       }",
          "139:     }",
          "140:     throw new Error(`Unsupported content type: ${c.type}`);",
          "141:   });",
          "142: }",
          "144: function convertSystemMessageToCerebras(",
          "145:   message: SystemMessage",
          "146: ): CerebrasMessageParam[] {",
          "147:   if (typeof message.content === \"string\") {",
          "148:     return [",
          "149:       {",
          "150:         role: \"system\",",
          "151:         content: message.content,",
          "152:       },",
          "153:     ];",
          "154:   } else if (",
          "155:     message.content.every(",
          "156:       (c) => c.type === \"text\" && typeof c.text === \"string\"",
          "157:     )",
          "158:   ) {",
          "159:     return (message.content as MessageContentText[]).map((c) => ({",
          "160:       role: \"system\",",
          "161:       content: c.text,",
          "162:     }));",
          "163:   } else {",
          "164:     throw new Error(",
          "165:       `Unsupported content type(s): ${message.content",
          "166:         .map((c) => c.type)",
          "167:         .join(\", \")}`",
          "168:     );",
          "169:   }",
          "170: }",
          "172: function convertToolMessageToCerebras(",
          "173:   message: ToolMessage",
          "174: ): CerebrasMessageParam[] {",
          "175:   if (typeof message.content !== \"string\") {",
          "176:     throw new Error(\"Non string tool message content is not supported\");",
          "177:   }",
          "178:   return [",
          "179:     {",
          "180:       role: \"tool\",",
          "181:       content: message.content,",
          "182:       tool_call_id: message.tool_call_id,",
          "183:     },",
          "184:   ];",
          "185: }",
          "187: export function convertToCerebrasMessageParams(",
          "188:   messages: BaseMessage[]",
          "189: ): CerebrasMessageParam[] {",
          "190:   return messages.flatMap((msg) => {",
          "191:     if ([\"human\", \"generic\"].includes(msg._getType())) {",
          "192:       return convertHumanGenericMessagesToCerebras(msg);",
          "193:     } else if (msg._getType() === \"ai\") {",
          "194:       return convertAIMessageToCerebras(msg);",
          "195:     } else if (msg._getType() === \"system\") {",
          "196:       return convertSystemMessageToCerebras(msg);",
          "197:     } else if (msg._getType() === \"tool\") {",
          "198:       return convertToolMessageToCerebras(msg as ToolMessage);",
          "199:     } else {",
          "200:       throw new Error(`Unsupported message type: ${msg._getType()}`);",
          "201:     }",
          "202:   });",
          "203: }",
          "205: export function formatToCerebrasToolChoice(",
          "206:   toolChoice?: ToolChoice",
          "207: ): Cerebras.ChatCompletionCreateParams[\"tool_choice\"] {",
          "208:   if (!toolChoice) {",
          "209:     return undefined;",
          "210:   } else if (toolChoice === \"any\" || toolChoice === \"required\") {",
          "211:     return \"required\";",
          "212:   } else if (toolChoice === \"auto\") {",
          "213:     return \"auto\";",
          "214:   } else if (toolChoice === \"none\") {",
          "215:     return \"none\";",
          "216:   } else if (typeof toolChoice === \"string\") {",
          "217:     return {",
          "218:       type: \"function\",",
          "219:       function: {",
          "220:         name: toolChoice,",
          "221:       },",
          "222:     };",
          "223:   } else {",
          "224:     return toolChoice as Cerebras.ChatCompletionCreateParams.Tool;",
          "225:   }",
          "226: }",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "8691:   languageName: node",
          "8692:   linkType: hard",
          "8694: \"@cfworker/json-schema@npm:^4.0.2\":",
          "8695:   version: 4.0.2",
          "8696:   resolution: \"@cfworker/json-schema@npm:4.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8694: \"@cerebras/cerebras_cloud_sdk@npm:^1.15.0\":",
          "8695:   version: 1.15.0",
          "8696:   resolution: \"@cerebras/cerebras_cloud_sdk@npm:1.15.0\"",
          "8697:   dependencies:",
          "8698:     \"@types/node\": ^18.11.18",
          "8699:     \"@types/node-fetch\": ^2.6.4",
          "8700:     abort-controller: ^3.0.0",
          "8701:     agentkeepalive: ^4.2.1",
          "8702:     form-data-encoder: 1.7.2",
          "8703:     formdata-node: ^4.3.2",
          "8704:     node-fetch: ^2.6.7",
          "8705:   checksum: 192b6c473fa2cf7d7b77b1523e935c21f0d8084365ec795e02a0dcb608e85a4b742c1584338311cad816c46b2f50772ab7b7902a2e5d5fd12800eae085db9b06",
          "8706:   languageName: node",
          "8707:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11729:   languageName: unknown",
          "11730:   linkType: soft",
          "11732: \"@langchain/cloudflare@workspace:*, @langchain/cloudflare@workspace:libs/langchain-cloudflare\":",
          "11733:   version: 0.0.0-use.local",
          "11734:   resolution: \"@langchain/cloudflare@workspace:libs/langchain-cloudflare\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11747: \"@langchain/cerebras@*, @langchain/cerebras@workspace:libs/langchain-cerebras\":",
          "11748:   version: 0.0.0-use.local",
          "11749:   resolution: \"@langchain/cerebras@workspace:libs/langchain-cerebras\"",
          "11750:   dependencies:",
          "11751:     \"@cerebras/cerebras_cloud_sdk\": ^1.15.0",
          "11752:     \"@jest/globals\": ^29.5.0",
          "11753:     \"@langchain/core\": \"workspace:*\"",
          "11754:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "11755:     \"@langchain/standard-tests\": 0.0.0",
          "11756:     \"@swc/core\": ^1.3.90",
          "11757:     \"@swc/jest\": ^0.2.29",
          "11758:     \"@tsconfig/recommended\": ^1.0.3",
          "11759:     \"@types/uuid\": ^10",
          "11760:     \"@typescript-eslint/eslint-plugin\": ^6.12.0",
          "11761:     \"@typescript-eslint/parser\": ^6.12.0",
          "11762:     dotenv: ^16.3.1",
          "11763:     dpdm: ^3.12.0",
          "11764:     eslint: ^8.33.0",
          "11765:     eslint-config-airbnb-base: ^15.0.0",
          "11766:     eslint-config-prettier: ^8.6.0",
          "11767:     eslint-plugin-import: ^2.27.5",
          "11768:     eslint-plugin-no-instanceof: ^1.0.1",
          "11769:     eslint-plugin-prettier: ^4.2.1",
          "11770:     jest: ^29.5.0",
          "11771:     jest-environment-node: ^29.6.4",
          "11772:     prettier: ^2.8.3",
          "11773:     release-it: ^15.10.1",
          "11774:     rollup: ^4.5.2",
          "11775:     ts-jest: ^29.1.0",
          "11776:     typescript: <5.2.0",
          "11777:     uuid: ^10.0.0",
          "11778:     zod: ^3.22.4",
          "11779:     zod-to-json-schema: ^3.22.3",
          "11780:   peerDependencies:",
          "11781:     \"@langchain/core\": \">=0.3.0 <0.4.0\"",
          "11782:   languageName: unknown",
          "11783:   linkType: soft",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "20119:   languageName: node",
          "20120:   linkType: hard",
          "20123:   version: 10.0.0",
          "20124:   resolution: \"@types/uuid@npm:10.0.0\"",
          "20125:   checksum: e3958f8b0fe551c86c14431f5940c3470127293280830684154b91dc7eb3514aeb79fe3216968833cf79d4d1c67f580f054b5be2cd562bebf4f728913e73e944",
          "",
          "[Removed Lines]",
          "20122: \"@types/uuid@npm:^10.0.0\":",
          "",
          "[Added Lines]",
          "20175: \"@types/uuid@npm:^10, @types/uuid@npm:^10.0.0\":",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "33365:     \"@jest/globals\": ^29.5.0",
          "33366:     \"@langchain/anthropic\": \"*\"",
          "33367:     \"@langchain/aws\": \"*\"",
          "33368:     \"@langchain/cohere\": \"*\"",
          "33369:     \"@langchain/core\": \"workspace:*\"",
          "33370:     \"@langchain/google-genai\": \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33421:     \"@langchain/cerebras\": \"*\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "33423:   peerDependencies:",
          "33424:     \"@langchain/anthropic\": \"*\"",
          "33425:     \"@langchain/aws\": \"*\"",
          "33426:     \"@langchain/cohere\": \"*\"",
          "33427:     \"@langchain/core\": \">=0.2.21 <0.4.0\"",
          "33428:     \"@langchain/google-genai\": \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33480:     \"@langchain/cerebras\": \"*\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "33440:       optional: true",
          "33441:     \"@langchain/aws\":",
          "33442:       optional: true",
          "33443:     \"@langchain/cohere\":",
          "33444:       optional: true",
          "33445:     \"@langchain/google-genai\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33498:     \"@langchain/cerebras\":",
          "33499:       optional: true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a7a2b832f704f85b3f786a4bd3044a1e5dafc08",
      "candidate_info": {
        "commit_hash": "2a7a2b832f704f85b3f786a4bd3044a1e5dafc08",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/2a7a2b832f704f85b3f786a4bd3044a1e5dafc08",
        "files": [
          "docs/core_docs/docs/integrations/chat/llama_cpp.mdx",
          "docs/core_docs/docs/integrations/llms/llama_cpp.mdx",
          "docs/core_docs/docs/integrations/text_embedding/llama_cpp.mdx",
          "examples/src/embeddings/llama_cpp_basic.ts",
          "examples/src/embeddings/llama_cpp_docs.ts",
          "examples/src/models/chat/integration_llama_cpp.ts",
          "examples/src/models/chat/integration_llama_cpp_chain.ts",
          "examples/src/models/chat/integration_llama_cpp_stream.ts",
          "examples/src/models/chat/integration_llama_cpp_stream_invoke.ts",
          "examples/src/models/chat/integration_llama_cpp_stream_multi.ts",
          "examples/src/models/chat/integration_llama_cpp_system.ts",
          "examples/src/models/llm/llama_cpp.ts",
          "examples/src/models/llm/llama_cpp_stream.ts",
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/chat_models/llama_cpp.ts",
          "libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts",
          "libs/langchain-community/src/embeddings/llama_cpp.ts",
          "libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts",
          "libs/langchain-community/src/llms/llama_cpp.ts",
          "libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts",
          "libs/langchain-community/src/utils/llama_cpp.ts",
          "yarn.lock"
        ],
        "message": "fix(community) : Upgrade node-llama-cpp to be compatible with version 3  (#7135)\n\nCo-authored-by: Jacky Chen <jackychen4@gmail.com>",
        "before_after_code_files": [
          "examples/src/embeddings/llama_cpp_basic.ts||examples/src/embeddings/llama_cpp_basic.ts",
          "examples/src/embeddings/llama_cpp_docs.ts||examples/src/embeddings/llama_cpp_docs.ts",
          "examples/src/models/chat/integration_llama_cpp.ts||examples/src/models/chat/integration_llama_cpp.ts",
          "examples/src/models/chat/integration_llama_cpp_chain.ts||examples/src/models/chat/integration_llama_cpp_chain.ts",
          "examples/src/models/chat/integration_llama_cpp_stream.ts||examples/src/models/chat/integration_llama_cpp_stream.ts",
          "examples/src/models/chat/integration_llama_cpp_stream_invoke.ts||examples/src/models/chat/integration_llama_cpp_stream_invoke.ts",
          "examples/src/models/chat/integration_llama_cpp_stream_multi.ts||examples/src/models/chat/integration_llama_cpp_stream_multi.ts",
          "examples/src/models/chat/integration_llama_cpp_system.ts||examples/src/models/chat/integration_llama_cpp_system.ts",
          "examples/src/models/llm/llama_cpp.ts||examples/src/models/llm/llama_cpp.ts",
          "examples/src/models/llm/llama_cpp_stream.ts||examples/src/models/llm/llama_cpp_stream.ts",
          "libs/langchain-community/src/chat_models/llama_cpp.ts||libs/langchain-community/src/chat_models/llama_cpp.ts",
          "libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts||libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts",
          "libs/langchain-community/src/embeddings/llama_cpp.ts||libs/langchain-community/src/embeddings/llama_cpp.ts",
          "libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts||libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts",
          "libs/langchain-community/src/llms/llama_cpp.ts||libs/langchain-community/src/llms/llama_cpp.ts",
          "libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts||libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts",
          "libs/langchain-community/src/utils/llama_cpp.ts||libs/langchain-community/src/utils/llama_cpp.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "examples/src/embeddings/llama_cpp_basic.ts||examples/src/embeddings/llama_cpp_basic.ts": [
          "File: examples/src/embeddings/llama_cpp_basic.ts -> examples/src/embeddings/llama_cpp_basic.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "6:   modelPath: llamaPath,",
          "7: });",
          "",
          "[Removed Lines]",
          "5: const embeddings = new LlamaCppEmbeddings({",
          "",
          "[Added Lines]",
          "5: const embeddings = await LlamaCppEmbeddings.initialize({",
          "",
          "---------------"
        ],
        "examples/src/embeddings/llama_cpp_docs.ts||examples/src/embeddings/llama_cpp_docs.ts": [
          "File: examples/src/embeddings/llama_cpp_docs.ts -> examples/src/embeddings/llama_cpp_docs.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const documents = [\"Hello World!\", \"Bye Bye!\"];",
          "8:   modelPath: llamaPath,",
          "9: });",
          "",
          "[Removed Lines]",
          "7: const embeddings = new LlamaCppEmbeddings({",
          "",
          "[Added Lines]",
          "7: const embeddings = await LlamaCppEmbeddings.initialize({",
          "",
          "---------------"
        ],
        "examples/src/models/chat/integration_llama_cpp.ts||examples/src/models/chat/integration_llama_cpp.ts": [
          "File: examples/src/models/chat/integration_llama_cpp.ts -> examples/src/models/chat/integration_llama_cpp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "8: const response = await model.invoke([",
          "9:   new HumanMessage({ content: \"My name is John.\" }),",
          "",
          "[Removed Lines]",
          "6: const model = new ChatLlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "6: const model = await ChatLlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------"
        ],
        "examples/src/models/chat/integration_llama_cpp_chain.ts||examples/src/models/chat/integration_llama_cpp_chain.ts": [
          "File: examples/src/models/chat/integration_llama_cpp_chain.ts -> examples/src/models/chat/integration_llama_cpp_chain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "9: const prompt = PromptTemplate.fromTemplate(",
          "10:   \"What is a good name for a company that makes {product}?\"",
          "",
          "[Removed Lines]",
          "7: const model = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.5 });",
          "",
          "[Added Lines]",
          "7: const model = await ChatLlamaCpp.initialize({",
          "8:   modelPath: llamaPath,",
          "9:   temperature: 0.5,",
          "10: });",
          "",
          "---------------"
        ],
        "examples/src/models/chat/integration_llama_cpp_stream.ts||examples/src/models/chat/integration_llama_cpp_stream.ts": [
          "File: examples/src/models/chat/integration_llama_cpp_stream.ts -> examples/src/models/chat/integration_llama_cpp_stream.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "7: const stream = await model.stream(\"Tell me a short story about a happy Llama.\");",
          "",
          "[Removed Lines]",
          "5: const model = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "5: const model = await ChatLlamaCpp.initialize({",
          "6:   modelPath: llamaPath,",
          "7:   temperature: 0.7,",
          "8: });",
          "",
          "---------------"
        ],
        "examples/src/models/chat/integration_llama_cpp_stream_invoke.ts||examples/src/models/chat/integration_llama_cpp_stream_invoke.ts": [
          "File: examples/src/models/chat/integration_llama_cpp_stream_invoke.ts -> examples/src/models/chat/integration_llama_cpp_stream_invoke.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "8: const controller = new AbortController();",
          "",
          "[Removed Lines]",
          "6: const model = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "6: const model = await ChatLlamaCpp.initialize({",
          "7:   modelPath: llamaPath,",
          "8:   temperature: 0.7,",
          "9: });",
          "",
          "---------------"
        ],
        "examples/src/models/chat/integration_llama_cpp_stream_multi.ts||examples/src/models/chat/integration_llama_cpp_stream_multi.ts": [
          "File: examples/src/models/chat/integration_llama_cpp_stream_multi.ts -> examples/src/models/chat/integration_llama_cpp_stream_multi.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "8: const stream = await llamaCpp.stream([",
          "9:   new SystemMessage(",
          "",
          "[Removed Lines]",
          "6: const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "6: const llamaCpp = await ChatLlamaCpp.initialize({",
          "7:   modelPath: llamaPath,",
          "8:   temperature: 0.7,",
          "9: });",
          "",
          "---------------"
        ],
        "examples/src/models/chat/integration_llama_cpp_system.ts||examples/src/models/chat/integration_llama_cpp_system.ts": [
          "File: examples/src/models/chat/integration_llama_cpp_system.ts -> examples/src/models/chat/integration_llama_cpp_system.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "8: const response = await model.invoke([",
          "9:   new SystemMessage(",
          "",
          "[Removed Lines]",
          "6: const model = new ChatLlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "6: const model = await ChatLlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------"
        ],
        "examples/src/models/llm/llama_cpp.ts||examples/src/models/llm/llama_cpp.ts": [
          "File: examples/src/models/llm/llama_cpp.ts -> examples/src/models/llm/llama_cpp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "4: const question = \"Where do Llamas come from?\";",
          "8: console.log(`You: ${question}`);",
          "9: const response = await model.invoke(question);",
          "",
          "[Removed Lines]",
          "6: const model = new LlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "6: const model = await LlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------"
        ],
        "examples/src/models/llm/llama_cpp_stream.ts||examples/src/models/llm/llama_cpp_stream.ts": [
          "File: examples/src/models/llm/llama_cpp_stream.ts -> examples/src/models/llm/llama_cpp_stream.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: const llamaPath = \"/Replace/with/path/to/your/model/gguf-llama2-q4_0.bin\";",
          "7: const prompt = \"Tell me a short story about a happy Llama.\";",
          "",
          "[Removed Lines]",
          "5: const model = new LlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "5: const model = await LlamaCpp.initialize({",
          "6:   modelPath: llamaPath,",
          "7:   temperature: 0.7,",
          "8: });",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/chat_models/llama_cpp.ts||libs/langchain-community/src/chat_models/llama_cpp.ts": [
          "File: libs/langchain-community/src/chat_models/llama_cpp.ts -> libs/langchain-community/src/chat_models/llama_cpp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:   LlamaModel,",
          "4:   LlamaContext,",
          "5:   LlamaChatSession,",
          "7: } from \"node-llama-cpp\";",
          "9: import {",
          "",
          "[Removed Lines]",
          "6:   type ConversationInteraction,",
          "",
          "[Added Lines]",
          "6:   type Token,",
          "7:   ChatUserMessage,",
          "8:   ChatModelResponse,",
          "9:   ChatHistoryItem,",
          "10:   getLlama,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     return \"ChatLlamaCpp\";",
          "88:   }",
          "91:     super(inputs);",
          "92:     this.maxTokens = inputs?.maxTokens;",
          "93:     this.temperature = inputs?.temperature;",
          "94:     this.topK = inputs?.topK;",
          "95:     this.topP = inputs?.topP;",
          "96:     this.trimWhitespaceSuffix = inputs?.trimWhitespaceSuffix;",
          "99:     this._session = null;",
          "100:   }",
          "102:   _llmType() {",
          "104:   }",
          "",
          "[Removed Lines]",
          "90:   constructor(inputs: LlamaCppInputs) {",
          "97:     this._model = createLlamaModel(inputs);",
          "98:     this._context = createLlamaContext(this._model, inputs);",
          "103:     return \"llama2_cpp\";",
          "",
          "[Added Lines]",
          "94:   public constructor(inputs: LlamaCppInputs) {",
          "109:   public static async initialize(",
          "110:     inputs: LlamaBaseCppInputs",
          "111:   ): Promise<ChatLlamaCpp> {",
          "112:     const instance = new ChatLlamaCpp(inputs);",
          "113:     const llama = await getLlama();",
          "115:     instance._model = await createLlamaModel(inputs, llama);",
          "116:     instance._context = await createLlamaContext(instance._model, inputs);",
          "118:     return instance;",
          "119:   }",
          "122:     return \"llama_cpp\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:         signal: options.signal,",
          "147:         onToken: async (tokens: number[]) => {",
          "148:           options.onToken?.(tokens);",
          "150:         },",
          "151:         maxTokens: this?.maxTokens,",
          "152:         temperature: this?.temperature,",
          "",
          "[Removed Lines]",
          "149:           await runManager?.handleLLMNewToken(this._context.decode(tokens));",
          "",
          "[Added Lines]",
          "168:           await runManager?.handleLLMNewToken(",
          "169:             this._model.detokenize(tokens.map((num) => num as Token))",
          "170:           );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:     };",
          "182:     const prompt = this._buildPrompt(input);",
          "184:     const stream = await this.caller.call(async () =>",
          "186:     );",
          "188:     for await (const chunk of stream) {",
          "189:       yield new ChatGenerationChunk({",
          "191:         message: new AIMessageChunk({",
          "193:         }),",
          "194:         generationInfo: {},",
          "195:       });",
          "197:     }",
          "198:   }",
          "",
          "[Removed Lines]",
          "185:       this._context.evaluate(this._context.encode(prompt), promptOptions)",
          "190:         text: this._context.decode([chunk]),",
          "192:           content: this._context.decode([chunk]),",
          "196:       await runManager?.handleLLMNewToken(this._context.decode([chunk]) ?? \"\");",
          "",
          "[Added Lines]",
          "204:     const sequence = this._context.getSequence();",
          "207:       sequence.evaluate(this._model.tokenize(prompt), promptOptions)",
          "212:         text: this._model.detokenize([chunk]),",
          "214:           content: this._model.detokenize([chunk]),",
          "218:       await runManager?.handleLLMNewToken(",
          "219:         this._model.detokenize([chunk]) ?? \"\"",
          "220:       );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202:     let prompt = \"\";",
          "203:     let sysMessage = \"\";",
          "204:     let noSystemMessages: BaseMessage[] = [];",
          "209:       const sysMessages = messages.filter(",
          "211:       );",
          "213:       const systemMessageContent = sysMessages[sysMessages.length - 1].content;",
          "",
          "[Removed Lines]",
          "205:     let interactions: ConversationInteraction[] = [];",
          "208:     if (messages.findIndex((msg) => msg._getType() === \"system\") !== -1) {",
          "210:         (message) => message._getType() === \"system\"",
          "",
          "[Added Lines]",
          "229:     let interactions: ChatHistoryItem[] = [];",
          "232:     if (messages.findIndex((msg) => msg.getType() === \"system\") !== -1) {",
          "234:         (message) => message.getType() === \"system\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224:       noSystemMessages = messages.filter(",
          "226:       );",
          "227:     } else {",
          "228:       noSystemMessages = messages;",
          "",
          "[Removed Lines]",
          "225:         (message) => message._getType() !== \"system\"",
          "",
          "[Added Lines]",
          "249:         (message) => message.getType() !== \"system\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:     if (noSystemMessages.length > 1) {",
          "237:         const finalMessageContent =",
          "238:           noSystemMessages[noSystemMessages.length - 1].content;",
          "239:         if (typeof finalMessageContent !== \"string\") {",
          "",
          "[Removed Lines]",
          "234:       if (",
          "235:         noSystemMessages[noSystemMessages.length - 1]._getType() === \"human\"",
          "236:       ) {",
          "",
          "[Added Lines]",
          "258:       if (noSystemMessages[noSystemMessages.length - 1].getType() === \"human\") {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "262:     if (sysMessage !== \"\" && interactions.length > 0) {",
          "263:       this._session = new LlamaChatSession({",
          "266:         systemPrompt: sysMessage,",
          "267:       });",
          "268:     } else if (sysMessage !== \"\" && interactions.length === 0) {",
          "269:       this._session = new LlamaChatSession({",
          "271:         systemPrompt: sysMessage,",
          "272:       });",
          "273:     } else if (sysMessage === \"\" && interactions.length > 0) {",
          "274:       this._session = new LlamaChatSession({",
          "277:       });",
          "278:     } else {",
          "279:       this._session = new LlamaChatSession({",
          "281:       });",
          "282:     }",
          "",
          "[Removed Lines]",
          "264:         context: this._context,",
          "265:         conversationHistory: interactions,",
          "270:         context: this._context,",
          "275:         context: this._context,",
          "276:         conversationHistory: interactions,",
          "280:         context: this._context,",
          "",
          "[Added Lines]",
          "286:         contextSequence: this._context.getSequence(),",
          "289:       this._session.setChatHistory(interactions);",
          "292:         contextSequence: this._context.getSequence(),",
          "297:         contextSequence: this._context.getSequence(),",
          "299:       this._session.setChatHistory(interactions);",
          "302:         contextSequence: this._context.getSequence(),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "288:   protected _convertMessagesToInteractions(",
          "289:     messages: BaseMessage[]",
          "293:     for (let i = 0; i < messages.length; i += 2) {",
          "294:       if (i + 1 < messages.length) {",
          "",
          "[Removed Lines]",
          "290:   ): ConversationInteraction[] {",
          "291:     const result: ConversationInteraction[] = [];",
          "",
          "[Added Lines]",
          "312:   ): ChatHistoryItem[] {",
          "313:     const result: ChatHistoryItem[] = [];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "299:             \"ChatLlamaCpp does not support non-string message content.\"",
          "300:           );",
          "301:         }",
          "306:       }",
          "307:     }",
          "",
          "[Removed Lines]",
          "302:         result.push({",
          "303:           prompt,",
          "304:           response,",
          "305:         });",
          "",
          "[Added Lines]",
          "324:         const llamaPrompt: ChatUserMessage = { type: \"user\", text: prompt };",
          "325:         const llamaResponse: ChatModelResponse = {",
          "326:           type: \"model\",",
          "327:           response: [response],",
          "328:         };",
          "329:         result.push(llamaPrompt);",
          "330:         result.push(llamaResponse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "313:     const prompt = input",
          "314:       .map((message) => {",
          "315:         let messageText;",
          "317:           messageText = `[INST] ${message.content} [/INST]`;",
          "319:           messageText = message.content;",
          "321:           messageText = `<<SYS>> ${message.content} <</SYS>>`;",
          "322:         } else if (ChatMessage.isInstance(message)) {",
          "323:           messageText = `\\n\\n${message.role[0].toUpperCase()}${message.role.slice(",
          "",
          "[Removed Lines]",
          "316:         if (message._getType() === \"human\") {",
          "318:         } else if (message._getType() === \"ai\") {",
          "320:         } else if (message._getType() === \"system\") {",
          "",
          "[Added Lines]",
          "341:         if (message.getType() === \"human\") {",
          "343:         } else if (message.getType() === \"ai\") {",
          "345:         } else if (message.getType() === \"system\") {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "325:           )}: ${message.content}`;",
          "326:         } else {",
          "327:           console.warn(",
          "329:           );",
          "330:           messageText = \"\";",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:             `Unsupported message type passed to llama_cpp: \"${message._getType()}\"`",
          "",
          "[Added Lines]",
          "353:             `Unsupported message type passed to llama_cpp: \"${message.getType()}\"`",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts||libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts": [
          "File: libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts -> libs/langchain-community/src/chat_models/tests/chatllama_cpp.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: const llamaPath = getEnvironmentVariable(\"LLAMA_PATH\")!;",
          "14: test.skip(\"Test predict\", async () => {",
          "",
          "[Removed Lines]",
          "15:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "15:   const llamaCpp = await ChatLlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: });",
          "23: test.skip(\"Test call\", async () => {",
          "",
          "[Removed Lines]",
          "24:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "24:   const llamaCpp = await ChatLlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32: });",
          "34: test.skip(\"Test multiple messages\", async () => {",
          "",
          "[Removed Lines]",
          "35:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "35:   const llamaCpp = await ChatLlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47: });",
          "49: test.skip(\"Test system message\", async () => {",
          "",
          "[Removed Lines]",
          "50:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "50:   const llamaCpp = await ChatLlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "61: });",
          "63: test.skip(\"test streaming call\", async () => {",
          "66:   const stream = await llamaCpp.stream(",
          "67:     \"Tell me a short story about a happy Llama.\"",
          "",
          "[Removed Lines]",
          "64:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "64:   const llamaCpp = await ChatLlamaCpp.initialize({",
          "65:     modelPath: llamaPath,",
          "66:     temperature: 0.7,",
          "67:   });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "77: });",
          "79: test.skip(\"test multi-mesage streaming call\", async () => {",
          "82:   const stream = await llamaCpp.stream([",
          "83:     new SystemMessage(",
          "",
          "[Removed Lines]",
          "80:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "83:   const llamaCpp = await ChatLlamaCpp.initialize({",
          "84:     modelPath: llamaPath,",
          "85:     temperature: 0.7,",
          "86:   });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "96: });",
          "98: test.skip(\"test multi-mesage streaming call and abort after 5s\", async () => {",
          "100:   const controller = new AbortController();",
          "101:   setTimeout(() => {",
          "102:     controller.abort();",
          "",
          "[Removed Lines]",
          "99:   const llamaCpp = new ChatLlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "105:   const llamaCpp = await ChatLlamaCpp.initialize({",
          "106:     modelPath: llamaPath,",
          "107:     temperature: 0.7,",
          "108:   });",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/embeddings/llama_cpp.ts||libs/langchain-community/src/embeddings/llama_cpp.ts": [
          "File: libs/langchain-community/src/embeddings/llama_cpp.ts -> libs/langchain-community/src/embeddings/llama_cpp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { Embeddings, type EmbeddingsParams } from \"@langchain/core/embeddings\";",
          "4: import {",
          "5:   LlamaBaseCppInputs,",
          "",
          "[Removed Lines]",
          "2: import { LlamaModel, LlamaContext } from \"node-llama-cpp\";",
          "",
          "[Added Lines]",
          "2: import { LlamaModel, LlamaContext, getLlama } from \"node-llama-cpp\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:   _context: LlamaContext;",
          "40:     super(inputs);",
          "41:     const _inputs = inputs;",
          "42:     _inputs.embedding = true;",
          "46:   }",
          "",
          "[Removed Lines]",
          "39:   constructor(inputs: LlamaCppEmbeddingsParams) {",
          "44:     this._model = createLlamaModel(_inputs);",
          "45:     this._context = createLlamaContext(this._model, _inputs);",
          "",
          "[Added Lines]",
          "39:   public constructor(inputs: LlamaCppEmbeddingsParams) {",
          "43:   }",
          "50:   public static async initialize(",
          "51:     inputs: LlamaBaseCppInputs",
          "52:   ): Promise<LlamaCppEmbeddings> {",
          "53:     const instance = new LlamaCppEmbeddings(inputs);",
          "54:     const llama = await getLlama();",
          "56:     instance._model = await createLlamaModel(inputs, llama);",
          "57:     instance._context = await createLlamaContext(instance._model, inputs);",
          "59:     return instance;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:       const encodings = await this.caller.call(",
          "58:         () =>",
          "59:           new Promise((resolve) => {",
          "61:           })",
          "62:       );",
          "63:       tokensArray.push(encodings);",
          "",
          "[Removed Lines]",
          "60:             resolve(this._context.encode(text));",
          "",
          "[Added Lines]",
          "74:             resolve(this._model.tokenize(text));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     const encodings = await this.caller.call(",
          "91:       () =>",
          "92:         new Promise((resolve) => {",
          "94:         })",
          "95:     );",
          "",
          "[Removed Lines]",
          "93:           resolve(this._context.encode(text));",
          "",
          "[Added Lines]",
          "107:           resolve(this._model.tokenize(text));",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts||libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts": [
          "File: libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts -> libs/langchain-community/src/embeddings/tests/llama_cpp.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const llamaPath = getEnvironmentVariable(\"LLAMA_PATH\")!;",
          "9: test.skip(\"Test LlamaCppEmbeddings.embedQuery\", async () => {",
          "11:   const res = await embeddings.embedQuery(\"Hello Llama\");",
          "12:   expect(typeof res[0]).toBe(\"number\");",
          "13: });",
          "15: test.skip(\"Test LlamaCppEmbeddings.embedDocuments\", async () => {",
          "17:   const res = await embeddings.embedDocuments([\"Hello Llama\", \"Bye bye\"]);",
          "18:   expect(res).toHaveLength(2);",
          "19:   expect(typeof res[0][0]).toBe(\"number\");",
          "",
          "[Removed Lines]",
          "10:   const embeddings = new LlamaCppEmbeddings({ modelPath: llamaPath });",
          "16:   const embeddings = new LlamaCppEmbeddings({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "10:   const embeddings = await LlamaCppEmbeddings.initialize({",
          "11:     modelPath: llamaPath,",
          "12:   });",
          "18:   const embeddings = await LlamaCppEmbeddings.initialize({",
          "19:     modelPath: llamaPath,",
          "20:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: });",
          "23: test.skip(\"Test LlamaCppEmbeddings concurrency\", async () => {",
          "25:     modelPath: llamaPath,",
          "26:     batchSize: 1,",
          "27:   });",
          "",
          "[Removed Lines]",
          "24:   const embeddings = new LlamaCppEmbeddings({",
          "",
          "[Added Lines]",
          "28:   const embeddings = await LlamaCppEmbeddings.initialize({",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/llms/llama_cpp.ts||libs/langchain-community/src/llms/llama_cpp.ts": [
          "File: libs/langchain-community/src/llms/llama_cpp.ts -> libs/langchain-community/src/llms/llama_cpp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   LlamaChatSession,",
          "6:   LlamaJsonSchemaGrammar,",
          "7:   LlamaGrammar,",
          "8:   GbnfJsonSchema,",
          "9: } from \"node-llama-cpp\";",
          "10: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   getLlama,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     return \"LlamaCpp\";",
          "73:   }",
          "76:     super(inputs);",
          "77:     this.maxTokens = inputs?.maxTokens;",
          "78:     this.temperature = inputs?.temperature;",
          "79:     this.topK = inputs?.topK;",
          "80:     this.topP = inputs?.topP;",
          "81:     this.trimWhitespaceSuffix = inputs?.trimWhitespaceSuffix;",
          "87:   }",
          "89:   _llmType() {",
          "91:   }",
          "",
          "[Removed Lines]",
          "75:   constructor(inputs: LlamaCppInputs) {",
          "82:     this._model = createLlamaModel(inputs);",
          "83:     this._context = createLlamaContext(this._model, inputs);",
          "84:     this._session = createLlamaSession(this._context);",
          "85:     this._jsonSchema = createLlamaJsonSchemaGrammar(inputs?.jsonSchema);",
          "86:     this._gbnf = createCustomGrammar(inputs?.gbnf);",
          "90:     return \"llama2_cpp\";",
          "",
          "[Added Lines]",
          "76:   public constructor(inputs: LlamaCppInputs) {",
          "83:   }",
          "90:   public static async initialize(inputs: LlamaCppInputs): Promise<LlamaCpp> {",
          "91:     const instance = new LlamaCpp(inputs);",
          "92:     const llama = await getLlama();",
          "94:     instance._model = await createLlamaModel(inputs, llama);",
          "95:     instance._context = await createLlamaContext(instance._model, inputs);",
          "96:     instance._jsonSchema = await createLlamaJsonSchemaGrammar(",
          "97:       inputs?.jsonSchema,",
          "98:       llama",
          "99:     );",
          "100:     instance._gbnf = await createCustomGrammar(inputs?.gbnf, llama);",
          "101:     instance._session = createLlamaSession(instance._context);",
          "103:     return instance;",
          "107:     return \"llama_cpp\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:       };",
          "118:       const completion = await this._session.prompt(prompt, promptOptions);",
          "119:       return completion;",
          "120:     } catch (e) {",
          "121:       throw new Error(\"Error getting prompt completion.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:       if (this._jsonSchema !== undefined && completion !== undefined) {",
          "138:         return this._jsonSchema.parse(completion) as unknown as string;",
          "139:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:       topP: this?.topP,",
          "135:     };",
          "137:     const stream = await this.caller.call(async () =>",
          "139:     );",
          "141:     for await (const chunk of stream) {",
          "142:       yield new GenerationChunk({",
          "144:         generationInfo: {},",
          "145:       });",
          "147:     }",
          "148:   }",
          "149: }",
          "",
          "[Removed Lines]",
          "138:       this._context.evaluate(this._context.encode(prompt), promptOptions)",
          "143:         text: this._context.decode([chunk]),",
          "146:       await runManager?.handleLLMNewToken(this._context.decode([chunk]) ?? \"\");",
          "",
          "[Added Lines]",
          "159:     if (this._context.sequencesLeft === 0) {",
          "160:       this._context = await createLlamaContext(this._model, LlamaCpp.inputs);",
          "161:     }",
          "162:     const sequence = this._context.getSequence();",
          "163:     const tokens = this._model.tokenize(prompt);",
          "166:       sequence.evaluate(tokens, promptOptions)",
          "171:         text: this._model.detokenize([chunk]),",
          "174:       await runManager?.handleLLMNewToken(",
          "175:         this._model.detokenize([chunk]) ?? \"\"",
          "176:       );",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts||libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts": [
          "File: libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts -> libs/langchain-community/src/llms/tests/llama_cpp.int.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const llamaPath = getEnvironmentVariable(\"LLAMA_PATH\")!;",
          "8: test.skip(\"Test Llama_CPP\", async () => {",
          "12:   const res = await model.invoke(\"Where do Llamas live?\");",
          "",
          "[Removed Lines]",
          "9:   const model = new LlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "9:   const model = await LlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: }, 100000);",
          "16: test.skip(\"Test Llama_CPP\", async () => {",
          "20:   const res = await model.invoke(\"Where do Pandas live?\");",
          "",
          "[Removed Lines]",
          "17:   const model = new LlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "17:   const model = await LlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "22: }, 100000);",
          "24: test.skip(\"Test Llama_CPP\", async () => {",
          "",
          "[Removed Lines]",
          "25:   const model = new LlamaCpp({ modelPath: llamaPath });",
          "",
          "[Added Lines]",
          "25:   const model = await LlamaCpp.initialize({ modelPath: llamaPath });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "35: }, 100000);",
          "37: test.skip(\"Test Llama_CPP\", async () => {",
          "40:   const stream = await model.stream(",
          "41:     \"Tell me a short story about a happy Llama.\"",
          "",
          "[Removed Lines]",
          "38:   const model = new LlamaCpp({ modelPath: llamaPath, temperature: 0.7 });",
          "",
          "[Added Lines]",
          "38:   const model = await LlamaCpp.initialize({",
          "39:     modelPath: llamaPath,",
          "40:     temperature: 0.7,",
          "41:   });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "55:   'root ::= item+ # Excludes various line break characters item ::= \"- \" [^\\r\\n\\x0b\\x0c\\x85\\u2028\\u2029]+ \"\\n\"';",
          "57: test.skip(\"Test Llama_CPP\", async () => {",
          "61:   const res = await model.invoke(",
          "",
          "[Removed Lines]",
          "58:   const model = new LlamaCpp({ modelPath: llamaPath, gbnf: gbnfListGrammer });",
          "",
          "[Added Lines]",
          "61:   const model = await LlamaCpp.initialize({",
          "62:     modelPath: llamaPath,",
          "63:     gbnf: gbnfListGrammer,",
          "64:   });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "82: };",
          "84: test.skip(\"Test Llama_CPP\", async () => {",
          "88:   const res = await model.invoke(\"Where do llamas live?\");",
          "",
          "[Removed Lines]",
          "85:   const model = new LlamaCpp({ modelPath: llamaPath, jsonSchema: schemaJSON });",
          "",
          "[Added Lines]",
          "91:   const model = await LlamaCpp.initialize({",
          "92:     modelPath: llamaPath,",
          "93:     jsonSchema: schemaJSON,",
          "94:   });",
          "",
          "---------------"
        ],
        "libs/langchain-community/src/utils/llama_cpp.ts||libs/langchain-community/src/utils/llama_cpp.ts": [
          "File: libs/langchain-community/src/utils/llama_cpp.ts -> libs/langchain-community/src/utils/llama_cpp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   LlamaChatSession,",
          "6:   LlamaJsonSchemaGrammar,",
          "7:   LlamaGrammar,",
          "8:   GbnfJsonSchema,",
          "9: } from \"node-llama-cpp\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   type LlamaModelOptions,",
          "9:   LlamaContextOptions,",
          "11:   Llama,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   gbnf?: string;",
          "56: }",
          "60:     gpuLayers: inputs?.gpuLayers,",
          "61:     modelPath: inputs.modelPath,",
          "62:     useMlock: inputs?.useMlock,",
          "63:     useMmap: inputs?.useMmap,",
          "64:     vocabOnly: inputs?.vocabOnly,",
          "67:   };",
          "70: }",
          "73:   model: LlamaModel,",
          "74:   inputs: LlamaBaseCppInputs",
          "77:     batchSize: inputs?.batchSize,",
          "78:     contextSize: inputs?.contextSize,",
          "85:     threads: inputs?.threads,",
          "86:   };",
          "89: }",
          "91: export function createLlamaSession(context: LlamaContext): LlamaChatSession {",
          "93: }",
          "98:   if (schemaString === undefined) {",
          "99:     return undefined;",
          "100:   }",
          "102:   const schemaJSON = schemaString as GbnfJsonSchema;",
          "104: }",
          "112: }",
          "",
          "[Removed Lines]",
          "58: export function createLlamaModel(inputs: LlamaBaseCppInputs): LlamaModel {",
          "59:   const options = {",
          "65:     jsonSchema: inputs?.jsonSchema,",
          "66:     gbnf: inputs?.gbnf,",
          "69:   return new LlamaModel(options);",
          "72: export function createLlamaContext(",
          "75: ): LlamaContext {",
          "76:   const options = {",
          "79:     embedding: inputs?.embedding,",
          "80:     f16Kv: inputs?.f16Kv,",
          "81:     logitsAll: inputs?.logitsAll,",
          "82:     model,",
          "83:     prependBos: inputs?.prependBos,",
          "84:     seed: inputs?.seed,",
          "88:   return new LlamaContext(options);",
          "92:   return new LlamaChatSession({ context });",
          "95: export function createLlamaJsonSchemaGrammar(",
          "96:   schemaString: object | undefined",
          "97: ): LlamaJsonSchemaGrammar<GbnfJsonSchema> | undefined {",
          "103:   return new LlamaJsonSchemaGrammar(schemaJSON);",
          "106: export function createCustomGrammar(",
          "107:   filePath: string | undefined",
          "108: ): LlamaGrammar | undefined {",
          "109:   return filePath === undefined",
          "110:     ? undefined",
          "111:     : new LlamaGrammar({ grammar: filePath });",
          "",
          "[Added Lines]",
          "61: export async function createLlamaModel(",
          "62:   inputs: LlamaBaseCppInputs,",
          "63:   llama: Llama",
          "64: ): Promise<LlamaModel> {",
          "65:   const options: LlamaModelOptions = {",
          "73:   return llama.loadModel(options);",
          "76: export async function createLlamaContext(",
          "79: ): Promise<LlamaContext> {",
          "80:   const options: LlamaContextOptions = {",
          "86:   return model.createContext(options);",
          "90:   return new LlamaChatSession({ contextSequence: context.getSequence() });",
          "93: export async function createLlamaJsonSchemaGrammar(",
          "94:   schemaString: object | undefined,",
          "95:   llama: Llama",
          "96: ): Promise<LlamaJsonSchemaGrammar<GbnfJsonSchema> | undefined> {",
          "102:   return await llama.createGrammarForJsonSchema(schemaJSON);",
          "105: export async function createCustomGrammar(",
          "106:   filePath: string | undefined,",
          "107:   llama: Llama",
          "108: ): Promise<LlamaGrammar | undefined> {",
          "109:   if (filePath === undefined) {",
          "110:     return undefined;",
          "111:   }",
          "113:   return llama.createGrammar({",
          "114:     grammar: filePath,",
          "115:   });",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "10441:   languageName: node",
          "10442:   linkType: hard",
          "10444: \"@humanwhocodes/config-array@npm:^0.11.11\":",
          "10445:   version: 0.11.11",
          "10446:   resolution: \"@humanwhocodes/config-array@npm:0.11.11\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10444: \"@huggingface/jinja@npm:^0.3.1\":",
          "10445:   version: 0.3.1",
          "10446:   resolution: \"@huggingface/jinja@npm:0.3.1\"",
          "10447:   checksum: cd5dcc81b3690f9e4de7a6e4a236c4112b3a0e9e86e59d9b1fe49f634c459854f23492f7b66537978fd62fc125f5f3f8c8e56e299e61c633f5b3b429bb45494d",
          "10448:   languageName: node",
          "10449:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11598:     mongodb: ^5.2.0",
          "11599:     mysql2: ^3.9.8",
          "11600:     neo4j-driver: ^5.17.0",
          "11602:     notion-to-md: ^3.1.0",
          "11603:     officeparser: ^4.0.4",
          "11604:     pdf-parse: 1.1.1",
          "",
          "[Removed Lines]",
          "11601:     node-llama-cpp: ^2",
          "",
          "[Added Lines]",
          "11608:     node-llama-cpp: 3.1.1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13340:   languageName: node",
          "13341:   linkType: hard",
          "13343: \"@nodelib/fs.scandir@npm:2.1.5\":",
          "13344:   version: 2.1.5",
          "13345:   resolution: \"@nodelib/fs.scandir@npm:2.1.5\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13350: \"@node-llama-cpp/linux-arm64@npm:3.1.1\":",
          "13351:   version: 3.1.1",
          "13352:   resolution: \"@node-llama-cpp/linux-arm64@npm:3.1.1\"",
          "13353:   conditions: os=linux & (cpu=arm64 | cpu=x64) & libc=glibc",
          "13354:   languageName: node",
          "13355:   linkType: hard",
          "13357: \"@node-llama-cpp/linux-armv7l@npm:3.1.1\":",
          "13358:   version: 3.1.1",
          "13359:   resolution: \"@node-llama-cpp/linux-armv7l@npm:3.1.1\"",
          "13360:   conditions: os=linux & (cpu=arm | cpu=x64) & libc=glibc",
          "13361:   languageName: node",
          "13362:   linkType: hard",
          "13364: \"@node-llama-cpp/linux-x64-cuda@npm:3.1.1\":",
          "13365:   version: 3.1.1",
          "13366:   resolution: \"@node-llama-cpp/linux-x64-cuda@npm:3.1.1\"",
          "13367:   conditions: os=linux & cpu=x64 & libc=glibc",
          "13368:   languageName: node",
          "13369:   linkType: hard",
          "13371: \"@node-llama-cpp/linux-x64-vulkan@npm:3.1.1\":",
          "13372:   version: 3.1.1",
          "13373:   resolution: \"@node-llama-cpp/linux-x64-vulkan@npm:3.1.1\"",
          "13374:   conditions: os=linux & cpu=x64 & libc=glibc",
          "13375:   languageName: node",
          "13376:   linkType: hard",
          "13378: \"@node-llama-cpp/linux-x64@npm:3.1.1\":",
          "13379:   version: 3.1.1",
          "13380:   resolution: \"@node-llama-cpp/linux-x64@npm:3.1.1\"",
          "13381:   conditions: os=linux & cpu=x64 & libc=glibc",
          "13382:   languageName: node",
          "13383:   linkType: hard",
          "13385: \"@node-llama-cpp/mac-arm64-metal@npm:3.1.1\":",
          "13386:   version: 3.1.1",
          "13387:   resolution: \"@node-llama-cpp/mac-arm64-metal@npm:3.1.1\"",
          "13388:   conditions: os=darwin & (cpu=arm64 | cpu=x64)",
          "13389:   languageName: node",
          "13390:   linkType: hard",
          "13392: \"@node-llama-cpp/mac-x64@npm:3.1.1\":",
          "13393:   version: 3.1.1",
          "13394:   resolution: \"@node-llama-cpp/mac-x64@npm:3.1.1\"",
          "13395:   conditions: os=darwin & cpu=x64",
          "13396:   languageName: node",
          "13397:   linkType: hard",
          "13399: \"@node-llama-cpp/win-arm64@npm:3.1.1\":",
          "13400:   version: 3.1.1",
          "13401:   resolution: \"@node-llama-cpp/win-arm64@npm:3.1.1\"",
          "13402:   conditions: os=win32 & (cpu=arm64 | cpu=x64)",
          "13403:   languageName: node",
          "13404:   linkType: hard",
          "13406: \"@node-llama-cpp/win-x64-cuda@npm:3.1.1\":",
          "13407:   version: 3.1.1",
          "13408:   resolution: \"@node-llama-cpp/win-x64-cuda@npm:3.1.1\"",
          "13409:   conditions: os=win32 & cpu=x64",
          "13410:   languageName: node",
          "13411:   linkType: hard",
          "13413: \"@node-llama-cpp/win-x64-vulkan@npm:3.1.1\":",
          "13414:   version: 3.1.1",
          "13415:   resolution: \"@node-llama-cpp/win-x64-vulkan@npm:3.1.1\"",
          "13416:   conditions: os=win32 & cpu=x64",
          "13417:   languageName: node",
          "13418:   linkType: hard",
          "13420: \"@node-llama-cpp/win-x64@npm:3.1.1\":",
          "13421:   version: 3.1.1",
          "13422:   resolution: \"@node-llama-cpp/win-x64@npm:3.1.1\"",
          "13423:   conditions: os=win32 & cpu=x64",
          "13424:   languageName: node",
          "13425:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "13431:   languageName: node",
          "13432:   linkType: hard",
          "13437:   dependencies:",
          "13446:   languageName: node",
          "13447:   linkType: hard",
          "13459:     lru-cache: ^10.0.0",
          "13463:   languageName: node",
          "13464:   linkType: hard",
          "13478:   languageName: node",
          "13479:   linkType: hard",
          "13484:   dependencies:",
          "13490:   languageName: node",
          "13491:   linkType: hard",
          "13496:   dependencies:",
          "13504:   languageName: node",
          "13505:   linkType: hard",
          "",
          "[Removed Lines]",
          "13434: \"@octokit/app@npm:^14.0.0\":",
          "13435:   version: 14.0.0",
          "13436:   resolution: \"@octokit/app@npm:14.0.0\"",
          "13438:     \"@octokit/auth-app\": ^6.0.0",
          "13439:     \"@octokit/auth-unauthenticated\": ^5.0.0",
          "13440:     \"@octokit/core\": ^5.0.0",
          "13441:     \"@octokit/oauth-app\": ^6.0.0",
          "13442:     \"@octokit/plugin-paginate-rest\": ^8.0.0",
          "13443:     \"@octokit/types\": ^11.1.0",
          "13444:     \"@octokit/webhooks\": ^12.0.1",
          "13445:   checksum: 6d1923f5e213ed52a656bd250a3d0504be67e51e95ba5f7ac9658bd19232a67c274267f61b5137905104ea98736d7e00b438dabf87f54596429f34836f14d7bf",
          "13449: \"@octokit/auth-app@npm:^6.0.0\":",
          "13450:   version: 6.0.0",
          "13451:   resolution: \"@octokit/auth-app@npm:6.0.0\"",
          "13452:   dependencies:",
          "13453:     \"@octokit/auth-oauth-app\": ^7.0.0",
          "13454:     \"@octokit/auth-oauth-user\": ^4.0.0",
          "13455:     \"@octokit/request\": ^8.0.2",
          "13456:     \"@octokit/request-error\": ^5.0.0",
          "13457:     \"@octokit/types\": ^11.0.0",
          "13458:     deprecation: ^2.3.1",
          "13460:     universal-github-app-jwt: ^1.1.1",
          "13461:     universal-user-agent: ^6.0.0",
          "13462:   checksum: e3eb3ff7be50557634c5712cfa1413522cfc167f87e096d4d344961fecdc4f8ec91cfb0a025705e48d2c1b663203d90a50bd5b99a6e0d667433d043f27fe3716",
          "13466: \"@octokit/auth-oauth-app@npm:^7.0.0\":",
          "13467:   version: 7.0.0",
          "13468:   resolution: \"@octokit/auth-oauth-app@npm:7.0.0\"",
          "13469:   dependencies:",
          "13470:     \"@octokit/auth-oauth-device\": ^6.0.0",
          "13471:     \"@octokit/auth-oauth-user\": ^4.0.0",
          "13472:     \"@octokit/request\": ^8.0.2",
          "13473:     \"@octokit/types\": ^11.0.0",
          "13474:     \"@types/btoa-lite\": ^1.0.0",
          "13475:     btoa-lite: ^1.0.0",
          "13476:     universal-user-agent: ^6.0.0",
          "13477:   checksum: fa050fbd05cb8da888672f029d65bf6526a8b0c3da43b4c1efac396f48d423adedd0e1d80624de1c95c0e9f5a2e47ad42c71ddca39f9371d8462331905c5d452",
          "13481: \"@octokit/auth-oauth-device@npm:^6.0.0\":",
          "13482:   version: 6.0.0",
          "13483:   resolution: \"@octokit/auth-oauth-device@npm:6.0.0\"",
          "13485:     \"@octokit/oauth-methods\": ^4.0.0",
          "13486:     \"@octokit/request\": ^8.0.0",
          "13487:     \"@octokit/types\": ^11.0.0",
          "13488:     universal-user-agent: ^6.0.0",
          "13489:   checksum: ba6e46a42a68ca0e6d345b10de257b4e0764e6abeedfa3b7bd27bbe4336cbabf3dc081c97eb860939e4fbcb9827c62be5c4396023342db4717f254f06cdbba43",
          "13493: \"@octokit/auth-oauth-user@npm:^4.0.0\":",
          "13494:   version: 4.0.0",
          "13495:   resolution: \"@octokit/auth-oauth-user@npm:4.0.0\"",
          "13497:     \"@octokit/auth-oauth-device\": ^6.0.0",
          "13498:     \"@octokit/oauth-methods\": ^4.0.0",
          "13499:     \"@octokit/request\": ^8.0.2",
          "13500:     \"@octokit/types\": ^11.0.0",
          "13501:     btoa-lite: ^1.0.0",
          "13502:     universal-user-agent: ^6.0.0",
          "13503:   checksum: d4382d5fa3b52e5a7595da92e2bea921793bbce3f03c0c047720db10b1443f42d27c21453d00f4ee30383e2c4279175a53b613de25584b004200c201f63b5f45",
          "",
          "[Added Lines]",
          "13518: \"@octokit/app@npm:^15.0.0\":",
          "13519:   version: 15.1.0",
          "13520:   resolution: \"@octokit/app@npm:15.1.0\"",
          "13522:     \"@octokit/auth-app\": ^7.0.0",
          "13523:     \"@octokit/auth-unauthenticated\": ^6.0.0",
          "13524:     \"@octokit/core\": ^6.1.2",
          "13525:     \"@octokit/oauth-app\": ^7.0.0",
          "13526:     \"@octokit/plugin-paginate-rest\": ^11.0.0",
          "13527:     \"@octokit/types\": ^13.0.0",
          "13528:     \"@octokit/webhooks\": ^13.0.0",
          "13529:   checksum: 133c1b55646c85161f5fe09266aecdb877da298fe88daa0cc0b517dd45233f07462cfd4df2dc4a77452cdf4a7551bed9e8a36f2e172928519a9a2575e77aa7ad",
          "13533: \"@octokit/auth-app@npm:^7.0.0\":",
          "13534:   version: 7.1.1",
          "13535:   resolution: \"@octokit/auth-app@npm:7.1.1\"",
          "13536:   dependencies:",
          "13537:     \"@octokit/auth-oauth-app\": ^8.1.0",
          "13538:     \"@octokit/auth-oauth-user\": ^5.1.0",
          "13539:     \"@octokit/request\": ^9.1.1",
          "13540:     \"@octokit/request-error\": ^6.1.1",
          "13541:     \"@octokit/types\": ^13.4.1",
          "13543:     universal-github-app-jwt: ^2.2.0",
          "13544:     universal-user-agent: ^7.0.0",
          "13545:   checksum: 2cad1a5eef4e458caacb16271284743c7c1d9b34a2617f6b17135b3910ddb33efe16e6a6b5b36407f1b0065324f7b7b1bfa7c2f7d338f6c59f312762e0c57a5c",
          "13549: \"@octokit/auth-oauth-app@npm:^8.0.0, @octokit/auth-oauth-app@npm:^8.1.0\":",
          "13550:   version: 8.1.1",
          "13551:   resolution: \"@octokit/auth-oauth-app@npm:8.1.1\"",
          "13552:   dependencies:",
          "13553:     \"@octokit/auth-oauth-device\": ^7.0.0",
          "13554:     \"@octokit/auth-oauth-user\": ^5.0.1",
          "13555:     \"@octokit/request\": ^9.0.0",
          "13556:     \"@octokit/types\": ^13.0.0",
          "13557:     universal-user-agent: ^7.0.0",
          "13558:   checksum: e61160a6cc6aefff7b8cb3c73c2fc26e327308800b85bf6bfcfb39009ee2cb813bc2034ce3ea29b240aca920515b2199466cf842bbef4905c5da7796aa813eb4",
          "13562: \"@octokit/auth-oauth-device@npm:^7.0.0, @octokit/auth-oauth-device@npm:^7.0.1\":",
          "13563:   version: 7.1.1",
          "13564:   resolution: \"@octokit/auth-oauth-device@npm:7.1.1\"",
          "13566:     \"@octokit/oauth-methods\": ^5.0.0",
          "13567:     \"@octokit/request\": ^9.0.0",
          "13568:     \"@octokit/types\": ^13.0.0",
          "13569:     universal-user-agent: ^7.0.0",
          "13570:   checksum: 5338ae5a5ca1d03c03c3ceba21635b6e2d8d8fe9c1f9f746651ebea5a130e65388e418e730eefb394bbceba092b712181ce9a603eec761f4c8fd6f8790d7cd45",
          "13574: \"@octokit/auth-oauth-user@npm:^5.0.1, @octokit/auth-oauth-user@npm:^5.1.0\":",
          "13575:   version: 5.1.1",
          "13576:   resolution: \"@octokit/auth-oauth-user@npm:5.1.1\"",
          "13578:     \"@octokit/auth-oauth-device\": ^7.0.1",
          "13579:     \"@octokit/oauth-methods\": ^5.0.0",
          "13580:     \"@octokit/request\": ^9.0.1",
          "13581:     \"@octokit/types\": ^13.0.0",
          "13582:     universal-user-agent: ^7.0.0",
          "13583:   checksum: fe2b2ec3f50a565efb37254c78be499d8fc1cf4d565f869b957037103296589c48c69cab26a0549311ed50b698dc9ae1fef5cc9a0cda2a11a519b053c30cb7fc",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "13525:   languageName: node",
          "13526:   linkType: hard",
          "13531:   dependencies:",
          "13535:   languageName: node",
          "13536:   linkType: hard",
          "",
          "[Removed Lines]",
          "13528: \"@octokit/auth-unauthenticated@npm:^5.0.0\":",
          "13529:   version: 5.0.0",
          "13530:   resolution: \"@octokit/auth-unauthenticated@npm:5.0.0\"",
          "13532:     \"@octokit/request-error\": ^5.0.0",
          "13533:     \"@octokit/types\": ^11.0.0",
          "13534:   checksum: ec0715c2fbcfe5a4eaaf996c570e634d339ebbeaa00c1f336b3277c1477c96cdd09342fccdff63edc42ad80dff4ce0f02c3a5e0a6560a35188439330b6624690",
          "",
          "[Added Lines]",
          "13608: \"@octokit/auth-unauthenticated@npm:^6.0.0, @octokit/auth-unauthenticated@npm:^6.0.0-beta.1\":",
          "13609:   version: 6.1.0",
          "13610:   resolution: \"@octokit/auth-unauthenticated@npm:6.1.0\"",
          "13612:     \"@octokit/request-error\": ^6.0.1",
          "13613:     \"@octokit/types\": ^13.0.0",
          "13614:   checksum: 0f8929cbca7fa34f2a4ebcdf92da7a0b5a4a2de7a5dd695b4308a827018db6cfa311e84fe326c19a0b8e66080aa152fa066ae434190e5a63eadbb1449b1d7105",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "13550:   languageName: node",
          "13551:   linkType: hard",
          "13568: \"@octokit/core@npm:^5.0.2\":",
          "13569:   version: 5.2.0",
          "13570:   resolution: \"@octokit/core@npm:5.2.0\"",
          "",
          "[Removed Lines]",
          "13553: \"@octokit/core@npm:^5.0.0\":",
          "13554:   version: 5.0.0",
          "13555:   resolution: \"@octokit/core@npm:5.0.0\"",
          "13556:   dependencies:",
          "13557:     \"@octokit/auth-token\": ^4.0.0",
          "13558:     \"@octokit/graphql\": ^7.0.0",
          "13559:     \"@octokit/request\": ^8.0.2",
          "13560:     \"@octokit/request-error\": ^5.0.0",
          "13561:     \"@octokit/types\": ^11.0.0",
          "13562:     before-after-hook: ^2.2.0",
          "13563:     universal-user-agent: ^6.0.0",
          "13564:   checksum: 1a5d1112a2403d146aa1db7aaf81a31192ef6b0310a1e6f68c3e439fded22bd4b3a930f5071585e6ca0f2f5e7fc4a1aac68910525b71b03732c140e362d26a33",
          "13565:   languageName: node",
          "13566:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "13580:   languageName: node",
          "13581:   linkType: hard",
          "13584:   version: 6.1.2",
          "13585:   resolution: \"@octokit/core@npm:6.1.2\"",
          "13586:   dependencies:",
          "",
          "[Removed Lines]",
          "13583: \"@octokit/core@npm:^6.1.2\":",
          "",
          "[Added Lines]",
          "13648: \"@octokit/core@npm:^6.0.0, @octokit/core@npm:^6.1.2\":",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "13616:   languageName: node",
          "13617:   linkType: hard",
          "13630: \"@octokit/endpoint@npm:^9.0.1\":",
          "13631:   version: 9.0.5",
          "13632:   resolution: \"@octokit/endpoint@npm:9.0.5\"",
          "",
          "[Removed Lines]",
          "13619: \"@octokit/endpoint@npm:^9.0.0\":",
          "13620:   version: 9.0.0",
          "13621:   resolution: \"@octokit/endpoint@npm:9.0.0\"",
          "13622:   dependencies:",
          "13623:     \"@octokit/types\": ^11.0.0",
          "13624:     is-plain-object: ^5.0.0",
          "13625:     universal-user-agent: ^6.0.0",
          "13626:   checksum: 0e402c4d0fbe5b8053630cedb30dde5074bb6410828a05dc93d7e0fdd6c17f9a44b66586ef1a4e4ee0baa8d34ef7d6f535e2f04d9ea42909b7fc7ff55ce56a48",
          "13627:   languageName: node",
          "13628:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "13648:   languageName: node",
          "13649:   linkType: hard",
          "13662: \"@octokit/graphql@npm:^7.1.0\":",
          "13663:   version: 7.1.0",
          "13664:   resolution: \"@octokit/graphql@npm:7.1.0\"",
          "",
          "[Removed Lines]",
          "13651: \"@octokit/graphql@npm:^7.0.0\":",
          "13652:   version: 7.0.1",
          "13653:   resolution: \"@octokit/graphql@npm:7.0.1\"",
          "13654:   dependencies:",
          "13655:     \"@octokit/request\": ^8.0.1",
          "13656:     \"@octokit/types\": ^11.0.0",
          "13657:     universal-user-agent: ^6.0.0",
          "13658:   checksum: 7ee907987b1b8312c6f870c44455cbd3eed805bb1a4095038f4e7e62ee2e006bd766f2a71dfbe56b870cd8f7558309c602f00d3e252fe59578f4acf6249a4f17",
          "13659:   languageName: node",
          "13660:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "13681:   languageName: node",
          "13682:   linkType: hard",
          "13694:     \"@types/aws-lambda\": ^8.10.83",
          "13697:   languageName: node",
          "13698:   linkType: hard",
          "13704:   languageName: node",
          "13705:   linkType: hard",
          "13710:   dependencies:",
          "13717:   languageName: node",
          "13718:   linkType: hard",
          "",
          "[Removed Lines]",
          "13684: \"@octokit/oauth-app@npm:^6.0.0\":",
          "13685:   version: 6.0.0",
          "13686:   resolution: \"@octokit/oauth-app@npm:6.0.0\"",
          "13687:   dependencies:",
          "13688:     \"@octokit/auth-oauth-app\": ^7.0.0",
          "13689:     \"@octokit/auth-oauth-user\": ^4.0.0",
          "13690:     \"@octokit/auth-unauthenticated\": ^5.0.0",
          "13691:     \"@octokit/core\": ^5.0.0",
          "13692:     \"@octokit/oauth-authorization-url\": ^6.0.2",
          "13693:     \"@octokit/oauth-methods\": ^4.0.0",
          "13695:     universal-user-agent: ^6.0.0",
          "13696:   checksum: 5d07c6fe15d4a670a3ca0c7c0d37c973912b3ac993375966a6bed0e084edbda972f575e2ab2dc17aa9718e5aeefbec7489f5aeb2dbc6e47768ad9633f27f842d",
          "13700: \"@octokit/oauth-authorization-url@npm:^6.0.2\":",
          "13701:   version: 6.0.2",
          "13702:   resolution: \"@octokit/oauth-authorization-url@npm:6.0.2\"",
          "13703:   checksum: 0f11169a3eeb782cc08312c923de1a702b25ae033b972ba40380b6d72cb3f684543c8b6a5cf6f05936fdc6b8892070d4f7581138d8efc1b4c4a55ae6d7762327",
          "13707: \"@octokit/oauth-methods@npm:^4.0.0\":",
          "13708:   version: 4.0.0",
          "13709:   resolution: \"@octokit/oauth-methods@npm:4.0.0\"",
          "13711:     \"@octokit/oauth-authorization-url\": ^6.0.2",
          "13712:     \"@octokit/request\": ^8.0.2",
          "13713:     \"@octokit/request-error\": ^5.0.0",
          "13714:     \"@octokit/types\": ^11.0.0",
          "13715:     btoa-lite: ^1.0.0",
          "13716:   checksum: 623f3031f56f5bfd6f142f9215bf47ba418b2f7fd9eb72d3e68cdd2b2c81345021b692edd18ad055df85e71e35497002e1fc4816235ed520dd71e677885c99cc",
          "",
          "[Added Lines]",
          "13727: \"@octokit/oauth-app@npm:^7.0.0\":",
          "13728:   version: 7.1.3",
          "13729:   resolution: \"@octokit/oauth-app@npm:7.1.3\"",
          "13730:   dependencies:",
          "13731:     \"@octokit/auth-oauth-app\": ^8.0.0",
          "13732:     \"@octokit/auth-oauth-user\": ^5.0.1",
          "13733:     \"@octokit/auth-unauthenticated\": ^6.0.0-beta.1",
          "13734:     \"@octokit/core\": ^6.0.0",
          "13735:     \"@octokit/oauth-authorization-url\": ^7.0.0",
          "13736:     \"@octokit/oauth-methods\": ^5.0.0",
          "13738:     universal-user-agent: ^7.0.0",
          "13739:   checksum: 13582d8d6e2ec1be144b5ec2c559d93de2cafcdfebde5e17c2d87906148c66edf00e8fb99c06852c8f4e51c6bbccd4a053b60796eadd848703389c0418eaa7fd",
          "13743: \"@octokit/oauth-authorization-url@npm:^7.0.0\":",
          "13744:   version: 7.1.1",
          "13745:   resolution: \"@octokit/oauth-authorization-url@npm:7.1.1\"",
          "13746:   checksum: 02ad29fa4540c6b4b3a1e9f6936d40057174be91e9c7cad1afcd09d027fa2a50598dad5857699d1be25568bf70d86123dc9cd3874afe044ce6791e6805e97542",
          "13750: \"@octokit/oauth-methods@npm:^5.0.0\":",
          "13751:   version: 5.1.2",
          "13752:   resolution: \"@octokit/oauth-methods@npm:5.1.2\"",
          "13754:     \"@octokit/oauth-authorization-url\": ^7.0.0",
          "13755:     \"@octokit/request\": ^9.1.0",
          "13756:     \"@octokit/request-error\": ^6.1.0",
          "13757:     \"@octokit/types\": ^13.0.0",
          "13758:   checksum: 64317d0fae0f2383ef0194bab7ed6521a1e2d698f2f0730b22dd4ffa2f103541be6e5ef4380e073d8086008ad5d311a66901e0cc6bc0f57b66dc64db6ed79922",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "13731:   languageName: node",
          "13732:   linkType: hard",
          "13737:   peerDependencies:",
          "13740:   languageName: node",
          "13741:   linkType: hard",
          "",
          "[Removed Lines]",
          "13734: \"@octokit/plugin-paginate-graphql@npm:^4.0.0\":",
          "13735:   version: 4.0.0",
          "13736:   resolution: \"@octokit/plugin-paginate-graphql@npm:4.0.0\"",
          "13738:     \"@octokit/core\": \">=5\"",
          "13739:   checksum: 368121d74fc40a4cee96f2febc29ae43abd8f6b7d0b06d3520847827675128028c4fa10d0534c5f0466658e81257d103092154778625c886a9fcdd01c302e50e",
          "",
          "[Added Lines]",
          "13776: \"@octokit/openapi-webhooks-types@npm:8.3.0\":",
          "13777:   version: 8.3.0",
          "13778:   resolution: \"@octokit/openapi-webhooks-types@npm:8.3.0\"",
          "13779:   checksum: bc97f53a93ed11a65ccf06cc67d4fcd9987112fbedd62335bf55debe475fedffe45c100e9fd2df98833c5da7b5a2391c75e22d70354f3f6790f8c87213325b42",
          "13780:   languageName: node",
          "13781:   linkType: hard",
          "13783: \"@octokit/plugin-paginate-graphql@npm:^5.0.0\":",
          "13784:   version: 5.2.4",
          "13785:   resolution: \"@octokit/plugin-paginate-graphql@npm:5.2.4\"",
          "13787:     \"@octokit/core\": \">=6\"",
          "13788:   checksum: f119999c8872f8c24eff653c3af53dea9d06b6863491ea52b888c1a9489019fcaa47423321b857073c609baaaf43fecf97ef335d780042334217abfe24b68bed",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "13774:   languageName: node",
          "13775:   linkType: hard",
          "13788: \"@octokit/plugin-request-log@npm:^1.0.4\":",
          "13789:   version: 1.0.4",
          "13790:   resolution: \"@octokit/plugin-request-log@npm:1.0.4\"",
          "",
          "[Removed Lines]",
          "13777: \"@octokit/plugin-paginate-rest@npm:^8.0.0\":",
          "13778:   version: 8.0.0",
          "13779:   resolution: \"@octokit/plugin-paginate-rest@npm:8.0.0\"",
          "13780:   dependencies:",
          "13781:     \"@octokit/types\": ^11.0.0",
          "13782:   peerDependencies:",
          "13783:     \"@octokit/core\": \">=5\"",
          "13784:   checksum: b5d7cee50523862c6ce7be057f7200e14ee4dcded462f27304c822c960a37efa23ed51080ea879f5d1e56e78f74baa17d2ce32eed5d726794abc35755777e32c",
          "13785:   languageName: node",
          "13786:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "13845:   languageName: node",
          "13846:   linkType: hard",
          "13862:   dependencies:",
          "13865:     bottleneck: ^2.15.3",
          "13866:   peerDependencies:",
          "13869:   languageName: node",
          "13870:   linkType: hard",
          "13875:   dependencies:",
          "13877:     bottleneck: ^2.15.3",
          "13878:   peerDependencies:",
          "13881:   languageName: node",
          "13882:   linkType: hard",
          "",
          "[Removed Lines]",
          "13848: \"@octokit/plugin-rest-endpoint-methods@npm:^9.0.0\":",
          "13849:   version: 9.0.0",
          "13850:   resolution: \"@octokit/plugin-rest-endpoint-methods@npm:9.0.0\"",
          "13851:   dependencies:",
          "13852:     \"@octokit/types\": ^11.0.0",
          "13853:   peerDependencies:",
          "13854:     \"@octokit/core\": \">=5\"",
          "13855:   checksum: 8795cb29be042c839098886a03c2ec6051e3fd7a29f16f4f8a487aa2d85ceb00df8a4432499a43af550369bd730ce9b1b9d7eeff768745b80a3e67698ca9a5dd",
          "13856:   languageName: node",
          "13857:   linkType: hard",
          "13859: \"@octokit/plugin-retry@npm:^6.0.0\":",
          "13860:   version: 6.0.0",
          "13861:   resolution: \"@octokit/plugin-retry@npm:6.0.0\"",
          "13863:     \"@octokit/request-error\": ^5.0.0",
          "13864:     \"@octokit/types\": ^11.0.0",
          "13867:     \"@octokit/core\": \">=5\"",
          "13868:   checksum: 84c047309d6b3ad8d796cd6aca9a73c61ebea3894a01067ec6bd40d6ba9aaab779a1085749c04f90b25c0fc3a100c6553474d830e5c2e0dde4ffc42b5e0a2e89",
          "13872: \"@octokit/plugin-throttling@npm:^7.0.0\":",
          "13873:   version: 7.0.0",
          "13874:   resolution: \"@octokit/plugin-throttling@npm:7.0.0\"",
          "13876:     \"@octokit/types\": ^11.0.0",
          "13879:     \"@octokit/core\": ^5.0.0",
          "13880:   checksum: 772dd3405cb89ac8e4f6e81cee4e1cbf61010461c6c88ebc9f3a557eefc8a039b2368e615b2bf5d97352f5faf0dc133d70ad8eb568fd429f58332292d29113c1",
          "",
          "[Added Lines]",
          "13886: \"@octokit/plugin-retry@npm:^7.0.0\":",
          "13887:   version: 7.1.2",
          "13888:   resolution: \"@octokit/plugin-retry@npm:7.1.2\"",
          "13890:     \"@octokit/request-error\": ^6.0.0",
          "13891:     \"@octokit/types\": ^13.0.0",
          "13894:     \"@octokit/core\": \">=6\"",
          "13895:   checksum: 484da4d0deffb5612d9ad918e82158c7c0e98e0be76ffe9046fe48c3f11ed4b7ff2d6807d9704c470dbc7d017bfa6e89cd89346ccdad788ac4fa5d02ccc99f94",
          "13899: \"@octokit/plugin-throttling@npm:^9.0.0\":",
          "13900:   version: 9.3.2",
          "13901:   resolution: \"@octokit/plugin-throttling@npm:9.3.2\"",
          "13903:     \"@octokit/types\": ^13.0.0",
          "13906:     \"@octokit/core\": ^6.0.0",
          "13907:   checksum: d3e11bd4bbee7df0885789c018f9e0cc48b2226fa4c23f9f68b53acd670eb30303762fb56034650620dbf4e72497e27620140bc9cad5355207b4b5f0e1129e90",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "13892:   languageName: node",
          "13893:   linkType: hard",
          "13906: \"@octokit/request-error@npm:^5.1.0\":",
          "13907:   version: 5.1.0",
          "13908:   resolution: \"@octokit/request-error@npm:5.1.0\"",
          "",
          "[Removed Lines]",
          "13895: \"@octokit/request-error@npm:^5.0.0\":",
          "13896:   version: 5.0.0",
          "13897:   resolution: \"@octokit/request-error@npm:5.0.0\"",
          "13898:   dependencies:",
          "13899:     \"@octokit/types\": ^11.0.0",
          "13900:     deprecation: ^2.0.0",
          "13901:     once: ^1.4.0",
          "13902:   checksum: 2012eca66f6b8fa4038b3bfe81d65a7134ec58e2caf45d229aca13b9653ab260abd95229bd1a8c11180ee0bcf738e2556831a85de28f39b175175653c3b79fdd",
          "13903:   languageName: node",
          "13904:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "13914:   languageName: node",
          "13915:   linkType: hard",
          "13917: \"@octokit/request-error@npm:^6.0.1\":",
          "13918:   version: 6.1.4",
          "13919:   resolution: \"@octokit/request-error@npm:6.1.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13933: \"@octokit/request-error@npm:^6.0.0, @octokit/request-error@npm:^6.1.0, @octokit/request-error@npm:^6.1.1\":",
          "13934:   version: 6.1.5",
          "13935:   resolution: \"@octokit/request-error@npm:6.1.5\"",
          "13936:   dependencies:",
          "13937:     \"@octokit/types\": ^13.0.0",
          "13938:   checksum: a0891df29957d9911ef34281fefffac4a98baa96ffffeb1a2b8f0c8e229911ca3da2be42e5bbe6a4b994a12fd100f4d0d86be095fada60384cd6728705eae859",
          "13939:   languageName: node",
          "13940:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "13937:   languageName: node",
          "13938:   linkType: hard",
          "13953: \"@octokit/request@npm:^8.3.0, @octokit/request@npm:^8.3.1\":",
          "13954:   version: 8.4.0",
          "13955:   resolution: \"@octokit/request@npm:8.4.0\"",
          "",
          "[Removed Lines]",
          "13940: \"@octokit/request@npm:^8.0.0, @octokit/request@npm:^8.0.1, @octokit/request@npm:^8.0.2\":",
          "13941:   version: 8.1.1",
          "13942:   resolution: \"@octokit/request@npm:8.1.1\"",
          "13943:   dependencies:",
          "13944:     \"@octokit/endpoint\": ^9.0.0",
          "13945:     \"@octokit/request-error\": ^5.0.0",
          "13946:     \"@octokit/types\": ^11.1.0",
          "13947:     is-plain-object: ^5.0.0",
          "13948:     universal-user-agent: ^6.0.0",
          "13949:   checksum: dec3ba2cba14739159cd8d1653ad8ac6d58095e4ac294d312d20ce2c63c60c3cad2e5499137244dba3d681fd5cd7f74b4b5d4df024a19c0ee1831204e5a3a894",
          "13950:   languageName: node",
          "13951:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "13962:   languageName: node",
          "13963:   linkType: hard",
          "13966:   version: 9.1.3",
          "13967:   resolution: \"@octokit/request@npm:9.1.3\"",
          "13968:   dependencies:",
          "",
          "[Removed Lines]",
          "13965: \"@octokit/request@npm:^9.0.0\":",
          "",
          "[Added Lines]",
          "13977: \"@octokit/request@npm:^9.0.0, @octokit/request@npm:^9.0.1, @octokit/request@npm:^9.1.0, @octokit/request@npm:^9.1.1\":",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "14026:   languageName: node",
          "14027:   linkType: hard",
          "14038: \"@octokit/types@npm:^13.0.0, @octokit/types@npm:^13.1.0, @octokit/types@npm:^13.5.0\":",
          "14039:   version: 13.5.0",
          "14040:   resolution: \"@octokit/types@npm:13.5.0\"",
          "",
          "[Removed Lines]",
          "14029: \"@octokit/types@npm:^11.0.0, @octokit/types@npm:^11.1.0\":",
          "14030:   version: 11.1.0",
          "14031:   resolution: \"@octokit/types@npm:11.1.0\"",
          "14032:   dependencies:",
          "14033:     \"@octokit/openapi-types\": ^18.0.0",
          "14034:   checksum: 72627a94ddaf7bc14db06572bcde67649aad608cd86548818380db9305f4c0ca9ca078a62dd883858a267e8ec8fd596a0fce416aa04197c439b9548efef609a7",
          "14035:   languageName: node",
          "14036:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "14044:   languageName: node",
          "14045:   linkType: hard",
          "14047: \"@octokit/types@npm:^9.0.0, @octokit/types@npm:^9.2.3\":",
          "14048:   version: 9.3.2",
          "14049:   resolution: \"@octokit/types@npm:9.3.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14050: \"@octokit/types@npm:^13.4.1\":",
          "14051:   version: 13.6.1",
          "14052:   resolution: \"@octokit/types@npm:13.6.1\"",
          "14053:   dependencies:",
          "14054:     \"@octokit/openapi-types\": ^22.2.0",
          "14055:   checksum: 05bb427bc3c84088e2367b8d1b7a9834732116bb3d35ef51d1aae34b3919027159dd496b9362dab1cb047918da15be1dc1cafc512c97f9b77458bd273b5a2ba9",
          "14056:   languageName: node",
          "14057:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "14053:   languageName: node",
          "14054:   linkType: hard",
          "14067:   languageName: node",
          "14068:   linkType: hard",
          "14073:   dependencies:",
          "14079:   languageName: node",
          "14080:   linkType: hard",
          "",
          "[Removed Lines]",
          "14056: \"@octokit/webhooks-methods@npm:^4.0.0\":",
          "14057:   version: 4.0.0",
          "14058:   resolution: \"@octokit/webhooks-methods@npm:4.0.0\"",
          "14059:   checksum: 07010438e53a6a659f0d7d3596bf89e6795776165066553e76384d90cef077a1e259122733913468299a1a76c71536914eb871d0508fcbbd453468b21eeb30c7",
          "14060:   languageName: node",
          "14061:   linkType: hard",
          "14063: \"@octokit/webhooks-types@npm:7.1.0\":",
          "14064:   version: 7.1.0",
          "14065:   resolution: \"@octokit/webhooks-types@npm:7.1.0\"",
          "14066:   checksum: 5aea38c38e97cb1b8d54c805c17c4015ee937d0b1ad550adc64eaf2e90bfbaf1e00c878490c10b43e31a11563e8d02183b86268ed588b04e39b22d5fd27807cf",
          "14070: \"@octokit/webhooks@npm:^12.0.1\":",
          "14071:   version: 12.0.3",
          "14072:   resolution: \"@octokit/webhooks@npm:12.0.3\"",
          "14074:     \"@octokit/request-error\": ^5.0.0",
          "14075:     \"@octokit/webhooks-methods\": ^4.0.0",
          "14076:     \"@octokit/webhooks-types\": 7.1.0",
          "14077:     aggregate-error: ^3.1.0",
          "14078:   checksum: 2db63122eab1852047379f9cb0024cdb22a2bf16356907b66bc71d5a01814b069178aee07fe61faeb80cde3dcd513a39526974f8bae5ec6e26b63fe87877ace1",
          "",
          "[Added Lines]",
          "14068: \"@octokit/webhooks-methods@npm:^5.0.0\":",
          "14069:   version: 5.1.0",
          "14070:   resolution: \"@octokit/webhooks-methods@npm:5.1.0\"",
          "14071:   checksum: 6b0185f62b30b1d267456c449732d1c381e22533bcfeea3002bb88bc9f50a6ec5e4863be092473e7c47bee8c01b863ebd93980dd378495860dfd8d762044a212",
          "14075: \"@octokit/webhooks@npm:^13.0.0\":",
          "14076:   version: 13.3.0",
          "14077:   resolution: \"@octokit/webhooks@npm:13.3.0\"",
          "14079:     \"@octokit/openapi-webhooks-types\": 8.3.0",
          "14080:     \"@octokit/request-error\": ^6.0.1",
          "14081:     \"@octokit/webhooks-methods\": ^5.0.0",
          "14082:   checksum: 4a790e7a0551f057a14cf3b5df8e20cec43c10a8f331e19db7b0e5f6bfbc7577e817ad8543c7a99fb6dd7c713d93f0bbaf2fedc3c88f858693da084e9ef1463d",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "14453:   languageName: node",
          "14454:   linkType: hard",
          "14456: \"@rockset/client@npm:^0.9.1\":",
          "14457:   version: 0.9.1",
          "14458:   resolution: \"@rockset/client@npm:0.9.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14460: \"@reflink/reflink-darwin-arm64@npm:0.1.16\":",
          "14461:   version: 0.1.16",
          "14462:   resolution: \"@reflink/reflink-darwin-arm64@npm:0.1.16\"",
          "14463:   conditions: os=darwin & cpu=arm64",
          "14464:   languageName: node",
          "14465:   linkType: hard",
          "14467: \"@reflink/reflink-darwin-x64@npm:0.1.16\":",
          "14468:   version: 0.1.16",
          "14469:   resolution: \"@reflink/reflink-darwin-x64@npm:0.1.16\"",
          "14470:   conditions: os=darwin & cpu=x64",
          "14471:   languageName: node",
          "14472:   linkType: hard",
          "14474: \"@reflink/reflink-linux-arm64-gnu@npm:0.1.16\":",
          "14475:   version: 0.1.16",
          "14476:   resolution: \"@reflink/reflink-linux-arm64-gnu@npm:0.1.16\"",
          "14477:   conditions: os=linux & cpu=arm64 & libc=glibc",
          "14478:   languageName: node",
          "14479:   linkType: hard",
          "14481: \"@reflink/reflink-linux-arm64-musl@npm:0.1.16\":",
          "14482:   version: 0.1.16",
          "14483:   resolution: \"@reflink/reflink-linux-arm64-musl@npm:0.1.16\"",
          "14484:   conditions: os=linux & cpu=arm64 & libc=musl",
          "14485:   languageName: node",
          "14486:   linkType: hard",
          "14488: \"@reflink/reflink-linux-x64-gnu@npm:0.1.16\":",
          "14489:   version: 0.1.16",
          "14490:   resolution: \"@reflink/reflink-linux-x64-gnu@npm:0.1.16\"",
          "14491:   conditions: os=linux & cpu=x64 & libc=glibc",
          "14492:   languageName: node",
          "14493:   linkType: hard",
          "14495: \"@reflink/reflink-linux-x64-musl@npm:0.1.16\":",
          "14496:   version: 0.1.16",
          "14497:   resolution: \"@reflink/reflink-linux-x64-musl@npm:0.1.16\"",
          "14498:   conditions: os=linux & cpu=x64 & libc=musl",
          "14499:   languageName: node",
          "14500:   linkType: hard",
          "14502: \"@reflink/reflink-win32-arm64-msvc@npm:0.1.16\":",
          "14503:   version: 0.1.16",
          "14504:   resolution: \"@reflink/reflink-win32-arm64-msvc@npm:0.1.16\"",
          "14505:   conditions: os=win32 & cpu=arm64",
          "14506:   languageName: node",
          "14507:   linkType: hard",
          "14509: \"@reflink/reflink-win32-x64-msvc@npm:0.1.16\":",
          "14510:   version: 0.1.16",
          "14511:   resolution: \"@reflink/reflink-win32-x64-msvc@npm:0.1.16\"",
          "14512:   conditions: os=win32 & cpu=x64",
          "14513:   languageName: node",
          "14514:   linkType: hard",
          "14516: \"@reflink/reflink@npm:^0.1.16\":",
          "14517:   version: 0.1.16",
          "14518:   resolution: \"@reflink/reflink@npm:0.1.16\"",
          "14519:   dependencies:",
          "14520:     \"@reflink/reflink-darwin-arm64\": 0.1.16",
          "14521:     \"@reflink/reflink-darwin-x64\": 0.1.16",
          "14522:     \"@reflink/reflink-linux-arm64-gnu\": 0.1.16",
          "14523:     \"@reflink/reflink-linux-arm64-musl\": 0.1.16",
          "14524:     \"@reflink/reflink-linux-x64-gnu\": 0.1.16",
          "14525:     \"@reflink/reflink-linux-x64-musl\": 0.1.16",
          "14526:     \"@reflink/reflink-win32-arm64-msvc\": 0.1.16",
          "14527:     \"@reflink/reflink-win32-x64-msvc\": 0.1.16",
          "14528:   dependenciesMeta:",
          "14529:     \"@reflink/reflink-darwin-arm64\":",
          "14530:       optional: true",
          "14531:     \"@reflink/reflink-darwin-x64\":",
          "14532:       optional: true",
          "14533:     \"@reflink/reflink-linux-arm64-gnu\":",
          "14534:       optional: true",
          "14535:     \"@reflink/reflink-linux-arm64-musl\":",
          "14536:       optional: true",
          "14537:     \"@reflink/reflink-linux-x64-gnu\":",
          "14538:       optional: true",
          "14539:     \"@reflink/reflink-linux-x64-musl\":",
          "14540:       optional: true",
          "14541:     \"@reflink/reflink-win32-arm64-msvc\":",
          "14542:       optional: true",
          "14543:     \"@reflink/reflink-win32-x64-msvc\":",
          "14544:       optional: true",
          "14545:   checksum: dcc35c4a63d79a5126c5405d6e034e022c6639372486ed98ab93c1d5dd5620660adedf8f075356f9f7fbb15719b646765404d859cc188b5d124fa16b90bcf750",
          "14546:   languageName: node",
          "14547:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "18524:   languageName: node",
          "18525:   linkType: hard",
          "18527: \"@tokenizer/token@npm:^0.3.0\":",
          "18528:   version: 0.3.0",
          "18529:   resolution: \"@tokenizer/token@npm:0.3.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18620: \"@tinyhttp/content-disposition@npm:^2.2.0\":",
          "18621:   version: 2.2.2",
          "18622:   resolution: \"@tinyhttp/content-disposition@npm:2.2.2\"",
          "18623:   checksum: ec36962a263742b5d1303e9eb52955b616d83edee71d559a9ed051568ace9206d8bfa625de406c10694765b3fa117eaca65f1c0c5330d91282170ba9f3654dfb",
          "18624:   languageName: node",
          "18625:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "18673:   languageName: node",
          "18674:   linkType: hard",
          "18683: \"@types/caseless@npm:*\":",
          "18684:   version: 0.12.5",
          "18685:   resolution: \"@types/caseless@npm:0.12.5\"",
          "",
          "[Removed Lines]",
          "18676: \"@types/btoa-lite@npm:^1.0.0\":",
          "18677:   version: 1.0.0",
          "18678:   resolution: \"@types/btoa-lite@npm:1.0.0\"",
          "18679:   checksum: 4d0c3c36cc8aa5669d286d62ca45d925e3ea0db75222ebacb0d9f4fd7822b8e162da8773887e045c11d64c42373807d2ab2ad97a5d8a683d2e1c981e6a05ce33",
          "18680:   languageName: node",
          "18681:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "20789:   languageName: node",
          "20790:   linkType: hard",
          "20793:   version: 3.1.0",
          "20794:   resolution: \"aggregate-error@npm:3.1.0\"",
          "20795:   dependencies:",
          "",
          "[Removed Lines]",
          "20792: \"aggregate-error@npm:^3.0.0, aggregate-error@npm:^3.1.0\":",
          "",
          "[Added Lines]",
          "20885: \"aggregate-error@npm:^3.0.0\":",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "20922:   languageName: node",
          "20923:   linkType: hard",
          "20925: \"ansi-html-community@npm:^0.0.8\":",
          "20926:   version: 0.0.8",
          "20927:   resolution: \"ansi-html-community@npm:0.0.8\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21018: \"ansi-escapes@npm:^6.2.0\":",
          "21019:   version: 6.2.1",
          "21020:   resolution: \"ansi-escapes@npm:6.2.1\"",
          "21021:   checksum: 4bdbabe0782a1d4007157798f8acab745d1d5e440c872e6792880d08025e0baababa6b85b36846e955fde7d1e4bf572cdb1fddf109de196e9388d7a1c55ce30d",
          "21022:   languageName: node",
          "21023:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "20977:   languageName: node",
          "20978:   linkType: hard",
          "20981:   version: 6.2.1",
          "20982:   resolution: \"ansi-styles@npm:6.2.1\"",
          "20983:   checksum: ef940f2f0ced1a6347398da88a91da7930c33ecac3c77b72c5905f8b8fe402c52e6fde304ff5347f616e27a742da3f1dc76de98f6866c69251ad0b07a66776d9",
          "",
          "[Removed Lines]",
          "20980: \"ansi-styles@npm:^6.0.0, ansi-styles@npm:^6.1.0\":",
          "",
          "[Added Lines]",
          "21080: \"ansi-styles@npm:^6.0.0, ansi-styles@npm:^6.1.0, ansi-styles@npm:^6.2.1\":",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "22242:   languageName: node",
          "22243:   linkType: hard",
          "22252: \"buffer-alloc-unsafe@npm:^1.1.0\":",
          "22253:   version: 1.1.0",
          "22254:   resolution: \"buffer-alloc-unsafe@npm:1.1.0\"",
          "",
          "[Removed Lines]",
          "22245: \"btoa-lite@npm:^1.0.0\":",
          "22246:   version: 1.0.0",
          "22247:   resolution: \"btoa-lite@npm:1.0.0\"",
          "22248:   checksum: c2d61993b801f8e35a96f20692a45459c753d9baa29d86d1343e714f8d6bbe7069f1a20a5ae868488f3fb137d5bd0c560f6fbbc90b5a71050919d2d2c97c0475",
          "22249:   languageName: node",
          "22250:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "22374:   languageName: node",
          "22375:   linkType: hard",
          "22378:   version: 3.1.2",
          "22379:   resolution: \"bytes@npm:3.1.2\"",
          "22380:   checksum: e4bcd3948d289c5127591fbedf10c0b639ccbf00243504e4e127374a15c3bc8eed0d28d4aaab08ff6f1cf2abc0cce6ba3085ed32f4f90e82a5683ce0014e1b6e",
          "",
          "[Removed Lines]",
          "22377: \"bytes@npm:3.1.2\":",
          "",
          "[Added Lines]",
          "22470: \"bytes@npm:3.1.2, bytes@npm:^3.1.2\":",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "22829:   languageName: node",
          "22830:   linkType: hard",
          "22832: \"cjs-module-lexer@npm:^1.0.0\":",
          "22833:   version: 1.2.2",
          "22834:   resolution: \"cjs-module-lexer@npm:1.2.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22925: \"ci-info@npm:^4.0.0\":",
          "22926:   version: 4.0.0",
          "22927:   resolution: \"ci-info@npm:4.0.0\"",
          "22928:   checksum: 122fe41c5eb8d0b5fa0ab6fd674c5ddcf2dc59766528b062a0144ff0d913cfb210ef925ec52110e7c2a7f4e603d5f0e8b91cfe68867e196e9212fa0b94d0a08a",
          "22929:   languageName: node",
          "22930:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "22904:   languageName: node",
          "22905:   linkType: hard",
          "22907: \"cli-highlight@npm:^2.1.11\":",
          "22908:   version: 2.1.11",
          "22909:   resolution: \"cli-highlight@npm:2.1.11\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23007: \"cli-cursor@npm:^5.0.0\":",
          "23008:   version: 5.0.0",
          "23009:   resolution: \"cli-cursor@npm:5.0.0\"",
          "23010:   dependencies:",
          "23011:     restore-cursor: ^5.0.0",
          "23012:   checksum: 1eb9a3f878b31addfe8d82c6d915ec2330cec8447ab1f117f4aa34f0137fbb3137ec3466e1c9a65bcb7557f6e486d343f2da57f253a2f668d691372dfa15c090",
          "23013:   languageName: node",
          "23014:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "22920:   languageName: node",
          "22921:   linkType: hard",
          "22932: \"cli-spinners@npm:^2.5.0\":",
          "22933:   version: 2.7.0",
          "22934:   resolution: \"cli-spinners@npm:2.7.0\"",
          "",
          "[Removed Lines]",
          "22923: \"cli-progress@npm:^3.12.0\":",
          "22924:   version: 3.12.0",
          "22925:   resolution: \"cli-progress@npm:3.12.0\"",
          "22926:   dependencies:",
          "22927:     string-width: ^4.2.3",
          "22928:   checksum: e8390dc3cdf3c72ecfda0a1e8997bfed63a0d837f97366bbce0ca2ff1b452da386caed007b389f0fe972625037b6c8e7ab087c69d6184cc4dfc8595c4c1d3e6e",
          "22929:   languageName: node",
          "22930:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "22943:   languageName: node",
          "22944:   linkType: hard",
          "22953: \"cli-table3@npm:^0.6.2\":",
          "22954:   version: 0.6.3",
          "22955:   resolution: \"cli-table3@npm:0.6.3\"",
          "",
          "[Removed Lines]",
          "22946: \"cli-spinners@npm:^2.9.0\":",
          "22947:   version: 2.9.0",
          "22948:   resolution: \"cli-spinners@npm:2.9.0\"",
          "22949:   checksum: a9c56e1f44457d4a9f4f535364e729cb8726198efa9e98990cfd9eda9e220dfa4ba12f92808d1be5e29029cdfead781db82dc8549b97b31c907d55f96aa9b0e2",
          "22950:   languageName: node",
          "22951:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "23162:   languageName: node",
          "23163:   linkType: hard",
          "23188: \"cmake-js@npm:^7.3.0\":",
          "23189:   version: 7.3.0",
          "23190:   resolution: \"cmake-js@npm:7.3.0\"",
          "",
          "[Removed Lines]",
          "23165: \"cmake-js@npm:^7.2.1\":",
          "23166:   version: 7.2.1",
          "23167:   resolution: \"cmake-js@npm:7.2.1\"",
          "23168:   dependencies:",
          "23169:     axios: ^1.3.2",
          "23170:     debug: ^4",
          "23171:     fs-extra: ^10.1.0",
          "23172:     lodash.isplainobject: ^4.0.6",
          "23173:     memory-stream: ^1.0.0",
          "23174:     node-api-headers: ^0.0.2",
          "23175:     npmlog: ^6.0.2",
          "23176:     rc: ^1.2.7",
          "23177:     semver: ^7.3.8",
          "23178:     tar: ^6.1.11",
          "23179:     url-join: ^4.0.1",
          "23180:     which: ^2.0.2",
          "23181:     yargs: ^17.6.0",
          "23182:   bin:",
          "23183:     cmake-js: bin/cmake-js",
          "23184:   checksum: 567d83f2718b0a66d5207905214792ccaa24ed7aa2f3661f214144e91f49480f3e9464e52f609b494a57ed901db789981e2daeae493f8d0e2d4aaed5cee71c17",
          "23185:   languageName: node",
          "23186:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "25172:   languageName: node",
          "25173:   linkType: hard",
          "25176:   version: 2.3.1",
          "25177:   resolution: \"deprecation@npm:2.3.1\"",
          "25178:   checksum: f56a05e182c2c195071385455956b0c4106fe14e36245b00c689ceef8e8ab639235176a96977ba7c74afb173317fac2e0ec6ec7a1c6d1e6eaa401c586c714132",
          "",
          "[Removed Lines]",
          "25175: \"deprecation@npm:^2.0.0, deprecation@npm:^2.3.1\":",
          "",
          "[Added Lines]",
          "25245: \"deprecation@npm:^2.0.0\":",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "25708:   languageName: node",
          "25709:   linkType: hard",
          "25718: \"emoji-regex@npm:^10.3.0\":",
          "25719:   version: 10.3.0",
          "25720:   resolution: \"emoji-regex@npm:10.3.0\"",
          "",
          "[Removed Lines]",
          "25711: \"emoji-regex@npm:^10.2.1\":",
          "25712:   version: 10.2.1",
          "25713:   resolution: \"emoji-regex@npm:10.2.1\"",
          "25714:   checksum: 1aa2d16881c56531fdfc03d0b36f5c2b6221cc4097499a5665b88b711dc3fb4d5b8804f0ca6f00c56e5dcf89bac75f0487eee85da1da77df3a33accc6ecbe426",
          "25715:   languageName: node",
          "25716:   linkType: hard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "25820:   languageName: node",
          "25821:   linkType: hard",
          "25827:   languageName: node",
          "25828:   linkType: hard",
          "",
          "[Removed Lines]",
          "25823: \"env-var@npm:^7.3.1\":",
          "25824:   version: 7.4.1",
          "25825:   resolution: \"env-var@npm:7.4.1\"",
          "25826:   checksum: 35cbb504d6b803d837a34b84bf9913905d5e627400aeef9529d3a0acd6af9e0b1f9d87b833ac30c76323bd97314e1890514e4ce795643f8a432f39990796e97d",
          "",
          "[Added Lines]",
          "25886: \"env-var@npm:^7.5.0\":",
          "25887:   version: 7.5.0",
          "25888:   resolution: \"env-var@npm:7.5.0\"",
          "25889:   checksum: 7be2a834693cc1d03f3b86ca2d5899fa08cbdcdec3468368ada85c60f6dcd83dc166db3e5dd59f6a85a5e5995a9bdc648082a62dc6f33d8a2351f0ab7d9cab60",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "28045:   languageName: node",
          "28046:   linkType: hard",
          "28048: \"filesize@npm:^8.0.6\":",
          "28049:   version: 8.0.7",
          "28050:   resolution: \"filesize@npm:8.0.7\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28111: \"filename-reserved-regex@npm:^3.0.0\":",
          "28112:   version: 3.0.0",
          "28113:   resolution: \"filename-reserved-regex@npm:3.0.0\"",
          "28114:   checksum: 1803e19ce64d7cb88ee5a1bd3ce282470a5c263987269222426d889049fc857e302284fa71937de9582eba7a9f39539557d45e0562f2fa51cade8efc68c65dd9",
          "28115:   languageName: node",
          "28116:   linkType: hard",
          "28118: \"filenamify@npm:^6.0.0\":",
          "28119:   version: 6.0.0",
          "28120:   resolution: \"filenamify@npm:6.0.0\"",
          "28121:   dependencies:",
          "28122:     filename-reserved-regex: ^3.0.0",
          "28123:   checksum: 5914b64a760d49323d0454efb1f5e33338d3840df447f40556fc68730c4649797451931d60035c66068dacf326f045a912287ce8b63e15a5fba311a961f8f4b1",
          "28124:   languageName: node",
          "28125:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "30259:   languageName: node",
          "30260:   linkType: hard",
          "30262: \"image-size@npm:^1.0.1\":",
          "30263:   version: 1.0.2",
          "30264:   resolution: \"image-size@npm:1.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30341: \"ignore@npm:^5.3.2\":",
          "30342:   version: 5.3.2",
          "30343:   resolution: \"ignore@npm:5.3.2\"",
          "30344:   checksum: 2acfd32a573260ea522ea0bfeff880af426d68f6831f973129e2ba7363f422923cf53aab62f8369cbf4667c7b25b6f8a3761b34ecdb284ea18e87a5262a865be",
          "30345:   languageName: node",
          "30346:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "30569:   languageName: node",
          "30570:   linkType: hard",
          "30572: \"is-alphabetical@npm:1.0.4, is-alphabetical@npm:^1.0.0\":",
          "30573:   version: 1.0.4",
          "30574:   resolution: \"is-alphabetical@npm:1.0.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30658: \"ipull@npm:^3.7.4\":",
          "30659:   version: 3.9.0",
          "30660:   resolution: \"ipull@npm:3.9.0\"",
          "30661:   dependencies:",
          "30662:     \"@reflink/reflink\": ^0.1.16",
          "30663:     \"@tinyhttp/content-disposition\": ^2.2.0",
          "30664:     async-retry: ^1.3.3",
          "30665:     chalk: ^5.3.0",
          "30666:     ci-info: ^4.0.0",
          "30667:     cli-spinners: ^2.9.2",
          "30668:     commander: ^10.0.0",
          "30669:     eventemitter3: ^5.0.1",
          "30670:     filenamify: ^6.0.0",
          "30671:     fs-extra: ^11.1.1",
          "30672:     is-unicode-supported: ^2.0.0",
          "30673:     lifecycle-utils: ^1.3.1",
          "30674:     lodash.debounce: ^4.0.8",
          "30675:     lowdb: ^7.0.1",
          "30676:     pretty-bytes: ^6.1.0",
          "30677:     pretty-ms: ^8.0.0",
          "30678:     sleep-promise: ^9.1.0",
          "30679:     slice-ansi: ^7.1.0",
          "30680:     stdout-update: ^4.0.1",
          "30681:     strip-ansi: ^7.1.0",
          "30682:   dependenciesMeta:",
          "30683:     \"@reflink/reflink\":",
          "30684:       optional: true",
          "30685:   bin:",
          "30686:     ipull: dist/cli/cli.js",
          "30687:   checksum: 7a9f5a0e1715e6f6a73bd4edb8916fb44640d589617a39f233601f9fe2f93709ba5652ee0603938fd7ba691870567d26ac0ccc2388ca5f327339d7daef806376",
          "30688:   languageName: node",
          "30689:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "30825:   languageName: node",
          "30826:   linkType: hard",
          "30828: \"is-generator-fn@npm:^2.0.0\":",
          "30829:   version: 2.1.0",
          "30830:   resolution: \"is-generator-fn@npm:2.1.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30947: \"is-fullwidth-code-point@npm:^5.0.0\":",
          "30948:   version: 5.0.0",
          "30949:   resolution: \"is-fullwidth-code-point@npm:5.0.0\"",
          "30950:   dependencies:",
          "30951:     get-east-asian-width: ^1.0.0",
          "30952:   checksum: 8dfb2d2831b9e87983c136f5c335cd9d14c1402973e357a8ff057904612ed84b8cba196319fabedf9aefe4639e14fe3afe9d9966d1d006ebeb40fe1fed4babe5",
          "30953:   languageName: node",
          "30954:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "31239:   languageName: node",
          "31240:   linkType: hard",
          "31242: \"is-weakmap@npm:^2.0.1\":",
          "31243:   version: 2.0.1",
          "31244:   resolution: \"is-weakmap@npm:2.0.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31370: \"is-unicode-supported@npm:^2.1.0\":",
          "31371:   version: 2.1.0",
          "31372:   resolution: \"is-unicode-supported@npm:2.1.0\"",
          "31373:   checksum: f254e3da6b0ab1a57a94f7273a7798dd35d1d45b227759f600d0fa9d5649f9c07fa8d3c8a6360b0e376adf916d151ec24fc9a50c5295c58bae7ca54a76a063f9",
          "31374:   languageName: node",
          "31375:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "33213:   languageName: node",
          "33214:   linkType: hard",
          "33216: \"lilconfig@npm:2.1.0, lilconfig@npm:^2.0.3, lilconfig@npm:^2.0.5, lilconfig@npm:^2.1.0\":",
          "33217:   version: 2.1.0",
          "33218:   resolution: \"lilconfig@npm:2.1.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33351: \"lifecycle-utils@npm:^1.3.1, lifecycle-utils@npm:^1.7.0\":",
          "33352:   version: 1.7.0",
          "33353:   resolution: \"lifecycle-utils@npm:1.7.0\"",
          "33354:   checksum: 083b48cf370ff7d9284a0551bea53a104d844ee4b6b57b7b84d04dba4e7c0b157543770c4f582b9fe94aa6ceea4eaa64bf587919a5ab80479a1c5267cde44120",
          "33355:   languageName: node",
          "33356:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "33584:   languageName: node",
          "33585:   linkType: hard",
          "33587: \"log-update@npm:^4.0.0\":",
          "33588:   version: 4.0.0",
          "33589:   resolution: \"log-update@npm:4.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33729: \"log-symbols@npm:^7.0.0\":",
          "33730:   version: 7.0.0",
          "33731:   resolution: \"log-symbols@npm:7.0.0\"",
          "33732:   dependencies:",
          "33733:     is-unicode-supported: ^2.0.0",
          "33734:     yoctocolors: ^2.1.1",
          "33735:   checksum: a6cb6e90bfe9f0774a09ff783e2035cd7e375a42757d7e401b391916a67f6da382f4966b57dda89430faaebe2ed13803ea867e104f8d67caf66082943a7153f0",
          "33736:   languageName: node",
          "33737:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "33667:   languageName: node",
          "33668:   linkType: hard",
          "33670: \"lower-case@npm:^2.0.2\":",
          "33671:   version: 2.0.2",
          "33672:   resolution: \"lower-case@npm:2.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33822: \"lowdb@npm:^7.0.1\":",
          "33823:   version: 7.0.1",
          "33824:   resolution: \"lowdb@npm:7.0.1\"",
          "33825:   dependencies:",
          "33826:     steno: ^4.0.2",
          "33827:   checksum: 124cbc41d6095ed3765fd50749815ab9d80ee9b9ace87575aaad43979c949604fd6ad055c5e33815e1f03de59940d0e37836a156166521dc16c711ea1f6e027c",
          "33828:   languageName: node",
          "33829:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "34225:   languageName: node",
          "34226:   linkType: hard",
          "34228: \"mimic-response@npm:^1.0.0, mimic-response@npm:^1.0.1\":",
          "34229:   version: 1.0.1",
          "34230:   resolution: \"mimic-response@npm:1.0.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34389: \"mimic-function@npm:^5.0.0\":",
          "34390:   version: 5.0.1",
          "34391:   resolution: \"mimic-function@npm:5.0.1\"",
          "34392:   checksum: eb5893c99e902ccebbc267c6c6b83092966af84682957f79313311edb95e8bb5f39fb048d77132b700474d1c86d90ccc211e99bae0935447a4834eb4c882982c",
          "34393:   languageName: node",
          "34394:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "34750:   languageName: node",
          "34751:   linkType: hard",
          "34753: \"napi-build-utils@npm:^1.0.1\":",
          "34754:   version: 1.0.2",
          "34755:   resolution: \"napi-build-utils@npm:1.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34921: \"nanoid@npm:^5.0.7\":",
          "34922:   version: 5.0.8",
          "34923:   resolution: \"nanoid@npm:5.0.8\"",
          "34924:   bin:",
          "34925:     nanoid: bin/nanoid.js",
          "34926:   checksum: df131a515465053ff25c8cf0450ef191e1db83b45fe125af43f50d39feddf1f161d3b2abb34cb993df35a76b427f8d6d982e16e47d67b2fbe843664af025b5e2",
          "34927:   languageName: node",
          "34928:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "34984:   languageName: node",
          "34985:   linkType: hard",
          "34991:   languageName: node",
          "34992:   linkType: hard",
          "",
          "[Removed Lines]",
          "34987: \"node-api-headers@npm:^0.0.2\":",
          "34988:   version: 0.0.2",
          "34989:   resolution: \"node-api-headers@npm:0.0.2\"",
          "34990:   checksum: 6b0960d5a9d6bc6640329dd6398d3ee37bcdb5fb649ba8964f1104c9e9f95d96c746cdc13664aa24fd1d7cc5c7b60dd865f7aa02f4d12c7266df151eaf6934db",
          "",
          "[Added Lines]",
          "35164: \"node-addon-api@npm:^8.1.0\":",
          "35165:   version: 8.2.1",
          "35166:   resolution: \"node-addon-api@npm:8.2.1\"",
          "35167:   dependencies:",
          "35168:     node-gyp: latest",
          "35169:   checksum: ee5e65f387d2a8c137b6f5d733633caa9ba73ee6e781fa5ed4836060fd6e8c1e610af0095fe8d01748c39ecc8eb5f872225b6153e83197bf79253cabd9c97d46",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "35164:   languageName: node",
          "35165:   linkType: hard",
          "35171:     chalk: ^5.3.0",
          "35172:     chmodrp: ^1.0.2",
          "35175:     cross-env: ^7.0.3",
          "35176:     cross-spawn: ^7.0.3",
          "35185:     which: ^4.0.0",
          "35186:     yargs: ^17.7.2",
          "35187:   peerDependencies:",
          "35188:     typescript: \">=5.0.0\"",
          "35189:   peerDependenciesMeta:",
          "35190:     typescript:",
          "35191:       optional: true",
          "35192:   bin:",
          "35193:     node-llama-cpp: dist/cli/cli.js",
          "35195:   languageName: node",
          "35196:   linkType: hard",
          "",
          "[Removed Lines]",
          "35167: \"node-llama-cpp@npm:^2\":",
          "35168:   version: 2.8.16",
          "35169:   resolution: \"node-llama-cpp@npm:2.8.16\"",
          "35170:   dependencies:",
          "35173:     cli-progress: ^3.12.0",
          "35174:     cmake-js: ^7.2.1",
          "35177:     env-var: ^7.3.1",
          "35178:     fs-extra: ^11.1.1",
          "35179:     log-symbols: ^5.1.0",
          "35180:     node-addon-api: ^7.0.0",
          "35181:     octokit: ^3.1.0",
          "35182:     ora: ^7.0.1",
          "35183:     simple-git: ^3.19.1",
          "35184:     uuid: ^9.0.0",
          "35194:   checksum: 51607ec21f02a702a440fae6a8c06b00b039cbfcb09a7d92eaa16e97972ff71874285d9d2561429bae03b52da81e0d12d2d22356dd162f30ce92d37c928014c4",
          "",
          "[Added Lines]",
          "35346: \"node-llama-cpp@npm:3.1.1\":",
          "35347:   version: 3.1.1",
          "35348:   resolution: \"node-llama-cpp@npm:3.1.1\"",
          "35349:   dependencies:",
          "35350:     \"@huggingface/jinja\": ^0.3.1",
          "35351:     \"@node-llama-cpp/linux-arm64\": 3.1.1",
          "35352:     \"@node-llama-cpp/linux-armv7l\": 3.1.1",
          "35353:     \"@node-llama-cpp/linux-x64\": 3.1.1",
          "35354:     \"@node-llama-cpp/linux-x64-cuda\": 3.1.1",
          "35355:     \"@node-llama-cpp/linux-x64-vulkan\": 3.1.1",
          "35356:     \"@node-llama-cpp/mac-arm64-metal\": 3.1.1",
          "35357:     \"@node-llama-cpp/mac-x64\": 3.1.1",
          "35358:     \"@node-llama-cpp/win-arm64\": 3.1.1",
          "35359:     \"@node-llama-cpp/win-x64\": 3.1.1",
          "35360:     \"@node-llama-cpp/win-x64-cuda\": 3.1.1",
          "35361:     \"@node-llama-cpp/win-x64-vulkan\": 3.1.1",
          "35362:     async-retry: ^1.3.3",
          "35363:     bytes: ^3.1.2",
          "35366:     cmake-js: ^7.3.0",
          "35369:     env-var: ^7.5.0",
          "35370:     filenamify: ^6.0.0",
          "35371:     fs-extra: ^11.2.0",
          "35372:     ignore: ^5.3.2",
          "35373:     ipull: ^3.7.4",
          "35374:     is-unicode-supported: ^2.1.0",
          "35375:     lifecycle-utils: ^1.7.0",
          "35376:     log-symbols: ^7.0.0",
          "35377:     nanoid: ^5.0.7",
          "35378:     node-addon-api: ^8.1.0",
          "35379:     octokit: ^4.0.2",
          "35380:     ora: ^8.1.0",
          "35381:     pretty-ms: ^9.1.0",
          "35382:     proper-lockfile: ^4.1.2",
          "35383:     semver: ^7.6.3",
          "35384:     simple-git: ^3.27.0",
          "35385:     slice-ansi: ^7.1.0",
          "35386:     stdout-update: ^4.0.1",
          "35387:     strip-ansi: ^7.1.0",
          "35388:     validate-npm-package-name: ^5.0.1",
          "35393:   dependenciesMeta:",
          "35394:     \"@node-llama-cpp/linux-arm64\":",
          "35395:       optional: true",
          "35396:     \"@node-llama-cpp/linux-armv7l\":",
          "35397:       optional: true",
          "35398:     \"@node-llama-cpp/linux-x64\":",
          "35399:       optional: true",
          "35400:     \"@node-llama-cpp/linux-x64-cuda\":",
          "35401:       optional: true",
          "35402:     \"@node-llama-cpp/linux-x64-vulkan\":",
          "35403:       optional: true",
          "35404:     \"@node-llama-cpp/mac-arm64-metal\":",
          "35405:       optional: true",
          "35406:     \"@node-llama-cpp/mac-x64\":",
          "35407:       optional: true",
          "35408:     \"@node-llama-cpp/win-arm64\":",
          "35409:       optional: true",
          "35410:     \"@node-llama-cpp/win-x64\":",
          "35411:       optional: true",
          "35412:     \"@node-llama-cpp/win-x64-cuda\":",
          "35413:       optional: true",
          "35414:     \"@node-llama-cpp/win-x64-vulkan\":",
          "35415:       optional: true",
          "35420:     nlc: dist/cli/cli.js",
          "35422:   checksum: 25c644a64d3f42b766b6d8ef1d84e5be84c1fa664cad961efa41001e68b4de65b0d926e25fbbc745d2702579567d9ea59cbd69df01158c2516ab68907ee0926f",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "35526:   languageName: node",
          "35527:   linkType: hard",
          "35532:   dependencies:",
          "35544:   languageName: node",
          "35545:   linkType: hard",
          "",
          "[Removed Lines]",
          "35529: \"octokit@npm:^3.1.0\":",
          "35530:   version: 3.1.0",
          "35531:   resolution: \"octokit@npm:3.1.0\"",
          "35533:     \"@octokit/app\": ^14.0.0",
          "35534:     \"@octokit/core\": ^5.0.0",
          "35535:     \"@octokit/oauth-app\": ^6.0.0",
          "35536:     \"@octokit/plugin-paginate-graphql\": ^4.0.0",
          "35537:     \"@octokit/plugin-paginate-rest\": ^8.0.0",
          "35538:     \"@octokit/plugin-rest-endpoint-methods\": ^9.0.0",
          "35539:     \"@octokit/plugin-retry\": ^6.0.0",
          "35540:     \"@octokit/plugin-throttling\": ^7.0.0",
          "35541:     \"@octokit/request-error\": ^5.0.0",
          "35542:     \"@octokit/types\": ^11.1.0",
          "35543:   checksum: 148c9dcf3a65a824f69802a950bdc5dae6fd70e16024d08b1fdd65a7b080bccc037326e0145a8a4aa6b041f1ceefe1d04a7228750de8256d55e82beaa1f2df37",
          "",
          "[Added Lines]",
          "35757: \"octokit@npm:^4.0.2\":",
          "35758:   version: 4.0.2",
          "35759:   resolution: \"octokit@npm:4.0.2\"",
          "35761:     \"@octokit/app\": ^15.0.0",
          "35762:     \"@octokit/core\": ^6.0.0",
          "35763:     \"@octokit/oauth-app\": ^7.0.0",
          "35764:     \"@octokit/plugin-paginate-graphql\": ^5.0.0",
          "35765:     \"@octokit/plugin-paginate-rest\": ^11.0.0",
          "35766:     \"@octokit/plugin-rest-endpoint-methods\": ^13.0.0",
          "35767:     \"@octokit/plugin-retry\": ^7.0.0",
          "35768:     \"@octokit/plugin-throttling\": ^9.0.0",
          "35769:     \"@octokit/request-error\": ^6.0.0",
          "35770:     \"@octokit/types\": ^13.0.0",
          "35771:   checksum: 6e3d6ccd67738d05b8b1a101798b9fcd5cb57560ba761761918d9d7e93e551b846b51f31125ee642fca443e37babd81b42c09a69fed79e33de0f97d8b694a8f7",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "35620:   languageName: node",
          "35621:   linkType: hard",
          "35623: \"onnx-proto@npm:^4.0.4\":",
          "35624:   version: 4.0.4",
          "35625:   resolution: \"onnx-proto@npm:4.0.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35851: \"onetime@npm:^7.0.0\":",
          "35852:   version: 7.0.0",
          "35853:   resolution: \"onetime@npm:7.0.0\"",
          "35854:   dependencies:",
          "35855:     mimic-function: ^5.0.0",
          "35856:   checksum: eb08d2da9339819e2f9d52cab9caf2557d80e9af8c7d1ae86e1a0fef027d00a88e9f5bd67494d350df360f7c559fbb44e800b32f310fb989c860214eacbb561c",
          "35857:   languageName: node",
          "35858:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "35868:   languageName: node",
          "35869:   linkType: hard",
          "35874:   dependencies:",
          "35875:     chalk: ^5.3.0",
          "35878:     is-interactive: ^2.0.0",
          "35883:     strip-ansi: ^7.1.0",
          "35885:   languageName: node",
          "35886:   linkType: hard",
          "",
          "[Removed Lines]",
          "35871: \"ora@npm:^7.0.1\":",
          "35872:   version: 7.0.1",
          "35873:   resolution: \"ora@npm:7.0.1\"",
          "35876:     cli-cursor: ^4.0.0",
          "35877:     cli-spinners: ^2.9.0",
          "35879:     is-unicode-supported: ^1.3.0",
          "35880:     log-symbols: ^5.1.0",
          "35881:     stdin-discarder: ^0.1.0",
          "35882:     string-width: ^6.1.0",
          "35884:   checksum: 0842b8b9a96a8586085cafdc25077c76fed8ade072c52c53e748cf40a214731d2215a4d6081d8fbd6203d2b897e834332bda53eb64afd1a5968da17daf020bff",
          "",
          "[Added Lines]",
          "36108: \"ora@npm:^8.1.0\":",
          "36109:   version: 8.1.0",
          "36110:   resolution: \"ora@npm:8.1.0\"",
          "36113:     cli-cursor: ^5.0.0",
          "36114:     cli-spinners: ^2.9.2",
          "36116:     is-unicode-supported: ^2.0.0",
          "36117:     log-symbols: ^6.0.0",
          "36118:     stdin-discarder: ^0.2.2",
          "36119:     string-width: ^7.2.0",
          "36121:   checksum: 81b9a2627a687c2b16fa08b0ae0b3641b320bdbeca831eb323df0cbb1e5ddc096b94391ff342839a1db47f5a895cebb2a8d06c319a5d935fc48628f35a036107",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "36213:   languageName: node",
          "36214:   linkType: hard",
          "36216: \"parse-numeric-range@npm:^1.3.0\":",
          "36217:   version: 1.3.0",
          "36218:   resolution: \"parse-numeric-range@npm:1.3.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36453: \"parse-ms@npm:^3.0.0\":",
          "36454:   version: 3.0.0",
          "36455:   resolution: \"parse-ms@npm:3.0.0\"",
          "36456:   checksum: fc602bba093835562321a67a9d6c8c9687ca4f26a09459a77e07ebd7efddd1a5766725ec60eb0c83a2abe67f7a23808f7deb1c1226727776eaf7f9607ae09db2",
          "36457:   languageName: node",
          "36458:   linkType: hard",
          "36460: \"parse-ms@npm:^4.0.0\":",
          "36461:   version: 4.0.0",
          "36462:   resolution: \"parse-ms@npm:4.0.0\"",
          "36463:   checksum: 673c801d9f957ff79962d71ed5a24850163f4181a90dd30c4e3666b3a804f53b77f1f0556792e8b2adbb5d58757907d1aa51d7d7dc75997c2a56d72937cbc8b7",
          "36464:   languageName: node",
          "36465:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "37411:   languageName: node",
          "37412:   linkType: hard",
          "37414: \"pretty-error@npm:^4.0.0\":",
          "37415:   version: 4.0.0",
          "37416:   resolution: \"pretty-error@npm:4.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37665: \"pretty-bytes@npm:^6.1.0\":",
          "37666:   version: 6.1.1",
          "37667:   resolution: \"pretty-bytes@npm:6.1.1\"",
          "37668:   checksum: 43d29d909d2d88072da2c3d72f8fd0f2d2523c516bfa640aff6e31f596ea1004b6601f4cabc50d14b2cf10e82635ebe5b7d9378f3d5bae1c0067131829421b8a",
          "37669:   languageName: node",
          "37670:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "37476:   languageName: node",
          "37477:   linkType: hard",
          "37479: \"pretty-time@npm:^1.1.0\":",
          "37480:   version: 1.1.0",
          "37481:   resolution: \"pretty-time@npm:1.1.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37737: \"pretty-ms@npm:^8.0.0\":",
          "37738:   version: 8.0.0",
          "37739:   resolution: \"pretty-ms@npm:8.0.0\"",
          "37740:   dependencies:",
          "37741:     parse-ms: ^3.0.0",
          "37742:   checksum: b7d2a8182887af0e5ab93f9df331f10db9b8eda86855e2de115eb01a6c501bde5631a8813b1b0abdd7d045e79b08ae875369a8fd279a3dacd6d9e572bdd3bfa6",
          "37743:   languageName: node",
          "37744:   linkType: hard",
          "37746: \"pretty-ms@npm:^9.1.0\":",
          "37747:   version: 9.1.0",
          "37748:   resolution: \"pretty-ms@npm:9.1.0\"",
          "37749:   dependencies:",
          "37750:     parse-ms: ^4.0.0",
          "37751:   checksum: 0f66507467f2005040cccdcb36f35b82674d7809f41c4432009235ed6c920787afa17f621c25b7ccb8ccd80b0840c7b71f7f4a3addb8f0eeef3a033ff1e5cf71",
          "37752:   languageName: node",
          "37753:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "37621:   languageName: node",
          "37622:   linkType: hard",
          "37624: \"property-information@npm:^5.0.0, property-information@npm:^5.3.0\":",
          "37625:   version: 5.6.0",
          "37626:   resolution: \"property-information@npm:5.6.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37900: \"proper-lockfile@npm:^4.1.2\":",
          "37901:   version: 4.1.2",
          "37902:   resolution: \"proper-lockfile@npm:4.1.2\"",
          "37903:   dependencies:",
          "37904:     graceful-fs: ^4.2.4",
          "37905:     retry: ^0.12.0",
          "37906:     signal-exit: ^3.0.2",
          "37907:   checksum: 00078ee6a61c216a56a6140c7d2a98c6c733b3678503002dc073ab8beca5d50ca271de4c85fca13b9b8ee2ff546c36674d1850509b84a04a5d0363bcb8638939",
          "37908:   languageName: node",
          "37909:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "38962:   languageName: node",
          "38963:   linkType: hard",
          "38965: \"retry-axios@npm:^2.6.0\":",
          "38966:   version: 2.6.0",
          "38967:   resolution: \"retry-axios@npm:2.6.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39252: \"restore-cursor@npm:^5.0.0\":",
          "39253:   version: 5.1.0",
          "39254:   resolution: \"restore-cursor@npm:5.1.0\"",
          "39255:   dependencies:",
          "39256:     onetime: ^7.0.0",
          "39257:     signal-exit: ^4.1.0",
          "39258:   checksum: 838dd54e458d89cfbc1a923b343c1b0f170a04100b4ce1733e97531842d7b440463967e521216e8ab6c6f8e89df877acc7b7f4c18ec76e99fb9bf5a60d358d2c",
          "39259:   languageName: node",
          "39260:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "39854:   languageName: node",
          "39855:   linkType: hard",
          "39860:   dependencies:",
          "39861:     \"@kwsites/file-exists\": ^1.1.1",
          "39862:     \"@kwsites/promise-deferred\": ^1.1.1",
          "39865:   languageName: node",
          "39866:   linkType: hard",
          "",
          "[Removed Lines]",
          "39857: \"simple-git@npm:^3.19.1\":",
          "39858:   version: 3.19.1",
          "39859:   resolution: \"simple-git@npm:3.19.1\"",
          "39863:     debug: ^4.3.4",
          "39864:   checksum: ab7c6901130eadd5758c5f1b0d957573b13cd981549cb5853e757cf13f8cb53b79a50e1acde8eaceba88da814d252f90cf7feab9bd67c64db903250adc51b02f",
          "",
          "[Added Lines]",
          "40154: \"simple-git@npm:^3.27.0\":",
          "40155:   version: 3.27.0",
          "40156:   resolution: \"simple-git@npm:3.27.0\"",
          "40160:     debug: ^4.3.5",
          "40161:   checksum: bc602d67317a5421363f4cbe446bc71336387a7ea9864b23993dcbbd7e4847e346a234aa5b46bf9d80130d2448cbaeb21cf8f7b62572dce093fb4643ff7ffafd",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "39927:   languageName: node",
          "39928:   linkType: hard",
          "39930: \"slice-ansi@npm:^3.0.0\":",
          "39931:   version: 3.0.0",
          "39932:   resolution: \"slice-ansi@npm:3.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40227: \"sleep-promise@npm:^9.1.0\":",
          "40228:   version: 9.1.0",
          "40229:   resolution: \"sleep-promise@npm:9.1.0\"",
          "40230:   checksum: a93359c18d2e4d586f2ecd4575cbdbc92bcbd9d387bd4bca249892abb512ca4e80075f67e53ec1279ea4555e8a1f6dc9df9e90f8aa71178ad943e9ba1f27debb",
          "40231:   languageName: node",
          "40232:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "39959:   languageName: node",
          "39960:   linkType: hard",
          "39962: \"smart-buffer@npm:^4.2.0\":",
          "39963:   version: 4.2.0",
          "39964:   resolution: \"smart-buffer@npm:4.2.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40266: \"slice-ansi@npm:^7.1.0\":",
          "40267:   version: 7.1.0",
          "40268:   resolution: \"slice-ansi@npm:7.1.0\"",
          "40269:   dependencies:",
          "40270:     ansi-styles: ^6.2.1",
          "40271:     is-fullwidth-code-point: ^5.0.0",
          "40272:   checksum: 10313dd3cf7a2e4b265f527b1684c7c568210b09743fd1bd74f2194715ed13ffba653dc93a5fa79e3b1711518b8990a732cb7143aa01ddafe626e99dfa6474b2",
          "40273:   languageName: node",
          "40274:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "40289:   languageName: node",
          "40290:   linkType: hard",
          "40293:   version: 0.2.2",
          "40294:   resolution: \"stdin-discarder@npm:0.2.2\"",
          "40295:   checksum: 642ffd05bd5b100819d6b24a613d83c6e3857c6de74eb02fc51506fa61dc1b0034665163831873868157c4538d71e31762bcf319be86cea04c3aba5336470478",
          "40296:   languageName: node",
          "40297:   linkType: hard",
          "40299: \"stop-iteration-iterator@npm:^1.0.0\":",
          "40300:   version: 1.0.0",
          "40301:   resolution: \"stop-iteration-iterator@npm:1.0.0\"",
          "",
          "[Removed Lines]",
          "40292: \"stdin-discarder@npm:^0.2.1\":",
          "",
          "[Added Lines]",
          "40606: \"stdin-discarder@npm:^0.2.1, stdin-discarder@npm:^0.2.2\":",
          "40613: \"stdout-update@npm:^4.0.1\":",
          "40614:   version: 4.0.1",
          "40615:   resolution: \"stdout-update@npm:4.0.1\"",
          "40616:   dependencies:",
          "40617:     ansi-escapes: ^6.2.0",
          "40618:     ansi-styles: ^6.2.1",
          "40619:     string-width: ^7.1.0",
          "40620:     strip-ansi: ^7.1.0",
          "40621:   checksum: 3b5207b3a747bb917ca3b4a4894f163afae83a292ab151fad759cab736d240098ecc54ccedc7266fa3fd85eb61bb0f0f73acd562f6b02da8fa42e1c5ba2fddaf",
          "40622:   languageName: node",
          "40623:   linkType: hard",
          "40625: \"steno@npm:^4.0.2\":",
          "40626:   version: 4.0.2",
          "40627:   resolution: \"steno@npm:4.0.2\"",
          "40628:   checksum: 1d135aac18058e4629993d036e46b8a9af155e2a49260ece7047df8eb916f2c04f396b364db8543ad5b8c16d89c8747a6bdc43f3d85c79dc1728ffc9a2239a32",
          "40629:   languageName: node",
          "40630:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "40399:   languageName: node",
          "40400:   linkType: hard",
          "40414:   version: 7.2.0",
          "40415:   resolution: \"string-width@npm:7.2.0\"",
          "40416:   dependencies:",
          "",
          "[Removed Lines]",
          "40402: \"string-width@npm:^6.1.0\":",
          "40403:   version: 6.1.0",
          "40404:   resolution: \"string-width@npm:6.1.0\"",
          "40405:   dependencies:",
          "40406:     eastasianwidth: ^0.2.0",
          "40407:     emoji-regex: ^10.2.1",
          "40408:     strip-ansi: ^7.0.1",
          "40409:   checksum: 8aefb456a230c8d7fe254049b1b2d62603da1a3b6c7fc9f3332f6779583cc1c72653f9b6e4cd0c1c92befee1565d4a0a7542d09ba4ceb6d96af02fbd8425bb03",
          "40410:   languageName: node",
          "40411:   linkType: hard",
          "40413: \"string-width@npm:^7.0.0\":",
          "",
          "[Added Lines]",
          "40735: \"string-width@npm:^7.0.0, string-width@npm:^7.1.0, string-width@npm:^7.2.0\":",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "42460:   languageName: node",
          "42461:   linkType: hard",
          "42470:   languageName: node",
          "42471:   linkType: hard",
          "",
          "[Removed Lines]",
          "42463: \"universal-github-app-jwt@npm:^1.1.1\":",
          "42464:   version: 1.1.1",
          "42465:   resolution: \"universal-github-app-jwt@npm:1.1.1\"",
          "42466:   dependencies:",
          "42467:     \"@types/jsonwebtoken\": ^9.0.0",
          "42468:     jsonwebtoken: ^9.0.0",
          "42469:   checksum: 31d30150b9eafa9fa8bf57bd6f97d7d91d4509ad24fa673a6e29ac2295b8f1fc293a70cb44fa807af7cfd787db1cf6edd3876fc0cae31230c5292b76677159fc",
          "",
          "[Added Lines]",
          "42785: \"universal-github-app-jwt@npm:^2.2.0\":",
          "42786:   version: 2.2.0",
          "42787:   resolution: \"universal-github-app-jwt@npm:2.2.0\"",
          "42788:   checksum: 09f8e9710453749bd669fb6511157f03683674066f04696b10d42c18d87cb40d77a5b7504b5bd6f4e329229fff8715e01958217560accd941381c6b4cb7a46fe",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "42889:   languageName: node",
          "42890:   linkType: hard",
          "42892: \"value-equal@npm:^1.0.1\":",
          "42893:   version: 1.0.1",
          "42894:   resolution: \"value-equal@npm:1.0.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43211: \"validate-npm-package-name@npm:^5.0.1\":",
          "43212:   version: 5.0.1",
          "43213:   resolution: \"validate-npm-package-name@npm:5.0.1\"",
          "43214:   checksum: 0d583a1af23aeffea7748742cf22b6802458736fb8b60323ba5949763824d46f796474b0e1b9206beb716f9d75269e19dbd7795d6b038b29d561be95dd827381",
          "43215:   languageName: node",
          "43216:   linkType: hard",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "43986:   languageName: node",
          "43987:   linkType: hard",
          "43990:   version: 17.7.2",
          "43991:   resolution: \"yargs@npm:17.7.2\"",
          "43992:   dependencies:",
          "",
          "[Removed Lines]",
          "43989: \"yargs@npm:^17.6.0, yargs@npm:^17.7.2\":",
          "",
          "[Added Lines]",
          "44315: \"yargs@npm:^17.7.2\":",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "44025:   languageName: node",
          "44026:   linkType: hard",
          "44028: \"youtube-transcript@npm:^1.0.6\":",
          "44029:   version: 1.0.6",
          "44030:   resolution: \"youtube-transcript@npm:1.0.6\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44354: \"yoctocolors@npm:^2.1.1\":",
          "44355:   version: 2.1.1",
          "44356:   resolution: \"yoctocolors@npm:2.1.1\"",
          "44357:   checksum: 563fbec88bce9716d1044bc98c96c329e1d7a7c503e6f1af68f1ff914adc3ba55ce953c871395e2efecad329f85f1632f51a99c362032940321ff80c42a6f74d",
          "44358:   languageName: node",
          "44359:   linkType: hard",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "070907204e191fc79710a2a85a1c0b43c69f80cc",
      "candidate_info": {
        "commit_hash": "070907204e191fc79710a2a85a1c0b43c69f80cc",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/070907204e191fc79710a2a85a1c0b43c69f80cc",
        "files": [
          "libs/langchain-community/package.json",
          "libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts",
          "yarn.lock"
        ],
        "message": "fix(community): bump `@upstash/ratelimit` version (#6832)\n\nCo-authored-by: bracesproul <braceasproul@gmail.com>",
        "before_after_code_files": [
          "libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts||libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts||libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts": [
          "File: libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts -> libs/langchain-community/src/callbacks/handlers/upstash_ratelimit.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     _name?: string",
          "149:   ): Promise<void> {",
          "150:     if (this.tokenRatelimit) {",
          "152:       if (remaining <= 0) {",
          "153:         throw new UpstashRatelimitError(\"Token limit reached!\", \"token\");",
          "154:       }",
          "",
          "[Removed Lines]",
          "151:       const remaining = await this.tokenRatelimit.getRemaining(this.identifier);",
          "",
          "[Added Lines]",
          "151:       const result = await this.tokenRatelimit.getRemaining(this.identifier);",
          "155:       const remaining = typeof result === \"number\" ? result : result.remaining;",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11503:     \"@types/ws\": ^8",
          "11504:     \"@typescript-eslint/eslint-plugin\": ^5.58.0",
          "11505:     \"@typescript-eslint/parser\": ^5.58.0",
          "11507:     \"@upstash/redis\": ^1.32.0",
          "11508:     \"@upstash/vector\": ^1.1.1",
          "11509:     \"@vercel/kv\": ^0.2.3",
          "",
          "[Removed Lines]",
          "11506:     \"@upstash/ratelimit\": ^1.2.1",
          "",
          "[Added Lines]",
          "11506:     \"@upstash/ratelimit\": ^2.0.3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11653:     \"@tensorflow-models/universal-sentence-encoder\": \"*\"",
          "11654:     \"@tensorflow/tfjs-converter\": \"*\"",
          "11655:     \"@tensorflow/tfjs-core\": \"*\"",
          "11657:     \"@upstash/redis\": ^1.20.6",
          "11658:     \"@upstash/vector\": ^1.1.1",
          "11659:     \"@vercel/kv\": ^0.2.3",
          "",
          "[Removed Lines]",
          "11656:     \"@upstash/ratelimit\": ^1.1.3",
          "",
          "[Added Lines]",
          "11656:     \"@upstash/ratelimit\": ^1.1.3 || ^2.0.3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "20101:   languageName: node",
          "20102:   linkType: hard",
          "20107:   dependencies:",
          "20108:     \"@upstash/redis\": ^1.28.3",
          "20110:   languageName: node",
          "20111:   linkType: hard",
          "20116:   dependencies:",
          "20119:   languageName: node",
          "20120:   linkType: hard",
          "",
          "[Removed Lines]",
          "20104: \"@upstash/core-analytics@npm:^0.0.9\":",
          "20105:   version: 0.0.9",
          "20106:   resolution: \"@upstash/core-analytics@npm:0.0.9\"",
          "20109:   checksum: cfb49ce9d7c745a98de2b4e35973855d6311502c90840683dbe4b6a58304d880c6c356c6de275f32cfe5ec5add865a3dfe860c96d989e8a06e823788e90af2b9",
          "20113: \"@upstash/ratelimit@npm:^1.2.1\":",
          "20114:   version: 1.2.1",
          "20115:   resolution: \"@upstash/ratelimit@npm:1.2.1\"",
          "20117:     \"@upstash/core-analytics\": ^0.0.9",
          "20118:   checksum: c23112312c51d91916ab75610a2ad9bd7b8eea41c2f6765eb84e572334eb0a4bc59c2420c9332c22a91e42398570c47ce0231884e6362d56e50057935d5f12f8",
          "",
          "[Added Lines]",
          "20104: \"@upstash/core-analytics@npm:^0.0.10\":",
          "20105:   version: 0.0.10",
          "20106:   resolution: \"@upstash/core-analytics@npm:0.0.10\"",
          "20109:   checksum: 5b435a5e67666a6ecb19e59ab73f314124634fdadb66390f8b2d6f7e20cac461262e5b81d113d77a5d093d8d11b2cfe3ecd5c573cde77505557f8bbf0f8b1e27",
          "20113: \"@upstash/ratelimit@npm:^2.0.3\":",
          "20114:   version: 2.0.3",
          "20115:   resolution: \"@upstash/ratelimit@npm:2.0.3\"",
          "20117:     \"@upstash/core-analytics\": ^0.0.10",
          "20118:   checksum: eae88d62948f9069bf1c89e9a7fb5c0e2a1e784d04af2319d079a60b02dc67d8e316af9252931d29fafb93dedb496479b0e92a340d62bdddd96d60e3fbe44c63",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fc07c99188cc7a2b4286401222a15d7e97279e7",
      "candidate_info": {
        "commit_hash": "8fc07c99188cc7a2b4286401222a15d7e97279e7",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/8fc07c99188cc7a2b4286401222a15d7e97279e7",
        "files": [
          "examples/package.json",
          "libs/langchain-pinecone/package.json",
          "yarn.lock"
        ],
        "message": "pinecone[patch]: Update `@pinecone/pinecone-database` version to resolve type errors (#7167)\n\nCo-authored-by: jacoblee93 <jacoblee93@gmail.com>",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12574:     \"@langchain/core\": \"workspace:*\"",
          "12575:     \"@langchain/openai\": \"workspace:*\"",
          "12576:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12578:     \"@swc/core\": ^1.3.90",
          "12579:     \"@swc/jest\": ^0.2.29",
          "12580:     \"@tsconfig/recommended\": ^1.0.3",
          "",
          "[Removed Lines]",
          "12577:     \"@pinecone-database/pinecone\": ^3.0.0",
          "",
          "[Added Lines]",
          "12577:     \"@pinecone-database/pinecone\": ^3.0.0 || ^4.0.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14121:   languageName: node",
          "14122:   linkType: hard",
          "14127:   dependencies:",
          "14131:     encoding: ^0.1.13",
          "14133:   languageName: node",
          "14134:   linkType: hard",
          "",
          "[Removed Lines]",
          "14124: \"@pinecone-database/pinecone@npm:^3.0.0\":",
          "14125:   version: 3.0.0",
          "14126:   resolution: \"@pinecone-database/pinecone@npm:3.0.0\"",
          "14128:     \"@sinclair/typebox\": ^0.29.0",
          "14129:     ajv: ^8.12.0",
          "14130:     cross-fetch: ^3.1.5",
          "14132:   checksum: 3803c6fead5343e495ccfe177793ed6f58411c2c5efdb1538cdcb0203164ebefb299ed30c8b9c1590d00cafb1dd20e2d06d6b0339159ea237d2939856f377ca9",
          "",
          "[Added Lines]",
          "14124: \"@pinecone-database/pinecone@npm:^3.0.0 || ^4.0.0, @pinecone-database/pinecone@npm:^4.0.0\":",
          "14125:   version: 4.0.0",
          "14126:   resolution: \"@pinecone-database/pinecone@npm:4.0.0\"",
          "14129:   checksum: 7523d7b8dc6a5d7b5d5cf37c97f6070112473f26d82aec23ca198554634e6bc0883866fcc9a8b2978e287daad8665085cef1d4f16d86a7ba0f8b623d88bdda54",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27345:     \"@langchain/yandex\": \"workspace:*\"",
          "27346:     \"@layerup/layerup-security\": ^1.5.12",
          "27347:     \"@opensearch-project/opensearch\": ^2.2.0",
          "27349:     \"@planetscale/database\": ^1.8.0",
          "27350:     \"@prisma/client\": ^4.11.0",
          "27351:     \"@qdrant/js-client-rest\": ^1.9.0",
          "",
          "[Removed Lines]",
          "27348:     \"@pinecone-database/pinecone\": ^3.0.0",
          "",
          "[Added Lines]",
          "27345:     \"@pinecone-database/pinecone\": ^4.0.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "306f31e61b6fa993bfb498cd671bb2ff4615777a",
      "candidate_info": {
        "commit_hash": "306f31e61b6fa993bfb498cd671bb2ff4615777a",
        "repo": "langchain-ai/langchainjs",
        "commit_url": "https://github.com/langchain-ai/langchainjs/commit/306f31e61b6fa993bfb498cd671bb2ff4615777a",
        "files": [
          "libs/langchain-google-common/package.json",
          "libs/langchain-google-gauth/package.json",
          "libs/langchain-google-vertexai-web/package.json",
          "libs/langchain-google-vertexai/package.json",
          "libs/langchain-google-webauth/package.json",
          "yarn.lock"
        ],
        "message": "chore(vertexai): Release 0.1.2 (#7185)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "12080:   languageName: unknown",
          "12081:   linkType: soft",
          "12084:   version: 0.0.0-use.local",
          "12085:   resolution: \"@langchain/google-common@workspace:libs/langchain-google-common\"",
          "12086:   dependencies:",
          "",
          "[Removed Lines]",
          "12083: \"@langchain/google-common@^0.1.0, @langchain/google-common@workspace:*, @langchain/google-common@workspace:libs/langchain-google-common, @langchain/google-common@~0.1.0\":",
          "",
          "[Added Lines]",
          "12083: \"@langchain/google-common@^0.1.0, @langchain/google-common@workspace:*, @langchain/google-common@workspace:libs/langchain-google-common, @langchain/google-common@~0.1.2\":",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12115:   languageName: unknown",
          "12116:   linkType: soft",
          "12119:   version: 0.0.0-use.local",
          "12120:   resolution: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth\"",
          "12121:   dependencies:",
          "12122:     \"@jest/globals\": ^29.5.0",
          "12123:     \"@langchain/core\": \"workspace:*\"",
          "12125:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12126:     \"@swc/core\": ^1.3.90",
          "12127:     \"@swc/jest\": ^0.2.29",
          "",
          "[Removed Lines]",
          "12118: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.0\":",
          "12124:     \"@langchain/google-common\": ~0.1.0",
          "",
          "[Added Lines]",
          "12118: \"@langchain/google-gauth@workspace:libs/langchain-google-gauth, @langchain/google-gauth@~0.1.2\":",
          "12124:     \"@langchain/google-common\": ~0.1.2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12194:     \"@jest/globals\": ^29.5.0",
          "12195:     \"@langchain/core\": \"workspace:*\"",
          "12196:     \"@langchain/google-common\": ^0.1.0",
          "12198:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12199:     \"@langchain/standard-tests\": 0.0.0",
          "12200:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12197:     \"@langchain/google-webauth\": ~0.1.0",
          "",
          "[Added Lines]",
          "12197:     \"@langchain/google-webauth\": ~0.1.2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12230:     \"@jest/globals\": ^29.5.0",
          "12231:     \"@langchain/core\": \"workspace:*\"",
          "12232:     \"@langchain/google-common\": ^0.1.0",
          "12234:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12235:     \"@langchain/standard-tests\": 0.0.0",
          "12236:     \"@swc/core\": ^1.3.90",
          "",
          "[Removed Lines]",
          "12233:     \"@langchain/google-gauth\": ~0.1.0",
          "",
          "[Added Lines]",
          "12233:     \"@langchain/google-gauth\": ~0.1.2",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12259:   languageName: unknown",
          "12260:   linkType: soft",
          "12263:   version: 0.0.0-use.local",
          "12264:   resolution: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth\"",
          "12265:   dependencies:",
          "12266:     \"@jest/globals\": ^29.5.0",
          "12267:     \"@langchain/core\": \"workspace:*\"",
          "12269:     \"@langchain/scripts\": \">=0.1.0 <0.2.0\"",
          "12270:     \"@swc/core\": ^1.3.90",
          "12271:     \"@swc/jest\": ^0.2.29",
          "",
          "[Removed Lines]",
          "12262: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.0\":",
          "12268:     \"@langchain/google-common\": ~0.1.0",
          "",
          "[Added Lines]",
          "12262: \"@langchain/google-webauth@workspace:libs/langchain-google-webauth, @langchain/google-webauth@~0.1.2\":",
          "12268:     \"@langchain/google-common\": ~0.1.2",
          "",
          "---------------"
        ]
      }
    }
  ]
}