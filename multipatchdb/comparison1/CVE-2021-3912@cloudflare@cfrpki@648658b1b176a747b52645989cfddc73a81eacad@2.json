{
  "cve_id": "CVE-2021-3912",
  "cve_desc": "OctoRPKI tries to load the entire contents of a repository in memory, and in the case of a GZIP bomb, unzip it in memory, making it possible to create a repository that makes OctoRPKI run out of memory (and thus crash).",
  "repo": "cloudflare/cfrpki",
  "patch_hash": "648658b1b176a747b52645989cfddc73a81eacad",
  "patch_info": {
    "commit_hash": "648658b1b176a747b52645989cfddc73a81eacad",
    "repo": "cloudflare/cfrpki",
    "commit_url": "https://github.com/cloudflare/cfrpki/commit/648658b1b176a747b52645989cfddc73a81eacad",
    "files": [
      "cmd/octorpki/octorpki.go",
      "sync/lib/rrdp.go"
    ],
    "message": "VULN-8282: Prevent resource exhaustion by enforcing a 100mg limit on downloaded files",
    "before_after_code_files": [
      "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
      "sync/lib/rrdp.go||sync/lib/rrdp.go"
    ]
  },
  "patch_diff": {
    "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
      "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:     sentry.CaptureException(err)",
      "443:    })",
      "446:     log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
      "447:     rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
      "448:    } else {",
      "",
      "[Removed Lines]",
      "445:    if s.RRDPFailover {",
      "",
      "[Added Lines]",
      "446:    if s.RRDPFailover && err.Error() != \"http: request body too large\" {",
      "",
      "---------------"
    ],
    "sync/lib/rrdp.go||sync/lib/rrdp.go": [
      "File: sync/lib/rrdp.go -> sync/lib/rrdp.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  \"encoding/xml\"",
      "7:  \"errors\"",
      "8:  \"fmt\"",
      "10:  \"io/ioutil\"",
      "11:  \"net/http\"",
      "12:  \"strings\"",
      "13: )",
      "15: type RRDPFetcher interface {",
      "16:  GetXML(string) (string, error)",
      "17: }",
      "",
      "[Removed Lines]",
      "9:  \"github.com/getsentry/sentry-go\"",
      "",
      "[Added Lines]",
      "13:  \"github.com/getsentry/sentry-go\"",
      "16: const ResponseLimit int64 = 100000000 // (100mb)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:   return \"\", NewRRDPErrorFetch(req, errors.New(fmt.Sprintf(\"status is %d\", res.StatusCode)))",
      "41:  }",
      "44:  if err != nil {",
      "45:   return \"\", err",
      "46:  }",
      "",
      "[Removed Lines]",
      "43:  data, err := ioutil.ReadAll(res.Body)",
      "",
      "[Added Lines]",
      "47:  r := http.MaxBytesReader(nil, res.Body, ResponseLimit)",
      "48:  data, err := ioutil.ReadAll(r)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8237a6228f424f1fc487b60422696c3d181e5a8",
      "candidate_info": {
        "commit_hash": "f8237a6228f424f1fc487b60422696c3d181e5a8",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/f8237a6228f424f1fc487b60422696c3d181e5a8",
        "files": [
          "cmd/ctrpki/ctrpki.go",
          "cmd/localrpki/localrpki.go",
          "cmd/octorpki/octorpki.go",
          "sync/lib/fetch.go",
          "sync/lib/rrdp.go"
        ],
        "message": "Refactoring (#118)\n\nCo-authored-by: Oliver Geiselhardt-Herms <ogeiselhardt-herms@cloudflare.com>",
        "before_after_code_files": [
          "cmd/ctrpki/ctrpki.go||cmd/ctrpki/ctrpki.go",
          "cmd/localrpki/localrpki.go||cmd/localrpki/localrpki.go",
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
          "sync/lib/fetch.go||sync/lib/fetch.go",
          "sync/lib/rrdp.go||sync/lib/rrdp.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
            "sync/lib/rrdp.go||sync/lib/rrdp.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
            "sync/lib/rrdp.go||sync/lib/rrdp.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/ctrpki/ctrpki.go||cmd/ctrpki/ctrpki.go": [
          "File: cmd/ctrpki/ctrpki.go -> cmd/ctrpki/ctrpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  \"strings\"",
          "11:  \"time\"",
          "15:  \"github.com/cloudflare/cfrpki/validator/pki\"",
          "17:  \"github.com/google/certificate-transparency-go/client\"",
          "18:  \"github.com/google/certificate-transparency-go/jsonclient\"",
          "19:  log \"github.com/sirupsen/logrus\"",
          "",
          "[Removed Lines]",
          "13:  \"github.com/cloudflare/cfrpki/sync/lib\"",
          "14:  \"github.com/cloudflare/cfrpki/validator/lib\"",
          "16:  \"github.com/google/certificate-transparency-go\"",
          "",
          "[Added Lines]",
          "13:  syncpki \"github.com/cloudflare/cfrpki/sync/lib\"",
          "14:  librpki \"github.com/cloudflare/cfrpki/validator/lib\"",
          "16:  ct \"github.com/google/certificate-transparency-go\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  s := syncpki.LocalFetch{",
          "59:   MapDirectory: mapDir,",
          "61:  }",
          "63:  validator := pki.NewValidator()",
          "",
          "[Removed Lines]",
          "60:   Log:          log.StandardLogger(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cmd/localrpki/localrpki.go||cmd/localrpki/localrpki.go": [
          "File: cmd/localrpki/localrpki.go -> cmd/localrpki/localrpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"encoding/json\"",
          "5:  \"flag\"",
          "6:  \"fmt\"",
          "11:  \"io\"",
          "12:  \"os\"",
          "13:  \"runtime\"",
          "14:  \"strconv\"",
          "15:  \"strings\"",
          "16:  \"time\"",
          "17: )",
          "19: var (",
          "",
          "[Removed Lines]",
          "7:  \"github.com/cloudflare/cfrpki/sync/lib\"",
          "8:  \"github.com/cloudflare/cfrpki/validator/lib\"",
          "9:  \"github.com/cloudflare/cfrpki/validator/pki\"",
          "10:  log \"github.com/sirupsen/logrus\"",
          "",
          "[Added Lines]",
          "14:  syncpki \"github.com/cloudflare/cfrpki/sync/lib\"",
          "15:  librpki \"github.com/cloudflare/cfrpki/validator/lib\"",
          "16:  \"github.com/cloudflare/cfrpki/validator/pki\"",
          "17:  log \"github.com/sirupsen/logrus\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  s := syncpki.LocalFetch{",
          "53:   MapDirectory: mapDir,",
          "55:  }",
          "57:  var vt time.Time",
          "",
          "[Removed Lines]",
          "54:   Log:          log.StandardLogger(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: }",
          "180: type RRDPInfo struct {",
          "182:  Path      string `json:\"path\"`",
          "183:  SessionID string `json:\"sessionid\"`",
          "184:  Serial    int64  `json:\"serial\"`",
          "",
          "[Removed Lines]",
          "181:  Rsync     string `json:\"rsync\"`",
          "",
          "[Added Lines]",
          "181:  RsyncURL  string `json:\"rsync\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220: }",
          "222: type OctoRPKI struct {",
          "228:  LastComputed time.Time",
          "229:  Key          *ecdsa.PrivateKey",
          "",
          "[Removed Lines]",
          "223:  Tals        []*pki.PKIFile",
          "224:  TalsFetch   map[string]*librpki.RPKITAL",
          "225:  TalNames    []string",
          "226:  UseManifest bool",
          "",
          "[Added Lines]",
          "223:  Tals      []*pki.PKIFile",
          "224:  TalsFetch map[string]*librpki.RPKITAL",
          "225:  TalNames  []string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:  PrevRepos    map[string]time.Time",
          "237:  CurrentRepos map[string]time.Time",
          "241:  RRDPFetchDomain map[string]string",
          "243:  RRDPInfo map[string]RRDPInfo",
          "249:  RRDPStats          map[string]*Stats",
          "250:  RsyncStats         map[string]*Stats",
          "251:  ValidationDuration time.Duration",
          "252:  Iteration          int",
          "253:  ROAsTALsCount      []ROAsTAL",
          "257: }",
          "259: func (s *OctoRPKI) MainReduce() bool {",
          "",
          "[Removed Lines]",
          "239:  RsyncFetch      map[string]string",
          "240:  RRDPFetch       map[string]string",
          "245:  ROAList     *prefixfile.ROAList",
          "246:  ROAListLock *sync.RWMutex",
          "255:  InfoAuthorities     [][]SIA",
          "256:  InfoAuthoritiesLock *sync.RWMutex",
          "",
          "[Added Lines]",
          "238:  RRDPFetch       map[string]string // maps from RRDP Url to rsync URL",
          "241:  RsyncFetchJobs map[string]string",
          "245:  ROAList   *prefixfile.ROAList",
          "246:  ROAListMu sync.RWMutex",
          "248:  InfoAuthorities     [][]SIA",
          "249:  InfoAuthoritiesLock sync.RWMutex",
          "251:  stats  *octoRPKIStats",
          "252:  tracer opentracing.Tracer",
          "253: }",
          "255: type octoRPKIStats struct {",
          "261: }",
          "263: func newOctoRPKIStats() *octoRPKIStats {",
          "264:  return &octoRPKIStats{",
          "265:   RsyncStats:    make(map[string]*Stats),",
          "266:   RRDPStats:     make(map[string]*Stats),",
          "267:   ROAsTALsCount: make([]ROAsTAL, 0),",
          "268:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:  }",
          "343:  MetricSIACounts.With(prometheus.Labels{\"address\": main, \"type\": \"rrdp\"}).Inc()",
          "346:  return nil",
          "347: }",
          "350:  fc, err := ioutil.ReadFile(file)",
          "351:  if err != nil {",
          "352:   return fmt.Errorf(\"Unable to read file %q: %v\", file, err)",
          "",
          "[Removed Lines]",
          "344:  s.RRDPStats[main].Count++",
          "345:  s.RRDPStats[main].RRDPLastFile = url",
          "349: func (s *OctoRPKI) LoadRRDP(file string) error {",
          "",
          "[Added Lines]",
          "356:  s.stats.RRDPStats[main].Count++",
          "357:  s.stats.RRDPStats[main].RRDPLastFile = url",
          "361: func (s *OctoRPKI) LoadRRDPInfo(file string) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:  return nil",
          "362: }",
          "365:  fc, err := json.Marshal(s.RRDPInfo)",
          "366:  if err != nil {",
          "367:   return fmt.Errorf(\"JSON marshal failed: %v\", err)",
          "",
          "[Removed Lines]",
          "364: func (s *OctoRPKI) saveRRDP(file string) error {",
          "",
          "[Added Lines]",
          "376: func (s *OctoRPKI) saveRRDPInfo(file string) error {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376: }",
          "378: func (s *OctoRPKI) mainRRDP(pSpan opentracing.Span) {",
          "381:  defer span.Finish()",
          "383:  for path, rsync := range s.RRDPFetch {",
          "",
          "[Removed Lines]",
          "379:  tracer := opentracing.GlobalTracer()",
          "380:  span := tracer.StartSpan(\"rrdp\", opentracing.ChildOf(pSpan.Context()))",
          "",
          "[Added Lines]",
          "391:  span := s.tracer.StartSpan(\"rrdp\", opentracing.ChildOf(pSpan.Context()))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386: }",
          "388: func (s *OctoRPKI) fetchRRDP(path string, rsyncURL string, span opentracing.Span) {",
          "391:  defer rSpan.Finish()",
          "393:  rSpan.SetTag(\"rrdp\", path)",
          "",
          "[Removed Lines]",
          "389:  tracer := opentracing.GlobalTracer()",
          "390:  rSpan := tracer.StartSpan(\"sync\", opentracing.ChildOf(span.Context()))",
          "",
          "[Added Lines]",
          "400:  rSpan := s.tracer.StartSpan(\"sync\", opentracing.ChildOf(span.Context()))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "398:  MetricSIACounts.With(prometheus.Labels{\"address\": path, \"type\": \"rrdp\"}).Set(0)",
          "402:  }",
          "408:  t1 := time.Now()",
          "",
          "[Removed Lines]",
          "400:  if _, exists := s.RRDPStats[path]; !exists {",
          "401:   s.RRDPStats[path] = &Stats{}",
          "404:  s.RRDPStats[path].URI = path",
          "405:  s.RRDPStats[path].Iteration++",
          "406:  s.RRDPStats[path].Count = 0",
          "",
          "[Added Lines]",
          "410:  if _, exists := s.stats.RRDPStats[path]; !exists {",
          "411:   s.stats.RRDPStats[path] = &Stats{}",
          "414:  s.stats.RRDPStats[path].URI = path",
          "415:  s.stats.RRDPStats[path].Iteration++",
          "416:  s.stats.RRDPStats[path].Count = 0",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "412:  err := rrdp.FetchRRDP(s.RRDPFetchDomain[path])",
          "413:  t2 := time.Now()",
          "414:  if err != nil {",
          "440:   return",
          "441:  }",
          "443:  log.Debugf(\"Success fetching %s, removing rsync %s\", path, rsyncURL)",
          "446:  rSpan.LogKV(\"event\", \"rrdp\", \"type\", \"success\", \"message\", \"rrdp successfully fetched\")",
          "447:  sentry.WithScope(func(scope *sentry.Scope) {",
          "",
          "[Removed Lines]",
          "415:   rSpan.SetTag(\"error\", true)",
          "416:   sentry.WithScope(func(scope *sentry.Scope) {",
          "417:    if errC, ok := err.(interface{ SetURL(string, string) }); ok {",
          "418:     errC.SetURL(path, rsyncURL)",
          "419:    }",
          "420:    if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "421:     errC.SetSentryScope(scope)",
          "422:    }",
          "423:    rrdp.SetSentryScope(scope)",
          "424:    scope.SetTag(\"Rsync\", rsyncURL)",
          "425:    scope.SetTag(\"RRDP\", path)",
          "426:    sentry.CaptureException(err)",
          "427:   })",
          "430:   if *RRDPFailover && err.Error() != \"http: request body too large\" {",
          "431:    log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsyncURL, err)",
          "432:    rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
          "433:   } else {",
          "434:    log.Errorf(\"Error when processing %v (for %v): %v.Skipping failover to rsync.\", path, rsyncURL, err)",
          "435:    rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"skipping failover to rsync\", \"message\", err)",
          "436:    delete(s.RsyncFetch, rsyncURL)",
          "437:   }",
          "439:   s.rrdpError(path, err, t1, t2)",
          "444:  delete(s.RsyncFetch, rsyncURL)",
          "",
          "[Added Lines]",
          "425:   s.rrdpError(rsyncURL, path, err, t1, t2, rSpan, rrdp)",
          "430:  delete(s.RsyncFetchJobs, rsyncURL)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "457:  lastFetch := time.Now().Unix()",
          "458:  MetricLastFetch.With(prometheus.Labels{\"address\": path, \"type\": \"rrdp\"}).Set(float64(lastFetch))",
          "465:  s.RRDPInfo[rsyncURL] = RRDPInfo{",
          "467:   Path:      path,",
          "468:   SessionID: rrdp.SessionID,",
          "469:   Serial:    rrdp.Serial,",
          "",
          "[Removed Lines]",
          "460:  s.RRDPStats[path].LastFetch = int(lastFetch)",
          "461:  s.RRDPStats[path].RRDPSerial = rrdp.Serial",
          "462:  s.RRDPStats[path].RRDPSessionID = rrdp.SessionID",
          "463:  s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "466:   Rsync:     rsyncURL,",
          "",
          "[Added Lines]",
          "446:  s.stats.RRDPStats[path].LastFetch = int(lastFetch)",
          "447:  s.stats.RRDPStats[path].RRDPSerial = rrdp.Serial",
          "448:  s.stats.RRDPStats[path].RRDPSessionID = rrdp.SessionID",
          "449:  s.stats.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "452:   RsyncURL:  rsyncURL,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "481:  }",
          "482: }",
          "485:  MetricRRDPErrors.With(prometheus.Labels{\"address\": path}).Inc()",
          "490: }",
          "492: func (s *OctoRPKI) mainRsync(pSpan opentracing.Span) {",
          "493:  t1 := time.Now()",
          "499:  defer span.Finish()",
          "502:   s.fetchRsync(uri, span)",
          "503:  }",
          "",
          "[Removed Lines]",
          "484: func (s *OctoRPKI) rrdpError(path string, err error, t1 time.Time, t2 time.Time) {",
          "486:  s.RRDPStats[path].Errors++",
          "487:  s.RRDPStats[path].LastFetchError = int(time.Now().Unix())",
          "488:  s.RRDPStats[path].LastError = err.Error()",
          "489:  s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "494:  tracer := opentracing.GlobalTracer()",
          "495:  span := tracer.StartSpan(",
          "496:   \"rsync\",",
          "497:   opentracing.ChildOf(pSpan.Context()),",
          "498:  )",
          "501:  for uri := range s.RsyncFetch {",
          "",
          "[Added Lines]",
          "470: func (s *OctoRPKI) rrdpError(rsyncURL string, path string, err error, t1 time.Time, t2 time.Time, rSpan opentracing.Span, rrdp *syncpki.RRDPSystem) {",
          "471:  rSpan.SetTag(\"error\", true)",
          "472:  sentry.WithScope(func(scope *sentry.Scope) {",
          "473:   if errC, ok := err.(interface{ SetURL(string, string) }); ok {",
          "474:    errC.SetURL(path, rsyncURL)",
          "475:   }",
          "476:   if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "477:    errC.SetSentryScope(scope)",
          "478:   }",
          "479:   rrdp.SetSentryScope(scope)",
          "480:   scope.SetTag(\"Rsync\", rsyncURL)",
          "481:   scope.SetTag(\"RRDP\", path)",
          "482:   sentry.CaptureException(err)",
          "483:  })",
          "486:  if *RRDPFailover && err.Error() != \"http: request body too large\" {",
          "487:   log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsyncURL, err)",
          "488:   rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
          "489:  } else {",
          "490:   log.Errorf(\"Error when processing %v (for %v): %v.Skipping failover to rsync.\", path, rsyncURL, err)",
          "491:   rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"skipping failover to rsync\", \"message\", err)",
          "492:   delete(s.RsyncFetchJobs, rsyncURL)",
          "493:  }",
          "496:  s.stats.RRDPStats[path].Errors++",
          "497:  s.stats.RRDPStats[path].LastFetchError = int(time.Now().Unix())",
          "498:  s.stats.RRDPStats[path].LastError = err.Error()",
          "499:  s.stats.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "504:  span := s.tracer.StartSpan(\"rsync\", opentracing.ChildOf(pSpan.Context()))",
          "507:  for uri := range s.RsyncFetchJobs {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "516: }",
          "518: func (s *OctoRPKI) fetchRsync(uri string, span opentracing.Span) {",
          "521:  defer rSpan.Finish()",
          "522:  rSpan.SetTag(\"rsync\", uri)",
          "523:  rSpan.SetTag(\"type\", \"rsync\")",
          "",
          "[Removed Lines]",
          "519:  tracer := opentracing.GlobalTracer()",
          "520:  rSpan := tracer.StartSpan(\"sync\", opentracing.ChildOf(span.Context()))",
          "",
          "[Added Lines]",
          "525:  rSpan := s.tracer.StartSpan(\"sync\", opentracing.ChildOf(span.Context()))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "525:  log.Infof(\"Rsync sync %v\", uri)",
          "526:  downloadPath := mustExtractFoldersPathFromRsyncURL(uri)",
          "530:  }",
          "536:  path := filepath.Join(*Basepath, downloadPath)",
          "537:  ctxRsync, cancelRsync := context.WithTimeout(context.Background(), *RsyncTimeout)",
          "",
          "[Removed Lines]",
          "528:  if _, exists := s.RsyncStats[uri]; !exists {",
          "529:   s.RsyncStats[uri] = &Stats{}",
          "532:  s.RsyncStats[uri].URI = uri",
          "533:  s.RsyncStats[uri].Iteration++",
          "534:  s.RsyncStats[uri].Count = 0",
          "",
          "[Added Lines]",
          "533:  if _, exists := s.stats.RsyncStats[uri]; !exists {",
          "534:   s.stats.RsyncStats[uri] = &Stats{}",
          "537:  s.stats.RsyncStats[uri].URI = uri",
          "538:  s.stats.RsyncStats[uri].Iteration++",
          "539:  s.stats.RsyncStats[uri].Count = 0",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "554:  lastFetch := time.Now().Unix()",
          "555:  MetricLastFetch.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(lastFetch))",
          "561: }",
          "",
          "[Removed Lines]",
          "557:  s.RsyncStats[uri].LastFetch = int(lastFetch)",
          "558:  s.RsyncStats[uri].Count = len(files)",
          "559:  s.RsyncStats[uri].Duration = t2.Sub(t1).Seconds()",
          "",
          "[Added Lines]",
          "562:  s.stats.RsyncStats[uri].LastFetch = int(lastFetch)",
          "563:  s.stats.RsyncStats[uri].Count = len(files)",
          "564:  s.stats.RsyncStats[uri].Duration = t2.Sub(t1).Seconds()",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "578:  MetricRsyncErrors.With(prometheus.Labels{\"address\": uri}).Inc()",
          "583: }",
          "585: func filterDuplicates(roalist []prefixfile.ROAJson) []prefixfile.ROAJson {",
          "",
          "[Removed Lines]",
          "580:  s.RsyncStats[uri].Errors++",
          "581:  s.RsyncStats[uri].LastFetchError = int(time.Now().Unix())",
          "582:  s.RsyncStats[uri].LastError = err.Error()",
          "",
          "[Added Lines]",
          "585:  s.stats.RsyncStats[uri].Errors++",
          "586:  s.stats.RsyncStats[uri].LastFetchError = int(time.Now().Unix())",
          "587:  s.stats.RsyncStats[uri].LastError = err.Error()",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "604: func (s *OctoRPKI) mainTAL(pSpan opentracing.Span) {",
          "605:  t1 := time.Now()",
          "612:  for path, tal := range s.TalsFetch {",
          "745:  }",
          "751: }",
          "753: func logCollector(sm *pki.SimpleManager, tal *pki.PKIFile, tSpan opentracing.Span) {",
          "",
          "[Removed Lines]",
          "606:  tracer := opentracing.GlobalTracer()",
          "607:  span := tracer.StartSpan(",
          "608:   \"tal\",",
          "609:   opentracing.ChildOf(pSpan.Context()),",
          "610:  )",
          "613:   tSpan := tracer.StartSpan(",
          "614:    \"tal-fetch\",",
          "615:    opentracing.ChildOf(span.Context()),",
          "616:   )",
          "617:   tSpan.SetTag(\"tal\", path)",
          "620:   var success bool",
          "621:   var successUrl string",
          "623:   sHub := sentry.CurrentHub().Clone()",
          "625:   for _, uri := range tal.URI {",
          "626:    if strings.HasPrefix(uri, \"http://\") || strings.HasPrefix(uri, \"https://\") {",
          "628:     tfSpan := tracer.StartSpan(",
          "629:      \"tal-fetch-uri\",",
          "630:      opentracing.ChildOf(tSpan.Context()),",
          "631:     )",
          "632:     tfSpan.SetTag(\"uri\", uri)",
          "634:     sHub.ConfigureScope(func(scope *sentry.Scope) {",
          "635:      scope.SetTag(\"tal.uri\", uri)",
          "636:      scope.SetTag(\"tal.path\", path)",
          "637:     })",
          "639:     req, err := http.NewRequest(\"GET\", uri, nil)",
          "640:     if err != nil {",
          "641:      tfSpan.SetTag(\"error\", true)",
          "642:      tfSpan.SetTag(\"message\", err)",
          "643:      tfSpan.Finish()",
          "644:      log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "645:      continue",
          "646:     }",
          "647:     req.Header.Set(\"User-Agent\", s.HTTPFetcher.UserAgent)",
          "649:     sHub.ConfigureScope(func(scope *sentry.Scope) {",
          "650:      scope.SetRequest(req)",
          "651:     })",
          "653:     sbc := &sentry.Breadcrumb{",
          "654:      Message:  fmt.Sprintf(\"GET | %s\", uri),",
          "655:      Category: \"http\",",
          "656:     }",
          "659:     resp, err := s.HTTPFetcher.Client.Do(req)",
          "660:     if err != nil {",
          "661:      tfSpan.SetTag(\"error\", true)",
          "662:      tfSpan.SetTag(\"message\", err)",
          "663:      tfSpan.Finish()",
          "665:      sbc.Level = sentry.LevelError",
          "666:      sHub.AddBreadcrumb(sbc, nil)",
          "667:      log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "668:      sHub.CaptureException(err)",
          "669:      continue",
          "670:     }",
          "672:     if resp.StatusCode != 200 {",
          "673:      msg := fmt.Sprintf(\"http server replied: %s\", resp.Status)",
          "675:      tfSpan.SetTag(\"error\", true)",
          "676:      tfSpan.SetTag(\"message\", msg)",
          "677:      tfSpan.Finish()",
          "679:      sHub.ConfigureScope(func(scope *sentry.Scope) {",
          "680:       scope.SetLevel(sentry.LevelError)",
          "681:      })",
          "682:      sbc.Level = sentry.LevelError",
          "683:      sHub.AddBreadcrumb(sbc, nil)",
          "685:      log.Errorf(\"http server replied: %s while trying to fetch %s\", resp.Status, uri)",
          "686:      sHub.CaptureMessage(msg)",
          "687:      continue",
          "688:     }",
          "690:     sHub.AddBreadcrumb(sbc, nil)",
          "693:     data, err := ioutil.ReadAll(resp.Body)",
          "694:     tfSpan.LogKV(\"size\", len(data))",
          "695:     if err != nil {",
          "696:      tfSpan.SetTag(\"error\", true)",
          "697:      tfSpan.SetTag(\"message\", err)",
          "698:      tfSpan.Finish()",
          "700:      log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "701:      sHub.CaptureException(err)",
          "702:      continue",
          "703:     }",
          "706:     err = s.WriteRsyncFileOnDisk(tal.GetRsyncURI(), data)",
          "707:     if err != nil {",
          "708:      tfSpan.SetTag(\"error\", true)",
          "709:      tfSpan.SetTag(\"message\", err)",
          "710:      tfSpan.Finish()",
          "712:      log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "713:      sHub.CaptureException(err)",
          "714:      continue",
          "715:     }",
          "717:     tfSpan.Finish()",
          "719:     sHub.WithScope(func(scope *sentry.Scope) {",
          "720:      scope.SetLevel(sentry.LevelInfo)",
          "721:      sHub.CaptureMessage(\"fetched http tal cert successfully\")",
          "722:     })",
          "724:     success = true",
          "725:     successUrl = uri",
          "726:     break",
          "728:    }",
          "729:   }",
          "732:   if !success && *RRDPFailover && tal.HasRsync() {",
          "733:    rsync := tal.GetRsyncURI()",
          "734:    log.Infof(\"Root certificate for %s will be downloaded using rsync: %s\", path, rsync)",
          "735:    s.RsyncFetch[rsync] = \"\"",
          "736:    tSpan.SetTag(\"failover-rsync\", true)",
          "737:   } else if success {",
          "738:    log.Infof(\"Successfully downloaded root certificate for %s at %s\", path, successUrl)",
          "739:   } else {",
          "740:    log.Errorf(\"Could not download root certificate for %s\", path)",
          "741:    tSpan.SetTag(\"error\", true)",
          "742:   }",
          "744:   tSpan.Finish()",
          "747:  t2 := time.Now()",
          "748:  MetricOperationTime.With(prometheus.Labels{\"type\": \"tal\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "750:  span.Finish()",
          "",
          "[Added Lines]",
          "611:  span := s.tracer.StartSpan(\"tal\", opentracing.ChildOf(pSpan.Context()))",
          "612:  defer span.Finish()",
          "615:   s.fetchTAL(path, tal, span)",
          "616:  }",
          "618:  t2 := time.Now()",
          "619:  MetricOperationTime.With(prometheus.Labels{\"type\": \"tal\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "620: }",
          "622: func (s *OctoRPKI) fetchTAL(path string, tal *librpki.RPKITAL, span opentracing.Span) {",
          "623:  tSpan := s.tracer.StartSpan(\"tal-fetch\", opentracing.ChildOf(span.Context()))",
          "624:  defer tSpan.Finish()",
          "625:  tSpan.SetTag(\"tal\", path)",
          "627:  success, successURL := s._fetchTAL(tal, path, span)",
          "628:  if success {",
          "629:   log.Infof(\"Successfully downloaded root certificate for %s at %s\", path, successURL)",
          "630:   return",
          "631:  }",
          "634:  if *RRDPFailover && tal.HasRsync() {",
          "635:   rsync := tal.GetRsyncURI()",
          "636:   log.Infof(\"Root certificate for %s will be downloaded using rsync: %s\", path, rsync)",
          "637:   s.RsyncFetchJobs[rsync] = \"\"",
          "638:   tSpan.SetTag(\"failover-rsync\", true)",
          "639:   return",
          "640:  }",
          "642:  log.Errorf(\"Could not download root certificate for %s\", path)",
          "643:  tSpan.SetTag(\"error\", true)",
          "645: }",
          "647: func (s *OctoRPKI) _fetchTAL(tal *librpki.RPKITAL, path string, tSpan opentracing.Span) (success bool, successURL string) {",
          "648:  for _, uri := range tal.URI {",
          "649:   success, successURL := s.fetchTALurl(tal, uri, path, tSpan)",
          "650:   if success {",
          "651:    return success, successURL",
          "652:   }",
          "653:  }",
          "655:  return false, \"\"",
          "656: }",
          "658: func (s *OctoRPKI) fetchTALurl(tal *librpki.RPKITAL, uri string, path string, tSpan opentracing.Span) (success bool, successURL string) {",
          "659:  if !strings.HasPrefix(uri, \"http://\") && !strings.HasPrefix(uri, \"https://\") {",
          "660:   return false, \"\"",
          "661:  }",
          "663:  tfSpan := s.tracer.StartSpan(\"tal-fetch-uri\", opentracing.ChildOf(tSpan.Context()))",
          "664:  defer tfSpan.Finish()",
          "665:  tfSpan.SetTag(\"uri\", uri)",
          "667:  sHub := sentry.CurrentHub().Clone()",
          "668:  sHub.ConfigureScope(func(scope *sentry.Scope) {",
          "669:   scope.SetTag(\"tal.uri\", uri)",
          "670:   scope.SetTag(\"tal.path\", path)",
          "671:  })",
          "673:  req, err := http.NewRequest(\"GET\", uri, nil)",
          "674:  if err != nil {",
          "675:   tfSpan.SetTag(\"error\", true)",
          "676:   tfSpan.SetTag(\"message\", err)",
          "677:   log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "678:   return false, \"\"",
          "679:  }",
          "680:  req.Header.Set(\"User-Agent\", s.HTTPFetcher.UserAgent)",
          "682:  sHub.ConfigureScope(func(scope *sentry.Scope) {",
          "683:   scope.SetRequest(req)",
          "684:  })",
          "686:  sbc := &sentry.Breadcrumb{",
          "687:   Message:  fmt.Sprintf(\"GET | %s\", uri),",
          "688:   Category: \"http\",",
          "689:  }",
          "692:  resp, err := s.HTTPFetcher.Client.Do(req)",
          "693:  if err != nil {",
          "694:   tfSpan.SetTag(\"error\", true)",
          "695:   tfSpan.SetTag(\"message\", err)",
          "697:   sbc.Level = sentry.LevelError",
          "698:   sHub.AddBreadcrumb(sbc, nil)",
          "699:   log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "700:   sHub.CaptureException(err)",
          "701:   return false, \"\"",
          "702:  }",
          "704:  if resp.StatusCode != 200 {",
          "705:   msg := fmt.Sprintf(\"http server replied: %s\", resp.Status)",
          "707:   tfSpan.SetTag(\"error\", true)",
          "708:   tfSpan.SetTag(\"message\", msg)",
          "710:   sHub.ConfigureScope(func(scope *sentry.Scope) {",
          "711:    scope.SetLevel(sentry.LevelError)",
          "712:   })",
          "713:   sbc.Level = sentry.LevelError",
          "714:   sHub.AddBreadcrumb(sbc, nil)",
          "716:   log.Errorf(\"http server replied: %s while trying to fetch %s\", resp.Status, uri)",
          "717:   sHub.CaptureMessage(msg)",
          "718:   return false, \"\"",
          "721:  sHub.AddBreadcrumb(sbc, nil)",
          "724:  data, err := ioutil.ReadAll(resp.Body)",
          "725:  tfSpan.LogKV(\"size\", len(data))",
          "726:  if err != nil {",
          "727:   tfSpan.SetTag(\"error\", true)",
          "728:   tfSpan.SetTag(\"message\", err)",
          "730:   log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "731:   sHub.CaptureException(err)",
          "732:   return false, \"\"",
          "733:  }",
          "736:  err = s.WriteRsyncFileOnDisk(tal.GetRsyncURI(), data)",
          "737:  if err != nil {",
          "738:   tfSpan.SetTag(\"error\", true)",
          "739:   tfSpan.SetTag(\"message\", err)",
          "741:   log.Errorf(\"error while trying to fetch: %s: %v\", uri, err)",
          "742:   sHub.CaptureException(err)",
          "743:   return false, \"\"",
          "744:  }",
          "746:  sHub.WithScope(func(scope *sentry.Scope) {",
          "747:   scope.SetLevel(sentry.LevelInfo)",
          "748:   sHub.CaptureMessage(\"fetched http tal cert successfully\")",
          "749:  })",
          "751:  return true, uri",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "765:  }",
          "766: }",
          "770:  roalist := &prefixfile.ROAList{",
          "771:   Data: make([]prefixfile.ROAJson, 0),",
          "772:  }",
          "773:  var counts int",
          "775:  for i, tal := range s.Tals {",
          "777:   eSpan.SetTag(\"tal\", tal.Path)",
          "778:   talname := tal.Path",
          "779:   if len(s.TalNames) == len(s.Tals) {",
          "",
          "[Removed Lines]",
          "768: func (s *OctoRPKI) generateROAList(managers []*pki.SimpleManager, span opentracing.Span) *prefixfile.ROAList {",
          "769:  tracer := opentracing.GlobalTracer()",
          "774:  s.ROAsTALsCount = make([]ROAsTAL, 0)",
          "776:   eSpan := tracer.StartSpan(\"extract\", opentracing.ChildOf(span.Context()))",
          "",
          "[Added Lines]",
          "769: func (s *OctoRPKI) generateROAList(pkiManagers []*pki.SimpleManager, span opentracing.Span) *prefixfile.ROAList {",
          "774:  s.stats.ROAsTALsCount = make([]ROAsTAL, 0)",
          "776:   eSpan := s.tracer.StartSpan(\"extract\", opentracing.ChildOf(span.Context()))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "781:   }",
          "783:   var counttal int",
          "785:    roa := obj.Resource.(*librpki.RPKIROA)",
          "787:    for _, entry := range roa.Valids {",
          "",
          "[Removed Lines]",
          "784:   for _, obj := range managers[i].Validator.ValidROA {",
          "",
          "[Added Lines]",
          "784:   for _, obj := range pkiManagers[i].Validator.ValidROA {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "798:   }",
          "799:   eSpan.Finish()",
          "802:   MetricROAsCount.With(prometheus.Labels{\"ta\": talname}).Set(float64(counttal))",
          "803:  }",
          "804:  curTime := time.Now()",
          "",
          "[Removed Lines]",
          "801:   s.ROAsTALsCount = append(s.ROAsTALsCount, ROAsTAL{TA: talname, Count: counttal})",
          "",
          "[Added Lines]",
          "801:   s.stats.ROAsTALsCount = append(s.stats.ROAsTALsCount, ROAsTAL{TA: talname, Count: counttal})",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "819: }",
          "821: func (s *OctoRPKI) signROAList(roaList *prefixfile.ROAList, span opentracing.Span) {",
          "824:  defer sSpan.Finish()",
          "826:  signdate, sign, err := roaList.Sign(s.Key)",
          "",
          "[Removed Lines]",
          "822:  tracer := opentracing.GlobalTracer()",
          "823:  sSpan := tracer.StartSpan(\"sign\", opentracing.ChildOf(span.Context()))",
          "",
          "[Added Lines]",
          "822:  sSpan := s.tracer.StartSpan(\"sign\", opentracing.ChildOf(span.Context()))",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "840:  }",
          "841:  iatmp := make(map[string]*SIA)",
          "845:  defer span.Finish()",
          "847:  pkiManagers := make([]*pki.SimpleManager, len(s.Tals))",
          "848:  for i, tal := range s.Tals {",
          "850:   tSpan.SetTag(\"tal\", tal.Path)",
          "852:   validator := pki.NewValidator()",
          "",
          "[Removed Lines]",
          "843:  tracer := opentracing.GlobalTracer()",
          "844:  span := tracer.StartSpan(\"validation\", opentracing.ChildOf(pSpan.Context()))",
          "849:   tSpan := tracer.StartSpan(\"explore\", opentracing.ChildOf(span.Context()))",
          "",
          "[Added Lines]",
          "842:  span := s.tracer.StartSpan(\"validation\", opentracing.ChildOf(pSpan.Context()))",
          "847:   tSpan := s.tracer.StartSpan(\"explore\", opentracing.ChildOf(span.Context()))",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "864:   go logCollector(sm, tal, tSpan)",
          "866:   pkiManagers[i].AddInitial([]*pki.PKIFile{tal})",
          "870:   var count int",
          "",
          "[Removed Lines]",
          "867:   countExplore := pkiManagers[i].Explore(!s.UseManifest, false)",
          "",
          "[Added Lines]",
          "865:   countExplore := pkiManagers[i].Explore(!*UseManifest, false)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "900:     s.RRDPFetchDomain[rrdpGeneralName] = gnExtractedDomain",
          "901:     s.RRDPFetch[rrdpGeneralName] = gnExtracted",
          "902:    }",
          "904:    s.CurrentRepos[gnExtracted] = time.Now()",
          "905:    count++",
          "908:    sia, ok := iatmp[gnExtracted]",
          "909:    if !ok {",
          "911:      gnExtracted,",
          "912:      rrdpGeneralName,",
          "913:     }",
          "915:     sia = &(ia[i][len(ia[i])-1])",
          "916:     iatmp[gnExtracted] = sia",
          "917:    }",
          "",
          "[Removed Lines]",
          "903:    s.RsyncFetch[gnExtracted] = rrdpGeneralName",
          "910:     iaIdTmp := SIA{",
          "914:     ia[i] = append(ia[i], iaIdTmp)",
          "",
          "[Added Lines]",
          "901:    s.RsyncFetchJobs[gnExtracted] = rrdpGeneralName",
          "908:     tmpSIA := SIA{",
          "912:     ia[i] = append(ia[i], tmpSIA)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "927:  s.setROAList(s.generateROAList(pkiManagers, span))",
          "929:  t2 := time.Now()",
          "932:  MetricLastValidation.Set(float64(s.LastComputed.Unix()))",
          "933: }",
          "",
          "[Removed Lines]",
          "930:  s.ValidationDuration = t2.Sub(t1)",
          "931:  MetricOperationTime.With(prometheus.Labels{\"type\": \"validation\"}).Observe(float64(s.ValidationDuration.Seconds()))",
          "",
          "[Added Lines]",
          "928:  s.stats.ValidationDuration = t2.Sub(t1)",
          "929:  MetricOperationTime.With(prometheus.Labels{\"type\": \"validation\"}).Observe(float64(s.stats.ValidationDuration.Seconds()))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "940: }",
          "942: func (s *OctoRPKI) setROAList(roaList *prefixfile.ROAList) {",
          "946:  s.ROAList = roaList",
          "947: }",
          "949: func (s *OctoRPKI) ServeROAs(w http.ResponseWriter, r *http.Request) {",
          "975:   }",
          "983:  }",
          "984: }",
          "986: func (s *OctoRPKI) ServeHealth(w http.ResponseWriter, r *http.Request) {",
          "",
          "[Removed Lines]",
          "943:  s.ROAListLock.Lock()",
          "944:  defer s.ROAListLock.Unlock()",
          "950:  if s.Stable.Load() || !*WaitStable || s.HasPreviousStable.Load() {",
          "952:   upTo := s.LastComputed.Add(*ValidityDuration)",
          "953:   maxAge := int(upTo.Sub(time.Now()).Seconds())",
          "955:   w.Header().Set(\"Content-Type\", \"application/json\")",
          "957:   if maxAge > 0 && *CacheHeader {",
          "958:    w.Header().Set(\"Cache-Control\", fmt.Sprintf(\"max-age=%v\", maxAge))",
          "959:   }",
          "961:   s.ROAListLock.RLock()",
          "962:   tmp := s.ROAList",
          "963:   s.ROAListLock.RUnlock()",
          "965:   etag := sha256.New()",
          "966:   etag.Write([]byte(fmt.Sprintf(\"%v/%v\", tmp.Metadata.Generated, tmp.Metadata.Counts)))",
          "967:   etagSum := etag.Sum(nil)",
          "968:   etagSumHex := hex.EncodeToString(etagSum)",
          "970:   if match := r.Header.Get(\"If-None-Match\"); match != \"\" {",
          "971:    if match == etagSumHex {",
          "972:     w.WriteHeader(http.StatusNotModified)",
          "973:     return",
          "974:    }",
          "977:   w.Header().Set(\"Etag\", etagSumHex)",
          "978:   enc := json.NewEncoder(w)",
          "979:   enc.Encode(tmp)",
          "980:  } else {",
          "981:   w.WriteHeader(http.StatusServiceUnavailable)",
          "982:   w.Write([]byte(\"File not ready yet\"))",
          "",
          "[Added Lines]",
          "941:  s.ROAListMu.Lock()",
          "942:  defer s.ROAListMu.Unlock()",
          "947: func (s *OctoRPKI) getROAList() *prefixfile.ROAList {",
          "948:  s.ROAListMu.RLock()",
          "949:  defer s.ROAListMu.RUnlock()",
          "951:  return s.ROAList",
          "952: }",
          "955:  if !s.Stable.Load() && *WaitStable && !s.HasPreviousStable.Load() {",
          "956:   w.WriteHeader(http.StatusServiceUnavailable)",
          "957:   w.Write([]byte(\"File not ready yet\"))",
          "958:   return",
          "959:  }",
          "961:  upTo := s.LastComputed.Add(*ValidityDuration)",
          "962:  maxAge := int(upTo.Sub(time.Now()).Seconds())",
          "964:  w.Header().Set(\"Content-Type\", \"application/json\")",
          "966:  if maxAge > 0 && *CacheHeader {",
          "967:   w.Header().Set(\"Cache-Control\", fmt.Sprintf(\"max-age=%v\", maxAge))",
          "968:  }",
          "970:  roaList := s.getROAList()",
          "972:  etag := sha256.New()",
          "973:  etag.Write([]byte(fmt.Sprintf(\"%v/%v\", roaList.Metadata.Generated, roaList.Metadata.Counts)))",
          "974:  etagSum := etag.Sum(nil)",
          "975:  etagSumHex := hex.EncodeToString(etagSum)",
          "977:  if match := r.Header.Get(\"If-None-Match\"); match != \"\" {",
          "978:   if match == etagSumHex {",
          "979:    w.WriteHeader(http.StatusNotModified)",
          "980:    return",
          "984:  w.Header().Set(\"Etag\", etagSumHex)",
          "985:  enc := json.NewEncoder(w)",
          "986:  enc.Encode(roaList)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1048:  ir := InfoResult{",
          "1049:   TAs:                ias,",
          "1050:   ROACount:           len(s.ROAList.Data),",
          "1052:   Stable:             s.Stable.Load(),",
          "1053:   LastValidation:     int(s.LastComputed.Unix()),",
          "1056:  }",
          "1057:  enc := json.NewEncoder(w)",
          "1058:  enc.Encode(ir)",
          "",
          "[Removed Lines]",
          "1051:   ROAsTALs:           s.ROAsTALsCount,",
          "1054:   ValidationDuration: s.ValidationDuration.Seconds(),",
          "1055:   Iteration:          s.Iteration,",
          "",
          "[Added Lines]",
          "1054:   ROAsTALs:           s.stats.ROAsTALsCount,",
          "1057:   ValidationDuration: s.stats.ValidationDuration.Seconds(),",
          "1058:   Iteration:          s.stats.Iteration,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1167:   log.Fatalf(\"Failed to create directories %q: %v\", *Basepath, err)",
          "1168:  }",
          "1210:  if *Sign {",
          "1211:   keyFile, err := os.Open(*SignKey)",
          "",
          "[Removed Lines]",
          "1170:  s := &OctoRPKI{",
          "1171:   Tals:        tals,",
          "1172:   TalsFetch:   make(map[string]*librpki.RPKITAL),",
          "1173:   TalNames:    talNames,",
          "1174:   UseManifest: *UseManifest,",
          "1176:   RRDPInfo: make(map[string]RRDPInfo),",
          "1178:   PrevRepos:    make(map[string]time.Time),",
          "1179:   CurrentRepos: make(map[string]time.Time),",
          "1181:   RsyncFetch:      make(map[string]string),",
          "1182:   RRDPFetch:       make(map[string]string),",
          "1183:   RRDPFetchDomain: make(map[string]string),",
          "1185:   Fetcher: syncpki.NewLocalFetch(",
          "1186:    map[string]string{",
          "1187:     \"rsync://\": *Basepath,",
          "1188:    },",
          "1189:    log.StandardLogger()),",
          "1190:   HTTPFetcher: &syncpki.HTTPFetcher{",
          "1191:    UserAgent: *UserAgent,",
          "1192:    Client: &http.Client{",
          "1194:     Timeout: time.Second * 60,",
          "1195:    },",
          "1196:   },",
          "1197:   ROAList: &prefixfile.ROAList{",
          "1198:    Data: make([]prefixfile.ROAJson, 0),",
          "1199:   },",
          "1200:   ROAListLock: &sync.RWMutex{},",
          "1202:   RsyncStats:    make(map[string]*Stats),",
          "1203:   RRDPStats:     make(map[string]*Stats),",
          "1204:   ROAsTALsCount: make([]ROAsTAL, 0),",
          "1206:   InfoAuthorities:     make([][]SIA, 0),",
          "1207:   InfoAuthoritiesLock: &sync.RWMutex{},",
          "1208:  }",
          "",
          "[Added Lines]",
          "1173:  s := NewOctoRPKI(tals, talNames)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1233:  s.validationLoop()",
          "1234: }",
          "1236: func (s *OctoRPKI) validationLoop() {",
          "1238:  var spanActive bool",
          "1239:  var pSpan opentracing.Span",
          "1240:  var iterationsUntilStable int",
          "1241:  for {",
          "1242:   if !spanActive {",
          "1244:    spanActive = true",
          "1245:    iterationsUntilStable = 0",
          "1246:   }",
          "1251:   iterationsUntilStable++",
          "1253:   if iterationsUntilStable > *MaxIterations {",
          "1254:    log.Fatal(\"Max iterations has been reached. This number can be adjusted with -max.iterations\")",
          "1255:   }",
          "1258:   if *RRDP {",
          "1259:    s.doRRDP(span)",
          "",
          "[Removed Lines]",
          "1237:  tracer := opentracing.GlobalTracer()",
          "1243:    pSpan = tracer.StartSpan(\"multoperation\")",
          "1248:   span := tracer.StartSpan(\"operation\", opentracing.ChildOf(pSpan.Context()))",
          "1250:   s.Iteration++",
          "1256:   span.SetTag(\"iteration\", s.Iteration)",
          "",
          "[Added Lines]",
          "1201: func NewOctoRPKI(tals []*pki.PKIFile, talNames []string) *OctoRPKI {",
          "1202:  return &OctoRPKI{",
          "1203:   TalsFetch:       make(map[string]*librpki.RPKITAL),",
          "1204:   Tals:            tals,",
          "1205:   TalNames:        talNames,",
          "1206:   RRDPInfo:        make(map[string]RRDPInfo),",
          "1207:   PrevRepos:       make(map[string]time.Time),",
          "1208:   CurrentRepos:    make(map[string]time.Time),",
          "1209:   RsyncFetchJobs:  make(map[string]string),",
          "1210:   RRDPFetch:       make(map[string]string),",
          "1211:   RRDPFetchDomain: make(map[string]string),",
          "1212:   Fetcher:         syncpki.NewLocalFetch(*Basepath),",
          "1213:   HTTPFetcher:     syncpki.NewHTTPFetcher(*UserAgent),",
          "1214:   ROAList:         newROAList(),",
          "1215:   stats:           newOctoRPKIStats(),",
          "1216:   InfoAuthorities: make([][]SIA, 0),",
          "1217:   tracer:          opentracing.GlobalTracer(),",
          "1218:  }",
          "1219: }",
          "1221: func newROAList() *prefixfile.ROAList {",
          "1222:  return &prefixfile.ROAList{",
          "1223:   Data: make([]prefixfile.ROAJson, 0),",
          "1224:  }",
          "1225: }",
          "1233:    pSpan = s.tracer.StartSpan(\"multoperation\")",
          "1238:   span := s.tracer.StartSpan(\"operation\", opentracing.ChildOf(pSpan.Context()))",
          "1240:   s.stats.Iteration++",
          "1246:   span.SetTag(\"iteration\", s.stats.Iteration)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1271:   changed := s.MainReduce()",
          "1273:   s.HasPreviousStable.Store(s.Stable.Load())",
          "1275:   if *Mode == \"oneoff\" && (s.Stable.Load() || !*WaitStable) {",
          "",
          "[Removed Lines]",
          "1272:   s.Stable.Store(!changed && s.Iteration > 1)",
          "",
          "[Added Lines]",
          "1262:   s.Stable.Store(!changed && s.stats.Iteration > 1)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1336:  }()",
          "1338:  if *RRDPFile != \"\" {",
          "1340:   if err != nil {",
          "1341:    sentry.CaptureException(err)",
          "1342:   }",
          "",
          "[Removed Lines]",
          "1339:   err := s.LoadRRDP(*RRDPFile)",
          "",
          "[Added Lines]",
          "1329:   err := s.LoadRRDPInfo(*RRDPFile)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1345:  s.mainRRDP(span)",
          "1347:  if *RRDPFile != \"\" {",
          "1349:   if err != nil {",
          "1350:    sentry.CaptureException(err)",
          "1351:   }",
          "",
          "[Removed Lines]",
          "1348:   err := s.saveRRDP(*RRDPFile)",
          "",
          "[Added Lines]",
          "1338:   err := s.saveRRDPInfo(*RRDPFile)",
          "",
          "---------------"
        ],
        "sync/lib/fetch.go||sync/lib/fetch.go": [
          "File: sync/lib/fetch.go -> sync/lib/fetch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  librpki \"github.com/cloudflare/cfrpki/validator/lib\"",
          "12:  \"github.com/cloudflare/cfrpki/validator/pki\"",
          "13: )",
          "15: type LocalFetch struct {",
          "16:  MapDirectory map[string]string",
          "18:  repositories map[string]time.Time",
          "19: }",
          "22:  return &LocalFetch{",
          "25:   repositories: make(map[string]time.Time),",
          "26:  }",
          "27: }",
          "",
          "[Removed Lines]",
          "17:  Log          Logger",
          "21: func NewLocalFetch(mapDirectory map[string]string, log Logger) *LocalFetch {",
          "23:   MapDirectory: mapDirectory,",
          "24:   Log:          log,",
          "",
          "[Added Lines]",
          "14:  log \"github.com/sirupsen/logrus\"",
          "18:  Basepath     string",
          "23: func NewLocalFetch(basepath string) *LocalFetch {",
          "25:   Basepath:     basepath,",
          "26:   MapDirectory: map[string]string{RsyncProtoPrefix: basepath},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: func ParseMapDirectory(mapdir string) map[string]string {",
          "74:  mapDirectoryFinal := make(map[string]string)",
          "80:   }",
          "81:  }",
          "82:  return mapDirectoryFinal",
          "",
          "[Removed Lines]",
          "75:  mapdirs_split := strings.Split(mapdir, \",\")",
          "76:  for _, mapdir_u := range mapdirs_split {",
          "77:   mapdir_u_split := strings.Split(mapdir_u, \"=\")",
          "78:   if len(mapdir_u_split) == 2 {",
          "79:    mapDirectoryFinal[mapdir_u_split[0]] = mapdir_u_split[1]",
          "",
          "[Added Lines]",
          "77:  mapdirsSplit := strings.Split(mapdir, \",\")",
          "78:  for _, mapdirU := range mapdirsSplit {",
          "79:   mapdirUSplit := strings.Split(mapdirU, \"=\")",
          "80:   if len(mapdirUSplit) == 2 {",
          "81:    mapDirectoryFinal[mapdirUSplit[0]] = mapdirUSplit[1]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  return s.GetFileConv(file, file.Type != pki.TYPE_TAL)",
          "87: }",
          "90:  newPath := ReplacePath(file, s.MapDirectory)",
          "95:  if os.IsNotExist(err) {",
          "96:   return nil, nil",
          "97:  }",
          "100:   rsyncBase, _, errExtract := ExtractRsyncDomainModule(file.Path)",
          "103:   }",
          "105:   if _, ok := s.repositories[rsyncBase]; !ok {",
          "109:    return nil, nil",
          "110:   }",
          "112:  }",
          "113:  return &pki.SeekFile{",
          "114:   File:   file.Path,",
          "115:   Data:   data,",
          "",
          "[Removed Lines]",
          "89: func (s *LocalFetch) GetFileConv(file *pki.PKIFile, convert bool) (*pki.SeekFile, error) {",
          "91:  if s.Log != nil {",
          "92:   s.Log.Debugf(\"Fetching %v->%v\", file.Path, newPath)",
          "93:  }",
          "94:  data, sha256, err := FetchFile(newPath, convert)",
          "98:  if err != nil && !os.IsNotExist(err) {",
          "101:   if errExtract != nil && s.Log != nil {",
          "102:    s.Log.Errorf(\"error extracting rsync of %s: %v\", file.Path, errExtract)",
          "106:    if s.Log != nil {",
          "107:     s.Log.Debugf(\"Got %v but repository not yet synchronized\", err)",
          "108:    }",
          "",
          "[Added Lines]",
          "91: func (s *LocalFetch) GetFileConv(file *pki.PKIFile, derEncoding bool) (*pki.SeekFile, error) {",
          "93:  log.Debugf(\"Fetching %v->%v\", file.Path, newPath)",
          "95:  data, sha256, err := FetchFile(newPath, derEncoding)",
          "100:  if err != nil {",
          "102:   if errExtract != nil {",
          "103:    log.Errorf(\"error extracting rsync of %s: %v\", file.Path, errExtract)",
          "107:    log.Debugf(\"Got %v but repository not yet synchronized\", err)",
          "",
          "---------------"
        ],
        "sync/lib/rrdp.go||sync/lib/rrdp.go": [
          "File: sync/lib/rrdp.go -> sync/lib/rrdp.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"io/ioutil\"",
          "10:  \"net/http\"",
          "11:  \"strings\"",
          "13:  \"github.com/getsentry/sentry-go\"",
          "14: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"time\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  Client    *http.Client",
          "25: }",
          "27: func (f *HTTPFetcher) GetXML(url string) (string, error) {",
          "28:  req, err := http.NewRequest(\"GET\", url, nil)",
          "29:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: func NewHTTPFetcher(userAgent string) *HTTPFetcher {",
          "29:  return &HTTPFetcher{",
          "30:   UserAgent: userAgent,",
          "31:   Client: &http.Client{",
          "33:    Timeout: time.Second * 60,",
          "34:   },",
          "35:  }",
          "36: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22b61072f26a46cda3be87b2db05d39aa2d5b8ad",
      "candidate_info": {
        "commit_hash": "22b61072f26a46cda3be87b2db05d39aa2d5b8ad",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/22b61072f26a46cda3be87b2db05d39aa2d5b8ad",
        "files": [
          "cmd/octorpki/octorpki.go",
          "sync/lib/rsync.go"
        ],
        "message": "Refactoring (#117)\n\nCo-authored-by: Oliver Geiselhardt-Herms <ogeiselhardt-herms@cloudflare.com>",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
          "sync/lib/rsync.go||sync/lib/rsync.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  RRDPStats          map[string]*Stats",
          "251:  ValidationDuration time.Duration",
          "252:  Iteration          int",
          "253:  ROAsTALsCount      []ROAsTAL",
          "",
          "[Removed Lines]",
          "250:  RsyncStats         map[string]Stats",
          "",
          "[Added Lines]",
          "250:  RsyncStats         map[string]*Stats",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286: func ExtractRsyncDomain(rsyncURL string) (string, error) {",
          "287:  if !strings.HasPrefix(rsyncURL, syncpki.RsyncProtoPrefix) {",
          "289:  }",
          "291:  return strings.Split(strings.TrimPrefix(rsyncURL, syncpki.RsyncProtoPrefix), \"/\")[0], nil",
          "292: }",
          "303:  }",
          "306:  if err != nil {",
          "308:  }",
          "313:  }",
          "317:  if err != nil {",
          "319:  }",
          "322: }",
          "324: func (s *OctoRPKI) ReceiveRRDPFileCallback(main string, url string, path string, data []byte, withdraw bool, snapshot bool, serial int64, args ...interface{}) error {",
          "",
          "[Removed Lines]",
          "288:   return \"\", fmt.Errorf(\"%q it not an rsync URL\", rsyncURL)",
          "294: func (s *OctoRPKI) WriteRsyncFileOnDisk(path string, data []byte) error {",
          "295:  fPath, err := syncpki.ExtractFoldersPathFromRsyncURL(path)",
          "296:  if err != nil {",
          "297:   log.Fatal(err)",
          "298:  }",
          "300:  err = os.MkdirAll(filepath.Join(*Basepath, fPath), os.ModePerm)",
          "301:  if err != nil {",
          "302:   log.Fatal(err)",
          "305:  fPath, err = syncpki.ExtractFilePathFromRsyncURL(path)",
          "307:   log.Fatal(err)",
          "311:  if strings.Contains(fPath, \"../\") || strings.Contains(fPath, \"..\\\\\") {",
          "312:   return fmt.Errorf(\"Path %q contains illegal path element\", fPath)",
          "315:  fp := filepath.Join(*Basepath, fPath)",
          "316:  err = ioutil.WriteFile(fp, data, 0600)",
          "318:   return fmt.Errorf(\"Unable to write file %q: %v\", fp, err)",
          "321:  return nil",
          "",
          "[Added Lines]",
          "288:   return \"\", fmt.Errorf(\"%q is not an rsync URL\", rsyncURL)",
          "294: func (s *OctoRPKI) WriteRsyncFileOnDisk(rsyncURL string, data []byte) error {",
          "295:  fPath := mustExtractFoldersPathFromRsyncURL(rsyncURL)",
          "296:  mustMkdirAll(fPath)",
          "297:  filePath := mustExtractFilePathFromRsyncURL(rsyncURL)",
          "300:  if strings.Contains(filePath, \"../\") || strings.Contains(filePath, \"..\\\\\") {",
          "301:   return fmt.Errorf(\"Path %q contains illegal path element\", filePath)",
          "304:  fp := filepath.Join(*Basepath, filePath)",
          "305:  err := ioutil.WriteFile(fp, data, 0600)",
          "307:   return fmt.Errorf(\"Unable to write file %q: %v\", fp, err)",
          "310:  return nil",
          "311: }",
          "313: func mustMkdirAll(fPath string) {",
          "314:  err := os.MkdirAll(filepath.Join(*Basepath, fPath), os.ModePerm)",
          "315:  if err != nil {",
          "316:   log.Fatalf(\"Failed to create directories: %v\", err)",
          "318: }",
          "320: func mustExtractFilePathFromRsyncURL(rsyncURL string) string {",
          "321:  fPath, err := syncpki.ExtractFilePathFromRsyncURL(rsyncURL)",
          "323:   log.Fatalf(\"Unable to extract file path from rsync url: %v\", err)",
          "326:  return fPath",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:  err := s.WriteRsyncFileOnDisk(path, data)",
          "334:  if err != nil {",
          "336:  }",
          "344:  s.RRDPStats[main].Count++",
          "345:  s.RRDPStats[main].RRDPLastFile = url",
          "346:  return nil",
          "",
          "[Removed Lines]",
          "335:   return err",
          "338:  MetricSIACounts.With(",
          "339:   prometheus.Labels{",
          "340:    \"address\": main,",
          "341:    \"type\":    \"rrdp\",",
          "342:   }).Inc()",
          "",
          "[Added Lines]",
          "340:   return fmt.Errorf(\"Unable to write sync file %q on disk: %v\", path, err)",
          "343:  MetricSIACounts.With(prometheus.Labels{\"address\": main, \"type\": \"rrdp\"}).Inc()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "361:  return nil",
          "362: }",
          "365:  fc, err := json.Marshal(s.RRDPInfo)",
          "366:  if err != nil {",
          "367:   return fmt.Errorf(\"JSON marshal failed: %v\", err)",
          "",
          "[Removed Lines]",
          "364: func (s *OctoRPKI) SaveRRDP(file string) error {",
          "",
          "[Added Lines]",
          "364: func (s *OctoRPKI) saveRRDP(file string) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "375:  return nil",
          "376: }",
          "379:  tracer := opentracing.GlobalTracer()",
          "380:  span := tracer.StartSpan(\"rrdp\", opentracing.ChildOf(pSpan.Context()))",
          "381:  defer span.Finish()",
          "",
          "[Removed Lines]",
          "378: func (s *OctoRPKI) MainRRDP(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "378: func (s *OctoRPKI) mainRRDP(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "490:  s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "491: }",
          "494:  t1 := time.Now()",
          "495:  tracer := opentracing.GlobalTracer()",
          "496:  span := tracer.StartSpan(",
          "",
          "[Removed Lines]",
          "493: func (s *OctoRPKI) MainRsync(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "492: func (s *OctoRPKI) mainRsync(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "499:  )",
          "500:  defer span.Finish()",
          "504:  }",
          "580:  }",
          "582:  t2 := time.Now()",
          "584: }",
          "588:  hmap := make(map[string]bool)",
          "589:  for _, roa := range roalist {",
          "590:   k := roa.String()",
          "591:   _, present := hmap[k]",
          "592:   if !present {",
          "593:    hmap[k] = true",
          "595:   }",
          "596:  }",
          "598: }",
          "600: func setJaegerError(l []interface{}, err error) []interface{} {",
          "",
          "[Removed Lines]",
          "502:  rsync := syncpki.RsyncSystem{",
          "503:   Log: log.StandardLogger(),",
          "506:  for uri, _ := range s.RsyncFetch {",
          "507:   rSpan := tracer.StartSpan(",
          "508:    \"sync\",",
          "509:    opentracing.ChildOf(span.Context()),",
          "510:   )",
          "511:   rSpan.SetTag(\"rsync\", uri)",
          "512:   rSpan.SetTag(\"type\", \"rsync\")",
          "514:   log.Infof(\"Rsync sync %v\", uri)",
          "515:   downloadPath, err := syncpki.ExtractFoldersPathFromRsyncURL(uri)",
          "516:   if err != nil {",
          "517:    log.Fatal(err)",
          "518:   }",
          "520:   tmpStats := s.RsyncStats[uri]",
          "521:   tmpStats.URI = uri",
          "522:   tmpStats.Iteration++",
          "523:   tmpStats.Count = 0",
          "524:   s.RsyncStats[uri] = tmpStats",
          "526:   path := filepath.Join(*Basepath, downloadPath)",
          "527:   ctxRsync, cancelRsync := context.WithTimeout(context.Background(), *RsyncTimeout)",
          "528:   t1 := time.Now()",
          "529:   files, err := rsync.RunRsync(ctxRsync, uri, *RsyncBin, path)",
          "530:   t2 := time.Now()",
          "531:   if err != nil {",
          "532:    rSpan.SetTag(\"error\", true)",
          "533:    rSpan.LogKV(\"event\", \"rsync failure\", \"message\", err)",
          "534:    log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
          "535:    sentry.WithScope(func(scope *sentry.Scope) {",
          "536:     if errC, ok := err.(interface{ SetRsync(string) }); ok {",
          "537:      errC.SetRsync(uri)",
          "538:     }",
          "539:     if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "540:      errC.SetSentryScope(scope)",
          "541:     }",
          "542:     scope.SetTag(\"Rsync\", uri)",
          "543:     sentry.CaptureException(err)",
          "544:    })",
          "546:    MetricRsyncErrors.With(",
          "547:     prometheus.Labels{",
          "548:      \"address\": uri,",
          "549:     }).Inc()",
          "551:    tmpStats = s.RsyncStats[uri]",
          "552:    tmpStats.Errors++",
          "553:    tmpStats.LastFetchError = int(time.Now().Unix())",
          "554:    tmpStats.LastError = fmt.Sprint(err)",
          "555:    s.RsyncStats[uri] = tmpStats",
          "556:   } else {",
          "557:    rSpan.LogKV(\"event\", \"rsync\", \"type\", \"success\", \"message\", \"rsync successfully fetched\")",
          "558:    sentry.WithScope(func(scope *sentry.Scope) {",
          "559:     scope.SetLevel(sentry.LevelInfo)",
          "560:     scope.SetTag(\"Rsync\", uri)",
          "561:     sentry.CaptureMessage(\"fetched rsync successfully\")",
          "562:    })",
          "563:   }",
          "564:   cancelRsync()",
          "565:   var countFiles int",
          "566:   if files != nil {",
          "567:    countFiles = len(files)",
          "568:   }",
          "570:   rSpan.Finish()",
          "572:   MetricSIACounts.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(countFiles))",
          "573:   lastFetch := time.Now().Unix()",
          "574:   MetricLastFetch.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(lastFetch))",
          "575:   tmpStats = s.RsyncStats[uri]",
          "576:   tmpStats.LastFetch = int(lastFetch)",
          "577:   tmpStats.Count = countFiles",
          "578:   tmpStats.Duration = t2.Sub(t1).Seconds()",
          "579:   s.RsyncStats[uri] = tmpStats",
          "583:  MetricOperationTime.With(prometheus.Labels{\"type\": \"rsync\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "586: func FilterDuplicates(roalist []prefixfile.ROAJson) []prefixfile.ROAJson {",
          "587:  roalistNodup := make([]prefixfile.ROAJson, 0)",
          "594:    roalistNodup = append(roalistNodup, roa)",
          "597:  return roalistNodup",
          "",
          "[Added Lines]",
          "501:  for uri := range s.RsyncFetch {",
          "502:   s.fetchRsync(uri, span)",
          "505:  t2 := time.Now()",
          "506:  MetricOperationTime.With(prometheus.Labels{\"type\": \"rsync\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "507: }",
          "509: func mustExtractFoldersPathFromRsyncURL(rsyncURL string) string {",
          "510:  downloadPath, err := syncpki.ExtractFoldersPathFromRsyncURL(rsyncURL)",
          "511:  if err != nil {",
          "512:   log.Fatalf(\"Failed to extract folder path from rsync URL: %v\", err)",
          "513:  }",
          "515:  return downloadPath",
          "516: }",
          "518: func (s *OctoRPKI) fetchRsync(uri string, span opentracing.Span) {",
          "519:  tracer := opentracing.GlobalTracer()",
          "520:  rSpan := tracer.StartSpan(\"sync\", opentracing.ChildOf(span.Context()))",
          "521:  defer rSpan.Finish()",
          "522:  rSpan.SetTag(\"rsync\", uri)",
          "523:  rSpan.SetTag(\"type\", \"rsync\")",
          "525:  log.Infof(\"Rsync sync %v\", uri)",
          "526:  downloadPath := mustExtractFoldersPathFromRsyncURL(uri)",
          "528:  if _, exists := s.RsyncStats[uri]; !exists {",
          "529:   s.RsyncStats[uri] = &Stats{}",
          "532:  s.RsyncStats[uri].URI = uri",
          "533:  s.RsyncStats[uri].Iteration++",
          "534:  s.RsyncStats[uri].Count = 0",
          "536:  path := filepath.Join(*Basepath, downloadPath)",
          "537:  ctxRsync, cancelRsync := context.WithTimeout(context.Background(), *RsyncTimeout)",
          "538:  t1 := time.Now()",
          "539:  files, err := syncpki.RunRsync(ctxRsync, uri, *RsyncBin, path)",
          "541:  if err != nil {",
          "542:   s.rsyncError(uri, path, err, t1, t2, rSpan)",
          "543:  } else {",
          "544:   rSpan.LogKV(\"event\", \"rsync\", \"type\", \"success\", \"message\", \"rsync successfully fetched\")",
          "545:   sentry.WithScope(func(scope *sentry.Scope) {",
          "546:    scope.SetLevel(sentry.LevelInfo)",
          "547:    scope.SetTag(\"Rsync\", uri)",
          "548:    sentry.CaptureMessage(\"fetched rsync successfully\")",
          "549:   })",
          "550:  }",
          "551:  cancelRsync()",
          "553:  MetricSIACounts.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(len(files)))",
          "554:  lastFetch := time.Now().Unix()",
          "555:  MetricLastFetch.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(lastFetch))",
          "557:  s.RsyncStats[uri].LastFetch = int(lastFetch)",
          "558:  s.RsyncStats[uri].Count = len(files)",
          "559:  s.RsyncStats[uri].Duration = t2.Sub(t1).Seconds()",
          "561: }",
          "563: func (s *OctoRPKI) rsyncError(uri string, path string, err error, t1 time.Time, t2 time.Time, rSpan opentracing.Span) {",
          "564:  rSpan.SetTag(\"error\", true)",
          "565:  rSpan.LogKV(\"event\", \"rsync failure\", \"message\", err)",
          "566:  log.Errorf(\"Error when processing %v: %v. Will add to rsync.\", path, err)",
          "567:  sentry.WithScope(func(scope *sentry.Scope) {",
          "568:   if errC, ok := err.(interface{ SetRsync(string) }); ok {",
          "569:    errC.SetRsync(uri)",
          "570:   }",
          "571:   if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "572:    errC.SetSentryScope(scope)",
          "573:   }",
          "574:   scope.SetTag(\"Rsync\", uri)",
          "575:   sentry.CaptureException(err)",
          "576:  })",
          "578:  MetricRsyncErrors.With(prometheus.Labels{\"address\": uri}).Inc()",
          "580:  s.RsyncStats[uri].Errors++",
          "581:  s.RsyncStats[uri].LastFetchError = int(time.Now().Unix())",
          "582:  s.RsyncStats[uri].LastError = err.Error()",
          "585: func filterDuplicates(roalist []prefixfile.ROAJson) []prefixfile.ROAJson {",
          "586:  roaListNoDup := make([]prefixfile.ROAJson, 0)",
          "593:    roaListNoDup = append(roaListNoDup, roa)",
          "596:  return roaListNoDup",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "602: }",
          "606:  t1 := time.Now()",
          "607:  tracer := opentracing.GlobalTracer()",
          "608:  span := tracer.StartSpan(",
          "",
          "[Removed Lines]",
          "605: func (s *OctoRPKI) MainTAL(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "604: func (s *OctoRPKI) mainTAL(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "751:  span.Finish()",
          "752: }",
          "755:  t1 := time.Now()",
          "756:  ia := make([][]SIA, len(s.Tals))",
          "757:  for i := 0; i < len(ia); i++ {",
          "",
          "[Removed Lines]",
          "754: func (s *OctoRPKI) MainValidation(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "753: func logCollector(sm *pki.SimpleManager, tal *pki.PKIFile, tSpan opentracing.Span) {",
          "754:  for err := range sm.Errors {",
          "755:   tSpan.SetTag(\"error\", true)",
          "756:   tSpan.LogKV(\"event\", \"resource issue\", \"type\", \"skipping resource\", \"message\", err)",
          "757:   log.Error(err)",
          "758:   sentry.WithScope(func(scope *sentry.Scope) {",
          "759:    if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "760:     errC.SetSentryScope(scope)",
          "761:    }",
          "762:    scope.SetTag(\"TrustAnchor\", tal.Path)",
          "763:    sentry.CaptureException(err)",
          "764:   })",
          "765:  }",
          "766: }",
          "768: func (s *OctoRPKI) generateROAList(managers []*pki.SimpleManager, span opentracing.Span) *prefixfile.ROAList {",
          "769:  tracer := opentracing.GlobalTracer()",
          "770:  roalist := &prefixfile.ROAList{",
          "771:   Data: make([]prefixfile.ROAJson, 0),",
          "772:  }",
          "773:  var counts int",
          "774:  s.ROAsTALsCount = make([]ROAsTAL, 0)",
          "775:  for i, tal := range s.Tals {",
          "776:   eSpan := tracer.StartSpan(\"extract\", opentracing.ChildOf(span.Context()))",
          "777:   eSpan.SetTag(\"tal\", tal.Path)",
          "778:   talname := tal.Path",
          "779:   if len(s.TalNames) == len(s.Tals) {",
          "780:    talname = s.TalNames[i]",
          "781:   }",
          "783:   var counttal int",
          "784:   for _, obj := range managers[i].Validator.ValidROA {",
          "785:    roa := obj.Resource.(*librpki.RPKIROA)",
          "787:    for _, entry := range roa.Valids {",
          "788:     oroa := prefixfile.ROAJson{",
          "789:      ASN:    fmt.Sprintf(\"AS%v\", roa.ASN),",
          "790:      Prefix: entry.IPNet.String(),",
          "791:      Length: uint8(entry.MaxLength),",
          "792:      TA:     talname,",
          "793:     }",
          "794:     roalist.Data = append(roalist.Data, oroa)",
          "795:     counts++",
          "796:     counttal++",
          "797:    }",
          "798:   }",
          "799:   eSpan.Finish()",
          "801:   s.ROAsTALsCount = append(s.ROAsTALsCount, ROAsTAL{TA: talname, Count: counttal})",
          "802:   MetricROAsCount.With(prometheus.Labels{\"ta\": talname}).Set(float64(counttal))",
          "803:  }",
          "804:  curTime := time.Now()",
          "805:  s.LastComputed = curTime",
          "806:  validTime := curTime.Add(*ValidityDuration)",
          "807:  roalist.Metadata = prefixfile.MetaData{",
          "808:   Counts:    counts,",
          "809:   Generated: int(curTime.Unix()),",
          "810:   Valid:     int(validTime.Unix()),",
          "811:  }",
          "813:  roalist.Data = filterDuplicates(roalist.Data)",
          "814:  if *Sign {",
          "815:   s.signROAList(roalist, span)",
          "816:  }",
          "818:  return roalist",
          "819: }",
          "821: func (s *OctoRPKI) signROAList(roaList *prefixfile.ROAList, span opentracing.Span) {",
          "822:  tracer := opentracing.GlobalTracer()",
          "823:  sSpan := tracer.StartSpan(\"sign\", opentracing.ChildOf(span.Context()))",
          "824:  defer sSpan.Finish()",
          "826:  signdate, sign, err := roaList.Sign(s.Key)",
          "827:  if err != nil {",
          "828:   log.Error(err)",
          "829:   sentry.CaptureException(err)",
          "830:  }",
          "831:  roaList.Metadata.Signature = sign",
          "832:  roaList.Metadata.SignatureDate = signdate",
          "833: }",
          "835: func (s *OctoRPKI) mainValidation(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "760:  iatmp := make(map[string]*SIA)",
          "762:  tracer := opentracing.GlobalTracer()",
          "767:  defer span.Finish()",
          "770:  for i, tal := range s.Tals {",
          "771:   tSpan := tracer.StartSpan(\"explore\", opentracing.ChildOf(span.Context()))",
          "772:   tSpan.SetTag(\"tal\", tal.Path)",
          "",
          "[Removed Lines]",
          "763:  span := tracer.StartSpan(",
          "764:   \"validation\",",
          "765:   opentracing.ChildOf(pSpan.Context()),",
          "766:  )",
          "769:  managers := make([]*pki.SimpleManager, len(s.Tals))",
          "",
          "[Added Lines]",
          "844:  span := tracer.StartSpan(\"validation\", opentracing.ChildOf(pSpan.Context()))",
          "847:  pkiManagers := make([]*pki.SimpleManager, len(s.Tals))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "775:   validator.DecoderConfig.ValidateStrict = *StrictCms",
          "777:   sm := pki.NewSimpleManager()",
          "804:   var count int",
          "806:    tal := obj.Resource.(*librpki.RPKITAL)",
          "807:    if !obj.CertTALValid {",
          "808:     s.TalsFetch[obj.File.Path] = tal",
          "",
          "[Removed Lines]",
          "778:   managers[i] = sm",
          "779:   managers[i].ReportErrors = true",
          "780:   managers[i].Validator = validator",
          "781:   managers[i].FileSeeker = s.Fetcher",
          "782:   managers[i].Log = log.StandardLogger()",
          "783:   managers[i].StrictHash = *StrictHash",
          "784:   managers[i].StrictManifests = *StrictManifests",
          "786:   go func(sm *pki.SimpleManager, tal *pki.PKIFile) {",
          "787:    for err := range sm.Errors {",
          "788:     tSpan.SetTag(\"error\", true)",
          "789:     tSpan.LogKV(\"event\", \"resource issue\", \"type\", \"skipping resource\", \"message\", err)",
          "790:     log.Error(err)",
          "791:     sentry.WithScope(func(scope *sentry.Scope) {",
          "792:      if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "793:       errC.SetSentryScope(scope)",
          "794:      }",
          "795:      scope.SetTag(\"TrustAnchor\", tal.Path)",
          "796:      sentry.CaptureException(err)",
          "797:     })",
          "798:    }",
          "799:   }(sm, tal)",
          "800:   managers[i].AddInitial([]*pki.PKIFile{tal})",
          "801:   countExplore := managers[i].Explore(!s.UseManifest, false)",
          "805:   for _, obj := range managers[i].Validator.TALs {",
          "",
          "[Added Lines]",
          "856:   pkiManagers[i] = sm",
          "857:   pkiManagers[i].ReportErrors = true",
          "858:   pkiManagers[i].Validator = validator",
          "859:   pkiManagers[i].FileSeeker = s.Fetcher",
          "860:   pkiManagers[i].Log = log.StandardLogger()",
          "861:   pkiManagers[i].StrictHash = *StrictHash",
          "862:   pkiManagers[i].StrictManifests = *StrictManifests",
          "864:   go logCollector(sm, tal, tSpan)",
          "866:   pkiManagers[i].AddInitial([]*pki.PKIFile{tal})",
          "867:   countExplore := pkiManagers[i].Explore(!s.UseManifest, false)",
          "871:   for _, obj := range pkiManagers[i].Validator.TALs {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "810:    count++",
          "811:   }",
          "814:    if pkiResource.Type != pki.TYPE_CER {",
          "815:     continue",
          "816:    }",
          "",
          "[Removed Lines]",
          "813:   for _, pkiResource := range managers[i].Validator.ValidObjects {",
          "",
          "[Added Lines]",
          "879:   for _, pkiResource := range pkiManagers[i].Validator.ValidObjects {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "839:    count++",
          "843:    if !ok {",
          "844:     iaIdTmp := SIA{",
          "845:      gnExtracted,",
          "846:      rrdpGeneralName,",
          "847:     }",
          "848:     ia[i] = append(ia[i], iaIdTmp)",
          "851:    }",
          "854:   }",
          "855:   sm.Close()",
          "856:   tSpan.LogKV(\"count-valid\", count, \"count-total\", countExplore)",
          "857:   tSpan.Finish()",
          "858:  }",
          "932:  s.ROAListLock.Lock()",
          "940: }",
          "942: func (s *OctoRPKI) ServeROAs(w http.ResponseWriter, r *http.Request) {",
          "",
          "[Removed Lines]",
          "842:    iaId, ok := iatmp[gnExtracted]",
          "849:     iaId = &(ia[i][len(ia[i])-1])",
          "850:     iatmp[gnExtracted] = iaId",
          "852:    iaId.Rsync = gnExtracted",
          "853:    iaId.RRDP = rrdpGeneralName",
          "860:  s.InfoAuthoritiesLock.Lock()",
          "861:  s.InfoAuthorities = ia",
          "862:  s.InfoAuthoritiesLock.Unlock()",
          "865:  roalist := &prefixfile.ROAList{",
          "866:   Data: make([]prefixfile.ROAJson, 0),",
          "867:  }",
          "868:  var counts int",
          "869:  s.ROAsTALsCount = make([]ROAsTAL, 0)",
          "870:  for i, tal := range s.Tals {",
          "871:   eSpan := tracer.StartSpan(",
          "872:    \"extract\",",
          "873:    opentracing.ChildOf(span.Context()),",
          "874:   )",
          "875:   eSpan.SetTag(\"tal\", tal.Path)",
          "876:   talname := tal.Path",
          "877:   if len(s.TalNames) == len(s.Tals) {",
          "878:    talname = s.TalNames[i]",
          "879:   }",
          "881:   var counttal int",
          "882:   for _, obj := range managers[i].Validator.ValidROA {",
          "883:    roa := obj.Resource.(*librpki.RPKIROA)",
          "885:    for _, entry := range roa.Valids {",
          "886:     oroa := prefixfile.ROAJson{",
          "887:      ASN:    fmt.Sprintf(\"AS%v\", roa.ASN),",
          "888:      Prefix: entry.IPNet.String(),",
          "889:      Length: uint8(entry.MaxLength),",
          "890:      TA:     talname,",
          "891:     }",
          "892:     roalist.Data = append(roalist.Data, oroa)",
          "893:     counts++",
          "894:     counttal++",
          "895:    }",
          "896:   }",
          "897:   eSpan.Finish()",
          "899:   s.ROAsTALsCount = append(s.ROAsTALsCount, ROAsTAL{TA: talname, Count: counttal})",
          "900:   MetricROAsCount.With(",
          "901:    prometheus.Labels{",
          "902:     \"ta\": talname,",
          "903:    }).Set(float64(counttal))",
          "904:  }",
          "905:  curTime := time.Now()",
          "906:  s.LastComputed = curTime",
          "907:  validTime := curTime.Add(*ValidityDuration)",
          "908:  roalist.Metadata = prefixfile.MetaData{",
          "909:   Counts:    counts,",
          "910:   Generated: int(curTime.Unix()),",
          "911:   Valid:     int(validTime.Unix()),",
          "912:  }",
          "914:  roalist.Data = FilterDuplicates(roalist.Data)",
          "915:  if *Sign {",
          "916:   sSpan := tracer.StartSpan(",
          "917:    \"sign\",",
          "918:    opentracing.ChildOf(span.Context()),",
          "919:   )",
          "921:   signdate, sign, err := roalist.Sign(s.Key)",
          "922:   if err != nil {",
          "923:    log.Error(err)",
          "924:    sentry.CaptureException(err)",
          "925:   }",
          "926:   roalist.Metadata.Signature = sign",
          "927:   roalist.Metadata.SignatureDate = signdate",
          "929:   sSpan.Finish()",
          "930:  }",
          "933:  s.ROAList = roalist",
          "934:  s.ROAListLock.Unlock()",
          "936:  t2 := time.Now()",
          "937:  s.ValidationDuration = t2.Sub(t1)",
          "938:  MetricOperationTime.With(prometheus.Labels{\"type\": \"validation\"}).Observe(float64(s.ValidationDuration.Seconds()))",
          "939:  MetricLastValidation.Set(float64(s.LastComputed.Unix()))",
          "",
          "[Added Lines]",
          "908:    sia, ok := iatmp[gnExtracted]",
          "915:     sia = &(ia[i][len(ia[i])-1])",
          "916:     iatmp[gnExtracted] = sia",
          "918:    sia.Rsync = gnExtracted",
          "919:    sia.RRDP = rrdpGeneralName",
          "926:  s.setInfoAuthorities(ia)",
          "927:  s.setROAList(s.generateROAList(pkiManagers, span))",
          "929:  t2 := time.Now()",
          "930:  s.ValidationDuration = t2.Sub(t1)",
          "931:  MetricOperationTime.With(prometheus.Labels{\"type\": \"validation\"}).Observe(float64(s.ValidationDuration.Seconds()))",
          "932:  MetricLastValidation.Set(float64(s.LastComputed.Unix()))",
          "933: }",
          "935: func (s *OctoRPKI) setInfoAuthorities(ia [][]SIA) {",
          "936:  s.InfoAuthoritiesLock.Lock()",
          "937:  defer s.InfoAuthoritiesLock.Unlock()",
          "939:  s.InfoAuthorities = ia",
          "940: }",
          "942: func (s *OctoRPKI) setROAList(roaList *prefixfile.ROAList) {",
          "944:  defer s.ROAListLock.Unlock()",
          "946:  s.ROAList = roaList",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1158:  err := os.MkdirAll(*Basepath, os.ModePerm)",
          "1159:  if err != nil {",
          "1161:  }",
          "1163:  s := &OctoRPKI{",
          "",
          "[Removed Lines]",
          "1160:   log.Fatal(err)",
          "",
          "[Added Lines]",
          "1167:   log.Fatalf(\"Failed to create directories %q: %v\", *Basepath, err)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1192:   },",
          "1193:   ROAListLock: &sync.RWMutex{},",
          "1196:   RRDPStats:     make(map[string]*Stats),",
          "1197:   ROAsTALsCount: make([]ROAsTAL, 0),",
          "",
          "[Removed Lines]",
          "1195:   RsyncStats:    make(map[string]Stats),",
          "",
          "[Added Lines]",
          "1202:   RsyncStats:    make(map[string]*Stats),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1253:   }",
          "1257:   s.TalsFetch = make(map[string]*librpki.RPKITAL) // clear decoded TAL for next iteration",
          "1264:   changed := s.MainReduce()",
          "",
          "[Removed Lines]",
          "1256:   s.MainTAL(span)",
          "1259:   s.MainRsync(span)",
          "1261:   s.MainValidation(span)",
          "",
          "[Added Lines]",
          "1263:   s.mainTAL(span)",
          "1266:   s.mainRsync(span)",
          "1268:   s.mainValidation(span)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1266:   s.HasPreviousStable.Store(s.Stable.Load())",
          "1268:   if *Mode == \"oneoff\" && (s.Stable.Load() || !*WaitStable) {",
          "1273:   }",
          "1275:   span.SetTag(\"stable\", s.Stable.Load())",
          "",
          "[Removed Lines]",
          "1269:    err := s.output()",
          "1270:    if err != nil {",
          "1271:     log.Fatal(err)",
          "1272:    }",
          "",
          "[Added Lines]",
          "1276:    s.mustOutput()",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1299:  }",
          "1300: }",
          "1302: func (s *OctoRPKI) output() error {",
          "1303:  fc, err := json.Marshal(s.ROAList)",
          "1304:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306: func (s *OctoRPKI) mustOutput() {",
          "1307:  err := s.output()",
          "1308:  if err != nil {",
          "1309:   log.Fatalf(\"Output failed: %v\", err)",
          "1310:  }",
          "1311: }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1332:   }",
          "1333:  }",
          "1337:  if *RRDPFile != \"\" {",
          "1339:   if err != nil {",
          "1340:    sentry.CaptureException(err)",
          "1341:   }",
          "",
          "[Removed Lines]",
          "1335:  s.MainRRDP(span)",
          "1338:   err := s.SaveRRDP(*RRDPFile)",
          "",
          "[Added Lines]",
          "1345:  s.mainRRDP(span)",
          "1348:   err := s.saveRRDP(*RRDPFile)",
          "",
          "---------------"
        ],
        "sync/lib/rsync.go||sync/lib/rsync.go": [
          "File: sync/lib/rsync.go -> sync/lib/rsync.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"os/exec\"",
          "10:  \"regexp\"",
          "11:  \"strings\"",
          "12: )",
          "14: const (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:  log \"github.com/sirupsen/logrus\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  Deleted bool",
          "57: }",
          "65:  if bin == \"\" {",
          "66:   return nil, errors.New(\"rsync binary missing\")",
          "67:  }",
          "",
          "[Removed Lines]",
          "59: type RsyncSystem struct {",
          "60:  Log Logger",
          "61: }",
          "64: func (s *RsyncSystem) RunRsync(ctx context.Context, uri string, bin string, dirPath string) ([]*FileStat, error) {",
          "",
          "[Added Lines]",
          "62: func RunRsync(ctx context.Context, uri string, bin string, dirPath string) ([]*FileStat, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:  }",
          "74:  cmd := exec.CommandContext(ctx, bin, \"-vrlt\", uri, dirPath)",
          "79:  stdout, err := cmd.StdoutPipe()",
          "80:  if err != nil {",
          "",
          "[Removed Lines]",
          "75:  if s.Log != nil {",
          "76:   s.Log.Debugf(\"Command ran: %v\", cmd)",
          "77:  }",
          "",
          "[Added Lines]",
          "73:  log.Debugf(\"Command ran: %v\", cmd)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:   scanner := bufio.NewScanner(stderr)",
          "94:   for scanner.Scan() {",
          "95:    errorStr := scanner.Text()",
          "99:    err = scanner.Err()",
          "100:    if err != nil {",
          "104:     return",
          "105:    }",
          "106:   }",
          "",
          "[Removed Lines]",
          "96:    if s.Log != nil {",
          "97:     s.Log.Error(errorStr)",
          "98:    }",
          "101:     if s.Log != nil {",
          "102:      s.Log.Errorf(\"%v: %v\", uri, err)",
          "103:     }",
          "",
          "[Added Lines]",
          "92:    log.Error(errorStr)",
          "96:     log.Errorf(\"%v: %v\", uri, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:   line := scanner.Text()",
          "123:   match := wantedFileExtensionRE.MatchString(line)",
          "127:   if match {",
          "128:    file, deleted, err := FilterMatch(line)",
          "129:    if err != nil {",
          "",
          "[Removed Lines]",
          "124:   if s.Log != nil {",
          "125:    s.Log.Debugf(\"Rsync received from %v: %v (match=%v)\", uri, line, match)",
          "126:   }",
          "",
          "[Added Lines]",
          "117:   log.Debugf(\"Rsync received from %v: %v (match=%v)\", uri, line, match)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c66fba4c2982bb35099234159c6c4453fcde26fc",
      "candidate_info": {
        "commit_hash": "c66fba4c2982bb35099234159c6c4453fcde26fc",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/c66fba4c2982bb35099234159c6c4453fcde26fc",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "Refactoring stats + file handling (#114)\n\nCo-authored-by: Oliver Geiselhardt-Herms <ogeiselhardt-herms@cloudflare.com>",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"errors\"",
          "13:  \"flag\"",
          "14:  \"fmt\"",
          "16:  \"io/ioutil\"",
          "17:  \"net/http\"",
          "18:  \"os\"",
          "",
          "[Removed Lines]",
          "15:  \"io\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:  ROAListLock *sync.RWMutex",
          "255:  RsyncStats         map[string]Stats",
          "256:  CountExplore       int",
          "257:  ValidationDuration time.Duration",
          "",
          "[Removed Lines]",
          "254:  RRDPStats          map[string]Stats",
          "",
          "[Added Lines]",
          "253:  RRDPStats          map[string]*Stats",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:  }",
          "298: }",
          "301:  fPath, err := syncpki.GetDownloadPath(path, true)",
          "302:  if err != nil {",
          "303:   log.Fatal(err)",
          "304:  }",
          "305:  err = os.MkdirAll(filepath.Join(s.Basepath, fPath), os.ModePerm)",
          "306:  if err != nil {",
          "307:   log.Fatal(err)",
          "308:  }",
          "309:  fPath, err = syncpki.GetDownloadPath(path, false)",
          "310:  if err != nil {",
          "311:   log.Fatal(err)",
          "312:  }",
          "314:  if strings.Contains(fPath, \"../\") || strings.Contains(fPath, \"..\\\\\") {",
          "315:   return fmt.Errorf(\"Path %q contains illegal path element\", fPath)",
          "316:  }",
          "319:  if err != nil {",
          "321:  }",
          "324:  return nil",
          "325: }",
          "",
          "[Removed Lines]",
          "300: func (s *OctoRPKI) WriteRsyncFileOnDisk(path string, data []byte, withdraw bool) error {",
          "318:  f, err := os.Create(filepath.Join(s.Basepath, fPath))",
          "320:   return err",
          "322:  f.Write(data)",
          "323:  f.Close()",
          "",
          "[Added Lines]",
          "299: func (s *OctoRPKI) WriteRsyncFileOnDisk(path string, data []byte) error {",
          "320:  fp := filepath.Join(s.Basepath, fPath)",
          "321:  err = ioutil.WriteFile(fp, data, 0600)",
          "323:   return fmt.Errorf(\"Unable to write file %q: %v\", fp, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:   }",
          "334:  }",
          "337:  if err != nil {",
          "338:   return err",
          "339:  }",
          "",
          "[Removed Lines]",
          "336:  err := s.WriteRsyncFileOnDisk(path, data, withdraw)",
          "",
          "[Added Lines]",
          "338:  err := s.WriteRsyncFileOnDisk(path, data)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:    \"address\": main,",
          "344:    \"type\":    \"rrdp\",",
          "345:   }).Inc()",
          "350:  return nil",
          "351: }",
          "353: func (s *OctoRPKI) LoadRRDP(file string) error {",
          "355:  if err != nil {",
          "357:  }",
          "365:  }",
          "367:  return nil",
          "368: }",
          "370: func (s *OctoRPKI) SaveRRDP(file string) error {",
          "372:  if err != nil {",
          "374:  }",
          "379: }",
          "381: func (s *OctoRPKI) MainRRDP(pSpan opentracing.Span) {",
          "",
          "[Removed Lines]",
          "346:  tmpStats := s.RRDPStats[main]",
          "347:  tmpStats.Count++",
          "348:  tmpStats.RRDPLastFile = url",
          "349:  s.RRDPStats[main] = tmpStats",
          "354:  f, err := os.Open(file)",
          "356:   return err",
          "358:  defer f.Close()",
          "360:  info := make(map[string]RRDPInfo)",
          "361:  dec := json.NewDecoder(f)",
          "362:  err = dec.Decode(&info)",
          "363:  if err != nil && err != io.EOF {",
          "364:   return err",
          "366:  s.RRDPInfo = info",
          "371:  f, err := os.Create(file)",
          "373:   return err",
          "375:  defer f.Close()",
          "377:  dec := json.NewEncoder(f)",
          "378:  return dec.Encode(s.RRDPInfo)",
          "",
          "[Added Lines]",
          "349:  s.RRDPStats[main].Count++",
          "350:  s.RRDPStats[main].RRDPLastFile = url",
          "355:  fc, err := ioutil.ReadFile(file)",
          "357:   return fmt.Errorf(\"Unable to read file %q: %v\", file, err)",
          "360:  s.RRDPInfo = make(map[string]RRDPInfo)",
          "361:  err = json.Unmarshal(fc, &s.RRDPInfo)",
          "362:  if err != nil {",
          "363:   return fmt.Errorf(\"JSON unmarshal failed: %v\", err)",
          "370:  fc, err := json.Marshal(file)",
          "372:   return fmt.Errorf(\"JSON marshal failed: %v\", err)",
          "373:  }",
          "375:  err = ioutil.WriteFile(file, fc, 0600)",
          "376:  if err != nil {",
          "377:   return fmt.Errorf(\"Unable to write file %q: %v\", file, err)",
          "380:  return nil",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "396:   rSpan.SetTag(\"type\", \"rrdp\")",
          "397:   log.Infof(\"RRDP sync %v\", path)",
          "403:   MetricSIACounts.With(",
          "404:    prometheus.Labels{",
          "",
          "[Removed Lines]",
          "399:   rrdpid := rsync",
          "401:   info := s.RRDPInfo[rrdpid]",
          "",
          "[Added Lines]",
          "401:   info := s.RRDPInfo[rsync]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "406:     \"type\":    \"rrdp\",",
          "407:    }).Set(0)",
          "414:   t1 := time.Now().UTC()",
          "416:   rrdp := &syncpki.RRDPSystem{",
          "",
          "[Removed Lines]",
          "409:   tmpStats := s.RRDPStats[path]",
          "410:   tmpStats.URI = path",
          "411:   tmpStats.Iteration++",
          "412:   tmpStats.Count = 0",
          "413:   s.RRDPStats[path] = tmpStats",
          "",
          "[Added Lines]",
          "409:   if _, exists := s.RRDPStats[path]; !exists {",
          "410:    s.RRDPStats[path] = &Stats{}",
          "411:   }",
          "413:   s.RRDPStats[path].URI = path",
          "414:   s.RRDPStats[path].Iteration++",
          "415:   s.RRDPStats[path].Count = 0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "457:      \"address\": path,",
          "458:     }).Inc()",
          "466:    rSpan.Finish()",
          "467:    continue",
          "468:   } else {",
          "",
          "[Removed Lines]",
          "460:    tmpStats = s.RRDPStats[path]",
          "461:    tmpStats.Errors++",
          "462:    tmpStats.LastFetchError = int(time.Now().UTC().UnixNano() / 1000000000)",
          "463:    tmpStats.LastError = fmt.Sprint(err)",
          "464:    tmpStats.Duration = t2.Sub(t1).Seconds()",
          "465:    s.RRDPStats[path] = tmpStats",
          "",
          "[Added Lines]",
          "463:    s.RRDPStats[path].Errors++",
          "464:    s.RRDPStats[path].LastFetchError = int(time.Now().Unix())",
          "465:    s.RRDPStats[path].LastError = err.Error()",
          "466:    s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "490:     \"address\": path,",
          "491:     \"type\":    \"rrdp\",",
          "492:    }).Set(float64(lastFetch))",
          "501:    Rsync:     rsync,",
          "502:    Path:      path,",
          "503:    SessionID: rrdp.SessionID,",
          "",
          "[Removed Lines]",
          "493:   tmpStats = s.RRDPStats[path]",
          "494:   tmpStats.LastFetch = int(lastFetch)",
          "495:   tmpStats.RRDPSerial = rrdp.Serial",
          "496:   tmpStats.RRDPSessionID = rrdp.SessionID",
          "497:   tmpStats.Duration = t2.Sub(t1).Seconds()",
          "498:   s.RRDPStats[path] = tmpStats",
          "500:   s.RRDPInfo[rrdpid] = RRDPInfo{",
          "",
          "[Added Lines]",
          "496:   s.RRDPStats[path].LastFetch = int(lastFetch)",
          "497:   s.RRDPStats[path].RRDPSerial = rrdp.Serial",
          "498:   s.RRDPStats[path].RRDPSessionID = rrdp.SessionID",
          "499:   s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "501:   s.RRDPInfo[rsync] = RRDPInfo{",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "744:     }",
          "748:     if err != nil {",
          "749:      tfSpan.SetTag(\"error\", true)",
          "750:      tfSpan.SetTag(\"message\", err)",
          "",
          "[Removed Lines]",
          "747:     err = s.WriteRsyncFileOnDisk(tal.GetRsyncURI(), data, false)",
          "",
          "[Added Lines]",
          "748:     err = s.WriteRsyncFileOnDisk(tal.GetRsyncURI(), data)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1248:   ROAListLock: &sync.RWMutex{},",
          "1250:   RsyncStats:    make(map[string]Stats),",
          "1252:   ROAsTALsCount: make([]ROAsTAL, 0),",
          "1254:   InfoAuthorities:     make([][]SIA, 0),",
          "",
          "[Removed Lines]",
          "1251:   RRDPStats:     make(map[string]Stats),",
          "",
          "[Added Lines]",
          "1252:   RRDPStats:     make(map[string]*Stats),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bc02d44c9143353a60f31d2a66e643a86cfbe9c",
      "candidate_info": {
        "commit_hash": "5bc02d44c9143353a60f31d2a66e643a86cfbe9c",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/5bc02d44c9143353a60f31d2a66e643a86cfbe9c",
        "files": [
          "cmd/octorpki/octorpki.go",
          "sync/api/fetch.go",
          "sync/lib/fetch.go",
          "validator/lib/cert.go",
          "validator/pki/pki.go"
        ],
        "message": "Refactoring (#116)\n\nCo-authored-by: Oliver Geiselhardt-Herms <ogeiselhardt-herms@cloudflare.com>",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
          "sync/api/fetch.go||sync/api/fetch.go",
          "sync/lib/fetch.go||sync/lib/fetch.go",
          "validator/lib/cert.go||validator/lib/cert.go",
          "validator/pki/pki.go||validator/pki/pki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  RRDPStats          map[string]*Stats",
          "250:  RsyncStats         map[string]Stats",
          "252:  ValidationDuration time.Duration",
          "253:  Iteration          int",
          "255:  ROAsTALsCount      []ROAsTAL",
          "257:  InfoAuthorities     [][]SIA",
          "",
          "[Removed Lines]",
          "251:  CountExplore       int",
          "254:  ValidationMessages []string",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261: func (s *OctoRPKI) MainReduce() bool {",
          "262:  t1 := time.Now()",
          "263:  defer func() {",
          "265:   MetricOperationTime.With(prometheus.Labels{\"type\": \"reduce\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "266:  }()",
          "",
          "[Removed Lines]",
          "264:   t2 := time.Now().UTC()",
          "",
          "[Added Lines]",
          "262:   t2 := time.Now()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "364: }",
          "366: func (s *OctoRPKI) SaveRRDP(file string) error {",
          "368:  if err != nil {",
          "369:   return fmt.Errorf(\"JSON marshal failed: %v\", err)",
          "370:  }",
          "",
          "[Removed Lines]",
          "367:  fc, err := json.Marshal(file)",
          "",
          "[Added Lines]",
          "365:  fc, err := json.Marshal(s.RRDPInfo)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "380: func (s *OctoRPKI) MainRRDP(pSpan opentracing.Span) {",
          "381:  tracer := opentracing.GlobalTracer()",
          "386:  defer span.Finish()",
          "388:  for path, rsync := range s.RRDPFetch {",
          "453:    }",
          "467:   } else {",
          "470:   }",
          "504:  }",
          "505: }",
          "507: func (s *OctoRPKI) MainRsync(pSpan opentracing.Span) {",
          "508:  t1 := time.Now()",
          "509:  tracer := opentracing.GlobalTracer()",
          "",
          "[Removed Lines]",
          "382:  span := tracer.StartSpan(",
          "383:   \"rrdp\",",
          "384:   opentracing.ChildOf(pSpan.Context()),",
          "385:  )",
          "389:   rSpan := tracer.StartSpan(",
          "390:    \"sync\",",
          "391:    opentracing.ChildOf(span.Context()),",
          "392:   )",
          "393:   rSpan.SetTag(\"rrdp\", path)",
          "394:   rSpan.SetTag(\"rsync\", rsync)",
          "395:   rSpan.SetTag(\"type\", \"rrdp\")",
          "396:   log.Infof(\"RRDP sync %v\", path)",
          "398:   info := s.RRDPInfo[rsync]",
          "400:   MetricSIACounts.With(",
          "401:    prometheus.Labels{",
          "402:     \"address\": path,",
          "403:     \"type\":    \"rrdp\",",
          "404:    }).Set(0)",
          "406:   if _, exists := s.RRDPStats[path]; !exists {",
          "407:    s.RRDPStats[path] = &Stats{}",
          "408:   }",
          "410:   s.RRDPStats[path].URI = path",
          "411:   s.RRDPStats[path].Iteration++",
          "412:   s.RRDPStats[path].Count = 0",
          "414:   t1 := time.Now().UTC()",
          "416:   rrdp := &syncpki.RRDPSystem{",
          "417:    Callback: s.ReceiveRRDPFileCallback,",
          "419:    Path:    path,",
          "420:    Fetcher: s.HTTPFetcher,",
          "422:    SessionID: info.SessionID,",
          "423:    Serial:    info.Serial,",
          "425:    Log: log.StandardLogger(),",
          "426:   }",
          "427:   err := rrdp.FetchRRDP(s.RRDPFetchDomain[path])",
          "428:   t2 := time.Now().UTC()",
          "429:   if err != nil {",
          "430:    rSpan.SetTag(\"error\", true)",
          "432:    sentry.WithScope(func(scope *sentry.Scope) {",
          "433:     if errC, ok := err.(interface{ SetURL(string, string) }); ok {",
          "434:      errC.SetURL(path, rsync)",
          "435:     }",
          "436:     if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "437:      errC.SetSentryScope(scope)",
          "438:     }",
          "439:     rrdp.SetSentryScope(scope)",
          "440:     scope.SetTag(\"Rsync\", rsync)",
          "441:     scope.SetTag(\"RRDP\", path)",
          "442:     sentry.CaptureException(err)",
          "443:    })",
          "446:    if *RRDPFailover && err.Error() != \"http: request body too large\" {",
          "447:     log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
          "448:     rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
          "449:    } else {",
          "450:     log.Errorf(\"Error when processing %v (for %v): %v.Skipping failover to rsync.\", path, rsync, err)",
          "451:     rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"skipping failover to rsync\", \"message\", err)",
          "452:     delete(s.RsyncFetch, rsync)",
          "455:    MetricRRDPErrors.With(",
          "456:     prometheus.Labels{",
          "457:      \"address\": path,",
          "458:     }).Inc()",
          "460:    s.RRDPStats[path].Errors++",
          "461:    s.RRDPStats[path].LastFetchError = int(time.Now().Unix())",
          "462:    s.RRDPStats[path].LastError = err.Error()",
          "463:    s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "465:    rSpan.Finish()",
          "466:    continue",
          "468:    log.Debugf(\"Success fetching %s, removing rsync %s\", path, rsync)",
          "469:    delete(s.RsyncFetch, rsync)",
          "472:   rSpan.LogKV(\"event\", \"rrdp\", \"type\", \"success\", \"message\", \"rrdp successfully fetched\")",
          "473:   sentry.WithScope(func(scope *sentry.Scope) {",
          "474:    scope.SetLevel(sentry.LevelInfo)",
          "475:    scope.SetTag(\"Rsync\", rsync)",
          "476:    scope.SetTag(\"RRDP\", path)",
          "477:    rrdp.SetSentryScope(scope)",
          "478:    sentry.CaptureMessage(\"fetched rrdp successfully\")",
          "479:   })",
          "481:   rSpan.Finish()",
          "482:   MetricRRDPSerial.With(",
          "483:    prometheus.Labels{",
          "484:     \"address\": path,",
          "485:    }).Set(float64(rrdp.Serial))",
          "486:   lastFetch := time.Now().Unix()",
          "487:   MetricLastFetch.With(",
          "488:    prometheus.Labels{",
          "489:     \"address\": path,",
          "490:     \"type\":    \"rrdp\",",
          "491:    }).Set(float64(lastFetch))",
          "493:   s.RRDPStats[path].LastFetch = int(lastFetch)",
          "494:   s.RRDPStats[path].RRDPSerial = rrdp.Serial",
          "495:   s.RRDPStats[path].RRDPSessionID = rrdp.SessionID",
          "496:   s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "498:   s.RRDPInfo[rsync] = RRDPInfo{",
          "499:    Rsync:     rsync,",
          "500:    Path:      path,",
          "501:    SessionID: rrdp.SessionID,",
          "502:    Serial:    rrdp.Serial,",
          "503:   }",
          "",
          "[Added Lines]",
          "380:  span := tracer.StartSpan(\"rrdp\", opentracing.ChildOf(pSpan.Context()))",
          "384:   s.fetchRRDP(path, rsync, span)",
          "385:  }",
          "386: }",
          "388: func (s *OctoRPKI) fetchRRDP(path string, rsyncURL string, span opentracing.Span) {",
          "389:  tracer := opentracing.GlobalTracer()",
          "390:  rSpan := tracer.StartSpan(\"sync\", opentracing.ChildOf(span.Context()))",
          "391:  defer rSpan.Finish()",
          "393:  rSpan.SetTag(\"rrdp\", path)",
          "394:  rSpan.SetTag(\"rsync\", rsyncURL)",
          "395:  rSpan.SetTag(\"type\", \"rrdp\")",
          "396:  log.Infof(\"RRDP sync %v\", path)",
          "398:  MetricSIACounts.With(prometheus.Labels{\"address\": path, \"type\": \"rrdp\"}).Set(0)",
          "400:  if _, exists := s.RRDPStats[path]; !exists {",
          "401:   s.RRDPStats[path] = &Stats{}",
          "402:  }",
          "404:  s.RRDPStats[path].URI = path",
          "405:  s.RRDPStats[path].Iteration++",
          "406:  s.RRDPStats[path].Count = 0",
          "408:  t1 := time.Now()",
          "410:  rrdp := s.getRRDPSystem(path, rsyncURL)",
          "412:  err := rrdp.FetchRRDP(s.RRDPFetchDomain[path])",
          "413:  t2 := time.Now()",
          "414:  if err != nil {",
          "415:   rSpan.SetTag(\"error\", true)",
          "417:   sentry.WithScope(func(scope *sentry.Scope) {",
          "418:    if errC, ok := err.(interface{ SetURL(string, string) }); ok {",
          "419:     errC.SetURL(path, rsyncURL)",
          "421:    if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "422:     errC.SetSentryScope(scope)",
          "423:    }",
          "424:    rrdp.SetSentryScope(scope)",
          "425:    scope.SetTag(\"Rsync\", rsyncURL)",
          "426:    scope.SetTag(\"RRDP\", path)",
          "427:    sentry.CaptureException(err)",
          "428:   })",
          "431:   if *RRDPFailover && err.Error() != \"http: request body too large\" {",
          "432:    log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsyncURL, err)",
          "433:    rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
          "435:    log.Errorf(\"Error when processing %v (for %v): %v.Skipping failover to rsync.\", path, rsyncURL, err)",
          "436:    rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"skipping failover to rsync\", \"message\", err)",
          "437:    delete(s.RsyncFetch, rsyncURL)",
          "440:   s.rrdpError(path, err, t1, t2)",
          "441:   return",
          "442:  }",
          "444:  log.Debugf(\"Success fetching %s, removing rsync %s\", path, rsyncURL)",
          "445:  delete(s.RsyncFetch, rsyncURL)",
          "447:  rSpan.LogKV(\"event\", \"rrdp\", \"type\", \"success\", \"message\", \"rrdp successfully fetched\")",
          "448:  sentry.WithScope(func(scope *sentry.Scope) {",
          "449:   scope.SetLevel(sentry.LevelInfo)",
          "450:   scope.SetTag(\"Rsync\", rsyncURL)",
          "451:   scope.SetTag(\"RRDP\", path)",
          "452:   rrdp.SetSentryScope(scope)",
          "453:   sentry.CaptureMessage(\"fetched rrdp successfully\")",
          "454:  })",
          "456:  MetricRRDPSerial.With(prometheus.Labels{\"address\": path}).Set(float64(rrdp.Serial))",
          "458:  lastFetch := time.Now().Unix()",
          "459:  MetricLastFetch.With(prometheus.Labels{\"address\": path, \"type\": \"rrdp\"}).Set(float64(lastFetch))",
          "461:  s.RRDPStats[path].LastFetch = int(lastFetch)",
          "462:  s.RRDPStats[path].RRDPSerial = rrdp.Serial",
          "463:  s.RRDPStats[path].RRDPSessionID = rrdp.SessionID",
          "464:  s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "466:  s.RRDPInfo[rsyncURL] = RRDPInfo{",
          "467:   Rsync:     rsyncURL,",
          "468:   Path:      path,",
          "469:   SessionID: rrdp.SessionID,",
          "470:   Serial:    rrdp.Serial,",
          "474: func (s *OctoRPKI) getRRDPSystem(path string, rsync string) *syncpki.RRDPSystem {",
          "475:  return &syncpki.RRDPSystem{",
          "476:   Callback:  s.ReceiveRRDPFileCallback,",
          "477:   Path:      path,",
          "478:   Fetcher:   s.HTTPFetcher,",
          "479:   SessionID: s.RRDPInfo[rsync].SessionID,",
          "480:   Serial:    s.RRDPInfo[rsync].Serial,",
          "481:   Log:       log.StandardLogger(),",
          "482:  }",
          "483: }",
          "485: func (s *OctoRPKI) rrdpError(path string, err error, t1 time.Time, t2 time.Time) {",
          "486:  MetricRRDPErrors.With(prometheus.Labels{\"address\": path}).Inc()",
          "487:  s.RRDPStats[path].Errors++",
          "488:  s.RRDPStats[path].LastFetchError = int(time.Now().Unix())",
          "489:  s.RRDPStats[path].LastError = err.Error()",
          "490:  s.RRDPStats[path].Duration = t2.Sub(t1).Seconds()",
          "491: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "540:   path := filepath.Join(*Basepath, downloadPath)",
          "541:   ctxRsync, cancelRsync := context.WithTimeout(context.Background(), *RsyncTimeout)",
          "543:   files, err := rsync.RunRsync(ctxRsync, uri, *RsyncBin, path)",
          "545:   if err != nil {",
          "546:    rSpan.SetTag(\"error\", true)",
          "547:    rSpan.LogKV(\"event\", \"rsync failure\", \"message\", err)",
          "",
          "[Removed Lines]",
          "542:   t1 := time.Now().UTC()",
          "544:   t2 := time.Now().UTC()",
          "",
          "[Added Lines]",
          "528:   t1 := time.Now()",
          "530:   t2 := time.Now()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "584:   rSpan.Finish()",
          "591:   lastFetch := time.Now().Unix()",
          "597:   tmpStats = s.RsyncStats[uri]",
          "598:   tmpStats.LastFetch = int(lastFetch)",
          "599:   tmpStats.Count = countFiles",
          "",
          "[Removed Lines]",
          "586:   MetricSIACounts.With(",
          "587:    prometheus.Labels{",
          "588:     \"address\": uri,",
          "589:     \"type\":    \"rsync\",",
          "590:    }).Set(float64(countFiles))",
          "592:   MetricLastFetch.With(",
          "593:    prometheus.Labels{",
          "594:     \"address\": uri,",
          "595:     \"type\":    \"rsync\",",
          "596:    }).Set(float64(lastFetch))",
          "",
          "[Added Lines]",
          "572:   MetricSIACounts.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(countFiles))",
          "574:   MetricLastFetch.With(prometheus.Labels{\"address\": uri, \"type\": \"rsync\"}).Set(float64(lastFetch))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "605:  MetricOperationTime.With(prometheus.Labels{\"type\": \"rsync\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "606: }",
          "627: func FilterDuplicates(roalist []prefixfile.ROAJson) []prefixfile.ROAJson {",
          "628:  roalistNodup := make([]prefixfile.ROAJson, 0)",
          "629:  hmap := make(map[string]bool)",
          "",
          "[Removed Lines]",
          "608: func (s *OctoRPKI) Debugf(msg string, args ...interface{}) {",
          "609:  log.Debugf(msg, args...)",
          "610: }",
          "612: func (s *OctoRPKI) Errorf(msg string, args ...interface{}) {",
          "613:  log.Errorf(msg, args...)",
          "614:  s.ValidationMessages = append(s.ValidationMessages, fmt.Sprintf(msg, args...))",
          "615: }",
          "617: func (s *OctoRPKI) Printf(msg string, args ...interface{}) {",
          "618:  log.Printf(msg, args...)",
          "619:  s.ValidationMessages = append(s.ValidationMessages, fmt.Sprintf(msg, args...))",
          "620: }",
          "622: func (s *OctoRPKI) Warnf(msg string, args ...interface{}) {",
          "623:  log.Warnf(msg, args...)",
          "624:  s.ValidationMessages = append(s.ValidationMessages, fmt.Sprintf(msg, args...))",
          "625: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "810:  )",
          "811:  defer span.Finish()",
          "814:  for i, tal := range s.Tals {",
          "819:   tSpan.SetTag(\"tal\", tal.Path)",
          "821:   validator := pki.NewValidator()",
          "822:   validator.DecoderConfig.ValidateStrict = *StrictCms",
          "824:   sm := pki.NewSimpleManager()",
          "833:   go func(sm *pki.SimpleManager, tal *pki.PKIFile) {",
          "834:    for err := range sm.Errors {",
          "835:     tSpan.SetTag(\"error\", true)",
          "836:     tSpan.LogKV(\"event\", \"resource issue\", \"type\", \"skipping resource\", \"message\", err)",
          "838:     log.Error(err)",
          "839:     sentry.WithScope(func(scope *sentry.Scope) {",
          "840:      if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "",
          "[Removed Lines]",
          "813:  manager := make([]*pki.SimpleManager, len(s.Tals))",
          "815:   tSpan := tracer.StartSpan(",
          "816:    \"explore\",",
          "817:    opentracing.ChildOf(span.Context()),",
          "818:   )",
          "825:   manager[i] = sm",
          "826:   manager[i].ReportErrors = true",
          "827:   manager[i].Validator = validator",
          "828:   manager[i].FileSeeker = s.Fetcher",
          "829:   manager[i].Log = s",
          "830:   manager[i].StrictHash = *StrictHash",
          "831:   manager[i].StrictManifests = *StrictManifests",
          "",
          "[Added Lines]",
          "769:  managers := make([]*pki.SimpleManager, len(s.Tals))",
          "771:   tSpan := tracer.StartSpan(\"explore\", opentracing.ChildOf(span.Context()))",
          "778:   managers[i] = sm",
          "779:   managers[i].ReportErrors = true",
          "780:   managers[i].Validator = validator",
          "781:   managers[i].FileSeeker = s.Fetcher",
          "782:   managers[i].Log = log.StandardLogger()",
          "783:   managers[i].StrictHash = *StrictHash",
          "784:   managers[i].StrictManifests = *StrictManifests",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "844:      sentry.CaptureException(err)",
          "845:     })",
          "846:    }",
          "849:   }(sm, tal)",
          "854:   var count int",
          "856:    tal := obj.Resource.(*librpki.RPKITAL)",
          "858:    if !obj.CertTALValid {",
          "859:     s.TalsFetch[obj.File.Path] = tal",
          "860:    }",
          "861:    count++",
          "862:   }",
          "881:      continue",
          "882:     }",
          "892:     }",
          "911:    }",
          "912:   }",
          "913:   sm.Close()",
          "915:   tSpan.Finish()",
          "916:  }",
          "",
          "[Removed Lines]",
          "850:   manager[i].AddInitial([]*pki.PKIFile{tal})",
          "851:   s.CountExplore = manager[i].Explore(!s.UseManifest, false)",
          "855:   for _, obj := range manager[i].Validator.TALs {",
          "863:   for _, obj := range manager[i].Validator.ValidObjects {",
          "864:    if obj.Type == pki.TYPE_CER {",
          "865:     cer := obj.Resource.(*librpki.RPKICertificate)",
          "866:     var RsyncGN string",
          "867:     var RRDPGN string",
          "868:     var hasRRDP bool",
          "869:     for _, sia := range cer.SubjectInformationAccess {",
          "870:      gn := string(sia.GeneralName)",
          "871:      if sia.AccessMethod.Equal(CertRepository) {",
          "872:       RsyncGN = gn",
          "873:      } else if sia.AccessMethod.Equal(CertRRDP) {",
          "874:       hasRRDP = true",
          "875:       RRDPGN = gn",
          "876:      }",
          "877:     }",
          "878:     gnExtracted, gnExtractedDomain, err := syncpki.ExtractRsyncDomainModule(RsyncGN)",
          "879:     if err != nil {",
          "880:      log.Errorf(\"Could not add cert rsync %s due to %v\", RsyncGN, err)",
          "884:     if hasRRDP {",
          "885:      prev, ok := s.RRDPFetchDomain[RRDPGN]",
          "886:      if ok && prev != gnExtractedDomain {",
          "887:       log.Errorf(\"rrdp %s tries to override %s with %s\", RRDPGN, prev, gnExtractedDomain)",
          "888:       continue",
          "889:      }",
          "890:      s.RRDPFetchDomain[RRDPGN] = gnExtractedDomain",
          "891:      s.RRDPFetch[RRDPGN] = gnExtracted",
          "893:     s.RsyncFetch[gnExtracted] = RRDPGN",
          "894:     s.CurrentRepos[gnExtracted] = time.Now().UTC()",
          "895:     count++",
          "898:     iaId, ok := iatmp[gnExtracted]",
          "899:     if !ok {",
          "900:      iaIdTmp := SIA{",
          "901:       gnExtracted,",
          "902:       RRDPGN,",
          "903:      }",
          "904:      ia[i] = append(ia[i], iaIdTmp)",
          "905:      iaId = &(ia[i][len(ia[i])-1])",
          "906:      iatmp[gnExtracted] = iaId",
          "907:     }",
          "908:     iaId.Rsync = gnExtracted",
          "909:     iaId.RRDP = RRDPGN",
          "914:   tSpan.LogKV(\"count-valid\", count, \"count-total\", s.CountExplore)",
          "",
          "[Added Lines]",
          "800:   managers[i].AddInitial([]*pki.PKIFile{tal})",
          "801:   countExplore := managers[i].Explore(!s.UseManifest, false)",
          "805:   for _, obj := range managers[i].Validator.TALs {",
          "813:   for _, pkiResource := range managers[i].Validator.ValidObjects {",
          "814:    if pkiResource.Type != pki.TYPE_CER {",
          "815:     continue",
          "816:    }",
          "818:    cer := pkiResource.Resource.(*librpki.RPKICertificate)",
          "819:    rsyncGeneralName := cer.GetRsyncGeneralName()",
          "820:    rrdpGeneralName := cer.GetRRDPGeneralName()",
          "822:    gnExtracted, gnExtractedDomain, err := syncpki.ExtractRsyncDomainModule(rsyncGeneralName)",
          "823:    if err != nil {",
          "824:     log.Errorf(\"Could not add cert rsync %s due to %v\", rsyncGeneralName, err)",
          "825:     continue",
          "826:    }",
          "828:    if cer.HasRRDP() {",
          "829:     prev, ok := s.RRDPFetchDomain[rrdpGeneralName]",
          "830:     if ok && prev != gnExtractedDomain {",
          "831:      log.Errorf(\"rrdp %s tries to override %s with %s\", rrdpGeneralName, prev, gnExtractedDomain)",
          "834:     s.RRDPFetchDomain[rrdpGeneralName] = gnExtractedDomain",
          "835:     s.RRDPFetch[rrdpGeneralName] = gnExtracted",
          "836:    }",
          "837:    s.RsyncFetch[gnExtracted] = rrdpGeneralName",
          "838:    s.CurrentRepos[gnExtracted] = time.Now()",
          "839:    count++",
          "842:    iaId, ok := iatmp[gnExtracted]",
          "843:    if !ok {",
          "844:     iaIdTmp := SIA{",
          "845:      gnExtracted,",
          "846:      rrdpGeneralName,",
          "848:     ia[i] = append(ia[i], iaIdTmp)",
          "849:     iaId = &(ia[i][len(ia[i])-1])",
          "850:     iatmp[gnExtracted] = iaId",
          "852:    iaId.Rsync = gnExtracted",
          "853:    iaId.RRDP = rrdpGeneralName",
          "856:   tSpan.LogKV(\"count-valid\", count, \"count-total\", countExplore)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "937:   }",
          "939:   var counttal int",
          "941:    roa := obj.Resource.(*librpki.RPKIROA)",
          "943:    for _, entry := range roa.Valids {",
          "",
          "[Removed Lines]",
          "940:   for _, obj := range manager[i].Validator.ValidROA {",
          "",
          "[Added Lines]",
          "882:   for _, obj := range managers[i].Validator.ValidROA {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "960:     \"ta\": talname,",
          "961:    }).Set(float64(counttal))",
          "962:  }",
          "964:  s.LastComputed = curTime",
          "965:  validTime := curTime.Add(*ValidityDuration)",
          "966:  roalist.Metadata = prefixfile.MetaData{",
          "",
          "[Removed Lines]",
          "963:  curTime := time.Now().UTC()",
          "",
          "[Added Lines]",
          "905:  curTime := time.Now()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "991:  s.ROAList = roalist",
          "992:  s.ROAListLock.Unlock()",
          "995:  s.ValidationDuration = t2.Sub(t1)",
          "996:  MetricOperationTime.With(prometheus.Labels{\"type\": \"validation\"}).Observe(float64(s.ValidationDuration.Seconds()))",
          "997:  MetricLastValidation.Set(float64(s.LastComputed.Unix()))",
          "",
          "[Removed Lines]",
          "994:  t2 := time.Now().UTC()",
          "",
          "[Added Lines]",
          "936:  t2 := time.Now()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1287: func (s *OctoRPKI) validationLoop() {",
          "1288:  tracer := opentracing.GlobalTracer()",
          "1290:  var spanActive bool",
          "1291:  var pSpan opentracing.Span",
          "1292:  var iterationsUntilStable int",
          "",
          "[Removed Lines]",
          "1289:  var err error",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1308:   span.SetTag(\"iteration\", s.Iteration)",
          "1310:   if *RRDP {",
          "1333:   }",
          "",
          "[Removed Lines]",
          "1311:    t1 := time.Now().UTC()",
          "1313:    if *RRDPFile != \"\" {",
          "1314:     err = s.LoadRRDP(*RRDPFile)",
          "1315:     if err != nil {",
          "1316:      sentry.CaptureException(err)",
          "1317:     }",
          "1318:    }",
          "1319:    s.MainRRDP(span)",
          "1320:    if *RRDPFile != \"\" {",
          "1321:     s.SaveRRDP(*RRDPFile)",
          "1322:     if err != nil {",
          "1323:      sentry.CaptureException(err)",
          "1324:     }",
          "1325:    }",
          "1327:    t2 := time.Now().UTC()",
          "1328:    MetricOperationTime.With(",
          "1329:     prometheus.Labels{",
          "1330:      \"type\": \"rrdp\",",
          "1331:     }).",
          "1332:     Observe(float64(t2.Sub(t1).Seconds()))",
          "",
          "[Added Lines]",
          "1252:    s.doRRDP(span)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1339:   s.MainRsync(span)",
          "1343:   s.MainValidation(span)",
          "",
          "[Removed Lines]",
          "1341:   s.ValidationMessages = make([]string, 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1348:   s.HasPreviousStable.Store(s.Stable.Load())",
          "1350:   if *Mode == \"oneoff\" && (s.Stable.Load() || !*WaitStable) {",
          "1352:    if err != nil {",
          "1365:    }",
          "1366:   }",
          "",
          "[Removed Lines]",
          "1351:    fc, err := json.Marshal(s.ROAList)",
          "1353:     log.Errorf(\"unable to marshal ROA list: %v\", err)",
          "1354:     continue",
          "1355:    }",
          "1357:    if *Output == \"\" {",
          "1358:     fmt.Println(string(fc))",
          "1359:    } else {",
          "1360:     err := ioutil.WriteFile(*Output, fc, 0600)",
          "1361:     if err != nil {",
          "1362:      log.Errorf(\"Unable to write ROA list to %q: %v\", *Output, err)",
          "1363:      continue",
          "1364:     }",
          "",
          "[Added Lines]",
          "1269:    err := s.output()",
          "1271:     log.Fatal(err)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1391:   log.Info(\"Still exploring. Revalidating now\")",
          "1392:  }",
          "1393: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302: func (s *OctoRPKI) output() error {",
          "1303:  fc, err := json.Marshal(s.ROAList)",
          "1304:  if err != nil {",
          "1305:   return fmt.Errorf(\"unable to marshal ROA list: %v\", err)",
          "1306:  }",
          "1308:  if *Output == \"\" {",
          "1309:   fmt.Println(string(fc))",
          "1310:  } else {",
          "1311:   err := ioutil.WriteFile(*Output, fc, 0600)",
          "1312:   if err != nil {",
          "1313:    return fmt.Errorf(\"Unable to write ROA list to %q: %v\", *Output, err)",
          "1315:   }",
          "1316:  }",
          "1318:  return nil",
          "1319: }",
          "1321: func (s *OctoRPKI) doRRDP(span opentracing.Span) {",
          "1322:  t1 := time.Now()",
          "1323:  defer func() {",
          "1324:   t2 := time.Now()",
          "1325:   MetricOperationTime.With(prometheus.Labels{\"type\": \"rrdp\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "1326:  }()",
          "1328:  if *RRDPFile != \"\" {",
          "1329:   err := s.LoadRRDP(*RRDPFile)",
          "1330:   if err != nil {",
          "1331:    sentry.CaptureException(err)",
          "1332:   }",
          "1333:  }",
          "1335:  s.MainRRDP(span)",
          "1337:  if *RRDPFile != \"\" {",
          "1338:   err := s.SaveRRDP(*RRDPFile)",
          "1339:   if err != nil {",
          "1340:    sentry.CaptureException(err)",
          "1341:   }",
          "1342:  }",
          "1343: }",
          "",
          "---------------"
        ],
        "sync/api/fetch.go||sync/api/fetch.go": [
          "File: sync/api/fetch.go -> sync/api/fetch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "7:  \"io/ioutil\"",
          "9:  \"strings\"",
          "10: )",
          "12: type APIFetch struct {",
          "",
          "[Removed Lines]",
          "5:  \"github.com/cloudflare/cfrpki/validator/lib\"",
          "6:  \"github.com/cloudflare/cfrpki/validator/pki\"",
          "8:  \"os\"",
          "",
          "[Added Lines]",
          "5:  \"fmt\"",
          "9:  librpki \"github.com/cloudflare/cfrpki/validator/lib\"",
          "10:  \"github.com/cloudflare/cfrpki/validator/pki\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: func (s *APIFetch) GetFile(file *pki.PKIFile) (*pki.SeekFile, error) {",
          "33:  if file.Type == pki.TYPE_TAL {",
          "40:   if err != nil {",
          "42:   }",
          "43:   return &pki.SeekFile{",
          "45:    Data: data,",
          "47:  }",
          "49:  path := file.ComputePath()",
          "51:  data, err := FetchFile(s.Client, s.Ctx, path)",
          "52:  return &pki.SeekFile{",
          "53:   File: path,",
          "54:   Data: data,",
          "56: }",
          "58: func (s *APIFetch) GetRepository(file *pki.PKIFile, callback pki.CallbackExplore) error {",
          "",
          "[Removed Lines]",
          "34:   path := file.Path",
          "35:   talFile, err := os.Open(path)",
          "36:   if err != nil {",
          "37:    return nil, err",
          "38:   }",
          "39:   data, err := ioutil.ReadAll(talFile)",
          "41:    return nil, err",
          "44:    File: path,",
          "46:   }, err",
          "55:  }, err",
          "",
          "[Added Lines]",
          "35:   data, err := ioutil.ReadFile(file.Path)",
          "37:    return nil, fmt.Errorf(\"Unable to read file %q: %v\", file.Path, err)",
          "41:    File: file.Path,",
          "43:   }, nil",
          "49:  if err != nil {",
          "50:   return nil, fmt.Errorf(\"FetchFile failed: %v\", err)",
          "51:  }",
          "56:  }, nil",
          "",
          "---------------"
        ],
        "sync/lib/fetch.go||sync/lib/fetch.go": [
          "File: sync/lib/fetch.go -> sync/lib/fetch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  return pathRep",
          "50: }",
          "53:  fc, err := ioutil.ReadFile(path)",
          "54:  if err != nil {",
          "55:   return nil, nil, fmt.Errorf(\"Unable to read file %q: %v\", path, err)",
          "",
          "[Removed Lines]",
          "52: func FetchFile(path string, conv bool) ([]byte, []byte, error) {",
          "",
          "[Added Lines]",
          "52: func FetchFile(path string, derEncoding bool) ([]byte, []byte, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  tmpSha265 := sha256.Sum256(fc)",
          "59:  sha256 := tmpSha265[:]",
          "66:  }",
          "68: }",
          "70: func ParseMapDirectory(mapdir string) map[string]string {",
          "",
          "[Removed Lines]",
          "61:  if conv {",
          "62:   fc, err = librpki.BER2DER(fc)",
          "63:   if err != nil {",
          "64:    return fc, sha256, err",
          "65:   }",
          "67:  return fc, sha256, err",
          "",
          "[Added Lines]",
          "61:  if !derEncoding {",
          "62:   return fc, sha256, nil",
          "63:  }",
          "65:  fc, err = librpki.BER2DER(fc)",
          "66:  if err != nil {",
          "67:   return nil, nil, fmt.Errorf(\"librpki.BER2DER failed: %v\", err)",
          "70:  return fc, sha256, nil",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117: func (s *LocalFetch) GetRepository(file *pki.PKIFile, callback pki.CallbackExplore) error {",
          "118:  newPath := GetLocalPath(file.Repo, s.MapDirectory)",
          "124:  if err != nil {",
          "126:  }",
          "127:  for _, fileDir := range files {",
          "162:   }",
          "163:  }",
          "165:  return nil",
          "166: }",
          "",
          "[Removed Lines]",
          "119:  repoFile, err := os.Open(newPath)",
          "120:  if err != nil {",
          "121:   return err",
          "122:  }",
          "123:  files, err := repoFile.Readdir(0)",
          "125:   return err",
          "128:   if fileDir != nil && !fileDir.IsDir() {",
          "129:    data, sha256, err := FetchFile(newPath+fileDir.Name(), true)",
          "130:    if err != nil {",
          "131:     return err",
          "132:    }",
          "134:    fullnameSplit := strings.Split(fileDir.Name(), \".\")",
          "136:    extension := pki.TYPE_UNKNOWN",
          "137:    if len(fullnameSplit) > 0 {",
          "138:     switch fullnameSplit[len(fullnameSplit)-1] {",
          "139:     case \"crl\":",
          "140:      extension = pki.TYPE_CRL",
          "141:     case \"cer\":",
          "142:      extension = pki.TYPE_CER",
          "143:     case \"mft\":",
          "144:      extension = pki.TYPE_MFT",
          "145:     case \"roa\":",
          "146:      extension = pki.TYPE_ROA",
          "147:     }",
          "148:    }",
          "150:    callback(",
          "151:     &pki.PKIFile{",
          "152:      Parent: file,",
          "153:      Type:   extension,",
          "154:      Repo:   file.Repo,",
          "155:      Path:   file.Repo + fileDir.Name(),",
          "156:     },",
          "157:     &pki.SeekFile{",
          "158:      File:   file.Path,",
          "159:      Data:   data,",
          "160:      Sha256: sha256,",
          "161:     }, false)",
          "",
          "[Added Lines]",
          "122:  files, err := ioutil.ReadDir(file.Repo)",
          "124:   return fmt.Errorf(\"Unable to read dir %q: %v\", file.Repo, err)",
          "128:   if fileDir == nil || fileDir.IsDir() {",
          "129:    continue",
          "130:   }",
          "132:   data, sha256, err := FetchFile(newPath+fileDir.Name(), true)",
          "133:   if err != nil {",
          "134:    return fmt.Errorf(\"FetchFile failed: %v\", err)",
          "135:   }",
          "137:   fullnameSplit := strings.Split(fileDir.Name(), \".\")",
          "139:   extension := pki.TYPE_UNKNOWN",
          "140:   if len(fullnameSplit) > 0 {",
          "141:    switch fullnameSplit[len(fullnameSplit)-1] {",
          "142:    case \"crl\":",
          "143:     extension = pki.TYPE_CRL",
          "144:    case \"cer\":",
          "145:     extension = pki.TYPE_CER",
          "146:    case \"mft\":",
          "147:     extension = pki.TYPE_MFT",
          "148:    case \"roa\":",
          "149:     extension = pki.TYPE_ROA",
          "150:    }",
          "153:   callback(",
          "154:    &pki.PKIFile{",
          "155:     Parent: file,",
          "156:     Type:   extension,",
          "157:     Repo:   file.Repo,",
          "158:     Path:   file.Repo + fileDir.Name(),",
          "159:    },",
          "160:    &pki.SeekFile{",
          "161:     File:   file.Path,",
          "162:     Data:   data,",
          "163:     Sha256: sha256,",
          "164:    }, false)",
          "",
          "---------------"
        ],
        "validator/lib/cert.go||validator/lib/cert.go": [
          "File: validator/lib/cert.go -> validator/lib/cert.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:  ASNRDI                   []ASNCertificateInformation",
          "434:  Certificate *x509.Certificate",
          "438: }",
          "440: func (cert *RPKICertificate) IsIPRangeInCertificate(min net.IP, max net.IP) (bool, bool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435: }",
          "437: func (cert *RPKICertificate) HasRRDP() bool {",
          "438:  for _, sia := range cert.SubjectInformationAccess {",
          "439:   if sia.AccessMethod.Equal(CertRRDP) {",
          "440:    return true",
          "441:   }",
          "442:  }",
          "444:  return false",
          "445: }",
          "447: func (cert *RPKICertificate) GetRRDPGeneralName() string {",
          "448:  for _, sia := range cert.SubjectInformationAccess {",
          "449:   if sia.AccessMethod.Equal(CertRRDP) {",
          "450:    return string(sia.GeneralName)",
          "451:   }",
          "452:  }",
          "454:  return \"\"",
          "455: }",
          "457: func (cert *RPKICertificate) GetRsyncGeneralName() string {",
          "458:  for _, sia := range cert.SubjectInformationAccess {",
          "459:   if sia.AccessMethod.Equal(CertRepository) {",
          "460:    return string(sia.GeneralName)",
          "461:   }",
          "462:  }",
          "464:  return \"\"",
          "",
          "---------------"
        ],
        "validator/pki/pki.go||validator/pki/pki.go": [
          "File: validator/pki/pki.go -> validator/pki/pki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:   } else {",
          "670:    v.ValidCRL[string(aki)] = res",
          "671:    for _, revoked := range crl.TBSCertList.RevokedCertificates {",
          "681:     key := string(aki) + revoked.SerialNumber.String()",
          "682:     child, found := v.CertsSerial[key]",
          "683:     if found {",
          "",
          "[Removed Lines]",
          "673:      switch child := child.Resource.(type) {",
          "674:      case *librpki.RPKI_Certificate:",
          "675:       if child.Certificate.SerialNumber.Cmp(revoked.SerialNumber) == 0 {",
          "676:        err = v.InvalidateObject(child.Certificate.SubjectKeyId)",
          "678:       }",
          "679:      }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "825:  sm.Explored[file.ComputePath()] = true",
          "826:  valid, subFiles, res, err := sm.Validator.AddResource(file, data.Data)",
          "835:  if err != nil {",
          "838:   switch err.(type) {",
          "839:   case *FileError:",
          "840:   case *ResourceError:",
          "",
          "[Removed Lines]",
          "829:   if sm.StrictManifests {",
          "831:    sm.InvalidateManifestParent(file, err)",
          "832:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}