{
  "cve_id": "CVE-2024-22232",
  "cve_desc": "A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master\u2019s filesystem.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "281bf59f3ce0ab0ff7ab0e6a54ec206c08e22e5c",
      "candidate_info": {
        "commit_hash": "281bf59f3ce0ab0ff7ab0e6a54ec206c08e22e5c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/281bf59f3ce0ab0ff7ab0e6a54ec206c08e22e5c",
        "files": [
          "salt/utils/aws.py",
          "tests/pytests/unit/utils/test_aws.py"
        ],
        "message": "Cleanup aws unit test hang\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "salt/utils/aws.py||salt/utils/aws.py",
          "tests/pytests/unit/utils/test_aws.py||tests/pytests/unit/utils/test_aws.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/utils/aws.py||salt/utils/aws.py": [
          "File: salt/utils/aws.py -> salt/utils/aws.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: :depends: requests",
          "9: \"\"\"",
          "11: import copy",
          "12: import hashlib",
          "13: import hmac",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import binascii",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import random",
          "16: import re",
          "17: import time",
          "18: from datetime import datetime",
          "20: import salt.config",
          "21: import salt.utils.hashutils",
          "22: import salt.utils.xmlutil as xml",
          "54: log = logging.getLogger(__name__)",
          "55: DEFAULT_LOCATION = \"us-east-1\"",
          "56: DEFAULT_AWS_API_VERSION = \"2016-11-15\"",
          "57: AWS_RETRY_CODES = [",
          "",
          "[Removed Lines]",
          "24: try:",
          "25:     import requests",
          "27:     HAS_REQUESTS = True  # pylint: disable=W0612",
          "28: except ImportError:",
          "29:     HAS_REQUESTS = False  # pylint: disable=W0612",
          "31: try:",
          "32:     import binascii",
          "34:     HAS_BINASCII = True  # pylint: disable=W0612",
          "35: except ImportError:",
          "36:     HAS_BINASCII = False  # pylint: disable=W0612",
          "38: try:",
          "39:     import urllib.parse",
          "41:     HAS_URLLIB = True  # pylint: disable=W0612",
          "42: except ImportError:",
          "43:     HAS_URLLIB = False  # pylint: disable=W0612",
          "45: try:",
          "46:     import xml.etree.ElementTree as ET",
          "48:     HAS_ETREE = True  # pylint: disable=W0612",
          "49: except ImportError:",
          "50:     HAS_ETREE = False  # pylint: disable=W0612",
          "52: # pylint: enable=import-error,redefined-builtin,no-name-in-module",
          "",
          "[Added Lines]",
          "18: import urllib.parse",
          "19: import xml.etree.ElementTree as ET",
          "22: import requests",
          "",
          "---------------"
        ],
        "tests/pytests/unit/utils/test_aws.py||tests/pytests/unit/utils/test_aws.py": [
          "File: tests/pytests/unit/utils/test_aws.py -> tests/pytests/unit/utils/test_aws.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     Test the salt aws functions",
          "6: \"\"\"",
          "8: import io",
          "9: import time",
          "10: from datetime import datetime, timedelta",
          "12: import requests",
          "14: import salt.utils.aws as aws",
          "15: from tests.support.mock import MagicMock, patch",
          "18: def test_get_metadata_imdsv1():",
          "19:     response = requests.Response()",
          "20:     response.status_code = 200",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import os",
          "12: import pytest",
          "16: from tests.support.helpers import patched_environ",
          "20: @pytest.fixture(autouse=True)",
          "21: def _cleanup():",
          "22:     # Make sure this cache is clear before each test",
          "23:     aws.__AssumeCache__.clear()",
          "24:     # Remove any AWS_ prefixed environment variables",
          "25:     with patched_environ(",
          "26:         __cleanup__=[k for k in os.environ if k.startswith(\"AWS_\")],",
          "27:     ):",
          "28:         yield",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "700efa613350d87461b08d993368868d4b74fdcf",
      "candidate_info": {
        "commit_hash": "700efa613350d87461b08d993368868d4b74fdcf",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/700efa613350d87461b08d993368868d4b74fdcf",
        "files": [
          "tests/pytests/pkg/download/test_pkg_download.py",
          "tools/pkg/repo/create.py"
        ],
        "message": "update photon paths to use their $releasever string string which includes .0",
        "before_after_code_files": [
          "tests/pytests/pkg/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py",
          "tools/pkg/repo/create.py||tools/pkg/repo/create.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/download/test_pkg_download.py||tests/pytests/pkg/download/test_pkg_download.py": [
          "File: tests/pytests/pkg/download/test_pkg_download.py -> tests/pytests/pkg/download/test_pkg_download.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: ):",
          "257:     arch = os.environ.get(\"SALT_REPO_ARCH\") or \"x86_64\"",
          "259:     if repo_subpath == \"minor\":",
          "260:         repo_url_base = (",
          "261:             f\"{root_url}/{os_name}/{os_version}/{arch}/{repo_subpath}/{salt_release}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:     if os_name == \"photon\":",
          "260:         os_version = f\"{os_version}.0\"",
          "",
          "---------------"
        ],
        "tools/pkg/repo/create.py||tools/pkg/repo/create.py": [
          "File: tools/pkg/repo/create.py -> tools/pkg/repo/create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:         assert incoming is not None",
          "381:         assert repo_path is not None",
          "382:         assert key_id is not None",
          "383:     display_name = f\"{distro.capitalize()} {distro_version}\"",
          "384:     if distro_version not in _rpm_distro_info[distro]:",
          "385:         ctx.error(f\"Support for {display_name} is missing.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:     if distro == \"photon\":",
          "385:         distro_version = f\"{distro_version}.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d69e7ad58c5984aefa8b81e206adc2fe2b4f841",
      "candidate_info": {
        "commit_hash": "5d69e7ad58c5984aefa8b81e206adc2fe2b4f841",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/5d69e7ad58c5984aefa8b81e206adc2fe2b4f841",
        "files": [
          ".github/workflows/build-deps-ci-action.yml",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja"
        ],
        "message": "Use windows self hosted runners to build CI deps\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja": [
          "File: .github/workflows/templates/build-deps-ci-action.yml.jinja -> .github/workflows/templates/build-deps-ci-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   windows-dependencies:",
          "249:     name: Windows",
          "254:     timeout-minutes: 90",
          "255:     strategy:",
          "256:       fail-fast: false",
          "",
          "[Removed Lines]",
          "250:     runs-on:",
          "251:       - self-hosted",
          "252:       - linux",
          "253:       - bastion",
          "",
          "[Added Lines]",
          "250:     runs-on: ${{ matrix.distro-slug }}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:       - name: \"Throttle Builds\"",
          "266:         shell: bash",
          "267:         run: |",
          "270:       - name: Checkout Source Code",
          "271:         uses: actions/checkout@v4",
          "",
          "[Removed Lines]",
          "268:           t=$(shuf -i 1-30 -n 1); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "",
          "[Added Lines]",
          "265:           t=$(python3 -c 'import random, sys; sys.stdout.write(str(random.randint(1, 15)))'); echo \"Sleeping $t seconds\"; sleep \"$t\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:           cd artifacts",
          "295:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.tar.xz",
          "303:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "305:         with:",
          "327:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "328:         run: |",
          "331:       - name: Install Dependencies",
          "332:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "333:         run: |",
          "336:       - name: Cleanup .nox Directory",
          "337:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "338:         run: |",
          "341:       - name: Compress .nox Directory",
          "342:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "343:         run: |",
          "356:       - name: Upload Nox Requirements Tarball",
          "357:         uses: actions/upload-artifact@v3",
          "",
          "[Removed Lines]",
          "297:       - name: PyPi Proxy",
          "298:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "299:         run: |",
          "300:           sed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\\n;' requirements/static/ci/*/*.txt",
          "302:       - name: Setup Python Tools Scripts",
          "304:         uses: ./.github/actions/setup-python-tools-scripts",
          "306:           cache-prefix: ${{ inputs.cache-prefix }}-build-deps-ci",
          "308:       - name: Get Salt Project GitHub Actions Bot Environment",
          "309:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "310:         run: |",
          "311:           TOKEN=$(curl -sS -f -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 30\")",
          "312:           SPB_ENVIRONMENT=$(curl -sS -f -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/tags/instance/spb:environment)",
          "313:           echo \"SPB_ENVIRONMENT=$SPB_ENVIRONMENT\" >> \"$GITHUB_ENV\"",
          "315:       - name: Start VM",
          "316:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "317:         id: spin-up-vm",
          "318:         run: |",
          "319:           tools --timestamps vm create --environment \"${SPB_ENVIRONMENT}\" --retries=2 ${{ matrix.distro-slug }}",
          "321:       - name: List Free Space",
          "322:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "323:         run: |",
          "324:           tools --timestamps vm ssh ${{ matrix.distro-slug }} -- df -h || true",
          "326:       - name: Upload Checkout To VM",
          "329:           tools --timestamps vm rsync ${{ matrix.distro-slug }}",
          "334:           tools --timestamps vm install-dependencies --nox-session=${{ inputs.nox-session }} ${{ matrix.distro-slug }}",
          "339:           tools --timestamps vm pre-archive-cleanup ${{ matrix.distro-slug }}",
          "344:           tools --timestamps vm compress-dependencies ${{ matrix.distro-slug }}",
          "346:       - name: Download Compressed .nox Directory",
          "347:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "348:         run: |",
          "349:           tools --timestamps vm download-dependencies ${{ matrix.distro-slug }}",
          "351:       - name: Destroy VM",
          "352:         if: always() && steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "353:         run: |",
          "354:           tools --timestamps vm destroy --no-wait ${{ matrix.distro-slug }}",
          "",
          "[Added Lines]",
          "294:       - name: Set up Python ${{ inputs.python-version }}",
          "296:         uses: actions/setup-python@v4",
          "298:           python-version: \"${{ inputs.python-version }}\"",
          "300:       - name: Install Nox",
          "303:           python3 -m pip install 'nox==${{ inputs.nox-version }}'",
          "307:         env:",
          "308:           PRINT_TEST_SELECTION: \"0\"",
          "309:           PRINT_SYSTEM_INFO: \"0\"",
          "311:           nox --install-only -e ${{ inputs.nox-session }}",
          "316:           nox --force-color -e \"pre-archive-cleanup(pkg=False)\"",
          "321:           nox --force-color -e compress-dependencies -- windows ${{ matrix.arch }}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c389db4f4545d720ab430eed81d2f214d4878ab",
      "candidate_info": {
        "commit_hash": "2c389db4f4545d720ab430eed81d2f214d4878ab",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/2c389db4f4545d720ab430eed81d2f214d4878ab",
        "files": [
          "tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/support/helpers.py",
          "tests/support/pytest/helpers.py"
        ],
        "message": "Remove some duplicate fixtures\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py",
          "tests/pytests/pkg/support/helpers.py||tests/pytests/pkg/support/helpers.py",
          "tests/support/pytest/helpers.py||tests/support/pytest/helpers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/pkg/conftest.py||tests/pytests/pkg/conftest.py": [
          "File: tests/pytests/pkg/conftest.py -> tests/pytests/pkg/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     SaltPkgInstall,",
          "22:     TestUser,",
          "23: )",
          "26: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "24: from tests.support.sminion import create_sminion",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     return install_salt.version",
          "50: @pytest.fixture(scope=\"session\", autouse=True)",
          "51: def _system_up_to_date(",
          "52:     grains,",
          "",
          "[Removed Lines]",
          "40: @pytest.fixture(scope=\"session\")",
          "41: def sminion():",
          "42:     return create_sminion()",
          "45: @pytest.fixture(scope=\"session\")",
          "46: def grains(sminion):",
          "47:     return sminion.opts[\"grains\"].copy()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:             subprocess.run([\"chown\", \"-R\", \"salt:salt\", str(_dir)], check=True)",
          "512:     factory.after_terminate(",
          "514:     )",
          "515:     with factory.started(start_timeout=start_timeout):",
          "516:         yield factory",
          "",
          "[Removed Lines]",
          "513:         pytest.helpers.remove_stale_minion_key_pkg, salt_master, factory.id",
          "",
          "[Added Lines]",
          "502:         pytest.helpers.remove_stale_minion_key, salt_master, factory.id",
          "",
          "---------------"
        ],
        "tests/pytests/pkg/support/helpers.py||tests/pytests/pkg/support/helpers.py": [
          "File: tests/pytests/pkg/support/helpers.py -> tests/pytests/pkg/support/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1559:         self.session.__exit__(*args)",
          "1596: @pytest.helpers.register",
          "1597: def download_file(url, dest, auth=None):",
          "1598:     # NOTE the stream=True parameter below",
          "",
          "[Removed Lines]",
          "1562: @pytest.helpers.register",
          "1563: def remove_stale_minion_key_pkg(master, minion_id):",
          "1564:     key_path = os.path.join(master.config[\"pki_dir\"], \"minions\", minion_id)",
          "1565:     if os.path.exists(key_path):",
          "1566:         os.unlink(key_path)",
          "1567:     else:",
          "1568:         log.debug(\"The minion(id=%r) key was not found at %s\", minion_id, key_path)",
          "1571: @pytest.helpers.register",
          "1572: def remove_stale_master_key(master):",
          "1573:     keys_path = os.path.join(master.config[\"pki_dir\"], \"master\")",
          "1574:     for key_name in (\"master.pem\", \"master.pub\"):",
          "1575:         key_path = os.path.join(keys_path, key_name)",
          "1576:         if os.path.exists(key_path):",
          "1577:             os.unlink(key_path)",
          "1578:         else:",
          "1579:             log.debug(",
          "1580:                 \"The master(id=%r) %s key was not found at %s\",",
          "1581:                 master.id,",
          "1582:                 key_name,",
          "1583:                 key_path,",
          "1584:             )",
          "1585:     key_path = os.path.join(master.config[\"pki_dir\"], \"minion\", \"minion_master.pub\")",
          "1586:     if os.path.exists(key_path):",
          "1587:         os.unlink(key_path)",
          "1588:     else:",
          "1589:         log.debug(",
          "1590:             \"The master(id=%r) minion_master.pub key was not found at %s\",",
          "1591:             master.id,",
          "1592:             key_path,",
          "1593:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/support/pytest/helpers.py||tests/support/pytest/helpers.py": [
          "File: tests/support/pytest/helpers.py -> tests/support/pytest/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         log.debug(\"The minion(id=%r) key was not found at %s\", minion_id, key_path)",
          "177: @pytest.helpers.register",
          "178: def remove_stale_proxy_minion_cache_file(proxy_minion, minion_id=None):",
          "179:     cachefile = os.path.join(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: @pytest.helpers.register",
          "178: def remove_stale_master_key(master):",
          "179:     keys_path = os.path.join(master.config[\"pki_dir\"], \"master\")",
          "180:     for key_name in (\"master.pem\", \"master.pub\"):",
          "181:         key_path = os.path.join(keys_path, key_name)",
          "182:         if os.path.exists(key_path):",
          "183:             os.unlink(key_path)",
          "184:         else:",
          "185:             log.debug(",
          "186:                 \"The master(id=%r) %s key was not found at %s\",",
          "187:                 master.id,",
          "188:                 key_name,",
          "189:                 key_path,",
          "190:             )",
          "191:     key_path = os.path.join(master.config[\"pki_dir\"], \"minion\", \"minion_master.pub\")",
          "192:     if os.path.exists(key_path):",
          "193:         os.unlink(key_path)",
          "194:     else:",
          "195:         log.debug(",
          "196:             \"The master(id=%r) minion_master.pub key was not found at %s\",",
          "197:             master.id,",
          "198:             key_path,",
          "199:         )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e66e036ba817af0ac6454cff127f773ff7a90b3a",
      "candidate_info": {
        "commit_hash": "e66e036ba817af0ac6454cff127f773ff7a90b3a",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e66e036ba817af0ac6454cff127f773ff7a90b3a",
        "files": [
          ".github/actions/download-artifact/action.yml",
          ".github/actions/upload-artifact/action.yml",
          ".github/workflows/nightly.yml",
          ".github/workflows/staging.yml",
          ".github/workflows/templates/nightly.yml.jinja"
        ],
        "message": "Fix some more places where we need to use ``actions/{upload,download}-artifact@v3``\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/nightly.yml.jinja||.github/workflows/templates/nightly.yml.jinja"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/nightly.yml.jinja||.github/workflows/templates/nightly.yml.jinja": [
          "File: .github/workflows/templates/nightly.yml.jinja -> .github/workflows/templates/nightly.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:           cache-prefix: ${{ needs.prepare-workflow.outputs.cache-seed }}",
          "172:       - name: Download Repository Artifact",
          "174:         with:",
          "175:           name: salt-${{ needs.prepare-workflow.outputs.salt-version }}-<{ gh_environment }>-repo",
          "176:           path: repo/",
          "",
          "[Removed Lines]",
          "173:         uses: actions/download-artifact@v4",
          "",
          "[Added Lines]",
          "173:         uses: actions/download-artifact@v3",
          "174:         # This needs to be actions/download-artifact@v3 because we upload multiple artifacts",
          "175:         # under the same name something that actions/upload-artifact@v4 does not do.",
          "",
          "---------------"
        ]
      }
    }
  ]
}