{
  "cve_id": "CVE-2023-29471",
  "cve_desc": "Lightbend Alpakka Kafka before 5.0.0 logs its configuration as debug information, and thus log files may contain credentials (if plain cleartext login is configured). This occurs in akka.kafka.internal.KafkaConsumerActor.",
  "repo": "akka/alpakka-kafka",
  "patch_hash": "4011b704e93b22f6fd956aac516c7159d384644c",
  "patch_info": {
    "commit_hash": "4011b704e93b22f6fd956aac516c7159d384644c",
    "repo": "akka/alpakka-kafka",
    "commit_url": "https://github.com/akka/alpakka-kafka/commit/4011b704e93b22f6fd956aac516c7159d384644c",
    "files": [
      "core/src/main/scala/akka/kafka/ConsumerSettings.scala",
      "core/src/main/scala/akka/kafka/ProducerSettings.scala"
    ],
    "message": "security: limit printed Consumer/Producer properties by an allow-list",
    "before_after_code_files": [
      "core/src/main/scala/akka/kafka/ConsumerSettings.scala||core/src/main/scala/akka/kafka/ConsumerSettings.scala",
      "core/src/main/scala/akka/kafka/ProducerSettings.scala||core/src/main/scala/akka/kafka/ProducerSettings.scala"
    ]
  },
  "patch_diff": {
    "core/src/main/scala/akka/kafka/ConsumerSettings.scala||core/src/main/scala/akka/kafka/ConsumerSettings.scala": [
      "File: core/src/main/scala/akka/kafka/ConsumerSettings.scala -> core/src/main/scala/akka/kafka/ConsumerSettings.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "636:   def createKafkaConsumerCompletionStage(executor: Executor): CompletionStage[Consumer[K, V]] =",
      "637:     enriched.map(consumerFactory)(ExecutionContext.fromExecutor(executor)).toJava",
      "639:   override def toString: String = {",
      "640:     val kafkaClients = properties.toSeq",
      "641:       .map {",
      "645:       }",
      "646:       .sortBy(_._1)",
      "647:       .mkString(\",\")",
      "648:     \"akka.kafka.ConsumerSettings(\" +",
      "650:     s\"keyDeserializer=$keyDeserializerOpt,\" +",
      "651:     s\"valueDeserializer=$valueDeserializerOpt,\" +",
      "652:     s\"pollInterval=${pollInterval.toCoarsest},\" +",
      "",
      "[Removed Lines]",
      "642:         case (key, _) if key.endsWith(\".password\") =>",
      "643:           key -> \"[is set]\"",
      "644:         case t => t",
      "649:     s\"properties=$kafkaClients,\" +",
      "",
      "[Added Lines]",
      "639:   private final val propertiesAllowList = Set(",
      "640:     \"auto.offset.reset\",",
      "641:     \"auto.commit.interval.ms\",",
      "642:     \"enable.auto.commit\",",
      "643:     \"bootstrap.servers\",",
      "644:     \"enable.auto.commit\",",
      "645:     \"fetch.max.wait.ms\",",
      "646:     \"fetch.min.bytes\",",
      "647:     \"group.id\",",
      "648:     \"heartbeat.interval.ms\",",
      "649:     \"max.poll.interval.ms\",",
      "650:     \"max.poll.records\",",
      "651:     \"security.protocol\",",
      "652:     \"session.timeout.ms\"",
      "653:   )",
      "658:         case p @ (key, _) if propertiesAllowList.contains(key) => p",
      "659:         case (key, _) => key -> \"[reducted]\"",
      "664:     s\"properties={$kafkaClients},\" +",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "661:     s\"metadataRequestTimeout=${metadataRequestTimeout.toCoarsest},\" +",
      "662:     s\"drainingCheckInterval=${drainingCheckInterval.toCoarsest},\" +",
      "663:     s\"connectionCheckerSettings=$connectionCheckerSettings,\" +",
      "666:     s\"enrichAsync=${enrichAsync.map(_ => \"needs to be applied\")}\" +",
      "667:     \")\"",
      "668:   }",
      "",
      "[Removed Lines]",
      "664:     s\"partitionHandlerWarning=${partitionHandlerWarning.toCoarsest}\" +",
      "665:     s\"resetProtectionSettings=$resetProtectionSettings\" +",
      "",
      "[Added Lines]",
      "679:     s\"partitionHandlerWarning=${partitionHandlerWarning.toCoarsest},\" +",
      "680:     s\"resetProtectionSettings=$resetProtectionSettings,\" +",
      "",
      "---------------"
    ],
    "core/src/main/scala/akka/kafka/ProducerSettings.scala||core/src/main/scala/akka/kafka/ProducerSettings.scala": [
      "File: core/src/main/scala/akka/kafka/ProducerSettings.scala -> core/src/main/scala/akka/kafka/ProducerSettings.scala",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:                                enrichAsync,",
      "401:                                producerFactorySync)",
      "403:   override def toString: String = {",
      "404:     val kafkaClients = properties.toSeq",
      "405:       .map {",
      "409:       }",
      "410:       .sortBy(_._1)",
      "411:       .mkString(\",\")",
      "412:     \"akka.kafka.ProducerSettings(\" +",
      "414:     s\"keySerializer=$keySerializerOpt,\" +",
      "415:     s\"valueSerializer=$valueSerializerOpt,\" +",
      "416:     s\"closeTimeout=${closeTimeout.toCoarsest},\" +",
      "",
      "[Removed Lines]",
      "406:         case (key, _) if key.endsWith(\".password\") =>",
      "407:           key -> \"[is set]\"",
      "408:         case t => t",
      "413:     s\"properties=$kafkaClients,\" +",
      "",
      "[Added Lines]",
      "403:   private final val propertiesAllowList = Set(",
      "404:     \"acks\",",
      "405:     \"batch.num.messages\",",
      "406:     \"batch.size\",",
      "407:     \"bootstrap.servers\",",
      "408:     \"buffer.memory\",",
      "409:     \"client.dns.lookup\",",
      "410:     \"group.id\",",
      "411:     \"linger.ms\",",
      "412:     \"max.block.ms\",",
      "413:     \"max.in.flight.requests.per.connection\",",
      "414:     \"queue.buffering.max.messages\",",
      "415:     \"queue.buffering.max.ms\",",
      "416:     \"request.timeout.ms\",",
      "417:     \"retries\",",
      "418:     \"security.protocol\"",
      "419:   )",
      "424:         case p @ (key, _) if propertiesAllowList.contains(key) => p",
      "425:         case (key, _) => key -> \"[reducted]\"",
      "430:     s\"properties={$kafkaClients},\" +",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fd97ea18381a774de68d683b6bdf85895de729ba",
      "candidate_info": {
        "commit_hash": "fd97ea18381a774de68d683b6bdf85895de729ba",
        "repo": "akka/alpakka-kafka",
        "commit_url": "https://github.com/akka/alpakka-kafka/commit/fd97ea18381a774de68d683b6bdf85895de729ba",
        "files": [
          "core/src/main/scala/akka/kafka/ConsumerSettings.scala",
          "core/src/main/scala/akka/kafka/ProducerSettings.scala"
        ],
        "message": "security: limit printed Consumer/Producer properties by an allow-list (#1614)",
        "before_after_code_files": [
          "core/src/main/scala/akka/kafka/ConsumerSettings.scala||core/src/main/scala/akka/kafka/ConsumerSettings.scala",
          "core/src/main/scala/akka/kafka/ProducerSettings.scala||core/src/main/scala/akka/kafka/ProducerSettings.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/akka/alpakka-kafka/pull/1614"
        ],
        "olp_code_files": {
          "patch": [
            "core/src/main/scala/akka/kafka/ConsumerSettings.scala||core/src/main/scala/akka/kafka/ConsumerSettings.scala",
            "core/src/main/scala/akka/kafka/ProducerSettings.scala||core/src/main/scala/akka/kafka/ProducerSettings.scala"
          ],
          "candidate": [
            "core/src/main/scala/akka/kafka/ConsumerSettings.scala||core/src/main/scala/akka/kafka/ConsumerSettings.scala",
            "core/src/main/scala/akka/kafka/ProducerSettings.scala||core/src/main/scala/akka/kafka/ProducerSettings.scala"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/scala/akka/kafka/ConsumerSettings.scala||core/src/main/scala/akka/kafka/ConsumerSettings.scala": [
          "File: core/src/main/scala/akka/kafka/ConsumerSettings.scala -> core/src/main/scala/akka/kafka/ConsumerSettings.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:   def createKafkaConsumerCompletionStage(executor: Executor): CompletionStage[Consumer[K, V]] =",
          "657:     enriched.map(consumerFactory)(ExecutionContext.fromExecutor(executor)).toJava",
          "659:   override def toString: String = {",
          "660:     val kafkaClients = properties.toSeq",
          "661:       .map {",
          "665:       }",
          "666:       .sortBy(_._1)",
          "667:       .mkString(\",\")",
          "668:     \"akka.kafka.ConsumerSettings(\" +",
          "670:     s\"keyDeserializer=$keyDeserializerOpt,\" +",
          "671:     s\"valueDeserializer=$valueDeserializerOpt,\" +",
          "672:     s\"pollInterval=${pollInterval.toCoarsest},\" +",
          "",
          "[Removed Lines]",
          "662:         case (key, _) if key.endsWith(\".password\") =>",
          "663:           key -> \"[is set]\"",
          "664:         case t => t",
          "669:     s\"properties=$kafkaClients,\" +",
          "",
          "[Added Lines]",
          "659:   private final val propertiesAllowList = Set(",
          "660:     \"auto.offset.reset\",",
          "661:     \"auto.commit.interval.ms\",",
          "662:     \"enable.auto.commit\",",
          "663:     \"bootstrap.servers\",",
          "664:     \"enable.auto.commit\",",
          "665:     \"fetch.max.wait.ms\",",
          "666:     \"fetch.min.bytes\",",
          "667:     \"group.id\",",
          "668:     \"heartbeat.interval.ms\",",
          "669:     \"max.poll.interval.ms\",",
          "670:     \"max.poll.records\",",
          "671:     \"security.protocol\",",
          "672:     \"session.timeout.ms\"",
          "673:   )",
          "678:         case p @ (key, _) if propertiesAllowList.contains(key) => p",
          "679:         case (key, _) => key -> \"[reducted]\"",
          "684:     s\"properties={$kafkaClients},\" +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "681:     s\"metadataRequestTimeout=${metadataRequestTimeout.toCoarsest},\" +",
          "682:     s\"drainingCheckInterval=${drainingCheckInterval.toCoarsest},\" +",
          "683:     s\"connectionCheckerSettings=$connectionCheckerSettings,\" +",
          "686:     s\"enrichAsync=${enrichAsync.map(_ => \"needs to be applied\")}\" +",
          "687:     \")\"",
          "688:   }",
          "",
          "[Removed Lines]",
          "684:     s\"partitionHandlerWarning=${partitionHandlerWarning.toCoarsest}\" +",
          "685:     s\"resetProtectionSettings=$resetProtectionSettings\" +",
          "",
          "[Added Lines]",
          "699:     s\"partitionHandlerWarning=${partitionHandlerWarning.toCoarsest},\" +",
          "700:     s\"resetProtectionSettings=$resetProtectionSettings,\" +",
          "",
          "---------------"
        ],
        "core/src/main/scala/akka/kafka/ProducerSettings.scala||core/src/main/scala/akka/kafka/ProducerSettings.scala": [
          "File: core/src/main/scala/akka/kafka/ProducerSettings.scala -> core/src/main/scala/akka/kafka/ProducerSettings.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:                                enrichAsync,",
          "401:                                producerFactorySync)",
          "403:   override def toString: String = {",
          "404:     val kafkaClients = properties.toSeq",
          "405:       .map {",
          "409:       }",
          "410:       .sortBy(_._1)",
          "411:       .mkString(\",\")",
          "412:     \"akka.kafka.ProducerSettings(\" +",
          "414:     s\"keySerializer=$keySerializerOpt,\" +",
          "415:     s\"valueSerializer=$valueSerializerOpt,\" +",
          "416:     s\"closeTimeout=${closeTimeout.toCoarsest},\" +",
          "",
          "[Removed Lines]",
          "406:         case (key, _) if key.endsWith(\".password\") =>",
          "407:           key -> \"[is set]\"",
          "408:         case t => t",
          "413:     s\"properties=$kafkaClients,\" +",
          "",
          "[Added Lines]",
          "403:   private final val propertiesAllowList = Set(",
          "404:     \"acks\",",
          "405:     \"batch.num.messages\",",
          "406:     \"batch.size\",",
          "407:     \"bootstrap.servers\",",
          "408:     \"buffer.memory\",",
          "409:     \"client.dns.lookup\",",
          "410:     \"group.id\",",
          "411:     \"linger.ms\",",
          "412:     \"max.block.ms\",",
          "413:     \"max.in.flight.requests.per.connection\",",
          "414:     \"queue.buffering.max.messages\",",
          "415:     \"queue.buffering.max.ms\",",
          "416:     \"request.timeout.ms\",",
          "417:     \"retries\",",
          "418:     \"security.protocol\"",
          "419:   )",
          "424:         case p @ (key, _) if propertiesAllowList.contains(key) => p",
          "425:         case (key, _) => key -> \"[reducted]\"",
          "430:     s\"properties={$kafkaClients},\" +",
          "",
          "---------------"
        ]
      }
    }
  ]
}