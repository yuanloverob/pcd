{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a86334b7047672ec83582e4738bd352d88822f79",
      "candidate_info": {
        "commit_hash": "a86334b7047672ec83582e4738bd352d88822f79",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a86334b7047672ec83582e4738bd352d88822f79",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java",
          "ambari-server/src/test/resources/example_quicklinks_profile.json",
          "ambari-server/src/test/resources/inconsistent_quicklinks_profile_4.json"
        ],
        "message": "[AMBARI-24938] quick link profiles can override link url (benyoka) (#2646) (#2829)\n\n* AMBARI-24938 quick link profiles can override link url (benyoka)\n\n* AMBARI-24938 new unit test in QuickLinkArtifactResourceProviderTest (benyoka)\n\n* AMBARI-24938 review findings + check style issue + unit test fix (benyoka)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java||ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:           }",
          "182:         }",
          "186:         List<Resource> serviceResources = new ArrayList<>();",
          "187:         for (QuickLinksConfigurationInfo quickLinksConfigurationInfo : serviceQuickLinks) {",
          "",
          "[Removed Lines]",
          "184:         setVisibility(serviceInfo.getName(), serviceQuickLinks);",
          "",
          "[Added Lines]",
          "184:         setVisibilityAndOverrides(serviceInfo.getName(), serviceQuickLinks);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:     QuickLinkVisibilityController visibilityController = getManagementController().getQuicklinkVisibilityController();",
          "214:     for(QuickLinksConfigurationInfo configurationInfo: serviceQuickLinks) {",
          "215:       for (QuickLinks links: configurationInfo.getQuickLinksConfigurationMap().values()) {",
          "216:         for(Link link: links.getQuickLinksConfiguration().getLinks()) {",
          "217:           link.setVisible(visibilityController.isVisible(serviceName, link));",
          "218:         }",
          "219:       }",
          "220:     }",
          "",
          "[Removed Lines]",
          "211:   private void setVisibility(String serviceName, List<QuickLinksConfigurationInfo> serviceQuickLinks) {",
          "",
          "[Added Lines]",
          "211:   private void setVisibilityAndOverrides(String serviceName, List<QuickLinksConfigurationInfo> serviceQuickLinks) {",
          "218:           visibilityController.getUrlOverride(serviceName, link).ifPresent(link::setUrl);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/AcceptAllFilter.java"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Component.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "27: import com.google.common.base.Preconditions;",
          "33: @JsonIgnoreProperties(ignoreUnknown = true)",
          "34: public class Component {",
          "35:   @JsonProperty(\"name\")",
          "",
          "[Removed Lines]",
          "21: import java.util.List;",
          "23: import org.codehaus.jackson.annotate.JsonIgnoreProperties;",
          "24: import org.codehaus.jackson.annotate.JsonProperty;",
          "25: import org.codehaus.jackson.map.annotate.JsonSerialize;",
          "32: @JsonSerialize(include= JsonSerialize.Inclusion.NON_NULL)",
          "",
          "[Added Lines]",
          "21: import static java.util.Collections.emptyList;",
          "23: import java.util.List;",
          "25: import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
          "26: import com.fasterxml.jackson.annotation.JsonInclude;",
          "27: import com.fasterxml.jackson.annotation.JsonProperty;",
          "33: @JsonInclude(JsonInclude.Include.NON_NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:   public List<Filter> getFilters() {",
          "62:   }",
          "64:   public void setFilters(List<Filter> filters) {",
          "",
          "[Removed Lines]",
          "61:     return filters;",
          "",
          "[Added Lines]",
          "62:     return null != filters ? filters : emptyList();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/DefaultQuickLinkVisibilityController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "21: import java.util.Collection;",
          "22: import java.util.Collections;",
          "23: import java.util.HashMap;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "28: import java.util.Set;",
          "30: import javax.annotation.Nonnull;",
          "31: import javax.annotation.Nullable;",
          "33: import org.apache.ambari.server.state.quicklinks.Link;",
          "40: public class DefaultQuickLinkVisibilityController implements QuickLinkVisibilityController {",
          "41:   private final FilterEvaluator globalRules;",
          "42:   private final Map<String, FilterEvaluator> serviceRules = new HashMap<>();",
          "45:   public DefaultQuickLinkVisibilityController(QuickLinksProfile profile) throws QuickLinksProfileEvaluationException {",
          "46:     int filterCount = size(profile.getFilters());",
          "47:     globalRules = new FilterEvaluator(profile.getFilters());",
          "49:       filterCount += size(service.getFilters());",
          "50:       serviceRules.put(service.getName(), new FilterEvaluator(service.getFilters()));",
          "52:         filterCount += size(component.getFilters());",
          "54:             new FilterEvaluator(component.getFilters()));",
          "55:       }",
          "56:     }",
          "57:     if (filterCount == 0) {",
          "58:       throw new QuickLinksProfileEvaluationException(\"At least one filter must be defined.\");",
          "59:     }",
          "60:   }",
          "",
          "[Removed Lines]",
          "24: import java.util.HashSet;",
          "27: import java.util.Objects;",
          "35: import com.google.common.base.Optional;",
          "43:   private final Map<ServiceComponent, FilterEvaluator> componentRules = new HashMap<>();",
          "48:     for (Service service: nullToEmptyList(profile.getServices())) {",
          "51:       for (Component component: nullToEmptyList(service.getComponents())) {",
          "53:         componentRules.put(ServiceComponent.of(service.getName(), component.getName()),",
          "",
          "[Added Lines]",
          "21: import static java.util.stream.Collectors.joining;",
          "22: import static java.util.stream.Collectors.toMap;",
          "29: import java.util.Optional;",
          "36: import org.apache.commons.lang3.tuple.Pair;",
          "37: import org.slf4j.Logger;",
          "38: import org.slf4j.LoggerFactory;",
          "40: import com.google.common.collect.Sets;",
          "46:   private static final Logger LOG = LoggerFactory.getLogger(DefaultQuickLinkVisibilityController.class);",
          "53:   private final Map<Pair<String, String>, FilterEvaluator> componentRules = new HashMap<>();",
          "57:   private final Map<Pair<String, String>, String> urlOverrides = new HashMap<>();",
          "63:     for (Service service: profile.getServices()) {",
          "66:       for (Component component: service.getComponents()) {",
          "68:         componentRules.put(Pair.of(service.getName(), component.getName()),",
          "77:     String globalOverrides = LinkNameFilter.getLinkNameFilters(profile.getFilters().stream())",
          "78:       .filter(f -> f.getLinkUrl() != null)",
          "79:       .map(f -> f.getLinkName() + \" -> \" + f.getLinkUrl())",
          "80:       .collect(joining(\", \"));",
          "81:     if (!globalOverrides.isEmpty()) {",
          "82:       LOG.warn(\"Link url overrides only work on service and component levels. The following global overrides will be \" +",
          "83:         \"ignored: {}\", globalOverrides);",
          "84:     }",
          "85:     for (Service service : profile.getServices()) {",
          "86:       urlOverrides.putAll(getUrlOverrides(service.getName(), service.getFilters()));",
          "88:       for (Component component : service.getComponents()) {",
          "89:         Map<Pair<String, String>, String> componentUrlOverrides = getUrlOverrides(service.getName(), component.getFilters());",
          "90:         Set<Pair<String, String>> duplicateOverrides = Sets.intersection(urlOverrides.keySet(), componentUrlOverrides.keySet());",
          "91:         if (!duplicateOverrides.isEmpty()) {",
          "92:           LOG.warn(\"Duplicate url overrides in quick links profile: {}\", duplicateOverrides);",
          "93:         }",
          "94:         urlOverrides.putAll(componentUrlOverrides);",
          "95:       }",
          "96:     }",
          "97:   }",
          "99:   private Map<Pair<String, String>, String> getUrlOverrides(String serviceName, Collection<Filter> filters) {",
          "100:     return filters.stream()",
          "101:       .filter( f -> f instanceof LinkNameFilter && null != ((LinkNameFilter)f).getLinkUrl() )",
          "102:       .map( f -> {",
          "103:         LinkNameFilter lnf = (LinkNameFilter)f;",
          "104:         return Pair.of(Pair.of(serviceName, lnf.getLinkName()), lnf.getLinkUrl());",
          "105:       })",
          "106:       .collect( toMap(Pair::getKey, Pair::getValue) );",
          "107:   }",
          "109:   @Override",
          "110:   public Optional<String> getUrlOverride(@Nonnull String service, @Nonnull Link quickLink) {",
          "111:     return Optional.ofNullable( urlOverrides.get(Pair.of(service, quickLink.getName())) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     }",
          "82:   }",
          "84:   private int size(@Nullable Collection<?> collection) {",
          "",
          "[Removed Lines]",
          "81:     return globalRules.isVisible(quickLink).or(false);",
          "",
          "[Added Lines]",
          "133:     return globalRules.isVisible(quickLink).orElse(false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:   private Optional<Boolean> evaluateComponentRules(@Nonnull String service, @Nonnull Link quickLink) {",
          "89:     if (null == quickLink.getComponentName()) {",
          "91:     }",
          "92:     else {",
          "95:     }",
          "96:   }",
          "98:   private Optional<Boolean> evaluateServiceRules(@Nonnull String service, @Nonnull Link quickLink) {",
          "99:     return serviceRules.containsKey(service) ?",
          "101:   }",
          "103:   static <T> List<T> nullToEmptyList(@Nullable List<T> items) {",
          "104:     return items != null ? items : Collections.emptyList();",
          "105:   }",
          "182: }",
          "",
          "[Removed Lines]",
          "90:       return Optional.absent();",
          "93:       FilterEvaluator componentEvaluator = componentRules.get(ServiceComponent.of(service, quickLink.getComponentName()));",
          "94:       return componentEvaluator != null ? componentEvaluator.isVisible(quickLink) : Optional.absent();",
          "100:         serviceRules.get(service).isVisible(quickLink) : Optional.absent();",
          "106: }",
          "122: class FilterEvaluator {",
          "123:   private final Map<String, Boolean> linkNameFilters = new HashMap<>();",
          "124:   private final Set<String> showAttributes = new HashSet<>();",
          "125:   private final Set<String> hideAttributes = new HashSet<>();",
          "126:   private Optional<Boolean> acceptAllFilter = Optional.absent();",
          "128:   FilterEvaluator(List<Filter> filters) throws QuickLinksProfileEvaluationException {",
          "129:     for (Filter filter: DefaultQuickLinkVisibilityController.nullToEmptyList(filters)) {",
          "130:       if (filter instanceof LinkNameFilter) {",
          "131:         String linkName = ((LinkNameFilter)filter).getLinkName();",
          "132:         if (linkNameFilters.containsKey(linkName) && linkNameFilters.get(linkName) != filter.isVisible()) {",
          "133:           throw new QuickLinksProfileEvaluationException(\"Contradicting filters for link name [\" + linkName + \"]\");",
          "134:         }",
          "135:         linkNameFilters.put(linkName, filter.isVisible());",
          "136:       }",
          "137:       else if (filter instanceof LinkAttributeFilter) {",
          "138:         String linkAttribute = ((LinkAttributeFilter)filter).getLinkAttribute();",
          "139:         if (filter.isVisible()) {",
          "140:           showAttributes.add(linkAttribute);",
          "141:         }",
          "142:         else {",
          "143:           hideAttributes.add(linkAttribute);",
          "144:         }",
          "145:         if (showAttributes.contains(linkAttribute) && hideAttributes.contains(linkAttribute)) {",
          "146:           throw new QuickLinksProfileEvaluationException(\"Contradicting filters for link attribute [\" + linkAttribute + \"]\");",
          "147:         }",
          "148:       }",
          "150:       else {",
          "151:         if (acceptAllFilter.isPresent() && !acceptAllFilter.get().equals(filter.isVisible())) {",
          "152:           throw new QuickLinksProfileEvaluationException(\"Contradicting accept-all filters.\");",
          "153:         }",
          "154:         acceptAllFilter = Optional.of(filter.isVisible());",
          "155:       }",
          "156:     }",
          "157:   }",
          "164:   Optional<Boolean> isVisible(Link quickLink) {",
          "166:     if (linkNameFilters.containsKey(quickLink.getName())) {",
          "167:       return Optional.of(linkNameFilters.get(quickLink.getName()));",
          "168:     }",
          "172:     for (String attribute: DefaultQuickLinkVisibilityController.nullToEmptyList(quickLink.getAttributes())) {",
          "173:       if (hideAttributes.contains(attribute)) return Optional.of(false);",
          "174:     }",
          "175:     for (String attribute: DefaultQuickLinkVisibilityController.nullToEmptyList(quickLink.getAttributes())) {",
          "176:       if (showAttributes.contains(attribute)) return Optional.of(true);",
          "177:     }",
          "180:     return acceptAllFilter;",
          "181:   }",
          "187: class ServiceComponent {",
          "188:   private final String service;",
          "189:   private final String component;",
          "191:   ServiceComponent(String service, String component) {",
          "192:     this.service = service;",
          "193:     this.component = component;",
          "194:   }",
          "196:   static ServiceComponent of(String service, String component) {",
          "197:     return new ServiceComponent(service, component);",
          "198:   }",
          "200:   @Override",
          "201:   public boolean equals(Object o) {",
          "202:     if (this == o) return true;",
          "203:     if (o == null || getClass() != o.getClass()) return false;",
          "204:     ServiceComponent that = (ServiceComponent) o;",
          "205:     return Objects.equals(service, that.service) &&",
          "206:         Objects.equals(component, that.component);",
          "207:   }",
          "209:   @Override",
          "210:   public int hashCode() {",
          "211:     return Objects.hash(service, component);",
          "212:   }",
          "213: }",
          "",
          "[Added Lines]",
          "142:       return Optional.empty();",
          "145:       FilterEvaluator componentEvaluator = componentRules.get(Pair.of(service, quickLink.getComponentName()));",
          "146:       return componentEvaluator != null ? componentEvaluator.isVisible(quickLink) : Optional.empty();",
          "152:         serviceRules.get(service).isVisible(quickLink) : Optional.empty();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Filter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "21: import org.apache.ambari.server.state.quicklinks.Link;",
          "26: import com.google.common.base.Preconditions;",
          "",
          "[Removed Lines]",
          "22: import org.codehaus.jackson.annotate.JsonIgnoreProperties;",
          "23: import org.codehaus.jackson.annotate.JsonProperty;",
          "24: import org.codehaus.jackson.map.annotate.JsonSerialize;",
          "",
          "[Added Lines]",
          "23: import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
          "24: import com.fasterxml.jackson.annotation.JsonProperty;",
          "25: import com.fasterxml.jackson.databind.annotation.JsonSerialize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   }",
          "68:   static LinkNameFilter linkNameFilter(String linkName, boolean visible) {",
          "69:     Preconditions.checkNotNull(linkName, \"Link name must not be null\");",
          "70:     LinkNameFilter linkNameFilter = new LinkNameFilter();",
          "71:     linkNameFilter.setLinkName(linkName);",
          "72:     linkNameFilter.setVisible(visible);",
          "73:     return linkNameFilter;",
          "74:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     return linkNameFilter(linkName, null, visible);",
          "70:   }",
          "72:   static LinkNameFilter linkNameFilter(String linkName, String linkUrl, boolean visible) {",
          "76:     linkNameFilter.setLinkUrl(linkUrl);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "21: import java.util.HashMap;",
          "22: import java.util.HashSet;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "25: import java.util.Optional;",
          "26: import java.util.Set;",
          "28: import org.apache.ambari.server.state.quicklinks.Link;",
          "44: class FilterEvaluator {",
          "45:   private final Map<String, Boolean> linkNameFilters = new HashMap<>();",
          "46:   private final Set<String> showAttributes = new HashSet<>();",
          "47:   private final Set<String> hideAttributes = new HashSet<>();",
          "48:   private Optional<Boolean> acceptAllFilter = Optional.empty();",
          "50:   FilterEvaluator(List<Filter> filters) throws QuickLinksProfileEvaluationException {",
          "51:     for (Filter filter: DefaultQuickLinkVisibilityController.nullToEmptyList(filters)) {",
          "52:       if (filter instanceof LinkNameFilter) {",
          "53:         String linkName = ((LinkNameFilter)filter).getLinkName();",
          "54:         if (linkNameFilters.containsKey(linkName) && linkNameFilters.get(linkName) != filter.isVisible()) {",
          "55:           throw new QuickLinksProfileEvaluationException(\"Contradicting filters for link name [\" + linkName + \"]\");",
          "56:         }",
          "57:         linkNameFilters.put(linkName, filter.isVisible());",
          "58:       }",
          "59:       else if (filter instanceof LinkAttributeFilter) {",
          "60:         String linkAttribute = ((LinkAttributeFilter)filter).getLinkAttribute();",
          "61:         if (filter.isVisible()) {",
          "62:           showAttributes.add(linkAttribute);",
          "63:         }",
          "64:         else {",
          "65:           hideAttributes.add(linkAttribute);",
          "66:         }",
          "67:         if (showAttributes.contains(linkAttribute) && hideAttributes.contains(linkAttribute)) {",
          "68:           throw new QuickLinksProfileEvaluationException(\"Contradicting filters for link attribute [\" + linkAttribute + \"]\");",
          "69:         }",
          "70:       }",
          "72:       else {",
          "73:         if (acceptAllFilter.isPresent() && !acceptAllFilter.get().equals(filter.isVisible())) {",
          "74:           throw new QuickLinksProfileEvaluationException(\"Contradicting accept-all filters.\");",
          "75:         }",
          "76:         acceptAllFilter = Optional.of(filter.isVisible());",
          "77:       }",
          "78:     }",
          "79:   }",
          "86:   Optional<Boolean> isVisible(Link quickLink) {",
          "88:     if (linkNameFilters.containsKey(quickLink.getName())) {",
          "89:       return Optional.of(linkNameFilters.get(quickLink.getName()));",
          "90:     }",
          "94:     for (String attribute: DefaultQuickLinkVisibilityController.nullToEmptyList(quickLink.getAttributes())) {",
          "95:       if (hideAttributes.contains(attribute)) return Optional.of(false);",
          "96:     }",
          "97:     for (String attribute: DefaultQuickLinkVisibilityController.nullToEmptyList(quickLink.getAttributes())) {",
          "98:       if (showAttributes.contains(attribute)) return Optional.of(true);",
          "99:     }",
          "102:     return acceptAllFilter;",
          "103:   }",
          "104: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkAttributeFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Objects;",
          "23: import org.apache.ambari.server.state.quicklinks.Link;",
          "",
          "[Removed Lines]",
          "24: import org.codehaus.jackson.annotate.JsonProperty;",
          "",
          "[Added Lines]",
          "25: import com.fasterxml.jackson.annotation.JsonProperty;",
          "26: import com.google.common.base.MoreObjects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   public int hashCode() {",
          "59:     return Objects.hash(isVisible(), linkAttribute);",
          "60:   }",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   @Override",
          "65:   public String toString() {",
          "66:     return MoreObjects.toStringHelper(this)",
          "67:       .add(\"linkAttribute\", linkAttribute)",
          "68:       .toString();",
          "69:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/LinkNameFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "21: import java.util.Objects;",
          "23: import org.apache.ambari.server.state.quicklinks.Link;",
          "29: public class LinkNameFilter extends Filter {",
          "31:   static final String LINK_NAME = \"link_name\";",
          "33:   @JsonProperty(LINK_NAME)",
          "34:   private String linkName;",
          "36:   public String getLinkName() {",
          "37:     return linkName;",
          "38:   }",
          "40:   public void setLinkName(String linkName) {",
          "41:     this.linkName = linkName;",
          "42:   }",
          "44:   @Override",
          "45:   public boolean accept(Link link) {",
          "46:     return Objects.equals(link.getName(), linkName);",
          "",
          "[Removed Lines]",
          "24: import org.codehaus.jackson.annotate.JsonProperty;",
          "",
          "[Added Lines]",
          "22: import java.util.stream.Stream;",
          "24: import javax.annotation.Nullable;",
          "27: import org.apache.ambari.server.utils.StreamUtils;",
          "29: import com.fasterxml.jackson.annotation.JsonInclude;",
          "30: import com.fasterxml.jackson.annotation.JsonProperty;",
          "31: import com.google.common.base.MoreObjects;",
          "37: @JsonInclude(JsonInclude.Include.NON_NULL)",
          "41:   static final String LINK_URL = \"link_url\";",
          "49:   @JsonProperty(LINK_URL)",
          "50:   private String linkUrl;",
          "52:   @JsonProperty(LINK_NAME)",
          "57:   @JsonProperty(LINK_NAME)",
          "62:   @JsonProperty(LINK_URL)",
          "63:   public @Nullable String getLinkUrl() {",
          "64:     return linkUrl;",
          "65:   }",
          "67:   @JsonProperty(LINK_URL)",
          "68:   public void setLinkUrl(@Nullable String linkUrl) {",
          "69:     this.linkUrl = linkUrl;",
          "70:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     if (this == o) return true;",
          "52:     if (o == null || getClass() != o.getClass()) return false;",
          "53:     LinkNameFilter that = (LinkNameFilter) o;",
          "55:   }",
          "57:   @Override",
          "58:   public int hashCode() {",
          "60:   }",
          "61: }",
          "",
          "[Removed Lines]",
          "54:     return isVisible() == that.isVisible() && Objects.equals(linkName, that.linkName);",
          "59:     return Objects.hash(isVisible(), linkName);",
          "",
          "[Added Lines]",
          "82:     return Objects.equals(linkName, that.linkName) &&",
          "83:       Objects.equals(linkUrl, that.linkUrl) &&",
          "84:       isVisible() == that.isVisible();",
          "89:     return Objects.hash(linkName, linkUrl);",
          "90:   }",
          "92:   @Override",
          "93:   public String toString() {",
          "94:     return MoreObjects.toStringHelper(this)",
          "95:       .add(\"linkName\", linkName)",
          "96:       .add(\"linkUrl\", linkUrl)",
          "97:       .add(\"visible\", isVisible())",
          "98:       .toString();",
          "99:   }",
          "101:   static Stream<LinkNameFilter> getLinkNameFilters(Stream<Filter> input) {",
          "102:     return StreamUtils.instancesOf(input, LinkNameFilter.class);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "22: import javax.annotation.Nonnull;",
          "24: import org.apache.ambari.server.state.quicklinks.Link;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   boolean isVisible(@Nonnull String service, @Nonnull Link quickLink);",
          "36: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   Optional<String> getUrlOverride(@Nonnull String service, @Nonnull Link quickLink);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "21: import java.util.List;",
          "",
          "[Removed Lines]",
          "23: import org.codehaus.jackson.annotate.JsonIgnoreProperties;",
          "24: import org.codehaus.jackson.annotate.JsonProperty;",
          "25: import org.codehaus.jackson.map.annotate.JsonSerialize;",
          "",
          "[Added Lines]",
          "21: import static java.util.Collections.emptyList;",
          "25: import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
          "26: import com.fasterxml.jackson.annotation.JsonInclude;",
          "27: import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: @JsonIgnoreProperties(ignoreUnknown = true)",
          "42: public class QuickLinksProfile {",
          "",
          "[Removed Lines]",
          "40: @JsonSerialize(include= JsonSerialize.Inclusion.NON_NULL)",
          "",
          "[Added Lines]",
          "42: @JsonInclude(JsonInclude.Include.NON_EMPTY)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   public List<Service> getServices() {",
          "71:   }",
          "73:   public void setServices(List<Service> services) {",
          "",
          "[Removed Lines]",
          "70:     return services;",
          "",
          "[Added Lines]",
          "72:     return services != null ? services : emptyList();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:   public List<Filter> getFilters() {",
          "82:   }",
          "84:   public void setFilters(List<Filter> filters) {",
          "",
          "[Removed Lines]",
          "81:     return filters;",
          "",
          "[Added Lines]",
          "83:     return null != filters ? filters : emptyList();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.apache.ambari.server.state.quicklinksprofile.Filter.VISIBLE;",
          "22: import static org.apache.ambari.server.state.quicklinksprofile.LinkAttributeFilter.LINK_ATTRIBUTE;",
          "23: import static org.apache.ambari.server.state.quicklinksprofile.LinkNameFilter.LINK_NAME;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.apache.ambari.server.state.quicklinksprofile.LinkNameFilter.LINK_URL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   public static final String COMPONENTS = \"components\";",
          "45:   public static final String FILTERS = \"filters\";",
          "46:   public static final Set<String> ALLOWED_FILTER_ATTRIBUTES =",
          "",
          "[Removed Lines]",
          "47:       ImmutableSet.of(VISIBLE, LINK_NAME, LINK_ATTRIBUTE);",
          "",
          "[Added Lines]",
          "48:       ImmutableSet.of(VISIBLE, LINK_NAME, LINK_URL, LINK_ATTRIBUTE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:           invalidAttributes);",
          "118:       String linkName = filterAsMap.get(LINK_NAME);",
          "119:       String attributeName = filterAsMap.get(LINK_ATTRIBUTE);",
          "120:       boolean visible = Boolean.parseBoolean(filterAsMap.get(VISIBLE));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:       String linkUrl = filterAsMap.get(LINK_URL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:           linkName,",
          "126:           attributeName);",
          "128:       if (null != linkName) {",
          "130:       }",
          "131:       else if (null != attributeName) {",
          "132:         filters.add(Filter.linkAttributeFilter(attributeName, visible));",
          "",
          "[Removed Lines]",
          "129:         filters.add(Filter.linkNameFilter(linkName, visible));",
          "",
          "[Added Lines]",
          "130:       Preconditions.checkArgument(null == linkUrl || null != linkName,",
          "131:         \"Invalid filter. Link url can only be applied to link name filters. link_url: %s\",",
          "132:         linkUrl);",
          "135:         filters.add(Filter.linkNameFilter(linkName, linkUrl, visible));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.ArrayList;",
          "24: import java.util.List;",
          "36: import com.google.common.collect.ImmutableList;",
          "37: import com.google.common.io.Resources;",
          "",
          "[Removed Lines]",
          "26: import org.codehaus.jackson.JsonParseException;",
          "27: import org.codehaus.jackson.JsonParser;",
          "28: import org.codehaus.jackson.JsonProcessingException;",
          "29: import org.codehaus.jackson.Version;",
          "30: import org.codehaus.jackson.map.DeserializationContext;",
          "31: import org.codehaus.jackson.map.ObjectMapper;",
          "32: import org.codehaus.jackson.map.deser.std.StdDeserializer;",
          "33: import org.codehaus.jackson.map.module.SimpleModule;",
          "34: import org.codehaus.jackson.node.ObjectNode;",
          "",
          "[Added Lines]",
          "26: import com.fasterxml.jackson.annotation.JsonInclude;",
          "27: import com.fasterxml.jackson.core.JsonParseException;",
          "28: import com.fasterxml.jackson.core.JsonParser;",
          "29: import com.fasterxml.jackson.core.JsonProcessingException;",
          "30: import com.fasterxml.jackson.core.Version;",
          "31: import com.fasterxml.jackson.databind.DeserializationContext;",
          "32: import com.fasterxml.jackson.databind.ObjectMapper;",
          "33: import com.fasterxml.jackson.databind.deser.std.StdDeserializer;",
          "34: import com.fasterxml.jackson.databind.module.SimpleModule;",
          "35: import com.fasterxml.jackson.databind.node.ObjectNode;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   public QuickLinksProfileParser() {",
          "46:     SimpleModule module =",
          "48:     module.addDeserializer(Filter.class, new QuickLinksFilterDeserializer());",
          "49:     mapper.registerModule(module);",
          "50:   }",
          "53:   public QuickLinksProfile parse(byte[] input) throws IOException {",
          "54:     return mapper.readValue(input, QuickLinksProfile.class);",
          "55:   }",
          "",
          "[Removed Lines]",
          "47:         new SimpleModule(\"Quick Links Parser\", new Version(1, 0, 0, null));",
          "",
          "[Added Lines]",
          "47:         new SimpleModule(\"Quick Links Parser\", new Version(1, 0, 0, null, null, null));",
          "50:     mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   @Override",
          "92:   public Filter deserialize (JsonParser parser, DeserializationContext context) throws IOException, JsonProcessingException {",
          "93:     ObjectMapper mapper = (ObjectMapper) parser.getCodec();",
          "95:     Class<? extends Filter> filterClass = null;",
          "96:     List<String> invalidAttributes = new ArrayList<>();",
          "98:       switch(fieldName) {",
          "99:         case LinkAttributeFilter.LINK_ATTRIBUTE:",
          "100:           if (null != filterClass) {",
          "102:           }",
          "103:           filterClass = LinkAttributeFilter.class;",
          "104:           break;",
          "105:         case LinkNameFilter.LINK_NAME:",
          "108:           }",
          "109:           filterClass = LinkNameFilter.class;",
          "110:           break;",
          "",
          "[Removed Lines]",
          "94:     ObjectNode root = (ObjectNode) mapper.readTree(parser);",
          "97:     for (String fieldName: ImmutableList.copyOf(root.getFieldNames())) {",
          "101:             throw new JsonParseException(PARSE_ERROR_MESSAGE_AMBIGUOUS_FILTER, parser.getCurrentLocation());",
          "106:           if (null != filterClass) {",
          "107:             throw new JsonParseException(PARSE_ERROR_MESSAGE_AMBIGUOUS_FILTER, parser.getCurrentLocation());",
          "",
          "[Added Lines]",
          "94:     ObjectNode root = mapper.readTree(parser);",
          "97:     for (String fieldName: ImmutableList.copyOf(root.fieldNames())) {",
          "101:             throw new JsonParseException(parser, PARSE_ERROR_MESSAGE_AMBIGUOUS_FILTER, parser.getCurrentLocation());",
          "106:         case LinkNameFilter.LINK_URL:",
          "107:           if (null != filterClass && !filterClass.equals(LinkNameFilter.class)) {",
          "108:             throw new JsonParseException(parser, PARSE_ERROR_MESSAGE_AMBIGUOUS_FILTER, parser.getCurrentLocation());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:       }",
          "117:     }",
          "118:     if (!invalidAttributes.isEmpty()) {",
          "120:           parser.getCurrentLocation());",
          "121:     }",
          "122:     if (null == filterClass) {",
          "123:       filterClass = AcceptAllFilter.class;",
          "124:     }",
          "126:   }",
          "127: }",
          "",
          "[Removed Lines]",
          "119:       throw new JsonParseException(PARSE_ERROR_MESSAGE_INVALID_JSON_TAG + invalidAttributes,",
          "125:     return mapper.readValue(root, filterClass);",
          "",
          "[Added Lines]",
          "120:       throw new JsonParseException(parser, PARSE_ERROR_MESSAGE_INVALID_JSON_TAG + invalidAttributes,",
          "126:     return mapper.readValue(root.traverse(), filterClass);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/Service.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "27: import com.google.common.base.Preconditions;",
          "33: @JsonIgnoreProperties(ignoreUnknown = true)",
          "34: public class Service {",
          "35:   @JsonProperty(\"name\")",
          "",
          "[Removed Lines]",
          "21: import java.util.List;",
          "23: import org.codehaus.jackson.annotate.JsonIgnoreProperties;",
          "24: import org.codehaus.jackson.annotate.JsonProperty;",
          "25: import org.codehaus.jackson.map.annotate.JsonSerialize;",
          "32: @JsonSerialize(include= JsonSerialize.Inclusion.NON_NULL)",
          "",
          "[Added Lines]",
          "21: import static java.util.Collections.emptyList;",
          "23: import java.util.List;",
          "25: import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
          "26: import com.fasterxml.jackson.annotation.JsonInclude;",
          "27: import com.fasterxml.jackson.annotation.JsonProperty;",
          "33: @JsonInclude(JsonInclude.Include.NON_EMPTY)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   public List<Component> getComponents() {",
          "66:   }",
          "68:   public void setComponents(List<Component> components) {",
          "",
          "[Removed Lines]",
          "65:     return components;",
          "",
          "[Added Lines]",
          "66:     return null != components ? components : emptyList();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   public List<Filter> getFilters() {",
          "77:   }",
          "79:   public void setFilters(List<Filter> filters) {",
          "",
          "[Removed Lines]",
          "76:     return filters;",
          "",
          "[Added Lines]",
          "77:     return null != filters ? filters : emptyList();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java||ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java -> ambari-server/src/main/java/org/apache/ambari/server/state/quicklinksprofile/ShowAllLinksVisibilityController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "22: import javax.annotation.Nonnull;",
          "24: import org.apache.ambari.server.state.quicklinks.Link;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     return true;",
          "36:   }",
          "38: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   @Override",
          "41:   public Optional<String> getUrlOverride(@Nonnull String service, @Nonnull Link quickLink) {",
          "42:     return Optional.empty();",
          "43:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java||ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java -> ambari-server/src/main/java/org/apache/ambari/server/utils/StreamUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.utils;",
          "21: import java.util.stream.Stream;",
          "26: public class StreamUtils {",
          "35:   public static <T> Stream<T> instancesOf(Stream<?> stream, Class<? extends T> clazz) {",
          "36:     return stream.filter(clazz::isInstance).map(clazz::cast);",
          "37:   }",
          "39: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequestTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:     ProvisionClusterRequest request = new ProvisionClusterRequest(properties, null);",
          "428:     assertEquals(\"Quick links profile doesn't match expected\",",
          "430:         request.getQuickLinksProfileJson());",
          "431:   }",
          "",
          "[Removed Lines]",
          "429:         \"{\\\"filters\\\":[{\\\"visible\\\":true}],\\\"services\\\":[]}\",",
          "",
          "[Added Lines]",
          "429:         \"{\\\"filters\\\":[{\\\"visible\\\":true}]}\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:     ProvisionClusterRequest request = new ProvisionClusterRequest(properties, null);",
          "443:     assertEquals(\"Quick links profile doesn't match expected\",",
          "445:         request.getQuickLinksProfileJson());",
          "446:   }",
          "",
          "[Removed Lines]",
          "444:         \"{\\\"filters\\\":[],\\\"services\\\":[{\\\"name\\\":\\\"HDFS\\\",\\\"components\\\":[],\\\"filters\\\":[{\\\"visible\\\":true}]}]}\",",
          "",
          "[Added Lines]",
          "444:         \"{\\\"services\\\":[{\\\"name\\\":\\\"HDFS\\\",\\\"filters\\\":[{\\\"visible\\\":true}]}]}\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460:     ProvisionClusterRequest request = new ProvisionClusterRequest(properties, null);",
          "461:     System.out.println(request.getQuickLinksProfileJson());",
          "462:     assertEquals(\"Quick links profile doesn't match expected\",",
          "464:         request.getQuickLinksProfileJson());",
          "465:   }",
          "",
          "[Removed Lines]",
          "463:         \"{\\\"filters\\\":[{\\\"visible\\\":true}],\\\"services\\\":[{\\\"name\\\":\\\"HDFS\\\",\\\"components\\\":[],\\\"filters\\\":[{\\\"visible\\\":true}]}]}\",",
          "",
          "[Added Lines]",
          "463:         \"{\\\"filters\\\":[{\\\"visible\\\":true}],\\\"services\\\":[{\\\"name\\\":\\\"HDFS\\\",\\\"filters\\\":[{\\\"visible\\\":true}]}]}\",",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/QuickLinkArtifactResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.easymock.EasyMock.createMock;",
          "22: import static org.easymock.EasyMock.expect;",
          "23: import static org.easymock.EasyMock.replay;",
          "24: import static org.junit.Assert.assertTrue;",
          "26: import java.io.File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.apache.ambari.server.state.StackInfo;",
          "42: import org.apache.ambari.server.state.quicklinks.Link;",
          "43: import org.apache.ambari.server.state.quicklinks.QuickLinks;",
          "45: import org.apache.ambari.server.state.quicklinksprofile.QuickLinkVisibilityControllerFactory;",
          "47: import org.junit.Before;",
          "48: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "44: import org.apache.ambari.server.state.quicklinksprofile.QuickLinkVisibilityController;",
          "46: import org.easymock.IAnswer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     }",
          "97:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   @Test",
          "102:   public void getResourcesWithUrlOverride() throws Exception {",
          "103:     quicklinkProfile = Resources.toString(Resources.getResource(\"example_quicklinks_profile.json\"), Charsets.UTF_8);",
          "105:     QuickLinkArtifactResourceProvider provider = createProvider();",
          "106:     Predicate predicate = new PredicateBuilder().property(",
          "107:       QuickLinkArtifactResourceProvider.STACK_NAME_PROPERTY_ID).equals(\"HDP\").",
          "108:       and().",
          "109:       property(QuickLinkArtifactResourceProvider.STACK_VERSION_PROPERTY_ID).equals(\"2.0.6\").",
          "110:       and().",
          "111:       property(QuickLinkArtifactResourceProvider.STACK_SERVICE_NAME_PROPERTY_ID).equals(\"YARN\").",
          "112:       toPredicate();",
          "113:     Set<Resource> resources =",
          "114:       provider.getResources(PropertyHelper.getReadRequest(Sets.newHashSet()), predicate);",
          "115:     Map<String, Link> linkMap = getLinks(resources);",
          "117:     assertEquals(\"http://customlink.org/resourcemanager\", linkMap.get(\"resourcemanager_ui\").getUrl());",
          "118:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:       AmbariManagementController amc = createMock(AmbariManagementController.class);",
          "173:       expect(amc.getAmbariMetaInfo()).andReturn(metaInfo).anyTimes();",
          "183:       try {",
          "184:         expect(metaInfo.getStack(anyString(), anyString())).andReturn(stack).anyTimes();",
          "",
          "[Removed Lines]",
          "174:       expect(amc.getQuicklinkVisibilityController()).andAnswer(",
          "175:           new IAnswer<QuickLinkVisibilityController>() {",
          "176:             @Override",
          "177:             public QuickLinkVisibilityController answer() throws Throwable {",
          "178:               return QuickLinkVisibilityControllerFactory.get(quicklinkProfile);",
          "179:             }",
          "180:           }",
          "181:       ).anyTimes();",
          "",
          "[Added Lines]",
          "195:       expect(amc.getQuicklinkVisibilityController())",
          "196:         .andAnswer(() -> QuickLinkVisibilityControllerFactory.get(quicklinkProfile)).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/FilterEvaluatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.ArrayList;",
          "27: import java.util.List;",
          "29: import org.apache.ambari.server.state.quicklinks.Link;",
          "30: import org.junit.Test;",
          "33: import com.google.common.collect.ImmutableList;",
          "34: import com.google.common.collect.Lists;",
          "",
          "[Removed Lines]",
          "32: import com.google.common.base.Optional;",
          "",
          "[Added Lines]",
          "28: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   @Test",
          "63:   public void testWithEmptyFilters() throws Exception {",
          "64:     FilterEvaluator evaluator = new FilterEvaluator(new ArrayList<>());",
          "67:     FilterEvaluator evaluator2 = new FilterEvaluator(null);",
          "69:   }",
          "74:   @Test",
          "75:   public void testNoMatchingFilter() throws Exception {",
          "",
          "[Removed Lines]",
          "65:     assertEquals(Optional.absent(), evaluator.isVisible(namenodeUi));",
          "68:     assertEquals(Optional.absent(), evaluator2.isVisible(namenodeUi));",
          "",
          "[Added Lines]",
          "65:     assertEquals(Optional.empty(), evaluator.isVisible(namenodeUi));",
          "68:     assertEquals(Optional.empty(), evaluator2.isVisible(namenodeUi));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         linkNameFilter(NAMENODE_JMX, true),",
          "78:         linkAttributeFilter(SSO, false));",
          "79:     FilterEvaluator evaluator = new FilterEvaluator(filters);",
          "81:   }",
          "",
          "[Removed Lines]",
          "80:     assertEquals(Optional.absent(), evaluator.isVisible(namenodeUi));",
          "",
          "[Added Lines]",
          "80:     assertEquals(Optional.empty(), evaluator.isVisible(namenodeUi));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinkVisibilityControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state.quicklinksprofile;",
          "21: import static org.junit.Assert.assertFalse;",
          "22: import static org.junit.Assert.assertTrue;",
          "24: import org.apache.ambari.server.state.quicklinks.Link;",
          "25: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "25: import java.util.List;",
          "26: import java.util.Optional;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   static final String SSO = \"sso\";",
          "33:   static final String NAMENODE = \"NAMENODE\";",
          "34:   static final String HDFS = \"HDFS\";",
          "35:   static final String NAMENODE_UI = \"namenode_ui\";",
          "38:   private Link namenodeUi;",
          "40:   public QuickLinkVisibilityControllerTest() {",
          "45:   }",
          "",
          "[Removed Lines]",
          "41:     namenodeUi = new Link();",
          "42:     namenodeUi.setComponentName(NAMENODE);",
          "43:     namenodeUi.setName(NAMENODE_UI);",
          "44:     namenodeUi.setAttributes(ImmutableList.of(AUTHENTICATED));",
          "",
          "[Added Lines]",
          "39:   public static final String YARN = \"YARN\";",
          "41:   static final String NAMENODE_LOGS = \"namenode_logs\";",
          "42:   static final String NAMENODE_JMX = \"namenode_jmx\";",
          "43:   static final String THREAD_STACKS = \"Thread Stacks\";",
          "44:   static final String LINK_URL_1 = \"www.overridden.org/1\";",
          "45:   static final String LINK_URL_2 = \"www.overridden.org/2\";",
          "46:   static final String LINK_URL_3 = \"www.overridden.org/3\";",
          "50:   private Link namenodeLogs;",
          "51:   private Link namenodeJmx;",
          "52:   private Link threadStacks;",
          "55:     namenodeUi = link(NAMENODE_UI, NAMENODE, ImmutableList.of(AUTHENTICATED));",
          "56:     namenodeLogs = link(NAMENODE_LOGS, NAMENODE, null);",
          "57:     namenodeJmx = link(NAMENODE_JMX, NAMENODE, null);",
          "58:     threadStacks = link(THREAD_STACKS, NAMENODE, null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:         evaluator.isVisible(HDFS, namenodeUi));",
          "179:   }",
          "181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:   @Test",
          "196:   public void testUrlOverride() throws Exception {",
          "197:     Component nameNode = Component.create(",
          "198:       NAMENODE,",
          "199:       ImmutableList.of(",
          "200:         Filter.linkNameFilter(NAMENODE_UI, true),",
          "201:         Filter.linkNameFilter(NAMENODE_LOGS, LINK_URL_1, true)));",
          "202:     Service hdfs = Service.create(",
          "203:       HDFS,",
          "204:       ImmutableList.of(Filter.linkNameFilter(NAMENODE_JMX, LINK_URL_2, true)),",
          "205:       ImmutableList.of(nameNode));",
          "206:     QuickLinksProfile profile = QuickLinksProfile.create(",
          "207:       ImmutableList.of(Filter.linkNameFilter(THREAD_STACKS, LINK_URL_3, true)),",
          "208:       ImmutableList.of(hdfs));",
          "210:     DefaultQuickLinkVisibilityController evaluator = new DefaultQuickLinkVisibilityController(profile);",
          "211:     assertEquals(Optional.empty(), evaluator.getUrlOverride(HDFS, namenodeUi));",
          "212:     assertEquals(Optional.of(LINK_URL_1), evaluator.getUrlOverride(HDFS, namenodeLogs));",
          "213:     assertEquals(Optional.of(LINK_URL_2), evaluator.getUrlOverride(HDFS, namenodeJmx));",
          "215:     namenodeLogs.setComponentName(null);",
          "216:     assertEquals(Optional.of(LINK_URL_1), evaluator.getUrlOverride(HDFS, namenodeLogs));",
          "218:     assertEquals(Optional.empty(), evaluator.getUrlOverride(YARN, link(\"resourcemanager_ui\", \"RESOURCEMANAGER\", null)));",
          "220:     assertEquals(Optional.empty(), evaluator.getUrlOverride(HDFS, threadStacks));",
          "221:   }",
          "223:   @Test",
          "224:   public void testUrlOverride_duplicateDefinitions() throws Exception {",
          "226:     Component nameNode = Component.create(",
          "227:       NAMENODE,",
          "228:       ImmutableList.of(",
          "229:         Filter.linkNameFilter(NAMENODE_UI, LINK_URL_1, true))); // this will override service level setting for the same link",
          "230:     Service hdfs = Service.create(",
          "231:       HDFS,",
          "232:       ImmutableList.of(Filter.linkNameFilter(NAMENODE_UI, LINK_URL_2, true)), // same link on service level with different url",
          "233:       ImmutableList.of(nameNode));",
          "234:     Service yarn = Service.create(",
          "235:       YARN,",
          "236:       ImmutableList.of(Filter.linkNameFilter(NAMENODE_UI, LINK_URL_3, true)), // this belongs to an other service so doesn't affect outcome",
          "237:       ImmutableList.of(nameNode));",
          "239:     QuickLinksProfile profile = QuickLinksProfile.create(",
          "240:       ImmutableList.of(),",
          "241:       ImmutableList.of(hdfs));",
          "243:     DefaultQuickLinkVisibilityController evaluator = new DefaultQuickLinkVisibilityController(profile);",
          "244:     assertEquals(Optional.of(LINK_URL_1), evaluator.getUrlOverride(HDFS, namenodeUi));",
          "245:   }",
          "248:   private static final Link link(String name, String componentName, List<String> attributes) {",
          "249:     Link link = new Link();",
          "250:     link.setName(name);",
          "251:     link.setComponentName(componentName);",
          "252:     link.setAttributes(attributes);",
          "253:     return link;",
          "254:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   public void testBuildProfileBothGlobalAndServiceFilters() throws Exception {",
          "80:     Set<Map<String, String>> globalFilters = newHashSet( filter(null, null, false) );",
          "85:     Map<String, Object> hdfs = service(\"HDFS\",",
          "86:         newHashSet(nameNode),",
          "",
          "[Removed Lines]",
          "82:     Map<String, Object> nameNode = component(\"NAMENODE\",",
          "83:         newHashSet(filter(\"namenode_ui\", null, false)));",
          "",
          "[Added Lines]",
          "82:     Map<String, Object> nameNode = component(",
          "83:       \"NAMENODE\",",
          "84:       newHashSet(",
          "85:         filter(\"namenode_ui\", null, false),",
          "86:         filter(\"namenode_logs\", null, \"http://customlink.org/namenode_logs\", true)",
          "87:       )",
          "88:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     QuickLinksProfile profile = new QuickLinksProfileParser().parse(profileJson.getBytes());",
          "95:     assertFilterExists(profile, null, null, Filter.acceptAllFilter(false));",
          "96:     assertFilterExists(profile, \"HDFS\", \"NAMENODE\", Filter.linkNameFilter(\"namenode_ui\", false));",
          "97:     assertFilterExists(profile, \"HDFS\", null, Filter.linkAttributeFilter(\"sso\", true));",
          "98:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     assertFilterExists(profile, \"HDFS\", \"NAMENODE\", Filter.linkNameFilter(\"namenode_ui\", false));",
          "103:     assertFilterExists(profile, \"HDFS\", \"NAMENODE\", Filter.linkNameFilter(\"namenode_logs\",",
          "104:       \"http://customlink.org/namenode_logs\", true));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:     throw new AssertionError(\"Expected service not found: \" + serviceName);",
          "209:   }",
          "213:     if (null != linkName) {",
          "214:       map.put(LinkNameFilter.LINK_NAME, linkName);",
          "215:     }",
          "216:     if (null != attributeName) {",
          "217:       map.put(LinkAttributeFilter.LINK_ATTRIBUTE, attributeName);",
          "218:     }",
          "",
          "[Removed Lines]",
          "211:   public static Map<String, String> filter(@Nullable String linkName, @Nullable String attributeName, boolean visible) {",
          "212:     Map<String, String> map = new HashMap<>(3);",
          "",
          "[Added Lines]",
          "219:   public static Map<String, String> filter(@Nullable String linkName,",
          "220:                                            @Nullable String attributeName,",
          "221:                                            boolean visible) {",
          "222:     return filter(linkName, attributeName, null, visible);",
          "223:   }",
          "225:   public static Map<String, String> filter(@Nullable String linkName,",
          "226:                                            @Nullable String attributeName,",
          "227:                                            @Nullable String linkUrl,",
          "228:                                            boolean visible) {",
          "229:     Map<String, String> map = new HashMap<>(4);",
          "233:     if (null != linkUrl) {",
          "234:       map.put(LinkNameFilter.LINK_URL, linkUrl);",
          "235:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/quicklinksprofile/QuickLinksProfileParserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.junit.Assert.assertEquals;",
          "24: import org.junit.Test;",
          "26: import com.google.common.io.Resources;",
          "28: public class QuickLinksProfileParserTest {",
          "",
          "[Removed Lines]",
          "23: import org.codehaus.jackson.JsonParseException;",
          "",
          "[Added Lines]",
          "25: import com.fasterxml.jackson.core.JsonProcessingException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     Component nameNode = hdfs.getComponents().get(0);",
          "51:     assertEquals(2, nameNode.getFilters().size());",
          "52:     assertEquals(",
          "54:         nameNode.getFilters().get(0));",
          "56:     Component historyServer = profile.getServices().get(1).getComponents().get(0);",
          "",
          "[Removed Lines]",
          "53:         Filter.linkNameFilter(\"namenode_ui\", false),",
          "",
          "[Added Lines]",
          "53:         Filter.linkNameFilter(\"namenode_ui\", \"http://customlink.org/namenode\", false),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     Service yarn = profile.getServices().get(2);",
          "63:     assertEquals(1, yarn.getFilters().size());",
          "64:     assertEquals(",
          "66:         yarn.getFilters().get(0));",
          "67:   }",
          "70:   public void testParseInconsistentProfile_ambigousFilterDefinition() throws Exception {",
          "71:     String profileName = \"inconsistent_quicklinks_profile.json\";",
          "72:     QuickLinksProfileParser parser = new QuickLinksProfileParser();",
          "73:     parser.parse(Resources.getResource(profileName));",
          "74:   }",
          "77:   public void testParseInconsistentProfile_misspelledFilerDefinition() throws Exception {",
          "78:     String profileName = \"inconsistent_quicklinks_profile_3.json\";",
          "79:     QuickLinksProfileParser parser = new QuickLinksProfileParser();",
          "",
          "[Removed Lines]",
          "65:         Filter.linkNameFilter(\"resourcemanager_ui\", true),",
          "69:   @Test(expected = JsonParseException.class)",
          "76:   @Test(expected = JsonParseException.class)",
          "",
          "[Added Lines]",
          "65:         Filter.linkNameFilter(\"resourcemanager_ui\", \"http://customlink.org/resourcemanager\", true),",
          "69:   @Test(expected = JsonProcessingException.class)",
          "76:   @Test(expected = JsonProcessingException.class)",
          "77:   public void testParseInconsistentProfile_invalidLinkUrl() throws Exception {",
          "78:     String profileName = \"inconsistent_quicklinks_profile_4.json\";",
          "79:     QuickLinksProfileParser parser = new QuickLinksProfileParser();",
          "80:     parser.parse(Resources.getResource(profileName));",
          "81:   }",
          "83:   @Test(expected = JsonProcessingException.class)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd75cf8003684bde4d7783db28446571a3ebd10f",
      "candidate_info": {
        "commit_hash": "cd75cf8003684bde4d7783db28446571a3ebd10f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cd75cf8003684bde4d7783db28446571a3ebd10f",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java"
        ],
        "message": "[AMBARI-24406] Fix validate single sign-in support information to look for ssoEnabledTest",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java||ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1300:     if (singleSignOnInfo != null) {",
          "1301:       if (singleSignOnInfo.isSupported()) {",
          "1303:           setValid(false);",
          "1305:         }",
          "1306:       }",
          "1307:     }",
          "",
          "[Removed Lines]",
          "1302:         if (StringUtils.isEmpty(singleSignOnInfo.getEnabledConfiguration())) {",
          "1304:           addError(\"Single Sign-on support is indicated for service \" + getName() + \" but no test configuration has been set (enabledConfiguration).\");",
          "",
          "[Added Lines]",
          "1302:         if (StringUtils.isEmpty(singleSignOnInfo.getSsoEnabledTest()) && StringUtils.isEmpty(singleSignOnInfo.getEnabledConfiguration())) {",
          "1304:           addError(\"Single Sign-on support is indicated for service \" + getName() + \" but no test configuration has been set (enabledConfiguration or ssoEnabledTest).\");",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java||ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java -> ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1093:     assertEquals(singleSignOnInfoChild.isSupported(), serviceInfo.getSingleSignOnInfo().isSupported());",
          "1094:     assertEquals(singleSignOnInfoChild.getSupported(), serviceInfo.getSingleSignOnInfo().getSupported());",
          "1095:     assertEquals(singleSignOnInfoChild.getEnabledConfiguration(), serviceInfo.getSingleSignOnInfo().getEnabledConfiguration());",
          "1096:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.isKerberosRequiredForSingleSignOnIntegration());",
          "1097:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.getSingleSignOnInfo().isKerberosRequired());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096:     assertEquals(singleSignOnInfoChild.getSsoEnabledTest(), serviceInfo.getSingleSignOnInfo().getSsoEnabledTest());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1105:     assertEquals(singleSignOnInfoParent.isSupported(), serviceInfo.getSingleSignOnInfo().isSupported());",
          "1106:     assertEquals(singleSignOnInfoParent.getSupported(), serviceInfo.getSingleSignOnInfo().getSupported());",
          "1107:     assertEquals(singleSignOnInfoParent.getEnabledConfiguration(), serviceInfo.getSingleSignOnInfo().getEnabledConfiguration());",
          "1108:     assertEquals(singleSignOnInfoParent.isKerberosRequired(), serviceInfo.isKerberosRequiredForSingleSignOnIntegration());",
          "1109:     assertEquals(singleSignOnInfoParent.isKerberosRequired(), serviceInfo.getSingleSignOnInfo().isKerberosRequired());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1109:     assertEquals(singleSignOnInfoParent.getSsoEnabledTest(), serviceInfo.getSingleSignOnInfo().getSsoEnabledTest());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1117:     assertEquals(singleSignOnInfoChild.isSupported(), serviceInfo.getSingleSignOnInfo().isSupported());",
          "1118:     assertEquals(singleSignOnInfoChild.getSupported(), serviceInfo.getSingleSignOnInfo().getSupported());",
          "1119:     assertEquals(singleSignOnInfoChild.getEnabledConfiguration(), serviceInfo.getSingleSignOnInfo().getEnabledConfiguration());",
          "1120:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.isKerberosRequiredForSingleSignOnIntegration());",
          "1121:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.getSingleSignOnInfo().isKerberosRequired());",
          "1122:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     assertEquals(singleSignOnInfoChild.getSsoEnabledTest(), serviceInfo.getSingleSignOnInfo().getSsoEnabledTest());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:     assertTrue(singleSignOnInfo.isSupported());",
          "789:     assertEquals(Boolean.TRUE, singleSignOnInfo.getSupported());",
          "790:     assertNull(singleSignOnInfo.getEnabledConfiguration());",
          "791:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:     assertNull(singleSignOnInfo.getSsoEnabledTest());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5647be02ddbf2166410edce38d5e1554c14a618",
      "candidate_info": {
        "commit_hash": "f5647be02ddbf2166410edce38d5e1554c14a618",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f5647be02ddbf2166410edce38d5e1554c14a618",
        "files": [
          "ambari-common/src/main/python/ambari_commons/shell.py"
        ],
        "message": "AMBARI-24324. install tasks sometimes fail (aonishuk)",
        "before_after_code_files": [
          "ambari-common/src/main/python/ambari_commons/shell.py||ambari-common/src/main/python/ambari_commons/shell.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/ambari_commons/shell.py||ambari-common/src/main/python/ambari_commons/shell.py": [
          "File: ambari-common/src/main/python/ambari_commons/shell.py -> ambari-common/src/main/python/ambari_commons/shell.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:   buff_queue = None",
          "489:   kill_timer = None",
          "491:   try:",
          "492:     cmd = launch_subprocess(command, env=env)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:   kill_timer_started = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "497:     kill_timer.daemon = True",
          "498:     if timeout > -1:",
          "499:       kill_timer.start()",
          "501:     if strategy == ReaderStrategy.BufferedQueue:",
          "502:       buff_queue = BufferedQueue()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:       kill_timer_started = True",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "521:   finally:",
          "522:     if buff_queue:",
          "523:       buff_queue.notify_end()",
          "525:       kill_timer.cancel()",
          "526:       kill_timer.join()",
          "",
          "[Removed Lines]",
          "524:     if kill_timer:",
          "",
          "[Added Lines]",
          "526:     if kill_timer and kill_timer_started:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbf44c30dca37b2e9eaed66408befb5f7d27b15a",
      "candidate_info": {
        "commit_hash": "cbf44c30dca37b2e9eaed66408befb5f7d27b15a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cbf44c30dca37b2e9eaed66408befb5f7d27b15a",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts"
        ],
        "message": "AMBARI-25420 Cannot add or remove columns to logsearch log tables (santal)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   selectItem: EventEmitter<any> = new EventEmitter();",
          "58:   @Input()",
          "61:   @Input()",
          "62:   listItemArguments: any[] = [];",
          "",
          "[Removed Lines]",
          "59:   options: ListItem[] = [];",
          "",
          "[Added Lines]",
          "58:   private _options: ListItem[] = [];",
          "59:   private originalOptions: ListItem[] = [];",
          "62:   set options(options: ListItem[]) {",
          "63:     this._options = options;",
          "64:     this.originalOptions = options.map(option => Object.assign({}, option));",
          "65:   }",
          "67:   get options(): ListItem[] {",
          "68:     return this._options;",
          "69:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:       const items: ListItem[] = Array.isArray(updates) ? updates : [updates];",
          "107:       if (this.isMultipleChoice) {",
          "108:         items.forEach((item: ListItem) => {",
          "111:             if (itemToUpdate) {",
          "112:               hasChange = hasChange || itemToUpdate.isChecked !== item.isChecked;",
          "113:               itemToUpdate.isChecked = item.isChecked;",
          "",
          "[Removed Lines]",
          "109:           if (this.options && this.options.length) {",
          "110:             const itemToUpdate: ListItem = this.options.find((option: ListItem) => this.utils.isEqual(option.value, item.value));",
          "",
          "[Added Lines]",
          "119:           if (this.originalOptions && this.originalOptions.length) {",
          "120:             const itemToUpdate: ListItem = this.originalOptions.find((option: ListItem) => this.utils.isEqual(option.value, item.value));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06a061a82bd6d0d6518b5514665acdfe6d29d773",
      "candidate_info": {
        "commit_hash": "06a061a82bd6d0d6518b5514665acdfe6d29d773",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/06a061a82bd6d0d6518b5514665acdfe6d29d773",
        "files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ],
        "message": "[AMBARI-24503] LLAP application on Yarn fails with CNF exception on sysprepped cluster. (#2114)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py": [
          "File: ambari-server/src/main/resources/scripts/Ambaripreupload.py -> ambari-server/src/main/resources/scripts/Ambaripreupload.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     hdfs_lib_dir = hdfs_home_dir + '/lib'",
          "153:     hadoop_home_dir = '/usr/hdp/' + stack_version + '/hadoop'",
          "154:     hadoop_lib_dir = hadoop_home_dir + '/lib'",
          "156:     oozie_secure = ''",
          "157:     oozie_home=\"/usr/hdp/\" + stack_version + \"/oozie\"",
          "158:     oozie_setup_sh=format(\"/usr/hdp/\" + stack_version + \"/oozie/bin/oozie-setup.sh\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     hadoop_mapreduce_dir = '/usr/hdp/' + stack_version + '/hadoop-mapreduce'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:     Logger.info(format(\"Creating {yarn_service_tarball}\"))",
          "314:     folders = [params.yarn_home_dir, params.yarn_lib_dir, params.hdfs_home_dir, params.hdfs_lib_dir,",
          "315:                params.hadoop_home_dir,",
          "317:     with closing(tarfile.open(params.yarn_service_tarball, \"w:gz\")) as tar:",
          "318:       for folder in folders:",
          "319:         for filepath in glob.glob(format(\"{folder}/*.jar\")):",
          "",
          "[Removed Lines]",
          "316:                params.hadoop_lib_dir]",
          "",
          "[Added Lines]",
          "317:                params.hadoop_lib_dir,",
          "318:                params.hadoop_mapreduce_dir]",
          "",
          "---------------"
        ]
      }
    }
  ]
}