{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6dda63723b2b3771c54dfcd1ec8d39a25a1fd28a",
      "candidate_info": {
        "commit_hash": "6dda63723b2b3771c54dfcd1ec8d39a25a1fd28a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6dda63723b2b3771c54dfcd1ec8d39a25a1fd28a",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java"
        ],
        "message": "AMBARI-24147. Make STOMP updates immutable. (#1670)\n\n* AMBARI-24147. Make STOMP updates immutable. (mpapirkovskyy)\n\n* AMBARI-24147. Make STOMP updates immutable. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java||ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java||ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java||ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java -> ambari-server/src/main/java/org/apache/ambari/server/AmbariRuntimeException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server;",
          "24: public class AmbariRuntimeException extends RuntimeException {",
          "25:   public AmbariRuntimeException(String message, Throwable cause) {",
          "26:     super(message, cause);",
          "27:   }",
          "28: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentConfigsHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     return configHelper.getHostActualConfigsExcludeCluster(hostId, clusterId);",
          "59:   }",
          "64:   }",
          "66:   public void updateData(Long clusterId, List<Long> hostIds) throws AmbariException {",
          "",
          "[Removed Lines]",
          "61:   protected boolean handleUpdate(AgentConfigsUpdateEvent update) throws AmbariException {",
          "62:     setData(update, update.getHostId());",
          "63:     return true;",
          "",
          "[Added Lines]",
          "61:   @Override",
          "62:   protected AgentConfigsUpdateEvent handleUpdate(AgentConfigsUpdateEvent current, AgentConfigsUpdateEvent update) throws AmbariException {",
          "63:     return update;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     for (Long hostId : hostIds) {",
          "77:       AgentConfigsUpdateEvent agentConfigsUpdateEvent = configHelper.getHostActualConfigs(hostId);",
          "79:       updateData(agentConfigsUpdateEvent);",
          "80:     }",
          "81:   }",
          "",
          "[Removed Lines]",
          "78:       agentConfigsUpdateEvent.setHostId(hostId);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentHostDataHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import javax.inject.Inject;",
          "27: import org.apache.ambari.server.AmbariException;",
          "28: import org.apache.ambari.server.agent.stomp.dto.Hashable;",
          "29: import org.apache.ambari.server.events.STOMPEvent;",
          "30: import org.apache.ambari.server.events.STOMPHostEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.ambari.server.AmbariRuntimeException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   @Inject",
          "43:   private STOMPUpdatePublisher STOMPUpdatePublisher;",
          "47:   protected abstract T getCurrentData(Long hostId) throws AmbariException;",
          "50:   public T getUpdateIfChanged(String agentHash, Long hostId) throws AmbariException {",
          "51:     T hostData = initializeDataIfNeeded(hostId, true);",
          "",
          "[Removed Lines]",
          "45:   private final Map<Long, T> data = new ConcurrentHashMap<>();",
          "48:   protected abstract boolean handleUpdate(T update) throws AmbariException;",
          "",
          "[Added Lines]",
          "46:   private final ConcurrentHashMap<Long, T> data = new ConcurrentHashMap<>();",
          "49:   protected abstract T handleUpdate(T current, T update) throws AmbariException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   }",
          "55:   public T initializeDataIfNeeded(Long hostId, boolean regenerateHash) throws AmbariException {",
          "57:     try {",
          "72:     }",
          "73:   }",
          "",
          "[Removed Lines]",
          "56:     updateLock.lock();",
          "58:       T hostData = data.get(hostId);",
          "59:       if (hostData == null) {",
          "60:         hostData = data.get(hostId);",
          "61:         if (hostData == null) {",
          "62:           hostData = getCurrentData(hostId);",
          "63:           if (regenerateHash) {",
          "64:             regenerateDataIdentifiers(hostData);",
          "65:           }",
          "66:           data.put(hostId, hostData);",
          "67:         }",
          "68:       }",
          "69:       return hostData;",
          "70:     } finally {",
          "71:       updateLock.unlock();",
          "",
          "[Added Lines]",
          "58:       return data.computeIfAbsent(hostId, id -> initializeData(hostId, regenerateHash));",
          "59:     } catch (AmbariRuntimeException e) {",
          "60:       throw new AmbariException(e.getMessage(), e);",
          "61:     }",
          "62:   }",
          "64:   private T initializeData(Long hostId, boolean regenerateHash) {",
          "65:     T hostData;",
          "66:     try {",
          "67:       hostData = getCurrentData(hostId);",
          "68:     } catch (AmbariException e) {",
          "69:       LOG.error(\"Error during retrieving initial value for host: {} and class {}\", hostId, getClass().getName(), e);",
          "70:       throw new AmbariRuntimeException(\"Error during retrieving initial value for host: \" + hostId + \" and class: \" + getClass().getName(), e);",
          "71:     }",
          "72:     if (regenerateHash) {",
          "73:       regenerateDataIdentifiers(hostData);",
          "75:     return hostData;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:   public void updateData(T update) throws AmbariException {",
          "82:     try {",
          "90:         }",
          "92:       }",
          "95:     }",
          "96:   }",
          "",
          "[Removed Lines]",
          "81:     updateLock.lock();",
          "83:       initializeDataIfNeeded(update.getHostId(), true);",
          "84:       if (handleUpdate(update)) {",
          "85:         T hostData = getData(update.getHostId());",
          "86:         regenerateDataIdentifiers(hostData);",
          "87:         setIdentifiersToEventUpdate(update, hostData);",
          "88:         if (update.getType().equals(STOMPEvent.Type.AGENT_CONFIGS)) {",
          "89:           LOG.info(\"Configs update with hash {} will be sent to host {}\", update.getHash(), hostData.getHostId());",
          "91:         STOMPUpdatePublisher.publish(update);",
          "93:     } finally {",
          "94:       updateLock.unlock();",
          "",
          "[Added Lines]",
          "84:       data.compute(update.getHostId(), (id, current) -> {",
          "85:         if (current == null) {",
          "86:           current = initializeData(id, true);",
          "87:         }",
          "88:         T updated;",
          "89:         try {",
          "90:           updated = handleUpdate(current, update);",
          "91:         } catch (AmbariException e) {",
          "92:           LOG.error(\"Error during handling update for host: {} and class {}\", id, getClass().getName(), e);",
          "93:           throw new AmbariRuntimeException(\"Error during handling update for host: \" + id + \" and class: \" + getClass().getName(), e);",
          "95:         if (updated == null) {",
          "96:           return current;",
          "97:         } else {",
          "98:           regenerateDataIdentifiers(updated);",
          "99:           setIdentifiersToEventUpdate(update, updated);",
          "100:           return updated;",
          "101:         }",
          "102:       });",
          "103:     } catch(AmbariRuntimeException e) {",
          "104:       throw new AmbariException(e.getMessage(), e);",
          "105:     }",
          "106:     if (isIdentifierValid(update)) {",
          "107:       if (update.getType().equals(STOMPEvent.Type.AGENT_CONFIGS)) {",
          "108:         LOG.info(\"Configs update with hash {} will be sent to host {}\", update.getHash(), update.getHostId());",
          "110:       STOMPUpdatePublisher.publish(update);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   }",
          "110:   @Override",
          "112:     Map<Long, AlertCluster> updateClusters = update.getClusters();",
          "113:     if (updateClusters.isEmpty()) {",
          "115:     }",
          "117:     Long hostId = update.getHostId();",
          "118:     boolean changed = false;",
          "121:     switch (update.getEventType()) {",
          "122:       case UPDATE:",
          "",
          "[Removed Lines]",
          "111:   protected boolean handleUpdate(AlertDefinitionsAgentUpdateEvent update) throws AmbariException {",
          "114:       return false;",
          "119:     Map<Long, AlertCluster> existingClusters = getData(hostId).getClusters();",
          "",
          "[Added Lines]",
          "111:   protected AlertDefinitionsAgentUpdateEvent handleUpdate(AlertDefinitionsAgentUpdateEvent current, AlertDefinitionsAgentUpdateEvent update) throws AmbariException {",
          "114:       return null;",
          "116:     AlertDefinitionsAgentUpdateEvent result = null;",
          "120:     Map<Long, AlertCluster> existingClusters = current.getClusters();",
          "121:     Map<Long, AlertCluster> mergedClusters = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:         if (!existingClusters.keySet().containsAll(updateClusters.keySet())) {",
          "125:           LOG.info(\"Unknown clusters in update, perhaps cluster was removed previously\");",
          "126:         }",
          "127:         for (Map.Entry<Long, AlertCluster> e : updateClusters.entrySet()) {",
          "131:           } else {",
          "133:           }",
          "134:         }",
          "135:         LOG.debug(\"Handled {} of alerts for {} cluster(s) on host with id {}, changed = {}\", update.getEventType(), updateClusters.size(), hostId, changed);",
          "",
          "[Removed Lines]",
          "128:           if (update.getEventType().equals(DELETE) && CollectionUtils.isEmpty(e.getValue().getAlertDefinitions())) {",
          "129:             existingClusters.remove(e.getKey());",
          "130:             changed = true;",
          "132:             changed |= existingClusters.get(e.getKey()).handleUpdate(update.getEventType(), e.getValue());",
          "",
          "[Added Lines]",
          "129:         for (Map.Entry<Long, AlertCluster> e : existingClusters.entrySet()) {",
          "130:           Long clusterId = e.getKey();",
          "131:           if (!updateClusters.containsKey(clusterId)) {",
          "132:             mergedClusters.put(clusterId, e.getValue());",
          "133:           }",
          "134:         }",
          "136:           Long clusterId = e.getKey();",
          "137:           if (existingClusters.containsKey(clusterId)) {",
          "138:             if (update.getEventType().equals(DELETE) && CollectionUtils.isEmpty(e.getValue().getAlertDefinitions())) {",
          "139:               changed = true;",
          "140:             } else {",
          "141:               AlertCluster mergedCluster = existingClusters.get(e.getKey()).handleUpdate(update.getEventType(), e.getValue());",
          "142:               if (mergedCluster != null) {",
          "143:                 mergedClusters.put(clusterId, mergedCluster);",
          "144:                 changed = true;",
          "145:               }",
          "146:             }",
          "148:             mergedClusters.put(clusterId, e.getValue());",
          "149:             changed = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:           if (!Sets.intersection(existingClusters.keySet(), updateClusters.keySet()).isEmpty()) {",
          "140:             throw new AmbariException(\"Existing clusters in create\");",
          "141:           }",
          "143:           LOG.debug(\"Handled {} of alerts for {} cluster(s)\", update.getEventType(), updateClusters.size());",
          "144:           changed = true;",
          "145:         }",
          "",
          "[Removed Lines]",
          "142:           existingClusters.putAll(updateClusters);",
          "",
          "[Added Lines]",
          "159:           mergedClusters.putAll(existingClusters);",
          "160:           mergedClusters.putAll(updateClusters);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:         LOG.warn(\"Unhandled event type {}\", update.getEventType());",
          "149:         break;",
          "150:     }",
          "153:   }",
          "155:   @Subscribe",
          "",
          "[Removed Lines]",
          "152:     return changed;",
          "",
          "[Added Lines]",
          "169:     if (changed) {",
          "170:       result = new AlertDefinitionsAgentUpdateEvent(CREATE, mergedClusters, current.getHostName(), hostId);",
          "171:     }",
          "172:     return result;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.agent.stomp;",
          "20: import java.util.Map;",
          "21: import java.util.TreeMap;",
          "23: import org.apache.ambari.server.AmbariException;",
          "24: import org.apache.ambari.server.agent.RecoveryConfigHelper;",
          "25: import org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster;",
          "26: import org.apache.ambari.server.controller.AmbariManagementController;",
          "27: import org.apache.ambari.server.events.ClusterComponentsRepoChangedEvent;",
          "28: import org.apache.ambari.server.events.HostLevelParamsUpdateEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.HashMap;",
          "22: import java.util.SortedMap;",
          "26: import org.apache.ambari.server.agent.CommandRepository;",
          "27: import org.apache.ambari.server.agent.RecoveryConfig;",
          "30: import org.apache.ambari.server.agent.stomp.dto.HostRepositories;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:       hostLevelParamsClusters.put(Long.toString(cl.getClusterId()),",
          "77:           hostLevelParamsCluster);",
          "78:     }",
          "81:     return hostLevelParamsUpdateEvent;",
          "82:   }",
          "85:     boolean changed = false;",
          "86:     if (MapUtils.isNotEmpty(update.getHostLevelParamsClusters())) {",
          "88:       for (Map.Entry<String, HostLevelParamsCluster> hostLevelParamsClusterEntry : update.getHostLevelParamsClusters().entrySet()) {",
          "90:         String clusterId = hostLevelParamsClusterEntry.getKey();",
          "97:           }",
          "99:               .equals(updatedCluster.getHostRepositories().getRepositories())) {",
          "102:           }",
          "104:               .equals(updatedCluster.getHostRepositories().getComponentRepos())) {",
          "106:             changed = true;",
          "107:           }",
          "108:         } else {",
          "110:           changed = true;",
          "111:         }",
          "112:       }",
          "113:     }",
          "115:   }",
          "117:   @Override",
          "",
          "[Removed Lines]",
          "79:     HostLevelParamsUpdateEvent hostLevelParamsUpdateEvent = new HostLevelParamsUpdateEvent(hostLevelParamsClusters);",
          "80:     hostLevelParamsUpdateEvent.setHostId(hostId);",
          "84:   protected boolean handleUpdate(HostLevelParamsUpdateEvent update) {",
          "87:       Long hostId = update.getHostId();",
          "89:         HostLevelParamsCluster updatedCluster = hostLevelParamsClusterEntry.getValue();",
          "91:         Map<String, HostLevelParamsCluster> clusters = getData().get(hostId).getHostLevelParamsClusters();",
          "92:         if (clusters.containsKey(clusterId)) {",
          "93:           HostLevelParamsCluster cluster = clusters.get(clusterId);",
          "94:           if (!cluster.getRecoveryConfig().equals(updatedCluster.getRecoveryConfig())) {",
          "95:             cluster.setRecoveryConfig(updatedCluster.getRecoveryConfig());",
          "96:             changed = true;",
          "98:           if (!cluster.getHostRepositories().getRepositories()",
          "100:             cluster.getHostRepositories().setRepositories(updatedCluster.getHostRepositories().getRepositories());",
          "101:             changed = true;",
          "103:           if (!cluster.getHostRepositories().getComponentRepos()",
          "105:             cluster.getHostRepositories().setComponentRepos(updatedCluster.getHostRepositories().getComponentRepos());",
          "109:           clusters.put(clusterId, updatedCluster);",
          "114:     return changed;",
          "",
          "[Added Lines]",
          "84:     HostLevelParamsUpdateEvent hostLevelParamsUpdateEvent = new HostLevelParamsUpdateEvent(hostId, hostLevelParamsClusters);",
          "88:   @Override",
          "89:   protected HostLevelParamsUpdateEvent handleUpdate(HostLevelParamsUpdateEvent current, HostLevelParamsUpdateEvent update) {",
          "90:     HostLevelParamsUpdateEvent result = null;",
          "92:     Map<String, HostLevelParamsCluster> mergedClusters = new HashMap<>();",
          "95:       for (Map.Entry<String, HostLevelParamsCluster> hostLevelParamsClusterEntry : current.getHostLevelParamsClusters().entrySet()) {",
          "96:         String clusterId = hostLevelParamsClusterEntry.getKey();",
          "97:         if (!update.getHostLevelParamsClusters().containsKey(clusterId)) {",
          "98:           mergedClusters.put(clusterId, hostLevelParamsClusterEntry.getValue());",
          "99:         }",
          "100:       }",
          "104:         if (current.getHostLevelParamsClusters().containsKey(clusterId)) {",
          "105:           boolean clusterChanged = false;",
          "106:           HostLevelParamsCluster updatedCluster = hostLevelParamsClusterEntry.getValue();",
          "107:           HostLevelParamsCluster currentCluster = current.getHostLevelParamsClusters().get(clusterId);",
          "108:           RecoveryConfig mergedRecoveryConfig;",
          "109:           SortedMap<Long, CommandRepository> mergedRepositories;",
          "110:           SortedMap<String, Long> mergedComponentRepos;",
          "111:           if (!currentCluster.getRecoveryConfig().equals(updatedCluster.getRecoveryConfig())) {",
          "112:             mergedRecoveryConfig = updatedCluster.getRecoveryConfig();",
          "113:             clusterChanged = true;",
          "114:           } else {",
          "115:             mergedRecoveryConfig = currentCluster.getRecoveryConfig();",
          "117:           if (!currentCluster.getHostRepositories().getRepositories()",
          "119:             mergedRepositories = updatedCluster.getHostRepositories().getRepositories();",
          "120:             clusterChanged = true;",
          "121:           } else {",
          "122:             mergedRepositories = currentCluster.getHostRepositories().getRepositories();",
          "124:           if (!currentCluster.getHostRepositories().getComponentRepos()",
          "126:             mergedComponentRepos = updatedCluster.getHostRepositories().getComponentRepos();",
          "127:             clusterChanged = true;",
          "128:           } else {",
          "129:             mergedComponentRepos = currentCluster.getHostRepositories().getComponentRepos();",
          "130:           }",
          "131:           if (clusterChanged) {",
          "132:             HostLevelParamsCluster mergedCluster = new HostLevelParamsCluster(",
          "133:                 new HostRepositories(mergedRepositories, mergedComponentRepos),",
          "134:                 mergedRecoveryConfig);",
          "135:             mergedClusters.put(clusterId, mergedCluster);",
          "137:           } else {",
          "138:             mergedClusters.put(clusterId, hostLevelParamsClusterEntry.getValue());",
          "141:           mergedClusters.put(clusterId, hostLevelParamsClusterEntry.getValue());",
          "146:     if (changed) {",
          "147:       result = new HostLevelParamsUpdateEvent(current.getHostId(), mergedClusters);",
          "148:     }",
          "149:     return result;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   }",
          "139:   private void updateDataOfHost(long clusterId, Cluster cluster, Host host) throws AmbariException {",
          "141:             new HostLevelParamsCluster(",
          "142:                     m_ambariManagementController.get().retrieveHostRepositories(cluster, host),",
          "143:                     recoveryConfigHelper.getRecoveryConfig(cluster.getClusterName(), host.getHostName())));",
          "145:     updateData(hostLevelParamsUpdateEvent);",
          "146:   }",
          "",
          "[Removed Lines]",
          "140:     HostLevelParamsUpdateEvent hostLevelParamsUpdateEvent = new HostLevelParamsUpdateEvent(Long.toString(clusterId),",
          "144:     hostLevelParamsUpdateEvent.setHostId(host.getHostId());",
          "",
          "[Added Lines]",
          "175:     HostLevelParamsUpdateEvent hostLevelParamsUpdateEvent = new HostLevelParamsUpdateEvent(host.getHostId(),",
          "176:         Long.toString(clusterId),",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/AlertCluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     return hostName;",
          "80:   }",
          "83:     boolean changed = false;",
          "85:     switch (eventType) {",
          "86:       case CREATE:",
          "88:       case UPDATE:",
          "98:           }",
          "99:         }",
          "100:         if (update.getStaleIntervalMultiplier() != null",
          "101:             && !update.getStaleIntervalMultiplier().equals(staleIntervalMultiplier)) {",
          "103:           changed = true;",
          "104:         }",
          "105:         LOG.debug(\"Handled {} of {} alerts, changed = {}\", eventType, update.alertDefinitions.size(), changed);",
          "106:         break;",
          "107:       case DELETE:",
          "109:         LOG.debug(\"Handled {} of {} alerts\", eventType, update.alertDefinitions.size());",
          "110:         break;",
          "111:       default:",
          "112:         LOG.warn(\"Unhandled event type {}\", eventType);",
          "113:         break;",
          "114:     }",
          "117:   }",
          "119:   public static AlertCluster emptyAlertCluster() {",
          "",
          "[Removed Lines]",
          "82:   public boolean handleUpdate(AlertDefinitionEventType eventType, AlertCluster update) {",
          "89:         changed = !alertDefinitions.keySet().containsAll(update.alertDefinitions.keySet());",
          "90:         if (changed) {",
          "91:           alertDefinitions.putAll(update.alertDefinitions);",
          "92:         } else {",
          "93:           for (Map.Entry<Long, AlertDefinition> e : update.alertDefinitions.entrySet()) {",
          "94:             Long definitionId = e.getKey();",
          "95:             AlertDefinition newDefinition = e.getValue();",
          "96:             AlertDefinition oldDefinition = alertDefinitions.put(definitionId, newDefinition);",
          "97:             changed = changed || !oldDefinition.deeplyEquals(newDefinition);",
          "102:           staleIntervalMultiplier = update.getStaleIntervalMultiplier();",
          "108:         changed = alertDefinitions.keySet().removeAll(update.alertDefinitions.keySet());",
          "116:     return changed;",
          "",
          "[Added Lines]",
          "82:   public AlertCluster handleUpdate(AlertDefinitionEventType eventType, AlertCluster update) {",
          "85:     AlertCluster mergedCluster = null;",
          "86:     Map<Long, AlertDefinition> mergedDefinitions = new HashMap<>();",
          "87:     Integer mergedStaleIntervalMultiplier = null;",
          "92:         for (Map.Entry<Long, AlertDefinition> alertDefinitionEntry : alertDefinitions.entrySet()) {",
          "93:           Long definitionId = alertDefinitionEntry.getKey();",
          "94:           if (!update.alertDefinitions.containsKey(definitionId)) {",
          "95:             mergedDefinitions.put(definitionId, alertDefinitionEntry.getValue());",
          "96:           } else {",
          "97:             AlertDefinition newDefinition = update.alertDefinitions.get(definitionId);",
          "98:             AlertDefinition oldDefinition = alertDefinitionEntry.getValue();",
          "99:             if (!oldDefinition.deeplyEquals(newDefinition)) {",
          "100:               changed = true;",
          "101:             }",
          "102:             mergedDefinitions.put(definitionId, oldDefinition);",
          "107:           mergedStaleIntervalMultiplier = update.getStaleIntervalMultiplier();",
          "109:         } else {",
          "110:           mergedStaleIntervalMultiplier = staleIntervalMultiplier;",
          "115:         for (Map.Entry<Long, AlertDefinition> alertDefinitionEntry : alertDefinitions.entrySet()) {",
          "116:           Long definitionId = alertDefinitionEntry.getKey();",
          "117:           if (!update.alertDefinitions.containsKey(definitionId)) {",
          "118:             mergedDefinitions.put(definitionId, alertDefinitionEntry.getValue());",
          "119:           } else {",
          "120:             changed = true;",
          "121:           }",
          "122:         }",
          "123:         mergedStaleIntervalMultiplier = staleIntervalMultiplier;",
          "130:     if (changed) {",
          "131:       mergedCluster = new AlertCluster(mergedDefinitions, hostName, mergedStaleIntervalMultiplier);",
          "132:     }",
          "133:     return mergedCluster;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/ClusterConfigs.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     return configurations;",
          "37:   }",
          "43:   public SortedMap<String, SortedMap<String, SortedMap<String, String>>> getConfigurationAttributes() {",
          "44:     return configurationAttributes;",
          "45:   }",
          "51:   @Override",
          "52:   public boolean equals(Object o) {",
          "53:     if (this == o) return true;",
          "",
          "[Removed Lines]",
          "39:   public void setConfigurations(SortedMap<String, SortedMap<String, String>> configurations) {",
          "40:     this.configurations = configurations;",
          "41:   }",
          "47:   public void setConfigurationAttributes(SortedMap<String, SortedMap<String, SortedMap<String, String>>> configurationAttributes) {",
          "48:     this.configurationAttributes = configurationAttributes;",
          "49:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     return hostRepositories;",
          "42:   }",
          "48:   public RecoveryConfig getRecoveryConfig() {",
          "49:     return recoveryConfig;",
          "50:   }",
          "55: }",
          "",
          "[Removed Lines]",
          "44:   public void setHostRepositories(HostRepositories hostRepositories) {",
          "45:     this.hostRepositories = hostRepositories;",
          "46:   }",
          "52:   public void setRecoveryConfig(RecoveryConfig recoveryConfig) {",
          "53:     this.recoveryConfig = recoveryConfig;",
          "54:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostRepositories.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     return repositories;",
          "45:   }",
          "51:   public SortedMap<String, Long> getComponentRepos() {",
          "52:     return componentRepos;",
          "53:   }",
          "58: }",
          "",
          "[Removed Lines]",
          "47:   public void setRepositories(SortedMap<Long, CommandRepository> repositories) {",
          "48:     this.repositories = repositories;",
          "49:   }",
          "55:   public void setComponentRepos(SortedMap<String, Long> componentRepos) {",
          "56:     this.componentRepos = componentRepos;",
          "57:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2748:             if (allowedStates.contains(host.getState())) {",
          "2749:               hostNames.add(hostname);",
          "2750:             }",
          "2751:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2750:             } else {",
          "2751:               LOG.warn(\"Host {} was excluded due {} state is not allowed. Allowed states: {}\", hostname, host.getState(),",
          "2752:                   allowedStates);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4277:         for (Host host : clusterHosts) {",
          "4278:           if (host.getState() == HostState.HEALTHY) {",
          "4279:             hosts.add(host.getHostName());",
          "4280:           }",
          "4281:         }",
          "4282:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4283:           } else {",
          "4284:             LOG.warn(\"Host {} was excluded due {} state\", host.getHostName(), host.getState());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:             addedHost.getHostName(),",
          "566:             addedHost.getRackInfo(),",
          "567:             addedHost.getIPv4()));",
          "569:             getManagementController().retrieveHostRepositories(cl, addedHost),",
          "570:             recoveryConfigHelper.getRecoveryConfig(cl.getClusterName(),",
          "571:                 addedHost.getHostName())",
          "572:         ));",
          "574:         hostLevelParamsUpdateEvents.add(hostLevelParamsUpdateEvent);",
          "575:       }",
          "576:     }",
          "",
          "[Removed Lines]",
          "568:         HostLevelParamsUpdateEvent hostLevelParamsUpdateEvent = new HostLevelParamsUpdateEvent(clusterId, new HostLevelParamsCluster(",
          "573:         hostLevelParamsUpdateEvent.setHostId(addedHost.getHostId());",
          "",
          "[Added Lines]",
          "568:         HostLevelParamsUpdateEvent hostLevelParamsUpdateEvent = new HostLevelParamsUpdateEvent(addedHost.getHostId(),",
          "569:             clusterId,",
          "570:             new HostLevelParamsCluster(",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/AgentActionEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   @JsonProperty(\"actionName\")",
          "35:   private AgentAction agentAction;",
          "",
          "[Removed Lines]",
          "32:   private Long hostId;",
          "",
          "[Added Lines]",
          "32:   private final Long hostId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     this.hostId = hostId;",
          "41:   }",
          "47:   @Override",
          "48:   public Long getHostId() {",
          "49:     return hostId;",
          "",
          "[Removed Lines]",
          "43:   public void setHostId(Long hostId) {",
          "44:     this.hostId = hostId;",
          "45:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/AgentConfigsUpdateEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "47:   private Long hostId;",
          "",
          "[Added Lines]",
          "47:   private final Long hostId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   @JsonProperty(\"clusters\")",
          "53:   private final SortedMap<String, ClusterConfigs> clustersConfigs;",
          "56:     super(Type.AGENT_CONFIGS);",
          "57:     this.clustersConfigs = clustersConfigs;",
          "58:     this.timestamp = System.currentTimeMillis();",
          "59:   }",
          "",
          "[Removed Lines]",
          "55:   public AgentConfigsUpdateEvent(SortedMap<String, ClusterConfigs> clustersConfigs) {",
          "",
          "[Added Lines]",
          "55:   public AgentConfigsUpdateEvent(Long hostId, SortedMap<String, ClusterConfigs> clustersConfigs) {",
          "57:     this.hostId = hostId;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     this.timestamp = timestamp;",
          "76:   }",
          "82:   @Override",
          "83:   public Long getHostId() {",
          "84:     return hostId;",
          "",
          "[Removed Lines]",
          "78:   public void setHostId(Long hostId) {",
          "79:     this.hostId = hostId;",
          "80:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:   }",
          "91:   public static AgentConfigsUpdateEvent emptyUpdate() {",
          "93:   }",
          "95:   @Override",
          "",
          "[Removed Lines]",
          "92:     return new AgentConfigsUpdateEvent(null);",
          "",
          "[Added Lines]",
          "89:     return new AgentConfigsUpdateEvent(null, null);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/ExecutionCommandEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "36:   private Long hostId;",
          "",
          "[Added Lines]",
          "36:   private final Long hostId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   @JsonProperty(\"clusters\")",
          "48:   private TreeMap<String, ExecutionCommandsCluster> clusters;",
          "51:     super(Type.COMMAND);",
          "52:     this.clusters = clusters;",
          "53:   }",
          "",
          "[Removed Lines]",
          "50:   public ExecutionCommandEvent(TreeMap<String, ExecutionCommandsCluster> clusters) {",
          "",
          "[Added Lines]",
          "50:   public ExecutionCommandEvent(Long hostId, Long requiredConfigTimestamp,",
          "51:                                TreeMap<String, ExecutionCommandsCluster> clusters) {",
          "53:     this.hostId = hostId;",
          "54:     this.requiredConfigTimestamp = requiredConfigTimestamp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     return clusters;",
          "57:   }",
          "63:   @Override",
          "64:   public boolean equals(Object o) {",
          "65:     if (this == o) return true;",
          "",
          "[Removed Lines]",
          "59:   public void setClusters(TreeMap<String, ExecutionCommandsCluster> clusters) {",
          "60:     this.clusters = clusters;",
          "61:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:     return result;",
          "79:   }",
          "85:   @Override",
          "86:   public Long getHostId() {",
          "87:     return hostId;",
          "",
          "[Removed Lines]",
          "81:   public void setHostId(Long hostId) {",
          "82:     this.hostId = hostId;",
          "83:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:   public Long getRequiredConfigTimestamp() {",
          "91:     return requiredConfigTimestamp;",
          "92:   }",
          "97: }",
          "",
          "[Removed Lines]",
          "94:   public void setRequiredConfigTimestamp(Long requiredConfigTimestamp) {",
          "95:     this.requiredConfigTimestamp = requiredConfigTimestamp;",
          "96:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/HostLevelParamsUpdateEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "45:   private Long hostId;",
          "",
          "[Added Lines]",
          "45:   private final Long hostId;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:   @JsonProperty(\"clusters\")",
          "51:   private final Map<String, HostLevelParamsCluster> hostLevelParamsClusters;",
          "54:     super(Type.HOSTLEVELPARAMS);",
          "55:     this.hostLevelParamsClusters = hostLevelParamsClusters;",
          "56:   }",
          "60:   }",
          "62:   @Override",
          "",
          "[Removed Lines]",
          "53:   public HostLevelParamsUpdateEvent(Map<String, HostLevelParamsCluster> hostLevelParamsClusters) {",
          "58:   public HostLevelParamsUpdateEvent(String clusterId, HostLevelParamsCluster hostLevelParamsCluster) {",
          "59:     this(Collections.singletonMap(clusterId, hostLevelParamsCluster));",
          "",
          "[Added Lines]",
          "53:   public HostLevelParamsUpdateEvent(Long hostId, Map<String, HostLevelParamsCluster> hostLevelParamsClusters) {",
          "55:     this.hostId = hostId;",
          "59:   public HostLevelParamsUpdateEvent(Long hostId, String clusterId, HostLevelParamsCluster hostLevelParamsCluster) {",
          "60:     this(hostId, Collections.singletonMap(clusterId, hostLevelParamsCluster));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   }",
          "72:   public static HostLevelParamsUpdateEvent emptyUpdate() {",
          "78:   }",
          "80:   @Override",
          "",
          "[Removed Lines]",
          "73:     return new HostLevelParamsUpdateEvent(null);",
          "74:   }",
          "76:   public void setHostId(Long hostId) {",
          "77:     this.hostId = hostId;",
          "",
          "[Added Lines]",
          "74:     return new HostLevelParamsUpdateEvent(null, null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:   }",
          "85:   public Map<String, HostLevelParamsCluster> getHostLevelParamsClusters() {",
          "87:   }",
          "89:   @Override",
          "",
          "[Removed Lines]",
          "86:     return hostLevelParamsClusters;",
          "",
          "[Added Lines]",
          "83:     return hostLevelParamsClusters == null ? null : Collections.unmodifiableMap(hostLevelParamsClusters);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:       }",
          "90:       for (Map.Entry<Long, TreeMap<String, ExecutionCommandsCluster>> hostEntry : executionCommandsClusters.entrySet()) {",
          "91:         Long hostId = hostEntry.getKey();",
          "96:         STOMPUpdatePublisher.publish(executionCommandEvent);",
          "97:       }",
          "98:     }",
          "",
          "[Removed Lines]",
          "92:         ExecutionCommandEvent executionCommandEvent = new ExecutionCommandEvent(hostEntry.getValue());",
          "93:         executionCommandEvent.setHostId(hostId);",
          "94:         executionCommandEvent.setRequiredConfigTimestamp(agentConfigsHolder",
          "95:             .initializeDataIfNeeded(hostId, true).getTimestamp());",
          "",
          "[Added Lines]",
          "92:         ExecutionCommandEvent executionCommandEvent = new ExecutionCommandEvent(hostId,",
          "93:             agentConfigsHolder",
          "94:                 .initializeDataIfNeeded(hostId, true).getTimestamp(),",
          "95:             hostEntry.getValue());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:             if (targetHost.equalsIgnoreCase(hostName)) {",
          "191:               if (SET_KEYTAB.equalsIgnoreCase(command)) {",
          "192:                 String keytabFilePath = resolvedKeytab.getFile();",
          "194:                 if (keytabFilePath != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:                 String principal = resolvedPrincipal.getPrincipal();",
          "194:                 LOG.info(\"Processing principal {} for host {} and keytab file path {}\", principal, hostName, keytabFilePath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:                   if (keytabFile.canRead()) {",
          "200:                     Map<String, String> keytabMap = new HashMap<>();",
          "203:                     keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);",
          "204:                     keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, principal);",
          "",
          "[Removed Lines]",
          "201:                     String principal = resolvedPrincipal.getPrincipal();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:                     keytabMap.put(KerberosServerAction.KEYTAB_CONTENT_BASE64, keytabContentBase64);",
          "221:                     kcp.add(keytabMap);",
          "222:                   }",
          "223:                 }",
          "224:               } else if (REMOVE_KEYTAB.equalsIgnoreCase(command) || CHECK_KEYTABS.equalsIgnoreCase(command)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:                   } else {",
          "224:                     LOG.warn(\"Keytab file for principal {} and host {} can not to be read at path {}\",",
          "225:                         principal, hostName, keytabFile.getAbsolutePath());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:                     message = String.format(\"Skipping keytab file for %s, missing password indicates nothing to do\", resolvedPrincipal.getPrincipal());",
          "218:                   } else {",
          "219:                     if (cachedKeytabPath == null) {",
          "220:                       message = String.format(\"Failed to create keytab for %s, missing cached file\", resolvedPrincipal.getPrincipal());",
          "",
          "[Removed Lines]",
          "217:                     LOG.debug(message);",
          "",
          "[Added Lines]",
          "217:                     LOG.info(message);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:                         ensureAmbariOnlyAccess(destinationKeytabFile);",
          "243:                         message = String.format(\"Successfully created keytab file for %s at %s\", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());",
          "245:                         auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());",
          "246:                       } else {",
          "247:                         message = String.format(\"Failed to create keytab file for %s at %s\", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());",
          "",
          "[Removed Lines]",
          "244:                         LOG.debug(message);",
          "",
          "[Added Lines]",
          "244:                         LOG.info(message);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java||ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2067:           new ClusterConfigs(configurationsTreeMap, configurationAttributesTreeMap));",
          "2068:     }",
          "2072:     return agentConfigsUpdateEvent;",
          "2073:   }",
          "",
          "[Removed Lines]",
          "2070:     AgentConfigsUpdateEvent agentConfigsUpdateEvent = new AgentConfigsUpdateEvent(clustersConfigs);",
          "2071:     agentConfigsUpdateEvent.setHostId(hostId);",
          "",
          "[Added Lines]",
          "2070:     AgentConfigsUpdateEvent agentConfigsUpdateEvent = new AgentConfigsUpdateEvent(hostId, clustersConfigs);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java||ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatTestHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.ambari.server.actionmanager.Stage;",
          "45: import org.apache.ambari.server.actionmanager.StageFactory;",
          "46: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "47: import org.apache.ambari.server.orm.InMemoryDefaultTestModule;",
          "48: import org.apache.ambari.server.orm.OrmTestHelper;",
          "49: import org.apache.ambari.server.orm.dao.ClusterDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import org.apache.ambari.server.events.publishers.STOMPUpdatePublisher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: import org.apache.ambari.server.state.cluster.ClustersImpl;",
          "66: import org.apache.ambari.server.state.fsm.InvalidStateTransitionException;",
          "67: import org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent;",
          "69: import com.google.inject.Inject;",
          "70: import com.google.inject.Injector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: import org.easymock.EasyMock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:       @Override",
          "118:       protected void configure() {",
          "119:         super.configure();",
          "120:       }",
          "121:     };",
          "122:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         binder().bind(STOMPUpdatePublisher.class).toInstance(EasyMock.createNiceMock(STOMPUpdatePublisher.class));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:     Clusters clusters = injector.getInstance(Clusters.class);",
          "188:     method.setAccessible(true);",
          "189:     method.invoke(clusters);",
          "",
          "[Removed Lines]",
          "187:     Method method = ClustersImpl.class.getDeclaredMethod(\"loadClustersAndHosts\");",
          "",
          "[Added Lines]",
          "190:     Method method = ClustersImpl.class.getDeclaredMethod(\"safelyLoadClustersAndHosts\");",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     AmbariEventPublisher ambariEventPublisher = createNiceMock(AmbariEventPublisher.class);",
          "36:     AgentConfigsHolder agentConfigsHolder = new AgentConfigsHolder(ambariEventPublisher);",
          "39:     event1.setHash(\"01\");",
          "40:     event1.setTimestamp(1L);",
          "41:     String eventHash1 = agentConfigsHolder.getHash(event1);",
          "45:     event2.setHash(\"02\");",
          "46:     event2.setTimestamp(1L);",
          "47:     String eventHash2 = agentConfigsHolder.getHash(event2);",
          "51:     event3.setHash(\"01\");",
          "52:     event3.setTimestamp(2L);",
          "53:     String eventHash3 = agentConfigsHolder.getHash(event3);",
          "57:     event4.setHash(\"02\");",
          "58:     event4.setTimestamp(2L);",
          "59:     String eventHash4 = agentConfigsHolder.getHash(event4);",
          "63:     event5.setHash(\"01\");",
          "64:     event5.setTimestamp(1L);",
          "65:     String eventHash5 = agentConfigsHolder.getHash(event5);",
          "",
          "[Removed Lines]",
          "38:     AgentConfigsUpdateEvent event1 = new AgentConfigsUpdateEvent(null);",
          "44:     AgentConfigsUpdateEvent event2 = new AgentConfigsUpdateEvent(null);",
          "50:     AgentConfigsUpdateEvent event3 = new AgentConfigsUpdateEvent(null);",
          "56:     AgentConfigsUpdateEvent event4 = new AgentConfigsUpdateEvent(null);",
          "62:     AgentConfigsUpdateEvent event5 = new AgentConfigsUpdateEvent(MapUtils.EMPTY_SORTED_MAP);",
          "",
          "[Added Lines]",
          "38:     AgentConfigsUpdateEvent event1 = new AgentConfigsUpdateEvent(null, null);",
          "44:     AgentConfigsUpdateEvent event2 = new AgentConfigsUpdateEvent(null, null);",
          "50:     AgentConfigsUpdateEvent event3 = new AgentConfigsUpdateEvent(null, null);",
          "56:     AgentConfigsUpdateEvent event4 = new AgentConfigsUpdateEvent(null, null);",
          "62:     AgentConfigsUpdateEvent event5 = new AgentConfigsUpdateEvent(null, MapUtils.EMPTY_SORTED_MAP);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.agent.stomp;",
          "20: import static org.easymock.EasyMock.createNiceMock;",
          "21: import static org.junit.Assert.assertEquals;",
          "22: import static org.junit.Assert.assertFalse;",
          "23: import static org.junit.Assert.assertTrue;",
          "25: import java.util.Collections;",
          "26: import java.util.HashMap;",
          "27: import java.util.Map;",
          "29: import org.apache.ambari.server.AmbariException;",
          "30: import org.apache.ambari.server.agent.stomp.dto.AlertCluster;",
          "31: import org.apache.ambari.server.events.AlertDefinitionEventType;",
          "32: import org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent;",
          "33: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "34: import org.junit.Test;",
          "36: public class AlertDefinitionsHolderTest {",
          "37:   private final Long HOST_ID = 1L;",
          "39:   @Test",
          "40:   public void testHandleUpdateEmptyCurrent() throws AmbariException {",
          "41:     AlertDefinitionsAgentUpdateEvent current = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.CREATE,",
          "42:         Collections.emptyMap(), \"host1\", HOST_ID);",
          "43:     Map<Long, AlertCluster> clusters = new HashMap<>();",
          "44:     AlertCluster cluster = AlertCluster.emptyAlertCluster();",
          "45:     clusters.put(1L, cluster);",
          "46:     AlertDefinitionsAgentUpdateEvent update = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.UPDATE,",
          "47:         clusters, \"host1\", HOST_ID);",
          "49:     AlertDefinitionsHolder alertDefinitionsHolder = new AlertDefinitionsHolder(createNiceMock(AmbariEventPublisher.class));",
          "50:     AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);",
          "52:     assertFalse(result == update);",
          "53:     assertFalse(result == current);",
          "54:     assertEquals(AlertDefinitionEventType.CREATE, result.getEventType());",
          "55:     assertEquals(result.getClusters(), update.getClusters());",
          "56:   }",
          "58:   @Test",
          "59:   public void testHandleUpdateEmptyUpdate() throws AmbariException {",
          "60:     Map<Long, AlertCluster> clusters = new HashMap<>();",
          "61:     AlertCluster cluster = AlertCluster.emptyAlertCluster();",
          "62:     clusters.put(1L, cluster);",
          "63:     AlertDefinitionsAgentUpdateEvent current = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.CREATE,",
          "64:         clusters, \"host1\", HOST_ID);",
          "65:     AlertDefinitionsAgentUpdateEvent update = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.UPDATE,",
          "66:         Collections.emptyMap(), \"host1\", HOST_ID);",
          "68:     AlertDefinitionsHolder alertDefinitionsHolder = new AlertDefinitionsHolder(createNiceMock(AmbariEventPublisher.class));",
          "69:     AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);",
          "71:     assertFalse(result == update);",
          "72:     assertFalse(result == current);",
          "73:     assertEquals(result, null);",
          "74:   }",
          "76:   @Test",
          "77:   public void testHandleUpdateNoChanges() throws AmbariException {",
          "78:     Map<Long, AlertCluster> currentClusters = new HashMap<>();",
          "79:     AlertCluster currentCluster = new AlertCluster(Collections.emptyMap(), \"host1\");",
          "80:     currentClusters.put(1L, currentCluster);",
          "81:     AlertDefinitionsAgentUpdateEvent current = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.CREATE,",
          "82:         currentClusters, \"host1\", HOST_ID);",
          "84:     Map<Long, AlertCluster> updateClusters = new HashMap<>();",
          "85:     AlertCluster updateCluster = new AlertCluster(Collections.emptyMap(), \"host1\");",
          "86:     updateClusters.put(1L, updateCluster);",
          "87:     AlertDefinitionsAgentUpdateEvent update = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.UPDATE,",
          "88:         updateClusters, \"host1\", HOST_ID);",
          "90:     AlertDefinitionsHolder alertDefinitionsHolder = new AlertDefinitionsHolder(createNiceMock(AmbariEventPublisher.class));",
          "91:     AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);",
          "93:     assertFalse(result == update);",
          "94:     assertFalse(result == current);",
          "95:     assertEquals(result, null);",
          "96:   }",
          "98:   @Test",
          "99:   public void testHandleUpdateOnChanges() throws AmbariException {",
          "100:     Map<Long, AlertCluster> currentClusters = new HashMap<>();",
          "101:     AlertCluster currentCluster = new AlertCluster(Collections.emptyMap(), \"host1\");",
          "102:     currentClusters.put(1L, currentCluster);",
          "103:     AlertDefinitionsAgentUpdateEvent current = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.CREATE,",
          "104:         currentClusters, \"host1\", HOST_ID);",
          "106:     Map<Long, AlertCluster> updateClusters = new HashMap<>();",
          "107:     AlertCluster updateCluster = new AlertCluster(Collections.emptyMap(), \"host1\");",
          "108:     updateClusters.put(2L, updateCluster);",
          "109:     AlertDefinitionsAgentUpdateEvent update = new AlertDefinitionsAgentUpdateEvent(AlertDefinitionEventType.UPDATE,",
          "110:         updateClusters, \"host1\", HOST_ID);",
          "112:     AlertDefinitionsHolder alertDefinitionsHolder = new AlertDefinitionsHolder(createNiceMock(AmbariEventPublisher.class));",
          "113:     AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);",
          "115:     assertFalse(result == update);",
          "116:     assertFalse(result == current);",
          "117:     assertEquals(2, result.getClusters().size());",
          "118:     assertTrue(result.getClusters().containsKey(1L));",
          "119:     assertTrue(result.getClusters().containsKey(2L));",
          "120:   }",
          "121: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.agent.stomp;",
          "20: import static org.easymock.EasyMock.createNiceMock;",
          "21: import static org.junit.Assert.assertEquals;",
          "22: import static org.junit.Assert.assertFalse;",
          "23: import static org.junit.Assert.assertTrue;",
          "25: import java.util.Collections;",
          "26: import java.util.HashMap;",
          "27: import java.util.Map;",
          "29: import org.apache.ambari.server.agent.RecoveryConfig;",
          "30: import org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster;",
          "31: import org.apache.ambari.server.agent.stomp.dto.HostRepositories;",
          "32: import org.apache.ambari.server.events.HostLevelParamsUpdateEvent;",
          "33: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "34: import org.junit.Test;",
          "36: public class HostLevelParamsHolderTest {",
          "37:   private final Long HOST_ID = 1L;",
          "39:   @Test",
          "40:   public void testHandleUpdateEmptyCurrent() {",
          "41:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, Collections.emptyMap());",
          "42:     Map<String, HostLevelParamsCluster> clusters = new HashMap<>();",
          "43:     HostRepositories hostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "44:     HostLevelParamsCluster cluster = new HostLevelParamsCluster(hostRepositories, new RecoveryConfig(null));",
          "45:     clusters.put(\"1\", cluster);",
          "46:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, clusters);",
          "48:     HostLevelParamsHolder levelParamsHolder = new HostLevelParamsHolder(createNiceMock(AmbariEventPublisher.class));",
          "49:     HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);",
          "51:     assertFalse(result == update);",
          "52:     assertFalse(result == current);",
          "53:     assertEquals(result, update);",
          "54:   }",
          "56:   @Test",
          "57:   public void testHandleUpdateEmptyUpdate() {",
          "58:     Map<String, HostLevelParamsCluster> clusters = new HashMap<>();",
          "59:     HostRepositories hostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "60:     HostLevelParamsCluster cluster = new HostLevelParamsCluster(hostRepositories, new RecoveryConfig(null));",
          "61:     clusters.put(\"1\", cluster);",
          "62:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, clusters);",
          "63:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, Collections.emptyMap());",
          "65:     HostLevelParamsHolder levelParamsHolder = new HostLevelParamsHolder(createNiceMock(AmbariEventPublisher.class));",
          "66:     HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);",
          "68:     assertFalse(result == update);",
          "69:     assertFalse(result == current);",
          "70:     assertEquals(result, null);",
          "71:   }",
          "73:   @Test",
          "74:   public void testHandleUpdateNoChanges() {",
          "75:     Map<String, HostLevelParamsCluster> currentClusters = new HashMap<>();",
          "76:     HostRepositories currentHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "77:     HostLevelParamsCluster currentCluster = new HostLevelParamsCluster(currentHostRepositories, new RecoveryConfig(null));",
          "78:     currentClusters.put(\"1\", currentCluster);",
          "79:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, currentClusters);",
          "81:     Map<String, HostLevelParamsCluster> updateClusters = new HashMap<>();",
          "82:     HostRepositories updateHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "83:     HostLevelParamsCluster updateCluster = new HostLevelParamsCluster(updateHostRepositories, new RecoveryConfig(null));",
          "84:     updateClusters.put(\"1\", updateCluster);",
          "85:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, updateClusters);",
          "87:     HostLevelParamsHolder levelParamsHolder = new HostLevelParamsHolder(createNiceMock(AmbariEventPublisher.class));",
          "88:     HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);",
          "90:     assertFalse(result == update);",
          "91:     assertFalse(result == current);",
          "92:     assertEquals(result, null);",
          "93:   }",
          "95:   @Test",
          "96:   public void testHandleUpdateOnChanges() {",
          "97:     Map<String, HostLevelParamsCluster> currentClusters = new HashMap<>();",
          "98:     HostRepositories currentHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "99:     HostLevelParamsCluster currentCluster = new HostLevelParamsCluster(currentHostRepositories, new RecoveryConfig(null));",
          "100:     currentClusters.put(\"1\", currentCluster);",
          "101:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, currentClusters);",
          "103:     Map<String, HostLevelParamsCluster> updateClusters = new HashMap<>();",
          "104:     HostRepositories updateHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "105:     HostLevelParamsCluster updateCluster = new HostLevelParamsCluster(updateHostRepositories, new RecoveryConfig(null));",
          "106:     updateClusters.put(\"2\", updateCluster);",
          "107:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, updateClusters);",
          "109:     HostLevelParamsHolder levelParamsHolder = new HostLevelParamsHolder(createNiceMock(AmbariEventPublisher.class));",
          "110:     HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);",
          "112:     assertFalse(result == update);",
          "113:     assertFalse(result == current);",
          "114:     assertEquals(2, result.getHostLevelParamsClusters().size());",
          "115:     assertTrue(result.getHostLevelParamsClusters().containsKey(\"1\"));",
          "116:     assertTrue(result.getHostLevelParamsClusters().containsKey(\"2\"));",
          "117:   }",
          "118: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:         EasyMock.anyObject(Map.class))).andReturn(Collections.EMPTY_SET);",
          "149:     EasyMock.expect(configHelper.getHostActualConfigs(EasyMock.anyLong())).andReturn(",
          "152:     EasyMock.replay(configHelper);",
          "",
          "[Removed Lines]",
          "150:         new AgentConfigsUpdateEvent(new TreeMap<>())).anyTimes();",
          "",
          "[Added Lines]",
          "150:         new AgentConfigsUpdateEvent(null, new TreeMap<>())).anyTimes();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:     AmbariCustomCommandExecutionHelper helper = injector.getInstance(AmbariCustomCommandExecutionHelper.class);",
          "546:     EasyMock.expect(configHelper.getHostActualConfigs(EasyMock.anyLong())).andReturn(",
          "549:     EasyMock.replay(configHelper);",
          "",
          "[Removed Lines]",
          "547:         new AgentConfigsUpdateEvent(new TreeMap<>())).anyTimes();",
          "",
          "[Added Lines]",
          "547:         new AgentConfigsUpdateEvent(null, new TreeMap<>())).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/UpgradeHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     expect(m_configHelper.getEffectiveDesiredTags(",
          "157:         EasyMock.anyObject(Cluster.class), EasyMock.anyObject(String.class))).andReturn(new HashMap<>()).anyTimes();",
          "158:     expect(m_configHelper.getHostActualConfigs(",
          "160:     expect(m_configHelper.getChangedConfigTypes(anyObject(Cluster.class), anyObject(ServiceConfigEntity.class),",
          "161:         anyLong(), anyLong(), anyString())).andReturn(Collections.emptyMap()).anyTimes();",
          "162:   }",
          "",
          "[Removed Lines]",
          "159:         EasyMock.anyLong())).andReturn(new AgentConfigsUpdateEvent(Collections.emptySortedMap())).anyTimes();",
          "",
          "[Added Lines]",
          "159:         EasyMock.anyLong())).andReturn(new AgentConfigsUpdateEvent(null, Collections.emptySortedMap())).anyTimes();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17ff45d0c9e1d1ef1185a0581ec95a9011ab4135",
      "candidate_info": {
        "commit_hash": "17ff45d0c9e1d1ef1185a0581ec95a9011ab4135",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/17ff45d0c9e1d1ef1185a0581ec95a9011ab4135",
        "files": [
          "ambari-infra/ambari-infra-manager/docker/docker-compose.yml",
          "ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh",
          "ambari-infra/ambari-infra-solr-client/README.md",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh",
          "ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh",
          "ambari-infra/pom.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/audit_logs/conf/solrconfig.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/hadoop_logs/conf/solrconfig.xml",
          "ambari-logsearch/ambari-logsearch-server/src/main/configsets/history/conf/solrconfig.xml",
          "ambari-logsearch/docker/Dockerfile",
          "ambari-logsearch/docker/docker-compose.yml",
          "ambari-logsearch/docker/logsearch-docker.sh",
          "ambari-logsearch/docker/solr.yml",
          "ambari-logsearch/docker/sso.yml",
          "ambari-logsearch/pom.xml",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2",
          "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2"
        ],
        "message": "AMBARI-24746. Upgrade Solr version to 7.5.0 (#2452)",
        "before_after_code_files": [
          "ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh||ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh||ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh",
          "ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh||ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh",
          "ambari-logsearch/docker/logsearch-docker.sh||ambari-logsearch/docker/logsearch-docker.sh",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2||ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2",
          "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2||ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh||ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh": [
          "File: ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh -> ambari-infra/ambari-infra-manager/docker/infra-manager-docker-compose.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: ZOOKEEPER_VERSION=3.4.10",
          "73: ZOOKEEPER_CONNECTION_STRING=zookeeper:2181",
          "77: HADOOP_VERSION=3.0.0",
          "78: EOF",
          "",
          "[Removed Lines]",
          "75: SOLR_VERSION=7.4.0",
          "",
          "[Added Lines]",
          "75: SOLR_VERSION=7.5.0",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py -> ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1913:   parser.add_option(\"--atlas-index-location\", dest=\"atlas_index_location\", type=\"string\", help=\"location of the index backups (for atlas). required only if no backup path in the ini file\")",
          "1914:   parser.add_option(\"--ranger-index-location\", dest=\"ranger_index_location\", type=\"string\", help=\"location of the index backups (for ranger). required only if no backup path in the ini file\")",
          "1917:   parser.add_option(\"--solr-async-request-tries\", dest=\"solr_async_request_tries\", type=\"int\", default=400,  help=\"number of max tries for async Solr requests (e.g.: delete operation)\")",
          "1918:   parser.add_option(\"--request-tries\", dest=\"request_tries\", type=\"int\", help=\"number of tries for BACKUP/RESTORE status api calls in the request\")",
          "1919:   parser.add_option(\"--request-time-interval\", dest=\"request_time_interval\", type=\"int\", help=\"time interval between BACKUP/RESTORE status api calls in the request\")",
          "",
          "[Removed Lines]",
          "1916:   parser.add_option(\"--version\", dest=\"index_version\", type=\"string\", default=\"6.6.2\", help=\"lucene index version for migration (6.6.2 or 7.4.0)\")",
          "",
          "[Added Lines]",
          "1916:   parser.add_option(\"--version\", dest=\"index_version\", type=\"string\", default=\"6.6.2\", help=\"lucene index version for migration (6.6.2 or 7.5.0)\")",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh||ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh -> ambari-infra/ambari-infra-solr-client/src/main/resources/solrIndexHelper.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:      -b, --backup-enabled                    Use indexer tool with backup snapshots. (core filter won't be used)",
          "44:      -g, --debug                             Enable debug mode, IndexUpgrader output will be verbose.",
          "45:      -f, --force                             Force to start index upgrade, even is the version is at least 6.",
          "47: EOF",
          "48: }",
          "",
          "[Removed Lines]",
          "46:      -v, --version                           Lucene version to upgrade (default: 6.6.2, available: 6.6.2, 7.4.0)",
          "",
          "[Added Lines]",
          "46:      -v, --version                           Lucene version to upgrade (default: 6.6.2, available: 6.6.2, 7.5.0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   local INDEX_DIR=${1:?\"usage: <index_base_dir> e.g.: /opt/ambari_infra_solr/data\"}",
          "52:   local FORCE_UPDATE=${2:?\"usage <force_update_flag> e.g.: true\"}",
          "53:   local SOLR_CORE_FILTERS=${3:?\"usage: <comma separated core filters> e.g.: hadoop_logs,audit_logs,history\"}",
          "55:   local BACKUP_MODE=${5:?\"usage <backup_mode_enabled> e.g.: true\"}",
          "56:   local DEBUG_MODE=${6:?\"usage <debug_mode> e.g.: true\"}",
          "57:   SOLR_CORE_FILTER_ARR=$(echo $SOLR_CORE_FILTERS | sed \"s/,/ /g\")",
          "",
          "[Removed Lines]",
          "54:   local LUCENE_VERSION=${4:?\"usage <lucene_index_version> e.g.: 7.4.0\"}",
          "",
          "[Added Lines]",
          "54:   local LUCENE_VERSION=${4:?\"usage <lucene_index_version> e.g.: 7.5.0\"}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205: function upgrade_index_tool() {",
          "206:   # see: https://cwiki.apache.org/confluence/display/solr/IndexUpgrader+Tool",
          "208:   PATH=$JAVA_HOME/bin:$PATH $JVM -classpath \"$DIR/migrate/lucene-core-$INDEX_VERSION.jar:$DIR/migrate/lucene-backward-codecs-$INDEX_VERSION.jar\" org.apache.lucene.index.IndexUpgrader ${@}",
          "209: }",
          "211: function check_index_tool() {",
          "213:   PATH=$JAVA_HOME/bin:$PATH $JVM -classpath \"$DIR/migrate/lucene-core-$INDEX_VERSION.jar:$DIR/migrate/lucene-backward-codecs-$INDEX_VERSION.jar\" org.apache.lucene.index.CheckIndex ${@}",
          "214: }",
          "",
          "[Removed Lines]",
          "207:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.4.0)\"}",
          "212:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.4.0)\"}",
          "",
          "[Added Lines]",
          "207:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.5.0)\"}",
          "212:   : ${INDEX_VERSION:?\"Please set the INDEX_VERSION variable! (6.6.2 or 7.5.0)\"}",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh||ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh": [
          "File: ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh -> ambari-infra/ambari-infra-solr-plugin/docker/infra-solr-docker-compose.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: ZOOKEEPER_VERSION=3.4.10",
          "73: ZOOKEEPER_CONNECTION_STRING=zookeeper:2181",
          "76: EOF",
          "77: }",
          "",
          "[Removed Lines]",
          "75: SOLR_VERSION=7.4.0",
          "",
          "[Added Lines]",
          "75: SOLR_VERSION=7.5.0",
          "",
          "---------------"
        ],
        "ambari-logsearch/docker/logsearch-docker.sh||ambari-logsearch/docker/logsearch-docker.sh": [
          "File: ambari-logsearch/docker/logsearch-docker.sh -> ambari-logsearch/docker/logsearch-docker.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: ZOOKEEPER_VERSION=3.4.10",
          "110: ZOOKEEPER_CONNECTION_STRING=zookeeper:2181",
          "113: EOF",
          "114:     echo \".env file has been created. Check it out before starting Log Search. ($sdir/.env)\"",
          "115:     exit",
          "",
          "[Removed Lines]",
          "112: SOLR_VERSION=7.4.0",
          "",
          "[Added Lines]",
          "112: SOLR_VERSION=7.5.0",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:       return;",
          "358:     for (final Cluster cluster : clusterMap.values()) {",
          "361:       updateConfig(cluster, \"infra-solr-log4j\", (content) -> SOLR_NEW_LOG4J2_XML);",
          "362:     }",
          "363:   }",
          "",
          "[Removed Lines]",
          "359:       updateConfig(cluster, \"logsearch-service_logs-solrconfig\", (content) -> updateLuceneMatchVersion(content,\"7.4.0\"));",
          "360:       updateConfig(cluster, \"logsearch-audit_logs-solrconfig\", (content) -> updateLuceneMatchVersion(content,\"7.4.0\"));",
          "",
          "[Added Lines]",
          "359:       updateConfig(cluster, \"logsearch-service_logs-solrconfig\", (content) -> updateLuceneMatchVersion(content,\"7.5.0\"));",
          "360:       updateConfig(cluster, \"logsearch-audit_logs-solrconfig\", (content) -> updateLuceneMatchVersion(content,\"7.5.0\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     return content.replaceAll(\"<luceneMatchVersion>.*</luceneMatchVersion>\",",
          "379:       \"<luceneMatchVersion>\" + newLuceneMatchVersion + \"</luceneMatchVersion>\");",
          "380:   }",
          "",
          "[Removed Lines]",
          "381: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2||ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2": [
          "File: ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2 -> ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/audit_logs-solrconfig.xml.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   that you fully re-index after changing this setting as it can",
          "36:   affect both how text is indexed and queried.",
          "37:   -->",
          "40:   <!-- <lib/> directives can be used to instruct Solr to load any Jars",
          "41:   identified and use them to resolve any \"plugins\" specified in",
          "",
          "[Removed Lines]",
          "38:   <luceneMatchVersion>7.4.0</luceneMatchVersion>",
          "",
          "[Added Lines]",
          "38:   <luceneMatchVersion>7.5.0</luceneMatchVersion>",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2||ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2": [
          "File: ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2 -> ambari-server/src/main/resources/common-services/LOGSEARCH/0.5.0/properties/service_logs-solrconfig.xml.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   that you fully re-index after changing this setting as it can",
          "36:   affect both how text is indexed and queried.",
          "37:   -->",
          "40:   <!-- <lib/> directives can be used to instruct Solr to load any Jars",
          "41:   identified and use them to resolve any \"plugins\" specified in",
          "",
          "[Removed Lines]",
          "38:   <luceneMatchVersion>7.4.0</luceneMatchVersion>",
          "",
          "[Added Lines]",
          "38:   <luceneMatchVersion>7.5.0</luceneMatchVersion>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5736fa9719519824af6c003e920603f539c7db0",
      "candidate_info": {
        "commit_hash": "a5736fa9719519824af6c003e920603f539c7db0",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a5736fa9719519824af6c003e920603f539c7db0",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py"
        ],
        "message": "AMBARI-24623. hdfsResource fails to using nameservices for filesystems which does not support that (aonishuk)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py||ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py||ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py -> ambari-common/src/main/python/resource_management/libraries/providers/hdfs_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:       nameservices = main_resource.resource.nameservices",
          "90:     # non-federated cluster",
          "92:       self.action_delayed_for_nameservice(None, action_name, main_resource)",
          "93:     else:",
          "94:       default_fs_protocol = urlparse(main_resource.resource.default_fs).scheme",
          "",
          "[Removed Lines]",
          "91:     if not nameservices:",
          "",
          "[Added Lines]",
          "91:     if not nameservices or len(nameservices) < 2:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02b237c41dd8f7ee04d884a8b658e3a33567a659",
      "candidate_info": {
        "commit_hash": "02b237c41dd8f7ee04d884a8b658e3a33567a659",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/02b237c41dd8f7ee04d884a8b658e3a33567a659",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py",
          "ambari-agent/src/main/python/ambari_agent/Utils.py"
        ],
        "message": "AMBARI-24654. Tasks fail on ambari-agent intermittently under cpu load due to race condition in ambari-agent (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py||ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py",
          "ambari-agent/src/main/python/ambari_agent/Utils.py||ambari-agent/src/main/python/ambari_agent/Utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py||ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py -> ambari-agent/src/main/python/ambari_agent/ClusterTopologyCache.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from ambari_agent import hostname",
          "23: from ambari_agent.ClusterCache import ClusterCache",
          "26: from collections import defaultdict",
          "27: import logging",
          "29: logger = logging.getLogger(__name__)",
          "31: class ClusterTopologyCache(ClusterCache):",
          "32:   \"\"\"",
          "",
          "[Removed Lines]",
          "24: from ambari_agent.Utils import ImmutableDictionary",
          "",
          "[Added Lines]",
          "24: from ambari_agent.Utils import ImmutableDictionary, synchronized",
          "27: import threading",
          "31: topology_update_lock = threading.RLock()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   def get_cache_name(self):",
          "54:     return 'topology'",
          "56:   def on_cache_update(self):",
          "57:     self.cluster_host_info = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   @synchronized(topology_update_lock)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:     self.hosts_to_id = ImmutableDictionary(hosts_to_id)",
          "96:     self.components_by_key = ImmutableDictionary(components_by_key)",
          "98:   def get_cluster_host_info(self, cluster_id):",
          "99:     \"\"\"",
          "100:     Get dictionary used in commands as clusterHostInfo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   @synchronized(topology_update_lock)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:     self.cluster_host_info = cluster_host_info",
          "125:     return cluster_host_info",
          "127:   def get_component_info_by_key(self, cluster_id, service_name, component_name):",
          "128:     \"\"\"",
          "129:     Find component by service_name and component_name in list of component dictionaries.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   @synchronized(topology_update_lock)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     except KeyError:",
          "136:       return None",
          "138:   def get_cluster_local_components(self, cluster_id):",
          "139:     return self.cluster_local_components[cluster_id]",
          "141:   def get_cluster_component_version_map(self, cluster_id):",
          "142:     return self.component_version_map[cluster_id]",
          "144:   def get_host_info_by_id(self, cluster_id, host_id):",
          "145:     \"\"\"",
          "146:     Find host by id in list of host dictionaries.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:   @synchronized(topology_update_lock)",
          "147:   @synchronized(topology_update_lock)",
          "151:   @synchronized(topology_update_lock)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "150:     except KeyError:",
          "151:       return None",
          "153:   def get_current_host_info(self, cluster_id):",
          "154:     current_host_id = self.current_host_ids_to_cluster[cluster_id]",
          "155:     return self.get_host_info_by_id(cluster_id, current_host_id)",
          "157:   def get_current_host_id(self, cluster_id):",
          "158:     try:",
          "159:       return self.current_host_ids_to_cluster[cluster_id]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   @synchronized(topology_update_lock)",
          "166:   @synchronized(topology_update_lock)",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/Utils.py||ambari-agent/src/main/python/ambari_agent/Utils.py": [
          "File: ambari-agent/src/main/python/ambari_agent/Utils.py -> ambari-agent/src/main/python/ambari_agent/Utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     \"\"\"",
          "172:     Recursively turn dict to ImmutableDictionary",
          "173:     \"\"\"",
          "175:         dictionary[k] = Utils.make_immutable(v)",
          "177:     super(ImmutableDictionary, self).__init__(dictionary)",
          "",
          "[Removed Lines]",
          "174:     for k, v in dictionary.iteritems():",
          "",
          "[Added Lines]",
          "174:     if not isinstance(dictionary, ImmutableDictionary):",
          "175:       for k, v in dictionary.iteritems():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   return decorated",
          "224: def execute_with_retries(tries, try_sleep, retry_exception_class, func, *args, **kwargs):",
          "225:   for i in range(tries):",
          "226:     try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: def synchronized(lock):",
          "226:     def wrap(f):",
          "227:         def newFunction(*args, **kw):",
          "228:             lock.acquire()",
          "229:             try:",
          "230:                 return f(*args, **kw)",
          "231:             finally:",
          "232:                 lock.release()",
          "233:         return newFunction",
          "234:     return wrap",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d2d53dde88aab5975bcfb842ae5ce1d5db0b223",
      "candidate_info": {
        "commit_hash": "6d2d53dde88aab5975bcfb842ae5ce1d5db0b223",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6d2d53dde88aab5975bcfb842ae5ce1d5db0b223",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java"
        ],
        "message": "[AMBARI-24458] Start operation is disabled for HDFS after stopping components for one namespace (dsen) (#2151)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java||ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java||ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.controller.utilities.state;",
          "21: import java.util.Collections;",
          "22: import java.util.Set;",
          "24: import org.apache.ambari.server.AmbariException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.ArrayList;",
          "23: import java.util.HashSet;",
          "24: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "28: import org.apache.ambari.server.controller.ServiceComponentHostRequest;",
          "29: import org.apache.ambari.server.controller.ServiceComponentHostResponse;",
          "30: import org.apache.ambari.server.state.Cluster;",
          "31: import org.apache.ambari.server.state.ComponentInfo;",
          "32: import org.apache.ambari.server.state.Service;",
          "33: import org.apache.ambari.server.state.StackId;",
          "34: import org.apache.ambari.server.state.State;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.ambari.server.stack.NameService;",
          "36: import org.apache.ambari.server.state.ConfigHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         Set<ServiceComponentHostResponse> hostComponentResponses =",
          "60:           managementControllerProvider.get().getHostComponents(Collections.singleton(request), true);",
          "62:         int     nameNodeCount       = 0;",
          "64:         boolean hasSecondary        = false;",
          "65:         boolean hasJournal          = false;",
          "66:         State   nonStartedState     = null;",
          "",
          "[Removed Lines]",
          "63:         int     nameNodeActiveCount = 0;",
          "",
          "[Added Lines]",
          "67:         Set<String> startedOrDisabledNNHosts = new HashSet<>();",
          "70:         int     nameNodeStartedOrDisabledCount = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:                 case STARTED:",
          "95:                 case DISABLED:",
          "96:                   if (isNameNode) {",
          "98:                   }",
          "99:                   break;",
          "100:                 default:",
          "",
          "[Removed Lines]",
          "97:                     ++nameNodeActiveCount;",
          "",
          "[Added Lines]",
          "104:                     ++nameNodeStartedOrDisabledCount;",
          "105:                     startedOrDisabledNNHosts.add(hostComponentResponse.getHostname());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:           }",
          "107:         }",
          "112:           return State.STARTED;",
          "113:         }",
          "114:         return nonStartedState;",
          "",
          "[Removed Lines]",
          "109:         if ( nonStartedState == null ||  // all started",
          "110:           ((nameNodeCount > 0 && !hasSecondary || hasJournal) &&",
          "111:             nameNodeActiveCount > 0)) {  // at least one active namenode",
          "",
          "[Added Lines]",
          "117:         boolean multipleNameServices = nameNodeCount > 2;",
          "118:         int nameServiceWithStartedOrDisabledNNCount = 0;",
          "119:         List<NameService> nameServices = new ArrayList<>();",
          "122:         if (multipleNameServices) {",
          "123:           ConfigHelper configHelper = managementControllerProvider.get().getConfigHelper();",
          "124:           nameServices = NameService.fromConfig(configHelper, cluster);",
          "126:           for (NameService nameService : nameServices) {",
          "127:             boolean hasStartedOrDisabledNN = false;",
          "128:             for (NameService.NameNode nameNode : nameService.getNameNodes()) {",
          "129:               if (startedOrDisabledNNHosts.contains(nameNode.getHost())) {",
          "130:                 hasStartedOrDisabledNN = true;",
          "131:                 break;",
          "132:               }",
          "133:             }",
          "134:             if (hasStartedOrDisabledNN) {",
          "135:               nameServiceWithStartedOrDisabledNNCount++;",
          "136:             }",
          "137:           }",
          "138:         }",
          "141:         if (nonStartedState == null ||  // all started",
          "142:             ((nameNodeCount > 0 && !hasSecondary || hasJournal) &&",
          "143:                 nameNodeStartedOrDisabledCount > 0 &&",
          "144:                 (!multipleNameServices || nameServiceWithStartedOrDisabledNNCount == nameServices.size()))) {",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedStateTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.controller.utilities.state;",
          "22: import java.util.HashMap;",
          "23: import java.util.Map;",
          "25: import org.apache.ambari.server.state.Host;",
          "26: import org.apache.ambari.server.state.HostState;",
          "27: import org.apache.ambari.server.state.ServiceComponent;",
          "28: import org.apache.ambari.server.state.ServiceComponentHost;",
          "29: import org.apache.ambari.server.state.State;",
          "30: import org.junit.Assert;",
          "32: public class HDFSServiceCalculatedStateTest extends GeneralServiceCalculatedStateTest{",
          "33:   @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collections;",
          "25: import java.util.List;",
          "28: import org.apache.ambari.server.AmbariException;",
          "29: import org.apache.ambari.server.state.Config;",
          "30: import org.apache.ambari.server.state.ConfigFactory;",
          "37: import org.junit.Test;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     State state = serviceCalculatedState.getState(clusterName, getServiceName());",
          "87:     Assert.assertEquals(State.INSTALLED, state);",
          "88:   }",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   @Test",
          "99:   public void testServiceState_STOPPED_WITH_TWO_NS() throws Exception {",
          "100:     simulateNNFederation();",
          "101:     ServiceComponent nnComponent = service.getServiceComponent(\"NAMENODE\");",
          "103:     updateServiceState(State.STARTED);",
          "105:     nnComponent.getServiceComponentHost(\"h3\").setState(State.INSTALLED);",
          "106:     nnComponent.getServiceComponentHost(\"h4\").setState(State.INSTALLED);",
          "108:     State state = serviceCalculatedState.getState(clusterName, getServiceName());",
          "109:     Assert.assertEquals(State.INSTALLED, state);",
          "110:   }",
          "113:   @Test",
          "114:   public void testServiceState_STARTED_WITH_TWO_NS() throws Exception {",
          "115:     simulateNNFederation();",
          "116:     ServiceComponent nnComponent = service.getServiceComponent(\"NAMENODE\");",
          "118:     updateServiceState(State.STARTED);",
          "120:     nnComponent.getServiceComponentHost(\"h1\").setState(State.INSTALLED);",
          "121:     nnComponent.getServiceComponentHost(\"h4\").setState(State.INSTALLED);",
          "123:     State state = serviceCalculatedState.getState(clusterName, getServiceName());",
          "124:     Assert.assertEquals(State.STARTED, state);",
          "125:   }",
          "127:   private void simulateNNFederation() throws AmbariException {",
          "128:     HashMap<String, String> hdfsSiteProperties = new HashMap<>();",
          "129:     hdfsSiteProperties.put(\"dfs.internal.nameservices\", \"ns1,ns2\");",
          "130:     hdfsSiteProperties.put(\"dfs.ha.namenodes.ns1\", \"nn1,nn2\");",
          "131:     hdfsSiteProperties.put(\"dfs.ha.namenodes.ns2\", \"nn3,nn4\");",
          "132:     hdfsSiteProperties.put(\"dfs.namenode.http-address.ns1.nn1\", \"h1:1234\");",
          "133:     hdfsSiteProperties.put(\"dfs.namenode.http-address.ns1.nn2\", \"h2:1234\");",
          "134:     hdfsSiteProperties.put(\"dfs.namenode.http-address.ns2.nn3\", \"h3:1234\");",
          "135:     hdfsSiteProperties.put(\"dfs.namenode.http-address.ns2.nn4\", \"h4:1234\");",
          "137:     ConfigFactory configFactory = injector.getInstance(ConfigFactory.class);",
          "138:     Config config = configFactory.createNew(cluster, \"hdfs-site\", \"version1\",",
          "139:         hdfsSiteProperties, new HashMap<>());",
          "140:     cluster.addDesiredConfig(\"_test\", Collections.singleton(config));",
          "142:     ServiceComponent nnComponent = service.getServiceComponent(\"NAMENODE\");",
          "143:     ServiceComponent clientComponent = service.getServiceComponent(\"HDFS_CLIENT\");",
          "144:     ServiceComponent jnComponent = service.addServiceComponent(\"JOURNALNODE\");",
          "146:     List<String> newHosts = new ArrayList<>();",
          "147:     newHosts.add(\"h3\");",
          "148:     newHosts.add(\"h4\");",
          "150:     for (String hostName: newHosts){",
          "151:       clusters.addHost(hostName);",
          "152:       Host host = clusters.getHost(hostName);",
          "154:       Map<String, String> hostAttributes = new HashMap<>();",
          "155:       hostAttributes.put(\"os_family\", \"redhat\");",
          "156:       hostAttributes.put(\"os_release_version\", \"6.3\");",
          "157:       host.setHostAttributes(hostAttributes);",
          "158:       host.setState(HostState.HEALTHY);",
          "159:       clusters.mapHostToCluster(hostName, clusterName);",
          "161:       ServiceComponentHost sch = nnComponent.addServiceComponentHost(hostName);",
          "162:       sch.setVersion(\"2.1.1.0\");",
          "163:       sch.setState(State.STARTED);",
          "165:       sch = jnComponent.addServiceComponentHost(hostName);",
          "166:       sch.setVersion(\"2.1.1.0\");",
          "167:       sch.setState(State.INSTALLED);",
          "169:       sch = clientComponent.addServiceComponentHost(hostName);",
          "170:       sch.setVersion(\"2.1.1.0\");",
          "171:       sch.setState(State.INSTALLED);",
          "172:     }",
          "173:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}