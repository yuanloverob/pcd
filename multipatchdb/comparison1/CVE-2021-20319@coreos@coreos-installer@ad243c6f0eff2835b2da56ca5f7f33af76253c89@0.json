{
  "cve_id": "CVE-2021-20319",
  "cve_desc": "An improper signature verification vulnerability was found in coreos-installer. A specially crafted gzip installation image can bypass the image signature verification and as a consequence can lead to the installation of unsigned content. An attacker able to modify the original installation image can write arbitrary data, and achieve full access to the node being installed.",
  "repo": "coreos/coreos-installer",
  "patch_hash": "ad243c6f0eff2835b2da56ca5f7f33af76253c89",
  "patch_info": {
    "commit_hash": "ad243c6f0eff2835b2da56ca5f7f33af76253c89",
    "repo": "coreos/coreos-installer",
    "commit_url": "https://github.com/coreos/coreos-installer/pull/659/commits/ad243c6f0eff2835b2da56ca5f7f33af76253c89",
    "files": [
      "fixtures/verify/1M.gz",
      "fixtures/verify/1M.gz.sig",
      "src/download.rs",
      "src/io.rs"
    ],
    "message": "io: check for EOF when decoding a gzip stream (CVE-2021-20319)\n\nUnder normal conditions, GzDecoder doesn't read EOF from the underlying\nsource; it stops reading as soon as it reaches the gzip trailer.  Since\nthe wrapped GpgReader doesn't see EOF, it doesn't check the exit status of\nGPG, and a bad signature will not be noticed.  XzDecoder is not affected.\n\nThis allows bypass of signature verification under uncommon circumstances.\nNotably, installing from a live ISO or PXE image uses either osmet images\n(Fedora CoreOS or RHEL CoreOS) or a full copy of the install image (RHEL for\nEdge), and these are not affected because they're trusted (they come from\nthe installation media we've booted from).  These flows are affected:\n\n1.  Installing with --image-file, --image-url, or coreos.inst.image_url.\nFor example, if a user has a local mirror of installation images, an\nattacker could replace an image with a gzip-compressed alternative (even\nif the file extension is .xz).  The result:\n\n$ coreos-installer install --image-url http://localhost:8080/image.xz /dev/loop0\nDownloading image from http://localhost:8080/image.xz\nDownloading signature from http://localhost:8080/image.xz.sig\n> Read disk 749.9 MiB/749.9 MiB (100%)\ngpg: Signature made Mon 20 Sep 2021 02:41:50 PM EDT\ngpg: using RSA key 8C5BA6990BDB26E19F2A1A801161AE6945719A39\ngpg: BAD signature from \"Fedora (34) <fedora-34-primary@fedoraproject.org>\" [ultimate]\nInstall complete.\n\nGPG still complains when its stdin is closed, but coreos-installer doesn't\nnotice.  Automation that relies on coreos-installer's exit status will not\nnotice either.\n\n2. `coreos-installer download --decompress --image-url`:\n\n$ coreos-installer download --decompress --image-url http://localhost:8080/image.xz\n> Read disk 749.9 MiB/749.9 MiB (100%)\ngpg: Signature made Mon 20 Sep 2021 02:41:50 PM EDT\ngpg: using RSA key 8C5BA6990BDB26E19F2A1A801161AE6945719A39\ngpg: BAD signature from \"Fedora (34) <fedora-34-primary@fedoraproject.org>\" [ultimate]\n./image\n\nAgain, coreos-installer exits 0.\n\n3. Installing with default parameters, when not using live install media\nwith osmet, if the Red Hat-controlled S3 bucket is compromised or the\nHTTPS connection is successfully MITMed.\n\n4. `coreos-installer download --decompress` if the S3 bucket is\ncompromised or the HTTPS connection is MITMed.\n\nFix this by reading one more byte from the source after GzDecoder returns\nEOF.  If that also returns EOF, great, and we've given the source an\nopportunity to do its own EOF processing.  If not, fail, because the stream\ncontains trailing garbage.\n\nAlso add unit tests for signature verification and for detection of bad\nsignatures in the fetch pipeline.\n\nRequires the previous commit.\n\nBug discovered by @raballew; thanks!",
    "before_after_code_files": [
      "src/download.rs||src/download.rs",
      "src/io.rs||src/io.rs"
    ]
  },
  "patch_diff": {
    "src/download.rs||src/download.rs": [
      "File: src/download.rs -> src/download.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "477:             &include_bytes!(\"../fixtures/verify/1M.sig\")[..],",
      "478:             &[0; 1 << 20][..],",
      "479:         );",
      "480:         test_one_signed_file(",
      "481:             &include_bytes!(\"../fixtures/verify/1M.xz\")[..],",
      "482:             &include_bytes!(\"../fixtures/verify/1M.xz.sig\")[..],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         test_one_signed_file(",
      "481:             &include_bytes!(\"../fixtures/verify/1M.gz\")[..],",
      "482:             &include_bytes!(\"../fixtures/verify/1M.gz.sig\")[..],",
      "483:             &[0; 1 << 20][..],",
      "484:         );",
      "",
      "---------------"
    ],
    "src/io.rs||src/io.rs": [
      "File: src/io.rs -> src/io.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "196:         use CompressDecoder::*;",
      "197:         match &mut self.decoder {",
      "198:             Uncompressed(d) => d.read(buf),",
      "200:             Xz(d) => d.read(buf),",
      "201:         }",
      "202:     }",
      "",
      "[Removed Lines]",
      "199:             Gzip(d) => d.read(buf),",
      "",
      "[Added Lines]",
      "199:             Gzip(d) => {",
      "200:                 let count = d.read(buf)?;",
      "201:                 if count == 0 {",
      "206:                     let mut buf = [0; 1];",
      "207:                     if d.get_mut().read(&mut buf)? > 0 {",
      "208:                         return Err(io::Error::new(",
      "209:                             ErrorKind::InvalidData,",
      "210:                             \"found trailing data after compressed gzip stream\",",
      "211:                         ));",
      "212:                     }",
      "213:                 }",
      "214:                 Ok(count)",
      "215:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "249: #[cfg(test)]",
      "250: mod tests {",
      "251:     use super::*;",
      "254:     #[test]",
      "255:     fn test_ignition_hash_cli_parse() {",
      "",
      "[Removed Lines]",
      "252:     use std::io::Cursor;",
      "",
      "[Added Lines]",
      "268:     use std::io::{BufReader, Cursor};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "419:             \"collision with foo at offset 50\"",
      "420:         );",
      "421:     }",
      "422: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:     #[test]",
      "442:     fn test_decompress_reader_trailing_data() {",
      "443:         test_decompress_reader_trailing_data_one(&include_bytes!(\"../fixtures/verify/1M.gz\")[..]);",
      "444:         test_decompress_reader_trailing_data_one(&include_bytes!(\"../fixtures/verify/1M.xz\")[..]);",
      "445:     }",
      "447:     fn test_decompress_reader_trailing_data_one(input: &[u8]) {",
      "448:         let mut input = input.to_vec();",
      "449:         let mut output = Vec::new();",
      "452:         DecompressReader::new(BufReader::new(&*input))",
      "453:             .unwrap()",
      "454:             .read_to_end(&mut output)",
      "455:             .unwrap();",
      "458:         input.push(0);",
      "459:         DecompressReader::new(BufReader::new(&*input))",
      "460:             .unwrap()",
      "461:             .read_to_end(&mut output)",
      "462:             .unwrap_err();",
      "463:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0adf51bf9bbe86e4958a28a5fabf7c577a303461",
      "candidate_info": {
        "commit_hash": "0adf51bf9bbe86e4958a28a5fabf7c577a303461",
        "repo": "coreos/coreos-installer",
        "commit_url": "https://github.com/coreos/coreos-installer/commit/0adf51bf9bbe86e4958a28a5fabf7c577a303461",
        "files": [
          "fixtures/verify/1M.sig",
          "fixtures/verify/1M.xz",
          "fixtures/verify/1M.xz.sig",
          "src/download.rs",
          "src/install.rs"
        ],
        "message": "download: test signature verification in fetch pipeline",
        "before_after_code_files": [
          "src/download.rs||src/download.rs",
          "src/install.rs||src/install.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/coreos-installer/pull/659"
        ],
        "olp_code_files": {
          "patch": [
            "src/download.rs||src/download.rs"
          ],
          "candidate": [
            "src/download.rs||src/download.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/download.rs||src/download.rs": [
          "File: src/download.rs -> src/download.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:             println!(\"{}\", path.display());",
          "73:             continue;",
          "74:         }",
          "79:             let _ = remove_file(&path);",
          "80:             let _ = remove_file(&sig_path);",
          "",
          "[Removed Lines]",
          "70:         if !config.decompress && check_image_and_sig(source, &path, &sig_path).is_ok() {",
          "77:         if let Err(err) = write_image_and_sig(&mut source, &path, &sig_path, config.decompress) {",
          "",
          "[Added Lines]",
          "70:         if !config.decompress",
          "71:             && check_image_and_sig(source, &path, &sig_path, VerifyKeys::Production).is_ok()",
          "72:         {",
          "79:         if let Err(err) = write_image_and_sig(",
          "80:             &mut source,",
          "81:             &path,",
          "82:             &sig_path,",
          "83:             config.decompress,",
          "84:             VerifyKeys::Production,",
          "85:         ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     if source.signature.is_none() {",
          "99:         bail!(\"no signature available; can't check existing file\");",
          "",
          "[Removed Lines]",
          "96: fn check_image_and_sig(source: &ImageSource, path: &Path, sig_path: &Path) -> Result<()> {",
          "",
          "[Added Lines]",
          "104: fn check_image_and_sig(",
          "105:     source: &ImageSource,",
          "106:     path: &Path,",
          "107:     sig_path: &Path,",
          "108:     keys: VerifyKeys,",
          "109: ) -> Result<()> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         .with_context(|| format!(\"opening {}\", path.display()))?;",
          "125:     Ok(())",
          "126: }",
          "",
          "[Removed Lines]",
          "123:     GpgReader::new(&mut file, signature, VerifyKeys::Production)?.consume()?;",
          "",
          "[Added Lines]",
          "136:     GpgReader::new(&mut file, signature, keys)?.consume()?;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     path: &Path,",
          "132:     sig_path: &Path,",
          "133:     decompress: bool,",
          "134: ) -> Result<()> {",
          "136:     let mut dest = OpenOptions::new()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     keys: VerifyKeys,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:         decompress,",
          "151:         None,",
          "152:         None,",
          "153:     )?;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         keys,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169: }",
          "172: pub fn write_image<F>(",
          "173:     source: &mut ImageSource,",
          "174:     dest: &mut File,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: #[allow(clippy::too_many_arguments)]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "177:     decompress: bool,",
          "178:     saved: Option<&SavedPartitions>,",
          "179:     expected_sector_size: Option<NonZeroU32>,",
          "180: ) -> Result<()>",
          "181: where",
          "182:     F: FnOnce(&[u8], &mut dyn Read, &mut File, &Path, Option<&SavedPartitions>) -> Result<()>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     keys: VerifyKeys,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "185:     let mut verify_reader: Box<dyn Read> = {",
          "186:         if let Some(signature) = source.signature.as_ref() {",
          "192:         } else {",
          "193:             Box::new(&mut source.reader)",
          "194:         }",
          "",
          "[Removed Lines]",
          "187:             Box::new(GpgReader::new(",
          "188:                 &mut source.reader,",
          "189:                 signature,",
          "190:                 VerifyKeys::Production,",
          "191:             )?)",
          "",
          "[Added Lines]",
          "204:             Box::new(GpgReader::new(&mut source.reader, signature, keys)?)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "451: mod tests {",
          "452:     use super::*;",
          "453:     use gptman::{GPTPartitionEntry, GPT};",
          "454:     use std::io::{Seek, SeekFrom};",
          "455:     use uuid::Uuid;",
          "457:     #[test]",
          "458:     fn test_write_image_limit() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "467:     use std::fs::{read, write};",
          "469:     use tempfile::TempDir;",
          "473:     #[test]",
          "474:     fn test_signature_checks() {",
          "475:         test_one_signed_file(",
          "476:             &[0; 1 << 20][..],",
          "477:             &include_bytes!(\"../fixtures/verify/1M.sig\")[..],",
          "478:             &[0; 1 << 20][..],",
          "479:         );",
          "480:         test_one_signed_file(",
          "481:             &include_bytes!(\"../fixtures/verify/1M.xz\")[..],",
          "482:             &include_bytes!(\"../fixtures/verify/1M.xz.sig\")[..],",
          "483:             &[0; 1 << 20][..],",
          "484:         );",
          "485:     }",
          "487:     fn test_one_signed_file(data: &[u8], sig: &[u8], decompressed_data: &[u8]) {",
          "489:         let dir = TempDir::new().unwrap();",
          "490:         let good_path = dir.path().join(\"good\");",
          "491:         write(&good_path, data).unwrap();",
          "492:         let good_sig_path = dir.path().join(\"good.sig\");",
          "493:         write(&good_sig_path, sig).unwrap();",
          "494:         let bad_path = dir.path().join(\"bad\");",
          "495:         let mut bad_data = data.to_vec();",
          "496:         bad_data.push(0);",
          "497:         write(&bad_path, &bad_data).unwrap();",
          "499:         let bad_sig_path = dir.path().join(\"bad.sig\");",
          "500:         write(&bad_sig_path, sig).unwrap();",
          "503:         let source = FileLocation::new(good_path.to_str().unwrap())",
          "504:             .sources()",
          "505:             .unwrap()",
          "506:             .remove(0);",
          "507:         check_image_and_sig(",
          "508:             &source,",
          "509:             &good_path,",
          "510:             &good_sig_path,",
          "511:             VerifyKeys::InsecureTest,",
          "512:         )",
          "513:         .unwrap();",
          "516:         let source = FileLocation::new(bad_path.to_str().unwrap())",
          "517:             .sources()",
          "518:             .unwrap()",
          "519:             .remove(0);",
          "520:         check_image_and_sig(&source, &bad_path, &bad_sig_path, VerifyKeys::InsecureTest)",
          "521:             .unwrap_err();",
          "524:         let mut source = FileLocation::new(good_path.to_str().unwrap())",
          "525:             .sources()",
          "526:             .unwrap()",
          "527:             .remove(0);",
          "528:         let out_path = dir.path().join(\"out\");",
          "529:         let mut out_file = File::create(&out_path).unwrap();",
          "530:         write_image(",
          "531:             &mut source,",
          "532:             &mut out_file,",
          "533:             &out_path,",
          "534:             image_copy_default,",
          "535:             true,",
          "536:             None,",
          "537:             None,",
          "538:             VerifyKeys::InsecureTest,",
          "539:         )",
          "540:         .unwrap();",
          "541:         assert_eq!(&read(&out_path).unwrap(), decompressed_data);",
          "544:         let mut source = FileLocation::new(bad_path.to_str().unwrap())",
          "545:             .sources()",
          "546:             .unwrap()",
          "547:             .remove(0);",
          "548:         let out_path = dir.path().join(\"out\");",
          "549:         let mut out_file = File::create(&out_path).unwrap();",
          "550:         write_image(",
          "551:             &mut source,",
          "552:             &mut out_file,",
          "553:             &out_path,",
          "554:             image_copy_default,",
          "555:             true,",
          "556:             None,",
          "557:             None,",
          "558:             VerifyKeys::InsecureTest,",
          "559:         )",
          "560:         .unwrap_err();",
          "561:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "496:             false,",
          "497:             Some(&saved),",
          "498:             None,",
          "499:         )",
          "500:         .unwrap_err();",
          "501:         assert!(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "605:             VerifyKeys::InsecureTest,",
          "",
          "---------------"
        ],
        "src/install.rs||src/install.rs": [
          "File: src/install.rs -> src/install.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #[cfg(target_arch = \"s390x\")]",
          "31: use crate::s390x;",
          "32: use crate::source::*;",
          "34: pub fn install(config: &InstallConfig) -> Result<()> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: use crate::verify::VerifyKeys;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:         true,",
          "172:         Some(saved),",
          "173:         Some(sector_size),",
          "174:     )?;",
          "175:     table.reread()?;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:         VerifyKeys::Production,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a3bef052fab6c7d0b843d55c7c13bd788a7189d",
      "candidate_info": {
        "commit_hash": "1a3bef052fab6c7d0b843d55c7c13bd788a7189d",
        "repo": "coreos/coreos-installer",
        "commit_url": "https://github.com/coreos/coreos-installer/commit/1a3bef052fab6c7d0b843d55c7c13bd788a7189d",
        "files": [
          "fixtures/verify/test-key.priv.asc",
          "fixtures/verify/test-key.priv.asc.random.sig",
          "fixtures/verify/test-key.priv.asc.sig",
          "fixtures/verify/test-key.pub.asc",
          "src/download.rs",
          "src/verify.rs"
        ],
        "message": "io/verify: add unit tests\n\nThe tests currently send GPG verification results to stderr.",
        "before_after_code_files": [
          "fixtures/verify/test-key.priv.asc||fixtures/verify/test-key.priv.asc",
          "fixtures/verify/test-key.pub.asc||fixtures/verify/test-key.pub.asc",
          "src/download.rs||src/download.rs",
          "src/verify.rs||src/verify.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/coreos-installer/pull/659"
        ],
        "olp_code_files": {
          "patch": [
            "src/download.rs||src/download.rs"
          ],
          "candidate": [
            "src/download.rs||src/download.rs"
          ]
        }
      },
      "candidate_diff": {
        "fixtures/verify/test-key.priv.asc||fixtures/verify/test-key.priv.asc": [
          "File: fixtures/verify/test-key.priv.asc -> fixtures/verify/test-key.priv.asc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -----BEGIN PGP PRIVATE KEY BLOCK-----",
          "3: lQVYBGFOK+oBDADUJTgJ7dFD2lL9cKzZu0yM2sdg2WxMrjhSW5lij5V6d/JDKEVq",
          "4: m9BVmDNA8ilXRW1ibV6bk9sWPK2f5aqi+JDuIHNNGk11NLnF7IQpfdB0uQDcC9IQ",
          "5: pyhi6KwH77s6EJXOrI/EU8KnEQ+kPQ53UhG9ASsVsxLB3EUnMLiAQZddVxc/4+o2",
          "6: DUxMB6q7gkb36vJdKIEIAo0+OhCW8jLEURxorUho9Icu2pFakL2u75OXpiiEcYFS",
          "7: BoBecotVeoE/I7hqVRoUQ/HlSLvxlVRUBkh2J3Q3kBxTUlXeBfB09yeg4Yb2a6LX",
          "8: HfJNz2iboqVwpZ8R5Kz/j7CgRu7vHuYQEnrMNGm9YSC9j5808nBwtyrqikx2X8LM",
          "9: Q2dZfaeYcRENWuSNKHFX3q9Zw6WuGqsawUdUGS8ySPHngkBvz8wzIjDRE17S9PfU",
          "10: cEm3eV4tRaQYYTPCzPjU3kLTZebSeqfvW6TY7f9iCTMw9ZdiQFjo99UPmEqf8Kj5",
          "11: cCn6+8QYwaWcxwcAEQEAAQAL/RpqcgJmfv68ckYFoDhSZrNJULdCC4a20OOMbVqE",
          "12: 939y7RMoshAWy8fEtmkZXkV0Ky0s4jFsJUUtFA+LeQZm/iDwoHrS0h9Mi+9VxpUm",
          "13: Ce1m1fEQdb1GGzTJtRYd50nRI95CxXoUVfIYoUJ5qdH4waWvvg4rKKRECcZZ/jdW",
          "14: M4NXY1k8x36ohD4ZXEyR6cVYF4q7DuoQ60Z603MAQIsKcIemQBR1klmmtJ+60yuz",
          "15: wESLV5M6UPiGP7jC+Y+QvARBLay7O/GgN0DKrxoZe6l54GPE+mnpxedJtRZIc7V6",
          "16: jYXeEbapzCeh+oz8Czbj/p/sGFeQ9FT+uW+syFtIO2pm99S7jdy1ZLnJCqfG9LVb",
          "17: Vp8QjBRMEIm8XWkSA3n5p3brWa3xezwwbkCO65TzxUh72V2hzW223cI+T/e3kGdV",
          "18: I9ZKKRH/CBwC69yd6XwDY3Bofsl8L/4R5X9y3vNQUfL4IDf1Mdcs4/Rfkvk4tmhl",
          "19: J60aUHGtPDeN8dUnwgIapDfvLQYA2LbxBnoBrGz0IXVhUx+WrN/q8/UEu2fynYOr",
          "20: WLdtB1gW06P4fbqNYblMiD8X28pGNc6dLe0bu2tZDebetPFxshmm5l1BtptifDEV",
          "21: 3OlyHOIg/BfeYmuVIw/SaY+5p9fML1r2jGZguwE6XRKxjMaxPEV7gzR6fSjFysAt",
          "22: aNk6y9Lj4lC2WG6ySzznFGhslTVVW9iRIIB7SaR4pTI0l5zybwpT27bRJMHOlGEl",
          "23: ZlfQ5gHSaTZOVHy941NmozM57yktBgD6mjvJWUpNeJMB4D4zP/K4B5zfx1SbfQSX",
          "24: Z37RnCmTaq01CYyouGsmgt2KWv0HOiwWuWluQEyymFtzLwDjsGRaUuVW36/vKq7K",
          "25: fexQw1rF3yh0jRncDQVpWI/evWiBxGPZwjZGqD5Gwmow8ZGdoO8LikLn7hHVel1T",
          "26: 94oew8WOGzdg4e1Y1ro+NPbnRWp29F4061r5xv6RKcWx9OL7Ux8EIDC2d+33038/",
          "27: GSuJ6rEZwvekPLfSWtLH8SvRzAW8qYMF/j9MbJ/4hA3DNzHECNAJkvu+WycZWm2B",
          "28: U9E5ULru6bKCaZjL3ZsnQOiIvDhuG9D+h00+ia0Y8IV65WgNBp64pGuEbI3WoM9u",
          "29: hSqFmLkHLXQf14LdGA8ceqJJg+0O5C5wFZntH6mJrC02e+RXfhShBtDM27PPdfgJ",
          "30: zfHd4ZtKTJeRVirT8x7Y0TUlM7jHizuiqB2njdkx6I2roSaPsFum69v4zQxeIWeF",
          "31: xzwtHiiuESH3KehfEFbJ+Y59ePJzfPyoR+hBtD1jb3Jlb3MtaW5zdGFsbGVyIHNu",
          "32: YWtlIG9pbCBrZXkgPGNvcmVvcy1pbnN0YWxsZXJAZXhhbXBsZS5jb20+iQHOBBMB",
          "33: CAA4AhsDBQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAFiEEGjBFab+t+z4/lvDDqipp",
          "34: pG7DUvwFAmFOLBsACgkQqipppG7DUvwKFQwAoxxfBx962vTw6pvKWHnJ4UAYopHy",
          "35: K0BBnIT1Ls59rPyk4o+GWY+j+Gn+2/QxHbVle71MiN37NiII4EpqsrVdC63Ng6Iq",
          "36: lvR1/H5meKP79/x4EOpO8NmLbeDz2pJpXuj9Bch2EPadjpwi/uD4r5H9x5qwsBUW",
          "37: fqyS6hjopeXtTM10VbSgIcpi5fzgGUfFzCPxnGD9J1MZF0/qp8hzoLzoiqQrn2at",
          "38: aEDZfqI9/gV5H0vpfJUHa4OADc5dKBkuDfZd9K8HnqUQ+z3NyWbk0OaH/oKTW5Zr",
          "39: qY0kBPv1RePdmErX081LcQbfnD2wrj1v6hRl8Rg17Em9Z5LZ7HHbgqwLK8occWk1",
          "40: T5OcicnzpjCB5aeGkyTq7xniswTIBSR/tCW60KZUpor+oRyPL+BzoFUOkBHuNakr",
          "41: DMA6IePE9YcjmjQCiNKmQmcZ+k6k2TLt+cpoLDNJkcAx+Art5KuTsdhRwW4ZLWev",
          "42: Q66GNVwlbc2FxuNouPHOtio1v0diHG2aVcRLnQVYBGFOLDwBDADeBHQUdE0CfdeR",
          "43: CH/WFChZpd+u+StGIQUqvM8v+uoP2W1U5g83NwcdEsKTel5EGlU79LSwUKkJ7yNY",
          "44: UwlC0QihdubZlQfNdYkjz+JanP9aJxSLs7H2+1atF/7zCyU5jnlPybimrpBLLN6r",
          "45: dwsvo8OVf1NvFBCz0S0QVxFPkQohfBqIB1SHFNxtfnLCeGjcOBYr0Fjio78Qh9bj",
          "46: DPAiANk9tUPFvcUxkQZGKTeV2G+cI9E+lhFFakB0ii1378ChxkSl0rP989kDcAjl",
          "47: SqGuxb6ypHFYLxM1Oes4UOvoj6kl7hubFyC3jhziHLchweGa9lGYOyTYFS5vovCj",
          "48: HY582IvSd/PDPSCv9HTEzpQTFR8jhGp2kOrV0WOSLM2wKyJhdXfDw7FdhMJt085u",
          "49: xH7WOSoO4xHHQw0wvuEJ3CbkQDF/7nA98YCRufHaZ4WYLOh2FJcz3oFJXnylA4+D",
          "50: yHdOx9/BPAp6jmEppXlocLVRktTMNAAB2FzdSwcfD8NY6eX4c/cAEQEAAQAL/ibd",
          "51: ALTT5ucYwDNTGY2P2cBXmOA4HasY/J6OjnYHphFALjM+UkuIBmbAce7+7KFfOqxU",
          "52: GY0DkZN7mORNJMHddXVOKvrLa6I7gNYT/bt+3/QYAzCxM+XX+UQzfx1sRgfdOL8O",
          "53: wJPs2rVOFWxOWlbsg8AXmbNH/+R6KTlDBHS5HtzdrIdDQTikHjHMgKoqCbEC4F6r",
          "54: CeQiZb+vB56XFTHelCiJImPq5CnZCRAfBuvkByV935LlEgDkqIO97FeiUEYBPo+P",
          "55: 66jJFYweVkD7g74y1W2aumk6h47Z5cNUA0lgzaC0BuJhYuCRSfsYPC23OECESiBv",
          "56: rRlt0lQo2RMR2hagy6DnUIOG4sM0CQwMsOPzA3NXF/f5OJbiePxiiCqEKx40I1B/",
          "57: jmaj+3ChXNktLuoQ5+L8QtWZ+YCrdVfJenHtPswLQ+xesj/LIdhdXLhQjHC2kg7v",
          "58: sL+3b55APB7EccEf+XY2eDP5MucLT2x6OTflV7ajPYGer4sAAwAQw1Nv1If4gQYA",
          "59: 65Z45Vsdf+IgODY0mTjybSe550WOljz1f1JEKsrQpKoomeKaF/QJYBEHvE2I3DuZ",
          "60: B+71c80MCnJBf6BqXXDf86ouJ1QbCu93DfPpKZJ4m8Ws1dY9prMDPyHVHdM7n9VE",
          "61: SZ2IE0A3G7WgSP0T/hdAM3NcmZ/TyqepJGb33g2Hz4vi8KPfL/yjI8ngwPF6JBNK",
          "62: oWz/tq2yTN2DCfCDQ3O73V4C2tnljDxXyco98wuOIYE9JH+C+c6V0OuZNO598CWL",
          "63: BgDxQPqiTzgBgQCc+S90u9jCF36VOGg0jofQstCAn46QOWz4c5rualqj6lFcc9tA",
          "64: DmN7Xs5uCQhJcsyB3Ij6B5ONsHZ15gZ9l9HLyqtBQYDmIFF27bibabccg+g2qkCt",
          "65: peFA9UVbta41RMwVIZGZp2dzFlEqI2w36+HGx0D6mdUKfguGXygFUt884bnHlUy6",
          "66: 6Jntc0xjBWysDpwHk78T2+/7E58iWf9bwS06dn7R4rAVkRtNiysUDc3HGE53GkqU",
          "67: sMUF/AiEgMDPR/jdwOvGrEw1SmSxOkXcMMtnAbk1U/+QmlMV+g+8metGtM8k0NSa",
          "68: L52WhN+8nocw26ANAuGKYPD2WnXdkInjDraelkPOiLYvfs1E/5/c2GpIyiizQWiG",
          "69: mom2W5HMKnJ9vOrNqF0vKuIwr0B8JrTTQsx7x5RR0yXuTXxjM3PEU7m/VKwgE2vQ",
          "70: VWjPMSZJuC/nAbZA5pKLv4uFx6fL8n4/2qtXvHJ+KtzzTreT0mapJ4QqUUtUjm31",
          "71: TY6QCeOLiQNsBBgBCAAgFiEEGjBFab+t+z4/lvDDqipppG7DUvwFAmFOLDwCGwIB",
          "72: wAkQqipppG7DUvzA9CAEGQEIAB0WIQT8Uayf7ZFOytZ+2ypfvagHG/JLeAUCYU4s",
          "73: PAAKCRBfvagHG/JLeHuuDACeEOkmea+0rfUpwReWDY4Vdkd7xkLtwz3sw6IshDuf",
          "74: VI42j8ww+ulgxKDM5fVM17hcc5MyVS34ww3kd98N57dqIPLgT5xQbQchGFA0E9av",
          "75: +S9Xafm+pCcZUVFfp3ZsfJStVjor4oYK8UCnllTuO4r2MYGuOk9MucuHDQGqpp0v",
          "76: C4BK9TGJQbTMwewLJqEP97HlAOr+7fp4vWBfCDt+hp49a8EHD0uHnsvfuN4/hOX2",
          "77: blGPxRvjTB3oN1S4DOFwXVj/YIXxbBwsbhs61DAi2cGe09+yieKd3aVyOs2zEAQq",
          "78: lrdyRCoGTtW2qDq9z1BZnTiVH6FzqXPjGv3C3A9zyQZrlq+zmMSvmZHxpojzpfTH",
          "79: aXfbx7MKhal05kqyMyv1C1CUTKKezfktSpIF2hwM0tJE342UjxJYQtRY30KXrkmr",
          "80: djX3U+bqO7f4NlETbYchh52zlPTalb6Z26hDiMeDpvYBYGsG1wR80OG9lxr0AcsQ",
          "81: jS/awdiQKw32GOE/MesE65PF1wwAtRJXaQktSfEm9PyyD73zRkpdijIPwWpOiChc",
          "82: ej3WZ8OdUZ1dDTlIsU/VF0o4hWDmPBQrkj00SAJuxom7V+iLOG0oFzGRtoaWVeeA",
          "83: CpWHloMc0hRYd3VdTRWK07/0CmoDmN288QuAg0ifzft9CHtf/cawG8f3bta/kG8e",
          "84: cDyKw0uLapKtIJYLoifp5AhDwSfG4XnNAtbkQQ+bDneU/sTfuT/Nl3oIKuk0/J2q",
          "85: NVkcdXnJO9DYQ9VauZQhAANzJiy5pXtX37aakWyh6qGXEFb0CwtCyl08uDvzZBrq",
          "86: Hti4z6dMRAX3+QdZ+QjW4gCyVcqZVLMOp0iJ9DX05MA+C+HLvz4+3ETIgQPWr8oW",
          "87: ECs8fM5q4j8qp2oQbH+EUKoAKLRpxIxeJUC6WDkRGBo8crV0Zj/Hf4zhqEpX9VW2",
          "88: nXuGVzPUj1GXrPaJHcoy3HF6YnscOGSqRNMjxrS34u145BYN1FVALd8MeBsmanS3",
          "89: mcvIRseNw8qeTZR6WaBKlbegolD0",
          "90: =TeIW",
          "91: -----END PGP PRIVATE KEY BLOCK-----",
          "",
          "---------------"
        ],
        "fixtures/verify/test-key.pub.asc||fixtures/verify/test-key.pub.asc": [
          "File: fixtures/verify/test-key.pub.asc -> fixtures/verify/test-key.pub.asc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -----BEGIN PGP PUBLIC KEY BLOCK-----",
          "3: mQGNBGFOK+oBDADUJTgJ7dFD2lL9cKzZu0yM2sdg2WxMrjhSW5lij5V6d/JDKEVq",
          "4: m9BVmDNA8ilXRW1ibV6bk9sWPK2f5aqi+JDuIHNNGk11NLnF7IQpfdB0uQDcC9IQ",
          "5: pyhi6KwH77s6EJXOrI/EU8KnEQ+kPQ53UhG9ASsVsxLB3EUnMLiAQZddVxc/4+o2",
          "6: DUxMB6q7gkb36vJdKIEIAo0+OhCW8jLEURxorUho9Icu2pFakL2u75OXpiiEcYFS",
          "7: BoBecotVeoE/I7hqVRoUQ/HlSLvxlVRUBkh2J3Q3kBxTUlXeBfB09yeg4Yb2a6LX",
          "8: HfJNz2iboqVwpZ8R5Kz/j7CgRu7vHuYQEnrMNGm9YSC9j5808nBwtyrqikx2X8LM",
          "9: Q2dZfaeYcRENWuSNKHFX3q9Zw6WuGqsawUdUGS8ySPHngkBvz8wzIjDRE17S9PfU",
          "10: cEm3eV4tRaQYYTPCzPjU3kLTZebSeqfvW6TY7f9iCTMw9ZdiQFjo99UPmEqf8Kj5",
          "11: cCn6+8QYwaWcxwcAEQEAAbQ9Y29yZW9zLWluc3RhbGxlciBzbmFrZSBvaWwga2V5",
          "12: IDxjb3Jlb3MtaW5zdGFsbGVyQGV4YW1wbGUuY29tPokBzgQTAQgAOAIbAwULCQgH",
          "13: AgYVCgkICwIEFgIDAQIeAQIXgBYhBBowRWm/rfs+P5bww6oqaaRuw1L8BQJhTiwb",
          "14: AAoJEKoqaaRuw1L8ChUMAKMcXwcfetr08Oqbylh5yeFAGKKR8itAQZyE9S7Ofaz8",
          "15: pOKPhlmPo/hp/tv0MR21ZXu9TIjd+zYiCOBKarK1XQutzYOiKpb0dfx+Znij+/f8",
          "16: eBDqTvDZi23g89qSaV7o/QXIdhD2nY6cIv7g+K+R/ceasLAVFn6skuoY6KXl7UzN",
          "17: dFW0oCHKYuX84BlHxcwj8Zxg/SdTGRdP6qfIc6C86IqkK59mrWhA2X6iPf4FeR9L",
          "18: 6XyVB2uDgA3OXSgZLg32XfSvB56lEPs9zclm5NDmh/6Ck1uWa6mNJAT79UXj3ZhK",
          "19: 19PNS3EG35w9sK49b+oUZfEYNexJvWeS2exx24KsCyvKHHFpNU+TnInJ86YwgeWn",
          "20: hpMk6u8Z4rMEyAUkf7QlutCmVKaK/qEcjy/gc6BVDpAR7jWpKwzAOiHjxPWHI5o0",
          "21: AojSpkJnGfpOpNky7fnKaCwzSZHAMfgK7eSrk7HYUcFuGS1nr0OuhjVcJW3Nhcbj",
          "22: aLjxzrYqNb9HYhxtmlXES7kBjQRhTiw8AQwA3gR0FHRNAn3XkQh/1hQoWaXfrvkr",
          "23: RiEFKrzPL/rqD9ltVOYPNzcHHRLCk3peRBpVO/S0sFCpCe8jWFMJQtEIoXbm2ZUH",
          "24: zXWJI8/iWpz/WicUi7Ox9vtWrRf+8wslOY55T8m4pq6QSyzeq3cLL6PDlX9TbxQQ",
          "25: s9EtEFcRT5EKIXwaiAdUhxTcbX5ywnho3DgWK9BY4qO/EIfW4wzwIgDZPbVDxb3F",
          "26: MZEGRik3ldhvnCPRPpYRRWpAdIotd+/AocZEpdKz/fPZA3AI5UqhrsW+sqRxWC8T",
          "27: NTnrOFDr6I+pJe4bmxcgt44c4hy3IcHhmvZRmDsk2BUub6Lwox2OfNiL0nfzwz0g",
          "28: r/R0xM6UExUfI4RqdpDq1dFjkizNsCsiYXV3w8OxXYTCbdPObsR+1jkqDuMRx0MN",
          "29: ML7hCdwm5EAxf+5wPfGAkbnx2meFmCzodhSXM96BSV58pQOPg8h3TsffwTwKeo5h",
          "30: KaV5aHC1UZLUzDQAAdhc3UsHHw/DWOnl+HP3ABEBAAGJA2wEGAEIACAWIQQaMEVp",
          "31: v637Pj+W8MOqKmmkbsNS/AUCYU4sPAIbAgHACRCqKmmkbsNS/MD0IAQZAQgAHRYh",
          "32: BPxRrJ/tkU7K1n7bKl+9qAcb8kt4BQJhTiw8AAoJEF+9qAcb8kt4e64MAJ4Q6SZ5",
          "33: r7St9SnBF5YNjhV2R3vGQu3DPezDoiyEO59UjjaPzDD66WDEoMzl9UzXuFxzkzJV",
          "34: LfjDDeR33w3nt2og8uBPnFBtByEYUDQT1q/5L1dp+b6kJxlRUV+ndmx8lK1WOivi",
          "35: hgrxQKeWVO47ivYxga46T0y5y4cNAaqmnS8LgEr1MYlBtMzB7AsmoQ/3seUA6v7t",
          "36: +ni9YF8IO36Gnj1rwQcPS4eey9+43j+E5fZuUY/FG+NMHeg3VLgM4XBdWP9ghfFs",
          "37: HCxuGzrUMCLZwZ7T37KJ4p3dpXI6zbMQBCqWt3JEKgZO1baoOr3PUFmdOJUfoXOp",
          "38: c+Ma/cLcD3PJBmuWr7OYxK+ZkfGmiPOl9Mdpd9vHswqFqXTmSrIzK/ULUJRMop7N",
          "39: +S1KkgXaHAzS0kTfjZSPElhC1FjfQpeuSat2NfdT5uo7t/g2URNthyGHnbOU9NqV",
          "40: vpnbqEOIx4Om9gFgawbXBHzQ4b2XGvQByxCNL9rB2JArDfYY4T8x6wTrk8XXDAC1",
          "41: EldpCS1J8Sb0/LIPvfNGSl2KMg/Bak6IKFx6PdZnw51RnV0NOUixT9UXSjiFYOY8",
          "42: FCuSPTRIAm7GibtX6Is4bSgXMZG2hpZV54AKlYeWgxzSFFh3dV1NFYrTv/QKagOY",
          "43: 3bzxC4CDSJ/N+30Ie1/9xrAbx/du1r+Qbx5wPIrDS4tqkq0glguiJ+nkCEPBJ8bh",
          "44: ec0C1uRBD5sOd5T+xN+5P82Xeggq6TT8nao1WRx1eck70NhD1Vq5lCEAA3MmLLml",
          "45: e1fftpqRbKHqoZcQVvQLC0LKXTy4O/NkGuoe2LjPp0xEBff5B1n5CNbiALJVyplU",
          "46: sw6nSIn0NfTkwD4L4cu/Pj7cRMiBA9avyhYQKzx8zmriPyqnahBsf4RQqgAotGnE",
          "47: jF4lQLpYOREYGjxytXRmP8d/jOGoSlf1Vbade4ZXM9SPUZes9okdyjLccXpiexw4",
          "48: ZKpE0yPGtLfi7XjkFg3UVUAt3wx4GyZqdLeZy8hGx43Dyp5NlHpZoEqVt6CiUPQ=",
          "49: =EuG+",
          "50: -----END PGP PUBLIC KEY BLOCK-----",
          "",
          "---------------"
        ],
        "src/download.rs||src/download.rs": [
          "File: src/download.rs -> src/download.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         .with_context(|| format!(\"opening {}\", path.display()))?;",
          "125:     Ok(())",
          "126: }",
          "",
          "[Removed Lines]",
          "123:     GpgReader::new(&mut file, signature)?.consume()?;",
          "",
          "[Added Lines]",
          "123:     GpgReader::new(&mut file, signature, VerifyKeys::Production)?.consume()?;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:     let mut verify_reader: Box<dyn Read> = {",
          "186:         if let Some(signature) = source.signature.as_ref() {",
          "188:         } else {",
          "189:             Box::new(&mut source.reader)",
          "190:         }",
          "",
          "[Removed Lines]",
          "187:             Box::new(GpgReader::new(&mut source.reader, signature)?)",
          "",
          "[Added Lines]",
          "187:             Box::new(GpgReader::new(",
          "188:                 &mut source.reader,",
          "189:                 signature,",
          "190:                 VerifyKeys::Production,",
          "191:             )?)",
          "",
          "---------------"
        ],
        "src/verify.rs||src/verify.rs": [
          "File: src/verify.rs -> src/verify.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use std::result;",
          "21: use tempfile::{self, TempDir};",
          "23: pub struct GpgReader<R: Read> {",
          "24:     _gpgdir: TempDir,",
          "25:     source: R,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #[derive(Debug)]",
          "24: pub enum VerifyKeys {",
          "26:     Production,",
          "28:     #[cfg(test)]",
          "29:     InsecureTest,",
          "30: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: }",
          "29: impl<R: Read> GpgReader<R> {",
          "32:         let gpgdir = tempfile::Builder::new()",
          "33:             .prefix(\"coreos-installer-\")",
          "",
          "[Removed Lines]",
          "30:     pub fn new(source: R, signature: &[u8]) -> Result<Self> {",
          "",
          "[Added Lines]",
          "39:     pub fn new(source: R, signature: &[u8], keys: VerifyKeys) -> Result<Self> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:             .context(\"setting mode for temporary directory\")?;",
          "44:         let mut import = Command::new(\"gpg\")",
          "45:             .arg(\"--homedir\")",
          "46:             .arg(gpgdir.path())",
          "",
          "[Removed Lines]",
          "43:         let keys = include_bytes!(\"signing-keys.asc\");",
          "",
          "[Added Lines]",
          "52:         let keys = match keys {",
          "53:             VerifyKeys::Production => &include_bytes!(\"signing-keys.asc\")[..],",
          "54:             #[cfg(test)]",
          "55:             VerifyKeys::InsecureTest => &include_bytes!(\"../fixtures/verify/test-key.pub.asc\")[..],",
          "56:         };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:         let _ = self.child.wait();",
          "190:     }",
          "191: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: #[cfg(test)]",
          "207: mod tests {",
          "208:     use super::*;",
          "211:     #[test]",
          "212:     fn test_good_signature() {",
          "213:         let data = include_bytes!(\"../fixtures/verify/test-key.priv.asc\");",
          "214:         let sig = include_bytes!(\"../fixtures/verify/test-key.priv.asc.sig\");",
          "216:         let mut reader = GpgReader::new(&data[..], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "217:         let mut buf = Vec::new();",
          "218:         reader.read_to_end(&mut buf).unwrap();",
          "219:         assert_eq!(&buf[..], &data[..]);",
          "220:     }",
          "223:     #[test]",
          "224:     fn test_bad_signature() {",
          "225:         let mut data = include_bytes!(\"../fixtures/verify/test-key.priv.asc\").clone();",
          "226:         let sig = include_bytes!(\"../fixtures/verify/test-key.priv.asc.sig\");",
          "227:         data[data.len() - 1] = b'!';",
          "229:         let mut reader = GpgReader::new(&data[..], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "230:         let mut buf = Vec::new();",
          "231:         reader.read_to_end(&mut buf).unwrap_err();",
          "232:     }",
          "235:     #[test]",
          "236:     fn test_truncated_data() {",
          "237:         let data = include_bytes!(\"../fixtures/verify/test-key.priv.asc\");",
          "238:         let sig = include_bytes!(\"../fixtures/verify/test-key.priv.asc.sig\");",
          "240:         let mut reader = GpgReader::new(&data[..1000], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "241:         let mut buf = Vec::new();",
          "242:         reader.read_to_end(&mut buf).unwrap_err();",
          "243:     }",
          "246:     #[test]",
          "247:     fn test_no_pubkey() {",
          "248:         let data = include_bytes!(\"../fixtures/verify/test-key.priv.asc\");",
          "249:         let sig = include_bytes!(\"../fixtures/verify/test-key.priv.asc.random.sig\");",
          "251:         let mut reader = GpgReader::new(&data[..], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "252:         let mut buf = Vec::new();",
          "253:         reader.read_to_end(&mut buf).unwrap_err();",
          "254:     }",
          "255: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c600361bb5a1c978459b9dd69132a7911089663",
      "candidate_info": {
        "commit_hash": "8c600361bb5a1c978459b9dd69132a7911089663",
        "repo": "coreos/coreos-installer",
        "commit_url": "https://github.com/coreos/coreos-installer/commit/8c600361bb5a1c978459b9dd69132a7911089663",
        "files": [
          "src/io.rs",
          "src/osmet/file.rs"
        ],
        "message": "*: use bufread versions of decompressors where possible\n\nIn cases where we're decompressing from a BufReader, use the bufread\nversions of the decompressors to prevent them from wrapping the input in\nanother BufReader internally.",
        "before_after_code_files": [
          "src/io.rs||src/io.rs",
          "src/osmet/file.rs||src/osmet/file.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/coreos/coreos-installer/pull/659"
        ],
        "olp_code_files": {
          "patch": [
            "src/io.rs||src/io.rs"
          ],
          "candidate": [
            "src/io.rs||src/io.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/io.rs||src/io.rs": [
          "File: src/io.rs -> src/io.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use anyhow::{bail, ensure, Context, Result};",
          "17: use openssl::sha;",
          "18: use std::io::{self, BufRead, ErrorKind, Read, Write};",
          "19: use std::result;",
          "",
          "[Removed Lines]",
          "16: use flate2::read::GzDecoder;",
          "20: use xz2::read::XzDecoder;",
          "",
          "[Added Lines]",
          "16: use flate2::bufread::GzDecoder;",
          "20: use xz2::bufread::XzDecoder;",
          "",
          "---------------"
        ],
        "src/osmet/file.rs||src/osmet/file.rs": [
          "File: src/osmet/file.rs -> src/osmet/file.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use bincode::Options;",
          "21: use clap::crate_version;",
          "22: use serde::{Deserialize, Serialize};",
          "25: use crate::io::BUFFER_SIZE;",
          "",
          "[Removed Lines]",
          "23: use xz2::read::XzDecoder;",
          "",
          "[Added Lines]",
          "23: use xz2::bufread::XzDecoder;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbcbefe069fcd53ebc1981fc97fd5b3f94f396db",
      "candidate_info": {
        "commit_hash": "dbcbefe069fcd53ebc1981fc97fd5b3f94f396db",
        "repo": "coreos/coreos-installer",
        "commit_url": "https://github.com/coreos/coreos-installer/commit/dbcbefe069fcd53ebc1981fc97fd5b3f94f396db",
        "files": [
          "src/io/compress.rs"
        ],
        "message": "io/compress: fail on trailing garbage in gzip-compressed streams\n\nUnder normal conditions, GzDecoder doesn't read EOF from the underlying\nsource; it stops reading as soon as it reaches the gzip trailer.  As a\nresult, trailing garbage will not be noticed.  Fix this by trying to read\none more byte from the underlying source and failing if we get one.\n\nRequires the previous commit.\n\nBug discovered by @raballew; thanks!",
        "before_after_code_files": [
          "src/io/compress.rs||src/io/compress.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/io/compress.rs||src/io/compress.rs": [
          "File: src/io/compress.rs -> src/io/compress.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use anyhow::{Context, Result};",
          "16: use flate2::bufread::GzDecoder;",
          "18: use xz2::bufread::XzDecoder;",
          "20: enum CompressDecoder<R: BufRead> {",
          "",
          "[Removed Lines]",
          "17: use std::io::{self, BufRead, Read};",
          "",
          "[Added Lines]",
          "17: use std::io::{self, BufRead, ErrorKind, Read};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         use CompressDecoder::*;",
          "49:         match &mut self.decoder {",
          "50:             Uncompressed(d) => d.read(buf),",
          "52:             Xz(d) => d.read(buf),",
          "53:         }",
          "54:     }",
          "55: }",
          "",
          "[Removed Lines]",
          "51:             Gzip(d) => d.read(buf),",
          "",
          "[Added Lines]",
          "51:             Gzip(d) => {",
          "52:                 let count = d.read(buf)?;",
          "53:                 if count == 0 {",
          "58:                     let mut buf = [0; 1];",
          "59:                     if d.get_mut().read(&mut buf)? > 0 {",
          "60:                         return Err(io::Error::new(",
          "61:                             ErrorKind::InvalidData,",
          "62:                             \"found trailing data after compressed gzip stream\",",
          "63:                         ));",
          "64:                     }",
          "65:                 }",
          "66:                 Ok(count)",
          "67:             }",
          "73: #[cfg(test)]",
          "74: mod tests {",
          "75:     use super::*;",
          "76:     use std::io::BufReader;",
          "80:     #[test]",
          "81:     fn test_decompress_reader_trailing_data() {",
          "82:         test_decompress_reader_trailing_data_one(",
          "83:             &include_bytes!(\"../../fixtures/verify/1M.gz\")[..],",
          "84:         );",
          "85:         test_decompress_reader_trailing_data_one(",
          "86:             &include_bytes!(\"../../fixtures/verify/1M.xz\")[..],",
          "87:         );",
          "88:     }",
          "90:     fn test_decompress_reader_trailing_data_one(input: &[u8]) {",
          "91:         let mut input = input.to_vec();",
          "92:         let mut output = Vec::new();",
          "95:         DecompressReader::new(BufReader::new(&*input))",
          "96:             .unwrap()",
          "97:             .read_to_end(&mut output)",
          "98:             .unwrap();",
          "101:         input.push(0);",
          "102:         DecompressReader::new(BufReader::new(&*input))",
          "103:             .unwrap()",
          "104:             .read_to_end(&mut output)",
          "105:             .unwrap_err();",
          "106:     }",
          "107: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18e3cc6b1f611809eed260b05797e2b488157ac8",
      "candidate_info": {
        "commit_hash": "18e3cc6b1f611809eed260b05797e2b488157ac8",
        "repo": "coreos/coreos-installer",
        "commit_url": "https://github.com/coreos/coreos-installer/commit/18e3cc6b1f611809eed260b05797e2b488157ac8",
        "files": [
          "fixtures/verify/1M.gz",
          "fixtures/verify/1M.gz.sig",
          "src/download.rs",
          "src/io/verify.rs"
        ],
        "message": "download: explicitly check GPG exit status after copy (CVE-2021-20319)\n\nUnder normal conditions, GzDecoder doesn't read EOF from the underlying\nsource; it stops reading as soon as it reaches the gzip trailer.  Since\nthe wrapped GpgReader doesn't see EOF, it doesn't check the exit status of\nGPG, and a bad signature will not be noticed.  XzDecoder is not affected.\n\nThis allows bypass of signature verification under uncommon circumstances.\nNotably, installing from a live ISO or PXE image uses either osmet images\n(Fedora CoreOS or RHEL CoreOS) or a full copy of the install image (RHEL for\nEdge), and these are not affected because they're trusted (they come from\nthe installation media we've booted from).  These flows are affected:\n\n1.  Installing with --image-file, --image-url, or coreos.inst.image_url.\nFor example, if a user has a local mirror of installation images, an\nattacker could replace an image with a gzip-compressed alternative (even\nif the file extension is .xz).  The result:\n\n$ coreos-installer install --image-url http://localhost:8080/image.xz /dev/loop0\nDownloading image from http://localhost:8080/image.xz\nDownloading signature from http://localhost:8080/image.xz.sig\n> Read disk 749.9 MiB/749.9 MiB (100%)\ngpg: Signature made Mon 20 Sep 2021 02:41:50 PM EDT\ngpg: using RSA key 8C5BA6990BDB26E19F2A1A801161AE6945719A39\ngpg: BAD signature from \"Fedora (34) <fedora-34-primary@fedoraproject.org>\" [ultimate]\nInstall complete.\n\nGPG still complains when its stdin is closed, but coreos-installer doesn't\nnotice.  Automation that relies on coreos-installer's exit status will not\nnotice either.\n\n2. `coreos-installer download --decompress --image-url`:\n\n$ coreos-installer download --decompress --image-url http://localhost:8080/image.xz\n> Read disk 749.9 MiB/749.9 MiB (100%)\ngpg: Signature made Mon 20 Sep 2021 02:41:50 PM EDT\ngpg: using RSA key 8C5BA6990BDB26E19F2A1A801161AE6945719A39\ngpg: BAD signature from \"Fedora (34) <fedora-34-primary@fedoraproject.org>\" [ultimate]\n./image\n\nAgain, coreos-installer exits 0.\n\n3. Installing with default parameters, when not using live install media\nwith osmet, if the Red Hat-controlled S3 bucket is compromised or the\nHTTPS connection is successfully MITMed.\n\n4. `coreos-installer download --decompress` if the S3 bucket is\ncompromised or the HTTPS connection is MITMed.\n\nFix this by having callers explicitly check the signature verification\nresult after the fetch pipeline reaches EOF.  This is easiest to do within\nthe mutable borrow rules by adding a new VerifyReader which wraps either\nGpgReader if signatures are being checked, or the underlying source\notherwise.  To ensure that the explicit check is done consistently, drop\nthe implicit one at EOF, so that it'll be clear from a missing GPG report\non stderr that the API was not used correctly.",
        "before_after_code_files": [
          "src/download.rs||src/download.rs",
          "src/io/verify.rs||src/io/verify.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/download.rs||src/download.rs"
          ],
          "candidate": [
            "src/download.rs||src/download.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/download.rs||src/download.rs": [
          "File: src/download.rs -> src/download.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:         .with_context(|| format!(\"opening {}\", path.display()))?;",
          "174:         BufReader::with_capacity(BUFFER_SIZE, &mut file),",
          "176:         keys,",
          "177:     )?;",
          "178:     copy(&mut reader, &mut io::sink())?;",
          "180:     Ok(())",
          "181: }",
          "",
          "[Removed Lines]",
          "173:     let mut reader = GpgReader::new(",
          "175:         signature,",
          "",
          "[Added Lines]",
          "173:     let mut reader = VerifyReader::new(",
          "175:         Some(signature),",
          "179:     reader.verify()?;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241: where",
          "242:     F: FnOnce(&[u8], &mut dyn Read, &mut File, &Path, Option<&SavedPartitions>) -> Result<()>,",
          "243: {",
          "254:         source.length_hint,",
          "255:         &source.artifact_type,",
          "256:     ));",
          "",
          "[Removed Lines]",
          "244:     let mut reader: Box<dyn Read> = Box::new(&mut source.reader);",
          "247:     if let Some(signature) = source.signature.as_ref() {",
          "248:         reader = Box::new(GpgReader::new(reader, signature, keys)?);",
          "249:     }",
          "252:     reader = Box::new(ProgressReader::new(",
          "253:         reader,",
          "",
          "[Added Lines]",
          "247:     let mut verify_reader =",
          "248:         VerifyReader::new(&mut source.reader, source.signature.as_deref(), keys)?;",
          "251:     let mut reader: Box<dyn Read> = Box::new(ProgressReader::new(",
          "252:         &mut verify_reader,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:     image_copy(&first_mb, &mut reader, dest, dest_path, saved)?;",
          "301:     dest.sync_all().context(\"syncing data to disk\")?;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:     drop(reader);",
          "301:     verify_reader.verify()?;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "517:             &include_bytes!(\"../fixtures/verify/1M.sig\")[..],",
          "518:             &[0; 1 << 20][..],",
          "519:         );",
          "520:         test_one_signed_file(",
          "521:             &include_bytes!(\"../fixtures/verify/1M.xz\")[..],",
          "522:             &include_bytes!(\"../fixtures/verify/1M.xz.sig\")[..],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:         test_one_signed_file(",
          "524:             &include_bytes!(\"../fixtures/verify/1M.gz\")[..],",
          "525:             &include_bytes!(\"../fixtures/verify/1M.gz.sig\")[..],",
          "526:             &[0; 1 << 20][..],",
          "527:         );",
          "",
          "---------------"
        ],
        "src/io/verify.rs||src/io/verify.rs": [
          "File: src/io/verify.rs -> src/io/verify.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     Ignore,",
          "38: }",
          "41:     _gpgdir: TempDir,",
          "42:     source: R,",
          "43:     child: Child,",
          "",
          "[Removed Lines]",
          "40: pub struct GpgReader<R: Read> {",
          "",
          "[Added Lines]",
          "40: pub struct VerifyReader<R: Read> {",
          "41:     typ: VerifyType<R>,",
          "42: }",
          "44: enum VerifyType<R: Read> {",
          "45:     None(R),",
          "46:     Gpg(GpgReader<R>),",
          "47: }",
          "49: impl<R: Read> VerifyReader<R> {",
          "50:     pub fn new(source: R, gpg_signature: Option<&[u8]>, keys: VerifyKeys) -> Result<Self> {",
          "51:         let typ = if let Some(signature) = gpg_signature {",
          "52:             VerifyType::Gpg(GpgReader::new(source, signature, keys)?)",
          "53:         } else {",
          "54:             VerifyType::None(source)",
          "55:         };",
          "56:         Ok(VerifyReader { typ })",
          "57:     }",
          "61:     pub fn verify(&mut self) -> Result<()> {",
          "62:         match &mut self.typ {",
          "63:             VerifyType::None(_) => (),",
          "64:             VerifyType::Gpg(reader) => reader.finish(VerifyReport::Stderr)?,",
          "65:         }",
          "66:         Ok(())",
          "67:     }",
          "68: }",
          "70: impl<R: Read> Read for VerifyReader<R> {",
          "71:     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "72:         match &mut self.typ {",
          "73:             VerifyType::None(reader) => reader.read(buf),",
          "74:             VerifyType::Gpg(reader) => reader.read(buf),",
          "75:         }",
          "76:     }",
          "77: }",
          "79: struct GpgReader<R: Read> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: }",
          "47: impl<R: Read> GpgReader<R> {",
          "50:         let gpgdir = tempfile::Builder::new()",
          "51:             .prefix(\"coreos-installer-\")",
          "",
          "[Removed Lines]",
          "48:     pub fn new(source: R, signature: &[u8], keys: VerifyKeys) -> Result<Self> {",
          "",
          "[Added Lines]",
          "87:     fn new(source: R, signature: &[u8], keys: VerifyKeys) -> Result<Self> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:                 .as_mut()",
          "236:                 .unwrap()",
          "237:                 .write_all(&buf[0..count])?;",
          "241:         }",
          "242:         Ok(count)",
          "243:     }",
          "",
          "[Removed Lines]",
          "238:         } else {",
          "240:             self.finish(VerifyReport::Stderr)?;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:         let data = include_bytes!(\"../../fixtures/verify/test-key.priv.asc\");",
          "262:         let sig = include_bytes!(\"../../fixtures/verify/test-key.priv.asc.sig\");",
          "265:         let mut buf = Vec::new();",
          "266:         reader.read_to_end(&mut buf).unwrap();",
          "269:         assert_eq!(&buf[..], &data[..]);",
          "270:     }",
          "",
          "[Removed Lines]",
          "264:         let mut reader = GpgReader::new(&data[..], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "267:         reader.finish(VerifyReport::Stderr).unwrap();",
          "268:         reader.finish(VerifyReport::Stderr).unwrap();",
          "",
          "[Added Lines]",
          "300:         let mut reader =",
          "301:             VerifyReader::new(&data[..], Some(&sig[..]), VerifyKeys::InsecureTest).unwrap();",
          "304:         reader.verify().unwrap();",
          "305:         reader.verify().unwrap();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:         let sig = include_bytes!(\"../../fixtures/verify/test-key.priv.asc.sig\");",
          "277:         data[data.len() - 1] = b'!';",
          "280:         let mut buf = Vec::new();",
          "284:     }",
          "",
          "[Removed Lines]",
          "279:         let mut reader = GpgReader::new(&data[..], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "281:         reader.read_to_end(&mut buf).unwrap_err();",
          "282:         reader.finish(VerifyReport::Stderr).unwrap_err();",
          "283:         reader.finish(VerifyReport::Stderr).unwrap_err();",
          "",
          "[Added Lines]",
          "316:         let mut reader =",
          "317:             VerifyReader::new(&data[..], Some(&sig[..]), VerifyKeys::InsecureTest).unwrap();",
          "319:         reader.read_to_end(&mut buf).unwrap();",
          "320:         reader.verify().unwrap_err();",
          "321:         reader.verify().unwrap_err();",
          "322:         assert_eq!(&buf[..], &data[..]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "289:         let data = include_bytes!(\"../../fixtures/verify/test-key.priv.asc\");",
          "290:         let sig = include_bytes!(\"../../fixtures/verify/test-key.priv.asc.sig\");",
          "293:         let mut buf = Vec::new();",
          "297:     }",
          "",
          "[Removed Lines]",
          "292:         let mut reader = GpgReader::new(&data[..1000], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "294:         reader.read_to_end(&mut buf).unwrap_err();",
          "295:         reader.finish(VerifyReport::Stderr).unwrap_err();",
          "296:         reader.finish(VerifyReport::Stderr).unwrap_err();",
          "",
          "[Added Lines]",
          "331:         let mut reader =",
          "332:             VerifyReader::new(&data[..1000], Some(&sig[..]), VerifyKeys::InsecureTest).unwrap();",
          "334:         reader.read_to_end(&mut buf).unwrap();",
          "335:         reader.verify().unwrap_err();",
          "336:         reader.verify().unwrap_err();",
          "337:         assert_eq!(&buf[..], &data[..1000]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "302:         let data = include_bytes!(\"../../fixtures/verify/test-key.priv.asc\");",
          "303:         let sig = include_bytes!(\"../../fixtures/verify/test-key.priv.asc.random.sig\");",
          "306:         let mut buf = Vec::new();",
          "310:     }",
          "311: }",
          "",
          "[Removed Lines]",
          "305:         let mut reader = GpgReader::new(&data[..], &sig[..], VerifyKeys::InsecureTest).unwrap();",
          "307:         reader.read_to_end(&mut buf).unwrap_err();",
          "308:         reader.finish(VerifyReport::Stderr).unwrap_err();",
          "309:         reader.finish(VerifyReport::Stderr).unwrap_err();",
          "",
          "[Added Lines]",
          "346:         let mut reader =",
          "347:             VerifyReader::new(&data[..], Some(&sig[..]), VerifyKeys::InsecureTest).unwrap();",
          "349:         reader.read_to_end(&mut buf).unwrap();",
          "350:         reader.verify().unwrap_err();",
          "351:         reader.verify().unwrap_err();",
          "352:         assert_eq!(&buf[..], &data[..]);",
          "",
          "---------------"
        ]
      }
    }
  ]
}