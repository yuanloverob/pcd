{
  "cve_id": "CVE-2023-39631",
  "cve_desc": "An issue in LanChain-ai Langchain v.0.0.245 allows a remote attacker to execute arbitrary code via the evaluate function in the numexpr library.",
  "repo": "pydata/numexpr",
  "patch_hash": "4b2d89cf14e75030d27629925b9998e1e91d23c7",
  "patch_info": {
    "commit_hash": "4b2d89cf14e75030d27629925b9998e1e91d23c7",
    "repo": "pydata/numexpr",
    "commit_url": "https://github.com/pydata/numexpr/commit/4b2d89cf14e75030d27629925b9998e1e91d23c7",
    "files": [
      "numexpr/necompiler.py",
      "numexpr/tests/test_numexpr.py"
    ],
    "message": "Add in protections against call to `eval(expression)`",
    "before_after_code_files": [
      "numexpr/necompiler.py||numexpr/necompiler.py",
      "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
    ]
  },
  "patch_diff": {
    "numexpr/necompiler.py||numexpr/necompiler.py": [
      "File: numexpr/necompiler.py -> numexpr/necompiler.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import sys",
      "14: import numpy",
      "15: import threading",
      "17: is_cpu_amd_intel = False # DEPRECATION WARNING: WILL BE REMOVED IN FUTURE RELEASE",
      "18: from numexpr import interpreter, expressions, use_vml",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: import re",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "259:     def __str__(self):",
      "260:         return 'Immediate(%d)' % (self.node.value,)",
      "263: def stringToExpression(s, types, context):",
      "264:     \"\"\"Given a string, convert it to a tree of ExpressionNode's.",
      "265:     \"\"\"",
      "266:     old_ctx = expressions._context.get_current_context()",
      "267:     try:",
      "268:         expressions._context.set_new_context(context)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: _forbidden_re = re.compile('[\\;[\\:]|__')",
      "267:     # sanitize the string for obvious attack vectors that NumExpr cannot",
      "268:     # parse into its homebrew AST. This is to protect the call to `eval` below.",
      "269:     # We forbid `;`, `:`. `[` and `__`",
      "270:     # We would like to forbid `.` but it is both a reference and decimal point.",
      "271:     if _forbidden_re.search(s) is not None:",
      "272:         raise ValueError(f'Expression {s} has forbidden control characters.')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "612:     Returns a `NumExpr` object containing the compiled function.",
      "613:     \"\"\"",
      "617:     # In that case _frame_depth is wrong (it should be 2) but it doesn't matter",
      "618:     # since it will not be used (because truediv='auto' has already been",
      "619:     # translated to either True or False).",
      "",
      "[Removed Lines]",
      "614:     # NumExpr can be called either directly by the end-user, in which case",
      "615:     # kwargs need to be sanitized by getContext, or by evaluate,",
      "616:     # in which case kwargs are in already sanitized.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "758: _names_cache = CacheDict(256)",
      "759: _numexpr_cache = CacheDict(256)",
      "760: _numexpr_last = {}",
      "762: evaluate_lock = threading.Lock()",
      "764: # MAYBE: decorate this function to add attributes instead of having the",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769: _numexpr_sanity = set()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "861:              out: numpy.ndarray = None,",
      "862:              order: str = 'K',",
      "863:              casting: str = 'safe',",
      "866:     \"\"\"",
      "867:     Evaluate a simple array expression element-wise using the virtual machine.",
      "",
      "[Removed Lines]",
      "864:              _frame_depth: int=3,",
      "",
      "[Added Lines]",
      "872:              _frame_depth: int = 3,",
      "",
      "---------------"
    ],
    "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py": [
      "File: numexpr/tests/test_numexpr.py -> numexpr/tests/test_numexpr.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "373:         a1 = array([1., 2., 3.])",
      "374:         b1 = array([4., 5., 6.])",
      "375:         c1 = array([7., 8., 9.])",
      "378:         assert_array_equal(x, array([86., 124., 168.]))",
      "380:     def test_validate(self):",
      "",
      "[Removed Lines]",
      "376:         x = evaluate(\"2*a + 3*b*c\", local_dict={'a': a1, 'b': b1, 'c': c1})",
      "377:         x = re_evaluate()",
      "",
      "[Added Lines]",
      "376:         local_dict={'a': a1, 'b': b1, 'c': c1}",
      "377:         x = evaluate(\"2*a + 3*b*c\", local_dict=local_dict)",
      "378:         x = re_evaluate(local_dict=local_dict)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "400:         a1 = array([1., 2., 3.])",
      "401:         b1 = array([4., 5., 6.])",
      "402:         c1 = array([7., 8., 9.])",
      "404:         assert(retval is None)",
      "406:         assert_array_equal(x, array([86., 124., 168.]))",
      "408:     # Test for issue #22",
      "",
      "[Removed Lines]",
      "403:         retval = validate(\"2*a + 3*b*c\", local_dict={'a': a1, 'b': b1, 'c': c1})",
      "405:         x = re_evaluate()",
      "",
      "[Added Lines]",
      "404:         local_dict={'a': a1, 'b': b1, 'c': c1}",
      "405:         retval = validate(\"2*a + 3*b*c\", local_dict=local_dict)",
      "407:         x = re_evaluate(local_dict=local_dict)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "502:         a = arange(3)",
      "503:         try:",
      "504:             evaluate(\"a < [0, 0, 0]\")",
      "506:             pass",
      "507:         else:",
      "508:             self.fail()",
      "510:     def test_disassemble(self):",
      "511:         assert_equal(disassemble(NumExpr(",
      "512:             \"where(m, a, -1)\", [('m', bool), ('a', float)])),",
      "",
      "[Removed Lines]",
      "505:         except TypeError:",
      "",
      "[Added Lines]",
      "507:         except (ValueError, TypeError):",
      "508:             pass",
      "509:         else:",
      "510:             self.fail()",
      "512:     def test_forbidden_tokens(self):",
      "513:         # Forbid dunder",
      "514:         try:",
      "515:             evaluate('__builtins__')",
      "516:         except ValueError:",
      "517:             pass",
      "518:         else:",
      "519:             self.fail()",
      "521:         # Forbid colon for lambda funcs",
      "522:         try:",
      "523:             evaluate('lambda x: x')",
      "524:         except ValueError:",
      "525:             pass",
      "526:         else:",
      "527:             self.fail()",
      "529:         # Forbid indexing",
      "530:         try:",
      "531:             evaluate('locals()[]')",
      "532:         except ValueError:",
      "537:         # Forbid semicolon",
      "538:         try:",
      "539:             evaluate('import os; os.cpu_count()')",
      "540:         except ValueError:",
      "541:             pass",
      "542:         else:",
      "543:             self.fail()",
      "545:         # I struggle to come up with cases for our ban on `'` and `\"`",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58fbb6fcca476db0d06b7a8638fb2d869137115b",
      "candidate_info": {
        "commit_hash": "58fbb6fcca476db0d06b7a8638fb2d869137115b",
        "repo": "pydata/numexpr",
        "commit_url": "https://github.com/pydata/numexpr/commit/58fbb6fcca476db0d06b7a8638fb2d869137115b",
        "files": [
          "numexpr/necompiler.py"
        ],
        "message": "sanitization: reduce unnecessary rejections",
        "before_after_code_files": [
          "numexpr/necompiler.py||numexpr/necompiler.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "numexpr/necompiler.py||numexpr/necompiler.py"
          ],
          "candidate": [
            "numexpr/necompiler.py||numexpr/necompiler.py"
          ]
        }
      },
      "candidate_diff": {
        "numexpr/necompiler.py||numexpr/necompiler.py": [
          "File: numexpr/necompiler.py -> numexpr/necompiler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: _flow_pat = r'[\\;\\[\\:]'",
          "269: _blacklist_re = re.compile(f'{_flow_pat}|{_dunder_pat}|{_attr_pat}')",
          "271: def stringToExpression(s, types, context, sanitize: bool=True):",
          "",
          "[Removed Lines]",
          "267: _dunder_pat = r'__[\\w]+__'",
          "268: _attr_pat = r'\\.\\b(?!(real|imag|[eE]?[+-]?\\d+)\\b)'",
          "",
          "[Added Lines]",
          "267: _dunder_pat = r'(^|[^\\w])__[\\w]+__($|[^\\w])'",
          "268: _attr_pat = r'\\.\\b(?!(real|imag|\\d*[eE]?[+-]?\\d+)\\b)'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "397cc98359301d0e7b96aaa6d3c79419d1d4f189",
      "candidate_info": {
        "commit_hash": "397cc98359301d0e7b96aaa6d3c79419d1d4f189",
        "repo": "pydata/numexpr",
        "commit_url": "https://github.com/pydata/numexpr/commit/397cc98359301d0e7b96aaa6d3c79419d1d4f189",
        "files": [
          "numexpr/necompiler.py",
          "numexpr/tests/test_numexpr.py"
        ],
        "message": "Add in argument to validate/evaluate for whether to sanitize or not; also improves blacklist to only match proper dunders and not '__' and also better matching against unicode",
        "before_after_code_files": [
          "numexpr/necompiler.py||numexpr/necompiler.py",
          "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "numexpr/necompiler.py||numexpr/necompiler.py",
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ],
          "candidate": [
            "numexpr/necompiler.py||numexpr/necompiler.py",
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ]
        }
      },
      "candidate_diff": {
        "numexpr/necompiler.py||numexpr/necompiler.py": [
          "File: numexpr/necompiler.py -> numexpr/necompiler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:         return 'Immediate(%d)' % (self.node.value,)",
          "266:     \"\"\"Given a string, convert it to a tree of ExpressionNode's.",
          "267:     \"\"\"",
          "268:     # sanitize the string for obvious attack vectors that NumExpr cannot",
          "269:     # parse into its homebrew AST. This is to protect the call to `eval` below.",
          "270:     # We forbid `;`, `:`. `[` and `__`, and attribute access via '.'.",
          "271:     # We cannot ban `.real` or `.imag` however...",
          "276:     old_ctx = expressions._context.get_current_context()",
          "277:     try:",
          "",
          "[Removed Lines]",
          "264: _forbidden_re = re.compile('[\\;[\\:]|__|\\.[abcdefghjklmnopqstuvwxyzA-Z_]')",
          "265: def stringToExpression(s, types, context):",
          "272:     no_whitespace = re.sub(r'\\s+', '', s)",
          "273:     if _forbidden_re.search(no_whitespace) is not None:",
          "274:         raise ValueError(f'Expression {s} has forbidden control characters.')",
          "",
          "[Added Lines]",
          "264: _flow_pat = r'[\\;\\[\\:]'",
          "265: _dunder_pat = r'__[\\w]+__'",
          "266: _attr_pat = r'\\.\\b(?!(real|imag|\\d+)\\b)'",
          "267: _blacklist_re = re.compile(f'{_flow_pat}|{_dunder_pat}|{_attr_pat}')",
          "269: def stringToExpression(s, types, context, sanitize: bool):",
          "276:     if sanitize:",
          "277:         no_whitespace = re.sub(r'\\s+', '', s)",
          "278:         if _blacklist_re.search(no_whitespace) is not None:",
          "279:             raise ValueError(f'Expression {s} has forbidden control characters.')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "558:     return context",
          "562:     \"\"\"",
          "563:     Compile the expression to an intermediate form.",
          "564:     \"\"\"",
          "",
          "[Removed Lines]",
          "561: def precompile(ex, signature=(), context={}):",
          "",
          "[Added Lines]",
          "566: def precompile(ex, signature=(), context={}, sanitize: bool=True):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:     input_order = [name for (name, type_) in signature]",
          "568:     if isinstance(ex, str):",
          "571:     # the AST is like the expression, but the node objects don't have",
          "572:     # any odd interpretations",
          "",
          "[Removed Lines]",
          "569:         ex = stringToExpression(ex, types, context)",
          "",
          "[Added Lines]",
          "574:         ex = stringToExpression(ex, types, context, sanitize)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:     return threeAddrProgram, signature, tempsig, constants, input_names",
          "616:     \"\"\"",
          "617:     Compile an expression built using E.<variable> variables to a function.",
          "",
          "[Removed Lines]",
          "615: def NumExpr(ex, signature=(), **kwargs):",
          "",
          "[Added Lines]",
          "620: def NumExpr(ex,  signature=(), sanitize: bool=True, **kwargs):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "629:     # translated to either True or False).",
          "630:     _frame_depth = 1",
          "631:     context = getContext(kwargs, _frame_depth=_frame_depth)",
          "633:     program = compileThreeAddrForm(threeAddrProgram)",
          "634:     return interpreter.NumExpr(inputsig.encode('ascii'),",
          "635:                                tempsig.encode('ascii'),",
          "",
          "[Removed Lines]",
          "632:     threeAddrProgram, inputsig, tempsig, constants, input_names = precompile(ex, signature, context)",
          "",
          "[Added Lines]",
          "637:     threeAddrProgram, inputsig, tempsig, constants, input_names = precompile(ex, signature, context, sanitize=sanitize)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "710:     raise ValueError(\"unknown type %s\" % a.dtype.name)",
          "715:     ast = expressionToAST(ex)",
          "716:     input_order = getInputOrder(ast, None)",
          "717:     #try to figure out if vml operations are used by expression",
          "",
          "[Removed Lines]",
          "713: def getExprNames(text, context):",
          "714:     ex = stringToExpression(text, {}, context)",
          "",
          "[Added Lines]",
          "718: def getExprNames(text, context, sanitize: bool=True):",
          "719:     ex = stringToExpression(text, {}, context, sanitize)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "779:              order: str = 'K',",
          "780:              casting: str = 'safe',",
          "781:              _frame_depth: int = 2,",
          "783:     \"\"\"",
          "784:     Validate a NumExpr expression with the given `local_dict` or `locals()`.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "787:              sanitize: bool = True,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "826:             like float64 to float32, are allowed.",
          "829:     _frame_depth: int",
          "830:         The calling frame depth. Unless you are a NumExpr developer you should",
          "831:         not set this value.",
          "833:     Note",
          "834:     ----",
          "839:     \"\"\"",
          "840:     global _numexpr_last",
          "",
          "[Removed Lines]",
          "835:     Both `validate` and by extension `evaluate` call `eval(ex)`, which is",
          "836:     potentially dangerous on unsanitized inputs. As such, NumExpr does some",
          "837:     sanitization, banning the character ':;[', the dunder '__', and attribute",
          "838:     access to all but '.r' for real and '.i' for imag access to complex numbers.",
          "",
          "[Added Lines]",
          "835:     sanitize: bool",
          "836:         Both `validate` and by extension `evaluate` call `eval(ex)`, which is",
          "837:         potentially dangerous on unsanitized inputs. As such, NumExpr by default",
          "838:         performs simple sanitization, banning the character ':;[', the",
          "839:         dunder '__[\\w+]__', and attribute access to all but '.real' and '.imag'.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "848:         context = getContext(kwargs)",
          "849:         expr_key = (ex, tuple(sorted(context.items())))",
          "850:         if expr_key not in _names_cache:",
          "852:         names, ex_uses_vml = _names_cache[expr_key]",
          "853:         arguments = getArguments(names, local_dict, global_dict, _frame_depth=_frame_depth)",
          "",
          "[Removed Lines]",
          "851:             _names_cache[expr_key] = getExprNames(ex, context)",
          "",
          "[Added Lines]",
          "860:             _names_cache[expr_key] = getExprNames(ex, context, sanitize=sanitize)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "861:         try:",
          "862:             compiled_ex = _numexpr_cache[numexpr_key]",
          "863:         except KeyError:",
          "865:         kwargs = {'out': out, 'order': order, 'casting': casting,",
          "866:                 'ex_uses_vml': ex_uses_vml}",
          "867:         _numexpr_last = dict(ex=compiled_ex, argnames=names, kwargs=kwargs)",
          "",
          "[Removed Lines]",
          "864:             compiled_ex = _numexpr_cache[numexpr_key] = NumExpr(ex, signature, **context)",
          "",
          "[Added Lines]",
          "873:             compiled_ex = _numexpr_cache[numexpr_key] = NumExpr(ex, signature, sanitize=sanitize, **context)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "875:              out: numpy.ndarray = None,",
          "876:              order: str = 'K',",
          "877:              casting: str = 'safe',",
          "878:              _frame_depth: int = 3,",
          "880:     \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:              sanitize: bool = True,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "920:             like float64 to float32, are allowed.",
          "923:     _frame_depth: int",
          "924:         The calling frame depth. Unless you are a NumExpr developer you should",
          "925:         not set this value.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:     sanitize: bool",
          "934:         Both `validate` and by extension `evaluate` call `eval(ex)`, which is",
          "935:         potentially dangerous on unsanitized inputs. As such, NumExpr by default",
          "936:         performs simple sanitization, banning the character ':;[', the",
          "937:         dunder '__[\\w+]__', and attribute access to all but '.real' and '.imag'.",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "936:     # `getArguments`",
          "937:     e = validate(ex, local_dict=local_dict, global_dict=global_dict,",
          "938:                  out=out, order=order, casting=casting,",
          "940:     if e is None:",
          "941:         return re_evaluate(local_dict=local_dict, _frame_depth=_frame_depth)",
          "942:     else:",
          "",
          "[Removed Lines]",
          "939:                  _frame_depth=_frame_depth, **kwargs)",
          "",
          "[Added Lines]",
          "955:                  _frame_depth=_frame_depth, sanitize=sanitize, **kwargs)",
          "",
          "---------------"
        ],
        "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py": [
          "File: numexpr/tests/test_numexpr.py -> numexpr/tests/test_numexpr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:         # Forbid indexing",
          "530:         try:",
          "532:         except ValueError:",
          "533:             pass",
          "534:         else:",
          "",
          "[Removed Lines]",
          "531:             evaluate('locals()[]')",
          "",
          "[Added Lines]",
          "531:             evaluate('locals()[\"evaluate\"]')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:         else:",
          "543:             self.fail()",
          "546:         try:",
          "548:         except ValueError:",
          "549:             pass",
          "550:         else:",
          "551:             self.fail()",
          "554:         a = 3.0",
          "555:         evaluate('a*2.')",
          "556:         evaluate('2.+a')",
          "564:     def test_disassemble(self):",
          "565:         assert_equal(disassemble(NumExpr(",
          "",
          "[Removed Lines]",
          "545:         # Attribute access",
          "547:             evaluate('os.cpucount()')",
          "553:         # But decimal point must pass",
          "",
          "[Added Lines]",
          "545:         # Attribute access with spaces",
          "547:             evaluate('os. cpu_count()')",
          "553:         # Attribute access with funny unicode characters that eval translates",
          "554:         # into ASCII.",
          "555:         try:",
          "556:             evaluate(\"(3+1).\u1d47it_length()\")",
          "557:         except ValueError:",
          "558:             pass",
          "559:         else:",
          "560:             self.fail()",
          "562:         # Pass decimal points",
          "567:         # pass .real and .imag",
          "568:         c = 2.5 + 1.5j",
          "569:         evaluate('c.real')",
          "570:         evaluate('c.imag')",
          "572:     def test_no_sanitize(self):",
          "573:         try: # Errors on compile() after eval()",
          "574:             evaluate('import os;', sanitize=False)",
          "575:         except SyntaxError:",
          "576:             pass",
          "577:         else:",
          "578:             self.fail()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9d34a907442bd134fa330e8c1b6bbc336a67a8",
      "candidate_info": {
        "commit_hash": "bf9d34a907442bd134fa330e8c1b6bbc336a67a8",
        "repo": "pydata/numexpr",
        "commit_url": "https://github.com/pydata/numexpr/commit/bf9d34a907442bd134fa330e8c1b6bbc336a67a8",
        "files": [
          "numexpr/necompiler.py"
        ],
        "message": "fix sanitizer forbid usage of \\d+.\\d*j",
        "before_after_code_files": [
          "numexpr/necompiler.py||numexpr/necompiler.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "numexpr/necompiler.py||numexpr/necompiler.py"
          ],
          "candidate": [
            "numexpr/necompiler.py||numexpr/necompiler.py"
          ]
        }
      },
      "candidate_diff": {
        "numexpr/necompiler.py||numexpr/necompiler.py": [
          "File: numexpr/necompiler.py -> numexpr/necompiler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "266: _flow_pat = r'[\\;\\[\\:]'",
          "267: _dunder_pat = r'(^|[^\\w])__[\\w]+__($|[^\\w])'",
          "269: _blacklist_re = re.compile(f'{_flow_pat}|{_dunder_pat}|{_attr_pat}')",
          "271: def stringToExpression(s, types, context, sanitize: bool=True):",
          "",
          "[Removed Lines]",
          "268: _attr_pat = r'\\.\\b(?!(real|imag|\\d*[eE]?[+-]?\\d+)\\b)'",
          "",
          "[Added Lines]",
          "268: _attr_pat = r'\\.\\b(?!(real|imag|(\\d*[eE]?[+-]?\\d+)|\\d*j)\\b)'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:     # parse into its homebrew AST. This is to protect the call to `eval` below.",
          "276:     # We forbid `;`, `:`. `[` and `__`, and attribute access via '.'.",
          "277:     # We cannot ban `.real` or `.imag` however...",
          "278:     if sanitize:",
          "279:         no_whitespace = re.sub(r'\\s+', '', s)",
          "280:         if _blacklist_re.search(no_whitespace) is not None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     # We also cannot ban `.\\d*j`, where `\\d*` is some digits (or none), e.g. 1.5j, 1.j",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00b035c78ca5ac209b58b56b5dcc99596cac423c",
      "candidate_info": {
        "commit_hash": "00b035c78ca5ac209b58b56b5dcc99596cac423c",
        "repo": "pydata/numexpr",
        "commit_url": "https://github.com/pydata/numexpr/commit/00b035c78ca5ac209b58b56b5dcc99596cac423c",
        "files": [
          "ANNOUNCE.rst",
          "RELEASE_NOTES.rst",
          "doc/user_guide.rst",
          "numexpr/necompiler.py",
          "numexpr/tests/test_numexpr.py"
        ],
        "message": "Make more difficult sanitize of the expression string before eval",
        "before_after_code_files": [
          "numexpr/necompiler.py||numexpr/necompiler.py",
          "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "numexpr/necompiler.py||numexpr/necompiler.py",
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ],
          "candidate": [
            "numexpr/necompiler.py||numexpr/necompiler.py",
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ]
        }
      },
      "candidate_diff": {
        "numexpr/necompiler.py||numexpr/necompiler.py": [
          "File: numexpr/necompiler.py -> numexpr/necompiler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     def __str__(self):",
          "261:         return 'Immediate(%d)' % (self.node.value,)",
          "264: def stringToExpression(s, types, context):",
          "265:     \"\"\"Given a string, convert it to a tree of ExpressionNode's.",
          "266:     \"\"\"",
          "267:     # sanitize the string for obvious attack vectors that NumExpr cannot",
          "268:     # parse into its homebrew AST. This is to protect the call to `eval` below.",
          "272:         raise ValueError(f'Expression {s} has forbidden control characters.')",
          "274:     old_ctx = expressions._context.get_current_context()",
          "",
          "[Removed Lines]",
          "263: _forbidden_re = re.compile('[\\;[\\:]|__')",
          "269:     # We forbid `;`, `:`. `[` and `__`",
          "270:     # We would like to forbid `.` but it is both a reference and decimal point.",
          "271:     if _forbidden_re.search(s) is not None:",
          "",
          "[Added Lines]",
          "264: _forbidden_re = re.compile('[\\;[\\:]|__|\\.[abcdefghjklmnopqstuvwxyzA-Z_]')",
          "270:     # We forbid `;`, `:`. `[` and `__`, and attribute access via '.'.",
          "271:     # We cannot ban `.real` or `.imag` however...",
          "272:     no_whitespace = re.sub(r'\\s+', '', s)",
          "273:     if _forbidden_re.search(no_whitespace) is not None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "766: _names_cache = CacheDict(256)",
          "767: _numexpr_cache = CacheDict(256)",
          "768: _numexpr_last = {}",
          "770: evaluate_lock = threading.Lock()",
          "772: # MAYBE: decorate this function to add attributes instead of having the",
          "",
          "[Removed Lines]",
          "769: _numexpr_sanity = set()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "828:     _frame_depth: int",
          "829:         The calling frame depth. Unless you are a NumExpr developer you should",
          "830:         not set this value.",
          "831:     \"\"\"",
          "832:     global _numexpr_last",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833:     Note",
          "834:     ----",
          "835:     Both `validate` and by extension `evaluate` call `eval(ex)`, which is",
          "836:     potentially dangerous on unsanitized inputs. As such, NumExpr does some",
          "837:     sanitization, banning the character ':;[', the dunder '__', and attribute",
          "838:     access to all but '.r' for real and '.i' for imag access to complex numbers.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "857:         kwargs = {'out': out, 'order': order, 'casting': casting,",
          "858:                 'ex_uses_vml': ex_uses_vml}",
          "859:         _numexpr_last = dict(ex=compiled_ex, argnames=names, kwargs=kwargs)",
          "862:     except Exception as e:",
          "863:         return e",
          "864:     return None",
          "",
          "[Removed Lines]",
          "860:         # with evaluate_lock:",
          "861:         #     return compiled_ex(*arguments, **kwargs)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "918:         The calling frame depth. Unless you are a NumExpr developer you should",
          "919:         not set this value.",
          "922:     \"\"\"",
          "923:     # We could avoid code duplication if we called validate and then re_evaluate",
          "924:     # here, but they we have difficulties with the `sys.getframe(2)` call in",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:     Note",
          "928:     ----",
          "929:     Both `validate` and by extension `evaluate` call `eval(ex)`, which is",
          "930:     potentially dangerous on unsanitized inputs. As such, NumExpr does some",
          "931:     sanitization, banning the character ':;[', the dunder '__', and attribute",
          "932:     access to all but '.r' for real and '.i' for imag access to complex numbers.",
          "",
          "---------------"
        ],
        "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py": [
          "File: numexpr/tests/test_numexpr.py -> numexpr/tests/test_numexpr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "537:         # Forbid semicolon",
          "538:         try:",
          "540:         except ValueError:",
          "541:             pass",
          "542:         else:",
          "543:             self.fail()",
          "",
          "[Removed Lines]",
          "539:             evaluate('import os; os.cpu_count()')",
          "545:         # I struggle to come up with cases for our ban on `'` and `\"`",
          "",
          "[Added Lines]",
          "539:             evaluate('import os;')",
          "545:         # Attribute access",
          "546:         try:",
          "547:             evaluate('os.cpucount()')",
          "548:         except ValueError:",
          "549:             pass",
          "550:         else:",
          "551:             self.fail()",
          "553:         # But decimal point must pass",
          "554:         a = 3.0",
          "555:         evaluate('a*2.')",
          "556:         evaluate('2.+a')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e894e08371195e69e92c797f46a2aeafdbe8f9a7",
      "candidate_info": {
        "commit_hash": "e894e08371195e69e92c797f46a2aeafdbe8f9a7",
        "repo": "pydata/numexpr",
        "commit_url": "https://github.com/pydata/numexpr/commit/e894e08371195e69e92c797f46a2aeafdbe8f9a7",
        "files": [
          "numexpr/tests/test_numexpr.py"
        ],
        "message": "Fix some warnings with modern pytest",
        "before_after_code_files": [
          "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ],
          "candidate": [
            "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py"
          ]
        }
      },
      "candidate_diff": {
        "numexpr/tests/test_numexpr.py||numexpr/tests/test_numexpr.py": [
          "File: numexpr/tests/test_numexpr.py -> numexpr/tests/test_numexpr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:     def test_locals_clears_globals(self):",
          "320:         # Check for issue #313, whereby clearing f_locals also clear f_globals",
          "322:         # executing code in a child frame.",
          "323:         script = r';'.join([",
          "324:                 r\"import numexpr as ne\",",
          "",
          "[Removed Lines]",
          "321:         # if in the top-frame. This cannot be done inside `unittest` as it is always",
          "",
          "[Added Lines]",
          "321:         # if in the top-frame. This cannot be done inside `unittest` as it is always",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:             ])",
          "335:         # Raises CalledProcessError on a non-normal exit",
          "336:         check = subprocess.check_call([sys.executable, '-c', script])",
          "338:         # a requirement.",
          "",
          "[Removed Lines]",
          "337:         # Ideally this test should also be done against ipython but it's not",
          "",
          "[Added Lines]",
          "337:         # Ideally this test should also be done against ipython but it's not",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "521:                 self.fail()",
          "523:             # Forbid colon for lambda funcs",
          "525:                 evaluate('lambda x: x')",
          "526:             except ValueError:",
          "527:                 pass",
          "",
          "[Removed Lines]",
          "524:             try:",
          "",
          "[Added Lines]",
          "524:             try:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:     def test_disassemble(self):",
          "606:         assert_equal(disassemble(NumExpr(",
          "607:             \"where(m, a, -1)\", [('m', bool), ('a', float)])),",
          "609:              [b'noop', None, None, None]])",
          "611:     def test_constant_deduplication(self):",
          "",
          "[Removed Lines]",
          "608:             [[b'where_fbff', b'r0', b'r1[m]', b'r2[a]', b'c3[-1.0]'],",
          "",
          "[Added Lines]",
          "608:             [[b'where_fbff', b'r0', b'r1[m]', b'r2[a]', b'c3[-1.0]'],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "624:         assert_equal(ConstantNode(numpy.float32(1)).astKind, \"float\")",
          "625:         assert_equal(ConstantNode(numpy.float32(\"nan\")).astKind, \"float\")",
          "626:         assert_equal(ConstantNode(numpy.float32(3)).value.dtype, numpy.dtype(\"float32\"))",
          "628:                            numpy.array(1, dtype=\"float32\"))",
          "630:     def test_unaligned_singleton(self):",
          "632:         # aligned or not.",
          "633:         a = np.empty(5, dtype=np.uint8)[1:].view(np.int32)",
          "634:         evaluate('3', out=a)",
          "635:         assert_equal(a, 3)",
          "637:     def test_negative_mod(self):",
          "639:         # actually remainder op, and hence different from Python modulus.",
          "640:         a = np.array([-500, -135, 0, 0, 135, 500], dtype=np.int32)",
          "641:         n = np.array([-360, -360, -360, 360, 360, 360], dtype=np.int32)",
          "",
          "[Removed Lines]",
          "627:         assert_array_equal(NumExpr(ConstantNode(numpy.float32(1))).run(),",
          "631:         # Test for issue #397 whether singletons outputs assigned to consts must be",
          "638:         # Test for issue #413, modulus of negative integers. C modulus is",
          "",
          "[Added Lines]",
          "627:         assert_array_equal(NumExpr(ConstantNode(numpy.float32(1))).run(),",
          "631:         # Test for issue #397 whether singletons outputs assigned to consts must be",
          "638:         # Test for issue #413, modulus of negative integers. C modulus is",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "650:     def test_negative_power_scalar(self):",
          "651:         # Test for issue #428, where the power is negative and the base is an",
          "652:         # integer. This was running afoul in the precomputation in `expressions.py:pow_op()`",
          "654:         out_i = evaluate('base ** -1.0')",
          "655:         assert_equal(out_i, np.power(base, -1.0))",
          "658:         out_l = evaluate('base ** -1.0')",
          "659:         assert_equal(out_l, np.power(base, -1.0))",
          "",
          "[Removed Lines]",
          "653:         base = np.array([-2, -1, 0, 1, 2, 3], dtype=np.int32)",
          "657:         base = np.array([-2, -1, 0, 1, 2, 3], dtype=np.int64)",
          "",
          "[Added Lines]",
          "653:         base = np.array([-2, -1, 1, 2, 3], dtype=np.int32)",
          "657:         base = np.array([-2, -1, 1, 2, 3], dtype=np.int64)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "878:                                     expr == '(a+1) ** -1'):",
          "879:                             continue",
          "888: class test_int64(TestCase):",
          "",
          "[Removed Lines]",
          "881:                         m = make_test_method(a, a2, b, c, d, e, x,",
          "882:                                              expr, test_scalar, dtype,",
          "883:                                              optimization, exact,",
          "884:                                              section_name)",
          "885:                         yield m",
          "",
          "[Added Lines]",
          "881:                         make_test_method(a, a2, b, c, d, e, x,",
          "882:                                          expr, test_scalar, dtype,",
          "883:                                          optimization, exact,",
          "884:                                          section_name)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1120: # Test cases for the threading configuration",
          "1121: class test_threading_config(TestCase):",
          "1122:     def test_max_threads_unset(self):",
          "1124:         # re-initialize the threadpool",
          "1125:         script = '\\n'.join([",
          "1126:                 \"import os\",",
          "",
          "[Removed Lines]",
          "1123:         # Has to be done in a subprocess as `importlib.reload` doesn't let us",
          "",
          "[Added Lines]",
          "1122:         # Has to be done in a subprocess as `importlib.reload` doesn't let us",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1132:         subprocess.check_call([sys.executable, '-c', script])",
          "1134:     def test_max_threads_set(self):",
          "1136:         # re-initialize the threadpool",
          "1137:         script = '\\n'.join([",
          "1138:                 \"import os\",",
          "",
          "[Removed Lines]",
          "1135:         # Has to be done in a subprocess as `importlib.reload` doesn't let us",
          "",
          "[Added Lines]",
          "1134:         # Has to be done in a subprocess as `importlib.reload` doesn't let us",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1247:     (sysname, nodename, release, os_version, machine, processor) = platform.uname()",
          "1248:     print('Platform:          %s-%s-%s' % (sys.platform, machine, os_version))",
          "1249:     try:",
          "1251:         # with a try block",
          "1252:         cpu_info = cpu.info[0]",
          "1253:         print('CPU vendor:        %s' % cpu_info.get('VendorIdentifier', ''))",
          "",
          "[Removed Lines]",
          "1250:         # cpuinfo doesn't work on OSX well it seems, so protect these outputs",
          "",
          "[Added Lines]",
          "1249:         # cpuinfo doesn't work on OSX well it seems, so protect these outputs",
          "",
          "---------------"
        ]
      }
    }
  ]
}