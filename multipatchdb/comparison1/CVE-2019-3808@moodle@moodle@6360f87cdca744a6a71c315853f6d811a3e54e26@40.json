{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "773b1f738fa2cfc4bde4b5ab0efc24b38e1ae69f",
      "candidate_info": {
        "commit_hash": "773b1f738fa2cfc4bde4b5ab0efc24b38e1ae69f",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/773b1f738fa2cfc4bde4b5ab0efc24b38e1ae69f",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "36: $branch   = '38';                       // This version's branch.",
          "37: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019111800.02;              // 20191118      = branching date YYYYMMDD - do not modify!",
          "35: $release  = '3.8+ (Build: 20191129)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019111800.03;              // 20191118      = branching date YYYYMMDD - do not modify!",
          "35: $release  = '3.8+ (Build: 20191205)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ab00274610a52d31dc1dffe0dc531b158223d3",
      "candidate_info": {
        "commit_hash": "09ab00274610a52d31dc1dffe0dc531b158223d3",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/09ab00274610a52d31dc1dffe0dc531b158223d3",
        "files": [
          "h5p/classes/core.php",
          "h5p/classes/framework.php",
          "h5p/tests/generator/lib.php",
          "h5p/tests/generator_test.php",
          "h5p/tests/h5p_core_test.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-67194-master' of git://github.com/vmdef/moodle",
        "before_after_code_files": [
          "h5p/classes/core.php||h5p/classes/core.php",
          "h5p/classes/framework.php||h5p/classes/framework.php",
          "h5p/tests/generator/lib.php||h5p/tests/generator/lib.php",
          "h5p/tests/generator_test.php||h5p/tests/generator_test.php",
          "h5p/tests/h5p_core_test.php||h5p/tests/h5p_core_test.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "h5p/classes/core.php||h5p/classes/core.php": [
          "File: h5p/classes/core.php -> h5p/classes/core.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         $typesinstalled = [];",
          "173:         foreach ($contenttypes->contentTypes as $type) {",
          "174:             $library = [",
          "175:                 'machineName' => $type->id,",
          "176:                 'majorVersion' => $type->version->major,",
          "177:                 'minorVersion' => $type->version->minor,",
          "179:             ];",
          "181:             $factory = new \\core_h5p\\factory();",
          "",
          "[Removed Lines]",
          "178:                 'patchVersion' => $type->version->patch,",
          "",
          "[Added Lines]",
          "175:             if (!$this->is_required_core_api($type->coreApiVersionNeeded)) {",
          "176:                 continue;",
          "177:             }",
          "183:                 'patchVersion' => $type->version->patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:         return $contenttypes;",
          "286:     }",
          "287: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:     public function is_required_core_api($coreapi): bool {",
          "300:         if (isset($coreapi) && !empty($coreapi)) {",
          "301:             if (($coreapi->major > H5PCore::$coreApi['majorVersion']) ||",
          "302:                 (($coreapi->major == H5PCore::$coreApi['majorVersion']) && ($coreapi->minor > H5PCore::$coreApi['minorVersion']))) {",
          "303:                 return false;",
          "304:             }",
          "305:         }",
          "306:         return true;",
          "307:     }",
          "",
          "---------------"
        ],
        "h5p/classes/framework.php||h5p/classes/framework.php": [
          "File: h5p/classes/framework.php -> h5p/classes/framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:             'droplibrarycss' => $droplibrarycss,",
          "721:             'semantics' => $librarydata['semantics'],",
          "722:             'addto' => isset($librarydata['addTo']) ? json_encode($librarydata['addTo']) : null,",
          "723:         );",
          "725:         if ($new) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:             'coremajor' => isset($librarydata['coreApi']['majorVersion']) ? $librarydata['coreApi']['majorVersion'] : null,",
          "724:             'coreminor' => isset($librarydata['coreApi']['majorVersion']) ? $librarydata['coreApi']['minorVersion'] : null,",
          "",
          "---------------"
        ],
        "h5p/tests/generator/lib.php||h5p/tests/generator/lib.php": [
          "File: h5p/tests/generator/lib.php -> h5p/tests/generator/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:                 'majorversion' => $contenttype->version->major,",
          "373:                 'minorversion' => $contenttype->version->minor,",
          "374:                 'patchversion' => $contenttype->version->patch,",
          "376:             ];",
          "377:             $DB->insert_record('h5p_libraries', (object) $library);",
          "378:         }",
          "",
          "[Removed Lines]",
          "375:                 'runnable' => 1",
          "",
          "[Added Lines]",
          "375:                 'runnable' => 1,",
          "376:                 'coremajor' => $contenttype->coreApiVersionNeeded->major,",
          "377:                 'coreminor' => $contenttype->coreApiVersionNeeded->minor",
          "",
          "---------------"
        ],
        "h5p/tests/generator_test.php||h5p/tests/generator_test.php": [
          "File: h5p/tests/generator_test.php -> h5p/tests/generator_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:             'preloadedcss' => 'css/example.css',",
          "244:             'droplibrarycss' => '',",
          "245:             'semantics' => 'Semantics example',",
          "247:         ];",
          "249:         $this->assertEquals($expected, $data);",
          "",
          "[Removed Lines]",
          "246:             'addto' => '/regex11/'",
          "",
          "[Added Lines]",
          "246:             'addto' => '/regex11/',",
          "247:             'coremajor' => null,",
          "248:             'coreminor' => null,",
          "",
          "---------------"
        ],
        "h5p/tests/h5p_core_test.php||h5p/tests/h5p_core_test.php": [
          "File: h5p/tests/h5p_core_test.php -> h5p/tests/h5p_core_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:             $this->markTestSkipped('PHPUNIT_LONGTEST is not defined');",
          "61:         }",
          "63:         $library = [",
          "68:         ];",
          "79:         $this->core->fetch_content_type($library);",
          "83:     }",
          "",
          "[Removed Lines]",
          "64:                 'machineName' => 'H5P.Accordion',",
          "65:                 'majorVersion' => 1,",
          "66:                 'minorVersion' => 0,",
          "67:                 'patchVersion' => 0,",
          "70:         $sql = 'SELECT count(id)",
          "71:                   FROM {files}",
          "72:                  WHERE ' . $DB->sql_like('filepath', ':filepath');",
          "73:         $params['filepath'] = \"/{$library['machineName']}-%\";",
          "75:         $contentfiles = $DB->count_records_sql($sql, $params);",
          "77:         $this->assertEquals(0, $contentfiles);",
          "81:         $contentfiles = $DB->count_records_sql($sql, $params);",
          "82:         $this->assertGreaterThan(0, $contentfiles);",
          "",
          "[Added Lines]",
          "64:         $contenttypes = $this->core->get_latest_content_types()->contentTypes;",
          "66:         $librarydata = $contenttypes[0];",
          "69:                 'machineName' => $librarydata->id,",
          "70:                 'majorVersion' => $librarydata->version->major,",
          "71:                 'minorVersion' => $librarydata->version->minor,",
          "72:                 'patchVersion' => $librarydata->version->patch,",
          "76:         $conditions['machinename'] = $library['machineName'];",
          "77:         $typeinstalled = $DB->count_records('h5p_libraries', $conditions);",
          "79:         $this->assertEquals(0, $typeinstalled);",
          "85:         $typeinstalled = $DB->get_record('h5p_libraries', $conditions);",
          "86:         $this->assertEquals($librarydata->id, $typeinstalled->machinename);",
          "87:         $this->assertEquals($librarydata->coreApiVersionNeeded->major, $typeinstalled->coremajor);",
          "88:         $this->assertEquals($librarydata->coreApiVersionNeeded->minor, $typeinstalled->coreminor);",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3762:         upgrade_main_savepoint(true, 2019103000.13);",
          "3763:     }",
          "3765:     return true;",
          "3766: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3765:     if ($oldversion < 2019111300.00) {",
          "3768:         $table = new xmldb_table('h5p_libraries');",
          "3769:         $field = new xmldb_field('coremajor', XMLDB_TYPE_INTEGER, '4', null, null, null, null, 'addto');",
          "3772:         if (!$dbman->field_exists($table, $field)) {",
          "3773:             $dbman->add_field($table, $field);",
          "3774:         }",
          "3776:         $field = new xmldb_field('coreminor', XMLDB_TYPE_INTEGER, '4', null, null, null, null, 'coremajor');",
          "3779:         if (!$dbman->field_exists($table, $field)) {",
          "3780:             $dbman->add_field($table, $field);",
          "3781:         }",
          "3784:         upgrade_main_savepoint(true, 2019111300.00);",
          "3785:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "35: $release  = '3.8beta (Build: 20191112)'; // Human-friendly version name",
          "",
          "[Removed Lines]",
          "32: $version  = 2019111200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019111300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cced42eb37a1e92a2ff38feb1c099ec54cc4e20",
      "candidate_info": {
        "commit_hash": "3cced42eb37a1e92a2ff38feb1c099ec54cc4e20",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3cced42eb37a1e92a2ff38feb1c099ec54cc4e20",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.6dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018100900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20181005)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018101100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20181011)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0920f35ed902211cc0aab70f1ecc6978d532f28d",
      "candidate_info": {
        "commit_hash": "0920f35ed902211cc0aab70f1ecc6978d532f28d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0920f35ed902211cc0aab70f1ecc6978d532f28d",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019032200.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190322)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019032800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190328)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "522841861fa4ef1a21c27b235e54750a58998999",
      "candidate_info": {
        "commit_hash": "522841861fa4ef1a21c27b235e54750a58998999",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/522841861fa4ef1a21c27b235e54750a58998999",
        "files": [
          "lib/db/services.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-63211 core_message: added new web services",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:         'description' => 'Updates existing groupings',",
          "822:         'type' => 'write',",
          "823:     ),",
          "824:     'core_message_block_contacts' => array(",
          "825:         'classname' => 'core_message_external',",
          "826:         'methodname' => 'block_contacts',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "824:     'core_message_block_user' => array(",
          "825:         'classname' => 'core_message_external',",
          "826:         'methodname' => 'block_user',",
          "827:         'classpath' => 'message/externallib.php',",
          "828:         'description' => 'Blocks a user',",
          "829:         'type' => 'write',",
          "830:         'ajax' => true,",
          "831:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "832:     ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "841:         'ajax' => true,",
          "842:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "843:     ),",
          "844:     'core_message_delete_contacts' => array(",
          "845:         'classname' => 'core_message_external',",
          "846:         'methodname' => 'delete_contacts',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     'core_message_get_contact_requests' => array(",
          "854:         'classname' => 'core_message_external',",
          "855:         'methodname' => 'get_contact_requests',",
          "856:         'classpath' => 'message/externallib.php',",
          "857:         'description' => 'Returns contact requests for a user',",
          "858:         'type' => 'read',",
          "859:         'ajax' => true,",
          "860:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "861:     ),",
          "862:     'core_message_create_contact_request' => array(",
          "863:         'classname' => 'core_message_external',",
          "864:         'methodname' => 'create_contact_request',",
          "865:         'classpath' => 'message/externallib.php',",
          "866:         'description' => 'Creates a contact request',",
          "867:         'type' => 'write',",
          "868:         'ajax' => true,",
          "869:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "870:     ),",
          "871:     'core_message_confirm_contact_request' => array(",
          "872:         'classname' => 'core_message_external',",
          "873:         'methodname' => 'confirm_contact_request',",
          "874:         'classpath' => 'message/externallib.php',",
          "875:         'description' => 'Confirms a contact request',",
          "876:         'type' => 'write',",
          "877:         'ajax' => true,",
          "878:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "879:     ),",
          "880:     'core_message_decline_contact_request' => array(",
          "881:         'classname' => 'core_message_external',",
          "882:         'methodname' => 'decline_contact_request',",
          "883:         'classpath' => 'message/externallib.php',",
          "884:         'description' => 'Declines a contact request',",
          "885:         'type' => 'write',",
          "886:         'ajax' => true,",
          "887:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "888:     ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1043:         'ajax' => true,",
          "1044:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1045:     ),",
          "1046:     'core_message_unblock_contacts' => array(",
          "1047:         'classname' => 'core_message_external',",
          "1048:         'methodname' => 'unblock_contacts',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091:     'core_message_unblock_user' => array(",
          "1092:         'classname' => 'core_message_external',",
          "1093:         'methodname' => 'unblock_user',",
          "1094:         'classpath' => 'message/externallib.php',",
          "1095:         'description' => 'Unblocks a user',",
          "1096:         'type' => 'write',",
          "1097:         'ajax' => true,",
          "1098:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1099:     ),",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         return null;",
          "344:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:     public static function block_user_parameters() {",
          "352:         return new external_function_parameters(",
          "353:             [",
          "354:                 'userid' => new external_value(PARAM_INT, 'The id of the user who is blocking'),",
          "355:                 'blockeduserid' => new external_value(PARAM_INT, 'The id of the user being blocked'),",
          "356:             ]",
          "357:         );",
          "358:     }",
          "367:     public static function block_user(int $userid, int $blockeduserid) {",
          "368:         global $CFG, $USER;",
          "371:         if (empty($CFG->messaging)) {",
          "372:             throw new moodle_exception('disabled', 'message');",
          "373:         }",
          "376:         $context = context_system::instance();",
          "377:         self::validate_context($context);",
          "379:         $capability = 'moodle/site:manageallmessaging';",
          "380:         if (($USER->id != $userid) && !has_capability($capability, $context)) {",
          "381:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "382:         }",
          "384:         $params = ['userid' => $userid, 'blockeduserid' => $blockeduserid];",
          "385:         $params = self::validate_parameters(self::block_user_parameters(), $params);",
          "387:         if (!\\core_message\\api::is_blocked($params['userid'], $params['blockeduserid'])) {",
          "388:             \\core_message\\api::block_user($params['userid'], $params['blockeduserid']);",
          "389:         }",
          "391:         return [];",
          "392:     }",
          "399:     public static function block_user_returns() {",
          "400:         return new external_warnings();",
          "401:     }",
          "408:     public static function unblock_user_parameters() {",
          "409:         return new external_function_parameters(",
          "410:             [",
          "411:                 'userid' => new external_value(PARAM_INT, 'The id of the user who is unblocking'),",
          "412:                 'unblockeduserid' => new external_value(PARAM_INT, 'The id of the user being unblocked'),",
          "413:             ]",
          "414:         );",
          "415:     }",
          "423:     public static function unblock_user(int $userid, int $unblockeduserid) {",
          "424:         global $CFG, $USER;",
          "427:         if (empty($CFG->messaging)) {",
          "428:             throw new moodle_exception('disabled', 'message');",
          "429:         }",
          "432:         $context = context_system::instance();",
          "433:         self::validate_context($context);",
          "435:         $capability = 'moodle/site:manageallmessaging';",
          "436:         if (($USER->id != $userid) && !has_capability($capability, $context)) {",
          "437:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "438:         }",
          "440:         $params = ['userid' => $userid, 'unblockeduserid' => $unblockeduserid];",
          "441:         $params = self::validate_parameters(self::unblock_user_parameters(), $params);",
          "443:         \\core_message\\api::unblock_user($params['userid'], $params['unblockeduserid']);",
          "445:         return [];",
          "446:     }",
          "453:     public static function unblock_user_returns() {",
          "454:         return new external_warnings();",
          "455:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "510:         return true;",
          "511:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629:     public static function get_contact_requests_parameters() {",
          "630:         return new external_function_parameters(",
          "631:             [",
          "632:                 'userid' => new external_value(PARAM_INT, 'The id of the user we want the requests for')",
          "633:             ]",
          "634:         );",
          "635:     }",
          "647:     public static function get_contact_requests(int $userid) {",
          "648:         global $CFG, $USER;",
          "651:         if (empty($CFG->messaging)) {",
          "652:             throw new moodle_exception('disabled', 'message');",
          "653:         }",
          "656:         $context = context_system::instance();",
          "657:         self::validate_context($context);",
          "659:         $capability = 'moodle/site:manageallmessaging';",
          "660:         if (($USER->id != $userid) && !has_capability($capability, $context)) {",
          "661:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "662:         }",
          "664:         $params = ['userid' => $userid];",
          "665:         $params = self::validate_parameters(self::get_contact_requests_parameters(), $params);",
          "667:         return \\core_message\\api::get_contact_requests($params['userid']);",
          "668:     }",
          "675:     public static function get_contact_requests_returns() {",
          "676:         return new external_multiple_structure(",
          "677:             new external_single_structure(",
          "678:                 [",
          "679:                     'id' => new external_value(core_user::get_property_type('id'), 'ID of the user'),",
          "680:                     'contactrequestid' => new external_value(PARAM_INT, 'The ID of the contact request'),",
          "681:                     'picture' => new external_value(core_user::get_property_type('picture'), 'The picture'),",
          "682:                     'firstname' => new external_value(core_user::get_property_type('firstname'),",
          "683:                         'The first name(s) of the user'),",
          "684:                     'lastname' => new external_value(core_user::get_property_type('lastname'),",
          "685:                         'The family name of the user'),",
          "686:                     'firstnamephonetic' => new external_value(core_user::get_property_type('firstnamephonetic'),",
          "687:                         'The phonetic first name of the user'),",
          "688:                     'lastnamephonetic' => new external_value(core_user::get_property_type('lastnamephonetic'),",
          "689:                         'The phonetic last name of the user'),",
          "690:                     'middlename' => new external_value(core_user::get_property_type('middlename'),",
          "691:                         'The middle name of the user'),",
          "692:                     'alternatename' => new external_value(core_user::get_property_type('alternatename'),",
          "693:                         'The alternate name of the user'),",
          "694:                     'email' => new external_value(core_user::get_property_type('email'), 'An email address')",
          "695:                 ]",
          "696:             )",
          "697:         );",
          "698:     }",
          "705:     public static function create_contact_request_parameters() {",
          "706:         return new external_function_parameters(",
          "707:             [",
          "708:                 'userid' => new external_value(PARAM_INT, 'The id of the user making the request'),",
          "709:                 'requesteduserid' => new external_value(PARAM_INT, 'The id of the user being requested')",
          "710:             ]",
          "711:         );",
          "712:     }",
          "720:     public static function create_contact_request(int $userid, int $requesteduserid) {",
          "721:         global $CFG, $USER;",
          "724:         if (empty($CFG->messaging)) {",
          "725:             throw new moodle_exception('disabled', 'message');",
          "726:         }",
          "729:         $context = context_system::instance();",
          "730:         self::validate_context($context);",
          "732:         $capability = 'moodle/site:manageallmessaging';",
          "733:         if (($USER->id != $userid) && !has_capability($capability, $context)) {",
          "734:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "735:         }",
          "737:         $params = ['userid' => $userid, 'requesteduserid' => $requesteduserid];",
          "738:         $params = self::validate_parameters(self::create_contact_request_parameters(), $params);",
          "740:         if (!\\core_message\\api::does_contact_request_exist($params['userid'], $params['requesteduserid'])) {",
          "741:             \\core_message\\api::create_contact_request($params['userid'], $params['requesteduserid']);",
          "742:         }",
          "744:         return [];",
          "745:     }",
          "752:     public static function create_contact_request_returns() {",
          "753:         return new external_warnings();",
          "754:     }",
          "761:     public static function confirm_contact_request_parameters() {",
          "762:         return new external_function_parameters(",
          "763:             [",
          "764:                 'userid' => new external_value(PARAM_INT, 'The id of the user making the request'),",
          "765:                 'requesteduserid' => new external_value(PARAM_INT, 'The id of the user being requested')",
          "766:             ]",
          "767:         );",
          "768:     }",
          "776:     public static function confirm_contact_request(int $userid, int $requesteduserid) {",
          "777:         global $CFG, $USER;",
          "780:         if (empty($CFG->messaging)) {",
          "781:             throw new moodle_exception('disabled', 'message');",
          "782:         }",
          "785:         $context = context_system::instance();",
          "786:         self::validate_context($context);",
          "788:         $capability = 'moodle/site:manageallmessaging';",
          "789:         if (($USER->id != $requesteduserid) && !has_capability($capability, $context)) {",
          "790:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "791:         }",
          "793:         $params = ['userid' => $userid, 'requesteduserid' => $requesteduserid];",
          "794:         $params = self::validate_parameters(self::confirm_contact_request_parameters(), $params);",
          "796:         \\core_message\\api::confirm_contact_request($params['userid'], $params['requesteduserid']);",
          "798:         return [];",
          "799:     }",
          "806:     public static function confirm_contact_request_returns() {",
          "807:         return new external_warnings();",
          "808:     }",
          "815:     public static function decline_contact_request_parameters() {",
          "816:         return new external_function_parameters(",
          "817:             [",
          "818:                 'userid' => new external_value(PARAM_INT, 'The id of the user making the request'),",
          "819:                 'requesteduserid' => new external_value(PARAM_INT, 'The id of the user being requested')",
          "820:             ]",
          "821:         );",
          "822:     }",
          "830:     public static function decline_contact_request(int $userid, int $requesteduserid) {",
          "831:         global $CFG, $USER;",
          "834:         if (empty($CFG->messaging)) {",
          "835:             throw new moodle_exception('disabled', 'message');",
          "836:         }",
          "839:         $context = context_system::instance();",
          "840:         self::validate_context($context);",
          "842:         $capability = 'moodle/site:manageallmessaging';",
          "843:         if (($USER->id != $requesteduserid) && !has_capability($capability, $context)) {",
          "844:             throw new required_capability_exception($context, $capability, 'nopermissions', '');",
          "845:         }",
          "847:         $params = ['userid' => $userid, 'requesteduserid' => $requesteduserid];",
          "848:         $params = self::validate_parameters(self::decline_contact_request_parameters(), $params);",
          "850:         \\core_message\\api::decline_contact_request($params['userid'], $params['requesteduserid']);",
          "852:         return [];",
          "853:     }",
          "860:     public static function decline_contact_request_returns() {",
          "861:         return new external_warnings();",
          "862:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:         core_message_external::unblock_contacts(array($user2->id), $user3->id);",
          "330:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:     public function test_get_contact_requests() {",
          "336:         $this->resetAfterTest();",
          "338:         $user1 = self::getDataGenerator()->create_user();",
          "339:         $user2 = self::getDataGenerator()->create_user();",
          "340:         $user3 = self::getDataGenerator()->create_user();",
          "342:         $this->setUser($user1);",
          "345:         \\core_message\\api::block_user($user1->id, $user3->id);",
          "347:         \\core_message\\api::create_contact_request($user2->id, $user1->id);",
          "348:         \\core_message\\api::create_contact_request($user3->id, $user1->id);",
          "350:         $requests = core_message_external::get_contact_requests($user1->id);",
          "351:         $requests = external_api::clean_returnvalue(core_message_external::get_contact_requests_returns(), $requests);",
          "353:         $this->assertCount(1, $requests);",
          "355:         $request = reset($requests);",
          "357:         $this->assertEquals($user2->id, $request['id']);",
          "358:         $this->assertEquals($user2->picture, $request['picture']);",
          "359:         $this->assertEquals($user2->firstname, $request['firstname']);",
          "360:         $this->assertEquals($user2->lastname, $request['lastname']);",
          "361:         $this->assertEquals($user2->firstnamephonetic, $request['firstnamephonetic']);",
          "362:         $this->assertEquals($user2->lastnamephonetic, $request['lastnamephonetic']);",
          "363:         $this->assertEquals($user2->middlename, $request['middlename']);",
          "364:         $this->assertEquals($user2->alternatename, $request['alternatename']);",
          "365:         $this->assertEquals($user2->email, $request['email']);",
          "366:     }",
          "371:     public function test_get_contact_requests_messaging_disabled() {",
          "372:         global $CFG;",
          "374:         $this->resetAfterTest();",
          "377:         $user1 = self::getDataGenerator()->create_user();",
          "379:         $this->setUser($user1);",
          "382:         $CFG->messaging = 0;",
          "385:         $this->expectException('moodle_exception');",
          "386:         core_message_external::get_contact_requests($user1->id);",
          "387:     }",
          "392:     public function test_get_contact_requests_no_permission() {",
          "393:         $this->resetAfterTest();",
          "396:         $user1 = self::getDataGenerator()->create_user();",
          "397:         $user2 = self::getDataGenerator()->create_user();",
          "398:         $user3 = self::getDataGenerator()->create_user();",
          "400:         $this->setUser($user3);",
          "403:         $this->expectException('required_capability_exception');",
          "404:         core_message_external::create_contact_request($user1->id, $user2->id);",
          "405:     }",
          "410:     public function test_create_contact_request() {",
          "411:         global $DB;",
          "413:         $this->resetAfterTest();",
          "415:         $user1 = self::getDataGenerator()->create_user();",
          "416:         $user2 = self::getDataGenerator()->create_user();",
          "418:         $this->setUser($user1);",
          "420:         $return = core_message_external::create_contact_request($user1->id, $user2->id);",
          "421:         $return = external_api::clean_returnvalue(core_message_external::create_contact_request_returns(), $return);",
          "422:         $this->assertEquals(array(), $return);",
          "424:         $request = $DB->get_records('message_contact_requests');",
          "426:         $this->assertCount(1, $request);",
          "428:         $request = reset($request);",
          "430:         $this->assertEquals($user1->id, $request->userid);",
          "431:         $this->assertEquals($user2->id, $request->requesteduserid);",
          "432:     }",
          "437:     public function test_create_contact_request_messaging_disabled() {",
          "438:         global $CFG;",
          "440:         $this->resetAfterTest();",
          "443:         $user1 = self::getDataGenerator()->create_user();",
          "444:         $user2 = self::getDataGenerator()->create_user();",
          "446:         $this->setUser($user1);",
          "449:         $CFG->messaging = 0;",
          "452:         $this->expectException('moodle_exception');",
          "453:         core_message_external::create_contact_request($user1->id, $user2->id);",
          "454:     }",
          "459:     public function test_create_contact_request_no_permission() {",
          "460:         $this->resetAfterTest();",
          "463:         $user1 = self::getDataGenerator()->create_user();",
          "464:         $user2 = self::getDataGenerator()->create_user();",
          "465:         $user3 = self::getDataGenerator()->create_user();",
          "467:         $this->setUser($user3);",
          "470:         $this->expectException('required_capability_exception');",
          "471:         core_message_external::create_contact_request($user1->id, $user2->id);",
          "472:     }",
          "477:     public function test_confirm_contact_request() {",
          "478:         global $DB;",
          "480:         $this->resetAfterTest();",
          "482:         $user1 = self::getDataGenerator()->create_user();",
          "483:         $user2 = self::getDataGenerator()->create_user();",
          "485:         $this->setUser($user1);",
          "487:         \\core_message\\api::create_contact_request($user1->id, $user2->id);",
          "489:         $this->setUser($user2);",
          "491:         $return = core_message_external::confirm_contact_request($user1->id, $user2->id);",
          "492:         $return = external_api::clean_returnvalue(core_message_external::confirm_contact_request_returns(), $return);",
          "493:         $this->assertEquals(array(), $return);",
          "495:         $this->assertEquals(0, $DB->count_records('message_contact_requests'));",
          "497:         $contact = $DB->get_records('message_contacts');",
          "499:         $this->assertCount(1, $contact);",
          "501:         $contact = reset($contact);",
          "503:         $this->assertEquals($user1->id, $contact->userid);",
          "504:         $this->assertEquals($user2->id, $contact->contactid);",
          "505:     }",
          "510:     public function test_confirm_contact_request_messaging_disabled() {",
          "511:         global $CFG;",
          "513:         $this->resetAfterTest();",
          "516:         $user1 = self::getDataGenerator()->create_user();",
          "517:         $user2 = self::getDataGenerator()->create_user();",
          "519:         $this->setUser($user1);",
          "522:         $CFG->messaging = 0;",
          "525:         $this->expectException('moodle_exception');",
          "526:         core_message_external::confirm_contact_request($user1->id, $user2->id);",
          "527:     }",
          "532:     public function test_confirm_contact_request_no_permission() {",
          "533:         $this->resetAfterTest();",
          "536:         $user1 = self::getDataGenerator()->create_user();",
          "537:         $user2 = self::getDataGenerator()->create_user();",
          "538:         $user3 = self::getDataGenerator()->create_user();",
          "540:         $this->setUser($user3);",
          "543:         $this->expectException('required_capability_exception');",
          "544:         core_message_external::confirm_contact_request($user1->id, $user2->id);",
          "545:     }",
          "550:     public function test_decline_contact_request() {",
          "551:         global $DB;",
          "553:         $this->resetAfterTest();",
          "555:         $user1 = self::getDataGenerator()->create_user();",
          "556:         $user2 = self::getDataGenerator()->create_user();",
          "558:         $this->setUser($user1);",
          "560:         \\core_message\\api::create_contact_request($user1->id, $user2->id);",
          "562:         $this->setUser($user2);",
          "564:         $return = core_message_external::decline_contact_request($user1->id, $user2->id);",
          "565:         $return = external_api::clean_returnvalue(core_message_external::decline_contact_request_returns(), $return);",
          "566:         $this->assertEquals(array(), $return);",
          "568:         $this->assertEquals(0, $DB->count_records('message_contact_requests'));",
          "569:         $this->assertEquals(0, $DB->count_records('message_contacts'));",
          "570:     }",
          "575:     public function test_decline_contact_request_messaging_disabled() {",
          "576:         global $CFG;",
          "578:         $this->resetAfterTest();",
          "581:         $user1 = self::getDataGenerator()->create_user();",
          "582:         $user2 = self::getDataGenerator()->create_user();",
          "584:         $this->setUser($user1);",
          "587:         $CFG->messaging = 0;",
          "590:         $this->expectException('moodle_exception');",
          "591:         core_message_external::decline_contact_request($user1->id, $user2->id);",
          "592:     }",
          "597:     public function test_decline_contact_request_no_permission() {",
          "598:         $this->resetAfterTest();",
          "601:         $user1 = self::getDataGenerator()->create_user();",
          "602:         $user2 = self::getDataGenerator()->create_user();",
          "603:         $user3 = self::getDataGenerator()->create_user();",
          "605:         $this->setUser($user3);",
          "608:         $this->expectException('required_capability_exception');",
          "609:         core_message_external::decline_contact_request($user1->id, $user2->id);",
          "610:     }",
          "615:     public function test_block_user() {",
          "616:         global $DB;",
          "618:         $this->resetAfterTest(true);",
          "620:         $user1 = self::getDataGenerator()->create_user();",
          "621:         $user2 = self::getDataGenerator()->create_user();",
          "623:         $this->setUser($user1);",
          "626:         $return = core_message_external::block_user($user1->id, $user2->id);",
          "627:         $return = external_api::clean_returnvalue(core_message_external::block_user_returns(), $return);",
          "628:         $this->assertEquals(array(), $return);",
          "631:         $record = $DB->get_record('message_users_blocked', []);",
          "633:         $this->assertEquals($user1->id, $record->userid);",
          "634:         $this->assertEquals($user2->id, $record->blockeduserid);",
          "637:         $return = core_message_external::block_user($user1->id, $user2->id);",
          "638:         $return = external_api::clean_returnvalue(core_message_external::block_user_returns(), $return);",
          "639:         $this->assertEquals(array(), $return);",
          "641:         $this->assertEquals(1, $DB->count_records('message_users_blocked'));",
          "642:     }",
          "647:     public function test_block_user_messaging_disabled() {",
          "648:         global $CFG;",
          "650:         $this->resetAfterTest();",
          "653:         $user1 = self::getDataGenerator()->create_user();",
          "654:         $user2 = self::getDataGenerator()->create_user();",
          "656:         $this->setUser($user1);",
          "659:         $CFG->messaging = 0;",
          "662:         $this->expectException('moodle_exception');",
          "663:         core_message_external::block_user($user1->id, $user2->id);",
          "664:     }",
          "669:     public function test_block_user_no_permission() {",
          "670:         $this->resetAfterTest();",
          "673:         $user1 = self::getDataGenerator()->create_user();",
          "674:         $user2 = self::getDataGenerator()->create_user();",
          "675:         $user3 = self::getDataGenerator()->create_user();",
          "677:         $this->setUser($user3);",
          "680:         $this->expectException('required_capability_exception');",
          "681:         core_message_external::block_user($user1->id, $user2->id);",
          "682:     }",
          "687:     public function test_unblock_user() {",
          "688:         global $DB;",
          "690:         $this->resetAfterTest(true);",
          "692:         $user1 = self::getDataGenerator()->create_user();",
          "693:         $user2 = self::getDataGenerator()->create_user();",
          "695:         $this->setUser($user1);",
          "698:         \\core_message\\api::block_user($user1->id, $user2->id);",
          "701:         $return = core_message_external::unblock_user($user1->id, $user2->id);",
          "702:         $return = external_api::clean_returnvalue(core_message_external::unblock_user_returns(), $return);",
          "703:         $this->assertEquals(array(), $return);",
          "705:         $this->assertEquals(0, $DB->count_records('message_users_blocked'));",
          "708:         $return = core_message_external::unblock_user($user1->id, $user2->id);",
          "709:         $return = external_api::clean_returnvalue(core_message_external::unblock_user_returns(), $return);",
          "710:         $this->assertEquals(array(), $return);",
          "712:         $this->assertEquals(0, $DB->count_records('message_users_blocked'));",
          "713:     }",
          "718:     public function test_unblock_user_messaging_disabled() {",
          "719:         global $CFG;",
          "721:         $this->resetAfterTest();",
          "724:         $user1 = self::getDataGenerator()->create_user();",
          "725:         $user2 = self::getDataGenerator()->create_user();",
          "727:         $this->setUser($user1);",
          "730:         $CFG->messaging = 0;",
          "733:         $this->expectException('moodle_exception');",
          "734:         core_message_external::unblock_user($user1->id, $user2->id);",
          "735:     }",
          "740:     public function test_unblock_user_no_permission() {",
          "741:         $this->resetAfterTest();",
          "744:         $user1 = self::getDataGenerator()->create_user();",
          "745:         $user2 = self::getDataGenerator()->create_user();",
          "746:         $user3 = self::getDataGenerator()->create_user();",
          "748:         $this->setUser($user3);",
          "751:         $this->expectException('required_capability_exception');",
          "752:         core_message_external::unblock_user($user1->id, $user2->id);",
          "753:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018092800.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018092800.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}