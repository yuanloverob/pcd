{
  "cve_id": "CVE-2021-3762",
  "cve_desc": "A directory traversal vulnerability was found in the ClairCore engine of Clair. An attacker can exploit this by supplying a crafted container image which, when scanned by Clair, allows for arbitrary file write on the filesystem, potentially allowing for remote code execution.",
  "repo": "quay/claircore",
  "patch_hash": "691f2023a1720a0579e688b69a2f4bfe1f4b7821",
  "patch_info": {
    "commit_hash": "691f2023a1720a0579e688b69a2f4bfe1f4b7821",
    "repo": "quay/claircore",
    "commit_url": "https://github.com/quay/claircore/commit/691f2023a1720a0579e688b69a2f4bfe1f4b7821",
    "files": [
      "rpm/packagescanner.go",
      "rpm/packagescanner_test.go"
    ],
    "message": "rpm: prevent directory traversal when extracting\n\nA malicious tar archive with a member consisting of multiple \"parent\"\nelements could cause a file outside of the target directory to be\noverwritten.\n\nFixes: CVE-2021-3762\nSigned-off-by: Hank Donnay <hdonnay@redhat.com>",
    "before_after_code_files": [
      "rpm/packagescanner.go||rpm/packagescanner.go",
      "rpm/packagescanner_test.go||rpm/packagescanner_test.go"
    ]
  },
  "patch_diff": {
    "rpm/packagescanner.go||rpm/packagescanner.go": [
      "File: rpm/packagescanner.go -> rpm/packagescanner.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "170:    continue",
      "171:   }",
      "176:   d := filepath.Dir(tgt)",
      "",
      "[Removed Lines]",
      "173:   tgt := filepath.Join(root, filepath.Clean(h.Name))",
      "",
      "[Added Lines]",
      "173:   tgt := relPath(root, h.Name)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:    stats.Reg++",
      "213:   case tar.TypeSymlink:",
      "216:    err = os.Symlink(ln, tgt)",
      "217:    stats.Symlink++",
      "218:   case tar.TypeLink:",
      "221:    _, exists := os.Lstat(ln)",
      "222:    switch {",
      "223:    case errors.Is(exists, nil):",
      "",
      "[Removed Lines]",
      "215:    ln := filepath.Join(root, filepath.Clean(h.Linkname))",
      "220:    ln := filepath.Join(root, filepath.Clean(h.Linkname))",
      "",
      "[Added Lines]",
      "215:    ln := relPath(root, h.Linkname)",
      "220:    ln := relPath(root, h.Linkname)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "470:  return false",
      "471: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "477: func relPath(root, member string) string {",
      "478:  return filepath.Join(root, filepath.Join(\"/\", member))",
      "479: }",
      "",
      "---------------"
    ],
    "rpm/packagescanner_test.go||rpm/packagescanner_test.go": [
      "File: rpm/packagescanner_test.go -> rpm/packagescanner_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  \"os\"",
      "7:  \"os/exec\"",
      "8:  \"path/filepath\"",
      "9:  \"testing\"",
      "10:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1636:   t.Error(cmp.Diff(got, want))",
      "1637:  }",
      "1638: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1641: func TestRelPath(t *testing.T) {",
      "1642:  root := `/tmp/fakedata`",
      "1643:  tt := [][2]string{",
      "1644:   {",
      "1645:    \"dev/null\",",
      "1646:    \"/dev/null\",",
      "1647:   },",
      "1648:   {",
      "1649:    \"dev/null\",",
      "1650:    \"./dev/null\",",
      "1651:   },",
      "1652:   {",
      "1653:    \"dev/null\",",
      "1654:    \"dev/null\",",
      "1655:   },",
      "1656:   {",
      "1657:    \"dev/null\",",
      "1658:    strings.Repeat(\"../\", 10) + \"dev/null\",",
      "1659:   },",
      "1660:   {",
      "1661:    \"dev/null\",",
      "1662:    strings.Repeat(\"../\", 10) + \"dev/./../dev/null\",",
      "1663:   },",
      "1664:  }",
      "1666:  for _, tc := range tt {",
      "1667:   want := filepath.Join(root, tc[0])",
      "1668:   t.Logf(\"in: %q + %q\", root, tc[1])",
      "1669:   got := relPath(root, tc[1])",
      "1670:   t.Logf(\"got: %q, want: %q\", got, want)",
      "1671:   if got != want {",
      "1672:    t.Error()",
      "1673:   }",
      "1674:  }",
      "1675: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a00be25295e423aa9e07b60e708030d24afdd27",
      "candidate_info": {
        "commit_hash": "0a00be25295e423aa9e07b60e708030d24afdd27",
        "repo": "quay/claircore",
        "commit_url": "https://github.com/quay/claircore/commit/0a00be25295e423aa9e07b60e708030d24afdd27",
        "files": [
          "rpm/packagescanner.go"
        ],
        "message": "rpm: eagerly change directory permissions\n\nThis should error out earlier in the process and uses some extra tar\nflags to make the permissions more amenable.\n\nSigned-off-by: Hank Donnay <hdonnay@redhat.com>",
        "before_after_code_files": [
          "rpm/packagescanner.go||rpm/packagescanner.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rpm/packagescanner.go||rpm/packagescanner.go"
          ],
          "candidate": [
            "rpm/packagescanner.go||rpm/packagescanner.go"
          ]
        }
      },
      "candidate_diff": {
        "rpm/packagescanner.go||rpm/packagescanner.go": [
          "File: rpm/packagescanner.go -> rpm/packagescanner.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:  if err != nil {",
          "123:   return nil, err",
          "124:  }",
          "126:  defer func() {",
          "145:   if err := os.RemoveAll(root); err != nil {",
          "147:   }",
          "148:  }()",
          "",
          "[Removed Lines]",
          "127:   err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {",
          "129:    if err != nil {",
          "130:     zlog.Warn(ctx).",
          "131:      Str(\"path\", path).",
          "132:      Err(err).",
          "133:      Msg(\"error walking files\")",
          "134:     return nil",
          "135:    }",
          "137:    if m := info.Mode(); info.IsDir() && m&0200 == 0 {",
          "138:     return os.Chmod(path, m|0200)",
          "139:    }",
          "140:    return nil",
          "141:   })",
          "142:   if err != nil {",
          "143:    zlog.Warn(ctx).Err(err).Msg(\"error removing extracted files\")",
          "144:   }",
          "146:    zlog.Warn(ctx).Err(err).Msg(\"error removing extracted files\")",
          "",
          "[Added Lines]",
          "130:    zlog.Error(ctx).Err(err).Msg(\"error removing extracted files\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:  errbuf := bytes.Buffer{}",
          "165:   \"--exclude\", \"dev\",",
          "166:   \"--exclude\", \".wh*\",",
          "168:  tarcmd.Stdin = rd",
          "169:  tarcmd.Stderr = &errbuf",
          "170:  zlog.Debug(ctx).Str(\"dir\", root).Strs(\"cmd\", tarcmd.Args).Msg(\"tar invocation\")",
          "171:  if err := tarcmd.Run(); err != nil {",
          "172:   zlog.Error(ctx).",
          "173:    Str(\"dir\", root).",
          "174:    Strs(\"cmd\", tarcmd.Args).",
          "176:    AnErr(\"err\", err).",
          "177:    Msg(\"error extracting layer\")",
          "178:   return nil, fmt.Errorf(\"rpm: failed to untar: %w\", err)",
          "179:  }",
          "180:  zlog.Debug(ctx).Str(\"dir\", root).Msg(\"extracted layer\")",
          "182:  var pkgs []*claircore.Package",
          "",
          "[Removed Lines]",
          "164:  tarcmd := exec.CommandContext(ctx, \"tar\", \"-xC\", root,",
          "167:   \"--delay-directory-restore\")",
          "175:    Str(\"stderr\", errbuf.String()).",
          "",
          "[Added Lines]",
          "148:  tarcmd := exec.CommandContext(ctx, \"tar\",",
          "149:   \"--extract\",",
          "152:   \"--delay-directory-restore\",",
          "153:   \"--no-same-owner\",",
          "154:   \"--no-same-permissions\",",
          "155:  )",
          "158:  tarcmd.Dir = root",
          "164:    Stringer(\"stderr\", &errbuf).",
          "171:  if err := filepath.Walk(root, fixDirs(ctx)); err != nil {",
          "172:   if rmerr := os.RemoveAll(root); rmerr != nil {",
          "173:    err = fmt.Errorf(\"%v (and during cleanup: %v)\", err, rmerr)",
          "174:   }",
          "175:   return nil, fmt.Errorf(\"rpm: failed to change permissions: %w\", err)",
          "176:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:  return pkgs, nil",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: func fixDirs(ctx context.Context) filepath.WalkFunc {",
          "238:  return func(path string, info os.FileInfo, err error) error {",
          "239:   if err != nil {",
          "240:    zlog.Warn(ctx).",
          "241:     Err(err).",
          "242:     Str(\"path\", path).",
          "243:     Interface(\"info\", info).",
          "244:     Msg(\"error walking extracted layer\")",
          "245:    return nil",
          "246:   }",
          "247:   if !info.IsDir() {",
          "248:    return nil",
          "249:   }",
          "250:   return os.Chmod(path, info.Mode()|0700)",
          "251:  }",
          "252: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5528de0780fc06fddc5b9599105cbe09c5c5b320",
      "candidate_info": {
        "commit_hash": "5528de0780fc06fddc5b9599105cbe09c5c5b320",
        "repo": "quay/claircore",
        "commit_url": "https://github.com/quay/claircore/commit/5528de0780fc06fddc5b9599105cbe09c5c5b320",
        "files": [
          "rpm/packagescanner.go"
        ],
        "message": "rpm: normalize link target\n\nThis fixes a bug where links would be created to unprefixed paths, which\nwould not exist and would fail at the link fixup step.\n\nSee-also: https://issues.redhat.com/browse/PROJQUAY-2403\nSigned-off-by: Hank Donnay <hdonnay@redhat.com>",
        "before_after_code_files": [
          "rpm/packagescanner.go||rpm/packagescanner.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rpm/packagescanner.go||rpm/packagescanner.go"
          ],
          "candidate": [
            "rpm/packagescanner.go||rpm/packagescanner.go"
          ]
        }
      },
      "candidate_diff": {
        "rpm/packagescanner.go||rpm/packagescanner.go": [
          "File: rpm/packagescanner.go -> rpm/packagescanner.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: const (",
          "27:  pkgName    = \"rpm\"",
          "28:  pkgKind    = \"package\"",
          "30: )",
          "",
          "[Removed Lines]",
          "29:  pkgVersion = \"v0.0.2\"",
          "",
          "[Added Lines]",
          "29:  pkgVersion = \"3\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:    }",
          "203:    stats.Reg++",
          "204:   case tar.TypeSymlink:",
          "206:    stats.Symlink++",
          "207:   case tar.TypeLink:",
          "209:    switch {",
          "210:    case errors.Is(exists, nil):",
          "212:    case errors.Is(exists, os.ErrNotExist):",
          "218:    default:",
          "219:     err = exists",
          "220:    }",
          "",
          "[Removed Lines]",
          "205:    err = os.Symlink(h.Linkname, tgt)",
          "208:    _, exists := os.Lstat(h.Linkname)",
          "211:     err = os.Link(h.Linkname, tgt)",
          "217:     deferLn = append(deferLn, [2]string{h.Linkname, tgt})",
          "",
          "[Added Lines]",
          "206:    ln := filepath.Join(root, filepath.Clean(h.Linkname))",
          "207:    err = os.Symlink(ln, tgt)",
          "211:    ln := filepath.Join(root, filepath.Clean(h.Linkname))",
          "212:    _, exists := os.Lstat(ln)",
          "215:     err = os.Link(ln, tgt)",
          "221:     deferLn = append(deferLn, [2]string{ln, tgt})",
          "",
          "---------------"
        ]
      }
    }
  ]
}