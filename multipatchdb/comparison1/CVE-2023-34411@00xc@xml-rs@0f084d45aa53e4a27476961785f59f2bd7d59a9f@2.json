{
  "cve_id": "CVE-2023-34411",
  "cve_desc": "The xml-rs crate before 0.8.14 for Rust and Crab allows a denial of service (panic) via an invalid <! token (such as <!DOCTYPEs/%<!A nesting) in an XML document. The earliest affected version is 0.8.9.",
  "repo": "00xc/xml-rs",
  "patch_hash": "0f084d45aa53e4a27476961785f59f2bd7d59a9f",
  "patch_info": {
    "commit_hash": "0f084d45aa53e4a27476961785f59f2bd7d59a9f",
    "repo": "00xc/xml-rs",
    "commit_url": "https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f",
    "files": [
      "README.md",
      "src/reader/lexer.rs",
      "src/reader/parser/inside_cdata.rs",
      "src/reader/parser/inside_doctype.rs",
      "src/reader/parser/inside_processing_instruction.rs",
      "src/reader/parser/mod.rs",
      "src/reader/parser/outside_tag.rs",
      "tests/xmlconf.rs"
    ],
    "message": "Parse DOCTYPE markup declarations",
    "before_after_code_files": [
      "src/reader/lexer.rs||src/reader/lexer.rs",
      "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
      "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
      "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
      "src/reader/parser/mod.rs||src/reader/parser/mod.rs",
      "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
      "tests/xmlconf.rs||tests/xmlconf.rs"
    ]
  },
  "patch_diff": {
    "src/reader/lexer.rs||src/reader/lexer.rs": [
      "File: src/reader/lexer.rs -> src/reader/lexer.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     ReferenceStart,",
      "56:     ReferenceEnd,",
      "57: }",
      "59: impl fmt::Display for Token {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     MarkupDeclarationStart,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:     }",
      "144: }",
      "146: enum State {",
      "148:     Normal,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148: #[derive(Copy, Clone)]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "154:     CommentStarted,",
      "156:     DoctypeStarted(DoctypeStartedSubstate),",
      "160:     CDataStarted(CDataStartedSubstate),",
      "",
      "[Removed Lines]",
      "158:     DoctypeFinishing(u8),",
      "",
      "[Added Lines]",
      "161:     InsideMarkupDeclaration,",
      "163:     InsideDoctype,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "174:     InsideCdata,",
      "176:     InsideProcessingInstruction,",
      "177: }",
      "179: #[derive(Copy, Clone)]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:     InsideMarkupDeclarationQuotedString(QuoteStyle),",
      "184: }",
      "186: #[derive(Copy, Clone, Eq, PartialEq)]",
      "187: enum QuoteStyle {",
      "188:     Single, Double",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "229:     head_pos: TextPosition,",
      "230:     char_queue: VecDeque<char>,",
      "231:     st: State,",
      "232:     skip_errors: bool,",
      "233:     inside_token: bool,",
      "234:     eof_handled: bool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:     normal_state: State,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "248:             head_pos: TextPosition::new(),",
      "249:             char_queue: VecDeque::with_capacity(4),  // TODO: check size",
      "250:             st: State::Normal,",
      "251:             skip_errors: false,",
      "252:             inside_token: false,",
      "253:             eof_handled: false",
      "254:         }",
      "255:     }",
      "268:     #[inline]",
      "",
      "[Removed Lines]",
      "259:     #[inline]",
      "260:     pub fn enable_errors(&mut self) { self.skip_errors = false; }",
      "264:     #[inline]",
      "265:     pub fn disable_errors(&mut self) { self.skip_errors = true; }",
      "",
      "[Added Lines]",
      "265:             normal_state: State::Normal,",
      "274:     pub(crate) fn disable_errors(&mut self) { self.skip_errors = true; }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "326:             State::TagStarted | State::CommentOrCDataOrDoctypeStarted |",
      "327:             State::CommentStarted | State::CDataStarted(_)| State::DoctypeStarted(_) |",
      "328:             State::CommentClosing(ClosingSubstate::Second) |",
      "330:             State::InsideProcessingInstruction | State::ProcessingInstructionClosing |",
      "332:                 Err(self.error(\"Unexpected end of stream\")),",
      "333:             State::EmptyTagClosing =>",
      "334:                 Ok(Some(Token::Character('/'))),",
      "",
      "[Removed Lines]",
      "329:             State::InsideComment |",
      "331:             State::DoctypeFinishing(_) =>",
      "",
      "[Added Lines]",
      "338:             State::InsideComment | State::InsideMarkupDeclaration |",
      "340:             State::InsideDoctype | State::InsideMarkupDeclarationQuotedString(_) =>",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "369:             State::CommentStarted                 => self.comment_started(c),",
      "370:             State::CDataStarted(s)                => self.cdata_started(c, s),",
      "371:             State::DoctypeStarted(s)              => self.doctype_started(c, s),",
      "373:             State::EmptyTagClosing                => self.empty_element_closing(c),",
      "374:             State::CommentClosing(s)              => self.comment_closing(c, s),",
      "375:             State::CDataClosing(s)                => self.cdata_closing(c, s),",
      "",
      "[Removed Lines]",
      "372:             State::DoctypeFinishing(d)            => self.doctype_finishing(c, d),",
      "",
      "[Added Lines]",
      "381:             State::InsideDoctype                  => self.inside_doctype(c),",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "378:             State::InsideCdata                    => self.inside_cdata(c),",
      "379:             State::InsideProcessingInstruction    => self.inside_processing_instruction(c),",
      "380:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
      "381:         }",
      "382:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390:             State::InsideMarkupDeclaration       => self.markup_declaration(c),",
      "391:             State::InsideMarkupDeclarationQuotedString(q) => self.markup_declaration_string(c, q),",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "393:         Ok(Some(token))",
      "394:     }",
      "396:     #[inline]",
      "397:     fn move_to_with_unread(&mut self, st: State, cs: &[char], token: Token) -> Result {",
      "398:         self.char_queue.extend(cs.iter().copied());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "407:     #[inline]",
      "408:     fn move_to_and_reset_normal(&mut self, st: State, token: Token) -> Result {",
      "409:         self.normal_state = st;",
      "410:         self.st = st;",
      "411:         Ok(Some(token))",
      "412:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "461:     fn tag_opened(&mut self, c: char) -> Result {",
      "462:         match c {",
      "463:             '?'                        => self.move_to_with(State::InsideProcessingInstruction, Token::ProcessingInstructionStart),",
      "465:             '!'                        => self.move_to(State::CommentOrCDataOrDoctypeStarted),",
      "468:             _                          => self.handle_error(\"<\", c)",
      "469:         }",
      "470:     }",
      "",
      "[Removed Lines]",
      "464:             '/'                        => self.move_to_with(State::Normal, Token::ClosingTagStart),",
      "466:             _ if is_whitespace_char(c) => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
      "467:             _ if is_name_char(c)       => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
      "",
      "[Added Lines]",
      "483:             '/'                        => self.move_to_with(self.normal_state, Token::ClosingTagStart),",
      "485:             _ if is_whitespace_char(c) => self.move_to_with_unread(self.normal_state, &[c], Token::OpeningTagStart),",
      "486:             _ if is_name_char(c)       => self.move_to_with_unread(self.normal_state, &[c], Token::OpeningTagStart),",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "475:             '-' => self.move_to(State::CommentStarted),",
      "476:             '[' => self.move_to(State::CDataStarted(CDataStartedSubstate::E)),",
      "477:             'D' => self.move_to(State::DoctypeStarted(DoctypeStartedSubstate::D)),",
      "478:             _ => self.handle_error(\"<!\", c),",
      "479:         }",
      "480:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "497:             'E' | 'A' | 'N' if matches!(self.normal_state, State::InsideDoctype) => self.move_to_with(State::InsideMarkupDeclaration, Token::MarkupDeclarationStart),",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "500:         )",
      "501:     }",
      "504:     fn doctype_started(&mut self, c: char, s: DoctypeStartedSubstate) -> Result {",
      "505:         use self::DoctypeStartedSubstate::{D, DO, DOC, DOCT, DOCTY, DOCTYP};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "524:     fn markup_declaration(&mut self, c: char) -> Result {",
      "525:         match c {",
      "526:             '<'                        => self.handle_error(\"<!\", c),",
      "527:             '>'                        => self.move_to_with(self.normal_state, Token::TagEnd),",
      "528:             '&'                        => Ok(Some(Token::ReferenceStart)),",
      "529:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
      "530:             '\"'                        => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Double), Token::DoubleQuote),",
      "531:             '\\''                       => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Single), Token::SingleQuote),",
      "532:             _ => Ok(None),",
      "533:         }",
      "534:     }",
      "536:     fn markup_declaration_string(&mut self, c: char, q: QuoteStyle) -> Result {",
      "537:         match c {",
      "538:             '\"' if q == QuoteStyle::Double  => self.move_to_with(State::InsideMarkupDeclaration, Token::DoubleQuote),",
      "539:             '\\'' if q == QuoteStyle::Single => self.move_to_with(State::InsideMarkupDeclaration, Token::SingleQuote),",
      "540:             _ => Ok(None),",
      "541:         }",
      "542:     }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "509:             DOC    ; 'T' ; DOCT   ; \"<!DOC\",",
      "510:             DOCT   ; 'Y' ; DOCTY  ; \"<!DOCT\",",
      "511:             DOCTY  ; 'P' ; DOCTYP ; \"<!DOCTY\";",
      "513:         )",
      "514:     }",
      "518:         match c {",
      "522:             _ => Ok(None),",
      "523:         }",
      "524:     }",
      "",
      "[Removed Lines]",
      "512:             DOCTYP ; 'E' ; \"<!DOCTYP\" ; self.move_to_with(State::DoctypeFinishing(1), Token::DoctypeStart)",
      "517:     fn doctype_finishing(&mut self, c: char, d: u8) -> Result {",
      "519:             '<' => self.move_to(State::DoctypeFinishing(d + 1)),",
      "520:             '>' if d == 1 => self.move_to_with(State::Normal, Token::TagEnd),",
      "521:             '>' => self.move_to(State::DoctypeFinishing(d - 1)),",
      "",
      "[Added Lines]",
      "553:             DOCTYP ; 'E' ; \"<!DOCTYP\" ; self.move_to_and_reset_normal(State::InsideDoctype, Token::DoctypeStart)",
      "558:     fn inside_doctype(&mut self, c: char) -> Result {",
      "560:             '>' => self.move_to_and_reset_normal(State::Normal, Token::TagEnd),",
      "561:             '<'                        => self.move_to(State::TagStarted),",
      "562:             '&'                        => Ok(Some(Token::ReferenceStart)),",
      "563:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "527:     fn processing_instruction_closing(&mut self, c: char) -> Result {",
      "528:         match c {",
      "530:             _ => self.move_to_with_unread(State::InsideProcessingInstruction, &[c], Token::Character('?')),",
      "531:         }",
      "532:     }",
      "",
      "[Removed Lines]",
      "529:             '>' => self.move_to_with(State::Normal, Token::ProcessingInstructionEnd),",
      "",
      "[Added Lines]",
      "571:             '>' => self.move_to_with(self.normal_state, Token::ProcessingInstructionEnd),",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "535:     fn empty_element_closing(&mut self, c: char) -> Result {",
      "536:         match c {",
      "539:         }",
      "540:     }",
      "",
      "[Removed Lines]",
      "537:             '>' => self.move_to_with(State::Normal, Token::EmptyTagEnd),",
      "538:             _ => self.move_to_with_unread(State::Normal, &[c], Token::Character('/')),",
      "",
      "[Added Lines]",
      "579:             '>' => self.move_to_with(self.normal_state, Token::EmptyTagEnd),",
      "580:             _ => self.move_to_with_unread(self.normal_state, &[c], Token::Character('/')),",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "547:                 _ => self.move_to_with_unread(State::InsideComment, &[c], Token::Character('-')),",
      "548:             },",
      "549:             ClosingSubstate::Second => match c {",
      "552:                 _ => self.handle_error(\"--\", c),",
      "553:             },",
      "",
      "[Removed Lines]",
      "550:                 '>' => self.move_to_with(State::Normal, Token::CommentEnd),",
      "",
      "[Added Lines]",
      "592:                 '>' => self.move_to_with(self.normal_state, Token::CommentEnd),",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "576:                 _ => self.move_to_with_unread(State::Normal, &[c], Token::Character(']')),",
      "577:             },",
      "578:             ClosingSubstate::Second => match c {",
      "580:                 _ => self.move_to_with_unread(State::Normal, &[']', c], Token::Character(']')),",
      "581:             },",
      "582:         }",
      "",
      "[Removed Lines]",
      "579:                 '>' => self.move_to_with(State::Normal, Token::CDataEnd),",
      "",
      "[Added Lines]",
      "621:                 '>' => self.move_to_with(self.normal_state, Token::CDataEnd),",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "825:     #[test]",
      "826:     fn doctype_with_internal_subset_test() {",
      "827:         let (mut lex, mut buf) = make_lex_and_buf(",
      "829:         );",
      "830:         assert_oks!(for lex and buf ;",
      "831:             Token::OpeningTagStart",
      "832:             Token::Character('a')",
      "833:             Token::TagEnd",
      "834:             Token::DoctypeStart",
      "835:             Token::TagEnd",
      "836:             Token::Whitespace(' ')",
      "837:         );",
      "838:         assert_none!(for lex and buf);",
      "839:     }",
      "841:     #[test]",
      "842:     fn end_of_stream_handling_ok() {",
      "843:         macro_rules! eof_check(",
      "",
      "[Removed Lines]",
      "828:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba> ]> \"#",
      "",
      "[Added Lines]",
      "870:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba \">>>>>\"> ]> \"#",
      "877:             Token::MarkupDeclarationStart",
      "878:             Token::DoubleQuote",
      "879:             Token::DoubleQuote",
      "880:             Token::TagEnd",
      "881:             Token::TagEnd",
      "882:             Token::Whitespace(' ')",
      "883:         );",
      "884:         assert_none!(for lex and buf);",
      "885:     }",
      "887:     #[test]",
      "888:     fn doctype_internal_pi_comment() {",
      "889:         let (mut lex, mut buf) = make_lex_and_buf(",
      "890:             \"<!DOCTYPE a [\\n<!ELEMENT leopard ANY> <!-- <?non?>--> <?pi > ?> \\n]>\"",
      "891:         );",
      "892:         assert_oks!(for lex and buf ;",
      "893:             Token::DoctypeStart",
      "894:             Token::MarkupDeclarationStart",
      "896:             Token::CommentStart",
      "898:             Token::Character('<')",
      "899:             Token::Character('?')",
      "900:             Token::Character('n')",
      "901:             Token::Character('o')",
      "902:             Token::Character('n')",
      "903:             Token::Character('?')",
      "904:             Token::Character('>')",
      "905:             Token::CommentEnd",
      "906:             Token::ProcessingInstructionStart",
      "907:             Token::Character('p')",
      "908:             Token::Character('i')",
      "909:             Token::Whitespace(' ')",
      "910:             Token::TagEnd // not really",
      "911:             Token::Whitespace(' ')",
      "912:             Token::ProcessingInstructionEnd",
      "913:             Token::TagEnd // DTD",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
      "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:     pub fn inside_cdata(&mut self, t: Token) -> Option<Result> {",
      "8:         match t {",
      "9:             Token::CDataEnd => {",
      "11:                 let event = if self.config.cdata_to_characters {",
      "12:                     None",
      "13:                 } else {",
      "",
      "[Removed Lines]",
      "10:                 self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
      "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:     pub fn inside_doctype(&mut self, t: Token) -> Option<Result> {",
      "7:         match t {",
      "8:             Token::TagEnd => {",
      "10:                 self.into_state_continue(State::OutsideTag)",
      "11:             }",
      "13:             _ => None,",
      "14:         }",
      "15:     }",
      "",
      "[Removed Lines]",
      "9:                 self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "12:             Token::MarkupDeclarationStart => {",
      "13:                 self.into_state_continue(State::InsideDoctypeMarkupDeclaration)",
      "14:             },",
      "16:             _ => None,",
      "17:         }",
      "18:     }",
      "20:     pub fn inside_doctype_markup_declaration(&mut self, t: Token) -> Option<Result> {",
      "21:         match t {",
      "22:             Token::TagEnd => {",
      "23:                 self.into_state_continue(State::InsideDoctype)",
      "24:             }",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
      "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:             ProcessingInstructionSubstate::PIInsideData => match t {",
      "70:                 Token::ProcessingInstructionEnd => {",
      "72:                     let name = self.data.take_name();",
      "73:                     let data = self.take_buf();",
      "74:                     self.into_state_emit(",
      "",
      "[Removed Lines]",
      "71:                     self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/reader/parser/mod.rs||src/reader/parser/mod.rs": [
      "File: src/reader/parser/mod.rs -> src/reader/parser/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     InsideCData,",
      "140:     InsideDeclaration(DeclarationSubstate),",
      "141:     InsideDoctype,",
      "142:     InsideReference(Box<State>),",
      "143: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     InsideDoctypeMarkupDeclaration,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "337:             State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),",
      "338:             State::InsideDeclaration(s)           => self.inside_declaration(t, s),",
      "339:             State::InsideDoctype                  => self.inside_doctype(t),",
      "340:             State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),",
      "341:             State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),",
      "342:             State::InsideComment                  => self.inside_comment(t),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "341:             State::InsideDoctypeMarkupDeclaration => self.inside_doctype_markup_declaration(t),",
      "",
      "---------------"
    ],
    "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
      "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:                         self.next_pos();",
      "85:                         self.into_state(State::InsideDoctype, next_event)",
      "86:                     }",
      "",
      "[Removed Lines]",
      "84:                         self.lexer.disable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/xmlconf.rs||tests/xmlconf.rs": [
      "File: tests/xmlconf.rs -> tests/xmlconf.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:         \"rmt-e2e-18\", // External entity containing start of entity declaration is base URI for system identifier",
      "117:         \"rmt-e2e-19\", // Parameter entities and character references are included-in-literal, but general entities are bypassed.",
      "118:         \"rmt-e2e-22\", // UTF-8 entities may start with a BOM",
      "120:         \"rmt-e2e-34\", // A non-deterministic content model is an error even if the element type is not used.",
      "121:         \"rmt-e2e-50\", // All line-ends are normalized, even those not passed to the application. NB this can only be tested effectively in XML 1.1, since CR is in the S production; in 1.1 we can use NEL which isn't.",
      "122:         \"rmt-e2e-55\", // A reference to an unparsed entity in an entity value is an error rather than forbidden (unless the entity is referenced, of course)",
      "",
      "[Removed Lines]",
      "119:         \"rmt-e2e-24\", // Either the built-in entity or a character reference can be used to represent greater-than after two close-square-brackets",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "279: #[test] fn oasis() {",
      "280:     run_suite(\"oasis/oasis.xml\", &[",
      "285:         \"o-p01fail1\", // S cannot occur before the prolog",
      "286:         \"o-p01fail2\", // comments cannot occur before the prolog",
      "287:         \"o-p01fail3\", // only one document element",
      "288:         \"o-p09fail1\", // EntityValue excludes '%'",
      "289:         \"o-p09fail2\", // EntityValue excludes '&'",
      "290:         \"o-p09fail3\", // incomplete character reference",
      "296:         \"o-p12fail2\", // '\\' excluded",
      "297:         \"o-p12fail3\", // entity references excluded",
      "298:         \"o-p12fail6\", // built-in entity refs excluded",
      "299:         \"o-p12fail7\", // The public ID has a tab character, which is disallowed",
      "300:         \"o-p14fail3\", // \"]]>\" excluded",
      "",
      "[Removed Lines]",
      "281:         \"o-p43pass1\", // Valid use of character data, comments, processing instructions and CDATA sections within the start and end tag.",
      "282:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
      "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
      "284:         \"o-p05pass1\", // various valid Name constructions",
      "291:         \"o-p09fail4\", // quote types must match",
      "292:         \"o-p09fail5\", // quote types must match",
      "293:         \"o-p11fail1\", // quote types must match",
      "294:         \"o-p11fail2\", // cannot contain delimiting quotes",
      "295:         \"o-p12fail1\", // '\"' excluded",
      "",
      "[Added Lines]",
      "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
      "284:         \"o-p05pass1\", // various valid Name constructions",
      "288:         \"o-p11pass1\", // p11pass1.xml       system literals may not contain     URI fragments",
      "289:         \"o-p12fail1\", // p12fail1.xml       '\"' excluded",
      "292:         \"o-p12fail4\", // p12fail4.xml       '>' excluded",
      "293:         \"o-p12fail5\", // p12fail5.xml       '<' excluded",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:         \"o-p22fail2\", // prolog must start with XML decl",
      "304:         \"o-p23fail1\", // \"xml\" must be lower-case",
      "305:         \"o-p27fail1\", // References aren't allowed in Misc,     even if they would resolve to valid Misc.",
      "307:         \"o-p30fail1\", // An XML declaration is not the same as a TextDecl",
      "308:         \"o-p31fail1\", // external subset excludes doctypedecl",
      "309:         \"o-p32fail3\", // initial S is required",
      "310:         \"o-p40fail1\", // S is required between attributes",
      "311:         \"o-p44fail4\", // Whitespace required between attributes.",
      "313:         \"o-p45fail2\", // S before contentspec is required.",
      "314:         \"o-p45fail3\", // only one content spec",
      "315:         \"o-p45fail4\", // no comments in declarations (contrast with SGML)",
      "",
      "[Removed Lines]",
      "306:         \"o-p29fail1\", // A processor must not pass unknown declaration types.",
      "312:         \"o-p45fail1\", // ELEMENT must be upper case.",
      "",
      "[Added Lines]",
      "306:         \"o-p43pass1\", // Valid use of character data, comments, processing instructions and CDATA sections within the start and end tag.",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "371:         \"o-p64fail1\", // section delimiters must balance",
      "372:         \"o-p64fail2\", // section delimiters must balance",
      "373:         \"o-p66fail5\", // no references to non-characters",
      "374:         \"o-p69fail1\", // terminating ';' is required",
      "375:         \"o-p69fail2\", // no S after '%'",
      "376:         \"o-p69fail3\", // no S before ';'",
      "377:         \"o-p70fail1\", // This is neither",
      "378:         \"o-p71fail1\", // S is required before EntityDef",
      "379:         \"o-p71fail2\", // Entity name is a Name, not an NMToken",
      "381:         \"o-p71fail4\", // S is required after \"<!ENTITY\"",
      "382:         \"o-p72fail1\", // S is required after \"<!ENTITY\"",
      "383:         \"o-p72fail2\", // S is required after '%'",
      "384:         \"o-p72fail3\", // S is required after name",
      "385:         \"o-p72fail4\", // Entity name is a name, not an NMToken",
      "386:         \"o-p73fail1\", // No typed replacement text",
      "387:         \"o-p73fail2\", // Only one replacement value",
      "",
      "[Removed Lines]",
      "380:         \"o-p71fail3\", // no S after \"<!\"",
      "",
      "[Added Lines]",
      "369:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
      "380:         \"o-p76fail4\", // p76fail4.xml       notation names are Names",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "438:         \"content02\", // No whitespace before \"*\" in content model",
      "439:         \"content03\", // No whitespace before \"+\" in content model",
      "440:         \"decl01\", // External entities may not have standalone decls.",
      "443:         \"dtd02\", // PE name immediately after \"%\"",
      "444:         \"dtd03\", // PE name immediately followed by \";\"",
      "445:         \"dtd04\", // PUBLIC literal must be quoted",
      "",
      "[Removed Lines]",
      "441:         \"nwf-dtd00\", // Comma mandatory in content model",
      "442:         \"nwf-dtd01\", // Can't mix comma and vertical bar in content models",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "451:         \"encoding04\", // Illegal character \":\" in encoding name",
      "452:         \"encoding05\", // Illegal character \"@\" in encoding name",
      "453:         \"encoding06\", // Illegal character \"+\" in encoding name",
      "454:         \"pubid01\", // Illegal entity ref in public ID",
      "455:         \"pubid02\", // Illegal characters in public ID",
      "456:         \"pubid03\", // Illegal characters in public ID",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:         \"nwf-dtd00\", // Comma mandatory in content model",
      "449:         \"nwf-dtd01\", // Can't mix comma and vertical bar in content models",
      "450:         \"pi\", // pi.xml      No space between PI target name and data",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "502:         \"not-wf-sa-060\", // Invalid type NAME defined in ATTLIST.",
      "503:         \"not-wf-sa-061\", // External entity declarations require whitespace between public     and system IDs.",
      "504:         \"not-wf-sa-062\", // Entity declarations need space after the entity name.",
      "506:         \"not-wf-sa-064\", // Space is required between attribute type and default values     in <!ATTLIST...> declarations.",
      "507:         \"not-wf-sa-065\", // Space is required between attribute name and type     in <!ATTLIST...> declarations.",
      "508:         \"not-wf-sa-066\", // Required whitespace is missing.",
      "",
      "[Removed Lines]",
      "505:         \"not-wf-sa-063\", // Conditional sections may only appear in the external     DTD subset.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "523:         \"not-wf-sa-101\", // Space is not permitted in an encoding name.",
      "524:         \"not-wf-sa-105\", // Invalid placement of CDATA section.",
      "525:         \"not-wf-sa-106\", // Invalid placement of entity declaration.",
      "527:         \"not-wf-sa-113\", // Parameter entity values must use valid reference syntax;     this reference is malformed.",
      "528:         \"not-wf-sa-114\", // General entity values must use valid reference syntax;     this reference is malformed.",
      "529:         \"not-wf-sa-121\", // A name of an ENTITY was started with an invalid character.",
      "",
      "[Removed Lines]",
      "526:         \"not-wf-sa-107\", // Invalid document type declaration.  CDATA alone is invalid.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "566:         \"not-wf-sa-174\", // Character FFFF is not legal anywhere in an XML document.",
      "567:         \"not-wf-sa-175\", // Character FFFF is not legal anywhere in an XML document.",
      "568:         \"not-wf-sa-177\", // Character FFFF is not legal anywhere in an XML document.",
      "570:         \"not-wf-sa-180\", // The Entity Declared WFC requires entities to be declared     before they are used in an attribute list declaration.",
      "571:         \"not-wf-sa-183\", // Mixed content declarations may not include content particles.",
      "572:         \"not-wf-sa-184\", // In mixed content models, element names must not be     parenthesized.",
      "",
      "[Removed Lines]",
      "569:         \"not-wf-sa-179\", // Invalid syntax matching double quote is missing.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01354bcc46b535c74945c5617b248ff7d031803c",
      "candidate_info": {
        "commit_hash": "01354bcc46b535c74945c5617b248ff7d031803c",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/01354bcc46b535c74945c5617b248ff7d031803c",
        "files": [
          "src/common.rs",
          "src/reader/lexer.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/outside_tag.rs"
        ],
        "message": "Reduce token size",
        "before_after_code_files": [
          "src/common.rs||src/common.rs",
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/common.rs||src/common.rs": [
          "File: src/common.rs -> src/common.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: #[must_use]",
          "103: pub fn is_whitespace_char(c: char) -> bool {",
          "108: }",
          "",
          "[Removed Lines]",
          "104:     match c {",
          "105:         '\\x20' | '\\x09' | '\\x0d' | '\\x0a' => true,",
          "106:         _ => false,",
          "107:     }",
          "",
          "[Added Lines]",
          "103: #[inline]",
          "105:     matches!(c, '\\x20' | '\\x0a' | '\\x09' | '\\x0d')",
          "",
          "---------------"
        ],
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     CommentEnd,",
          "38:     Character(char),",
          "42:     EqualsSign,",
          "",
          "[Removed Lines]",
          "40:     Whitespace(char),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     #[cold]",
          "61:     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "62:         match *self {",
          "64:             other => match other {",
          "65:                 Token::OpeningTagStart            => \"<\",",
          "66:                 Token::ProcessingInstructionStart => \"<?\",",
          "",
          "[Removed Lines]",
          "63:             Token::Character(c) | Token::Whitespace(c) => c.fmt(f),",
          "",
          "[Added Lines]",
          "61:             Token::Character(c) => c.fmt(f),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:             Some(s) => { target.push_str(s); }",
          "114:             None => {",
          "115:                 match *self {",
          "117:                     _ => unreachable!()",
          "118:                 }",
          "119:             }",
          "",
          "[Removed Lines]",
          "116:                     Token::Character(c) | Token::Whitespace(c) => target.push(c),",
          "",
          "[Added Lines]",
          "114:                     Token::Character(c) => target.push(c),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     #[inline]",
          "126:     pub fn contains_char_data(&self) -> bool {",
          "127:         match *self {",
          "129:             Token::TagEnd | Token::EqualsSign | Token::DoubleQuote | Token::SingleQuote | Token::CDataEnd |",
          "130:             Token::ProcessingInstructionEnd | Token::EmptyTagEnd => true,",
          "131:             _ => false",
          "132:         }",
          "133:     }",
          "140: }",
          "142: #[derive(Copy, Clone)]",
          "",
          "[Removed Lines]",
          "128:             Token::Whitespace(_) | Token::Character(_) | Token::CommentEnd |",
          "136:     #[inline]",
          "137:     pub fn is_whitespace(&self) -> bool {",
          "138:         matches!(self, Token::Whitespace(_))",
          "139:     }",
          "",
          "[Added Lines]",
          "126:             Token::Character(_) | Token::CommentEnd |",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "439:             ']'                        => self.move_to(State::InvalidCDataClosing(ClosingSubstate::First)),",
          "440:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "441:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "443:             _                          => Ok(Some(Token::Character(c)))",
          "444:         }",
          "445:     }",
          "",
          "[Removed Lines]",
          "442:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:     fn inside_cdata(&mut self, c: char) -> Result {",
          "448:         match c {",
          "449:             ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),",
          "451:             _                          => Ok(Some(Token::Character(c)))",
          "452:         }",
          "453:     }",
          "",
          "[Removed Lines]",
          "450:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "464:             '\\''                       => Ok(Some(Token::SingleQuote)),",
          "465:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "466:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "468:             _                          => Ok(Some(Token::Character(c)))",
          "469:         }",
          "470:     }",
          "",
          "[Removed Lines]",
          "467:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "472:     fn inside_comment_state(&mut self, c: char) -> Result {",
          "473:         match c {",
          "474:             '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),",
          "476:             _                          => Ok(Some(Token::Character(c)))",
          "477:         }",
          "478:     }",
          "",
          "[Removed Lines]",
          "475:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "675:             Token::Character('!')",
          "676:             Token::Character('-')",
          "677:             Token::Character('-')",
          "679:             Token::ReferenceStart",
          "680:             Token::Character('?')",
          "681:             Token::ProcessingInstructionEnd",
          "",
          "[Removed Lines]",
          "678:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "666:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "695:         assert_oks!(for lex and buf ;",
          "696:             Token::OpeningTagStart",
          "697:             Token::Character('a')",
          "699:             Token::Character('p')",
          "700:             Token::EqualsSign",
          "701:             Token::SingleQuote",
          "702:             Token::Character('q')",
          "703:             Token::SingleQuote",
          "704:             Token::TagEnd",
          "706:             Token::Character('x')",
          "707:             Token::OpeningTagStart",
          "708:             Token::Character('b')",
          "710:             Token::Character('z')",
          "711:             Token::EqualsSign",
          "712:             Token::DoubleQuote",
          "",
          "[Removed Lines]",
          "698:             Token::Whitespace(' ')",
          "705:             Token::Whitespace(' ')",
          "709:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "686:             Token::Character(' ')",
          "693:             Token::Character(' ')",
          "697:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "714:             Token::DoubleQuote",
          "715:             Token::TagEnd",
          "716:             Token::Character('d')",
          "718:             Token::ClosingTagStart",
          "719:             Token::Character('b')",
          "720:             Token::TagEnd",
          "",
          "[Removed Lines]",
          "717:             Token::Whitespace('\\t')",
          "",
          "[Added Lines]",
          "705:             Token::Character('\\t')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "724:             Token::OpeningTagStart",
          "725:             Token::Character('p')",
          "726:             Token::EmptyTagEnd",
          "728:             Token::ProcessingInstructionStart",
          "729:             Token::Character('n')",
          "730:             Token::Character('m')",
          "732:             Token::ProcessingInstructionEnd",
          "734:             Token::CommentStart",
          "736:             Token::Character('a')",
          "738:             Token::Character('c')",
          "740:             Token::CommentEnd",
          "742:             Token::ReferenceStart",
          "743:             Token::Character('n')",
          "744:             Token::Character('b')",
          "",
          "[Removed Lines]",
          "727:             Token::Whitespace(' ')",
          "731:             Token::Whitespace(' ')",
          "733:             Token::Whitespace(' ')",
          "735:             Token::Whitespace(' ')",
          "737:             Token::Whitespace(' ')",
          "739:             Token::Whitespace(' ')",
          "741:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "715:             Token::Character(' ')",
          "719:             Token::Character(' ')",
          "721:             Token::Character(' ')",
          "723:             Token::Character(' ')",
          "725:             Token::Character(' ')",
          "727:             Token::Character(' ')",
          "729:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "760:             Token::Character('x')",
          "761:             Token::Character('!')",
          "762:             Token::Character('+')",
          "764:             Token::Character('/')",
          "765:             Token::Character('/')",
          "767:             Token::Character('-')",
          "768:             Token::Character('|')",
          "770:             Token::Character(']')",
          "771:             Token::Character('z')",
          "772:             Token::Character(']')",
          "",
          "[Removed Lines]",
          "763:             Token::Whitespace(' ')",
          "766:             Token::Whitespace(' ')",
          "769:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "751:             Token::Character(' ')",
          "754:             Token::Character(' ')",
          "757:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "787:             Token::TagEnd",
          "788:             Token::CDataStart",
          "789:             Token::Character('x')",
          "791:             Token::Character('y')",
          "793:             Token::Character('?')",
          "794:             Token::CDataEnd",
          "796:             Token::ClosingTagStart",
          "797:             Token::Character('a')",
          "798:             Token::TagEnd",
          "",
          "[Removed Lines]",
          "790:             Token::Whitespace(' ')",
          "792:             Token::Whitespace(' ')",
          "795:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "778:             Token::Character(' ')",
          "780:             Token::Character(' ')",
          "783:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "809:         assert_oks!(for lex and buf ;",
          "810:             Token::CDataStart",
          "811:             Token::Character(']')",
          "813:             Token::Character('>')",
          "815:             Token::Character(']')",
          "816:             Token::Character('>')",
          "818:             Token::CDataEnd",
          "819:             Token::CommentStart",
          "820:             Token::CommentEnd",
          "",
          "[Removed Lines]",
          "812:             Token::Whitespace(' ')",
          "814:             Token::Whitespace(' ')",
          "817:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "800:             Token::Character(' ')",
          "802:             Token::Character(' ')",
          "805:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "838:             Token::TagEnd",
          "839:             Token::DoctypeStart",
          "840:             Token::TagEnd",
          "842:         );",
          "843:         assert_none!(for lex and buf);",
          "844:     }",
          "",
          "[Removed Lines]",
          "841:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "829:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "853:             Token::Character('a')",
          "854:             Token::TagEnd",
          "855:             Token::CommentStart",
          "857:             Token::Character('C')",
          "859:             Token::Character('-')",
          "860:             Token::Character('>')",
          "861:             Token::CommentEnd",
          "",
          "[Removed Lines]",
          "856:             Token::Whitespace(' ')",
          "858:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "844:             Token::Character(' ')",
          "846:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "881:             Token::DoubleQuote",
          "882:             Token::TagEnd",
          "883:             Token::TagEnd",
          "885:         );",
          "886:         assert_none!(for lex and buf);",
          "887:     }",
          "",
          "[Removed Lines]",
          "884:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "872:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "896:             Token::MarkupDeclarationStart",
          "897:             Token::TagEnd",
          "898:             Token::CommentStart",
          "900:             Token::Character('<')",
          "901:             Token::Character('?')",
          "902:             Token::Character('n')",
          "",
          "[Removed Lines]",
          "899:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "887:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "908:             Token::ProcessingInstructionStart",
          "909:             Token::Character('p')",
          "910:             Token::Character('i')",
          "912:             Token::TagEnd // not really",
          "914:             Token::ProcessingInstructionEnd",
          "915:             Token::TagEnd // DTD",
          "916:         );",
          "",
          "[Removed Lines]",
          "911:             Token::Whitespace(' ')",
          "913:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "899:             Token::Character(' ')",
          "901:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "984:             Token::Character('<')",
          "985:             Token::Character('!')",
          "986:             Token::Character('-')",
          "988:         );",
          "989:         assert_none!(for lex and buf);",
          "990:     }",
          "",
          "[Removed Lines]",
          "987:             Token::Whitespace('\\t')",
          "",
          "[Added Lines]",
          "975:             Token::Character('\\t')",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1025:     #[test]",
          "1026:     fn token_size() {",
          "1028:         assert_eq!(2, std::mem::size_of::<super::State>());",
          "1029:     }",
          "",
          "[Removed Lines]",
          "1027:         assert_eq!(8, std::mem::size_of::<Token>());",
          "",
          "[Added Lines]",
          "1015:         assert_eq!(4, std::mem::size_of::<Token>());",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1061:             Token::Character('F')",
          "1062:             Token::Character('o')",
          "1063:             Token::Character('o')",
          "1065:             Token::Character('[')",
          "1066:             Token::Character('B')",
          "1067:             Token::Character('a')",
          "",
          "[Removed Lines]",
          "1064:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "1052:             Token::Character(' ')",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::io::prelude::*;",
          "6: use crate::attribute::OwnedAttribute;",
          "8: use crate::name::OwnedName;",
          "9: use crate::namespace::NamespaceStack;",
          "",
          "[Removed Lines]",
          "7: use crate::common::{self, is_name_char, is_name_start_char, Position, TextPosition, XmlVersion};",
          "",
          "[Added Lines]",
          "7: use crate::common::{self, is_name_char, is_name_start_char, Position, TextPosition, XmlVersion, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:             Token::TagEnd if target == QualifiedNameTarget::OpeningTagNameTarget ||",
          "428:                       target == QualifiedNameTarget::ClosingTagNameTarget => invoke_callback(self, t),",
          "432:             _ => Some(self_error!(self; \"Unexpected token inside qualified name: {}\", t))",
          "433:         }",
          "",
          "[Removed Lines]",
          "430:             Token::Whitespace(_) => invoke_callback(self, t),",
          "",
          "[Added Lines]",
          "430:             Token::Character(c) if is_whitespace_char(c) => invoke_callback(self, t),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:     fn read_attribute_value<F>(&mut self, t: Token, on_value: F) -> Option<Result>",
          "442:       where F: Fn(&mut PullParser, String) -> Option<Result> {",
          "443:         match t {",
          "446:             Token::DoubleQuote | Token::SingleQuote => match self.data.quote {",
          "447:                 None => {  // Entered attribute value",
          "",
          "[Removed Lines]",
          "444:             Token::Whitespace(_) if self.data.quote.is_none() => None,  // skip leading whitespace",
          "",
          "[Added Lines]",
          "444:             Token::Character(c) if self.data.quote.is_none() && is_whitespace_char(c) => None,  // skip leading whitespace",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
          "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::reader::lexer::Token;",
          "4: use super::{PullParser, Result, State};",
          "",
          "[Removed Lines]",
          "1: use crate::reader::events::XmlEvent;",
          "",
          "[Added Lines]",
          "1: use crate::{reader::events::XmlEvent, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:                 self.into_state(State::OutsideTag, event)",
          "17:             }",
          "24:             Token::Character(c) => {",
          "26:                 self.buf.push(c);",
          "27:                 None",
          "28:             }",
          "",
          "[Removed Lines]",
          "19:             Token::Whitespace(c) => {",
          "20:                 self.buf.push(c);",
          "21:                 None",
          "22:             }",
          "25:                 self.inside_whitespace = false;",
          "",
          "[Added Lines]",
          "20:                 if !is_whitespace_char(c) {",
          "21:                     self.inside_whitespace = false;",
          "22:                 }",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs": [
          "File: src/reader/parser/inside_closing_tag_name.rs -> src/reader/parser/inside_closing_tag_name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::namespace;",
          "",
          "[Added Lines]",
          "1: use crate::{namespace, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:                     _ => {",
          "17:                         this.data.element_name = Some(name.clone());",
          "18:                         match token {",
          "20:                             Token::TagEnd => this.emit_end_element(),",
          "21:                             _ => Some(self_error!(this; \"Unexpected token inside closing tag: {}\", token))",
          "22:                         }",
          "23:                     }",
          "24:                 }",
          "25:             }),",
          "26:             ClosingTagSubstate::CTAfterName => match t {",
          "28:                 Token::TagEnd => self.emit_end_element(),",
          "29:                 _ => Some(self_error!(self; \"Unexpected token inside closing tag: {}\", t))",
          "30:             }",
          "31:         }",
          "",
          "[Removed Lines]",
          "19:                             Token::Whitespace(_) => this.into_state_continue(State::InsideClosingTag(ClosingTagSubstate::CTAfterName)),",
          "27:                 Token::Whitespace(_) => None,  //  Skip whitespace",
          "",
          "[Added Lines]",
          "20:                             Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideClosingTag(ClosingTagSubstate::CTAfterName)),",
          "28:                 Token::Character(c) if is_whitespace_char(c) => None,  //  Skip whitespace",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs": [
          "File: src/reader/parser/inside_declaration.rs -> src/reader/parser/inside_declaration.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::common::XmlVersion;",
          "",
          "[Added Lines]",
          "1: use crate::common::{XmlVersion, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         match s {",
          "33:             DeclarationSubstate::BeforeVersion => match t {",
          "35:                 Token::Character('v') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideVersion)),",
          "36:                 _ => unexpected_token!(t)",
          "37:             },",
          "",
          "[Removed Lines]",
          "34:                 Token::Whitespace(_) => None,  // continue",
          "",
          "[Added Lines]",
          "35:                 Token::Character(c) if is_whitespace_char(c) => None,  // continue",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:             }),",
          "53:             DeclarationSubstate::AfterVersion => match t {",
          "55:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideVersionValue)),",
          "56:                 _ => unexpected_token!(t)",
          "57:             },",
          "",
          "[Removed Lines]",
          "54:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "55:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:             }),",
          "72:             DeclarationSubstate::AfterVersionValue => match t {",
          "74:                 Token::Character('e') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncoding)),",
          "75:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "76:                 Token::ProcessingInstructionEnd => emit_start_document(self),",
          "77:                 _ => unexpected_token!(t)",
          "78:             },",
          "",
          "[Removed Lines]",
          "73:                 Token::Whitespace(_) => None,  // skip whitespace",
          "",
          "[Added Lines]",
          "76:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:             }),",
          "90:             DeclarationSubstate::AfterEncoding => match t {",
          "92:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncodingValue)),",
          "93:                 _ => unexpected_token!(t)",
          "94:             },",
          "",
          "[Removed Lines]",
          "91:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "92:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "99:             }),",
          "101:             DeclarationSubstate::BeforeStandaloneDecl => match t {",
          "103:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "104:                 Token::ProcessingInstructionEnd => emit_start_document(self),",
          "105:                 _ => unexpected_token!(t)",
          "106:             },",
          "",
          "[Removed Lines]",
          "102:                 Token::Whitespace(_) => None,  // skip whitespace",
          "",
          "[Added Lines]",
          "104:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "120:             }),",
          "122:             DeclarationSubstate::AfterStandaloneDecl => match t {",
          "124:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDeclValue)),",
          "125:                 _ => unexpected_token!(t)",
          "126:             },",
          "",
          "[Removed Lines]",
          "123:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "124:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "140:             }),",
          "142:             DeclarationSubstate::AfterStandaloneDeclValue => match t {",
          "144:                 Token::ProcessingInstructionEnd => emit_start_document(self),",
          "145:                 _ => unexpected_token!(t)",
          "146:             }",
          "147:         }",
          "",
          "[Removed Lines]",
          "143:                 Token::Whitespace(_) => None,  // skip whitespace",
          "",
          "[Added Lines]",
          "144:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs": [
          "File: src/reader/parser/inside_opening_tag.rs -> src/reader/parser/inside_opening_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::common::is_name_start_char;",
          "3: use crate::namespace;",
          "",
          "[Removed Lines]",
          "1: use crate::attribute::OwnedAttribute;",
          "",
          "[Added Lines]",
          "1: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:                         match token {",
          "21:                             Token::TagEnd => this.emit_start_element(false),",
          "22:                             Token::EmptyTagEnd => this.emit_start_element(true),",
          "24:                             _ => unreachable!()",
          "25:                         }",
          "26:                     }",
          "",
          "[Removed Lines]",
          "23:                             Token::Whitespace(_) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideTag)),",
          "",
          "[Added Lines]",
          "23:                             Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideTag)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:             }),",
          "30:             OpeningTagSubstate::InsideTag => match t {",
          "32:                 Token::Character(c) if is_name_start_char(c) => {",
          "33:                     self.buf.push(c);",
          "34:                     self.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeName))",
          "35:                 }",
          "38:                 _ => unexpected_token!(t)",
          "39:             },",
          "41:             OpeningTagSubstate::InsideAttributeName => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "42:                 this.data.attr_name = Some(name);",
          "43:                 match token {",
          "45:                     Token::EqualsSign => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeValue)),",
          "46:                     _ => unreachable!()",
          "47:                 }",
          "48:             }),",
          "50:             OpeningTagSubstate::AfterAttributeName => match t {",
          "52:                 Token::EqualsSign => self.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeValue)),",
          "53:                 _ => unexpected_token!(t)",
          "54:             },",
          "",
          "[Removed Lines]",
          "31:                 Token::Whitespace(_) => None,  // skip whitespace",
          "36:                 Token::TagEnd => self.emit_start_element(false),",
          "37:                 Token::EmptyTagEnd => self.emit_start_element(true),",
          "44:                     Token::Whitespace(_) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::AfterAttributeName)),",
          "51:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "31:                 Token::TagEnd => self.emit_start_element(false),",
          "32:                 Token::EmptyTagEnd => self.emit_start_element(true),",
          "33:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "45:                     Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::AfterAttributeName)),",
          "52:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
          "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::common::{is_name_char, is_name_start_char};",
          "",
          "[Added Lines]",
          "1: use crate::common::{is_name_char, is_name_start_char, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:                     }",
          "41:                 }",
          "45:                     let name = self.take_buf();",
          "",
          "[Removed Lines]",
          "43:                 Token::Whitespace(_) => {",
          "",
          "[Added Lines]",
          "43:                 Token::Character(c) if is_whitespace_char(c) => {",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:                 self.into_state_continue(State::InsideReference)",
          "17:             },",
          "26:                 }",
          "28:             }",
          "30:             _ if t.contains_char_data() && self.depth() == 0 =>",
          "",
          "[Removed Lines]",
          "19:             Token::Whitespace(_) if self.depth() == 0 && self.config.ignore_root_level_whitespace => None,  // skip whitespace outside of the root element",
          "21:             Token::Whitespace(_) if self.config.trim_whitespace && !self.buf_has_data() => None,",
          "23:             Token::Whitespace(c) => {",
          "24:                 if !self.buf_has_data() {",
          "25:                     self.push_pos();",
          "27:                 self.append_char_continue(c)",
          "",
          "[Added Lines]",
          "19:             Token::Character(c) if is_whitespace_char(c) => {",
          "21:                 if self.depth() == 0 && self.config.ignore_root_level_whitespace { None }",
          "22:                 else if self.config.trim_whitespace && !self.buf_has_data() { None }",
          "23:                 else {",
          "24:                     if !self.buf_has_data() {",
          "25:                         self.push_pos();",
          "26:                     }",
          "27:                     self.append_char_continue(c)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43413df7c85b9730b80fc7a415a14c00a6beb9cb",
      "candidate_info": {
        "commit_hash": "43413df7c85b9730b80fc7a415a14c00a6beb9cb",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/43413df7c85b9730b80fc7a415a14c00a6beb9cb",
        "files": [
          "src/reader/lexer.rs",
          "src/reader/parser/inside_comment.rs",
          "src/reader/parser/mod.rs",
          "src/reader/parser/outside_tag.rs",
          "tests/xmlconf.rs"
        ],
        "message": "Make lexer comment-aware\n\nFixes #220",
        "before_after_code_files": [
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser/inside_comment.rs||src/reader/parser/inside_comment.rs",
          "src/reader/parser/mod.rs||src/reader/parser/mod.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
          "tests/xmlconf.rs||tests/xmlconf.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/mod.rs||src/reader/parser/mod.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/mod.rs||src/reader/parser/mod.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: }",
          "146: enum State {",
          "148:     TagStarted,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     Normal,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     CommentClosing(ClosingSubstate),",
          "166:     CDataClosing(ClosingSubstate),",
          "169: }",
          "171: #[derive(Copy, Clone)]",
          "",
          "[Removed Lines]",
          "168:     Normal,",
          "",
          "[Added Lines]",
          "170:     InsideComment,",
          "172:     InsideCdata,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:     char_queue: VecDeque<char>,",
          "223:     st: State,",
          "224:     skip_errors: bool,",
          "226:     inside_token: bool,",
          "227:     eof_handled: bool",
          "228: }",
          "",
          "[Removed Lines]",
          "225:     inside_comment: bool,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:             char_queue: VecDeque::with_capacity(4),  // TODO: check size",
          "243:             st: State::Normal,",
          "244:             skip_errors: false,",
          "246:             inside_token: false,",
          "247:             eof_handled: false",
          "248:         }",
          "",
          "[Removed Lines]",
          "245:             inside_comment: false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "263:     #[inline]",
          "267:     #[inline]",
          "271:     #[inline]",
          "",
          "[Removed Lines]",
          "264:     pub fn inside_comment(&mut self) { self.inside_comment = true; }",
          "268:     pub fn outside_comment(&mut self) { self.inside_comment = false; }",
          "",
          "[Added Lines]",
          "266:     #[deprecated]",
          "267:     pub fn inside_comment(&mut self) { self.st = State::InsideComment; }",
          "271:     #[deprecated]",
          "272:     pub fn outside_comment(&mut self) { self.st = State::Normal; }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "327:             State::TagStarted | State::CommentOrCDataOrDoctypeStarted |",
          "328:             State::CommentStarted | State::CDataStarted(_)| State::DoctypeStarted(_) |",
          "329:             State::CommentClosing(ClosingSubstate::Second) |",
          "330:             State::DoctypeFinishing(_) =>",
          "331:                 Err(self.error(\"Unexpected end of stream\")),",
          "332:             State::ProcessingInstructionClosing =>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:             State::InsideComment | State::InsideCdata |",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "340:             State::CDataClosing(ClosingSubstate::Second) =>",
          "341:                 Ok(Some(Token::Chunk(\"]]\"))),",
          "342:             State::Normal =>",
          "344:         }",
          "345:     }",
          "",
          "[Removed Lines]",
          "343:                 Ok(None)",
          "",
          "[Added Lines]",
          "348:                 Ok(None),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "374:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
          "375:             State::EmptyTagClosing                => self.empty_element_closing(c),",
          "376:             State::CommentClosing(s)              => self.comment_closing(c, s),",
          "378:         }",
          "379:     }",
          "",
          "[Removed Lines]",
          "377:             State::CDataClosing(s)                => self.cdata_closing(c, s)",
          "",
          "[Added Lines]",
          "382:             State::CDataClosing(s)                => self.cdata_closing(c, s),",
          "383:             State::InsideComment                  => self.inside_comment_state(c),",
          "384:             State::InsideCdata                    => self.inside_cdata(c),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "399:     fn handle_error(&mut self, chunk: &'static str, c: char) -> Result {",
          "400:         self.char_queue.push_back(c);",
          "402:             self.move_to_with(State::Normal, Token::Chunk(chunk))",
          "403:         } else {",
          "404:             Err(self.error(format!(\"Unexpected token '{chunk}' before '{c}'\")))",
          "",
          "[Removed Lines]",
          "401:         if self.skip_errors || (self.inside_comment && chunk != \"--\") {  // FIXME: looks hacky",
          "",
          "[Added Lines]",
          "408:         if self.skip_errors {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "415:             '\"'                        => Ok(Some(Token::DoubleQuote)),",
          "416:             '\\''                       => Ok(Some(Token::SingleQuote)),",
          "417:             '?'                        => self.move_to(State::ProcessingInstructionClosing),",
          "419:             ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),",
          "420:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "421:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "",
          "[Removed Lines]",
          "418:             '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "424:         }",
          "425:     }",
          "428:     fn tag_opened(&mut self, c: char) -> Result {",
          "429:         match c {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     fn inside_cdata(&mut self, c: char) -> Result {",
          "434:         match c {",
          "435:             ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),",
          "436:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "437:             _                          => Ok(Some(Token::Character(c)))",
          "438:         }",
          "439:     }",
          "441:     fn inside_comment_state(&mut self, c: char) -> Result {",
          "442:         match c {",
          "443:             '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),",
          "444:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "445:             _                          => Ok(Some(Token::Character(c)))",
          "446:         }",
          "447:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "450:     fn comment_started(&mut self, c: char) -> Result {",
          "451:         match c {",
          "453:             _ => self.handle_error(\"<!-\", c),",
          "454:         }",
          "455:     }",
          "",
          "[Removed Lines]",
          "452:             '-' => self.move_to_with(State::Normal, Token::CommentStart),",
          "",
          "[Added Lines]",
          "474:             '-' => self.move_to_with(State::InsideComment, Token::CommentStart),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "463:             CD    ; 'A' ; CDA   ; \"<![CD\",",
          "464:             CDA   ; 'T' ; CDAT  ; \"<![CDA\",",
          "465:             CDAT  ; 'A' ; CDATA ; \"<![CDAT\";",
          "467:         )",
          "468:     }",
          "",
          "[Removed Lines]",
          "466:             CDATA ; '[' ; \"<![CDATA\" ; self.move_to_with(State::Normal, Token::CDataStart)",
          "",
          "[Added Lines]",
          "488:             CDATA ; '[' ; \"<![CDATA\" ; self.move_to_with(State::InsideCdata, Token::CDataStart)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "511:         match s {",
          "512:             ClosingSubstate::First => match c {",
          "513:                 '-' => self.move_to(State::CommentClosing(ClosingSubstate::Second)),",
          "515:             },",
          "516:             ClosingSubstate::Second => match c {",
          "517:                 '>' => self.move_to_with(State::Normal, Token::CommentEnd),",
          "525:             },",
          "526:         }",
          "527:     }",
          "",
          "[Removed Lines]",
          "514:                 _ => self.move_to_with_unread(State::Normal, &[c], Token::Character('-')),",
          "519:                 _ if self.inside_comment => self.handle_error(\"--\", c),",
          "524:                 _ => self.move_to_with_unread(State::Normal, &[c], Token::Chunk(\"--\")),",
          "",
          "[Added Lines]",
          "536:                 _ => self.move_to_with_unread(State::InsideComment, &[c], Token::Character('-')),",
          "541:                 _ => self.handle_error(\"--\", c),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "706:         assert_none!(for lex and buf);",
          "707:     }",
          "709:     #[test]",
          "710:     fn doctype_with_internal_subset_test() {",
          "711:         let (mut lex, mut buf) = make_lex_and_buf(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "726:     #[test]",
          "727:     fn tricky_comments() {",
          "728:         let (mut lex, mut buf) = make_lex_and_buf(",
          "729:             r#\"<a><!-- C ->--></a>\"#",
          "730:         );",
          "731:         assert_oks!(for lex and buf ;",
          "732:             Token::OpeningTagStart",
          "733:             Token::Character('a')",
          "734:             Token::TagEnd",
          "735:             Token::CommentStart",
          "736:             Token::Whitespace(' ')",
          "737:             Token::Character('C')",
          "738:             Token::Whitespace(' ')",
          "739:             Token::Character('-')",
          "740:             Token::Character('>')",
          "741:             Token::CommentEnd",
          "742:             Token::ClosingTagStart",
          "743:             Token::Character('a')",
          "744:             Token::TagEnd",
          "745:         );",
          "746:         assert_none!(for lex and buf);",
          "747:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "756:         eof_check!(\"<![CDA\"   ; 0, 6);",
          "757:         eof_check!(\"<![CDAT\"  ; 0, 7);",
          "758:         eof_check!(\"<![CDATA\" ; 0, 8);",
          "760:     }",
          "762:     #[test]",
          "",
          "[Removed Lines]",
          "759:         eof_check!(\"--\"       ; 0, 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "794:     #[test]",
          "795:     fn error_in_comment_two_dashes_not_at_end() {",
          "796:         let (mut lex, mut buf) = make_lex_and_buf(\"--x\");",
          "798:         assert_err!(for lex and buf expect row 0; 0,",
          "799:             \"Unexpected token '--' before 'x'\"",
          "800:         );",
          "802:         let (mut lex, mut buf) = make_lex_and_buf(\"--x\");",
          "803:         assert_oks!(for lex and buf ;",
          "805:             Token::Character('x')",
          "806:         );",
          "807:     }",
          "",
          "[Removed Lines]",
          "797:         lex.inside_comment();",
          "804:             Token::Chunk(\"--\")",
          "",
          "[Added Lines]",
          "837:         lex.st = super::State::InsideComment;",
          "844:             Token::Character('-')",
          "845:             Token::Character('-')",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_comment.rs||src/reader/parser/inside_comment.rs": [
          "File: src/reader/parser/inside_comment.rs -> src/reader/parser/inside_comment.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:             }",
          "14:             Token::CommentEnd if self.config.ignore_comments => {",
          "16:                 self.into_state_continue(State::OutsideTag)",
          "17:             }",
          "19:             Token::CommentEnd => {",
          "21:                 let data = self.take_buf();",
          "22:                 self.into_state_emit(State::OutsideTag, Ok(XmlEvent::Comment(data)))",
          "23:             }",
          "",
          "[Removed Lines]",
          "15:                 self.lexer.outside_comment();",
          "20:                 self.lexer.outside_comment();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/reader/parser/mod.rs||src/reader/parser/mod.rs": [
          "File: src/reader/parser/mod.rs -> src/reader/parser/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:         expect_event!(r, p, Ok(XmlEvent::EndDocument));",
          "602:     }",
          "604:     #[test]",
          "605:     fn opening_tag_in_attribute_value() {",
          "606:         let (mut r, mut p) = test_data!(r#\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604:     #[test]",
          "605:     fn issue_220_comment() {",
          "606:         let (mut r, mut p) = test_data!(r#\"<x><!-- <!--></x>\"#);",
          "607:         expect_event!(r, p, Ok(XmlEvent::StartDocument { .. }));",
          "608:         expect_event!(r, p, Ok(XmlEvent::StartElement { .. }));",
          "609:         expect_event!(r, p, Ok(XmlEvent::EndElement { .. }));",
          "610:         expect_event!(r, p, Ok(XmlEvent::EndDocument));",
          "612:         let (mut r, mut p) = test_data!(r#\"<x><!-- <!---></x>\"#);",
          "613:         expect_event!(r, p, Ok(XmlEvent::StartDocument { .. }));",
          "614:         expect_event!(r, p, Ok(XmlEvent::StartElement { .. }));",
          "615:         expect_event!(r, p, Err(_)); // ---> is forbidden in comments",
          "617:         let (mut r, mut p) = test_data!(r#\"<x><!--<text&x;> <!--></x>\"#);",
          "618:         p.config.ignore_comments = false;",
          "619:         expect_event!(r, p, Ok(XmlEvent::StartDocument { .. }));",
          "620:         expect_event!(r, p, Ok(XmlEvent::StartElement { .. }));",
          "621:         expect_event!(r, p, Ok(XmlEvent::Comment(s)) => s == \"<text&x;> <!\");",
          "622:         expect_event!(r, p, Ok(XmlEvent::EndElement { .. }));",
          "623:         expect_event!(r, p, Ok(XmlEvent::EndDocument));",
          "624:     }",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:             Token::CommentStart if self.config.coalesce_characters && self.config.ignore_comments => {",
          "49:                 self.into_state_continue(State::InsideComment)",
          "50:             }",
          "",
          "[Removed Lines]",
          "48:                 self.lexer.inside_comment();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:                     Token::CommentStart => {",
          "116:                         self.into_state(State::InsideComment, next_event)",
          "117:                     }",
          "",
          "[Removed Lines]",
          "115:                         self.lexer.inside_comment();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/xmlconf.rs||tests/xmlconf.rs": [
          "File: tests/xmlconf.rs -> tests/xmlconf.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
          "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
          "284:         \"o-p05pass1\", // various valid Name constructions",
          "286:         \"o-p16pass1\", // Valid form of Processing Instruction. Shows that whitespace character data is valid before end of processing instruction.",
          "287:         \"o-p01fail1\", // S cannot occur before the prolog",
          "288:         \"o-p01fail2\", // comments cannot occur before the prolog",
          "",
          "[Removed Lines]",
          "285:         \"o-p15pass1\", // valid comments",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "879e311accad4f5b6fd8d9cd9ed52e87fb687ded",
      "candidate_info": {
        "commit_hash": "879e311accad4f5b6fd8d9cd9ed52e87fb687ded",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/879e311accad4f5b6fd8d9cd9ed52e87fb687ded",
        "files": [
          "benches/bench.rs",
          "src/analyze.rs",
          "src/lib.rs",
          "src/macros.rs",
          "src/name.rs",
          "src/reader/config.rs",
          "src/reader/error.rs",
          "src/reader/lexer.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/outside_tag.rs",
          "src/util.rs",
          "src/writer/mod.rs",
          "tests/xmlconf.rs"
        ],
        "message": "fmt",
        "before_after_code_files": [
          "benches/bench.rs||benches/bench.rs",
          "src/analyze.rs||src/analyze.rs",
          "src/lib.rs||src/lib.rs",
          "src/macros.rs||src/macros.rs",
          "src/name.rs||src/name.rs",
          "src/reader/config.rs||src/reader/config.rs",
          "src/reader/error.rs||src/reader/error.rs",
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
          "src/util.rs||src/util.rs",
          "src/writer/mod.rs||src/writer/mod.rs",
          "tests/xmlconf.rs||tests/xmlconf.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ]
        }
      },
      "candidate_diff": {
        "benches/bench.rs||benches/bench.rs": [
          "File: benches/bench.rs -> benches/bench.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #![feature(test)]",
          "3: extern crate test;",
          "5: use test::Bencher;",
          "7: #[bench]",
          "8: fn bla(bencher: &mut Bencher) {",
          "",
          "[Removed Lines]",
          "4: use xml::EventReader;",
          "",
          "[Added Lines]",
          "5: use xml::EventReader;",
          "",
          "---------------"
        ],
        "src/analyze.rs||src/analyze.rs": [
          "File: src/analyze.rs -> src/analyze.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:                 ),",
          "47:             XmlEvent::EndDocument => println!(\"Document finished\"),",
          "48:             XmlEvent::ProcessingInstruction { .. } => processing_instructions += 1,",
          "50:             XmlEvent::Characters(s) => {",
          "51:                 character_blocks += 1;",
          "52:                 characters += s.len();",
          "",
          "[Removed Lines]",
          "49:             XmlEvent::Whitespace(_) => {}  // can't happen due to configuration",
          "",
          "[Added Lines]",
          "49:             XmlEvent::Whitespace(_) => {} // can't happen due to configuration",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: pub use crate::reader::EventReader;",
          "15: pub use crate::reader::ParserConfig;",
          "16: pub use crate::writer::EmitterConfig;",
          "17: pub use crate::writer::EventWriter;",
          "20: pub mod attribute;",
          "21: pub mod common;",
          "",
          "[Removed Lines]",
          "18: pub use crate::util::Encoding;",
          "",
          "[Added Lines]",
          "16: pub use crate::util::Encoding;",
          "",
          "---------------"
        ],
        "src/macros.rs||src/macros.rs": [
          "File: src/macros.rs -> src/macros.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         impl $target {",
          "39:             #[inline]",
          "41:                 ParserConfig2 {",
          "42:                     c: self,",
          "43:                     ..Default::default()",
          "45:             }",
          "46:         }",
          "47:     };",
          "",
          "[Removed Lines]",
          "40:             #[must_use] pub fn $field(self, value: $t) -> ParserConfig2 {",
          "44:                 }.$field(value)",
          "",
          "[Added Lines]",
          "40:             #[must_use]",
          "41:             pub fn $field(self, value: $t) -> ParserConfig2 {",
          "45:                 }",
          "46:                 .$field(value)",
          "",
          "---------------"
        ],
        "src/name.rs||src/name.rs": [
          "File: src/name.rs -> src/name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "169:         match self.0.prefix {",
          "170:             Some(prefix) => write!(f, \"{}:{}\", prefix, self.0.local_name),",
          "172:         }",
          "173:     }",
          "174: }",
          "",
          "[Removed Lines]",
          "171:             None => self.0.local_name.fmt(f)",
          "",
          "[Added Lines]",
          "171:             None => self.0.local_name.fmt(f),",
          "",
          "---------------"
        ],
        "src/reader/config.rs||src/reader/config.rs": [
          "File: src/reader/config.rs -> src/reader/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: impl ParserConfig2 {",
          "205:     #[inline]",
          "207:         Self::default()",
          "208:     }",
          "",
          "[Removed Lines]",
          "206:     #[must_use] pub fn new() -> Self {",
          "",
          "[Added Lines]",
          "206:     #[must_use]",
          "207:     pub fn new() -> Self {",
          "",
          "---------------"
        ],
        "src/reader/error.rs||src/reader/error.rs": [
          "File: src/reader/error.rs -> src/reader/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::borrow::Cow;",
          "3: use std::error;",
          "4: use std::fmt;",
          "5: use std::io;",
          "6: use std::str;",
          "",
          "[Removed Lines]",
          "1: use std::error::Error as _;",
          "",
          "[Added Lines]",
          "3: use std::error::Error as _;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: impl<'a, P, M> From<(&'a P, M)> for Error where P: Position, M: Into<Cow<'static, str>> {",
          "76:     #[cold]",
          "77:     fn from(orig: (&'a P, M)) -> Self {",
          "79:             pos: orig.0.position(),",
          "81:         }",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "78:         Error{",
          "80:             kind: ErrorKind::Syntax(orig.1.into())",
          "",
          "[Added Lines]",
          "78:         Error {",
          "80:             kind: ErrorKind::Syntax(orig.1.into()),",
          "",
          "---------------"
        ],
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:     #[test]",
          "696:     fn tricky_pi() {",
          "701:         assert_oks!(for lex and buf ;",
          "702:             Token::ProcessingInstructionStart",
          "",
          "[Removed Lines]",
          "697:         let (mut lex, mut buf) = make_lex_and_buf(",
          "698:             r#\"<?x<!-- &??><x>\"#",
          "699:         );",
          "",
          "[Added Lines]",
          "697:         let (mut lex, mut buf) = make_lex_and_buf(r#\"<?x<!-- &??><x>\"#);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:     #[test]",
          "720:     fn reparser() {",
          "725:         assert_oks!(for lex and buf ;",
          "726:             Token::ReferenceStart",
          "",
          "[Removed Lines]",
          "721:         let (mut lex, mut buf) = make_lex_and_buf(",
          "722:             r#\"&a;\"#",
          "723:         );",
          "",
          "[Added Lines]",
          "719:         let (mut lex, mut buf) = make_lex_and_buf(r#\"&a;\"#);",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::borrow::Cow;",
          "5: use std::io::prelude::*;",
          "7: use crate::attribute::OwnedAttribute;",
          "",
          "[Removed Lines]",
          "3: use std::collections::HashMap;",
          "",
          "[Added Lines]",
          "4: use std::collections::HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:             Some(Ok(XmlEvent::StartDocument {",
          "162:                 version: DEFAULT_VERSION,",
          "163:                 encoding: self.lexer.encoding().to_string(),",
          "165:             }))",
          "166:         } else {",
          "167:             None",
          "",
          "[Removed Lines]",
          "164:                 standalone: DEFAULT_STANDALONE",
          "",
          "[Added Lines]",
          "164:                 standalone: DEFAULT_STANDALONE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:         for attr in &mut attributes {",
          "556:             if let Some(ref pfx) = attr.name.prefix {",
          "557:                 let new_ns = match self.nst.get(pfx) {",
          "559:                     Some(ns) => Some(ns.into()),",
          "560:                     None => return Some(self_error!(self; \"Attribute {} prefix is unbound\", attr.name))",
          "561:                 };",
          "",
          "[Removed Lines]",
          "558:                     Some(\"\") => None,  // default namespace",
          "",
          "[Added Lines]",
          "558:                     Some(\"\") => None, // default namespace",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "586:         match self.nst.get(name.borrow().prefix_repr()) {",
          "588:             Some(ns) => name.namespace = Some(ns.into()),",
          "590:         }",
          "592:         let op_name = self.est.pop()?;",
          "",
          "[Removed Lines]",
          "587:             Some(\"\") => name.namespace = None,  // default namespace",
          "589:             None => return Some(self_error!(self; \"Element {} prefix is unbound\", name))",
          "",
          "[Added Lines]",
          "587:             Some(\"\") => name.namespace = None, // default namespace",
          "589:             None => return Some(self_error!(self; \"Element {} prefix is unbound\", name)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "604: mod tests {",
          "605:     use std::io::BufReader;",
          "607:     use crate::common::{Position, TextPosition};",
          "608:     use crate::name::OwnedName;",
          "610:     use crate::reader::parser::PullParser;",
          "611:     use crate::reader::ParserConfig;",
          "614:     fn new_parser() -> PullParser {",
          "615:         PullParser::new(ParserConfig::new())",
          "",
          "[Removed Lines]",
          "609:     use crate::attribute::OwnedAttribute;",
          "612:     use crate::reader::events::XmlEvent;",
          "",
          "[Added Lines]",
          "607:     use crate::attribute::OwnedAttribute;",
          "610:     use crate::reader::events::XmlEvent;",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
          "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::reader::lexer::Token;",
          "4: use super::{PullParser, Result, State};",
          "",
          "[Removed Lines]",
          "1: use crate::{reader::events::XmlEvent, common::is_whitespace_char};",
          "",
          "[Added Lines]",
          "2: use crate::{common::is_whitespace_char, reader::events::XmlEvent};",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs": [
          "File: src/reader/parser/inside_closing_tag_name.rs -> src/reader/parser/inside_closing_tag_name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::{namespace, common::is_whitespace_char};",
          "",
          "[Added Lines]",
          "1: use crate::{common::is_whitespace_char, namespace};",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs": [
          "File: src/reader/parser/inside_declaration.rs -> src/reader/parser/inside_declaration.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "5: use crate::util::Encoding;",
          "7: use super::{",
          "10: };",
          "12: impl PullParser {",
          "",
          "[Removed Lines]",
          "1: use crate::common::{XmlVersion, is_whitespace_char};",
          "8:     DeclarationSubstate, PullParser, QualifiedNameTarget, Result, State,",
          "9:     DEFAULT_VERSION, Encountered,",
          "",
          "[Added Lines]",
          "1: use crate::common::{is_whitespace_char, XmlVersion};",
          "8:     DeclarationSubstate, Encountered, PullParser, QualifiedNameTarget, Result, State,",
          "9:     DEFAULT_VERSION,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             DeclarationSubstate::AfterEncoding => match t {",
          "114:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncodingValue)),",
          "115:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "117:             },",
          "119:             DeclarationSubstate::InsideEncodingValue => self.read_attribute_value(t, |this, value| {",
          "",
          "[Removed Lines]",
          "116:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "116:                 _ => unexpected_token!(t),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:             DeclarationSubstate::BeforeStandaloneDecl => match t {",
          "125:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "126:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "129:             },",
          "131:             DeclarationSubstate::InsideStandaloneDecl => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "",
          "[Removed Lines]",
          "127:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "128:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "127:                 Token::Character(c) if is_whitespace_char(c) => None, // skip whitespace",
          "128:                 _ => unexpected_token!(t),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:             DeclarationSubstate::AfterStandaloneDeclValue => match t {",
          "166:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "170:         }",
          "171:     }",
          "173: }",
          "",
          "[Removed Lines]",
          "167:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "168:                 _ => unexpected_token!(t)",
          "169:             }",
          "",
          "[Added Lines]",
          "167:                 Token::Character(c) if is_whitespace_char(c) => None, // skip whitespace",
          "168:                 _ => unexpected_token!(t),",
          "169:             },",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
          "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: impl PullParser {",
          "6:     pub fn inside_doctype(&mut self, t: Token, substate: DoctypeSubstate) -> Option<Result> {",
          "7:         match substate {",
          "8:             DoctypeSubstate::Outside => match t {",
          "12:                 Token::MarkupDeclarationStart => {",
          "13:                     self.buf.clear();",
          "14:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::InsideName))",
          "",
          "[Removed Lines]",
          "1: use crate::{reader::lexer::Token, common::{is_whitespace_char, is_name_start_char, is_name_char}};",
          "3: use super::{PullParser, Result, State, DoctypeSubstate, QuoteToken};",
          "9:                 Token::TagEnd => {",
          "10:                     self.into_state_continue(State::OutsideTag)",
          "11:                 },",
          "",
          "[Added Lines]",
          "1: use crate::{",
          "2:     common::{is_name_char, is_name_start_char, is_whitespace_char},",
          "3:     reader::lexer::Token,",
          "4: };",
          "6: use super::{DoctypeSubstate, PullParser, QuoteToken, Result, State};",
          "12:                 Token::TagEnd => self.into_state_continue(State::OutsideTag),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs": [
          "File: src/reader/parser/inside_opening_tag.rs -> src/reader/parser/inside_opening_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::common::is_name_start_char;",
          "3: use crate::namespace;",
          "5: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "[Added Lines]",
          "3: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use crate::reader::lexer::Token;",
          "6: use super::{",
          "9: };",
          "11: impl PullParser {",
          "",
          "[Removed Lines]",
          "7:     ClosingTagSubstate, OpeningTagSubstate, ProcessingInstructionSubstate, PullParser, Result,",
          "8:     State, DoctypeSubstate, Encountered,",
          "",
          "[Added Lines]",
          "7:     ClosingTagSubstate, DoctypeSubstate, Encountered, OpeningTagSubstate,",
          "8:     ProcessingInstructionSubstate, PullParser, Result, State,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:                 }",
          "29:             }",
          "38:             Token::ReferenceEnd if self.depth() > 0 => { // Semi-colon in a text outside an entity",
          "39:                 self.inside_whitespace = false;",
          "",
          "[Removed Lines]",
          "31:             _ if t.contains_char_data() && self.depth() == 0 =>",
          "32:                 Some(self_error!(self; \"Unexpected characters outside the root element: {}\", t)),",
          "34:             Token::CDataEnd => {",
          "35:                 Some(self_error!(self; \"]]> in text\"))",
          "36:             },",
          "",
          "[Added Lines]",
          "31:             _ if t.contains_char_data() && self.depth() == 0 => {",
          "32:                 Some(self_error!(self; \"Unexpected characters outside the root element: {}\", t))",
          "33:             }",
          "35:             Token::CDataEnd => Some(self_error!(self; \"]]> in text\")),",
          "",
          "---------------"
        ],
        "src/util.rs||src/util.rs": [
          "File: src/util.rs -> src/util.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: #[cfg(test)]",
          "214: mod tests {",
          "217:     #[test]",
          "218:     fn test_next_char_from() {",
          "",
          "[Removed Lines]",
          "215:     use super::{CharReader, Encoding, CharReadError};",
          "",
          "[Added Lines]",
          "215:     use super::{CharReadError, CharReader, Encoding};",
          "",
          "---------------"
        ],
        "src/writer/mod.rs||src/writer/mod.rs": [
          "File: src/writer/mod.rs -> src/writer/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                 self.emitter.namespace_stack_mut().try_pop();",
          "64:                 r",
          "65:             }",
          "72:         }",
          "73:     }",
          "",
          "[Removed Lines]",
          "66:             XmlEvent::Comment(content) =>",
          "67:                 self.emitter.emit_comment(&mut self.sink, content),",
          "68:             XmlEvent::CData(content) =>",
          "69:                 self.emitter.emit_cdata(&mut self.sink, content),",
          "70:             XmlEvent::Characters(content) =>",
          "71:                 self.emitter.emit_characters(&mut self.sink, content)",
          "",
          "[Added Lines]",
          "66:             XmlEvent::Comment(content) => self.emitter.emit_comment(&mut self.sink, content),",
          "67:             XmlEvent::CData(content) => self.emitter.emit_cdata(&mut self.sink, content),",
          "68:             XmlEvent::Characters(content) => self.emitter.emit_characters(&mut self.sink, content),",
          "",
          "---------------"
        ],
        "tests/xmlconf.rs||tests/xmlconf.rs": [
          "File: tests/xmlconf.rs -> tests/xmlconf.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use std::collections::HashMap;",
          "7: use std::fs::File;",
          "8: use std::io::BufReader;",
          "9: use std::process::Command;",
          "10: use std::sync::Mutex;",
          "13: use xml::reader::XmlEvent;",
          "15: static UNZIP: Mutex<()> = Mutex::new(());",
          "",
          "[Removed Lines]",
          "3: use xml::ParserConfig;",
          "4: use std::collections::HashSet;",
          "5: use std::path::Path;",
          "12: use xml::EventReader;",
          "",
          "[Added Lines]",
          "4: use std::collections::HashSet;",
          "7: use std::path::Path;",
          "10: use xml::ParserConfig;",
          "13: use xml::EventReader;",
          "",
          "---------------"
        ]
      }
    }
  ]
}