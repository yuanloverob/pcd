{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
  "patch_info": {
    "commit_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "files": [
      "tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py"
    ],
    "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
    "before_after_code_files": [
      "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
    ]
  },
  "patch_diff": {
    "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py": [
      "File: tests/integration/ssh/test_pre_flight.py -> tests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
      "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: Test for ssh_pre_flight roster option",
      "3: \"\"\"",
      "5: import grp",
      "6: import os",
      "7: import pathlib",
      "8: import pwd",
      "9: import shutil",
      "10: import subprocess",
      "12: import pytest",
      "13: import yaml",
      "14: from saltfactories.utils import random_string",
      "16: import salt.utils.files",
      "19: def _custom_roster(roster_file, roster_data):",
      "20:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
      "21:         data = salt.utils.yaml.safe_load(fp)",
      "22:     for key, item in roster_data.items():",
      "23:         data[\"localhost\"][key] = item",
      "24:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
      "25:         yaml.safe_dump(data, fp)",
      "28: @pytest.fixture",
      "29: def _create_roster(salt_ssh_roster_file, tmp_path):",
      "30:     ret = {}",
      "31:     ret[\"roster\"] = salt_ssh_roster_file",
      "32:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
      "33:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
      "34:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
      "36:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
      "37:         data = salt.utils.yaml.safe_load(fp)",
      "38:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
      "39:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
      "40:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
      "41:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
      "42:         yaml.safe_dump(data, fp)",
      "44:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
      "45:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
      "47:     yield ret",
      "48:     if ret[\"thin_dir\"].exists():",
      "49:         shutil.rmtree(ret[\"thin_dir\"])",
      "52: @pytest.mark.slow_test",
      "53: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
      "54:     \"\"\"",
      "55:     test ssh when ssh_pre_flight is set",
      "56:     ensure the script runs successfully",
      "57:     \"\"\"",
      "58:     ret = salt_ssh_cli.run(\"test.ping\")",
      "59:     assert ret.returncode == 0",
      "61:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "64: @pytest.mark.slow_test",
      "65: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
      "66:     \"\"\"",
      "67:     test ssh when --pre-flight is passed to salt-ssh",
      "68:     to ensure the script runs successfully",
      "69:     \"\"\"",
      "70:     # make sure we previously ran a command so the thin dir exists",
      "71:     ret = salt_ssh_cli.run(\"test.ping\")",
      "72:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "74:     # Now remeove the script to ensure pre_flight doesn't run",
      "75:     # without --pre-flight",
      "76:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
      "78:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
      "79:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "81:     # Now ensure",
      "82:     ret = salt_ssh_cli.run(",
      "83:         \"test.ping\",",
      "84:         \"--pre-flight\",",
      "85:     )",
      "86:     assert ret.returncode == 0",
      "87:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "90: @pytest.mark.slow_test",
      "91: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
      "92:     \"\"\"",
      "93:     test ssh when --pre-flight is passed to salt-ssh",
      "94:     to ensure the script runs successfully passing some args",
      "95:     \"\"\"",
      "96:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
      "97:     # Create pre_flight script that accepts args",
      "98:     test_script = _create_roster[\"test_script\"]",
      "99:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
      "100:     test_script_2 = pathlib.Path(test_script + \"-test\")",
      "101:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "102:         fp.write(",
      "103:             f\"\"\"",
      "104:         touch {str(test_script)}-$1",
      "105:         touch {str(test_script)}-$2",
      "106:         \"\"\"",
      "107:         )",
      "108:     ret = salt_ssh_cli.run(\"test.ping\")",
      "109:     assert ret.returncode == 0",
      "110:     assert test_script_1.exists()",
      "111:     assert test_script_2.exists()",
      "112:     pathlib.Path(test_script_1).unlink()",
      "113:     pathlib.Path(test_script_2).unlink()",
      "115:     ret = salt_ssh_cli.run(\"test.ping\")",
      "116:     assert ret.returncode == 0",
      "117:     assert not test_script_1.exists()",
      "118:     assert not test_script_2.exists()",
      "120:     ret = salt_ssh_cli.run(",
      "121:         \"test.ping\",",
      "122:         \"--pre-flight\",",
      "123:     )",
      "124:     assert ret.returncode == 0",
      "125:     assert test_script_1.exists()",
      "126:     assert test_script_2.exists()",
      "129: @pytest.mark.slow_test",
      "130: def test_ssh_run_pre_flight_args_prevent_injection(",
      "131:     salt_ssh_cli, _create_roster, tmp_path",
      "132: ):",
      "133:     \"\"\"",
      "134:     test ssh when --pre-flight is passed to salt-ssh",
      "135:     and evil arguments are used in order to produce shell injection",
      "136:     \"\"\"",
      "137:     injected_file = tmp_path / \"injection\"",
      "138:     _custom_roster(",
      "139:         salt_ssh_cli.roster_file,",
      "140:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
      "141:     )",
      "142:     # Create pre_flight script that accepts args",
      "143:     test_script = _create_roster[\"test_script\"]",
      "144:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
      "145:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
      "146:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "147:         fp.write(",
      "148:             f\"\"\"",
      "149:         touch {str(test_script)}-$1",
      "150:         touch {str(test_script)}-$2",
      "151:         \"\"\"",
      "152:         )",
      "154:     # make sure we previously ran a command so the thin dir exists",
      "155:     ret = salt_ssh_cli.run(\"test.ping\")",
      "156:     assert ret.returncode == 0",
      "157:     assert test_script_1.exists()",
      "158:     assert test_script_2.exists()",
      "159:     test_script_1.unlink()",
      "160:     test_script_2.unlink()",
      "161:     assert not injected_file.is_file()",
      "163:     ret = salt_ssh_cli.run(",
      "164:         \"test.ping\",",
      "165:         \"--pre-flight\",",
      "166:     )",
      "167:     assert ret.returncode == 0",
      "169:     assert test_script_1.exists()",
      "170:     assert test_script_2.exists()",
      "171:     assert not pathlib.Path(",
      "172:         injected_file",
      "173:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
      "176: @pytest.mark.flaky(max_runs=4)",
      "177: @pytest.mark.slow_test",
      "178: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
      "179:     \"\"\"",
      "180:     test ssh_pre_flight when there is a failure",
      "181:     in the script.",
      "182:     \"\"\"",
      "183:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "184:         fp_.write(\"exit 2\")",
      "186:     ret = salt_ssh_cli.run(",
      "187:         \"test.ping\",",
      "188:         \"--pre-flight\",",
      "189:     )",
      "190:     assert ret.data[\"retcode\"] == 2",
      "193: @pytest.fixture",
      "194: def account():",
      "195:     username = random_string(\"test-account-\", uppercase=False)",
      "196:     with pytest.helpers.create_account(username=username) as account:",
      "197:         yield account",
      "200: @pytest.mark.slow_test",
      "201: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
      "202:     \"\"\"",
      "203:     Test to ensure user cannot create and run a script",
      "204:     with the expected pre_flight script path on target.",
      "205:     \"\"\"",
      "206:     try:",
      "207:         script = pathlib.Path.home() / \"hacked\"",
      "208:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
      "209:         tmp_preflight.write_text(f\"touch {script}\")",
      "210:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
      "211:         ret = salt_ssh_cli.run(\"test.ping\")",
      "212:         assert not script.is_file()",
      "213:         assert ret.returncode == 0",
      "214:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
      "215:     finally:",
      "216:         for _file in [script, tmp_preflight]:",
      "217:             if _file.is_file():",
      "218:                 _file.unlink()",
      "221: def demote(user_uid, user_gid):",
      "222:     def result():",
      "223:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
      "224:         os.setgroups([])",
      "225:         os.setgid(user_gid)",
      "226:         os.setuid(user_uid)",
      "228:     return result",
      "231: @pytest.mark.slow_test",
      "232: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
      "233:     \"\"\"",
      "234:     Test to ensure standard user cannot run pre flight script",
      "235:     on target when user sets wrong permissions (777) on",
      "236:     ssh_pre_flight script.",
      "237:     \"\"\"",
      "238:     try:",
      "239:         script = pathlib.Path(\"/tmp\", \"itworked\")",
      "240:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
      "241:         preflight.write_text(f\"touch {str(script)}\")",
      "242:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
      "244:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
      "245:         preflight.chmod(0o0777)",
      "246:         run_script = pathlib.Path(\"/run_script\")",
      "247:         run_script.write_text(",
      "248:             f\"\"\"",
      "249:         x=1",
      "250:         while [ $x -le 200000 ]; do",
      "251:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
      "252:             if [ ${{SCRIPT}} == 0 ]; then",
      "253:                 break",
      "254:             fi",
      "255:             x=$(( $x + 1 ))",
      "256:         done",
      "257:         \"\"\"",
      "258:         )",
      "259:         run_script.chmod(0o0777)",
      "260:         # pylint: disable=W1509",
      "261:         ret = subprocess.Popen(",
      "262:             [\"sh\", f\"{run_script}\"],",
      "263:             preexec_fn=demote(account.info.uid, account.info.gid),",
      "264:             stdout=None,",
      "265:             stderr=None,",
      "266:             stdin=None,",
      "267:             universal_newlines=True,",
      "268:         )",
      "269:         # pylint: enable=W1509",
      "270:         ret = salt_ssh_cli.run(\"test.ping\")",
      "271:         assert ret.returncode == 0",
      "273:         # Lets make sure a different user other than root",
      "274:         # Didn't run the script",
      "275:         assert os.stat(script).st_uid != account.info.uid",
      "276:         assert script.is_file()",
      "277:     finally:",
      "278:         for _file in [script, preflight, tmp_preflight, run_script]:",
      "279:             if _file.is_file():",
      "280:                 _file.unlink()",
      "283: @pytest.mark.slow_test",
      "284: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
      "285:     \"\"\"",
      "286:     test ssh_pre_flight to ensure the target pre flight script",
      "287:     has the correct perms",
      "288:     \"\"\"",
      "289:     perms_file = tmp_path / \"perms\"",
      "290:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "291:         fp_.write(",
      "292:             f\"\"\"",
      "293:         SCRIPT_NAME=$0",
      "294:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
      "295:         \"\"\"",
      "296:         )",
      "298:     ret = salt_ssh_cli.run(",
      "299:         \"test.ping\",",
      "300:         \"--pre-flight\",",
      "301:     )",
      "302:     assert ret.returncode == 0",
      "303:     with salt.utils.files.fopen(perms_file) as fp:",
      "304:         data = fp.read()",
      "305:     assert data.split()[0] == \"600\"",
      "306:     uid = os.getuid()",
      "307:     gid = os.getgid()",
      "308:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
      "309:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90135124c0323d2254d83f16687403f317e5920a",
      "candidate_info": {
        "commit_hash": "90135124c0323d2254d83f16687403f317e5920a",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/90135124c0323d2254d83f16687403f317e5920a",
        "files": [
          "pkg/tests/support/helpers.py"
        ],
        "message": "Fix urls for macos/windows non-classic pre-relenv packages",
        "before_after_code_files": [
          "pkg/tests/support/helpers.py||pkg/tests/support/helpers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/tests/support/helpers.py||pkg/tests/support/helpers.py": [
          "File: pkg/tests/support/helpers.py -> pkg/tests/support/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "756:             if not self.classic:",
          "757:                 if not relenv:",
          "760:                 else:",
          "761:                     if self.file_ext == \"msi\":",
          "762:                         win_pkg = (",
          "",
          "[Removed Lines]",
          "758:                     win_pkg = f\"salt-{self.prev_version}-windows-amd64.{self.file_ext}\"",
          "759:                     win_pkg_url = f\"https://repo.saltproject.io/salt/py3/windows/{self.prev_version}/{win_pkg}\"",
          "",
          "[Added Lines]",
          "758:                     win_pkg = f\"salt-{self.prev_version}-{pkg_version}-windows-amd64.{self.file_ext}\"",
          "759:                     win_pkg_url = f\"https://repo.saltproject.io/salt/py3/windows/{major_ver}/{win_pkg}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:                 mac_pkg_url = f\"https://repo.saltproject.io/osx/{mac_pkg}\"",
          "804:             else:",
          "805:                 if not relenv:",
          "808:                 else:",
          "809:                     mac_pkg = f\"salt-{self.prev_version}-py3-x86_64.pkg\"",
          "810:                     mac_pkg_url = f\"https://repo.saltproject.io/salt/py3/macos/{major_ver}/{mac_pkg}\"",
          "",
          "[Removed Lines]",
          "806:                     mac_pkg = f\"salt-{self.prev_version}-macos-x86_64.pkg\"",
          "807:                     mac_pkg_url = f\"https://repo.saltproject.io/salt/py3/macos/{self.prev_version}/{mac_pkg}\"",
          "",
          "[Added Lines]",
          "806:                     mac_pkg = f\"salt-{self.prev_version}-{pkg_version}-macos-x86_64.pkg\"",
          "807:                     mac_pkg_url = f\"https://repo.saltproject.io/salt/py3/macos/{major_ver}/{mac_pkg}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d983e40188ed2cc577c7d4de1e193d9abe8fa5c",
      "candidate_info": {
        "commit_hash": "1d983e40188ed2cc577c7d4de1e193d9abe8fa5c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/1d983e40188ed2cc577c7d4de1e193d9abe8fa5c",
        "files": [
          "CHANGELOG.md",
          "changelog/65267.security",
          "changelog/65334.security",
          "changelog/65383.security",
          "changelog/cve-2023-34049.security",
          "doc/man/salt-api.1",
          "doc/man/salt-call.1",
          "doc/man/salt-cloud.1",
          "doc/man/salt-cp.1",
          "doc/man/salt-key.1",
          "doc/man/salt-master.1",
          "doc/man/salt-minion.1",
          "doc/man/salt-proxy.1",
          "doc/man/salt-run.1",
          "doc/man/salt-ssh.1",
          "doc/man/salt-syndic.1",
          "doc/man/salt.1",
          "doc/man/salt.7",
          "doc/man/spm.1",
          "doc/topics/releases/3005.4.rst"
        ],
        "message": "Prepare release notes, changelog, and man pages for 3005.4",
        "before_after_code_files": [
          "changelog/65267.security||changelog/65267.security",
          "changelog/65334.security||changelog/65334.security",
          "changelog/65383.security||changelog/65383.security",
          "changelog/cve-2023-34049.security||changelog/cve-2023-34049.security"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog/65267.security||changelog/65267.security": [
          "File: changelog/65267.security -> changelog/65267.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "changelog/65334.security||changelog/65334.security": [
          "File: changelog/65334.security -> changelog/65334.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "changelog/65383.security||changelog/65383.security": [
          "File: changelog/65383.security -> changelog/65383.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "changelog/cve-2023-34049.security||changelog/cve-2023-34049.security": [
          "File: changelog/cve-2023-34049.security -> changelog/cve-2023-34049.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed7bad4f8b9439ad2fbb86a22d120fb2fa592ce",
      "candidate_info": {
        "commit_hash": "8ed7bad4f8b9439ad2fbb86a22d120fb2fa592ce",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/8ed7bad4f8b9439ad2fbb86a22d120fb2fa592ce",
        "files": [
          "changelog/cve-2023-34049.security",
          "salt/client/ssh/__init__.py",
          "tests/pytests/unit/client/ssh/test_single.py",
          "tests/pytests/unit/client/ssh/test_ssh.py"
        ],
        "message": "Fix CVE-2023-34049",
        "before_after_code_files": [
          "changelog/cve-2023-34049.security||changelog/cve-2023-34049.security",
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
          "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog/cve-2023-34049.security||changelog/cve-2023-34049.security": [
          "File: changelog/cve-2023-34049.security -> changelog/cve-2023-34049.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Fix CVE-2023-34049 by ensuring we do not use a predictable name for the script and correctly check returncode of scp command.",
          "2: This only impacts salt-ssh users using the pre-flight option.",
          "",
          "---------------"
        ],
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import logging",
          "12: import multiprocessing",
          "13: import os",
          "14: import queue",
          "15: import re",
          "16: import shlex",
          "17: import subprocess",
          "18: import sys",
          "19: import tarfile",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import pathlib",
          "18: import shutil",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
          "468:                 self._key_deploy_run(host, target, False)",
          "469:             return ret",
          "471:             target = self.targets[host]",
          "472:             # permission denied, attempt to auto deploy ssh key",
          "473:             print(",
          "",
          "[Removed Lines]",
          "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
          "",
          "[Added Lines]",
          "472:         stderr = ret[host].get(\"stderr\", \"\")",
          "473:         # -failed to upload file- is detecting scp errors",
          "474:         # Errors to ignore when Permission denied is in the stderr. For example",
          "475:         # scp can get a permission denied on the target host, but they where",
          "476:         # able to accurate authenticate against the box",
          "477:         ignore_err = [\"failed to upload file\"]",
          "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
          "479:         if \"Permission denied\" in stderr and not check_err:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1007:         \"\"\"",
          "1008:         Run our pre_flight script before running any ssh commands",
          "1009:         \"\"\"",
          "1016:     def check_thin_dir(self):",
          "1017:         \"\"\"",
          "",
          "[Removed Lines]",
          "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
          "1012:         self.shell.send(self.ssh_pre_flight, script)",
          "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
          "",
          "[Added Lines]",
          "1019:         with tempfile.NamedTemporaryFile() as temp:",
          "1020:             # ensure we use copyfile to not copy the file attributes",
          "1021:             # we want to ensure we use the perms set by the secure",
          "1022:             # NamedTemporaryFile",
          "1023:             try:",
          "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
          "1025:             except OSError as err:",
          "1026:                 return (",
          "1027:                     \"\",",
          "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
          "1029:                     1,",
          "1030:                 )",
          "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
          "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
          "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
          "1034:             if retcode != 0:",
          "1035:                 # We could not copy the script to the target",
          "1036:                 log.error(",
          "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
          "1038:                 )",
          "1039:                 return stdout, stderr, retcode",
          "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
          "1042:             return self.execute_script(",
          "1043:                 target_script, script_args=self.ssh_pre_flight_args",
          "1044:             )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1381:             return self.shell.exec_cmd(cmd_str)",
          "1383:         # Write the shim to a temporary file in the default temp directory",
          "1387:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
          "1389:         # Copy shim to target system, under $HOME/.<randomized name>",
          "1393:         if self.winrm:",
          "1394:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
          "1397:         # Remove our shim file",
          "1398:         try:",
          "",
          "[Removed Lines]",
          "1384:         with tempfile.NamedTemporaryFile(",
          "1385:             mode=\"w+b\", prefix=\"shim_\", delete=False",
          "1386:         ) as shim_tmp_file:",
          "1390:         target_shim_file = \".{}.{}\".format(",
          "1391:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
          "1392:         )",
          "1395:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
          "",
          "[Added Lines]",
          "1414:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
          "1418:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
          "1422:         stdout, stderr, retcode = self.shell.send(",
          "1423:             shim_tmp_file.name, target_shim_file, makedirs=True",
          "1424:         )",
          "1425:         if retcode != 0:",
          "1426:             log.error(f\"Could not copy the shim script to target\")",
          "1427:             return stdout, stderr, retcode",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: import re",
          "3: from textwrap import dedent",
          "5: import pytest",
          "6: import salt.client.ssh.client",
          "7: import salt.config",
          "8: import salt.roster",
          "9: import salt.utils.files",
          "10: import salt.utils.path",
          "11: import salt.utils.platform",
          "12: import salt.utils.thin",
          "13: import salt.utils.yaml",
          "14: from salt.client import ssh",
          "15: from tests.support.mock import MagicMock, call, patch",
          "17: log = logging.getLogger(__name__)",
          "20: @pytest.fixture",
          "21: def opts(tmp_path):",
          "22:     return {",
          "23:         \"argv\": [",
          "24:             \"ssh.set_auth_key\",",
          "25:             \"root\",",
          "26:             \"hobn+amNAXSBTiOXEqlBjGB...rsa root@master\",",
          "27:         ],",
          "28:         \"__role\": \"master\",",
          "29:         \"cachedir\": str(tmp_path),",
          "30:         \"extension_modules\": str(tmp_path / \"extmods\"),",
          "31:     }",
          "34: @pytest.fixture",
          "35: def target():",
          "36:     return {",
          "37:         \"passwd\": \"abc123\",",
          "38:         \"ssh_options\": None,",
          "39:         \"sudo\": False,",
          "40:         \"identities_only\": False,",
          "41:         \"host\": \"login1\",",
          "42:         \"user\": \"root\",",
          "43:         \"timeout\": 65,",
          "44:         \"remote_port_forwards\": None,",
          "45:         \"sudo_user\": \"\",",
          "46:         \"port\": \"22\",",
          "47:         \"priv\": \"/etc/salt/pki/master/ssh/salt-ssh.rsa\",",
          "48:     }",
          "51: def test_single_opts(opts, target):",
          "52:     \"\"\"Sanity check for ssh.Single options\"\"\"",
          "54:     single = ssh.Single(",
          "55:         opts,",
          "56:         opts[\"argv\"],",
          "57:         \"localhost\",",
          "58:         mods={},",
          "59:         fsclient=None,",
          "60:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "61:         mine=False,",
          "63:     )",
          "65:     assert single.shell._ssh_opts() == \"\"",
          "66:     expected_cmd = (",
          "67:         \"ssh login1 \"",
          "68:         \"-o KbdInteractiveAuthentication=no -o \"",
          "69:         \"PasswordAuthentication=yes -o ConnectTimeout=65 -o Port=22 \"",
          "70:         \"-o IdentityFile=/etc/salt/pki/master/ssh/salt-ssh.rsa \"",
          "71:         \"-o User=root  date +%s\"",
          "72:     )",
          "73:     assert single.shell._cmd_str(\"date +%s\") == expected_cmd",
          "76: def test_run_with_pre_flight(opts, target, tmp_path):",
          "77:     \"\"\"",
          "78:     test Single.run() when ssh_pre_flight is set",
          "79:     and script successfully runs",
          "80:     \"\"\"",
          "81:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "82:     single = ssh.Single(",
          "83:         opts,",
          "84:         opts[\"argv\"],",
          "85:         \"localhost\",",
          "86:         mods={},",
          "87:         fsclient=None,",
          "88:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "89:         mine=False,",
          "91:     )",
          "93:     cmd_ret = (\"Success\", \"\", 0)",
          "94:     mock_flight = MagicMock(return_value=cmd_ret)",
          "95:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "96:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "97:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "98:     patch_exec_cmd = patch(",
          "99:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "100:     )",
          "101:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "103:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "104:         ret = single.run()",
          "105:         mock_cmd.assert_called()",
          "106:         mock_flight.assert_called()",
          "107:         assert ret == cmd_ret",
          "110: def test_run_with_pre_flight_with_args(opts, target, tmp_path):",
          "111:     \"\"\"",
          "112:     test Single.run() when ssh_pre_flight is set",
          "113:     and script successfully runs",
          "114:     \"\"\"",
          "115:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "116:     target[\"ssh_pre_flight_args\"] = \"foobar\"",
          "117:     single = ssh.Single(",
          "118:         opts,",
          "119:         opts[\"argv\"],",
          "120:         \"localhost\",",
          "121:         mods={},",
          "122:         fsclient=None,",
          "123:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "124:         mine=False,",
          "126:     )",
          "128:     cmd_ret = (\"Success\", \"foobar\", 0)",
          "129:     mock_flight = MagicMock(return_value=cmd_ret)",
          "130:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "131:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "132:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "133:     patch_exec_cmd = patch(",
          "134:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "135:     )",
          "136:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "138:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "139:         ret = single.run()",
          "140:         mock_cmd.assert_called()",
          "141:         mock_flight.assert_called()",
          "142:         assert ret == cmd_ret",
          "145: def test_run_with_pre_flight_stderr(opts, target, tmp_path):",
          "146:     \"\"\"",
          "147:     test Single.run() when ssh_pre_flight is set",
          "148:     and script errors when run",
          "149:     \"\"\"",
          "150:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "151:     single = ssh.Single(",
          "152:         opts,",
          "153:         opts[\"argv\"],",
          "154:         \"localhost\",",
          "155:         mods={},",
          "156:         fsclient=None,",
          "157:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "158:         mine=False,",
          "160:     )",
          "162:     cmd_ret = (\"\", \"Error running script\", 1)",
          "163:     mock_flight = MagicMock(return_value=cmd_ret)",
          "164:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "165:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "166:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "167:     patch_exec_cmd = patch(",
          "168:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "169:     )",
          "170:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "172:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "173:         ret = single.run()",
          "174:         mock_cmd.assert_not_called()",
          "175:         mock_flight.assert_called()",
          "176:         assert ret == cmd_ret",
          "179: def test_run_with_pre_flight_script_doesnot_exist(opts, target, tmp_path):",
          "180:     \"\"\"",
          "181:     test Single.run() when ssh_pre_flight is set",
          "182:     and the script does not exist",
          "183:     \"\"\"",
          "184:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "185:     single = ssh.Single(",
          "186:         opts,",
          "187:         opts[\"argv\"],",
          "188:         \"localhost\",",
          "189:         mods={},",
          "190:         fsclient=None,",
          "191:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "192:         mine=False,",
          "194:     )",
          "196:     cmd_ret = (\"Success\", \"\", 0)",
          "197:     mock_flight = MagicMock(return_value=cmd_ret)",
          "198:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "199:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "200:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "201:     patch_exec_cmd = patch(",
          "202:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "203:     )",
          "204:     patch_os = patch(\"os.path.exists\", side_effect=[False])",
          "206:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "207:         ret = single.run()",
          "208:         mock_cmd.assert_called()",
          "209:         mock_flight.assert_not_called()",
          "210:         assert ret == cmd_ret",
          "213: def test_run_with_pre_flight_thin_dir_exists(opts, target, tmp_path):",
          "214:     \"\"\"",
          "215:     test Single.run() when ssh_pre_flight is set",
          "216:     and thin_dir already exists",
          "217:     \"\"\"",
          "218:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "219:     single = ssh.Single(",
          "220:         opts,",
          "221:         opts[\"argv\"],",
          "222:         \"localhost\",",
          "223:         mods={},",
          "224:         fsclient=None,",
          "225:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "226:         mine=False,",
          "228:     )",
          "230:     cmd_ret = (\"\", \"\", 0)",
          "231:     mock_flight = MagicMock(return_value=cmd_ret)",
          "232:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "233:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "234:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "235:     patch_cmd_block = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "236:     patch_os = patch(\"os.path.exists\", return_value=True)",
          "238:     with patch_os, patch_flight, patch_cmd, patch_cmd_block:",
          "239:         ret = single.run()",
          "240:         mock_cmd.assert_called()",
          "241:         mock_flight.assert_not_called()",
          "242:         assert ret == cmd_ret",
          "245: def test_run_ssh_pre_flight(opts, target, tmp_path):",
          "246:     \"\"\"",
          "247:     test Single.run_ssh_pre_flight function",
          "248:     \"\"\"",
          "249:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "250:     single = ssh.Single(",
          "251:         opts,",
          "252:         opts[\"argv\"],",
          "253:         \"localhost\",",
          "254:         mods={},",
          "255:         fsclient=None,",
          "256:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "257:         mine=False,",
          "259:     )",
          "261:     cmd_ret = (\"Success\", \"\", 0)",
          "262:     mock_flight = MagicMock(return_value=cmd_ret)",
          "263:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "264:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "265:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "266:     patch_exec_cmd = patch(",
          "267:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "268:     )",
          "269:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "271:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "272:         ret = single.run()",
          "273:         mock_cmd.assert_called()",
          "274:         mock_flight.assert_called()",
          "275:         assert ret == cmd_ret",
          "278: def test_execute_script(opts, target, tmp_path):",
          "279:     \"\"\"",
          "280:     test Single.execute_script()",
          "281:     \"\"\"",
          "282:     single = ssh.Single(",
          "283:         opts,",
          "284:         opts[\"argv\"],",
          "285:         \"localhost\",",
          "286:         mods={},",
          "287:         fsclient=None,",
          "288:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "289:         mine=False,",
          "290:         winrm=False,",
          "292:     )",
          "294:     exp_ret = (\"Success\", \"\", 0)",
          "295:     mock_cmd = MagicMock(return_value=exp_ret)",
          "296:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "297:     script = str(tmp_path / \"script.sh\")",
          "299:     with patch_cmd:",
          "300:         ret = single.execute_script(script=script)",
          "301:         assert ret == exp_ret",
          "302:         assert mock_cmd.call_count == 2",
          "303:         assert [",
          "304:             call(\"/bin/sh '{}'\".format(script)),",
          "305:             call(\"rm '{}'\".format(script)),",
          "306:         ] == mock_cmd.call_args_list",
          "309: def test_shim_cmd(opts, target, tmp_path):",
          "310:     \"\"\"",
          "311:     test Single.shim_cmd()",
          "312:     \"\"\"",
          "313:     single = ssh.Single(",
          "314:         opts,",
          "315:         opts[\"argv\"],",
          "316:         \"localhost\",",
          "317:         mods={},",
          "318:         fsclient=None,",
          "319:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "320:         mine=False,",
          "321:         winrm=False,",
          "322:         tty=True,",
          "324:     )",
          "326:     exp_ret = (\"Success\", \"\", 0)",
          "327:     mock_cmd = MagicMock(return_value=exp_ret)",
          "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
          "330:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "331:     tmp_file = tmp_path / \"tmp_file\"",
          "332:     mock_tmp = MagicMock()",
          "333:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "334:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "336:     with patch_cmd, patch_tmp, patch_send:",
          "337:         ret = single.shim_cmd(cmd_str=\"echo test\")",
          "338:         assert ret == exp_ret",
          "339:         assert [",
          "340:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
          "341:             call(f\"rm '.{tmp_file.name}'\"),",
          "342:         ] == mock_cmd.call_args_list",
          "345: def test_shim_cmd_copy_fails(opts, target, caplog):",
          "346:     \"\"\"",
          "347:     test Single.shim_cmd() when copying the file fails",
          "348:     \"\"\"",
          "349:     single = ssh.Single(",
          "350:         opts,",
          "351:         opts[\"argv\"],",
          "352:         \"localhost\",",
          "353:         mods={},",
          "354:         fsclient=None,",
          "355:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "356:         mine=False,",
          "357:         winrm=False,",
          "358:         tty=True,",
          "360:     )",
          "362:     ret_cmd = (\"Success\", \"\", 0)",
          "363:     mock_cmd = MagicMock(return_value=ret_cmd)",
          "364:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "365:     ret_send = (\"\", \"General error in file copy\", 1)",
          "366:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
          "367:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "369:     with patch_cmd, patch_rand, patch_send:",
          "370:         ret = single.shim_cmd(cmd_str=\"echo test\")",
          "371:         assert ret == ret_send",
          "372:         assert \"Could not copy the shim script to target\" in caplog.text",
          "373:         mock_cmd.assert_not_called()",
          "376: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
          "377:     \"\"\"",
          "378:     test Single.run_ssh_pre_flight when you",
          "379:     cannot connect to the target",
          "380:     \"\"\"",
          "381:     pre_flight = tmp_path / \"script.sh\"",
          "382:     pre_flight.write_text(\"\")",
          "383:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "384:     single = ssh.Single(",
          "385:         opts,",
          "386:         opts[\"argv\"],",
          "387:         \"localhost\",",
          "388:         mods={},",
          "389:         fsclient=None,",
          "390:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "391:         mine=False,",
          "392:         winrm=False,",
          "393:         tty=True,",
          "395:     )",
          "396:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
          "397:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "398:     tmp_file = tmp_path / \"tmp_file\"",
          "399:     mock_tmp = MagicMock()",
          "400:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "401:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "402:     ret_send = (",
          "403:         \"\",",
          "404:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
          "405:         255,",
          "406:     )",
          "407:     send_mock = MagicMock(return_value=ret_send)",
          "408:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "410:     with caplog.at_level(logging.TRACE):",
          "411:         with patch_send, patch_exec_cmd, patch_tmp:",
          "412:             ret = single.run_ssh_pre_flight()",
          "413:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "414:     assert (",
          "415:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "416:         in caplog.text",
          "417:     )",
          "418:     assert ret == ret_send",
          "419:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "420:     target_script = send_mock.call_args_list[0][0][1]",
          "421:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "422:     mock_exec_cmd.assert_not_called()",
          "425: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
          "426:     \"\"\"",
          "427:     test Single.run_ssh_pre_flight when you",
          "428:     cannot copy script to the target due to",
          "429:     a permission denied error",
          "430:     \"\"\"",
          "431:     pre_flight = tmp_path / \"script.sh\"",
          "432:     pre_flight.write_text(\"\")",
          "433:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "434:     single = ssh.Single(",
          "435:         opts,",
          "436:         opts[\"argv\"],",
          "437:         \"localhost\",",
          "438:         mods={},",
          "439:         fsclient=None,",
          "440:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "441:         mine=False,",
          "442:         winrm=False,",
          "443:         tty=True,",
          "445:     )",
          "446:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
          "447:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "448:     tmp_file = tmp_path / \"tmp_file\"",
          "449:     mock_tmp = MagicMock()",
          "450:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "451:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "452:     ret_send = (",
          "453:         \"\",",
          "454:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
          "455:         255,",
          "456:     )",
          "457:     send_mock = MagicMock(return_value=ret_send)",
          "458:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "460:     with patch_send, patch_exec_cmd, patch_tmp:",
          "461:         ret = single.run_ssh_pre_flight()",
          "462:     assert ret == ret_send",
          "463:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "464:     target_script = send_mock.call_args_list[0][0][1]",
          "465:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "466:     mock_exec_cmd.assert_not_called()",
          "469: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
          "470:     \"\"\"",
          "471:     test Single.run_ssh_pre_flight when you",
          "472:     can connect to the target",
          "473:     \"\"\"",
          "474:     pre_flight = tmp_path / \"script.sh\"",
          "475:     pre_flight.write_text(\"\")",
          "476:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "477:     single = ssh.Single(",
          "478:         opts,",
          "479:         opts[\"argv\"],",
          "480:         \"localhost\",",
          "481:         mods={},",
          "482:         fsclient=None,",
          "483:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "484:         mine=False,",
          "485:         winrm=False,",
          "486:         tty=True,",
          "488:     )",
          "489:     ret_exec_cmd = (\"\", \"\", 1)",
          "490:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
          "491:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "492:     tmp_file = tmp_path / \"tmp_file\"",
          "493:     mock_tmp = MagicMock()",
          "494:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "495:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "496:     ret_send = (",
          "497:         \"\",",
          "498:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
          "499:         0,",
          "500:     )",
          "501:     send_mock = MagicMock(return_value=ret_send)",
          "502:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "504:     with caplog.at_level(logging.TRACE):",
          "505:         with patch_send, patch_exec_cmd, patch_tmp:",
          "506:             ret = single.run_ssh_pre_flight()",
          "508:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "509:     assert ret == ret_exec_cmd",
          "510:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "511:     target_script = send_mock.call_args_list[0][0][1]",
          "512:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "513:     mock_exec_cmd.assert_called()",
          "516: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
          "517:     \"\"\"",
          "518:     test Single.run_ssh_pre_flight when cannot",
          "519:     copyfile with shutil",
          "520:     \"\"\"",
          "521:     pre_flight = tmp_path / \"script.sh\"",
          "522:     pre_flight.write_text(\"\")",
          "523:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "524:     single = ssh.Single(",
          "525:         opts,",
          "526:         opts[\"argv\"],",
          "527:         \"localhost\",",
          "528:         mods={},",
          "529:         fsclient=None,",
          "530:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "531:         mine=False,",
          "532:         winrm=False,",
          "533:         tty=True,",
          "535:     )",
          "536:     ret_exec_cmd = (\"\", \"\", 1)",
          "537:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
          "538:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "539:     tmp_file = tmp_path / \"tmp_file\"",
          "540:     mock_tmp = MagicMock()",
          "541:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "542:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "543:     send_mock = MagicMock()",
          "544:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
          "545:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
          "546:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "548:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
          "549:         ret = single.run_ssh_pre_flight()",
          "551:     assert ret == (",
          "552:         \"\",",
          "553:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "554:         1,",
          "555:     )",
          "556:     mock_exec_cmd.assert_not_called()",
          "557:     send_mock.assert_not_called()",
          "560: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "561: @pytest.mark.slow_test",
          "562: def test_cmd_run_set_path(opts, target):",
          "563:     \"\"\"",
          "564:     test when set_path is set",
          "565:     \"\"\"",
          "566:     target[\"set_path\"] = \"$PATH:/tmp/path/\"",
          "567:     single = ssh.Single(",
          "568:         opts,",
          "569:         opts[\"argv\"],",
          "570:         \"localhost\",",
          "571:         mods={},",
          "572:         fsclient=None,",
          "573:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "574:         mine=False,",
          "576:     )",
          "578:     ret = single._cmd_str()",
          "579:     assert re.search(\"\\\\\" + target[\"set_path\"], ret)",
          "582: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "583: @pytest.mark.slow_test",
          "584: def test_cmd_run_not_set_path(opts, target):",
          "585:     \"\"\"",
          "586:     test when set_path is not set",
          "587:     \"\"\"",
          "588:     single = ssh.Single(",
          "589:         opts,",
          "590:         opts[\"argv\"],",
          "591:         \"localhost\",",
          "592:         mods={},",
          "593:         fsclient=None,",
          "594:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "595:         mine=False,",
          "597:     )",
          "599:     ret = single._cmd_str()",
          "600:     assert re.search('SET_PATH=\"\"', ret)",
          "603: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "604: @pytest.mark.slow_test",
          "605: def test_cmd_block_python_version_error(opts, target):",
          "606:     single = ssh.Single(",
          "607:         opts,",
          "608:         opts[\"argv\"],",
          "609:         \"localhost\",",
          "610:         mods={},",
          "611:         fsclient=None,",
          "612:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "613:         mine=False,",
          "614:         winrm=False,",
          "616:     )",
          "617:     mock_shim = MagicMock(",
          "618:         return_value=((\"\", \"ERROR: Unable to locate appropriate python command\\n\", 10))",
          "619:     )",
          "620:     patch_shim = patch(\"salt.client.ssh.Single.shim_cmd\", mock_shim)",
          "621:     with patch_shim:",
          "622:         ret = single.cmd_block()",
          "623:         assert \"ERROR: Python version error. Recommendation(s) follow:\" in ret[0]",
          "626: def _check_skip(grains):",
          "627:     if grains[\"os\"] == \"MacOS\":",
          "628:         return True",
          "629:     return False",
          "632: @pytest.mark.skip_initial_gh_actions_failure(skip=_check_skip)",
          "633: @pytest.mark.skip_on_windows(reason=\"pre_flight_args is not implemented for Windows\")",
          "634: @pytest.mark.parametrize(",
          "635:     \"test_opts\",",
          "636:     [",
          "637:         (None, \"\"),",
          "638:         (\"one\", \" one\"),",
          "639:         (\"one two\", \" one two\"),",
          "640:         (\"| touch /tmp/test\", \" '|' touch /tmp/test\"),",
          "641:         (\"; touch /tmp/test\", \" ';' touch /tmp/test\"),",
          "642:         ([\"one\"], \" one\"),",
          "643:         ([\"one\", \"two\"], \" one two\"),",
          "644:         ([\"one\", \"two\", \"| touch /tmp/test\"], \" one two '| touch /tmp/test'\"),",
          "645:         ([\"one\", \"two\", \"; touch /tmp/test\"], \" one two '; touch /tmp/test'\"),",
          "646:     ],",
          "647: )",
          "648: def test_run_with_pre_flight_args(opts, target, test_opts, tmp_path):",
          "649:     \"\"\"",
          "650:     test Single.run() when ssh_pre_flight is set",
          "651:     and script successfully runs",
          "652:     \"\"\"",
          "653:     opts[\"ssh_run_pre_flight\"] = True",
          "654:     pre_flight_script = tmp_path / \"script.sh\"",
          "655:     pre_flight_script.write_text(\"\")",
          "656:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
          "658:     if test_opts[0] is not None:",
          "659:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
          "660:     expected_args = test_opts[1]",
          "662:     single = ssh.Single(",
          "663:         opts,",
          "664:         opts[\"argv\"],",
          "665:         \"localhost\",",
          "666:         mods={},",
          "667:         fsclient=None,",
          "668:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "669:         mine=False,",
          "671:     )",
          "673:     cmd_ret = (\"Success\", \"\", 0)",
          "674:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "675:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
          "676:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "677:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "678:     patch_shell_send = patch(",
          "679:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
          "680:     )",
          "681:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "683:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
          "684:         single.run()",
          "685:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
          "686:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
          "689: @pytest.mark.slow_test",
          "690: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "691: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "692: def test_ssh_single__cmd_str(opts):",
          "693:     argv = []",
          "694:     id_ = \"minion\"",
          "695:     host = \"minion\"",
          "697:     single = ssh.Single(opts, argv, id_, host, sudo=False)",
          "698:     cmd = single._cmd_str()",
          "699:     expected = dedent(",
          "700:         \"\"\"",
          "701:         SUDO=\"\"",
          "702:         if [ -n \"\" ]",
          "703:         then SUDO=\" \"",
          "704:         fi",
          "705:         SUDO_USER=\"\"",
          "706:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "707:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "708:         fi",
          "709:         \"\"\"",
          "710:     )",
          "712:     assert expected in cmd",
          "715: @pytest.mark.slow_test",
          "716: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "717: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "718: def test_ssh_single__cmd_str_sudo(opts):",
          "719:     argv = []",
          "720:     id_ = \"minion\"",
          "721:     host = \"minion\"",
          "723:     single = ssh.Single(opts, argv, id_, host, sudo=True)",
          "724:     cmd = single._cmd_str()",
          "725:     expected = dedent(",
          "726:         \"\"\"",
          "727:         SUDO=\"\"",
          "728:         if [ -n \"sudo\" ]",
          "729:         then SUDO=\"sudo \"",
          "730:         fi",
          "731:         SUDO_USER=\"\"",
          "732:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "733:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "734:         fi",
          "735:         \"\"\"",
          "736:     )",
          "738:     assert expected in cmd",
          "741: @pytest.mark.slow_test",
          "742: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "743: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "744: def test_ssh_single__cmd_str_sudo_user(opts):",
          "745:     argv = []",
          "746:     id_ = \"minion\"",
          "747:     host = \"minion\"",
          "748:     user = \"wayne\"",
          "750:     single = ssh.Single(opts, argv, id_, host, sudo=True, sudo_user=user)",
          "751:     cmd = single._cmd_str()",
          "752:     expected = dedent(",
          "753:         \"\"\"",
          "754:         SUDO=\"\"",
          "755:         if [ -n \"sudo\" ]",
          "756:         then SUDO=\"sudo \"",
          "757:         fi",
          "758:         SUDO_USER=\"wayne\"",
          "759:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "760:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "761:         fi",
          "762:         \"\"\"",
          "763:     )",
          "765:     assert expected in cmd",
          "768: @pytest.mark.slow_test",
          "769: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "770: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "771: def test_ssh_single__cmd_str_sudo_passwd(opts):",
          "772:     argv = []",
          "773:     id_ = \"minion\"",
          "774:     host = \"minion\"",
          "775:     passwd = \"salty\"",
          "777:     single = ssh.Single(opts, argv, id_, host, sudo=True, passwd=passwd)",
          "778:     cmd = single._cmd_str()",
          "779:     expected = dedent(",
          "780:         \"\"\"",
          "781:         SUDO=\"\"",
          "782:         if [ -n \"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:'\" ]",
          "783:         then SUDO=\"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:' \"",
          "784:         fi",
          "785:         SUDO_USER=\"\"",
          "786:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "787:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "788:         fi",
          "789:         \"\"\"",
          "790:     )",
          "792:     assert expected in cmd",
          "795: @pytest.mark.slow_test",
          "796: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "797: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "798: def test_ssh_single__cmd_str_sudo_passwd_user(opts):",
          "799:     argv = []",
          "800:     id_ = \"minion\"",
          "801:     host = \"minion\"",
          "802:     user = \"wayne\"",
          "803:     passwd = \"salty\"",
          "805:     single = ssh.Single(opts, argv, id_, host, sudo=True, passwd=passwd, sudo_user=user)",
          "806:     cmd = single._cmd_str()",
          "807:     expected = dedent(",
          "808:         \"\"\"",
          "809:         SUDO=\"\"",
          "810:         if [ -n \"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:'\" ]",
          "811:         then SUDO=\"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:' \"",
          "812:         fi",
          "813:         SUDO_USER=\"wayne\"",
          "814:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "815:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "816:         fi",
          "817:         \"\"\"",
          "818:     )",
          "820:     assert expected in cmd",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
          "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         assert mock_exec_cmd.mock_calls[0].args[",
          "195:             0",
          "196:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: def test_expand_target_dns(opts, roster):",
          "200:     \"\"\"",
          "201:     test expand_target when target is root@<dns>",
          "202:     \"\"\"",
          "203:     host = \"localhost\"",
          "204:     user = \"test-user@\"",
          "205:     opts[\"tgt\"] = user + host",
          "207:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "208:         client = ssh.SSH(opts)",
          "209:     assert opts[\"tgt\"] == user + host",
          "210:     with patch(",
          "211:         \"salt.roster.get_roster_file\", MagicMock(return_value=\"/etc/salt/roster\")",
          "212:     ), patch(",
          "213:         \"salt.client.ssh.compile_template\",",
          "214:         MagicMock(return_value=salt.utils.yaml.safe_load(roster)),",
          "215:     ):",
          "216:         client._expand_target()",
          "217:     assert opts[\"tgt\"] == host",
          "220: def test_expand_target_no_user(opts, roster):",
          "221:     \"\"\"",
          "222:     test expand_target when no user defined",
          "223:     \"\"\"",
          "224:     host = \"127.0.0.1\"",
          "225:     opts[\"tgt\"] = host",
          "227:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "228:         client = ssh.SSH(opts)",
          "229:     assert opts[\"tgt\"] == host",
          "231:     with patch(",
          "232:         \"salt.roster.get_roster_file\", MagicMock(return_value=\"/etc/salt/roster\")",
          "233:     ), patch(",
          "234:         \"salt.client.ssh.compile_template\",",
          "235:         MagicMock(return_value=salt.utils.yaml.safe_load(roster)),",
          "236:     ):",
          "237:         client._expand_target()",
          "238:     assert opts[\"tgt\"] == host",
          "241: def test_update_targets_ip_address(opts):",
          "242:     \"\"\"",
          "243:     test update_targets when host is ip address",
          "244:     \"\"\"",
          "245:     host = \"127.0.0.1\"",
          "246:     user = \"test-user@\"",
          "247:     opts[\"tgt\"] = user + host",
          "249:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "250:         client = ssh.SSH(opts)",
          "251:     assert opts[\"tgt\"] == user + host",
          "252:     client._update_targets()",
          "253:     assert opts[\"tgt\"] == host",
          "254:     assert client.targets[host][\"user\"] == user.split(\"@\")[0]",
          "257: def test_update_targets_dns(opts):",
          "258:     \"\"\"",
          "259:     test update_targets when host is dns",
          "260:     \"\"\"",
          "261:     host = \"localhost\"",
          "262:     user = \"test-user@\"",
          "263:     opts[\"tgt\"] = user + host",
          "265:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "266:         client = ssh.SSH(opts)",
          "267:     assert opts[\"tgt\"] == user + host",
          "268:     client._update_targets()",
          "269:     assert opts[\"tgt\"] == host",
          "270:     assert client.targets[host][\"user\"] == user.split(\"@\")[0]",
          "273: def test_update_targets_no_user(opts):",
          "274:     \"\"\"",
          "275:     test update_targets when no user defined",
          "276:     \"\"\"",
          "277:     host = \"127.0.0.1\"",
          "278:     opts[\"tgt\"] = host",
          "280:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "281:         client = ssh.SSH(opts)",
          "282:     assert opts[\"tgt\"] == host",
          "283:     client._update_targets()",
          "284:     assert opts[\"tgt\"] == host",
          "287: def test_update_expand_target_dns(opts, roster):",
          "288:     \"\"\"",
          "289:     test update_targets and expand_target when host is dns",
          "290:     \"\"\"",
          "291:     host = \"localhost\"",
          "292:     user = \"test-user@\"",
          "293:     opts[\"tgt\"] = user + host",
          "295:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "296:         client = ssh.SSH(opts)",
          "297:     assert opts[\"tgt\"] == user + host",
          "298:     with patch(",
          "299:         \"salt.roster.get_roster_file\", MagicMock(return_value=\"/etc/salt/roster\")",
          "300:     ), patch(",
          "301:         \"salt.client.ssh.compile_template\",",
          "302:         MagicMock(return_value=salt.utils.yaml.safe_load(roster)),",
          "303:     ):",
          "304:         client._expand_target()",
          "305:     client._update_targets()",
          "306:     assert opts[\"tgt\"] == host",
          "307:     assert client.targets[host][\"user\"] == user.split(\"@\")[0]",
          "310: def test_parse_tgt(opts):",
          "311:     \"\"\"",
          "312:     test parse_tgt when user and host set on",
          "313:     the ssh cli tgt",
          "314:     \"\"\"",
          "315:     host = \"localhost\"",
          "316:     user = \"test-user@\"",
          "317:     opts[\"tgt\"] = user + host",
          "319:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "320:         assert not opts.get(\"ssh_cli_tgt\")",
          "321:         client = ssh.SSH(opts)",
          "322:         assert client.parse_tgt[\"hostname\"] == host",
          "323:         assert client.parse_tgt[\"user\"] == user.split(\"@\")[0]",
          "324:         assert opts.get(\"ssh_cli_tgt\") == user + host",
          "327: def test_parse_tgt_no_user(opts):",
          "328:     \"\"\"",
          "329:     test parse_tgt when only the host set on",
          "330:     the ssh cli tgt",
          "331:     \"\"\"",
          "332:     host = \"localhost\"",
          "333:     opts[\"ssh_user\"] = \"ssh-usr\"",
          "334:     opts[\"tgt\"] = host",
          "336:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "337:         assert not opts.get(\"ssh_cli_tgt\")",
          "338:         client = ssh.SSH(opts)",
          "339:         assert client.parse_tgt[\"hostname\"] == host",
          "340:         assert client.parse_tgt[\"user\"] == opts[\"ssh_user\"]",
          "341:         assert opts.get(\"ssh_cli_tgt\") == host",
          "344: def test_extra_filerefs(tmp_path, opts):",
          "345:     \"\"\"",
          "346:     test \"extra_filerefs\" are not excluded from kwargs",
          "347:     when preparing the SSH opts",
          "348:     \"\"\"",
          "349:     ssh_opts = {",
          "350:         \"eauth\": \"auto\",",
          "351:         \"username\": \"test\",",
          "352:         \"password\": \"test\",",
          "353:         \"client\": \"ssh\",",
          "354:         \"tgt\": \"localhost\",",
          "355:         \"fun\": \"test.ping\",",
          "356:         \"ssh_port\": 22,",
          "357:         \"extra_filerefs\": \"salt://foobar\",",
          "358:     }",
          "359:     roster = str(tmp_path / \"roster\")",
          "360:     client = salt.client.ssh.client.SSHClient(mopts=opts, disable_custom_roster=True)",
          "361:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
          "362:         ssh_obj = client._prep_ssh(**ssh_opts)",
          "363:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
          "366: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
          "367:     \"\"\"",
          "368:     test \"key_deploy\" function when",
          "369:     permission denied authentication error",
          "370:     when attempting to use scp to copy file",
          "371:     to target",
          "372:     \"\"\"",
          "373:     host = \"localhost\"",
          "374:     passwd = \"password\"",
          "375:     usr = \"ssh-usr\"",
          "376:     opts[\"ssh_user\"] = usr",
          "377:     opts[\"tgt\"] = host",
          "379:     ssh_ret = {",
          "380:         host: {",
          "381:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
          "382:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
          "383:             \"retcode\": 255,",
          "384:         }",
          "385:     }",
          "386:     key_run_ret = {",
          "387:         \"localhost\": {",
          "388:             \"jid\": \"20230922155652279959\",",
          "389:             \"return\": \"test\",",
          "390:             \"retcode\": 0,",
          "391:             \"id\": \"test\",",
          "392:             \"fun\": \"cmd.run\",",
          "393:             \"fun_args\": [\"echo test\"],",
          "394:         }",
          "395:     }",
          "396:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "397:     with patch_roster_file:",
          "398:         client = ssh.SSH(opts)",
          "399:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
          "400:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
          "401:     mock_key_run = MagicMock(return_value=key_run_ret)",
          "402:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "403:     with patch_input, patch_getpass, patch_key_run:",
          "404:         ret = client.key_deploy(host, ssh_ret)",
          "405:     assert mock_key_run.call_args_list[0][0] == (",
          "406:         host,",
          "407:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
          "408:         True,",
          "409:     )",
          "410:     assert ret == key_run_ret",
          "411:     assert mock_key_run.call_count == 1",
          "414: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
          "415:     \"\"\"",
          "416:     test \"key_deploy\" function when permission denied",
          "417:     due to not having access to copy the file to the target",
          "418:     We do not want to deploy the key, because this is not",
          "419:     an authentication to the target error.",
          "420:     \"\"\"",
          "421:     host = \"localhost\"",
          "422:     passwd = \"password\"",
          "423:     usr = \"ssh-usr\"",
          "424:     opts[\"ssh_user\"] = usr",
          "425:     opts[\"tgt\"] = host",
          "427:     mock_key_run = MagicMock(return_value=False)",
          "428:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "430:     ssh_ret = {",
          "431:         \"localhost\": {",
          "432:             \"stdout\": \"\",",
          "433:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
          "434:             \"retcode\": 1,",
          "435:         }",
          "436:     }",
          "437:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "438:     with patch_roster_file:",
          "439:         client = ssh.SSH(opts)",
          "440:     ret = client.key_deploy(host, ssh_ret)",
          "441:     assert ret == ssh_ret",
          "442:     assert mock_key_run.call_count == 0",
          "445: def test_key_deploy_no_permission_denied(tmp_path, opts):",
          "446:     \"\"\"",
          "447:     test \"key_deploy\" function when no permission denied",
          "448:     is returned",
          "449:     \"\"\"",
          "450:     host = \"localhost\"",
          "451:     passwd = \"password\"",
          "452:     usr = \"ssh-usr\"",
          "453:     opts[\"ssh_user\"] = usr",
          "454:     opts[\"tgt\"] = host",
          "456:     mock_key_run = MagicMock(return_value=False)",
          "457:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "458:     ssh_ret = {",
          "459:         \"localhost\": {",
          "460:             \"jid\": \"20230922161937998385\",",
          "461:             \"return\": \"test\",",
          "462:             \"retcode\": 0,",
          "463:             \"id\": \"test\",",
          "464:             \"fun\": \"cmd.run\",",
          "465:             \"fun_args\": [\"echo test\"],",
          "466:         }",
          "467:     }",
          "468:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "469:     with patch_roster_file:",
          "470:         client = ssh.SSH(opts)",
          "471:     ret = client.key_deploy(host, ssh_ret)",
          "472:     assert ret == ssh_ret",
          "473:     assert mock_key_run.call_count == 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e37fbda4de3f428fb1d3a1dd9c2bb834304365da",
      "candidate_info": {
        "commit_hash": "e37fbda4de3f428fb1d3a1dd9c2bb834304365da",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e37fbda4de3f428fb1d3a1dd9c2bb834304365da",
        "files": [
          "CHANGELOG.md",
          "changelog/65163.security.md",
          "changelog/65268.security.md",
          "changelog/65316.security.md",
          "changelog/65334.security.md",
          "changelog/65383.security.md",
          "changelog/cve-2023-34049.security.md",
          "doc/man/salt-api.1",
          "doc/man/salt-call.1",
          "doc/man/salt-cloud.1",
          "doc/man/salt-cp.1",
          "doc/man/salt-key.1",
          "doc/man/salt-master.1",
          "doc/man/salt-minion.1",
          "doc/man/salt-proxy.1",
          "doc/man/salt-run.1",
          "doc/man/salt-ssh.1",
          "doc/man/salt-syndic.1",
          "doc/man/salt.1",
          "doc/man/salt.7",
          "doc/man/spm.1",
          "doc/topics/releases/3006.4.md",
          "doc/topics/releases/templates/3006.4.md.template",
          "pkg/debian/changelog",
          "pkg/rpm/salt.spec"
        ],
        "message": "Release v3006.4",
        "before_after_code_files": [
          "pkg/rpm/salt.spec||pkg/rpm/salt.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/rpm/salt.spec||pkg/rpm/salt.spec": [
          "File: pkg/rpm/salt.spec -> pkg/rpm/salt.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: %define fish_dir %{_datadir}/fish/vendor_functions.d",
          "33: Name:    salt",
          "35: Release: 0",
          "36: Summary: A parallel remote execution system",
          "37: Group:   System Environment/Daemons",
          "",
          "[Removed Lines]",
          "34: Version: 3006.3",
          "",
          "[Added Lines]",
          "34: Version: 3006.4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "565: %changelog",
          "568: # Removed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568: # Security",
          "570: - Fix CVE-2023-34049 by ensuring we do not use a predictable name for the script and correctly check returncode of scp command.",
          "571:   This only impacts salt-ssh users using the pre-flight option. [#cve-2023-34049](https://github.com/saltstack/salt/issues/cve-2023-34049)",
          "572: - Update to `gitpython>=3.1.35` due to https://github.com/advisories/GHSA-wfm5-v35h-vwf4 and https://github.com/advisories/GHSA-cwvm-v4w8-q58c [#65163](https://github.com/saltstack/salt/issues/65163)",
          "573: - Bump to `cryptography==41.0.4` due to https://github.com/advisories/GHSA-v8gr-m533-ghj9 [#65268](https://github.com/saltstack/salt/issues/65268)",
          "574: - Upgrade relenv to 0.13.12 to address CVE-2023-4807 [#65316](https://github.com/saltstack/salt/issues/65316)",
          "575: - Bump to `urllib3==1.26.17` or `urllib3==2.0.6` due to https://github.com/advisories/GHSA-v845-jxx5-vc9f [#65334](https://github.com/saltstack/salt/issues/65334)",
          "576: - Bump to `gitpython==3.1.37` due to https://github.com/advisories/GHSA-cwvm-v4w8-q58c [#65383](https://github.com/saltstack/salt/issues/65383)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e85ff36292cd0628eafc0090b574650fd706d753",
      "candidate_info": {
        "commit_hash": "e85ff36292cd0628eafc0090b574650fd706d753",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e85ff36292cd0628eafc0090b574650fd706d753",
        "files": [
          "tests/pytests/unit/client/ssh/test_ssh.py",
          "tests/unit/client/test_ssh.py"
        ],
        "message": "Fix ssh tests on 3005",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py",
          "tests/unit/client/test_ssh.py||tests/unit/client/test_ssh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
          "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "4: import salt.client.ssh.client",
          "5: import salt.utils.msgpack",
          "6: from salt.client import ssh",
          "7: from tests.support.mock import MagicMock, patch",
          "10: pytestmark = [",
          "11:     pytest.mark.skip_if_binaries_missing(\"ssh\", \"ssh-keygen\", check_all=True),",
          "",
          "[Removed Lines]",
          "1: import os",
          "8: from tests.support.runtests import RUNTIME_VARS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     return opts, target",
          "45: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "46: def test_cmd_block_python_version_error(ssh_target):",
          "47:     opts = ssh_target[0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: @pytest.fixture",
          "43: def opts(tmp_path, temp_salt_master):",
          "44:     updated_values = {",
          "45:         \"argv\": [",
          "46:             \"ssh.set_auth_key\",",
          "47:             \"root\",",
          "48:             \"hobn+amNAXSBTiOXEqlBjGB...rsa root@master\",",
          "49:         ],",
          "50:         \"__role\": \"master\",",
          "51:         \"cachedir\": str(tmp_path),",
          "52:         \"extension_modules\": str(tmp_path / \"extmods\"),",
          "53:         \"selected_target_option\": \"glob\",",
          "54:     }",
          "56:     opts = temp_salt_master.config.copy()",
          "57:     opts.update(updated_values)",
          "58:     return opts",
          "61: @pytest.fixture",
          "62: def roster():",
          "63:     return \"\"\"",
          "64:         localhost:",
          "65:           host: 127.0.0.1",
          "66:           port: 2827",
          "67:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:         assert ssh_obj.opts.get(opt_key, None) == opt_value",
          "199: def test_expand_target_dns(opts, roster):",
          "200:     \"\"\"",
          "201:     test expand_target when target is root@<dns>",
          "",
          "[Removed Lines]",
          "143: @pytest.mark.skip_on_windows(reason=\"pre_flight_args is not implemented for Windows\")",
          "144: @pytest.mark.parametrize(",
          "145:     \"test_opts\",",
          "146:     [",
          "147:         (None, \"\"),",
          "148:         (\"one\", \" one\"),",
          "149:         (\"one two\", \" one two\"),",
          "150:         (\"| touch /tmp/test\", \" '|' touch /tmp/test\"),",
          "151:         (\"; touch /tmp/test\", \" ';' touch /tmp/test\"),",
          "152:         ([\"one\"], \" one\"),",
          "153:         ([\"one\", \"two\"], \" one two\"),",
          "154:         ([\"one\", \"two\", \"| touch /tmp/test\"], \" one two '| touch /tmp/test'\"),",
          "155:         ([\"one\", \"two\", \"; touch /tmp/test\"], \" one two '; touch /tmp/test'\"),",
          "156:     ],",
          "157: )",
          "158: def test_run_with_pre_flight_args(ssh_target, test_opts):",
          "159:     \"\"\"",
          "160:     test Single.run() when ssh_pre_flight is set",
          "161:     and script successfully runs",
          "162:     \"\"\"",
          "163:     opts = ssh_target[0]",
          "164:     target = ssh_target[1]",
          "166:     opts[\"ssh_run_pre_flight\"] = True",
          "167:     target[\"ssh_pre_flight\"] = os.path.join(RUNTIME_VARS.TMP, \"script.sh\")",
          "169:     if test_opts[0] is not None:",
          "170:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
          "171:     expected_args = test_opts[1]",
          "173:     single = ssh.Single(",
          "174:         opts,",
          "175:         opts[\"argv\"],",
          "176:         \"localhost\",",
          "177:         mods={},",
          "178:         fsclient=None,",
          "179:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "180:         mine=False,",
          "182:     )",
          "184:     cmd_ret = (\"Success\", \"\", 0)",
          "185:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "186:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
          "187:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "188:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "189:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
          "190:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "192:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
          "193:         ret = single.run()",
          "194:         assert mock_exec_cmd.mock_calls[0].args[",
          "195:             0",
          "196:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/unit/client/test_ssh.py||tests/unit/client/test_ssh.py": [
          "File: tests/unit/client/test_ssh.py -> tests/unit/client/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:                 call(\"rm '{}'\".format(script)),",
          "400:             ] == mock_cmd.call_args_list",
          "468:     @skipIf(salt.utils.platform.is_windows(), \"SSH_PY_SHIM not set on windows\")",
          "469:     def test_cmd_run_set_path(self):",
          "470:         \"\"\"",
          "",
          "[Removed Lines]",
          "402:     def test_shim_cmd(self):",
          "403:         \"\"\"",
          "404:         test Single.shim_cmd()",
          "405:         \"\"\"",
          "406:         single = ssh.Single(",
          "407:             self.opts,",
          "408:             self.opts[\"argv\"],",
          "409:             \"localhost\",",
          "410:             mods={},",
          "411:             fsclient=None,",
          "412:             thin=salt.utils.thin.thin_path(self.opts[\"cachedir\"]),",
          "413:             mine=False,",
          "414:             winrm=False,",
          "415:             tty=True,",
          "417:         )",
          "419:         exp_ret = (\"Success\", \"\", 0)",
          "420:         mock_cmd = MagicMock(return_value=exp_ret)",
          "421:         patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "422:         patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
          "423:         patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "425:         with patch_cmd, patch_rand, patch_send:",
          "426:             ret = single.shim_cmd(cmd_str=\"echo test\")",
          "427:             assert ret == exp_ret",
          "428:             assert [",
          "429:                 call(\"/bin/sh '.35d96ccac2ff.py'\"),",
          "430:                 call(\"rm '.35d96ccac2ff.py'\"),",
          "431:             ] == mock_cmd.call_args_list",
          "433:     def test_run_ssh_pre_flight(self):",
          "434:         \"\"\"",
          "435:         test Single.run_ssh_pre_flight",
          "436:         \"\"\"",
          "437:         target = self.target.copy()",
          "438:         target[\"ssh_pre_flight\"] = os.path.join(RUNTIME_VARS.TMP, \"script.sh\")",
          "439:         single = ssh.Single(",
          "440:             self.opts,",
          "441:             self.opts[\"argv\"],",
          "442:             \"localhost\",",
          "443:             mods={},",
          "444:             fsclient=None,",
          "445:             thin=salt.utils.thin.thin_path(self.opts[\"cachedir\"]),",
          "446:             mine=False,",
          "447:             winrm=False,",
          "448:             tty=True,",
          "450:         )",
          "452:         exp_ret = (\"Success\", \"\", 0)",
          "453:         mock_cmd = MagicMock(return_value=exp_ret)",
          "454:         patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "455:         patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
          "456:         exp_tmp = os.path.join(",
          "457:             tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
          "458:         )",
          "460:         with patch_cmd, patch_send:",
          "461:             ret = single.run_ssh_pre_flight()",
          "462:             assert ret == exp_ret",
          "463:             assert [",
          "464:                 call(\"/bin/sh '{}'\".format(exp_tmp)),",
          "465:                 call(\"rm '{}'\".format(exp_tmp)),",
          "466:             ] == mock_cmd.call_args_list",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}