{
  "cve_id": "CVE-2021-41104",
  "cve_desc": "ESPHome is a system to control the ESP8266/ESP32. Anyone with web_server enabled and HTTP basic auth configured on version 2021.9.1 or older is vulnerable to an issue in which `web_server` allows over-the-air (OTA) updates without checking user defined basic auth username & password. This issue is patched in version 2021.9.2. As a workaround, one may disable or remove `web_server`.",
  "repo": "esphome/esphome",
  "patch_hash": "be965a60eba6bb769e2a5afdbc8eed132f077a59",
  "patch_info": {
    "commit_hash": "be965a60eba6bb769e2a5afdbc8eed132f077a59",
    "repo": "esphome/esphome",
    "commit_url": "https://github.com/esphome/esphome/commit/be965a60eba6bb769e2a5afdbc8eed132f077a59",
    "files": [
      "esphome/components/web_server/__init__.py",
      "esphome/components/web_server/web_server.cpp",
      "esphome/components/web_server/web_server.h",
      "esphome/components/web_server_base/web_server_base.cpp",
      "esphome/components/web_server_base/web_server_base.h"
    ],
    "message": "Merge pull request from GHSA-48mj-p7x2-5jfm\n\n* Move web_server auth to web_server_base\n\n* Fix\n\n* Fix\n\n* Add middleware system",
    "before_after_code_files": [
      "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
      "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
      "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h",
      "esphome/components/web_server_base/web_server_base.cpp||esphome/components/web_server_base/web_server_base.cpp",
      "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h"
    ]
  },
  "patch_diff": {
    "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
      "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:         cv.Optional(CONF_JS_INCLUDE): cv.file_,",
      "35:         cv.Optional(CONF_AUTH): cv.Schema(",
      "36:             {",
      "39:             }",
      "40:         ),",
      "41:         cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
      "",
      "[Removed Lines]",
      "37:                 cv.Required(CONF_USERNAME): cv.string_strict,",
      "38:                 cv.Required(CONF_PASSWORD): cv.string_strict,",
      "",
      "[Added Lines]",
      "37:                 cv.Required(CONF_USERNAME): cv.All(cv.string_strict, cv.Length(min=1)),",
      "38:                 cv.Required(CONF_PASSWORD): cv.All(cv.string_strict, cv.Length(min=1)),",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:     cg.add(var.set_css_url(config[CONF_CSS_URL]))",
      "58:     cg.add(var.set_js_url(config[CONF_JS_URL]))",
      "59:     if CONF_AUTH in config:",
      "62:     if CONF_CSS_INCLUDE in config:",
      "63:         cg.add_define(\"WEBSERVER_CSS_INCLUDE\")",
      "64:         path = CORE.relative_config_path(config[CONF_CSS_INCLUDE])",
      "",
      "[Removed Lines]",
      "60:         cg.add(var.set_username(config[CONF_AUTH][CONF_USERNAME]))",
      "61:         cg.add(var.set_password(config[CONF_AUTH][CONF_PASSWORD]))",
      "",
      "[Added Lines]",
      "60:         cg.add(paren.set_auth_username(config[CONF_AUTH][CONF_USERNAME]))",
      "61:         cg.add(paren.set_auth_password(config[CONF_AUTH][CONF_PASSWORD]))",
      "",
      "---------------"
    ],
    "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp": [
      "File: esphome/components/web_server/web_server.cpp -> esphome/components/web_server/web_server.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "158: void WebServer::dump_config() {",
      "159:   ESP_LOGCONFIG(TAG, \"Web Server:\");",
      "160:   ESP_LOGCONFIG(TAG, \"  Address: %s:%u\", network::get_use_address().c_str(), this->base_->get_port());",
      "164: }",
      "165: float WebServer::get_setup_priority() const { return setup_priority::WIFI - 1.0f; }",
      "",
      "[Removed Lines]",
      "161:   if (this->using_auth()) {",
      "162:     ESP_LOGCONFIG(TAG, \"  Basic authentication enabled\");",
      "163:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "764:   return false;",
      "765: }",
      "766: void WebServer::handleRequest(AsyncWebServerRequest *request) {",
      "771:   if (request->url() == \"/\") {",
      "772:     this->handle_index_request(request);",
      "773:     return;",
      "",
      "[Removed Lines]",
      "767:   if (this->using_auth() && !request->authenticate(this->username_, this->password_)) {",
      "768:     return request->requestAuthentication();",
      "769:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h": [
      "File: esphome/components/web_server/web_server.h -> esphome/components/web_server/web_server.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  public:",
      "33:   WebServer(web_server_base::WebServerBase *base) : base_(base) {}",
      "",
      "[Removed Lines]",
      "35:   void set_username(const char *username) { username_ = username; }",
      "37:   void set_password(const char *password) { password_ = password; }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:   void handle_js_request(AsyncWebServerRequest *request);",
      "86: #endif",
      "90: #ifdef USE_SENSOR",
      "91:   void on_sensor_update(sensor::Sensor *obj, float state) override;",
      "",
      "[Removed Lines]",
      "88:   bool using_auth() { return username_ != nullptr && password_ != nullptr; }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "184:  protected:",
      "185:   web_server_base::WebServerBase *base_;",
      "186:   AsyncEventSource events_{\"/events\"};",
      "189:   const char *css_url_{nullptr};",
      "190:   const char *css_include_{nullptr};",
      "191:   const char *js_url_{nullptr};",
      "",
      "[Removed Lines]",
      "187:   const char *username_{nullptr};",
      "188:   const char *password_{nullptr};",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "esphome/components/web_server_base/web_server_base.cpp||esphome/components/web_server_base/web_server_base.cpp": [
      "File: esphome/components/web_server_base/web_server_base.cpp -> esphome/components/web_server_base/web_server_base.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: static const char *const TAG = \"web_server_base\";",
      "20: void report_ota_error() {",
      "21:   StreamString ss;",
      "22:   Update.printError(ss);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: void WebServerBase::add_handler(AsyncWebHandler *handler) {",
      "23:   if (!credentials_.username.empty()) {",
      "24:     handler = new internal::AuthMiddlewareHandler(handler, &credentials_);",
      "25:   }",
      "26:   this->handlers_.push_back(handler);",
      "27:   if (this->server_ != nullptr)",
      "28:     this->server_->addHandler(handler);",
      "29: }",
      "",
      "---------------"
    ],
    "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h": [
      "File: esphome/components/web_server_base/web_server_base.h -> esphome/components/web_server_base/web_server_base.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: namespace esphome {",
      "11: namespace web_server_base {",
      "13: class WebServerBase : public Component {",
      "14:  public:",
      "15:   void init() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: namespace internal {",
      "15: class MiddlewareHandler : public AsyncWebHandler {",
      "16:  public:",
      "17:   MiddlewareHandler(AsyncWebHandler *next) : next_(next) {}",
      "19:   bool canHandle(AsyncWebServerRequest *request) override { return next_->canHandle(request); }",
      "20:   void handleRequest(AsyncWebServerRequest *request) override { next_->handleRequest(request); }",
      "21:   void handleUpload(AsyncWebServerRequest *request, const String &filename, size_t index, uint8_t *data, size_t len,",
      "22:                     bool final) override {",
      "23:     next_->handleUpload(request, filename, index, data, len, final);",
      "24:   }",
      "25:   void handleBody(AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) override {",
      "26:     next_->handleBody(request, data, len, index, total);",
      "27:   }",
      "28:   bool isRequestHandlerTrivial() override { return next_->isRequestHandlerTrivial(); }",
      "30:  protected:",
      "31:   AsyncWebHandler *next_;",
      "32: };",
      "34: struct Credentials {",
      "35:   std::string username;",
      "36:   std::string password;",
      "37: };",
      "39: class AuthMiddlewareHandler : public MiddlewareHandler {",
      "40:  public:",
      "41:   AuthMiddlewareHandler(AsyncWebHandler *next, Credentials *credentials)",
      "42:       : MiddlewareHandler(next), credentials_(credentials) {}",
      "44:   bool check_auth(AsyncWebServerRequest *request) {",
      "45:     bool success = request->authenticate(credentials_->username.c_str(), credentials_->password.c_str());",
      "46:     if (!success) {",
      "47:       request->requestAuthentication();",
      "48:     }",
      "49:     return success;",
      "50:   }",
      "52:   void handleRequest(AsyncWebServerRequest *request) override {",
      "53:     if (!check_auth(request))",
      "54:       return;",
      "55:     MiddlewareHandler::handleRequest(request);",
      "56:   }",
      "57:   void handleUpload(AsyncWebServerRequest *request, const String &filename, size_t index, uint8_t *data, size_t len,",
      "58:                     bool final) override {",
      "59:     if (!check_auth(request))",
      "60:       return;",
      "61:     MiddlewareHandler::handleUpload(request, filename, index, data, len, final);",
      "62:   }",
      "63:   void handleBody(AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) override {",
      "64:     if (!check_auth(request))",
      "65:       return;",
      "66:     MiddlewareHandler::handleBody(request, data, len, index, total);",
      "67:   }",
      "69:  protected:",
      "70:   Credentials *credentials_;",
      "71: };",
      "73: }  // namespace internal",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:   std::shared_ptr<AsyncWebServer> get_server() const { return server_; }",
      "35:   float get_setup_priority() const override;",
      "45:   void add_ota_handler();",
      "",
      "[Removed Lines]",
      "37:   void add_handler(AsyncWebHandler *handler) {",
      "40:     this->handlers_.push_back(handler);",
      "41:     if (this->server_ != nullptr)",
      "42:       this->server_->addHandler(handler);",
      "43:   }",
      "",
      "[Added Lines]",
      "99:   void set_auth_username(std::string auth_username) { credentials_.username = auth_username; }",
      "100:   void set_auth_password(std::string auth_password) { credentials_.password = auth_password; }",
      "102:   void add_handler(AsyncWebHandler *handler);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54:   uint16_t port_{80};",
      "55:   std::shared_ptr<AsyncWebServer> server_{nullptr};",
      "56:   std::vector<AsyncWebHandler *> handlers_;",
      "57: };",
      "59: class OTARequestHandler : public AsyncWebHandler {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:   internal::Credentials credentials_;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f07421911bd1390cbf776956e3f4c4f45301f6b",
      "candidate_info": {
        "commit_hash": "6f07421911bd1390cbf776956e3f4c4f45301f6b",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/6f07421911bd1390cbf776956e3f4c4f45301f6b",
        "files": [
          "esphome/components/web_server/__init__.py",
          "esphome/components/web_server/web_server.cpp",
          "esphome/components/web_server/web_server.h",
          "esphome/const.py",
          "esphome/core/controller.cpp",
          "esphome/core/controller.h",
          "tests/test4.yaml"
        ],
        "message": "Optionally show internal components on the web server (#2627)\n\nCo-authored-by: Jesse Hills <3060199+jesserockz@users.noreply.github.com>\nCo-authored-by: Oxan van Leeuwen <oxan@oxanvanleeuwen.nl>",
        "before_after_code_files": [
          "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
          "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
          "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h",
          "esphome/const.py||esphome/const.py",
          "esphome/core/controller.cpp||esphome/core/controller.cpp",
          "esphome/core/controller.h||esphome/core/controller.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
            "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
            "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
          ],
          "candidate": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
            "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
            "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
          ]
        }
      },
      "candidate_diff": {
        "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
          "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     CONF_AUTH,",
          "13:     CONF_USERNAME,",
          "14:     CONF_PASSWORD,",
          "15:     CONF_OTA,",
          "16: )",
          "17: from esphome.core import CORE, coroutine_with_priority",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     CONF_INCLUDE_INTERNAL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:         cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
          "43:             web_server_base.WebServerBase",
          "44:         ),",
          "45:         cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "46:     }",
          "47: ).extend(cv.COMPONENT_SCHEMA)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         cv.Optional(CONF_INCLUDE_INTERNAL, default=False): cv.boolean,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         path = CORE.relative_config_path(config[CONF_JS_INCLUDE])",
          "76:         with open(file=path, mode=\"r\", encoding=\"utf-8\") as myfile:",
          "77:             cg.add(var.set_js_include(myfile.read()))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     cg.add(var.set_include_internal(config[CONF_INCLUDE_INTERNAL]))",
          "",
          "---------------"
        ],
        "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp": [
          "File: esphome/components/web_server/web_server.cpp -> esphome/components/web_server/web_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: void write_row(AsyncResponseStream *stream, EntityBase *obj, const std::string &klass, const std::string &action,",
          "33:                const std::function<void(AsyncResponseStream &stream, EntityBase *obj)> &action_func = nullptr) {",
          "36:   stream->print(\"<tr class=\\\"\");",
          "37:   stream->print(klass.c_str());",
          "38:   stream->print(\"\\\" id=\\\"\");",
          "39:   stream->print(klass.c_str());",
          "40:   stream->print(\"-\");",
          "",
          "[Removed Lines]",
          "34:   if (obj->is_internal())",
          "35:     return;",
          "",
          "[Added Lines]",
          "36:   if (obj->is_internal())",
          "37:     stream->print(\" internal\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: void WebServer::setup() {",
          "85:   ESP_LOGCONFIG(TAG, \"Setting up web server...\");",
          "87:   this->base_->init();",
          "89:   this->events_.onConnect([this](AsyncEventSourceClient *client) {",
          "",
          "[Removed Lines]",
          "86:   this->setup_controller();",
          "",
          "[Added Lines]",
          "86:   this->setup_controller(this->include_internal_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: #ifdef USE_SENSOR",
          "94:     for (auto *obj : App.get_sensors())",
          "96:         client->send(this->sensor_json(obj, obj->state).c_str(), \"state\");",
          "97: #endif",
          "99: #ifdef USE_SWITCH",
          "100:     for (auto *obj : App.get_switches())",
          "102:         client->send(this->switch_json(obj, obj->state).c_str(), \"state\");",
          "103: #endif",
          "105: #ifdef USE_BINARY_SENSOR",
          "106:     for (auto *obj : App.get_binary_sensors())",
          "108:         client->send(this->binary_sensor_json(obj, obj->state).c_str(), \"state\");",
          "109: #endif",
          "111: #ifdef USE_FAN",
          "112:     for (auto *obj : App.get_fans())",
          "114:         client->send(this->fan_json(obj).c_str(), \"state\");",
          "115: #endif",
          "117: #ifdef USE_LIGHT",
          "118:     for (auto *obj : App.get_lights())",
          "120:         client->send(this->light_json(obj).c_str(), \"state\");",
          "121: #endif",
          "123: #ifdef USE_TEXT_SENSOR",
          "124:     for (auto *obj : App.get_text_sensors())",
          "126:         client->send(this->text_sensor_json(obj, obj->state).c_str(), \"state\");",
          "127: #endif",
          "129: #ifdef USE_COVER",
          "130:     for (auto *obj : App.get_covers())",
          "132:         client->send(this->cover_json(obj).c_str(), \"state\");",
          "133: #endif",
          "135: #ifdef USE_NUMBER",
          "136:     for (auto *obj : App.get_numbers())",
          "138:         client->send(this->number_json(obj, obj->state).c_str(), \"state\");",
          "139: #endif",
          "141: #ifdef USE_SELECT",
          "142:     for (auto *obj : App.get_selects())",
          "144:         client->send(this->select_json(obj, obj->state).c_str(), \"state\");",
          "145: #endif",
          "146:   });",
          "",
          "[Removed Lines]",
          "95:       if (!obj->is_internal())",
          "101:       if (!obj->is_internal())",
          "107:       if (!obj->is_internal())",
          "113:       if (!obj->is_internal())",
          "119:       if (!obj->is_internal())",
          "125:       if (!obj->is_internal())",
          "131:       if (!obj->is_internal())",
          "137:       if (!obj->is_internal())",
          "143:       if (!obj->is_internal())",
          "",
          "[Added Lines]",
          "95:       if (this->include_internal_ || !obj->is_internal())",
          "101:       if (this->include_internal_ || !obj->is_internal())",
          "107:       if (this->include_internal_ || !obj->is_internal())",
          "113:       if (this->include_internal_ || !obj->is_internal())",
          "119:       if (this->include_internal_ || !obj->is_internal())",
          "125:       if (this->include_internal_ || !obj->is_internal())",
          "131:       if (this->include_internal_ || !obj->is_internal())",
          "137:       if (this->include_internal_ || !obj->is_internal())",
          "143:       if (this->include_internal_ || !obj->is_internal())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189: #ifdef USE_SENSOR",
          "190:   for (auto *obj : App.get_sensors())",
          "192: #endif",
          "194: #ifdef USE_SWITCH",
          "195:   for (auto *obj : App.get_switches())",
          "197: #endif",
          "199: #ifdef USE_BINARY_SENSOR",
          "200:   for (auto *obj : App.get_binary_sensors())",
          "202: #endif",
          "204: #ifdef USE_FAN",
          "205:   for (auto *obj : App.get_fans())",
          "207: #endif",
          "209: #ifdef USE_LIGHT",
          "210:   for (auto *obj : App.get_lights())",
          "212: #endif",
          "214: #ifdef USE_TEXT_SENSOR",
          "215:   for (auto *obj : App.get_text_sensors())",
          "217: #endif",
          "219: #ifdef USE_COVER",
          "220:   for (auto *obj : App.get_covers())",
          "222: #endif",
          "224: #ifdef USE_NUMBER",
          "225:   for (auto *obj : App.get_numbers())",
          "227: #endif",
          "229: #ifdef USE_SELECT",
          "230:   for (auto *obj : App.get_selects())",
          "242: #endif",
          "244:   stream->print(F(\"</tbody></table><p>See <a href=\\\"https://esphome.io/web-api/index.html\\\">ESPHome Web API</a> for \"",
          "",
          "[Removed Lines]",
          "191:     write_row(stream, obj, \"sensor\", \"\");",
          "196:     write_row(stream, obj, \"switch\", \"<button>Toggle</button>\");",
          "201:     write_row(stream, obj, \"binary_sensor\", \"\");",
          "206:     write_row(stream, obj, \"fan\", \"<button>Toggle</button>\");",
          "211:     write_row(stream, obj, \"light\", \"<button>Toggle</button>\");",
          "216:     write_row(stream, obj, \"text_sensor\", \"\");",
          "221:     write_row(stream, obj, \"cover\", \"<button>Open</button><button>Close</button>\");",
          "226:     write_row(stream, obj, \"number\", \"\");",
          "231:     write_row(stream, obj, \"select\", \"\", [](AsyncResponseStream &stream, EntityBase *obj) {",
          "232:       select::Select *select = (select::Select *) obj;",
          "233:       stream.print(\"<select>\");",
          "234:       stream.print(\"<option></option>\");",
          "235:       for (auto const &option : select->traits.get_options()) {",
          "236:         stream.print(\"<option>\");",
          "237:         stream.print(option.c_str());",
          "238:         stream.print(\"</option>\");",
          "239:       }",
          "240:       stream.print(\"</select>\");",
          "241:     });",
          "",
          "[Added Lines]",
          "191:     if (this->include_internal_ || !obj->is_internal())",
          "192:       write_row(stream, obj, \"sensor\", \"\");",
          "197:     if (this->include_internal_ || !obj->is_internal())",
          "198:       write_row(stream, obj, \"switch\", \"<button>Toggle</button>\");",
          "203:     if (this->include_internal_ || !obj->is_internal())",
          "204:       write_row(stream, obj, \"binary_sensor\", \"\");",
          "209:     if (this->include_internal_ || !obj->is_internal())",
          "210:       write_row(stream, obj, \"fan\", \"<button>Toggle</button>\");",
          "215:     if (this->include_internal_ || !obj->is_internal())",
          "216:       write_row(stream, obj, \"light\", \"<button>Toggle</button>\");",
          "221:     if (this->include_internal_ || !obj->is_internal())",
          "222:       write_row(stream, obj, \"text_sensor\", \"\");",
          "227:     if (this->include_internal_ || !obj->is_internal())",
          "228:       write_row(stream, obj, \"cover\", \"<button>Open</button><button>Close</button>\");",
          "233:     if (this->include_internal_ || !obj->is_internal())",
          "234:       write_row(stream, obj, \"number\", \"\");",
          "239:     if (this->include_internal_ || !obj->is_internal())",
          "240:       write_row(stream, obj, \"select\", \"\", [](AsyncResponseStream &stream, EntityBase *obj) {",
          "241:         select::Select *select = (select::Select *) obj;",
          "242:         stream.print(\"<select>\");",
          "243:         stream.print(\"<option></option>\");",
          "244:         for (auto const &option : select->traits.get_options()) {",
          "245:           stream.print(\"<option>\");",
          "246:           stream.print(option.c_str());",
          "247:           stream.print(\"</option>\");",
          "248:         }",
          "249:         stream.print(\"</select>\");",
          "250:       });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "293: }",
          "294: void WebServer::handle_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "295:   for (sensor::Sensor *obj : App.get_sensors()) {",
          "298:     if (obj->get_object_id() != match.id)",
          "299:       continue;",
          "300:     std::string data = this->sensor_json(obj, obj->state);",
          "",
          "[Removed Lines]",
          "296:     if (obj->is_internal())",
          "297:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321: }",
          "322: void WebServer::handle_text_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "323:   for (text_sensor::TextSensor *obj : App.get_text_sensors()) {",
          "326:     if (obj->get_object_id() != match.id)",
          "327:       continue;",
          "328:     std::string data = this->text_sensor_json(obj, obj->state);",
          "",
          "[Removed Lines]",
          "324:     if (obj->is_internal())",
          "325:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "353: }",
          "354: void WebServer::handle_switch_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "355:   for (switch_::Switch *obj : App.get_switches()) {",
          "358:     if (obj->get_object_id() != match.id)",
          "359:       continue;",
          "",
          "[Removed Lines]",
          "356:     if (obj->is_internal())",
          "357:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "382: #ifdef USE_BINARY_SENSOR",
          "383: void WebServer::on_binary_sensor_update(binary_sensor::BinarySensor *obj, bool state) {",
          "386:   this->events_.send(this->binary_sensor_json(obj, state).c_str(), \"state\");",
          "387: }",
          "388: std::string WebServer::binary_sensor_json(binary_sensor::BinarySensor *obj, bool value) {",
          "",
          "[Removed Lines]",
          "384:   if (obj->is_internal())",
          "385:     return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "394: }",
          "395: void WebServer::handle_binary_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "396:   for (binary_sensor::BinarySensor *obj : App.get_binary_sensors()) {",
          "399:     if (obj->get_object_id() != match.id)",
          "400:       continue;",
          "401:     std::string data = this->binary_sensor_json(obj, obj->state);",
          "",
          "[Removed Lines]",
          "397:     if (obj->is_internal())",
          "398:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "407: #endif",
          "409: #ifdef USE_FAN",
          "415: std::string WebServer::fan_json(fan::FanState *obj) {",
          "416:   return json::build_json([obj](JsonObject &root) {",
          "417:     root[\"id\"] = \"fan-\" + obj->get_object_id();",
          "",
          "[Removed Lines]",
          "410: void WebServer::on_fan_update(fan::FanState *obj) {",
          "411:   if (obj->is_internal())",
          "412:     return;",
          "413:   this->events_.send(this->fan_json(obj).c_str(), \"state\");",
          "414: }",
          "",
          "[Added Lines]",
          "409: void WebServer::on_fan_update(fan::FanState *obj) { this->events_.send(this->fan_json(obj).c_str(), \"state\"); }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "442: }",
          "443: void WebServer::handle_fan_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "444:   for (fan::FanState *obj : App.get_fans()) {",
          "447:     if (obj->get_object_id() != match.id)",
          "448:       continue;",
          "",
          "[Removed Lines]",
          "445:     if (obj->is_internal())",
          "446:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "504: #endif",
          "506: #ifdef USE_LIGHT",
          "512: void WebServer::handle_light_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "513:   for (light::LightState *obj : App.get_lights()) {",
          "516:     if (obj->get_object_id() != match.id)",
          "517:       continue;",
          "",
          "[Removed Lines]",
          "507: void WebServer::on_light_update(light::LightState *obj) {",
          "508:   if (obj->is_internal())",
          "509:     return;",
          "510:   this->events_.send(this->light_json(obj).c_str(), \"state\");",
          "511: }",
          "514:     if (obj->is_internal())",
          "515:       continue;",
          "",
          "[Added Lines]",
          "500: void WebServer::on_light_update(light::LightState *obj) { this->events_.send(this->light_json(obj).c_str(), \"state\"); }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "579: #endif",
          "581: #ifdef USE_COVER",
          "587: void WebServer::handle_cover_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "588:   for (cover::Cover *obj : App.get_covers()) {",
          "591:     if (obj->get_object_id() != match.id)",
          "592:       continue;",
          "",
          "[Removed Lines]",
          "582: void WebServer::on_cover_update(cover::Cover *obj) {",
          "583:   if (obj->is_internal())",
          "584:     return;",
          "585:   this->events_.send(this->cover_json(obj).c_str(), \"state\");",
          "586: }",
          "589:     if (obj->is_internal())",
          "590:       continue;",
          "",
          "[Added Lines]",
          "569: void WebServer::on_cover_update(cover::Cover *obj) { this->events_.send(this->cover_json(obj).c_str(), \"state\"); }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "646: }",
          "647: void WebServer::handle_number_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "648:   for (auto *obj : App.get_numbers()) {",
          "651:     if (obj->get_object_id() != match.id)",
          "652:       continue;",
          "653:     std::string data = this->number_json(obj, obj->state);",
          "",
          "[Removed Lines]",
          "649:     if (obj->is_internal())",
          "650:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "673: }",
          "674: void WebServer::handle_select_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "675:   for (auto *obj : App.get_selects()) {",
          "678:     if (obj->get_object_id() != match.id)",
          "679:       continue;",
          "",
          "[Removed Lines]",
          "676:     if (obj->is_internal())",
          "677:       continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h": [
          "File: esphome/components/web_server/web_server.h -> esphome/components/web_server/web_server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   void set_js_include(const char *js_include);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   void set_include_internal(bool include_internal) { include_internal_ = include_internal; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   const char *css_include_{nullptr};",
          "189:   const char *js_url_{nullptr};",
          "190:   const char *js_include_{nullptr};",
          "191:   bool allow_ota_{true};",
          "192: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:   bool include_internal_{false};",
          "",
          "---------------"
        ],
        "esphome/const.py||esphome/const.py": [
          "File: esphome/const.py -> esphome/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: CONF_IMPEDANCE = \"impedance\"",
          "287: CONF_IMPORT_ACTIVE_ENERGY = \"import_active_energy\"",
          "288: CONF_IMPORT_REACTIVE_ENERGY = \"import_reactive_energy\"",
          "289: CONF_INCLUDES = \"includes\"",
          "290: CONF_INDEX = \"index\"",
          "291: CONF_INDOOR = \"indoor\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289: CONF_INCLUDE_INTERNAL = \"include_internal\"",
          "",
          "---------------"
        ],
        "esphome/core/controller.cpp||esphome/core/controller.cpp": [
          "File: esphome/core/controller.cpp -> esphome/core/controller.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: namespace esphome {",
          "8: #ifdef USE_BINARY_SENSOR",
          "9:   for (auto *obj : App.get_binary_sensors()) {",
          "11:       obj->add_on_state_callback([this, obj](bool state) { this->on_binary_sensor_update(obj, state); });",
          "12:   }",
          "13: #endif",
          "14: #ifdef USE_FAN",
          "15:   for (auto *obj : App.get_fans()) {",
          "17:       obj->add_on_state_callback([this, obj]() { this->on_fan_update(obj); });",
          "18:   }",
          "19: #endif",
          "20: #ifdef USE_LIGHT",
          "21:   for (auto *obj : App.get_lights()) {",
          "23:       obj->add_new_remote_values_callback([this, obj]() { this->on_light_update(obj); });",
          "24:   }",
          "25: #endif",
          "26: #ifdef USE_SENSOR",
          "27:   for (auto *obj : App.get_sensors()) {",
          "29:       obj->add_on_state_callback([this, obj](float state) { this->on_sensor_update(obj, state); });",
          "30:   }",
          "31: #endif",
          "32: #ifdef USE_SWITCH",
          "33:   for (auto *obj : App.get_switches()) {",
          "35:       obj->add_on_state_callback([this, obj](bool state) { this->on_switch_update(obj, state); });",
          "36:   }",
          "37: #endif",
          "38: #ifdef USE_COVER",
          "39:   for (auto *obj : App.get_covers()) {",
          "41:       obj->add_on_state_callback([this, obj]() { this->on_cover_update(obj); });",
          "42:   }",
          "43: #endif",
          "44: #ifdef USE_TEXT_SENSOR",
          "45:   for (auto *obj : App.get_text_sensors()) {",
          "47:       obj->add_on_state_callback([this, obj](const std::string &state) { this->on_text_sensor_update(obj, state); });",
          "48:   }",
          "49: #endif",
          "50: #ifdef USE_CLIMATE",
          "51:   for (auto *obj : App.get_climates()) {",
          "53:       obj->add_on_state_callback([this, obj]() { this->on_climate_update(obj); });",
          "54:   }",
          "55: #endif",
          "56: #ifdef USE_NUMBER",
          "57:   for (auto *obj : App.get_numbers()) {",
          "59:       obj->add_on_state_callback([this, obj](float state) { this->on_number_update(obj, state); });",
          "60:   }",
          "61: #endif",
          "62: #ifdef USE_SELECT",
          "63:   for (auto *obj : App.get_selects()) {",
          "65:       obj->add_on_state_callback([this, obj](const std::string &state) { this->on_select_update(obj, state); });",
          "66:   }",
          "67: #endif",
          "",
          "[Removed Lines]",
          "7: void Controller::setup_controller() {",
          "10:     if (!obj->is_internal())",
          "16:     if (!obj->is_internal())",
          "22:     if (!obj->is_internal())",
          "28:     if (!obj->is_internal())",
          "34:     if (!obj->is_internal())",
          "40:     if (!obj->is_internal())",
          "46:     if (!obj->is_internal())",
          "52:     if (!obj->is_internal())",
          "58:     if (!obj->is_internal())",
          "64:     if (!obj->is_internal())",
          "",
          "[Added Lines]",
          "7: void Controller::setup_controller(bool include_internal) {",
          "10:     if (include_internal || !obj->is_internal())",
          "16:     if (include_internal || !obj->is_internal())",
          "22:     if (include_internal || !obj->is_internal())",
          "28:     if (include_internal || !obj->is_internal())",
          "34:     if (include_internal || !obj->is_internal())",
          "40:     if (include_internal || !obj->is_internal())",
          "46:     if (include_internal || !obj->is_internal())",
          "52:     if (include_internal || !obj->is_internal())",
          "58:     if (include_internal || !obj->is_internal())",
          "64:     if (include_internal || !obj->is_internal())",
          "",
          "---------------"
        ],
        "esphome/core/controller.h||esphome/core/controller.h": [
          "File: esphome/core/controller.h -> esphome/core/controller.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: class Controller {",
          "38:  public:",
          "40: #ifdef USE_BINARY_SENSOR",
          "41:   virtual void on_binary_sensor_update(binary_sensor::BinarySensor *obj, bool state){};",
          "42: #endif",
          "",
          "[Removed Lines]",
          "39:   void setup_controller();",
          "",
          "[Added Lines]",
          "39:   void setup_controller(bool include_internal = false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b8ca809003a9e0249c1c92ae6a9158f7ed430a9",
      "candidate_info": {
        "commit_hash": "3b8ca809003a9e0249c1c92ae6a9158f7ed430a9",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/3b8ca809003a9e0249c1c92ae6a9158f7ed430a9",
        "files": [
          "esphome/components/climate/climate_traits.h",
          "esphome/components/web_server/__init__.py",
          "esphome/components/web_server/server_index.h",
          "esphome/components/web_server/web_server.cpp",
          "esphome/components/web_server/web_server.h",
          "tests/test1.yaml"
        ],
        "message": "Webserver v2 (#2688)\n\nCo-authored-by: Jesse Hills <3060199+jesserockz@users.noreply.github.com>",
        "before_after_code_files": [
          "esphome/components/climate/climate_traits.h||esphome/components/climate/climate_traits.h",
          "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
          "esphome/components/web_server/server_index.h||esphome/components/web_server/server_index.h",
          "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
          "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
            "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
            "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
          ],
          "candidate": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
            "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
            "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
          ]
        }
      },
      "candidate_diff": {
        "esphome/components/climate/climate_traits.h||esphome/components/climate/climate_traits.h": [
          "File: esphome/components/climate/climate_traits.h -> esphome/components/climate/climate_traits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   }",
          "142:   bool supports_swing_mode(ClimateSwingMode swing_mode) const { return supported_swing_modes_.count(swing_mode); }",
          "143:   bool get_supports_swing_modes() const { return !supported_swing_modes_.empty(); }",
          "146:   float get_visual_min_temperature() const { return visual_min_temperature_; }",
          "147:   void set_visual_min_temperature(float visual_min_temperature) { visual_min_temperature_ = visual_min_temperature; }",
          "",
          "[Removed Lines]",
          "144:   std::set<ClimateSwingMode> get_supported_swing_modes() { return supported_swing_modes_; }",
          "",
          "[Added Lines]",
          "144:   std::set<ClimateSwingMode> get_supported_swing_modes() const { return supported_swing_modes_; }",
          "",
          "---------------"
        ],
        "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
          "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     CONF_PASSWORD,",
          "15:     CONF_INCLUDE_INTERNAL,",
          "16:     CONF_OTA,",
          "17: )",
          "18: from esphome.core import CORE, coroutine_with_priority",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     CONF_VERSION,",
          "18:     CONF_LOCAL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: web_server_ns = cg.esphome_ns.namespace(\"web_server\")",
          "23: WebServer = web_server_ns.class_(\"WebServer\", cg.Component, cg.Controller)",
          "25: CONFIG_SCHEMA = cv.All(",
          "26:     cv.Schema(",
          "27:         {",
          "28:             cv.GenerateID(): cv.declare_id(WebServer),",
          "29:             cv.Optional(CONF_PORT, default=80): cv.port,",
          "33:             cv.Optional(CONF_CSS_INCLUDE): cv.file_,",
          "37:             cv.Optional(CONF_JS_INCLUDE): cv.file_,",
          "38:             cv.Optional(CONF_AUTH): cv.Schema(",
          "39:                 {",
          "",
          "[Removed Lines]",
          "30:             cv.Optional(",
          "31:                 CONF_CSS_URL, default=\"https://esphome.io/_static/webserver-v1.min.css\"",
          "32:             ): cv.string,",
          "34:             cv.Optional(",
          "35:                 CONF_JS_URL, default=\"https://esphome.io/_static/webserver-v1.min.js\"",
          "36:             ): cv.string,",
          "",
          "[Added Lines]",
          "28: def default_url(config):",
          "29:     config = config.copy()",
          "30:     if config[CONF_VERSION] == 1:",
          "31:         if not (CONF_CSS_URL in config):",
          "32:             config[CONF_CSS_URL] = \"https://esphome.io/_static/webserver-v1.min.css\"",
          "33:         if not (CONF_JS_URL in config):",
          "34:             config[CONF_JS_URL] = \"https://esphome.io/_static/webserver-v1.min.js\"",
          "35:     if config[CONF_VERSION] == 2:",
          "36:         if not (CONF_CSS_URL in config):",
          "37:             config[CONF_CSS_URL] = \"\"",
          "38:         if not (CONF_JS_URL in config):",
          "39:             config[CONF_JS_URL] = \"https://oi.esphome.io/v2/www.js\"",
          "40:     return config",
          "43: def validate_local(config):",
          "44:     if CONF_LOCAL in config and config[CONF_VERSION] == 1:",
          "45:         raise cv.Invalid(\"'local' is not supported in version 1\")",
          "46:     return config",
          "54:             cv.Optional(CONF_VERSION, default=2): cv.one_of(1, 2),",
          "55:             cv.Optional(CONF_CSS_URL): cv.string,",
          "57:             cv.Optional(CONF_JS_URL): cv.string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:             ),",
          "51:             cv.Optional(CONF_INCLUDE_INTERNAL, default=False): cv.boolean,",
          "52:             cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "54:     ).extend(cv.COMPONENT_SCHEMA),",
          "55:     cv.only_with_arduino,",
          "56: )",
          "",
          "[Removed Lines]",
          "53:         },",
          "",
          "[Added Lines]",
          "74:             cv.Optional(CONF_LOCAL): cv.boolean,",
          "75:         }",
          "78:     default_url,",
          "79:     validate_local,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     cg.add(paren.set_port(config[CONF_PORT]))",
          "69:     cg.add_define(\"USE_WEBSERVER\")",
          "70:     cg.add_define(\"USE_WEBSERVER_PORT\", config[CONF_PORT])",
          "71:     cg.add(var.set_css_url(config[CONF_CSS_URL]))",
          "72:     cg.add(var.set_js_url(config[CONF_JS_URL]))",
          "73:     cg.add(var.set_allow_ota(config[CONF_OTA]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     cg.add_define(\"USE_WEBSERVER_VERSION\", config[CONF_VERSION])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "75:         cg.add(paren.set_auth_username(config[CONF_AUTH][CONF_USERNAME]))",
          "76:         cg.add(paren.set_auth_password(config[CONF_AUTH][CONF_PASSWORD]))",
          "77:     if CONF_CSS_INCLUDE in config:",
          "79:         path = CORE.relative_config_path(config[CONF_CSS_INCLUDE])",
          "80:         with open(file=path, encoding=\"utf-8\") as myfile:",
          "81:             cg.add(var.set_css_include(myfile.read()))",
          "82:     if CONF_JS_INCLUDE in config:",
          "84:         path = CORE.relative_config_path(config[CONF_JS_INCLUDE])",
          "85:         with open(file=path, encoding=\"utf-8\") as myfile:",
          "86:             cg.add(var.set_js_include(myfile.read()))",
          "87:     cg.add(var.set_include_internal(config[CONF_INCLUDE_INTERNAL]))",
          "",
          "[Removed Lines]",
          "78:         cg.add_define(\"WEBSERVER_CSS_INCLUDE\")",
          "83:         cg.add_define(\"WEBSERVER_JS_INCLUDE\")",
          "",
          "[Added Lines]",
          "103:         cg.add_define(\"USE_WEBSERVER_CSS_INCLUDE\")",
          "108:         cg.add_define(\"USE_WEBSERVER_JS_INCLUDE\")",
          "113:     if CONF_LOCAL in config and config[CONF_LOCAL]:",
          "114:         cg.add_define(\"USE_WEBSERVER_LOCAL\")",
          "",
          "---------------"
        ],
        "esphome/components/web_server/server_index.h||esphome/components/web_server/server_index.h": [
          "File: esphome/components/web_server/server_index.h -> esphome/components/web_server/server_index.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include \"esphome/core/hal.h\"",
          "4: namespace esphome {",
          "6: namespace web_server {",
          "8: const uint8_t INDEX_GZ[] PROGMEM = {",
          "9:     0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xbd, 0x7d, 0xd9, 0x76, 0xe3, 0xc6, 0x92, 0xe0, 0xf3,",
          "10:     0x9c, 0x33, 0x7f, 0x30, 0x2f, 0x10, 0xac, 0x56, 0x01, 0x16, 0x08, 0x91, 0x54, 0x6d, 0x06, 0x05, 0xf2, 0xca, 0x55,",
          "11:     0xe5, 0x5b, 0x65, 0xd7, 0xe6, 0x92, 0xaa, 0xbc, 0xc8, 0x74, 0x09, 0x22, 0x93, 0x22, 0x5c, 0x20, 0x40, 0x03, 0x49,",
          "12:     0x2d, 0xa6, 0xd0, 0xa7, 0x9f, 0xfa, 0x69, 0xce, 0x99, 0xf5, 0xa1, 0x5f, 0xe6, 0xf4, 0xcb, 0x7c, 0xc4, 0x7c, 0xcf,",
          "13:     0xfd, 0x81, 0xe9, 0x4f, 0x98, 0x88, 0xc8, 0x05, 0x09, 0x90, 0x5a, 0xec, 0xf6, 0xdc, 0x53, 0x8b, 0x80, 0x5c, 0x23,",
          "14:     0x23, 0x23, 0x63, 0x4f, 0x68, 0x6f, 0x63, 0x9c, 0x8d, 0xf8, 0xe5, 0x9c, 0x59, 0x53, 0x3e, 0x4b, 0xfa, 0x7b, 0xf2,",
          "15:     0x7f, 0x16, 0x8d, 0xfb, 0x7b, 0x49, 0x9c, 0x7e, 0xb2, 0x72, 0x96, 0x84, 0xf1, 0x28, 0x4b, 0xad, 0x69, 0xce, 0x26,",
          "16:     0xe1, 0x38, 0xe2, 0x51, 0x10, 0xcf, 0xa2, 0x53, 0x66, 0xed, 0xf4, 0xf7, 0x66, 0x8c, 0x47, 0xd6, 0x68, 0x1a, 0xe5,",
          "17:     0x05, 0xe3, 0xe1, 0xfb, 0xc3, 0xaf, 0x5a, 0x8f, 0xfb, 0x7b, 0xc5, 0x28, 0x8f, 0xe7, 0xdc, 0xc2, 0x21, 0xc3, 0x59,",
          "18:     0x36, 0x5e, 0x24, 0xac, 0x7f, 0x16, 0xe5, 0xd6, 0x3e, 0x0b, 0xdf, 0x9c, 0xfc, 0xc2, 0x46, 0xdc, 0x1f, 0xb3, 0x49,",
          "19:     0x9c, 0xb2, 0xb7, 0x79, 0x36, 0x67, 0x39, 0xbf, 0xf4, 0x2e, 0xd6, 0x57, 0xc4, 0xac, 0xf0, 0x9e, 0xe9, 0xaa, 0x53,",
          "20:     0xc6, 0xdf, 0x9c, 0xa7, 0xaa, 0xcf, 0x53, 0x26, 0x26, 0xc9, 0xf2, 0xc2, 0xe3, 0xd7, 0xb4, 0x39, 0xb8, 0x9c, 0x9d,",
          "21:     0x64, 0x49, 0xe1, 0x1d, 0xe8, 0xfa, 0x79, 0x9e, 0xf1, 0x0c, 0xc1, 0xf2, 0xa7, 0x51, 0x61, 0xb4, 0xf4, 0x3e, 0xad,",
          "22:     0x69, 0x32, 0x97, 0x95, 0x2f, 0x8a, 0x67, 0xe9, 0x62, 0xc6, 0xf2, 0xe8, 0x24, 0x61, 0x5e, 0xc1, 0x42, 0x87, 0x79,",
          "23:     0xdc, 0x8b, 0xdd, 0xb0, 0xcf, 0xad, 0x38, 0xb5, 0xd8, 0x60, 0x9f, 0x51, 0xc9, 0x92, 0xe9, 0x56, 0xc1, 0x46, 0xdb,",
          "24:     0x03, 0x74, 0x4d, 0xe2, 0xd3, 0x85, 0x7e, 0x3f, 0xcf, 0x63, 0xae, 0x9e, 0xcf, 0xa2, 0x64, 0xc1, 0x82, 0xb8, 0x74,",
          "25:     0x03, 0x76, 0xc4, 0x87, 0x61, 0xec, 0x3d, 0xa1, 0x41, 0x61, 0xc8, 0xe5, 0x24, 0xcb, 0x1d, 0xc4, 0x55, 0x8c, 0x63,",
          "26:     0xf3, 0xab, 0x2b, 0x87, 0x87, 0xcb, 0xd2, 0x75, 0x0f, 0x98, 0x3f, 0x8a, 0x92, 0xc4, 0xc1, 0x89, 0xb7, 0xb6, 0x0a,",
          "27:     0x9c, 0x31, 0xf6, 0xf8, 0x51, 0x3c, 0x74, 0x7b, 0xf1, 0xc4, 0xe1, 0xcc, 0xad, 0xfa, 0x65, 0x13, 0x8b, 0x33, 0x87,",
          "28:     0xbb, 0xee, 0xa7, 0xeb, 0xfb, 0xe4, 0x8c, 0x2f, 0x72, 0x80, 0xbd, 0xf4, 0xde, 0xa8, 0x99, 0x2f, 0xb0, 0xfe, 0x19,",
          "29:     0x75, 0xec, 0x01, 0xec, 0x05, 0xb7, 0x3e, 0x84, 0xe7, 0x71, 0x3a, 0xce, 0xce, 0xfd, 0x83, 0x69, 0x04, 0x3f, 0xde,",
          "30:     0x65, 0x19, 0xdf, 0xda, 0x72, 0xce, 0xb2, 0x78, 0x6c, 0xb5, 0xc3, 0xd0, 0xac, 0xbc, 0x7c, 0x72, 0x70, 0x70, 0x75,",
          "31:     0xd5, 0x28, 0xf0, 0xd3, 0x88, 0xc7, 0x67, 0x4c, 0x74, 0x06, 0x00, 0x6c, 0xf8, 0x39, 0xe7, 0x6c, 0x7c, 0xc0, 0x2f,",
          "32:     0x13, 0x28, 0x65, 0x8c, 0x17, 0x36, 0xac, 0xf1, 0x69, 0x36, 0x02, 0xb4, 0xa5, 0x06, 0xe2, 0xa1, 0x69, 0xce, 0xe6,",
          "33:     0x49, 0x34, 0x62, 0x58, 0x0f, 0x23, 0x55, 0x3d, 0xaa, 0x46, 0xde, 0x57, 0xa1, 0xd8, 0x5e, 0xc7, 0xf5, 0x62, 0x16,",
          "34:     0xa6, 0xec, 0xdc, 0x7a, 0x15, 0xcd, 0x7b, 0xa3, 0x24, 0x2a, 0x0a, 0xa0, 0xd7, 0x25, 0x2d, 0x21, 0x5f, 0x8c, 0x80,",
          "35:     0x40, 0x68, 0x81, 0x4b, 0x44, 0xd3, 0x34, 0x2e, 0xfc, 0x8f, 0x9b, 0xa3, 0xa2, 0x78, 0xc7, 0x8a, 0x45, 0xc2, 0x37,",
          "36:     0x43, 0xd8, 0x0b, 0xbe, 0x11, 0x86, 0x5f, 0xb9, 0x7c, 0x9a, 0x67, 0xe7, 0xd6, 0xb3, 0x3c, 0x87, 0xe6, 0x36, 0x4c,",
          "37:     0x29, 0x1a, 0x58, 0x71, 0x61, 0xa5, 0x19, 0xb7, 0xf4, 0x60, 0xb8, 0x81, 0xbe, 0xf5, 0xbe, 0x60, 0xd6, 0xf1, 0x22,",
          "38:     0x2d, 0xa2, 0x09, 0x83, 0xa6, 0xc7, 0x56, 0x96, 0x5b, 0xc7, 0x30, 0xe8, 0x31, 0x6c, 0x59, 0xc1, 0xe1, 0xd4, 0xf8,",
          "39:     0xb6, 0xdb, 0xa3, 0xb9, 0xa0, 0xf0, 0x90, 0x5d, 0xf0, 0x90, 0x95, 0x40, 0x98, 0x56, 0xa1, 0x97, 0xe1, 0xb8, 0xcb,",
          "40:     0x04, 0x0a, 0x58, 0x18, 0x33, 0x24, 0x59, 0xc7, 0x6c, 0xac, 0x37, 0xe7, 0xc3, 0xd6, 0x96, 0xc6, 0x35, 0xe0, 0xc4,",
          "41:     0x81, 0xb6, 0x45, 0xa3, 0xad, 0x27, 0x16, 0x5e, 0x43, 0x91, 0xeb, 0x31, 0x5f, 0xa2, 0xef, 0xe0, 0x32, 0x1d, 0xd5,",
          "42:     0xc7, 0x86, 0xca, 0x92, 0x67, 0x07, 0x3c, 0x8f, 0xd3, 0x53, 0x00, 0x42, 0xce, 0x64, 0x36, 0x29, 0x4b, 0xb1, 0xf9,",
          "43:     0x4f, 0x58, 0xc8, 0xc2, 0x3e, 0x8e, 0x9e, 0x33, 0xc7, 0x2e, 0xa8, 0x87, 0x1d, 0x86, 0x88, 0x7a, 0x20, 0x30, 0x36,",
          "44:     0x60, 0x01, 0xdb, 0xb6, 0x6d, 0xef, 0x2b, 0xd7, 0x3b, 0x47, 0x0a, 0xf2, 0x7d, 0x9f, 0xc8, 0x57, 0x74, 0x8e, 0xc3,",
          "45:     0x0e, 0x02, 0xed, 0x27, 0x2c, 0x3d, 0xe5, 0xd3, 0x01, 0x3b, 0x6a, 0x0f, 0x03, 0x0e, 0x50, 0x8d, 0x17, 0x23, 0xe6,",
          "46:     0x20, 0x3d, 0x7a, 0x05, 0x1e, 0x9f, 0x6d, 0x07, 0xa6, 0xc0, 0x8d, 0xd9, 0xa0, 0x35, 0xd6, 0xb6, 0xc6, 0x55, 0x24,",
          "47:     0xaa, 0x00, 0x43, 0x3a, 0xb7, 0xe1, 0x84, 0x9d, 0xb0, 0xdc, 0x80, 0x43, 0x37, 0xeb, 0xd5, 0x76, 0x70, 0x01, 0x3b,",
          "48:     0x04, 0xfd, 0xac, 0xc9, 0x22, 0x1d, 0xf1, 0x18, 0x18, 0x97, 0xbd, 0x0d, 0xe0, 0x8a, 0x9d, 0xd3, 0x1b, 0x67, 0xbb,",
          "49:     0xa5, 0xeb, 0xc4, 0xee, 0x36, 0x3b, 0x2a, 0xb6, 0x3b, 0x43, 0x0f, 0xa1, 0xd4, 0xc8, 0x97, 0x0b, 0x8f, 0x61, 0x81,",
          "50:     0x70, 0x46, 0x98, 0x3e, 0x9e, 0x1f, 0x06, 0xcc, 0x5f, 0xa5, 0xe3, 0x90, 0xfb, 0xb3, 0x68, 0x8e, 0xab, 0x61, 0x44,",
          "51:     0x03, 0x51, 0x3a, 0x42, 0xe8, 0x6a, 0xfb, 0x82, 0x18, 0xf3, 0x2b, 0x12, 0x70, 0x01, 0x21, 0x70, 0x66, 0x9f, 0x45,",
          "52:     0xa3, 0x29, 0x1c, 0xf1, 0x0a, 0x71, 0x63, 0x75, 0x1c, 0x46, 0x39, 0x8b, 0x38, 0x7b, 0x96, 0x30, 0x7c, 0xc3, 0x1d,",
          "53:     0x80, 0x9e, 0xb6, 0xeb, 0x15, 0xea, 0xdc, 0x25, 0x31, 0x7f, 0x9d, 0xc1, 0x3c, 0x3d, 0x41, 0x24, 0x40, 0xc5, 0xc5,",
          "54:     0xd6, 0x56, 0x8c, 0x24, 0xb2, 0xcf, 0x61, 0xb7, 0x4e, 0x16, 0xc0, 0x04, 0xec, 0x14, 0x5b, 0xd8, 0x80, 0x6d, 0x2f,",
          "55:     0xf6, 0x39, 0x20, 0xf1, 0x49, 0x96, 0x72, 0x18, 0x0e, 0xe0, 0xd5, 0x14, 0xe4, 0x47, 0xf3, 0x39, 0x4b, 0xc7, 0x4f,",
          "56:     0xa6, 0x71, 0x32, 0x06, 0x6c, 0x94, 0xb0, 0xde, 0x8c, 0x85, 0xb0, 0x4e, 0x58, 0x4c, 0x70, 0xf3, 0x8a, 0x68, 0xfb,",
          "57:     0x90, 0x90, 0x79, 0x68, 0xdb, 0x3d, 0xe4, 0x40, 0x72, 0x15, 0xc8, 0x83, 0x68, 0xe3, 0xde, 0x01, 0xeb, 0x2f, 0x5c,",
          "58:     0xbe, 0x1d, 0xc6, 0x7a, 0x1b, 0x25, 0x82, 0x9f, 0x20, 0xa7, 0x01, 0xfc, 0x33, 0xe0, 0x81, 0x3d, 0x64, 0x5c, 0xdf,",
          "59:     0x49, 0xae, 0x93, 0x32, 0xb5, 0x42, 0x40, 0xc0, 0x08, 0x39, 0x88, 0xc4, 0xc1, 0xdb, 0x2c, 0xb9, 0x9c, 0xc4, 0x49,",
          "60:     0x72, 0xb0, 0x98, 0xcf, 0xb3, 0x9c, 0x7b, 0x5f, 0x87, 0x4b, 0x9e, 0x55, 0x6b, 0xa5, 0x43, 0x5e, 0x9c, 0xc7, 0x1c,",
          "61:     0x11, 0xea, 0x2e, 0x47, 0x11, 0x6c, 0xf5, 0x97, 0x59, 0x96, 0xb0, 0x28, 0x85, 0x65, 0xb0, 0x81, 0x6d, 0x07, 0xe9,",
          "62:     0x22, 0x49, 0x7a, 0x27, 0x30, 0xec, 0xa7, 0x1e, 0x55, 0x0b, 0x8e, 0x1f, 0xd0, 0xf3, 0x7e, 0x9e, 0x47, 0x97, 0xd0,",
          "63:     0x10, 0xdb, 0x00, 0x2d, 0xc2, 0x6e, 0x7d, 0x7d, 0xf0, 0xe6, 0xb5, 0x2f, 0x08, 0x3f, 0x9e, 0x5c, 0x02, 0xa0, 0x65,",
          "64:     0xc5, 0x35, 0x27, 0x79, 0x36, 0x6b, 0x4c, 0x8d, 0x78, 0x88, 0x43, 0xd6, 0xbb, 0x06, 0x84, 0x98, 0x46, 0x86, 0x5d,",
          "65:     0x62, 0x26, 0x04, 0xaf, 0x89, 0x9e, 0x65, 0x25, 0x9e, 0x81, 0x01, 0x3e, 0x04, 0xa2, 0x18, 0xa6, 0xbc, 0x19, 0x5a,",
          "66:     0x9e, 0x5f, 0x2e, 0xe3, 0x90, 0xe0, 0x9c, 0xa3, 0xfc, 0x45, 0x18, 0x47, 0x11, 0xcc, 0xbe, 0x14, 0x03, 0x96, 0x0a,",
          "67:     0xe2, 0xb8, 0x2c, 0xbd, 0x44, 0x13, 0x31, 0x72, 0x3c, 0x64, 0x28, 0x1c, 0x8e, 0xd1, 0xd5, 0x15, 0x83, 0x17, 0xd7,",
          "68:     0xfb, 0x26, 0x5c, 0x46, 0x6a, 0x3d, 0x28, 0xa1, 0xf0, 0x7c, 0x05, 0x82, 0x4f, 0xa0, 0x24, 0x3b, 0x03, 0x39, 0x08,",
          "69:     0x70, 0x7e, 0xed, 0x81, 0xfc, 0x4f, 0x10, 0x8a, 0x8d, 0x8e, 0x07, 0x12, 0xf4, 0xc9, 0x34, 0x4a, 0x4f, 0xd9, 0x38,",
          "70:     0x48, 0x58, 0x29, 0x39, 0xef, 0xbe, 0x05, 0x7b, 0x0c, 0xe4, 0x54, 0x58, 0xcf, 0x0f, 0x5f, 0xbd, 0x94, 0x3b, 0x57,",
          "71:     0x63, 0xc6, 0xb0, 0x49, 0x0b, 0x10, 0xab, 0xc0, 0xb6, 0x25, 0x3b, 0x7e, 0xc6, 0x15, 0xf7, 0x16, 0x25, 0x71, 0xf1,",
          "72:     0x7e, 0x0e, 0x2a, 0x06, 0x7b, 0x0b, 0xc3, 0xc0, 0xf4, 0x21, 0x4c, 0x45, 0xe5, 0x30, 0x9f, 0xa8, 0x18, 0xeb, 0x22,",
          "73:     0xe8, 0x2c, 0x56, 0x2a, 0x5e, 0x33, 0xc7, 0x2d, 0x81, 0x54, 0x79, 0x3c, 0xb2, 0xa2, 0xf1, 0xf8, 0x45, 0x1a, 0xf3,",
          "74:     0x38, 0x4a, 0xe2, 0xdf, 0x08, 0x93, 0x4b, 0xa4, 0x31, 0xde, 0x93, 0x9b, 0x00, 0x6b, 0xa7, 0x1e, 0x89, 0xab, 0x98,",
          "75:     0xec, 0x06, 0x21, 0x43, 0x70, 0xcb, 0x24, 0x3c, 0x1a, 0x4a, 0xf0, 0x12, 0x7f, 0xbe, 0x28, 0xa6, 0x88, 0x58, 0x39,",
          "76:     0x30, 0x32, 0xf2, 0xec, 0xa4, 0x60, 0xf9, 0x19, 0x1b, 0x6b, 0x0a, 0x28, 0x60, 0x55, 0xd4, 0x1c, 0x94, 0x17, 0x9a,",
          "77:     0xd1, 0x51, 0x32, 0x94, 0xc1, 0x50, 0x3d, 0x93, 0xcd, 0x32, 0x49, 0xcc, 0x5a, 0xc3, 0xd1, 0x5c, 0xc0, 0x11, 0x4a,",
          "78:     0x85, 0xe4, 0x04, 0x45, 0xa8, 0x56, 0x38, 0x05, 0x2e, 0x04, 0x52, 0xc1, 0x3c, 0xe6, 0x4a, 0x92, 0x3d, 0x5b, 0x90,",
          "79:     0x48, 0x28, 0xa0, 0x23, 0x1c, 0x64, 0x82, 0xb4, 0x70, 0xe1, 0x54, 0x01, 0x97, 0x97, 0xe0, 0x0a, 0x2e, 0xa2, 0xd4,",
          "80:     0x1c, 0x24, 0x80, 0xf0, 0x1b, 0x21, 0x0b, 0x7d, 0x6c, 0x41, 0x64, 0xe0, 0xeb, 0x9d, 0x07, 0xc4, 0xca, 0x75, 0x57,",
          "81:     0x0b, 0xf1, 0xae, 0x01, 0x1b, 0x27, 0x46, 0x7a, 0xf2, 0x36, 0xb8, 0x9f, 0x66, 0xfb, 0xa3, 0x11, 0x2b, 0x8a, 0x2c,",
          "82:     0xdf, 0xda, 0xda, 0xa0, 0xf6, 0xd7, 0x29, 0x5a, 0x80, 0x49, 0x57, 0xf3, 0x3a, 0xbb, 0x20, 0x09, 0x6e, 0x8a, 0x15,",
          "83:     0x25, 0xd3, 0x03, 0xfb, 0xe3, 0x47, 0xe0, 0xd9, 0x9e, 0x44, 0x03, 0x60, 0x7d, 0x55, 0xf1, 0x13, 0xfa, 0x4c, 0x1d,",
          "84:     0x33, 0x6b, 0xf5, 0x4b, 0xa7, 0x0e, 0x92, 0x07, 0xc3, 0xba, 0xa5, 0xb1, 0xa1, 0x6b, 0x87, 0xc6, 0xdd, 0x90, 0x02,",
          "85:     0x72, 0x79, 0x4a, 0x22, 0xdb, 0xd8, 0x46, 0xd0, 0xda, 0x4a, 0x8f, 0x50, 0xaf, 0x56, 0x93, 0x13, 0xa0, 0x47, 0x6c,",
          "86:     0xd8, 0x93, 0xf5, 0x61, 0x21, 0x30, 0x97, 0xb3, 0x5f, 0x17, 0xac, 0xe0, 0x82, 0x74, 0x61, 0xdc, 0x1c, 0xc6, 0x2d,",
          "87:     0x57, 0xb4, 0xc3, 0x9a, 0xee, 0xb8, 0x0e, 0xb6, 0x37, 0x73, 0x94, 0x63, 0x05, 0x52, 0xf2, 0xcd, 0xe4, 0x84, 0xb0,",
          "88:     0x32, 0xf7, 0xea, 0xea, 0x1b, 0x35, 0x48, 0xb5, 0x95, 0x5a, 0x07, 0x6a, 0xec, 0x89, 0xad, 0x9a, 0x8c, 0x6d, 0x57,",
          "89:     0x0a, 0xd4, 0x8d, 0x4e, 0xaf, 0x46, 0x07, 0x70, 0xe6, 0xda, 0x9a, 0xa4, 0x2b, 0x65, 0xfb, 0xad, 0xc2, 0xe9, 0x1b,",
          "90:     0x31, 0x32, 0x69, 0xa3, 0xec, 0x76, 0xea, 0x51, 0x27, 0x1e, 0xda, 0xae, 0xd4, 0x55, 0x8c, 0x61, 0x51, 0x67, 0x0c,",
          "91:     0x4d, 0xa8, 0xe7, 0xba, 0x8b, 0xad, 0x89, 0x8a, 0x85, 0x6a, 0xaf, 0x95, 0x01, 0xc1, 0xc3, 0x23, 0x50, 0x4e, 0xd6,",
          "92:     0xda, 0x07, 0xaf, 0xa3, 0x19, 0x43, 0x8c, 0x7a, 0xd7, 0x35, 0x90, 0x06, 0x04, 0x34, 0x19, 0x36, 0xc5, 0x1b, 0x77,",
          "93:     0x85, 0xd6, 0x54, 0x3f, 0x5f, 0x31, 0x68, 0x11, 0xa0, 0x5f, 0x97, 0x6b, 0xb6, 0x88, 0xe4, 0xa6, 0x24, 0x67, 0x85,",
          "94:     0x1f, 0x51, 0x26, 0xf6, 0x84, 0x04, 0x3c, 0x2c, 0x1e, 0xb6, 0xbf, 0xb1, 0x71, 0xb2, 0x15, 0x53, 0x6b, 0xe4, 0xc8,",
          "95:     0x53, 0x00, 0xcf, 0x24, 0x04, 0x80, 0x5d, 0xd2, 0xcf, 0xda, 0xc1, 0x42, 0xb4, 0x1d, 0x20, 0x1d, 0xf8, 0x93, 0x24,",
          "96:     0xe2, 0x4e, 0x67, 0xa7, 0xed, 0x02, 0x1d, 0x02, 0x13, 0x07, 0x19, 0x01, 0xea, 0x7d, 0xb5, 0x14, 0x86, 0x4b, 0x89,",
          "97:     0x5d, 0xee, 0x83, 0x52, 0x34, 0x8d, 0x27, 0xdc, 0xc9, 0x50, 0x88, 0xb8, 0x25, 0x4b, 0x40, 0xc8, 0xe8, 0x73, 0x05,",
          "98:     0x5c, 0x82, 0x0b, 0xee, 0x22, 0xaa, 0x35, 0x43, 0x53, 0x90, 0x12, 0x97, 0x22, 0x29, 0xa8, 0x20, 0x30, 0x98, 0x4a,",
          "99:     0x4f, 0x51, 0x14, 0xc8, 0xb7, 0x78, 0x20, 0x06, 0x0d, 0x56, 0x34, 0xca, 0x78, 0x10, 0xaf, 0x16, 0x82, 0x18, 0xf6,",
          "100:     0x79, 0xf6, 0x32, 0x3b, 0x67, 0xf9, 0x93, 0x08, 0x61, 0x0f, 0x44, 0xf7, 0x12, 0x38, 0x3d, 0x31, 0x74, 0xd6, 0x53,",
          "101:     0xb4, 0x72, 0x46, 0x8b, 0x86, 0x8d, 0x98, 0xc5, 0x28, 0x08, 0x41, 0xca, 0x11, 0xee, 0x53, 0x3c, 0x52, 0x74, 0xf6,",
          "102:     0x50, 0x94, 0x30, 0x4d, 0x5b, 0xfb, 0x2f, 0xeb, 0xb4, 0x05, 0x23, 0xcc, 0x15, 0xb5, 0xd6, 0x4f, 0xac, 0xeb, 0x49,",
          "103:     0xd9, 0xec, 0x48, 0xda, 0x32, 0x84, 0x19, 0xc8, 0x8f, 0xab, 0xab, 0x4a, 0x49, 0x07, 0x61, 0xaa, 0xb9, 0x39, 0x6a,",
          "104:     0x4e, 0xe2, 0x48, 0xb8, 0x25, 0x08, 0x23, 0x54, 0xbc, 0xf2, 0x2c, 0x49, 0x0c, 0x59, 0xe4, 0xc5, 0x3d, 0xa7, 0x21,",
          "105:     0x8e, 0x00, 0x8a, 0x59, 0x4d, 0x22, 0x0d, 0x78, 0xa0, 0x2b, 0x50, 0x28, 0x29, 0x69, 0xe4, 0x55, 0x4d, 0x04, 0xc4,",
          "106:     0xe9, 0x98, 0xe5, 0xc2, 0x40, 0x93, 0x32, 0x14, 0x26, 0x4c, 0x81, 0xa0, 0xd9, 0x18, 0x38, 0xbc, 0x5a, 0x00, 0xa8,",
          "107:     0x27, 0xfe, 0x34, 0x2b, 0xb8, 0xae, 0x33, 0xa1, 0x8f, 0xaf, 0xae, 0x62, 0x61, 0x2f, 0x22, 0x01, 0xe4, 0x6c, 0x96,",
          "108:     0x9d, 0xb1, 0x35, 0x50, 0xf7, 0xd4, 0x60, 0x26, 0xc8, 0xc6, 0x30, 0x20, 0x44, 0x41, 0xb4, 0xcc, 0x93, 0x78, 0xc4,",
          "109:     0xb4, 0x94, 0x9a, 0xf9, 0xa0, 0xd0, 0xb1, 0x0b, 0xe0, 0x11, 0xcc, 0xed, 0xf7, 0xfb, 0x6d, 0xaf, 0xe3, 0x96, 0x02,",
          "110:     0xe1, 0xcb, 0x15, 0x8c, 0xde, 0x20, 0x1f, 0xa5, 0x0a, 0xbe, 0x8e, 0x17, 0x70, 0xd7, 0x10, 0x8a, 0x5c, 0xd8, 0x49,",
          "111:     0x9e, 0x64, 0xc4, 0xae, 0x37, 0x86, 0x41, 0x39, 0x53, 0x8c, 0x1b, 0x55, 0x5c, 0x71, 0x6c, 0xdf, 0x69, 0xb4, 0x69,",
          "112:     0x72, 0x52, 0x27, 0x4c, 0x6d, 0x8c, 0xdc, 0xf3, 0x42, 0x5b, 0xc0, 0xe6, 0xf6, 0xa0, 0x96, 0x48, 0xd5, 0x40, 0xeb,",
          "113:     0x00, 0xa1, 0xb0, 0x74, 0x9d, 0x95, 0x25, 0x55, 0x9d, 0x25, 0x13, 0xd7, 0x07, 0xe8, 0x0d, 0x93, 0x60, 0xae, 0x43,",
          "114:     0xc1, 0x81, 0x64, 0x08, 0x1c, 0x2d, 0x32, 0xb1, 0x5f, 0x4f, 0x60, 0x7b, 0x4e, 0xa2, 0xd1, 0x27, 0x0d, 0x6e, 0x85,",
          "115:     0xf6, 0x26, 0x19, 0x38, 0x8d, 0x92, 0xd0, 0x60, 0x57, 0xe6, 0xba, 0x15, 0x87, 0xae, 0x1d, 0x14, 0x30, 0xc8, 0x56,",
          "116:     0xc8, 0xbe, 0xb9, 0xd1, 0x4d, 0x6a, 0x97, 0xe4, 0xa1, 0xec, 0x27, 0x4d, 0x25, 0x37, 0x90, 0x1c, 0x57, 0xdc, 0x80,",
          "117:     0x2b, 0xc2, 0x83, 0xad, 0x69, 0x40, 0x02, 0x74, 0x57, 0x8e, 0xe3, 0xe2, 0x7a, 0x14, 0xfc, 0xa9, 0x60, 0x3e, 0x35,",
          "118:     0x66, 0xba, 0x15, 0x52, 0xcd, 0xe1, 0xa4, 0x1a, 0xac, 0x41, 0x93, 0xca, 0x83, 0x62, 0x35, 0xdf, 0xa0, 0xa2, 0x42,",
          "119:     0x14, 0x7f, 0x2a, 0xaa, 0x50, 0x05, 0x43, 0x30, 0x0a, 0x2f, 0x97, 0x04, 0x97, 0xad, 0xb2, 0x16, 0xc9, 0x53, 0x63,",
          "120:     0x12, 0xa9, 0x9a, 0xe4, 0x32, 0x50, 0xb0, 0xe8, 0xb4, 0xfa, 0x52, 0x13, 0x57, 0x2c, 0x37, 0x0d, 0x35, 0x33, 0xc9,",
          "121:     0x95, 0x35, 0xe1, 0x14, 0x68, 0x77, 0x29, 0xed, 0xdd, 0x5c, 0x4f, 0xa1, 0xd6, 0x53, 0xf8, 0x86, 0x0d, 0x65, 0xd2,",
          "122:     0x76, 0x3e, 0x00, 0x75, 0xbf, 0x56, 0x89, 0xfa, 0xa9, 0x8f, 0x8c, 0xd9, 0xd5, 0x4c, 0x17, 0x18, 0x8a, 0x24, 0x93,",
          "123:     0x74, 0x20, 0xe9, 0x0d, 0xd9, 0x46, 0x65, 0x19, 0x65, 0xae, 0x38, 0x20, 0x35, 0xab, 0x34, 0xf3, 0x52, 0xb7, 0xa1,",
          "124:     0xbf, 0x97, 0xa5, 0xc4, 0x13, 0x17, 0x98, 0x89, 0xbd, 0x9b, 0x70, 0xe3, 0xa5, 0x61, 0x26, 0xb4, 0x5f, 0xa1, 0xec,",
          "125:     0xd4, 0x30, 0x94, 0x4a, 0x16, 0x88, 0x63, 0xe3, 0x6b, 0xa5, 0x19, 0x64, 0xfe, 0x1a, 0x7d, 0x0a, 0x40, 0x49, 0x60,",
          "126:     0xf3, 0x35, 0x96, 0xbc, 0x28, 0xac, 0xe3, 0x71, 0x83, 0xf0, 0x58, 0xb1, 0xd0, 0x1a, 0xcb, 0xd7, 0xf2, 0x2c, 0xf6,",
          "127:     0x6b, 0x26, 0xa1, 0x89, 0xc9, 0x62, 0x50, 0x04, 0xb6, 0x72, 0x44, 0x54, 0xb2, 0x2d, 0x19, 0x24, 0x64, 0x90, 0xae,",
          "128:     0x22, 0xbd, 0x36, 0x92, 0x81, 0xeb, 0x54, 0x70, 0xb4, 0x74, 0x18, 0x46, 0x0e, 0x1a, 0xee, 0xb4, 0x17, 0x2b, 0x88,",
          "129:     0x6c, 0xea, 0x9b, 0x44, 0x8a, 0x68, 0x9c, 0x16, 0xa8, 0xc2, 0x99, 0x32, 0xdd, 0x71, 0x60, 0x39, 0xc0, 0xf6, 0x57,",
          "130:     0x48, 0x6f, 0xad, 0xda, 0xe9, 0xfa, 0x95, 0xc1, 0x77, 0x75, 0x95, 0x20, 0x3d, 0x08, 0x85, 0x17, 0xf6, 0x6c, 0xa0,",
          "131:     0x78, 0xef, 0xfe, 0x4b, 0x6c, 0x45, 0xfa, 0x67, 0x55, 0x52, 0x59, 0x0a, 0x35, 0xca, 0xad, 0xef, 0x13, 0x33, 0x5d,",
          "132:     0x8b, 0xaa, 0xe2, 0xc0, 0xe0, 0xea, 0x07, 0x4a, 0x60, 0x57, 0x4b, 0x3e, 0x90, 0x43, 0xc7, 0xae, 0xeb, 0x06, 0x05,",
          "133:     0x19, 0x2f, 0x1b, 0xeb, 0x4c, 0xc8, 0xad, 0x2d, 0xd3, 0x66, 0x3a, 0xd3, 0xc3, 0x3f, 0x71, 0x50, 0x38, 0x17, 0x97,",
          "134:     0x29, 0x69, 0x30, 0x4f, 0x94, 0x38, 0x5a, 0x31, 0x40, 0xdb, 0x3d, 0xb4, 0xb4, 0xa3, 0xf3, 0x28, 0xe6, 0x96, 0x1e,",
          "135:     0x45, 0x58, 0xda, 0xc8, 0x9f, 0xa4, 0xd2, 0x01, 0xeb, 0x42, 0x15, 0x92, 0x8c, 0x70, 0x53, 0x17, 0x2d, 0x46, 0x53,",
          "136:     0x86, 0x2e, 0x70, 0xa5, 0x4f, 0x98, 0xbc, 0x67, 0x03, 0xd7, 0x2d, 0x06, 0x66, 0xeb, 0x61, 0x2f, 0x9b, 0xdd, 0x6b,",
          "137:     0xea, 0x3f, 0xec, 0x11, 0xf0, 0xb6, 0x99, 0xaa, 0x2b, 0x1b, 0xef, 0x92, 0x45, 0xa2, 0x87, 0x6d, 0xdd, 0xd8, 0x52,",
          "138:     0xd7, 0xef, 0x35, 0xcc, 0xeb, 0xca, 0x30, 0xaf, 0x09, 0xd5, 0x86, 0x1c, 0x56, 0x66, 0x0e, 0x33, 0x0d, 0x79, 0xb1,",
          "139:     0x83, 0x6e, 0x4f, 0x38, 0x85, 0xc0, 0x88, 0xd0, 0xfa, 0xa0, 0xa2, 0x06, 0x42, 0x25, 0x57, 0x52, 0x35, 0x5b, 0x24,",
          "140:     0x63, 0x09, 0x2c, 0x98, 0xb0, 0x5c, 0xd2, 0xd1, 0x79, 0x9c, 0x24, 0x55, 0xe9, 0x9f, 0xca, 0xe0, 0xc5, 0xb0, 0xb7,",
          "141:     0xb1, 0x76, 0xb1, 0xa2, 0x85, 0x02, 0xc1, 0xd5, 0x4a, 0xd8, 0x7b, 0xc7, 0xad, 0xf6, 0x5d, 0x78, 0x1c, 0xb9, 0xe9,",
          "142:     0x8d, 0x80, 0x7a, 0xf4, 0xb0, 0x6a, 0xd2, 0xde, 0x7f, 0x86, 0x2e, 0x35, 0x63, 0x3d, 0x28, 0xce, 0xa8, 0xf8, 0x77,",
          "143:     0xe9, 0x53, 0xbf, 0x73, 0x79, 0xb7, 0x8a, 0xae, 0xa6, 0x43, 0x45, 0x39, 0x3e, 0x4c, 0x17, 0x4b, 0x5b, 0x39, 0x02,",
          "144:     0x72, 0x3d, 0x2c, 0x72, 0x01, 0x13, 0x35, 0x58, 0x50, 0x8a, 0x55, 0x6b, 0x61, 0xf7, 0xf2, 0x36, 0x67, 0x0e, 0xb9,",
          "145:     0xc2, 0x45, 0xff, 0x27, 0xd9, 0x6c, 0x8e, 0x9a, 0x59, 0x83, 0xa8, 0xa1, 0xc1, 0xfb, 0x46, 0x7d, 0xb9, 0xa6, 0xac,",
          "146:     0xd6, 0x87, 0x4e, 0x64, 0x8d, 0x9e, 0xb4, 0xa1, 0x0c, 0x06, 0xd5, 0x42, 0x17, 0xd5, 0xf5, 0xe6, 0x26, 0x8b, 0x59,",
          "147:     0x47, 0xe3, 0x3e, 0xc9, 0x6d, 0xad, 0x4d, 0x7a, 0x1a, 0x07, 0xc4, 0x93, 0x24, 0xc1, 0x9b, 0x04, 0x50, 0x56, 0xc8,",
          "148:     0x59, 0x96, 0x0d, 0xf4, 0x2d, 0xcb, 0x12, 0xf7, 0xef, 0xdb, 0xde, 0x7e, 0xcd, 0xb2, 0xf6, 0xf6, 0xaf, 0x37, 0x91,",
          "149:     0xab, 0x3a, 0x69, 0x41, 0x1e, 0x0d, 0xa1, 0x68, 0x45, 0xa7, 0x0c, 0x97, 0xb3, 0x6c, 0xcc, 0x02, 0x1b, 0xba, 0xa7,",
          "150:     0x76, 0xa9, 0xa4, 0x32, 0x1c, 0x8e, 0x94, 0x39, 0xcb, 0x77, 0x75, 0x4f, 0x6a, 0xb0, 0x0f, 0x24, 0xa0, 0xd5, 0x85,",
          "151:     0xef, 0xc2, 0xd3, 0x24, 0x3b, 0x89, 0x92, 0x43, 0x21, 0xc0, 0x6b, 0x2d, 0x3f, 0x80, 0xc9, 0x48, 0x1a, 0xab, 0x21,",
          "152:     0xa4, 0xbe, 0x1b, 0x7c, 0x17, 0xdc, 0xde, 0xa3, 0xb2, 0x56, 0xec, 0x8e, 0xdf, 0xf6, 0x3b, 0xb6, 0xf2, 0x88, 0xbd,",
          "153:     0x34, 0xa7, 0x03, 0x89, 0x53, 0x00, 0x66, 0x0e, 0x41, 0x92, 0x15, 0x5e, 0xc4, 0xc2, 0x97, 0x83, 0x97, 0xca, 0xa4,",
          "154:     0xce, 0xc0, 0x84, 0x00, 0x23, 0x3f, 0x89, 0x79, 0x0b, 0xe3, 0x91, 0xb6, 0xb7, 0x14, 0x15, 0xe8, 0x57, 0x24, 0xbf,",
          "155:     0x74, 0xa9, 0xac, 0x41, 0xef, 0x63, 0x78, 0x0c, 0xcd, 0x36, 0x37, 0x97, 0xce, 0xab, 0x88, 0x4f, 0xfd, 0x3c, 0x4a,",
          "156:     0xc7, 0xd9, 0xcc, 0x71, 0xb7, 0x6d, 0xdb, 0xf5, 0x0b, 0xb2, 0x44, 0xbe, 0x70, 0xcb, 0xcd, 0x63, 0x6f, 0xca, 0x42,",
          "157:     0x7b, 0x60, 0x6f, 0x7f, 0xf4, 0xde, 0xb2, 0xf0, 0x78, 0x6f, 0x73, 0x39, 0x65, 0x65, 0xff, 0xd8, 0xbb, 0xd0, 0x3e,",
          "158:     0x77, 0xef, 0x2d, 0x72, 0x19, 0xe8, 0x15, 0xf6, 0x2f, 0x24, 0x18, 0x40, 0x6e, 0xe4, 0x7f, 0x07, 0x2e, 0xf7, 0x9e,",
          "159:     0x02, 0x22, 0xd2, 0x4f, 0x7b, 0x75, 0x65, 0x67, 0xe4, 0x31, 0xb0, 0x37, 0xb4, 0xb1, 0xba, 0xb5, 0x55, 0x89, 0xf9,",
          "160:     0xaa, 0xd4, 0x1b, 0xb1, 0xb0, 0x66, 0xa9, 0x7b, 0xef, 0x29, 0xb4, 0x52, 0x3f, 0xc8, 0x23, 0x46, 0x42, 0x73, 0x55,",
          "161:     0x4f, 0x70, 0x8c, 0x23, 0xbe, 0xfe, 0x58, 0x1f, 0x09, 0x2f, 0x85, 0x1f, 0x83, 0xf6, 0x12, 0x81, 0xf8, 0x06, 0x03,",
          "162:     0xc7, 0x3b, 0x0c, 0x77, 0xf6, 0x9c, 0x41, 0xe0, 0x6c, 0xb4, 0x5a, 0x57, 0x3f, 0xed, 0x1c, 0xfd, 0x1c, 0xb5, 0x7e,",
          "163:     0xdb, 0x6f, 0xfd, 0x38, 0x74, 0xaf, 0x9c, 0x9f, 0x76, 0x06, 0x47, 0xf2, 0xed, 0xe8, 0xe7, 0xfe, 0x4f, 0xc5, 0xf0,",
          "164:     0x73, 0x51, 0xb8, 0xe9, 0xba, 0x3b, 0xa7, 0x60, 0x29, 0x85, 0x3b, 0xad, 0x56, 0x1f, 0x9e, 0x16, 0xf0, 0x84, 0x3f,",
          "165:     0x2f, 0xe1, 0xc7, 0xd5, 0x91, 0xf5, 0x1f, 0x7e, 0x4a, 0xff, 0xe3, 0x4f, 0xf9, 0x10, 0xc7, 0x3c, 0xfa, 0xf9, 0xa7,",
          "166:     0xc2, 0xbe, 0xd7, 0x0f, 0x77, 0x86, 0xdb, 0xae, 0xa3, 0x6b, 0x3e, 0x0f, 0xab, 0x47, 0x68, 0x75, 0xf4, 0xb3, 0x7c,",
          "167:     0xb3, 0xef, 0x1d, 0xef, 0xf5, 0xc3, 0xe1, 0x95, 0x63, 0x5f, 0xdd, 0x73, 0xaf, 0x5c, 0xf7, 0x6a, 0x13, 0xe7, 0x99,",
          "168:     0xc3, 0xe8, 0xf7, 0xe0, 0xe7, 0x19, 0xfc, 0xb4, 0xe1, 0xe7, 0x29, 0xfc, 0xfc, 0x19, 0xba, 0x09, 0xff, 0xdb, 0x15,",
          "169:     0xf9, 0x42, 0xae, 0x30, 0x60, 0x11, 0xc1, 0x2e, 0xb8, 0x9b, 0x3b, 0xb1, 0x37, 0x21, 0xa4, 0xc1, 0x39, 0xf4, 0x7d,",
          "170:     0x1f, 0xdd, 0xa4, 0xce, 0xf2, 0xe3, 0x26, 0x6c, 0x3a, 0x52, 0xce, 0x66, 0xc0, 0x3c, 0xe1, 0x39, 0x28, 0x02, 0x2e,",
          "171:     0x62, 0xab, 0x05, 0x06, 0x57, 0xbd, 0x45, 0x38, 0x61, 0x0e, 0x28, 0x05, 0x87, 0x0c, 0x1f, 0xba, 0xae, 0xf7, 0x4c,",
          "172:     0xc6, 0x0c, 0xf1, 0x9c, 0x0b, 0xd2, 0x4a, 0x33, 0xa1, 0xd2, 0xd8, 0xae, 0x37, 0x5f, 0x53, 0x09, 0xc7, 0x3a, 0x3d,",
          "173:     0x85, 0xba, 0x4d, 0x11, 0x68, 0xfb, 0x8e, 0x45, 0x9f, 0xf0, 0x48, 0x3e, 0x37, 0x82, 0xc0, 0x2b, 0x9a, 0x7c, 0x53,",
          "174:     0x69, 0x34, 0x74, 0x44, 0x61, 0x8e, 0x7d, 0xc9, 0x60, 0x86, 0x15, 0x15, 0x91, 0x93, 0xd0, 0x14, 0x9a, 0x2d, 0x4c,",
          "175:     0xfe, 0x36, 0xca, 0xf9, 0x66, 0xa5, 0xd8, 0x86, 0x35, 0x4d, 0xb6, 0xa9, 0xe9, 0xdf, 0x61, 0x0a, 0x54, 0x2d, 0x29,",
          "176:     0xfe, 0x61, 0x8e, 0x1f, 0xa6, 0xb4, 0xac, 0xd7, 0x0e, 0x07, 0x0b, 0xbd, 0x00, 0xbe, 0x23, 0xfa, 0x39, 0x6f, 0x51,",
          "177:     0x8c, 0xc1, 0x5f, 0xe9, 0x66, 0xf0, 0xc4, 0x7c, 0xe8, 0xa2, 0x59, 0x96, 0xda, 0xb9, 0x95, 0x22, 0xbb, 0x7f, 0x81,",
          "178:     0x27, 0x23, 0x2d, 0xbd, 0x83, 0x50, 0x9d, 0x98, 0xc3, 0x9c, 0xb1, 0xef, 0xa2, 0xe4, 0x13, 0xcb, 0x9d, 0x0b, 0xaf,",
          "179:     0xd3, 0xfd, 0x82, 0x3a, 0x7b, 0xa8, 0x9b, 0xbd, 0xae, 0xc2, 0x68, 0x4a, 0x2d, 0x50, 0x21, 0xc2, 0x56, 0xc7, 0x43,",
          "180:     0x8e, 0x41, 0x28, 0xc8, 0xbd, 0x2c, 0xec, 0x12, 0x85, 0xdb, 0x7b, 0xc5, 0xd9, 0x69, 0xdf, 0x0e, 0x6c, 0x1b, 0x34,",
          "181:     0xfe, 0x43, 0x72, 0x5b, 0x09, 0xc5, 0x02, 0x14, 0xb2, 0xbd, 0xb8, 0xc7, 0xb7, 0xb7, 0x2b, 0x87, 0x13, 0x06, 0xd2,",
          "182:     0xa9, 0x7b, 0xe2, 0x45, 0xde, 0x34, 0x84, 0x01, 0x47, 0xd0, 0x0c, 0xbb, 0xf4, 0x46, 0x7b, 0xb1, 0x9c, 0x06, 0x7d,",
          "183:     0x21, 0x7e, 0x12, 0x15, 0xfc, 0x05, 0xfa, 0x23, 0xc2, 0x11, 0x2a, 0xfb, 0x3e, 0xbb, 0x60, 0x23, 0xa5, 0x67, 0x00,",
          "184:     0xa2, 0x22, 0xb7, 0xe7, 0x8e, 0x42, 0xa3, 0x19, 0xcc, 0x1d, 0x86, 0x87, 0x03, 0x1b, 0xce, 0x12, 0x9c, 0xca, 0x30,",
          "185:     0x3a, 0xea, 0x0c, 0x07, 0x69, 0x08, 0xbc, 0x56, 0xe3, 0x56, 0x16, 0x2d, 0x6a, 0x45, 0xdd, 0xe1, 0xc0, 0x39, 0x05,",
          "186:     0x25, 0x1d, 0x74, 0x71, 0x07, 0xdf, 0xd0, 0x43, 0x91, 0x87, 0xef, 0xd8, 0xe9, 0xb3, 0x8b, 0xb9, 0x63, 0xef, 0xed,",
          "187:     0xd8, 0xdb, 0x58, 0xea, 0xd9, 0x40, 0x5e, 0x30, 0x77, 0x78, 0xe9, 0x9a, 0x9d, 0x77, 0x87, 0x08, 0x2a, 0x16, 0xe2,",
          "188:     0xe4, 0x97, 0x03, 0xbb, 0x2f, 0xa6, 0x6e, 0xc3, 0xa0, 0xa9, 0xdc, 0x7e, 0xdc, 0xd1, 0x43, 0x5a, 0xaa, 0xea, 0xaa,",
          "189:     0xa0, 0x83, 0xb2, 0x6e, 0xe0, 0x4c, 0xcd, 0x45, 0xb4, 0x70, 0x32, 0x89, 0x05, 0x30, 0x78, 0xb0, 0x19, 0x4c, 0x6a,",
          "190:     0x74, 0xdb, 0x1d, 0x0e, 0x2e, 0x83, 0x7b, 0xf6, 0x3d, 0xf5, 0x72, 0xc6, 0x02, 0xb0, 0x2e, 0x68, 0xfa, 0x33, 0x94,",
          "191:     0x22, 0xf0, 0x73, 0xce, 0x60, 0x91, 0x97, 0x54, 0x34, 0x96, 0x45, 0x0b, 0x2c, 0x3a, 0x0c, 0x10, 0x54, 0x2f, 0xd7,",
          "192:     0xda, 0x9f, 0xd8, 0x93, 0x71, 0x48, 0xb0, 0x6f, 0x6d, 0xc1, 0xd6, 0x6c, 0x77, 0x86, 0x18, 0x6f, 0xc8, 0x79, 0xf1,",
          "193:     0x5d, 0xcc, 0x41, 0x24, 0xec, 0xf4, 0x6d, 0x77, 0x60, 0x5b, 0xb8, 0xb5, 0xbd, 0x6c, 0x3b, 0x14, 0x18, 0x8e, 0xb7,",
          "194:     0xdf, 0xb2, 0x60, 0xda, 0x0f, 0xdb, 0x03, 0xa7, 0x10, 0xa2, 0x23, 0xc1, 0xb8, 0xa5, 0xe0, 0xe0, 0x6d, 0x6f, 0x0a,",
          "195:     0x0c, 0x1d, 0x29, 0x77, 0xd3, 0xde, 0x56, 0x85, 0x50, 0xf4, 0x71, 0x7b, 0xec, 0x06, 0x31, 0xfc, 0x70, 0x5a, 0x48,",
          "196:     0x34, 0x53, 0xdd, 0x57, 0x4b, 0x66, 0x37, 0x18, 0x2b, 0x8d, 0x3c, 0x09, 0xb3, 0x6d, 0x07, 0x3d, 0xb4, 0xc0, 0x69,",
          "197:     0xf7, 0x06, 0x00, 0xc3, 0xb6, 0xa3, 0x28, 0x6d, 0x47, 0x91, 0x9a, 0xd2, 0xcf, 0x8f, 0xaa, 0xed, 0x60, 0x83, 0x88,",
          "198:     0xf9, 0x95, 0xf4, 0x01, 0xb0, 0x82, 0xc4, 0x2b, 0x86, 0x2a, 0xe6, 0xf5, 0xbc, 0x16, 0xdf, 0x5a, 0x2a, 0x56, 0xc4,",
          "199:     0x3c, 0x83, 0x43, 0xf1, 0x52, 0x9b, 0x61, 0x42, 0xdd, 0x9e, 0x23, 0x32, 0x34, 0xc9, 0x87, 0x6d, 0x20, 0x7a, 0xe5,",
          "200:     0x60, 0x4f, 0xcd, 0x63, 0x91, 0x84, 0x55, 0x73, 0xef, 0x08, 0x48, 0x7b, 0x18, 0xbe, 0x16, 0x11, 0xc7, 0x9e, 0xf2,",
          "201:     0xe6, 0xb3, 0x24, 0x7c, 0xde, 0x08, 0x17, 0x47, 0x18, 0x11, 0x3a, 0xf0, 0x47, 0x8b, 0x1c, 0xf8, 0x01, 0x7f, 0x0d,",
          "202:     0x9a, 0x41, 0x28, 0x9b, 0xa2, 0xa1, 0x87, 0x21, 0x60, 0x8f, 0x16, 0xde, 0x70, 0x9b, 0x1b, 0xd5, 0xa8, 0x51, 0x92,",
          "203:     0xf2, 0x42, 0x81, 0xe1, 0x1e, 0x97, 0xa6, 0x3d, 0x32, 0x06, 0x19, 0x31, 0x76, 0x30, 0xe6, 0xef, 0x8f, 0xb0, 0x1a,",
          "204:     0x27, 0x28, 0xdc, 0x92, 0x4e, 0x5b, 0xc5, 0xfe, 0x0e, 0xfc, 0x14, 0x38, 0x38, 0xd6, 0x81, 0x9d, 0xb5, 0xb5, 0x95,",
          "205:     0xc8, 0x45, 0xed, 0xa5, 0x3d, 0x8a, 0x44, 0xa0, 0x3f, 0xb8, 0xf0, 0x53, 0xa8, 0x46, 0x14, 0x51, 0x11, 0x69, 0xa0,",
          "206:     0x66, 0x54, 0xad, 0x82, 0xef, 0xc8, 0xf4, 0xc0, 0x73, 0x74, 0x5b, 0x93, 0xa2, 0xa8, 0x1b, 0x0b, 0x5f, 0xbe, 0xeb,",
          "207:     0x52, 0x68, 0x0b, 0x03, 0x90, 0x82, 0xd0, 0x04, 0xc1, 0xb8, 0xe4, 0x94, 0xac, 0xe8, 0xef, 0xa3, 0xe1, 0x2b, 0x9f,",
          "208:     0x1e, 0x65, 0xdb, 0xdb, 0x43, 0x11, 0xb7, 0x20, 0xc2, 0xe1, 0x86, 0x77, 0x35, 0xae, 0x00, 0xa8, 0x4f, 0xe7, 0xc4,",
          "209:     0x75, 0xc7, 0xb4, 0x22, 0x4d, 0x97, 0x7c, 0x9f, 0x1c, 0x66, 0x00, 0x0c, 0xee, 0x38, 0x47, 0xfe, 0xe0, 0x2f, 0x43,",
          "210:     0x30, 0x8f, 0xfd, 0xcf, 0xdd, 0x1d, 0xc5, 0x68, 0x7a, 0x32, 0xa6, 0xb8, 0xa4, 0x18, 0x6b, 0xc7, 0x23, 0xdf, 0x68,",
          "211:     0x90, 0x7b, 0x29, 0xac, 0x00, 0xa4, 0x39, 0xf0, 0x84, 0x8a, 0x82, 0x90, 0xa2, 0x02, 0xdb, 0xc7, 0xc3, 0xcf, 0xf1,",
          "212:     0x64, 0xbf, 0x03, 0x0d, 0x6f, 0xa0, 0xdf, 0x9e, 0xc2, 0xdb, 0x5f, 0xf4, 0xdb, 0x97, 0x2c, 0xf8, 0xa5, 0x94, 0xae,",
          "213:     0xfb, 0xda, 0x14, 0x0f, 0xd5, 0x14, 0xa5, 0xd8, 0x22, 0x03, 0x87, 0xcc, 0x5d, 0xf5, 0xd9, 0x70, 0xb7, 0x04, 0x64,",
          "214:     0x28, 0xd6, 0x05, 0x3a, 0x5a, 0x74, 0x8a, 0xc8, 0x75, 0x4d, 0x54, 0x18, 0xb9, 0x04, 0xe6, 0x82, 0x2b, 0xba, 0x25,",
          "215:     0xe2, 0xec, 0xb7, 0xdd, 0x65, 0xad, 0x2d, 0xe9, 0x77, 0x6c, 0x36, 0xe7, 0x97, 0x07, 0x24, 0xe8, 0x03, 0x99, 0x36,",
          "216:     0x20, 0x62, 0xe7, 0xed, 0x5e, 0xbc, 0xc7, 0x7b, 0x31, 0x70, 0xf5, 0x42, 0x91, 0x18, 0x9e, 0x55, 0xef, 0x2d, 0x7a,",
          "217:     0x29, 0x4d, 0x62, 0xf2, 0x6a, 0xcb, 0xeb, 0xca, 0xe5, 0x6d, 0x6f, 0xc3, 0x02, 0x7b, 0x46, 0x57, 0x2e, 0xba, 0x96,",
          "218:     0xa5, 0xc0, 0x09, 0x40, 0xf4, 0xb8, 0x4e, 0x72, 0x44, 0x71, 0x98, 0xcd, 0x86, 0x8c, 0x83, 0xb9, 0x6b, 0x47, 0xc5,",
          "219:     0x31, 0xb1, 0xbb, 0x4c, 0xd8, 0x81, 0x95, 0x11, 0x95, 0xb7, 0x3a, 0xc2, 0x3b, 0x2c, 0xfa, 0x6b, 0xff, 0xf6, 0x47,",
          "220:     0x8f, 0x6d, 0x77, 0x5c, 0x90, 0x20, 0xb5, 0xb1, 0x1e, 0x55, 0x63, 0x41, 0x7d, 0xf8, 0x51, 0x63, 0xa9, 0xcc, 0xb7,",
          "221:     0xb7, 0xcb, 0x7a, 0xa8, 0x56, 0x9d, 0xe0, 0x5a, 0x34, 0xe5, 0xa2, 0x99, 0x0d, 0xc2, 0x01, 0x89, 0x09, 0x14, 0x68,",
          "222:     0x6e, 0x65, 0xc5, 0x00, 0x43, 0xca, 0x72, 0xe4, 0x4f, 0x21, 0xf3, 0xe2, 0xb2, 0xd4, 0xa9, 0x2f, 0xd2, 0x1f, 0x19,",
          "223:     0x62, 0xd4, 0x93, 0x94, 0x15, 0x10, 0xb0, 0x5e, 0xea, 0x25, 0xb4, 0x45, 0xb0, 0xf2, 0x67, 0x2a, 0x87, 0x46, 0x68,",
          "224:     0x20, 0x51, 0x68, 0xa8, 0x25, 0x4a, 0xf9, 0xcc, 0xc3, 0x18, 0xa4, 0xfd, 0x93, 0x9a, 0xef, 0x2b, 0x57, 0x4a, 0x47,",
          "225:     0x7e, 0x54, 0x0c, 0x03, 0xaa, 0x5f, 0x48, 0x0e, 0x36, 0x0d, 0xdf, 0x03, 0x19, 0x55, 0x86, 0x27, 0x31, 0xc2, 0xa7,",
          "226:     0x71, 0xce, 0xc8, 0x52, 0xd8, 0x94, 0x30, 0x4b, 0xd5, 0x36, 0x52, 0xed, 0x22, 0xd3, 0x09, 0xe5, 0xc2, 0xfc, 0x53,",
          "227:     0x23, 0x76, 0x91, 0x85, 0x2b, 0xad, 0x41, 0xfd, 0x78, 0x63, 0x02, 0x94, 0x5d, 0x5d, 0x65, 0xc2, 0xc6, 0x8d, 0x48,",
          "228:     0xdf, 0xd0, 0x15, 0xd3, 0x81, 0x5a, 0x54, 0xe0, 0x44, 0xa4, 0xf1, 0x50, 0x0c, 0x85, 0x46, 0x38, 0xa4, 0x28, 0x72,",
          "229:     0xe1, 0x1a, 0x87, 0xbe, 0x18, 0x68, 0xdb, 0x28, 0x0d, 0x9d, 0x04, 0x98, 0x80, 0x58, 0xbb, 0xa1, 0x4d, 0xa5, 0x83,",
          "230:     0x34, 0x48, 0xa8, 0x14, 0xed, 0x1c, 0x58, 0x7f, 0x18, 0x49, 0x0c, 0x80, 0xfe, 0x50, 0x8d, 0x14, 0x51, 0x96, 0x05,",
          "231:     0x6e, 0x00, 0xcd, 0x75, 0x80, 0x3b, 0xe1, 0x0b, 0x05, 0x15, 0xa6, 0xa7, 0x59, 0x79, 0x29, 0x84, 0xc8, 0xab, 0x35,",
          "232:     0x29, 0x6b, 0xc4, 0x93, 0xcf, 0xd0, 0xe0, 0x53, 0xd6, 0xf5, 0x6b, 0xb9, 0x0e, 0x5d, 0xf0, 0x14, 0xb6, 0x55, 0x3d,",
          "233:     0xbf, 0x0a, 0x39, 0x19, 0xd7, 0x20, 0x2b, 0x24, 0xd3, 0x5f, 0x31, 0x92, 0xf7, 0x5f, 0xf9, 0x55, 0x2d, 0x35, 0x86,",
          "234:     0xb2, 0xf7, 0xeb, 0x9a, 0x61, 0x79, 0x39, 0xaf, 0xdc, 0x14, 0x04, 0xdc, 0x92, 0x25, 0xc1, 0x52, 0x4a, 0x08, 0xd0,",
          "235:     0xb0, 0x3d, 0x92, 0x4a, 0x41, 0x51, 0x6a, 0xf7, 0xce, 0x53, 0xd0, 0x02, 0x8c, 0xa0, 0x96, 0x4a, 0xa6, 0x91, 0xc8,",
          "236:     0x97, 0x42, 0x14, 0x88, 0xf2, 0x60, 0x04, 0x76, 0x6a, 0x33, 0xd2, 0x75, 0xe1, 0xfa, 0xf1, 0x0c, 0x53, 0x7b, 0x08,",
          "237:     0xf4, 0xd8, 0xdb, 0x00, 0x55, 0xa2, 0x2e, 0xc3, 0x72, 0xa2, 0xd0, 0xac, 0x26, 0x59, 0x40, 0x8d, 0x69, 0x83, 0x94,",
          "238:     0x6c, 0x83, 0x2e, 0x57, 0x80, 0x7e, 0x24, 0x8e, 0x67, 0xb5, 0x03, 0x42, 0xd6, 0xa0, 0x82, 0x21, 0x4f, 0xa9, 0x90,",
          "239:     0xc2, 0xbc, 0xd7, 0xa5, 0x22, 0x3c, 0x9f, 0x03, 0x2e, 0xb5, 0xe0, 0xcc, 0xcb, 0x68, 0xe0, 0x83, 0xf8, 0x24, 0xc1,",
          "240:     0xc4, 0x17, 0x5c, 0x15, 0xe8, 0xc1, 0x41, 0xa7, 0xd9, 0x14, 0x28, 0x15, 0x37, 0x29, 0x83, 0x6d, 0x45, 0xae, 0x0d,",
          "241:     0x3f, 0x24, 0xcb, 0xd6, 0x5d, 0x1e, 0xea, 0x2e, 0x44, 0x02, 0xd8, 0xe9, 0x25, 0x7a, 0xbe, 0x65, 0xbd, 0x74, 0x18,",
          "242:     0x9c, 0x69, 0x89, 0x83, 0xc0, 0x6f, 0x6f, 0x27, 0xc3, 0x32, 0x25, 0xb2, 0x6b, 0x92, 0xba, 0x80, 0x1c, 0x86, 0x6a,",
          "243:     0xae, 0x1d, 0x98, 0xa5, 0xd2, 0xc7, 0xf3, 0x72, 0x86, 0xdb, 0xa5, 0x34, 0xe4, 0x66, 0xbc, 0x9a, 0xe6, 0x73, 0x2b,",
          "244:     0xc9, 0xa6, 0xfd, 0xad, 0xf8, 0xa2, 0xe0, 0x1f, 0x38, 0xb1, 0xd4, 0xea, 0x29, 0xb5, 0xc2, 0xa3, 0xcc, 0x2d, 0x59,",
          "245:     0xa7, 0xb8, 0x56, 0xd7, 0x0d, 0x54, 0x23, 0x8c, 0xa6, 0x61, 0x23, 0x60, 0x62, 0x82, 0x8a, 0x5f, 0x37, 0x89, 0x98,",
          "246:     0xce, 0x96, 0xe0, 0x3a, 0x42, 0xef, 0xa1, 0x9c, 0xe0, 0xae, 0xa6, 0xd9, 0xe7, 0xe1, 0xfc, 0x7a, 0xe2, 0xde, 0x37,",
          "247:     0x88, 0xfb, 0xcb, 0x90, 0x1b, 0x84, 0x1e, 0xcb, 0x84, 0x1f, 0xe9, 0xfb, 0x28, 0x54, 0xd5, 0x93, 0xd3, 0xb0, 0x62,",
          "248:     0x59, 0xe2, 0xc9, 0x08, 0x75, 0x18, 0x51, 0xd1, 0x1a, 0x23, 0xbb, 0xba, 0xca, 0xcd, 0xb3, 0x40, 0x4e, 0x53, 0x8f,",
          "249:     0xd7, 0xfd, 0xb4, 0x15, 0x39, 0x1b, 0x9e, 0xc8, 0xfd, 0x57, 0x35, 0x4f, 0x64, 0x45, 0xe7, 0x38, 0xd2, 0x35, 0x81,",
          "250:     0xdc, 0x27, 0xa7, 0xab, 0x87, 0x54, 0xc8, 0x16, 0xbd, 0x6c, 0xe3, 0x8c, 0xea, 0x80, 0xa4, 0x9e, 0x51, 0x81, 0x55,",
          "251:     0x8d, 0xbd, 0xb5, 0xd5, 0x11, 0xe9, 0x96, 0x4a, 0xb0, 0xc1, 0xd6, 0xc2, 0x68, 0xc6, 0x28, 0xe8, 0x94, 0x14, 0x19,",
          "252:     0xa8, 0x51, 0x7e, 0x0d, 0x63, 0xd8, 0xa7, 0x06, 0x20, 0x38, 0xd7, 0x57, 0x7f, 0x59, 0x4a, 0xb2, 0x10, 0x90, 0xb8,",
          "253:     0x4b, 0x06, 0x6c, 0x4d, 0x10, 0x33, 0xd2, 0xc9, 0x7b, 0xa0, 0xbc, 0x01, 0x43, 0x1b, 0x01, 0xec, 0x02, 0x71, 0xe8,",
          "254:     0x41, 0xc5, 0xb6, 0x09, 0x29, 0x3a, 0x36, 0xf0, 0x1c, 0x80, 0x9d, 0x57, 0xae, 0xd1, 0x77, 0x55, 0x0a, 0x18, 0x92,",
          "255:     0x81, 0x1b, 0xb0, 0xca, 0x2d, 0xb7, 0xff, 0x1c, 0xcc, 0x06, 0x78, 0x7d, 0x26, 0x9b, 0x6f, 0x62, 0x9e, 0x60, 0x15,",
          "256:     0xbb, 0xf0, 0x2b, 0xcd, 0x5a, 0xc4, 0x9d, 0x0e, 0x1b, 0xf5, 0x0a, 0x13, 0xa2, 0xf6, 0x00, 0x6b, 0xdf, 0xa3, 0x87,",
          "257:     0x45, 0xbc, 0xbf, 0xc2, 0x77, 0x3d, 0x6e, 0xb9, 0xaf, 0x97, 0x45, 0x2b, 0x5d, 0x45, 0x8d, 0x81, 0xc9, 0xba, 0x9d,",
          "258:     0x8c, 0x6b, 0x2f, 0x0f, 0x84, 0x2f, 0xb8, 0x5a, 0x23, 0xab, 0x5c, 0x8a, 0x8d, 0x45, 0xd2, 0xd3, 0x3e, 0x05, 0xd8,",
          "259:     0x37, 0x9b, 0xbd, 0x00, 0x33, 0xef, 0x2b, 0x54, 0x49, 0x48, 0x69, 0x76, 0x83, 0x25, 0x09, 0x6d, 0x45, 0x46, 0x9d,",
          "260:     0x0f, 0x1c, 0x6d, 0x73, 0x2b, 0x8e, 0x60, 0x38, 0x27, 0x61, 0x3a, 0x56, 0x1e, 0x36, 0x19, 0xb8, 0xf2, 0x8e, 0x98,",
          "261:     0xb6, 0x09, 0xf0, 0x6f, 0x06, 0x7c, 0x7b, 0x25, 0xb9, 0xb6, 0xd0, 0x30, 0x3c, 0x41, 0x84, 0x55, 0x9e, 0x08, 0x34,",
          "262:     0x14, 0x60, 0x8d, 0x6b, 0x2d, 0x0f, 0x50, 0xe1, 0x6b, 0x67, 0x13, 0x00, 0x12, 0x59, 0x41, 0xce, 0x8a, 0xa3, 0x1b,",
          "263:     0x56, 0xb9, 0xde, 0x4f, 0x8d, 0x82, 0xc4, 0xc5, 0x83, 0xe9, 0xea, 0x96, 0xfe, 0x0c, 0x35, 0x67, 0x52, 0xc4, 0xb4,",
          "264:     0x13, 0x04, 0xfd, 0xa3, 0xcc, 0xc9, 0x69, 0x3a, 0xa1, 0x7d, 0xce, 0x9d, 0xda, 0xd4, 0x3d, 0x46, 0xdd, 0x3c, 0x89,",
          "265:     0x2d, 0x5e, 0xc7, 0x4d, 0x29, 0x17, 0x26, 0x39, 0xe6, 0xa6, 0x48, 0xc5, 0x66, 0x8a, 0xdd, 0xb9, 0xf5, 0x83, 0x16,",
          "266:     0xd2, 0x41, 0xdb, 0x14, 0x39, 0xd8, 0xac, 0xe2, 0xf7, 0x04, 0xc6, 0x73, 0x81, 0xf8, 0xf2, 0x15, 0x25, 0xe9, 0x30,",
          "267:     0xc7, 0x5c, 0x60, 0xf5, 0x62, 0x0a, 0xf2, 0x77, 0x8e, 0x4e, 0xb3, 0x37, 0xf0, 0x41, 0xe2, 0x0d, 0x38, 0x66, 0x8d,",
          "268:     0x7d, 0xe7, 0x52, 0x51, 0x47, 0x08, 0x54, 0x46, 0xb5, 0x4c, 0xc7, 0x89, 0x95, 0xfb, 0x46, 0xd0, 0xd5, 0x5b, 0x1d,",
          "269:     0xce, 0x37, 0x9e, 0x1b, 0xbb, 0x11, 0xc4, 0x60, 0x2d, 0x14, 0x43, 0x4f, 0xb2, 0xf0, 0x1c, 0xb6, 0x67, 0x7b, 0xbb,",
          "270:     0x57, 0xec, 0xf1, 0xca, 0x45, 0x52, 0xc1, 0x18, 0x63, 0x46, 0x31, 0x9e, 0x89, 0x9a, 0x58, 0x44, 0x64, 0xcb, 0xd6,",
          "271:     0x61, 0x81, 0x01, 0x00, 0x68, 0x69, 0x72, 0xaf, 0x9a, 0x08, 0x95, 0xf1, 0x5c, 0x5a, 0x4f, 0x15, 0x44, 0x55, 0x8d,",
          "272:     0xdf, 0xae, 0xcf, 0x40, 0x21, 0xb8, 0x37, 0x3a, 0x1e, 0x06, 0x21, 0x60, 0x17, 0x05, 0x2f, 0xd0, 0x07, 0xb4, 0x57,",
          "273:     0x25, 0x42, 0x31, 0x73, 0xb2, 0x1e, 0x33, 0x8c, 0x54, 0xd0, 0x85, 0x4a, 0xd8, 0x2a, 0xcd, 0xf0, 0xab, 0x83, 0xd0,",
          "274:     0x8c, 0x32, 0xee, 0xbf, 0xaa, 0xd6, 0x0c, 0xf2, 0x83, 0x79, 0xab, 0x84, 0xfa, 0x76, 0x25, 0x22, 0x53, 0x81, 0x89,",
          "275:     0x87, 0x59, 0x4a, 0xbf, 0x5f, 0xd6, 0x49, 0x3f, 0x2f, 0x97, 0xe7, 0x9c, 0x24, 0x5f, 0xe7, 0x0e, 0x92, 0x4f, 0xba,",
          "276:     0xfb, 0x95, 0xf0, 0x43, 0x0d, 0xa3, 0x26, 0xfc, 0xea, 0x5b, 0x1a, 0xe6, 0x9e, 0x72, 0x6f, 0xf5, 0xbb, 0xc8, 0x74,",
          "277:     0x51, 0x9e, 0x83, 0x22, 0xa4, 0x1f, 0xc1, 0x34, 0x34, 0x68, 0x50, 0x24, 0x8b, 0xc5, 0xda, 0x04, 0x71, 0x7d, 0xcc,",
          "278:     0xa9, 0x76, 0x28, 0x63, 0x8c, 0x68, 0x5a, 0x52, 0x90, 0x24, 0x70, 0x50, 0x7e, 0x03, 0x03, 0x62, 0x12, 0x12, 0xd2,",
          "279:     0x20, 0x74, 0xd6, 0x66, 0x22, 0x2a, 0x73, 0xf1, 0x76, 0xe5, 0xb2, 0x26, 0x50, 0x84, 0x9e, 0x60, 0xa6, 0x52, 0x2a,",
          "280:     0x08, 0xa4, 0xca, 0xb7, 0xd1, 0xa9, 0x39, 0x43, 0x73, 0xd7, 0x14, 0x40, 0x5e, 0xdb, 0xf5, 0xa0, 0xc9, 0x7b, 0xf2,",
          "281:     0xa1, 0xaf, 0x13, 0x23, 0x5e, 0x66, 0xd0, 0x35, 0x1c, 0xfe, 0x1a, 0x2b, 0x29, 0x42, 0x26, 0x7c, 0xaf, 0x60, 0x13,",
          "282:     0x21, 0x99, 0x82, 0x9e, 0x09, 0xf8, 0x43, 0xbd, 0xb2, 0x97, 0xee, 0xe5, 0x95, 0x49, 0x8b, 0xca, 0x56, 0xa2, 0x66,",
          "283:     0x2d, 0x8e, 0xe2, 0xed, 0x14, 0xce, 0xb3, 0x47, 0x09, 0x04, 0x24, 0xa9, 0x9c, 0xa4, 0x9a, 0xf7, 0x28, 0x1d, 0x02,",
          "284:     0x48, 0x70, 0xfa, 0x09, 0x2c, 0xb4, 0x9b, 0x12, 0x13, 0x2c, 0xaa, 0xc6, 0x6e, 0x73, 0x90, 0x9a, 0x73, 0x92, 0x7c,",
          "285:     0x73, 0x94, 0xda, 0xdb, 0x4a, 0x7b, 0xc6, 0xec, 0x00, 0xdb, 0x76, 0xb7, 0xf3, 0xa3, 0x74, 0xbb, 0x33, 0x34, 0x18,",
          "286:     0x17, 0x86, 0xff, 0x93, 0x12, 0xd3, 0x40, 0x0a, 0x29, 0x1b, 0x3f, 0xa1, 0x0c, 0xc3, 0xff, 0x96, 0x24, 0x80, 0x07,",
          "287:     0xb5, 0xdd, 0x58, 0x31, 0xee, 0x15, 0x45, 0xc9, 0x6d, 0x55, 0xed, 0x6a, 0x09, 0x1a, 0xba, 0x91, 0xf4, 0x89, 0x62,",
          "288:     0x9e, 0x13, 0x00, 0xa3, 0xc8, 0xfc, 0x1d, 0xd3, 0x49, 0xde, 0xbf, 0xac, 0x4d, 0xed, 0xf6, 0x7d, 0x3f, 0xca, 0x4f,",
          "289:     0x29, 0xa4, 0xa2, 0xb2, 0x39, 0x89, 0xf8, 0x77, 0x05, 0x98, 0xe6, 0xc4, 0x47, 0x7a, 0xae, 0x61, 0x28, 0xc0, 0x57,",
          "290:     0x3a, 0x94, 0x9a, 0xed, 0xe9, 0x1f, 0x9d, 0xed, 0xbe, 0x44, 0x8a, 0x20, 0x81, 0x06, 0x5e, 0xae, 0x59, 0x2f, 0xac,",
          "291:     0x32, 0xb8, 0x23, 0xfe, 0x14, 0x7c, 0x5f, 0x5e, 0x07, 0x9f, 0x71, 0xfe, 0x05, 0xa0, 0x55, 0x81, 0x01, 0xe5, 0x83,",
          "292:     0xa6, 0x62, 0x25, 0xd8, 0x25, 0x0a, 0xcc, 0xca, 0xcf, 0x1f, 0xd7, 0x69, 0xdd, 0xd4, 0x2c, 0xd1, 0x29, 0x3f, 0x77,",
          "293:     0x0d, 0x33, 0xbe, 0xd7, 0xc8, 0x1f, 0xdf, 0x7f, 0x0e, 0xb2, 0x9d, 0x50, 0xbb, 0xb5, 0x55, 0x6c, 0x90, 0x86, 0x86,",
          "294:     0xf7, 0xc2, 0xe6, 0xd0, 0x16, 0xf1, 0x52, 0xa8, 0x67, 0x2c, 0xc6, 0xdb, 0x22, 0x54, 0x86, 0x0f, 0x58, 0x30, 0x87,",
          "295:     0x15, 0x82, 0xc5, 0x4e, 0x65, 0xf2, 0x19, 0x0e, 0x9a, 0x22, 0xd7, 0x42, 0x28, 0x7c, 0x39, 0x88, 0x4a, 0x49, 0x8b,",
          "296:     0x75, 0xb4, 0x3d, 0x3b, 0x83, 0xe7, 0x97, 0x71, 0x01, 0xd8, 0x81, 0xe5, 0x57, 0x58, 0x16, 0x07, 0xc8, 0xc5, 0x43,",
          "297:     0x59, 0xeb, 0x15, 0x8d, 0xc7, 0x37, 0x76, 0x61, 0x75, 0x01, 0x3e, 0x8d, 0xd2, 0x71, 0x22, 0x26, 0x31, 0x93, 0x2a,",
          "298:     0xd7, 0xe4, 0xda, 0xe8, 0x5e, 0x5a, 0xa3, 0x79, 0x2e, 0x38, 0x78, 0x85, 0xe0, 0x06, 0xd3, 0x57, 0xf2, 0x72, 0xbd,",
          "299:     0x82, 0x82, 0xa1, 0xf6, 0xe6, 0x26, 0x98, 0x2b, 0xf1, 0x98, 0xc1, 0x35, 0xfd, 0x3a, 0x9c, 0x8a, 0x6e, 0x5e, 0xae,",
          "300:     0x18, 0xfc, 0x3a, 0x67, 0xac, 0x21, 0x00, 0x88, 0x4e, 0x1e, 0x5e, 0x6f, 0x26, 0xbd, 0x52, 0xd2, 0x41, 0x49, 0x84,",
          "301:     0xf8, 0xae, 0xcc, 0xd7, 0x5d, 0x2a, 0xba, 0x72, 0xd5, 0xbd, 0xaf, 0x19, 0x33, 0x2e, 0x18, 0x3d, 0xe7, 0xb3, 0xa4,",
          "302:     0x71, 0xed, 0x86, 0xee, 0xea, 0xfc, 0xe8, 0xfd, 0x20, 0xf3, 0x16, 0x66, 0x40, 0x26, 0x20, 0x0a, 0x9e, 0x7b, 0xaf,",
          "303:     0x8d, 0x88, 0xf2, 0xb7, 0x66, 0x88, 0x57, 0x0e, 0xb3, 0x2e, 0x92, 0xfc, 0xed, 0xe0, 0xdb, 0xe0, 0xfa, 0x96, 0x46,",
          "304:     0x04, 0xb9, 0xab, 0x22, 0xc8, 0x84, 0xb9, 0x99, 0x3e, 0x70, 0xfb, 0x77, 0x65, 0x08, 0x22, 0x2a, 0xa6, 0x43, 0xe5,",
          "305:     0xb8, 0x7f, 0xb4, 0x41, 0xa5, 0x42, 0xe2, 0x53, 0x95, 0xbb, 0x72, 0x6d, 0x6a, 0xa8, 0xc7, 0x75, 0x32, 0x0b, 0x4d,",
          "306:     0xb3, 0x26, 0x97, 0xb2, 0x69, 0x31, 0x32, 0x4d, 0x4e, 0xb5, 0xf9, 0xdd, 0x6b, 0x83, 0x74, 0x0c, 0xd5, 0xc5, 0x5a,",
          "307:     0x2d, 0x98, 0xdf, 0x95, 0x17, 0xde, 0xf5, 0x62, 0x23, 0x95, 0xa1, 0xa6, 0x3d, 0x8a, 0x3e, 0x8e, 0xdb, 0xcc, 0xe5,",
          "308:     0x51, 0xfa, 0x67, 0x0d, 0x00, 0xd3, 0x10, 0x16, 0xdd, 0x4d, 0xcb, 0xd8, 0x13, 0xcb, 0xd3, 0x13, 0x19, 0x28, 0x7a,",
          "309:     0xae, 0xf3, 0x55, 0xab, 0xc4, 0xd2, 0x35, 0x08, 0x76, 0x6f, 0xc8, 0x58, 0x95, 0xb8, 0x5b, 0xad, 0x5f, 0xcd, 0xf3,",
          "310:     0x79, 0xca, 0x57, 0xf2, 0x7c, 0x6a, 0x1a, 0xdd, 0x46, 0xdb, 0xbd, 0x39, 0x35, 0x54, 0xcc, 0xb5, 0xbe, 0xc9, 0x1f,",
          "311:     0x98, 0xae, 0x83, 0xae, 0x16, 0x81, 0x66, 0x75, 0xaa, 0x9e, 0x95, 0xe5, 0xac, 0x9e, 0xc9, 0x31, 0x13, 0xb6, 0xa9,",
          "312:     0x34, 0x87, 0xe8, 0x86, 0xa9, 0x9a, 0xe9, 0xc7, 0xc6, 0xb1, 0x90, 0x6d, 0x9e, 0x5f, 0x8e, 0x73, 0xc0, 0xb4, 0x3c,",
          "313:     0x5f, 0x26, 0x0c, 0x3f, 0x5e, 0x5d, 0xfd, 0x28, 0xf8, 0x54, 0xd5, 0xd1, 0x5b, 0xbe, 0xd4, 0x3d, 0x83, 0x59, 0xa9,",
          "314:     0x8c, 0x88, 0x13, 0xb6, 0x7e, 0xf0, 0xe6, 0xe9, 0x15, 0xb0, 0x9c, 0xc0, 0xea, 0x4e, 0x98, 0xd3, 0x18, 0xaa, 0x3a,",
          "315:     0xc0, 0x3f, 0xac, 0x1f, 0x6c, 0xdd, 0x19, 0xfe, 0x61, 0xf0, 0x43, 0x70, 0x63, 0x63, 0xe3, 0x18, 0xef, 0xd6, 0x12,",
          "316:     0x41, 0x5e, 0x61, 0x40, 0x1f, 0xaf, 0x3e, 0x0a, 0x5c, 0xae, 0x63, 0xdb, 0x03, 0x87, 0xdc, 0xd6, 0xc0, 0xdf, 0x24,",
          "317:     0x4f, 0x1a, 0x2d, 0x0a, 0x9e, 0xcd, 0xe4, 0x0c, 0x85, 0xbc, 0xe6, 0xe3, 0xa0, 0xee, 0x08, 0x7f, 0x03, 0xa7, 0x16,",
          "318:     0x5e, 0x5e, 0x7e, 0x82, 0x3e, 0x60, 0xe9, 0x4a, 0x6e, 0x2a, 0xfc, 0x94, 0xf2, 0x88, 0xae, 0xd6, 0x79, 0x30, 0x52,",
          "319:     0x5c, 0x4c, 0x51, 0xe8, 0xb8, 0xcb, 0x1b, 0x67, 0x23, 0xa3, 0xbf, 0xc4, 0xab, 0x8b, 0x74, 0xf9, 0x48, 0x64, 0xab,",
          "320:     0x96, 0xde, 0x2f, 0x3a, 0xba, 0x6d, 0xcf, 0x18, 0x9f, 0x66, 0x63, 0x0a, 0xcc, 0xf8, 0x38, 0x11, 0x5e, 0x9f, 0x18,",
          "321:     0xeb, 0xbb, 0x45, 0xa0, 0xba, 0x39, 0x36, 0xd9, 0xe1, 0x78, 0xbd, 0xd9, 0xac, 0x71, 0x07, 0x6f, 0x9c, 0x27, 0xce,",
          "322:     0xb2, 0x44, 0x8f, 0xca, 0x52, 0xc3, 0x03, 0x52, 0x21, 0x6e, 0xde, 0x33, 0x81, 0x71, 0xd9, 0x25, 0x71, 0x6d, 0x37,",
          "323:     0x10, 0x6b, 0xb1, 0x27, 0x31, 0x4b, 0xc6, 0xb6, 0x07, 0xe5, 0x81, 0xbe, 0x18, 0x4d, 0xb7, 0x80, 0x69, 0x7b, 0xed,",
          "324:     0xec, 0x3c, 0xb5, 0xbd, 0x6a, 0xaa, 0x00, 0x66, 0xc9, 0xf2, 0xf8, 0x14, 0x49, 0xf7, 0x1b, 0xe8, 0x22, 0x06, 0x8c,",
          "325:     0x8d, 0x2b, 0x73, 0xee, 0x72, 0xdd, 0x8e, 0xf8, 0x46, 0x13, 0xa9, 0x52, 0x1f, 0x51, 0xdf, 0x61, 0x58, 0xab, 0xab,",
          "326:     0x0c, 0x24, 0x30, 0x8f, 0xbc, 0x3b, 0xae, 0xa5, 0xa7, 0x63, 0x16, 0x93, 0x2a, 0x7d, 0x4b, 0x5d, 0x8b, 0x6b, 0xba,",
          "327:     0xbd, 0xe2, 0x01, 0xe8, 0x1f, 0xe8, 0xb7, 0x88, 0x85, 0xbf, 0x9d, 0xd7, 0x52, 0x58, 0x1b, 0x73, 0xe4, 0xe8, 0x6b,",
          "328:     0x0f, 0x7e, 0x61, 0xd5, 0x9e, 0x81, 0x1a, 0x66, 0xc4, 0x48, 0x7e, 0x33, 0xee, 0x55, 0x4d, 0x1c, 0xb9, 0x0b, 0xc0,",
          "329:     0xfa, 0x96, 0x74, 0x49, 0x0e, 0xaf, 0x64, 0xb9, 0x2a, 0x86, 0xfc, 0x1b, 0xec, 0xb3, 0xde, 0x9c, 0x80, 0x99, 0x38,",
          "330:     0xe5, 0x25, 0x26, 0xa6, 0x88, 0xcb, 0xcd, 0xd2, 0xe7, 0x69, 0xda, 0x2c, 0xda, 0xc0, 0x29, 0x8c, 0x04, 0x8e, 0xd8,",
          "331:     0x37, 0xb6, 0xa1, 0x99, 0xb0, 0x11, 0x13, 0x6a, 0x54, 0x4a, 0x09, 0x1f, 0xc8, 0xad, 0x96, 0xf4, 0x65, 0x6e, 0xaf,",
          "332:     0xbe, 0xdc, 0x26, 0x28, 0xa0, 0xa8, 0x81, 0xe5, 0xd0, 0x38, 0x6e, 0x19, 0xc8, 0x85, 0xc5, 0xb0, 0x30, 0x6a, 0x55,",
          "333:     0xae, 0x26, 0xa3, 0x3a, 0x99, 0xaf, 0x16, 0x17, 0x2a, 0xf4, 0xe0, 0x91, 0x40, 0xce, 0x5f, 0x60, 0xea, 0x60, 0x56,",
          "334:     0x6a, 0x33, 0x2d, 0x36, 0x51, 0xde, 0x33, 0x1d, 0x92, 0xeb, 0xaf, 0xe1, 0xa1, 0xf2, 0x8b, 0x57, 0xe6, 0x14, 0xf3,",
          "335:     0x45, 0x1e, 0x4b, 0x5b, 0x63, 0x6e, 0xfd, 0xaf, 0xf2, 0x3e, 0xad, 0x04, 0xec, 0x37, 0x60, 0x53, 0xc6, 0x5a, 0x62,",
          "336:     0xe3, 0x82, 0xa4, 0xbc, 0x96, 0xa7, 0xf4, 0xbe, 0x86, 0xf0, 0x5d, 0x51, 0xe9, 0x2a, 0x91, 0x75, 0x8d, 0x56, 0xf7,",
          "337:     0xeb, 0x82, 0xe5, 0x97, 0x07, 0x0c, 0x73, 0x93, 0x51, 0x21, 0x5b, 0x51, 0xb3, 0x29, 0xbf, 0xda, 0xbb, 0xf1, 0x2b,",
          "338:     0x0f, 0x25, 0x05, 0xd5, 0x2a, 0xd9, 0xbc, 0x72, 0xc3, 0x31, 0x6e, 0xdc, 0x70, 0x8c, 0x7b, 0x14, 0x57, 0xae, 0x50,",
          "339:     0xad, 0xf3, 0xdf, 0x57, 0xdd, 0x4f, 0x74, 0xd6, 0x86, 0xfa, 0xd4, 0x0d, 0xd7, 0xa6, 0xa7, 0xdf, 0xb0, 0x54, 0x23,",
          "340:     0x4b, 0xe8, 0xa6, 0xa5, 0x62, 0x32, 0x12, 0x25, 0xa6, 0xab, 0x94, 0x47, 0x7d, 0x8d, 0xb8, 0x00, 0x76, 0x43, 0xf9,",
          "341:     0x8b, 0x7f, 0x0d, 0xcf, 0x8f, 0x03, 0x54, 0xa2, 0x96, 0x93, 0x2c, 0xe5, 0xad, 0x49, 0x34, 0x8b, 0x93, 0xcb, 0x60,",
          "342:     0x11, 0xb7, 0x66, 0x59, 0x9a, 0x15, 0x73, 0xa0, 0x4a, 0xaf, 0xb8, 0x04, 0x1d, 0x7e, 0xd6, 0x5a, 0xc4, 0xde, 0x73,",
          "343:     0x96, 0x9c, 0x31, 0x1e, 0x8f, 0x22, 0xcf, 0xde, 0xcf, 0x81, 0x3d, 0x58, 0xaf, 0xa3, 0x3c, 0xcf, 0xce, 0x6d, 0xef,",
          "344:     0x5d, 0x76, 0x02, 0x44, 0xeb, 0xbd, 0xb9, 0xb8, 0x3c, 0x65, 0xa9, 0xf7, 0xfe, 0x64, 0x91, 0xf2, 0x85, 0x57, 0x44,",
          "345:     0x69, 0xd1, 0x2a, 0x58, 0x1e, 0x4f, 0x40, 0x4c, 0x24, 0x59, 0xde, 0xc2, 0xfc, 0xe7, 0x19, 0x0b, 0x92, 0xf8, 0x74,",
          "346:     0xca, 0xad, 0x71, 0x94, 0x7f, 0xea, 0xb5, 0x5a, 0xf3, 0x3c, 0x9e, 0x45, 0xf9, 0x65, 0x8b, 0x5a, 0x04, 0x9f, 0xb5,",
          "347:     0x77, 0xa3, 0x2f, 0x26, 0xf7, 0x7b, 0x3c, 0x87, 0xbe, 0x31, 0x62, 0x31, 0x00, 0xe6, 0x63, 0xed, 0x3e, 0x68, 0xcf,",
          "348:     0x8a, 0x0d, 0x11, 0x51, 0x8a, 0x52, 0x5e, 0x1e, 0x7b, 0x1f, 0x41, 0xb7, 0x3d, 0xf6, 0x4f, 0x78, 0xea, 0x81, 0x2d,",
          "349:     0xc7, 0xb3, 0x74, 0x39, 0x5a, 0xe4, 0x05, 0x0c, 0x30, 0xcf, 0xe2, 0x94, 0xb3, 0xbc, 0x77, 0x92, 0xe5, 0x80, 0xb6,",
          "350:     0x56, 0x1e, 0x8d, 0xe3, 0x45, 0x11, 0xdc, 0x9f, 0x5f, 0xf4, 0x50, 0x57, 0x38, 0xcd, 0xb3, 0x45, 0x3a, 0x96, 0x73,",
          "351:     0xc5, 0x29, 0x1c, 0x8c, 0x98, 0x9b, 0x15, 0xf4, 0x25, 0x14, 0x80, 0x2f, 0x65, 0x51, 0xde, 0x3a, 0xc5, 0xce, 0xa8,",
          "352:     0xe8, 0xb7, 0xc7, 0xec, 0xd4, 0xcb, 0x4f, 0x4f, 0x22, 0xa7, 0xd3, 0x7d, 0xe4, 0xa9, 0x7f, 0xfe, 0x03, 0x17, 0x14,",
          "353:     0xf7, 0xb5, 0xc5, 0x9d, 0x76, 0xfb, 0x1f, 0xdc, 0x5e, 0x63, 0x16, 0x02, 0x28, 0xe8, 0xcc, 0x2f, 0xac, 0x22, 0x4b,",
          "354:     0x60, 0x7f, 0xd6, 0xf5, 0xec, 0xcd, 0xc1, 0x6e, 0x8a, 0xd3, 0xd3, 0xa0, 0x3b, 0xbf, 0x28, 0x71, 0x75, 0x81, 0x48,",
          "355:     0xc8, 0x94, 0x8b, 0x94, 0x6f, 0xcb, 0x3f, 0x0a, 0xf1, 0xe3, 0xf5, 0x10, 0x77, 0x15, 0xc4, 0x15, 0xd6, 0x5b, 0x63,",
          "356:     0x38, 0x07, 0x84, 0xfe, 0x4e, 0x21, 0x00, 0x99, 0x82, 0x11, 0x98, 0x2b, 0x38, 0xe8, 0xe5, 0x0f, 0x83, 0xd1, 0x5d,",
          "357:     0x0f, 0xc6, 0xe3, 0xdb, 0xc0, 0xc8, 0xd3, 0xf1, 0xb2, 0xbe, 0xaf, 0x1d, 0x30, 0x4e, 0x7b, 0x53, 0x86, 0xf4, 0x14,",
          "358:     0x74, 0xf1, 0xf9, 0x3c, 0x1e, 0xf3, 0xa9, 0x78, 0x24, 0x72, 0x3e, 0x17, 0x75, 0x0f, 0xda, 0x6d, 0xf1, 0x5e, 0x80,",
          "359:     0x40, 0x0b, 0x3a, 0x3e, 0x36, 0x00, 0x22, 0x7a, 0x71, 0xdd, 0x47, 0x6c, 0x3e, 0xdc, 0xfa, 0xa5, 0x1a, 0xef, 0x52,",
          "360:     0xe5, 0x0d, 0x0a, 0x11, 0xa1, 0xbe, 0xd9, 0x82, 0x19, 0x6f, 0x45, 0xbf, 0xa3, 0x03, 0x55, 0x83, 0x0f, 0x8c, 0xa4,",
          "361:     0x5e, 0xc0, 0x3d, 0x33, 0x17, 0xa8, 0x97, 0xf6, 0xd1, 0x25, 0xd5, 0x6a, 0xb9, 0x20, 0x37, 0x18, 0xba, 0x90, 0x28,",
          "362:     0x20, 0xe8, 0x14, 0x83, 0x9c, 0xbe, 0xa9, 0x91, 0xb9, 0x41, 0xee, 0x64, 0x2e, 0x1c, 0xf9, 0x4c, 0xf3, 0xf5, 0x62,",
          "363:     0x6b, 0x0b, 0xac, 0xec, 0x17, 0x4c, 0x36, 0x00, 0xee, 0x4d, 0xae, 0xae, 0xef, 0x43, 0x61, 0x4a, 0x29, 0x43, 0x6a,",
          "364:     0x76, 0xd3, 0x15, 0x7d, 0xd8, 0x95, 0x98, 0x32, 0x92, 0x8f, 0x86, 0xff, 0x0e, 0xc5, 0xde, 0xd1, 0x86, 0x65, 0x91,",
          "365:     0x2d, 0xf2, 0x11, 0x79, 0xea, 0x56, 0x2d, 0x7e, 0x9b, 0x04, 0xae, 0xed, 0x31, 0xcd, 0xe7, 0xd1, 0x0c, 0xae, 0x7d,",
          "366:     0xe4, 0x80, 0x53, 0x10, 0x44, 0xdc, 0x31, 0x90, 0x5e, 0x0e, 0x05, 0x21, 0x8a, 0xae, 0x31, 0xe5, 0xbb, 0xd1, 0xfd,",
          "367:     0x4b, 0x7f, 0x91, 0xc6, 0xc0, 0xe9, 0x3e, 0xc6, 0x63, 0xba, 0x77, 0x12, 0x8f, 0x29, 0x10, 0xd1, 0xa2, 0xc4, 0x23,",
          "368:     0xf4, 0x6c, 0x43, 0x81, 0xfa, 0x0e, 0x0b, 0x3c, 0xcb, 0x44, 0x16, 0xbb, 0x65, 0x63, 0x30, 0xc1, 0x10, 0x95, 0xe3,",
          "369:     0x6c, 0x16, 0xc5, 0x69, 0x80, 0xdf, 0x07, 0xf1, 0xf4, 0x88, 0x01, 0x76, 0xf1, 0xe0, 0x27, 0x93, 0xb9, 0x68, 0x1d,",
          "370:     0xd7, 0xff, 0x05, 0xf8, 0x08, 0xf5, 0x2f, 0xa5, 0x1d, 0xa6, 0xe1, 0x52, 0x61, 0xde, 0x7a, 0x29, 0xf0, 0x1e, 0xae,",
          "371:     0x74, 0x56, 0x46, 0x7e, 0x8e, 0x3d, 0x4e, 0x3f, 0x06, 0xad, 0x4e, 0xd0, 0xd1, 0xa6, 0x6b, 0xed, 0x36, 0xaa, 0xc8,",
          "372:     0x65, 0x91, 0x37, 0x1a, 0x09, 0x06, 0xfd, 0x2c, 0xe0, 0xac, 0xde, 0x35, 0xac, 0x9e, 0xa4, 0x4b, 0x74, 0xe0, 0x9c,",
          "373:     0xa6, 0x4e, 0x0d, 0x08, 0x8a, 0x05, 0x5c, 0x33, 0x95, 0x5b, 0x46, 0x24, 0x94, 0xbe, 0xa4, 0x03, 0x5c, 0xbf, 0x4b,",
          "374:     0x84, 0xf7, 0x86, 0xea, 0x29, 0x50, 0x8a, 0xe4, 0x16, 0xc7, 0x7b, 0xe2, 0xc4, 0x5b, 0x44, 0x63, 0xa1, 0x0d, 0x47,",
          "375:     0xd0, 0xb6, 0xfe, 0x32, 0x02, 0x2c, 0x7d, 0x0a, 0xed, 0xcd, 0xa5, 0xa3, 0x12, 0xeb, 0x73, 0x98, 0x6b, 0x5f, 0x48,",
          "376:     0x3d, 0xba, 0x91, 0x6f, 0xf7, 0x37, 0x97, 0xbc, 0xdc, 0xdb, 0x11, 0xbd, 0xfb, 0xc7, 0x65, 0x41, 0x02, 0xca, 0x74,",
          "377:     0xa4, 0x55, 0x53, 0x88, 0x3a, 0x18, 0x96, 0xd2, 0x77, 0x71, 0xdc, 0x42, 0x2b, 0x5d, 0xc2, 0x63, 0x2c, 0xc9, 0x2e,",
          "378:     0xc7, 0x74, 0xa5, 0x28, 0x87, 0x33, 0xa9, 0x13, 0x52, 0x72, 0x91, 0x83, 0xd1, 0x5b, 0x85, 0xe2, 0x18, 0x21, 0x18,",
          "379:     0x6c, 0x2e, 0xe3, 0x32, 0xdc, 0x5c, 0x66, 0xe5, 0x31, 0x68, 0x26, 0x08, 0x55, 0xa1, 0x3e, 0xef, 0x02, 0x13, 0x0b,",
          "380:     0x27, 0x8b, 0x45, 0x23, 0xe0, 0xb4, 0xac, 0xb4, 0xad, 0x81, 0x80, 0x06, 0x2c, 0x40, 0x2c, 0x00, 0xdd, 0x8d, 0x7a,",
          "381:     0x31, 0x58, 0x8b, 0x68, 0xdd, 0x87, 0x81, 0xf6, 0x76, 0x44, 0x23, 0x58, 0x57, 0x8e, 0x20, 0x57, 0xcb, 0xc2, 0x74,",
          "382:     0x1c, 0x73, 0x69, 0x49, 0x74, 0xc2, 0x12, 0xe8, 0x9f, 0x5f, 0x5d, 0xb5, 0xa1, 0x9b, 0x78, 0xb5, 0xf6, 0xe2, 0x74,",
          "383:     0xbe, 0x90, 0xdf, 0xd4, 0x82, 0x59, 0x3a, 0x18, 0xe6, 0xc4, 0x94, 0xff, 0x81, 0x8a, 0xdb, 0x05, 0x36, 0x8d, 0x6b,",
          "384:     0x03, 0x3c, 0x14, 0x32, 0x40, 0x50, 0x2a, 0x1a, 0x80, 0xd2, 0x78, 0xbc, 0x5a, 0xa6, 0x97, 0x51, 0xc0, 0x0b, 0x9c,",
          "385:     0xc1, 0x39, 0x3e, 0xa7, 0xf0, 0x3c, 0x8b, 0x53, 0x7c, 0xcc, 0xf1, 0x31, 0xba, 0xc0, 0xc7, 0xac, 0xb4, 0xff, 0x2e,",
          "386:     0xe8, 0xb6, 0x34, 0x02, 0xb2, 0xab, 0x2b, 0x60, 0xee, 0x1a, 0x05, 0x40, 0x10, 0xe2, 0xdb, 0x2a, 0xcc, 0xc4, 0x16,",
          "387:     0x2b, 0xe6, 0x2d, 0x51, 0x6e, 0x91, 0xf0, 0x0c, 0xc1, 0xb6, 0xca, 0x9d, 0x86, 0x8e, 0xe0, 0xc9, 0x2c, 0x92, 0x27,",
          "388:     0xf8, 0xe2, 0xda, 0x96, 0xf8, 0xf8, 0x85, 0x40, 0x07, 0x3d, 0xe2, 0xda, 0x74, 0x19, 0x97, 0x9f, 0xb5, 0x89, 0x43,",
          "389:     0x1b, 0x67, 0x01, 0x35, 0x0d, 0x99, 0x3d, 0x8f, 0xe2, 0x44, 0x34, 0x5e, 0xb3, 0x92, 0x46, 0x3a, 0x20, 0x2d, 0x64,",
          "390:     0x6f, 0xa7, 0x82, 0x0d, 0x80, 0x1f, 0x89, 0xcb, 0xd4, 0x15, 0xf4, 0xb6, 0xa8, 0xa2, 0x28, 0xb9, 0x3c, 0xbc, 0x03,",
          "391:     0xe1, 0x0f, 0xd7, 0xeb, 0x1c, 0x82, 0x5d, 0x17, 0xa5, 0xf5, 0x16, 0x00, 0xf1, 0x9c, 0xb1, 0xb1, 0x67, 0x5b, 0xc0,",
          "392:     0x26, 0xc5, 0xf3, 0xc7, 0x84, 0x9d, 0x31, 0xf9, 0x11, 0x14, 0xdd, 0x57, 0x57, 0x8e, 0x40, 0xda, 0x72, 0x79, 0x3f,",
          "393:     0x53, 0x52, 0x9e, 0x5a, 0x97, 0x5c, 0x7d, 0x1d, 0x78, 0xcf, 0x36, 0x06, 0x6d, 0xce, 0xd1, 0xae, 0x0f, 0xeb, 0x75,",
          "394:     0x40, 0x91, 0xb5, 0x01, 0x4c, 0xd2, 0xcf, 0x6e, 0x5a, 0x0a, 0xf4, 0x63, 0x93, 0x09, 0x1c, 0x00, 0x15, 0xb7, 0xd0,",
          "395:     0xa7, 0x5b, 0x00, 0x03, 0x66, 0xa6, 0x67, 0x8b, 0x16, 0x76, 0xd5, 0x56, 0x3f, 0x21, 0x2a, 0x92, 0x6c, 0xf4, 0xa9,",
          "396:     0x36, 0xc5, 0x02, 0x09, 0x08, 0xc7, 0x6a, 0xf0, 0x29, 0xfb, 0xdf, 0xfe, 0xf5, 0x7f, 0xfe, 0x57, 0x18, 0x8e, 0x3a,",
          "397:     0xb8, 0xa5, 0x75, 0x7d, 0xab, 0xff, 0x01, 0xad, 0x16, 0xe9, 0x2d, 0xed, 0xfe, 0xf6, 0xcf, 0xff, 0x0d, 0x9a, 0xd1,",
          "398:     0xcd, 0x1a, 0xb7, 0x3c, 0x0e, 0xec, 0x11, 0x6a, 0x32, 0x77, 0x03, 0xa4, 0xd6, 0xf5, 0xda, 0xf1, 0xff, 0x05, 0x81,",
          "399:     0x2d, 0x78, 0x36, 0xbf, 0x11, 0x08, 0x84, 0x75, 0x94, 0x64, 0x05, 0x13, 0x50, 0x08, 0x36, 0x79, 0x47, 0x30, 0x68,",
          "400:     0x86, 0x39, 0x90, 0x6c, 0x61, 0x89, 0xde, 0x02, 0xfb, 0xb5, 0xde, 0x8d, 0x5d, 0x29, 0x18, 0x27, 0xd0, 0xc9, 0x03,",
          "401:     0x00, 0xfb, 0x20, 0x9e, 0xe0, 0x81, 0x4e, 0x33, 0x6c, 0xbb, 0xce, 0x17, 0x68, 0x0c, 0xa1, 0x89, 0x4c, 0x8c, 0x20,",
          "402:     0x5c, 0x1d, 0xaa, 0x1f, 0xfc, 0x04, 0xd6, 0xf2, 0x51, 0x3f, 0x47, 0x17, 0xfa, 0x19, 0xd9, 0x0f, 0x0c, 0x0b, 0x82,",
          "403:     0x62, 0x86, 0x3a, 0x40, 0x73, 0x61, 0xea, 0xa4, 0x56, 0xfc, 0x81, 0xa9, 0xe4, 0xb0, 0x8f, 0x98, 0x0f, 0x89, 0xb7,",
          "404:     0x5f, 0x16, 0x39, 0xab, 0x38, 0x26, 0x36, 0x10, 0xac, 0xc8, 0xac, 0xff, 0x98, 0x64, 0xe7, 0xe5, 0x75, 0x75, 0x53,",
          "405:     0xa0, 0xe2, 0x72, 0x6f, 0x1c, 0x9f, 0xf5, 0x25, 0x22, 0x1b, 0x6b, 0x59, 0xed, 0xd2, 0x5c, 0x18, 0x56, 0xc9, 0x75,",
          "406:     0xc9, 0x47, 0x5c, 0x96, 0xd7, 0x46, 0x01, 0x80, 0xe3, 0xee, 0x9d, 0xe4, 0x7d, 0xb9, 0x80, 0x57, 0x78, 0x61, 0x8b,",
          "407:     0x20, 0x41, 0x3e, 0x2e, 0x64, 0x0c, 0x27, 0x19, 0x63, 0xb2, 0x7a, 0xd4, 0x5a, 0x33, 0xc5, 0xd2, 0xb1, 0x61, 0x8d,",
          "408:     0x0b, 0x73, 0xc9, 0x85, 0x63, 0xa9, 0x0e, 0x49, 0x2e, 0x8c, 0x1f, 0xe0, 0x68, 0x70, 0xe1, 0xf8, 0x5a, 0x2e, 0x8c,",
          "409:     0x6b, 0x1b, 0xe0, 0xc8, 0xa1, 0xbd, 0x8d, 0xb6, 0xb8, 0x21, 0x15, 0x38, 0x0a, 0x37, 0x30, 0xc0, 0x46, 0x9f, 0xa4,",
          "410:     0x6c, 0x23, 0x50, 0xd1, 0x18, 0x95, 0xd2, 0x9a, 0x04, 0x9b, 0x64, 0xcf, 0xc1, 0xe2, 0x18, 0x64, 0x9b, 0x39, 0x32,",
          "411:     0x58, 0xc2, 0x13, 0x86, 0xc7, 0xff, 0x78, 0x07, 0xfb, 0x8a, 0xcd, 0x2c, 0xe9, 0x19, 0xa4, 0xcf, 0x0e, 0x0d, 0xe0,",
          "412:     0x2d, 0x85, 0x3b, 0x23, 0xb0, 0xdf, 0xbe, 0x39, 0x38, 0xb4, 0xbd, 0x93, 0x6c, 0x7c, 0x19, 0xd8, 0xa0, 0x8a, 0x82,",
          "413:     0x24, 0x73, 0x7d, 0x3e, 0x65, 0xa9, 0xa3, 0x94, 0xc1, 0x2c, 0x01, 0x65, 0x38, 0x3b, 0x15, 0xb7, 0xef, 0x9b, 0xae,",
          "414:     0x58, 0x40, 0x1b, 0x7d, 0x9e, 0xaf, 0xbf, 0xc7, 0xc5, 0x97, 0x2b, 0x79, 0x8e, 0x8f, 0x7d, 0x0c, 0x46, 0xef, 0xed,",
          "415:     0xc0, 0x03, 0xbe, 0x1c, 0x20, 0x05, 0xe9, 0x37, 0x01, 0x67, 0x21, 0xde, 0x77, 0xb0, 0xfd, 0x8e, 0xea, 0x8b, 0x50,",
          "416:     0x28, 0x1a, 0xd0, 0xfa, 0x5a, 0xa5, 0x04, 0xd0, 0xd8, 0x63, 0x22, 0x41, 0xdc, 0x18, 0xc0, 0x01, 0x1f, 0xeb, 0x12,",
          "417:     0x41, 0xa6, 0x46, 0x11, 0x8d, 0x52, 0xb1, 0x7f, 0x59, 0x85, 0x13, 0x12, 0xfa, 0xc4, 0x64, 0xf0, 0x93, 0xc0, 0x3f,",
          "418:     0x36, 0xbf, 0x34, 0x25, 0x3e, 0x0a, 0xa3, 0x17, 0x79, 0xf4, 0x57, 0xb0, 0x61, 0xbd, 0xf3, 0x63, 0x6a, 0xa9, 0xcc,",
          "419:     0x1a, 0xb4, 0xb7, 0xd1, 0xfc, 0x6b, 0x2b, 0xfb, 0x15, 0x24, 0x5e, 0x12, 0xcd, 0x0b, 0x16, 0xa8, 0x07, 0x69, 0xe1,",
          "420:     0xa0, 0xa1, 0xb4, 0x6a, 0x52, 0x9a, 0x92, 0xb1, 0xe4, 0xd3, 0xa5, 0x69, 0x02, 0x3d, 0x04, 0x13, 0x08, 0xd3, 0xb7,",
          "421:     0x5b, 0x11, 0xb0, 0xf7, 0x34, 0x48, 0xd8, 0x84, 0x97, 0x1c, 0xef, 0x07, 0x2f, 0x95, 0xcd, 0xe9, 0x77, 0x1f, 0x80,",
          "422:     0x59, 0x64, 0xf9, 0xf8, 0xff, 0x6d, 0x63, 0x8f, 0x83, 0x14, 0xcc, 0x18, 0xba, 0x30, 0x80, 0x97, 0xb1, 0x00, 0x22,",
          "423:     0xf3, 0x7d, 0x69, 0x4c, 0x34, 0x62, 0x68, 0x8f, 0x97, 0x3c, 0xb7, 0xf8, 0xd4, 0xe3, 0xb9, 0xd9, 0x0e, 0x34, 0xa5,",
          "424:     0x15, 0xa3, 0x7c, 0xd5, 0x2c, 0xdc, 0x75, 0xa5, 0xf2, 0xb8, 0xda, 0x58, 0xd9, 0xd6, 0xf5, 0xb7, 0x15, 0x0c, 0x19,",
          "425:     0x5e, 0x80, 0x52, 0x70, 0xbe, 0xa5, 0xe8, 0x61, 0xae, 0x69, 0xd5, 0x3f, 0x70, 0xab, 0xee, 0x51, 0xd2, 0xd9, 0x3e,",
          "426:     0xa2, 0xb3, 0x4d, 0xcc, 0x65, 0xb8, 0x14, 0x73, 0x8f, 0xa2, 0x64, 0xe4, 0x20, 0x00, 0x56, 0xcb, 0xba, 0x0f, 0xd8,",
          "427:     0x04, 0x2e, 0x3d, 0x2c, 0xcb, 0xde, 0x25, 0x73, 0x8e, 0x7e, 0x93, 0x79, 0xe4, 0xe2, 0xfa, 0xa0, 0xfe, 0x04, 0x5b,",
          "428:     0xbb, 0x74, 0x87, 0xde, 0xf7, 0xc6, 0x77, 0xad, 0x6c, 0x45, 0xa9, 0xb6, 0x07, 0xf8, 0xfd, 0x3e, 0xc4, 0xbe, 0xaf,",
          "429:     0x1c, 0x1b, 0xb5, 0x10, 0xaa, 0xb9, 0x6c, 0x11, 0xe1, 0xd8, 0xd8, 0x4d, 0x78, 0x41, 0xbf, 0xba, 0xce, 0x98, 0xfd,",
          "430:     0xee, 0x76, 0x63, 0x96, 0xdd, 0xd1, 0x98, 0xfd, 0xee, 0x4f, 0x36, 0x66, 0xbf, 0x6a, 0x1a, 0xb3, 0xbf, 0xfe, 0x1e,",
          "431:     0x63, 0x36, 0xcf, 0xce, 0x8b, 0xb0, 0x23, 0x83, 0xa7, 0xc0, 0x4c, 0xfe, 0x3e, 0x56, 0x2d, 0x4c, 0xd4, 0xb0, 0x69,",
          "432:     0xc9, 0x88, 0x15, 0xf9, 0x5e, 0xc0, 0xab, 0xa5, 0x09, 0xd9, 0xd6, 0x89, 0x55, 0xad, 0xfb, 0xea, 0x26, 0x09, 0xe8,",
          "433:     0xf5, 0xae, 0xbe, 0x03, 0xd5, 0x55, 0x46, 0x66, 0x40, 0x9f, 0x82, 0xd4, 0x1d, 0xbb, 0xdb, 0x2a, 0xa3, 0xc7, 0x1c,",
          "434:     0xa1, 0xa7, 0x1c, 0xb5, 0x82, 0x7c, 0x96, 0xf6, 0x7f, 0x3a, 0xea, 0xf4, 0x76, 0x3b, 0x33, 0xe8, 0x0d, 0x72, 0x0b,",
          "435:     0xde, 0xda, 0xbd, 0xdd, 0x5d, 0x7c, 0x3b, 0x57, 0x6f, 0x5d, 0x7c, 0x8b, 0xd5, 0xdb, 0x03, 0x7c, 0x1b, 0xa9, 0xb7,",
          "436:     0x87, 0xf8, 0x36, 0x56, 0x6f, 0x8f, 0xf0, 0xed, 0xcc, 0x2e, 0x8f, 0xb8, 0x06, 0xee, 0x11, 0xd0, 0x15, 0x29, 0x89,",
          "437:     0x81, 0x2a, 0x83, 0xd3, 0x88, 0x37, 0xb0, 0xa2, 0xd3, 0x20, 0xf6, 0x84, 0x02, 0x1d, 0x14, 0xde, 0x39, 0xb0, 0xf4,",
          "438:     0x80, 0x12, 0x8e, 0x9e, 0xe2, 0x55, 0x7c, 0xd0, 0x3d, 0x0f, 0xe3, 0x19, 0x53, 0xdf, 0x24, 0x55, 0xab, 0x06, 0x35,",
          "439:     0x05, 0xec, 0xed, 0xb2, 0xa7, 0xf7, 0x49, 0xd8, 0xd0, 0x2a, 0x77, 0x82, 0x76, 0xae, 0xaa, 0x13, 0xd3, 0xb5, 0xf4,",
          "440:     0x0e, 0x5f, 0x23, 0x20, 0x40, 0x00, 0x2b, 0xa3, 0x74, 0x02, 0x6a, 0x40, 0xeb, 0x02, 0x94, 0xf4, 0xb5, 0x42, 0x03,",
          "441:     0x21, 0xd2, 0x62, 0x82, 0xd6, 0xa4, 0xdf, 0x0e, 0xa3, 0x53, 0xfd, 0xfc, 0x0a, 0xf4, 0xa9, 0xe8, 0x94, 0xdd, 0x26,",
          "442:     0x40, 0x08, 0x44, 0x53, 0x78, 0x28, 0x20, 0x48, 0x0b, 0x81, 0xad, 0x41, 0x63, 0x41, 0x0a, 0x0f, 0xc4, 0x4e, 0x5d,",
          "443:     0x9c, 0xd0, 0xf4, 0xf5, 0x22, 0xc0, 0x68, 0x55, 0xb0, 0x07, 0x6a, 0x1d, 0x95, 0x0a, 0x0c, 0x43, 0x05, 0x16, 0xdc,",
          "444:     0x28, 0x63, 0x84, 0x2a, 0x72, 0x93, 0xa4, 0xb1, 0x94, 0x90, 0x31, 0x1d, 0xbc, 0xda, 0xbb, 0xbb, 0xca, 0xf7, 0x3e,",
          "445:     0xeb, 0x8c, 0xf0, 0x8f, 0xe4, 0xaa, 0x9f, 0x4d, 0x26, 0x93, 0x1b, 0x85, 0xce, 0x67, 0xe3, 0x09, 0xeb, 0xb2, 0x07,",
          "446:     0x3d, 0x74, 0xfe, 0xb5, 0xa4, 0x2f, 0xae, 0x53, 0x12, 0xee, 0x96, 0x77, 0x6b, 0x8c, 0xce, 0x38, 0x90, 0x43, 0x77,",
          "447:     0x97, 0x4e, 0x25, 0x60, 0x65, 0x09, 0x5c, 0xf9, 0x34, 0x4e, 0x83, 0x76, 0xe9, 0x9f, 0x49, 0x76, 0xfe, 0xd9, 0xe3,",
          "448:     0xc7, 0x8f, 0x4b, 0x7f, 0xac, 0xde, 0xda, 0xe3, 0x71, 0xe9, 0x8f, 0x96, 0x7a, 0x19, 0xed, 0xf6, 0x64, 0x52, 0xfa,",
          "449:     0xb1, 0x2a, 0xd8, 0xed, 0x8e, 0xc6, 0xbb, 0xdd, 0xd2, 0x3f, 0x37, 0x5a, 0x94, 0x3e, 0x93, 0x6f, 0x39, 0x1b, 0xd7,",
          "450:     0x3c, 0x88, 0x8f, 0xc0, 0x78, 0xf5, 0x05, 0xa1, 0x2d, 0xd1, 0x64, 0x10, 0x8f, 0x41, 0xb4, 0xe0, 0x60, 0xeb, 0x02,",
          "451:     0x6f, 0x67, 0xc0, 0x9f, 0x27, 0x92, 0xb7, 0x8b, 0x4f, 0x7e, 0x22, 0x47, 0xff, 0xd5, 0xe4, 0xe8, 0x48, 0xcc, 0xc4,",
          "452:     0xcd, 0x19, 0xc9, 0x81, 0x66, 0x35, 0x52, 0x16, 0x55, 0xff, 0x1a, 0xb2, 0x8a, 0xd9, 0x23, 0xb7, 0xc1, 0x96, 0x82,",
          "453:     0xc7, 0x7f, 0x7d, 0x1d, 0x8f, 0xff, 0xe6, 0x76, 0x1e, 0x7f, 0x72, 0x37, 0x16, 0xff, 0xcd, 0x9f, 0xcc, 0xe2, 0xbf,",
          "454:     0x6e, 0xb2, 0xf8, 0xcd, 0x3b, 0xb1, 0xf8, 0x35, 0x89, 0x1f, 0xa4, 0x9a, 0xbe, 0x49, 0x43, 0xfb, 0x0d, 0xd8, 0x30,",
          "455:     0x46, 0xc9, 0x64, 0x02, 0x45, 0x93, 0x89, 0xad, 0x92, 0x1d, 0x81, 0x13, 0x51, 0xab, 0xd7, 0xb5, 0x12, 0x6a, 0xf5,",
          "456:     0xd5, 0x57, 0x66, 0x99, 0x59, 0x20, 0xfd, 0x0d, 0xa6, 0x7c, 0x57, 0x35, 0x52, 0x65, 0x56, 0x9f, 0x06, 0x19, 0xc7,",
          "457:     0x05, 0x9e, 0x26, 0x2c, 0x28, 0x79, 0x76, 0x7a, 0x9a, 0x30, 0xfd, 0xed, 0x33, 0xd5, 0xd2, 0x7c, 0x33, 0xe7, 0x33,",
          "458:     0xcb, 0x07, 0x26, 0xb4, 0x41, 0x0d, 0xd0, 0x9e, 0x70, 0x64, 0xd2, 0xe7, 0xa0, 0x45, 0xd8, 0xfa, 0x4c, 0x7e, 0x37,",
          "459:     0x98, 0xfc, 0xa9, 0x4b, 0xc9, 0x7e, 0x65, 0x40, 0xb3, 0xea, 0x8a, 0x2e, 0x4c, 0x91, 0x02, 0x32, 0x2e, 0x95, 0xdb,",
          "460:     0x12, 0xa0, 0x9d, 0xe3, 0x47, 0x4e, 0x74, 0xca, 0xd2, 0xca, 0x37, 0x85, 0x34, 0x9b, 0xc0, 0x8f, 0x1e, 0x88, 0x29,",
          "461:     0xc4, 0x67, 0x02, 0xf5, 0xb8, 0x22, 0x0e, 0xe8, 0xd4, 0xd6, 0x68, 0xac, 0x2a, 0x0c, 0xcd, 0xa5, 0xa8, 0x9c, 0x93,",
          "462:     0xd5, 0x79, 0xd6, 0x8a, 0xe6, 0xeb, 0x85, 0xf2, 0xdd, 0xa6, 0xbb, 0x45, 0x34, 0x14, 0xe7, 0x76, 0x5f, 0xdb, 0x98,",
          "463:     0x35, 0x9a, 0x29, 0xeb, 0x5e, 0x38, 0x9a, 0xe8, 0x24, 0xbb, 0xa8, 0xdb, 0x48, 0x26, 0x0c, 0x68, 0x3e, 0xe9, 0xbd,",
          "464:     0x57, 0x75, 0xaa, 0xa0, 0x34, 0xbd, 0xa2, 0x22, 0xd3, 0x8b, 0x48, 0x83, 0x7c, 0x60, 0xb0, 0x03, 0xa9, 0x60, 0xca,",
          "465:     0x30, 0x0f, 0x71, 0x17, 0x6d, 0x47, 0xa0, 0x32, 0x6d, 0x2b, 0x60, 0x51, 0x3a, 0xe4, 0xe8, 0x6b, 0xc2, 0x0e, 0x7d,",
          "466:     0xab, 0x06, 0x70, 0xaa, 0x6d, 0xb3, 0xdb, 0x19, 0x3e, 0x98, 0x16, 0xe7, 0xc7, 0x7e, 0x71, 0xee, 0xc1, 0x3f, 0xeb,",
          "467:     0xf3, 0x25, 0xb0, 0xb0, 0x93, 0x4f, 0x31, 0x07, 0x85, 0x71, 0xde, 0x42, 0xa3, 0x98, 0xdc, 0x3b, 0x92, 0xd7, 0x53,",
          "468:     0xa8, 0x45, 0x5c, 0x89, 0xe8, 0x2d, 0x0a, 0xb4, 0x40, 0x48, 0xd5, 0x0e, 0xd2, 0x2c, 0x65, 0xbd, 0x7a, 0x48, 0xcd,",
          "469:     0xd4, 0x76, 0x15, 0xb6, 0x86, 0xcb, 0x0c, 0x2d, 0x16, 0x7e, 0x09, 0x16, 0x8b, 0x90, 0x11, 0x6d, 0x15, 0x8e, 0x69,",
          "470:     0xaf, 0x6d, 0x1f, 0x48, 0x64, 0x6e, 0x93, 0x28, 0xcc, 0x57, 0x55, 0xfa, 0xeb, 0x54, 0xf2, 0xdb, 0x02, 0x4c, 0xdd,",
          "471:     0x07, 0x0f, 0x3c, 0xf5, 0xcf, 0x88, 0xcc, 0x35, 0x8b, 0x29, 0xc0, 0x74, 0x17, 0xc8, 0x82, 0x68, 0x82, 0x5f, 0x10,",
          "472:     0xbb, 0x4b, 0xcb, 0x13, 0xca, 0xee, 0x5a, 0xa2, 0xcc, 0x0a, 0x3a, 0x8f, 0xc1, 0xc6, 0xb8, 0xf3, 0xf0, 0x37, 0x2f,",
          "473:     0xbf, 0x94, 0x38, 0x52, 0x97, 0xf4, 0x6c, 0xbb, 0x87, 0xa7, 0x39, 0x89, 0x2e, 0xc1, 0xd4, 0x21, 0x01, 0x7a, 0x82,",
          "474:     0xce, 0xae, 0xde, 0x3c, 0x93, 0x91, 0xd2, 0x9c, 0x25, 0xf4, 0x99, 0x7e, 0xb9, 0x15, 0xbb, 0x0f, 0xe7, 0x17, 0x6a,",
          "475:     0x37, 0x3a, 0x8d, 0x08, 0xe8, 0x9f, 0x1a, 0xe8, 0xbc, 0x3e, 0xb2, 0x5a, 0x0f, 0xd6, 0x3d, 0x00, 0x18, 0x84, 0xd4,",
          "476:     0x6e, 0xe5, 0x02, 0xaa, 0x36, 0x94, 0x18, 0xa1, 0xde, 0x6a, 0x20, 0xcb, 0xdf, 0x05, 0x09, 0x11, 0x81, 0xbd, 0x8b,",
          "477:     0x9f, 0x72, 0x8b, 0xc1, 0xa0, 0x92, 0x9a, 0xc1, 0x2c, 0x1e, 0x8f, 0x13, 0xd6, 0x53, 0xc2, 0xdf, 0xea, 0x3c, 0xc4,",
          "478:     0x48, 0xa9, 0xb9, 0x65, 0xf5, 0x5d, 0x31, 0x90, 0xa7, 0xf1, 0x14, 0x9d, 0x80, 0x32, 0x82, 0xdf, 0x63, 0x5b, 0x8b,",
          "479:     0x4e, 0x19, 0x42, 0x6c, 0x57, 0xc8, 0xa3, 0xe7, 0xfa, 0x5a, 0x1e, 0x80, 0x26, 0x44, 0x1b, 0x0e, 0x46, 0x75, 0x36,",
          "480:     0x0f, 0x5a, 0xbb, 0xf5, 0x85, 0x60, 0x95, 0x5e, 0x82, 0xb7, 0x66, 0x59, 0x1e, 0xd0, 0x44, 0x4b, 0x7c, 0xf8, 0xc7,",
          "481:     0xf2, 0x3b, 0xb2, 0x8c, 0x06, 0xc0, 0x6f, 0x7e, 0xe9, 0xa2, 0xb2, 0xbe, 0x98, 0xff, 0x3f, 0xa7, 0xe5, 0x8b, 0xf5,",
          "482:     0xa7, 0xe5, 0x0b, 0x75, 0x5a, 0x6e, 0xa6, 0xd8, 0xcf, 0x26, 0x1d, 0xfc, 0xd3, 0xab, 0x16, 0x04, 0xbb, 0x02, 0xe8,",
          "483:     0xb0, 0x50, 0xe9, 0x6b, 0x75, 0xe1, 0x3f, 0x1a, 0xba, 0xed, 0xe1, 0x1f, 0x1f, 0xd4, 0x9b, 0xb6, 0x85, 0x85, 0xf8,",
          "484:     0xaf, 0x5d, 0xab, 0xea, 0xdc, 0xc7, 0x3a, 0xec, 0xf5, 0x60, 0xb5, 0xae, 0x7b, 0xf3, 0xa1, 0x05, 0x7e, 0xc5, 0x9d,",
          "485:     0x40, 0x31, 0x63, 0xb0, 0x43, 0xa2, 0x93, 0x13, 0x28, 0x9d, 0x64, 0xa3, 0x45, 0xf1, 0x8f, 0x12, 0x7e, 0x89, 0xc4,",
          "486:     0x1b, 0x8f, 0x74, 0x63, 0x1c, 0xd5, 0x55, 0x84, 0xdd, 0xd5, 0x08, 0x4b, 0xbd, 0x4f, 0x41, 0x01, 0x84, 0xc9, 0x9c,",
          "487:     0xae, 0x7f, 0x7f, 0xcd, 0x21, 0xf8, 0xbb, 0xec, 0xcd, 0xda, 0xc5, 0xfc, 0x7b, 0x91, 0x71, 0x23, 0x12, 0x7e, 0x17,",
          "488:     0x0e, 0xcc, 0x3d, 0x6c, 0x3f, 0x5e, 0x0f, 0xee, 0x91, 0x9a, 0x69, 0xa8, 0x84, 0x82, 0x94, 0x3b, 0xa0, 0xe2, 0x46,",
          "489:     0x8b, 0x84, 0xdf, 0x3c, 0xea, 0x75, 0x94, 0xb1, 0x32, 0xea, 0x0d, 0x0c, 0xbd, 0x6a, 0x7b, 0x47, 0x2e, 0xfd, 0xd9,",
          "490:     0x17, 0xf7, 0xf1, 0x8f, 0xf0, 0xea, 0x9c, 0x54, 0x8a, 0xbf, 0x30, 0x7c, 0x51, 0xf1, 0xdf, 0xac, 0x69, 0xf6, 0x42,",
          "491:     0x82, 0x93, 0x72, 0x7f, 0xd7, 0xd6, 0xa8, 0xcf, 0xde, 0xa9, 0xb9, 0xd4, 0x83, 0x7e, 0x57, 0xeb, 0xdf, 0x37, 0xf8,",
          "492:     0x1d, 0xdb, 0x8e, 0x84, 0xce, 0x5c, 0x6f, 0x2b, 0x7f, 0x65, 0xc2, 0x6a, 0x63, 0x81, 0xe7, 0xbb, 0x36, 0x57, 0x1b,",
          "493:     0x44, 0xed, 0x37, 0xc3, 0x13, 0x6d, 0x1e, 0xc9, 0xb0, 0x1b, 0xb6, 0x17, 0x16, 0xd2, 0xb7, 0x2c, 0xbc, 0x87, 0x9f,",
          "494:     0x1a, 0xb2, 0x2e, 0x66, 0x49, 0x0a, 0x3a, 0xd5, 0x94, 0xf3, 0x79, 0xb0, 0xb3, 0x73, 0x7e, 0x7e, 0xee, 0x9f, 0xef,",
          "495:     0xfa, 0x59, 0x7e, 0xba, 0xd3, 0x6d, 0xb7, 0xdb, 0xf8, 0x85, 0x18, 0xdb, 0x3a, 0x8b, 0xd9, 0xf9, 0x97, 0xd9, 0x45,",
          "496:     0x68, 0x3f, 0xb2, 0x1e, 0x5b, 0x8f, 0x76, 0xad, 0x07, 0x0f, 0x6d, 0x8b, 0xb8, 0x3f, 0x94, 0xec, 0xda, 0x96, 0xe0,",
          "497:     0xfe, 0xa1, 0x0d, 0xc5, 0xfd, 0xbd, 0x53, 0xa5, 0xc0, 0x61, 0x06, 0xae, 0x50, 0x8f, 0xc0, 0x66, 0xc9, 0x3e, 0xb1,",
          "498:     0xfa, 0x39, 0x17, 0x65, 0x2d, 0x29, 0x43, 0xd4, 0x2b, 0x1e, 0xf6, 0x51, 0x34, 0x0f, 0x88, 0x86, 0xcc, 0x42, 0x74,",
          "499:     0x00, 0x89, 0x52, 0x9a, 0x02, 0xa3, 0xba, 0x27, 0xf0, 0x04, 0x1a, 0xfb, 0xd4, 0x82, 0xe7, 0x57, 0xdd, 0x47, 0x20,",
          "500:     0xe0, 0xce, 0x5a, 0xf7, 0x47, 0xed, 0x56, 0xc7, 0xea, 0xb4, 0xba, 0xfe, 0x23, 0xab, 0x2b, 0xfe, 0x07, 0x06, 0xb9,",
          "501:     0x6b, 0x75, 0xe0, 0x69, 0xd7, 0x82, 0xf7, 0xb3, 0xfb, 0x22, 0x24, 0x1c, 0xd9, 0x3b, 0xfd, 0x3d, 0xfc, 0x85, 0x29,",
          "502:     0xb0, 0xa8, 0x2f, 0x6c, 0xf1, 0x2b, 0x9e, 0xec, 0xcf, 0xcc, 0xd2, 0xce, 0xe3, 0xb5, 0xc5, 0xdd, 0x47, 0x6b, 0x8b,",
          "503:     0x77, 0x1f, 0xae, 0x2d, 0xbe, 0xff, 0xa0, 0x5e, 0xbc, 0x73, 0x2a, 0xaa, 0x34, 0x53, 0x08, 0xed, 0x59, 0x04, 0x54,",
          "504:     0x72, 0xe1, 0x74, 0x00, 0xce, 0xb6, 0xd5, 0xc2, 0x1f, 0x8f, 0xba, 0xae, 0xee, 0x75, 0x82, 0xbd, 0xf4, 0x2a, 0x1f,",
          "505:     0x3d, 0x86, 0x55, 0x3e, 0xef, 0x3e, 0x1c, 0x61, 0x3b, 0x5a, 0x28, 0xfc, 0x3b, 0xdb, 0x7d, 0x3c, 0x02, 0x71, 0x60,",
          "506:     0xe1, 0x3f, 0xf8, 0x33, 0x7d, 0xd0, 0x1d, 0x89, 0x97, 0x36, 0xd6, 0x7f, 0xe8, 0x3c, 0x2a, 0xa0, 0x29, 0xfe, 0xf9,",
          "507:     0x4d, 0xeb, 0xcf, 0xa8, 0xbe, 0x9b, 0xe3, 0xde, 0x07, 0x1c, 0x3d, 0x9e, 0x76, 0xfd, 0x2f, 0xce, 0x1e, 0xf9, 0x8f,",
          "508:     0xa7, 0x9d, 0x47, 0x1f, 0xc4, 0x5b, 0x02, 0x18, 0xfc, 0x02, 0xff, 0x7d, 0xd8, 0x6d, 0x83, 0x69, 0xeb, 0x3f, 0x3e,",
          "509:     0xdb, 0xf5, 0x77, 0x93, 0xd6, 0x43, 0xff, 0x31, 0xfe, 0xab, 0x86, 0x9b, 0x66, 0x33, 0x66, 0x5b, 0xb8, 0xdf, 0x0d,",
          "510:     0xbb, 0xd0, 0x9c, 0xa3, 0x7b, 0xdf, 0x7a, 0x70, 0xff, 0xf9, 0x63, 0xd8, 0xa3, 0x69, 0xa7, 0x0b, 0xff, 0x5f, 0xf7,",
          "511:     0xf8, 0x01, 0x11, 0x2f, 0x07, 0x8e, 0x18, 0xe6, 0xce, 0x29, 0xc4, 0xd1, 0xd7, 0x8a, 0xee, 0x79, 0x3f, 0x5e, 0x67,",
          "512:     0xda, 0xff, 0x70, 0xbb, 0x69, 0xff, 0xd7, 0x3b, 0xba, 0x6f, 0x7f, 0xf8, 0x93, 0x6d, 0xfb, 0x1f, 0x9b, 0xb6, 0xfd,",
          "513:     0x39, 0x5b, 0x31, 0xee, 0x9b, 0xf6, 0xd9, 0x21, 0x73, 0x8e, 0xbe, 0x65, 0x43, 0xcc, 0x13, 0x85, 0xd6, 0x7f, 0xad,",
          "514:     0x79, 0x3a, 0x32, 0x3c, 0xc8, 0xe7, 0x4c, 0x9c, 0xe4, 0xef, 0xaf, 0x43, 0x08, 0xe3, 0xb7, 0x22, 0xe4, 0xc5, 0xdd,",
          "515:     0xf0, 0x41, 0x9f, 0x16, 0xff, 0x13, 0xf1, 0xf1, 0xbd, 0x89, 0x8f, 0x9a, 0x2f, 0x99, 0x8c, 0x79, 0xb2, 0xc1, 0x0f,",
          "516:     0xe8, 0xdd, 0xb1, 0x77, 0x18, 0xbe, 0x15, 0xb6, 0x48, 0x7e, 0x7a, 0xf7, 0x7b, 0xfc, 0xde, 0x22, 0x8d, 0x32, 0xb4,",
          "517:     0xa5, 0x83, 0x62, 0x8e, 0x1f, 0xe3, 0x54, 0x2f, 0x67, 0x22, 0x55, 0x3f, 0xa4, 0x7b, 0x36, 0xf7, 0xb5, 0x73, 0x03,",
          "518:     0x33, 0x5b, 0xc3, 0x65, 0xc6, 0x23, 0xfc, 0x6d, 0x2f, 0x3c, 0xe6, 0x09, 0xde, 0x02, 0x94, 0x37, 0x66, 0x30, 0x11,",
          "519:     0xf3, 0x5b, 0x4c, 0x22, 0x55, 0xee, 0xef, 0x19, 0x3a, 0x0c, 0x5e, 0xb1, 0x71, 0x1c, 0x39, 0xb6, 0x33, 0x87, 0x13,",
          "520:     0x0b, 0x63, 0xb6, 0x6a, 0x19, 0x9c, 0x94, 0xbc, 0xe9, 0xda, 0xea, 0x17, 0x8c, 0xe4, 0xf8, 0xc1, 0xa6, 0xf0, 0x48,",
          "521:     0xba, 0xce, 0x6c, 0xa9, 0xfe, 0xc3, 0xf8, 0xaa, 0x24, 0x47, 0xd6, 0x5d, 0xa9, 0x0c, 0xb6, 0xd0, 0x19, 0x3a, 0x7e,",
          "522:     0x17, 0x6c, 0x08, 0x2a, 0xc6, 0x0f, 0xe0, 0xfc, 0xe0, 0xb4, 0x76, 0x41, 0xa7, 0x31, 0xba, 0xe9, 0x81, 0x86, 0x2b,",
          "523:     0x1f, 0xdf, 0x14, 0x7e, 0x83, 0x46, 0xa9, 0xa7, 0x7f, 0xe3, 0x12, 0x50, 0x86, 0xca, 0xf5, 0xff, 0xf2, 0xf2, 0x50,",
          "524:     0x5e, 0x72, 0xb5, 0xd1, 0x27, 0x49, 0xbe, 0xe8, 0xea, 0x03, 0x3b, 0xdb, 0x20, 0x2e, 0xe8, 0xd7, 0xde, 0x51, 0x50,",
          "525:     0x16, 0x25, 0x02, 0xe6, 0x98, 0x5a, 0xd2, 0x6c, 0x08, 0x6d, 0x21, 0x0f, 0xc6, 0xec, 0x2c, 0x1e, 0x49, 0xb6, 0xee,",
          "526:     0x59, 0x32, 0x37, 0xbe, 0x45, 0xab, 0x08, 0x3b, 0x9e, 0x30, 0x9c, 0xe1, 0x05, 0x65, 0x54, 0x98, 0x66, 0x76, 0xff,",
          "527:     0x5e, 0x4f, 0x43, 0x52, 0x4f, 0xcf, 0xb5, 0xf1, 0x77, 0xf0, 0x1d, 0x81, 0xa1, 0xf6, 0x8f, 0xe1, 0x3d, 0xfc, 0x2d,",
          "528:     0x7c, 0xf7, 0x86, 0xb6, 0xeb, 0x13, 0x53, 0xbc, 0x57, 0xfd, 0x2a, 0x3e, 0xe4, 0x08, 0xdb, 0x20, 0xbf, 0xbc, 0xbb,",
          "529:     0x0a, 0x32, 0x29, 0xb4, 0xba, 0x0f, 0x2a, 0xa1, 0x05, 0xcf, 0x06, 0x97, 0x02, 0x06, 0xda, 0xf5, 0x1f, 0x18, 0xac,",
          "530:     0xf0, 0xac, 0x85, 0x3f, 0x6b, 0xcc, 0xf0, 0x3e, 0x34, 0x50, 0xdc, 0xf0, 0x25, 0x34, 0xdf, 0x15, 0x8c, 0x17, 0xfa,",
          "531:     0xfd, 0x48, 0xac, 0x4a, 0xb0, 0xa9, 0x3a, 0xc5, 0xac, 0x09, 0x8f, 0x88, 0x78, 0xb6, 0xed, 0x39, 0xfa, 0xfb, 0xfe,",
          "532:     0x92, 0x5c, 0xe5, 0xe5, 0xa4, 0xa7, 0xd0, 0xd7, 0xd1, 0xdf, 0xad, 0x5d, 0x57, 0xe7, 0xd5, 0x4e, 0xce, 0x9a, 0x29,",
          "533:     0x90, 0xe0, 0x1b, 0x21, 0x18, 0xca, 0xd5, 0x16, 0xdf, 0x6f, 0x12, 0xc7, 0xb8, 0xfa, 0xc2, 0xd5, 0x9a, 0x74, 0x43,",
          "534:     0xf3, 0x50, 0xb0, 0x8a, 0x68, 0xe8, 0x5c, 0x00, 0x23, 0xa0, 0x9f, 0x55, 0xb1, 0x7a, 0x90, 0x04, 0xe5, 0x27, 0x11,",
          "535:     0xfe, 0xfa, 0x09, 0xfa, 0x51, 0x56, 0x07, 0x90, 0xd3, 0x07, 0xfa, 0x08, 0xd2, 0x17, 0xe3, 0xb2, 0xb9, 0x08, 0xd0,",
          "536:     0x17, 0xf0, 0xb7, 0x99, 0x55, 0xb9, 0xe1, 0xf2, 0xd2, 0x17, 0x86, 0xc1, 0xc7, 0x71, 0x4e, 0x77, 0x09, 0xd5, 0xfa,",
          "537:     0x6b, 0xd7, 0xfc, 0x2a, 0x54, 0xd3, 0xa9, 0x64, 0xc5, 0xc0, 0xc6, 0x22, 0x5b, 0x65, 0xe9, 0x98, 0x5f, 0xa8, 0x35,",
          "538:     0x2f, 0x7b, 0x8d, 0x45, 0x9a, 0x0e, 0x7e, 0xc1, 0xdb, 0x16, 0x48, 0xb6, 0x81, 0x8d, 0x5d, 0xbb, 0x26, 0x52, 0x6e,",
          "539:     0xf0, 0x8e, 0x54, 0xf5, 0x2b, 0x59, 0xcc, 0x03, 0x6f, 0x9b, 0xbb, 0xa5, 0xc7, 0xa5, 0x7d, 0x70, 0xa5, 0xa7, 0xf0,",
          "540:     0x84, 0x45, 0xdc, 0x8f, 0x52, 0xca, 0xf7, 0x70, 0x0c, 0xb6, 0xe0, 0x75, 0xd8, 0xae, 0x5b, 0x02, 0xe7, 0x31, 0x7e,",
          "541:     0x67, 0x8d, 0x40, 0xbd, 0x0f, 0x85, 0x6e, 0xe5, 0xb5, 0x9b, 0x76, 0xfb, 0x6f, 0x0e, 0xf7, 0x2d, 0x71, 0x9a, 0xf7,",
          "542:     0x76, 0xe0, 0x75, 0x8f, 0x6c, 0x61, 0x91, 0x52, 0x10, 0x8a, 0x94, 0x02, 0x4b, 0x64, 0xc3, 0x84, 0xf6, 0x8e, 0x58,",
          "543:     0xa6, 0x6d, 0xb1, 0x74, 0x24, 0x3c, 0x78, 0x33, 0xb0, 0x15, 0x62, 0xfc, 0x8a, 0xd1, 0x0e, 0x76, 0x6b, 0xe1, 0x4e,",
          "544:     0xc3, 0x11, 0x10, 0x3e, 0x3e, 0xa5, 0x20, 0xf0, 0xd4, 0x96, 0xfe, 0x3e, 0x10, 0xeb, 0x4c, 0x65, 0x62, 0xc8, 0xa1,",
          "545:     0x74, 0x5e, 0xde, 0x6a, 0xeb, 0x62, 0x71, 0x32, 0x03, 0x3e, 0xa4, 0x92, 0x29, 0xde, 0xcb, 0x0e, 0x7b, 0x34, 0x15,",
          "546:     0x66, 0x01, 0xae, 0x3a, 0x21, 0xa7, 0x9d, 0xfe, 0x5e, 0x24, 0xf5, 0x1d, 0x3c, 0xbb, 0x05, 0x1c, 0x5e, 0x10, 0x73,",
          "547:     0xa8, 0x54, 0xf8, 0x71, 0xb6, 0x73, 0xce, 0x4e, 0x5a, 0xd1, 0x3c, 0xae, 0x7c, 0x7f, 0x28, 0xfd, 0xfa, 0x7b, 0x4a,",
          "548:     0x10, 0xca, 0x84, 0x33, 0xf9, 0x18, 0x19, 0x89, 0x07, 0x88, 0x38, 0x22, 0xd0, 0x52, 0x3a, 0x16, 0x49, 0x69, 0x04,",
          "549:     0xe4, 0x03, 0xac, 0x44, 0xbf, 0xca, 0x01, 0x29, 0x25, 0x41, 0x69, 0xf7, 0xff, 0xf6, 0xbf, 0xfe, 0xb7, 0xf4, 0x29,",
          "550:     0x02, 0x5a, 0x01, 0x2c, 0xcc, 0xdc, 0xa8, 0x62, 0x67, 0xec, 0x02, 0xac, 0xd0, 0x78, 0xdc, 0x9a, 0x46, 0xc9, 0x04,",
          "551:     0x20, 0x28, 0x98, 0xb8, 0xbb, 0x21, 0xeb, 0x81, 0x0a, 0x24, 0x58, 0x66, 0xd8, 0x59, 0x82, 0x57, 0x2f, 0xc2, 0x1d,",
          "552:     0xfb, 0x43, 0x19, 0x7c, 0x2a, 0xb7, 0x94, 0x08, 0xda, 0xc8, 0xe7, 0x33, 0x68, 0xae, 0x96, 0xd3, 0xa7, 0x7e, 0x23,",
          "553:     0x8c, 0x64, 0x1e, 0xac, 0x96, 0xd0, 0x07, 0x2d, 0x75, 0xa0, 0xe0, 0xdf, 0xfe, 0xf5, 0x3f, 0xff, 0x77, 0xf5, 0x8a,",
          "554:     0xfe, 0xff, 0xbf, 0xfd, 0xcb, 0x3f, 0xfd, 0xdf, 0xff, 0xf3, 0x5f, 0x30, 0x39, 0x52, 0xc6, 0x08, 0xe8, 0x28, 0x59,",
          "555:     0x55, 0x80, 0x40, 0x9c, 0xa9, 0x7a, 0xb6, 0xdf, 0x01, 0xcd, 0x42, 0x04, 0x29, 0x41, 0x22, 0x62, 0xa6, 0x24, 0x50,",
          "556:     0x42, 0xd5, 0x0d, 0x38, 0x83, 0xfd, 0xb3, 0x28, 0x4a, 0x6d, 0x3f, 0x68, 0xdb, 0xd5, 0x9e, 0xf6, 0x8d, 0xbe, 0x3b,",
          "557:     0xb8, 0x1b, 0x77, 0xca, 0x14, 0xf1, 0xf5, 0x5e, 0x2d, 0x95, 0xe3, 0x0a, 0x4b, 0xca, 0xaa, 0xdc, 0x42, 0x8f, 0xf2,",
          "558:     0x12, 0x5f, 0x83, 0xae, 0x51, 0x4c, 0x5b, 0x5b, 0xeb, 0xd3, 0xfb, 0x65, 0x51, 0xf0, 0x78, 0x82, 0xfb, 0x21, 0xdc,",
          "559:     0x63, 0x14, 0x0a, 0x6c, 0xa1, 0x4a, 0x92, 0x5c, 0x96, 0x34, 0x8a, 0x30, 0x61, 0xee, 0x3f, 0xfe, 0x87, 0xf2, 0x2f,",
          "560:     0x33, 0x54, 0x05, 0x2c, 0x67, 0x16, 0x5d, 0x48, 0xc3, 0xe6, 0x61, 0xbb, 0x3d, 0xbf, 0x70, 0x97, 0xd5, 0x0c, 0xde,",
          "561:     0x75, 0x93, 0x91, 0x4b, 0xcd, 0x1c, 0x90, 0x62, 0x88, 0xda, 0x7b, 0x07, 0xba, 0x7c, 0x1b, 0x9d, 0x3d, 0x65, 0xf9,",
          "562:     0xf9, 0x92, 0x1c, 0x48, 0xf1, 0x6f, 0x18, 0xeb, 0x93, 0xbe, 0x36, 0x28, 0x31, 0x56, 0xb1, 0x34, 0x7a, 0x75, 0x45,",
          "563:     0xaf, 0x69, 0x67, 0x35, 0xd3, 0xc4, 0x8c, 0x55, 0x9a, 0x51, 0x46, 0xcc, 0xc3, 0x80, 0x0e, 0xde, 0xb4, 0xbb, 0xd4,",
          "564:     0xc3, 0x73, 0x9e, 0xcd, 0xcc, 0xe0, 0x24, 0x8b, 0xd8, 0x88, 0x4d, 0x94, 0x8f, 0x52, 0xd6, 0x8b, 0xc0, 0x63, 0xf9,",
          "565:     0x19, 0x9e, 0x31, 0xc0, 0x6d, 0x16, 0xf1, 0x80, 0x28, 0xb5, 0x67, 0x86, 0x2f, 0x23, 0x0c, 0x0c, 0x67, 0x4b, 0x63,",
          "566:     0xae, 0x9e, 0x68, 0x8a, 0x9e, 0xc0, 0x7a, 0x7e, 0x4a, 0xe9, 0x53, 0x77, 0x73, 0x28, 0xe1, 0x48, 0x78, 0x51, 0x65,",
          "567:     0x87, 0x54, 0x26, 0xf6, 0xbb, 0x9a, 0x39, 0x2e, 0x99, 0x31, 0x18, 0xc1, 0xb7, 0x37, 0x16, 0x52, 0x52, 0x34, 0xfd,",
          "568:     0x15, 0x94, 0x1f, 0x5a, 0x80, 0xdd, 0x6c, 0x45, 0x85, 0xd8, 0xea, 0x5d, 0xf8, 0x42, 0xab, 0xe2, 0xd1, 0x7c, 0x4e,",
          "569:     0x0d, 0x5d, 0xa0, 0x53, 0x52, 0xa9, 0x91, 0x71, 0x50, 0x2c, 0x5c, 0x84, 0x9e, 0x65, 0x1b, 0x49, 0xd0, 0xe2, 0x49,",
          "570:     0x06, 0xa5, 0xe9, 0xf7, 0x0d, 0xff, 0x3f, 0xdf, 0x8d, 0x21, 0x2b, 0x85, 0x78, 0x00, 0x00};",
          "572: }  // namespace web_server",
          "573: }  // namespace esphome",
          "",
          "---------------"
        ],
        "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp": [
          "File: esphome/components/web_server/web_server.cpp -> esphome/components/web_server/web_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"esphome/components/fan/fan_helpers.h\"",
          "25: #endif",
          "27: namespace esphome {",
          "28: namespace web_server {",
          "30: static const char *const TAG = \"web_server\";",
          "32: void write_row(AsyncResponseStream *stream, EntityBase *obj, const std::string &klass, const std::string &action,",
          "33:                const std::function<void(AsyncResponseStream &stream, EntityBase *obj)> &action_func = nullptr) {",
          "34:   stream->print(\"<tr class=\\\"\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #ifdef USE_CLIMATE",
          "28: #include \"esphome/components/climate/climate.h\"",
          "29: #endif",
          "31: #ifdef USE_WEBSERVER_LOCAL",
          "32: #include \"server_index.h\"",
          "33: #endif",
          "40: #if USE_WEBSERVER_VERSION == 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   stream->print(\"</td>\");",
          "50:   stream->print(\"</tr>\");",
          "51: }",
          "53: UrlMatch match_url(const std::string &url, bool only_domain = false) {",
          "54:   UrlMatch match;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:   this->base_->init();",
          "89:   this->events_.onConnect([this](AsyncEventSourceClient *client) {",
          "93: #ifdef USE_SENSOR",
          "94:     for (auto *obj : App.get_sensors()) {",
          "95:       if (this->include_internal_ || !obj->is_internal())",
          "97:     }",
          "98: #endif",
          "100: #ifdef USE_SWITCH",
          "101:     for (auto *obj : App.get_switches()) {",
          "102:       if (this->include_internal_ || !obj->is_internal())",
          "104:     }",
          "105: #endif",
          "107: #ifdef USE_BINARY_SENSOR",
          "108:     for (auto *obj : App.get_binary_sensors()) {",
          "109:       if (this->include_internal_ || !obj->is_internal())",
          "111:     }",
          "112: #endif",
          "114: #ifdef USE_FAN",
          "115:     for (auto *obj : App.get_fans()) {",
          "116:       if (this->include_internal_ || !obj->is_internal())",
          "118:     }",
          "119: #endif",
          "121: #ifdef USE_LIGHT",
          "122:     for (auto *obj : App.get_lights()) {",
          "123:       if (this->include_internal_ || !obj->is_internal())",
          "125:     }",
          "126: #endif",
          "128: #ifdef USE_TEXT_SENSOR",
          "129:     for (auto *obj : App.get_text_sensors()) {",
          "130:       if (this->include_internal_ || !obj->is_internal())",
          "132:     }",
          "133: #endif",
          "135: #ifdef USE_COVER",
          "136:     for (auto *obj : App.get_covers()) {",
          "137:       if (this->include_internal_ || !obj->is_internal())",
          "139:     }",
          "140: #endif",
          "142: #ifdef USE_NUMBER",
          "143:     for (auto *obj : App.get_numbers()) {",
          "144:       if (this->include_internal_ || !obj->is_internal())",
          "146:     }",
          "147: #endif",
          "149: #ifdef USE_SELECT",
          "150:     for (auto *obj : App.get_selects()) {",
          "151:       if (this->include_internal_ || !obj->is_internal())",
          "153:     }",
          "154: #endif",
          "156: #ifdef USE_LOCK",
          "157:     for (auto *obj : App.get_locks()) {",
          "158:       if (this->include_internal_ || !obj->is_internal())",
          "160:     }",
          "161: #endif",
          "162:   });",
          "",
          "[Removed Lines]",
          "91:     client->send(\"\", \"ping\", millis(), 30000);",
          "96:         client->send(this->sensor_json(obj, obj->state).c_str(), \"state\");",
          "103:         client->send(this->switch_json(obj, obj->state).c_str(), \"state\");",
          "110:         client->send(this->binary_sensor_json(obj, obj->state).c_str(), \"state\");",
          "117:         client->send(this->fan_json(obj).c_str(), \"state\");",
          "124:         client->send(this->light_json(obj).c_str(), \"state\");",
          "131:         client->send(this->text_sensor_json(obj, obj->state).c_str(), \"state\");",
          "138:         client->send(this->cover_json(obj).c_str(), \"state\");",
          "145:         client->send(this->number_json(obj, obj->state).c_str(), \"state\");",
          "152:         client->send(this->select_json(obj, obj->state).c_str(), \"state\");",
          "159:         client->send(this->lock_json(obj, obj->state).c_str(), \"state\");",
          "",
          "[Added Lines]",
          "102:     client->send(json::build_json([this](JsonObject root) {",
          "103:                    root[\"title\"] = App.get_name();",
          "104:                    root[\"ota\"] = this->allow_ota_;",
          "105:                    root[\"lang\"] = \"en\";",
          "106:                  }).c_str(),",
          "107:                  \"ping\", millis(), 30000);",
          "112:         client->send(this->sensor_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "119:         client->send(this->switch_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "123: #ifdef USE_BUTTON",
          "124:     for (auto *obj : App.get_buttons())",
          "125:       client->send(this->button_json(obj, DETAIL_ALL).c_str(), \"state\");",
          "126: #endif",
          "131:         client->send(this->binary_sensor_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "138:         client->send(this->fan_json(obj, DETAIL_ALL).c_str(), \"state\");",
          "145:         client->send(this->light_json(obj, DETAIL_ALL).c_str(), \"state\");",
          "152:         client->send(this->text_sensor_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "159:         client->send(this->cover_json(obj, DETAIL_ALL).c_str(), \"state\");",
          "166:         client->send(this->number_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "173:         client->send(this->select_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "174:     }",
          "175: #endif",
          "177: #ifdef USE_CLIMATE",
          "178:     for (auto *obj : App.get_climates()) {",
          "179:       if (this->include_internal_ || !obj->is_internal())",
          "180:         client->send(this->climate_json(obj, DETAIL_ALL).c_str(), \"state\");",
          "187:         client->send(this->lock_json(obj, obj->state, DETAIL_ALL).c_str(), \"state\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181: }",
          "182: float WebServer::get_setup_priority() const { return setup_priority::WIFI - 1.0f; }",
          "184: void WebServer::handle_index_request(AsyncWebServerRequest *request) {",
          "185:   AsyncResponseStream *stream = request->beginResponseStream(\"text/html\");",
          "190:   stream->print(title.c_str());",
          "191:   stream->print(F(\"</title>\"));",
          "193:   stream->print(F(\"<link rel=\\\"stylesheet\\\" href=\\\"/0.css\\\">\"));",
          "194: #endif",
          "195:   if (strlen(this->css_url_) > 0) {",
          "",
          "[Removed Lines]",
          "186:   std::string title = App.get_name() + \" Web Server\";",
          "187:   stream->print(F(\"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=UTF-8>\"",
          "188:                   \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, \"",
          "189:                   \"initial-scale=1.0\\\"><title>\"));",
          "192: #ifdef WEBSERVER_CSS_INCLUDE",
          "",
          "[Added Lines]",
          "212: #ifdef USE_WEBSERVER_LOCAL",
          "213: void WebServer::handle_index_request(AsyncWebServerRequest *request) {",
          "214:   AsyncWebServerResponse *response = request->beginResponse_P(200, \"text/html\", INDEX_GZ, sizeof(INDEX_GZ));",
          "215:   response->addHeader(\"Content-Encoding\", \"gzip\");",
          "216:   request->send(response);",
          "217: }",
          "218: #else",
          "222:   stream->addHeader(\"Access-Control-Allow-Origin\", \"*\");",
          "223: #if USE_WEBSERVER_VERSION == 1",
          "224:   const std::string &title = App.get_name();",
          "225:   stream->print(F(\"<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=UTF-8><meta \"",
          "226:                   \"name=viewport content=\\\"width=device-width, initial-scale=1,user-scalable=no\\\"><title>\"));",
          "229: #else",
          "230:   stream->print(F(\"<!DOCTYPE html><html><head><meta charset=UTF-8><link rel=icon href=data:>\"));",
          "231: #endif",
          "232: #ifdef USE_WEBSERVER_CSS_INCLUDE",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "197:     stream->print(this->css_url_);",
          "198:     stream->print(F(\"\\\">\"));",
          "199:   }",
          "201:   stream->print(title.c_str());",
          "206: #ifdef USE_SENSOR",
          "207:   for (auto *obj : App.get_sensors()) {",
          "",
          "[Removed Lines]",
          "200:   stream->print(F(\"</head><body><article class=\\\"markdown-body\\\"><h1>\"));",
          "202:   stream->print(F(\"</h1><h2>States</h2><table id=\\\"states\\\"><thead><tr><th>Name<th>State<th>Actions<tbody>\"));",
          "204:   stream->addHeader(\"Access-Control-Allow-Origin\", \"*\");",
          "",
          "[Added Lines]",
          "240:   stream->print(F(\"</head><body>\"));",
          "241: #if USE_WEBSERVER_VERSION == 1",
          "242:   stream->print(F(\"<article class=\\\"markdown-body\\\"><h1>\"));",
          "244:   stream->print(F(\"</h1>\"));",
          "245:   stream->print(F(\"<h2>States</h2><table id=\\\"states\\\"><thead><tr><th>Name<th>State<th>Actions<tbody>\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:   }",
          "309: #endif",
          "311:   stream->print(F(\"</tbody></table><p>See <a href=\\\"https://esphome.io/web-api/index.html\\\">ESPHome Web API</a> for \"",
          "312:                   \"REST API documentation.</p>\"));",
          "313:   if (this->allow_ota_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352: #ifdef USE_CLIMATE",
          "353:   for (auto *obj : App.get_climates()) {",
          "354:     if (this->include_internal_ || !obj->is_internal())",
          "355:       write_row(stream, obj, \"climate\", \"\");",
          "356:   }",
          "357: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:           \"type=\\\"file\\\" name=\\\"update\\\"><input type=\\\"submit\\\" value=\\\"Update\\\"></form>\"));",
          "317:   }",
          "318:   stream->print(F(\"<h2>Debug Log</h2><pre id=\\\"log\\\"></pre>\"));",
          "321:   if (this->js_include_ != nullptr) {",
          "323:   }",
          "324: #endif",
          "325:   if (strlen(this->js_url_) > 0) {",
          "326:     stream->print(F(\"<script src=\\\"\"));",
          "327:     stream->print(this->js_url_);",
          "328:     stream->print(F(\"\\\"></script>\"));",
          "329:   }",
          "330:   stream->print(F(\"</article></body></html>\"));",
          "332:   request->send(stream);",
          "333: }",
          "336: void WebServer::handle_css_request(AsyncWebServerRequest *request) {",
          "337:   AsyncResponseStream *stream = request->beginResponseStream(\"text/css\");",
          "338:   if (this->css_include_ != nullptr) {",
          "",
          "[Removed Lines]",
          "320: #ifdef WEBSERVER_JS_INCLUDE",
          "322:     stream->print(F(\"<script src=\\\"/0.js\\\"></script>\"));",
          "335: #ifdef WEBSERVER_CSS_INCLUDE",
          "",
          "[Added Lines]",
          "367: #endif",
          "368: #ifdef USE_WEBSERVER_JS_INCLUDE",
          "370:     stream->print(F(\"<script type=\\\"module\\\" src=\\\"/0.js\\\"></script>\"));",
          "372: #endif",
          "373: #if USE_WEBSERVER_VERSION == 2",
          "374:   stream->print(F(\"<esp-app></esp-app>\"));",
          "381: #if USE_WEBSERVER_VERSION == 1",
          "383: #else",
          "384:   stream->print(F(\"</body></html>\"));",
          "385: #endif",
          "389: #endif",
          "390: #ifdef USE_WEBSERVER_CSS_INCLUDE",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "343: }",
          "344: #endif",
          "347: void WebServer::handle_js_request(AsyncWebServerRequest *request) {",
          "348:   AsyncResponseStream *stream = request->beginResponseStream(\"text/javascript\");",
          "349:   if (this->js_include_ != nullptr) {",
          "350:     stream->print(this->js_include_);",
          "351:   }",
          "",
          "[Removed Lines]",
          "346: #ifdef WEBSERVER_JS_INCLUDE",
          "",
          "[Added Lines]",
          "401: #ifdef USE_WEBSERVER_JS_INCLUDE",
          "405:     stream->addHeader(\"Access-Control-Allow-Origin\", \"*\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "354: }",
          "355: #endif",
          "357: #ifdef USE_SENSOR",
          "358: void WebServer::on_sensor_update(sensor::Sensor *obj, float state) {",
          "360: }",
          "361: void WebServer::handle_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "362:   for (sensor::Sensor *obj : App.get_sensors()) {",
          "363:     if (obj->get_object_id() != match.id)",
          "364:       continue;",
          "366:     request->send(200, \"text/json\", data.c_str());",
          "367:     return;",
          "368:   }",
          "369:   request->send(404);",
          "370: }",
          "374:     std::string state = value_accuracy_to_string(value, obj->get_accuracy_decimals());",
          "375:     if (!obj->get_unit_of_measurement().empty())",
          "376:       state += \" \" + obj->get_unit_of_measurement();",
          "379:   });",
          "380: }",
          "381: #endif",
          "383: #ifdef USE_TEXT_SENSOR",
          "384: void WebServer::on_text_sensor_update(text_sensor::TextSensor *obj, const std::string &state) {",
          "386: }",
          "387: void WebServer::handle_text_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "388:   for (text_sensor::TextSensor *obj : App.get_text_sensors()) {",
          "389:     if (obj->get_object_id() != match.id)",
          "390:       continue;",
          "392:     request->send(200, \"text/json\", data.c_str());",
          "393:     return;",
          "394:   }",
          "395:   request->send(404);",
          "396: }",
          "402:   });",
          "403: }",
          "404: #endif",
          "406: #ifdef USE_SWITCH",
          "407: void WebServer::on_switch_update(switch_::Switch *obj, bool state) {",
          "409: }",
          "415:   });",
          "416: }",
          "417: void WebServer::handle_switch_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "",
          "[Removed Lines]",
          "359:   this->events_.send(this->sensor_json(obj, state).c_str(), \"state\");",
          "365:     std::string data = this->sensor_json(obj, obj->state);",
          "371: std::string WebServer::sensor_json(sensor::Sensor *obj, float value) {",
          "372:   return json::build_json([obj, value](JsonObject root) {",
          "373:     root[\"id\"] = \"sensor-\" + obj->get_object_id();",
          "377:     root[\"state\"] = state;",
          "378:     root[\"value\"] = value;",
          "385:   this->events_.send(this->text_sensor_json(obj, state).c_str(), \"state\");",
          "391:     std::string data = this->text_sensor_json(obj, obj->state);",
          "397: std::string WebServer::text_sensor_json(text_sensor::TextSensor *obj, const std::string &value) {",
          "398:   return json::build_json([obj, value](JsonObject root) {",
          "399:     root[\"id\"] = \"text_sensor-\" + obj->get_object_id();",
          "400:     root[\"state\"] = value;",
          "401:     root[\"value\"] = value;",
          "408:   this->events_.send(this->switch_json(obj, state).c_str(), \"state\");",
          "410: std::string WebServer::switch_json(switch_::Switch *obj, bool value) {",
          "411:   return json::build_json([obj, value](JsonObject root) {",
          "412:     root[\"id\"] = \"switch-\" + obj->get_object_id();",
          "413:     root[\"state\"] = value ? \"ON\" : \"OFF\";",
          "414:     root[\"value\"] = value;",
          "",
          "[Added Lines]",
          "413: #define set_json_id(root, obj, sensor, start_config) \\",
          "414:   (root)[\"id\"] = sensor; \\",
          "415:   if (((start_config) == DETAIL_ALL)) \\",
          "416:     (root)[\"name\"] = (obj)->get_name();",
          "418: #define set_json_value(root, obj, sensor, value, start_config) \\",
          "419:   set_json_id((root), (obj), sensor, start_config)(root)[\"value\"] = value;",
          "421: #define set_json_state_value(root, obj, sensor, state, value, start_config) \\",
          "422:   set_json_value(root, obj, sensor, value, start_config)(root)[\"state\"] = state;",
          "424: #define set_json_icon_state_value(root, obj, sensor, state, value, start_config) \\",
          "425:   set_json_value(root, obj, sensor, value, start_config)(root)[\"state\"] = state; \\",
          "426:   if (((start_config) == DETAIL_ALL)) \\",
          "427:     (root)[\"icon\"] = (obj)->get_icon();",
          "431:   this->events_.send(this->sensor_json(obj, state, DETAIL_STATE).c_str(), \"state\");",
          "437:     std::string data = this->sensor_json(obj, obj->state, DETAIL_STATE);",
          "443: std::string WebServer::sensor_json(sensor::Sensor *obj, float value, JsonDetail start_config) {",
          "444:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "448:     set_json_icon_state_value(root, obj, \"sensor-\" + obj->get_object_id(), state, value, start_config);",
          "455:   this->events_.send(this->text_sensor_json(obj, state, DETAIL_STATE).c_str(), \"state\");",
          "461:     std::string data = this->text_sensor_json(obj, obj->state, DETAIL_STATE);",
          "467: std::string WebServer::text_sensor_json(text_sensor::TextSensor *obj, const std::string &value,",
          "468:                                         JsonDetail start_config) {",
          "469:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "470:     set_json_icon_state_value(root, obj, \"text_sensor-\" + obj->get_object_id(), value, value, start_config);",
          "477:   this->events_.send(this->switch_json(obj, state, DETAIL_STATE).c_str(), \"state\");",
          "479: std::string WebServer::switch_json(switch_::Switch *obj, bool value, JsonDetail start_config) {",
          "480:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "481:     set_json_icon_state_value(root, obj, \"switch-\" + obj->get_object_id(), value ? \"ON\" : \"OFF\", value, start_config);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "420:       continue;",
          "422:     if (request->method() == HTTP_GET) {",
          "424:       request->send(200, \"text/json\", data.c_str());",
          "425:     } else if (match.method == \"toggle\") {",
          "426:       this->defer([obj]() { obj->toggle(); });",
          "",
          "[Removed Lines]",
          "423:       std::string data = this->switch_json(obj, obj->state);",
          "",
          "[Added Lines]",
          "490:       std::string data = this->switch_json(obj, obj->state, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "441: #endif",
          "443: #ifdef USE_BUTTON",
          "444: void WebServer::handle_button_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "445:   for (button::Button *obj : App.get_buttons()) {",
          "446:     if (obj->get_object_id() != match.id)",
          "447:       continue;",
          "449:     if (request->method() == HTTP_POST && match.method == \"press\") {",
          "450:       this->defer([obj]() { obj->press(); });",
          "451:       request->send(200);",
          "452:     } else {",
          "453:       request->send(404);",
          "454:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: std::string WebServer::button_json(button::Button *obj, JsonDetail start_config) {",
          "512:   return json::build_json(",
          "513:       [obj, start_config](JsonObject root) { set_json_id(root, obj, \"button-\" + obj->get_object_id(), start_config); });",
          "514: }",
          "523:       return;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "461: #ifdef USE_BINARY_SENSOR",
          "462: void WebServer::on_binary_sensor_update(binary_sensor::BinarySensor *obj, bool state) {",
          "464: }",
          "470:   });",
          "471: }",
          "472: void WebServer::handle_binary_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "473:   for (binary_sensor::BinarySensor *obj : App.get_binary_sensors()) {",
          "474:     if (obj->get_object_id() != match.id)",
          "475:       continue;",
          "477:     request->send(200, \"text/json\", data.c_str());",
          "478:     return;",
          "479:   }",
          "",
          "[Removed Lines]",
          "463:   this->events_.send(this->binary_sensor_json(obj, state).c_str(), \"state\");",
          "465: std::string WebServer::binary_sensor_json(binary_sensor::BinarySensor *obj, bool value) {",
          "466:   return json::build_json([obj, value](JsonObject root) {",
          "467:     root[\"id\"] = \"binary_sensor-\" + obj->get_object_id();",
          "468:     root[\"state\"] = value ? \"ON\" : \"OFF\";",
          "469:     root[\"value\"] = value;",
          "476:     std::string data = this->binary_sensor_json(obj, obj->state);",
          "",
          "[Added Lines]",
          "535:   this->events_.send(this->binary_sensor_json(obj, state, DETAIL_STATE).c_str(), \"state\");",
          "537: std::string WebServer::binary_sensor_json(binary_sensor::BinarySensor *obj, bool value, JsonDetail start_config) {",
          "538:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "539:     set_json_state_value(root, obj, \"binary_sensor-\" + obj->get_object_id(), value ? \"ON\" : \"OFF\", value, start_config);",
          "546:     std::string data = this->binary_sensor_json(obj, obj->state, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "482: #endif",
          "484: #ifdef USE_FAN",
          "491:     const auto traits = obj->get_traits();",
          "492:     if (traits.supports_speed()) {",
          "493:       root[\"speed_level\"] = obj->speed;",
          "494: #pragma GCC diagnostic push",
          "495: #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"",
          "",
          "[Removed Lines]",
          "485: void WebServer::on_fan_update(fan::Fan *obj) { this->events_.send(this->fan_json(obj).c_str(), \"state\"); }",
          "486: std::string WebServer::fan_json(fan::Fan *obj) {",
          "487:   return json::build_json([obj](JsonObject root) {",
          "488:     root[\"id\"] = \"fan-\" + obj->get_object_id();",
          "489:     root[\"state\"] = obj->state ? \"ON\" : \"OFF\";",
          "490:     root[\"value\"] = obj->state;",
          "",
          "[Added Lines]",
          "555: void WebServer::on_fan_update(fan::Fan *obj) { this->events_.send(this->fan_json(obj, DETAIL_STATE).c_str(), \"state\"); }",
          "556: std::string WebServer::fan_json(fan::Fan *obj, JsonDetail start_config) {",
          "557:   return json::build_json([obj, start_config](JsonObject root) {",
          "558:     set_json_state_value(root, obj, \"fan-\" + obj->get_object_id(), obj->state ? \"ON\" : \"OFF\", obj->state, start_config);",
          "562:       root[\"speed_count\"] = traits.supported_speed_count();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "517:       continue;",
          "519:     if (request->method() == HTTP_GET) {",
          "521:       request->send(200, \"text/json\", data.c_str());",
          "522:     } else if (match.method == \"toggle\") {",
          "523:       this->defer([obj]() { obj->toggle().perform(); });",
          "",
          "[Removed Lines]",
          "520:       std::string data = this->fan_json(obj);",
          "",
          "[Added Lines]",
          "590:       std::string data = this->fan_json(obj, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "573: #endif",
          "575: #ifdef USE_LIGHT",
          "577: void WebServer::handle_light_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "578:   for (light::LightState *obj : App.get_lights()) {",
          "579:     if (obj->get_object_id() != match.id)",
          "580:       continue;",
          "582:     if (request->method() == HTTP_GET) {",
          "584:       request->send(200, \"text/json\", data.c_str());",
          "585:     } else if (match.method == \"toggle\") {",
          "586:       this->defer([obj]() { obj->toggle().perform(); });",
          "",
          "[Removed Lines]",
          "576: void WebServer::on_light_update(light::LightState *obj) { this->events_.send(this->light_json(obj).c_str(), \"state\"); }",
          "583:       std::string data = this->light_json(obj);",
          "",
          "[Added Lines]",
          "646: void WebServer::on_light_update(light::LightState *obj) {",
          "647:   this->events_.send(this->light_json(obj, DETAIL_STATE).c_str(), \"state\");",
          "648: }",
          "655:       std::string data = this->light_json(obj, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "632:   }",
          "633:   request->send(404);",
          "634: }",
          "638:     root[\"state\"] = obj->remote_values.is_on() ? \"ON\" : \"OFF\";",
          "639:     light::LightJSONSchema::dump_json(*obj, root);",
          "640:   });",
          "641: }",
          "642: #endif",
          "644: #ifdef USE_COVER",
          "646: void WebServer::handle_cover_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "647:   for (cover::Cover *obj : App.get_covers()) {",
          "648:     if (obj->get_object_id() != match.id)",
          "649:       continue;",
          "651:     if (request->method() == HTTP_GET) {",
          "653:       request->send(200, \"text/json\", data.c_str());",
          "654:       continue;",
          "655:     }",
          "",
          "[Removed Lines]",
          "635: std::string WebServer::light_json(light::LightState *obj) {",
          "636:   return json::build_json([obj](JsonObject root) {",
          "637:     root[\"id\"] = \"light-\" + obj->get_object_id();",
          "645: void WebServer::on_cover_update(cover::Cover *obj) { this->events_.send(this->cover_json(obj).c_str(), \"state\"); }",
          "652:       std::string data = this->cover_json(obj);",
          "",
          "[Added Lines]",
          "707: std::string WebServer::light_json(light::LightState *obj, JsonDetail start_config) {",
          "708:   return json::build_json([obj, start_config](JsonObject root) {",
          "709:     set_json_id(root, obj, \"light-\" + obj->get_object_id(), start_config);",
          "713:     if (start_config == DETAIL_ALL) {",
          "714:       JsonArray opt = root.createNestedArray(\"effects\");",
          "715:       opt.add(\"None\");",
          "716:       for (auto const &option : obj->get_effects()) {",
          "717:         opt.add(option->get_name());",
          "718:       }",
          "719:     }",
          "725: void WebServer::on_cover_update(cover::Cover *obj) {",
          "726:   this->events_.send(this->cover_json(obj, DETAIL_STATE).c_str(), \"state\");",
          "727: }",
          "734:       std::string data = this->cover_json(obj, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "684:   }",
          "685:   request->send(404);",
          "686: }",
          "692:     root[\"current_operation\"] = cover::cover_operation_to_str(obj->current_operation);",
          "694:     if (obj->get_traits().get_supports_tilt())",
          "",
          "[Removed Lines]",
          "687: std::string WebServer::cover_json(cover::Cover *obj) {",
          "688:   return json::build_json([obj](JsonObject root) {",
          "689:     root[\"id\"] = \"cover-\" + obj->get_object_id();",
          "690:     root[\"state\"] = obj->is_fully_closed() ? \"CLOSED\" : \"OPEN\";",
          "691:     root[\"value\"] = obj->position;",
          "",
          "[Added Lines]",
          "769: std::string WebServer::cover_json(cover::Cover *obj, JsonDetail start_config) {",
          "770:   return json::build_json([obj, start_config](JsonObject root) {",
          "771:     set_json_state_value(root, obj, \"cover-\" + obj->get_object_id(), obj->is_fully_closed() ? \"CLOSED\" : \"OPEN\",",
          "772:                          obj->position, start_config);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "700: #ifdef USE_NUMBER",
          "701: void WebServer::on_number_update(number::Number *obj, float state) {",
          "703: }",
          "704: void WebServer::handle_number_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "705:   for (auto *obj : App.get_numbers()) {",
          "",
          "[Removed Lines]",
          "702:   this->events_.send(this->number_json(obj, state).c_str(), \"state\");",
          "",
          "[Added Lines]",
          "783:   this->events_.send(this->number_json(obj, state, DETAIL_STATE).c_str(), \"state\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "707:       continue;",
          "709:     if (request->method() == HTTP_GET) {",
          "711:       request->send(200, \"text/json\", data.c_str());",
          "712:       return;",
          "713:     }",
          "715:     if (match.method != \"set\") {",
          "716:       request->send(404);",
          "717:       return;",
          "718:     }",
          "720:     auto call = obj->make_call();",
          "722:     if (request->hasParam(\"value\")) {",
          "723:       String value = request->getParam(\"value\")->value();",
          "724:       optional<float> value_f = parse_number<float>(value.c_str());",
          "",
          "[Removed Lines]",
          "710:       std::string data = this->number_json(obj, obj->state);",
          "",
          "[Added Lines]",
          "791:       std::string data = this->number_json(obj, obj->state, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "732:   }",
          "733:   request->send(404);",
          "734: }",
          "738:     std::string state = str_sprintf(\"%f\", value);",
          "739:     root[\"state\"] = state;",
          "741:   });",
          "742: }",
          "743: #endif",
          "745: #ifdef USE_SELECT",
          "746: void WebServer::on_select_update(select::Select *obj, const std::string &state) {",
          "748: }",
          "749: void WebServer::handle_select_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "750:   for (auto *obj : App.get_selects()) {",
          "",
          "[Removed Lines]",
          "735: std::string WebServer::number_json(number::Number *obj, float value) {",
          "736:   return json::build_json([obj, value](JsonObject root) {",
          "737:     root[\"id\"] = \"number-\" + obj->get_object_id();",
          "740:     root[\"value\"] = value;",
          "747:   this->events_.send(this->select_json(obj, state).c_str(), \"state\");",
          "",
          "[Added Lines]",
          "815: std::string WebServer::number_json(number::Number *obj, float value, JsonDetail start_config) {",
          "816:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "817:     set_json_id(root, obj, \"number-\" + obj->get_object_id(), start_config);",
          "818:     if (start_config == DETAIL_ALL) {",
          "819:       root[\"min_value\"] = obj->traits.get_min_value();",
          "820:       root[\"max_value\"] = obj->traits.get_max_value();",
          "821:       root[\"step\"] = obj->traits.get_step();",
          "822:       root[\"mode\"] = (int) obj->traits.get_mode();",
          "823:     }",
          "826:     if (isnan(value)) {",
          "827:       root[\"value\"] = \"\\\"NaN\\\"\";",
          "828:     } else {",
          "829:       root[\"value\"] = value;",
          "830:     }",
          "837:   this->events_.send(this->select_json(obj, state, DETAIL_STATE).c_str(), \"state\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "752:       continue;",
          "754:     if (request->method() == HTTP_GET) {",
          "756:       request->send(200, \"text/json\", data.c_str());",
          "757:       return;",
          "758:     }",
          "",
          "[Removed Lines]",
          "755:       std::string data = this->select_json(obj, obj->state);",
          "",
          "[Added Lines]",
          "845:       std::string data = this->select_json(obj, obj->state, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "775:   }",
          "776:   request->send(404);",
          "777: }",
          "783:   });",
          "784: }",
          "785: #endif",
          "787: #ifdef USE_LOCK",
          "788: void WebServer::on_lock_update(lock::Lock *obj) {",
          "790: }",
          "796:   });",
          "797: }",
          "798: void WebServer::handle_lock_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "",
          "[Removed Lines]",
          "778: std::string WebServer::select_json(select::Select *obj, const std::string &value) {",
          "779:   return json::build_json([obj, value](JsonObject root) {",
          "780:     root[\"id\"] = \"select-\" + obj->get_object_id();",
          "781:     root[\"state\"] = value;",
          "782:     root[\"value\"] = value;",
          "789:   this->events_.send(this->lock_json(obj, obj->state).c_str(), \"state\");",
          "791: std::string WebServer::lock_json(lock::Lock *obj, lock::LockState value) {",
          "792:   return json::build_json([obj, value](JsonObject root) {",
          "793:     root[\"id\"] = \"lock-\" + obj->get_object_id();",
          "794:     root[\"state\"] = lock::lock_state_to_string(value);",
          "795:     root[\"value\"] = value;",
          "",
          "[Added Lines]",
          "868: std::string WebServer::select_json(select::Select *obj, const std::string &value, JsonDetail start_config) {",
          "869:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "870:     set_json_state_value(root, obj, \"select-\" + obj->get_object_id(), value, value, start_config);",
          "871:     if (start_config == DETAIL_ALL) {",
          "872:       JsonArray opt = root.createNestedArray(\"option\");",
          "873:       for (auto &option : obj->traits.get_options()) {",
          "874:         opt.add(option);",
          "875:       }",
          "876:     }",
          "877:   });",
          "878: }",
          "879: #endif",
          "881: #ifdef USE_CLIMATE",
          "882: void WebServer::on_climate_update(climate::Climate *obj) {",
          "883:   this->events_.send(this->climate_json(obj, DETAIL_STATE).c_str(), \"state\");",
          "884: }",
          "886: void WebServer::handle_climate_request(AsyncWebServerRequest *request, const UrlMatch &match) {",
          "887:   for (auto *obj : App.get_climates()) {",
          "888:     if (obj->get_object_id() != match.id)",
          "889:       continue;",
          "891:     if (request->method() == HTTP_GET) {",
          "892:       std::string data = this->climate_json(obj, DETAIL_STATE);",
          "893:       request->send(200, \"text/json\", data.c_str());",
          "894:       return;",
          "895:     }",
          "897:     if (match.method != \"set\") {",
          "898:       request->send(404);",
          "899:       return;",
          "900:     }",
          "902:     auto call = obj->make_call();",
          "904:     if (request->hasParam(\"mode\")) {",
          "905:       String mode = request->getParam(\"mode\")->value();",
          "906:       call.set_mode(mode.c_str());",
          "907:     }",
          "909:     if (request->hasParam(\"target_temperature_high\")) {",
          "910:       String value = request->getParam(\"target_temperature_high\")->value();",
          "911:       optional<float> value_f = parse_number<float>(value.c_str());",
          "912:       if (value_f.has_value())",
          "913:         call.set_target_temperature_high(*value_f);",
          "914:     }",
          "916:     if (request->hasParam(\"target_temperature_low\")) {",
          "917:       String value = request->getParam(\"target_temperature_low\")->value();",
          "918:       optional<float> value_f = parse_number<float>(value.c_str());",
          "919:       if (value_f.has_value())",
          "920:         call.set_target_temperature_low(*value_f);",
          "921:     }",
          "923:     if (request->hasParam(\"target_temperature\")) {",
          "924:       String value = request->getParam(\"target_temperature\")->value();",
          "925:       optional<float> value_f = parse_number<float>(value.c_str());",
          "926:       if (value_f.has_value())",
          "927:         call.set_target_temperature(*value_f);",
          "928:     }",
          "930:     this->defer([call]() mutable { call.perform(); });",
          "931:     request->send(200);",
          "932:     return;",
          "933:   }",
          "934:   request->send(404);",
          "935: }",
          "938: #define PSTR_LOCAL(mode_s) strncpy_P(__buf, (PGM_P)((mode_s)), 15)",
          "940: std::string WebServer::climate_json(climate::Climate *obj, JsonDetail start_config) {",
          "941:   return json::build_json([obj, start_config](JsonObject root) {",
          "942:     set_json_id(root, obj, \"climate-\" + obj->get_object_id(), start_config);",
          "943:     const auto traits = obj->get_traits();",
          "944:     char __buf[16];",
          "946:     if (start_config == DETAIL_ALL) {",
          "947:       JsonArray opt = root.createNestedArray(\"modes\");",
          "948:       for (climate::ClimateMode m : traits.get_supported_modes())",
          "949:         opt.add(PSTR_LOCAL(climate::climate_mode_to_string(m)));",
          "950:       if (!traits.get_supported_custom_fan_modes().empty()) {",
          "951:         JsonArray opt = root.createNestedArray(\"fan_modes\");",
          "952:         for (climate::ClimateFanMode m : traits.get_supported_fan_modes())",
          "953:           opt.add(PSTR_LOCAL(climate::climate_fan_mode_to_string(m)));",
          "954:       }",
          "956:       if (!traits.get_supported_custom_fan_modes().empty()) {",
          "957:         JsonArray opt = root.createNestedArray(\"custom_fan_modes\");",
          "958:         for (auto const &custom_fan_mode : traits.get_supported_custom_fan_modes())",
          "959:           opt.add(custom_fan_mode);",
          "960:       }",
          "961:       if (traits.get_supports_swing_modes()) {",
          "962:         JsonArray opt = root.createNestedArray(\"swing_modes\");",
          "963:         for (auto swing_mode : traits.get_supported_swing_modes())",
          "964:           opt.add(PSTR_LOCAL(climate::climate_swing_mode_to_string(swing_mode)));",
          "965:       }",
          "966:       if (traits.get_supports_presets() && obj->preset.has_value()) {",
          "967:         JsonArray opt = root.createNestedArray(\"presets\");",
          "968:         for (climate::ClimatePreset m : traits.get_supported_presets())",
          "969:           opt.add(PSTR_LOCAL(climate::climate_preset_to_string(m)));",
          "970:       }",
          "971:       if (!traits.get_supported_custom_presets().empty() && obj->custom_preset.has_value()) {",
          "972:         JsonArray opt = root.createNestedArray(\"custom_presets\");",
          "973:         for (auto const &custom_preset : traits.get_supported_custom_presets())",
          "974:           opt.add(custom_preset);",
          "975:       }",
          "976:     }",
          "978:     root[\"mode\"] = PSTR_LOCAL(climate_mode_to_string(obj->mode));",
          "980:     if (traits.get_supports_action()) {",
          "981:       root[\"action\"] = PSTR_LOCAL(climate_action_to_string(obj->action));",
          "982:     }",
          "983:     if (traits.get_supports_fan_modes() && obj->fan_mode.has_value()) {",
          "984:       root[\"fan_mode\"] = PSTR_LOCAL(climate_fan_mode_to_string(obj->fan_mode.value()));",
          "985:     }",
          "986:     if (!traits.get_supported_custom_fan_modes().empty() && obj->custom_fan_mode.has_value()) {",
          "987:       root[\"custom_fan_mode\"] = obj->custom_fan_mode.value().c_str();",
          "988:     }",
          "989:     if (traits.get_supports_presets() && obj->preset.has_value()) {",
          "990:       root[\"preset\"] = PSTR_LOCAL(climate_preset_to_string(obj->preset.value()));",
          "991:     }",
          "992:     if (!traits.get_supported_custom_presets().empty() && obj->custom_preset.has_value()) {",
          "993:       root[\"custom_preset\"] = obj->custom_preset.value().c_str();",
          "994:     }",
          "995:     if (traits.get_supports_swing_modes()) {",
          "996:       root[\"swing_mode\"] = PSTR_LOCAL(climate_swing_mode_to_string(obj->swing_mode));",
          "997:     }",
          "998:     if (traits.get_supports_current_temperature()) {",
          "999:       root[\"current_temperature\"] = obj->current_temperature;",
          "1000:     }",
          "1001:     if (traits.get_supports_two_point_target_temperature()) {",
          "1002:       root[\"current_temperature_low\"] = obj->target_temperature_low;",
          "1003:       root[\"current_temperature_high\"] = obj->target_temperature_low;",
          "1004:     } else {",
          "1005:       root[\"target_temperature\"] = obj->target_temperature;",
          "1006:       root[\"state\"] = obj->target_temperature;",
          "1007:     }",
          "1014:   this->events_.send(this->lock_json(obj, obj->state, DETAIL_STATE).c_str(), \"state\");",
          "1016: std::string WebServer::lock_json(lock::Lock *obj, lock::LockState value, JsonDetail start_config) {",
          "1017:   return json::build_json([obj, value, start_config](JsonObject root) {",
          "1018:     set_json_icon_state_value(root, obj, \"lock-\" + obj->get_object_id(), lock::lock_state_to_string(value), value,",
          "1019:                               start_config);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "801:       continue;",
          "803:     if (request->method() == HTTP_GET) {",
          "805:       request->send(200, \"text/json\", data.c_str());",
          "806:     } else if (match.method == \"lock\") {",
          "807:       this->defer([obj]() { obj->lock(); });",
          "",
          "[Removed Lines]",
          "804:       std::string data = this->lock_json(obj, obj->state);",
          "",
          "[Added Lines]",
          "1028:       std::string data = this->lock_json(obj, obj->state, DETAIL_STATE);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "825:   if (request->url() == \"/\")",
          "826:     return true;",
          "829:   if (request->url() == \"/0.css\")",
          "830:     return true;",
          "831: #endif",
          "834:   if (request->url() == \"/0.js\")",
          "835:     return true;",
          "836: #endif",
          "",
          "[Removed Lines]",
          "828: #ifdef WEBSERVER_CSS_INCLUDE",
          "833: #ifdef WEBSERVER_JS_INCLUDE",
          "",
          "[Added Lines]",
          "1052: #ifdef USE_WEBSERVER_CSS_INCLUDE",
          "1057: #ifdef USE_WEBSERVER_JS_INCLUDE",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "888:     return true;",
          "889: #endif",
          "891: #ifdef USE_LOCK",
          "892:   if ((request->method() == HTTP_POST || request->method() == HTTP_GET) && match.domain == \"lock\")",
          "893:     return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115: #ifdef USE_CLIMATE",
          "1116:   if ((request->method() == HTTP_POST || request->method() == HTTP_GET) && match.domain == \"climate\")",
          "1117:     return true;",
          "1118: #endif",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "901:     return;",
          "902:   }",
          "905:   if (request->url() == \"/0.css\") {",
          "906:     this->handle_css_request(request);",
          "907:     return;",
          "908:   }",
          "909: #endif",
          "912:   if (request->url() == \"/0.js\") {",
          "913:     this->handle_js_request(request);",
          "914:     return;",
          "",
          "[Removed Lines]",
          "904: #ifdef WEBSERVER_CSS_INCLUDE",
          "911: #ifdef WEBSERVER_JS_INCLUDE",
          "",
          "[Added Lines]",
          "1133: #ifdef USE_WEBSERVER_CSS_INCLUDE",
          "1140: #ifdef USE_WEBSERVER_JS_INCLUDE",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "986:   }",
          "987: #endif",
          "989: #ifdef USE_LOCK",
          "990:   if (match.domain == \"lock\") {",
          "991:     this->handle_lock_request(request, match);",
          "992:     return;",
          "993:   }",
          "994: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218: #ifdef USE_CLIMATE",
          "1219:   if (match.domain == \"climate\") {",
          "1220:     this->handle_climate_request(request, match);",
          "1221:     return;",
          "1222:   }",
          "1223: #endif",
          "",
          "---------------"
        ],
        "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h": [
          "File: esphome/components/web_server/web_server.h -> esphome/components/web_server/web_server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #ifdef USE_ARDUINO",
          "5: #include \"esphome/core/component.h\"",
          "6: #include \"esphome/core/controller.h\"",
          "9: #include <vector>",
          "",
          "[Removed Lines]",
          "7: #include \"esphome/components/web_server_base/web_server_base.h\"",
          "",
          "[Added Lines]",
          "5: #include \"esphome/components/web_server_base/web_server_base.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:   bool valid;          ///< Whether this match is valid",
          "20: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: enum JsonDetail { DETAIL_ALL, DETAIL_STATE };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   void handle_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "103: #endif",
          "105: #ifdef USE_SWITCH",
          "",
          "[Removed Lines]",
          "102:   std::string sensor_json(sensor::Sensor *obj, float value);",
          "",
          "[Added Lines]",
          "104:   std::string sensor_json(sensor::Sensor *obj, float value, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:   void handle_switch_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "113: #endif",
          "115: #ifdef USE_BUTTON",
          "117:   void handle_button_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "118: #endif",
          "120: #ifdef USE_BINARY_SENSOR",
          "",
          "[Removed Lines]",
          "112:   std::string switch_json(switch_::Switch *obj, bool value);",
          "",
          "[Added Lines]",
          "114:   std::string switch_json(switch_::Switch *obj, bool value, JsonDetail start_config);",
          "122:   std::string button_json(button::Button *obj, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:   void handle_binary_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "128: #endif",
          "130: #ifdef USE_FAN",
          "",
          "[Removed Lines]",
          "127:   std::string binary_sensor_json(binary_sensor::BinarySensor *obj, bool value);",
          "",
          "[Added Lines]",
          "132:   std::string binary_sensor_json(binary_sensor::BinarySensor *obj, bool value, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:   void handle_fan_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "138: #endif",
          "140: #ifdef USE_LIGHT",
          "",
          "[Removed Lines]",
          "137:   std::string fan_json(fan::Fan *obj);",
          "",
          "[Added Lines]",
          "142:   std::string fan_json(fan::Fan *obj, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "144:   void handle_light_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "148: #endif",
          "150: #ifdef USE_TEXT_SENSOR",
          "",
          "[Removed Lines]",
          "147:   std::string light_json(light::LightState *obj);",
          "",
          "[Added Lines]",
          "152:   std::string light_json(light::LightState *obj, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "154:   void handle_text_sensor_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "158: #endif",
          "160: #ifdef USE_COVER",
          "",
          "[Removed Lines]",
          "157:   std::string text_sensor_json(text_sensor::TextSensor *obj, const std::string &value);",
          "",
          "[Added Lines]",
          "162:   std::string text_sensor_json(text_sensor::TextSensor *obj, const std::string &value, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "164:   void handle_cover_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "168: #endif",
          "170: #ifdef USE_NUMBER",
          "",
          "[Removed Lines]",
          "167:   std::string cover_json(cover::Cover *obj);",
          "",
          "[Added Lines]",
          "172:   std::string cover_json(cover::Cover *obj, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "173:   void handle_number_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "177: #endif",
          "179: #ifdef USE_SELECT",
          "",
          "[Removed Lines]",
          "176:   std::string number_json(number::Number *obj, float value);",
          "",
          "[Added Lines]",
          "181:   std::string number_json(number::Number *obj, float value, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "182:   void handle_select_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "186: #endif",
          "188: #ifdef USE_LOCK",
          "",
          "[Removed Lines]",
          "185:   std::string select_json(select::Select *obj, const std::string &value);",
          "",
          "[Added Lines]",
          "190:   std::string select_json(select::Select *obj, const std::string &value, JsonDetail start_config);",
          "191: #endif",
          "193: #ifdef USE_CLIMATE",
          "194:   void on_climate_update(climate::Climate *obj) override;",
          "196:   void handle_climate_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "199:   std::string climate_json(climate::Climate *obj, JsonDetail start_config);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "192:   void handle_lock_request(AsyncWebServerRequest *request, const UrlMatch &match);",
          "196: #endif",
          "",
          "[Removed Lines]",
          "195:   std::string lock_json(lock::Lock *obj, lock::LockState value);",
          "",
          "[Added Lines]",
          "209:   std::string lock_json(lock::Lock *obj, lock::LockState value, JsonDetail start_config);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffd4280d6c7af4ab7e0ee8f5fe8373531419d413",
      "candidate_info": {
        "commit_hash": "ffd4280d6c7af4ab7e0ee8f5fe8373531419d413",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/ffd4280d6c7af4ab7e0ee8f5fe8373531419d413",
        "files": [
          "esphome/components/web_server/__init__.py"
        ],
        "message": "Require arduino in webserver for better validation (#2941)",
        "before_after_code_files": [
          "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py"
          ],
          "candidate": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
          "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: web_server_ns = cg.esphome_ns.namespace(\"web_server\")",
          "23: WebServer = web_server_ns.class_(\"WebServer\", cg.Component, cg.Controller)",
          "52: @coroutine_with_priority(40.0)",
          "",
          "[Removed Lines]",
          "25: CONFIG_SCHEMA = cv.Schema(",
          "26:     {",
          "27:         cv.GenerateID(): cv.declare_id(WebServer),",
          "28:         cv.Optional(CONF_PORT, default=80): cv.port,",
          "29:         cv.Optional(",
          "30:             CONF_CSS_URL, default=\"https://esphome.io/_static/webserver-v1.min.css\"",
          "31:         ): cv.string,",
          "32:         cv.Optional(CONF_CSS_INCLUDE): cv.file_,",
          "33:         cv.Optional(",
          "34:             CONF_JS_URL, default=\"https://esphome.io/_static/webserver-v1.min.js\"",
          "35:         ): cv.string,",
          "36:         cv.Optional(CONF_JS_INCLUDE): cv.file_,",
          "37:         cv.Optional(CONF_AUTH): cv.Schema(",
          "38:             {",
          "39:                 cv.Required(CONF_USERNAME): cv.All(cv.string_strict, cv.Length(min=1)),",
          "40:                 cv.Required(CONF_PASSWORD): cv.All(cv.string_strict, cv.Length(min=1)),",
          "41:             }",
          "42:         ),",
          "43:         cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
          "44:             web_server_base.WebServerBase",
          "45:         ),",
          "46:         cv.Optional(CONF_INCLUDE_INTERNAL, default=False): cv.boolean,",
          "47:         cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "48:     }",
          "49: ).extend(cv.COMPONENT_SCHEMA)",
          "",
          "[Added Lines]",
          "25: CONFIG_SCHEMA = cv.All(",
          "26:     cv.Schema(",
          "27:         {",
          "28:             cv.GenerateID(): cv.declare_id(WebServer),",
          "29:             cv.Optional(CONF_PORT, default=80): cv.port,",
          "30:             cv.Optional(",
          "31:                 CONF_CSS_URL, default=\"https://esphome.io/_static/webserver-v1.min.css\"",
          "32:             ): cv.string,",
          "33:             cv.Optional(CONF_CSS_INCLUDE): cv.file_,",
          "34:             cv.Optional(",
          "35:                 CONF_JS_URL, default=\"https://esphome.io/_static/webserver-v1.min.js\"",
          "36:             ): cv.string,",
          "37:             cv.Optional(CONF_JS_INCLUDE): cv.file_,",
          "38:             cv.Optional(CONF_AUTH): cv.Schema(",
          "39:                 {",
          "40:                     cv.Required(CONF_USERNAME): cv.All(",
          "41:                         cv.string_strict, cv.Length(min=1)",
          "42:                     ),",
          "43:                     cv.Required(CONF_PASSWORD): cv.All(",
          "44:                         cv.string_strict, cv.Length(min=1)",
          "45:                     ),",
          "46:                 }",
          "47:             ),",
          "48:             cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
          "49:                 web_server_base.WebServerBase",
          "50:             ),",
          "51:             cv.Optional(CONF_INCLUDE_INTERNAL, default=False): cv.boolean,",
          "52:             cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "53:         },",
          "54:     ).extend(cv.COMPONENT_SCHEMA),",
          "55:     cv.only_with_arduino,",
          "56: )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2234f6aacf8cc653307fed80f3750317a82c4f83",
      "candidate_info": {
        "commit_hash": "2234f6aacf8cc653307fed80f3750317a82c4f83",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/2234f6aacf8cc653307fed80f3750317a82c4f83",
        "files": [
          "esphome/components/web_server_base/web_server_base.h"
        ],
        "message": "Fix lint issues in web_server_base (#2409)",
        "before_after_code_files": [
          "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h"
          ],
          "candidate": [
            "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h"
          ]
        }
      },
      "candidate_diff": {
        "esphome/components/web_server_base/web_server_base.h||esphome/components/web_server_base/web_server_base.h": [
          "File: esphome/components/web_server_base/web_server_base.h -> esphome/components/web_server_base/web_server_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #ifdef USE_ARDUINO",
          "5: #include <memory>",
          "6: #include \"esphome/core/component.h\"",
          "8: #include <ESPAsyncWebServer.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <utility>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   std::shared_ptr<AsyncWebServer> get_server() const { return server_; }",
          "97:   float get_setup_priority() const override;",
          "102:   void add_handler(AsyncWebHandler *handler);",
          "",
          "[Removed Lines]",
          "99:   void set_auth_username(std::string auth_username) { credentials_.username = auth_username; }",
          "100:   void set_auth_password(std::string auth_password) { credentials_.password = auth_password; }",
          "",
          "[Added Lines]",
          "100:   void set_auth_username(std::string auth_username) { credentials_.username = std::move(auth_username); }",
          "101:   void set_auth_password(std::string auth_password) { credentials_.password = std::move(auth_password); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bdb48bcac9244df6700410b9cf4ec581dbbda38",
      "candidate_info": {
        "commit_hash": "0bdb48bcac9244df6700410b9cf4ec581dbbda38",
        "repo": "esphome/esphome",
        "commit_url": "https://github.com/esphome/esphome/commit/0bdb48bcac9244df6700410b9cf4ec581dbbda38",
        "files": [
          "esphome/components/web_server/__init__.py",
          "esphome/components/web_server/web_server.cpp",
          "esphome/components/web_server/web_server.h",
          "tests/test1.yaml",
          "tests/test4.yaml"
        ],
        "message": "Make OTA function switchable in web_server component (#2685)\n\nCo-authored-by: Jesse Hills <3060199+jesserockz@users.noreply.github.com>",
        "before_after_code_files": [
          "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
          "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
          "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
            "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
            "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
          ],
          "candidate": [
            "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py",
            "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp",
            "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h"
          ]
        }
      },
      "candidate_diff": {
        "esphome/components/web_server/__init__.py||esphome/components/web_server/__init__.py": [
          "File: esphome/components/web_server/__init__.py -> esphome/components/web_server/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     CONF_AUTH,",
          "13:     CONF_USERNAME,",
          "14:     CONF_PASSWORD,",
          "15: )",
          "16: from esphome.core import CORE, coroutine_with_priority",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     CONF_OTA,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         cv.GenerateID(CONF_WEB_SERVER_BASE_ID): cv.use_id(",
          "42:             web_server_base.WebServerBase",
          "43:         ),",
          "44:     }",
          "45: ).extend(cv.COMPONENT_SCHEMA)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:         cv.Optional(CONF_OTA, default=True): cv.boolean,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     cg.add_define(\"USE_WEBSERVER\")",
          "58:     cg.add(var.set_css_url(config[CONF_CSS_URL]))",
          "59:     cg.add(var.set_js_url(config[CONF_JS_URL]))",
          "60:     if CONF_AUTH in config:",
          "61:         cg.add(paren.set_auth_username(config[CONF_AUTH][CONF_USERNAME]))",
          "62:         cg.add(paren.set_auth_password(config[CONF_AUTH][CONF_PASSWORD]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     cg.add(var.set_allow_ota(config[CONF_OTA]))",
          "",
          "---------------"
        ],
        "esphome/components/web_server/web_server.cpp||esphome/components/web_server/web_server.cpp": [
          "File: esphome/components/web_server/web_server.cpp -> esphome/components/web_server/web_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: #endif",
          "153:   this->base_->add_handler(&this->events_);",
          "154:   this->base_->add_handler(this);",
          "157:   this->set_interval(10000, [this]() { this->events_.send(\"\", \"ping\", millis(), 30000); });",
          "158: }",
          "",
          "[Removed Lines]",
          "155:   this->base_->add_ota_handler();",
          "",
          "[Added Lines]",
          "156:   if (this->allow_ota_)",
          "157:     this->base_->add_ota_handler();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: #endif",
          "242:   stream->print(F(\"</tbody></table><p>See <a href=\\\"https://esphome.io/web-api/index.html\\\">ESPHome Web API</a> for \"",
          "247: #ifdef WEBSERVER_JS_INCLUDE",
          "248:   if (this->js_include_ != nullptr) {",
          "249:     stream->print(F(\"<script src=\\\"/0.js\\\"></script>\"));",
          "",
          "[Removed Lines]",
          "243:                   \"REST API documentation.</p>\"",
          "244:                   \"<h2>OTA Update</h2><form method=\\\"POST\\\" action=\\\"/update\\\" enctype=\\\"multipart/form-data\\\"><input \"",
          "245:                   \"type=\\\"file\\\" name=\\\"update\\\"><input type=\\\"submit\\\" value=\\\"Update\\\"></form>\"",
          "246:                   \"<h2>Debug Log</h2><pre id=\\\"log\\\"></pre>\"));",
          "",
          "[Added Lines]",
          "245:                   \"REST API documentation.</p>\"));",
          "246:   if (this->allow_ota_) {",
          "247:     stream->print(",
          "248:         F(\"<h2>OTA Update</h2><form method=\\\"POST\\\" action=\\\"/update\\\" enctype=\\\"multipart/form-data\\\"><input \"",
          "249:           \"type=\\\"file\\\" name=\\\"update\\\"><input type=\\\"submit\\\" value=\\\"Update\\\"></form>\"));",
          "250:   }",
          "251:   stream->print(F(\"<h2>Debug Log</h2><pre id=\\\"log\\\"></pre>\"));",
          "",
          "---------------"
        ],
        "esphome/components/web_server/web_server.h||esphome/components/web_server/web_server.h": [
          "File: esphome/components/web_server/web_server.h -> esphome/components/web_server/web_server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   void set_js_include(const char *js_include);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   void set_allow_ota(bool allow_ota) { this->allow_ota_ = allow_ota; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   const char *css_include_{nullptr};",
          "183:   const char *js_url_{nullptr};",
          "184:   const char *js_include_{nullptr};",
          "185: };",
          "187: }  // namespace web_server",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:   bool allow_ota_{true};",
          "",
          "---------------"
        ]
      }
    }
  ]
}