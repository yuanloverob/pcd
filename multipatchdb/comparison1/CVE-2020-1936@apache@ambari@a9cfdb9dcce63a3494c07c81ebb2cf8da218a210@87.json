{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55c4c880ad7295abfa9d1bed5ca79902955f5428",
      "candidate_info": {
        "commit_hash": "55c4c880ad7295abfa9d1bed5ca79902955f5428",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/55c4c880ad7295abfa9d1bed5ca79902955f5428",
        "files": [
          "contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java"
        ],
        "message": "AMBARI-25139 Yarn Capacity Scheduler Authorization issues due to AuthToLocal Rules (asnaik) (#3089)",
        "before_after_code_files": [
          "contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java||contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java||contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java": [
          "File: contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java -> contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   private boolean isOperator() {",
          "321:     try {",
          "322:       String response = ambariApi.readFromAmbari(url, \"GET\", null, null);",
          "",
          "[Removed Lines]",
          "319:     String url = String.format(AMBARI_OR_CLUSTER_ADMIN_PRIVILEGE_URL, context.getUsername(), context.getCluster().getName());",
          "",
          "[Added Lines]",
          "319:     String url = String.format(AMBARI_OR_CLUSTER_ADMIN_PRIVILEGE_URL, context.getLoggedinUser(), context.getCluster().getName());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06d4c6494dd59293f1ed05e4a5f2cbdc635d8f3d",
      "candidate_info": {
        "commit_hash": "06d4c6494dd59293f1ed05e4a5f2cbdc635d8f3d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/06d4c6494dd59293f1ed05e4a5f2cbdc635d8f3d",
        "files": [
          "ambari-web/app/controllers/main/host/details.js",
          "ambari-web/app/controllers/wizard/step7/assign_master_controller.js",
          "ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js",
          "ambari-web/app/models/stack_service_component.js",
          "ambari-web/test/controllers/main/host/details_test.js",
          "ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js",
          "ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js"
        ],
        "message": "AMBARI-24286. Enabling Hive Server Interactive doesn't work with ONEFS (amagyar) (#1895) (#1980)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js",
          "ambari-web/app/controllers/wizard/step7/assign_master_controller.js||ambari-web/app/controllers/wizard/step7/assign_master_controller.js",
          "ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js||ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js",
          "ambari-web/app/models/stack_service_component.js||ambari-web/app/models/stack_service_component.js",
          "ambari-web/test/controllers/main/host/details_test.js||ambari-web/test/controllers/main/host/details_test.js",
          "ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js||ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js",
          "ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js||ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3001:         break;",
          "3002:     }",
          "3003:     var component = App.StackServiceComponent.find(componentName);",
          "3005:   },",
          "",
          "[Removed Lines]",
          "3004:     return component.missingDependencies(installedComponents, opt);",
          "",
          "[Added Lines]",
          "3004:     return component.missingDependencies(installedComponents, opt).map(function(componentDependency) {",
          "3005:       return componentDependency.chooseCompatible();",
          "3006:     });",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/wizard/step7/assign_master_controller.js||ambari-web/app/controllers/wizard/step7/assign_master_controller.js": [
          "File: ambari-web/app/controllers/wizard/step7/assign_master_controller.js -> ambari-web/app/controllers/wizard/step7/assign_master_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   getAllMissingDependentServices: function () {",
          "355:     var configActionComponentName = this.get('configActionComponent').componentName;",
          "356:     var componentStackService = App.StackServiceComponent.find(configActionComponentName).get('stackService');",
          "363:     });",
          "364:   },",
          "",
          "[Removed Lines]",
          "357:     var dependentServices = componentStackService.get('requiredServices');",
          "359:     return dependentServices.filter(function (item) {",
          "360:       return !App.Service.find().findProperty('serviceName', item);",
          "361:     }).map(function (item) {",
          "362:       return App.StackService.find(item).get('displayName');",
          "",
          "[Added Lines]",
          "357:     var missing = [];",
          "358:     componentStackService.collectMissingDependencies(this.installedStackServices(), App.StackService.find(), missing);",
          "359:     return missing.mapProperty('displayName');",
          "360:   },",
          "362:   installedStackServices: function() {",
          "363:     return App.Service.find().map(function(each) {",
          "364:       return App.StackService.find(each.get('serviceName'));",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js||ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js": [
          "File: ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js -> ambari-web/app/mixins/main/service/configs/component_actions_by_configs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     var dependentComponents = [];",
          "317:     componentsToAdd.forEach(function (_component) {",
          "319:         return {",
          "321:           hostName: _component.hostName,",
          "322:           isClient: App.StackServiceComponent.find(_dependency.componentName).get('isClient')",
          "323:         }",
          "",
          "[Removed Lines]",
          "318:       var dependencies = App.StackServiceComponent.find(_component.componentName).get('dependencies').filterProperty('scope', 'host').map(function (_dependency) {",
          "320:           componentName: _dependency.componentName,",
          "",
          "[Added Lines]",
          "318:       var componentToAdd = App.StackServiceComponent.find(_component.componentName);",
          "319:       var installedComponents = App.HostComponent.find().filterProperty('hostName', _component.hostName).mapProperty('componentName').uniq();",
          "320:       var dependencies = componentToAdd.missingDependencies(installedComponents, {'scope': 'host'}).map(function (_dependency) {",
          "322:           componentName: _dependency.chooseCompatible(),",
          "",
          "---------------"
        ],
        "ambari-web/app/models/stack_service_component.js||ambari-web/app/models/stack_service_component.js": [
          "File: ambari-web/app/models/stack_service_component.js -> ambari-web/app/models/stack_service_component.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: var App = require('app');",
          "20: var numberUtils = require('utils/number_utils');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var ComponentDependency = Ember.Object.extend({",
          "23:   componentName: null,",
          "24:   compatibleComponents: [],",
          "29:   chooseCompatible: function() {",
          "30:     var compatibleComponent = this.get('compatibleComponents').find(function(component) {",
          "31:       return App.Service.find().someProperty('serviceName', component.get('serviceName'))",
          "32:     });",
          "33:     return (compatibleComponent ? compatibleComponent : this.get('compatibleComponents')[0]).get('componentName');",
          "34:   }",
          "35: });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     dependencies = opt.scope === '*' ? dependencies : dependencies.filterProperty('scope', opt.scope);",
          "88:     if (dependencies.length === 0) return [];",
          "89:     installedComponents = installedComponents.map(function(each) { return App.StackServiceComponent.find(each); });",
          "91:       return !installedComponents.some(function(each) {",
          "92:         return each.compatibleWith(App.StackServiceComponent.find(dependency.componentName));",
          "93:       });",
          "94:     }).mapProperty('componentName');",
          "95:   },",
          "",
          "[Removed Lines]",
          "90:     return dependencies.filter(function (dependency) {",
          "",
          "[Added Lines]",
          "106:     var missingComponents = dependencies.filter(function (dependency) {",
          "111:     return missingComponents.map(function (missingComponentName) {",
          "112:       return ComponentDependency.create({",
          "113:         'componentName': missingComponentName,",
          "114:         'compatibleComponents': App.StackServiceComponent.find().filter(function (each) {",
          "115:           return each.compatibleWith(App.StackServiceComponent.find(missingComponentName));",
          "116:         })",
          "117:       });",
          "118:     });",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/main/host/details_test.js||ambari-web/test/controllers/main/host/details_test.js": [
          "File: ambari-web/test/controllers/main/host/details_test.js -> ambari-web/test/controllers/main/host/details_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3711:     });",
          "3712:     it(\"dependecies should be added\", function () {",
          "3713:       var opt = {scope: '*', installedComponents: ['C2']};",
          "3714:       this.mock.withArgs('C1').returns(App.StackServiceComponent.createRecord({",
          "3715:         dependencies: [{componentName: 'C3'}]",
          "3716:       }));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3714:       this.mock.returns([",
          "3715:         App.StackServiceComponent.createRecord({componentName: 'C1'}),",
          "3716:         App.StackServiceComponent.createRecord({componentName: 'C2'}),",
          "3717:         App.StackServiceComponent.createRecord({componentName: 'C3'})",
          "3718:       ]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3729:     });",
          "3730:     it(\"scope is host\", function () {",
          "3731:       var opt = {scope: 'host', hostName: 'host1'};",
          "3732:       this.mock.withArgs('C1').returns(App.StackServiceComponent.createRecord({",
          "3733:         dependencies: [{componentName: 'C3', scope: 'host'}]",
          "3734:       }));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3737:       this.mock.returns([",
          "3738:         App.StackServiceComponent.createRecord({componentName: 'C1'}),",
          "3739:         App.StackServiceComponent.createRecord({componentName: 'C2'}),",
          "3740:         App.StackServiceComponent.createRecord({componentName: 'C3'})",
          "3741:       ]);",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js||ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js": [
          "File: ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js -> ambari-web/test/controllers/wizard/step7/assign_master_controller_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     beforeEach(function() {",
          "301:       sinon.stub(App.StackServiceComponent, 'find').returns(Em.Object.create({",
          "303:           requiredServices: ['S1', 'S2']",
          "304:         })",
          "305:       }));",
          "306:       sinon.stub(App.Service, 'find').returns([",
          "308:       ]);",
          "309:       sinon.stub(App.StackService, 'find', function(input) {",
          "311:       });",
          "312:     });",
          "",
          "[Removed Lines]",
          "302:         stackService: Em.Object.create({",
          "307:         {serviceName: 'S1'}",
          "310:         return Em.Object.create({displayName: input});",
          "",
          "[Added Lines]",
          "302:         stackService: App.StackService.createRecord({",
          "307:         App.Service.createRecord({serviceName: 'S1'})",
          "310:         return input",
          "311:           ? Em.Object.create({displayName: input, serviceName: input})",
          "312:           : [",
          "313:               App.StackService.createRecord({serviceName: 'S1', displayName: 'S1'}),",
          "314:               App.StackService.createRecord({serviceName: 'S2', displayName: 'S2'})",
          "315:             ]",
          "",
          "---------------"
        ],
        "ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js||ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js": [
          "File: ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js -> ambari-web/test/mixins/main/service/configs/component_actions_by_configs_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   describe(\"#getDependentComponents()\", function () {",
          "300:     beforeEach(function() {",
          "308:       sinon.stub(App.HostComponent, 'find').returns([]);",
          "309:     });",
          "",
          "[Removed Lines]",
          "301:       sinon.stub(App.StackServiceComponent, 'find').returns(Em.Object.create({",
          "302:         dependencies: [{",
          "303:           scope: 'host',",
          "304:           componentName: 'C2'",
          "305:         }],",
          "306:         isClient: false",
          "307:       }));",
          "",
          "[Added Lines]",
          "301:       var mock = sinon.stub(App.StackServiceComponent, 'find');",
          "302:       mock.returns([",
          "303:         App.StackServiceComponent.createRecord({componentName: 'C1'}),",
          "304:         App.StackServiceComponent.createRecord({componentName: 'C2'})",
          "305:       ]);",
          "306:       mock.withArgs('C1').returns(",
          "307:         App.StackServiceComponent.createRecord({",
          "308:           componentName: 'C1',",
          "309:           dependencies: [{ scope: 'host', componentName: 'C2' }],",
          "310:           isClient: false",
          "311:         })",
          "312:       );",
          "313:       mock.withArgs('C2').returns(App.StackServiceComponent.createRecord({componentName: 'C2'}));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16a1ca4363e4237a087172b0bf52c00269c5ba18",
      "candidate_info": {
        "commit_hash": "16a1ca4363e4237a087172b0bf52c00269c5ba18",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/16a1ca4363e4237a087172b0bf52c00269c5ba18",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java",
          "ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java"
        ],
        "message": "AMBARI-25380. UI does not reflect/update task logs. (#3086)\n\n* AMBARI-25380. UI does not reflect/update task logs. (AMBARI-24974. Sometimes Task Log is not refreshed in UI after operation completes.) (mpapirkovskyy) (#2745)\n\n* AMBARI-25380. UI does not reflect/update task logs. (AMBARI-24974. Sometimes Task Log is not refreshed in UI after operation completes.) (mpapirkovskyy) (#2747)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java||ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java",
          "ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java||ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java",
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java||ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java||ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java||ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java -> ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscribeListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.api.stomp;",
          "20: import org.slf4j.Logger;",
          "21: import org.slf4j.LoggerFactory;",
          "22: import org.springframework.beans.factory.annotation.Autowired;",
          "23: import org.springframework.context.event.EventListener;",
          "24: import org.springframework.messaging.MessageHeaders;",
          "25: import org.springframework.stereotype.Component;",
          "26: import org.springframework.web.socket.messaging.SessionDisconnectEvent;",
          "27: import org.springframework.web.socket.messaging.SessionSubscribeEvent;",
          "28: import org.springframework.web.socket.messaging.SessionUnsubscribeEvent;",
          "30: @Component",
          "31: public class NamedTasksSubscribeListener {",
          "32:   private static Logger LOG = LoggerFactory.getLogger(NamedTasksSubscribeListener.class);",
          "34:   @Autowired",
          "35:   private NamedTasksSubscriptions namedTasksSubscriptions;",
          "37:   @EventListener",
          "38:   public void subscribe(SessionSubscribeEvent sse)",
          "39:   {",
          "40:     MessageHeaders msgHeaders = sse.getMessage().getHeaders();",
          "41:     String sessionId  = (String) msgHeaders.get(\"simpSessionId\");",
          "42:     String destination  = (String) msgHeaders.get(\"simpDestination\");",
          "43:     String id  = (String) msgHeaders.get(\"simpSubscriptionId\");",
          "44:     if (sessionId != null && destination != null && id != null) {",
          "45:       namedTasksSubscriptions.addDestination(sessionId, destination, id);",
          "46:     }",
          "47:     LOG.info(String.format(\"API subscribe was arrived with sessionId = %s, destination = %s and id = %s\",",
          "48:         sessionId, destination, id));",
          "49:   }",
          "51:   @EventListener",
          "52:   public void unsubscribe(SessionUnsubscribeEvent suse)",
          "53:   {",
          "54:     MessageHeaders msgHeaders = suse.getMessage().getHeaders();",
          "55:     String sessionId  = (String) msgHeaders.get(\"simpSessionId\");",
          "56:     String id  = (String) msgHeaders.get(\"simpSubscriptionId\");",
          "57:     if (sessionId != null && id != null) {",
          "58:       namedTasksSubscriptions.removeId(sessionId, id);",
          "59:     }",
          "60:     LOG.info(String.format(\"API unsubscribe was arrived with sessionId = %s and id = %s\",",
          "61:         sessionId, id));",
          "62:   }",
          "64:   @EventListener",
          "65:   public void disconnect(SessionDisconnectEvent sde)",
          "66:   {",
          "67:     MessageHeaders msgHeaders = sde.getMessage().getHeaders();",
          "68:     String sessionId  = (String) msgHeaders.get(\"simpSessionId\");",
          "69:     if (sessionId != null) {",
          "70:       namedTasksSubscriptions.removeSession(sessionId);",
          "71:     }",
          "72:     LOG.info(String.format(\"API disconnect was arrived with sessionId = %s\",",
          "73:         sessionId));",
          "74:   }",
          "75: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java||ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java -> ambari-server/src/main/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptions.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.api.stomp;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Iterator;",
          "22: import java.util.List;",
          "23: import java.util.Optional;",
          "24: import java.util.concurrent.ConcurrentHashMap;",
          "25: import java.util.concurrent.atomic.AtomicBoolean;",
          "26: import java.util.concurrent.locks.Lock;",
          "27: import java.util.concurrent.locks.ReentrantLock;",
          "29: import org.apache.ambari.server.events.listeners.tasks.TaskStatusListener;",
          "30: import org.apache.commons.lang.StringUtils;",
          "31: import org.slf4j.Logger;",
          "32: import org.slf4j.LoggerFactory;",
          "34: import com.google.inject.Inject;",
          "35: import com.google.inject.Provider;",
          "36: import com.google.inject.Singleton;",
          "38: @Singleton",
          "39: public class NamedTasksSubscriptions {",
          "40:   private static Logger LOG = LoggerFactory.getLogger(NamedTasksSubscriptions.class);",
          "42:   private ConcurrentHashMap<String, List<SubscriptionId>> taskIds = new ConcurrentHashMap<>();",
          "43:   private final String subscriptionPrefix = \"/events/tasks/\";",
          "44:   private final Lock taskIdsLock = new ReentrantLock();",
          "46:   private Provider<TaskStatusListener> taskStatusListenerProvider;",
          "48:   @Inject",
          "49:   public NamedTasksSubscriptions(Provider<TaskStatusListener> taskStatusListenerProvider) {",
          "50:     this.taskStatusListenerProvider = taskStatusListenerProvider;",
          "51:   }",
          "53:   public void addTaskId(String sessionId, Long taskId, String id) {",
          "54:     try {",
          "55:       taskIdsLock.lock();",
          "56:       taskIds.compute(sessionId, (sid, ids) -> {",
          "57:         if (ids == null) {",
          "58:           ids = new ArrayList<>();",
          "59:         }",
          "60:         AtomicBoolean completed = new AtomicBoolean(false);",
          "61:         taskStatusListenerProvider.get().getActiveTasksMap().computeIfPresent(taskId, (tid, task) -> {",
          "62:           if (task.getStatus().isCompletedState()) {",
          "63:             completed.set(true);",
          "64:           }",
          "65:           return task;",
          "66:         });",
          "67:         if (!completed.get()) {",
          "68:           ids.add(new SubscriptionId(taskId, id));",
          "69:         }",
          "70:         return ids;",
          "71:       });",
          "72:       LOG.info(String.format(\"Task subscription was added for sessionId = %s, taskId = %s, id = %s\",",
          "73:           sessionId, taskId, id));",
          "74:     } finally {",
          "75:       taskIdsLock.unlock();",
          "76:     }",
          "77:   }",
          "79:   public void removeId(String sessionId, String id) {",
          "80:     taskIds.computeIfPresent(sessionId, (sid, tasks) -> {",
          "81:       Iterator<SubscriptionId> iterator = tasks.iterator();",
          "82:       while (iterator.hasNext()) {",
          "83:         if (iterator.next().getId().equals(id)) {",
          "84:           iterator.remove();",
          "85:           LOG.info(String.format(\"Task subscription was removed for sessionId = %s, id = %s\", sessionId, id));",
          "86:         }",
          "87:       }",
          "88:       return tasks;",
          "89:     });",
          "90:   }",
          "92:   public void removeTaskId(Long taskId) {",
          "93:     try {",
          "94:       taskIdsLock.lock();",
          "95:       for (String sessionId : taskIds.keySet()) {",
          "96:         taskIds.computeIfPresent(sessionId, (id, tasks) -> {",
          "97:           Iterator<SubscriptionId> iterator = tasks.iterator();",
          "98:           while (iterator.hasNext()) {",
          "99:             if (iterator.next().getTaskId().equals(taskId)) {",
          "100:               iterator.remove();",
          "101:               LOG.info(String.format(\"Task subscription was removed for sessionId = %s and taskId = %s\",",
          "102:                   sessionId, taskId));",
          "103:             }",
          "104:           }",
          "105:           return tasks;",
          "106:         });",
          "107:       }",
          "108:     } finally {",
          "109:       taskIdsLock.unlock();",
          "110:     }",
          "111:   }",
          "113:   public void removeSession(String sessionId) {",
          "114:     try {",
          "115:       taskIdsLock.lock();",
          "116:       taskIds.remove(sessionId);",
          "117:       LOG.info(String.format(\"Task subscriptions were removed for sessionId = %s\", sessionId));",
          "118:     } finally {",
          "119:       taskIdsLock.unlock();",
          "120:     }",
          "121:   }",
          "123:   public Optional<Long> matchDestination(String destination) {",
          "124:     Optional<Long> taskIdOpt = Optional.of(StringUtils.substringAfter(destination, subscriptionPrefix))",
          "125:         .filter(StringUtils::isNotEmpty)",
          "126:         .filter(StringUtils::isNumeric)",
          "127:         .map(Long::parseLong);",
          "128:     return taskIdOpt;",
          "129:   }",
          "131:   public void addDestination(String sessionId, String destination, String id) {",
          "132:     Optional<Long> taskIdOpt = matchDestination(destination);",
          "133:     if (taskIdOpt.isPresent()) {",
          "134:       addTaskId(sessionId, taskIdOpt.get(), id);",
          "135:     }",
          "136:   }",
          "138:   public boolean checkTaskId(Long taskId) {",
          "139:     for (List<SubscriptionId> ids: taskIds.values()) {",
          "140:       for (SubscriptionId subscriptionId : ids) {",
          "141:         if (subscriptionId.getTaskId().equals(taskId)) {",
          "142:           return true;",
          "143:         }",
          "144:       }",
          "145:     }",
          "146:     return false;",
          "147:   }",
          "149:   public class SubscriptionId {",
          "150:     private final Long taskId;",
          "151:     private final String id;",
          "153:     public SubscriptionId(Long taskId, String id) {",
          "154:       this.taskId = taskId;",
          "155:       this.id = id;",
          "156:     }",
          "158:     public Long getTaskId() {",
          "159:       return taskId;",
          "160:     }",
          "162:     public String getId() {",
          "163:       return id;",
          "164:     }",
          "165:   }",
          "166: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import javax.servlet.ServletContext;",
          "22: import org.apache.ambari.server.agent.stomp.HeartbeatController;",
          "24: import org.apache.ambari.server.events.DefaultMessageEmitter;",
          "25: import org.apache.ambari.server.events.listeners.requests.STOMPUpdateListener;",
          "26: import org.eclipse.jetty.websocket.server.WebSocketServerFactory;",
          "",
          "[Removed Lines]",
          "23: import org.apache.ambari.server.api.stomp.TestController;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: @Configuration",
          "43: @EnableWebSocketMessageBroker",
          "45: @Import({RootStompConfig.class,GuiceBeansConfig.class})",
          "46: public class AgentStompConfig extends AbstractWebSocketMessageBrokerConfigurer {",
          "47:   private org.apache.ambari.server.configuration.Configuration configuration;",
          "",
          "[Removed Lines]",
          "44: @ComponentScan(basePackageClasses = {TestController.class, HeartbeatController.class})",
          "",
          "[Added Lines]",
          "43: @ComponentScan(basePackageClasses = {HeartbeatController.class})",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/ApiStompConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.configuration.spring;",
          "20: import org.apache.ambari.server.api.stomp.TestController;",
          "21: import org.apache.ambari.server.events.DefaultMessageEmitter;",
          "22: import org.apache.ambari.server.events.listeners.requests.STOMPUpdateListener;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.apache.ambari.server.api.stomp.NamedTasksSubscriptions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     return new STOMPUpdateListener(injector, DefaultMessageEmitter.DEFAULT_API_EVENT_TYPES);",
          "51:   }",
          "53:   @Override",
          "54:   public void registerStompEndpoints(StompEndpointRegistry registry) {",
          "55:     registry.addEndpoint(\"/v1\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   @Bean",
          "55:   public NamedTasksSubscriptions namedTasksSubscribtions(Injector injector) {",
          "56:     return injector.getInstance(NamedTasksSubscriptions.class);",
          "57:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java||ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java -> ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         put(STOMPEvent.Type.AGENT_CONFIGS, \"/configs\");",
          "44:         put(STOMPEvent.Type.CONFIGS, \"/events/configs\");",
          "45:         put(STOMPEvent.Type.HOSTCOMPONENT, \"/events/hostcomponents\");",
          "46:         put(STOMPEvent.Type.REQUEST, \"/events/requests\");",
          "47:         put(STOMPEvent.Type.SERVICE, \"/events/services\");",
          "48:         put(STOMPEvent.Type.HOST, \"/events/hosts\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         put(STOMPEvent.Type.NAMEDTASK, \"/events/tasks\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:         STOMPEvent.Type.UI_TOPOLOGY,",
          "71:         STOMPEvent.Type.CONFIGS,",
          "72:         STOMPEvent.Type.HOSTCOMPONENT,",
          "73:         STOMPEvent.Type.REQUEST,",
          "74:         STOMPEvent.Type.SERVICE,",
          "75:         STOMPEvent.Type.HOST,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:         STOMPEvent.Type.NAMEDTASK,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   @Override",
          "103:   protected String getDestination(STOMPEvent stompEvent) {",
          "105:   }",
          "106: }",
          "",
          "[Removed Lines]",
          "104:     return DEFAULT_DESTINATIONS.get(stompEvent.getType());",
          "",
          "[Added Lines]",
          "106:     return stompEvent.completeDestination(DEFAULT_DESTINATIONS.get(stompEvent.getType()));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/NamedTaskUpdateEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.events;",
          "21: import java.util.Objects;",
          "23: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "24: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "26: import com.fasterxml.jackson.annotation.JsonInclude;",
          "27: import com.fasterxml.jackson.annotation.JsonProperty;",
          "32: @JsonInclude(JsonInclude.Include.NON_NULL)",
          "33: public class NamedTaskUpdateEvent extends STOMPEvent {",
          "35:   private Long id;",
          "36:   private Long requestId;",
          "37:   private String hostName;",
          "38:   private Long endTime;",
          "39:   private HostRoleStatus status;",
          "40:   private String errorLog;",
          "41:   private String outLog;",
          "42:   private String stderr;",
          "43:   private String stdout;",
          "45:   @JsonProperty(\"structured_out\")",
          "46:   private String structuredOut;",
          "48:   public NamedTaskUpdateEvent(Long id, Long requestId, String hostName, Long endTime, HostRoleStatus status,",
          "49:                               String errorLog, String outLog, String stderr, String stdout, String structuredOut) {",
          "50:     super(Type.NAMEDTASK);",
          "51:     this.id = id;",
          "52:     this.requestId = requestId;",
          "53:     this.hostName = hostName;",
          "54:     this.endTime = endTime;",
          "55:     this.status = status;",
          "56:     this.errorLog = errorLog;",
          "57:     this.outLog = outLog;",
          "58:     this.stderr = stderr;",
          "59:     this.stdout = stdout;",
          "60:     this.structuredOut = structuredOut;",
          "61:   }",
          "63:   public NamedTaskUpdateEvent(HostRoleCommand hostRoleCommand) {",
          "64:     this(hostRoleCommand.getTaskId(), hostRoleCommand.getRequestId(), hostRoleCommand.getHostName(),",
          "65:         hostRoleCommand.getEndTime(), hostRoleCommand.getStatus(), hostRoleCommand.getErrorLog(),",
          "66:         hostRoleCommand.getOutputLog(), hostRoleCommand.getStderr(), hostRoleCommand.getStdout(),",
          "67:         hostRoleCommand.getStructuredOut());",
          "68:   }",
          "70:   public Long getId() {",
          "71:     return id;",
          "72:   }",
          "74:   public void setId(Long id) {",
          "75:     this.id = id;",
          "76:   }",
          "78:   public Long getRequestId() {",
          "79:     return requestId;",
          "80:   }",
          "82:   public void setRequestId(Long requestId) {",
          "83:     this.requestId = requestId;",
          "84:   }",
          "86:   public String getHostName() {",
          "87:     return hostName;",
          "88:   }",
          "90:   public void setHostName(String hostName) {",
          "91:     this.hostName = hostName;",
          "92:   }",
          "94:   public Long getEndTime() {",
          "95:     return endTime;",
          "96:   }",
          "98:   public void setEndTime(Long endTime) {",
          "99:     this.endTime = endTime;",
          "100:   }",
          "102:   public HostRoleStatus getStatus() {",
          "103:     return status;",
          "104:   }",
          "106:   public void setStatus(HostRoleStatus status) {",
          "107:     this.status = status;",
          "108:   }",
          "110:   public String getErrorLog() {",
          "111:     return errorLog;",
          "112:   }",
          "114:   public void setErrorLog(String errorLog) {",
          "115:     this.errorLog = errorLog;",
          "116:   }",
          "118:   public String getOutLog() {",
          "119:     return outLog;",
          "120:   }",
          "122:   public void setOutLog(String outLog) {",
          "123:     this.outLog = outLog;",
          "124:   }",
          "126:   public String getStderr() {",
          "127:     return stderr;",
          "128:   }",
          "130:   public void setStderr(String stderr) {",
          "131:     this.stderr = stderr;",
          "132:   }",
          "134:   public String getStdout() {",
          "135:     return stdout;",
          "136:   }",
          "138:   public void setStdout(String stdout) {",
          "139:     this.stdout = stdout;",
          "140:   }",
          "142:   public String getStructuredOut() {",
          "143:     return structuredOut;",
          "144:   }",
          "146:   public void setStructuredOut(String structuredOut) {",
          "147:     this.structuredOut = structuredOut;",
          "148:   }",
          "150:   @Override",
          "151:   public String completeDestination(String destination) {",
          "152:     return destination + \"/\" + id;",
          "153:   }",
          "155:   @Override",
          "156:   public boolean equals(Object o) {",
          "157:     if (this == o) return true;",
          "158:     if (o == null || getClass() != o.getClass()) return false;",
          "159:     NamedTaskUpdateEvent that = (NamedTaskUpdateEvent) o;",
          "160:     return Objects.equals(id, that.id) &&",
          "161:         Objects.equals(requestId, that.requestId) &&",
          "162:         Objects.equals(hostName, that.hostName) &&",
          "163:         Objects.equals(endTime, that.endTime) &&",
          "164:         status == that.status &&",
          "165:         Objects.equals(errorLog, that.errorLog) &&",
          "166:         Objects.equals(outLog, that.outLog) &&",
          "167:         Objects.equals(stderr, that.stderr) &&",
          "168:         Objects.equals(stdout, that.stdout) &&",
          "169:         Objects.equals(structuredOut, that.structuredOut);",
          "170:   }",
          "172:   @Override",
          "173:   public int hashCode() {",
          "174:     return Objects.hash(id, requestId, hostName, endTime, status, errorLog, outLog, stderr, stdout, structuredOut);",
          "175:   }",
          "176: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/STOMPEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     CONFIGS(\"events.configs\"),",
          "55:     HOSTCOMPONENT(\"events.hostcomponents\"),",
          "56:     NAMEDHOSTCOMPONENT(\"events.hostrolecommands.named\"),",
          "57:     REQUEST(\"events.requests\"),",
          "58:     SERVICE(\"events.services\"),",
          "59:     HOST(\"events.hosts\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     NAMEDTASK(\"events.tasks.named\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:       return metricName;",
          "77:     }",
          "78:   }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   public String completeDestination(String destination) {",
          "82:     return destination;",
          "83:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java -> ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "35: import org.apache.ambari.server.actionmanager.Request;",
          "36: import org.apache.ambari.server.actionmanager.Stage;",
          "37: import org.apache.ambari.server.controller.internal.CalculatedStatus;",
          "38: import org.apache.ambari.server.events.RequestUpdateEvent;",
          "39: import org.apache.ambari.server.events.TaskCreateEvent;",
          "40: import org.apache.ambari.server.events.TaskUpdateEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.ambari.server.api.stomp.NamedTasksSubscriptions;",
          "39: import org.apache.ambari.server.events.NamedTaskUpdateEvent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   private STOMPUpdatePublisher STOMPUpdatePublisher;",
          "98:   @Inject",
          "99:   public TaskStatusListener(TaskEventPublisher taskEventPublisher, StageDAO stageDAO, RequestDAO requestDAO,",
          "101:     this.stageDAO = stageDAO;",
          "102:     this.requestDAO = requestDAO;",
          "103:     this.STOMPUpdatePublisher = STOMPUpdatePublisher;",
          "104:     taskEventPublisher.register(this);",
          "105:   }",
          "",
          "[Removed Lines]",
          "100:                             STOMPUpdatePublisher STOMPUpdatePublisher) {",
          "",
          "[Added Lines]",
          "100:   private NamedTasksSubscriptions namedTasksSubscriptions;",
          "104:                             STOMPUpdatePublisher STOMPUpdatePublisher, NamedTasksSubscriptions namedTasksSubscriptions) {",
          "108:     this.namedTasksSubscriptions = namedTasksSubscriptions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     Set<StageEntityPK> stagesWithReceivedTaskStatus = new HashSet<>();",
          "130:     Set<Long> requestIdsWithReceivedTaskStatus =  new HashSet<>();",
          "131:     Set<RequestUpdateEvent> requestsToPublish = new HashSet<>();",
          "133:     for (HostRoleCommand hostRoleCommand : hostRoleCommandListAll) {",
          "134:       Long reportedTaskId = hostRoleCommand.getTaskId();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     Set<NamedTaskUpdateEvent> namedTasksToPublish = new HashSet<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:         stagesWithReceivedTaskStatus.add(stageEntityPK);",
          "144:         requestIdsWithReceivedTaskStatus.add(hostRoleCommand.getRequestId());",
          "146:         if (!activeTasksMap.get(reportedTaskId).getStatus().equals(hostRoleCommand.getStatus())) {",
          "148:           Long clusterId = activeRequestMap.get(hostRoleCommand.getRequestId()).getClusterId();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:         NamedTaskUpdateEvent namedTaskUpdateEvent = new NamedTaskUpdateEvent(hostRoleCommand);",
          "153:         if (namedTasksSubscriptions.checkTaskId(reportedTaskId)",
          "154:             && !namedTaskUpdateEvent.equals(new NamedTaskUpdateEvent(activeTasksMap.get(reportedTaskId)))) {",
          "155:           namedTasksToPublish.add(namedTaskUpdateEvent);",
          "156:         }",
          "159:         if (hostRoleCommand.getStatus().equals(HostRoleStatus.COMPLETED)) {",
          "160:           namedTasksSubscriptions.removeTaskId(reportedTaskId);",
          "161:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:     for (RequestUpdateEvent requestToPublish : requestsToPublish) {",
          "179:       STOMPUpdatePublisher.publish(requestToPublish);",
          "180:     }",
          "181:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     for (NamedTaskUpdateEvent namedTaskUpdateEvent : namedTasksToPublish) {",
          "199:       LOG.info(String.format(\"NamedTaskUpdateEvent with id %s will be send\", namedTaskUpdateEvent.getId()));",
          "200:       STOMPUpdatePublisher.publish(namedTaskUpdateEvent);",
          "201:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java -> ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.api.stomp;",
          "20: import static org.easymock.EasyMock.createMock;",
          "21: import static org.easymock.EasyMock.expect;",
          "22: import static org.easymock.EasyMock.replay;",
          "23: import static org.junit.Assert.assertEquals;",
          "24: import static org.junit.Assert.assertFalse;",
          "25: import static org.junit.Assert.assertTrue;",
          "27: import java.util.HashMap;",
          "28: import java.util.Map;",
          "29: import java.util.Optional;",
          "31: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "32: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "33: import org.apache.ambari.server.events.listeners.tasks.TaskStatusListener;",
          "34: import org.junit.Before;",
          "35: import org.junit.Test;",
          "37: import com.google.inject.Provider;",
          "39: public class NamedTasksSubscriptionsTest {",
          "40:   private static final String SESSION_ID_1 = \"fdsg3\";",
          "41:   private static final String SESSION_ID_2 = \"idfg6\";",
          "43:   private NamedTasksSubscriptions tasksSubscriptions;",
          "44:   private Provider<TaskStatusListener> taskStatusListenerProvider;",
          "45:   private TaskStatusListener taskStatusListener;",
          "47:   @Before",
          "48:   public void setupTest() {",
          "49:     taskStatusListenerProvider = createMock(Provider.class);",
          "50:     taskStatusListener = createMock(TaskStatusListener.class);",
          "52:     Map<Long, HostRoleCommand> hostRoleCommands = new HashMap<>();",
          "53:     HostRoleCommand hostRoleCommand1 = createMock(HostRoleCommand.class);",
          "54:     HostRoleCommand hostRoleCommand4 = createMock(HostRoleCommand.class);",
          "55:     HostRoleCommand hostRoleCommand5 = createMock(HostRoleCommand.class);",
          "57:     expect(hostRoleCommand1.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();",
          "58:     expect(hostRoleCommand4.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();",
          "59:     expect(hostRoleCommand5.getStatus()).andReturn(HostRoleStatus.IN_PROGRESS).anyTimes();",
          "61:     hostRoleCommands.put(1L, hostRoleCommand1);",
          "62:     hostRoleCommands.put(4L, hostRoleCommand4);",
          "63:     hostRoleCommands.put(5L, hostRoleCommand5);",
          "64:     expect(taskStatusListener.getActiveTasksMap()).andReturn(hostRoleCommands).anyTimes();",
          "65:     expect(taskStatusListenerProvider.get()).andReturn(taskStatusListener).anyTimes();",
          "67:     replay(taskStatusListenerProvider, taskStatusListener, hostRoleCommand1, hostRoleCommand4, hostRoleCommand5);",
          "68:     tasksSubscriptions = new NamedTasksSubscriptions(taskStatusListenerProvider);",
          "69:     tasksSubscriptions.addTaskId(SESSION_ID_1, 1L, \"sub-1\");",
          "70:     tasksSubscriptions.addTaskId(SESSION_ID_1, 5L, \"sub-5\");",
          "71:     tasksSubscriptions.addTaskId(SESSION_ID_2, 1L, \"sub-1\");",
          "72:     tasksSubscriptions.addTaskId(SESSION_ID_2, 4L, \"sub-4\");",
          "73:   }",
          "75:   @Test",
          "76:   public void testMatching() {",
          "77:     Optional<Long> taskIdOpt = tasksSubscriptions.matchDestination(\"/events/tasks/1\");",
          "78:     assertTrue(taskIdOpt.isPresent());",
          "79:     assertEquals(1L, taskIdOpt.get().longValue());",
          "80:     assertFalse(tasksSubscriptions.matchDestination(\"/events/topologies\").isPresent());",
          "81:   }",
          "83:   @Test",
          "84:   public void testCheckId() {",
          "85:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "86:     assertTrue(tasksSubscriptions.checkTaskId(4L));",
          "87:     assertTrue(tasksSubscriptions.checkTaskId(5L));",
          "88:     assertFalse(tasksSubscriptions.checkTaskId(2L));",
          "89:   }",
          "91:   @Test",
          "92:   public void testRemoveBySessionId() {",
          "93:     tasksSubscriptions.removeSession(SESSION_ID_1);",
          "94:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "95:     assertTrue(tasksSubscriptions.checkTaskId(4L));",
          "96:     assertFalse(tasksSubscriptions.checkTaskId(5L));",
          "98:     tasksSubscriptions.removeSession(SESSION_ID_2);",
          "99:     assertFalse(tasksSubscriptions.checkTaskId(1L));",
          "100:     assertFalse(tasksSubscriptions.checkTaskId(4L));",
          "101:     assertFalse(tasksSubscriptions.checkTaskId(5L));",
          "102:   }",
          "104:   @Test",
          "105:   public void testRemoveById() {",
          "106:     tasksSubscriptions.removeId(SESSION_ID_1, \"sub-1\");",
          "107:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "108:     assertTrue(tasksSubscriptions.checkTaskId(4L));",
          "109:     assertTrue(tasksSubscriptions.checkTaskId(5L));",
          "111:     tasksSubscriptions.removeId(SESSION_ID_1, \"sub-5\");",
          "112:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "113:     assertTrue(tasksSubscriptions.checkTaskId(4L));",
          "114:     assertFalse(tasksSubscriptions.checkTaskId(5L));",
          "116:     tasksSubscriptions.removeId(SESSION_ID_2, \"sub-1\");",
          "117:     assertFalse(tasksSubscriptions.checkTaskId(1L));",
          "118:     assertTrue(tasksSubscriptions.checkTaskId(4L));",
          "119:     assertFalse(tasksSubscriptions.checkTaskId(5L));",
          "121:     tasksSubscriptions.removeId(SESSION_ID_2, \"sub-4\");",
          "122:     assertFalse(tasksSubscriptions.checkTaskId(1L));",
          "123:     assertFalse(tasksSubscriptions.checkTaskId(4L));",
          "124:     assertFalse(tasksSubscriptions.checkTaskId(5L));",
          "125:   }",
          "127:   @Test",
          "128:   public void testAddDestination() {",
          "129:     tasksSubscriptions = new NamedTasksSubscriptions(taskStatusListenerProvider);",
          "130:     tasksSubscriptions.addDestination(SESSION_ID_1, \"/events/tasks/1\", \"sub-1\");",
          "131:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "132:     assertFalse(tasksSubscriptions.checkTaskId(4L));",
          "133:     assertFalse(tasksSubscriptions.checkTaskId(5L));",
          "135:     tasksSubscriptions.addDestination(SESSION_ID_1, \"/events/tasks/5\", \"sub-5\");",
          "136:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "137:     assertFalse(tasksSubscriptions.checkTaskId(4L));",
          "138:     assertTrue(tasksSubscriptions.checkTaskId(5L));",
          "140:     tasksSubscriptions.addDestination(SESSION_ID_2, \"/events/tasks/1\", \"sub-1\");",
          "141:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "142:     assertFalse(tasksSubscriptions.checkTaskId(4L));",
          "143:     assertTrue(tasksSubscriptions.checkTaskId(5L));",
          "145:     tasksSubscriptions.addDestination(SESSION_ID_2, \"/events/tasks/4\", \"sub-4\");",
          "146:     assertTrue(tasksSubscriptions.checkTaskId(1L));",
          "147:     assertTrue(tasksSubscriptions.checkTaskId(4L));",
          "148:     assertTrue(tasksSubscriptions.checkTaskId(5L));",
          "149:   }",
          "150: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java||ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListenerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.easymock.EasyMock.anyLong;",
          "22: import static org.easymock.EasyMock.anyObject;",
          "23: import static org.easymock.EasyMock.eq;",
          "25: import java.util.ArrayList;",
          "26: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static org.easymock.EasyMock.capture;",
          "25: import static org.easymock.EasyMock.expect;",
          "26: import static org.easymock.EasyMock.expectLastCall;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import org.apache.ambari.server.actionmanager.ExecutionCommandWrapperFactory;",
          "33: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "34: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "35: import org.apache.ambari.server.events.TaskCreateEvent;",
          "36: import org.apache.ambari.server.events.TaskUpdateEvent;",
          "37: import org.apache.ambari.server.events.publishers.STOMPUpdatePublisher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.ambari.server.api.stomp.NamedTasksSubscriptions;",
          "39: import org.apache.ambari.server.events.NamedTaskUpdateEvent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: import org.apache.ambari.server.orm.entities.StageEntity;",
          "45: import org.apache.ambari.server.orm.entities.StageEntityPK;",
          "46: import org.apache.ambari.server.state.ServiceComponentHostEvent;",
          "47: import org.easymock.EasyMock;",
          "48: import org.easymock.EasyMockSupport;",
          "49: import org.junit.Assert;",
          "50: import org.junit.Test;",
          "52: import com.google.inject.Inject;",
          "55: public class TaskStatusListenerTest extends EasyMockSupport {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.easymock.Capture;",
          "59: import com.google.inject.Provider;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     StageEntity stageEntity = createNiceMock(StageEntity.class);",
          "94:     RequestEntity requestEntity = createNiceMock(RequestEntity.class);",
          "95:     STOMPUpdatePublisher statePublisher = createNiceMock(STOMPUpdatePublisher.class);",
          "96:     EasyMock.expect(stageEntity.getStatus()).andReturn(hostRoleStatus).anyTimes();;",
          "97:     EasyMock.expect(stageEntity.getDisplayStatus()).andReturn(hostRoleStatus).anyTimes();",
          "98:     EasyMock.expect(stageEntity.isSkippable()).andReturn(Boolean.FALSE).anyTimes();;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     NamedTasksSubscriptions namedTasksSubscriptions = createNiceMock(NamedTasksSubscriptions.class);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:     EasyMock.replay(stageDAO);",
          "111:     EasyMock.replay(requestDAO);",
          "112:     EasyMock.replay(statePublisher);",
          "114:     TaskCreateEvent event = new TaskCreateEvent(hostRoleCommands);",
          "117:     Assert.assertTrue(listener.getActiveTasksMap().isEmpty());",
          "118:     Assert.assertTrue(listener.getActiveStageMap().isEmpty());",
          "",
          "[Removed Lines]",
          "115:     TaskStatusListener listener = new TaskStatusListener(publisher,stageDAO,requestDAO,statePublisher);",
          "",
          "[Added Lines]",
          "121:     EasyMock.replay(namedTasksSubscriptions);",
          "124:     TaskStatusListener listener = new TaskStatusListener(publisher, stageDAO, requestDAO, statePublisher,",
          "125:         namedTasksSubscriptions);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:     verifyAll();",
          "166:   }",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   @Test",
          "179:   public void testNamedTasksEnabled() {",
          "180:     final Long taskId = 1L;",
          "181:     final Long requestId = 2L;",
          "182:     final HostRoleStatus status = HostRoleStatus.COMPLETED;",
          "183:     final String stderr = \"gW$%SGFbhzsdfHBzdffdfd\";",
          "184:     final String stdout = \"gW$%gTESJ KHBjzdkfjbgv\";",
          "185:     final String errorLog = \" wTHT J YHKtjgsjgbvklfj\";",
          "186:     final String outputLog = \"546ky3kt%V$WYk4tgs5xzs\";",
          "188:     Provider<TaskStatusListener> taskStatusListenerProvider = createMock(Provider.class);",
          "190:     NamedTasksSubscriptions namedTasksSubscriptions = new NamedTasksSubscriptions(taskStatusListenerProvider);",
          "192:     Capture<NamedTaskUpdateEvent> namedTaskUpdateEventCapture = Capture.newInstance();",
          "193:     STOMPUpdatePublisher stompUpdatePublisher = createStrictMock(STOMPUpdatePublisher.class);",
          "194:     stompUpdatePublisher.publish(capture(namedTaskUpdateEventCapture));",
          "195:     expectLastCall();",
          "197:     ServiceComponentHostEvent serviceComponentHostEvent = createNiceMock(ServiceComponentHostEvent.class);",
          "198:     HostDAO hostDAO = createNiceMock(HostDAO.class);",
          "200:     EasyMock.replay(hostDAO);",
          "201:     EasyMock.replay(serviceComponentHostEvent);",
          "203:     List<HostRoleCommand> updateHostRolesCommands = new ArrayList<>();",
          "204:     HostRoleCommand updateHostRoleCommand = new HostRoleCommand(\"hostName\", Role.DATANODE,",
          "205:         serviceComponentHostEvent, RoleCommand.EXECUTE, hostDAO, executionCommandDAO, ecwFactory);",
          "206:     updateHostRoleCommand.setStatus(status);",
          "207:     updateHostRoleCommand.setRequestId(requestId);",
          "208:     updateHostRoleCommand.setStageId(3L);",
          "209:     updateHostRoleCommand.setTaskId(taskId);",
          "210:     updateHostRoleCommand.setStderr(stderr);",
          "211:     updateHostRoleCommand.setStdout(stdout);",
          "212:     updateHostRoleCommand.setErrorLog(errorLog);",
          "213:     updateHostRoleCommand.setOutputLog(outputLog);",
          "214:     updateHostRolesCommands.add(updateHostRoleCommand);",
          "216:     StageDAO stageDAO = createNiceMock(StageDAO.class);",
          "217:     RequestDAO requestDAO = createNiceMock(RequestDAO.class);",
          "219:     EasyMock.replay(stageDAO);",
          "220:     EasyMock.replay(requestDAO);",
          "221:     EasyMock.replay(stompUpdatePublisher);",
          "223:     TaskStatusListener listener = new TaskStatusListener(publisher, stageDAO, requestDAO, stompUpdatePublisher,",
          "224:         namedTasksSubscriptions);",
          "226:     expect(taskStatusListenerProvider.get()).andReturn(listener);",
          "228:     EasyMock.replay(taskStatusListenerProvider);",
          "231:     namedTasksSubscriptions.addTaskId(\"\", taskId, \"sub-1\");",
          "235:     HostRoleCommand activeHostRoleCommand = new HostRoleCommand(\"hostName\", Role.DATANODE,",
          "236:         serviceComponentHostEvent, RoleCommand.EXECUTE, hostDAO, executionCommandDAO, ecwFactory);",
          "237:     activeHostRoleCommand.setStatus(status);",
          "238:     listener.getActiveTasksMap().put(taskId, activeHostRoleCommand);",
          "240:     listener.onTaskUpdateEvent(new TaskUpdateEvent(updateHostRolesCommands));",
          "242:     Assert.assertNotNull(namedTaskUpdateEventCapture.getValues());",
          "243:     Assert.assertEquals(1L, namedTaskUpdateEventCapture.getValues().size());",
          "245:     NamedTaskUpdateEvent capturedEvent = namedTaskUpdateEventCapture.getValue();",
          "247:     Assert.assertEquals(taskId, capturedEvent.getId());",
          "248:     Assert.assertEquals(requestId, capturedEvent.getRequestId());",
          "249:     Assert.assertEquals(status, capturedEvent.getStatus());",
          "250:     Assert.assertEquals(stderr, capturedEvent.getStderr());",
          "251:     Assert.assertEquals(stdout, capturedEvent.getStdout());",
          "252:     Assert.assertEquals(errorLog, capturedEvent.getErrorLog());",
          "253:     Assert.assertEquals(outputLog, capturedEvent.getOutLog());",
          "255:     verifyAll();",
          "256:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "591bdff6997d945df671c8bfcc13cc61c74bcc2d",
      "candidate_info": {
        "commit_hash": "591bdff6997d945df671c8bfcc13cc61c74bcc2d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/591bdff6997d945df671c8bfcc13cc61c74bcc2d",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java"
        ],
        "message": "AMBARI-24486. Yarn Timeline Service V2 Reader is found down after EU (Atlantic to AtlanticM05) With error - Address already in use (amagyar) (#2085) (#2090)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddress.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   private static final Logger LOG = LoggerFactory.getLogger(CreateAndConfigureAction.class);",
          "50:   private static final String YARN_SITE = \"yarn-site\";",
          "51:   private static final String TIMELINE_READER = \"TIMELINE_READER\";",
          "55:   };",
          "57:   @Override",
          "",
          "[Removed Lines]",
          "52:   private static final String[] HOST_PROPERTIES = new String[] {",
          "53:     \"yarn.timeline-service.reader.webapp.address\",",
          "54:     \"yarn.timeline-service.reader.webapp.https.address\"",
          "",
          "[Added Lines]",
          "52:   private static final String HTTP_ADDRESS = \"yarn.timeline-service.reader.webapp.address\";",
          "53:   private static final String HTTPS_ADDRESS = \"yarn.timeline-service.reader.webapp.https.address\";",
          "54:   private static final String[] HOST_PROPERTIES = new String[] {HTTP_ADDRESS, HTTPS_ADDRESS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         if (oldHost == null) {",
          "69:           continue;",
          "70:         }",
          "72:         updatedHosts.add(newHost);",
          "73:         updateConfig(cluster, propertyName, newHost, config);",
          "74:       }",
          "",
          "[Removed Lines]",
          "71:         String newHost = oldHost.replace(\"localhost\", hostNameOf(cluster, \"YARN\", TIMELINE_READER));",
          "",
          "[Added Lines]",
          "71:         String newHost = replace(oldHost, hostNameOf(cluster, \"YARN\", TIMELINE_READER), defaultPort(propertyName));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     }",
          "79:   }",
          "81:   private void updateConfig(Cluster cluster, String propertyName, String propertyValue, Config config) throws AmbariException {",
          "82:     Map<String, String> newProperties = new HashMap<>();",
          "83:     newProperties.put(propertyName, propertyValue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   private int defaultPort(String propertyName) {",
          "82:     switch (propertyName) {",
          "83:       case HTTP_ADDRESS:  return 8198;",
          "84:       case HTTPS_ADDRESS: return 8199;",
          "85:       default: throw new IllegalArgumentException(\"Unknown property: \" + propertyName);",
          "86:     }",
          "87:   }",
          "89:   private String replace(String oldHost, String newHost, int defaultPort) {",
          "90:     if (oldHost.contains(\":\")) {",
          "91:       String hostPart = oldHost.split(\":\")[0];",
          "92:       return oldHost.replace(hostPart, newHost);",
          "93:     } else {",
          "94:       return newHost + \":\" + defaultPort;",
          "95:     }",
          "96:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/FixTimelineReaderAddressTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     expect(cluster.getDesiredConfigByType(\"yarn-site\")).andReturn(config).anyTimes();",
          "68:     expect(config.getProperties()).andReturn(new HashMap<String, String>() {{",
          "69:       put(\"yarn.timeline-service.reader.webapp.address\", \"localhost:8080\");",
          "71:     }}).anyTimes();",
          "72:     expect(yarn.getServiceComponent(\"TIMELINE_READER\")).andReturn(timelineReader).anyTimes();",
          "73:     expect(timelineReader.getServiceComponentHosts()).andReturn(new HashMap<String, ServiceComponentHost>(){{",
          "",
          "[Removed Lines]",
          "70:       put(\"yarn.timeline-service.reader.webapp.https.address\", \"localhost:8081\");",
          "",
          "[Added Lines]",
          "70:       put(\"yarn.timeline-service.reader.webapp.https.address\", \"{{timeline_reader_address_https}}\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     }});",
          "83:     expectLastCall();",
          "84:     config.updateProperties(new HashMap<String, String>() {{",
          "86:     }});",
          "87:     expectLastCall();",
          "88:     replayAll();",
          "",
          "[Removed Lines]",
          "85:       put(\"yarn.timeline-service.reader.webapp.https.address\", \"newhost:8081\");",
          "",
          "[Added Lines]",
          "85:       put(\"yarn.timeline-service.reader.webapp.https.address\", \"newhost:8199\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6bc0a133b03e1658d47a4b015bb61a435487fd4",
      "candidate_info": {
        "commit_hash": "b6bc0a133b03e1658d47a4b015bb61a435487fd4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b6bc0a133b03e1658d47a4b015bb61a435487fd4",
        "files": [
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py",
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py"
        ],
        "message": "AMBARI-25328 When spark_transport_mode is set to 'http' then STS server fails to start in Ambari 2.7 (#3051) (ihorlukianov via dgrinenko)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py||ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py",
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py||ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py": [
          "File: ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py -> ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/master.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "575:           interpreter['properties']['spark2.proxy.user.property'] = 'hive.server2.proxy.user'",
          "576:           interpreter['properties']['spark2.url'] = 'jdbc:hive2://' + \\",
          "577:               params.spark2_thrift_server_hosts + ':' + params.spark2_hive_thrift_port + '/'",
          "582:           if 'spark2.splitQueries' not in interpreter['properties']:",
          "583:             interpreter['properties']['spark2.splitQueries'] = \"true\"",
          "",
          "[Removed Lines]",
          "578:           if params.hive_principal:",
          "579:             interpreter['properties']['spark2.url'] += ';principal=' + params.hive_principal",
          "580:           if params.hive_transport_mode:",
          "581:             interpreter['properties']['spark2.url'] += ';transportMode=' + params.hive_transport_mode",
          "",
          "[Added Lines]",
          "578:           if params.spark2_hive_principal:",
          "579:             interpreter['properties']['spark2.url'] += ';principal=' + params.spark2_hive_principal",
          "580:           if params.spark2_transport_mode:",
          "581:             interpreter['properties']['spark2.url'] += ';transportMode=' + params.spark2_transport_mode",
          "582:           if params.spark2_http_path:",
          "583:             interpreter['properties']['spark2.url'] += ';httpPath=' + params.spark2_http_path",
          "584:           if params.spark2_ssl:",
          "585:             interpreter['properties']['spark2.url'] += ';ssl=true'",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py": [
          "File: ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py -> ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: spark2_thrift_server_hosts = None",
          "179: spark2_hive_thrift_port = None",
          "181: if 'spark2_thriftserver_hosts' in master_configs and len(master_configs['spark2_thriftserver_hosts']) != 0:",
          "182:   spark2_thrift_server_hosts = str(master_configs['spark2_thriftserver_hosts'][0])",
          "183:   if config['configurations']['spark2-hive-site-override']:",
          "184:     spark2_hive_thrift_port = config['configurations']['spark2-hive-site-override']['hive.server2.thrift.port']",
          "187: # detect hbase details if installed",
          "188: zookeeper_znode_parent = None",
          "",
          "[Removed Lines]",
          "180: spark2_hive_principal = None",
          "",
          "[Added Lines]",
          "180: spark2_hive_principal = hive_principal",
          "181: spark2_transport_mode = hive_transport_mode",
          "182: spark2_http_path = None",
          "183: spark2_ssl = False",
          "189:     if 'hive.server2.authentication.kerberos.principal' in config['configurations']['spark2-hive-site-override']:",
          "190:       spark2_hive_principal = config['configurations']['spark2-hive-site-override']['hive.server2.authentication.kerberos.principal']",
          "192:     if 'hive.server2.transport.mode' in config['configurations']['spark2-hive-site-override']:",
          "193:       spark2_transport_mode = config['configurations']['spark2-hive-site-override']['hive.server2.transport.mode']",
          "195:     if 'hive.server2.http.endpoint' in config['configurations']['spark2-hive-site-override']:",
          "196:      spark2_http_path = config['configurations']['spark2-hive-site-override']['hive.server2.http.endpoint']",
          "198:     if 'hive.server2.use.SSL' in config['configurations']['spark2-hive-site-override']:",
          "199:       spark2_ssl = default(\"configurations/spark2-hive-site-override/hive.server2.use.SSL\", False)",
          "",
          "---------------"
        ]
      }
    }
  ]
}