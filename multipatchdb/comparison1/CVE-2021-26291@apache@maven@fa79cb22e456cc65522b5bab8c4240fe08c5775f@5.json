{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0cda42477253cab11e7e0f340009da5f417d0775",
      "candidate_info": {
        "commit_hash": "0cda42477253cab11e7e0f340009da5f417d0775",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0cda42477253cab11e7e0f340009da5f417d0775",
        "files": [
          "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
          "maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java"
        ],
        "message": "[MNG-7386] Make sure the ModelMerger$MergingList can be serialized",
        "before_after_code_files": [
          "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java||maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
          "maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java||maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java||maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java": [
          "File: maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java -> maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.AbstractList;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.io.ObjectStreamException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2874:     {",
          "2875:         private final KeyComputer<V> keyComputer;",
          "2876:         private Map<Object, V> map;",
          "2877:         private List<V> list;",
          "",
          "[Removed Lines]",
          "2873:     private static class MergingList<V> extends AbstractList<V>",
          "",
          "[Added Lines]",
          "2874:     private static class MergingList<V> extends AbstractList<V> implements java.io.Serializable",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2882:             this.keyComputer = keyComputer;",
          "2883:         }",
          "2885:         @Override",
          "2886:         public Iterator<V> iterator()",
          "2887:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:         Object writeReplace() throws ObjectStreamException",
          "2888:         {",
          "2889:             return new ArrayList<>( this );",
          "2890:         }",
          "",
          "---------------"
        ],
        "maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java||maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java": [
          "File: maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java -> maven-model/src/test/java/org/apache/maven/model/merge/ModelMergerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.model.merge;",
          "22: import java.io.ByteArrayOutputStream;",
          "23: import java.io.ObjectOutputStream;",
          "24: import java.util.ArrayList;",
          "26: import org.apache.maven.model.License;",
          "27: import org.apache.maven.model.Model;",
          "28: import org.junit.Test;",
          "30: public class ModelMergerTest {",
          "32:     @Test",
          "33:     public void testMergedModelSerialization() throws Exception {",
          "34:         Model target = new Model();",
          "35:         Model source = new Model();",
          "36:         target.setLicenses(new ArrayList<License>());",
          "37:         License lic1 = new License();",
          "38:         License lic2 = new License();",
          "39:         target.getLicenses().add(lic1);",
          "40:         source.setLicenses(new ArrayList<License>());",
          "41:         source.getLicenses().add(lic2);",
          "43:         new ModelMerger().mergeModel(target, source, false, null);",
          "45:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "46:         ObjectOutputStream oos = new ObjectOutputStream(baos);",
          "47:         oos.writeObject(target);",
          "48:     }",
          "49: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d29af9018b5c80177102aaab96bd37ed5fedf26c",
      "candidate_info": {
        "commit_hash": "d29af9018b5c80177102aaab96bd37ed5fedf26c",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d29af9018b5c80177102aaab96bd37ed5fedf26c",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java"
        ],
        "message": "[MNG-7402] BuildListCalculator never detaches the classloader\n\nThis closes #683",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/BuildListCalculator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:             }",
          "58:             for ( MavenProject project : projects )",
          "59:             {",
          "64:             }",
          "65:         }",
          "66:         return new ProjectBuildList( projectBuilds );",
          "",
          "[Removed Lines]",
          "60:                 BuilderCommon.attachToThread( project ); // Not totally sure if this is needed for anything",
          "61:                 MavenSession copiedSession = session.clone();",
          "62:                 copiedSession.setCurrentProject( project );",
          "63:                 projectBuilds.add( new ProjectSegment( project, taskSegment, copiedSession ) );",
          "",
          "[Added Lines]",
          "60:                 ClassLoader tccl = Thread.currentThread().getContextClassLoader();",
          "61:                 try",
          "62:                 {",
          "63:                     BuilderCommon.attachToThread( project ); // Not totally sure if this is needed for anything",
          "64:                     MavenSession copiedSession = session.clone();",
          "65:                     copiedSession.setCurrentProject( project );",
          "66:                     projectBuilds.add( new ProjectSegment( project, taskSegment, copiedSession ) );",
          "67:                 }",
          "68:                 finally",
          "69:                 {",
          "70:                     Thread.currentThread().setContextClassLoader( tccl );",
          "71:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1aa1e1f0a891609256c60b2b7b5b8efaceea563",
      "candidate_info": {
        "commit_hash": "d1aa1e1f0a891609256c60b2b7b5b8efaceea563",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/d1aa1e1f0a891609256c60b2b7b5b8efaceea563",
        "files": [
          "maven-core/pom.xml",
          "maven-embedder/pom.xml",
          "maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java",
          "maven-resolver-provider/pom.xml"
        ],
        "message": "[MNG-7252] Fix warnings issued by dependency:analyze\n\nThis closes #541",
        "before_after_code_files": [
          "maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java||maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java": [
          "File: maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java -> maven-model-builder/src/test/java/org/apache/maven/model/building/FileModelSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.IOException;",
          "23: import static junit.framework.TestCase.assertFalse;",
          "24: import static junit.framework.TestCase.assertTrue;",
          "26: import static org.junit.Assume.assumeTrue;",
          "27: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "25: import org.apache.commons.lang3.SystemUtils;",
          "",
          "[Added Lines]",
          "25: import org.codehaus.plexus.util.Os;;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     public void testWindowsPaths()",
          "54:             throws Exception",
          "55:     {",
          "58:         File upperCaseFile = createTempFile( \"TESTE\" );",
          "59:         String absolutePath = upperCaseFile.getAbsolutePath();",
          "",
          "[Removed Lines]",
          "56:         assumeTrue( SystemUtils.IS_OS_WINDOWS );",
          "",
          "[Added Lines]",
          "56:         assumeTrue( Os.isFamily( \"Windows\" ) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83257bfde0dd5b4d391063412494957c1b7e15e8",
      "candidate_info": {
        "commit_hash": "83257bfde0dd5b4d391063412494957c1b7e15e8",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/83257bfde0dd5b4d391063412494957c1b7e15e8",
        "files": [
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ],
        "message": "[MNG-7349] Limit relocation warning message to direct dependencies only",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:             pluginArtifact = result.getArtifact();",
          "111:             String requiredMavenVersion = (String) result.getProperties().get( \"prerequisites.maven\" );",
          "112:             if ( requiredMavenVersion != null )",
          "113:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:             if ( logger.isWarnEnabled() )",
          "112:             {",
          "113:                 if ( !result.getRelocations().isEmpty() )",
          "114:                 {",
          "115:                     String message = pluginArtifact instanceof org.apache.maven.repository.internal.RelocatedArtifact",
          "116:                             ? ( ( org.apache.maven.repository.internal.RelocatedArtifact ) pluginArtifact ).getMessage()",
          "117:                             : null;",
          "118:                     logger.warn( \"The artifact \" + result.getRelocations().get( 0 ) + \" has been relocated to \"",
          "119:                             + pluginArtifact + ( message != null ? \": \" + message : \"\" ) );",
          "120:                 }",
          "121:             }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         depRequest.setRoot( node );",
          "184:         if ( logger.isDebugEnabled() )",
          "185:         {",
          "186:             node.accept( new GraphLogger( project ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:         if ( logger.isWarnEnabled() )",
          "185:         {",
          "186:             for ( DependencyNode child : node.getChildren() )",
          "187:             {",
          "188:                 if ( !child.getRelocations().isEmpty() )",
          "189:                 {",
          "190:                     org.eclipse.aether.artifact.Artifact relocated = child.getDependency().getArtifact();",
          "191:                     String message = relocated instanceof org.apache.maven.repository.internal.RelocatedArtifact",
          "192:                             ? ( ( org.apache.maven.repository.internal.RelocatedArtifact ) relocated ).getMessage()",
          "193:                             : null;",
          "194:                     logger.warn( \"The artifact \" + child.getRelocations().get( 0 ) + \" has been relocated to \"",
          "195:                         + relocated + ( message != null ? \": \" + message : \"\" ) );",
          "196:                 }",
          "197:             }",
          "198:         }",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.eclipse.aether.spi.locator.Service;",
          "69: import org.eclipse.aether.spi.locator.ServiceLocator;",
          "70: import org.eclipse.aether.transfer.ArtifactNotFoundException;",
          "",
          "[Removed Lines]",
          "71: import org.slf4j.Logger;",
          "72: import org.slf4j.LoggerFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: public class DefaultArtifactDescriptorReader",
          "80:     implements ArtifactDescriptorReader, Service",
          "81: {",
          "84:     private RemoteRepositoryManager remoteRepositoryManager;",
          "86:     private VersionResolver versionResolver;",
          "",
          "[Removed Lines]",
          "82:     private static final Logger LOGGER = LoggerFactory.getLogger( DefaultArtifactDescriptorReader.class );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:             if ( relocation != null )",
          "321:             {",
          "322:                 result.addRelocation( a );",
          "324:                     new RelocatedArtifact( a, relocation.getGroupId(), relocation.getArtifactId(),",
          "337:             }",
          "338:             else",
          "339:             {",
          "",
          "[Removed Lines]",
          "323:                 Artifact relocatedArtifact =",
          "325:                                            relocation.getVersion() );",
          "326:                 if ( LOGGER.isWarnEnabled() )",
          "327:                 {",
          "328:                     String message = \"The artifact \" + a + \" has been relocated to \" + relocatedArtifact;",
          "329:                     if ( relocation.getMessage() != null )",
          "330:                     {",
          "331:                         message += \": \" + relocation.getMessage();",
          "332:                     }",
          "333:                     LOGGER.warn( message );",
          "334:                 }",
          "335:                 result.setArtifact( relocatedArtifact );",
          "336:                 a = relocatedArtifact;",
          "",
          "[Added Lines]",
          "319:                 a =",
          "321:                                            relocation.getVersion(), relocation.getMessage() );",
          "322:                 result.setArtifact( a );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     extends AbstractArtifact",
          "34: {",
          "",
          "[Removed Lines]",
          "32: final class RelocatedArtifact",
          "",
          "[Added Lines]",
          "32: public final class RelocatedArtifact",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     private final String version;",
          "45:     {",
          "46:         this.artifact = Objects.requireNonNull( artifact, \"artifact cannot be null\" );",
          "48:         this.groupId = ( groupId != null && groupId.length() > 0 ) ? groupId : null;",
          "49:         this.artifactId = ( artifactId != null && artifactId.length() > 0 ) ? artifactId : null;",
          "50:         this.version = ( version != null && version.length() > 0 ) ? version : null;",
          "51:     }",
          "53:     public String getGroupId()",
          "",
          "[Removed Lines]",
          "44:     RelocatedArtifact( Artifact artifact, String groupId, String artifactId, String version )",
          "",
          "[Added Lines]",
          "44:     private final String message;",
          "46:     RelocatedArtifact( Artifact artifact, String groupId, String artifactId, String version, String message )",
          "53:         this.message = ( message != null && message.length() > 0 ) ? message : null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:          {",
          "96:              return this;",
          "97:          }",
          "99:     }",
          "101:     @Override",
          "",
          "[Removed Lines]",
          "98:         return new RelocatedArtifact( artifact, groupId, artifactId, version );",
          "",
          "[Added Lines]",
          "101:         return new RelocatedArtifact( artifact, groupId, artifactId, version, message );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         {",
          "107:              return this;",
          "108:         }",
          "110:     }",
          "112:     @Override",
          "",
          "[Removed Lines]",
          "109:         return new RelocatedArtifact( artifact.setFile( file ), groupId, artifactId, version );",
          "",
          "[Added Lines]",
          "112:         return new RelocatedArtifact( artifact.setFile( file ), groupId, artifactId, version, message );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:         {",
          "118:              return this;",
          "119:         }",
          "121:     }",
          "123:     public String getClassifier()",
          "",
          "[Removed Lines]",
          "120:         return new RelocatedArtifact( artifact.setProperties( properties ), groupId, artifactId, version );",
          "",
          "[Added Lines]",
          "123:         return new RelocatedArtifact( artifact.setProperties( properties ), groupId, artifactId, version, message );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "145:         return artifact.getProperties();",
          "146:     }",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:     public String getMessage()",
          "152:     {",
          "153:         return message;",
          "154:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef74a62451684c8c60cc9db4b6720c8edb89a165",
      "candidate_info": {
        "commit_hash": "ef74a62451684c8c60cc9db4b6720c8edb89a165",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/ef74a62451684c8c60cc9db4b6720c8edb89a165",
        "files": [
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ],
        "message": "[MNG-7374] Mutating RelocatedArtifact does not retain type\n\nThis closes #641",
        "before_after_code_files": [
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/RelocatedArtifact.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         }",
          "87:     }",
          "89:     public String getClassifier()",
          "90:     {",
          "91:         return artifact.getClassifier();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Override",
          "91:     public Artifact setVersion( String version )",
          "92:     {",
          "93:          String current = getVersion();",
          "94:          if ( current.equals( version ) || ( version == null && current.length() <= 0 ) )",
          "95:          {",
          "96:              return this;",
          "97:          }",
          "98:         return new RelocatedArtifact( artifact, groupId, artifactId, version );",
          "99:     }",
          "101:     @Override",
          "102:     public Artifact setFile( File file )",
          "103:     {",
          "104:         File current = getFile();",
          "105:         if ( Objects.equals( current, file ) )",
          "106:         {",
          "107:              return this;",
          "108:         }",
          "109:         return new RelocatedArtifact( artifact.setFile( file ), groupId, artifactId, version );",
          "110:     }",
          "112:     @Override",
          "113:     public Artifact setProperties( Map<String, String> properties )",
          "114:     {",
          "115:         Map<String, String> current = getProperties();",
          "116:         if ( current.equals( properties ) || ( properties == null && current.isEmpty() ) )",
          "117:         {",
          "118:              return this;",
          "119:         }",
          "120:         return new RelocatedArtifact( artifact.setProperties( properties ), groupId, artifactId, version );",
          "121:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}