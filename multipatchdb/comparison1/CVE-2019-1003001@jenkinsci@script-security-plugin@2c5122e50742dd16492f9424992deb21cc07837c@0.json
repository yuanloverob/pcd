{
  "cve_id": "CVE-2019-1003001",
  "cve_desc": "A sandbox bypass vulnerability exists in Pipeline: Groovy Plugin 2.61 and earlier in src/main/java/org/jenkinsci/plugins/workflow/cps/CpsFlowDefinition.java, src/main/java/org/jenkinsci/plugins/workflow/cps/CpsGroovyShellFactory.java that allows attackers with Overall/Read permission to provide a pipeline script to an HTTP endpoint that can result in arbitrary code execution on the Jenkins master JVM.",
  "repo": "jenkinsci/script-security-plugin",
  "patch_hash": "2c5122e50742dd16492f9424992deb21cc07837c",
  "patch_info": {
    "commit_hash": "2c5122e50742dd16492f9424992deb21cc07837c",
    "repo": "jenkinsci/script-security-plugin",
    "commit_url": "https://github.com/jenkinsci/script-security-plugin/commit/2c5122e50742dd16492f9424992deb21cc07837c",
    "files": [
      "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java",
      "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java",
      "src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java"
    ],
    "message": "[SECURITY-1266] Block problematic AST transforms from sandbox",
    "before_after_code_files": [
      "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java",
      "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java",
      "src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java||src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java": [
      "File: src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java -> src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/GroovySandbox.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: package org.jenkinsci.plugins.scriptsecurity.sandbox.groovy;",
      "27: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "28: import groovy.lang.GroovyShell;",
      "29: import groovy.lang.Script;",
      "31: import java.util.concurrent.Callable;",
      "32: import javax.annotation.Nonnull;",
      "33: import org.codehaus.groovy.control.CompilerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import groovy.grape.GrabAnnotationTransformation;",
      "32: import java.util.Collections;",
      "33: import java.util.HashSet;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     public static @Nonnull CompilerConfiguration createSecureCompilerConfiguration() {",
      "62:         cc.addCompilationCustomizers(new SandboxTransformer());",
      "63:         return cc;",
      "64:     }",
      "",
      "[Removed Lines]",
      "61:         CompilerConfiguration cc = new CompilerConfiguration();",
      "",
      "[Added Lines]",
      "64:         CompilerConfiguration cc = createBaseCompilerConfiguration();",
      "72:     public static @Nonnull CompilerConfiguration createBaseCompilerConfiguration() {",
      "73:         CompilerConfiguration cc = new CompilerConfiguration();",
      "74:         cc.addCompilationCustomizers(new RejectASTTransformsCustomizer());",
      "75:         cc.setDisabledGlobalASTTransformations(new HashSet<>(Collections.singletonList(GrabAnnotationTransformation.class.getName())));",
      "76:         return cc;",
      "77:     }",
      "",
      "---------------"
    ],
    "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java": [
      "File: src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java -> src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package org.jenkinsci.plugins.scriptsecurity.sandbox.groovy;",
      "27: import com.google.common.collect.ImmutableList;",
      "28: import groovy.lang.Grab;",
      "29: import groovy.transform.ASTTest;",
      "30: import org.codehaus.groovy.ast.AnnotatedNode;",
      "31: import org.codehaus.groovy.ast.AnnotationNode;",
      "32: import org.codehaus.groovy.ast.ClassCodeVisitorSupport;",
      "33: import org.codehaus.groovy.ast.ClassNode;",
      "34: import org.codehaus.groovy.classgen.GeneratorContext;",
      "35: import org.codehaus.groovy.control.CompilationFailedException;",
      "36: import org.codehaus.groovy.control.CompilePhase;",
      "37: import org.codehaus.groovy.control.SourceUnit;",
      "38: import org.codehaus.groovy.control.customizers.CompilationCustomizer;",
      "40: import java.lang.annotation.Annotation;",
      "41: import java.util.List;",
      "43: public class RejectASTTransformsCustomizer extends CompilationCustomizer {",
      "44:     private static final List<Class<? extends Annotation>> BLOCKED_TRANSFORMS = ImmutableList.of(ASTTest.class, Grab.class);",
      "46:     public RejectASTTransformsCustomizer() {",
      "47:         super(CompilePhase.CONVERSION);",
      "48:     }",
      "50:     @Override",
      "51:     public void call(final SourceUnit source, GeneratorContext context, ClassNode classNode) throws CompilationFailedException {",
      "52:         new RejectASTTransformsVisitor(source).visitClass(classNode);",
      "53:     }",
      "55:     private static class RejectASTTransformsVisitor extends ClassCodeVisitorSupport {",
      "56:         private SourceUnit source;",
      "58:         public RejectASTTransformsVisitor(SourceUnit source) {",
      "59:             this.source = source;",
      "60:         }",
      "62:         @Override",
      "63:         protected SourceUnit getSourceUnit() {",
      "64:             return source;",
      "65:         }",
      "72:         @Override",
      "73:         public void visitAnnotations(AnnotatedNode node) {",
      "74:             for (AnnotationNode an : node.getAnnotations()) {",
      "75:                 for (Class<? extends Annotation> blockedAnnotation : BLOCKED_TRANSFORMS) {",
      "76:                     if (blockedAnnotation.getSimpleName().equals(an.getClassNode().getName())) {",
      "77:                         throw new SecurityException(\"Annotation \" + blockedAnnotation.getSimpleName() + \" cannot be used in the sandbox.\");",
      "78:                     }",
      "79:                 }",
      "80:             }",
      "81:         }",
      "82:     }",
      "83: }",
      "",
      "---------------"
    ],
    "src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java||src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java": [
      "File: src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java -> src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SandboxInterceptorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "74: import org.junit.Rule;",
      "75: import org.junit.Test;",
      "76: import org.junit.rules.ErrorCollector;",
      "77: import org.jvnet.hudson.test.Issue;",
      "79: public class SandboxInterceptorTest {",
      "81:     @Rule public ErrorCollector errors = new ErrorCollector();",
      "83:     @Test public void genericWhitelist() throws Exception {",
      "84:         assertEvaluate(new GenericWhitelist(), 3, \"'foo bar baz'.split(' ').length\");",
      "85:         assertEvaluate(new GenericWhitelist(), false, \"def x = null; x != null\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77: import org.junit.rules.ExpectedException;",
      "84:     @Rule public ExpectedException thrown = ExpectedException.none();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "818:         assertRejected(new StaticWhitelist(), \"staticMethod hudson.model.Hudson getInstance\", \"hudson.model.Hudson.instance\");",
      "819:     }",
      "821:     private static Object evaluate(Whitelist whitelist, String script) {",
      "822:         GroovyShell shell = new GroovyShell(GroovySandbox.createSecureCompilerConfiguration());",
      "823:         Object actual = GroovySandbox.run(shell.parse(script), whitelist);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "824:     @Issue(\"SECURITY-1266\")",
      "825:     @Test",
      "826:     public void blockedASTTransformsASTTest() throws Exception {",
      "827:         GroovyShell shell = new GroovyShell(GroovySandbox.createSecureCompilerConfiguration());",
      "829:         thrown.expect(MultipleCompilationErrorsException.class);",
      "830:         thrown.expectMessage(\"Annotation ASTTest cannot be used in the sandbox\");",
      "832:         shell.parse(\"import groovy.transform.*\\n\" +",
      "833:                 \"@ASTTest(value={ assert true })\\n\" +",
      "834:                 \"@Field int x\\n\");",
      "835:     }",
      "837:     @Issue(\"SECURITY-1266\")",
      "838:     @Test",
      "839:     public void blockedASTTransformsGrab() throws Exception {",
      "840:         GroovyShell shell = new GroovyShell(GroovySandbox.createSecureCompilerConfiguration());",
      "841:         thrown.expect(MultipleCompilationErrorsException.class);",
      "842:         thrown.expectMessage(\"Annotation Grab cannot be used in the sandbox\");",
      "844:         shell.parse(\"@Grab(group='foo', module='bar', version='1.0')\\n\" +",
      "845:                 \"def foo\\n\");",
      "846:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3228c88e84f0b2f24845b6466cae35617e082059",
      "candidate_info": {
        "commit_hash": "3228c88e84f0b2f24845b6466cae35617e082059",
        "repo": "jenkinsci/script-security-plugin",
        "commit_url": "https://github.com/jenkinsci/script-security-plugin/commit/3228c88e84f0b2f24845b6466cae35617e082059",
        "files": [
          "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java",
          "src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java"
        ],
        "message": "[FIXED SECURITY-1318, SECURITY-1319, SECURITY-1320, SECURITY-1321] Block all Grab-related annotations, block fully qualified class names for blocked annotations, block AnnotationCollector, block imports of blocked annotations as well to avoid aliasing issues.",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java",
          "src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java||src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java||src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java": [
          "File: src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java -> src/main/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/RejectASTTransformsCustomizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.google.common.collect.ImmutableList;",
          "28: import groovy.lang.Grab;",
          "29: import groovy.transform.ASTTest;",
          "30: import org.codehaus.groovy.ast.AnnotatedNode;",
          "31: import org.codehaus.groovy.ast.AnnotationNode;",
          "32: import org.codehaus.groovy.ast.ClassCodeVisitorSupport;",
          "33: import org.codehaus.groovy.ast.ClassNode;",
          "34: import org.codehaus.groovy.classgen.GeneratorContext;",
          "35: import org.codehaus.groovy.control.CompilationFailedException;",
          "36: import org.codehaus.groovy.control.CompilePhase;",
          "37: import org.codehaus.groovy.control.SourceUnit;",
          "38: import org.codehaus.groovy.control.customizers.CompilationCustomizer;",
          "41: import java.util.List;",
          "43: public class RejectASTTransformsCustomizer extends CompilationCustomizer {",
          "46:     public RejectASTTransformsCustomizer() {",
          "47:         super(CompilePhase.CONVERSION);",
          "",
          "[Removed Lines]",
          "40: import java.lang.annotation.Annotation;",
          "44:     private static final List<Class<? extends Annotation>> BLOCKED_TRANSFORMS = ImmutableList.of(ASTTest.class, Grab.class);",
          "",
          "[Added Lines]",
          "29: import groovy.lang.GrabConfig;",
          "30: import groovy.lang.GrabExclude;",
          "31: import groovy.lang.GrabResolver;",
          "32: import groovy.lang.Grapes;",
          "34: import groovy.transform.AnnotationCollector;",
          "39: import org.codehaus.groovy.ast.ImportNode;",
          "40: import org.codehaus.groovy.ast.ModuleNode;",
          "47: import java.util.ArrayList;",
          "48: import java.util.Arrays;",
          "52:     private static final List<String> BLOCKED_TRANSFORMS = ImmutableList.of(ASTTest.class.getCanonicalName(), Grab.class.getCanonicalName(),",
          "53:             GrabConfig.class.getCanonicalName(), GrabExclude.class.getCanonicalName(), GrabResolver.class.getCanonicalName(),",
          "54:             Grapes.class.getCanonicalName(), AnnotationCollector.class.getCanonicalName());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:             return source;",
          "65:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         @Override",
          "78:         public void visitImports(ModuleNode node) {",
          "79:             if (node != null) {",
          "80:                 for (ImportNode importNode : node.getImports()) {",
          "81:                     checkImportForBlockedAnnotation(importNode);",
          "82:                 }",
          "83:                 for (ImportNode importStaticNode : node.getStaticImports().values()) {",
          "84:                     checkImportForBlockedAnnotation(importStaticNode);",
          "85:                 }",
          "86:             }",
          "87:         }",
          "89:         private void checkImportForBlockedAnnotation(ImportNode node) {",
          "90:             if (node != null && node.getType() != null) {",
          "91:                 for (String blockedAnnotation : getBlockedTransforms()) {",
          "92:                     if (blockedAnnotation.equals(node.getType().getName()) || blockedAnnotation.endsWith(\".\" + node.getType().getName())) {",
          "93:                         throw new SecurityException(\"Annotation \" + node.getType().getName() + \" cannot be used in the sandbox.\");",
          "94:                     }",
          "95:                 }",
          "96:             }",
          "97:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         @Override",
          "73:         public void visitAnnotations(AnnotatedNode node) {",
          "74:             for (AnnotationNode an : node.getAnnotations()) {",
          "78:                     }",
          "79:                 }",
          "80:             }",
          "81:         }",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "75:                 for (Class<? extends Annotation> blockedAnnotation : BLOCKED_TRANSFORMS) {",
          "76:                     if (blockedAnnotation.getSimpleName().equals(an.getClassNode().getName())) {",
          "77:                         throw new SecurityException(\"Annotation \" + blockedAnnotation.getSimpleName() + \" cannot be used in the sandbox.\");",
          "",
          "[Added Lines]",
          "107:                 for (String blockedAnnotation : getBlockedTransforms()) {",
          "108:                     if (blockedAnnotation.equals(an.getClassNode().getName()) || blockedAnnotation.endsWith(\".\" + an.getClassNode().getName())) {",
          "109:                         throw new SecurityException(\"Annotation \" + an.getClassNode().getName() + \" cannot be used in the sandbox.\");",
          "116:     private static List<String> getBlockedTransforms() {",
          "117:         List<String> blocked = new ArrayList<>(BLOCKED_TRANSFORMS);",
          "119:         String additionalBlocked = System.getProperty(RejectASTTransformsCustomizer.class.getName() + \".ADDITIONAL_BLOCKED_TRANSFORMS\");",
          "121:         if (additionalBlocked != null) {",
          "122:             for (String b : additionalBlocked.split(\",\")) {",
          "123:                 blocked.add(b.trim());",
          "124:             }",
          "125:         }",
          "127:         return blocked;",
          "128:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java||src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java": [
          "File: src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java -> src/test/java/org/jenkinsci/plugins/scriptsecurity/sandbox/groovy/SecureGroovyScriptTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:                 containsString(\"Annotation Grab cannot be used in the sandbox\"));",
          "874:     }",
          "877: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:     @Issue(\"SECURITY-1318\")",
          "877:     @Test",
          "878:     public void blockGrapes() throws Exception {",
          "879:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "880:         assertThat(d.doCheckScript(\"@Grapes([@Grab(group='foo', module='bar', version='1.0')])\\ndef foo\\n\", false).toString(),",
          "881:                 containsString(\"Annotation Grapes cannot be used in the sandbox\"));",
          "882:     }",
          "884:     @Issue(\"SECURITY-1318\")",
          "885:     @Test",
          "886:     public void blockGrabConfig() throws Exception {",
          "887:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "888:         assertThat(d.doCheckScript(\"@GrabConfig(autoDownload=false)\\ndef foo\\n\", false).toString(),",
          "889:                 containsString(\"Annotation GrabConfig cannot be used in the sandbox\"));",
          "890:     }",
          "892:     @Issue(\"SECURITY-1318\")",
          "893:     @Test",
          "894:     public void blockGrabExclude() throws Exception {",
          "895:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "896:         assertThat(d.doCheckScript(\"@GrabExclude(group='org.mortbay.jetty', module='jetty-util')\\ndef foo\\n\", false).toString(),",
          "897:                 containsString(\"Annotation GrabExclude cannot be used in the sandbox\"));",
          "898:     }",
          "900:     @Issue(\"SECURITY-1319\")",
          "901:     @Test",
          "902:     public void blockGrabResolver() throws Exception {",
          "903:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "904:         assertThat(d.doCheckScript(\"@GrabResolver(name='restlet.org', root='http://maven.restlet.org')\\ndef foo\\n\", false).toString(),",
          "905:                 containsString(\"Annotation GrabResolver cannot be used in the sandbox\"));",
          "906:     }",
          "908:     @Issue(\"SECURITY-1318\")",
          "909:     @Test",
          "910:     public void blockArbitraryAnnotation() throws Exception {",
          "911:         try {",
          "912:             System.setProperty(RejectASTTransformsCustomizer.class.getName() + \".ADDITIONAL_BLOCKED_TRANSFORMS\", \"groovy.transform.Field,groovy.transform.Immutable\");",
          "913:             SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "914:             assertThat(d.doCheckScript(\"@Field\\ndef foo\\n\", false).toString(),",
          "915:                     containsString(\"Annotation Field cannot be used in the sandbox\"));",
          "916:         } finally {",
          "917:             System.clearProperty(RejectASTTransformsCustomizer.class.getName() + \".ADDITIONAL_BLOCKED_TRANSFORMS\");",
          "918:         }",
          "919:     }",
          "921:     @Issue(\"SECURITY-1321\")",
          "922:     @Test",
          "923:     public void blockAnnotationCollector() throws Exception {",
          "924:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "925:         assertThat(d.doCheckScript(\"import groovy.transform.*\\n\" +",
          "926:                 \"import jenkins.model.Jenkins\\n\" +",
          "927:                 \"import hudson.model.FreeStyleProject\\n\" +",
          "928:                 \"@AnnotationCollector([ASTTest]) @interface Lol {}\\n\" +",
          "929:                 \"@Lol(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \\\"should-not-exist\\\") })\\n\" +",
          "930:                 \"@Field int x\\n\" +",
          "931:                 \"echo 'hello'\\n\", false).toString(), containsString(\"Annotation AnnotationCollector cannot be used in the sandbox\"));",
          "933:         assertNull(r.jenkins.getItem(\"should-not-exist\"));",
          "934:     }",
          "936:     @Issue(\"SECURITY-1320\")",
          "937:     @Test",
          "938:     public void blockFQCN() throws Exception {",
          "939:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "940:         assertThat(d.doCheckScript(\"import groovy.transform.*\\n\" +",
          "941:                 \"import jenkins.model.Jenkins\\n\" +",
          "942:                 \"import hudson.model.FreeStyleProject\\n\" +",
          "943:                 \"@groovy.transform.ASTTest(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \\\"should-not-exist\\\") })\\n\" +",
          "944:                 \"@Field int x\\n\" +",
          "945:                 \"echo 'hello'\\n\", false).toString(), containsString(\"Annotation groovy.transform.ASTTest cannot be used in the sandbox\"));",
          "947:         assertNull(r.jenkins.getItem(\"should-not-exist\"));",
          "948:     }",
          "950:     @Issue(\"SECURITY-1320\")",
          "951:     @Test",
          "952:     public void blockImportAsBlockedAnnotation() throws Exception {",
          "953:         SecureGroovyScript.DescriptorImpl d = r.jenkins.getDescriptorByType(SecureGroovyScript.DescriptorImpl.class);",
          "954:         assertThat(d.doCheckScript(\"import groovy.transform.ASTTest as lolwut\\n\" +",
          "955:                 \"import jenkins.model.Jenkins\\n\" +",
          "956:                 \"import hudson.model.FreeStyleProject\\n\" +",
          "957:                 \"@lolwut(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \\\"should-not-exist\\\") })\\n\" +",
          "958:                 \"int x\\n\" +",
          "959:                 \"echo 'hello'\\n\", false).toString(), containsString(\"Annotation groovy.transform.ASTTest cannot be used in the sandbox\"));",
          "961:         assertNull(r.jenkins.getItem(\"should-not-exist\"));",
          "962:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}