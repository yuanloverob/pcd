{
  "cve_id": "CVE-2024-49580",
  "cve_desc": "In JetBrains Ktor before 2.3.13 improper caching in HttpCache Plugin could lead to response information disclosure",
  "repo": "ktorio/ktor",
  "patch_hash": "0665736fc35c8ab5525241e975f36819b67f9d3e",
  "patch_info": {
    "commit_hash": "0665736fc35c8ab5525241e975f36819b67f9d3e",
    "repo": "ktorio/ktor",
    "commit_url": "https://github.com/ktorio/ktor/commit/0665736fc35c8ab5525241e975f36819b67f9d3e",
    "files": [
      "ktor-client/ktor-client-core/api/ktor-client-core.api",
      "ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
      "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
      "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
    ],
    "message": "KTOR-7483 Allow auth header when client is not shared (#4368)",
    "before_after_code_files": [
      "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
      "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
      "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
      "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
    ]
  },
  "patch_diff": {
    "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api": [
      "File: ktor-client/ktor-client-core/api/ktor-client-core.api -> ktor-client/ktor-client-core/api/ktor-client-core.api",
      "--- Hunk 1 ---",
      "[Context before]",
      "599: public final class io/ktor/client/plugins/cache/HttpCache {",
      "600:  public static final field Companion Lio/ktor/client/plugins/cache/HttpCache$Companion;",
      "602: }",
      "604: public final class io/ktor/client/plugins/cache/HttpCache$Companion : io/ktor/client/plugins/HttpClientPlugin {",
      "",
      "[Removed Lines]",
      "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
      "",
      "[Added Lines]",
      "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "613: public final class io/ktor/client/plugins/cache/HttpCache$Config {",
      "614:  public fun <init> ()V",
      "616:  public final fun getPrivateStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
      "617:  public final fun getPublicStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
      "618:  public final fun isShared ()Z",
      "619:  public final fun privateStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
      "620:  public final fun publicStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
      "622:  public final fun setPrivateStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
      "623:  public final fun setPublicStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
      "624:  public final fun setShared (Z)V",
      "",
      "[Removed Lines]",
      "615:  public final fun getCacheRequestWithAuth ()Z",
      "621:  public final fun setCacheRequestWithAuth (Z)V",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api": [
      "File: ktor-client/ktor-client-core/api/ktor-client-core.klib.api -> ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
      "--- Hunk 1 ---",
      "[Context before]",
      "333:     final class Config { // io.ktor.client.plugins.cache/HttpCache.Config|null[0]",
      "334:         constructor <init>() // io.ktor.client.plugins.cache/HttpCache.Config.<init>|<init>(){}[0]",
      "339:         final var isShared // io.ktor.client.plugins.cache/HttpCache.Config.isShared|{}isShared[0]",
      "340:             final fun <get-isShared>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<get-isShared>|<get-isShared>(){}[0]",
      "341:             final fun <set-isShared>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<set-isShared>|<set-isShared>(kotlin.Boolean){}[0]",
      "",
      "[Removed Lines]",
      "336:         final var cacheRequestWithAuth // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth|{}cacheRequestWithAuth[0]",
      "337:             final fun <get-cacheRequestWithAuth>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<get-cacheRequestWithAuth>|<get-cacheRequestWithAuth>(){}[0]",
      "338:             final fun <set-cacheRequestWithAuth>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<set-cacheRequestWithAuth>|<set-cacheRequestWithAuth>(kotlin.Boolean){}[0]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt": [
      "File: ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: public class HttpCache private constructor(",
      "50:     private val publicStorageNew: CacheStorage,",
      "51:     private val privateStorageNew: CacheStorage,",
      "52:     private val useOldStorage: Boolean,",
      "53:     internal val isSharedClient: Boolean,",
      "55: ) {",
      "",
      "[Removed Lines]",
      "44:     @Deprecated(\"This will become internal\", level = DeprecationLevel.ERROR)",
      "45:     @Suppress(\"DEPRECATION_ERROR\")",
      "46:     internal val publicStorage: HttpCacheStorage,",
      "47:     @Deprecated(\"This will become internal\", level = DeprecationLevel.ERROR)",
      "48:     @Suppress(\"DEPRECATION_ERROR\")",
      "49:     internal val privateStorage: HttpCacheStorage,",
      "54:     internal val cacheRequestWithAuth: Boolean",
      "",
      "[Added Lines]",
      "44:     @Deprecated(",
      "45:         \"This will become internal\",",
      "46:         level = DeprecationLevel.ERROR",
      "47:     ) @Suppress(\"DEPRECATION_ERROR\") internal val publicStorage: HttpCacheStorage,",
      "48:     @Deprecated(",
      "49:         \"This will become internal\",",
      "50:         level = DeprecationLevel.ERROR",
      "51:     ) @Suppress(\"DEPRECATION_ERROR\") internal val privateStorage: HttpCacheStorage,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:         internal var privateStorageNew: CacheStorage = CacheStorage.Unlimited()",
      "63:         internal var useOldStorage = false",
      "",
      "[Removed Lines]",
      "73:         @Deprecated(\"Changing this flag has security implication\", level = DeprecationLevel.WARNING)",
      "74:         public var cacheRequestWithAuth: Boolean = false",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "143:             val config = Config().apply(block)",
      "145:             with(config) {",
      "148:                     publicStorage = publicStorage,",
      "149:                     privateStorage = privateStorage,",
      "150:                     publicStorageNew = publicStorageNew,",
      "151:                     privateStorageNew = privateStorageNew,",
      "152:                     useOldStorage = useOldStorage,",
      "155:                 )",
      "156:             }",
      "157:         }",
      "",
      "[Removed Lines]",
      "146:                 @Suppress(\"DEPRECATION_ERROR\")",
      "147:                 return HttpCache(",
      "153:                     isSharedClient = isShared,",
      "154:                     cacheRequestWithAuth = cacheRequestWithAuth",
      "",
      "[Added Lines]",
      "136:                 @Suppress(\"DEPRECATION_ERROR\") return HttpCache(",
      "142:                     isSharedClient = isShared",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "165:                 if (content !is OutgoingContent.NoContent) return@intercept",
      "166:                 if (context.method != HttpMethod.Get || !context.url.protocol.canStore()) return@intercept",
      "169:                     return@intercept",
      "170:                 }",
      "",
      "[Removed Lines]",
      "168:                 if (!plugin.cacheRequestWithAuth && context.headers.contains(HttpHeaders.Authorization)) {",
      "",
      "[Added Lines]",
      "156:                 if (plugin.isSharedClient && context.headers.contains(HttpHeaders.Authorization)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "187:                 val validateStatus = shouldValidate(cache.expires, cache.headers, context)",
      "189:                 if (validateStatus == ValidateStatus.ShouldNotValidate) {",
      "193:                     proceedWithCache(scope, cachedCall)",
      "194:                     return@intercept",
      "195:                 }",
      "",
      "[Removed Lines]",
      "190:                     val cachedCall = cache",
      "191:                         .createResponse(scope, RequestForCache(context.build()), context.executionContext)",
      "192:                         .call",
      "",
      "[Added Lines]",
      "178:                     val cachedCall =",
      "179:                         cache.createResponse(scope, RequestForCache(context.build()), context.executionContext).call",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "221:                     LOGGER.trace(\"Caching response for ${response.call.request.url}\")",
      "222:                     val cachedData = plugin.cacheResponse(response)",
      "223:                     if (cachedData != null) {",
      "226:                         proceedWith(reusableResponse)",
      "227:                         return@intercept",
      "228:                     }",
      "",
      "[Removed Lines]",
      "224:                         val reusableResponse = cachedData",
      "225:                             .createResponse(scope, response.request, response.coroutineContext)",
      "",
      "[Added Lines]",
      "211:                         val reusableResponse =",
      "212:                             cachedData.createResponse(scope, response.request, response.coroutineContext)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "231:                 if (response.status == HttpStatusCode.NotModified) {",
      "232:                     LOGGER.trace(\"Not modified response for ${response.call.request.url}, replying from cache\")",
      "236:                     scope.monitor.raise(HttpResponseFromCache, responseFromCache)",
      "237:                     proceedWith(responseFromCache)",
      "",
      "[Removed Lines]",
      "233:                     val responseFromCache = plugin.findAndRefresh(response.call.request, response)",
      "234:                         ?: throw InvalidCacheStateException(response.call.request.url)",
      "",
      "[Added Lines]",
      "220:                     val responseFromCache =",
      "221:                         plugin.findAndRefresh(response.call.request, response) ?: throw InvalidCacheStateException(",
      "222:                             response.call.request.url",
      "223:                         )",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "341:         else -> {",
      "342:             val requestHeaders = mergedHeadersLookup(request.content, request.headers::get, request.headers::getAll)",
      "348:         }",
      "349:     }",
      "",
      "[Removed Lines]",
      "343:             storage.findAll(url)",
      "344:                 .sortedByDescending { it.responseTime }",
      "345:                 .firstOrNull { cachedResponse ->",
      "346:                     cachedResponse.varyKeys.all { (key, value) -> requestHeaders(key) == value }",
      "347:                 }",
      "",
      "[Added Lines]",
      "332:             storage.findAll(url).sortedByDescending { it.responseTime }.firstOrNull { cachedResponse ->",
      "333:                 cachedResponse.varyKeys.all { (key, value) -> requestHeaders(key) == value }",
      "334:             }",
      "",
      "---------------"
    ],
    "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt": [
      "File: ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt -> ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "70:     }",
      "72:     @Test",
      "74:         application {",
      "75:             routing {",
      "76:                 get(\"/me\") {",
      "",
      "[Removed Lines]",
      "73:     fun `should mix ETags when Authorization header is present and flag enabled`() = testApplication {",
      "",
      "[Added Lines]",
      "73:     fun `should mix ETags when Authorization header is present and client is not shared`() = testApplication {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:         }",
      "94:         val client = createClient {",
      "100:         }",
      "102:         assertEquals(",
      "",
      "[Removed Lines]",
      "95:             install(HttpCache) {",
      "96:                 isShared = true",
      "97:                 @Suppress(\"DEPRECATION\")",
      "98:                 cacheRequestWithAuth = true",
      "99:             }",
      "",
      "[Added Lines]",
      "95:             install(HttpCache)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4bf50552c7cd288cc57e0a3e1b15c4166d9bdc0",
      "candidate_info": {
        "commit_hash": "f4bf50552c7cd288cc57e0a3e1b15c4166d9bdc0",
        "repo": "ktorio/ktor",
        "commit_url": "https://github.com/ktorio/ktor/commit/f4bf50552c7cd288cc57e0a3e1b15c4166d9bdc0",
        "files": [
          "ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt",
          "ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt",
          "ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt",
          "ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt",
          "ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt"
        ],
        "message": "KTOR-7828 Revert removed content-length check (#4505)\n\n* KTOR-7828 Revert removed content-length check",
        "before_after_code_files": [
          "ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt||ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt",
          "ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt||ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt",
          "ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt||ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt",
          "ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt||ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt",
          "ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt||ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt",
          "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt"
          ],
          "candidate": [
            "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt"
          ]
        }
      },
      "candidate_diff": {
        "ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt": [
          "File: ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/call/SavedCall.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import io.ktor.http.*",
          "11: import io.ktor.util.date.*",
          "12: import io.ktor.utils.io.*",
          "16: internal class SavedHttpCall(",
          "17:     client: HttpClient,",
          "",
          "[Removed Lines]",
          "13: import kotlinx.io.*",
          "14: import kotlin.coroutines.*",
          "",
          "[Added Lines]",
          "13: import kotlinx.io.readByteArray",
          "14: import kotlin.coroutines.CoroutineContext",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     init {",
          "24:         this.request = SavedHttpRequest(this, request)",
          "25:         this.response = SavedHttpResponse(this, responseBody, response)",
          "26:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:         checkContentLength(response.contentLength(), responseBody.size.toLong(), request.method)",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt": [
          "File: ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/call/utils.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: public class UnsupportedUpgradeProtocolException(",
          "15:     url: Url",
          "16: ) : IllegalArgumentException(\"Unsupported upgrade protocol exception: $url\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: internal fun checkContentLength(contentLength: Long?, bodySize: Long, method: HttpMethod) {",
          "19:     if (contentLength == null || contentLength < 0 || method == HttpMethod.Head) return",
          "21:     if (contentLength != bodySize) {",
          "22:         throw IllegalStateException(",
          "23:             \"Content-Length mismatch: expected $contentLength bytes, but received $bodySize bytes\"",
          "24:         )",
          "25:     }",
          "26: }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt": [
          "File: ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/DefaultTransform.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:             ByteArray::class -> {",
          "81:                 val bytes = body.toByteArray()",
          "82:                 proceedWith(HttpResponseContainer(info, bytes))",
          "83:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:                 val contentLength = context.response.contentLength()",
          "84:                 if (context.request.method != HttpMethod.Head) {",
          "85:                     checkContentLength(contentLength, bytes.size.toLong())",
          "86:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     platformResponseDefaultTransformers()",
          "125: }",
          "127: internal expect fun platformRequestDefaultTransform(",
          "128:     contentType: ContentType?,",
          "129:     context: HttpRequestBuilder,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: private fun checkContentLength(contentLength: Long?, bytes: Long) {",
          "134:     check(contentLength == null || contentLength == bytes) {",
          "135:         \"Content-Length mismatch: expected $contentLength bytes, but received $bytes bytes\"",
          "136:     }",
          "137: }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt": [
          "File: ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import io.ktor.util.logging.*",
          "22: import io.ktor.util.pipeline.*",
          "23: import io.ktor.utils.io.*",
          "26: internal object CacheControl {",
          "27:     internal val NO_STORE = HeaderValue(\"no-store\")",
          "",
          "[Removed Lines]",
          "24: import kotlin.coroutines.*",
          "",
          "[Added Lines]",
          "24: import kotlin.coroutines.CoroutineContext",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:                     LOGGER.trace(\"Caching response for ${response.call.request.url}\")",
          "209:                     val cachedData = plugin.cacheResponse(response)",
          "210:                     if (cachedData != null) {",
          "213:                         proceedWith(reusableResponse)",
          "214:                         return@intercept",
          "215:                     }",
          "",
          "[Removed Lines]",
          "211:                         val reusableResponse =",
          "212:                             cachedData.createResponse(scope, response.request, response.coroutineContext)",
          "",
          "[Added Lines]",
          "211:                         val reusableResponse = cachedData.createResponse(",
          "212:                             scope,",
          "213:                             response.request,",
          "214:                             response.coroutineContext",
          "215:                         )",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt||ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt": [
          "File: ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt -> ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/CurlClientEngine.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import io.ktor.client.request.*",
          "12: import io.ktor.http.*",
          "13: import io.ktor.http.cio.*",
          "15: import io.ktor.util.date.*",
          "16: import io.ktor.utils.io.*",
          "17: import kotlinx.coroutines.*",
          "",
          "[Removed Lines]",
          "14: import io.ktor.util.*",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:             val status = HttpStatusCode.fromValue(status)",
          "46:             rawHeaders.release()",
          "48:             val responseBody: Any = data.attributes.getOrNull(ResponseAdapterAttributeKey)",
          "",
          "[Removed Lines]",
          "45:             val headers = HeadersImpl(rawHeaders.toMap())",
          "",
          "[Added Lines]",
          "44:             val headers = filterCurlHeaders(rawHeaders)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     }",
          "67: }",
          "69: @Deprecated(\"This exception will be removed in a future release in favor of a better error handling.\")",
          "70: public class CurlIllegalStateException(cause: String) : IllegalStateException(cause)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: internal fun filterCurlHeaders(raw: HttpHeadersMap): Headers {",
          "75:     val builder = raw.toBuilder()",
          "77:     if (builder.contains(HttpHeaders.ContentEncoding)) {",
          "78:         builder.remove(HttpHeaders.ContentEncoding)",
          "79:         builder.remove(HttpHeaders.ContentLength)",
          "80:     }",
          "82:     return builder.build()",
          "83: }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt||ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt": [
          "File: ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt -> ktor-client/ktor-client-curl/desktop/src/io/ktor/client/engine/curl/ResponseUtils.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: package io.ktor.client.engine.curl",
          "7: import io.ktor.http.cio.*",
          "12:     for (index in 0 until size) {",
          "13:         val key = nameAt(index).toString()",
          "14:         val value = valueAt(index).toString()",
          "19:     }",
          "22: }",
          "",
          "[Removed Lines]",
          "9: internal fun HttpHeadersMap.toMap(): Map<String, List<String>> {",
          "10:     val result = mutableMapOf<String, MutableList<String>>()",
          "16:         if (result[key]?.add(value) == null) {",
          "17:             result[key] = mutableListOf(value)",
          "18:         }",
          "21:     return result",
          "",
          "[Added Lines]",
          "7: import io.ktor.http.HeadersBuilder",
          "10: internal fun HttpHeadersMap.toBuilder(): HeadersBuilder {",
          "11:     val builder = HeadersBuilder()",
          "17:         builder.append(key, value)",
          "20:     return builder",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt||ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt": [
          "File: ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt -> ktor-client/ktor-client-mock/common/src/io/ktor/client/engine/mock/MockEngine.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     private var invocationCount: Int = 0",
          "33:     init {",
          "35:             \"No request handler provided in [MockEngineConfig], please provide at least one.\"",
          "36:         }",
          "37:     }",
          "",
          "[Removed Lines]",
          "34:         check(config.requestHandlers.size > 0) {",
          "",
          "[Added Lines]",
          "34:         check(config.requestHandlers.isNotEmpty()) {",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt||ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt": [
          "File: ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt -> ktor-client/ktor-client-plugins/ktor-client-encoding/common/src/ContentEncoding.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import io.ktor.util.logging.*",
          "16: import io.ktor.util.pipeline.*",
          "17: import io.ktor.utils.io.*",
          "20: private val LOGGER = KtorSimpleLogger(\"io.ktor.client.plugins.compression.ContentEncoding\")",
          "",
          "[Removed Lines]",
          "18: import kotlinx.coroutines.*",
          "",
          "[Added Lines]",
          "18: import kotlinx.coroutines.CoroutineScope",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:             val headers = headers {",
          "132:                 response.headers.forEach { name, values ->",
          "134:                     appendAll(name, values)",
          "135:                 }",
          "136:                 val remainingEncodings = encodings.filter { !encodings.contains(it) }",
          "",
          "[Removed Lines]",
          "133:                     if (name.equals(HttpHeaders.ContentEncoding, ignoreCase = true)) return@forEach",
          "",
          "[Added Lines]",
          "133:                     if (name.equals(HttpHeaders.ContentEncoding, ignoreCase = true) ||",
          "134:                         name.equals(HttpHeaders.ContentLength, ignoreCase = true)",
          "135:                     ) {",
          "136:                         return@forEach",
          "137:                     }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt||ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt": [
          "File: ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt -> ktor-client/ktor-client-plugins/ktor-client-encoding/common/test/ContentEncodingTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     }",
          "98:     @Test",
          "100:         config {",
          "101:             ContentEncoding(mode = ContentEncodingConfig.Mode.CompressRequest) {",
          "102:                 gzip()",
          "",
          "[Removed Lines]",
          "99:     fun testDisableDecompression() = clientTests(listOf(\"OkHttp\")) {",
          "",
          "[Added Lines]",
          "99:     fun testDisableDecompression() = clientTests(listOf(\"OkHttp\", \"Js\")) {",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt": [
          "File: ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt -> ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/ContentTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     }",
          "147:     @Test",
          "149:         test { client ->",
          "150:             testStrings.forEach { content ->",
          "151:                 val requestWithBody = client.echo<String>(content)",
          "",
          "[Removed Lines]",
          "148:     fun testString() = clientTests(listOf(\"Darwin\", \"CIO\", \"DarwinLegacy\")) {",
          "",
          "[Added Lines]",
          "148:     fun testString() = clientTests(listOf(\"Darwin\", \"CIO\", \"DarwinLegacy\"), retries = 10) {",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt": [
          "File: ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt -> ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/DefaultTransformTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import io.ktor.client.engine.mock.*",
          "10: import io.ktor.client.request.*",
          "11: import io.ktor.http.*",
          "13: import kotlin.test.*",
          "15: class DefaultTransformTest {",
          "17:     @Test",
          "20:             engine {",
          "21:                 addHandler { _ ->",
          "22:                     respond(\"\", headers = headersOf(HttpHeaders.ContentLength, \"123\"))",
          "23:                 }",
          "24:             }",
          "25:         }",
          "28:     }",
          "29: }",
          "",
          "[Removed Lines]",
          "12: import io.ktor.test.dispatcher.*",
          "18:     fun testReadingHeadResponseAsByteArray() = testSuspend {",
          "19:         val httpClient = HttpClient(MockEngine) {",
          "27:         httpClient.head(\"http://host/path\").body<ByteArray>()",
          "",
          "[Added Lines]",
          "12: import kotlinx.coroutines.test.runTest",
          "18:     fun testReadingHeadResponseAsByteArray() = runTest {",
          "19:         val client = HttpClient(MockEngine) {",
          "26:         client.head(\"http://host/path\").body<ByteArray>()",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt": [
          "File: ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt -> ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/LoggingTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:     data class User(val name: String)",
          "500:     @Test",
          "502:         val testLogger = TestLogger(",
          "503:             \"REQUEST: http://127.0.0.1:8080/content/echo\",",
          "504:             \"METHOD: HttpMethod(value=POST)\",",
          "",
          "[Removed Lines]",
          "501:     fun testLogPostBodyWithJson() = clientTests {",
          "",
          "[Added Lines]",
          "501:     fun testLogPostBodyWithJson() = clientTests(retries = 5) {",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt": [
          "File: ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt -> ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/MockedTests.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:                 .body<Unit>()",
          "101:         }",
          "102:     }",
          "103: }",
          "105: @Serializable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     @Test",
          "105:     fun testContentLengthIsCheckedForByteArray() = testWithEngine(MockEngine) {",
          "106:         config {",
          "107:             engine {",
          "108:                 addHandler { request ->",
          "109:                     respond(\"hello\", headers = headersOf(HttpHeaders.ContentLength, \"123\"))",
          "110:                 }",
          "111:             }",
          "112:         }",
          "114:         test { client ->",
          "115:             assertFailsWith<IllegalStateException> {",
          "116:                 client.prepareGet(Url(\"http://host\")) {",
          "117:                     url.path(\"path\")",
          "118:                 }.execute { response ->",
          "119:                     response.body<ByteArray>()",
          "120:                 }",
          "121:             }",
          "122:         }",
          "123:     }",
          "125:     @Test",
          "126:     fun testContentLengthIsChecked() = testWithEngine(MockEngine) {",
          "127:         config {",
          "128:             engine {",
          "129:                 addHandler { request ->",
          "130:                     respond(\"hello\", headers = headersOf(HttpHeaders.ContentLength, \"123\"))",
          "131:                 }",
          "132:             }",
          "133:         }",
          "135:         test { client ->",
          "136:             assertFailsWith<IllegalStateException> {",
          "137:                 client.get(\"https://host/path\").body<String>()",
          "138:             }",
          "139:         }",
          "140:     }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt": [
          "File: ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt -> ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/PluginsTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     private val testSize = listOf(0, 1, 1024, 4 * 1024, 16 * 1024, 16 * 1024 * 1024)",
          "19:     @Test",
          "21:         test { client ->",
          "22:             testSize.forEach {",
          "23:                 client.getIgnoringBody(it)",
          "",
          "[Removed Lines]",
          "20:     fun testIgnoreBody() = clientTests {",
          "",
          "[Added Lines]",
          "20:     fun testIgnoreBody() = clientTests(retries = 10) {",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt||ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt": [
          "File: ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt -> ktor-client/ktor-client-tests/common/test/io/ktor/client/tests/plugins/CookiesIntegrationTests.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     }",
          "188:     @Test",
          "190:         config {",
          "191:             install(HttpCookies)",
          "192:         }",
          "",
          "[Removed Lines]",
          "189:     fun testCookiesWithWrongValue() = clientTests(listOf(\"Js\", \"Darwin\", \"DarwinLegacy\", \"WinHttp\", \"Java\")) {",
          "",
          "[Added Lines]",
          "189:     fun testCookiesWithWrongValue() = clientTests(listOf(\"Js\", \"Darwin\", \"DarwinLegacy\", \"WinHttp\", \"Java\", \"Curl\")) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6c3a51df169c163e8f0b9ce77bbe543c70116ac",
      "candidate_info": {
        "commit_hash": "d6c3a51df169c163e8f0b9ce77bbe543c70116ac",
        "repo": "ktorio/ktor",
        "commit_url": "https://github.com/ktorio/ktor/commit/d6c3a51df169c163e8f0b9ce77bbe543c70116ac",
        "files": [
          "ktor-client/ktor-client-core/api/ktor-client-core.api",
          "ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
          "ktor-client/ktor-client-core/build.gradle.kts",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
          "ktor-io/common/test/ByteReadChannelOperationsTest.kt"
        ],
        "message": "KTOR-7483 Avoid caching requests with Authorization header (#4337)\n\n* KTOR-7483 Avoid caching requests with Authorization header",
        "before_after_code_files": [
          "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
          "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
          "ktor-client/ktor-client-core/build.gradle.kts||ktor-client/ktor-client-core/build.gradle.kts",
          "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
          "ktor-io/common/test/ByteReadChannelOperationsTest.kt||ktor-io/common/test/ByteReadChannelOperationsTest.kt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
            "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
            "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
            "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
          ],
          "candidate": [
            "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api",
            "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
            "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
            "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt"
          ]
        }
      },
      "candidate_diff": {
        "ktor-client/ktor-client-core/api/ktor-client-core.api||ktor-client/ktor-client-core/api/ktor-client-core.api": [
          "File: ktor-client/ktor-client-core/api/ktor-client-core.api -> ktor-client/ktor-client-core/api/ktor-client-core.api",
          "--- Hunk 1 ---",
          "[Context before]",
          "599: public final class io/ktor/client/plugins/cache/HttpCache {",
          "600:  public static final field Companion Lio/ktor/client/plugins/cache/HttpCache$Companion;",
          "602: }",
          "604: public final class io/ktor/client/plugins/cache/HttpCache$Companion : io/ktor/client/plugins/HttpClientPlugin {",
          "",
          "[Removed Lines]",
          "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
          "",
          "[Added Lines]",
          "601:  public synthetic fun <init> (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;Lio/ktor/client/plugins/cache/storage/CacheStorage;ZZZLkotlin/jvm/internal/DefaultConstructorMarker;)V",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613: public final class io/ktor/client/plugins/cache/HttpCache$Config {",
          "614:  public fun <init> ()V",
          "615:  public final fun getPrivateStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
          "616:  public final fun getPublicStorage ()Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;",
          "617:  public final fun isShared ()Z",
          "618:  public final fun privateStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
          "619:  public final fun publicStorage (Lio/ktor/client/plugins/cache/storage/CacheStorage;)V",
          "620:  public final fun setPrivateStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
          "621:  public final fun setPublicStorage (Lio/ktor/client/plugins/cache/storage/HttpCacheStorage;)V",
          "622:  public final fun setShared (Z)V",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:  public final fun getCacheRequestWithAuth ()Z",
          "621:  public final fun setCacheRequestWithAuth (Z)V",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/api/ktor-client-core.klib.api||ktor-client/ktor-client-core/api/ktor-client-core.klib.api": [
          "File: ktor-client/ktor-client-core/api/ktor-client-core.klib.api -> ktor-client/ktor-client-core/api/ktor-client-core.klib.api",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:     final class Config { // io.ktor.client.plugins.cache/HttpCache.Config|null[0]",
          "334:         constructor <init>() // io.ktor.client.plugins.cache/HttpCache.Config.<init>|<init>(){}[0]",
          "336:         final var isShared // io.ktor.client.plugins.cache/HttpCache.Config.isShared|{}isShared[0]",
          "337:             final fun <get-isShared>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<get-isShared>|<get-isShared>(){}[0]",
          "338:             final fun <set-isShared>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.isShared.<set-isShared>|<set-isShared>(kotlin.Boolean){}[0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:         final var cacheRequestWithAuth // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth|{}cacheRequestWithAuth[0]",
          "337:             final fun <get-cacheRequestWithAuth>(): kotlin/Boolean // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<get-cacheRequestWithAuth>|<get-cacheRequestWithAuth>(){}[0]",
          "338:             final fun <set-cacheRequestWithAuth>(kotlin/Boolean) // io.ktor.client.plugins.cache/HttpCache.Config.cacheRequestWithAuth.<set-cacheRequestWithAuth>|<set-cacheRequestWithAuth>(kotlin.Boolean){}[0]",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/build.gradle.kts||ktor-client/ktor-client-core/build.gradle.kts": [
          "File: ktor-client/ktor-client-core/build.gradle.kts -> ktor-client/ktor-client-core/build.gradle.kts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         dependencies {",
          "41:             api(project(\":ktor-test-dispatcher\"))",
          "42:             api(project(\":ktor-client:ktor-client-mock\"))",
          "43:         }",
          "44:     }",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:             api(project(\":ktor-server:ktor-server-test-host\"))",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt||ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt": [
          "File: ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt -> ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cache/HttpCache.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     private val publicStorageNew: CacheStorage,",
          "51:     private val privateStorageNew: CacheStorage,",
          "52:     private val useOldStorage: Boolean,",
          "54: ) {",
          "",
          "[Removed Lines]",
          "53:     internal val isSharedClient: Boolean",
          "",
          "[Added Lines]",
          "53:     internal val isSharedClient: Boolean,",
          "54:     internal val cacheRequestWithAuth: Boolean",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         internal var privateStorageNew: CacheStorage = CacheStorage.Unlimited()",
          "62:         internal var useOldStorage = false",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         @Deprecated(\"Changing this flag has security implication\", level = DeprecationLevel.WARNING)",
          "74:         public var cacheRequestWithAuth: Boolean = false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:                     publicStorageNew = publicStorageNew,",
          "139:                     privateStorageNew = privateStorageNew,",
          "140:                     useOldStorage = useOldStorage,",
          "142:                 )",
          "143:             }",
          "144:         }",
          "",
          "[Removed Lines]",
          "141:                     isSharedClient = isShared",
          "",
          "[Added Lines]",
          "153:                     isSharedClient = isShared,",
          "154:                     cacheRequestWithAuth = cacheRequestWithAuth",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:                 if (content !is OutgoingContent.NoContent) return@intercept",
          "153:                 if (context.method != HttpMethod.Get || !context.url.protocol.canStore()) return@intercept",
          "155:                 if (plugin.useOldStorage) {",
          "156:                     interceptSendLegacy(plugin, content, scope)",
          "157:                     return@intercept",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:                 if (!plugin.cacheRequestWithAuth && context.headers.contains(HttpHeaders.Authorization)) {",
          "169:                     return@intercept",
          "170:                 }",
          "",
          "---------------"
        ],
        "ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt||ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt": [
          "File: ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt -> ktor-client/ktor-client-core/jvm/test/HttpCacheTest.kt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import io.ktor.client.plugins.cache.*",
          "6: import io.ktor.client.request.*",
          "7: import io.ktor.client.statement.*",
          "8: import io.ktor.http.*",
          "9: import io.ktor.server.response.*",
          "10: import io.ktor.server.routing.*",
          "11: import io.ktor.server.testing.*",
          "12: import kotlinx.coroutines.*",
          "13: import kotlin.test.*",
          "14: import kotlin.time.Duration.Companion.milliseconds",
          "16: class HttpCacheTest {",
          "18:     @Test",
          "19:     fun `should not mix ETags when Authorization header is present`() = testApplication {",
          "20:         application {",
          "21:             routing {",
          "22:                 get(\"/me\") {",
          "23:                     val user = call.request.headers[\"Authorization\"]!!",
          "24:                     if (user == \"user-a\") {",
          "26:                         delay(100.milliseconds)",
          "27:                     }",
          "28:                     val etag = \"etag-of-$user\"",
          "29:                     if (call.request.headers[\"If-None-Match\"] == etag) {",
          "30:                         call.respond(HttpStatusCode.NotModified)",
          "31:                         return@get",
          "32:                     }",
          "33:                     call.response.header(\"Cache-Control\", \"no-cache\")",
          "34:                     call.response.header(\"ETag\", etag)",
          "35:                     call.respondText(user)",
          "36:                 }",
          "37:             }",
          "38:         }",
          "40:         val client = createClient {",
          "41:             install(HttpCache) {",
          "42:                 isShared = true",
          "43:             }",
          "44:         }",
          "46:         assertEquals(",
          "47:             client.get(\"/me\") {",
          "48:                 headers[\"Authorization\"] = \"user-a\"",
          "49:             }.bodyAsText(),",
          "50:             \"user-a\"",
          "51:         )",
          "52:         withContext(Dispatchers.Default) {",
          "53:             listOf(",
          "54:                 launch {",
          "55:                     val response = client.get(\"/me\") {",
          "56:                         headers[\"Authorization\"] = \"user-a\"",
          "57:                     }.bodyAsText()",
          "59:                     assertEquals(\"user-a\", response)",
          "60:                 },",
          "61:                 launch {",
          "62:                     val response = client.get(\"/me\") {",
          "63:                         headers[\"Authorization\"] = \"user-b\"",
          "64:                     }.bodyAsText()",
          "66:                     assertEquals(\"user-b\", response)",
          "67:                 }",
          "68:             ).joinAll()",
          "69:         }",
          "70:     }",
          "72:     @Test",
          "73:     fun `should mix ETags when Authorization header is present and flag enabled`() = testApplication {",
          "74:         application {",
          "75:             routing {",
          "76:                 get(\"/me\") {",
          "77:                     val user = call.request.headers[\"Authorization\"]!!",
          "78:                     if (user == \"user-a\") {",
          "80:                         delay(100.milliseconds)",
          "81:                     }",
          "82:                     val etag = \"etag-of-$user\"",
          "83:                     if (call.request.headers[\"If-None-Match\"] == etag) {",
          "84:                         call.respond(HttpStatusCode.NotModified)",
          "85:                         return@get",
          "86:                     }",
          "87:                     call.response.header(\"Cache-Control\", \"no-cache\")",
          "88:                     call.response.header(\"ETag\", etag)",
          "89:                     call.respondText(user)",
          "90:                 }",
          "91:             }",
          "92:         }",
          "94:         val client = createClient {",
          "95:             install(HttpCache) {",
          "96:                 isShared = true",
          "97:                 @Suppress(\"DEPRECATION\")",
          "98:                 cacheRequestWithAuth = true",
          "99:             }",
          "100:         }",
          "102:         assertEquals(",
          "103:             client.get(\"/me\") {",
          "104:                 headers[\"Authorization\"] = \"user-a\"",
          "105:             }.bodyAsText(),",
          "106:             \"user-a\"",
          "107:         )",
          "108:         withContext(Dispatchers.Default) {",
          "109:             listOf(",
          "110:                 launch {",
          "111:                     val response = client.get(\"/me\") {",
          "112:                         headers[\"Authorization\"] = \"user-a\"",
          "113:                     }.bodyAsText()",
          "115:                     assertEquals(\"user-b\", response)",
          "116:                 },",
          "117:                 launch {",
          "118:                     val response = client.get(\"/me\") {",
          "119:                         headers[\"Authorization\"] = \"user-b\"",
          "120:                     }.bodyAsText()",
          "122:                     assertEquals(\"user-b\", response)",
          "123:                 }",
          "124:             ).joinAll()",
          "125:         }",
          "126:     }",
          "127: }",
          "",
          "---------------"
        ],
        "ktor-io/common/test/ByteReadChannelOperationsTest.kt||ktor-io/common/test/ByteReadChannelOperationsTest.kt": [
          "File: ktor-io/common/test/ByteReadChannelOperationsTest.kt -> ktor-io/common/test/ByteReadChannelOperationsTest.kt"
        ]
      }
    }
  ]
}