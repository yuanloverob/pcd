{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68607fb906acfb05be049c4d3b42d749ce025e32",
      "candidate_info": {
        "commit_hash": "68607fb906acfb05be049c4d3b42d749ce025e32",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/68607fb906acfb05be049c4d3b42d749ce025e32",
        "files": [
          "package.json",
          "packages/pager/src/pager.js",
          "styles/table.scss",
          "styles/variable.scss"
        ],
        "message": "fix \u4fee\u590d\u5206\u9875\u903b\u8f91\u5224\u65ad\u95ee\u9898 #2418",
        "before_after_code_files": [
          "packages/pager/src/pager.js||packages/pager/src/pager.js",
          "styles/table.scss||styles/table.scss",
          "styles/variable.scss||styles/variable.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/pager/src/pager.js||packages/pager/src/pager.js": [
          "File: packages/pager/src/pager.js -> packages/pager/src/pager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     renderEnd (h) {",
          "155:       return h('button', {",
          "156:         class: ['vxe-pager--prev-btn', {",
          "158:         }],",
          "159:         attrs: {",
          "160:           type: 'button',",
          "",
          "[Removed Lines]",
          "157:           'is--disabled': this.currentPage <= 1",
          "",
          "[Added Lines]",
          "157:           'is--disabled': this.currentPage >= this.pageCount",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: }",
          "213: .vxe-table--cell-active-area {",
          "215: }",
          "217: .vxe-table--cell-multi-area {",
          "",
          "[Removed Lines]",
          "214:   border: $vxe-table-cell-active-area-border-width solid $vxe-table-cell-active-area-border-color;",
          "",
          "[Added Lines]",
          "214:   border-color: $vxe-table-cell-active-area-border-color;",
          "215:   border-style: solid;",
          "216:   border-width: $vxe-table-cell-active-area-border-width;",
          "217:   background-color: $vxe-table-cell-active-area-background-color;",
          "",
          "---------------"
        ],
        "styles/variable.scss||styles/variable.scss": [
          "File: styles/variable.scss -> styles/variable.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: $vxe-table-cell-extend-area-border-width: 2px !default;",
          "107: $vxe-table-cell-copy-area-border-width: 3px !default;",
          "108: $vxe-table-cell-active-area-border-width: 2px !default;",
          "109: $vxe-table-cell-copy-area-border-color: $vxe-table-cell-area-border-color !default;",
          "110: $vxe-table-cell-extend-area-border-color: $vxe-table-cell-area-border-color !default;",
          "111: $vxe-table-cell-active-area-border-color: $vxe-table-cell-area-border-color !default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: $vxe-table-cell-active-area-background-color: transparent !default;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c86e2364566c55db82c485b466964cd891079331",
      "candidate_info": {
        "commit_hash": "c86e2364566c55db82c485b466964cd891079331",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/c86e2364566c55db82c485b466964cd891079331",
        "files": [
          "package.json",
          "packages/table/module/validator/mixin.ts",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.10.16",
        "before_after_code_files": [
          "packages/table/module/validator/mixin.ts||packages/table/module/validator/mixin.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/module/validator/mixin.ts||packages/table/module/validator/mixin.ts": [
          "File: packages/table/module/validator/mixin.ts -> packages/table/module/validator/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { handleFieldOrColumn, getRowid } from '../../src/util'",
          "6: import { warnLog, errLog } from '../../../ui/src/log'",
          "8: const { getConfig, validators } = VxeUI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import type { VxeTableDefines } from '../../../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:           warnLog('vxe.error.notValidators', ['fullValidate(rows, callback)', 'fullValidate(rows)'])",
          "74:         }",
          "75:       }",
          "77:     },",
          "",
          "[Removed Lines]",
          "76:       return this.beginValidate(rows, cb, true)",
          "",
          "[Added Lines]",
          "78:       return this.beginValidate(rows, null, cb, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:           warnLog('vxe.error.notValidators', ['validate(rows, callback)', 'validate(rows)'])",
          "85:         }",
          "86:       }",
          "88:     },",
          "",
          "[Removed Lines]",
          "87:       return this.beginValidate(rows, cb)",
          "",
          "[Added Lines]",
          "89:       return this.beginValidate(rows, null, cb)",
          "90:     },",
          "94:     _fullValidateField (rows: any, fieldOrColumn: any) {",
          "95:       const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : [])).map(column => handleFieldOrColumn(this, column))",
          "96:       if (colList.length) {",
          "97:         return this.beginValidate(rows, colList, null, true)",
          "98:       }",
          "99:       return this.$nextTick()",
          "100:     },",
          "104:     _validateField (rows: any, fieldOrColumn: any) {",
          "105:       const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : [])).map(column => handleFieldOrColumn(this, column))",
          "106:       if (colList.length) {",
          "107:         return this.beginValidate(rows, colList, null)",
          "108:       }",
          "109:       return this.$nextTick()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:       const validRest: any = {}",
          "136:       const { editRules, afterFullData, visibleColumn, treeConfig, treeOpts } = this",
          "137:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "[Removed Lines]",
          "134:     beginValidate (rows: any, cb: any, isFull: any) {",
          "",
          "[Added Lines]",
          "156:     beginValidate (rows: any, cols: VxeTableDefines.ColumnInfo[] | null, cb: any, isFull: any) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:       this.clearValidate()",
          "155:       const validErrMaps: any = {}",
          "156:       if (editRules) {",
          "158:         const handleVaild = (row: any) => {",
          "159:           if (isFull || !this.validRuleErr) {",
          "160:             const colVailds: any[] = []",
          "161:             columns.forEach((column: any) => {",
          "163:                 colVailds.push(",
          "164:                   this.validCellRules('all', row, column)",
          "165:                     .catch(({ rule, rules }: any) => {",
          "",
          "[Removed Lines]",
          "157:         const columns = this.getColumns()",
          "162:               if ((isFull || !this.validRuleErr) && XEUtils.has(editRules, column.property)) {",
          "",
          "[Added Lines]",
          "179:         const columns = cols && cols.length ? cols : this.getColumns()",
          "184:               const field = XEUtils.isString(column) ? column : column.field",
          "185:               if ((isFull || !this.validRuleErr) && XEUtils.has(editRules, field)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:                         row,",
          "171:                         columnIndex: this.getColumnIndex(column),",
          "172:                         column,",
          "174:                         $table: this",
          "175:                       }",
          "178:                       }",
          "179:                       validErrMaps[`${getRowid(this, row)}:${column.id}`] = {",
          "180:                         column,",
          "",
          "[Removed Lines]",
          "173:                         field: column.property,",
          "176:                       if (!validRest[column.property]) {",
          "177:                         validRest[column.property] = []",
          "",
          "[Added Lines]",
          "196:                         field,",
          "199:                       if (!validRest[field]) {",
          "200:                         validRest[field] = []",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "182:                         rule,",
          "183:                         content: rule.content",
          "184:                       }",
          "186:                       if (!isFull) {",
          "187:                         this.validRuleErr = true",
          "188:                         return Promise.reject(rest)",
          "",
          "[Removed Lines]",
          "185:                       validRest[column.property].push(rest)",
          "",
          "[Added Lines]",
          "208:                       validRest[field].push(rest)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "371:       const { validOpts, validErrorMaps } = this",
          "372:       const validTip = this.$refs.validTip",
          "373:       const rowList = XEUtils.isArray(rows) ? rows : (rows ? [rows] : [])",
          "375:       let validErrMaps: any = {}",
          "376:       if (validTip && validTip.visible) {",
          "377:         validTip.close()",
          "",
          "[Removed Lines]",
          "374:       const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : []).map(column => handleFieldOrColumn(this, column)))",
          "",
          "[Added Lines]",
          "397:       const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : [])).map(column => handleFieldOrColumn(this, column))",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3042:                     !getEventTargetNode(evnt, $el).flag",
          "3043:                 ) {",
          "3045:                 }",
          "3046:               })",
          "3047:             }",
          "",
          "[Removed Lines]",
          "3044:                   setTimeout(() => this.clearEdit(evnt))",
          "",
          "[Added Lines]",
          "3044:                   setTimeout(() => {",
          "3045:                     this.clearEdit(evnt).then(() => {",
          "3047:                       if (!this.isActivated && editRules && validOpts.autoClear) {",
          "3048:                         this.validErrorMaps = {}",
          "3049:                       }",
          "3050:                     })",
          "3051:                   })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6370: } as any",
          "6375: funcs.forEach(name => {",
          "6376:   Methods[name] = function (...args: any[]) {",
          "",
          "[Removed Lines]",
          "6373: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,closeExport,openPrint,closePrint,getPrintHtml,exportData,openImport,closeImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom,saveCustom,cancelCustom,resetCustom,toggleCustomAllCheckbox,setCustomAllCheckbox'.split(',')",
          "",
          "[Added Lines]",
          "6380: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,updateFilterOptionStatus,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFNR,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,fullValidateField,validateField,openExport,closeExport,openPrint,closePrint,getPrintHtml,exportData,openImport,closeImport,importData,saveFile,readFile,importByFile,print,openCustom,closeCustom,saveCustom,cancelCustom,resetCustom,toggleCustomAllCheckbox,setCustomAllCheckbox'.split(',')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8931bb823bdf2e878eec658b33493f0f8f59acf4",
      "candidate_info": {
        "commit_hash": "8931bb823bdf2e878eec658b33493f0f8f59acf4",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/8931bb823bdf2e878eec658b33493f0f8f59acf4",
        "files": [
          "README.md",
          "examples/views/table/TableTest2.vue",
          "helper/vetur/attributes.json",
          "helper/vetur/tags.json",
          "package.json",
          "packages/table/module/custom/mixin.ts",
          "packages/table/module/edit/mixin.ts",
          "packages/table/src/body.ts",
          "packages/table/src/cell.ts",
          "packages/table/src/footer.ts",
          "packages/table/src/header.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/props.ts",
          "packages/table/src/table.ts",
          "packages/ui/index.ts",
          "styles/components/table.scss"
        ],
        "message": "releases 3.11.0",
        "before_after_code_files": [
          "examples/views/table/TableTest2.vue||examples/views/table/TableTest2.vue",
          "packages/table/module/custom/mixin.ts||packages/table/module/custom/mixin.ts",
          "packages/table/module/edit/mixin.ts||packages/table/module/edit/mixin.ts",
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/cell.ts||packages/table/src/cell.ts",
          "packages/table/src/footer.ts||packages/table/src/footer.ts",
          "packages/table/src/header.ts||packages/table/src/header.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/props.ts||packages/table/src/props.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/ui/index.ts||packages/ui/index.ts",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/TableTest2.vue||examples/views/table/TableTest2.vue": [
          "File: examples/views/table/TableTest2.vue -> examples/views/table/TableTest2.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:       border",
          "7:       stripe",
          "8:       resizable",
          "9:       highlight-hover-row",
          "10:       height=\"400\"",
          "11:       ref=\"tableRef\"",
          "12:       id=\"bbbbb\"",
          "13:       :row-config=\"{useKey: true,drag:true}\"",
          "15:       :custom-config=\"customConfig\"",
          "16:       :loading=\"demo1.loading\"",
          "17:       :import-config=\"{modes: importModes}\"",
          "",
          "[Removed Lines]",
          "14:       :column-config=\"{useKey: true}\"",
          "",
          "[Added Lines]",
          "9:       show-footer",
          "15:       :column-config=\"{useKey: true,drag: true}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:       :expand-config=\"{iconOpen: 'vxe-icon-question-circle-fill', iconClose: 'vxe-icon-question-circle-fill'}\"",
          "20:       :checkbox-config=\"{labelField: 'id', highlight: true, range: true}\"",
          "21:       :data=\"demo1.tableData\"",
          "22:       @row-dragstart=\"rowDragstartEvent\"",
          "23:       @row-dragover=\"rowDragoverEvent\"",
          "24:       @row-dragend=\"rowDragendEvent\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:       :footer-data=\"demo1.footerData\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:       demo1: {",
          "76:         loading: false,",
          "77:         tableData: [] as any[],",
          "78:         sexList: [",
          "79:           { label: '\u5973', value: '0' },",
          "80:           { label: '\u7537', value: '1' }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         footerData: [",
          "81:           { role: '777', name: '11', sex11: '22', sex22: '44', name1: '66', sex: '5656', age: '666' }",
          "82:         ],",
          "",
          "---------------"
        ],
        "packages/table/module/custom/mixin.ts||packages/table/module/custom/mixin.ts": [
          "File: packages/table/module/custom/mixin.ts -> packages/table/module/custom/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     },",
          "39:     _saveCustom () {",
          "40:       const $xeTable = this",
          "42:       const { customOpts, customColumnList } = this",
          "43:       const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:       const reactData = $xeTable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:           column.visible = column.renderVisible",
          "67:         }",
          "68:       })",
          "70:       return $xeTable.saveCustomStore('confirm')",
          "71:     },",
          "72:     _cancelCustom () {",
          "",
          "[Removed Lines]",
          "69:       $xeTable.closeCustom()",
          "",
          "[Added Lines]",
          "70:       reactData.isDragColMove = true",
          "71:       setTimeout(() => {",
          "72:         reactData.isDragColMove = false",
          "73:       }, 1000)",
          "",
          "---------------"
        ],
        "packages/table/module/edit/mixin.ts||packages/table/module/edit/mixin.ts": [
          "File: packages/table/module/edit/mixin.ts -> packages/table/module/edit/mixin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:               }",
          "450:               this.closeTooltip()",
          "451:               if (actived.column) {",
          "453:               }",
          "454:               type = 'edit-activated'",
          "455:               column.renderHeight = cell.offsetHeight",
          "",
          "[Removed Lines]",
          "452:                 this.clearEdit(evnt)",
          "",
          "[Added Lines]",
          "452:                 this.handleClearEdit(evnt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:         }",
          "537:       }",
          "538:     },",
          "540:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "541:         warnLog('vxe.error.delFunc', ['clearActived', 'clearEdit'])",
          "542:       }",
          "545:     },",
          "550:       const $xeTable = this",
          "551:       const reactData = $xeTable",
          "",
          "[Removed Lines]",
          "539:     _clearActived (evnt: any) {",
          "544:       return this.clearEdit(evnt)",
          "549:     _clearEdit (evnt: any) {",
          "",
          "[Added Lines]",
          "539:     _clearActived (row: any) {",
          "544:       return this.clearEdit(row)",
          "549:     _clearEdit (row: any) {",
          "550:       return this.handleClearEdit(null, row)",
          "551:     },",
          "555:     handleClearEdit (evnt: Event | null, targetRow?: any) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:       const { row, column } = actived",
          "556:       const validOpts = $xeTable.validOpts",
          "557:       if (row || column) {",
          "559:         actived.args = null",
          "560:         actived.row = null",
          "561:         actived.column = null",
          "564:           row,",
          "567:           column,",
          "570:         }, evnt)",
          "571:       }",
          "572:       focused.row = null",
          "573:       focused.column = null",
          "574:       if (validOpts.autoClear) {",
          "575:         if (validOpts.msgMode !== 'full' || getConfig().cellVaildMode === 'obsolete') {",
          "578:           }",
          "579:         }",
          "580:       }",
          "582:     },",
          "583:     _getActiveRecord () {",
          "584:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "[Removed Lines]",
          "558:         this._syncActivedCell()",
          "562:         this.updateFooter()",
          "563:         this.emitEvent('edit-closed', {",
          "565:           rowIndex: this.getRowIndex(row),",
          "566:           $rowIndex: this.getVMRowIndex(row),",
          "568:           columnIndex: this.getColumnIndex(column),",
          "569:           $columnIndex: this.getVMColumnIndex(column)",
          "576:           if (this.clearValidate) {",
          "577:             return this.clearValidate()",
          "581:       return this.$nextTick()",
          "",
          "[Added Lines]",
          "564:         if (targetRow && getRowid($xeTable, targetRow) !== getRowid($xeTable, row)) {",
          "565:           return $xeTable.$nextTick()",
          "566:         }",
          "567:         $xeTable._syncActivedCell()",
          "571:         $xeTable.updateFooter()",
          "572:         $xeTable.emitEvent('edit-closed', {",
          "574:           rowIndex: $xeTable.getRowIndex(row),",
          "575:           $rowIndex: $xeTable.getVMRowIndex(row),",
          "577:           columnIndex: $xeTable.getColumnIndex(column),",
          "578:           $columnIndex: $xeTable.getVMColumnIndex(column)",
          "585:           if ($xeTable.clearValidate) {",
          "586:             return $xeTable.clearValidate()",
          "590:       return $xeTable.$nextTick()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "735:       const selectMethod = () => {",
          "736:         if (isMouseSelected && (selected.row !== row || selected.column !== column)) {",
          "737:           if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {",
          "739:             this.clearSelected(evnt)",
          "740:             this.clearCellAreas(evnt)",
          "741:             this.clearCopyCellArea(evnt)",
          "",
          "[Removed Lines]",
          "738:             this.clearEdit(evnt)",
          "",
          "[Added Lines]",
          "747:             this.handleClearEdit(evnt)",
          "",
          "---------------"
        ],
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:     fullAllDataRowIdData,",
          "338:     rowOpts,",
          "339:     pendingRowList,",
          "341:   } = $xeTable",
          "342:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "343:   const rows: any[] = []",
          "",
          "[Removed Lines]",
          "340:     pendingRowMaps",
          "",
          "[Added Lines]",
          "340:     pendingRowMaps,",
          "341:     columnOpts,",
          "342:     isDragColMove",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:       rowChildren = row[childrenField]",
          "394:       isExpandTree = rowChildren && rowChildren.length && !!treeExpandedMaps[rowid]",
          "395:     }",
          "396:     rows.push(",
          "410:           },",
          "422:     )",
          "424:     if (isExpandRow) {",
          "",
          "[Removed Lines]",
          "397:       h('tr', {",
          "398:         class: [",
          "399:           'vxe-body--row',",
          "400:           treeConfig ? `row--level-${rowLevel}` : '',",
          "401:           {",
          "402:             'row--stripe': stripe && ($xeTable.getVTRowIndex(row) + 1) % 2 === 0,",
          "403:             'is--new': isNewRow,",
          "404:             'is--expand-row': isExpandRow,",
          "405:             'is--expand-tree': isExpandTree,",
          "406:             'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),",
          "407:             'row--radio': radioOpts.highlight && $xeTable.selectRadioRow === row,",
          "408:             'row--checked': checkboxOpts.highlight && $xeTable.isCheckedByCheckboxRow(row),",
          "409:             'row--pending': pendingRowList.length && !!pendingRowMaps[rowid]",
          "411:           rowClassName ? (XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName) : ''",
          "412:         ],",
          "413:         attrs: {",
          "414:           rowid",
          "415:         },",
          "416:         style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null,",
          "417:         key: rowKey || rowOpts.useKey || rowOpts.drag || treeConfig ? rowid : $rowIndex,",
          "418:         on: trOn",
          "419:       }, tableColumn.map((column: any, $columnIndex: any) => {",
          "420:         return renderColumn(h, _vm, $xeTable, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData)",
          "421:       }))",
          "",
          "[Added Lines]",
          "398:     const trClass = [",
          "399:       'vxe-body--row',",
          "400:       treeConfig ? `row--level-${rowLevel}` : '',",
          "401:       {",
          "402:         'row--stripe': stripe && ($xeTable.getVTRowIndex(row) + 1) % 2 === 0,",
          "403:         'is--new': isNewRow,",
          "404:         'is--expand-row': isExpandRow,",
          "405:         'is--expand-tree': isExpandTree,",
          "406:         'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),",
          "407:         'row--radio': radioOpts.highlight && $xeTable.selectRadioRow === row,",
          "408:         'row--checked': checkboxOpts.highlight && $xeTable.isCheckedByCheckboxRow(row),",
          "409:         'row--pending': pendingRowList.length && !!pendingRowMaps[rowid]",
          "410:       },",
          "411:       rowClassName ? (XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName) : ''",
          "412:     ]",
          "413:     const tdVNs = tableColumn.map((column: any, $columnIndex: any) => {",
          "414:       return renderColumn(h, _vm, $xeTable, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData)",
          "415:     })",
          "417:       columnOpts.drag",
          "418:         ? h('transition-group', {",
          "419:           props: {",
          "420:             tag: 'tr',",
          "421:             name: `vxe-header--col-list${isDragColMove ? '' : '-disabled'}`",
          "423:           class: trClass,",
          "424:           attrs: {",
          "425:             rowid",
          "426:           },",
          "427:           style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null,",
          "428:           key: rowKey || rowOpts.useKey || rowOpts.drag || treeConfig ? rowid : $rowIndex,",
          "429:           nativeOn: trOn",
          "430:         }, tdVNs)",
          "431:         : h('tr', {",
          "432:           class: trClass,",
          "433:           attrs: {",
          "434:             rowid",
          "435:           },",
          "436:           style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null,",
          "437:           key: rowKey || rowOpts.useKey || rowOpts.drag || treeConfig ? rowid : $rowIndex,",
          "438:           on: trOn",
          "439:         }, tdVNs)",
          "",
          "---------------"
        ],
        "packages/table/src/cell.ts||packages/table/src/cell.ts": [
          "File: packages/table/src/cell.ts -> packages/table/src/cell.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import XEUtils from 'xe-utils'",
          "3: import { VxeUI } from '../../ui'",
          "4: import { getFuncText, isEnableConf, formatText, eqEmptyValue } from '../../ui/src/utils'",
          "",
          "[Removed Lines]",
          "1: import { CreateElement } from 'vue'",
          "",
          "[Added Lines]",
          "1: import { CreateElement, VNode } from 'vue'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6: import { createColumn, getRowid } from './util'",
          "7: import { getSlotVNs } from '../../ui/src/vn'",
          "9: const { getI18n, getIcon, renderer, formats, renderEmptyElement } = VxeUI",
          "11: function renderTitlePrefixIcon (h: CreateElement, params: any) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import type { VxeTableDefines } from '../../../types'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: function renderCellDragIcon (h: CreateElement, params: any) {",
          "52:   const { $table } = params",
          "56:   return h('span', {",
          "57:     key: 'dg',",
          "58:     class: ['vxe-cell--drag-handle', {",
          "",
          "[Removed Lines]",
          "53:   const dragOpts = $table.computeDragOpts",
          "54:   const { rowIcon, rowDisabledMethod } = dragOpts",
          "55:   const isDisabled = rowDisabledMethod && rowDisabledMethod(params)",
          "",
          "[Added Lines]",
          "55:   const tableProps = $table",
          "56:   const { dragConfig } = tableProps",
          "57:   const rowDragOpts = $table.computeRowDragOpts",
          "58:   const { icon, disabledMethod } = rowDragOpts",
          "59:   const rDisabledMethod = disabledMethod || (dragConfig ? dragConfig.rowDisabledMethod : null)",
          "60:   const isDisabled = rDisabledMethod && rDisabledMethod(params)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:     }",
          "69:   }, [",
          "70:     h('i', {",
          "72:     })",
          "73:   ])",
          "74: }",
          "76: function renderCellBaseVNs (h: CreateElement, params: any, content: any) {",
          "78:   const { dragSort } = column",
          "79:   const tableProps = $table",
          "81:   const rowOpts = $table.computeRowOpts",
          "84:   const vns: any[] = XEUtils.isArray(content) ? content : [content]",
          "86:     if (!treeConfig || !level) {",
          "87:       vns.unshift(",
          "88:         renderCellDragIcon(h, params)",
          "",
          "[Removed Lines]",
          "71:       class: rowIcon || getIcon().TABLE_DRAG_ROW",
          "77:   const { $table, column, row, level } = params",
          "80:   const { treeConfig } = tableProps",
          "82:   const dragOpts = $table.computeDragOpts",
          "83:   const { showRowIcon, rowVisibleMethod } = dragOpts",
          "85:   if (dragSort && rowOpts.drag && (showRowIcon && (!rowVisibleMethod || rowVisibleMethod({ row, column })))) {",
          "",
          "[Added Lines]",
          "76:       class: icon || (dragConfig ? dragConfig.rowIcon : '') || getIcon().TABLE_DRAG_ROW",
          "82:   const { $table, column, level } = params",
          "85:   const { treeConfig, dragConfig } = tableProps",
          "87:   const rowDragOpts = $table.computeRowDragOpts",
          "88:   const { showIcon, visibleMethod } = rowDragOpts",
          "89:   const rVisibleMethod = visibleMethod || (dragConfig ? dragConfig.rowVisibleMethod : null)",
          "91:   if (dragSort && rowOpts.drag && ((showIcon || (dragConfig ? dragConfig.showRowIcon : false)) && (!rVisibleMethod || rVisibleMethod(params)))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:   return vns",
          "93: }",
          "95: function renderTitleContent (h: CreateElement, params: any, content: any) {",
          "96:   const { $table, column } = params",
          "97:   const { type, showHeaderOverflow } = column",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: function renderHeaderCellDragIcon (h: CreateElement, params: VxeTableDefines.CellRenderHeaderParams) {",
          "102:   const { $table, column } = params",
          "103:   const columnOpts = $table.computeColumnOpts",
          "104:   const columnDragOpts = $table.computeColumnDragOpts",
          "105:   const { showIcon, icon, visibleMethod, disabledMethod } = columnDragOpts",
          "106:   const isDisabled = disabledMethod && disabledMethod(params)",
          "107:   if (columnOpts.drag && showIcon && (!visibleMethod || visibleMethod(params))) {",
          "108:     if (!(column.fixed || column.parentId)) {",
          "109:       return h('span', {",
          "110:         key: 'dg',",
          "111:         class: ['vxe-cell--drag-handle', {",
          "112:           'is--disabled': isDisabled",
          "113:         }],",
          "114:         on: {",
          "115:           mousedown (evnt: MouseEvent) {",
          "116:             if (!isDisabled) {",
          "117:               $table.handleHeaderCellDragMousedownEvent(evnt, params)",
          "118:             }",
          "119:           },",
          "120:           mouseup: $table.handleHeaderCellDragMouseupEvent",
          "121:         }",
          "122:       }, [",
          "123:         h('i', {",
          "124:           class: icon || getIcon().TABLE_DRAG_COLUMN",
          "125:         })",
          "126:       ])",
          "127:     }",
          "128:   }",
          "129:   return renderEmptyElement($table)",
          "130: }",
          "132: function renderHeaderCellBaseVNs (h: CreateElement, params: VxeTableDefines.CellRenderHeaderParams, content: VNode | VNode[]) {",
          "133:   const vns = [",
          "134:     renderTitlePrefixIcon(h, params),",
          "135:     renderHeaderCellDragIcon(h, params),",
          "136:     ...(XEUtils.isArray(content) ? content : [content]),",
          "137:     renderTitleSuffixIcon(h, params)",
          "138:   ]",
          "139:   return vns",
          "140: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "271:     return renderTitleContent(h, params, formatText(column.getTitle(), 1))",
          "272:   },",
          "273:   renderDefaultHeader (h: CreateElement, params: any) {",
          "275:   },",
          "276:   renderDefaultCell (h: CreateElement, params: any) {",
          "277:     const { $table, row, column } = params",
          "",
          "[Removed Lines]",
          "274:     return renderTitlePrefixIcon(h, params).concat(Cell.renderHeaderTitle(h, params)).concat(renderTitleSuffixIcon(h, params))",
          "",
          "[Added Lines]",
          "321:     return renderHeaderCellBaseVNs(h, params, Cell.renderHeaderTitle(h, params))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "380:   },",
          "385:   renderSeqHeader (h: CreateElement, params: any) {",
          "386:     const { $table, column } = params",
          "387:     const { slots } = column",
          "389:   },",
          "390:   renderSeqCell (h: CreateElement, params: any) {",
          "391:     const { $table, column } = params",
          "",
          "[Removed Lines]",
          "388:     return renderTitleContent(h, params, slots && slots.header ? $table.callSlot(slots.header, params, h) : formatText(column.getTitle(), 1))",
          "",
          "[Added Lines]",
          "435:     return renderHeaderCellBaseVNs(h, params, renderTitleContent(h, params, slots && slots.header ? $table.callSlot(slots.header, params, h) : formatText(column.getTitle(), 1)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "412:     const { slots } = column",
          "413:     const headerSlot = slots ? slots.header : null",
          "414:     const titleSlot = slots ? slots.title : null",
          "422:   },",
          "423:   renderRadioCell (h: CreateElement, params: any) {",
          "424:     const { $table, column, isHidden } = params",
          "",
          "[Removed Lines]",
          "415:     return renderTitleContent(h, params, headerSlot",
          "416:       ? $table.callSlot(headerSlot, params, h)",
          "417:       : [",
          "418:           h('span', {",
          "419:             class: 'vxe-radio--label'",
          "420:           }, titleSlot ? $table.callSlot(titleSlot, params, h) : formatText(column.getTitle(), 1))",
          "421:         ])",
          "",
          "[Added Lines]",
          "462:     return renderHeaderCellBaseVNs(h, params,",
          "463:       renderTitleContent(h, params, headerSlot",
          "464:         ? $table.callSlot(headerSlot, params, h)",
          "465:         : [",
          "466:             h('span', {",
          "467:               class: 'vxe-radio--label'",
          "468:             }, titleSlot ? $table.callSlot(titleSlot, params, h) : formatText(column.getTitle(), 1))",
          "469:           ])",
          "470:     )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "500:     }",
          "501:     const checkboxParams = { ...params, checked: isAllCheckboxSelected, disabled: isAllCheckboxDisabled, indeterminate: isAllCheckboxIndeterminate }",
          "502:     if (headerSlot) {",
          "504:     }",
          "505:     if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {",
          "507:         h('span', {",
          "508:           class: 'vxe-checkbox--label'",
          "509:         }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)",
          "511:     }",
          "524:         h('span', {",
          "535:   },",
          "536:   renderCheckboxCell (h: CreateElement, params: any) {",
          "537:     const { $table, row, column, isHidden } = params",
          "",
          "[Removed Lines]",
          "503:       return renderTitleContent(h, checkboxParams, $table.callSlot(headerSlot, checkboxParams, h))",
          "506:       return renderTitleContent(h, checkboxParams, [",
          "510:       ])",
          "512:     return renderTitleContent(h, checkboxParams, [",
          "513:       h('span', {",
          "514:         class: ['vxe-cell--checkbox', {",
          "515:           'is--checked': isAllCheckboxSelected,",
          "516:           'is--disabled': isAllCheckboxDisabled,",
          "517:           'is--indeterminate': isAllCheckboxIndeterminate",
          "518:         }],",
          "519:         attrs: {",
          "520:           title: getI18n('vxe.table.allTitle')",
          "521:         },",
          "522:         on",
          "523:       }, [",
          "525:           class: ['vxe-checkbox--icon', isAllCheckboxIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllCheckboxSelected ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "526:         })",
          "527:       ].concat(titleSlot || headerTitle",
          "528:         ? [",
          "529:             h('span', {",
          "530:               class: 'vxe-checkbox--label'",
          "531:             }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)",
          "532:           ]",
          "533:         : []))",
          "534:     ])",
          "",
          "[Added Lines]",
          "552:       return renderHeaderCellBaseVNs(h, params, renderTitleContent(h, checkboxParams, $table.callSlot(headerSlot, checkboxParams, h)))",
          "555:       return renderHeaderCellBaseVNs(h, params, renderTitleContent(h, checkboxParams, [",
          "559:       ]))",
          "561:     return renderHeaderCellBaseVNs(h, params,",
          "562:       renderTitleContent(h, checkboxParams, [",
          "564:           class: ['vxe-cell--checkbox', {",
          "565:             'is--checked': isAllCheckboxSelected,",
          "566:             'is--disabled': isAllCheckboxDisabled,",
          "567:             'is--indeterminate': isAllCheckboxIndeterminate",
          "568:           }],",
          "569:           attrs: {",
          "570:             title: getI18n('vxe.table.allTitle')",
          "571:           },",
          "572:           on",
          "573:         }, [",
          "574:           h('span', {",
          "575:             class: ['vxe-checkbox--icon', isAllCheckboxIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllCheckboxSelected ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]",
          "576:           })",
          "577:         ].concat(titleSlot || headerTitle",
          "578:           ? [",
          "579:               h('span', {",
          "580:                 class: 'vxe-checkbox--label'",
          "581:               }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)",
          "582:             ]",
          "583:           : []))",
          "584:       ])",
          "585:     )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "750:   renderSortAndFilterHeader (h: CreateElement, params: any) {",
          "754:   },",
          "759:   renderSortHeader (h: CreateElement, params: any) {",
          "761:   },",
          "762:   renderSortIcon (h: CreateElement, params: any) {",
          "763:     const { $table, column } = params",
          "",
          "[Removed Lines]",
          "751:     return Cell.renderDefaultHeader(h, params)",
          "752:       .concat(Cell.renderSortIcon(h, params))",
          "753:       .concat(Cell.renderFilterIcon(h, params))",
          "760:     return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params))",
          "",
          "[Added Lines]",
          "802:     return renderHeaderCellBaseVNs(h, params, Cell.renderHeaderTitle(h, params).concat(Cell.renderSortIcon(h, params)))",
          "809:     return renderHeaderCellBaseVNs(h, params, Cell.renderHeaderTitle(h, params).concat(Cell.renderSortIcon(h, params)))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "806:   renderFilterHeader (h: CreateElement, params: any) {",
          "808:   },",
          "809:   renderFilterIcon (h: CreateElement, params: any) {",
          "810:     const { $table, column, hasFilter } = params",
          "",
          "[Removed Lines]",
          "807:     return Cell.renderDefaultHeader(h, params).concat(Cell.renderFilterIcon(h, params))",
          "",
          "[Added Lines]",
          "856:     return renderHeaderCellBaseVNs(h, params, Cell.renderHeaderTitle(h, params).concat(Cell.renderFilterIcon(h, params)))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "849:         isRequired = columnRules.some((rule: any) => rule.required)",
          "850:       }",
          "851:     }",
          "868:   },",
          "870:   renderRowEdit (h: CreateElement, params: any) {",
          "",
          "[Removed Lines]",
          "852:     return (isEnableConf(editConfig)",
          "853:       ? [",
          "854:           isRequired && editOpts.showAsterisk",
          "855:             ? h('i', {",
          "856:               class: 'vxe-cell--required-icon'",
          "857:             })",
          "858:             : null,",
          "859:           isEnableConf(editRender) && editOpts.showIcon",
          "860:             ? h('i', {",
          "861:               class: ['vxe-cell--edit-icon', editOpts.icon || getIcon().TABLE_EDIT]",
          "862:             })",
          "863:             : null",
          "864:         ]",
          "865:       : []).concat(Cell.renderDefaultHeader(h, params))",
          "866:       .concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : [])",
          "867:       .concat(filters ? Cell.renderFilterIcon(h, params) : [])",
          "",
          "[Added Lines]",
          "901:     let editIconVNs: VNode[] = []",
          "902:     if (isEnableConf(editConfig)) {",
          "903:       editIconVNs = [",
          "904:         isRequired && editOpts.showAsterisk",
          "905:           ? h('i', {",
          "906:             class: 'vxe-cell--required-icon'",
          "907:           })",
          "908:           : renderEmptyElement($table),",
          "909:         isEnableConf(editRender) && editOpts.showIcon",
          "910:           ? h('i', {",
          "911:             class: ['vxe-cell--edit-icon', editOpts.icon || getIcon().TABLE_EDIT]",
          "912:           })",
          "913:           : renderEmptyElement($table)",
          "914:       ]",
          "915:     }",
          "916:     return renderHeaderCellBaseVNs(h, params,",
          "917:       editIconVNs.concat(Cell.renderHeaderTitle(h, params))",
          "918:         .concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : [])",
          "919:         .concat(filters ? Cell.renderFilterIcon(h, params) : [])",
          "920:     )",
          "",
          "---------------"
        ],
        "packages/table/src/footer.ts||packages/table/src/footer.ts": [
          "File: packages/table/src/footer.ts -> packages/table/src/footer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { getClass } from '../../ui/src/utils'",
          "5: import { updateCellTitle, setScrollLeft } from '../../ui/src/dom'",
          "7: const renderType = 'footer'",
          "9: const { renderer } = VxeUI",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import type { VxeTableDefines } from '../../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   }",
          "23: }",
          "25: export default {",
          "26:   name: 'VxeTableFooter',",
          "27:   props: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: function renderRows (h: CreateElement, _vm: any, tableColumn: VxeTableDefines.ColumnInfo[], footerTableData: any[], row: any, $rowIndex: number, _rowIndex: number) {",
          "28:   const { $parent: $xetable, fixedType } = _vm",
          "29:   const { $listeners: tableListeners, footerCellClassName, footerCellStyle, footerAlign: allFooterAlign, mergeFooterList, footerSpanMethod, align: allAlign, scrollXLoad, columnKey, columnOpts, showFooterOverflow: allColumnFooterOverflow, currentColumn, overflowX, scrollbarWidth, tooltipOpts } = $xetable",
          "31:   return tableColumn.map((column: any, $columnIndex: any) => {",
          "32:     const { type, showFooterOverflow, footerAlign, align, footerClassName, editRender, cellRender } = column",
          "33:     const renderOpts = editRender || cellRender",
          "34:     const compConf = renderOpts ? renderer.get(renderOpts.name) : null",
          "35:     const showAllTip = tooltipOpts.showAll || tooltipOpts.enabled",
          "36:     const isColGroup = column.children && column.children.length",
          "37:     const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX",
          "38:     const footOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow",
          "39:     const footAlign = footerAlign || (compConf ? compConf.tableFooterCellAlign : '') || allFooterAlign || align || (compConf ? compConf.tableCellAlign : '') || allAlign",
          "40:     let showEllipsis = footOverflow === 'ellipsis'",
          "41:     const showTitle = footOverflow === 'title'",
          "42:     const showTooltip = footOverflow === true || footOverflow === 'tooltip'",
          "43:     let hasEllipsis = showTitle || showTooltip || showEllipsis",
          "44:     const attrs: any = { colid: column.id }",
          "45:     const tfOns: any = {}",
          "46:     const columnIndex = $xetable.getColumnIndex(column)",
          "47:     const _columnIndex = $xetable.getVTColumnIndex(column)",
          "48:     const itemIndex = _columnIndex",
          "49:     const cellParams = {",
          "50:       $table: $xetable,",
          "51:       $grid: $xetable.xegrid,",
          "52:       row,",
          "53:       _rowIndex,",
          "54:       $rowIndex,",
          "55:       column,",
          "56:       columnIndex,",
          "57:       $columnIndex,",
          "58:       _columnIndex,",
          "59:       itemIndex,",
          "60:       items: row,",
          "61:       fixed: fixedType,",
          "62:       type: renderType,",
          "63:       data: footerTableData",
          "64:     }",
          "66:     if (scrollXLoad && !hasEllipsis) {",
          "67:       showEllipsis = hasEllipsis = true",
          "68:     }",
          "69:     if (showTitle || showTooltip || showAllTip) {",
          "70:       tfOns.mouseenter = (evnt: any) => {",
          "71:         if (showTitle) {",
          "72:           updateCellTitle(evnt.currentTarget, column)",
          "73:         } else if (showTooltip || showAllTip) {",
          "74:           $xetable.triggerFooterTooltipEvent(evnt, cellParams)",
          "75:         }",
          "76:       }",
          "77:     }",
          "78:     if (showTooltip || showAllTip) {",
          "79:       tfOns.mouseleave = (evnt: any) => {",
          "80:         if (showTooltip || showAllTip) {",
          "81:           $xetable.handleTargetLeaveEvent(evnt)",
          "82:         }",
          "83:       }",
          "84:     }",
          "85:     if (tableListeners['footer-cell-click']) {",
          "86:       tfOns.click = (evnt: any) => {",
          "87:         $xetable.emitEvent('footer-cell-click', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt)",
          "88:       }",
          "89:     }",
          "90:     if (tableListeners['footer-cell-dblclick']) {",
          "91:       tfOns.dblclick = (evnt: any) => {",
          "92:         $xetable.emitEvent('footer-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt)",
          "93:       }",
          "94:     }",
          "96:     if (mergeFooterList.length) {",
          "97:       const spanRest = mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex)",
          "98:       if (spanRest) {",
          "99:         const { rowspan, colspan } = spanRest",
          "100:         if (!rowspan || !colspan) {",
          "101:           return null",
          "102:         }",
          "103:         if (rowspan > 1) {",
          "104:           attrs.rowspan = rowspan",
          "105:         }",
          "106:         if (colspan > 1) {",
          "107:           attrs.colspan = colspan",
          "108:         }",
          "109:       }",
          "110:     } else if (footerSpanMethod) {",
          "112:       const { rowspan = 1, colspan = 1 } = footerSpanMethod(cellParams) || {}",
          "113:       if (!rowspan || !colspan) {",
          "114:         return null",
          "115:       }",
          "116:       if (rowspan > 1) {",
          "117:         attrs.rowspan = rowspan",
          "118:       }",
          "119:       if (colspan > 1) {",
          "120:         attrs.colspan = colspan",
          "121:       }",
          "122:     }",
          "123:     return h('td', {",
          "124:       class: ['vxe-footer--column', column.id, {",
          "125:         [`col--${footAlign}`]: footAlign,",
          "126:         [`col--${type}`]: type,",
          "127:         'col--last': $columnIndex === tableColumn.length - 1,",
          "128:         'fixed--hidden': fixedHiddenColumn,",
          "129:         'col--ellipsis': hasEllipsis,",
          "130:         'col--current': currentColumn === column",
          "131:       }, getClass(footerClassName, cellParams), getClass(footerCellClassName, cellParams)],",
          "132:       attrs,",
          "133:       style: footerCellStyle ? (XEUtils.isFunction(footerCellStyle) ? footerCellStyle(cellParams) : footerCellStyle) : null,",
          "134:       on: tfOns,",
          "135:       key: columnKey || columnOpts.useKey || columnOpts.drag ? column.id : $columnIndex",
          "136:     }, [",
          "137:       h('div', {",
          "138:         class: ['vxe-cell', {",
          "139:           'c--title': showTitle,",
          "140:           'c--tooltip': showTooltip,",
          "141:           'c--ellipsis': showEllipsis",
          "142:         }]",
          "143:       }, column.renderFooter(h, cellParams))",
          "144:     ])",
          "145:   }).concat(scrollbarWidth",
          "146:     ? [",
          "147:         h('td', {",
          "148:           key: `gr${$rowIndex}`,",
          "149:           class: 'vxe-footer--gutter col--gutter'",
          "150:         })",
          "151:       ]",
          "152:     : [])",
          "153: }",
          "155: function renderHeads (h: CreateElement, _vm: any, footerTableData: any[]) {",
          "156:   const { $parent: $xetable, fixedType, tableColumn } = _vm",
          "157:   const { footerRowClassName, footerRowStyle, isDragColMove } = $xetable",
          "158:   const columnOpts = $xetable.columnOpts",
          "160:   return footerTableData.map((row: any, $rowIndex: any) => {",
          "161:     const _rowIndex = $rowIndex",
          "162:     const rowParams = { $table: $xetable, row, _rowIndex, $rowIndex, fixed: fixedType, type: renderType }",
          "164:     if (columnOpts.drag) {",
          "165:       return h('transition-group', {",
          "166:         props: {",
          "167:           tag: 'tr',",
          "168:           name: `vxe-header--col-list${isDragColMove ? '' : '-disabled'}`,",
          "169:           class: [",
          "170:             'vxe-footer--row',",
          "171:             footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName(rowParams) : footerRowClassName : ''",
          "172:           ],",
          "173:           style: footerRowStyle ? (XEUtils.isFunction(footerRowStyle) ? footerRowStyle(rowParams) : footerRowStyle) : null",
          "174:         }",
          "175:       }, renderRows(h, _vm, tableColumn, footerTableData, row, $rowIndex, _rowIndex))",
          "176:     }",
          "177:     return h('tr', {",
          "178:       class: [",
          "179:         'vxe-footer--row',",
          "180:         footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName(rowParams) : footerRowClassName : ''",
          "181:       ],",
          "182:       style: footerRowStyle ? (XEUtils.isFunction(footerRowStyle) ? footerRowStyle(rowParams) : footerRowStyle) : null",
          "183:     }, renderRows(h, _vm, tableColumn, footerTableData, row, $rowIndex, _rowIndex))",
          "184:   })",
          "185: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   },",
          "54:   render (h: CreateElement) {",
          "55:     let { _e, $parent: $xetable, fixedType, fixedColumn, tableColumn, footerTableData } = this",
          "79:     if (fixedType) {",
          "",
          "[Removed Lines]",
          "56:     const {",
          "57:       $listeners: tableListeners,",
          "58:       tId,",
          "59:       footerRowClassName,",
          "60:       footerCellClassName,",
          "61:       footerRowStyle,",
          "62:       footerCellStyle,",
          "63:       footerAlign: allFooterAlign,",
          "64:       mergeFooterList,",
          "65:       footerSpanMethod,",
          "66:       align: allAlign,",
          "67:       scrollXLoad,",
          "68:       columnKey,",
          "69:       columnOpts,",
          "70:       showFooterOverflow: allColumnFooterOverflow,",
          "71:       currentColumn,",
          "72:       overflowX,",
          "73:       scrollbarWidth,",
          "74:       tooltipOpts,",
          "75:       visibleColumn,",
          "76:       expandColumn",
          "77:     } = $xetable",
          "",
          "[Added Lines]",
          "218:     const { tId, mergeFooterList, footerSpanMethod, scrollXLoad, showFooterOverflow: allColumnFooterOverflow, scrollbarWidth, visibleColumn, expandColumn } = $xetable",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:         h('tfoot', {",
          "141:           ref: 'tfoot'",
          "270:       ])",
          "271:     ])",
          "272:   },",
          "",
          "[Removed Lines]",
          "142:         }, footerTableData.map((list: any, _rowIndex: any) => {",
          "143:           const $rowIndex = _rowIndex",
          "144:           const rowParams = { $table: $xetable, row: list, _rowIndex, $rowIndex, fixed: fixedType, type: renderType }",
          "145:           return h('tr', {",
          "146:             class: ['vxe-footer--row', footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName(rowParams) : footerRowClassName : ''],",
          "147:             style: footerRowStyle ? (XEUtils.isFunction(footerRowStyle) ? footerRowStyle(rowParams) : footerRowStyle) : null",
          "148:           }, tableColumn.map((column: any, $columnIndex: any) => {",
          "149:             const { type, showFooterOverflow, footerAlign, align, footerClassName, editRender, cellRender } = column",
          "150:             const renderOpts = editRender || cellRender",
          "151:             const compConf = renderOpts ? renderer.get(renderOpts.name) : null",
          "152:             const showAllTip = tooltipOpts.showAll || tooltipOpts.enabled",
          "153:             const isColGroup = column.children && column.children.length",
          "154:             const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX",
          "155:             const footOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow",
          "156:             const footAlign = footerAlign || (compConf ? compConf.tableFooterCellAlign : '') || allFooterAlign || align || (compConf ? compConf.tableCellAlign : '') || allAlign",
          "157:             let showEllipsis = footOverflow === 'ellipsis'",
          "158:             const showTitle = footOverflow === 'title'",
          "159:             const showTooltip = footOverflow === true || footOverflow === 'tooltip'",
          "160:             let hasEllipsis = showTitle || showTooltip || showEllipsis",
          "161:             const attrs: any = { colid: column.id }",
          "162:             const tfOns: any = {}",
          "163:             const columnIndex = $xetable.getColumnIndex(column)",
          "164:             const _columnIndex = $xetable.getVTColumnIndex(column)",
          "165:             const itemIndex = _columnIndex",
          "166:             const cellParams = {",
          "167:               $table: $xetable,",
          "168:               $grid: $xetable.xegrid,",
          "169:               row: list,",
          "170:               _rowIndex,",
          "171:               $rowIndex,",
          "172:               column,",
          "173:               columnIndex,",
          "174:               $columnIndex,",
          "175:               _columnIndex,",
          "176:               itemIndex,",
          "177:               items: list,",
          "178:               fixed: fixedType,",
          "179:               type: renderType,",
          "180:               data: footerTableData",
          "181:             }",
          "183:             if (scrollXLoad && !hasEllipsis) {",
          "184:               showEllipsis = hasEllipsis = true",
          "185:             }",
          "186:             if (showTitle || showTooltip || showAllTip) {",
          "187:               tfOns.mouseenter = (evnt: any) => {",
          "188:                 if (showTitle) {",
          "189:                   updateCellTitle(evnt.currentTarget, column)",
          "190:                 } else if (showTooltip || showAllTip) {",
          "191:                   $xetable.triggerFooterTooltipEvent(evnt, cellParams)",
          "192:                 }",
          "193:               }",
          "194:             }",
          "195:             if (showTooltip || showAllTip) {",
          "196:               tfOns.mouseleave = (evnt: any) => {",
          "197:                 if (showTooltip || showAllTip) {",
          "198:                   $xetable.handleTargetLeaveEvent(evnt)",
          "199:                 }",
          "200:               }",
          "201:             }",
          "202:             if (tableListeners['footer-cell-click']) {",
          "203:               tfOns.click = (evnt: any) => {",
          "204:                 $xetable.emitEvent('footer-cell-click', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt)",
          "205:               }",
          "206:             }",
          "207:             if (tableListeners['footer-cell-dblclick']) {",
          "208:               tfOns.dblclick = (evnt: any) => {",
          "209:                 $xetable.emitEvent('footer-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt)",
          "210:               }",
          "211:             }",
          "213:             if (mergeFooterList.length) {",
          "214:               const spanRest = mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex)",
          "215:               if (spanRest) {",
          "216:                 const { rowspan, colspan } = spanRest",
          "217:                 if (!rowspan || !colspan) {",
          "218:                   return null",
          "219:                 }",
          "220:                 if (rowspan > 1) {",
          "221:                   attrs.rowspan = rowspan",
          "222:                 }",
          "223:                 if (colspan > 1) {",
          "224:                   attrs.colspan = colspan",
          "225:                 }",
          "226:               }",
          "227:             } else if (footerSpanMethod) {",
          "229:               const { rowspan = 1, colspan = 1 } = footerSpanMethod(cellParams) || {}",
          "230:               if (!rowspan || !colspan) {",
          "231:                 return null",
          "232:               }",
          "233:               if (rowspan > 1) {",
          "234:                 attrs.rowspan = rowspan",
          "235:               }",
          "236:               if (colspan > 1) {",
          "237:                 attrs.colspan = colspan",
          "238:               }",
          "239:             }",
          "240:             return h('td', {",
          "241:               class: ['vxe-footer--column', column.id, {",
          "242:                 [`col--${footAlign}`]: footAlign,",
          "243:                 [`col--${type}`]: type,",
          "244:                 'col--last': $columnIndex === tableColumn.length - 1,",
          "245:                 'fixed--hidden': fixedHiddenColumn,",
          "246:                 'col--ellipsis': hasEllipsis,",
          "247:                 'col--current': currentColumn === column",
          "248:               }, getClass(footerClassName, cellParams), getClass(footerCellClassName, cellParams)],",
          "249:               attrs,",
          "250:               style: footerCellStyle ? (XEUtils.isFunction(footerCellStyle) ? footerCellStyle(cellParams) : footerCellStyle) : null,",
          "251:               on: tfOns,",
          "252:               key: columnKey || columnOpts.useKey ? column.id : $columnIndex",
          "253:             }, [",
          "254:               h('div', {",
          "255:                 class: ['vxe-cell', {",
          "256:                   'c--title': showTitle,",
          "257:                   'c--tooltip': showTooltip,",
          "258:                   'c--ellipsis': showEllipsis",
          "259:                 }]",
          "260:               }, column.renderFooter(h, cellParams))",
          "261:             ])",
          "262:           }).concat(scrollbarWidth",
          "263:             ? [",
          "264:                 h('td', {",
          "265:                   class: 'vxe-footer--gutter col--gutter'",
          "266:                 })",
          "267:               ]",
          "268:             : []))",
          "269:         }))",
          "",
          "[Added Lines]",
          "283:         }, renderHeads(h, this, footerTableData))",
          "",
          "---------------"
        ],
        "packages/table/src/header.ts||packages/table/src/header.ts": [
          "File: packages/table/src/header.ts -> packages/table/src/header.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { getOffsetPos, hasClass, addClass, removeClass } from '../../ui/src/dom'",
          "6: import { convertHeaderColumnToRows, getColReMinWidth } from './util'",
          "8: const { renderer } = VxeUI",
          "10: const cellType = 'header'",
          "12: export default {",
          "13:   name: 'VxeTableHeader',",
          "14:   props: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import type { VxeTableDefines } from '../../../types'",
          "14: const renderRows = (h: CreateElement, _vm: any, cols: VxeTableDefines.ColumnInfo[], $rowIndex: number) => {",
          "15:   const { $parent: $xetable, fixedType } = _vm",
          "16:   const { $listeners: tableListeners, resizable: allResizable, border, columnKey, headerCellClassName, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, highlightCurrentColumn, currentColumn, scrollXLoad, overflowX, scrollbarWidth, sortOpts, mouseConfig, columnOpts } = $xetable",
          "18:   return cols.map((column: any, $columnIndex: any) => {",
          "19:     const { type, showHeaderOverflow, headerAlign, align, headerClassName, editRender, cellRender } = column",
          "21:     const colid = column.id",
          "22:     const renderOpts = editRender || cellRender",
          "23:     const compConf = renderOpts ? renderer.get(renderOpts.name) : null",
          "24:     const isColGroup = column.children && column.children.length",
          "25:     const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX",
          "26:     const headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow",
          "27:     const headAlign = headerAlign || (compConf ? compConf.tableHeaderCellAlign : '') || allHeaderAlign || align || (compConf ? compConf.tableCellAlign : '') || allAlign",
          "28:     let showEllipsis = headOverflow === 'ellipsis'",
          "29:     const showTitle = headOverflow === 'title'",
          "30:     const showTooltip = headOverflow === true || headOverflow === 'tooltip'",
          "31:     let hasEllipsis = showTitle || showTooltip || showEllipsis",
          "32:     const thOns: any = {}",
          "33:     const hasFilter = column.filters && column.filters.some((item: any) => item.checked)",
          "34:     const columnIndex = $xetable.getColumnIndex(column)",
          "35:     const _columnIndex = $xetable.getVTColumnIndex(column)",
          "36:     const params = { $table: $xetable, $grid: $xetable.xegrid, $rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: cellType, isHidden: fixedHiddenColumn, hasFilter }",
          "38:     if (scrollXLoad && !hasEllipsis) {",
          "39:       showEllipsis = hasEllipsis = true",
          "40:     }",
          "41:     if (columnOpts.isCurrent || highlightCurrentColumn || tableListeners['header-cell-click'] || sortOpts.trigger === 'cell') {",
          "42:       thOns.click = (evnt: any) => $xetable.triggerHeaderCellClickEvent(evnt, params)",
          "43:     }",
          "44:     if (tableListeners['header-cell-dblclick']) {",
          "45:       thOns.dblclick = (evnt: any) => $xetable.triggerHeaderCellDblclickEvent(evnt, params)",
          "46:     }",
          "48:     if (mouseConfig) {",
          "49:       thOns.mousedown = (evnt: any) => $xetable.triggerHeaderCellMousedownEvent(evnt, params)",
          "50:     }",
          "52:     if (columnOpts.drag && !column.parentId) {",
          "53:       thOns.dragstart = $xetable.handleHeaderCellDragDragstartEvent",
          "54:       thOns.dragend = $xetable.handleHeaderCellDragDragendEvent",
          "55:       thOns.dragover = $xetable.handleHeaderCellDragDragoverEvent",
          "56:     }",
          "57:     return h('th', {",
          "58:       class: ['vxe-header--column', colid, {",
          "59:         [`col--${headAlign}`]: headAlign,",
          "60:         [`col--${type}`]: type,",
          "61:         'col--last': $columnIndex === cols.length - 1,",
          "62:         'col--fixed': column.fixed,",
          "63:         'col--group': isColGroup,",
          "64:         'col--ellipsis': hasEllipsis,",
          "65:         'fixed--hidden': fixedHiddenColumn,",
          "66:         'is--sortable': column.sortable,",
          "67:         'col--filter': !!column.filters,",
          "68:         'is--filter-active': hasFilter,",
          "69:         'col--current': currentColumn === column",
          "70:       }, getClass(headerClassName, params), getClass(headerCellClassName, params)],",
          "71:       attrs: {",
          "72:         colid,",
          "73:         colspan: column.colSpan > 1 ? column.colSpan : null,",
          "74:         rowspan: column.rowSpan > 1 ? column.rowSpan : null",
          "75:       },",
          "76:       style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null,",
          "77:       on: thOns,",
          "78:       key: columnKey || columnOpts.useKey || columnOpts.drag || isColGroup ? colid : $columnIndex",
          "79:     }, [",
          "80:       h('div', {",
          "81:         class: ['vxe-cell', {",
          "82:           'c--title': showTitle,",
          "83:           'c--tooltip': showTooltip,",
          "84:           'c--ellipsis': showEllipsis",
          "85:         }]",
          "86:       }, column.renderHeader(h, params)),",
          "90:       !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable))",
          "91:         ? h('div', {",
          "92:           class: ['vxe-resizable', {",
          "93:             'is--line': !border || border === 'none'",
          "94:           }],",
          "95:           on: {",
          "96:             mousedown: (evnt: any) => _vm.resizeMousedown(evnt, params)",
          "97:           }",
          "98:         })",
          "99:         : null",
          "100:     ])",
          "101:   }).concat(scrollbarWidth",
          "102:     ? [",
          "103:         h('th', {",
          "104:           key: `gr${$rowIndex}`,",
          "105:           class: 'vxe-header--gutter col--gutter'",
          "106:         })",
          "107:       ]",
          "108:     : [])",
          "109: }",
          "111: function renderHeads (h: CreateElement, _vm: any, headerGroups: any[]) {",
          "112:   const { $parent: $xetable } = _vm",
          "113:   const tableProps = $xetable",
          "115:   const { fixedType } = _vm",
          "116:   const { headerRowClassName, headerRowStyle } = tableProps",
          "117:   const { isDragColMove } = $xetable",
          "118:   const columnOpts = $xetable.columnOpts",
          "120:   return headerGroups.map((cols: any, $rowIndex: any) => {",
          "121:     const params = { $table: $xetable, $rowIndex, fixed: fixedType, type: cellType }",
          "123:     if (columnOpts.drag) {",
          "124:       return h('transition-group', {",
          "125:         props: {",
          "126:           tag: 'tr',",
          "127:           name: `vxe-header--col-list${isDragColMove ? '' : '-disabled'}`,",
          "128:           class: [",
          "129:             'vxe-header--row',",
          "130:             headerRowClassName ? XEUtils.isFunction(headerRowClassName) ? headerRowClassName(params) : headerRowClassName : ''",
          "131:           ],",
          "132:           style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle(params) : headerRowStyle) : null",
          "133:         }",
          "134:       }, renderRows(h, _vm, cols, $rowIndex))",
          "135:     }",
          "136:     return h('tr', {",
          "137:       class: [",
          "138:         'vxe-header--row',",
          "139:         headerRowClassName ? XEUtils.isFunction(headerRowClassName) ? headerRowClassName(params) : headerRowClassName : ''",
          "140:       ],",
          "141:       style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle(params) : headerRowStyle) : null",
          "142:     }, renderRows(h, _vm, cols, $rowIndex))",
          "143:   })",
          "144: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   },",
          "57:   render (h: CreateElement) {",
          "58:     const { _e, $parent: $xetable, fixedType, headerColumn, tableColumn, fixedColumn } = this",
          "60:     let headerGroups = headerColumn",
          "61:     let renderColumnList = tableColumn",
          "62:     if (isGroup) {",
          "",
          "[Removed Lines]",
          "59:     const { $listeners: tableListeners, tId, isGroup, visibleColumn, resizable: allResizable, border, columnKey, headerRowClassName, headerCellClassName, headerRowStyle, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, highlightCurrentColumn, currentColumn, scrollXLoad, overflowX, scrollbarWidth, sortOpts, mouseConfig, columnOpts } = $xetable",
          "",
          "[Added Lines]",
          "193:     const { tId, isGroup, visibleColumn, showHeaderOverflow: allColumnHeaderOverflow, scrollXLoad, scrollbarWidth } = $xetable",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:         h('thead', {",
          "120:           ref: 'thead'",
          "210:       ]),",
          "",
          "[Removed Lines]",
          "121:         }, headerGroups.map((cols: any, $rowIndex: any) => {",
          "122:           return h('tr', {",
          "123:             class: ['vxe-header--row', headerRowClassName ? XEUtils.isFunction(headerRowClassName) ? headerRowClassName({ $table: $xetable, $rowIndex, fixed: fixedType, type: cellType }) : headerRowClassName : ''],",
          "124:             style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle({ $table: $xetable, $rowIndex, fixed: fixedType, type: cellType }) : headerRowStyle) : null",
          "125:           }, cols.map((column: any, $columnIndex: any) => {",
          "126:             const { type, showHeaderOverflow, headerAlign, align, headerClassName, editRender, cellRender } = column",
          "128:             const colid = column.id",
          "129:             const renderOpts = editRender || cellRender",
          "130:             const compConf = renderOpts ? renderer.get(renderOpts.name) : null",
          "131:             const isColGroup = column.children && column.children.length",
          "132:             const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX",
          "133:             const headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow",
          "134:             const headAlign = headerAlign || (compConf ? compConf.tableHeaderCellAlign : '') || allHeaderAlign || align || (compConf ? compConf.tableCellAlign : '') || allAlign",
          "135:             let showEllipsis = headOverflow === 'ellipsis'",
          "136:             const showTitle = headOverflow === 'title'",
          "137:             const showTooltip = headOverflow === true || headOverflow === 'tooltip'",
          "138:             let hasEllipsis = showTitle || showTooltip || showEllipsis",
          "139:             const thOns: any = {}",
          "140:             const hasFilter = column.filters && column.filters.some((item: any) => item.checked)",
          "141:             const columnIndex = $xetable.getColumnIndex(column)",
          "142:             const _columnIndex = $xetable.getVTColumnIndex(column)",
          "143:             const params = { $table: $xetable, $grid: $xetable.xegrid, $rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: cellType, isHidden: fixedHiddenColumn, hasFilter }",
          "145:             if (scrollXLoad && !hasEllipsis) {",
          "146:               showEllipsis = hasEllipsis = true",
          "147:             }",
          "148:             if (columnOpts.isCurrent || highlightCurrentColumn || tableListeners['header-cell-click'] || sortOpts.trigger === 'cell') {",
          "149:               thOns.click = (evnt: any) => $xetable.triggerHeaderCellClickEvent(evnt, params)",
          "150:             }",
          "151:             if (tableListeners['header-cell-dblclick']) {",
          "152:               thOns.dblclick = (evnt: any) => $xetable.triggerHeaderCellDblclickEvent(evnt, params)",
          "153:             }",
          "155:             if (mouseConfig) {",
          "156:               thOns.mousedown = (evnt: any) => $xetable.triggerHeaderCellMousedownEvent(evnt, params)",
          "157:             }",
          "158:             return h('th', {",
          "159:               class: ['vxe-header--column', colid, {",
          "160:                 [`col--${headAlign}`]: headAlign,",
          "161:                 [`col--${type}`]: type,",
          "162:                 'col--last': $columnIndex === cols.length - 1,",
          "163:                 'col--fixed': column.fixed,",
          "164:                 'col--group': isColGroup,",
          "165:                 'col--ellipsis': hasEllipsis,",
          "166:                 'fixed--hidden': fixedHiddenColumn,",
          "167:                 'is--sortable': column.sortable,",
          "168:                 'col--filter': !!column.filters,",
          "169:                 'is--filter-active': hasFilter,",
          "170:                 'col--current': currentColumn === column",
          "171:               }, getClass(headerClassName, params), getClass(headerCellClassName, params)],",
          "172:               attrs: {",
          "173:                 colid,",
          "174:                 colspan: column.colSpan > 1 ? column.colSpan : null,",
          "175:                 rowspan: column.rowSpan > 1 ? column.rowSpan : null",
          "176:               },",
          "177:               style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null,",
          "178:               on: thOns,",
          "179:               key: columnKey || columnOpts.useKey || isColGroup ? colid : $columnIndex",
          "180:             }, [",
          "181:               h('div', {",
          "182:                 class: ['vxe-cell', {",
          "183:                   'c--title': showTitle,",
          "184:                   'c--tooltip': showTooltip,",
          "185:                   'c--ellipsis': showEllipsis",
          "186:                 }]",
          "187:               }, column.renderHeader(h, params)),",
          "191:               !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable))",
          "192:                 ? h('div', {",
          "193:                   class: ['vxe-resizable', {",
          "194:                     'is--line': !border || border === 'none'",
          "195:                   }],",
          "196:                   on: {",
          "197:                     mousedown: (evnt: any) => this.resizeMousedown(evnt, params)",
          "198:                   }",
          "199:                 })",
          "200:                 : null",
          "201:             ])",
          "202:           }).concat(scrollbarWidth",
          "203:             ? [",
          "204:                 h('th', {",
          "205:                   class: 'vxe-header--gutter col--gutter'",
          "206:                 })",
          "207:               ]",
          "208:             : []))",
          "209:         }))",
          "",
          "[Added Lines]",
          "255:         }, renderHeads(h, this, headerGroups))",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:   }",
          "351: }",
          "355:   if (el) {",
          "359:     })",
          "360:   }",
          "361: }",
          "365:   if (el) {",
          "371:     })",
          "372:   }",
          "373: }",
          "379:   }",
          "381:   if (!el) {",
          "382:     return",
          "383:   }",
          "384:   if (rdTipEl) {",
          "386:     rdTipEl.style.display = 'block'",
          "387:     rdTipEl.style.top = `${Math.min(el.clientHeight - el.scrollTop - rdTipEl.clientHeight, evnt.clientY - wrapperRect.y)}px`",
          "388:     rdTipEl.style.left = `${Math.min(el.clientWidth - el.scrollLeft - rdTipEl.clientWidth - 16, evnt.clientX - wrapperRect.x)}px`",
          "389:   }",
          "390: }",
          "394:   if (rdTipEl) {",
          "395:     rdTipEl.style.display = ''",
          "396:   }",
          "412:   }",
          "414: }",
          "416: const Methods = {",
          "",
          "[Removed Lines]",
          "353: function clearRowDropTarget ($xeTable: any) {",
          "354:   const el = $xeTable.$el",
          "356:     const clss = 'row--drag-active-target'",
          "357:     XEUtils.arrayEach(el.querySelectorAll(`.${clss}`), (elem) => {",
          "358:       removeClass(elem, clss)",
          "363: function updateRowDropTarget ($xeTable: any, row: any, dragPos: string) {",
          "364:   const el = $xeTable.$el",
          "366:     const clss = 'row--drag-active-target'",
          "367:     const rowid = getRowid($xeTable, row)",
          "368:     XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${rowid}\"]`), (elem: any) => {",
          "369:       addClass(elem, clss)",
          "370:       elem.setAttribute('drag-pos', dragPos)",
          "375: function showRowDropTip (evnt: DragEvent | MouseEvent, $xeTable: any) {",
          "376:   const rdTipEl = $xeTable.$refs.refRowDragTipElem as HTMLDivElement",
          "377:   if (!rdTipEl) {",
          "378:     return",
          "380:   const el = $xeTable.$el",
          "385:     const wrapperRect = el.getBoundingClientRect()",
          "392: const hideRowDropTip = ($xeTable: any) => {",
          "393:   const rdTipEl = $xeTable.$refs.refRowDragTipElem as HTMLDivElement",
          "397: }",
          "399: const updateRowDropTipContent = ($xeTable: any, tdEl: HTMLElement) => {",
          "400:   const reactData = $xeTable",
          "402:   const { dragRow } = reactData",
          "403:   const dragOpts = $xeTable.computeDragOpts",
          "404:   const { rowTooltipMethod } = dragOpts",
          "405:   let tipContent = ''",
          "406:   if (rowTooltipMethod) {",
          "407:     tipContent = `${rowTooltipMethod({",
          "408:       row: dragRow",
          "409:     }) || ''}`",
          "410:   } else {",
          "411:     tipContent = getI18n('vxe.table.dragTip', [tdEl.textContent || ''])",
          "413:   reactData.dragTipText = tipContent",
          "",
          "[Added Lines]",
          "353: const updateRowDropTipContent = ($xeTable: any, tdEl: HTMLElement) => {",
          "354:   const reactData = $xeTable",
          "355:   const props = $xeTable",
          "357:   const { dragConfig } = props",
          "358:   const { dragRow } = reactData",
          "359:   const rowDragOpts = $xeTable.computeRowDragOpts",
          "360:   const { tooltipMethod } = rowDragOpts",
          "361:   const rTooltipMethod = tooltipMethod || (dragConfig ? dragConfig.rowTooltipMethod : null)",
          "362:   let tipContent = ''",
          "363:   if (rTooltipMethod) {",
          "364:     tipContent = `${rTooltipMethod({",
          "365:           row: dragRow",
          "366:         }) || ''}`",
          "367:   } else {",
          "368:     tipContent = getI18n('vxe.table.dragTip', [tdEl.textContent || ''])",
          "369:   }",
          "370:   reactData.dragTipText = tipContent",
          "371: }",
          "373: const updateColDropOrigin = ($xeTable: any, column: VxeTableDefines.ColumnInfo) => {",
          "374:   const el = $xeTable.$el as HTMLElement",
          "376:     const clss = 'col--drag-origin'",
          "377:     XEUtils.arrayEach(el.querySelectorAll(`[colid=\"${column.id}\"]`), (elem) => {",
          "378:       addClass(elem, clss)",
          "383: const clearColDropOrigin = ($xeTable: any) => {",
          "384:   const el = $xeTable.$el as HTMLElement",
          "386:     const clss = 'col--drag-origin'",
          "387:     XEUtils.arrayEach(el.querySelectorAll(`.${clss}`), (elem) => {",
          "388:       (elem as HTMLTableCellElement).draggable = false",
          "389:       removeClass(elem, clss)",
          "394: const updateColDropTipContent = ($xeTable: any, tdEl: HTMLElement) => {",
          "395:   const reactData = $xeTable",
          "397:   const { dragCol } = reactData",
          "398:   const columnDragOpts = $xeTable.computeColumnDragOpts",
          "399:   const { tooltipMethod } = columnDragOpts",
          "400:   let tipContent = ''",
          "401:   if (tooltipMethod) {",
          "402:     tipContent = `${tooltipMethod({",
          "403:       column: dragCol",
          "404:     }) || ''}`",
          "405:   } else {",
          "406:     tipContent = getI18n('vxe.table.dragTip', [tdEl.textContent || ''])",
          "408:   reactData.dragTipText = tipContent",
          "409: }",
          "411: function showDropTip ($xeTable: any, evnt: DragEvent | MouseEvent, trEl: HTMLElement | null, thEl: HTMLElement | null, dragPos: string) {",
          "412:   const reactData = $xeTable",
          "414:   const el = $xeTable.$refs.refElem as HTMLElement",
          "418:   const { scrollbarWidth, scrollbarHeight } = reactData",
          "419:   const wrapperRect = el.getBoundingClientRect()",
          "420:   if (trEl) {",
          "421:     const rdLineEl = $xeTable.$refs.refDragRowLineElem as HTMLElement",
          "422:     if (rdLineEl) {",
          "423:       const trRect = trEl.getBoundingClientRect()",
          "424:       let top = Math.max(1, trRect.y - wrapperRect.y)",
          "425:       if (dragPos === 'bottom') {",
          "426:         top = Math.min(wrapperRect.height - 1, trRect.y - wrapperRect.y + trRect.height)",
          "427:       }",
          "428:       rdLineEl.style.top = `${top}px`",
          "429:       rdLineEl.style.width = `${wrapperRect.width - scrollbarWidth}px`",
          "430:       rdLineEl.style.display = 'block'",
          "431:     }",
          "432:   } else if (thEl) {",
          "433:     const cdLineEl = $xeTable.$refs.refDragColLineElem as HTMLElement",
          "434:     if (cdLineEl) {",
          "435:       const thRect = thEl.getBoundingClientRect()",
          "436:       let left = Math.max(1, thRect.x - wrapperRect.x)",
          "437:       if (dragPos === 'right') {",
          "438:         left = Math.min(wrapperRect.width - 2, thRect.x - wrapperRect.x + thRect.width)",
          "439:       }",
          "440:       cdLineEl.style.left = `${left}px`",
          "441:       cdLineEl.style.height = `${wrapperRect.height - scrollbarHeight}px`",
          "442:       cdLineEl.style.display = 'block'",
          "443:     }",
          "444:   }",
          "445:   const rdTipEl = $xeTable.$refs.refDragTipElem as HTMLElement",
          "453: const hideDropTip = ($xeTable: any) => {",
          "454:   const rdTipEl = $xeTable.$refs.refDragTipElem as HTMLDivElement",
          "455:   const rdLineEl = $xeTable.$refs.refDragRowLineElem as HTMLDivElement",
          "456:   const cdLineEl = $xeTable.$refs.refDragColLineElem as HTMLDivElement",
          "460:   if (rdLineEl) {",
          "461:     rdLineEl.style.display = ''",
          "462:   }",
          "463:   if (cdLineEl) {",
          "464:     cdLineEl.style.display = ''",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:     editStore.removeMaps = {}",
          "580:     const sYLoad = this.updateScrollYStatus(fullData)",
          "581:     this.scrollYLoad = sYLoad",
          "583:     this.tableFullData = fullData",
          "584:     this.tableFullTreeData = treeData",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "634:     this.isDragRowMove = false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "759:     const tableFullColumn = getColumnList(collectColumn)",
          "760:     this.tableFullColumn = tableFullColumn",
          "761:     this._isLoading = true",
          "762:     this.initColumnSort()",
          "763:     return Promise.resolve(",
          "764:       this.restoreCustomStorage()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815:     this.isDragColMove = false",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3042:                     !getEventTargetNode(evnt, $el).flag",
          "3043:                 ) {",
          "3044:                   setTimeout(() => {",
          "3047:                       if (!this.isActivated && editRules && validOpts.autoClear) {",
          "3048:                         this.validErrorMaps = {}",
          "",
          "[Removed Lines]",
          "3045:                     this.clearEdit(evnt).then(() => {",
          "",
          "[Added Lines]",
          "3099:                     this.handleClearEdit(evnt).then(() => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3111:     if (isEsc) {",
          "3112:       this.preventEvent(evnt, 'event.keydown', null, () => {",
          "3113:         this.emitEvent('keydown-start', {}, evnt)",
          "3116:         } else if (actived.row || filterStore.visible || ctxMenuStore.visible) {",
          "3117:           evnt.stopPropagation()",
          "",
          "[Removed Lines]",
          "3114:         if (keyboardConfig && mouseConfig && mouseOpts.area && this.handleKeyboardEvent) {",
          "3115:           this.handleKeyboardEvent(evnt)",
          "",
          "[Added Lines]",
          "3168:         if (keyboardConfig && mouseConfig && mouseOpts.area && this.handleKeyboardCellAreaEvent) {",
          "3169:           this.handleKeyboardCellAreaEvent(evnt)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3123:             if (actived.row) {",
          "3124:               const params = actived.args",
          "3127:               if (mouseConfig && mouseOpts.selected) {",
          "3128:                 this.$nextTick(() => this.handleSelected(params, evnt))",
          "",
          "[Removed Lines]",
          "3125:               this.clearEdit(evnt)",
          "",
          "[Added Lines]",
          "3179:               this.handleClearEdit(evnt)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3180:           } else {",
          "3181:             this.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selected', 39, true, this.ctxMenuList)",
          "3182:           }",
          "3185:         } else if (keyboardConfig && isSpacebar && keyboardOpts.isChecked && selected.row && selected.column && (selected.column.type === 'checkbox' || selected.column.type === 'radio')) {",
          "3187:           evnt.preventDefault()",
          "",
          "[Removed Lines]",
          "3183:         } else if (keyboardConfig && mouseConfig && mouseOpts.area && this.handleKeyboardEvent) {",
          "3184:           this.handleKeyboardEvent(evnt)",
          "",
          "[Added Lines]",
          "3237:         } else if (keyboardConfig && mouseConfig && mouseOpts.area && this.handleKeyboardCellAreaEvent) {",
          "3238:           this.handleKeyboardCellAreaEvent(evnt)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3213:             if (actived.row) {",
          "3214:               const params = actived.args",
          "3217:               if (mouseConfig && mouseOpts.selected) {",
          "3218:                 this.$nextTick(() => this.handleSelected(params, evnt))",
          "",
          "[Removed Lines]",
          "3215:               this.clearEdit(evnt)",
          "",
          "[Added Lines]",
          "3269:               this.handleClearEdit(evnt)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4686:     const reactData = $xeTable",
          "4687:     const internalData = $xeTable",
          "4692:     const treeOpts = $xeTable.computeTreeOpts",
          "4693:     const { transform } = treeOpts",
          "4694:     const { dragRow } = reactData",
          "4695:     const { afterFullData, afterTreeFullData, tableFullData, tableFullTreeData, prevDragRow, prevDragPos } = internalData",
          "4696:     if (prevDragRow && dragRow) {",
          "4698:       if (prevDragRow !== dragRow) {",
          "4699:         Promise.resolve(",
          "4702:               oldRow: dragRow,",
          "4704:             })",
          "4705:             : true",
          "4706:         ).then((status) => {",
          "4707:           if (!status) {",
          "4708:             return",
          "4709:           }",
          "4712:           let oafIndex = -1",
          "4713:           let nafIndex = -1",
          "",
          "[Removed Lines]",
          "4689:     const { treeConfig } = props",
          "4690:     const dragOpts = $xeTable.computeDragOpts",
          "4691:     const { dragEndMethod } = dragOpts",
          "4700:           dragEndMethod",
          "4701:             ? dragEndMethod({",
          "4703:               newRow: prevDragRow",
          "4710:           const dragOffsetIndex = prevDragPos === 'bottom' ? 1 : 0",
          "",
          "[Added Lines]",
          "4746:     const { treeConfig, dragConfig } = props",
          "4747:     const rowDragOpts = $xeTable.computeRowDragOpts",
          "4748:     const { dragEndMethod } = rowDragOpts",
          "4753:     const dEndMethod = dragEndMethod || (dragConfig ? dragConfig.dragEndMethod : null)",
          "4754:     const dragOffsetIndex = prevDragPos === 'bottom' ? 1 : 0",
          "4759:           dEndMethod",
          "4760:             ? dEndMethod({",
          "4762:               newRow: prevDragRow,",
          "4763:               dragPos: prevDragPos as any,",
          "4764:               offsetIndex: dragOffsetIndex",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4747:           if (!(treeConfig && transform)) {",
          "4748:             $xeTable.updateAfterDataIndex()",
          "4749:           }",
          "4751:           $xeTable.checkSelectionStatus()",
          "4752:           if (reactData.scrollYLoad) {",
          "4753:             $xeTable.updateScrollYSpace()",
          "4754:           }",
          "4755:           $xeTable.$nextTick().then(() => {",
          "4756:             $xeTable.updateCellAreas()",
          "4758:           })",
          "4760:           $xeTable.dispatchEvent('row-dragend', {",
          "4761:             oldRow: dragRow,",
          "4762:             newRow: prevDragRow,",
          "4763:             _index: {",
          "4764:               newIndex: nafIndex,",
          "4765:               oldIndex: oafIndex",
          "",
          "[Removed Lines]",
          "4750:           $xeTable.updateFooter()",
          "4757:             return $xeTable.recalculate()",
          "",
          "[Added Lines]",
          "4816:             $xeTable.recalculate()",
          "4822:             dragPos: prevDragPos,",
          "4823:             offsetIndex: dragOffsetIndex,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4769:         })",
          "4770:       }",
          "4771:     }",
          "4773:     clearRowDropOrigin($xeTable)",
          "4775:     reactData.dragRow = null",
          "4776:     setTimeout(() => {",
          "4777:       reactData.isDragRowMove = false",
          "4778:     }, 500)",
          "",
          "[Removed Lines]",
          "4772:     hideRowDropTip($xeTable)",
          "4774:     clearRowDropTarget($xeTable)",
          "",
          "[Added Lines]",
          "4833:     hideDropTip($xeTable)",
          "4836:     reactData.dragCol = null",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4782:     const internalData = $xeTable",
          "4783:     const reactData = $xeTable",
          "4785:     const trEl = evnt.currentTarget as HTMLElement",
          "4786:     const rowid = trEl.getAttribute('rowid')",
          "4787:     const row = $xeTable.getRowById(rowid)",
          "4789:     if (row) {",
          "4790:       evnt.preventDefault()",
          "4791:       evnt.preventDefault()",
          "4792:       const { dragRow } = reactData",
          "4793:       const offsetY = evnt.clientY - trEl.getBoundingClientRect().y",
          "4794:       const dragPos = offsetY < trEl.clientHeight / 2 ? 'top' : 'bottom'",
          "4796:       internalData.prevDragRow = row",
          "4797:       internalData.prevDragPos = dragPos",
          "4798:       $xeTable.dispatchEvent('row-dragover', {",
          "4799:         oldRow: dragRow,",
          "4800:         targetRow: row,",
          "4801:         dragPos",
          "4802:       }, evnt)",
          "4803:     }",
          "4805:   },",
          "4806:   handleCellDragMousedownEvent (evnt: MouseEvent, params: any) {",
          "4807:     const $xeTable = this",
          "4808:     const reactData = $xeTable",
          "4810:     evnt.stopPropagation()",
          "4813:     const { row } = params",
          "4814:     const dragEl = evnt.currentTarget as HTMLElement",
          "4817:     reactData.isDragRowMove = false",
          "4818:     clearRowDropOrigin($xeTable)",
          "4820:       trEl.draggable = false",
          "4821:       reactData.dragRow = null",
          "4823:       return",
          "4824:     }",
          "4825:     reactData.dragRow = row",
          "4826:     trEl.draggable = true",
          "4827:     updateRowDropOrigin($xeTable, row)",
          "4829:     updateRowDropTipContent($xeTable, tdEl)",
          "4830:     $xeTable.dispatchEvent('row-dragstart', params, evnt)",
          "4831:   },",
          "",
          "[Removed Lines]",
          "4788:     clearRowDropTarget($xeTable)",
          "4795:       updateRowDropTarget($xeTable, row, dragPos)",
          "4804:     showRowDropTip(evnt, $xeTable)",
          "4811:     const dragOpts = $xeTable.computeDragOpts",
          "4812:     const { dragStartMethod } = dragOpts",
          "4815:     const tdEl = dragEl.parentNode?.parentNode as HTMLElement",
          "4816:     const trEl = tdEl.parentNode as HTMLElement",
          "4819:     if (dragStartMethod && !dragStartMethod(params)) {",
          "4822:       hideRowDropTip($xeTable)",
          "4828:     showRowDropTip(evnt, $xeTable)",
          "",
          "[Added Lines]",
          "4846:     const { dragRow } = reactData",
          "4847:     if (!dragRow) {",
          "4848:       evnt.preventDefault()",
          "4849:       return",
          "4850:     }",
          "4862:       showDropTip($xeTable, evnt, trEl, null, dragPos)",
          "4872:     const props = $xeTable",
          "4876:     const { dragConfig } = props",
          "4877:     const rowDragOpts = $xeTable.computeRowDragOpts",
          "4878:     const { dragStartMethod } = rowDragOpts",
          "4881:     const tdEl = dragEl.parentElement?.parentElement as HTMLElement",
          "4882:     const trEl = tdEl.parentElement as HTMLElement",
          "4883:     const dStartMethod = dragStartMethod || (dragConfig ? dragConfig.dragStartMethod : null)",
          "4886:     if (dStartMethod && !dStartMethod(params)) {",
          "4889:       reactData.dragCol = null",
          "4890:       hideDropTip($xeTable)",
          "4894:     reactData.dragCol = null",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4834:     const reactData = $xeTable",
          "4836:     clearRowDropOrigin($xeTable)",
          "4838:     reactData.dragRow = null",
          "4839:     reactData.isDragRowMove = false",
          "4840:   },",
          "4841:   setPendingRow (rows: any, status: any) {",
          "4842:     const pendingMaps = { ...this.pendingRowMaps }",
          "4843:     const pendingList = [...this.pendingRowList]",
          "",
          "[Removed Lines]",
          "4837:     hideRowDropTip($xeTable)",
          "",
          "[Added Lines]",
          "4905:     hideDropTip($xeTable)",
          "4907:     reactData.dragCol = null",
          "4913:   handleHeaderCellDragDragstartEvent (evnt: DragEvent) {",
          "4914:     const img = new Image()",
          "4915:     if (evnt.dataTransfer) {",
          "4916:       evnt.dataTransfer.setDragImage(img, 0, 0)",
          "4917:     }",
          "4918:   },",
          "4919:   handleHeaderCellDragDragendEvent (evnt: DragEvent) {",
          "4920:     const $xeTable = this",
          "4921:     const props = $xeTable",
          "4922:     const reactData = $xeTable",
          "4923:     const internalData = $xeTable",
          "4925:     const { mouseConfig } = props",
          "4926:     const columnDragOpts = $xeTable.computeColumnDragOpts",
          "4927:     const { dragEndMethod } = columnDragOpts",
          "4928:     const { dragCol } = reactData",
          "4929:     const { collectColumn, prevDragCol, prevDragPos } = internalData",
          "4930:     const dragOffsetIndex = prevDragPos === 'right' ? 1 : 0",
          "4931:     if (prevDragCol && dragCol) {",
          "4933:       if (prevDragCol !== dragCol) {",
          "4934:         Promise.resolve(",
          "4935:           dragEndMethod",
          "4936:             ? dragEndMethod({",
          "4937:               oldColumn: dragCol,",
          "4938:               newColumn: prevDragCol,",
          "4939:               dragPos: prevDragPos as any,",
          "4940:               offsetIndex: dragOffsetIndex",
          "4941:             })",
          "4942:             : true",
          "4943:         ).then((status) => {",
          "4944:           if (!status) {",
          "4945:             return",
          "4946:           }",
          "4948:           XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {",
          "4949:             if (!parent) {",
          "4950:               const sortIndex = index + 1",
          "4951:               column.renderSortNumber = sortIndex",
          "4952:             }",
          "4953:           })",
          "4955:           const oafIndex = XEUtils.findIndexOf(collectColumn, item => item.id === dragCol.id)",
          "4956:           const nafIndex = XEUtils.findIndexOf(collectColumn, item => item.id === prevDragCol.id) + dragOffsetIndex",
          "4958:           const newTargetCol = collectColumn[nafIndex]",
          "4959:           if (newTargetCol) {",
          "4961:             dragCol.renderSortNumber = newTargetCol.renderSortNumber",
          "4962:             newTargetCol.renderSortNumber = dragCol.renderSortNumber + 0.5",
          "4963:           } else {",
          "4965:             dragCol.renderSortNumber = collectColumn.length + 1.5",
          "4966:           }",
          "4968:           reactData.isDragColMove = true",
          "4969:           if (mouseConfig) {",
          "4970:             if ($xeTable.clearSelected) {",
          "4971:               $xeTable.clearSelected()",
          "4972:             }",
          "4973:             if ($xeTable.clearCellAreas) {",
          "4974:               $xeTable.clearCellAreas()",
          "4975:               $xeTable.clearCopyCellArea()",
          "4976:             }",
          "4977:           }",
          "4978:           $xeTable.analyColumnWidth()",
          "4979:           $xeTable.$nextTick().then(() => {",
          "4980:             $xeTable.updateCellAreas()",
          "4981:             $xeTable.refreshColumn(true)",
          "4982:           })",
          "4984:           $xeTable.dispatchEvent('column-dragend', {",
          "4985:             oldColumn: dragCol,",
          "4986:             newColumn: prevDragCol,",
          "4987:             dragPos: prevDragPos,",
          "4988:             offsetIndex: dragOffsetIndex,",
          "4989:             _index: {",
          "4990:               newIndex: nafIndex,",
          "4991:               oldIndex: oafIndex",
          "4992:             }",
          "4993:           }, evnt)",
          "4994:         }).catch(() => {",
          "4995:         })",
          "4996:       }",
          "4997:     }",
          "4998:     hideDropTip($xeTable)",
          "4999:     clearColDropOrigin($xeTable)",
          "5000:     reactData.dragRow = null",
          "5001:     reactData.dragCol = null",
          "5002:     setTimeout(() => {",
          "5003:       reactData.isDragColMove = false",
          "5004:     }, 500)",
          "5005:   },",
          "5006:   handleHeaderCellDragDragoverEvent (evnt: DragEvent) {",
          "5007:     const $xeTable = this",
          "5008:     const reactData = $xeTable",
          "5009:     const internalData = $xeTable",
          "5011:     const { dragCol } = reactData",
          "5012:     if (!dragCol) {",
          "5013:       evnt.preventDefault()",
          "5014:       return",
          "5015:     }",
          "5016:     const thEl = evnt.currentTarget as HTMLElement",
          "5017:     const colid = thEl.getAttribute('colid')",
          "5018:     const column = $xeTable.getColumnById(colid)",
          "5019:     if (column) {",
          "5020:       evnt.preventDefault()",
          "5021:       const { dragCol } = reactData",
          "5022:       const offsetX = evnt.clientX - thEl.getBoundingClientRect().x",
          "5023:       const dragPos = offsetX < thEl.clientWidth / 2 ? 'left' : 'right'",
          "5024:       internalData.prevDragCol = column",
          "5025:       internalData.prevDragPos = dragPos",
          "5026:       showDropTip($xeTable, evnt, null, thEl, dragPos)",
          "5027:       $xeTable.dispatchEvent('column-dragover', {",
          "5028:         oldColumn: dragCol,",
          "5029:         targetColumn: column,",
          "5030:         dragPos",
          "5031:       }, evnt)",
          "5032:     }",
          "5033:   },",
          "5034:   handleHeaderCellDragMousedownEvent (evnt: MouseEvent, params: any) {",
          "5035:     const $xeTable = this",
          "5036:     const reactData = $xeTable",
          "5038:     evnt.stopPropagation()",
          "5039:     const columnDragOpts = $xeTable.computeColumnDragOpts",
          "5040:     const { dragStartMethod } = columnDragOpts",
          "5041:     const { column } = params",
          "5042:     const dragEl = evnt.currentTarget as HTMLElement",
          "5043:     const thEl = dragEl.parentElement?.parentElement as HTMLElement",
          "5044:     reactData.isDragColMove = false",
          "5045:     clearColDropOrigin($xeTable)",
          "5046:     if (dragStartMethod && !dragStartMethod(params)) {",
          "5047:       thEl.draggable = false",
          "5048:       reactData.dragRow = null",
          "5049:       reactData.dragCol = null",
          "5050:       hideDropTip($xeTable)",
          "5051:       return",
          "5052:     }",
          "5053:     reactData.dragCol = column",
          "5054:     reactData.dragRow = null",
          "5055:     thEl.draggable = true",
          "5056:     updateColDropOrigin($xeTable, column)",
          "5057:     updateColDropTipContent($xeTable, thEl)",
          "5058:     $xeTable.dispatchEvent('column-dragstart', params, evnt)",
          "5059:   },",
          "5060:   handleHeaderCellDragMouseupEvent () {",
          "5061:     const $xeTable = this",
          "5062:     const reactData = $xeTable",
          "5064:     clearColDropOrigin($xeTable)",
          "5065:     hideDropTip($xeTable)",
          "5066:     reactData.dragRow = null",
          "5067:     reactData.dragCol = null",
          "5068:     reactData.isDragColMove = false",
          "5069:   },",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6313:     }",
          "6314:   },",
          "6315:   updateCellAreas () {",
          "6318:     }",
          "6319:     return this.$nextTick()",
          "6320:   },",
          "",
          "[Removed Lines]",
          "6316:     if (this.mouseConfig && this.mouseOpts.area && this.handleUpdateCellAreas) {",
          "6317:       return this.handleUpdateCellAreas()",
          "",
          "[Added Lines]",
          "6545:     if (this.mouseConfig && this.mouseOpts.area && this.handleRecalculateCellAreas) {",
          "6546:       return this.handleRecalculateCellAreas()",
          "",
          "---------------"
        ],
        "packages/table/src/props.ts||packages/table/src/props.ts": [
          "File: packages/table/src/props.ts -> packages/table/src/props.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   cellConfig: Object as PropType<VxeTablePropTypes.CellConfig>,",
          "167:   rowConfig: Object,",
          "169:   dragConfig: Object as PropType<VxeTablePropTypes.DragConfig>,",
          "171:   resizableConfig: Object,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   rowDragConfig: Object as PropType<VxeTablePropTypes.RowDragConfig>,",
          "173:   columnDragConfig: Object as PropType<VxeTablePropTypes.ColumnDragConfig>,",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   return emptyContent",
          "99: }",
          "101: function handleUupdateResize (_vm: any) {",
          "102:   const { $el } = _vm",
          "103:   if ($el && $el.clientWidth && $el.clientHeight) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: const renderDragTipContents = (h: CreateElement, $xeTable: any) => {",
          "102:   const props = $xeTable",
          "103:   const reactData = $xeTable",
          "105:   const { dragConfig } = props",
          "106:   const { dragRow, dragCol, dragTipText } = reactData",
          "107:   const columnDragOpts = $xeTable.computeColumnDragOpts",
          "108:   const rowDragOpts = $xeTable.computeRowDragOpts",
          "109:   const rowDragSlots = rowDragOpts.slots || {}",
          "110:   const rTipSlot = rowDragSlots.tip || (dragConfig && dragConfig.slots ? dragConfig.slots.rowTip : null)",
          "111:   const columnDragSlots = columnDragOpts.slots || {}",
          "112:   const cTipSlot = columnDragSlots.tip",
          "114:   if (dragRow && rTipSlot) {",
          "115:     return $xeTable.callSlot(rTipSlot, { row: dragRow }, h)",
          "116:   }",
          "117:   if (dragCol && cTipSlot) {",
          "118:     return $xeTable.callSlot(cTipSlot, { column: dragCol }, h)",
          "119:   }",
          "120:   return [h('span', dragTipText)]",
          "121: }",
          "123: const renderDragTip = (h: CreateElement, $xeTable: any) => {",
          "124:   const rowOpts = $xeTable.computeRowOpts",
          "125:   const columnOpts = $xeTable.computeColumnOpts",
          "127:   if (rowOpts.drag || columnOpts.drag) {",
          "128:     return h('div', {",
          "129:       class: 'vxe-table--drag-wrapper'",
          "130:     }, [",
          "131:       h('div', {",
          "132:         ref: 'refDragRowLineElem',",
          "133:         class: 'vxe-table--drag-row-line'",
          "134:       }),",
          "135:       h('div', {",
          "136:         ref: 'refDragColLineElem',",
          "137:         class: 'vxe-table--drag-col-line'",
          "138:       }),",
          "139:       h('div', {",
          "140:         ref: 'refDragTipElem',",
          "141:         class: 'vxe-table--drag-sort-tip'",
          "142:       }, renderDragTipContents(h, $xeTable))",
          "143:     ])",
          "144:   }",
          "145:   return renderEmptyElement($xeTable)",
          "146: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:         isHeader: false,",
          "353:         isFooter: false",
          "354:       },",
          "355:       isDragRowMove: false,",
          "356:       dragRow: null,",
          "357:       dragTipText: '',",
          "358:       _isLoading: false",
          "359:     }",
          "360:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:       scrollVMLoading: false,",
          "406:       isDragColMove: false,",
          "407:       dragCol: null,",
          "410:       _isResize: false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:     computeRowOpts () {",
          "434:       return Object.assign({}, getConfig().table.rowConfig, this.rowConfig)",
          "435:     },",
          "438:     },",
          "439:     resizeOpts () {",
          "440:       return this.computeResizeOpts",
          "",
          "[Removed Lines]",
          "436:     computeDragOpts () {",
          "437:       return Object.assign({}, getConfig().table.dragConfig, this.dragConfig)",
          "",
          "[Added Lines]",
          "489:     computeRowDragOpts () {",
          "490:       return Object.assign({}, getConfig().table.rowDragConfig, this.rowDragConfig)",
          "491:     },",
          "492:     computeColumnDragOpts () {",
          "493:       return Object.assign({}, getConfig().table.columnDragConfig, this.columnDragConfig)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "857:       if (this.rowOpts.height && !this.showOverflow) {",
          "858:         warnLog('vxe.error.notProp', ['table.show-overflow'])",
          "859:       }",
          "861:         if (this.clipConfig) {",
          "862:           warnLog('vxe.error.notProp', ['clip-config'])",
          "863:         }",
          "",
          "[Removed Lines]",
          "860:       if (!this.handleUpdateCellAreas) {",
          "",
          "[Added Lines]",
          "916:       if (!this.handleRecalculateCellAreas) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "869:           return",
          "870:         }",
          "871:       }",
          "872:       if (this.treeConfig && treeOpts.children) {",
          "873:         warnLog('vxe.error.delProp', ['tree-config.children', 'tree-config.childrenField'])",
          "874:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "928:       if (this.dragConfig) {",
          "929:         warnLog('vxe.error.delProp', ['drag-config', 'row-drag-config'])",
          "930:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1064:     const VxeUITooltipComponent = VxeUI.getComponent<VxeTooltipComponent>('VxeTooltip')",
          "1066:     const $xeTable = this",
          "1069:     const {",
          "1070:       _e,",
          "",
          "[Removed Lines]",
          "1067:     const reactData = $xeTable",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1084:       treeConfig,",
          "1085:       mouseConfig,",
          "1086:       mouseOpts,",
          "1087:       computeSize,",
          "1088:       validOpts,",
          "1089:       showFooter,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145:       areaOpts,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1110:       loadingOpts,",
          "1111:       editRules",
          "1112:     } = $xeTable",
          "1114:     const { leftList, rightList } = columnStore",
          "1115:     const currLoading = this._isLoading || loading",
          "1116:     const vSize = computeSize",
          "1118:     const virtualScrollBars = $xeTable.computeVirtualScrollBars",
          "1121:     return h('div', {",
          "1122:       class: ['vxe-table', 'vxe-table--render-default', `tid_${tId}`, vSize ? `size--${vSize}` : '', `border--${tableBorder}`, {",
          "1123:         [`valid-msg--${validOpts.msgMode}`]: !!editRules,",
          "1124:         'vxe-editable': !!editConfig,",
          "1125:         'old-cell-valid': editRules && getConfig().cellVaildMode === 'obsolete',",
          "1126:         'cell--highlight': highlightCell,",
          "1127:         'cell--selected': mouseConfig && mouseOpts.selected,",
          "1129:         'row--highlight': rowOpts.isHover || highlightHoverRow,",
          "1130:         'column--highlight': columnOpts.isHover || highlightHoverColumn,",
          "1131:         'checkbox--range': checkboxOpts.range,",
          "",
          "[Removed Lines]",
          "1113:     const { dragRow, dragTipText } = reactData",
          "1117:     const dragOpts = $xeTable.computeDragOpts",
          "1119:     const dragSlots = dragOpts.slots || {}",
          "1120:     const rowTipSlot = dragSlots.rowTip",
          "1128:         'cell--area': mouseConfig && mouseOpts.area,",
          "",
          "[Added Lines]",
          "1176:     const isArea = mouseConfig && mouseOpts.area",
          "1178:       ref: 'refElem',",
          "1185:         'cell--area': isArea,",
          "1186:         'header-cell--area': isArea && areaOpts.selectCellByHeader,",
          "1187:         'body-cell--area': isArea && areaOpts.selectCellByBody,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1362:         })",
          "1363:         : _e(),",
          "1375:       h('div', {}, [",
          "",
          "[Removed Lines]",
          "1367:       rowOpts.drag && (dragRow || dragTipText)",
          "1368:         ? h('div', {",
          "1369:           ref: 'refRowDragTipElem',",
          "1370:           class: 'vxe-table--row-drag-tip'",
          "1371:         }, rowTipSlot",
          "1372:           ? (dragRow ? this.callSlot(rowTipSlot, { row: dragRow }, h) : [renderEmptyElement($xeTable)])",
          "1373:           : (dragTipText ? [h('span', dragTipText)] : [renderEmptyElement($xeTable)]))",
          "1374:         : _e(),",
          "",
          "[Added Lines]",
          "1426:       renderDragTip(h, this),",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:       strict: true",
          "45:     },",
          "48:     },",
          "49:     checkboxConfig: {",
          "",
          "[Removed Lines]",
          "46:     dragConfig: {",
          "47:       showRowIcon: true",
          "",
          "[Added Lines]",
          "46:     rowDragConfig: {",
          "47:       showIcon: true",
          "48:     },",
          "49:     columnDragConfig: {",
          "50:       showIcon: true",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:     },",
          "143:     areaConfig: {",
          "144:       autoClear: true,",
          "146:     },",
          "147:     clipConfig: {",
          "148:       isCopy: true,",
          "",
          "[Removed Lines]",
          "145:       selectCellByHeader: true",
          "",
          "[Added Lines]",
          "148:       selectCellByHeader: true,",
          "149:       selectCellByBody: true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:   TABLE_CUSTOM_SORT: iconPrefix + 'drag-handle',",
          "242:   TABLE_MENU_OPTIONS: iconPrefix + 'arrow-right',",
          "243:   TABLE_DRAG_ROW: iconPrefix + 'drag-handle',",
          "246:   TOOLBAR_TOOLS_REFRESH: iconPrefix + 'repeat',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:   TABLE_DRAG_COLUMN: iconPrefix + 'drag-handle',",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:       }",
          "664:     }",
          "665:   }",
          "669:       user-select: none;",
          "670:     }",
          "671:   }",
          "",
          "[Removed Lines]",
          "666:   &.cell--area {",
          "667:     .vxe-table--body-wrapper,",
          "668:     .vxe-body--column {",
          "",
          "[Added Lines]",
          "666:   &.header-cell--area {",
          "667:     .vxe-table--header-wrapper {",
          "668:       user-select: none;",
          "669:     }",
          "670:   }",
          "671:   &.body-cell--area {",
          "672:     .vxe-table--body-wrapper {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:     width: 1px;",
          "1078:     height: 100%;",
          "1079:     z-index: 9;",
          "1080:     cursor: col-resize;",
          "1081:     &:before {",
          "1082:       content: \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084:     pointer-events: none;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1237:     }",
          "1238:   }",
          "1241:   .vxe-cell--drag-handle {",
          "1242:     user-select: none;",
          "1243:     & + span {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246:   .vxe-table--drag-col-line {",
          "1247:     height: 100%;",
          "1248:     width: 1px;",
          "1249:     background-color: var(--vxe-ui-font-primary-color);",
          "1250:   }",
          "1251:   .vxe-header--column {",
          "1252:     &.col--drag-origin {",
          "1253:       & > .vxe-cell {",
          "1254:         opacity: 0.5;",
          "1255:       }",
          "1256:     }",
          "1257:   }",
          "1258:   .vxe-header--col-list-move {",
          "1259:     transition: transform 0.35s;",
          "1260:   }",
          "1262:   .vxe-table--drag-col-line,",
          "1263:   .vxe-table--drag-row-line {",
          "1264:     display: none;",
          "1265:     position: absolute;",
          "1266:     top: 0;",
          "1267:     left: 0;",
          "1268:     z-index: 9;",
          "1269:     pointer-events: none;",
          "1270:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1257:       cursor: not-allowed;",
          "1258:     }",
          "1259:   }",
          "1260:   .vxe-body--row {",
          "1261:     &.row--drag-origin {",
          "1262:       & > .vxe-body--column {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1292:   .vxe-table--drag-row-line {",
          "1293:     width: 100%;",
          "1294:     height: 1px;",
          "1295:     background-color: var(--vxe-ui-font-primary-color);",
          "1296:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1265:         }",
          "1266:       }",
          "1267:     }",
          "1298:   }",
          "1299:   .vxe-body--row-list-move {",
          "1300:     transition: transform 0.35s;",
          "1301:   }",
          "1303:     display: none;",
          "1304:     position: absolute;",
          "1305:     top: 0;",
          "",
          "[Removed Lines]",
          "1268:     &.row--drag-active-target {",
          "1269:       & > .vxe-body--column {",
          "1270:         &::after {",
          "1271:           display: none;",
          "1272:           content: \"\";",
          "1273:           position: absolute;",
          "1274:           left: 0;",
          "1275:           width: 100%;",
          "1276:           height: 2px;",
          "1277:           background-color: var(--vxe-ui-font-primary-color);",
          "1278:           z-index: 12;",
          "1279:         }",
          "1280:       }",
          "1281:       &[drag-pos=\"top\"] {",
          "1282:         & > .vxe-body--column {",
          "1283:           &::after {",
          "1284:             display: block;",
          "1285:             top: 0;",
          "1286:           }",
          "1287:         }",
          "1288:       }",
          "1289:       &[drag-pos=\"bottom\"] {",
          "1290:         & > .vxe-body--column {",
          "1291:           &::after {",
          "1292:             display: block;",
          "1293:             bottom: 0;",
          "1294:           }",
          "1295:         }",
          "1296:       }",
          "1297:     }",
          "1302:   .vxe-table--row-drag-tip {",
          "",
          "[Added Lines]",
          "1309:   .vxe-table--drag-sort-tip {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "975a8f28b2a9ea1d4ed5714fff70711acd3f8a34",
      "candidate_info": {
        "commit_hash": "975a8f28b2a9ea1d4ed5714fff70711acd3f8a34",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/975a8f28b2a9ea1d4ed5714fff70711acd3f8a34",
        "files": [
          "package.json",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.11.24",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "969:         cacheItem = { row, rowid, seq, index: -1, _index: -1, $index: -1, items, parent, level, height: 0 }",
          "970:       }",
          "971:       if (isSource) {",
          "972:         cacheItem.level = level",
          "973:         cacheItem.index = treeConfig && parent ? -1 : index",
          "974:         fullDataRowIdMaps[rowid] = cacheItem",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "972:         cacheItem.row = row",
          "973:         cacheItem.items = items",
          "974:         cacheItem.parent = parent",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd538dd35aca51aeb47c888fb9a9754412b4794e",
      "candidate_info": {
        "commit_hash": "cd538dd35aca51aeb47c888fb9a9754412b4794e",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/cd538dd35aca51aeb47c888fb9a9754412b4794e",
        "files": [
          "examples/plugins/table/renderer/empty.js",
          "examples/views/table/renderer/Empty.vue",
          "package.json",
          "packages/form/src/form-config-item.js",
          "packages/form/src/form-gather.js",
          "packages/form/src/form-item.js",
          "packages/form/src/form.js",
          "packages/form/src/util.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/modal/src/modal.js",
          "packages/table/src/body.js",
          "packages/table/src/table.js",
          "packages/v-x-e-table/index.js",
          "packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/config.js",
          "packages/validator/src/mixin.js",
          "styles/form.scss",
          "styles/icon.scss",
          "styles/old-icon.scss",
          "types/form-item.d.ts",
          "types/v-x-e-table/config.d.ts",
          "types/v-x-e-table/index.d.ts",
          "types/v-x-e-table/renderer.d.ts"
        ],
        "message": "fix \u4fee\u590d\u6821\u9a8c\u4f4d\u7f6e\u4e0d\u4f1a\u81ea\u52a8\u5b9a\u4f4d\u95ee\u9898",
        "before_after_code_files": [
          "examples/plugins/table/renderer/empty.js||examples/plugins/table/renderer/empty.js",
          "examples/views/table/renderer/Empty.vue||examples/views/table/renderer/Empty.vue",
          "packages/form/src/form-config-item.js||packages/form/src/form-config-item.js",
          "packages/form/src/form-gather.js||packages/form/src/form-gather.js",
          "packages/form/src/form-item.js||packages/form/src/form-item.js",
          "packages/form/src/form.js||packages/form/src/form.js",
          "packages/form/src/util.js||packages/form/src/util.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/modal/src/modal.js||packages/modal/src/modal.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/config.js||packages/v-x-e-table/src/config.js",
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js",
          "styles/form.scss||styles/form.scss",
          "styles/icon.scss||styles/icon.scss",
          "styles/old-icon.scss||styles/old-icon.scss",
          "types/form-item.d.ts||types/form-item.d.ts",
          "types/v-x-e-table/config.d.ts||types/v-x-e-table/config.d.ts",
          "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts",
          "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "examples/plugins/table/renderer/empty.js||examples/plugins/table/renderer/empty.js": [
          "File: examples/plugins/table/renderer/empty.js -> examples/plugins/table/renderer/empty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: VXETable.renderer.add('NotData', {",
          "7:     return [",
          "8:       <span>",
          "9:         <img src=\"/vxe-table/static/other/img1.gif\"/>",
          "",
          "[Removed Lines]",
          "6:   renderEmpty () {",
          "",
          "[Added Lines]",
          "6:   renderTableEmptyView () {",
          "",
          "---------------"
        ],
        "examples/views/table/renderer/Empty.vue||examples/views/table/renderer/Empty.vue": [
          "File: examples/views/table/renderer/Empty.vue -> examples/views/table/renderer/Empty.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:     <p class=\"tip\">",
          "4:       \u7a7a\u5185\u5bb9\u6e32\u67d3 <table-api-link prop=\"empty-render\"/>\uff0c\u67e5\u770b <a class=\"link\" href=\"https://gitee.com/xuliangzhan_admin/vxe-table/tree/v3/examples/plugins/table/renderer\" target=\"_blank\">\u793a\u4f8b\u7684\u6e90\u7801</a><span class=\"red\">\uff08\u5177\u4f53\u8bf7\u81ea\u884c\u5b9e\u73b0\uff0c\u8be5\u793a\u4f8b\u4ec5\u4f9b\u53c2\u8003\uff09</span><br>",
          "5:       \u914d\u7f6e\u53c2\u6570\uff1a<br>",
          "7:     </p>",
          "9:     <vxe-table",
          "",
          "[Removed Lines]",
          "6:       renderEmpty (h, renderOpts, params: { $table }) \u7a7a\u503c\u65f6\u663e\u793a\u7684\u5185\u5bb9<br>",
          "",
          "[Added Lines]",
          "6:       renderTableEmptyView (h, renderOpts, params: { $table }) \u7a7a\u503c\u65f6\u663e\u793a\u7684\u5185\u5bb9<br>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         VXETable.renderer.add('NotData', {",
          "42:             return [",
          "43:               <span>",
          "44:                 <img src=\"/vxe-table/static/other/img1.gif\"/>",
          "",
          "[Removed Lines]",
          "41:           renderEmpty (h, renderOpts) {",
          "",
          "[Added Lines]",
          "41:           renderTableEmptyView (h, renderOpts) {",
          "",
          "---------------"
        ],
        "packages/form/src/form-config-item.js||packages/form/src/form-config-item.js": [
          "File: packages/form/src/form-config-item.js -> packages/form/src/form-config-item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         })",
          "66:       })",
          "67:       return childVNs.length ? h('div', {",
          "69:       }, childVNs) : _e()",
          "70:     }",
          "71:     if (rules) {",
          "",
          "[Removed Lines]",
          "68:         class: ['vxe-form--gather vxe-row', item.id, span ? `vxe-col--${span} is--span` : '', className ? (XEUtils.isFunction(className) ? className(params) : className) : '']",
          "",
          "[Added Lines]",
          "68:         class: ['vxe-form--gather vxe-form--item-row', item.id, span ? `vxe-form--item-col_${span} is--span` : '', className ? (XEUtils.isFunction(className) ? className(params) : className) : '']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:       class: [",
          "95:         'vxe-form--item',",
          "96:         item.id,",
          "98:         className ? (XEUtils.isFunction(className) ? className(params) : className) : '',",
          "99:         itemClassName ? (XEUtils.isFunction(itemClassName) ? itemClassName(params) : itemClassName) : '',",
          "100:         {",
          "",
          "[Removed Lines]",
          "97:         span ? `vxe-col--${span} is--span` : null,",
          "",
          "[Added Lines]",
          "97:         span ? `vxe-form--item-col_${span} is--span` : null,",
          "",
          "---------------"
        ],
        "packages/form/src/form-gather.js||packages/form/src/form-gather.js": [
          "File: packages/form/src/form-gather.js -> packages/form/src/form-gather.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import VxeFormItem from './form-item'",
          "4: export default {",
          "5:   name: 'VxeFormGather',",
          "",
          "[Removed Lines]",
          "2: import { errLog } from '../../tools/log'",
          "",
          "[Added Lines]",
          "2: import XEUtils from 'xe-utils'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:       $xeformiteminfo: this",
          "12:     }",
          "13:   },",
          "23:   render (h) {",
          "25:   }",
          "26: }",
          "",
          "[Removed Lines]",
          "14:   created () {",
          "15:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "16:       this.$nextTick(() => {",
          "17:         if (this.$xeform && this.$xeform.customLayout) {",
          "18:           errLog('vxe.error.errConflicts', ['custom-layout', '<form-gather ...>'])",
          "19:         }",
          "20:       })",
          "21:     }",
          "22:   },",
          "24:     return h('div', this.$slots.default)",
          "",
          "[Added Lines]",
          "15:     const { $xeform, className, field, itemConfig } = this",
          "16:     const span = this.span || ($xeform ? $xeform.props.span : null)",
          "17:     return $xeform && $xeform.customLayout ? h('div', {",
          "18:       class: ['vxe-form--gather vxe-form--item-row', itemConfig.id, span ? `vxe-form--item-col_${span} is--span` : '', className ? (XEUtils.isFunction(className) ? className({ $form: $xeform, data: $xeform ? $xeform.props.data : {}, item: itemConfig, field, property: field }) : className) : '']",
          "19:     }, this.$slots.default) : h('div')",
          "",
          "---------------"
        ],
        "packages/form/src/form-item.js||packages/form/src/form-item.js": [
          "File: packages/form/src/form-item.js -> packages/form/src/form-item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   visibleMethod: Function,",
          "53:   folding: Boolean,",
          "54:   collapseNode: Boolean,",
          "56: }",
          "58: const watch = {}",
          "",
          "[Removed Lines]",
          "55:   itemRender: Object",
          "",
          "[Added Lines]",
          "55:   itemRender: Object,",
          "56:   rules: Array",
          "",
          "---------------"
        ],
        "packages/form/src/form.js||packages/form/src/form.js": [
          "File: packages/form/src/form.js -> packages/form/src/form.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:       }",
          "170:     }, [",
          "171:       h('div', {",
          "173:       }, customLayout ? (defaultSlot ? this.callSlot(defaultSlot, {}, h) : []) : formItems.map((item, index) => {",
          "174:         return h(VxeFormConfigItem, {",
          "175:           key: index,",
          "",
          "[Removed Lines]",
          "172:         class: 'vxe-form--wrapper vxe-row'",
          "",
          "[Added Lines]",
          "172:         class: 'vxe-form--wrapper vxe-form--item-row'",
          "",
          "---------------"
        ],
        "packages/form/src/util.js||packages/form/src/util.js": [
          "File: packages/form/src/util.js -> packages/form/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:       titleClassName: item.titleClassName,",
          "31:       titleStyle: item.titleStyle,",
          "32:       itemRender: item.itemRender,",
          "34:       showError: false,",
          "35:       errRule: null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:       rules: item.rules,",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         sortHelpTip: 'Click and drag the icon to adjust the order of the columns.',",
          "118:         colTitle: 'Title',",
          "119:         colVisible: 'Visible',",
          "121:         fixedLeft: 'Left',",
          "122:         fixedUnset: 'Unset',",
          "123:         fixedRight: 'Right'",
          "",
          "[Removed Lines]",
          "120:         colFixed: 'Freeze columns (Max {0})',",
          "",
          "[Added Lines]",
          "120:         colFixed: 'Freeze columns (Max. {0})',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:         }",
          "263:       }",
          "264:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     formDesign: {",
          "266:       widget: {",
          "267:         input: 'Input',",
          "268:         textarea: 'Textarea',",
          "269:         select: 'Select'",
          "270:       }",
          "271:     },",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:       fixedRight: 'Freeze on the right',",
          "205:       cancelFixed: 'Unfreeze column'",
          "206:     },",
          "209:         m1: 'Enero',",
          "210:         m2: 'Febrero',",
          "211:         m3: 'Marzo',",
          "",
          "[Removed Lines]",
          "207:     entrada: {",
          "208:       fecha: {",
          "",
          "[Added Lines]",
          "207:     input: {",
          "208:       date: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:         }",
          "263:       }",
          "264:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     formDesign: {",
          "266:       widget: {",
          "267:         input: 'Input',",
          "268:         textarea: 'Textarea',",
          "269:         select: 'Select'",
          "270:       }",
          "271:     },",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         }",
          "263:       }",
          "264:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     formDesign: {",
          "266:       widget: {",
          "267:         input: 'Input',",
          "268:         textarea: 'Textarea',",
          "269:         select: 'Select'",
          "270:       }",
          "271:     },",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:           q4: '4\u00ba trimestre'",
          "262:         }",
          "263:       }",
          "272:       area: {",
          "278:       },",
          "279:       fnr: {",
          "285:         tabs: {",
          "288:         },",
          "289:         filter: {",
          "293:         },",
          "294:         btns: {",
          "300:         },",
          "301:         header: {",
          "302:           seq: '#',",
          "305:         },",
          "329:       }",
          "463:     }",
          "464:   }",
          "465: }",
          "",
          "[Removed Lines]",
          "264:     }",
          "265:   },",
          "270:   plugins: {",
          "271:     extendCellArea: {",
          "273:         mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "274:         multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "275:         extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "276:         pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "277:         cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "280:         title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "281:         findLabel: '\u67e5\u627e',",
          "282:         replaceLabel: '\u66ff\u6362',",
          "283:         findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "284:         replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "286:           find: '\u67e5\u627e',",
          "287:           replace: '\u66ff\u6362'",
          "290:           re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "291:           whole: '\u5168\u8bcd\u5339\u914d',",
          "292:           sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "295:           findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "296:           findAll: '\u67e5\u627e\u5168\u90e8',",
          "297:           replace: '\u66ff\u6362',",
          "298:           replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "299:           cancel: '\u53d6\u6d88'",
          "303:           cell: '\u5355\u5143\u683c',",
          "304:           value: '\u503c'",
          "306:         empty: '(\u7a7a\u503c)',",
          "307:         reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "308:         recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "309:         notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "310:         replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "311:       }",
          "312:     },",
          "313:     filterComplexInput: {",
          "314:       menus: {",
          "315:         fixedColumn: '\u9501\u5b9a\u5217',",
          "316:         fixedGroup: '\u9501\u5b9a\u7ec4',",
          "317:         cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "318:         fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "319:         fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "320:       },",
          "321:       cases: {",
          "322:         equal: '\u7b49\u4e8e',",
          "323:         gt: '\u5927\u4e8e',",
          "324:         lt: '\u5c0f\u4e8e',",
          "325:         begin: '\u5f00\u5934\u662f',",
          "326:         endin: '\u7ed3\u5c3e\u662f',",
          "327:         include: '\u5305\u542b',",
          "328:         isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "330:     },",
          "331:     filterCombination: {",
          "332:       menus: {",
          "333:         clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "334:         sortAsc: '\u5347\u5e8f',",
          "335:         sortDesc: '\u964d\u5e8f',",
          "336:         fixedColumn: '\u9501\u5b9a\u5217',",
          "337:         fixedGroup: '\u9501\u5b9a\u7ec4',",
          "338:         cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "339:         fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "340:         fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "341:         clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "342:         textOption: '\u6587\u672c\u7b5b\u9009',",
          "343:         numberOption: '\u6570\u503c\u7b5b\u9009'",
          "344:       },",
          "345:       popup: {",
          "346:         title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "347:         currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "348:         and: '\u4e0e',",
          "349:         or: '\u6216',",
          "350:         describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "351:       },",
          "352:       cases: {",
          "353:         equal: '\u7b49\u4e8e',",
          "354:         unequal: '\u4e0d\u7b49\u4e8e',",
          "355:         gt: '\u5927\u4e8e',",
          "356:         ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "357:         lt: '\u5c0f\u4e8e',",
          "358:         le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "359:         begin: '\u5f00\u5934\u662f',",
          "360:         notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "361:         endin: '\u7ed3\u5c3e\u662f',",
          "362:         notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "363:         include: '\u5305\u542b',",
          "364:         exclude: '\u4e0d\u5305\u542b',",
          "365:         between: '\u4ecb\u4e8e',",
          "366:         custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "367:         insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "368:         isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "369:       },",
          "370:       empty: '(\u7a7a\u767d)',",
          "371:       notData: '\u65e0\u5339\u914d\u9879'",
          "372:     }",
          "373:   },",
          "379:   renderer: {",
          "380:     search: 'Buscar',",
          "381:     cases: {",
          "382:       equal: 'Igual',",
          "383:       unequal: 'N\u00e3o igual',",
          "384:       gt: 'Maior que',",
          "385:       ge: 'Maior ou igual a',",
          "386:       lt: 'Menor que',",
          "387:       le: 'Menor ou igual a',",
          "388:       begin: 'Come\u00e7a com',",
          "389:       notbegin: 'N\u00e3o come\u00e7a com',",
          "390:       endin: 'Termina com',",
          "391:       notendin: 'N\u00e3o termina com',",
          "392:       include: 'Inclui',",
          "393:       exclude: 'Exclusivo',",
          "394:       between: 'Entre',",
          "395:       custom: 'Filtro personalizado',",
          "396:       insensitive: 'Sem diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas',",
          "397:       isSensitive: 'Diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas'",
          "398:     },",
          "399:     combination: {",
          "400:       menus: {",
          "401:         clearSort: 'Limpar ordena\u00e7\u00e3o',",
          "402:         sortAsc: 'Ordem ascendente',",
          "403:         sortDesc: 'Ordem descendente',",
          "404:         fixedColumn: 'Coluna fixa',",
          "405:         fixedGroup: 'Grupo fixo',",
          "406:         cancelFixed: 'Limpar fixa\u00e7\u00e3o',",
          "407:         fixedLeft: 'Fixar \u00e0 esquerda',",
          "408:         fixedRight: 'Fixar \u00e0 direita',",
          "409:         clearFilter: 'Limpar filtro',",
          "410:         textOption: 'Filtro de texto',",
          "411:         numberOption: 'Filtro num\u00e9rico'",
          "412:       },",
          "413:       popup: {",
          "414:         title: 'Filtragem personalizada',",
          "415:         currColumnTitle: 'Coluna atual:',",
          "416:         and: 'E',",
          "417:         or: 'Ou',",
          "418:         describeHtml: 'Use ? para representar um \u00fanico caractere <br/> use * para representar qualquer n\u00famero de caracteres'",
          "419:       },",
          "420:       empty: '(Vazio)',",
          "421:       notData: 'Sem dados'",
          "422:     }",
          "423:   },",
          "424:   pro: {",
          "425:     area: {",
          "426:       mergeErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em c\u00e9lulas mescladas',",
          "427:       multiErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em \u00e1reas de sele\u00e7\u00e3o m\u00faltipla',",
          "428:       extendErr: 'Se a \u00e1rea estendida contiver c\u00e9lulas mescladas, todas as c\u00e9lulas mescladas devem ter o mesmo tamanho',",
          "429:       pasteMultiErr: 'N\u00e3o \u00e9 poss\u00edvel colar, \u00e9 necess\u00e1rio que a \u00e1rea copiada e a \u00e1rea colada tenham o mesmo tamanho para realizar esta opera\u00e7\u00e3o'",
          "430:     },",
          "431:     fnr: {",
          "432:       title: 'Localizar e substituir',",
          "433:       findLabel: 'Localizar',",
          "434:       replaceLabel: 'Substituir',",
          "435:       findTitle: 'O que localizar:',",
          "436:       replaceTitle: 'Substituir por:',",
          "437:       tabs: {",
          "438:         find: 'Localizar',",
          "439:         replace: 'Substituir'",
          "440:       },",
          "441:       filter: {",
          "442:         re: 'Express\u00e3o Regular',",
          "443:         whole: 'Palavra inteira',",
          "444:         sensitive: 'Diferenciar mai\u00fasculas e min\u00fasculas'",
          "445:       },",
          "446:       btns: {",
          "447:         findNext: 'Localizar pr\u00f3ximo',",
          "448:         findAll: 'Localizar todos',",
          "449:         replace: 'Substituir',",
          "450:         replaceAll: 'Substituir tudo',",
          "451:         cancel: 'Cancelar'",
          "452:       },",
          "453:       header: {",
          "454:         seq: '#',",
          "455:         cell: 'C\u00e9lula',",
          "456:         value: 'Valor'",
          "457:       },",
          "458:       empty: '(Vazio)',",
          "459:       reError: 'Express\u00e3o regular inv\u00e1lida',",
          "460:       recordCount: 'Encontradas {0} c\u00e9lulas',",
          "461:       notCell: 'N\u00e3o foram encontradas c\u00e9lulas correspondentes',",
          "462:       replaceSuccess: 'Substitu\u00eddo com sucesso {0} c\u00e9lulas'",
          "",
          "[Added Lines]",
          "264:     },",
          "265:     formDesign: {",
          "266:       widget: {",
          "267:         input: 'Input',",
          "268:         textarea: 'Textarea',",
          "269:         select: 'Select'",
          "270:       }",
          "271:     },",
          "276:     plugins: {",
          "277:       extendCellArea: {",
          "278:         area: {",
          "279:           mergeErr: '\u65e0\u6cd5\u5bf9\u5408\u5e76\u5355\u5143\u683c\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "280:           multiErr: '\u65e0\u6cd5\u5bf9\u591a\u91cd\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8be5\u64cd\u4f5c',",
          "281:           extendErr: '\u5982\u679c\u5ef6\u4f38\u7684\u533a\u57df\u5305\u542b\u88ab\u5408\u5e76\u7684\u5355\u5143\u683c\uff0c\u6240\u6709\u5408\u5e76\u7684\u5355\u5143\u683c\u9700\u5927\u5c0f\u76f8\u540c',",
          "282:           pasteMultiErr: '\u65e0\u6cd5\u7c98\u8d34\uff0c\u9700\u8981\u76f8\u540c\u5927\u5c0f\u7684\u590d\u5236\u7684\u533a\u57df\u548c\u7c98\u8d34\u7684\u533a\u57df\u624d\u80fd\u6267\u884c\u6b64\u64cd\u4f5c',",
          "283:           cpInvalidErr: '\u8be5\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\uff0c\u60a8\u9009\u62e9\u7684\u533a\u57df\u4e2d\u5b58\u5728\u88ab\u7981\u6b62\u7684\u5217\uff08{0}\uff09'",
          "284:         },",
          "285:         fnr: {",
          "286:           title: '\u67e5\u627e\u548c\u66ff\u6362',",
          "287:           findLabel: '\u67e5\u627e',",
          "288:           replaceLabel: '\u66ff\u6362',",
          "289:           findTitle: '\u67e5\u627e\u5185\u5bb9\uff1a',",
          "290:           replaceTitle: '\u66ff\u6362\u4e3a\uff1a',",
          "291:           tabs: {",
          "292:             find: '\u67e5\u627e',",
          "293:             replace: '\u66ff\u6362'",
          "294:           },",
          "295:           filter: {",
          "296:             re: '\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "297:             whole: '\u5168\u8bcd\u5339\u914d',",
          "298:             sensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "299:           },",
          "300:           btns: {",
          "301:             findNext: '\u67e5\u627e\u4e0b\u4e00\u4e2a',",
          "302:             findAll: '\u67e5\u627e\u5168\u90e8',",
          "303:             replace: '\u66ff\u6362',",
          "304:             replaceAll: '\u66ff\u6362\u5168\u90e8',",
          "305:             cancel: '\u53d6\u6d88'",
          "306:           },",
          "307:           header: {",
          "308:             seq: '#',",
          "309:             cell: '\u5355\u5143\u683c',",
          "310:             value: '\u503c'",
          "311:           },",
          "312:           empty: '(\u7a7a\u503c)',",
          "313:           reError: '\u65e0\u6548\u7684\u6b63\u5219\u8868\u8fbe\u5f0f',",
          "314:           recordCount: '\u5df2\u627e\u5230 {0} \u4e2a\u5355\u5143\u683c',",
          "315:           notCell: '\u627e\u4e0d\u5230\u5339\u914d\u7684\u5355\u5143\u683c',",
          "316:           replaceSuccess: '\u6210\u529f\u66ff\u6362 {0} \u4e2a\u5355\u5143\u683c'",
          "317:         }",
          "318:       },",
          "319:       filterComplexInput: {",
          "320:         menus: {",
          "321:           fixedColumn: '\u9501\u5b9a\u5217',",
          "322:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "323:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "324:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "325:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7'",
          "326:         },",
          "327:         cases: {",
          "328:           equal: '\u7b49\u4e8e',",
          "329:           gt: '\u5927\u4e8e',",
          "330:           lt: '\u5c0f\u4e8e',",
          "331:           begin: '\u5f00\u5934\u662f',",
          "332:           endin: '\u7ed3\u5c3e\u662f',",
          "333:           include: '\u5305\u542b',",
          "334:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "335:         }",
          "336:       },",
          "337:       filterCombination: {",
          "338:         menus: {",
          "339:           clearSort: '\u6e05\u9664\u6392\u5e8f',",
          "340:           sortAsc: '\u5347\u5e8f',",
          "341:           sortDesc: '\u964d\u5e8f',",
          "342:           fixedColumn: '\u9501\u5b9a\u5217',",
          "343:           fixedGroup: '\u9501\u5b9a\u7ec4',",
          "344:           cancelFixed: '\u53d6\u6d88\u9501\u5b9a',",
          "345:           fixedLeft: '\u9501\u5b9a\u5de6\u4fa7',",
          "346:           fixedRight: '\u9501\u5b9a\u53f3\u4fa7',",
          "347:           clearFilter: '\u6e05\u9664\u7b5b\u9009',",
          "348:           textOption: '\u6587\u672c\u7b5b\u9009',",
          "349:           numberOption: '\u6570\u503c\u7b5b\u9009'",
          "350:         },",
          "351:         popup: {",
          "352:           title: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u7684\u65b9\u5f0f',",
          "353:           currColumnTitle: '\u5f53\u524d\u5217\uff1a',",
          "354:           and: '\u4e0e',",
          "355:           or: '\u6216',",
          "356:           describeHtml: '\u53ef\u7528 ? \u4ee3\u8868\u5355\u4e2a\u5b57\u7b26<br/>\u7528 * \u4ee3\u8868\u4efb\u610f\u591a\u4e2a\u5b57\u7b26'",
          "357:         },",
          "358:         cases: {",
          "359:           equal: '\u7b49\u4e8e',",
          "360:           unequal: '\u4e0d\u7b49\u4e8e',",
          "361:           gt: '\u5927\u4e8e',",
          "362:           ge: '\u5927\u4e8e\u6216\u7b49\u4e8e',",
          "363:           lt: '\u5c0f\u4e8e',",
          "364:           le: '\u5c0f\u4e8e\u6216\u7b49\u4e8e',",
          "365:           begin: '\u5f00\u5934\u662f',",
          "366:           notbegin: '\u5f00\u5934\u4e0d\u662f',",
          "367:           endin: '\u7ed3\u5c3e\u662f',",
          "368:           notendin: '\u7ed3\u5c3e\u4e0d\u662f',",
          "369:           include: '\u5305\u542b',",
          "370:           exclude: '\u4e0d\u5305\u542b',",
          "371:           between: '\u4ecb\u4e8e',",
          "372:           custom: '\u81ea\u5b9a\u4e49\u7b5b\u9009',",
          "373:           insensitive: '\u4e0d\u533a\u5206\u5927\u5c0f\u5199',",
          "374:           isSensitive: '\u533a\u5206\u5927\u5c0f\u5199'",
          "375:         },",
          "376:         empty: '(\u7a7a\u767d)',",
          "377:         notData: '\u65e0\u5339\u914d\u9879'",
          "378:       }",
          "379:     },",
          "385:     renderer: {",
          "386:       search: 'Buscar',",
          "387:       cases: {",
          "388:         equal: 'Igual',",
          "389:         unequal: 'N\u00e3o igual',",
          "390:         gt: 'Maior que',",
          "391:         ge: 'Maior ou igual a',",
          "392:         lt: 'Menor que',",
          "393:         le: 'Menor ou igual a',",
          "394:         begin: 'Come\u00e7a com',",
          "395:         notbegin: 'N\u00e3o come\u00e7a com',",
          "396:         endin: 'Termina com',",
          "397:         notendin: 'N\u00e3o termina com',",
          "398:         include: 'Inclui',",
          "399:         exclude: 'Exclusivo',",
          "400:         between: 'Entre',",
          "401:         custom: 'Filtro personalizado',",
          "402:         insensitive: 'Sem diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas',",
          "403:         isSensitive: 'Diferencia\u00e7\u00e3o de mai\u00fasculas e min\u00fasculas'",
          "404:       },",
          "405:       combination: {",
          "406:         menus: {",
          "407:           clearSort: 'Limpar ordena\u00e7\u00e3o',",
          "408:           sortAsc: 'Ordem ascendente',",
          "409:           sortDesc: 'Ordem descendente',",
          "410:           fixedColumn: 'Coluna fixa',",
          "411:           fixedGroup: 'Grupo fixo',",
          "412:           cancelFixed: 'Limpar fixa\u00e7\u00e3o',",
          "413:           fixedLeft: 'Fixar \u00e0 esquerda',",
          "414:           fixedRight: 'Fixar \u00e0 direita',",
          "415:           clearFilter: 'Limpar filtro',",
          "416:           textOption: 'Filtro de texto',",
          "417:           numberOption: 'Filtro num\u00e9rico'",
          "418:         },",
          "419:         popup: {",
          "420:           title: 'Filtragem personalizada',",
          "421:           currColumnTitle: 'Coluna atual:',",
          "422:           and: 'E',",
          "423:           or: 'Ou',",
          "424:           describeHtml: 'Use ? para representar um \u00fanico caractere <br/> use * para representar qualquer n\u00famero de caracteres'",
          "425:         },",
          "426:         empty: '(Vazio)',",
          "427:         notData: 'Sem dados'",
          "428:       }",
          "429:     },",
          "430:     pro: {",
          "432:         mergeErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em c\u00e9lulas mescladas',",
          "433:         multiErr: 'A opera\u00e7\u00e3o n\u00e3o pode ser realizada em \u00e1reas de sele\u00e7\u00e3o m\u00faltipla',",
          "434:         extendErr: 'Se a \u00e1rea estendida contiver c\u00e9lulas mescladas, todas as c\u00e9lulas mescladas devem ter o mesmo tamanho',",
          "435:         pasteMultiErr: 'N\u00e3o \u00e9 poss\u00edvel colar, \u00e9 necess\u00e1rio que a \u00e1rea copiada e a \u00e1rea colada tenham o mesmo tamanho para realizar esta opera\u00e7\u00e3o'",
          "438:         title: 'Localizar e substituir',",
          "439:         findLabel: 'Localizar',",
          "440:         replaceLabel: 'Substituir',",
          "441:         findTitle: 'O que localizar:',",
          "442:         replaceTitle: 'Substituir por:',",
          "444:           find: 'Localizar',",
          "445:           replace: 'Substituir'",
          "448:           re: 'Express\u00e3o Regular',",
          "449:           whole: 'Palavra inteira',",
          "450:           sensitive: 'Diferenciar mai\u00fasculas e min\u00fasculas'",
          "453:           findNext: 'Localizar pr\u00f3ximo',",
          "454:           findAll: 'Localizar todos',",
          "455:           replace: 'Substituir',",
          "456:           replaceAll: 'Substituir tudo',",
          "457:           cancel: 'Cancelar'",
          "461:           cell: 'C\u00e9lula',",
          "462:           value: 'Valor'",
          "464:         empty: '(Vazio)',",
          "465:         reError: 'Express\u00e3o regular inv\u00e1lida',",
          "466:         recordCount: 'Encontradas {0} c\u00e9lulas',",
          "467:         notCell: 'N\u00e3o foram encontradas c\u00e9lulas correspondentes',",
          "468:         replaceSuccess: 'Substitu\u00eddo com sucesso {0} c\u00e9lulas'",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         }",
          "263:       }",
          "264:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     formDesign: {",
          "266:       widget: {",
          "267:         input: '\u8f93\u5165\u6846',",
          "268:         textarea: '\u6587\u672c\u57df',",
          "269:         select: '\u4e0b\u62c9\u6846'",
          "270:       }",
          "271:     },",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         }",
          "263:       }",
          "264:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     formDesign: {",
          "266:       widget: {",
          "267:         input: '\u8f38\u5165\u6846',",
          "268:         textarea: '\u6587\u672c\u57df',",
          "269:         select: '\u4e0b\u62c9\u6846'",
          "270:       }",
          "271:     },",
          "",
          "---------------"
        ],
        "packages/modal/src/modal.js||packages/modal/src/modal.js": [
          "File: packages/modal/src/modal.js -> packages/modal/src/modal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     message: [String, Function],",
          "31:     content: [String, Function],",
          "32:     cancelButtonText: { type: String, default: () => GlobalConfig.modal.cancelButtonText },",
          "33:     confirmButtonText: { type: String, default: () => GlobalConfig.modal.confirmButtonText },",
          "34:     lockView: { type: Boolean, default: () => GlobalConfig.modal.lockView },",
          "35:     lockScroll: Boolean,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     showCancelButton: { type: Boolean, default: null },",
          "34:     showConfirmButton: { type: Boolean, default: () => GlobalConfig.modal.showConfirmButton },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     }",
          "122:   },",
          "123:   render (h) {",
          "125:     const content = this.content || this.message",
          "126:     const defaultSlot = $scopedSlots.default || slots.default",
          "127:     const footerSlot = $scopedSlots.footer || slots.footer",
          "",
          "[Removed Lines]",
          "124:     const { _e, $scopedSlots, slots = {}, inited, vSize, className, type, resize, showClose, showZoom, animat, draggable, loading, status, iconStatus, showFooter, zoomLocat, modalTop, dblclickZoom, contentVisible, visible, title, lockScroll, lockView, mask, isMsg, showTitleOverflow, destroyOnClose } = this",
          "",
          "[Added Lines]",
          "126:     const { _e, $scopedSlots, slots = {}, inited, vSize, className, type, resize, showClose, showZoom, animat, draggable, loading, status, iconStatus, showFooter, zoomLocat, modalTop, dblclickZoom, contentVisible, visible, title, lockScroll, lockView, mask, isMsg, showTitleOverflow, destroyOnClose, showCancelButton, showConfirmButton } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:         showFooter ? h('div', {",
          "227:           class: 'vxe-modal--footer'",
          "228:         }, footerSlot ? (!inited || (destroyOnClose && !visible) ? [] : getSlotVNs(footerSlot.call(this, { $modal: this }, h))) : [",
          "230:             ref: 'cancelBtn',",
          "231:             on: {",
          "232:               click: this.cancelEvent",
          "233:             }",
          "234:           }, this.cancelButtonText || GlobalConfig.i18n('vxe.button.cancel')) : null,",
          "236:             ref: 'confirmBtn',",
          "237:             props: {",
          "238:               status: 'primary'",
          "",
          "[Removed Lines]",
          "229:           type === 'confirm' ? h('vxe-button', {",
          "235:           h('vxe-button', {",
          "",
          "[Added Lines]",
          "231:           XEUtils.isBoolean(showCancelButton) ? showCancelButton : type === 'confirm' ? h('vxe-button', {",
          "232:             key: 1,",
          "238:           XEUtils.isBoolean(showConfirmButton) ? showConfirmButton : (type === 'confirm' || type === 'alert') ? h('vxe-button', {",
          "239:             key: 2,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:             on: {",
          "241:               click: this.confirmEvent",
          "242:             }",
          "244:         ]) : null,",
          "245:         !isMsg && resize ? h('span', {",
          "246:           class: 'vxe-modal--resize'",
          "",
          "[Removed Lines]",
          "243:           }, this.confirmButtonText || GlobalConfig.i18n('vxe.button.confirm'))",
          "",
          "[Added Lines]",
          "247:           }, this.confirmButtonText || GlobalConfig.i18n('vxe.button.confirm')) : null",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "590:           modalBoxElem.style.left = `${left}px`",
          "591:           modalBoxElem.style.top = `${top}px`",
          "592:           modalBoxElem.className = modalBoxElem.className.replace(/\\s?is--drag/, '') + ' is--drag'",
          "593:         }",
          "594:         document.onmouseup = () => {",
          "595:           document.onmousemove = domMousemove",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:           this.$emit('move', { type: 'move', $event: evnt })",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "742:         if (remember && storage) {",
          "743:           this.savePosStorage()",
          "744:         }",
          "749:         }",
          "750:       }",
          "751:       document.onmouseup = () => {",
          "",
          "[Removed Lines]",
          "745:         if ($listeners.zoom) {",
          "746:           this.$emit('zoom', params)",
          "747:         } else if (events.zoom) {",
          "748:           events.zoom.call(this, params)",
          "",
          "[Added Lines]",
          "750:         if ($listeners.resize) {",
          "751:           this.$emit('resize', params)",
          "752:         } else if (events.resize) {",
          "753:           events.resize.call(this, params)",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:       emptyContent = $scopedSlots.empty.call(this, { $table: $xetable }, h)",
          "560:     } else {",
          "561:       const compConf = emptyOpts.name ? VXETable.renderer.get(emptyOpts.name) : null",
          "565:       } else {",
          "566:         emptyContent = $xetable.emptyText || GlobalConfig.i18n('vxe.table.emptyText')",
          "567:       }",
          "",
          "[Removed Lines]",
          "562:       const renderEmpty = compConf ? compConf.renderEmpty : null",
          "563:       if (renderEmpty) {",
          "564:         emptyContent = getSlotVNs(renderEmpty.call(this, h, emptyOpts, { $table: $xetable }))",
          "",
          "[Added Lines]",
          "562:       const renderTableEmptyView = compConf ? compConf.renderTableEmptyView || compConf.renderEmpty : null",
          "563:       if (renderTableEmptyView) {",
          "564:         emptyContent = getSlotVNs(renderTableEmptyView.call(this, h, emptyOpts, { $table: $xetable }))",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     emptyContent = $scopedSlots.empty.call(_vm, params, h)",
          "71:   } else {",
          "72:     const compConf = emptyOpts.name ? VXETable.renderer.get(emptyOpts.name) : null",
          "76:     } else {",
          "77:       emptyContent = getFuncText(_vm.emptyText) || GlobalConfig.i18n('vxe.table.emptyText')",
          "78:     }",
          "",
          "[Removed Lines]",
          "73:     const renderEmpty = compConf ? compConf.renderEmpty : null",
          "74:     if (renderEmpty) {",
          "75:       emptyContent = getSlotVNs(renderEmpty.call(_vm, h, emptyOpts, params))",
          "",
          "[Added Lines]",
          "73:     const renderTableEmptyView = compConf ? compConf.renderTableEmptyView || compConf.renderEmpty : null",
          "74:     if (renderTableEmptyView) {",
          "75:       emptyContent = getSlotVNs(renderTableEmptyView.call(_vm, h, emptyOpts, params))",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js": [
          "File: packages/v-x-e-table/index.js -> packages/v-x-e-table/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { setConfig } from './src/config'",
          "10: import { setTheme } from './src/theme'",
          "11: import { UtilTools } from '../tools/utils'",
          "14: const installedPlugins = []",
          "",
          "[Removed Lines]",
          "12: import { errLog } from '../tools/log'",
          "",
          "[Added Lines]",
          "12: import { errLog, warnLog } from '../tools/log'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: }",
          "92: export const v = 'v3'",
          "95: export const globalStore = {}",
          "",
          "[Removed Lines]",
          "93: export const setup = setConfig",
          "",
          "[Added Lines]",
          "98: export const setup = (options) => {",
          "99:   if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "100:     warnLog('vxe.error.delFunc', ['setup', 'setConfig'])",
          "101:   }",
          "102:   return setConfig(options)",
          "103: }",
          "109: export const config = (options) => {",
          "110:   if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "111:     warnLog('vxe.error.delFunc', ['setup', 'setConfig'])",
          "112:   }",
          "113:   return setConfig(options)",
          "114: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:   _t,",
          "115:   setup,",
          "116:   globalConfs",
          "117: }",
          "",
          "[Removed Lines]",
          "114:   config: setConfig,",
          "",
          "[Added Lines]",
          "135:   config,",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     validConfig: {",
          "49:       showMessage: true,",
          "50:       autoClear: true,",
          "51:       message: 'inline',",
          "52:       msgMode: 'single'",
          "53:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:       autoPos: true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:     animat: true,",
          "366:     showClose: true,",
          "367:     draggable: true,",
          "369:     storageKey: 'VXE_MODAL_POSITION'",
          "370:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     showConfirmButton: null,",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/config.js||packages/v-x-e-table/src/config.js": [
          "File: packages/v-x-e-table/src/config.js -> packages/v-x-e-table/src/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   }",
          "18:   return XEUtils.merge(GlobalConfig, options)",
          "19: }",
          "",
          "[Removed Lines]",
          "21: export const config = setConfig",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:       const validRest = {}",
          "129:       const { editRules, afterFullData, visibleColumn, treeConfig, treeOpts } = this",
          "130:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "132:       if (rows === true) {",
          "134:       } else if (rows) {",
          "135:         if (XEUtils.isFunction(rows)) {",
          "136:           cb = rows",
          "137:         } else {",
          "139:         }",
          "140:       }",
          "143:       }",
          "145:       this.lastCallTime = Date.now()",
          "146:       this.validRuleErr = false // \u5982\u679c\u4e3a\u5feb\u901f\u6821\u9a8c\uff0c\u5f53\u5b58\u5728\u67d0\u5217\u6821\u9a8c\u4e0d\u901a\u8fc7\u65f6\u5c06\u7ec8\u6b62\u6267\u884c",
          "147:       this.clearValidate()",
          "",
          "[Removed Lines]",
          "131:       let vaildDatas",
          "133:         vaildDatas = afterFullData",
          "138:           vaildDatas = XEUtils.isArray(rows) ? rows : [rows]",
          "141:       if (!vaildDatas) {",
          "142:         vaildDatas = this.getInsertRecords().concat(this.getUpdateRecords())",
          "144:       const rowValids = []",
          "",
          "[Added Lines]",
          "131:       let validDatas",
          "133:         validDatas = afterFullData",
          "138:           validDatas = XEUtils.isArray(rows) ? rows : [rows]",
          "141:       if (!validDatas) {",
          "142:         validDatas = this.getInsertRecords().concat(this.getUpdateRecords())",
          "144:       const rowValidErrs = []",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:                 )",
          "185:               }",
          "186:             })",
          "188:           }",
          "189:         }",
          "190:         if (treeConfig) {",
          "192:         } else {",
          "194:         }",
          "196:           const ruleProps = Object.keys(validRest)",
          "197:           this.validErrorMaps = this.handleErrMsgMode(validErrMaps)",
          "198:           return this.$nextTick().then(() => {",
          "",
          "[Removed Lines]",
          "187:             rowValids.push(Promise.all(colVailds))",
          "191:           XEUtils.eachTree(vaildDatas, handleVaild, { children: childrenField })",
          "193:           vaildDatas.forEach(handleVaild)",
          "195:         return Promise.all(rowValids).then(() => {",
          "",
          "[Added Lines]",
          "187:             rowValidErrs.push(Promise.all(colVailds))",
          "191:           XEUtils.eachTree(validDatas, handleVaild, { children: childrenField })",
          "193:           validDatas.forEach(handleVaild)",
          "195:         return Promise.all(rowValidErrs).then(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:               const column = firstErrParams.column",
          "238:               const rowIndex = afterFullData.indexOf(row)",
          "239:               const columnIndex = visibleColumn.indexOf(column)",
          "243:             }",
          "244:           })",
          "245:         })",
          "",
          "[Removed Lines]",
          "240:               const locatRow = rowIndex > 0 ? afterFullData[rowIndex - 1] : row",
          "241:               const locatColumn = columnIndex > 0 ? visibleColumn[rowIndex - 1] : column",
          "242:               this.scrollToRow(locatRow, locatColumn).then(posAndFinish)",
          "",
          "[Added Lines]",
          "240:               const targetRow = rowIndex > 0 ? afterFullData[rowIndex - 1] : row",
          "241:               const targetColumn = columnIndex > 0 ? visibleColumn[columnIndex - 1] : column",
          "242:               this.scrollToRow(targetRow, targetColumn).then(posAndFinish)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:         validErrMaps = Object.assign({}, validErrorMaps)",
          "378:         rowList.forEach(row => {",
          "379:           colList.forEach((column) => {",
          "383:             }",
          "384:           })",
          "385:         })",
          "",
          "[Removed Lines]",
          "380:             const vaildKey = `${getRowid(this, row)}:${column.id}`",
          "381:             if (validErrMaps[vaildKey]) {",
          "382:               delete validErrMaps[vaildKey]",
          "",
          "[Added Lines]",
          "380:             const validKey = `${getRowid(this, row)}:${column.id}`",
          "381:             if (validErrMaps[validKey]) {",
          "382:               delete validErrMaps[validKey]",
          "",
          "---------------"
        ],
        "styles/form.scss||styles/form.scss": [
          "File: styles/form.scss -> styles/form.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   text-align: left;",
          "14: }",
          "16: .vxe-form-slots {",
          "17:   display: none;",
          "18: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: .vxe-form--item-row {",
          "17:   display: flex;",
          "18:   flex-direction: row;",
          "19:   flex-wrap: wrap;",
          "20:   $spans: 4.16667%, 8.33333%, 12.5%, 16.66667%, 20.83333%, 25%, 29.16667%, 33.33333%,",
          "21:           37.5%, 41.66667%, 45.83333%, 50%, 54.16667%, 58.33333%, 62.5%, 66.66667%,",
          "22:           70.83333%, 75%, 79.16667%, 83.33333%, 87.5%, 91.66667%, 95.83333%, 100%;",
          "23:   @for $index from 0 to length($spans) {",
          "24:     & > .vxe-form--item-col_#{$index + 1} {",
          "25:       width: nth($spans, $index + 1);",
          "26:     }",
          "27:   }",
          "28: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   .vxe-form--item {",
          "107:     display: none;",
          "108:     padding: 0.5em 0.8em 0.5em 0;",
          "109:     &.is--active {",
          "110:       &:not(.is--hidden) {",
          "111:         display: inline-flex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     &.is--vertical {",
          "124:       padding: 0.25em 0 0.25em 0;",
          "125:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:     padding: 0 0.8em;",
          "218:   }",
          "219:   .vxe-default-textarea {",
          "220:     padding: 0.3em 0.6em;",
          "221:   }",
          "222:   .vxe-default-input[type=\"number\"] {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     height: calc($vxe-button-height-default * 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:       line-height: $vxe-button-height-medium - 2px;",
          "303:     }",
          "304:     .vxe-default-input,",
          "306:     .vxe-default-select {",
          "307:       height: $vxe-button-height-medium;",
          "308:     }",
          "309:   }",
          "310:   &.size--small {",
          "311:     font-size: $vxe-font-size-small;",
          "",
          "[Removed Lines]",
          "305:     .vxe-default-input,",
          "",
          "[Added Lines]",
          "326:     .vxe-default-textarea {",
          "327:       height: calc($vxe-button-height-medium * 2);",
          "328:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "317:       line-height: $vxe-button-height-small - 2px;",
          "318:     }",
          "319:     .vxe-default-input,",
          "321:     .vxe-default-select {",
          "322:       height: $vxe-button-height-small;",
          "323:     }",
          "324:   }",
          "325:   &.size--mini {",
          "326:     font-size: $vxe-font-size-mini;",
          "",
          "[Removed Lines]",
          "320:     .vxe-default-input,",
          "",
          "[Added Lines]",
          "343:     .vxe-default-textarea {",
          "344:       height: calc($vxe-button-height-small * 2);",
          "345:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "332:       line-height: $vxe-button-height-mini - 2px;",
          "333:     }",
          "334:     .vxe-default-input,",
          "336:     .vxe-default-select {",
          "337:       height: $vxe-button-height-mini;",
          "338:     }",
          "339:   }",
          "340: }",
          "",
          "[Removed Lines]",
          "335:     .vxe-default-input,",
          "",
          "[Added Lines]",
          "360:     .vxe-default-textarea {",
          "361:       height: calc($vxe-button-height-mini * 2);",
          "362:     }",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "697:   content: \"\\e785\";",
          "698: }",
          "701:   content: \"\\e848\";",
          "702: }",
          "",
          "[Removed Lines]",
          "700: .vxe-icon-warnion-circle-fill:before {",
          "",
          "[Added Lines]",
          "700: .vxe-icon-warning-circle-fill:before {",
          "",
          "---------------"
        ],
        "styles/old-icon.scss||styles/old-icon.scss": [
          "File: styles/old-icon.scss -> styles/old-icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:     transform: rotate(45deg);",
          "712:   }",
          "713: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716: .vxe-icon-warnion-circle-fill:before {",
          "717:   content: \"\\e848\";",
          "718: }",
          "",
          "---------------"
        ],
        "types/form-item.d.ts||types/form-item.d.ts": [
          "File: types/form-item.d.ts -> types/form-item.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { VXETableComponent } from './component'",
          "3: import { RenderParams, RenderOptions, OptionProps, OptionGroupProps } from './v-x-e-table'",
          "",
          "[Removed Lines]",
          "2: import { Form } from './form'",
          "",
          "[Added Lines]",
          "2: import { Form, FormRule } from './form'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   itemRender?: FormItemRenderOptions;",
          "122: }",
          "124: export interface FormItemTitleOptions {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   rules: FormRule[]",
          "",
          "---------------"
        ],
        "types/v-x-e-table/config.d.ts||types/v-x-e-table/config.d.ts": [
          "File: types/v-x-e-table/config.d.ts -> types/v-x-e-table/config.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts": [
          "File: types/v-x-e-table/index.d.ts -> types/v-x-e-table/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ModalController } from '../modal'",
          "2: import { SaveFileFunction, ReadFileFunction, PrintFunction } from '../module/export'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { SizeType } from '../component'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: import { VxeGlobalFormats } from './formats'",
          "8: import { VxeGlobalMenus } from './menus'",
          "9: import { VxeGlobalValidators } from './validators'",
          "14: export type VxeGlobalI18n = (key: string, args?: any) => number | string;",
          "15: export type VxeGlobalTranslate = (key: string, args?: any) => string;",
          "16: export type VxeGlobalUse = (plugin: VXETablePluginObject, ...options: any[]) => VXETableCore;",
          "",
          "[Removed Lines]",
          "10: import { VxeGlobalConfigMethod } from './config'",
          "",
          "[Added Lines]",
          "14: interface DefaultOptions {",
          "15:   size?: SizeType;",
          "16:   [key: string]: any;",
          "17: }",
          "19: export interface VXETableConfigOptions {",
          "23:   authId?: string",
          "24:   size?: SizeType;",
          "25:   zIndex?: number;",
          "26:   version?: number;",
          "27:   emptyCell?: string;",
          "28:   icon?: {",
          "29:     [key: string]: string;",
          "30:   };",
          "31:   table?: any;",
          "32:   grid?: any;",
          "33:   export?: {",
          "34:     types?: {",
          "35:       [key: string]: 0 | 1 | 2;",
          "36:     }",
          "37:     [key: string]: any;",
          "38:   };",
          "39:   tooltip?: DefaultOptions;",
          "40:   pager?: any;",
          "41:   form?: DefaultOptions;",
          "42:   input?: DefaultOptions;",
          "43:   textarea?: DefaultOptions;",
          "44:   select?: DefaultOptions;",
          "45:   toolbar?: any;",
          "46:   button?: DefaultOptions;",
          "47:   radio?: DefaultOptions;",
          "48:   checkbox?: DefaultOptions;",
          "49:   switch?: DefaultOptions;",
          "50:   modal?: DefaultOptions;",
          "51:   list?: DefaultOptions;",
          "52:   translate?(key: string, args?: any): string;",
          "53:   i18n?(key: string, args?: any): string;",
          "54:   [key: string]: any;",
          "55: }",
          "57: export type VxeGlobalConfigMethod = (options?: VXETableConfigOptions) => VxeGlobalStore",
          "62: export type VXETableSetupOptions = (options?: VXETableConfigOptions) => Required<VXETableConfigOptions>",
          "66: export type VxeGlobalSetup = (options?: VXETableConfigOptions) => Required<VXETableConfigOptions>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: }",
          "25: export const globalStore: VxeGlobalStore",
          "28: export const setConfig: VxeGlobalConfigMethod",
          "29: export const interceptor: VxeGlobalInterceptor",
          "30: export const renderer: VxeGlobalRenderer",
          "31: export const commands: VxeGlobalCommands",
          "",
          "[Removed Lines]",
          "27: export const config: VxeGlobalConfigMethod",
          "",
          "[Added Lines]",
          "86: export const config: VXETableSetupOptions",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "40: export const use: VxeGlobalUse",
          "48: export interface VXETablePluginObject {",
          "49:   install(vxetable: VXETableCore, ...options: any[]): void;",
          "",
          "[Removed Lines]",
          "46: export const setup: VxeGlobalConfigMethod",
          "",
          "[Added Lines]",
          "104: export const setup: VXETableSetupOptions",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:   t: VxeGlobalI18n;",
          "120:   _t: VxeGlobalTranslate;",
          "127:   v: VXETableVersion;",
          "133: }",
          "",
          "[Removed Lines]",
          "122:   config: VxeGlobalConfigMethod;",
          "132:   setup: VxeGlobalConfigMethod;",
          "",
          "[Added Lines]",
          "184:   config: VXETableSetupOptions;",
          "194:   setup: VXETableSetupOptions;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143: export * from './formats'",
          "144: export * from './menus'",
          "145: export * from './validators'",
          "148: export default VXETable",
          "",
          "[Removed Lines]",
          "146: export * from './config'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts": [
          "File: types/v-x-e-table/renderer.d.ts -> types/v-x-e-table/renderer.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   itemResetMethod?(params: FormItemResetParams): void;",
          "81:   renderEmpty?(h: CreateElement, renderOpts: TableEmptyRender, params: EmptyRenderParams): SlotVNodeType | SlotVNodeType[];",
          "83:   [key: string]: any;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   renderTableEmptyView?(h: CreateElement, renderOpts: TableEmptyRender, params: EmptyRenderParams): SlotVNodeType | SlotVNodeType[];",
          "",
          "---------------"
        ]
      }
    }
  ]
}