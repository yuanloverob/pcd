{
  "cve_id": "CVE-2022-24775",
  "cve_desc": "guzzlehttp/psr7 is a PSR-7 HTTP message library. Versions prior to 1.8.4 and 2.1.1 are vulnerable to improper header parsing. An attacker could sneak in a new line character and pass untrusted values. The issue is patched in 1.8.4 and 2.1.1. There are currently no known workarounds.",
  "repo": "guzzle/psr7",
  "patch_hash": "e55afaa3fc138c89adf3b55a8ba20dc60d17f1f1",
  "patch_info": {
    "commit_hash": "e55afaa3fc138c89adf3b55a8ba20dc60d17f1f1",
    "repo": "guzzle/psr7",
    "commit_url": "https://github.com/guzzle/psr7/pull/485/commits/e55afaa3fc138c89adf3b55a8ba20dc60d17f1f1",
    "files": [
      "CHANGELOG.md",
      "composer.json",
      "src/MessageTrait.php",
      "tests/RequestTest.php"
    ],
    "message": "Release 2.1.1",
    "before_after_code_files": [
      "src/MessageTrait.php||src/MessageTrait.php",
      "tests/RequestTest.php||tests/RequestTest.php"
    ]
  },
  "patch_diff": {
    "src/MessageTrait.php||src/MessageTrait.php": [
      "File: src/MessageTrait.php -> src/MessageTrait.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "171:     private function normalizeHeaderValue($value): array",
      "172:     {",
      "173:         if (!is_array($value)) {",
      "175:         }",
      "177:         if (count($value) === 0) {",
      "178:             throw new \\InvalidArgumentException('Header value can not be an empty array.');",
      "179:         }",
      "182:     }",
      "",
      "[Removed Lines]",
      "174:             return $this->trimHeaderValues([$value]);",
      "181:         return $this->trimHeaderValues($value);",
      "",
      "[Added Lines]",
      "174:             return $this->trimAndValidateHeaderValues([$value]);",
      "181:         return $this->trimAndValidateHeaderValues($value);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "199:     {",
      "200:         return array_map(function ($value) {",
      "201:             if (!is_scalar($value) && null !== $value) {",
      "",
      "[Removed Lines]",
      "198:     private function trimHeaderValues(array $values): array",
      "",
      "[Added Lines]",
      "198:     private function trimAndValidateHeaderValues(array $values): array",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "205:                 ));",
      "206:             }",
      "209:         }, array_values($values));",
      "210:     }",
      "",
      "[Removed Lines]",
      "208:             return trim((string) $value, \" \\t\");",
      "",
      "[Added Lines]",
      "208:             $trimmed = trim((string) $value, \" \\t\");",
      "209:             $this->assertValue($trimmed);",
      "211:             return $trimmed;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "232:             );",
      "233:         }",
      "234:     }",
      "235: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249:     private function assertValue(string $value): void",
      "250:     {",
      "262:         if (! preg_match('/^(?:[\\x21-\\x7E\\x80-\\xFF](?:[\\x20\\x09]+[\\x21-\\x7E\\x80-\\xFF])?)*$/', $value)) {",
      "263:             throw new \\InvalidArgumentException(sprintf('\"%s\" is not valid header value', $value));",
      "264:         }",
      "265:     }",
      "",
      "---------------"
    ],
    "tests/RequestTest.php||tests/RequestTest.php": [
      "File: tests/RequestTest.php -> tests/RequestTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "293:         $r = $r->withUri(new Uri('http://foo.com:8125/bar'));",
      "294:         self::assertSame('foo.com:8125', $r->getHeaderLine('host'));",
      "295:     }",
      "296: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "300:     public function testContainsNotAllowedCharsOnHeaderValue(string $value): void",
      "301:     {",
      "302:         $this->expectExceptionMessage(sprintf('\"%s\" is not valid header value', $value));",
      "303:         $r = new Request(",
      "304:             'GET',",
      "305:             'http://foo.com/baz?bar=bam',",
      "306:             [",
      "307:                 'testing' => $value",
      "308:             ]",
      "309:         );",
      "310:     }",
      "312:     public function provideHeaderValuesContainingNotAllowedChars(): iterable",
      "313:     {",
      "315:         $tests = [",
      "316:             [\"new\\nline\"],",
      "317:             [\"new\\r\\nline\"],",
      "318:             [\"new\\rline\"],",
      "321:             [\"new\\r\\n line\"],",
      "322:         ];",
      "324:         for ($i = 0; $i <= 0xff; $i++) {",
      "325:             if (\\chr($i) == \"\\t\") {",
      "326:                 continue;",
      "327:             }",
      "328:             if (\\chr($i) == \" \") {",
      "329:                 continue;",
      "330:             }",
      "331:             if ($i >= 0x21 && $i <= 0x7e) {",
      "332:                 continue;",
      "333:             }",
      "334:             if ($i >= 0x80) {",
      "335:                 continue;",
      "336:             }",
      "338:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
      "339:         }",
      "341:         return $tests;",
      "342:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "53491b6394cdcb66880063b82c0b16cf082711eb",
      "candidate_info": {
        "commit_hash": "53491b6394cdcb66880063b82c0b16cf082711eb",
        "repo": "guzzle/psr7",
        "commit_url": "https://github.com/guzzle/psr7/commit/53491b6394cdcb66880063b82c0b16cf082711eb",
        "files": [
          "CHANGELOG.md",
          "composer.json",
          "src/MessageTrait.php",
          "tests/RequestTest.php"
        ],
        "message": "Release 2.1.1 (#485)\n\nCo-authored-by: Tim D\u00fcsterhus <tim@bastelstu.be>",
        "before_after_code_files": [
          "src/MessageTrait.php||src/MessageTrait.php",
          "tests/RequestTest.php||tests/RequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/guzzle/psr7/pull/485"
        ],
        "olp_code_files": {
          "patch": [
            "src/MessageTrait.php||src/MessageTrait.php",
            "tests/RequestTest.php||tests/RequestTest.php"
          ],
          "candidate": [
            "src/MessageTrait.php||src/MessageTrait.php",
            "tests/RequestTest.php||tests/RequestTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/MessageTrait.php||src/MessageTrait.php": [
          "File: src/MessageTrait.php -> src/MessageTrait.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     private function normalizeHeaderValue($value): array",
          "172:     {",
          "173:         if (!is_array($value)) {",
          "175:         }",
          "177:         if (count($value) === 0) {",
          "178:             throw new \\InvalidArgumentException('Header value can not be an empty array.');",
          "179:         }",
          "182:     }",
          "",
          "[Removed Lines]",
          "174:             return $this->trimHeaderValues([$value]);",
          "181:         return $this->trimHeaderValues($value);",
          "",
          "[Added Lines]",
          "174:             return $this->trimAndValidateHeaderValues([$value]);",
          "181:         return $this->trimAndValidateHeaderValues($value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:     {",
          "200:         return array_map(function ($value) {",
          "201:             if (!is_scalar($value) && null !== $value) {",
          "",
          "[Removed Lines]",
          "198:     private function trimHeaderValues(array $values): array",
          "",
          "[Added Lines]",
          "198:     private function trimAndValidateHeaderValues(array $values): array",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:                 ));",
          "206:             }",
          "209:         }, array_values($values));",
          "210:     }",
          "",
          "[Removed Lines]",
          "208:             return trim((string) $value, \" \\t\");",
          "",
          "[Added Lines]",
          "208:             $trimmed = trim((string) $value, \" \\t\");",
          "209:             $this->assertValue($trimmed);",
          "211:             return $trimmed;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:             );",
          "233:         }",
          "234:     }",
          "235: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:     private function assertValue(string $value): void",
          "250:     {",
          "262:         if (! preg_match('/^(?:[\\x21-\\x7E\\x80-\\xFF](?:[\\x20\\x09]+[\\x21-\\x7E\\x80-\\xFF])?)*$/', $value)) {",
          "263:             throw new \\InvalidArgumentException(sprintf('\"%s\" is not valid header value', $value));",
          "264:         }",
          "265:     }",
          "",
          "---------------"
        ],
        "tests/RequestTest.php||tests/RequestTest.php": [
          "File: tests/RequestTest.php -> tests/RequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:         $r = $r->withUri(new Uri('http://foo.com:8125/bar'));",
          "294:         self::assertSame('foo.com:8125', $r->getHeaderLine('host'));",
          "295:     }",
          "296: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:     public function testContainsNotAllowedCharsOnHeaderValue(string $value): void",
          "301:     {",
          "302:         $this->expectException(\\InvalidArgumentException::class);",
          "303:         $this->expectExceptionMessage(sprintf('\"%s\" is not valid header value', $value));",
          "305:         $r = new Request(",
          "306:             'GET',",
          "307:             'http://foo.com/baz?bar=bam',",
          "308:             [",
          "309:                 'testing' => $value",
          "310:             ]",
          "311:         );",
          "312:     }",
          "314:     public function provideHeaderValuesContainingNotAllowedChars(): iterable",
          "315:     {",
          "317:         $tests = [",
          "318:             [\"new\\nline\"],",
          "319:             [\"new\\r\\nline\"],",
          "320:             [\"new\\rline\"],",
          "323:             [\"new\\r\\n line\"],",
          "324:         ];",
          "326:         for ($i = 0; $i <= 0xff; $i++) {",
          "327:             if (\\chr($i) == \"\\t\") {",
          "328:                 continue;",
          "329:             }",
          "330:             if (\\chr($i) == \" \") {",
          "331:                 continue;",
          "332:             }",
          "333:             if ($i >= 0x21 && $i <= 0x7e) {",
          "334:                 continue;",
          "335:             }",
          "336:             if ($i >= 0x80) {",
          "337:                 continue;",
          "338:             }",
          "340:             $tests[] = [\"foo\" . \\chr($i) . \"bar\"];",
          "341:         }",
          "343:         return $tests;",
          "344:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}