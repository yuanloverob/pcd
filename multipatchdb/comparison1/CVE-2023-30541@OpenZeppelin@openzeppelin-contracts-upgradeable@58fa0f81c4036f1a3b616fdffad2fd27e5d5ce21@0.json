{
  "cve_id": "CVE-2023-30541",
  "cve_desc": "OpenZeppelin Contracts is a library for secure smart contract development. A function in the implementation contract may be inaccessible if its selector clashes with one of the proxy's own selectors. Specifically, if the clashing function has a different signature with incompatible ABI encoding, the proxy could revert while attempting to decode the arguments from calldata. The probability of an accidental clash is negligible, but one could be caused deliberately and could cause a reduction in availability. The issue has been fixed in version 4.8.3. As a workaround if a function appears to be inaccessible for this reason, it may be possible to craft the calldata such that ABI decoding does not fail at the proxy and the function is properly proxied through.",
  "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
  "patch_hash": "58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21",
  "patch_info": {
    "commit_hash": "58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21",
    "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
    "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21",
    "files": [
      ".gitmodules",
      "CHANGELOG.md",
      "contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol",
      "contracts/interfaces/IERC1967Upgradeable.sol",
      "contracts/mocks/ClashingImplementationUpgradeable.sol",
      "contracts/package.json",
      "contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
      "contracts/proxy/README.adoc",
      "lib/forge-std",
      "package-lock.json",
      "package.json",
      "test/governance/compatibility/GovernorCompatibilityBravo.test.js",
      "test/proxy/transparent/ProxyAdmin.test.js",
      "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
      "test/proxy/transparent/TransparentUpgradeableProxy.test.js"
    ],
    "message": "Transpile 7415e3ca",
    "before_after_code_files": [
      "contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol||contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol",
      "contracts/interfaces/IERC1967Upgradeable.sol||contracts/interfaces/IERC1967Upgradeable.sol",
      "contracts/mocks/ClashingImplementationUpgradeable.sol||contracts/mocks/ClashingImplementationUpgradeable.sol",
      "contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol||contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
      "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js",
      "test/proxy/transparent/ProxyAdmin.test.js||test/proxy/transparent/ProxyAdmin.test.js",
      "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js||test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
      "test/proxy/transparent/TransparentUpgradeableProxy.test.js||test/proxy/transparent/TransparentUpgradeableProxy.test.js"
    ]
  },
  "patch_diff": {
    "contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol||contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol": [
      "File: contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol -> contracts/governance/compatibility/GovernorCompatibilityBravoUpgradeable.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:         bytes[] memory calldatas,",
      "76:         string memory description",
      "77:     ) public virtual override returns (uint256) {",
      "78:         _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);",
      "79:         return propose(targets, values, _encodeCalldata(signatures, calldatas), description);",
      "80:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:         require(signatures.length == calldatas.length, \"GovernorBravo: invalid signatures length\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:         returns (bytes[] memory)",
      "131:     {",
      "132:         bytes[] memory fullcalldatas = new bytes[](calldatas.length);",
      "135:             fullcalldatas[i] = bytes(signatures[i]).length == 0",
      "136:                 ? calldatas[i]",
      "137:                 : abi.encodePacked(bytes4(keccak256(bytes(signatures[i]))), calldatas[i]);",
      "",
      "[Removed Lines]",
      "134:         for (uint256 i = 0; i < signatures.length; ++i) {",
      "",
      "[Added Lines]",
      "138:         for (uint256 i = 0; i < fullcalldatas.length; ++i) {",
      "",
      "---------------"
    ],
    "contracts/interfaces/IERC1967Upgradeable.sol||contracts/interfaces/IERC1967Upgradeable.sol": [
      "File: contracts/interfaces/IERC1967Upgradeable.sol -> contracts/interfaces/IERC1967Upgradeable.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: pragma solidity ^0.8.0;",
      "11: interface IERC1967Upgradeable {",
      "15:     event Upgraded(address indexed implementation);",
      "20:     event AdminChanged(address previousAdmin, address newAdmin);",
      "25:     event BeaconUpgraded(address indexed beacon);",
      "26: }",
      "",
      "---------------"
    ],
    "contracts/mocks/ClashingImplementationUpgradeable.sol||contracts/mocks/ClashingImplementationUpgradeable.sol": [
      "File: contracts/mocks/ClashingImplementationUpgradeable.sol -> contracts/mocks/ClashingImplementationUpgradeable.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:     function __ClashingImplementation_init_unchained() internal onlyInitializing {",
      "16:     }",
      "18:         return 0x0000000000000000000000000000000011111142;",
      "19:     }",
      "",
      "[Removed Lines]",
      "17:     function admin() external pure returns (address) {",
      "",
      "[Added Lines]",
      "16:     function admin() external payable returns (address) {",
      "",
      "---------------"
    ],
    "contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol||contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": [
      "File: contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol -> contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: pragma solidity ^0.8.2;",
      "6: import \"../beacon/IBeaconUpgradeable.sol\";",
      "7: import \"../../interfaces/draft-IERC1822Upgradeable.sol\";",
      "8: import \"../../utils/AddressUpgradeable.sol\";",
      "9: import \"../../utils/StorageSlotUpgradeable.sol\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: import \"../../interfaces/IERC1967Upgradeable.sol\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     function __ERC1967Upgrade_init() internal onlyInitializing {",
      "22:     }",
      "",
      "[Removed Lines]",
      "20: abstract contract ERC1967UpgradeUpgradeable is Initializable {",
      "",
      "[Added Lines]",
      "21: abstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;",
      "",
      "[Removed Lines]",
      "39:     event Upgraded(address indexed implementation);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "112:     bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;",
      "",
      "[Removed Lines]",
      "117:     event AdminChanged(address previousAdmin, address newAdmin);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "148:     bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;",
      "",
      "[Removed Lines]",
      "153:     event BeaconUpgraded(address indexed beacon);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js": [
      "File: test/governance/compatibility/GovernorCompatibilityBravo.test.js -> test/governance/compatibility/GovernorCompatibilityBravo.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:     );",
      "224:   });",
      "226:   describe('should revert', function () {",
      "227:     describe('on propose', function () {",
      "228:       it('if proposal does not meet proposalThreshold', async function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:   it('with inconsistent array size for selector and arguments', async function () {",
      "227:     const target = this.receiver.address;",
      "228:     this.helper.setProposal(",
      "229:       {",
      "230:         targets: [target, target],",
      "231:         values: [0, 0],",
      "232:         signatures: ['mockFunction()'], // One signature",
      "233:         data: ['0x', this.receiver.contract.methods.mockFunctionWithArgs(17, 42).encodeABI()], // Two data entries",
      "234:       },",
      "235:       '<proposal description>',",
      "236:     );",
      "238:     await expectRevert(this.helper.propose({ from: proposer }), 'GovernorBravo: invalid signatures length');",
      "239:   });",
      "",
      "---------------"
    ],
    "test/proxy/transparent/ProxyAdmin.test.js||test/proxy/transparent/ProxyAdmin.test.js": [
      "File: test/proxy/transparent/ProxyAdmin.test.js -> test/proxy/transparent/ProxyAdmin.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: const ImplV2 = artifacts.require('DummyImplementationV2');",
      "7: const ProxyAdmin = artifacts.require('ProxyAdmin');",
      "8: const TransparentUpgradeableProxy = artifacts.require('TransparentUpgradeableProxy');",
      "10: contract('ProxyAdmin', function (accounts) {",
      "11:   const [proxyAdminOwner, newAdmin, anotherAccount] = accounts;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: const ITransparentUpgradeableProxy = artifacts.require('ITransparentUpgradeableProxy');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "18:   beforeEach(async function () {",
      "19:     const initializeData = Buffer.from('');",
      "20:     this.proxyAdmin = await ProxyAdmin.new({ from: proxyAdminOwner });",
      "22:       this.implementationV1.address,",
      "23:       this.proxyAdmin.address,",
      "24:       initializeData,",
      "25:       { from: proxyAdminOwner },",
      "26:     );",
      "27:   });",
      "29:   it('has an owner', async function () {",
      "",
      "[Removed Lines]",
      "21:     this.proxy = await TransparentUpgradeableProxy.new(",
      "",
      "[Added Lines]",
      "22:     const proxy = await TransparentUpgradeableProxy.new(",
      "28:     this.proxy = await ITransparentUpgradeableProxy.at(proxy.address);",
      "",
      "---------------"
    ],
    "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js||test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js": [
      "File: test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js -> test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:   describe('implementation', function () {",
      "36:     it('returns the current implementation address', async function () {",
      "39:       expect(implementation).to.be.equal(this.implementationV0);",
      "40:     });",
      "",
      "[Removed Lines]",
      "37:       const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
      "",
      "[Added Lines]",
      "37:       const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:         it('upgrades to the requested implementation', async function () {",
      "56:           await this.proxy.upgradeTo(this.implementationV1, { from });",
      "59:           expect(implementation).to.be.equal(this.implementationV1);",
      "60:         });",
      "",
      "[Removed Lines]",
      "58:           const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
      "",
      "[Added Lines]",
      "58:           const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108:           });",
      "110:           it('upgrades to the requested implementation', async function () {",
      "112:             expect(implementation).to.be.equal(this.behavior.address);",
      "113:           });",
      "",
      "[Removed Lines]",
      "111:             const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
      "",
      "[Added Lines]",
      "111:             const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "173:           });",
      "175:           it('upgrades to the requested version and emits an event', async function () {",
      "177:             expect(implementation).to.be.equal(this.behaviorV1.address);",
      "178:             expectEvent(this.receipt, 'Upgraded', { implementation: this.behaviorV1.address });",
      "179:           });",
      "",
      "[Removed Lines]",
      "176:             const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
      "",
      "[Added Lines]",
      "176:             const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "199:             });",
      "201:             it('upgrades to the requested version and emits an event', async function () {",
      "203:               expect(implementation).to.be.equal(this.behaviorV2.address);",
      "204:               expectEvent(this.receipt, 'Upgraded', { implementation: this.behaviorV2.address });",
      "205:             });",
      "",
      "[Removed Lines]",
      "202:               const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
      "",
      "[Added Lines]",
      "202:               const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "228:               });",
      "230:               it('upgrades to the requested version and emits an event', async function () {",
      "232:                 expect(implementation).to.be.equal(this.behaviorV3.address);",
      "233:                 expectEvent(this.receipt, 'Upgraded', { implementation: this.behaviorV3.address });",
      "234:               });",
      "",
      "[Removed Lines]",
      "231:                 const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
      "",
      "[Added Lines]",
      "231:                 const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "274:         });",
      "276:         it('assigns new proxy admin', async function () {",
      "278:           expect(newProxyAdmin).to.be.equal(anotherAccount);",
      "279:         });",
      "",
      "[Removed Lines]",
      "277:           const newProxyAdmin = await this.proxy.admin.call({ from: newAdmin });",
      "",
      "[Added Lines]",
      "277:           const newProxyAdmin = await this.proxy.admin({ from: newAdmin });",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "333:       );",
      "334:     });",
      "337:       it('when sender is proxy admin should run the proxy function', async function () {",
      "339:         expect(value).to.be.equal(proxyAdminAddress);",
      "340:       });",
      "342:       it('when sender is other should delegate to implementation', async function () {",
      "344:         expect(value).to.be.equal('0x0000000000000000000000000000000011111142');",
      "345:       });",
      "346:     });",
      "",
      "[Removed Lines]",
      "336:     context('when function names clash', function () {",
      "338:         const value = await this.proxy.admin.call({ from: proxyAdminAddress });",
      "343:         const value = await this.proxy.admin.call({ from: anotherAccount });",
      "",
      "[Added Lines]",
      "336:     describe('when function names clash', function () {",
      "338:         const value = await this.proxy.admin({ from: proxyAdminAddress, value: 0 });",
      "343:         const value = await this.proxy.admin({ from: anotherAccount, value: 0 });",
      "344:         expect(value).to.be.equal('0x0000000000000000000000000000000011111142');",
      "345:       });",
      "347:       it('when sender is proxy admin value should not be accepted', async function () {",
      "348:         await expectRevert.unspecified(this.proxy.admin({ from: proxyAdminAddress, value: 1 }));",
      "349:       });",
      "351:       it('when sender is other value should be accepted', async function () {",
      "352:         const value = await this.proxy.admin({ from: anotherAccount, value: 1 });",
      "",
      "---------------"
    ],
    "test/proxy/transparent/TransparentUpgradeableProxy.test.js||test/proxy/transparent/TransparentUpgradeableProxy.test.js": [
      "File: test/proxy/transparent/TransparentUpgradeableProxy.test.js -> test/proxy/transparent/TransparentUpgradeableProxy.test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: const shouldBehaveLikeTransparentUpgradeableProxy = require('./TransparentUpgradeableProxy.behaviour');",
      "4: const TransparentUpgradeableProxy = artifacts.require('TransparentUpgradeableProxy');",
      "6: contract('TransparentUpgradeableProxy', function (accounts) {",
      "7:   const [proxyAdminAddress, proxyAdminOwner] = accounts;",
      "9:   const createProxy = async function (logic, admin, initData, opts) {",
      "11:   };",
      "13:   shouldBehaveLikeProxy(createProxy, proxyAdminAddress, proxyAdminOwner);",
      "",
      "[Removed Lines]",
      "10:     return TransparentUpgradeableProxy.new(logic, admin, initData, opts);",
      "",
      "[Added Lines]",
      "5: const ITransparentUpgradeableProxy = artifacts.require('ITransparentUpgradeableProxy');",
      "11:     const { address } = await TransparentUpgradeableProxy.new(logic, admin, initData, opts);",
      "12:     return ITransparentUpgradeableProxy.at(address);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a25c1940ca220686588c4af3ec526f725fe2582",
      "candidate_info": {
        "commit_hash": "0a25c1940ca220686588c4af3ec526f725fe2582",
        "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/0a25c1940ca220686588c4af3ec526f725fe2582",
        "files": [
          "CHANGELOG.md",
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "contracts/interfaces/IERC1967.sol",
          "contracts/package.json",
          "contracts/proxy/ERC1967/ERC1967Upgrade.sol",
          "contracts/proxy/transparent/ProxyAdmin.sol",
          "contracts/proxy/transparent/TransparentUpgradeableProxy.sol",
          "package-lock.json",
          "package.json"
        ],
        "message": "4.8.3",
        "before_after_code_files": [
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "contracts/interfaces/IERC1967.sol||contracts/interfaces/IERC1967.sol",
          "contracts/proxy/ERC1967/ERC1967Upgrade.sol||contracts/proxy/ERC1967/ERC1967Upgrade.sol",
          "contracts/proxy/transparent/ProxyAdmin.sol||contracts/proxy/transparent/ProxyAdmin.sol",
          "contracts/proxy/transparent/TransparentUpgradeableProxy.sol||contracts/proxy/transparent/TransparentUpgradeableProxy.sol"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol": [
          "File: contracts/governance/compatibility/GovernorCompatibilityBravo.sol -> contracts/governance/compatibility/GovernorCompatibilityBravo.sol"
        ],
        "contracts/interfaces/IERC1967.sol||contracts/interfaces/IERC1967.sol": [
          "File: contracts/interfaces/IERC1967.sol -> contracts/interfaces/IERC1967.sol"
        ],
        "contracts/proxy/ERC1967/ERC1967Upgrade.sol||contracts/proxy/ERC1967/ERC1967Upgrade.sol": [
          "File: contracts/proxy/ERC1967/ERC1967Upgrade.sol -> contracts/proxy/ERC1967/ERC1967Upgrade.sol"
        ],
        "contracts/proxy/transparent/ProxyAdmin.sol||contracts/proxy/transparent/ProxyAdmin.sol": [
          "File: contracts/proxy/transparent/ProxyAdmin.sol -> contracts/proxy/transparent/ProxyAdmin.sol"
        ],
        "contracts/proxy/transparent/TransparentUpgradeableProxy.sol||contracts/proxy/transparent/TransparentUpgradeableProxy.sol": [
          "File: contracts/proxy/transparent/TransparentUpgradeableProxy.sol -> contracts/proxy/transparent/TransparentUpgradeableProxy.sol"
        ]
      }
    },
    {
      "candidate_hash": "c01ea99123a9be7494557b6b2ca5942c6be487f9",
      "candidate_info": {
        "commit_hash": "c01ea99123a9be7494557b6b2ca5942c6be487f9",
        "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/c01ea99123a9be7494557b6b2ca5942c6be487f9",
        "files": [
          ".changeset/thirty-shrimps-mix.md",
          "contracts/interfaces/IERC1967.sol",
          "contracts/proxy/ERC1967/ERC1967Upgrade.sol",
          "contracts/proxy/transparent/ProxyAdmin.sol",
          "contracts/proxy/transparent/TransparentUpgradeableProxy.sol",
          "test/proxy/transparent/ProxyAdmin.test.js",
          "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
          "test/proxy/transparent/TransparentUpgradeableProxy.test.js"
        ],
        "message": "Fix TransparentUpgradeableProxy's transparency (#4154)\n\nCo-authored-by: Francisco <fg@frang.io>\nCo-authored-by: Ernesto Garc\u00eda <ernestognw@gmail.com>\n(cherry picked from commit 5523c1482bd0a503e4c4dfe821bd2f6b523f3c86)",
        "before_after_code_files": [
          "contracts/interfaces/IERC1967.sol||contracts/interfaces/IERC1967.sol",
          "contracts/proxy/ERC1967/ERC1967Upgrade.sol||contracts/proxy/ERC1967/ERC1967Upgrade.sol",
          "contracts/proxy/transparent/ProxyAdmin.sol||contracts/proxy/transparent/ProxyAdmin.sol",
          "contracts/proxy/transparent/TransparentUpgradeableProxy.sol||contracts/proxy/transparent/TransparentUpgradeableProxy.sol",
          "test/proxy/transparent/ProxyAdmin.test.js||test/proxy/transparent/ProxyAdmin.test.js",
          "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js||test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
          "test/proxy/transparent/TransparentUpgradeableProxy.test.js||test/proxy/transparent/TransparentUpgradeableProxy.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "test/proxy/transparent/ProxyAdmin.test.js||test/proxy/transparent/ProxyAdmin.test.js",
            "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js||test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
            "test/proxy/transparent/TransparentUpgradeableProxy.test.js||test/proxy/transparent/TransparentUpgradeableProxy.test.js"
          ],
          "candidate": [
            "test/proxy/transparent/ProxyAdmin.test.js||test/proxy/transparent/ProxyAdmin.test.js",
            "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js||test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
            "test/proxy/transparent/TransparentUpgradeableProxy.test.js||test/proxy/transparent/TransparentUpgradeableProxy.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/interfaces/IERC1967.sol||contracts/interfaces/IERC1967.sol": [
          "File: contracts/interfaces/IERC1967.sol -> contracts/interfaces/IERC1967.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: pragma solidity ^0.8.0;",
          "10: interface IERC1967 {",
          "14:     event Upgraded(address indexed implementation);",
          "19:     event AdminChanged(address previousAdmin, address newAdmin);",
          "24:     event BeaconUpgraded(address indexed beacon);",
          "25: }",
          "",
          "---------------"
        ],
        "contracts/proxy/ERC1967/ERC1967Upgrade.sol||contracts/proxy/ERC1967/ERC1967Upgrade.sol": [
          "File: contracts/proxy/ERC1967/ERC1967Upgrade.sol -> contracts/proxy/ERC1967/ERC1967Upgrade.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: pragma solidity ^0.8.2;",
          "6: import \"../beacon/IBeacon.sol\";",
          "7: import \"../../interfaces/draft-IERC1822.sol\";",
          "8: import \"../../utils/Address.sol\";",
          "9: import \"../../utils/StorageSlot.sol\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import \"../../interfaces/IERC1967.sol\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:     bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;",
          "",
          "[Removed Lines]",
          "19: abstract contract ERC1967Upgrade {",
          "",
          "[Added Lines]",
          "20: abstract contract ERC1967Upgrade is IERC1967 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;",
          "",
          "[Removed Lines]",
          "33:     event Upgraded(address indexed implementation);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;",
          "",
          "[Removed Lines]",
          "111:     event AdminChanged(address previousAdmin, address newAdmin);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:     bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;",
          "",
          "[Removed Lines]",
          "147:     event BeaconUpgraded(address indexed beacon);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "contracts/proxy/transparent/ProxyAdmin.sol||contracts/proxy/transparent/ProxyAdmin.sol": [
          "File: contracts/proxy/transparent/ProxyAdmin.sol -> contracts/proxy/transparent/ProxyAdmin.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");",
          "",
          "[Removed Lines]",
          "21:     function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {",
          "",
          "[Added Lines]",
          "21:     function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");",
          "",
          "[Removed Lines]",
          "36:     function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {",
          "",
          "[Added Lines]",
          "36:     function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:         proxy.changeAdmin(newAdmin);",
          "53:     }",
          "",
          "[Removed Lines]",
          "51:     function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {",
          "",
          "[Added Lines]",
          "51:     function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:         proxy.upgradeTo(implementation);",
          "64:     }",
          "",
          "[Removed Lines]",
          "62:     function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {",
          "",
          "[Added Lines]",
          "62:     function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "74:     function upgradeAndCall(",
          "76:         address implementation,",
          "77:         bytes memory data",
          "78:     ) public payable virtual onlyOwner {",
          "",
          "[Removed Lines]",
          "75:         TransparentUpgradeableProxy proxy,",
          "",
          "[Added Lines]",
          "75:         ITransparentUpgradeableProxy proxy,",
          "",
          "---------------"
        ],
        "contracts/proxy/transparent/TransparentUpgradeableProxy.sol||contracts/proxy/transparent/TransparentUpgradeableProxy.sol": [
          "File: contracts/proxy/transparent/TransparentUpgradeableProxy.sol -> contracts/proxy/transparent/TransparentUpgradeableProxy.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import \"../ERC1967/ERC1967Proxy.sol\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: interface ITransparentUpgradeableProxy is IERC1967 {",
          "15:     function admin() external view returns (address);",
          "17:     function implementation() external view returns (address);",
          "19:     function changeAdmin(address) external;",
          "21:     function upgradeTo(address) external;",
          "23:     function upgradeToAndCall(address, bytes memory) external payable;",
          "24: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         }",
          "51:     }",
          "63:         _requireZeroValue();",
          "65:     }",
          "77:         _requireZeroValue();",
          "79:     }",
          "89:         _requireZeroValue();",
          "90:         _changeAdmin(newAdmin);",
          "91:     }",
          "99:         _requireZeroValue();",
          "100:         _upgradeToAndCall(newImplementation, bytes(\"\"), false);",
          "101:     }",
          "111:         _upgradeToAndCall(newImplementation, data, true);",
          "112:     }",
          "",
          "[Removed Lines]",
          "62:     function admin() external payable ifAdmin returns (address admin_) {",
          "64:         admin_ = _getAdmin();",
          "76:     function implementation() external payable ifAdmin returns (address implementation_) {",
          "78:         implementation_ = _implementation();",
          "88:     function changeAdmin(address newAdmin) external payable virtual ifAdmin {",
          "98:     function upgradeTo(address newImplementation) external payable ifAdmin {",
          "110:     function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {",
          "",
          "[Added Lines]",
          "84:     function _fallback() internal virtual override {",
          "85:         if (msg.sender == _getAdmin()) {",
          "86:             bytes memory ret;",
          "87:             bytes4 selector = msg.sig;",
          "88:             if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {",
          "89:                 ret = _dispatchUpgradeTo();",
          "90:             } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {",
          "91:                 ret = _dispatchUpgradeToAndCall();",
          "92:             } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {",
          "93:                 ret = _dispatchChangeAdmin();",
          "94:             } else if (selector == ITransparentUpgradeableProxy.admin.selector) {",
          "95:                 ret = _dispatchAdmin();",
          "96:             } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {",
          "97:                 ret = _dispatchImplementation();",
          "98:             } else {",
          "99:                 revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");",
          "100:             }",
          "101:             assembly {",
          "102:                 return(add(ret, 0x20), mload(ret))",
          "103:             }",
          "104:         } else {",
          "105:             super._fallback();",
          "106:         }",
          "107:     }",
          "116:     function _dispatchAdmin() private returns (bytes memory) {",
          "119:         address admin = _getAdmin();",
          "120:         return abi.encode(admin);",
          "130:     function _dispatchImplementation() private returns (bytes memory) {",
          "133:         address implementation = _implementation();",
          "134:         return abi.encode(implementation);",
          "142:     function _dispatchChangeAdmin() private returns (bytes memory) {",
          "145:         address newAdmin = abi.decode(msg.data[4:], (address));",
          "148:         return \"\";",
          "154:     function _dispatchUpgradeTo() private returns (bytes memory) {",
          "157:         address newImplementation = abi.decode(msg.data[4:], (address));",
          "160:         return \"\";",
          "168:     function _dispatchUpgradeToAndCall() private returns (bytes memory) {",
          "169:         (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));",
          "172:         return \"\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         return _getAdmin();",
          "119:     }",
          "",
          "[Removed Lines]",
          "124:     function _beforeFallback() internal virtual override {",
          "125:         require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");",
          "126:         super._beforeFallback();",
          "127:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/proxy/transparent/ProxyAdmin.test.js||test/proxy/transparent/ProxyAdmin.test.js": [
          "File: test/proxy/transparent/ProxyAdmin.test.js -> test/proxy/transparent/ProxyAdmin.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: const ImplV2 = artifacts.require('DummyImplementationV2');",
          "7: const ProxyAdmin = artifacts.require('ProxyAdmin');",
          "8: const TransparentUpgradeableProxy = artifacts.require('TransparentUpgradeableProxy');",
          "10: contract('ProxyAdmin', function (accounts) {",
          "11:   const [proxyAdminOwner, newAdmin, anotherAccount] = accounts;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: const ITransparentUpgradeableProxy = artifacts.require('ITransparentUpgradeableProxy');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   beforeEach(async function () {",
          "19:     const initializeData = Buffer.from('');",
          "20:     this.proxyAdmin = await ProxyAdmin.new({ from: proxyAdminOwner });",
          "22:       this.implementationV1.address,",
          "23:       this.proxyAdmin.address,",
          "24:       initializeData,",
          "25:       { from: proxyAdminOwner },",
          "26:     );",
          "27:   });",
          "29:   it('has an owner', async function () {",
          "",
          "[Removed Lines]",
          "21:     this.proxy = await TransparentUpgradeableProxy.new(",
          "",
          "[Added Lines]",
          "22:     const proxy = await TransparentUpgradeableProxy.new(",
          "28:     this.proxy = await ITransparentUpgradeableProxy.at(proxy.address);",
          "",
          "---------------"
        ],
        "test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js||test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js": [
          "File: test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js -> test/proxy/transparent/TransparentUpgradeableProxy.behaviour.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   describe('implementation', function () {",
          "36:     it('returns the current implementation address', async function () {",
          "39:       expect(implementation).to.be.equal(this.implementationV0);",
          "40:     });",
          "",
          "[Removed Lines]",
          "37:       const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
          "",
          "[Added Lines]",
          "37:       const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         it('upgrades to the requested implementation', async function () {",
          "56:           await this.proxy.upgradeTo(this.implementationV1, { from });",
          "59:           expect(implementation).to.be.equal(this.implementationV1);",
          "60:         });",
          "",
          "[Removed Lines]",
          "58:           const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
          "",
          "[Added Lines]",
          "58:           const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:           });",
          "110:           it('upgrades to the requested implementation', async function () {",
          "112:             expect(implementation).to.be.equal(this.behavior.address);",
          "113:           });",
          "",
          "[Removed Lines]",
          "111:             const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
          "",
          "[Added Lines]",
          "111:             const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:           });",
          "175:           it('upgrades to the requested version and emits an event', async function () {",
          "177:             expect(implementation).to.be.equal(this.behaviorV1.address);",
          "178:             expectEvent(this.receipt, 'Upgraded', { implementation: this.behaviorV1.address });",
          "179:           });",
          "",
          "[Removed Lines]",
          "176:             const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
          "",
          "[Added Lines]",
          "176:             const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:             });",
          "201:             it('upgrades to the requested version and emits an event', async function () {",
          "203:               expect(implementation).to.be.equal(this.behaviorV2.address);",
          "204:               expectEvent(this.receipt, 'Upgraded', { implementation: this.behaviorV2.address });",
          "205:             });",
          "",
          "[Removed Lines]",
          "202:               const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
          "",
          "[Added Lines]",
          "202:               const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:               });",
          "230:               it('upgrades to the requested version and emits an event', async function () {",
          "232:                 expect(implementation).to.be.equal(this.behaviorV3.address);",
          "233:                 expectEvent(this.receipt, 'Upgraded', { implementation: this.behaviorV3.address });",
          "234:               });",
          "",
          "[Removed Lines]",
          "231:                 const implementation = await this.proxy.implementation.call({ from: proxyAdminAddress });",
          "",
          "[Added Lines]",
          "231:                 const implementation = await this.proxy.implementation({ from: proxyAdminAddress });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "274:         });",
          "276:         it('assigns new proxy admin', async function () {",
          "278:           expect(newProxyAdmin).to.be.equal(anotherAccount);",
          "279:         });",
          "",
          "[Removed Lines]",
          "277:           const newProxyAdmin = await this.proxy.admin.call({ from: newAdmin });",
          "",
          "[Added Lines]",
          "277:           const newProxyAdmin = await this.proxy.admin({ from: newAdmin });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "336:     describe('when function names clash', function () {",
          "337:       it('when sender is proxy admin should run the proxy function', async function () {",
          "339:         expect(value).to.be.equal(proxyAdminAddress);",
          "340:       });",
          "342:       it('when sender is other should delegate to implementation', async function () {",
          "344:         expect(value).to.be.equal('0x0000000000000000000000000000000011111142');",
          "345:       });",
          "347:       it('when sender is proxy admin value should not be accepted', async function () {",
          "349:       });",
          "351:       it('when sender is other value should be accepted', async function () {",
          "353:         expect(value).to.be.equal('0x0000000000000000000000000000000011111142');",
          "354:       });",
          "355:     });",
          "",
          "[Removed Lines]",
          "338:         const value = await this.proxy.admin.call({ from: proxyAdminAddress, value: 0 });",
          "343:         const value = await this.proxy.admin.call({ from: anotherAccount, value: 0 });",
          "348:         await expectRevert.unspecified(this.proxy.admin.call({ from: proxyAdminAddress, value: 1 }));",
          "352:         const value = await this.proxy.admin.call({ from: anotherAccount, value: 1 });",
          "",
          "[Added Lines]",
          "338:         const value = await this.proxy.admin({ from: proxyAdminAddress, value: 0 });",
          "343:         const value = await this.proxy.admin({ from: anotherAccount, value: 0 });",
          "348:         await expectRevert.unspecified(this.proxy.admin({ from: proxyAdminAddress, value: 1 }));",
          "352:         const value = await this.proxy.admin({ from: anotherAccount, value: 1 });",
          "",
          "---------------"
        ],
        "test/proxy/transparent/TransparentUpgradeableProxy.test.js||test/proxy/transparent/TransparentUpgradeableProxy.test.js": [
          "File: test/proxy/transparent/TransparentUpgradeableProxy.test.js -> test/proxy/transparent/TransparentUpgradeableProxy.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: const shouldBehaveLikeTransparentUpgradeableProxy = require('./TransparentUpgradeableProxy.behaviour');",
          "4: const TransparentUpgradeableProxy = artifacts.require('TransparentUpgradeableProxy');",
          "6: contract('TransparentUpgradeableProxy', function (accounts) {",
          "7:   const [proxyAdminAddress, proxyAdminOwner] = accounts;",
          "9:   const createProxy = async function (logic, admin, initData, opts) {",
          "11:   };",
          "13:   shouldBehaveLikeProxy(createProxy, proxyAdminAddress, proxyAdminOwner);",
          "",
          "[Removed Lines]",
          "10:     return TransparentUpgradeableProxy.new(logic, admin, initData, opts);",
          "",
          "[Added Lines]",
          "5: const ITransparentUpgradeableProxy = artifacts.require('ITransparentUpgradeableProxy');",
          "11:     const { address } = await TransparentUpgradeableProxy.new(logic, admin, initData, opts);",
          "12:     return ITransparentUpgradeableProxy.at(address);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea595f59605534945a3d349a2f86a26fc7d3b9d1",
      "candidate_info": {
        "commit_hash": "ea595f59605534945a3d349a2f86a26fc7d3b9d1",
        "repo": "OpenZeppelin/openzeppelin-contracts-upgradeable",
        "commit_url": "https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/ea595f59605534945a3d349a2f86a26fc7d3b9d1",
        "files": [
          ".changeset/silent-pugs-scream.md",
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "test/governance/compatibility/GovernorCompatibilityBravo.test.js"
        ],
        "message": "Merge pull request from GHSA-93hq-5wgc-jc82\n\nCo-authored-by: Francisco <fg@frang.io>\n(cherry picked from commit 8d633cb7d169f2f8595b273660b00b69e845c2fe)",
        "before_after_code_files": [
          "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js"
          ],
          "candidate": [
            "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js"
          ]
        }
      },
      "candidate_diff": {
        "contracts/governance/compatibility/GovernorCompatibilityBravo.sol||contracts/governance/compatibility/GovernorCompatibilityBravo.sol": [
          "File: contracts/governance/compatibility/GovernorCompatibilityBravo.sol -> contracts/governance/compatibility/GovernorCompatibilityBravo.sol",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         bytes[] memory calldatas,",
          "70:         string memory description",
          "71:     ) public virtual override returns (uint256) {",
          "72:         _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);",
          "73:         return propose(targets, values, _encodeCalldata(signatures, calldatas), description);",
          "74:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:         require(signatures.length == calldatas.length, \"GovernorBravo: invalid signatures length\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:         returns (bytes[] memory)",
          "125:     {",
          "126:         bytes[] memory fullcalldatas = new bytes[](calldatas.length);",
          "129:             fullcalldatas[i] = bytes(signatures[i]).length == 0",
          "130:                 ? calldatas[i]",
          "131:                 : abi.encodePacked(bytes4(keccak256(bytes(signatures[i]))), calldatas[i]);",
          "",
          "[Removed Lines]",
          "128:         for (uint256 i = 0; i < signatures.length; ++i) {",
          "",
          "[Added Lines]",
          "132:         for (uint256 i = 0; i < fullcalldatas.length; ++i) {",
          "",
          "---------------"
        ],
        "test/governance/compatibility/GovernorCompatibilityBravo.test.js||test/governance/compatibility/GovernorCompatibilityBravo.test.js": [
          "File: test/governance/compatibility/GovernorCompatibilityBravo.test.js -> test/governance/compatibility/GovernorCompatibilityBravo.test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     );",
          "224:   });",
          "226:   describe('should revert', function () {",
          "227:     describe('on propose', function () {",
          "228:       it('if proposal does not meet proposalThreshold', async function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:   it('with inconsistent array size for selector and arguments', async function () {",
          "227:     const target = this.receiver.address;",
          "228:     this.helper.setProposal(",
          "229:       {",
          "230:         targets: [target, target],",
          "231:         values: [0, 0],",
          "232:         signatures: ['mockFunction()'], // One signature",
          "233:         data: ['0x', this.receiver.contract.methods.mockFunctionWithArgs(17, 42).encodeABI()], // Two data entries",
          "234:       },",
          "235:       '<proposal description>',",
          "236:     );",
          "238:     await expectRevert(this.helper.propose({ from: proposer }), 'GovernorBravo: invalid signatures length');",
          "239:   });",
          "",
          "---------------"
        ]
      }
    }
  ]
}