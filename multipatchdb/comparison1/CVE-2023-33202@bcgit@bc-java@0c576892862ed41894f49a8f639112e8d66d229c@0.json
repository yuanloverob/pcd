{
  "cve_id": "CVE-2023-33202",
  "cve_desc": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)",
  "repo": "bcgit/bc-java",
  "patch_hash": "0c576892862ed41894f49a8f639112e8d66d229c",
  "patch_info": {
    "commit_hash": "0c576892862ed41894f49a8f639112e8d66d229c",
    "repo": "bcgit/bc-java",
    "commit_url": "https://github.com/bcgit/bc-java/commit/0c576892862ed41894f49a8f639112e8d66d229c",
    "files": [
      "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
      "core/src/main/java/org/bouncycastle/asn1/DERSet.java",
      "core/src/main/java/org/bouncycastle/asn1/DLSet.java"
    ],
    "message": "removed isSorted boolean",
    "before_after_code_files": [
      "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
      "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
      "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
      "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "166:     }",
      "168:     protected final ASN1Encodable[] elements;",
      "171:     protected ASN1Encodable[] sortedElements;",
      "173:     protected ASN1Set()",
      "174:     {",
      "175:         this.elements = ASN1EncodableVector.EMPTY_ELEMENTS;",
      "177:     }",
      "",
      "[Removed Lines]",
      "169:     protected final boolean isSorted;",
      "176:         this.isSorted = true;",
      "",
      "[Added Lines]",
      "175:         this.sortedElements = elements;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:         }",
      "190:         this.elements = new ASN1Encodable[]{ element };",
      "192:     }",
      "",
      "[Removed Lines]",
      "191:         this.isSorted = true;",
      "",
      "[Added Lines]",
      "190:         this.sortedElements = elements;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:         }",
      "217:         this.elements = tmp;",
      "219:     }",
      "",
      "[Removed Lines]",
      "218:         this.isSorted = doSort || tmp.length < 2;",
      "",
      "[Added Lines]",
      "217:         this.sortedElements = (doSort || tmp.length < 2) ? elements : null;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "237:         }",
      "239:         this.elements = tmp;",
      "241:     }",
      "243:     ASN1Set(boolean isSorted, ASN1Encodable[] elements)",
      "244:     {",
      "245:         this.elements = elements;",
      "247:     }",
      "249:     public Enumeration getObjects()",
      "",
      "[Removed Lines]",
      "240:         this.isSorted = doSort || tmp.length < 2;",
      "246:         this.isSorted = isSorted || elements.length < 2;",
      "",
      "[Added Lines]",
      "239:         this.sortedElements = (doSort || tmp.length < 2) ? elements : null;",
      "245:         this.sortedElements = (isSorted || elements.length < 2) ? elements : null;",
      "246:     }",
      "248:     ASN1Set(ASN1Encodable[] elements, ASN1Encodable[] sortedElements)",
      "249:     {",
      "250:         this.elements = elements;",
      "251:         this.sortedElements = sortedElements;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "356:     ASN1Primitive toDERObject()",
      "357:     {",
      "360:         {",
      "371:         }",
      "374:     }",
      "",
      "[Removed Lines]",
      "358:         ASN1Encodable[] tmp;",
      "359:         if (isSorted)",
      "361:             tmp = elements;",
      "362:         }",
      "363:         else",
      "364:         {",
      "365:             if (sortedElements == null)",
      "366:             {",
      "367:                 sortedElements = (ASN1Encodable[])elements.clone();",
      "368:                 sort(sortedElements);",
      "369:             }",
      "370:             tmp = sortedElements;",
      "373:         return new DERSet(true, tmp);",
      "",
      "[Added Lines]",
      "363:         if (sortedElements == null)",
      "365:             sortedElements = (ASN1Encodable[])elements.clone();",
      "366:             sort(sortedElements);",
      "369:         return new DERSet(true, sortedElements);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "380:     ASN1Primitive toDLObject()",
      "381:     {",
      "383:     }",
      "385:     boolean asn1Equals(ASN1Primitive other)",
      "",
      "[Removed Lines]",
      "382:         return new DLSet(isSorted, elements);",
      "",
      "[Added Lines]",
      "378:         return new DLSet(elements, sortedElements);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "483:         if (a0 != b0)",
      "484:         {",
      "485:             return a0 < b0;",
      "",
      "[Removed Lines]",
      "481:         int a0 = a[0] & ~BERTags.CONSTRUCTED & 0xFF;",
      "482:         int b0 = b[0] & ~BERTags.CONSTRUCTED & 0xFF;",
      "",
      "[Added Lines]",
      "477:         int a0 = a[0] & (~BERTags.CONSTRUCTED & 0xff);",
      "478:         int b0 = b[0] & (~BERTags.CONSTRUCTED & 0xff);",
      "",
      "---------------"
    ],
    "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java": [
      "File: core/src/main/java/org/bouncycastle/asn1/DERSet.java -> core/src/main/java/org/bouncycastle/asn1/DERSet.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "135:     ASN1Primitive toDERObject()",
      "136:     {",
      "138:     }",
      "140:     ASN1Primitive toDLObject()",
      "",
      "[Removed Lines]",
      "137:         return isSorted ? this : super.toDERObject();",
      "",
      "[Added Lines]",
      "137:         return (sortedElements != null) ? this : super.toDERObject();",
      "",
      "---------------"
    ],
    "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java": [
      "File: core/src/main/java/org/bouncycastle/asn1/DLSet.java -> core/src/main/java/org/bouncycastle/asn1/DLSet.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:         super(isSorted, elements);",
      "92:     }",
      "94:     private int getContentsLength() throws IOException",
      "95:     {",
      "96:         if (contentsLength < 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:     DLSet(ASN1Encodable[] elements, ASN1Encodable[] sortedElements)",
      "95:     {",
      "96:         super(elements, sortedElements);",
      "97:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96e530f648c5cf1f5e79681b0352c01f140771bd",
      "candidate_info": {
        "commit_hash": "96e530f648c5cf1f5e79681b0352c01f140771bd",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/96e530f648c5cf1f5e79681b0352c01f140771bd",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/BERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java",
          "core/src/test/java/org/bouncycastle/asn1/test/SetTest.java"
        ],
        "message": "Move towards TYPEs for constructed types",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java||core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java||core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java||core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/BERSequence.java||core/src/main/java/org/bouncycastle/asn1/BERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSequence.java||core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSequence.java||core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java||core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java",
          "core/src/test/java/org/bouncycastle/asn1/test/SetTest.java||core/src/test/java/org/bouncycastle/asn1/test/SetTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java||core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java -> core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     extends ASN1Primitive",
          "101:     implements ASN1OctetStringParser",
          "102: {",
          "117:     {",
          "119:         {",
          "121:             {",
          "123:             }",
          "126:         }",
          "135:         {",
          "146:         }",
          "149:         {",
          "158:         }",
          "164:         {",
          "175:         }",
          "178:     }",
          "",
          "[Removed Lines]",
          "103:     byte[]  string;",
          "114:     public static ASN1OctetString getInstance(",
          "115:         ASN1TaggedObject    taggedObject,",
          "116:         boolean             explicit)",
          "118:         if (explicit)",
          "120:             if (!taggedObject.isExplicit())",
          "122:                 throw new IllegalArgumentException(\"object implicit - explicit expected.\");",
          "125:             return getInstance(taggedObject.getObject());",
          "128:         ASN1Primitive o = taggedObject.getObject();",
          "134:         if (taggedObject.isExplicit())",
          "136:             ASN1OctetString singleSegment = getInstance(o);",
          "138:             if (taggedObject instanceof BERTaggedObject)",
          "139:             {",
          "140:                 return new BEROctetString(new ASN1OctetString[]{ singleSegment });",
          "141:             }",
          "145:             return (ASN1OctetString)new BEROctetString(new ASN1OctetString[]{ singleSegment }).toDLObject();",
          "148:         if (o instanceof ASN1OctetString)",
          "150:             ASN1OctetString s = (ASN1OctetString)o;",
          "152:             if (taggedObject instanceof BERTaggedObject)",
          "153:             {",
          "154:                 return s;",
          "155:             }",
          "157:             return (ASN1OctetString)s.toDLObject();",
          "163:         if (o instanceof ASN1Sequence)",
          "165:             ASN1Sequence s = (ASN1Sequence)o;",
          "167:             if (taggedObject instanceof BERTaggedObject)",
          "168:             {",
          "169:                 return BEROctetString.fromSequence(s);",
          "170:             }",
          "174:             return (ASN1OctetString)BEROctetString.fromSequence(s).toDLObject();",
          "177:         throw new IllegalArgumentException(\"unknown object in getInstance: \" + taggedObject.getClass().getName());",
          "",
          "[Added Lines]",
          "103:     static class TYPE",
          "105:         static ASN1OctetString checkedCast(ASN1Primitive primitive)",
          "107:             if (primitive instanceof ASN1OctetString)",
          "109:                 return (ASN1OctetString)primitive;",
          "112:             throw new IllegalStateException(\"unexpected object: \" + primitive.getClass().getName());",
          "115:         static ASN1OctetString fromByteArray(byte[] bytes) throws IOException",
          "117:             return (ASN1OctetString)ASN1Primitive.fromByteArray(bytes);",
          "120:         static ASN1OctetString fromImplicitPrimitive(DEROctetString octetString)",
          "122:             return octetString;",
          "125:         static ASN1OctetString fromImplicitConstructed(ASN1Sequence sequence)",
          "127:             return sequence.toASN1OctetString();",
          "128:         }",
          "129:     }",
          "140:     public static ASN1OctetString getInstance(ASN1TaggedObject taggedObject, boolean explicit)",
          "141:     {",
          "142:         if (BERTags.CONTEXT_SPECIFIC != taggedObject.getTagClass())",
          "143:         {",
          "144:             throw new IllegalStateException(\"this method only valid for CONTEXT_SPECIFIC tags\");",
          "147:         return (ASN1OctetString)taggedObject.getBaseUniversal(explicit, BERTags.OCTET_STRING);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     {",
          "189:         if (obj == null || obj instanceof ASN1OctetString)",
          "190:         {",
          "191:             return (ASN1OctetString)obj;",
          "192:         }",
          "193:         else if (obj instanceof byte[])",
          "194:         {",
          "195:             try",
          "196:             {",
          "198:             }",
          "199:             catch (IOException e)",
          "200:             {",
          "201:                 throw new IllegalArgumentException(\"failed to construct OCTET STRING from byte[]: \" + e.getMessage());",
          "202:             }",
          "203:         }",
          "214:         throw new IllegalArgumentException(\"illegal object in getInstance: \" + obj.getClass().getName());",
          "215:     }",
          "",
          "[Removed Lines]",
          "186:     public static ASN1OctetString getInstance(",
          "187:         Object  obj)",
          "197:                 return getInstance(fromByteArray((byte[])obj));",
          "204:         else if (obj instanceof ASN1Encodable)",
          "205:         {",
          "206:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "208:             if (primitive instanceof ASN1OctetString)",
          "209:             {",
          "210:                 return (ASN1OctetString)primitive;",
          "211:             }",
          "212:         }",
          "",
          "[Added Lines]",
          "156:     public static ASN1OctetString getInstance(Object obj)",
          "163:         else if (obj instanceof ASN1Encodable)",
          "164:         {",
          "165:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "166:             if (primitive instanceof ASN1OctetString)",
          "167:             {",
          "168:                 return (ASN1OctetString)primitive;",
          "169:             }",
          "170:         }",
          "175:                 return TYPE.fromByteArray((byte[])obj);",
          "186:     static final byte[] EMPTY_OCTETS = new byte[0];",
          "188:     byte[] string;",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java||core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     extends ASN1Primitive",
          "61:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "62: {",
          "",
          "[Removed Lines]",
          "64:     ASN1Encodable[] elements;",
          "",
          "[Added Lines]",
          "63:     static class TYPE",
          "64:     {",
          "65:         static ASN1Sequence checkedCast(ASN1Primitive primitive)",
          "66:         {",
          "67:             if (primitive instanceof ASN1Sequence)",
          "68:             {",
          "69:                 return (ASN1Sequence)primitive;",
          "70:             }",
          "72:             throw new IllegalStateException(\"unexpected object: \" + primitive.getClass().getName());",
          "73:         }",
          "75:         static ASN1Sequence fromByteArray(byte[] bytes) throws IOException",
          "76:         {",
          "77:             return (ASN1Sequence)ASN1Primitive.fromByteArray(bytes);",
          "78:         }",
          "80:         static ASN1Sequence fromImplicitPrimitive(DEROctetString octetString)",
          "81:         {",
          "82:             throw new IllegalStateException(\"unexpected implicit primitive encoding\");",
          "83:         }",
          "85:         static ASN1Sequence fromImplicitConstructed(ASN1Sequence sequence)",
          "86:         {",
          "87:             return sequence;",
          "88:         }",
          "89:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     {",
          "76:         if (obj == null || obj instanceof ASN1Sequence)",
          "77:         {",
          "78:             return (ASN1Sequence)obj;",
          "79:         }",
          "81:         {",
          "83:         }",
          "84:         else if (obj instanceof byte[])",
          "85:         {",
          "86:             try",
          "87:             {",
          "89:             }",
          "90:             catch (IOException e)",
          "91:             {",
          "92:                 throw new IllegalArgumentException(\"failed to construct sequence from byte[]: \" + e.getMessage());",
          "93:             }",
          "94:         }",
          "105:         throw new IllegalArgumentException(\"unknown object in getInstance: \" + obj.getClass().getName());",
          "106:     }",
          "",
          "[Removed Lines]",
          "73:     public static ASN1Sequence getInstance(",
          "74:         Object  obj)",
          "80:         else if (obj instanceof ASN1SequenceParser)",
          "82:             return ASN1Sequence.getInstance(((ASN1SequenceParser)obj).toASN1Primitive());",
          "88:                 return ASN1Sequence.getInstance(fromByteArray((byte[])obj));",
          "95:         else if (obj instanceof ASN1Encodable)",
          "96:         {",
          "97:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "99:             if (primitive instanceof ASN1Sequence)",
          "100:             {",
          "101:                 return (ASN1Sequence)primitive;",
          "102:             }",
          "103:         }",
          "",
          "[Added Lines]",
          "98:     public static ASN1Sequence getInstance(Object obj)",
          "105:         else if (obj instanceof ASN1Encodable)",
          "107:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "108:             if (primitive instanceof ASN1Sequence)",
          "109:             {",
          "110:                 return (ASN1Sequence)primitive;",
          "111:             }",
          "117:                 return TYPE.fromByteArray((byte[])obj);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     {",
          "146:         {",
          "165:         }",
          "168:     }",
          "",
          "[Removed Lines]",
          "125:     public static ASN1Sequence getInstance(",
          "126:         ASN1TaggedObject    taggedObject,",
          "127:         boolean             explicit)",
          "129:         if (explicit)",
          "130:         {",
          "131:             if (!taggedObject.isExplicit())",
          "132:             {",
          "133:                 throw new IllegalArgumentException(\"object implicit - explicit expected.\");",
          "134:             }",
          "136:             return getInstance(taggedObject.getObject());",
          "137:         }",
          "139:         ASN1Primitive o = taggedObject.getObject();",
          "145:         if (taggedObject.isExplicit())",
          "147:             if (taggedObject instanceof BERTaggedObject)",
          "148:             {",
          "149:                 return new BERSequence(o);",
          "150:             }",
          "152:             return new DLSequence(o);",
          "153:         }",
          "155:         if (o instanceof ASN1Sequence)",
          "156:         {",
          "157:             ASN1Sequence s = (ASN1Sequence)o;",
          "159:             if (taggedObject instanceof BERTaggedObject)",
          "160:             {",
          "161:                 return s;",
          "162:             }",
          "164:             return (ASN1Sequence)s.toDLObject();",
          "167:         throw new IllegalArgumentException(\"unknown object in getInstance: \" + taggedObject.getClass().getName());",
          "",
          "[Added Lines]",
          "145:     public static ASN1Sequence getInstance(ASN1TaggedObject taggedObject, boolean explicit)",
          "147:         if (BERTags.CONTEXT_SPECIFIC != taggedObject.getTagClass())",
          "149:             throw new IllegalStateException(\"this method only valid for CONTEXT_SPECIFIC tags\");",
          "152:         return (ASN1Sequence) taggedObject.getBaseUniversal(explicit, BERTags.SEQUENCE);",
          "156:     ASN1Encodable[] elements;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:         return new DLSequence(elements, false);",
          "379:     }",
          "381:     abstract ASN1Set toASN1Set();",
          "383:     boolean isConstructed()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     abstract ASN1OctetString toASN1OctetString();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     extends ASN1Primitive",
          "99:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "100: {",
          "",
          "[Removed Lines]",
          "101:     protected final ASN1Encodable[] elements;",
          "102:     protected final boolean isSorted;",
          "",
          "[Added Lines]",
          "101:     static class TYPE",
          "102:     {",
          "103:         static ASN1Set checkedCast(ASN1Primitive primitive)",
          "104:         {",
          "105:             if (primitive instanceof ASN1Set)",
          "106:             {",
          "107:                 return (ASN1Set)primitive;",
          "108:             }",
          "110:             throw new IllegalStateException(\"unexpected object: \" + primitive.getClass().getName());",
          "111:         }",
          "113:         static ASN1Set fromByteArray(byte[] bytes) throws IOException",
          "114:         {",
          "115:             return (ASN1Set)ASN1Primitive.fromByteArray(bytes);",
          "116:         }",
          "118:         static ASN1Set fromImplicitPrimitive(DEROctetString octetString)",
          "119:         {",
          "120:             throw new IllegalStateException(\"unexpected implicit primitive encoding\");",
          "121:         }",
          "123:         static ASN1Set fromImplicitConstructed(ASN1Sequence sequence)",
          "124:         {",
          "125:             return sequence.toASN1Set();",
          "126:         }",
          "127:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     {",
          "114:         if (obj == null || obj instanceof ASN1Set)",
          "115:         {",
          "116:             return (ASN1Set)obj;",
          "117:         }",
          "119:         {",
          "121:         }",
          "122:         else if (obj instanceof byte[])",
          "123:         {",
          "124:             try",
          "125:             {",
          "127:             }",
          "128:             catch (IOException e)",
          "129:             {",
          "130:                 throw new IllegalArgumentException(\"failed to construct set from byte[]: \" + e.getMessage());",
          "131:             }",
          "132:         }",
          "143:         throw new IllegalArgumentException(\"unknown object in getInstance: \" + obj.getClass().getName());",
          "144:     }",
          "",
          "[Removed Lines]",
          "111:     public static ASN1Set getInstance(",
          "112:         Object  obj)",
          "118:         else if (obj instanceof ASN1SetParser)",
          "120:             return ASN1Set.getInstance(((ASN1SetParser)obj).toASN1Primitive());",
          "126:                 return ASN1Set.getInstance(ASN1Primitive.fromByteArray((byte[])obj));",
          "133:         else if (obj instanceof ASN1Encodable)",
          "134:         {",
          "135:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "137:             if (primitive instanceof ASN1Set)",
          "138:             {",
          "139:                 return (ASN1Set)primitive;",
          "140:             }",
          "141:         }",
          "",
          "[Added Lines]",
          "136:     public static ASN1Set getInstance(Object obj)",
          "143:         else if (obj instanceof ASN1Encodable)",
          "145:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "146:             if (primitive instanceof ASN1Set)",
          "147:             {",
          "148:                 return (ASN1Set)primitive;",
          "149:             }",
          "155:                 return TYPE.fromByteArray((byte[])obj);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:     {",
          "168:         {",
          "175:         }",
          "214:     }",
          "216:     protected ASN1Set()",
          "217:     {",
          "218:         this.elements = ASN1EncodableVector.EMPTY_ELEMENTS;",
          "",
          "[Removed Lines]",
          "163:     public static ASN1Set getInstance(",
          "164:         ASN1TaggedObject    taggedObject,",
          "165:         boolean             explicit)",
          "167:         if (explicit)",
          "169:             if (!taggedObject.isExplicit())",
          "170:             {",
          "171:                 throw new IllegalArgumentException(\"object implicit - explicit expected.\");",
          "172:             }",
          "174:             return getInstance(taggedObject.getObject());",
          "177:         ASN1Primitive o = taggedObject.getObject();",
          "183:         if (taggedObject.isExplicit())",
          "184:         {",
          "185:             if (taggedObject instanceof BERTaggedObject)",
          "186:             {",
          "187:                 return new BERSet(o);",
          "188:             }",
          "190:             return new DLSet(o);",
          "191:         }",
          "193:         if (o instanceof ASN1Set)",
          "194:         {",
          "195:             ASN1Set s = (ASN1Set)o;",
          "197:             if (taggedObject instanceof BERTaggedObject)",
          "198:             {",
          "199:                 return s;",
          "200:             }",
          "202:             return (ASN1Set)s.toDLObject();",
          "203:         }",
          "208:         if (o instanceof ASN1Sequence)",
          "209:         {",
          "210:             return ((ASN1Sequence)o).toASN1Set();",
          "211:         }",
          "213:         throw new IllegalArgumentException(\"unknown object in getInstance: \" + taggedObject.getClass().getName());",
          "",
          "[Added Lines]",
          "183:     public static ASN1Set getInstance(ASN1TaggedObject taggedObject, boolean explicit)",
          "185:         if (BERTags.CONTEXT_SPECIFIC != taggedObject.getTagClass())",
          "187:             throw new IllegalStateException(\"this method only valid for CONTEXT_SPECIFIC tags\");",
          "190:         return (ASN1Set)taggedObject.getBaseUniversal(explicit, BERTags.SET);",
          "193:     protected final ASN1Encodable[] elements;",
          "194:     protected final boolean isSorted;",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java||core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java -> core/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         throw new IllegalArgumentException(\"this method not valid for implicitly tagged tagged objects\");",
          "40:     }",
          "44:     {",
          "45:         if (obj == null || obj instanceof ASN1TaggedObject)",
          "46:         {",
          "47:             return (ASN1TaggedObject)obj;",
          "48:         }",
          "49:         else if (obj instanceof byte[])",
          "50:         {",
          "51:             try",
          "",
          "[Removed Lines]",
          "42:     static public ASN1TaggedObject getInstance(",
          "43:         Object obj)",
          "",
          "[Added Lines]",
          "42:     static public ASN1TaggedObject getInstance(Object obj)",
          "49:         else if (obj instanceof ASN1Encodable)",
          "50:         {",
          "51:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "52:             if (primitive instanceof ASN1TaggedObject)",
          "53:             {",
          "54:                 return (ASN1TaggedObject)primitive;",
          "55:             }",
          "56:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:                 throw new IllegalArgumentException(\"failed to construct tagged object from byte[]: \" + e.getMessage());",
          "58:             }",
          "59:         }",
          "70:         throw new IllegalArgumentException(\"unknown object in getInstance: \" + obj.getClass().getName());",
          "71:     }",
          "",
          "[Removed Lines]",
          "60:         else if (obj instanceof ASN1Encodable)",
          "61:         {",
          "62:             ASN1Primitive primitive = ((ASN1Encodable)obj).toASN1Primitive();",
          "64:             if (primitive instanceof ASN1TaggedObject)",
          "65:             {",
          "66:                 return (ASN1TaggedObject)primitive;",
          "67:             }",
          "68:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:                 throw new IllegalArgumentException(\"object implicit - explicit expected.\");",
          "325:             }",
          "328:             return obj.toASN1Primitive();",
          "329:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:             switch (tagNo)",
          "329:             {",
          "330:             case BERTags.OCTET_STRING:",
          "331:                 return ASN1OctetString.TYPE.checkedCast(obj.toASN1Primitive());",
          "332:             case BERTags.SEQUENCE:",
          "333:                 return ASN1Sequence.TYPE.checkedCast(obj.toASN1Primitive());",
          "334:             case BERTags.SET:",
          "335:                 return ASN1Set.TYPE.checkedCast(obj.toASN1Primitive());",
          "336:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:         switch (tagNo)",
          "349:         {",
          "350:         case BERTags.OCTET_STRING:",
          "351:         {",
          "352:             ASN1Primitive primitive = obj.toASN1Primitive();",
          "353:             switch (explicitness)",
          "354:             {",
          "355:             case PARSED_EXPLICIT:",
          "356:                 return ASN1OctetString.TYPE.fromImplicitConstructed(rebuildConstructed(primitive));",
          "357:             case PARSED_IMPLICIT:",
          "358:             {",
          "359:                 if (primitive instanceof ASN1Sequence)",
          "360:                 {",
          "361:                     return ASN1OctetString.TYPE.fromImplicitConstructed((ASN1Sequence)primitive);",
          "362:                 }",
          "363:                 return ASN1OctetString.TYPE.fromImplicitPrimitive((DEROctetString)primitive);",
          "364:             }",
          "365:             default:",
          "366:                 return ASN1OctetString.TYPE.checkedCast(primitive);",
          "367:             }",
          "368:         }",
          "369:         case BERTags.SEQUENCE:",
          "370:         {",
          "371:             ASN1Primitive primitive = obj.toASN1Primitive();",
          "372:             switch (explicitness)",
          "373:             {",
          "374:             case PARSED_EXPLICIT:",
          "375:                 return ASN1Sequence.TYPE.fromImplicitConstructed(rebuildConstructed(primitive));",
          "376:             case PARSED_IMPLICIT:",
          "377:             {",
          "378:                 if (primitive instanceof ASN1Sequence)",
          "379:                 {",
          "380:                     return ASN1Sequence.TYPE.fromImplicitConstructed((ASN1Sequence)primitive);",
          "381:                 }",
          "382:                 return ASN1Sequence.TYPE.fromImplicitPrimitive((DEROctetString)primitive);",
          "383:             }",
          "384:             default:",
          "385:                 return ASN1Sequence.TYPE.checkedCast(primitive);",
          "386:             }",
          "387:         }",
          "388:         case BERTags.SET:",
          "389:         {",
          "390:             ASN1Primitive primitive = obj.toASN1Primitive();",
          "391:             switch (explicitness)",
          "392:             {",
          "393:             case PARSED_EXPLICIT:",
          "394:                 return ASN1Set.TYPE.fromImplicitConstructed(rebuildConstructed(primitive));",
          "395:             case PARSED_IMPLICIT:",
          "396:             {",
          "397:                 if (primitive instanceof ASN1Sequence)",
          "398:                 {",
          "399:                     return ASN1Set.TYPE.fromImplicitConstructed((ASN1Sequence)primitive);",
          "400:                 }",
          "401:                 return ASN1Set.TYPE.fromImplicitPrimitive((DEROctetString)primitive);",
          "402:             }",
          "403:             default:",
          "404:                 return ASN1Set.TYPE.checkedCast(primitive);",
          "405:             }",
          "406:         }",
          "407:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398:     abstract String getASN1Encoding();",
          "400:     abstract ASN1TaggedObject replaceTag(int tagClass, int tagNo);",
          "402:     ASN1Primitive toDERObject()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     abstract ASN1Sequence rebuildConstructed(ASN1Primitive primitive);",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/BERSequence.java||core/src/main/java/org/bouncycastle/asn1/BERSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/BERSequence.java -> core/src/main/java/org/bouncycastle/asn1/BERSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         out.writeEncodingIL(withTag, BERTags.CONSTRUCTED | BERTags.SEQUENCE, elements);",
          "63:     }",
          "65:     ASN1Set toASN1Set()",
          "66:     {",
          "67:         return new BERSet(false, toArrayInternal());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     ASN1OctetString toASN1OctetString()",
          "66:     {",
          "67:         return BEROctetString.fromSequence(this);",
          "68:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java -> core/src/main/java/org/bouncycastle/asn1/BERTaggedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         return ASN1Encoding.BER;",
          "114:     }",
          "116:     ASN1TaggedObject replaceTag(int tagClass, int tagNo)",
          "117:     {",
          "118:         return new BERTaggedObject(explicitness, tagClass, tagNo, obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     ASN1Sequence rebuildConstructed(ASN1Primitive primitive)",
          "117:     {",
          "118:         return new BERSequence(primitive);",
          "119:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSequence.java||core/src/main/java/org/bouncycastle/asn1/DERSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSequence.java -> core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:         }",
          "132:     }",
          "134:     ASN1Set toASN1Set()",
          "135:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     ASN1OctetString toASN1OctetString()",
          "135:     {",
          "136:         return (ASN1OctetString)BEROctetString.fromSequence(this).toDERObject();",
          "137:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java -> core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         return ASN1Encoding.DER;",
          "94:     }",
          "96:     ASN1TaggedObject replaceTag(int tagClass, int tagNo)",
          "97:     {",
          "98:         return new DERTaggedObject(explicitness, tagClass, tagNo, obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     ASN1Sequence rebuildConstructed(ASN1Primitive primitive)",
          "97:     {",
          "98:         return new DERSequence(primitive);",
          "99:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSequence.java||core/src/main/java/org/bouncycastle/asn1/DLSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSequence.java -> core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         }",
          "123:     }",
          "125:     ASN1Set toASN1Set()",
          "126:     {",
          "127:         return new DLSet(false, toArrayInternal());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:     ASN1OctetString toASN1OctetString()",
          "126:     {",
          "127:         return (ASN1OctetString)BEROctetString.fromSequence(this).toDLObject();",
          "128:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java -> core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         return ASN1Encoding.DL;",
          "94:     }",
          "96:     ASN1TaggedObject replaceTag(int tagClass, int tagNo)",
          "97:     {",
          "98:         return new DLTaggedObject(explicitness, tagClass, tagNo, obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     ASN1Sequence rebuildConstructed(ASN1Primitive primitive)",
          "97:     {",
          "98:         return new DLSequence(primitive);",
          "99:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java||core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java -> core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         }",
          "96:     }",
          "98:     ASN1Set toASN1Set()",
          "99:     {",
          "100:         return ((ASN1Sequence)toDLObject()).toASN1Set();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     ASN1OctetString toASN1OctetString()",
          "99:     {",
          "100:         return ((ASN1Sequence)toDLObject()).toASN1OctetString();",
          "101:     }",
          "",
          "---------------"
        ],
        "core/src/test/java/org/bouncycastle/asn1/test/SetTest.java||core/src/test/java/org/bouncycastle/asn1/test/SetTest.java": [
          "File: core/src/test/java/org/bouncycastle/asn1/test/SetTest.java -> core/src/test/java/org/bouncycastle/asn1/test/SetTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.bouncycastle.asn1.test;",
          "3: import org.bouncycastle.asn1.ASN1Boolean;",
          "4: import org.bouncycastle.asn1.ASN1EncodableVector;",
          "5: import org.bouncycastle.asn1.ASN1Integer;",
          "6: import org.bouncycastle.asn1.ASN1Set;",
          "7: import org.bouncycastle.asn1.ASN1TaggedObject;",
          "8: import org.bouncycastle.asn1.BERSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import java.io.IOException;",
          "7: import org.bouncycastle.asn1.ASN1Encoding;",
          "9: import org.bouncycastle.asn1.ASN1Primitive;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:         ASN1TaggedObject tag = new DERTaggedObject(false, 1, new DERSequence(v));",
          "93:         s = ASN1Set.getInstance(tag, false);",
          "95:         if (s.getObjectAt(0) instanceof ASN1Boolean)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:         try",
          "99:         {",
          "101:             tag = (ASN1TaggedObject)ASN1Primitive.fromByteArray(tag.getEncoded(ASN1Encoding.DER));",
          "102:         }",
          "103:         catch (IOException e)",
          "104:         {",
          "105:             throw new RuntimeException(e);",
          "106:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6648370c47f4919a10232ffb2dd67b0b373bcafb",
      "candidate_info": {
        "commit_hash": "6648370c47f4919a10232ffb2dd67b0b373bcafb",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/6648370c47f4919a10232ffb2dd67b0b373bcafb",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java"
        ],
        "message": "Rework ASN1Set\n\n- make ASN1Set fields final\n- infer 'isSorted' when empty or singleton set\n- initialize internal Vector capacity to exact size",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     extends ASN1Primitive",
          "99:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "100: {",
          "",
          "[Removed Lines]",
          "101:     private Vector set = new Vector();",
          "102:     boolean isSorted = false;",
          "",
          "[Added Lines]",
          "101:     private final Vector set;",
          "102:     protected final boolean isSorted;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:     protected ASN1Set()",
          "227:     {",
          "228:     }",
          "236:     {",
          "238:     }",
          "",
          "[Removed Lines]",
          "234:     protected ASN1Set(",
          "235:         ASN1Encodable obj)",
          "237:         set.addElement(obj);",
          "",
          "[Added Lines]",
          "228:         this.set = new Vector(0);",
          "229:         this.isSorted = true;",
          "236:     protected ASN1Set(ASN1Encodable obj)",
          "238:         Vector tmp = new Vector(1);",
          "239:         tmp.addElement(obj);",
          "241:         this.set = tmp;",
          "242:         this.isSorted = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     {",
          "250:         {",
          "252:         }",
          "254:         if (doSort)",
          "255:         {",
          "257:         }",
          "258:     }",
          "",
          "[Removed Lines]",
          "245:     protected ASN1Set(",
          "246:         ASN1EncodableVector v,",
          "247:         boolean                  doSort)",
          "249:         for (int i = 0; i != v.size(); i++)",
          "251:             set.addElement(v.get(i));",
          "256:             this.sort();",
          "",
          "[Added Lines]",
          "250:     protected ASN1Set(ASN1EncodableVector v, boolean doSort)",
          "252:         int size = v.size();",
          "253:         Vector tmp = new Vector(size);",
          "254:         for (int i = 0; i < size; ++i)",
          "256:             tmp.addElement(v.get(i));",
          "261:             sort(tmp);",
          "264:         this.set = tmp;",
          "265:         this.isSorted = doSort;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:     {",
          "270:         {",
          "272:         }",
          "274:         if (doSort)",
          "275:         {",
          "277:         }",
          "278:     }",
          "280:     public Enumeration getObjects()",
          "",
          "[Removed Lines]",
          "265:     protected ASN1Set(",
          "266:         ASN1Encodable[]   array,",
          "267:         boolean doSort)",
          "269:         for (int i = 0; i != array.length; i++)",
          "271:             set.addElement(array[i]);",
          "276:             this.sort();",
          "",
          "[Added Lines]",
          "273:     protected ASN1Set(ASN1Encodable[] array, boolean doSort)",
          "275:         int size = array.length;",
          "276:         Vector tmp = new Vector(size);",
          "277:         for (int i = 0; i < size; ++i)",
          "279:             tmp.addElement(array[i]);",
          "284:             sort(tmp);",
          "287:         this.set = tmp;",
          "288:         this.isSorted = doSort;",
          "289:     }",
          "291:     ASN1Set(Vector v, boolean isSorted)",
          "292:     {",
          "293:         this.set = v;",
          "294:         this.isSorted = isSorted;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "381:     ASN1Primitive toDERObject()",
          "382:     {",
          "383:         if (isSorted)",
          "384:         {",
          "390:         }",
          "391:         else",
          "392:         {",
          "396:             {",
          "398:             }",
          "407:         }",
          "408:     }",
          "",
          "[Removed Lines]",
          "385:             ASN1Set derSet = new DERSet();",
          "387:             derSet.set = this.set;",
          "389:             return derSet;",
          "393:             Vector v = new Vector();",
          "395:             for (int i = 0; i != set.size(); i++)",
          "397:                 v.addElement(set.elementAt(i));",
          "400:             ASN1Set derSet = new DERSet();",
          "402:             derSet.set = v;",
          "404:             derSet.sort();",
          "406:             return derSet;",
          "",
          "[Added Lines]",
          "400:         Vector v;",
          "403:             v = set;",
          "407:             int size = set.size();",
          "408:             v = new Vector(size);",
          "409:             for (int i = 0; i < size; ++i)",
          "411:                 Object obj = set.elementAt(i);",
          "412:                 v.addElement(obj);",
          "415:             sort(v);",
          "418:         return new DERSet(v, isSorted);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "414:     ASN1Primitive toDLObject()",
          "415:     {",
          "421:     }",
          "423:     boolean asn1Equals(ASN1Primitive other)",
          "",
          "[Removed Lines]",
          "416:         ASN1Set derSet = new DLSet();",
          "418:         derSet.set = this.set;",
          "420:         return derSet;",
          "",
          "[Added Lines]",
          "427:         return new DLSet(set, isSorted);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "464:         return encObj;",
          "465:     }",
          "471:          byte[] a,",
          "472:          byte[] b)",
          "473:     {",
          "",
          "[Removed Lines]",
          "470:     private boolean lessThanOrEqual(",
          "",
          "[Added Lines]",
          "474:     boolean isConstructed()",
          "475:     {",
          "476:         return true;",
          "477:     }",
          "479:     abstract void encode(ASN1OutputStream out)",
          "480:             throws IOException;",
          "482:     public String toString()",
          "483:     {",
          "484:         return set.toString();",
          "485:     }",
          "487:     public Iterator<ASN1Encodable> iterator()",
          "488:     {",
          "489:         return new Arrays.Iterator<ASN1Encodable>(toArray());",
          "490:     }",
          "492:     private static byte[] getDEREncoded(ASN1Encodable obj)",
          "493:     {",
          "494:         try",
          "495:         {",
          "496:             return obj.toASN1Primitive().getEncoded(ASN1Encoding.DER);",
          "497:         }",
          "498:         catch (IOException e)",
          "499:         {",
          "500:             throw new IllegalArgumentException(\"cannot encode object added to SET\");",
          "501:         }",
          "502:     }",
          "507:     private static boolean lessThanOrEqual(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "482:         return len == a.length;",
          "483:     }",
          "487:     {",
          "489:         {",
          "491:         }",
          "539:                 }",
          "560:     }",
          "561: }",
          "",
          "[Removed Lines]",
          "485:     private byte[] getDEREncoded(",
          "486:         ASN1Encodable obj)",
          "488:         try",
          "490:             return obj.toASN1Primitive().getEncoded(ASN1Encoding.DER);",
          "492:         catch (IOException e)",
          "493:         {",
          "494:             throw new IllegalArgumentException(\"cannot encode object added to SET\");",
          "495:         }",
          "496:     }",
          "498:     protected void sort()",
          "499:     {",
          "500:         if (!isSorted)",
          "501:         {",
          "502:             isSorted = true;",
          "503:             if (set.size() > 1)",
          "504:             {",
          "505:                 boolean    swapped = true;",
          "506:                 int        lastSwap = set.size() - 1;",
          "508:                 while (swapped)",
          "509:                 {",
          "510:                     int    index = 0;",
          "511:                     int    swapIndex = 0;",
          "512:                     byte[] a = getDEREncoded((ASN1Encodable)set.elementAt(0));",
          "514:                     swapped = false;",
          "516:                     while (index != lastSwap)",
          "517:                     {",
          "518:                         byte[] b = getDEREncoded((ASN1Encodable)set.elementAt(index + 1));",
          "520:                         if (lessThanOrEqual(a, b))",
          "521:                         {",
          "522:                             a = b;",
          "523:                         }",
          "524:                         else",
          "525:                         {",
          "526:                             Object  o = set.elementAt(index);",
          "528:                             set.setElementAt(set.elementAt(index + 1), index);",
          "529:                             set.setElementAt(o, index + 1);",
          "531:                             swapped = true;",
          "532:                             swapIndex = index;",
          "533:                         }",
          "535:                         index++;",
          "536:                     }",
          "538:                     lastSwap = swapIndex;",
          "540:             }",
          "541:         }",
          "542:     }",
          "544:     boolean isConstructed()",
          "545:     {",
          "546:         return true;",
          "547:     }",
          "549:     abstract void encode(ASN1OutputStream out)",
          "550:             throws IOException;",
          "552:     public String toString()",
          "553:     {",
          "554:         return set.toString();",
          "555:     }",
          "557:     public Iterator<ASN1Encodable> iterator()",
          "558:     {",
          "559:         return new Arrays.Iterator<ASN1Encodable>(toArray());",
          "",
          "[Added Lines]",
          "522:     private static void sort(Vector set)",
          "524:         if (set.size() < 2)",
          "526:             return;",
          "529:         boolean swapped = true;",
          "530:         int lastSwap = set.size() - 1;",
          "532:         while (swapped)",
          "533:         {",
          "534:             int index = 0;",
          "535:             int swapIndex = 0;",
          "536:             byte[] a = getDEREncoded((ASN1Encodable)set.elementAt(0));",
          "538:             swapped = false;",
          "540:             while (index != lastSwap)",
          "541:             {",
          "542:                 byte[] b = getDEREncoded((ASN1Encodable)set.elementAt(index + 1));",
          "544:                 if (lessThanOrEqual(a, b))",
          "545:                 {",
          "546:                     a = b;",
          "548:                 else",
          "549:                 {",
          "550:                     Object o = set.elementAt(index);",
          "552:                     set.setElementAt(set.elementAt(index + 1), index);",
          "553:                     set.setElementAt(o, index + 1);",
          "555:                     swapped = true;",
          "556:                     swapIndex = index;",
          "557:                 }",
          "559:                 index++;",
          "560:             }",
          "562:             lastSwap = swapIndex;",
          "563:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSet.java -> core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.io.IOException;",
          "4: import java.io.OutputStream;",
          "5: import java.util.Enumeration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import java.util.Vector;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         super(v, doSort);",
          "69:     }",
          "71:     public void encodeTo(OutputStream output) throws IOException",
          "72:     {",
          "73:         encode(new DEROutputStream(output));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     DERSet(Vector v, boolean isSorted)",
          "73:     {",
          "74:         super(v, isSorted);",
          "75:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSet.java -> core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.io.IOException;",
          "4: import java.util.Enumeration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import java.util.Vector;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         super(a, false);",
          "91:     }",
          "93:     private int getBodyLength()",
          "94:         throws IOException",
          "95:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     DLSet(Vector v, boolean isSorted)",
          "95:     {",
          "96:         super(v, isSorted);",
          "97:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "923dcb559f0d10b357a82c9baac06779211898b5",
      "candidate_info": {
        "commit_hash": "923dcb559f0d10b357a82c9baac06779211898b5",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/923dcb559f0d10b357a82c9baac06779211898b5",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java",
          "core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java",
          "core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java",
          "core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java",
          "core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
          "core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java",
          "core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java",
          "core/src/main/java/org/bouncycastle/util/Longs.java",
          "core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java",
          "core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java",
          "core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
          "core/src/main/jdk1.4/org/bouncycastle/util/Longs.java"
        ],
        "message": "added oid for ChaCha20-Poly1305 compatibility updates.",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java||core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java||core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java",
          "core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java||core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java",
          "core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java",
          "core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java||core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java",
          "core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java||core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java",
          "core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java||core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
          "core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java||core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java",
          "core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java||core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java",
          "core/src/main/java/org/bouncycastle/util/Longs.java||core/src/main/java/org/bouncycastle/util/Longs.java",
          "core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java||core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java",
          "core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java||core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java",
          "core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java||core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
          "core/src/main/jdk1.4/org/bouncycastle/util/Longs.java||core/src/main/jdk1.4/org/bouncycastle/util/Longs.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java||core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java -> core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     static ASN1Encodable[] cloneElements(ASN1Encodable[] elements)",
          "156:     {",
          "158:     }",
          "159: }",
          "",
          "[Removed Lines]",
          "157:         return elements.length < 1 ? EMPTY_ELEMENTS : elements.clone();",
          "",
          "[Added Lines]",
          "157:         return elements.length < 1 ? EMPTY_ELEMENTS : (ASN1Encodable[])elements.clone();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:         }",
          "416:         else",
          "417:         {",
          "419:             sort(tmp);",
          "420:         }",
          "",
          "[Removed Lines]",
          "418:             tmp = elements.clone();",
          "",
          "[Added Lines]",
          "418:             tmp = (ASN1Encodable[])elements.clone();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java||core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java -> core/src/main/java/org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     ASN1ObjectIdentifier id_rsa_KEM              = id_alg.branch(\"14\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     ASN1ObjectIdentifier id_alg_AEADChaCha20Poly1305 = id_alg.branch(\"18\");",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java||core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java -> core/src/main/java/org/bouncycastle/asn1/x500/X500Name.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         RDN[]         rDNs)",
          "147:     {",
          "148:         this.style = style;",
          "150:         this.rdnSeq = new DERSequence(this.rdns);",
          "151:     }",
          "",
          "[Removed Lines]",
          "149:         this.rdns = rDNs.clone();",
          "",
          "[Added Lines]",
          "149:         this.rdns = (RDN[])rDNs.clone();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:     public RDN[] getRDNs()",
          "174:     {",
          "176:     }",
          "",
          "[Removed Lines]",
          "175:         return rdns.clone();",
          "",
          "[Added Lines]",
          "175:         return (RDN[])rdns.clone();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java -> core/src/main/java/org/bouncycastle/crypto/engines/Zuc128CoreEngine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "78:     private final byte[] keyStream = new byte[Integer.BYTES];",
          "",
          "[Added Lines]",
          "78:     private final byte[] keyStream = new byte[4];   // Integer.BYTES",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:         setKeyAndIV(newKey, newIV);",
          "145:     }",
          "",
          "[Removed Lines]",
          "144:         theResetState = copy();",
          "",
          "[Added Lines]",
          "144:         theResetState = (Zuc128CoreEngine)copy();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:         final byte out = (byte)(keyStream[theIndex] ^ in);",
          "235:         return out;",
          "",
          "[Removed Lines]",
          "232:         theIndex = (theIndex + 1) % Integer.BYTES;",
          "",
          "[Added Lines]",
          "232:         theIndex = (theIndex + 1) % 4; // Integer.BYTES",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:     {",
          "551:         return new Zuc128CoreEngine(this);",
          "552:     }",
          "",
          "[Removed Lines]",
          "549:     public Zuc128CoreEngine copy()",
          "",
          "[Added Lines]",
          "549:     public Memoable copy()",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java -> core/src/main/java/org/bouncycastle/crypto/engines/Zuc128Engine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.bouncycastle.crypto.engines;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.bouncycastle.util.Memoable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     {",
          "35:         return new Zuc128Engine(this);",
          "36:     }",
          "",
          "[Removed Lines]",
          "33:     public Zuc128Engine copy()",
          "",
          "[Added Lines]",
          "35:     public Memoable copy()",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java -> core/src/main/java/org/bouncycastle/crypto/engines/Zuc256CoreEngine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     {",
          "167:         return new Zuc256CoreEngine(this);",
          "168:     }",
          "",
          "[Removed Lines]",
          "165:     public Zuc256CoreEngine copy()",
          "",
          "[Added Lines]",
          "165:     public Memoable copy()",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java||core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java -> core/src/main/java/org/bouncycastle/crypto/engines/Zuc256Engine.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.bouncycastle.crypto.engines;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import org.bouncycastle.util.Memoable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     {",
          "45:         return new Zuc256Engine(this);",
          "46:     }",
          "",
          "[Removed Lines]",
          "43:     public Zuc256Engine copy()",
          "",
          "[Added Lines]",
          "45:     public Memoable copy()",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java||core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java -> core/src/main/java/org/bouncycastle/crypto/macs/Zuc128Mac.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     {",
          "86:         theEngine.init(true, pParams);",
          "88:         initKeyStream();",
          "89:     }",
          "",
          "[Removed Lines]",
          "87:         theState = theEngine.copy();",
          "",
          "[Added Lines]",
          "87:         theState = (Zuc128CoreEngine)theEngine.copy();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java||core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java -> core/src/main/java/org/bouncycastle/crypto/macs/Zuc256Mac.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     {",
          "96:         theEngine.init(true, pParams);",
          "98:         initKeyStream();",
          "99:     }",
          "",
          "[Removed Lines]",
          "97:         theState = theEngine.copy();",
          "",
          "[Added Lines]",
          "97:         theState = (Zuc256CoreEngine)theEngine.copy();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:             theKeyStream[i] = theEngine.createKeyStreamWord();",
          "116:         }",
          "117:         theWordIndex = theKeyStream.length - 1;",
          "119:     }",
          "",
          "[Removed Lines]",
          "118:         theByteIndex = Integer.BYTES - 1;",
          "",
          "[Added Lines]",
          "118:         theByteIndex = 4 - 1;    // Integer.SIZE",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java||core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java": [
          "File: core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java -> core/src/main/java/org/bouncycastle/crypto/modes/ChaCha20Poly1305.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         case State.ENC_DATA:",
          "176:             return total + MAC_SIZE;",
          "177:         default:",
          "179:         }",
          "180:     }",
          "",
          "[Removed Lines]",
          "178:             throw new IllegalStateException();",
          "",
          "[Added Lines]",
          "178:             throw new IllegalStateException(\"state=\"+state);",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java||core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java": [
          "File: core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java -> core/src/main/java/org/bouncycastle/math/ec/rfc7748/X25519Field.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     public static void cmov(int cond, int[] x, int xOff, int[] z, int zOff)",
          "68:     {",
          "71:         for (int i = 0; i < SIZE; ++i)",
          "72:         {",
          "",
          "[Removed Lines]",
          "69:         assert 0 == cond || -1 == cond;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java||core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java": [
          "File: core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java -> core/src/main/java/org/bouncycastle/math/ec/rfc7748/X448Field.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     public static void cmov(int cond, int[] x, int xOff, int[] z, int zOff)",
          "73:     {",
          "76:         for (int i = 0; i < SIZE; ++i)",
          "77:         {",
          "",
          "[Removed Lines]",
          "74:         assert 0 == cond || -1 == cond;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/util/Longs.java||core/src/main/java/org/bouncycastle/util/Longs.java": [
          "File: core/src/main/java/org/bouncycastle/util/Longs.java -> core/src/main/java/org/bouncycastle/util/Longs.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.bouncycastle.util;",
          "3: public class Longs",
          "4: {",
          "5:     public static Long valueOf(long value)",
          "6:     {",
          "7:         return Long.valueOf(value);",
          "8:     }",
          "9: }",
          "",
          "---------------"
        ],
        "core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java||core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java": [
          "File: core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java -> core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import org.bouncycastle.asn1.x509.AlgorithmIdentifier;",
          "12: import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;",
          "13: import org.bouncycastle.crypto.params.AsymmetricKeyParameter;",
          "14: import org.bouncycastle.pqc.asn1.PQCObjectIdentifiers;",
          "15: import org.bouncycastle.pqc.asn1.SPHINCS256KeyParams;",
          "16: import org.bouncycastle.pqc.crypto.newhope.NHPublicKeyParameters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import org.bouncycastle.asn1.bc.BCObjectIdentifiers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     static",
          "29:     {",
          "33:         converters.put(PQCObjectIdentifiers.qTESLA_p_I, new QTeslaConverter());",
          "34:         converters.put(PQCObjectIdentifiers.qTESLA_p_III, new QTeslaConverter());",
          "35:         converters.put(PQCObjectIdentifiers.sphincs256, new SPHINCSConverter());",
          "",
          "[Removed Lines]",
          "30:         converters.put(PQCObjectIdentifiers.qTESLA_I, new QTeslaConverter());",
          "31:         converters.put(PQCObjectIdentifiers.qTESLA_III_size, new QTeslaConverter());",
          "32:         converters.put(PQCObjectIdentifiers.qTESLA_III_speed, new QTeslaConverter());",
          "",
          "[Added Lines]",
          "31:         converters.put(BCObjectIdentifiers.qTESLA_Rnd1_I, new QTeslaConverter());",
          "32:         converters.put(BCObjectIdentifiers.qTESLA_Rnd1_III_size, new QTeslaConverter());",
          "33:         converters.put(BCObjectIdentifiers.qTESLA_Rnd1_III_speed, new QTeslaConverter());",
          "34:         converters.put(BCObjectIdentifiers.qTESLA_Rnd1_p_I, new QTeslaConverter());",
          "35:         converters.put(BCObjectIdentifiers.qTESLA_Rnd1_p_III, new QTeslaConverter());",
          "",
          "---------------"
        ],
        "core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java||core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java": [
          "File: core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java -> core/src/main/jdk1.4/org/bouncycastle/pqc/crypto/util/Utils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import org.bouncycastle.crypto.digests.SHAKEDigest;",
          "13: import org.bouncycastle.pqc.asn1.PQCObjectIdentifiers;",
          "14: import org.bouncycastle.pqc.asn1.SPHINCS256KeyParams;",
          "16: import org.bouncycastle.pqc.crypto.sphincs.SPHINCSKeyParameters;",
          "17: import org.bouncycastle.util.Integers;",
          "19: class Utils",
          "20: {",
          "25:     static final AlgorithmIdentifier AlgID_qTESLA_p_III = new AlgorithmIdentifier(PQCObjectIdentifiers.qTESLA_p_III);",
          "27:     static final AlgorithmIdentifier SPHINCS_SHA3_256 = new AlgorithmIdentifier(NISTObjectIdentifiers.id_sha3_256);",
          "",
          "[Removed Lines]",
          "15: import org.bouncycastle.pqc.crypto.qteslarnd1.QTESLASecurityCategory;",
          "21:     static final AlgorithmIdentifier AlgID_qTESLA_I = new AlgorithmIdentifier(PQCObjectIdentifiers.qTESLA_I);",
          "22:     static final AlgorithmIdentifier AlgID_qTESLA_III_size = new AlgorithmIdentifier(PQCObjectIdentifiers.qTESLA_III_size);",
          "23:     static final AlgorithmIdentifier AlgID_qTESLA_III_speed = new AlgorithmIdentifier(PQCObjectIdentifiers.qTESLA_III_speed);",
          "24:     static final AlgorithmIdentifier AlgID_qTESLA_p_I = new AlgorithmIdentifier(PQCObjectIdentifiers.qTESLA_p_I);",
          "",
          "[Added Lines]",
          "15: import org.bouncycastle.pqc.crypto.qtesla.QTESLASecurityCategory;",
          "21:    static final AlgorithmIdentifier AlgID_qTESLA_p_I = new AlgorithmIdentifier(PQCObjectIdentifiers.qTESLA_p_I);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     static",
          "38:     {",
          "42:         categories.put(PQCObjectIdentifiers.qTESLA_p_I, Integers.valueOf(QTESLASecurityCategory.PROVABLY_SECURE_I));",
          "43:         categories.put(PQCObjectIdentifiers.qTESLA_p_III, Integers.valueOf(QTESLASecurityCategory.PROVABLY_SECURE_III));",
          "44:     }",
          "",
          "[Removed Lines]",
          "39:         categories.put(PQCObjectIdentifiers.qTESLA_I, Integers.valueOf(QTESLASecurityCategory.HEURISTIC_I));",
          "40:         categories.put(PQCObjectIdentifiers.qTESLA_III_size, Integers.valueOf(QTESLASecurityCategory.HEURISTIC_III_SIZE));",
          "41:         categories.put(PQCObjectIdentifiers.qTESLA_III_speed, Integers.valueOf(QTESLASecurityCategory.HEURISTIC_III_SPEED));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:     {",
          "53:         switch (securityCategory)",
          "54:         {",
          "61:         case QTESLASecurityCategory.PROVABLY_SECURE_I:",
          "62:             return AlgID_qTESLA_p_I;",
          "63:         case QTESLASecurityCategory.PROVABLY_SECURE_III:",
          "",
          "[Removed Lines]",
          "55:         case QTESLASecurityCategory.HEURISTIC_I:",
          "56:             return AlgID_qTESLA_I;",
          "57:         case QTESLASecurityCategory.HEURISTIC_III_SIZE:",
          "58:             return AlgID_qTESLA_III_size;",
          "59:         case QTESLASecurityCategory.HEURISTIC_III_SPEED:",
          "60:             return AlgID_qTESLA_III_speed;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java||core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java": [
          "File: core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java -> core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     public static boolean constantTimeAreEqual(",
          "72:     {",
          "74:         {",
          "76:         }",
          "79:         {",
          "81:         }",
          "84:         {",
          "86:         }",
          "91:         {",
          "93:         }",
          "96:     }",
          "98:     public static int compareUnsigned(byte[] a, byte[] b)",
          "",
          "[Removed Lines]",
          "70:         byte[]  a,",
          "71:         byte[]  b)",
          "73:         if (a == b)",
          "75:             return true;",
          "78:         if (a == null || b == null)",
          "80:             return false;",
          "83:         if (a.length != b.length)",
          "85:             return false;",
          "88:         int nonEqual = 0;",
          "90:         for (int i = 0; i != a.length; i++)",
          "92:             nonEqual |= (a[i] ^ b[i]);",
          "95:         return nonEqual == 0;",
          "",
          "[Added Lines]",
          "70:         byte[]  expected,",
          "71:         byte[]  supplied)",
          "73:         if (expected == null || supplied == null)",
          "75:             return false;",
          "78:         if (expected == supplied)",
          "80:             return true;",
          "83:         int len = (expected.length < supplied.length) ? expected.length : supplied.length;",
          "85:         int nonEqual = expected.length ^ supplied.length;",
          "87:         for (int i = 0; i != len; i++)",
          "89:             nonEqual |= (expected[i] ^ supplied[i]);",
          "90:         }",
          "91:         for (int i = len; i < supplied.length; i++)",
          "92:         {",
          "93:             nonEqual |= (supplied[i] ^ ~supplied[i]);",
          "96:         return nonEqual == 0;",
          "97:     }",
          "99:     public static boolean constantTimeAreEqual(int len, byte[] a, int aOff, byte[] b, int bOff)",
          "100:     {",
          "101:         if (null == a)",
          "102:         {",
          "103:             throw new NullPointerException(\"'a' cannot be null\");",
          "104:         }",
          "105:         if (null == b)",
          "106:         {",
          "107:             throw new NullPointerException(\"'b' cannot be null\");",
          "108:         }",
          "109:         if (len < 0)",
          "111:             throw new IllegalArgumentException(\"'len' cannot be negative\");",
          "112:         }",
          "113:         if (aOff > (a.length - len))",
          "114:         {",
          "115:             throw new IndexOutOfBoundsException(\"'aOff' value invalid for specified length\");",
          "116:         }",
          "117:         if (bOff > (b.length - len))",
          "118:         {",
          "119:             throw new IndexOutOfBoundsException(\"'bOff' value invalid for specified length\");",
          "122:         int d = 0;",
          "123:         for (int i = 0; i < len; ++i)",
          "124:         {",
          "125:             d |= (a[aOff + i] ^ b[bOff + i]);",
          "126:         }",
          "127:         return 0 == d;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523:     public static boolean[] clone(boolean[] data)",
          "524:     {",
          "526:     }",
          "528:     public static byte[] clone(byte[] data)",
          "529:     {",
          "531:     }",
          "533:     public static char[] clone(char[] data)",
          "534:     {",
          "536:     }",
          "538:     public static int[] clone(int[] data)",
          "539:     {",
          "541:     }",
          "543:     public static long[] clone(long[] data)",
          "544:     {",
          "546:     }",
          "548:     public static short[] clone(short[] data)",
          "549:     {",
          "551:     }",
          "553:     public static BigInteger[] clone(BigInteger[] data)",
          "554:     {",
          "556:     }",
          "558:     public static byte[] clone(byte[] data, byte[] existing)",
          "",
          "[Removed Lines]",
          "525:         return null == data ? null : data.clone();",
          "530:         return null == data ? null : data.clone();",
          "535:         return null == data ? null : data.clone();",
          "540:         return null == data ? null : data.clone();",
          "545:         return null == data ? null : data.clone();",
          "550:         return null == data ? null : data.clone();",
          "555:         return null == data ? null : data.clone();",
          "",
          "[Added Lines]",
          "557:         return null == data ? null : (boolean[])data.clone();",
          "562:         return null == data ? null : (byte[])data.clone();",
          "567:         return null == data ? null : (char[])data.clone();",
          "572:         return null == data ? null : (int[])data.clone();",
          "577:         return null == data ? null : (long[])data.clone();",
          "582:         return null == data ? null : (short[])data.clone();",
          "587:         return null == data ? null : (BigInteger[])data.clone();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "793:     {",
          "794:         if (null == a)",
          "795:         {",
          "797:         }",
          "798:         if (null == b)",
          "799:         {",
          "801:         }",
          "803:         byte[] r = new byte[a.length + b.length];",
          "",
          "[Removed Lines]",
          "796:             return b.clone();",
          "800:             return a.clone();",
          "",
          "[Added Lines]",
          "828:             return (byte[])b.clone();",
          "832:             return (byte[])a.clone();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "881:     {",
          "882:         if (null == a)",
          "883:         {",
          "885:         }",
          "886:         if (null == b)",
          "887:         {",
          "889:         }",
          "891:         int[] r = new int[a.length + b.length];",
          "",
          "[Removed Lines]",
          "884:             return b.clone();",
          "888:             return a.clone();",
          "",
          "[Added Lines]",
          "916:             return (int[])b.clone();",
          "920:             return (int[])a.clone();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "963:     {",
          "964:         if (null != data)",
          "965:         {",
          "",
          "[Removed Lines]",
          "962:     public static void clear(byte[] array)",
          "",
          "[Added Lines]",
          "994:     public static void clear(byte[] data)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "974:             java.util.Arrays.fill(data, 0);",
          "975:         }",
          "976:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:     public static boolean isNullOrContainsNull(Object[] array)",
          "1011:     {",
          "1012:         if (null == array)",
          "1013:         {",
          "1014:             return true;",
          "1015:         }",
          "1016:         int count = array.length;",
          "1017:         for (int i = 0; i < count; ++i)",
          "1018:         {",
          "1019:             if (null == array[i])",
          "1020:             {",
          "1021:                 return true;",
          "1022:             }",
          "1023:         }",
          "1024:         return false;",
          "1025:     }",
          "",
          "---------------"
        ],
        "core/src/main/jdk1.4/org/bouncycastle/util/Longs.java||core/src/main/jdk1.4/org/bouncycastle/util/Longs.java": [
          "File: core/src/main/jdk1.4/org/bouncycastle/util/Longs.java -> core/src/main/jdk1.4/org/bouncycastle/util/Longs.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.bouncycastle.util;",
          "3: public class Longs",
          "4: {",
          "5:     public static Long valueOf(long value)",
          "6:     {",
          "7:         return new Long(value);",
          "8:     }",
          "9: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "823669db263dda3a87c5f2bbfe2b05dd8cd94c78",
      "candidate_info": {
        "commit_hash": "823669db263dda3a87c5f2bbfe2b05dd8cd94c78",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/823669db263dda3a87c5f2bbfe2b05dd8cd94c78",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java"
        ],
        "message": "ASN1Set now stores its elements in an (immutable) array",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java||core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java||core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         return true;",
          "351:     }",
          "",
          "[Removed Lines]",
          "353:     private ASN1Encodable getNext(Enumeration e)",
          "354:     {",
          "355:         ASN1Encodable encObj = (ASN1Encodable)e.nextElement();",
          "357:         return encObj;",
          "358:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.io.IOException;",
          "4: import java.util.Enumeration;",
          "5: import java.util.Iterator;",
          "8: import org.bouncycastle.util.Arrays;",
          "",
          "[Removed Lines]",
          "6: import java.util.Vector;",
          "",
          "[Added Lines]",
          "6: import java.util.NoSuchElementException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     extends ASN1Primitive",
          "99:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "100: {",
          "102:     protected final boolean isSorted;",
          "",
          "[Removed Lines]",
          "101:     private final Vector set;",
          "",
          "[Added Lines]",
          "101:     private static final ASN1Encodable[] EMPTY_ELEMENTS = new ASN1Encodable[0];",
          "103:     private final ASN1Encodable[] elements;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:     protected ASN1Set()",
          "227:     {",
          "229:         this.isSorted = true;",
          "230:     }",
          "",
          "[Removed Lines]",
          "228:         this.set = new Vector(0);",
          "",
          "[Added Lines]",
          "230:         this.elements = EMPTY_ELEMENTS;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:     protected ASN1Set(ASN1Encodable obj)",
          "237:     {",
          "242:         this.isSorted = true;",
          "243:     }",
          "",
          "[Removed Lines]",
          "238:         Vector tmp = new Vector(1);",
          "239:         tmp.addElement(obj);",
          "241:         this.set = tmp;",
          "",
          "[Added Lines]",
          "240:         this.elements = new ASN1Encodable[]{ obj };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "250:     protected ASN1Set(ASN1EncodableVector v, boolean doSort)",
          "251:     {",
          "260:         {",
          "262:         }",
          "265:         this.isSorted = doSort;",
          "266:     }",
          "",
          "[Removed Lines]",
          "252:         int size = v.size();",
          "253:         Vector tmp = new Vector(size);",
          "254:         for (int i = 0; i < size; ++i)",
          "255:         {",
          "256:             tmp.addElement(v.get(i));",
          "257:         }",
          "259:         if (doSort)",
          "261:             sort(tmp);",
          "264:         this.set = tmp;",
          "",
          "[Added Lines]",
          "251:         int count = v.size();",
          "253:         ASN1Encodable[] tmp;",
          "254:         switch (count)",
          "256:         case 0:",
          "257:             tmp = EMPTY_ELEMENTS;",
          "258:             break;",
          "259:         case 1:",
          "260:             tmp = new ASN1Encodable[]{ v.get(0) };",
          "261:             break;",
          "262:         default:",
          "263:         {",
          "264:             tmp = new ASN1Encodable[count];",
          "265:             for (int i = 0; i < count; ++i)",
          "266:             {",
          "267:                 tmp[i] = v.get(i);",
          "268:             }",
          "269:             if (doSort)",
          "270:             {",
          "271:                 sort(tmp);",
          "272:             }",
          "273:             break;",
          "274:         }",
          "277:         this.elements = tmp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "273:     protected ASN1Set(ASN1Encodable[] array, boolean doSort)",
          "274:     {",
          "283:         {",
          "285:         }",
          "288:         this.isSorted = doSort;",
          "289:     }",
          "292:     {",
          "294:         this.isSorted = isSorted;",
          "295:     }",
          "297:     public Enumeration getObjects()",
          "298:     {",
          "300:     }",
          "",
          "[Removed Lines]",
          "275:         int size = array.length;",
          "276:         Vector tmp = new Vector(size);",
          "277:         for (int i = 0; i < size; ++i)",
          "278:         {",
          "279:             tmp.addElement(array[i]);",
          "280:         }",
          "282:         if (doSort)",
          "284:             sort(tmp);",
          "287:         this.set = tmp;",
          "291:     ASN1Set(Vector v, boolean isSorted)",
          "293:         this.set = v;",
          "299:         return set.elements();",
          "",
          "[Added Lines]",
          "288:         int count = array.length;",
          "290:         ASN1Encodable[] tmp;",
          "291:         switch (count)",
          "293:         case 0:",
          "294:             tmp = EMPTY_ELEMENTS;",
          "295:             break;",
          "296:         case 1:",
          "297:             tmp = new ASN1Encodable[]{ array[0] };",
          "298:             break;",
          "299:         default:",
          "300:         {",
          "301:             tmp = array.clone();",
          "302:             if (doSort)",
          "303:             {",
          "304:                 sort(tmp);",
          "305:             }",
          "306:             break;",
          "307:         }",
          "310:         this.elements = tmp;",
          "314:     ASN1Set(boolean isSorted, ASN1Encodable[] elements)",
          "316:         this.elements = elements;",
          "322:         return new Enumeration()",
          "323:         {",
          "324:             private int pos = 0;",
          "326:             public boolean hasMoreElements()",
          "327:             {",
          "328:                 return pos < elements.length;",
          "329:             }",
          "331:             public Object nextElement()",
          "332:             {",
          "333:                 if (pos >= elements.length)",
          "334:                 {",
          "335:                     throw new NoSuchElementException(\"ASN1Set Enumeration\");",
          "336:                 }",
          "337:                 return elements[pos++];",
          "338:             }",
          "339:         };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "310:     {",
          "312:     }",
          "",
          "[Removed Lines]",
          "308:     public ASN1Encodable getObjectAt(",
          "309:         int index)",
          "311:         return (ASN1Encodable)set.elementAt(index);",
          "",
          "[Added Lines]",
          "348:     public ASN1Encodable getObjectAt(int index)",
          "350:         return elements[index];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "319:     public int size()",
          "320:     {",
          "322:     }",
          "324:     public ASN1Encodable[] toArray()",
          "325:     {",
          "334:     }",
          "336:     public ASN1SetParser parser()",
          "337:     {",
          "340:         return new ASN1SetParser()",
          "341:         {",
          "346:             public ASN1Encodable readObject() throws IOException",
          "347:             {",
          "349:                 {",
          "350:                     return null;",
          "351:                 }",
          "354:                 if (obj instanceof ASN1Sequence)",
          "355:                 {",
          "356:                     return ((ASN1Sequence)obj).parser();",
          "",
          "[Removed Lines]",
          "321:         return set.size();",
          "326:         ASN1Encodable[] values = new ASN1Encodable[this.size()];",
          "328:         for (int i = 0; i != this.size(); i++)",
          "329:         {",
          "330:             values[i] = this.getObjectAt(i);",
          "331:         }",
          "333:         return values;",
          "338:         final ASN1Set outer = this;",
          "342:             private final int max = size();",
          "344:             private int index;",
          "348:                 if (index == max)",
          "353:                 ASN1Encodable obj = getObjectAt(index++);",
          "",
          "[Added Lines]",
          "360:         return elements.length;",
          "365:         return elements.length < 1 ? EMPTY_ELEMENTS : elements.clone();",
          "370:         final int count = size();",
          "374:             private int pos = 0;",
          "378:                 if (count == pos)",
          "383:                 ASN1Encodable obj = elements[pos++];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "366:             public ASN1Primitive getLoadedObject()",
          "367:             {",
          "369:             }",
          "371:             public ASN1Primitive toASN1Primitive()",
          "372:             {",
          "374:             }",
          "375:         };",
          "376:     }",
          "378:     public int hashCode()",
          "379:     {",
          "384:         {",
          "389:         }",
          "392:     }",
          "",
          "[Removed Lines]",
          "368:                 return outer;",
          "373:                 return outer;",
          "380:         Enumeration             e = this.getObjects();",
          "381:         int                     hashCode = size();",
          "383:         while (e.hasMoreElements())",
          "385:             Object o = getNext(e);",
          "386:             hashCode *= 17;",
          "388:             hashCode ^= o.hashCode();",
          "391:         return hashCode;",
          "",
          "[Added Lines]",
          "398:                 return ASN1Set.this;",
          "403:                 return ASN1Set.this;",
          "410:         int count = elements.length;",
          "411:         int hc = count + 1;",
          "413:         for (int i = 0; i < count; ++i)",
          "415:             ASN1Encodable e = this.elements[i];",
          "418:             if (null == e)",
          "419:             {",
          "420:                 e = DERNull.INSTANCE;",
          "421:             }",
          "423:             hc *= 257;",
          "424:             hc ^= e.hashCode();",
          "427:         return hc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "398:     ASN1Primitive toDERObject()",
          "399:     {",
          "401:         if (isSorted)",
          "402:         {",
          "404:         }",
          "405:         else",
          "406:         {",
          "416:         }",
          "419:     }",
          "",
          "[Removed Lines]",
          "400:         Vector v;",
          "403:             v = set;",
          "407:             int size = set.size();",
          "408:             v = new Vector(size);",
          "409:             for (int i = 0; i < size; ++i)",
          "410:             {",
          "411:                 Object obj = set.elementAt(i);",
          "412:                 v.addElement(obj);",
          "413:             }",
          "415:             sort(v);",
          "418:         return new DERSet(v, isSorted);",
          "",
          "[Added Lines]",
          "436:         ASN1Encodable[] tmp;",
          "439:             tmp = elements;",
          "443:             tmp = elements.clone();",
          "445:             sort(tmp);",
          "448:         return new DERSet(isSorted, tmp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "425:     ASN1Primitive toDLObject()",
          "426:     {",
          "428:     }",
          "430:     boolean asn1Equals(ASN1Primitive other)",
          "",
          "[Removed Lines]",
          "427:         return new DLSet(set, isSorted);",
          "",
          "[Added Lines]",
          "457:         return new DLSet(isSorted, elements);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "437:         ASN1Set that = (ASN1Set)other;",
          "440:         {",
          "441:             return false;",
          "442:         }",
          "448:         {",
          "452:             if (p1 != p2 && !p1.asn1Equals(p2))",
          "453:             {",
          "",
          "[Removed Lines]",
          "439:         if (this.size() != that.size())",
          "444:         Enumeration s1 = this.getObjects();",
          "445:         Enumeration s2 = that.getObjects();",
          "447:         while (s1.hasMoreElements())",
          "449:             ASN1Primitive p1 = getNext(s1).toASN1Primitive();",
          "450:             ASN1Primitive p2 = getNext(s2).toASN1Primitive();",
          "",
          "[Added Lines]",
          "469:         int count = this.size();",
          "470:         if (that.size() != count)",
          "475:         for (int i = 0; i < count; ++i)",
          "477:             ASN1Encodable e1 = this.elements[i];",
          "478:             ASN1Encodable e2 = that.elements[i];",
          "481:             ASN1Primitive p1 = null == e1 ? DERNull.INSTANCE : e1.toASN1Primitive();",
          "482:             ASN1Primitive p2 = null == e2 ? DERNull.INSTANCE : e2.toASN1Primitive();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "458:         return true;",
          "459:     }",
          "474:     boolean isConstructed()",
          "475:     {",
          "476:         return true;",
          "",
          "[Removed Lines]",
          "461:     private ASN1Encodable getNext(Enumeration e)",
          "462:     {",
          "463:         ASN1Encodable encObj = (ASN1Encodable)e.nextElement();",
          "466:         if (encObj == null)",
          "467:         {",
          "468:             return DERNull.INSTANCE;",
          "469:         }",
          "471:         return encObj;",
          "472:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "482:     public String toString()",
          "483:     {",
          "485:     }",
          "487:     public Iterator<ASN1Encodable> iterator()",
          "",
          "[Removed Lines]",
          "484:         return set.toString();",
          "",
          "[Added Lines]",
          "503:         int count = size();",
          "504:         if (0 == count)",
          "505:         {",
          "506:             return \"[]\";",
          "507:         }",
          "509:         StringBuffer sb = new StringBuffer();",
          "510:         sb.append('[');",
          "511:         for (int i = 0;;)",
          "512:         {",
          "513:             sb.append(elements[i]);",
          "514:             if (++i >= count)",
          "515:             {",
          "516:                 break;",
          "517:             }",
          "518:             sb.append(\", \");",
          "519:         }",
          "520:         sb.append(']');",
          "521:         return sb.toString();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "519:         return len == a.length;",
          "520:     }",
          "523:     {",
          "525:         {",
          "526:             return;",
          "527:         }",
          "529:         boolean swapped = true;",
          "532:         while (swapped)",
          "533:         {",
          "534:             int index = 0;",
          "535:             int swapIndex = 0;",
          "538:             swapped = false;",
          "540:             while (index != lastSwap)",
          "541:             {",
          "544:                 if (lessThanOrEqual(a, b))",
          "545:                 {",
          "",
          "[Removed Lines]",
          "522:     private static void sort(Vector set)",
          "524:         if (set.size() < 2)",
          "530:         int lastSwap = set.size() - 1;",
          "536:             byte[] a = getDEREncoded((ASN1Encodable)set.elementAt(0));",
          "542:                 byte[] b = getDEREncoded((ASN1Encodable)set.elementAt(index + 1));",
          "",
          "[Added Lines]",
          "559:     private static void sort(ASN1Encodable[] t)",
          "561:         if (t.length < 2)",
          "567:         int lastSwap = t.length - 1;",
          "573:             byte[] a = getDEREncoded(t[0]);",
          "579:                 byte[] b = getDEREncoded(t[index + 1]);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "547:                 }",
          "548:                 else",
          "549:                 {",
          "555:                     swapped = true;",
          "556:                     swapIndex = index;",
          "",
          "[Removed Lines]",
          "550:                     Object o = set.elementAt(index);",
          "552:                     set.setElementAt(set.elementAt(index + 1), index);",
          "553:                     set.setElementAt(o, index + 1);",
          "",
          "[Added Lines]",
          "587:                     ASN1Encodable e = t[index];",
          "588:                     t[index] = t[index + 1];",
          "589:                     t[index + 1] = e;",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSet.java -> core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.io.IOException;",
          "4: import java.io.OutputStream;",
          "5: import java.util.Enumeration;",
          "",
          "[Removed Lines]",
          "6: import java.util.Vector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         super(v, doSort);",
          "70:     }",
          "73:     {",
          "75:     }",
          "77:     public void encodeTo(OutputStream output) throws IOException",
          "",
          "[Removed Lines]",
          "72:     DERSet(Vector v, boolean isSorted)",
          "74:         super(v, isSorted);",
          "",
          "[Added Lines]",
          "71:     DERSet(boolean isSorted, ASN1Encodable[] elements)",
          "73:         super(isSorted, elements);",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSet.java -> core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.io.IOException;",
          "4: import java.util.Enumeration;",
          "",
          "[Removed Lines]",
          "5: import java.util.Vector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         super(a, false);",
          "92:     }",
          "95:     {",
          "97:     }",
          "99:     private int getBodyLength()",
          "",
          "[Removed Lines]",
          "94:     DLSet(Vector v, boolean isSorted)",
          "96:         super(v, isSorted);",
          "",
          "[Added Lines]",
          "93:     DLSet(boolean isSorted, ASN1Encodable[] elements)",
          "95:         super(isSorted, elements);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdbda76f4cdb1863cb46bf4b08e7ca6504ab3aeb",
      "candidate_info": {
        "commit_hash": "bdbda76f4cdb1863cb46bf4b08e7ca6504ab3aeb",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/bdbda76f4cdb1863cb46bf4b08e7ca6504ab3aeb",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1External.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/DERBitString.java",
          "core/src/main/java/org/bouncycastle/asn1/DERExternal.java",
          "core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
          "core/src/main/java/org/bouncycastle/asn1/DEROctetString.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/DLBitString.java",
          "core/src/main/java/org/bouncycastle/asn1/DLExternal.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java"
        ],
        "message": "DER/DL objects return this from toDERObject/toDLObject when allowable\n\n- a DERSet has to be already sorted for this to happen",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1External.java||core/src/main/java/org/bouncycastle/asn1/ASN1External.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java||core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/DERBitString.java||core/src/main/java/org/bouncycastle/asn1/DERBitString.java",
          "core/src/main/java/org/bouncycastle/asn1/DERExternal.java||core/src/main/java/org/bouncycastle/asn1/DERExternal.java",
          "core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java||core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
          "core/src/main/java/org/bouncycastle/asn1/DEROctetString.java||core/src/main/java/org/bouncycastle/asn1/DEROctetString.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSequence.java||core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java",
          "core/src/main/java/org/bouncycastle/asn1/DLBitString.java||core/src/main/java/org/bouncycastle/asn1/DLBitString.java",
          "core/src/main/java/org/bouncycastle/asn1/DLExternal.java||core/src/main/java/org/bouncycastle/asn1/DLExternal.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSequence.java||core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1External.java||core/src/main/java/org/bouncycastle/asn1/ASN1External.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1External.java -> core/src/main/java/org/bouncycastle/asn1/ASN1External.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     }",
          "108:     ASN1Primitive toDERObject()",
          "",
          "[Removed Lines]",
          "109:      {",
          "110:          if (this instanceof DERExternal)",
          "111:          {",
          "112:              return this;",
          "113:          }",
          "115:          return new DERExternal(directReference, indirectReference, dataValueDescriptor, encoding, externalContent);",
          "116:      }",
          "",
          "[Added Lines]",
          "109:     {",
          "110:         return new DERExternal(directReference, indirectReference, dataValueDescriptor, encoding, externalContent);",
          "111:     }",
          "113:     ASN1Primitive toDLObject()",
          "114:     {",
          "115:         return new DLExternal(directReference, indirectReference, dataValueDescriptor, encoding, externalContent);",
          "116:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java||core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java -> core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:         return new DERGeneralizedTime(time);",
          "455:     }",
          "457:     boolean asn1Equals(",
          "458:         ASN1Primitive o)",
          "459:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:     ASN1Primitive toDLObject()",
          "458:     {",
          "459:         return new DERGeneralizedTime(time);",
          "460:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "100: {",
          "101:     private Vector set = new Vector();",
          "",
          "[Removed Lines]",
          "102:     private boolean isSorted = false;",
          "",
          "[Added Lines]",
          "102:     boolean isSorted = false;",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERBitString.java||core/src/main/java/org/bouncycastle/asn1/DERBitString.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERBitString.java -> core/src/main/java/org/bouncycastle/asn1/DERBitString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:         }",
          "142:     }",
          "144:     static DERBitString fromOctetString(byte[] bytes)",
          "145:     {",
          "146:         if (bytes.length < 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     ASN1Primitive toDERObject()",
          "145:     {",
          "146:         return this;",
          "147:     }",
          "149:     ASN1Primitive toDLObject()",
          "150:     {",
          "151:         return this;",
          "152:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERExternal.java||core/src/main/java/org/bouncycastle/asn1/DERExternal.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERExternal.java -> core/src/main/java/org/bouncycastle/asn1/DERExternal.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         super(directReference, indirectReference, dataValueDescriptor, encoding, externalData);",
          "54:     }",
          "56:     int encodedLength()",
          "57:         throws IOException",
          "58:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     ASN1Primitive toDERObject()",
          "57:     {",
          "58:         return this;",
          "59:     }",
          "61:     ASN1Primitive toDLObject()",
          "62:     {",
          "63:         return this;",
          "64:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java||core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java -> core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     {",
          "114:         out.writeEncoded(BERTags.GENERALIZED_TIME, getDERTime());",
          "115:     }",
          "116: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     ASN1Primitive toDERObject()",
          "118:     {",
          "119:         return this;",
          "120:     }",
          "122:     ASN1Primitive toDLObject()",
          "123:     {",
          "124:         return this;",
          "125:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DEROctetString.java||core/src/main/java/org/bouncycastle/asn1/DEROctetString.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DEROctetString.java -> core/src/main/java/org/bouncycastle/asn1/DEROctetString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         out.writeEncoded(BERTags.OCTET_STRING, string);",
          "49:     }",
          "51:     static void encode(",
          "52:         DEROutputStream derOut,",
          "53:         byte[]          bytes)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     ASN1Primitive toDERObject()",
          "52:     {",
          "53:         return this;",
          "54:     }",
          "56:     ASN1Primitive toDLObject()",
          "57:     {",
          "58:         return this;",
          "59:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSequence.java||core/src/main/java/org/bouncycastle/asn1/DERSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSequence.java -> core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:             dOut.writeObject((ASN1Encodable)obj);",
          "110:         }",
          "111:     }",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     ASN1Primitive toDERObject()",
          "114:     {",
          "115:         return this;",
          "116:     }",
          "118:     ASN1Primitive toDLObject()",
          "119:     {",
          "120:         return this;",
          "121:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSet.java -> core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:             dOut.writeObject((ASN1Encodable)obj);",
          "121:         }",
          "122:     }",
          "123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     ASN1Primitive toDERObject()",
          "125:     {",
          "126:         return isSorted ? this : super.toDERObject();",
          "127:     }",
          "129:     ASN1Primitive toDLObject()",
          "130:     {",
          "131:         return this;",
          "132:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java -> core/src/main/java/org/bouncycastle/asn1/DERTaggedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:             out.writeEncoded(BERTags.CONSTRUCTED | BERTags.TAGGED, tagNo, ZERO_BYTES);",
          "116:         }",
          "117:     }",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     ASN1Primitive toDERObject()",
          "120:     {",
          "121:         return this;",
          "122:     }",
          "124:     ASN1Primitive toDLObject()",
          "125:     {",
          "126:         return this;",
          "127:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLBitString.java||core/src/main/java/org/bouncycastle/asn1/DLBitString.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLBitString.java -> core/src/main/java/org/bouncycastle/asn1/DLBitString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:         out.writeEncoded(BERTags.BIT_STRING, (byte)padBits, data);",
          "131:     }",
          "133:     static DLBitString fromOctetString(byte[] bytes)",
          "134:     {",
          "135:         if (bytes.length < 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     ASN1Primitive toDLObject()",
          "134:     {",
          "135:         return this;",
          "136:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLExternal.java||core/src/main/java/org/bouncycastle/asn1/DLExternal.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLExternal.java -> core/src/main/java/org/bouncycastle/asn1/DLExternal.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:         super(directReference, indirectReference, dataValueDescriptor, encoding, externalData);",
          "54:     }",
          "56:     int encodedLength()",
          "57:         throws IOException",
          "58:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:     ASN1Primitive toDLObject()",
          "57:     {",
          "58:         return this;",
          "59:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSequence.java||core/src/main/java/org/bouncycastle/asn1/DLSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSequence.java -> core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:             dOut.writeObject((ASN1Encodable)obj);",
          "102:         }",
          "103:     }",
          "104: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     ASN1Primitive toDLObject()",
          "106:     {",
          "107:         return this;",
          "108:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSet.java -> core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:             dOut.writeObject((ASN1Encodable)obj);",
          "144:         }",
          "145:     }",
          "146: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     ASN1Primitive toDLObject()",
          "148:     {",
          "149:         return this;",
          "150:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java||core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java -> core/src/main/java/org/bouncycastle/asn1/DLTaggedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:             out.writeEncoded(BERTags.CONSTRUCTED | BERTags.TAGGED, tagNo, ZERO_BYTES);",
          "110:         }",
          "111:     }",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     ASN1Primitive toDLObject()",
          "114:     {",
          "115:         return this;",
          "116:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}