{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1885a71b19ef541ac14e7ecb7b24e0e938706dd6",
      "candidate_info": {
        "commit_hash": "1885a71b19ef541ac14e7ecb7b24e0e938706dd6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1885a71b19ef541ac14e7ecb7b24e0e938706dd6",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java"
        ],
        "message": "PDFBOX-4892: increase test coverage as suggested by Deepika Tiwari; closes #88\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882739 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/state/RenderingIntentTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         Assert.assertEquals(\"AbsoluteColorimetric\", retval);",
          "105:     }",
          "106: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     @Test",
          "108:     public void testIsFill()",
          "109:     {",
          "111:         final RenderingMode objectUnderTest = RenderingMode.FILL;",
          "114:         final boolean retval = objectUnderTest.isFill();",
          "117:         Assert.assertEquals(true, retval);",
          "118:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29c0d0fb6857a8a6ab6414723612d6b6e4d8a874",
      "candidate_info": {
        "commit_hash": "29c0d0fb6857a8a6ab6414723612d6b6e4d8a874",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/29c0d0fb6857a8a6ab6414723612d6b6e4d8a874",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java"
        ],
        "message": "PDFBOX-4892: set exact initial capacity, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887041 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java||fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java -> fontbox/src/main/java/org/apache/fontbox/cff/Type2CharString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "383:     private static <E> List<List<E>> split(List<E> list, int size)",
          "384:     {",
          "387:         {",
          "388:             result.add(list.subList(i * size, (i + 1) * size));",
          "389:         }",
          "",
          "[Removed Lines]",
          "385:         List<List<E>> result = new ArrayList<List<E>>();",
          "386:         for (int i = 0; i < list.size() / size; i++)",
          "",
          "[Added Lines]",
          "385:         int listSize = list.size() / size;",
          "386:         List<List<E>> result = new ArrayList<List<E>>(listSize);",
          "387:         for (int i = 0; i < listSize; i++)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85777f0d20548ec7c99e4f83b52b258b18951e51",
      "candidate_info": {
        "commit_hash": "85777f0d20548ec7c99e4f83b52b258b18951e51",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/85777f0d20548ec7c99e4f83b52b258b18951e51",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java",
          "pdfbox/src/test/resources/org/apache/pdfbox/encryption/AESkeylength128.pdf",
          "pdfbox/src/test/resources/org/apache/pdfbox/encryption/AESkeylength256.pdf",
          "pdfbox/src/test/resources/org/apache/pdfbox/encryption/PDFBOX-4421-keystore.pfx"
        ],
        "message": "PDFBOX-4421: adjust test to use the files provided by Christian Appl\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882255 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java||pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java||pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java -> pdfbox/src/test/java/org/apache/pdfbox/encryption/TestPublicKeyEncryption.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:         document.save(file);",
          "339:         return file;",
          "340:     }",
          "341: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     @Test",
          "343:     public void testReadPubkeyEncryptedAES128() throws IOException",
          "344:     {",
          "345:         InputStream is = TestPublicKeyEncryption.class.getResourceAsStream(\"AESkeylength128.pdf\");",
          "346:         PDDocument doc = PDDocument.load(is,",
          "347:                 \"w!z%C*F-JaNdRgUk\",",
          "348:                 TestPublicKeyEncryption.class.getResourceAsStream(\"PDFBOX-4421-keystore.pfx\"),",
          "349:                 \"testnutzer\");",
          "350:         PDFTextStripper stripper = new PDFTextStripper();",
          "351:         Assert.assertEquals(\"Key length: 128\", stripper.getText(doc).trim());",
          "352:         is.close();",
          "353:         doc.close();",
          "354:     }",
          "356:     @Test",
          "357:     public void testReadPubkeyEncryptedAES256() throws IOException",
          "358:     {",
          "359:         InputStream is = TestPublicKeyEncryption.class.getResourceAsStream(\"AESkeylength256.pdf\");",
          "360:         PDDocument doc = PDDocument.load(is,",
          "361:                 \"w!z%C*F-JaNdRgUk\",",
          "362:                 TestPublicKeyEncryption.class.getResourceAsStream(\"PDFBOX-4421-keystore.pfx\"),",
          "363:                 \"testnutzer\");",
          "364:         PDFTextStripper stripper = new PDFTextStripper();",
          "365:         Assert.assertEquals(\"Key length: 256\", stripper.getText(doc).trim());",
          "366:         is.close();",
          "367:         doc.close();",
          "368:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "002eada2f367bc6c151314f22abdac554cf7db72",
      "candidate_info": {
        "commit_hash": "002eada2f367bc6c151314f22abdac554cf7db72",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/002eada2f367bc6c151314f22abdac554cf7db72",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"
        ],
        "message": "PDFBOX-5175: fix if clause\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889156 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:         {",
          "383:             int ivSize = (int) IOUtils.populateBuffer(data, iv);",
          "385:             {",
          "386:                 return false;",
          "387:             }",
          "",
          "[Removed Lines]",
          "384:             if (ivSize == -1)",
          "",
          "[Added Lines]",
          "384:             if (ivSize == 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a7d749ee970ae2536196721b6b93a025c043720",
      "candidate_info": {
        "commit_hash": "9a7d749ee970ae2536196721b6b93a025c043720",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9a7d749ee970ae2536196721b6b93a025c043720",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java"
        ],
        "message": "PDFBOX-5090: strict mode with overflow detection is limited to CMaps within PDFs\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886057 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/CMapManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:             return cmap;",
          "53:         }",
          "59:         cMapCache.put(targetCmap.getName(), targetCmap);",
          "",
          "[Removed Lines]",
          "55:         CMapParser parser = new CMapParser();",
          "56:         CMap targetCmap = parser.parsePredefined(cMapName);",
          "",
          "[Added Lines]",
          "55:         CMap targetCmap = new CMapParser().parsePredefined(cMapName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:         CMap targetCmap = null;",
          "72:         if (cMapStream != null)",
          "73:         {",
          "76:         }",
          "77:         return targetCmap;",
          "78:     }",
          "",
          "[Removed Lines]",
          "74:             CMapParser parser = new CMapParser();",
          "75:             targetCmap = parser.parse(cMapStream);",
          "",
          "[Added Lines]",
          "74:             targetCmap = new CMapParser(true).parse(cMapStream);",
          "",
          "---------------"
        ]
      }
    }
  ]
}