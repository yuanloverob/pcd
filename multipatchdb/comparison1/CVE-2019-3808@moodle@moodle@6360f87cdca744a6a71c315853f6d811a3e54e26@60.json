{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1eeb465a0cf0a1514c57ea123a528f3ed3313430",
      "candidate_info": {
        "commit_hash": "1eeb465a0cf0a1514c57ea123a528f3ed3313430",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1eeb465a0cf0a1514c57ea123a528f3ed3313430",
        "files": [
          "customfield/amd/build/form.min.js",
          "customfield/amd/src/form.js",
          "customfield/classes/category.php",
          "customfield/classes/category_controller.php",
          "customfield/classes/data.php",
          "customfield/classes/data_controller.php",
          "customfield/classes/event/category_deleted.php",
          "customfield/classes/event/field_deleted.php",
          "customfield/classes/field.php",
          "customfield/classes/field_controller.php",
          "customfield/field/checkbox/lang/en/customfield_checkbox.php",
          "customfield/field/checkbox/version.php",
          "customfield/field/date/version.php",
          "customfield/field/select/lang/en/customfield_select.php",
          "customfield/field/select/version.php",
          "customfield/field/text/lang/en/customfield_text.php",
          "customfield/field/text/version.php",
          "customfield/field/textarea/lang/en/customfield_textarea.php",
          "customfield/index.html",
          "customfield/templates/list.mustache",
          "customfield/tests/api_test.php",
          "customfield/tests/category_controller_test.php",
          "customfield/tests/data_controller_test.php",
          "lang/en/customfield.php",
          "lib/classes/plugininfo/customfield.php",
          "lib/db/install.xml",
          "lib/db/services.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-57898 core_customfield: Custom fields API\n\nThis commit is part of work on Custom fields API,\nto minimize commit history in moodle core the work of a team of developers was split\ninto several commits with different authors but the authorship of individual\nlines of code may be different from the commit author.",
        "before_after_code_files": [
          "customfield/amd/src/form.js||customfield/amd/src/form.js",
          "customfield/classes/category.php||customfield/classes/category.php",
          "customfield/classes/category_controller.php||customfield/classes/category_controller.php",
          "customfield/classes/data.php||customfield/classes/data.php",
          "customfield/classes/data_controller.php||customfield/classes/data_controller.php",
          "customfield/classes/event/category_deleted.php||customfield/classes/event/category_deleted.php",
          "customfield/classes/event/field_deleted.php||customfield/classes/event/field_deleted.php",
          "customfield/classes/field.php||customfield/classes/field.php",
          "customfield/classes/field_controller.php||customfield/classes/field_controller.php",
          "customfield/field/checkbox/lang/en/customfield_checkbox.php||customfield/field/checkbox/lang/en/customfield_checkbox.php",
          "customfield/field/checkbox/version.php||customfield/field/checkbox/version.php",
          "customfield/field/date/version.php||customfield/field/date/version.php",
          "customfield/field/select/lang/en/customfield_select.php||customfield/field/select/lang/en/customfield_select.php",
          "customfield/field/select/version.php||customfield/field/select/version.php",
          "customfield/field/text/lang/en/customfield_text.php||customfield/field/text/lang/en/customfield_text.php",
          "customfield/field/text/version.php||customfield/field/text/version.php",
          "customfield/field/textarea/lang/en/customfield_textarea.php||customfield/field/textarea/lang/en/customfield_textarea.php",
          "customfield/templates/list.mustache||customfield/templates/list.mustache",
          "customfield/tests/api_test.php||customfield/tests/api_test.php",
          "customfield/tests/category_controller_test.php||customfield/tests/category_controller_test.php",
          "customfield/tests/data_controller_test.php||customfield/tests/data_controller_test.php",
          "lang/en/customfield.php||lang/en/customfield.php",
          "lib/classes/plugininfo/customfield.php||lib/classes/plugininfo/customfield.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "customfield/amd/src/form.js||customfield/amd/src/form.js": [
          "File: customfield/amd/src/form.js -> customfield/amd/src/form.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/str', 'core/notification', 'core/ajax', 'core/templates', 'core/sortable_list'], function(",
          "25:         $, Str, Notification, Ajax, Templates, SortableList) {",
          "36:     var confirmDelete = function(id, type, component, area, itemid) {",
          "37:         Str.get_strings([",
          "38:             {'key': 'confirm'},",
          "39:             {'key': 'confirmdelete' + type, component: 'core_customfield'},",
          "40:             {'key': 'yes'},",
          "41:             {'key': 'no'},",
          "42:         ]).done(function(s) {",
          "43:             Notification.confirm(s[0], s[1], s[2], s[3], function() {",
          "44:                 var func = (type === 'field') ? 'core_customfield_delete_field' : 'core_customfield_delete_category';",
          "45:                 Ajax.call([",
          "46:                     {methodname: func, args: {id: id}},",
          "47:                     {methodname: 'core_customfield_reload_template', args: {component: component, area: area, itemid: itemid}}",
          "48:                 ])[1].then(function(response) {",
          "49:                     return Templates.render('core_customfield/list', response);",
          "50:                 }).then(function(html, js) {",
          "51:                     Templates.replaceNodeContents($('[data-region=\"list-page\"]'), html, js);",
          "52:                     return null;",
          "53:                 }).fail(Notification.exception);",
          "54:             });",
          "55:         }).fail(Notification.exception);",
          "56:     };",
          "65:     var createNewCategory = function(component, area, itemid) {",
          "66:         var promises = Ajax.call([",
          "67:                 {methodname: 'core_customfield_create_category', args: {component: component, area: area, itemid: itemid}},",
          "68:                 {methodname: 'core_customfield_reload_template', args: {component: component, area: area, itemid: itemid}}",
          "69:             ]),",
          "70:             categoryid;",
          "72:         promises[0].then(function(response) {",
          "73:             categoryid = response;",
          "74:             return null;",
          "75:         }).fail(Notification.exception);",
          "77:         promises[1].then(function(response) {",
          "78:             return Templates.render('core_customfield/list', response);",
          "79:         }).then(function(html, js) {",
          "80:             Templates.replaceNodeContents($('[data-region=\"list-page\"]'), html, js);",
          "81:             window.location.href = '#category-' + categoryid;",
          "82:             return null;",
          "83:         }).fail(Notification.exception);",
          "84:     };",
          "86:     return {",
          "90:         init: function() {",
          "91:             var mainlist = $('#customfield_catlist'),",
          "92:                 component = mainlist.attr('data-component'),",
          "93:                 area = mainlist.attr('data-area'),",
          "94:                 itemid = mainlist.attr('data-itemid');",
          "95:             $(\"[data-role=deletefield]\").on('click', function(e) {",
          "96:                 confirmDelete($(this).attr('data-id'), 'field', component, area, itemid);",
          "97:                 e.preventDefault();",
          "98:             });",
          "99:             $(\"[data-role=deletecategory]\").on('click', function(e) {",
          "100:                 confirmDelete($(this).attr('data-id'), 'category', component, area, itemid);",
          "101:                 e.preventDefault();",
          "102:             });",
          "103:             $('[data-role=addnewcategory]').on('click', function() {",
          "104:                 createNewCategory(component, area, itemid);",
          "105:             });",
          "107:             var categoryName = function(element) {",
          "108:                 return element",
          "109:                     .closest('[data-category-id]')",
          "110:                     .find('[data-inplaceeditable][data-itemtype=category][data-component=core_customfield]')",
          "111:                     .attr('data-value');",
          "112:             };",
          "115:             var sortCat = new SortableList(",
          "116:                 '#customfield_catlist .categorieslist',",
          "117:                 {moveHandlerSelector: '.movecategory [data-drag-type=move]'}",
          "118:             );",
          "120:             sortCat.getElementName = function(el) {",
          "121:                 return $.Deferred().resolve(categoryName(el));",
          "122:             };",
          "124:             $('[data-category-id]').on('sortablelist-drop', function(evt, info) {",
          "125:                 if (info.positionChanged) {",
          "126:                     var promises = Ajax.call([",
          "127:                         {",
          "128:                             methodname: 'core_customfield_move_category',",
          "129:                             args: {",
          "130:                                 id: info.element.data('category-id'),",
          "131:                                 beforeid: info.targetNextElement.data('category-id')",
          "132:                             }",
          "134:                         },",
          "135:                     ]);",
          "136:                     promises[0].fail(Notification.exception);",
          "137:                 }",
          "138:                 evt.stopPropagation(); // Important for nested lists to prevent multiple targets.",
          "139:             });",
          "142:             var sort = new SortableList(",
          "143:                 '#customfield_catlist .fieldslist tbody',",
          "144:                 {moveHandlerSelector: '.movefield [data-drag-type=move]'}",
          "145:             );",
          "147:             sort.getDestinationName = function(parentElement, afterElement) {",
          "148:                 if (!afterElement.length) {",
          "149:                     return Str.get_string('totopofcategory', 'customfield', categoryName(parentElement));",
          "150:                 } else if (afterElement.attr('data-field-name')) {",
          "151:                     return Str.get_string('afterfield', 'customfield', afterElement.attr('data-field-name'));",
          "152:                 } else {",
          "153:                     return $.Deferred().resolve('');",
          "154:                 }",
          "155:             };",
          "157:             $('[data-field-name]').on('sortablelist-drop', function(evt, info) {",
          "158:                 evt.stopPropagation(); // Important for nested lists to prevent multiple targets.",
          "159:                 if (info.positionChanged) {",
          "160:                     var promises = Ajax.call([",
          "161:                         {",
          "162:                             methodname: 'core_customfield_move_field',",
          "163:                             args: {",
          "164:                                 id: info.element.data('field-id'),",
          "165:                                 beforeid: info.targetNextElement.data('field-id'),",
          "166:                                 categoryid: Number(info.targetList.closest('[data-category-id]').attr('data-category-id'))",
          "167:                             },",
          "168:                         },",
          "169:                     ]);",
          "170:                     promises[0].fail(Notification.exception);",
          "171:                 }",
          "172:             }).on('sortablelist-drag', function(evt) {",
          "173:                 evt.stopPropagation(); // Important for nested lists to prevent multiple targets.",
          "175:                 Str.get_string('therearenofields', 'core_customfield').then(function(s) {",
          "176:                     $('#customfield_catlist .categorieslist').children().each(function() {",
          "177:                         var fields = $(this).find($('.field')),",
          "178:                             nofields = $(this).find($('.nofields'));",
          "179:                         if (!fields.length && !nofields.length) {",
          "180:                             $(this).find('tbody').append(",
          "181:                                 '<tr class=\"nofields\"><td colspan=\"5\">' + s + '</td></tr>'",
          "182:                             );",
          "183:                         }",
          "184:                         if (fields.length && nofields.length) {",
          "185:                             nofields.remove();",
          "186:                         }",
          "187:                     });",
          "188:                     return null;",
          "189:                 }).fail(Notification.exception);",
          "190:             });",
          "192:             $('[data-category-id], [data-field-name]').on('sortablelist-dragstart',",
          "193:                 function(evt, info) {",
          "194:                     setTimeout(function() {",
          "195:                         $('.sortable-list-is-dragged').width(info.element.width());",
          "196:                     }, 501);",
          "197:                 }",
          "198:             );",
          "200:         }",
          "201:     };",
          "202: });",
          "",
          "---------------"
        ],
        "customfield/classes/category.php||customfield/classes/category.php": [
          "File: customfield/classes/category.php -> customfield/classes/category.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield;",
          "27: use core\\persistent;",
          "29: defined('MOODLE_INTERNAL') || die;",
          "38: class category extends persistent {",
          "42:     const TABLE = 'customfield_category';",
          "49:     protected static function define_properties(): array {",
          "50:         return array(",
          "51:                 'name' => [",
          "52:                         'type' => PARAM_TEXT,",
          "53:                 ],",
          "54:                 'description' => [",
          "55:                         'type' => PARAM_RAW,",
          "56:                         'optional' => true,",
          "57:                         'default' => null,",
          "58:                         'null' => NULL_ALLOWED",
          "59:                 ],",
          "60:                 'descriptionformat' => [",
          "61:                         'type' => PARAM_INT,",
          "62:                         'default' => FORMAT_MOODLE,",
          "63:                         'optional' => true",
          "64:                 ],",
          "65:                 'component' => [",
          "66:                         'type' => PARAM_COMPONENT",
          "67:                 ],",
          "68:                 'area' => [",
          "69:                         'type' => PARAM_COMPONENT",
          "70:                 ],",
          "71:                 'itemid' => [",
          "72:                         'type' => PARAM_INT,",
          "73:                         'optional' => true,",
          "74:                         'default' => 0",
          "75:                 ],",
          "76:                 'contextid' => [",
          "77:                         'type' => PARAM_INT,",
          "78:                         'optional' => false",
          "79:                 ],",
          "80:                 'sortorder' => [",
          "81:                         'type' => PARAM_INT,",
          "82:                         'optional' => true,",
          "83:                         'default' => -1",
          "84:                 ],",
          "85:         );",
          "86:     }",
          "87: }",
          "",
          "---------------"
        ],
        "customfield/classes/category_controller.php||customfield/classes/category_controller.php": [
          "File: customfield/classes/category_controller.php -> customfield/classes/category_controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield;",
          "27: defined('MOODLE_INTERNAL') || die;",
          "36: class category_controller {",
          "43:     protected $category;",
          "48:     protected $fields = [];",
          "51:     protected $handler;",
          "62:     protected function __construct(int $id = 0, \\stdClass $record = null) {",
          "63:         $this->category = new category($id, $record);",
          "64:     }",
          "80:     public static function create(int $id, \\stdClass $record = null, handler $handler = null): category_controller {",
          "81:         global $DB;",
          "82:         if ($id && $record) {",
          "84:             debugging('Too many parameters, either id need to be specified or a record, but not both.',",
          "85:                 DEBUG_DEVELOPER);",
          "86:         }",
          "87:         if ($id) {",
          "88:             if (!$record = $DB->get_record(category::TABLE, array('id' => $id), '*', IGNORE_MISSING)) {",
          "89:                 throw new \\moodle_exception('categorynotfound', 'core_customfield');",
          "90:             }",
          "91:         }",
          "92:         if (empty($record->component)) {",
          "93:             if (!$handler) {",
          "94:                 throw new \\coding_exception('Not enough parameters to initialise category_controller - unknown component');",
          "95:             }",
          "96:             $record->component = $handler->get_component();",
          "97:         }",
          "98:         if (empty($record->area)) {",
          "99:             if (!$handler) {",
          "100:                 throw new \\coding_exception('Not enough parameters to initialise category_controller - unknown area');",
          "101:             }",
          "102:             $record->area = $handler->get_area();",
          "103:         }",
          "104:         if (!isset($record->itemid)) {",
          "105:             if (!$handler) {",
          "106:                 throw new \\coding_exception('Not enough parameters to initialise category_controller - unknown itemid');",
          "107:             }",
          "108:             $record->itemid = $handler->get_itemid();",
          "109:         }",
          "110:         $category = new self(0, $record);",
          "111:         if (!$category->get('contextid')) {",
          "113:             $handlernew = $handler ?? $category->get_handler();",
          "114:             $category->set('contextid', $handlernew->get_configuration_context()->id);",
          "115:         }",
          "116:         if ($handler) {",
          "117:             $category->set_handler($handler);",
          "118:         }",
          "119:         return $category;",
          "120:     }",
          "128:     final public function get($property) {",
          "129:         return $this->category->get($property);",
          "130:     }",
          "138:     final public function set($property, $value) {",
          "139:         return $this->category->set($property, $value);",
          "140:     }",
          "147:     final public function delete() {",
          "148:         return $this->category->delete();",
          "149:     }",
          "156:     final public function save() {",
          "157:         $this->category->save();",
          "158:     }",
          "165:     public function get_fields() {",
          "166:         return $this->fields;",
          "167:     }",
          "174:     public function add_field(field_controller $field) {",
          "175:         $this->fields[$field->get('id')] = $field;",
          "176:     }",
          "183:     public function get_handler(): handler {",
          "184:         if ($this->handler === null) {",
          "185:             $this->handler = handler::get_handler($this->get('component'), $this->get('area'), $this->get('itemid'));",
          "186:         }",
          "187:         return $this->handler;",
          "188:     }",
          "196:     public function set_handler(handler $handler) {",
          "198:         if ($this->get('component') !== $handler->get_component()) {",
          "199:             throw new \\coding_exception('Component of the handler does not match the one from the record');",
          "200:         }",
          "201:         if ($this->get('area') !== $handler->get_area()) {",
          "202:             throw new \\coding_exception('Area of the handler does not match the one from the record');",
          "203:         }",
          "204:         if ($this->get('itemid') != $handler->get_itemid()) {",
          "205:             throw new \\coding_exception('Itemid of the handler does not match the one from the record');",
          "206:         }",
          "207:         if ($this->get('contextid') != $handler->get_configuration_context()->id) {",
          "208:             throw new \\coding_exception('Context of the handler does not match the one from the record');",
          "209:         }",
          "210:         $this->handler = $handler;",
          "211:     }",
          "218:     final public function to_record() {",
          "219:         return $this->category->to_record();",
          "220:     }",
          "227:     public function get_formatted_name(): string {",
          "228:         $context = $this->get_handler()->get_configuration_context();",
          "229:         return format_string($this->get('name'), true, ['context' => $context]);",
          "230:     }",
          "231: }",
          "",
          "---------------"
        ],
        "customfield/classes/data.php||customfield/classes/data.php": [
          "File: customfield/classes/data.php -> customfield/classes/data.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield;",
          "27: use core\\persistent;",
          "29: defined('MOODLE_INTERNAL') || die;",
          "38: class data extends persistent {",
          "43:     const TABLE = 'customfield_data';",
          "50:     protected static function define_properties(): array {",
          "51:         return array(",
          "52:                 'fieldid'        => [",
          "53:                         'type' => PARAM_INT,",
          "54:                         'optional' => false,",
          "55:                         'null'     => NULL_NOT_ALLOWED",
          "56:                 ],",
          "57:                 'instanceid'       => [",
          "58:                         'type' => PARAM_INT,",
          "59:                         'optional' => false,",
          "60:                         'null'     => NULL_NOT_ALLOWED",
          "61:                 ],",
          "62:                 'intvalue'       => [",
          "63:                         'type'     => PARAM_INT,",
          "64:                         'optional' => true,",
          "65:                         'default'  => null,",
          "66:                         'null'     => NULL_ALLOWED",
          "67:                 ],",
          "68:                 'decvalue'       => [",
          "69:                         'type'     => PARAM_FLOAT,",
          "70:                         'optional' => true,",
          "71:                         'default'  => null,",
          "72:                         'null'     => NULL_ALLOWED",
          "73:                 ],",
          "74:                 'charvalue'      => [",
          "75:                         'type'     => PARAM_TEXT,",
          "76:                         'optional' => true,",
          "77:                         'default'  => null,",
          "78:                         'null'     => NULL_ALLOWED",
          "79:                 ],",
          "80:                 'shortcharvalue' => [",
          "81:                         'type'     => PARAM_TEXT,",
          "82:                         'optional' => true,",
          "83:                         'default'  => null,",
          "84:                         'null'     => NULL_ALLOWED",
          "85:                 ],",
          "87:                 'value'          => [",
          "88:                         'type'    => PARAM_RAW,",
          "89:                         'null'    => NULL_NOT_ALLOWED,",
          "90:                         'default' => ''",
          "91:                 ],",
          "93:                 'valueformat'    => [",
          "94:                         'type'    => PARAM_INT,",
          "95:                         'null'    => NULL_NOT_ALLOWED,",
          "96:                         'default' => FORMAT_MOODLE,",
          "97:                         'optional' => true",
          "98:                 ],",
          "99:                 'contextid'      => [",
          "100:                         'type'     => PARAM_INT,",
          "101:                         'optional' => false,",
          "102:                         'null'     => NULL_NOT_ALLOWED",
          "103:                 ]",
          "104:         );",
          "105:     }",
          "107: }",
          "",
          "---------------"
        ],
        "customfield/classes/data_controller.php||customfield/classes/data_controller.php": [
          "File: customfield/classes/data_controller.php -> customfield/classes/data_controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield;",
          "27: use core_customfield\\output\\field_data;",
          "29: defined('MOODLE_INTERNAL') || die;",
          "44: abstract class data_controller {",
          "50:     protected $data;",
          "57:     protected $field;",
          "65:     public function __construct(int $id, \\stdClass $record) {",
          "66:         $this->data = new data($id, $record);",
          "67:     }",
          "85:     public static function create(int $id, \\stdClass $record = null, field_controller $field = null): data_controller {",
          "86:         global $DB;",
          "87:         if ($id && $record) {",
          "89:             debugging('Too many parameters, either id need to be specified or a record, but not both.',",
          "90:                 DEBUG_DEVELOPER);",
          "91:         }",
          "92:         if ($id) {",
          "93:             $record = $DB->get_record(data::TABLE, array('id' => $id), '*', MUST_EXIST);",
          "94:         } else if (!$record) {",
          "95:             $record = new \\stdClass();",
          "96:         }",
          "98:         if (!$field && empty($record->fieldid)) {",
          "99:             throw new \\coding_exception('Not enough parameters to initialise data_controller - unknown field');",
          "100:         }",
          "101:         if (!$field) {",
          "102:             $field = field_controller::create($record->fieldid);",
          "103:         }",
          "104:         if (empty($record->fieldid)) {",
          "105:             $record->fieldid = $field->get('id');",
          "106:         }",
          "107:         if ($field->get('id') != $record->fieldid) {",
          "108:             throw new \\coding_exception('Field id from the record does not match field from the parameter');",
          "109:         }",
          "110:         $type = $field->get('type');",
          "111:         $customfieldtype = \"\\\\customfield_{$type}\\\\data_controller\";",
          "112:         if (!class_exists($customfieldtype) || !is_subclass_of($customfieldtype, self::class)) {",
          "113:             throw new \\moodle_exception('errorfieldtypenotfound', 'core_customfield', '', s($type));",
          "114:         }",
          "115:         $datacontroller = new $customfieldtype(0, $record);",
          "116:         $datacontroller->field = $field;",
          "117:         return $datacontroller;",
          "118:     }",
          "125:     protected function get_form_element_name(): string {",
          "126:         return 'customfield_' . $this->get_field()->get('shortname');",
          "127:     }",
          "135:     final public function get($property) {",
          "136:         return $this->data->get($property);",
          "137:     }",
          "146:     final public function set($property, $value) {",
          "147:         return $this->data->set($property, $value);",
          "148:     }",
          "163:     abstract public function datafield() : string;",
          "170:     public function delete() {",
          "171:         return $this->data->delete();",
          "172:     }",
          "179:     public function save() {",
          "180:         $this->data->save();",
          "181:     }",
          "188:     public function get_field(): field_controller {",
          "189:         return $this->field;",
          "190:     }",
          "197:     public function instance_form_save(\\stdClass $datanew) {",
          "198:         $elementname = $this->get_form_element_name();",
          "199:         if (!property_exists($datanew, $elementname)) {",
          "200:             return;",
          "201:         }",
          "202:         $value = $datanew->$elementname;",
          "203:         $this->data->set($this->datafield(), $value);",
          "204:         $this->data->set('value', $value);",
          "205:         $this->save();",
          "206:     }",
          "216:     public function instance_form_before_set_data(\\stdClass $instance) {",
          "217:         $instance->{$this->get_form_element_name()} = $this->get_value();",
          "218:     }",
          "226:     protected function is_empty($value): bool {",
          "227:         if ($this->datafield() === 'value' || $this->datafield() === 'charvalue' || $this->datafield() === 'shortcharvalue') {",
          "228:             return '' . $value === '';",
          "229:         }",
          "230:         return empty($value);",
          "231:     }",
          "239:     protected function is_unique($value): bool {",
          "240:         global $DB;",
          "241:         $datafield = $this->datafield();",
          "242:         $where = \"fieldid = ? AND {$datafield} = ?\";",
          "243:         $params = [$this->get_field()->get('id'), $value];",
          "244:         if ($this->get('id')) {",
          "245:             $where .= ' AND id <> ?';",
          "246:             $params[] = $this->get('id');",
          "247:         }",
          "248:         return !$DB->record_exists_select('customfield_data', $where, $params);",
          "249:     }",
          "258:     public function instance_form_validation(array $data, array $files): array {",
          "259:         $errors = [];",
          "260:         $elementname = $this->get_form_element_name();",
          "261:         if ($this->get_field()->get_configdata_property('uniquevalues') == 1) {",
          "262:             $value = $data[$elementname];",
          "263:             if (!$this->is_empty($value) && !$this->is_unique($value)) {",
          "264:                 $errors[$elementname] = get_string('erroruniquevalues', 'core_customfield');",
          "265:             }",
          "266:         }",
          "267:         return $errors;",
          "268:     }",
          "275:     public function instance_form_definition_after_data(\\MoodleQuickForm $mform) {",
          "277:     }",
          "284:     public function display(): string {",
          "285:         global $PAGE;",
          "286:         $output = $PAGE->get_renderer('core_customfield');",
          "287:         return $output->render(new field_data($this));",
          "288:     }",
          "295:     public abstract function get_default_value();",
          "302:     public function get_value() {",
          "303:         if (!$this->get('id')) {",
          "304:             return $this->get_default_value();",
          "305:         }",
          "306:         return $this->get($this->datafield());",
          "307:     }",
          "314:     public function get_context() : \\context {",
          "315:         if ($this->get('contextid')) {",
          "316:             return \\context::instance_by_id($this->get('contextid'));",
          "317:         } else if ($this->get('instanceid')) {",
          "318:             return $this->get_field()->get_handler()->get_instance_context($this->get('instanceid'));",
          "319:         } else {",
          "321:             return \\context_system::instance();",
          "322:         }",
          "323:     }",
          "330:     public abstract function instance_form_definition(\\MoodleQuickForm $mform);",
          "339:     public function export_value() {",
          "340:         $value = $this->get_value();",
          "342:         if ($this->is_empty($value)) {",
          "343:             return null;",
          "344:         }",
          "346:         if ($this->datafield() === 'intvalue') {",
          "347:             return (int)$value;",
          "348:         } else if ($this->datafield() === 'decvalue') {",
          "349:             return (float)$value;",
          "350:         } else if ($this->datafield() === 'value') {",
          "351:             return format_text($value, $this->get('valueformat'), ['context' => $this->get_context()]);",
          "352:         } else {",
          "353:             return format_string($value, true, ['context' => $this->get_context()]);",
          "354:         }",
          "355:     }",
          "362:     final public function to_record() {",
          "363:         return $this->data->to_record();",
          "364:     }",
          "365: }",
          "",
          "---------------"
        ],
        "customfield/classes/event/category_deleted.php||customfield/classes/event/category_deleted.php": [
          "File: customfield/classes/event/category_deleted.php -> customfield/classes/event/category_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield\\event;",
          "27: use core_customfield\\category_controller;",
          "29: defined('MOODLE_INTERNAL') || die();",
          "39: class category_deleted extends \\core\\event\\base {",
          "44:     protected function init() {",
          "45:         $this->data['objecttable'] = 'customfield_category';",
          "46:         $this->data['crud'] = 'd';",
          "47:         $this->data['edulevel'] = self::LEVEL_OTHER;",
          "48:     }",
          "56:     public static function create_from_object(category_controller $category): category_deleted {",
          "57:         $eventparams = [",
          "58:             'objectid' => $category->get('id'),",
          "59:             'context'  => $category->get_handler()->get_configuration_context(),",
          "60:             'other'    => ['name' => $category->get('name')]",
          "61:         ];",
          "62:         $event = self::create($eventparams);",
          "63:         $event->add_record_snapshot($event->objecttable, $category->to_record());",
          "64:         return $event;",
          "65:     }",
          "72:     public static function get_name() {",
          "73:         return get_string('eventcategorydeleted', 'core_customfield');",
          "74:     }",
          "81:     public function get_description() {",
          "82:         return \"The user with id '$this->userid' deleted the category with id '$this->objectid'.\";",
          "83:     }",
          "84: }",
          "",
          "---------------"
        ],
        "customfield/classes/event/field_deleted.php||customfield/classes/event/field_deleted.php": [
          "File: customfield/classes/event/field_deleted.php -> customfield/classes/event/field_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield\\event;",
          "27: use core_customfield\\field_controller;",
          "29: defined('MOODLE_INTERNAL') || die();",
          "39: class field_deleted extends \\core\\event\\base {",
          "44:     protected function init() {",
          "45:         $this->data['objecttable'] = 'customfield_field';",
          "46:         $this->data['crud'] = 'd';",
          "47:         $this->data['edulevel'] = self::LEVEL_OTHER;",
          "48:     }",
          "56:     public static function create_from_object(field_controller $field): field_deleted {",
          "57:         $eventparams = [",
          "58:             'objectid' => $field->get('id'),",
          "59:             'context'  => $field->get_handler()->get_configuration_context(),",
          "60:             'other'    => [",
          "61:                 'shortname' => $field->get('shortname'),",
          "62:                 'name'      => $field->get('name')",
          "63:             ]",
          "64:         ];",
          "65:         $event = self::create($eventparams);",
          "66:         $event->add_record_snapshot($event->objecttable, $field->to_record());",
          "67:         return $event;",
          "68:     }",
          "75:     public static function get_name() {",
          "76:         return get_string('eventfielddeleted', 'core_customfield');",
          "77:     }",
          "84:     public function get_description() {",
          "85:         return \"The user with id '$this->userid' deleted the field with id '$this->objectid'.\";",
          "86:     }",
          "87: }",
          "",
          "---------------"
        ],
        "customfield/classes/field.php||customfield/classes/field.php": [
          "File: customfield/classes/field.php -> customfield/classes/field.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield;",
          "27: use core\\persistent;",
          "29: defined('MOODLE_INTERNAL') || die;",
          "38: class field extends persistent {",
          "43:     const TABLE = 'customfield_field';",
          "50:     protected static function define_properties(): array {",
          "51:         return array(",
          "52:                 'name' => [",
          "53:                         'type' => PARAM_TEXT,",
          "54:                 ],",
          "55:                 'shortname' => [",
          "56:                         'type' => PARAM_TEXT,",
          "57:                 ],",
          "58:                 'type' => [",
          "59:                         'type' => PARAM_PLUGIN,",
          "60:                 ],",
          "61:                 'description' => [",
          "62:                         'type' => PARAM_RAW,",
          "63:                         'optional' => true,",
          "64:                         'default' => null,",
          "65:                         'null' => NULL_ALLOWED",
          "66:                 ],",
          "67:                 'descriptionformat' => [",
          "68:                         'type' => PARAM_INT,",
          "69:                         'default' => FORMAT_MOODLE,",
          "70:                         'optional' => true",
          "71:                 ],",
          "72:                 'sortorder' => [",
          "73:                         'type' => PARAM_INT,",
          "74:                         'optional' => true,",
          "75:                         'default' => -1,",
          "76:                 ],",
          "77:                 'categoryid' => [",
          "78:                         'type' => PARAM_INT",
          "79:                 ],",
          "80:                 'configdata' => [",
          "81:                         'type' => PARAM_RAW,",
          "82:                         'optional' => true,",
          "83:                         'default' => null,",
          "84:                         'null' => NULL_ALLOWED",
          "85:                 ],",
          "86:         );",
          "87:     }",
          "94:     protected function get_configdata(): array {",
          "95:         return json_decode($this->raw_get('configdata'), true) ?? array();",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "customfield/classes/field_controller.php||customfield/classes/field_controller.php": [
          "File: customfield/classes/field_controller.php -> customfield/classes/field_controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_customfield;",
          "27: defined('MOODLE_INTERNAL') || die;",
          "42: abstract class field_controller {",
          "49:     protected $field;",
          "56:     protected $category;",
          "64:     public function __construct(int $id = 0, \\stdClass $record = null) {",
          "65:         $this->field = new field($id, $record);",
          "66:     }",
          "84:     public static function create(int $id, \\stdClass $record = null, category_controller $category = null): field_controller {",
          "85:         global $DB;",
          "86:         if ($id && $record) {",
          "88:             debugging('Too many parameters, either id need to be specified or a record, but not both.',",
          "89:                 DEBUG_DEVELOPER);",
          "90:         }",
          "91:         if ($id) {",
          "92:             if (!$record = $DB->get_record(field::TABLE, array('id' => $id), '*', IGNORE_MISSING)) {",
          "93:                 throw new \\moodle_exception('fieldnotfound', 'core_customfield');",
          "94:             }",
          "95:         }",
          "97:         if (empty($record->categoryid)) {",
          "98:             if (!$category) {",
          "99:                 throw new \\coding_exception('Not enough parameters to initialise field_controller - unknown category');",
          "100:             } else {",
          "101:                 $record->categoryid = $category->get('id');",
          "102:             }",
          "103:         }",
          "104:         if (empty($record->type)) {",
          "105:             throw new \\coding_exception('Not enough parameters to initialise field_controller - unknown field type');",
          "106:         }",
          "108:         $type = $record->type;",
          "109:         if (!$category) {",
          "110:             $category = category_controller::create($record->categoryid);",
          "111:         }",
          "112:         if ($category->get('id') != $record->categoryid) {",
          "113:             throw new \\coding_exception('Category of the field does not match category from the parameter');",
          "114:         }",
          "116:         $customfieldtype = \"\\\\customfield_{$type}\\\\field_controller\";",
          "117:         if (!class_exists($customfieldtype) || !is_subclass_of($customfieldtype, self::class)) {",
          "118:             throw new \\moodle_exception('errorfieldtypenotfound', 'core_customfield', '', s($type));",
          "119:         }",
          "120:         $fieldcontroller = new $customfieldtype(0, $record);",
          "121:         $fieldcontroller->category = $category;",
          "122:         $category->add_field($fieldcontroller);",
          "123:         return $fieldcontroller;",
          "124:     }",
          "135:     public function config_form_validation(array $data, $files = array()): array {",
          "136:         return array();",
          "137:     }",
          "146:     final public function get(string $property) {",
          "147:         return $this->field->get($property);",
          "148:     }",
          "157:     final public function set($property, $value) {",
          "158:         return $this->field->set($property, $value);",
          "159:     }",
          "170:     public function delete(): bool {",
          "171:         global $DB;",
          "172:         $DB->delete_records('customfield_data', ['fieldid' => $this->get('id')]);",
          "173:         return $this->field->delete();",
          "174:     }",
          "181:     public function save() {",
          "182:         $this->field->save();",
          "183:     }",
          "190:     final public function to_record() {",
          "191:         return $this->field->to_record();",
          "192:     }",
          "199:     public final function get_category(): category_controller {",
          "200:         return $this->category;",
          "201:     }",
          "209:     public function get_configdata_property(string $property) {",
          "210:         $configdata = $this->field->get('configdata');",
          "211:         if (!isset($configdata[$property])) {",
          "212:             return null;",
          "213:         }",
          "214:         return $configdata[$property];",
          "215:     }",
          "222:     public final function get_handler(): handler {",
          "223:         return $this->get_category()->get_handler();",
          "224:     }",
          "233:     public function prepare_for_config_form(\\stdClass $formdata) {",
          "234:     }",
          "241:     public abstract function config_form_definition(\\MoodleQuickForm $mform);",
          "248:     public function get_formatted_name(): string {",
          "249:         $context = $this->get_handler()->get_configuration_context();",
          "250:         return format_string($this->get('name'), true, ['context' => $context]);",
          "251:     }",
          "252: }",
          "",
          "---------------"
        ],
        "customfield/field/checkbox/lang/en/customfield_checkbox.php||customfield/field/checkbox/lang/en/customfield_checkbox.php": [
          "File: customfield/field/checkbox/lang/en/customfield_checkbox.php -> customfield/field/checkbox/lang/en/customfield_checkbox.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: defined('MOODLE_INTERNAL') || die();",
          "26: $string['checkedbydefault'] = 'Checked by default';",
          "27: $string['errorconfigunique'] = 'Checkbox field can not be defined as unique';",
          "28: $string['pluginname'] = 'Checkbox';",
          "29: $string['privacy:metadata'] = 'Checkbox field type plugin does not store any personal data, it uses tables defined in core';",
          "30: $string['specificsettings'] = 'Settings for the checkbox field';",
          "",
          "---------------"
        ],
        "customfield/field/checkbox/version.php||customfield/field/checkbox/version.php": [
          "File: customfield/field/checkbox/version.php -> customfield/field/checkbox/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: defined('MOODLE_INTERNAL') || die();",
          "26: $plugin->component = 'customfield_checkbox';",
          "27: $plugin->version   = 2018120300;",
          "28: $plugin->requires  = 2018122000;",
          "",
          "---------------"
        ],
        "customfield/field/date/version.php||customfield/field/date/version.php": [
          "File: customfield/field/date/version.php -> customfield/field/date/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $plugin->component = 'customfield_date';",
          "28: $plugin->version   = 2018120300;",
          "29: $plugin->requires  = 2018122000;",
          "",
          "---------------"
        ],
        "customfield/field/select/lang/en/customfield_select.php||customfield/field/select/lang/en/customfield_select.php": [
          "File: customfield/field/select/lang/en/customfield_select.php -> customfield/field/select/lang/en/customfield_select.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $string['errordefaultvaluenotinlist'] = 'Default value must be one of the options from the list above';",
          "28: $string['errornotenoughoptions'] = 'Please provide at least two options separated with a newline';",
          "29: $string['invalidoption'] = 'Invalid option selected';",
          "30: $string['menuoptions'] = 'Menu options (one per line)';",
          "31: $string['pluginname'] = 'Dropdown menu';",
          "32: $string['privacy:metadata'] = 'Dropdown menu field type plugin does not store any personal data, it uses tables defined in core';",
          "33: $string['specificsettings'] = 'Settings for the dropdown menu field';",
          "",
          "---------------"
        ],
        "customfield/field/select/version.php||customfield/field/select/version.php": [
          "File: customfield/field/select/version.php -> customfield/field/select/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $plugin->component = 'customfield_select';",
          "28: $plugin->version   = 2018120300;",
          "29: $plugin->requires  = 2018122000;",
          "",
          "---------------"
        ],
        "customfield/field/text/lang/en/customfield_text.php||customfield/field/text/lang/en/customfield_text.php": [
          "File: customfield/field/text/lang/en/customfield_text.php -> customfield/field/text/lang/en/customfield_text.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $string['displaysize'] = 'Form input size';",
          "28: $string['errorconfigdisplaysize'] = 'Form input size must be between 1 and 200 characters';",
          "29: $string['errorconfiglinkplaceholder'] = 'Link must contain placeholder $$';",
          "30: $string['errorconfiglinksyntax'] = 'Link must be a valid URL starting with either http:// or https://';",
          "31: $string['errorconfigmaxlen'] = 'Maximum length must be between 1 and 1333';",
          "32: $string['errormaxlength'] = 'This field maximum length is {$a}';",
          "33: $string['islink'] = 'Link field';",
          "34: $string['islink_help'] = 'To transform the text into a link, enter a URL containing $$, where $$ will be replaced with the text. For example, to transform a Twitter ID to a link, enter http://twitter.com/$$.';",
          "35: $string['ispassword'] = 'Password field';",
          "36: $string['linktarget'] = 'Link target';",
          "37: $string['maxlength'] = 'Maximum length';",
          "38: $string['newwindow'] = 'New window';",
          "39: $string['none'] = 'None';",
          "40: $string['pluginname'] = 'Text field';",
          "41: $string['privacy:metadata'] = 'Text field field type plugin does not store any personal data, it uses tables defined in core';",
          "42: $string['sameframe'] = 'Same frame';",
          "43: $string['samewindow'] = 'Same window';",
          "44: $string['specificsettings'] = 'Settings for the text field';",
          "",
          "---------------"
        ],
        "customfield/field/text/version.php||customfield/field/text/version.php": [
          "File: customfield/field/text/version.php -> customfield/field/text/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $plugin->component = 'customfield_text';",
          "28: $plugin->version   = 2019010400;",
          "29: $plugin->requires  = 2018122000;",
          "",
          "---------------"
        ],
        "customfield/field/textarea/lang/en/customfield_textarea.php||customfield/field/textarea/lang/en/customfield_textarea.php": [
          "File: customfield/field/textarea/lang/en/customfield_textarea.php -> customfield/field/textarea/lang/en/customfield_textarea.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $string['pluginname'] = 'Text area';",
          "28: $string['privacy:metadata'] = 'Text area field type plugin does not store any personal data, it uses tables defined in core';",
          "29: $string['specificsettings'] = 'Settings for the text area field';",
          "",
          "---------------"
        ],
        "customfield/templates/list.mustache||customfield/templates/list.mustache": [
          "File: customfield/templates/list.mustache -> customfield/templates/list.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16:   }}",
          "17: {{!",
          "18:   @template core_customfield/list",
          "20:   Moodle list template.",
          "22:   The purpose of this template is to render a list.",
          "24:   Classes required for JS:",
          "27:   Data attributes required for JS:",
          "32:   Context variables required for this template:",
          "35:   Example context (json):",
          "36:   {",
          "37:       \"component\": \"core_nonexisting\",",
          "38:       \"area\": \"course\",",
          "39:       \"itemid\": 0,",
          "40:       \"usescategories\": 1,",
          "41:       \"categories\": [",
          "42:           { \"id\": 0,",
          "43:             \"nameeditable\": \"Other fields\",",
          "44:             \"addfieldmenu\": \"Add field\",",
          "45:             \"fields\": [",
          "46:                 { \"id\": 0, \"name\": \"Field name\", \"shortname\": \"shortname\", \"type\": \"Text\" },",
          "47:                 { \"id\": 0, \"name\": \"Another field\", \"shortname\": \"checkme\", \"type\": \"Checkbox\" }",
          "48:             ]",
          "49:           },",
          "50:           { \"id\": 0,",
          "51:             \"nameeditable\": \"Empty category\",",
          "52:             \"addfieldmenu\": \"Add field\",",
          "53:             \"fields\": [] }",
          "54:       ],",
          "55:       \"singleselect\" : \"select\"",
          "56:   }",
          "57: }}",
          "59: {{{alert}}}",
          "61: <div data-region=\"list-page\" id=\"customfield_catlist\" data-component=\"{{component}}\" data-area=\"{{area}}\" data-itemid=\"{{itemid}}\">",
          "62:     <div class=\"row\">",
          "63:         <div class=\"col align-self-end\">",
          "64:             {{#usescategories}}",
          "65:             <a tabindex=\"0\" role=\"button\" class=\"btn btn-secondary float-right\" data-role=\"addnewcategory\">{{#str}}addnewcategory, core_customfield{{/str}}</a>",
          "66:             {{/usescategories}}",
          "67:         </div>",
          "68:     </div>",
          "70:     {{^categories}}",
          "71:         {{{nocategories}}}",
          "72:     {{/categories}}",
          "74:     <div class=\"categorieslist\">",
          "75:     {{#categories}}",
          "76:         <div data-category-id=\"{{id}}\" id=\"category-{{id}}\" class=\"mt-2\">",
          "77:         <div class=\"row justify-content-between align-items-end\">",
          "78:             <div class=\"col-6 categoryinstance\">",
          "79:                 {{#usescategories}}",
          "80:                     <h3>",
          "81:                         <span class=\"movecategory\">",
          "82:                         {{> core/drag_handle}}</span>{{{nameeditable}}}",
          "83:                         <a href=\"#\" data-role=\"deletecategory\" data-id=\"{{id}}\">{{#pix}}",
          "84:                             t/delete, core, {{#str}} delete, moodle {{/str}} {{/pix}}</a>",
          "85:                     </h3>",
          "86:                 {{/usescategories}}",
          "87:             </div>",
          "88:             <div class=\"col-auto text-right\">",
          "89:                 {{{addfieldmenu}}}",
          "90:             </div>",
          "91:         </div>",
          "92:         <div>",
          "93:             <table class=\"generaltable fullwidth fieldslist\">",
          "94:                 <thead>",
          "95:                 <tr>",
          "96:                     <th scope=\"col\" class=\"col-5\">{{#str}} customfield, core_customfield {{/str}}</th>",
          "97:                     <th scope=\"col\" class=\"col-2\">{{#str}} shortname, core_customfield {{/str}}</th>",
          "98:                     <th scope=\"col\" class=\"col-2\">{{#str}} type, core_customfield {{/str}}</th>",
          "99:                     <th scope=\"col\" class=\"text-right\">{{#str}} action, core_customfield {{/str}}</th>",
          "100:                 </tr>",
          "101:                 </thead>",
          "102:                 <tbody>",
          "103:                 {{#fields}}",
          "104:                     <tr data-field-name=\"{{name}}\" data-field-id=\"{{id}}\"  class=\"field\">",
          "105:                         <td class=\"col-5\"><span class=\"movefield\">{{> core/drag_handle}}</span>{{{name}}}</td>",
          "106:                         <td class=\"col-2\">{{{shortname}}}</td>",
          "107:                         <td class=\"col-2\">{{{type}}}</td>",
          "108:                         <td class=\"col-5 text-right \">",
          "109:                             <a href=\"{{editfieldurl}}\" data-role=\"editfield\">{{#pix}}",
          "110:                                 t/edit, core, {{#str}} edit, moodle {{/str}} {{/pix}}</a>",
          "111:                             <a href=\"#\" data-id=\"{{id}}\" data-role=\"deletefield\">{{#pix}}",
          "112:                                 t/delete, core, {{#str}} delete, moodle {{/str}} {{/pix}}</a>",
          "113:                         </td>",
          "114:                     </tr>",
          "115:                 {{/fields}}",
          "116:                 {{^fields}}",
          "117:                     <tr class=\"nofields\"><td colspan=\"4\">{{# str }} therearenofields, core_customfield {{/ str }}</td></tr>",
          "118:                 {{/fields}}",
          "119:                 </tbody>",
          "120:             </table>",
          "121:         </div>",
          "122:         </div>",
          "123:     {{/categories}}",
          "124:     </div>",
          "125: </div>",
          "127: {{#js}}",
          "128:     require(['core_customfield/form'], function(s) {",
          "129:         s.init();",
          "130:     });",
          "131: {{/js}}",
          "",
          "---------------"
        ],
        "customfield/tests/api_test.php||customfield/tests/api_test.php": [
          "File: customfield/tests/api_test.php -> customfield/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use \\core_customfield\\api;",
          "29: use \\core_customfield\\category_controller;",
          "38: class core_customfield_api_testcase extends advanced_testcase {",
          "43:     public function setUp() {",
          "44:         $this->resetAfterTest();",
          "45:     }",
          "51:     protected function get_generator(): core_customfield_generator {",
          "52:         return $this->getDataGenerator()->get_plugin_generator('core_customfield');",
          "53:     }",
          "62:     protected function assert_property_in_array($expected, $array, $propertyname) {",
          "63:         $this->assertEquals($expected, array_values(array_map(function($a) use ($propertyname) {",
          "64:             return $a->get($propertyname);",
          "65:         }, $array)));",
          "66:     }",
          "74:     public function test_move_category() {",
          "76:         $params = ['component' => 'core_course', 'area' => 'course', 'itemid' => 0];",
          "77:         $id0 = $this->get_generator()->create_category($params)->get('id');",
          "78:         $id1 = $this->get_generator()->create_category($params)->get('id');",
          "79:         $id2 = $this->get_generator()->create_category($params)->get('id');",
          "80:         $id3 = $this->get_generator()->create_category($params)->get('id');",
          "81:         $id4 = $this->get_generator()->create_category($params)->get('id');",
          "82:         $id5 = $this->get_generator()->create_category($params)->get('id');",
          "85:         $categories = api::get_categories_with_fields($params['component'], $params['area'], $params['itemid']);",
          "86:         $this->assertEquals([$id0, $id1, $id2, $id3, $id4, $id5], array_keys($categories));",
          "87:         $this->assert_property_in_array([0, 1, 2, 3, 4, 5], $categories, 'sortorder');",
          "90:         api::move_category(category_controller::create($id3), $id2);",
          "91:         $categories = api::get_categories_with_fields($params['component'], $params['area'], $params['itemid']);",
          "92:         $this->assertEquals([$id0, $id1, $id3, $id2, $id4, $id5], array_keys($categories));",
          "93:         $this->assert_property_in_array([0, 1, 2, 3, 4, 5], $categories, 'sortorder');",
          "96:         api::move_category(category_controller::create($id2), $id3);",
          "97:         $categories = api::get_categories_with_fields($params['component'], $params['area'], $params['itemid']);",
          "98:         $this->assertEquals([$id0, $id1, $id2, $id3, $id4, $id5], array_keys($categories));",
          "99:         $this->assert_property_in_array([0, 1, 2, 3, 4, 5], $categories, 'sortorder');",
          "102:         api::move_category(category_controller::create($id4), $id2);",
          "103:         $categories = api::get_categories_with_fields($params['component'], $params['area'], $params['itemid']);",
          "104:         $this->assertEquals([$id0, $id1, $id4, $id2, $id3, $id5], array_keys($categories));",
          "105:         $this->assert_property_in_array([0, 1, 2, 3, 4, 5], $categories, 'sortorder');",
          "108:         api::move_category(category_controller::create($id4), $id5);",
          "109:         $categories = api::get_categories_with_fields($params['component'], $params['area'], $params['itemid']);",
          "110:         $this->assertEquals([$id0, $id1, $id2, $id3, $id4, $id5], array_keys($categories));",
          "111:         $this->assert_property_in_array([0, 1, 2, 3, 4, 5], $categories, 'sortorder');",
          "114:         api::move_category(category_controller::create($id2));",
          "115:         $categories = api::get_categories_with_fields($params['component'], $params['area'], $params['itemid']);",
          "116:         $this->assertEquals([$id0, $id1, $id3, $id4, $id5, $id2], array_keys($categories));",
          "117:         $this->assert_property_in_array([0, 1, 2, 3, 4, 5], $categories, 'sortorder');",
          "118:     }",
          "123:     public function test_get_categories_with_fields() {",
          "125:         $options = [",
          "126:             'component' => 'core_course',",
          "127:             'area'      => 'course',",
          "128:             'itemid'    => 0,",
          "129:             'contextid' => context_system::instance()->id",
          "130:         ];",
          "131:         $category0 = $this->get_generator()->create_category(['name' => 'aaaa'] + $options);",
          "132:         $category1 = $this->get_generator()->create_category(['name' => 'bbbb'] + $options);",
          "133:         $category2 = $this->get_generator()->create_category(['name' => 'cccc'] + $options);",
          "134:         $category3 = $this->get_generator()->create_category(['name' => 'dddd'] + $options);",
          "135:         $category4 = $this->get_generator()->create_category(['name' => 'eeee'] + $options);",
          "136:         $category5 = $this->get_generator()->create_category(['name' => 'ffff'] + $options);",
          "139:         $this->assertCount(6, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "140:         api::delete_category($category5);",
          "141:         $this->assertCount(5, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "142:         api::delete_category($category4);",
          "143:         $this->assertCount(4, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "144:         api::delete_category($category3);",
          "145:         $this->assertCount(3, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "146:         api::delete_category($category2);",
          "147:         $this->assertCount(2, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "148:         api::delete_category($category1);",
          "149:         $this->assertCount(1, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "150:         api::delete_category($category0);",
          "151:         $this->assertCount(0, api::get_categories_with_fields($options['component'], $options['area'], $options['itemid']));",
          "152:     }",
          "157:     public function test_save_category() {",
          "158:         $params = ['component' => 'core_course', 'area' => 'course', 'itemid' => 0, 'name' => 'Cat1',",
          "159:             'contextid' => context_system::instance()->id];",
          "160:         $c1 = category_controller::create(0, (object)$params);",
          "161:         api::save_category($c1);",
          "162:         $this->assertNotEmpty($c1->get('id'));",
          "164:         $c1 = category_controller::create($c1->get('id'));",
          "165:         $expected = $params + ['sortorder' => 0, 'id' => $c1->get('id'), 'description' => '', 'descriptionformat' => 0];",
          "166:         $actual = array_intersect_key((array)$c1->to_record(), $expected); // Ignore timecreated, timemodified.",
          "167:         ksort($expected);",
          "168:         ksort($actual);",
          "169:         $this->assertEquals($expected, $actual);",
          "172:         $params['name'] = 'Cat2';",
          "173:         $c2 = category_controller::create(0, (object)$params);",
          "174:         api::save_category($c2);",
          "175:         $this->assertNotEmpty($c2->get('id'));",
          "176:         $this->assertEquals(1, $c2->get('sortorder'));",
          "177:         $c2 = category_controller::create($c2->get('id'));",
          "178:         $this->assertEquals(1, $c2->get('sortorder'));",
          "181:         $c1->set('name', 'Cat3');",
          "182:         $c1->save();",
          "183:         $c1 = category_controller::create($c1->get('id'));",
          "184:         $this->assertEquals('Cat3', $c1->get('name'));",
          "185:     }",
          "190:     public function test_create_category() {",
          "191:         $handler = \\core_course\\customfield\\course_handler::create();",
          "192:         $c1id = $handler->create_category();",
          "193:         $c1 = $handler->get_categories_with_fields()[$c1id];",
          "194:         $this->assertEquals('Other fields', $c1->get('name'));",
          "195:         $this->assertEquals($handler->get_component(), $c1->get('component'));",
          "196:         $this->assertEquals($handler->get_area(), $c1->get('area'));",
          "197:         $this->assertEquals($handler->get_itemid(), $c1->get('itemid'));",
          "198:         $this->assertEquals($handler->get_configuration_context()->id, $c1->get('contextid'));",
          "201:         $c2id = $handler->create_category();",
          "202:         $c3id = $handler->create_category();",
          "203:         $c2 = $handler->get_categories_with_fields()[$c2id];",
          "204:         $c3 = $handler->get_categories_with_fields()[$c3id];",
          "205:         $this->assertEquals('Other fields 1', $c2->get('name'));",
          "206:         $this->assertEquals('Other fields 2', $c3->get('name'));",
          "207:     }",
          "212:     public function test_delete_category_with_fields() {",
          "213:         global $DB;",
          "215:         $options = [",
          "216:             'component' => 'core_course',",
          "217:             'area'      => 'course',",
          "218:             'itemid'    => 0,",
          "219:             'contextid' => context_system::instance()->id",
          "220:         ];",
          "221:         $lpg = $this->get_generator();",
          "222:         $course = $this->getDataGenerator()->create_course();",
          "223:         $dataparams = ['instanceid' => $course->id, 'contextid' => context_course::instance($course->id)->id];",
          "224:         $category0 = $lpg->create_category($options);",
          "225:         $category1 = $lpg->create_category($options);",
          "226:         for ($i = 0; $i < 6; $i++) {",
          "227:             $f = $lpg->create_field(['categoryid' => $category0->get('id')]);",
          "228:             \\core_customfield\\data_controller::create(0, (object)$dataparams, $f)->save();",
          "229:             $f = $lpg->create_field(['categoryid' => $category1->get('id')]);",
          "230:             \\core_customfield\\data_controller::create(0, (object)$dataparams, $f)->save();",
          "231:         }",
          "234:         list($category0, $category1) = array_values(api::get_categories_with_fields($options['component'],",
          "235:             $options['area'], $options['itemid']));",
          "236:         $category0fieldsids = array_keys($category0->get_fields());",
          "237:         $category1fieldsids = array_keys($category1->get_fields());",
          "240:         list($sql, $p) = $DB->get_in_or_equal($category0fieldsids);",
          "241:         $this->assertCount(6, $DB->get_records_select(\\core_customfield\\field::TABLE, 'id '.$sql, $p));",
          "242:         $this->assertCount(6, $DB->get_records_select(\\core_customfield\\data::TABLE, 'fieldid '.$sql, $p));",
          "244:         list($sql, $p) = $DB->get_in_or_equal($category1fieldsids);",
          "245:         $this->assertCount(6, $DB->get_records_select(\\core_customfield\\field::TABLE, 'id '.$sql, $p));",
          "246:         $this->assertCount(6, $DB->get_records_select(\\core_customfield\\data::TABLE, 'fieldid '.$sql, $p));",
          "249:         $this->assertTrue($category0->get_handler()->delete_category($category0));",
          "252:         list($sql, $p) = $DB->get_in_or_equal($category0fieldsids);",
          "253:         $this->assertEmpty($DB->get_records_select(\\core_customfield\\field::TABLE, 'id '.$sql, $p));",
          "254:         $this->assertEmpty($DB->get_records_select(\\core_customfield\\data::TABLE, 'fieldid '.$sql, $p));",
          "257:         list($sql, $p) = $DB->get_in_or_equal($category1fieldsids);",
          "258:         $this->assertCount(6, $DB->get_records_select(\\core_customfield\\field::TABLE, 'id '.$sql, $p));",
          "259:         $this->assertCount(6, $DB->get_records_select(\\core_customfield\\data::TABLE, 'fieldid '.$sql, $p));",
          "260:     }",
          "261: }",
          "",
          "---------------"
        ],
        "customfield/tests/category_controller_test.php||customfield/tests/category_controller_test.php": [
          "File: customfield/tests/category_controller_test.php -> customfield/tests/category_controller_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use \\core_customfield\\category_controller;",
          "29: use \\core_customfield\\field_controller;",
          "37: class core_customfield_category_controller_testcase extends advanced_testcase {",
          "42:     public function setUp() {",
          "43:         $this->resetAfterTest();",
          "44:     }",
          "50:     protected function get_generator(): core_customfield_generator {",
          "51:         return $this->getDataGenerator()->get_plugin_generator('core_customfield');",
          "52:     }",
          "54:     public function test_constructor() {",
          "55:         $c = category_controller::create(0, (object)['component' => 'core_course', 'area' => 'course', 'itemid' => 0]);",
          "56:         $handler = $c->get_handler();",
          "57:         $this->assertTrue($c instanceof category_controller);",
          "59:         $cat = $this->get_generator()->create_category();",
          "60:         $c = category_controller::create($cat->get('id'));",
          "61:         $this->assertTrue($c instanceof category_controller);",
          "63:         $c = category_controller::create($cat->get('id'), null, $handler);",
          "64:         $this->assertTrue($c instanceof category_controller);",
          "66:         $c = category_controller::create(0, $cat->to_record());",
          "67:         $this->assertTrue($c instanceof category_controller);",
          "69:         $c = category_controller::create(0, $cat->to_record(), $handler);",
          "70:         $this->assertTrue($c instanceof category_controller);",
          "71:     }",
          "76:     public function test_constructor_errors() {",
          "77:         global $DB;",
          "78:         $cat = $this->get_generator()->create_category();",
          "79:         $catrecord = $cat->to_record();",
          "82:         $c = category_controller::create($catrecord->id, $catrecord);",
          "83:         $debugging = $this->getDebuggingMessages();",
          "84:         $this->assertEquals(1, count($debugging));",
          "85:         $this->assertEquals('Too many parameters, either id need to be specified or a record, but not both.',",
          "86:             $debugging[0]->message);",
          "87:         $this->resetDebugging();",
          "88:         $this->assertTrue($c instanceof category_controller);",
          "91:         try {",
          "92:             category_controller::create($catrecord->id + 1);",
          "93:             $this->fail('Expected exception');",
          "94:         } catch (moodle_exception $e) {",
          "95:             $this->assertEquals('Category not found', $e->getMessage());",
          "96:             $this->assertEquals(moodle_exception::class, get_class($e));",
          "97:         }",
          "100:         try {",
          "101:             category_controller::create(0, (object)['area' => 'course', 'itemid' => 0]);",
          "102:             $this->fail('Expected exception');",
          "103:         } catch (coding_exception $e) {",
          "104:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Not enough parameters ' .",
          "105:                 'to initialise category_controller - unknown component', $e->getMessage());",
          "106:             $this->assertEquals(coding_exception::class, get_class($e));",
          "107:         }",
          "110:         try {",
          "111:             category_controller::create(0, (object)['component' => 'core_course', 'itemid' => 0]);",
          "112:             $this->fail('Expected exception');",
          "113:         } catch (coding_exception $e) {",
          "114:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Not enough parameters ' .",
          "115:                 'to initialise category_controller - unknown area', $e->getMessage());",
          "116:             $this->assertEquals(coding_exception::class, get_class($e));",
          "117:         }",
          "120:         try {",
          "121:             category_controller::create(0, (object)['component' => 'core_course', 'area' => 'course']);",
          "122:             $this->fail('Expected exception');",
          "123:         } catch (coding_exception $e) {",
          "124:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Not enough parameters ' .",
          "125:                 'to initialise category_controller - unknown itemid', $e->getMessage());",
          "126:             $this->assertEquals(coding_exception::class, get_class($e));",
          "127:         }",
          "129:         $handler = \\core_course\\customfield\\course_handler::create();",
          "131:         try {",
          "132:             category_controller::create(0, (object)['component' => 'x', 'area' => 'course', 'itemid' => 0], $handler);",
          "133:             $this->fail('Expected exception');",
          "134:         } catch (coding_exception $e) {",
          "135:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Component of the handler ' .",
          "136:                 'does not match the one from the record', $e->getMessage());",
          "137:             $this->assertEquals(coding_exception::class, get_class($e));",
          "138:         }",
          "140:         try {",
          "141:             category_controller::create(0, (object)['component' => 'core_course', 'area' => 'x', 'itemid' => 0], $handler);",
          "142:             $this->fail('Expected exception');",
          "143:         } catch (coding_exception $e) {",
          "144:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Area of the handler ' .",
          "145:                 'does not match the one from the record', $e->getMessage());",
          "146:             $this->assertEquals(coding_exception::class, get_class($e));",
          "147:         }",
          "149:         try {",
          "150:             category_controller::create(0, (object)['component' => 'core_course', 'area' => 'course', 'itemid' => 1], $handler);",
          "151:             $this->fail('Expected exception');",
          "152:         } catch (coding_exception $e) {",
          "153:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Itemid of the ' .",
          "154:                 'handler does not match the one from the record', $e->getMessage());",
          "155:             $this->assertEquals(coding_exception::class, get_class($e));",
          "156:         }",
          "158:         try {",
          "159:             $user = $this->getDataGenerator()->create_user();",
          "160:             category_controller::create(0, (object)['component' => 'core_course', 'area' => 'course', 'itemid' => 0,",
          "161:                 'contextid' => context_user::instance($user->id)->id], $handler);",
          "162:             $this->fail('Expected exception');",
          "163:         } catch (coding_exception $e) {",
          "164:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Context of the ' .",
          "165:                 'handler does not match the one from the record', $e->getMessage());",
          "166:             $this->assertEquals(coding_exception::class, get_class($e));",
          "167:         }",
          "168:     }",
          "175:     public function test_create_category() {",
          "178:         $lpg = $this->get_generator();",
          "179:         $categorydata            = new stdClass();",
          "180:         $categorydata->name      = 'Category1';",
          "181:         $categorydata->component = 'core_course';",
          "182:         $categorydata->area      = 'course';",
          "183:         $categorydata->itemid    = 0;",
          "184:         $categorydata->contextid = context_system::instance()->id;",
          "185:         $category = category_controller::create(0, $categorydata);",
          "186:         $category->save();",
          "187:         $this->assertNotEmpty($category->get('id'));",
          "190:         $this->assertTrue(\\core_customfield\\category::record_exists($category->get('id')));",
          "193:         $category = category_controller::create($category->get('id'));",
          "194:         $this->assertSame($category->get('name'), $categorydata->name);",
          "195:         $this->assertSame($category->get('component'), $categorydata->component);",
          "196:         $this->assertSame($category->get('area'), $categorydata->area);",
          "197:         $this->assertSame((int)$category->get('itemid'), $categorydata->itemid);",
          "198:     }",
          "203:     public function test_rename_category() {",
          "205:         $params = ['component' => 'core_course', 'area' => 'course', 'itemid' => 0, 'name' => 'Cat1',",
          "206:             'contextid' => context_system::instance()->id];",
          "207:         $c1 = category_controller::create(0, (object)$params);",
          "208:         $c1->save();",
          "209:         $this->assertNotEmpty($c1->get('id'));",
          "212:         $category = category_controller::create($c1->get('id'));",
          "213:         $category->set('name', 'Cat2');",
          "214:         $this->assertSame('Cat2', $category->get('name'));",
          "217:         $category->save();",
          "219:         $category = category_controller::create($c1->get('id'));",
          "220:         $this->assertSame('Cat2', $category->get('name'));",
          "221:     }",
          "226:     public function test_delete_category() {",
          "228:         $lpg = $this->get_generator();",
          "229:         $category0 = $lpg->create_category();",
          "230:         $id0 = $category0->get('id');",
          "232:         $category1 = $lpg->create_category();",
          "233:         $id1 = $category1->get('id');",
          "235:         $category2 = $lpg->create_category();",
          "236:         $id2 = $category2->get('id');",
          "239:         $this->assertTrue(\\core_customfield\\category::record_exists($id0));",
          "242:         $category0->delete();",
          "243:         $this->assertFalse(\\core_customfield\\category::record_exists($id0));",
          "247:         $category1 = category_controller::create($id1);",
          "248:         $category2 = category_controller::create($id2);",
          "250:         $this->assertSame((int) $category1->get('sortorder'), 1);",
          "251:         $this->assertSame((int) $category2->get('sortorder'), 2);",
          "252:     }",
          "253: }",
          "",
          "---------------"
        ],
        "customfield/tests/data_controller_test.php||customfield/tests/data_controller_test.php": [
          "File: customfield/tests/data_controller_test.php -> customfield/tests/data_controller_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use core_customfield\\data_controller;",
          "35: class core_customfield_data_controller_testcase extends advanced_testcase {",
          "40:     public function setUp() {",
          "41:         $this->resetAfterTest();",
          "42:     }",
          "48:     protected function get_generator(): core_customfield_generator {",
          "49:         return $this->getDataGenerator()->get_plugin_generator('core_customfield');",
          "50:     }",
          "55:     public function test_constructor() {",
          "56:         global $DB;",
          "58:         $course = $this->getDataGenerator()->create_course();",
          "59:         $category0 = $this->get_generator()->create_category(['name' => 'aaaa']);",
          "62:         $fielddata                = new stdClass();",
          "63:         $fielddata->categoryid    = $category0->get('id');",
          "64:         $fielddata->configdata    = \"{\\\"required\\\":\\\"0\\\",\\\"uniquevalues\\\":\\\"0\\\",\\\"locked\\\":\\\"0\\\",\\\"visibility\\\":\\\"0\\\",",
          "65:                                     \\\"defaultvalue\\\":\\\"\\\",\\\"displaysize\\\":0,\\\"maxlength\\\":0,\\\"ispassword\\\":\\\"0\\\",",
          "66:                                     \\\"link\\\":\\\"\\\",\\\"linktarget\\\":\\\"\\\"}\";",
          "68:         $fielddata->type = 'checkbox';",
          "69:         $field0 = $this->get_generator()->create_field($fielddata);",
          "70:         $fielddata->type = 'date';",
          "71:         $field1 = $this->get_generator()->create_field($fielddata);",
          "72:         $fielddata->type = 'select';",
          "73:         $field2 = $this->get_generator()->create_field($fielddata);",
          "74:         $fielddata->type = 'text';",
          "75:         $field3 = $this->get_generator()->create_field($fielddata);",
          "76:         $fielddata->type = 'textarea';",
          "77:         $field4 = $this->get_generator()->create_field($fielddata);",
          "79:         $params = ['instanceid' => $course->id, 'contextid' => context_course::instance($course->id)->id];",
          "82:         $data0 = data_controller::create(0, (object)$params, $field0);",
          "83:         $this->assertInstanceOf(customfield_checkbox\\data_controller::class, $data0);",
          "84:         $data1 = data_controller::create(0,",
          "85:             (object)($params + ['fieldid' => $field1->get('id')]), $field1);",
          "86:         $this->assertInstanceOf(customfield_date\\data_controller::class, $data1);",
          "87:         $data2 = data_controller::create(0,",
          "88:             (object)($params + ['fieldid' => $field2->get('id')]));",
          "89:         $this->assertInstanceOf(customfield_select\\data_controller::class, $data2);",
          "90:         $data3 = data_controller::create(0, (object)$params, $field3);",
          "91:         $this->assertInstanceOf(customfield_text\\data_controller::class, $data3);",
          "92:         $data4 = data_controller::create(0, (object)$params, $field4);",
          "93:         $this->assertInstanceOf(customfield_textarea\\data_controller::class, $data4);",
          "96:         $data0->save();",
          "97:         $data1->save();",
          "98:         $data2->save();",
          "99:         $data3->save();",
          "100:         $data4->save();",
          "103:         $this->assertInstanceOf(customfield_checkbox\\data_controller::class, data_controller::create($data0->get('id')));",
          "104:         $this->assertInstanceOf(customfield_date\\data_controller::class, data_controller::create($data1->get('id')));",
          "107:         $this->assertInstanceOf(customfield_select\\data_controller::class,",
          "108:             data_controller::create($data2->get('id'), null, $field2));",
          "111:         $datarecord = $DB->get_record(\\core_customfield\\data::TABLE, ['id' => $data3->get('id')], '*', MUST_EXIST);",
          "112:         $this->assertInstanceOf(customfield_text\\data_controller::class, data_controller::create(0, $datarecord));",
          "115:         $datarecord = $DB->get_record(\\core_customfield\\data::TABLE, ['id' => $data4->get('id')], '*', MUST_EXIST);",
          "116:         $this->assertInstanceOf(customfield_textarea\\data_controller::class, data_controller::create(0, $datarecord, $field4));",
          "118:     }",
          "123:     public function test_constructor_errors() {",
          "124:         global $DB;",
          "126:         $category = $this->get_generator()->create_category();",
          "127:         $field = $this->get_generator()->create_field(['categoryid' => $category->get('id')]);",
          "128:         $course = $this->getDataGenerator()->create_course();",
          "129:         $data = data_controller::create(0, (object)['instanceid' => $course->id,",
          "130:             'contextid' => context_course::instance($course->id)->id], $field);",
          "131:         $data->save();",
          "133:         $datarecord = $DB->get_record(\\core_customfield\\data::TABLE, ['id' => $data->get('id')], '*', MUST_EXIST);",
          "136:         $d = data_controller::create($datarecord->id, $datarecord);",
          "137:         $debugging = $this->getDebuggingMessages();",
          "138:         $this->assertEquals(1, count($debugging));",
          "139:         $this->assertEquals('Too many parameters, either id need to be specified or a record, but not both.',",
          "140:             $debugging[0]->message);",
          "141:         $this->resetDebugging();",
          "142:         $this->assertInstanceOf(customfield_text\\data_controller::class, $d);",
          "145:         try {",
          "146:             data_controller::create($datarecord->id + 1);",
          "147:             $this->fail('Expected exception');",
          "148:         } catch (dml_missing_record_exception $e) {",
          "149:             $this->assertStringMatchesFormat('Can not find data record in database table customfield_data%a', $e->getMessage());",
          "150:             $this->assertEquals(dml_missing_record_exception::class, get_class($e));",
          "151:         }",
          "154:         try {",
          "155:             data_controller::create(0, (object)['instanceid' => $course->id]);",
          "156:             $this->fail('Expected exception');",
          "157:         } catch (coding_exception $e) {",
          "158:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Not enough parameters to ' .",
          "159:                 'initialise data_controller - unknown field', $e->getMessage());",
          "160:             $this->assertEquals(coding_exception::class, get_class($e));",
          "161:         }",
          "164:         try {",
          "165:             data_controller::create(0, (object)['instanceid' => $course->id, 'fieldid' => $field->get('id') + 1], $field);",
          "166:             $this->fail('Expected exception');",
          "167:         } catch (coding_exception $e) {",
          "168:             $this->assertEquals('Coding error detected, it must be fixed by a programmer: Field id from the record ' .",
          "169:                 'does not match field from the parameter', $e->getMessage());",
          "170:             $this->assertEquals(coding_exception::class, get_class($e));",
          "171:         }",
          "174:         try {",
          "175:             $field->set('type', 'invalid');",
          "176:             data_controller::create(0, (object)['instanceid' => $course->id], $field);",
          "177:             $this->fail('Expected exception');",
          "178:         } catch (moodle_exception $e) {",
          "179:             $this->assertEquals('Field type invalid not found', $e->getMessage());",
          "180:             $this->assertEquals(moodle_exception::class, get_class($e));",
          "181:         }",
          "182:     }",
          "183: }",
          "",
          "---------------"
        ],
        "lang/en/customfield.php||lang/en/customfield.php": [
          "File: lang/en/customfield.php -> lang/en/customfield.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: $string['action'] = 'Action';",
          "26: $string['addingnewcustomfield'] = 'Adding a new {$a}';",
          "27: $string['addnewcategory'] = 'Add a new category';",
          "28: $string['afterfield'] = 'After field {$a}';",
          "29: $string['categorynotfound'] = 'Category not found';",
          "30: $string['checked'] = 'Checked';",
          "31: $string['commonsettings'] = 'Common settings';",
          "32: $string['componentsettings'] = 'Component settings';",
          "33: $string['confirmdeletecategory'] = 'Are you sure you want to delete this category? All fields inside this category will also be deleted and all data associated with them. This action can not be undone.';",
          "34: $string['confirmdeletefield'] = 'Are you sure you want to delete this field? All associated data will also be deleted. This operation can not be undone.';",
          "35: $string['createnewcustomfield'] = 'Add a new custom field';",
          "36: $string['customfield'] = 'Custom field';",
          "37: $string['customfielddata'] = 'Custom fields data';",
          "38: $string['customfields'] = 'Custom fields';",
          "39: $string['defaultvalue'] = 'Default value';",
          "40: $string['description'] = 'Description';",
          "41: $string['description_help'] = 'Description will be displayed in the form under the field';",
          "42: $string['edit'] = 'Edit';",
          "43: $string['editcategoryname'] = 'Edit category name';",
          "44: $string['editingfield'] = 'Updating {$a}';",
          "45: $string['errorfieldtypenotfound'] = 'Field type {$a} not found';",
          "46: $string['erroruniquevalues'] = 'This value is already used.';",
          "47: $string['eventcategorycreated'] = 'Custom field category created';",
          "48: $string['eventcategorydeleted'] = 'Custom field category deleted';",
          "49: $string['eventcategoryupdated'] = 'Custom field category updated';",
          "50: $string['eventfieldcreated'] = 'Custom field created';",
          "51: $string['eventfielddeleted'] = 'Custom field deleted';",
          "52: $string['eventfieldupdated'] = 'Custom field updated';",
          "53: $string['fieldname'] = 'Name';",
          "54: $string['fieldnotfound'] = 'Field not found';",
          "55: $string['fieldshortname'] = 'Short name';",
          "56: $string['formfieldcheckshortname'] = 'Short name already exists';",
          "57: $string['invalidshortnameerror'] = 'Short name can only contain lowercase latin letters, digits and an underscore sign';",
          "58: $string['isdataunique'] = 'Unique data';",
          "59: $string['isdataunique_help'] = 'Should the data be unique?';",
          "60: $string['isfieldrequired'] = 'Required';",
          "61: $string['isfieldrequired_help'] = 'Is this field required?';",
          "62: $string['link'] = 'Link';",
          "63: $string['linktarget'] = 'Link target';",
          "64: $string['modify'] = 'Modify';",
          "65: $string['movecategory'] = 'Move \"{$a}\"';",
          "66: $string['movefield'] = 'Move \"{$a}\"';",
          "67: $string['no'] = 'No';",
          "68: $string['nocategories'] = 'There are no custom fields and categories.';",
          "69: $string['nopermissionconfigure'] = 'You don\\'t have permission to configure fields here.';",
          "70: $string['notchecked'] = 'Not checked';",
          "71: $string['otherfields'] = 'Other fields';",
          "72: $string['otherfieldsn'] = 'Other fields {$a}';",
          "73: $string['privacy:metadata:customfield_data'] = 'Represents custom field data saved to a context';",
          "74: $string['privacy:metadata:customfield_data:charvalue'] = 'Data value, when it is a char';",
          "75: $string['privacy:metadata:customfield_data:contextid'] = 'The ID of the context where the data was saved';",
          "76: $string['privacy:metadata:customfield_data:decvalue'] = 'Data value, when it is a decimal ';",
          "77: $string['privacy:metadata:customfield_data:fieldid'] = 'Field definition ID';",
          "78: $string['privacy:metadata:customfield_data:instanceid'] = 'Instance ID related to the data';",
          "79: $string['privacy:metadata:customfield_data:intvalue'] = 'Data value, when it is an integer';",
          "80: $string['privacy:metadata:customfield_data:shortcharvalue'] = 'Data value, when it is a short char';",
          "81: $string['privacy:metadata:customfield_data:timecreated'] = 'Time when data was created';",
          "82: $string['privacy:metadata:customfield_data:timemodified'] = 'Time when data was last modified';",
          "83: $string['privacy:metadata:customfield_data:value'] = 'Data value, when it is a text';",
          "84: $string['privacy:metadata:customfield_data:valueformat'] = 'The format of the value, when it is a text';",
          "85: $string['privacy:metadata:customfieldpluginsummary'] = 'Fields for various components';",
          "86: $string['privacy:metadata:filepurpose'] = 'File attached to the custom field data';",
          "87: $string['shortname'] = 'Short name';",
          "88: $string['shortname_help'] = 'Custom field short name is required, must be unique and can only contain latin letters, digits and undescore sign. It is not displayed to the users but may be used for synchronisation with external systems, in web services and APIs';",
          "89: $string['showdate'] = 'Show date';",
          "90: $string['specificsettings'] = 'Specific settings';",
          "91: $string['therearenofields'] = 'There are no fields in this category';",
          "92: $string['totopofcategory'] = 'To the top of category {$a}';",
          "93: $string['type'] = 'Type';",
          "94: $string['unknownhandler'] = 'Unable to find handler for custom fields for component {$a->component} and area {$a->area}';",
          "95: $string['yes'] = 'Yes';",
          "",
          "---------------"
        ],
        "lib/classes/plugininfo/customfield.php||lib/classes/plugininfo/customfield.php": [
          "File: lib/classes/plugininfo/customfield.php -> lib/classes/plugininfo/customfield.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core\\plugininfo;",
          "26: use moodle_url;",
          "27: use admin_settingpage;",
          "29: defined('MOODLE_INTERNAL') || die();",
          "34: class customfield extends base {",
          "40:     public function is_uninstall_allowed() {",
          "41:         return true;",
          "42:     }",
          "48:     public static function get_manage_url() {",
          "49:         return new moodle_url('/admin/settings.php', array('section' => 'managecustomfields'));",
          "50:     }",
          "56:     public static function get_enabled_plugins() {",
          "57:         global $DB;",
          "60:         $plugins = \\core_plugin_manager::instance()->get_installed_plugins('customfield');",
          "61:         if (!$plugins) {",
          "62:             return array();",
          "63:         }",
          "66:         $enabled = array();",
          "67:         foreach ($plugins as $plugin => $version) {",
          "68:             $disabled = get_config('customfield_' . $plugin, 'disabled');",
          "69:             if (empty($disabled)) {",
          "70:                 $enabled[$plugin] = $plugin;",
          "71:             }",
          "72:         }",
          "74:         return $enabled;",
          "75:     }",
          "85:     public function uninstall_cleanup() {",
          "86:         global $DB;",
          "87:         $DB->delete_records_select('customfield_data',",
          "88:             'fieldid IN (SELECT f.id FROM {customfield_field} f WHERE f.type = ?)', [$this->name]);",
          "89:         $DB->delete_records('customfield_field', ['type' => $this->name]);",
          "90:         parent::uninstall_cleanup();",
          "91:     }",
          "98:     public function get_settings_section_name() {",
          "99:         return 'customfieldsetting' . $this->name;",
          "100:     }",
          "109:     public function load_settings(\\part_of_admin_tree $adminroot, $parentnodename, $hassiteconfig) {",
          "110:         global $CFG, $USER, $DB, $OUTPUT, $PAGE; // In case settings.php wants to refer to them.",
          "111:         $ADMIN = $adminroot; // May be used in settings.php.",
          "112:         $plugininfo = $this; // Also can be used inside settings.php",
          "113:         $availability = $this; // Also to be used inside settings.php.",
          "115:         if (!$this->is_installed_and_upgraded()) {",
          "116:             return;",
          "117:         }",
          "119:         if (!$hassiteconfig or !file_exists($this->full_path('settings.php'))) {",
          "120:             return;",
          "121:         }",
          "123:         $section = $this->get_settings_section_name();",
          "125:         $settings = new admin_settingpage($section, $this->displayname, 'moodle/site:config', $this->is_enabled() === false);",
          "126:         include($this->full_path('settings.php')); // This may also set $settings to null.",
          "128:         if ($settings) {",
          "129:             $ADMIN->add($parentnodename, $settings);",
          "130:         }",
          "131:     }",
          "132: }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2433:         'type'        => 'read',",
          "2434:         'services'    => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "2435:     ),",
          "2436: );",
          "2438: $services = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2436:     'core_customfield_delete_field' => array(",
          "2437:         'classname'   => 'core_customfield_external',",
          "2438:         'methodname'  => 'delete_field',",
          "2439:         'classpath'   => 'customfield/externallib.php',",
          "2440:         'description' => 'Deletes an entry',",
          "2441:         'type'        => 'write',",
          "2442:         'ajax'        => 'true'",
          "2443:     ),",
          "2444:     'core_customfield_reload_template' => array(",
          "2445:         'classname'   => 'core_customfield_external',",
          "2446:         'methodname'  => 'reload_template',",
          "2447:         'classpath'   => 'customfield/externallib.php',",
          "2448:         'description' => 'Reloads template',",
          "2449:         'type'        => 'read',",
          "2450:         'ajax'        => 'true'",
          "2451:     ),",
          "2452:     'core_customfield_create_category' => array(",
          "2453:         'classname'   => 'core_customfield_external',",
          "2454:         'methodname'  => 'create_category',",
          "2455:         'classpath'   => 'customfield/externallib.php',",
          "2456:         'description' => 'Creates a new category',",
          "2457:         'type'        => 'write',",
          "2458:         'ajax'        => 'true'",
          "2459:     ),",
          "2460:     'core_customfield_delete_category' => array(",
          "2461:         'classname'   => 'core_customfield_external',",
          "2462:         'methodname'  => 'delete_category',",
          "2463:         'classpath'   => 'customfield/externallib.php',",
          "2464:         'description' => 'Deletes a category',",
          "2465:         'type'        => 'write',",
          "2466:         'ajax'        => 'true'",
          "2467:     ),",
          "2468:     'core_customfield_move_field'   => array(",
          "2469:         'classname'   => 'core_customfield_external',",
          "2470:         'methodname'  => 'move_field',",
          "2471:         'classpath'   => 'customfield/externallib.php',",
          "2472:         'description' => 'Drag and drop',",
          "2473:         'type'        => 'write',",
          "2474:         'ajax'        => 'true'",
          "2475:     ),",
          "2476:     'core_customfield_move_category' => array(",
          "2477:         'classname'   => 'core_customfield_external',",
          "2478:         'methodname'  => 'move_category',",
          "2479:         'classpath'   => 'customfield/externallib.php',",
          "2480:         'description' => 'Drag and drop categories',",
          "2481:         'type'        => 'write',",
          "2482:         'ajax'        => 'true'",
          "2483:     )",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2562:         upgrade_main_savepoint(true, 2019011501.00);",
          "2563:     }",
          "2565:     return true;",
          "2566: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2565:     if ($oldversion < 2019011801.00) {",
          "2568:         $table = new xmldb_table('customfield_category');",
          "2571:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2572:         $table->add_field('name', XMLDB_TYPE_CHAR, '400', null, XMLDB_NOTNULL, null, null);",
          "2573:         $table->add_field('description', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "2574:         $table->add_field('descriptionformat', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2575:         $table->add_field('sortorder', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2576:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2577:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2578:         $table->add_field('component', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2579:         $table->add_field('area', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2580:         $table->add_field('itemid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');",
          "2581:         $table->add_field('contextid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2584:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "2585:         $table->add_key('contextid', XMLDB_KEY_FOREIGN, ['contextid'], 'context', ['id']);",
          "2588:         $table->add_index('component_area_itemid', XMLDB_INDEX_NOTUNIQUE, ['component', 'area', 'itemid', 'sortorder']);",
          "2591:         if (!$dbman->table_exists($table)) {",
          "2592:             $dbman->create_table($table);",
          "2593:         }",
          "2596:         $table = new xmldb_table('customfield_field');",
          "2599:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2600:         $table->add_field('shortname', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2601:         $table->add_field('name', XMLDB_TYPE_CHAR, '400', null, XMLDB_NOTNULL, null, null);",
          "2602:         $table->add_field('type', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2603:         $table->add_field('description', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "2604:         $table->add_field('descriptionformat', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2605:         $table->add_field('sortorder', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2606:         $table->add_field('categoryid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2607:         $table->add_field('configdata', XMLDB_TYPE_TEXT, null, null, null, null, null);",
          "2608:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2609:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2612:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "2613:         $table->add_key('categoryid', XMLDB_KEY_FOREIGN, ['categoryid'], 'customfield_category', ['id']);",
          "2616:         $table->add_index('categoryid_sortorder', XMLDB_INDEX_NOTUNIQUE, ['categoryid', 'sortorder']);",
          "2619:         if (!$dbman->table_exists($table)) {",
          "2620:             $dbman->create_table($table);",
          "2621:         }",
          "2624:         $table = new xmldb_table('customfield_data');",
          "2627:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2628:         $table->add_field('fieldid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2629:         $table->add_field('instanceid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2630:         $table->add_field('intvalue', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2631:         $table->add_field('decvalue', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null);",
          "2632:         $table->add_field('shortcharvalue', XMLDB_TYPE_CHAR, '255', null, null, null, null);",
          "2633:         $table->add_field('charvalue', XMLDB_TYPE_CHAR, '1333', null, null, null, null);",
          "2634:         $table->add_field('value', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);",
          "2635:         $table->add_field('valueformat', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2636:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2637:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2638:         $table->add_field('contextid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);",
          "2641:         $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);",
          "2642:         $table->add_key('fieldid', XMLDB_KEY_FOREIGN, ['fieldid'], 'customfield_field', ['id']);",
          "2643:         $table->add_key('contextid', XMLDB_KEY_FOREIGN, ['contextid'], 'context', ['id']);",
          "2646:         $table->add_index('instanceid-fieldid', XMLDB_INDEX_UNIQUE, ['instanceid', 'fieldid']);",
          "2647:         $table->add_index('fieldid-intvalue', XMLDB_INDEX_NOTUNIQUE, ['fieldid', 'intvalue']);",
          "2648:         $table->add_index('fieldid-shortcharvalue', XMLDB_INDEX_NOTUNIQUE, ['fieldid', 'shortcharvalue']);",
          "2649:         $table->add_index('fieldid-decvalue', XMLDB_INDEX_NOTUNIQUE, ['fieldid', 'decvalue']);",
          "2652:         if (!$dbman->table_exists($table)) {",
          "2653:             $dbman->create_table($table);",
          "2654:         }",
          "2656:         upgrade_main_savepoint(true, 2019011801.00);",
          "2657:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011801.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1a8db69116ca0b48418214e3c3ad5788bfd04da",
      "candidate_info": {
        "commit_hash": "f1a8db69116ca0b48418214e3c3ad5788bfd04da",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f1a8db69116ca0b48418214e3c3ad5788bfd04da",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019061400.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190614)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019062000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190620)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "187b11f40d704efc38c23681fb410b37453dfdcc",
      "candidate_info": {
        "commit_hash": "187b11f40d704efc38c23681fb410b37453dfdcc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/187b11f40d704efc38c23681fb410b37453dfdcc",
        "files": [
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-67004 enrol: Include core_enrol_search_users in the mobile service",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:         'ajax' => true,",
          "657:         'type' => 'read',",
          "658:         'capabilities' => 'moodle/course:viewparticipants',",
          "659:     ],",
          "660:     'core_enrol_get_users_courses' => array(",
          "661:         'classname' => 'core_enrol_external',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019102200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019102200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e5144fe24b2f47d668c90a3f0c6c0d4748b01c1",
      "candidate_info": {
        "commit_hash": "0e5144fe24b2f47d668c90a3f0c6c0d4748b01c1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0e5144fe24b2f47d668c90a3f0c6c0d4748b01c1",
        "files": [
          "admin/settings/subsystems.php",
          "lang/en/admin.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63333_master' of git://github.com/markn86/moodle",
        "before_after_code_files": [
          "admin/settings/subsystems.php||admin/settings/subsystems.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/subsystems.php||admin/settings/subsystems.php": [
          "File: admin/settings/subsystems.php -> admin/settings/subsystems.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:         0)",
          "22:     );",
          "26:     $options = array(DAYSECS=>new lang_string('secondstotime86400'), WEEKSECS=>new lang_string('secondstotime604800'), 2620800=>new lang_string('nummonths', 'moodle', 1), 15724800=>new lang_string('nummonths', 'moodle', 6),0=>new lang_string('never'));",
          "27:     $optionalsubsystems->add(new admin_setting_configselect('messagingdeletereadnotificationsdelay', new lang_string('messagingdeletereadnotificationsdelay', 'admin'), new lang_string('configmessagingdeletereadnotificationsdelay', 'admin'), 604800, $options));",
          "",
          "[Removed Lines]",
          "24:     $optionalsubsystems->add(new admin_setting_configcheckbox('messaginghidereadnotifications', new lang_string('messaginghidereadnotifications', 'admin'), new lang_string('configmessaginghidereadnotifications','admin'), 0));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: $string['configmaxevents'] = 'Events to Lookahead';",
          "275: $string['configmessaging'] = 'If enabled, users can send messages to other users on the site.';",
          "276: $string['configmessagingallowemailoverride'] = 'Allow users to have email message notifications sent to an email address other than the email address in their profile';",
          "278: $string['configmessagingdeletereadnotificationsdelay'] = 'Read notifications can be deleted to save space. How long after a notification is read can it be deleted?';",
          "279: $string['configmessagingallusers'] = 'If enabled, users can choose to allow anyone on the site to send them a message. Otherwise, users can choose to allow only their contacts or others in their courses to send them messages.';",
          "280: $string['configminpassworddigits'] = 'Passwords must have at least these many digits.';",
          "",
          "[Removed Lines]",
          "277: $string['configmessaginghidereadnotifications'] = 'Hide read notifications of events like forum posts when viewing messaging history';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "748: $string['mediapluginyoutube'] = 'Enable YouTube links filter';",
          "749: $string['messaging'] = 'Enable messaging system';",
          "750: $string['messagingallowemailoverride'] = 'Notification email override';",
          "752: $string['messagingallusers'] = 'Allow messages from anyone on the site';",
          "753: $string['messagingdeletereadnotificationsdelay'] = 'Delete read notifications';",
          "754: $string['minpassworddigits'] = 'Digits';",
          "",
          "[Removed Lines]",
          "751: $string['messaginghidereadnotifications'] = 'Hide read notifications';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2352:         upgrade_main_savepoint(true, 2018091400.01);",
          "2353:     }",
          "2355:     return true;",
          "2356: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:     if ($oldversion < 2018091700.01) {",
          "2357:         unset_config('messaginghidereadnotifications');",
          "2360:         upgrade_main_savepoint(true, 2018091700.01);",
          "2361:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018091400.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018091700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a46980fa7950cf5b09bb0058b8c06815455d8816",
      "candidate_info": {
        "commit_hash": "a46980fa7950cf5b09bb0058b8c06815455d8816",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a46980fa7950cf5b09bb0058b8c06815455d8816",
        "files": [
          "calendar/externallib.php",
          "calendar/tests/externallib_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-64641 calendar: New WS core_calendar_get_access_information",
        "before_after_code_files": [
          "calendar/externallib.php||calendar/externallib.php",
          "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "calendar/externallib.php||calendar/externallib.php": [
          "File: calendar/externallib.php -> calendar/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1257:     public static function get_calendar_upcoming_view_returns() {",
          "1258:         return \\core_calendar\\external\\calendar_upcoming_exporter::get_read_structure();",
          "1259:     }",
          "1260: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1268:     public static function get_calendar_access_information_parameters() {",
          "1269:         return new external_function_parameters(",
          "1270:             [",
          "1271:                 'courseid' => new external_value(PARAM_INT, 'Course to check, empty for site calendar events.', VALUE_DEFAULT, 0),",
          "1272:             ]",
          "1273:         );",
          "1274:     }",
          "1284:     public static function get_calendar_access_information($courseid = 0) {",
          "1286:         $params = self::validate_parameters(self::get_calendar_access_information_parameters(), ['courseid' => $courseid]);",
          "1288:         if (empty($params['courseid']) || $params['courseid'] == SITEID) {",
          "1289:             $context = \\context_system::instance();",
          "1290:         } else {",
          "1291:             $context = \\context_course::instance($params['courseid']);",
          "1292:         }",
          "1294:         self::validate_context($context);",
          "1296:         return [",
          "1297:             'canmanageentries' => has_capability('moodle/calendar:manageentries', $context),",
          "1298:             'canmanageownentries' => has_capability('moodle/calendar:manageownentries', $context),",
          "1299:             'canmanagegroupentries' => has_capability('moodle/calendar:managegroupentries', $context),",
          "1300:             'warnings' => [],",
          "1301:         ];",
          "1302:     }",
          "1310:     public static function  get_calendar_access_information_returns() {",
          "1312:         return new external_single_structure(",
          "1313:             [",
          "1314:                 'canmanageentries' => new external_value(PARAM_BOOL, 'Whether the user can manage entries.'),",
          "1315:                 'canmanageownentries' => new external_value(PARAM_BOOL, 'Whether the user can manage its own entries.'),",
          "1316:                 'canmanagegroupentries' => new external_value(PARAM_BOOL, 'Whether the user can manage group entries.'),",
          "1317:                 'warnings' => new external_warnings(),",
          "1318:             ]",
          "1319:         );",
          "1320:     }",
          "",
          "---------------"
        ],
        "calendar/tests/externallib_test.php||calendar/tests/externallib_test.php": [
          "File: calendar/tests/externallib_test.php -> calendar/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:         $this->assertCount(0, $data['events']);",
          "2553:         $this->assertEquals('nopermissions', $data['warnings'][0]['warningcode']);",
          "2554:     }",
          "2555: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2559:     public function test_get_calendar_access_information_for_admins() {",
          "2560:         global $CFG;",
          "2561:         $this->resetAfterTest(true);",
          "2562:         $this->setAdminUser();",
          "2564:         $CFG->calendar_adminseesall = 1;",
          "2566:         $data = external_api::clean_returnvalue(",
          "2567:             core_calendar_external::get_calendar_access_information_returns(),",
          "2568:             core_calendar_external::get_calendar_access_information()",
          "2569:         );",
          "2570:         $this->assertTrue($data['canmanageownentries']);",
          "2571:         $this->assertTrue($data['canmanagegroupentries']);",
          "2572:         $this->assertTrue($data['canmanageentries']);",
          "2573:     }",
          "2578:     public function test_get_calendar_access_information_for_authenticated_users() {",
          "2579:         $this->resetAfterTest(true);",
          "2580:         $this->setUser($this->getDataGenerator()->create_user());",
          "2582:         $data = external_api::clean_returnvalue(",
          "2583:             core_calendar_external::get_calendar_access_information_returns(),",
          "2584:             core_calendar_external::get_calendar_access_information()",
          "2585:         );",
          "2586:         $this->assertTrue($data['canmanageownentries']);",
          "2587:         $this->assertFalse($data['canmanagegroupentries']);",
          "2588:         $this->assertFalse($data['canmanageentries']);",
          "2589:     }",
          "2594:     public function test_get_calendar_access_information_for_student_users() {",
          "2595:         global $DB;",
          "2596:         $this->resetAfterTest(true);",
          "2598:         $user = $this->getDataGenerator()->create_user();",
          "2599:         $course = $this->getDataGenerator()->create_course();",
          "2600:         $role = $DB->get_record('role', array('shortname' => 'student'));",
          "2601:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $role->id);",
          "2603:         $this->setUser($user);",
          "2605:         $data = external_api::clean_returnvalue(",
          "2606:             core_calendar_external::get_calendar_access_information_returns(),",
          "2607:             core_calendar_external::get_calendar_access_information($course->id)",
          "2608:         );",
          "2609:         $this->assertTrue($data['canmanageownentries']);",
          "2610:         $this->assertFalse($data['canmanagegroupentries']);",
          "2611:         $this->assertFalse($data['canmanageentries']);",
          "2612:     }",
          "2617:     public function test_get_calendar_access_information_for_teacher_users() {",
          "2618:         global $DB;",
          "2619:         $this->resetAfterTest(true);",
          "2621:         $user = $this->getDataGenerator()->create_user();",
          "2622:         $course = $this->getDataGenerator()->create_course(['groupmode' => 1]);",
          "2623:         $role = $DB->get_record('role', array('shortname' => 'editingteacher'));",
          "2624:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $role->id);",
          "2625:         $this->getDataGenerator()->create_group(['courseid' => $course->id]);",
          "2627:         $this->setUser($user);",
          "2629:         $data = external_api::clean_returnvalue(",
          "2630:             core_calendar_external::get_calendar_access_information_returns(),",
          "2631:             core_calendar_external::get_calendar_access_information($course->id)",
          "2632:         );",
          "2633:         $this->assertTrue($data['canmanageownentries']);",
          "2634:         $this->assertTrue($data['canmanagegroupentries']);",
          "2635:         $this->assertTrue($data['canmanageentries']);",
          "2636:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:         'ajax' => true,",
          "219:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "220:     ),",
          "221:     'core_cohort_add_cohort_members' => array(",
          "222:         'classname' => 'core_cohort_external',",
          "223:         'methodname' => 'add_cohort_members',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:     ),",
          "221:     'core_calendar_get_calendar_access_information' => array(",
          "222:         'classname' => 'core_calendar_external',",
          "223:         'methodname' => 'get_calendar_access_information',",
          "224:         'description' => 'Convenience function to retrieve some permissions/access information for the given course calendar.',",
          "225:         'classpath' => 'calendar/externallib.php',",
          "226:         'type' => 'read',",
          "227:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019040200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019040200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}