{
  "cve_id": "CVE-2023-45348",
  "cve_desc": "Apache Airflow, versions 2.7.0 and 2.7.1, is affected by a vulnerability that allows an authenticated user to retrieve sensitive configuration information when the \"expose_config\" option is set to \"non-sensitive-only\". The `expose_config` option is False by default.\nIt is recommended to upgrade to a version that is not affected.",
  "repo": "apache/airflow",
  "patch_hash": "a4a0b5dd3d0ce05311c70bb9a32b66a650dbc0b4",
  "patch_info": {
    "commit_hash": "a4a0b5dd3d0ce05311c70bb9a32b66a650dbc0b4",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/a4a0b5dd3d0ce05311c70bb9a32b66a650dbc0b4",
    "files": [
      "airflow/api_connexion/endpoints/config_endpoint.py",
      "airflow/configuration.py",
      "tests/api_connexion/endpoints/test_config_endpoint.py"
    ],
    "message": "Check if the lower of provided values are sensitives in config endpoint (#34712)\n\n* Check if the lower of provided values are sensitives in config endpoint\n\n* update unit test\n\n* ensure that all values in sensitive dict are in lower characters\n\n(cherry picked from commit f044589b685855a8fce8f5376bea2564c5a001f7)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py",
      "airflow/configuration.py||airflow/configuration.py",
      "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/config_endpoint.py||airflow/api_connexion/endpoints/config_endpoint.py": [
      "File: airflow/api_connexion/endpoints/config_endpoint.py -> airflow/api_connexion/endpoints/config_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:                 \"Config not found.\", detail=f\"The option [{section}/{option}] is not found in config.\"",
      "124:             )",
      "127:             value = \"< hidden >\"",
      "128:         else:",
      "129:             value = conf.get(section, option)",
      "",
      "[Removed Lines]",
      "126:         if (section, option) in conf.sensitive_config_values:",
      "",
      "[Added Lines]",
      "126:         if (section.lower(), option.lower()) in conf.sensitive_config_values:",
      "",
      "---------------"
    ],
    "airflow/configuration.py||airflow/configuration.py": [
      "File: airflow/configuration.py -> airflow/configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:             for s, s_c in self.configuration_description.items()",
      "312:             for k, item in s_c.get(\"options\").items()  # type: ignore[union-attr]",
      "313:         }",
      "315:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
      "316:         depr_section = {",
      "317:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
      "",
      "[Removed Lines]",
      "314:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
      "",
      "[Added Lines]",
      "314:         sensitive = {",
      "315:             (section.lower(), key.lower())",
      "316:             for (section, key), v in flattened.items()",
      "317:             if v.get(\"sensitive\") is True",
      "318:         }",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_config_endpoint.py||tests/api_connexion/endpoints/test_config_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_config_endpoint.py -> tests/api_connexion/endpoints/test_config_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:         return_value=MOCK_CONF_WITH_SENSITIVE_VALUE,",
      "248:     )",
      "249:     @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "251:         response = self.client.get(",
      "253:             headers={\"Accept\": \"text/plain\"},",
      "254:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "255:         )",
      "256:         assert response.status_code == 200",
      "257:         expected = textwrap.dedent(",
      "261:         \"\"\"",
      "262:         )",
      "263:         assert expected == response.data.decode()",
      "",
      "[Removed Lines]",
      "250:     def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict):",
      "252:             \"/api/v1/config/section/core/option/sql_alchemy_conn\",",
      "258:             \"\"\"\\",
      "259:         [core]",
      "260:         sql_alchemy_conn = < hidden >",
      "",
      "[Added Lines]",
      "250:     @pytest.mark.parametrize(",
      "251:         \"section, option\",",
      "252:         [",
      "253:             (\"core\", \"sql_alchemy_conn\"),",
      "254:             (\"core\", \"SQL_ALCHEMY_CONN\"),",
      "255:             (\"corE\", \"sql_alchemy_conn\"),",
      "256:             (\"CORE\", \"sql_alchemy_conn\"),",
      "257:         ],",
      "258:     )",
      "259:     def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict, section, option):",
      "261:             f\"/api/v1/config/section/{section}/option/{option}\",",
      "267:             f\"\"\"\\",
      "268:         [{section}]",
      "269:         {option} = < hidden >",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0389e6a3e98b948ae81fa8ff21d98f0c63856b16",
      "candidate_info": {
        "commit_hash": "0389e6a3e98b948ae81fa8ff21d98f0c63856b16",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0389e6a3e98b948ae81fa8ff21d98f0c63856b16",
        "files": [
          ".pre-commit-config.yaml",
          "STATIC_CODE_CHECKS.rst",
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "images/breeze/output-commands-hash.txt",
          "images/breeze/output_static-checks.svg",
          "pyproject.toml"
        ],
        "message": "Remove [project] section from `pyproject.toml` (#34014)\n\n* Add name and version of project into 'pyproject.toml'\n\n* Remove [project] section from `pyproject.toml`\n\n* Remove regex for update pyproject [project] version\n\n* Fight agains static checks\n\n(cherry picked from commit ba8ee909e4532318649df9c2d5a7ed70b357913d)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/pre_commit_ids.py||dev/breeze/src/airflow_breeze/pre_commit_ids.py": [
          "File: dev/breeze/src/airflow_breeze/pre_commit_ids.py -> dev/breeze/src/airflow_breeze/pre_commit_ids.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     \"update-supported-versions\",",
          "125:     \"update-vendored-in-k8s-json-schema\",",
          "126:     \"update-version\",",
          "127:     \"yamllint\",",
          "128: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     \"validate-pyproject\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a59e40a1220ffb037c8de112785bc7a4f2e03dc",
      "candidate_info": {
        "commit_hash": "2a59e40a1220ffb037c8de112785bc7a4f2e03dc",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/2a59e40a1220ffb037c8de112785bc7a4f2e03dc",
        "files": [
          "airflow/utils/dot_renderer.py",
          "airflow/www/views.py"
        ],
        "message": "Merge multiple isintance calls for the same object in a single call (#33767)\n\n(cherry picked from commit 5a1889a7e70114317b96fefa4b1e3f47ae15cc10)",
        "before_after_code_files": [
          "airflow/utils/dot_renderer.py||airflow/utils/dot_renderer.py",
          "airflow/www/views.py||airflow/www/views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/utils/dot_renderer.py||airflow/utils/dot_renderer.py": [
          "File: airflow/utils/dot_renderer.py -> airflow/utils/dot_renderer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     node: DependencyMixin, parent_graph: graphviz.Digraph, states_by_task_id: dict[str, str] | None",
          "121: ) -> None:",
          "122:     \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"",
          "124:         _draw_task(node, parent_graph, states_by_task_id)",
          "125:     else:",
          "126:         if not isinstance(node, TaskGroup):",
          "",
          "[Removed Lines]",
          "123:     if isinstance(node, BaseOperator) or isinstance(node, MappedOperator):",
          "",
          "[Added Lines]",
          "123:     if isinstance(node, (BaseOperator, MappedOperator)):",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4256:             dag_ids: set[str] = set()",
          "4257:         elif isinstance(items, list):",
          "4258:             dag_ids = {item.dag_id for item in items if item is not None}",
          "4260:             dag_ids = {items.dag_id}",
          "4261:         else:",
          "4262:             raise ValueError(",
          "",
          "[Removed Lines]",
          "4259:         elif isinstance(items, TaskInstance) or isinstance(items, DagRun):",
          "",
          "[Added Lines]",
          "4259:         elif isinstance(items, (TaskInstance, DagRun)):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2b603f47efa721de572222005c6968ce9ff3413",
      "candidate_info": {
        "commit_hash": "b2b603f47efa721de572222005c6968ce9ff3413",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b2b603f47efa721de572222005c6968ce9ff3413",
        "files": [
          "airflow/settings.py"
        ],
        "message": "Move default timezone to except block (#34245)\n\n(cherry picked from commit 7efc68c8e351c9aa1f9fa66bc67f325749396b6b)",
        "before_after_code_files": [
          "airflow/settings.py||airflow/settings.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/settings.py||airflow/settings.py": [
          "File: airflow/settings.py -> airflow/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: log = logging.getLogger(__name__)",
          "52: try:",
          "53:     tz = conf.get_mandatory_value(\"core\", \"default_timezone\")",
          "54:     if tz == \"system\":",
          "",
          "[Removed Lines]",
          "51: TIMEZONE = pendulum.tz.timezone(\"UTC\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     else:",
          "57:         TIMEZONE = pendulum.tz.timezone(tz)",
          "58: except Exception:",
          "60: log.info(\"Configured default timezone %s\", TIMEZONE)",
          "",
          "[Removed Lines]",
          "59:     pass",
          "",
          "[Added Lines]",
          "57:     TIMEZONE = pendulum.tz.timezone(\"UTC\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ff30e37f0784f8e3ca896e104a4873655894743",
      "candidate_info": {
        "commit_hash": "4ff30e37f0784f8e3ca896e104a4873655894743",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4ff30e37f0784f8e3ca896e104a4873655894743",
        "files": [
          "airflow/www/templates/airflow/cluster_activity.html"
        ],
        "message": "Fix www cluster_activity view not loading due to standaloneDagProcessor templating (#34274)\n\n(cherry picked from commit 3d8ea7926517cf2aa54f8daad8ea122a7f6efe9a)",
        "before_after_code_files": [
          "airflow/www/templates/airflow/cluster_activity.html||airflow/www/templates/airflow/cluster_activity.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/templates/airflow/cluster_activity.html||airflow/www/templates/airflow/cluster_activity.html": [
          "File: airflow/www/templates/airflow/cluster_activity.html -> airflow/www/templates/airflow/cluster_activity.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   <script>",
          "44:     const stateColors = {{ state_color_mapping|tojson }};",
          "45:     const autoRefreshInterval = {{ auto_refresh_interval }};",
          "47:   </script>",
          "48:   <script src=\"{{ url_for_asset('clusterActivity.js') }}\"></script>",
          "49: {% endblock %}",
          "",
          "[Removed Lines]",
          "46:     const standaloneDagProcessor = {{ standalone_dag_processor }} === 'True' ;",
          "",
          "[Added Lines]",
          "46:     const standaloneDagProcessor = {{ standalone_dag_processor|tojson }} === true ;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5542335c6bac2fdc94ed973e365b522e56aaaf5",
      "candidate_info": {
        "commit_hash": "c5542335c6bac2fdc94ed973e365b522e56aaaf5",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/c5542335c6bac2fdc94ed973e365b522e56aaaf5",
        "files": [
          "airflow/decorators/base.py"
        ],
        "message": "Replace assert by if...raise in decorators package (#34250)\n\n(cherry picked from commit 0470f3af6ddeda0917cd3a0616fa3206bad00236)",
        "before_after_code_files": [
          "airflow/decorators/base.py||airflow/decorators/base.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/decorators/base.py||airflow/decorators/base.py": [
          "File: airflow/decorators/base.py -> airflow/decorators/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     def _expand_mapped_kwargs(self, context: Context, session: Session) -> tuple[Mapping[str, Any], set[int]]:",
          "525:         # We only use op_kwargs_expand_input so this must always be empty.",
          "527:         op_kwargs, resolved_oids = super()._expand_mapped_kwargs(context, session)",
          "528:         return {\"op_kwargs\": op_kwargs}, resolved_oids",
          "",
          "[Removed Lines]",
          "526:         assert self.expand_input is EXPAND_INPUT_EMPTY",
          "",
          "[Added Lines]",
          "526:         if self.expand_input is not EXPAND_INPUT_EMPTY:",
          "527:             raise AssertionError(f\"unexpected expand_input: {self.expand_input}\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}