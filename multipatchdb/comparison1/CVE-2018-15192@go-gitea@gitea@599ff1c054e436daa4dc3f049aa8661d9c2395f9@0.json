{
  "cve_id": "CVE-2018-15192",
  "cve_desc": "An SSRF vulnerability in webhooks in Gitea through 1.5.0-rc2 and Gogs through 0.11.53 allows remote attackers to access intranet services.",
  "repo": "go-gitea/gitea",
  "patch_hash": "599ff1c054e436daa4dc3f049aa8661d9c2395f9",
  "patch_info": {
    "commit_hash": "599ff1c054e436daa4dc3f049aa8661d9c2395f9",
    "repo": "go-gitea/gitea",
    "commit_url": "https://github.com/go-gitea/gitea/commit/599ff1c054e436daa4dc3f049aa8661d9c2395f9",
    "files": [
      "cmd/web.go",
      "custom/conf/app.example.ini",
      "docs/content/doc/advanced/config-cheat-sheet.en-us.md",
      "modules/hostmatcher/hostmatcher.go",
      "modules/hostmatcher/hostmatcher_test.go",
      "modules/migrations/migrate.go",
      "modules/setting/webhook.go",
      "modules/util/net.go",
      "services/webhook/deliver.go"
    ],
    "message": "Only allow webhook to send requests to allowed hosts (#17482)",
    "before_after_code_files": [
      "cmd/web.go||cmd/web.go",
      "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
      "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go",
      "modules/migrations/migrate.go||modules/migrations/migrate.go",
      "modules/setting/webhook.go||modules/setting/webhook.go",
      "modules/util/net.go||modules/util/net.go",
      "services/webhook/deliver.go||services/webhook/deliver.go"
    ]
  },
  "patch_diff": {
    "cmd/web.go||cmd/web.go": [
      "File: cmd/web.go -> cmd/web.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "194:   listenAddr = net.JoinHostPort(listenAddr, setting.HTTPPort)",
      "195:  }",
      "196:  log.Info(\"Listen: %v://%s%s\", setting.Protocol, listenAddr, setting.AppSubURL)",
      "198:  if setting.LFS.StartServer {",
      "199:   log.Info(\"LFS server enabled\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "200:  log.Info(\"AppURL(ROOT_URL): %s\", setting.AppURL)",
      "",
      "---------------"
    ],
    "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go": [
      "File: modules/hostmatcher/hostmatcher.go -> modules/hostmatcher/hostmatcher.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package hostmatcher",
      "7: import (",
      "8:  \"net\"",
      "9:  \"path/filepath\"",
      "10:  \"strings\"",
      "12:  \"code.gitea.io/gitea/modules/util\"",
      "13: )",
      "17: type HostMatchList struct {",
      "18:  hosts  []string",
      "19:  ipNets []*net.IPNet",
      "20: }",
      "23: const MatchBuiltinAll = \"*\"",
      "26: const MatchBuiltinExternal = \"external\"",
      "29: const MatchBuiltinPrivate = \"private\"",
      "32: const MatchBuiltinLoopback = \"loopback\"",
      "35: func ParseHostMatchList(hostList string) *HostMatchList {",
      "36:  hl := &HostMatchList{}",
      "37:  for _, s := range strings.Split(hostList, \",\") {",
      "38:   s = strings.ToLower(strings.TrimSpace(s))",
      "39:   if s == \"\" {",
      "40:    continue",
      "41:   }",
      "42:   _, ipNet, err := net.ParseCIDR(s)",
      "43:   if err == nil {",
      "44:    hl.ipNets = append(hl.ipNets, ipNet)",
      "45:   } else {",
      "46:    hl.hosts = append(hl.hosts, s)",
      "47:   }",
      "48:  }",
      "49:  return hl",
      "50: }",
      "53: func (hl *HostMatchList) MatchesHostOrIP(host string, ip net.IP) bool {",
      "54:  var matched bool",
      "55:  host = strings.ToLower(host)",
      "56:  ipStr := ip.String()",
      "57: loop:",
      "58:  for _, hostInList := range hl.hosts {",
      "59:   switch hostInList {",
      "60:   case \"\":",
      "61:    continue",
      "62:   case MatchBuiltinAll:",
      "63:    matched = true",
      "64:    break loop",
      "65:   case MatchBuiltinExternal:",
      "66:    if matched = ip.IsGlobalUnicast() && !util.IsIPPrivate(ip); matched {",
      "67:     break loop",
      "68:    }",
      "69:   case MatchBuiltinPrivate:",
      "70:    if matched = util.IsIPPrivate(ip); matched {",
      "71:     break loop",
      "72:    }",
      "73:   case MatchBuiltinLoopback:",
      "74:    if matched = ip.IsLoopback(); matched {",
      "75:     break loop",
      "76:    }",
      "77:   default:",
      "78:    if matched, _ = filepath.Match(hostInList, host); matched {",
      "79:     break loop",
      "80:    }",
      "81:    if matched, _ = filepath.Match(hostInList, ipStr); matched {",
      "82:     break loop",
      "83:    }",
      "84:   }",
      "85:  }",
      "86:  if !matched {",
      "87:   for _, ipNet := range hl.ipNets {",
      "88:    if matched = ipNet.Contains(ip); matched {",
      "89:     break",
      "90:    }",
      "91:   }",
      "92:  }",
      "93:  return matched",
      "94: }",
      "",
      "---------------"
    ],
    "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go": [
      "File: modules/hostmatcher/hostmatcher_test.go -> modules/hostmatcher/hostmatcher_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package hostmatcher",
      "7: import (",
      "8:  \"net\"",
      "9:  \"testing\"",
      "11:  \"github.com/stretchr/testify/assert\"",
      "12: )",
      "14: func TestHostOrIPMatchesList(t *testing.T) {",
      "15:  type tc struct {",
      "16:   host     string",
      "17:   ip       net.IP",
      "18:   expected bool",
      "19:  }",
      "23:  hl := ParseHostMatchList(\"private, External, *.myDomain.com, 169.254.1.0/24\")",
      "24:  cases := []tc{",
      "25:   {\"\", net.IPv4zero, false},",
      "26:   {\"\", net.IPv6zero, false},",
      "28:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
      "29:   {\"\", net.ParseIP(\"::1\"), false},",
      "31:   {\"\", net.ParseIP(\"10.0.1.1\"), true},",
      "32:   {\"\", net.ParseIP(\"192.168.1.1\"), true},",
      "33:   {\"\", net.ParseIP(\"fd00::1\"), true},",
      "35:   {\"\", net.ParseIP(\"8.8.8.8\"), true},",
      "36:   {\"\", net.ParseIP(\"1001::1\"), true},",
      "38:   {\"mydomain.com\", net.IPv4zero, false},",
      "39:   {\"sub.mydomain.com\", net.IPv4zero, true},",
      "41:   {\"\", net.ParseIP(\"169.254.1.1\"), true},",
      "42:   {\"\", net.ParseIP(\"169.254.2.2\"), false},",
      "43:  }",
      "44:  for _, c := range cases {",
      "45:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
      "46:  }",
      "48:  hl = ParseHostMatchList(\"loopback\")",
      "49:  cases = []tc{",
      "50:   {\"\", net.IPv4zero, false},",
      "51:   {\"\", net.ParseIP(\"127.0.0.1\"), true},",
      "52:   {\"\", net.ParseIP(\"10.0.1.1\"), false},",
      "53:   {\"\", net.ParseIP(\"192.168.1.1\"), false},",
      "54:   {\"\", net.ParseIP(\"8.8.8.8\"), false},",
      "56:   {\"\", net.ParseIP(\"::1\"), true},",
      "57:   {\"\", net.ParseIP(\"fd00::1\"), false},",
      "58:   {\"\", net.ParseIP(\"1000::1\"), false},",
      "60:   {\"mydomain.com\", net.IPv4zero, false},",
      "61:  }",
      "62:  for _, c := range cases {",
      "63:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
      "64:  }",
      "66:  hl = ParseHostMatchList(\"private\")",
      "67:  cases = []tc{",
      "68:   {\"\", net.IPv4zero, false},",
      "69:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
      "70:   {\"\", net.ParseIP(\"10.0.1.1\"), true},",
      "71:   {\"\", net.ParseIP(\"192.168.1.1\"), true},",
      "72:   {\"\", net.ParseIP(\"8.8.8.8\"), false},",
      "74:   {\"\", net.ParseIP(\"::1\"), false},",
      "75:   {\"\", net.ParseIP(\"fd00::1\"), true},",
      "76:   {\"\", net.ParseIP(\"1000::1\"), false},",
      "78:   {\"mydomain.com\", net.IPv4zero, false},",
      "79:  }",
      "80:  for _, c := range cases {",
      "81:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
      "82:  }",
      "84:  hl = ParseHostMatchList(\"external\")",
      "85:  cases = []tc{",
      "86:   {\"\", net.IPv4zero, false},",
      "87:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
      "88:   {\"\", net.ParseIP(\"10.0.1.1\"), false},",
      "89:   {\"\", net.ParseIP(\"192.168.1.1\"), false},",
      "90:   {\"\", net.ParseIP(\"8.8.8.8\"), true},",
      "92:   {\"\", net.ParseIP(\"::1\"), false},",
      "93:   {\"\", net.ParseIP(\"fd00::1\"), false},",
      "94:   {\"\", net.ParseIP(\"1000::1\"), true},",
      "96:   {\"mydomain.com\", net.IPv4zero, false},",
      "97:  }",
      "98:  for _, c := range cases {",
      "99:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
      "100:  }",
      "102:  hl = ParseHostMatchList(\"*\")",
      "103:  cases = []tc{",
      "104:   {\"\", net.IPv4zero, true},",
      "105:   {\"\", net.ParseIP(\"127.0.0.1\"), true},",
      "106:   {\"\", net.ParseIP(\"10.0.1.1\"), true},",
      "107:   {\"\", net.ParseIP(\"192.168.1.1\"), true},",
      "108:   {\"\", net.ParseIP(\"8.8.8.8\"), true},",
      "110:   {\"\", net.ParseIP(\"::1\"), true},",
      "111:   {\"\", net.ParseIP(\"fd00::1\"), true},",
      "112:   {\"\", net.ParseIP(\"1000::1\"), true},",
      "114:   {\"mydomain.com\", net.IPv4zero, true},",
      "115:  }",
      "116:  for _, c := range cases {",
      "117:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
      "118:  }",
      "119: }",
      "",
      "---------------"
    ],
    "modules/migrations/migrate.go||modules/migrations/migrate.go": [
      "File: modules/migrations/migrate.go -> modules/migrations/migrate.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "89:    return &models.ErrInvalidCloneAddr{Host: u.Host, NotResolvedIP: true}",
      "90:   }",
      "91:   for _, addr := range addrList {",
      "93:     return &models.ErrInvalidCloneAddr{Host: u.Host, PrivateNet: addr.String(), IsPermissionDenied: true}",
      "94:    }",
      "95:   }",
      "",
      "[Removed Lines]",
      "92:    if isIPPrivate(addr) || !addr.IsGlobalUnicast() {",
      "",
      "[Added Lines]",
      "92:    if util.IsIPPrivate(addr) || !addr.IsGlobalUnicast() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "475:  return nil",
      "476: }",
      "",
      "[Removed Lines]",
      "479: func isIPPrivate(ip net.IP) bool {",
      "480:  if ip4 := ip.To4(); ip4 != nil {",
      "481:   return ip4[0] == 10 ||",
      "482:    (ip4[0] == 172 && ip4[1]&0xf0 == 16) ||",
      "483:    (ip4[0] == 192 && ip4[1] == 168)",
      "484:  }",
      "485:  return len(ip) == net.IPv6len && ip[0]&0xfe == 0xfc",
      "486: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "modules/setting/webhook.go||modules/setting/webhook.go": [
      "File: modules/setting/webhook.go -> modules/setting/webhook.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import (",
      "8:  \"net/url\"",
      "10:  \"code.gitea.io/gitea/modules/log\"",
      "11: )",
      "13: var (",
      "15:  Webhook = struct {",
      "24:  }{",
      "25:   QueueLength:    1000,",
      "26:   DeliverTimeout: 5,",
      "",
      "[Removed Lines]",
      "16:   QueueLength    int",
      "17:   DeliverTimeout int",
      "18:   SkipTLSVerify  bool",
      "19:   Types          []string",
      "20:   PagingNum      int",
      "21:   ProxyURL       string",
      "22:   ProxyURLFixed  *url.URL",
      "23:   ProxyHosts     []string",
      "",
      "[Added Lines]",
      "10:  \"code.gitea.io/gitea/modules/hostmatcher\"",
      "17:   QueueLength     int",
      "18:   DeliverTimeout  int",
      "19:   SkipTLSVerify   bool",
      "20:   AllowedHostList *hostmatcher.HostMatchList",
      "21:   Types           []string",
      "22:   PagingNum       int",
      "23:   ProxyURL        string",
      "24:   ProxyURLFixed   *url.URL",
      "25:   ProxyHosts      []string",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36:  Webhook.QueueLength = sec.Key(\"QUEUE_LENGTH\").MustInt(1000)",
      "37:  Webhook.DeliverTimeout = sec.Key(\"DELIVER_TIMEOUT\").MustInt(5)",
      "38:  Webhook.SkipTLSVerify = sec.Key(\"SKIP_TLS_VERIFY\").MustBool()",
      "39:  Webhook.Types = []string{\"gitea\", \"gogs\", \"slack\", \"discord\", \"dingtalk\", \"telegram\", \"msteams\", \"feishu\", \"matrix\", \"wechatwork\"}",
      "40:  Webhook.PagingNum = sec.Key(\"PAGING_NUM\").MustInt(10)",
      "41:  Webhook.ProxyURL = sec.Key(\"PROXY_URL\").MustString(\"\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41:  Webhook.AllowedHostList = hostmatcher.ParseHostMatchList(sec.Key(\"ALLOWED_HOST_LIST\").MustString(hostmatcher.MatchBuiltinExternal))",
      "",
      "---------------"
    ],
    "modules/util/net.go||modules/util/net.go": [
      "File: modules/util/net.go -> modules/util/net.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: package util",
      "7: import (",
      "8:  \"net\"",
      "9: )",
      "12: func IsIPPrivate(ip net.IP) bool {",
      "13:  if ip4 := ip.To4(); ip4 != nil {",
      "14:   return ip4[0] == 10 ||",
      "15:    (ip4[0] == 172 && ip4[1]&0xf0 == 16) ||",
      "16:    (ip4[0] == 192 && ip4[1] == 168)",
      "17:  }",
      "18:  return len(ip) == net.IPv6len && ip[0]&0xfe == 0xfc",
      "19: }",
      "",
      "---------------"
    ],
    "services/webhook/deliver.go||services/webhook/deliver.go": [
      "File: services/webhook/deliver.go -> services/webhook/deliver.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:  \"strconv\"",
      "20:  \"strings\"",
      "21:  \"sync\"",
      "22:  \"time\"",
      "24:  \"code.gitea.io/gitea/models\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:  \"syscall\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:  \"github.com/gobwas/glob\"",
      "30: )",
      "33: func Deliver(t *models.HookTask) error {",
      "34:  w, err := models.GetWebhookByID(t.HookID)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: var contextKeyWebhookRequest interface{} = \"contextKeyWebhookRequest\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:   return fmt.Errorf(\"Webhook task skipped (webhooks disabled): [%d]\", t.ID)",
      "172:  }",
      "175:  if err != nil {",
      "176:   t.ResponseInfo.Body = fmt.Sprintf(\"Delivery: %v\", err)",
      "177:   return err",
      "",
      "[Removed Lines]",
      "174:  resp, err := webhookHTTPClient.Do(req)",
      "",
      "[Added Lines]",
      "177:  resp, err := webhookHTTPClient.Do(req.WithContext(context.WithValue(req.Context(), contextKeyWebhookRequest, req)))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "293:  timeout := time.Duration(setting.Webhook.DeliverTimeout) * time.Second",
      "295:  webhookHTTPClient = &http.Client{",
      "296:   Transport: &http.Transport{",
      "297:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Webhook.SkipTLSVerify},",
      "298:    Proxy:           webhookProxy(),",
      "301:    },",
      "302:   },",
      "304:  }",
      "306:  go graceful.GetManager().RunWithShutdownContext(DeliverHooks)",
      "",
      "[Removed Lines]",
      "299:    Dial: func(netw, addr string) (net.Conn, error) {",
      "300:     return net.DialTimeout(netw, addr, timeout) // dial timeout",
      "303:   Timeout: timeout, // request timeout",
      "",
      "[Added Lines]",
      "299:   Timeout: timeout,",
      "303:    DialContext: func(ctx context.Context, network, addrOrHost string) (net.Conn, error) {",
      "304:     dialer := net.Dialer{",
      "305:      Timeout: timeout,",
      "306:      Control: func(network, ipAddr string, c syscall.RawConn) error {",
      "308:       tcpAddr, err := net.ResolveTCPAddr(network, ipAddr)",
      "309:       req := ctx.Value(contextKeyWebhookRequest).(*http.Request)",
      "310:       if err != nil {",
      "311:        return fmt.Errorf(\"webhook can only call HTTP servers via TCP, deny '%s(%s:%s)', err=%v\", req.Host, network, ipAddr, err)",
      "312:       }",
      "313:       if !setting.Webhook.AllowedHostList.MatchesHostOrIP(req.Host, tcpAddr.IP) {",
      "314:        return fmt.Errorf(\"webhook can only call allowed HTTP servers (check your webhook.ALLOWED_HOST_LIST setting), deny '%s(%s)'\", req.Host, ipAddr)",
      "315:       }",
      "316:       return nil",
      "317:      },",
      "318:     }",
      "319:     return dialer.DialContext(ctx, network, addrOrHost)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "60fbaa90683add2a8af891fc2ca8448b9b75c92e",
      "candidate_info": {
        "commit_hash": "60fbaa90683add2a8af891fc2ca8448b9b75c92e",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/60fbaa90683add2a8af891fc2ca8448b9b75c92e",
        "files": [
          "modules/hostmatcher/hostmatcher.go",
          "modules/util/net.go",
          "modules/util/net_test.go"
        ],
        "message": "remove not needed (#19128)",
        "before_after_code_files": [
          "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
          "modules/util/net.go||modules/util/net.go",
          "modules/util/net_test.go||modules/util/net_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
            "modules/util/net.go||modules/util/net.go"
          ],
          "candidate": [
            "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
            "modules/util/net.go||modules/util/net.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go": [
          "File: modules/hostmatcher/hostmatcher.go -> modules/hostmatcher/hostmatcher.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"net\"",
          "9:  \"path/filepath\"",
          "10:  \"strings\"",
          "13: )",
          "",
          "[Removed Lines]",
          "12:  \"code.gitea.io/gitea/modules/util\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:  for _, builtin := range hl.builtins {",
          "105:   switch builtin {",
          "106:   case MatchBuiltinExternal:",
          "108:     return true",
          "109:    }",
          "110:   case MatchBuiltinPrivate:",
          "112:     return true",
          "113:    }",
          "114:   case MatchBuiltinLoopback:",
          "",
          "[Removed Lines]",
          "107:    if ip.IsGlobalUnicast() && !util.IsIPPrivate(ip) {",
          "111:    if util.IsIPPrivate(ip) {",
          "",
          "[Added Lines]",
          "105:    if ip.IsGlobalUnicast() && !ip.IsPrivate() {",
          "109:    if ip.IsPrivate() {",
          "",
          "---------------"
        ],
        "modules/util/net.go||modules/util/net.go": [
          "File: modules/util/net.go -> modules/util/net.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/util/net_test.go||modules/util/net_test.go": [
          "File: modules/util/net_test.go -> modules/util/net_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a51efb4c2c315db0deb4120c8f2874390c2d7e40",
      "candidate_info": {
        "commit_hash": "a51efb4c2c315db0deb4120c8f2874390c2d7e40",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/a51efb4c2c315db0deb4120c8f2874390c2d7e40",
        "files": [
          "modules/hostmatcher/hostmatcher.go",
          "modules/hostmatcher/hostmatcher_test.go"
        ],
        "message": "Support `hostname:port` to pass host matcher's check #19543  (#19543)\n\nhostmatcher: split the hostname from the `hostname:port` string, use the correct hostname to do the match.",
        "before_after_code_files": [
          "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
          "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
            "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go"
          ],
          "candidate": [
            "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
            "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go": [
          "File: modules/hostmatcher/hostmatcher.go -> modules/hostmatcher/hostmatcher.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: func (hl *HostMatchList) MatchHostName(host string) bool {",
          "128:  if hl == nil {",
          "129:   return false",
          "130:  }",
          "132:   return true",
          "133:  }",
          "135:   return hl.checkIP(ip)",
          "136:  }",
          "137:  return false",
          "",
          "[Removed Lines]",
          "131:  if hl.checkPattern(host) {",
          "134:  if ip := net.ParseIP(host); ip != nil {",
          "",
          "[Added Lines]",
          "128:  hostname, _, err := net.SplitHostPort(host)",
          "129:  if err != nil {",
          "130:   hostname = host",
          "131:  }",
          "136:  if hl.checkPattern(hostname) {",
          "139:  if ip := net.ParseIP(hostname); ip != nil {",
          "",
          "---------------"
        ],
        "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go": [
          "File: modules/hostmatcher/hostmatcher_test.go -> modules/hostmatcher/hostmatcher_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   {\"\", net.ParseIP(\"10.0.1.1\"), true},",
          "40:   {\"10.0.1.1\", nil, true},",
          "41:   {\"\", net.ParseIP(\"192.168.1.1\"), true},",
          "42:   {\"192.168.1.1\", nil, true},",
          "43:   {\"\", net.ParseIP(\"fd00::1\"), true},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   {\"10.0.1.1:8080\", nil, true},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   {\"mydomain.com\", net.IPv4zero, false},",
          "50:   {\"sub.mydomain.com\", net.IPv4zero, true},",
          "52:   {\"\", net.ParseIP(\"169.254.1.1\"), true},",
          "53:   {\"169.254.1.1\", nil, true},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   {\"sub.mydomain.com:8080\", net.IPv4zero, true},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2435af9be75a0cdeea08881c162e65740225f56",
      "candidate_info": {
        "commit_hash": "b2435af9be75a0cdeea08881c162e65740225f56",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/b2435af9be75a0cdeea08881c162e65740225f56",
        "files": [
          "custom/conf/app.example.ini",
          "docs/content/doc/advanced/config-cheat-sheet.en-us.md",
          "docs/content/doc/advanced/config-cheat-sheet.zh-cn.md",
          "integrations/api_repo_test.go",
          "models/error.go",
          "modules/matchlist/matchlist.go",
          "modules/migrations/migrate.go",
          "modules/migrations/migrate_test.go",
          "modules/setting/migrations.go",
          "routers/api/v1/repo/migrate.go",
          "routers/init.go"
        ],
        "message": "Add Allow-/Block-List for Migrate & Mirrors (#13610)\n\n* add black list and white list support for migrating repositories\n\n* fix fmt\n\n* fix lint\n\n* fix vendor\n\n* fix modules.txt\n\n* clean diff\n\n* specify log message\n\n* use blocklist/allowlist\n\n* allways use lowercase to match url\n\n* Apply allow/block\n\n* Settings: use existing \"migrations\" section\n\n* convert domains lower case\n\n* dont store unused value\n\n* Block private addresses for migration by default\n\n* fix lint\n\n* use proposed-upstream func to detect private IP addr\n\n* a nit\n\n* add own error for blocked migration, add tests, imprufe api\n\n* fix test\n\n* fix-if-localhost-is-ipv4\n\n* rename error & error message\n\n* rename setting options\n\n* Apply suggestions from code review\n\nCo-authored-by: Lunny Xiao <xiaolunwen@gmail.com>\nCo-authored-by: zeripath <art27@cantab.net>\nCo-authored-by: techknowlogick <techknowlogick@gitea.io>",
        "before_after_code_files": [
          "integrations/api_repo_test.go||integrations/api_repo_test.go",
          "models/error.go||models/error.go",
          "modules/matchlist/matchlist.go||modules/matchlist/matchlist.go",
          "modules/migrations/migrate.go||modules/migrations/migrate.go",
          "modules/migrations/migrate_test.go||modules/migrations/migrate_test.go",
          "modules/setting/migrations.go||modules/setting/migrations.go",
          "routers/api/v1/repo/migrate.go||routers/api/v1/repo/migrate.go",
          "routers/init.go||routers/init.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/migrations/migrate.go||modules/migrations/migrate.go"
          ],
          "candidate": [
            "modules/migrations/migrate.go||modules/migrations/migrate.go"
          ]
        }
      },
      "candidate_diff": {
        "integrations/api_repo_test.go||integrations/api_repo_test.go": [
          "File: integrations/api_repo_test.go -> integrations/api_repo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   {ctxUserID: 2, userID: 1, cloneURL: \"https://github.com/go-gitea/test_repo.git\", repoName: \"git-bad\", expectedStatus: http.StatusForbidden},",
          "310:   {ctxUserID: 2, userID: 3, cloneURL: \"https://github.com/go-gitea/test_repo.git\", repoName: \"git-org\", expectedStatus: http.StatusCreated},",
          "311:   {ctxUserID: 2, userID: 6, cloneURL: \"https://github.com/go-gitea/test_repo.git\", repoName: \"git-bad-org\", expectedStatus: http.StatusForbidden},",
          "312:  }",
          "314:  defer prepareTestEnv(t)()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   {ctxUserID: 2, userID: 3, cloneURL: \"https://localhost:3000/user/test_repo.git\", repoName: \"local-ip\", expectedStatus: http.StatusUnprocessableEntity},",
          "313:   {ctxUserID: 2, userID: 3, cloneURL: \"https://10.0.0.1/user/test_repo.git\", repoName: \"private-ip\", expectedStatus: http.StatusUnprocessableEntity},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   if resp.Code == http.StatusUnprocessableEntity {",
          "326:    respJSON := map[string]string{}",
          "327:    DecodeJSON(t, resp, &respJSON)",
          "329:     t.Log(\"test hit github rate limitation\")",
          "330:    }",
          "331:   } else {",
          "332:    assert.EqualValues(t, testCase.expectedStatus, resp.Code)",
          "",
          "[Removed Lines]",
          "328:    if assert.Equal(t, \"Remote visit addressed rate limitation.\", respJSON[\"message\"]) {",
          "",
          "[Added Lines]",
          "330:    switch respJSON[\"message\"] {",
          "331:    case \"Remote visit addressed rate limitation.\":",
          "333:    case \"migrate from '10.0.0.1' is not allowed: the host resolve to a private ip address '10.0.0.1'\":",
          "334:     assert.EqualValues(t, \"private-ip\", testCase.repoName)",
          "335:    case \"migrate from 'localhost:3000' is not allowed: the host resolve to a private ip address '::1'\",",
          "336:     \"migrate from 'localhost:3000' is not allowed: the host resolve to a private ip address '127.0.0.1'\":",
          "337:     assert.EqualValues(t, \"local-ip\", testCase.repoName)",
          "338:    default:",
          "339:     t.Errorf(\"unexpected error '%v' on url '%s'\", respJSON[\"message\"], testCase.cloneURL)",
          "",
          "---------------"
        ],
        "models/error.go||models/error.go": [
          "File: models/error.go -> models/error.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1019:  return ok",
          "1020: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023: type ErrMigrationNotAllowed struct {",
          "1024:  Host          string",
          "1025:  NotResolvedIP bool",
          "1026:  PrivateNet    string",
          "1027: }",
          "1029: func (e *ErrMigrationNotAllowed) Error() string {",
          "1030:  if e.NotResolvedIP {",
          "1031:   return fmt.Sprintf(\"migrate from '%s' is not allowed: unknown hostname\", e.Host)",
          "1032:  }",
          "1033:  if len(e.PrivateNet) != 0 {",
          "1034:   return fmt.Sprintf(\"migrate from '%s' is not allowed: the host resolve to a private ip address '%s'\", e.Host, e.PrivateNet)",
          "1035:  }",
          "1036:  return fmt.Sprintf(\"migrate from '%s is not allowed'\", e.Host)",
          "1037: }",
          "1040: func IsErrMigrationNotAllowed(err error) bool {",
          "1041:  _, ok := err.(*ErrMigrationNotAllowed)",
          "1042:  return ok",
          "1043: }",
          "",
          "---------------"
        ],
        "modules/matchlist/matchlist.go||modules/matchlist/matchlist.go": [
          "File: modules/matchlist/matchlist.go -> modules/matchlist/matchlist.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package matchlist",
          "7: import (",
          "8:  \"strings\"",
          "10:  \"github.com/gobwas/glob\"",
          "11: )",
          "14: type Matchlist struct {",
          "15:  ruleGlobs []glob.Glob",
          "16: }",
          "19: func NewMatchlist(rules ...string) (*Matchlist, error) {",
          "20:  for i := range rules {",
          "21:   rules[i] = strings.ToLower(rules[i])",
          "22:  }",
          "23:  list := Matchlist{",
          "24:   ruleGlobs: make([]glob.Glob, 0, len(rules)),",
          "25:  }",
          "27:  for _, rule := range rules {",
          "28:   rg, err := glob.Compile(rule)",
          "29:   if err != nil {",
          "30:    return nil, err",
          "31:   }",
          "32:   list.ruleGlobs = append(list.ruleGlobs, rg)",
          "33:  }",
          "35:  return &list, nil",
          "36: }",
          "39: func (b *Matchlist) Match(u string) bool {",
          "40:  for _, r := range b.ruleGlobs {",
          "41:   if r.Match(u) {",
          "42:    return true",
          "43:   }",
          "44:  }",
          "45:  return false",
          "46: }",
          "",
          "---------------"
        ],
        "modules/migrations/migrate.go||modules/migrations/migrate.go": [
          "File: modules/migrations/migrate.go -> modules/migrations/migrate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"context\"",
          "10:  \"fmt\"",
          "12:  \"code.gitea.io/gitea/models\"",
          "13:  \"code.gitea.io/gitea/modules/log\"",
          "14:  \"code.gitea.io/gitea/modules/migrations/base\"",
          "15:  \"code.gitea.io/gitea/modules/setting\"",
          "16: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"net\"",
          "12:  \"net/url\"",
          "13:  \"strings\"",
          "17:  \"code.gitea.io/gitea/modules/matchlist\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: var (",
          "22:  factories []base.DownloaderFactory",
          "23: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:  allowList *matchlist.Matchlist",
          "29:  blockList *matchlist.Matchlist",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:  factories = append(factories, factory)",
          "28: }",
          "31: func MigrateRepository(ctx context.Context, doer *models.User, ownerName string, opts base.MigrateOptions) (*models.Repository, error) {",
          "32:  var (",
          "33:   downloader base.Downloader",
          "34:   uploader   = NewGiteaLocalUploader(ctx, doer, ownerName, opts.RepoName)",
          "36:  )",
          "38:  for _, factory := range factories {",
          "",
          "[Removed Lines]",
          "35:   err        error",
          "",
          "[Added Lines]",
          "37: func isMigrateURLAllowed(remoteURL string) error {",
          "38:  u, err := url.Parse(strings.ToLower(remoteURL))",
          "39:  if err != nil {",
          "40:   return err",
          "41:  }",
          "43:  if strings.EqualFold(u.Scheme, \"http\") || strings.EqualFold(u.Scheme, \"https\") {",
          "44:   if len(setting.Migrations.AllowedDomains) > 0 {",
          "45:    if !allowList.Match(u.Host) {",
          "46:     return &models.ErrMigrationNotAllowed{Host: u.Host}",
          "47:    }",
          "48:   } else {",
          "49:    if blockList.Match(u.Host) {",
          "50:     return &models.ErrMigrationNotAllowed{Host: u.Host}",
          "51:    }",
          "52:   }",
          "53:  }",
          "55:  if !setting.Migrations.AllowLocalNetworks {",
          "56:   addrList, err := net.LookupIP(strings.Split(u.Host, \":\")[0])",
          "57:   if err != nil {",
          "58:    return &models.ErrMigrationNotAllowed{Host: u.Host, NotResolvedIP: true}",
          "59:   }",
          "60:   for _, addr := range addrList {",
          "61:    if isIPPrivate(addr) || !addr.IsGlobalUnicast() {",
          "62:     return &models.ErrMigrationNotAllowed{Host: u.Host, PrivateNet: addr.String()}",
          "63:    }",
          "64:   }",
          "65:  }",
          "67:  return nil",
          "68: }",
          "72:  err := isMigrateURLAllowed(opts.CloneAddr)",
          "73:  if err != nil {",
          "74:   return nil, err",
          "75:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:  return nil",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357: func Init() error {",
          "358:  var err error",
          "359:  allowList, err = matchlist.NewMatchlist(setting.Migrations.AllowedDomains...)",
          "360:  if err != nil {",
          "361:   return fmt.Errorf(\"init migration allowList domains failed: %v\", err)",
          "362:  }",
          "364:  blockList, err = matchlist.NewMatchlist(setting.Migrations.BlockedDomains...)",
          "365:  if err != nil {",
          "366:   return fmt.Errorf(\"init migration blockList domains failed: %v\", err)",
          "367:  }",
          "369:  return nil",
          "370: }",
          "376: func isIPPrivate(ip net.IP) bool {",
          "377:  if ip4 := ip.To4(); ip4 != nil {",
          "378:   return ip4[0] == 10 ||",
          "379:    (ip4[0] == 172 && ip4[1]&0xf0 == 16) ||",
          "380:    (ip4[0] == 192 && ip4[1] == 168)",
          "381:  }",
          "382:  return len(ip) == net.IPv6len && ip[0]&0xfe == 0xfc",
          "383: }",
          "",
          "---------------"
        ],
        "modules/migrations/migrate_test.go||modules/migrations/migrate_test.go": [
          "File: modules/migrations/migrate_test.go -> modules/migrations/migrate_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package migrations",
          "7: import (",
          "8:  \"testing\"",
          "10:  \"code.gitea.io/gitea/modules/setting\"",
          "12:  \"github.com/stretchr/testify/assert\"",
          "13: )",
          "15: func TestMigrateWhiteBlocklist(t *testing.T) {",
          "16:  setting.Migrations.AllowedDomains = []string{\"github.com\"}",
          "17:  assert.NoError(t, Init())",
          "19:  err := isMigrateURLAllowed(\"https://gitlab.com/gitlab/gitlab.git\")",
          "20:  assert.Error(t, err)",
          "22:  err = isMigrateURLAllowed(\"https://github.com/go-gitea/gitea.git\")",
          "23:  assert.NoError(t, err)",
          "25:  setting.Migrations.AllowedDomains = []string{}",
          "26:  setting.Migrations.BlockedDomains = []string{\"github.com\"}",
          "27:  assert.NoError(t, Init())",
          "29:  err = isMigrateURLAllowed(\"https://gitlab.com/gitlab/gitlab.git\")",
          "30:  assert.NoError(t, err)",
          "32:  err = isMigrateURLAllowed(\"https://github.com/go-gitea/gitea.git\")",
          "33:  assert.Error(t, err)",
          "34: }",
          "",
          "---------------"
        ],
        "modules/setting/migrations.go||modules/setting/migrations.go": [
          "File: modules/setting/migrations.go -> modules/setting/migrations.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: package setting",
          "7: var (",
          "9:  Migrations = struct {",
          "12:  }{",
          "13:   MaxAttempts:  3,",
          "14:   RetryBackoff: 3,",
          "",
          "[Removed Lines]",
          "10:   MaxAttempts  int",
          "11:   RetryBackoff int",
          "",
          "[Added Lines]",
          "7: import (",
          "8:  \"strings\"",
          "9: )",
          "14:   MaxAttempts        int",
          "15:   RetryBackoff       int",
          "16:   AllowedDomains     []string",
          "17:   BlockedDomains     []string",
          "18:   AllowLocalNetworks bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  sec := Cfg.Section(\"migrations\")",
          "20:  Migrations.MaxAttempts = sec.Key(\"MAX_ATTEMPTS\").MustInt(Migrations.MaxAttempts)",
          "21:  Migrations.RetryBackoff = sec.Key(\"RETRY_BACKOFF\").MustInt(Migrations.RetryBackoff)",
          "22: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:  Migrations.AllowedDomains = sec.Key(\"ALLOWED_DOMAINS\").Strings(\",\")",
          "31:  for i := range Migrations.AllowedDomains {",
          "32:   Migrations.AllowedDomains[i] = strings.ToLower(Migrations.AllowedDomains[i])",
          "33:  }",
          "34:  Migrations.BlockedDomains = sec.Key(\"BLOCKED_DOMAINS\").Strings(\",\")",
          "35:  for i := range Migrations.BlockedDomains {",
          "36:   Migrations.BlockedDomains[i] = strings.ToLower(Migrations.BlockedDomains[i])",
          "37:  }",
          "39:  Migrations.AllowLocalNetworks = sec.Key(\"ALLOW_LOCALNETWORKS\").MustBool(false)",
          "",
          "---------------"
        ],
        "routers/api/v1/repo/migrate.go||routers/api/v1/repo/migrate.go": [
          "File: routers/api/v1/repo/migrate.go -> routers/api/v1/repo/migrate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:   ctx.Error(http.StatusUnprocessableEntity, \"\", fmt.Sprintf(\"The username '%s' contains invalid characters.\", err.(models.ErrNameCharsNotAllowed).Name))",
          "213:  case models.IsErrNamePatternNotAllowed(err):",
          "214:   ctx.Error(http.StatusUnprocessableEntity, \"\", fmt.Sprintf(\"The pattern '%s' is not allowed in a username.\", err.(models.ErrNamePatternNotAllowed).Pattern))",
          "215:  default:",
          "216:   err = util.URLSanitizedError(err, remoteAddr)",
          "217:   if strings.Contains(err.Error(), \"Authentication failed\") ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:  case models.IsErrMigrationNotAllowed(err):",
          "216:   ctx.Error(http.StatusUnprocessableEntity, \"\", err)",
          "",
          "---------------"
        ],
        "routers/init.go||routers/init.go": [
          "File: routers/init.go -> routers/init.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  \"code.gitea.io/gitea/modules/log\"",
          "25:  \"code.gitea.io/gitea/modules/markup\"",
          "26:  \"code.gitea.io/gitea/modules/markup/external\"",
          "27:  \"code.gitea.io/gitea/modules/notification\"",
          "28:  \"code.gitea.io/gitea/modules/options\"",
          "29:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:  repo_migrations \"code.gitea.io/gitea/modules/migrations\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:  if err := task.Init(); err != nil {",
          "202:   log.Fatal(\"Failed to initialize task scheduler: %v\", err)",
          "203:  }",
          "204:  eventsource.GetManager().Init()",
          "206:  if setting.EnableSQLite3 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:  if err := repo_migrations.Init(); err != nil {",
          "206:   log.Fatal(\"Failed to initialize repository migrations: %v\", err)",
          "207:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "013fb73068281b45b33c72abaae0c42c8d79c499",
      "candidate_info": {
        "commit_hash": "013fb73068281b45b33c72abaae0c42c8d79c499",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/013fb73068281b45b33c72abaae0c42c8d79c499",
        "files": [
          "custom/conf/app.example.ini",
          "docs/content/doc/advanced/config-cheat-sheet.en-us.md",
          "docs/content/doc/advanced/config-cheat-sheet.zh-cn.md",
          "integrations/api_repo_lfs_migrate_test.go",
          "integrations/api_repo_test.go",
          "integrations/mirror_pull_test.go",
          "integrations/mirror_push_test.go",
          "models/error.go",
          "modules/hostmatcher/hostmatcher.go",
          "modules/hostmatcher/hostmatcher_test.go",
          "modules/hostmatcher/http.go",
          "modules/lfs/client.go",
          "modules/lfs/client_test.go",
          "modules/lfs/http_client.go",
          "modules/matchlist/matchlist.go",
          "modules/repository/repo.go",
          "modules/setting/migrations.go",
          "modules/setting/webhook.go",
          "options/locale/locale_en-US.ini",
          "routers/api/v1/repo/migrate.go",
          "routers/web/repo/migrate.go",
          "routers/web/repo/setting.go",
          "services/migrations/gitea_downloader.go",
          "services/migrations/gitea_uploader.go",
          "services/migrations/github.go",
          "services/migrations/gitlab.go",
          "services/migrations/gogs.go",
          "services/migrations/http_client.go",
          "services/migrations/migrate.go",
          "services/migrations/migrate_test.go",
          "services/mirror/mirror_pull.go",
          "services/mirror/mirror_push.go",
          "services/webhook/deliver.go"
        ],
        "message": "Use `hostmatcher` to replace `matchlist`, improve security (#17605)\n\nUse hostmacher to replace matchlist.\n\nAnd we introduce a better DialContext to do a full host/IP check, otherwise the attackers can still bypass the allow/block list by a 302 redirection.",
        "before_after_code_files": [
          "integrations/api_repo_lfs_migrate_test.go||integrations/api_repo_lfs_migrate_test.go",
          "integrations/api_repo_test.go||integrations/api_repo_test.go",
          "integrations/mirror_pull_test.go||integrations/mirror_pull_test.go",
          "integrations/mirror_push_test.go||integrations/mirror_push_test.go",
          "models/error.go||models/error.go",
          "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
          "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go",
          "modules/hostmatcher/http.go||modules/hostmatcher/http.go",
          "modules/lfs/client.go||modules/lfs/client.go",
          "modules/lfs/client_test.go||modules/lfs/client_test.go",
          "modules/lfs/http_client.go||modules/lfs/http_client.go",
          "modules/matchlist/matchlist.go||modules/matchlist/matchlist.go",
          "modules/repository/repo.go||modules/repository/repo.go",
          "modules/setting/migrations.go||modules/setting/migrations.go",
          "modules/setting/webhook.go||modules/setting/webhook.go",
          "routers/api/v1/repo/migrate.go||routers/api/v1/repo/migrate.go",
          "routers/web/repo/migrate.go||routers/web/repo/migrate.go",
          "routers/web/repo/setting.go||routers/web/repo/setting.go",
          "services/migrations/gitea_downloader.go||services/migrations/gitea_downloader.go",
          "services/migrations/gitea_uploader.go||services/migrations/gitea_uploader.go",
          "services/migrations/github.go||services/migrations/github.go",
          "services/migrations/gitlab.go||services/migrations/gitlab.go",
          "services/migrations/gogs.go||services/migrations/gogs.go",
          "services/migrations/http_client.go||services/migrations/http_client.go",
          "services/migrations/migrate.go||services/migrations/migrate.go",
          "services/migrations/migrate_test.go||services/migrations/migrate_test.go",
          "services/mirror/mirror_pull.go||services/mirror/mirror_pull.go",
          "services/mirror/mirror_push.go||services/mirror/mirror_push.go",
          "services/webhook/deliver.go||services/webhook/deliver.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
            "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go",
            "modules/setting/webhook.go||modules/setting/webhook.go",
            "services/webhook/deliver.go||services/webhook/deliver.go"
          ],
          "candidate": [
            "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go",
            "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go",
            "modules/setting/webhook.go||modules/setting/webhook.go",
            "services/webhook/deliver.go||services/webhook/deliver.go"
          ]
        }
      },
      "candidate_diff": {
        "integrations/api_repo_lfs_migrate_test.go||integrations/api_repo_lfs_migrate_test.go": [
          "File: integrations/api_repo_lfs_migrate_test.go -> integrations/api_repo_lfs_migrate_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"code.gitea.io/gitea/modules/lfs\"",
          "15:  \"code.gitea.io/gitea/modules/setting\"",
          "16:  api \"code.gitea.io/gitea/modules/structs\"",
          "18:  \"github.com/stretchr/testify/assert\"",
          "19: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  \"code.gitea.io/gitea/services/migrations\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  oldAllowLocalNetworks := setting.Migrations.AllowLocalNetworks",
          "26:  setting.ImportLocalPaths = true",
          "27:  setting.Migrations.AllowLocalNetworks = true",
          "29:  user := unittest.AssertExistsAndLoadBean(t, &models.User{ID: 1}).(*models.User)",
          "30:  session := loginUser(t, user.Name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  assert.NoError(t, migrations.Init())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:  setting.ImportLocalPaths = oldImportLocalPaths",
          "49:  setting.Migrations.AllowLocalNetworks = oldAllowLocalNetworks",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  assert.NoError(t, migrations.Init()) // reset old migration settings",
          "",
          "---------------"
        ],
        "integrations/api_repo_test.go||integrations/api_repo_test.go": [
          "File: integrations/api_repo_test.go -> integrations/api_repo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:    switch respJSON[\"message\"] {",
          "332:    case \"Remote visit addressed rate limitation.\":",
          "333:     t.Log(\"test hit github rate limitation\")",
          "335:     assert.EqualValues(t, \"private-ip\", testCase.repoName)",
          "336:    default:",
          "338:    }",
          "339:   } else {",
          "340:    assert.EqualValues(t, testCase.expectedStatus, resp.Code)",
          "",
          "[Removed Lines]",
          "334:    case \"You are not allowed to import from private IPs.\":",
          "337:     t.Errorf(\"unexpected error '%v' on url '%s'\", respJSON[\"message\"], testCase.cloneURL)",
          "",
          "[Added Lines]",
          "334:    case \"You can not import from disallowed hosts.\":",
          "337:     assert.Fail(t, \"unexpected error '%v' on url '%s'\", respJSON[\"message\"], testCase.cloneURL)",
          "",
          "---------------"
        ],
        "integrations/mirror_pull_test.go||integrations/mirror_pull_test.go": [
          "File: integrations/mirror_pull_test.go -> integrations/mirror_pull_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  ctx := context.Background()",
          "51:  assert.NoError(t, err)",
          "53:  gitRepo, err := git.OpenRepository(repoPath)",
          "",
          "[Removed Lines]",
          "50:  mirror, err := repository.MigrateRepositoryGitData(ctx, user, mirrorRepo, opts)",
          "",
          "[Added Lines]",
          "50:  mirror, err := repository.MigrateRepositoryGitData(ctx, user, mirrorRepo, opts, nil)",
          "",
          "---------------"
        ],
        "integrations/mirror_push_test.go||integrations/mirror_push_test.go": [
          "File: integrations/mirror_push_test.go -> integrations/mirror_push_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"code.gitea.io/gitea/modules/git\"",
          "17:  \"code.gitea.io/gitea/modules/repository\"",
          "18:  \"code.gitea.io/gitea/modules/setting\"",
          "19:  mirror_service \"code.gitea.io/gitea/services/mirror\"",
          "21:  \"github.com/stretchr/testify/assert\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"code.gitea.io/gitea/services/migrations\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:  defer prepareTestEnv(t)()",
          "31:  setting.Migrations.AllowLocalNetworks = true",
          "33:  user := unittest.AssertExistsAndLoadBean(t, &models.User{ID: 2}).(*models.User)",
          "34:  srcRepo := unittest.AssertExistsAndLoadBean(t, &models.Repository{ID: 1}).(*models.Repository)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:  assert.NoError(t, migrations.Init())",
          "",
          "---------------"
        ],
        "models/error.go||models/error.go": [
          "File: models/error.go -> models/error.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:  IsPermissionDenied bool",
          "798:  LocalPath          bool",
          "799:  NotResolvedIP      bool",
          "801: }",
          "",
          "[Removed Lines]",
          "800:  PrivateNet         string",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:  if err.NotResolvedIP {",
          "811:   return fmt.Sprintf(\"migration/cloning from '%s' is not allowed: unknown hostname\", err.Host)",
          "812:  }",
          "816:  if err.IsInvalidPath {",
          "817:   return fmt.Sprintf(\"migration/cloning from '%s' is not allowed: the provided path is invalid\", err.Host)",
          "818:  }",
          "",
          "[Removed Lines]",
          "813:  if len(err.PrivateNet) != 0 {",
          "814:   return fmt.Sprintf(\"migration/cloning from '%s' is not allowed: the host resolve to a private ip address '%s'\", err.Host, err.PrivateNet)",
          "815:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/hostmatcher/hostmatcher.go||modules/hostmatcher/hostmatcher.go": [
          "File: modules/hostmatcher/hostmatcher.go -> modules/hostmatcher/hostmatcher.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: )",
          "17: type HostMatchList struct {",
          "19:  ipNets []*net.IPNet",
          "20: }",
          "26: const MatchBuiltinExternal = \"external\"",
          "",
          "[Removed Lines]",
          "18:  hosts  []string",
          "23: const MatchBuiltinAll = \"*\"",
          "",
          "[Added Lines]",
          "17:  SettingKeyHint string",
          "18:  SettingValue   string",
          "21:  builtins []string",
          "23:  patterns []string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: const MatchBuiltinLoopback = \"loopback\"",
          "37:  for _, s := range strings.Split(hostList, \",\") {",
          "38:   s = strings.ToLower(strings.TrimSpace(s))",
          "39:   if s == \"\" {",
          "",
          "[Removed Lines]",
          "35: func ParseHostMatchList(hostList string) *HostMatchList {",
          "36:  hl := &HostMatchList{}",
          "",
          "[Added Lines]",
          "37: func isBuiltin(s string) bool {",
          "38:  return s == MatchBuiltinExternal || s == MatchBuiltinPrivate || s == MatchBuiltinLoopback",
          "39: }",
          "42: func ParseHostMatchList(settingKeyHint string, hostList string) *HostMatchList {",
          "43:  hl := &HostMatchList{SettingKeyHint: settingKeyHint, SettingValue: hostList}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:   _, ipNet, err := net.ParseCIDR(s)",
          "43:   if err == nil {",
          "44:    hl.ipNets = append(hl.ipNets, ipNet)",
          "45:   } else {",
          "47:   }",
          "48:  }",
          "49:  return hl",
          "50: }",
          "61:    continue",
          "65:   case MatchBuiltinExternal:",
          "68:    }",
          "69:   case MatchBuiltinPrivate:",
          "72:    }",
          "73:   case MatchBuiltinLoopback:",
          "83:    }",
          "84:   }",
          "85:  }",
          "91:   }",
          "92:  }",
          "94: }",
          "",
          "[Removed Lines]",
          "46:    hl.hosts = append(hl.hosts, s)",
          "53: func (hl *HostMatchList) MatchesHostOrIP(host string, ip net.IP) bool {",
          "54:  var matched bool",
          "55:  host = strings.ToLower(host)",
          "56:  ipStr := ip.String()",
          "57: loop:",
          "58:  for _, hostInList := range hl.hosts {",
          "59:   switch hostInList {",
          "60:   case \"\":",
          "62:   case MatchBuiltinAll:",
          "63:    matched = true",
          "64:    break loop",
          "66:    if matched = ip.IsGlobalUnicast() && !util.IsIPPrivate(ip); matched {",
          "67:     break loop",
          "70:    if matched = util.IsIPPrivate(ip); matched {",
          "71:     break loop",
          "74:    if matched = ip.IsLoopback(); matched {",
          "75:     break loop",
          "76:    }",
          "77:   default:",
          "78:    if matched, _ = filepath.Match(hostInList, host); matched {",
          "79:     break loop",
          "80:    }",
          "81:    if matched, _ = filepath.Match(hostInList, ipStr); matched {",
          "82:     break loop",
          "86:  if !matched {",
          "87:   for _, ipNet := range hl.ipNets {",
          "88:    if matched = ipNet.Contains(ip); matched {",
          "89:     break",
          "90:    }",
          "93:  return matched",
          "",
          "[Added Lines]",
          "52:   } else if isBuiltin(s) {",
          "53:    hl.builtins = append(hl.builtins, s)",
          "55:    hl.patterns = append(hl.patterns, s)",
          "62: func ParseSimpleMatchList(settingKeyHint string, matchList string) *HostMatchList {",
          "63:  hl := &HostMatchList{",
          "64:   SettingKeyHint: settingKeyHint,",
          "65:   SettingValue:   matchList,",
          "66:  }",
          "67:  for _, s := range strings.Split(matchList, \",\") {",
          "68:   s = strings.ToLower(strings.TrimSpace(s))",
          "69:   if s == \"\" {",
          "71:   }",
          "73:   hl.patterns = append(hl.patterns, s)",
          "74:  }",
          "75:  return hl",
          "76: }",
          "79: func (hl *HostMatchList) AppendBuiltin(builtin string) {",
          "80:  hl.builtins = append(hl.builtins, builtin)",
          "81: }",
          "84: func (hl *HostMatchList) IsEmpty() bool {",
          "85:  return hl == nil || (len(hl.builtins) == 0 && len(hl.patterns) == 0 && len(hl.ipNets) == 0)",
          "86: }",
          "88: func (hl *HostMatchList) checkPattern(host string) bool {",
          "89:  host = strings.ToLower(strings.TrimSpace(host))",
          "90:  for _, pattern := range hl.patterns {",
          "91:   if matched, _ := filepath.Match(pattern, host); matched {",
          "92:    return true",
          "93:   }",
          "94:  }",
          "95:  return false",
          "96: }",
          "98: func (hl *HostMatchList) checkIP(ip net.IP) bool {",
          "99:  for _, pattern := range hl.patterns {",
          "100:   if pattern == \"*\" {",
          "101:    return true",
          "102:   }",
          "103:  }",
          "104:  for _, builtin := range hl.builtins {",
          "105:   switch builtin {",
          "107:    if ip.IsGlobalUnicast() && !util.IsIPPrivate(ip) {",
          "108:     return true",
          "111:    if util.IsIPPrivate(ip) {",
          "112:     return true",
          "115:    if ip.IsLoopback() {",
          "116:     return true",
          "120:  for _, ipNet := range hl.ipNets {",
          "121:   if ipNet.Contains(ip) {",
          "122:    return true",
          "125:  return false",
          "126: }",
          "129: func (hl *HostMatchList) MatchHostName(host string) bool {",
          "130:  if hl == nil {",
          "131:   return false",
          "132:  }",
          "133:  if hl.checkPattern(host) {",
          "134:   return true",
          "135:  }",
          "136:  if ip := net.ParseIP(host); ip != nil {",
          "137:   return hl.checkIP(ip)",
          "138:  }",
          "139:  return false",
          "140: }",
          "143: func (hl *HostMatchList) MatchIPAddr(ip net.IP) bool {",
          "144:  if hl == nil {",
          "145:   return false",
          "146:  }",
          "147:  host := ip.String() // nil-safe, we will get \"<nil>\" if ip is nil",
          "148:  return hl.checkPattern(host) || hl.checkIP(ip)",
          "149: }",
          "152: func (hl *HostMatchList) MatchHostOrIP(host string, ip net.IP) bool {",
          "153:  return hl.MatchHostName(host) || hl.MatchIPAddr(ip)",
          "",
          "---------------"
        ],
        "modules/hostmatcher/hostmatcher_test.go||modules/hostmatcher/hostmatcher_test.go": [
          "File: modules/hostmatcher/hostmatcher_test.go -> modules/hostmatcher/hostmatcher_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  cases := []tc{",
          "25:   {\"\", net.IPv4zero, false},",
          "26:   {\"\", net.IPv6zero, false},",
          "28:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
          "29:   {\"\", net.ParseIP(\"::1\"), false},",
          "31:   {\"\", net.ParseIP(\"10.0.1.1\"), true},",
          "32:   {\"\", net.ParseIP(\"192.168.1.1\"), true},",
          "33:   {\"\", net.ParseIP(\"fd00::1\"), true},",
          "35:   {\"\", net.ParseIP(\"8.8.8.8\"), true},",
          "36:   {\"\", net.ParseIP(\"1001::1\"), true},",
          "",
          "[Removed Lines]",
          "23:  hl := ParseHostMatchList(\"private, External, *.myDomain.com, 169.254.1.0/24\")",
          "",
          "[Added Lines]",
          "23:  hl := ParseHostMatchList(\"\", \"private, External, *.myDomain.com, 169.254.1.0/24\")",
          "25:  test := func(cases []tc) {",
          "26:   for _, c := range cases {",
          "27:    assert.Equalf(t, c.expected, hl.MatchHostOrIP(c.host, c.ip), \"case domain=%s, ip=%v, expected=%v\", c.host, c.ip, c.expected)",
          "28:   }",
          "29:  }",
          "36:   {\"127.0.0.1\", nil, false},",
          "40:   {\"10.0.1.1\", nil, true},",
          "42:   {\"192.168.1.1\", nil, true},",
          "44:   {\"fd00::1\", nil, true},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   {\"sub.mydomain.com\", net.IPv4zero, true},",
          "41:   {\"\", net.ParseIP(\"169.254.1.1\"), true},",
          "42:   {\"\", net.ParseIP(\"169.254.2.2\"), false},",
          "43:  }",
          "49:  cases = []tc{",
          "50:   {\"\", net.IPv4zero, false},",
          "51:   {\"\", net.ParseIP(\"127.0.0.1\"), true},",
          "",
          "[Removed Lines]",
          "44:  for _, c := range cases {",
          "45:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
          "46:  }",
          "48:  hl = ParseHostMatchList(\"loopback\")",
          "",
          "[Added Lines]",
          "53:   {\"169.254.1.1\", nil, true},",
          "55:   {\"169.254.2.2\", nil, false},",
          "57:  test(cases)",
          "59:  hl = ParseHostMatchList(\"\", \"loopback\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:   {\"mydomain.com\", net.IPv4zero, false},",
          "61:  }",
          "67:  cases = []tc{",
          "68:   {\"\", net.IPv4zero, false},",
          "69:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
          "",
          "[Removed Lines]",
          "62:  for _, c := range cases {",
          "63:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
          "64:  }",
          "66:  hl = ParseHostMatchList(\"private\")",
          "",
          "[Added Lines]",
          "73:  test(cases)",
          "75:  hl = ParseHostMatchList(\"\", \"private\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:   {\"mydomain.com\", net.IPv4zero, false},",
          "79:  }",
          "85:  cases = []tc{",
          "86:   {\"\", net.IPv4zero, false},",
          "87:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
          "",
          "[Removed Lines]",
          "80:  for _, c := range cases {",
          "81:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
          "82:  }",
          "84:  hl = ParseHostMatchList(\"external\")",
          "",
          "[Added Lines]",
          "89:  test(cases)",
          "91:  hl = ParseHostMatchList(\"\", \"external\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:   {\"mydomain.com\", net.IPv4zero, false},",
          "97:  }",
          "103:  cases = []tc{",
          "104:   {\"\", net.IPv4zero, true},",
          "105:   {\"\", net.ParseIP(\"127.0.0.1\"), true},",
          "",
          "[Removed Lines]",
          "98:  for _, c := range cases {",
          "99:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
          "100:  }",
          "102:  hl = ParseHostMatchList(\"*\")",
          "",
          "[Added Lines]",
          "105:  test(cases)",
          "107:  hl = ParseHostMatchList(\"\", \"*\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:   {\"mydomain.com\", net.IPv4zero, true},",
          "115:  }",
          "118:  }",
          "119: }",
          "",
          "[Removed Lines]",
          "116:  for _, c := range cases {",
          "117:   assert.Equalf(t, c.expected, hl.MatchesHostOrIP(c.host, c.ip), \"case %s(%v)\", c.host, c.ip)",
          "",
          "[Added Lines]",
          "121:  test(cases)",
          "126:  hl = ParseHostMatchList(\"\", \"loopback, [p]rivate\")",
          "127:  cases = []tc{",
          "128:   {\"loopback\", nil, false},",
          "129:   {\"\", net.ParseIP(\"127.0.0.1\"), true},",
          "130:   {\"private\", nil, true},",
          "131:   {\"\", net.ParseIP(\"192.168.1.1\"), false},",
          "132:  }",
          "133:  test(cases)",
          "135:  hl = ParseSimpleMatchList(\"\", \"loopback, *.domain.com\")",
          "136:  cases = []tc{",
          "137:   {\"loopback\", nil, true},",
          "138:   {\"\", net.ParseIP(\"127.0.0.1\"), false},",
          "139:   {\"sub.domain.com\", nil, true},",
          "140:   {\"other.com\", nil, false},",
          "141:   {\"\", net.ParseIP(\"1.1.1.1\"), false},",
          "142:  }",
          "143:  test(cases)",
          "145:  hl = ParseSimpleMatchList(\"\", \"external\")",
          "146:  cases = []tc{",
          "147:   {\"\", net.ParseIP(\"192.168.1.1\"), false},",
          "148:   {\"\", net.ParseIP(\"1.1.1.1\"), false},",
          "149:   {\"external\", nil, true},",
          "150:  }",
          "151:  test(cases)",
          "153:  hl = ParseSimpleMatchList(\"\", \"\")",
          "154:  cases = []tc{",
          "155:   {\"\", net.ParseIP(\"192.168.1.1\"), false},",
          "156:   {\"\", net.ParseIP(\"1.1.1.1\"), false},",
          "157:   {\"external\", nil, false},",
          "159:  test(cases)",
          "",
          "---------------"
        ],
        "modules/hostmatcher/http.go||modules/hostmatcher/http.go": [
          "File: modules/hostmatcher/http.go -> modules/hostmatcher/http.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package hostmatcher",
          "7: import (",
          "8:  \"context\"",
          "9:  \"fmt\"",
          "10:  \"net\"",
          "11:  \"syscall\"",
          "12:  \"time\"",
          "13: )",
          "16: func NewDialContext(usage string, allowList *HostMatchList, blockList *HostMatchList) func(ctx context.Context, network, addr string) (net.Conn, error) {",
          "24:  return func(ctx context.Context, network, addrOrHost string) (net.Conn, error) {",
          "25:   dialer := net.Dialer{",
          "27:    Timeout:   30 * time.Second,",
          "28:    KeepAlive: 30 * time.Second,",
          "30:    Control: func(network, ipAddr string, c syscall.RawConn) (err error) {",
          "31:     var host string",
          "32:     if host, _, err = net.SplitHostPort(addrOrHost); err != nil {",
          "33:      return err",
          "34:     }",
          "36:     tcpAddr, err := net.ResolveTCPAddr(network, ipAddr)",
          "37:     if err != nil {",
          "38:      return fmt.Errorf(\"%s can only call HTTP servers via TCP, deny '%s(%s:%s)', err=%v\", usage, host, network, ipAddr, err)",
          "39:     }",
          "41:     var blockedError error",
          "42:     if blockList.MatchHostOrIP(host, tcpAddr.IP) {",
          "43:      blockedError = fmt.Errorf(\"%s can not call blocked HTTP servers (check your %s setting), deny '%s(%s)'\", usage, blockList.SettingKeyHint, host, ipAddr)",
          "44:     }",
          "47:     if !allowList.IsEmpty() {",
          "48:      if !allowList.MatchHostOrIP(host, tcpAddr.IP) {",
          "49:       return fmt.Errorf(\"%s can only call allowed HTTP servers (check your %s setting), deny '%s(%s)'\", usage, allowList.SettingKeyHint, host, ipAddr)",
          "50:      }",
          "51:     }",
          "53:     return blockedError",
          "54:    },",
          "55:   }",
          "56:   return dialer.DialContext(ctx, network, addrOrHost)",
          "57:  }",
          "58: }",
          "",
          "---------------"
        ],
        "modules/lfs/client.go||modules/lfs/client.go": [
          "File: modules/lfs/client.go -> modules/lfs/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"context\"",
          "9:  \"io\"",
          "10:  \"net/url\"",
          "11: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"net/http\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: }",
          "28:  if endpoint.Scheme == \"file\" {",
          "29:   return newFilesystemClient(endpoint)",
          "30:  }",
          "32: }",
          "",
          "[Removed Lines]",
          "27: func NewClient(endpoint *url.URL, skipTLSVerify bool) Client {",
          "31:  return newHTTPClient(endpoint, skipTLSVerify)",
          "",
          "[Added Lines]",
          "28: func NewClient(endpoint *url.URL, httpTransport *http.Transport) Client {",
          "32:  return newHTTPClient(endpoint, httpTransport)",
          "",
          "---------------"
        ],
        "modules/lfs/client_test.go||modules/lfs/client_test.go": [
          "File: modules/lfs/client_test.go -> modules/lfs/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: func TestNewClient(t *testing.T) {",
          "15:  u, _ := url.Parse(\"file:///test\")",
          "17:  assert.IsType(t, &FilesystemClient{}, c)",
          "19:  u, _ = url.Parse(\"https://test.com/lfs\")",
          "21:  assert.IsType(t, &HTTPClient{}, c)",
          "22: }",
          "",
          "[Removed Lines]",
          "16:  c := NewClient(u, true)",
          "20:  c = NewClient(u, true)",
          "",
          "[Added Lines]",
          "16:  c := NewClient(u, nil)",
          "20:  c = NewClient(u, nil)",
          "",
          "---------------"
        ],
        "modules/lfs/http_client.go||modules/lfs/http_client.go": [
          "File: modules/lfs/http_client.go -> modules/lfs/http_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"bytes\"",
          "9:  \"context\"",
          "11:  \"errors\"",
          "12:  \"fmt\"",
          "13:  \"net/http\"",
          "",
          "[Removed Lines]",
          "10:  \"crypto/tls\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  return batchSize",
          "35: }",
          "38:  hc := &http.Client{",
          "43:  }",
          "45:  client := &HTTPClient{",
          "",
          "[Removed Lines]",
          "37: func newHTTPClient(endpoint *url.URL, skipTLSVerify bool) *HTTPClient {",
          "39:   Transport: &http.Transport{",
          "40:    TLSClientConfig: &tls.Config{InsecureSkipVerify: skipTLSVerify},",
          "41:    Proxy:           proxy.Proxy(),",
          "42:   },",
          "",
          "[Added Lines]",
          "36: func newHTTPClient(endpoint *url.URL, httpTransport *http.Transport) *HTTPClient {",
          "37:  if httpTransport == nil {",
          "38:   httpTransport = &http.Transport{",
          "39:    Proxy: proxy.Proxy(),",
          "40:   }",
          "41:  }",
          "44:   Transport: httpTransport,",
          "",
          "---------------"
        ],
        "modules/matchlist/matchlist.go||modules/matchlist/matchlist.go": [
          "File: modules/matchlist/matchlist.go -> modules/matchlist/matchlist.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "modules/repository/repo.go||modules/repository/repo.go": [
          "File: modules/repository/repo.go -> modules/repository/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"context\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "12:  \"path\"",
          "13:  \"strings\"",
          "14:  \"time\"",
          "",
          "[Removed Lines]",
          "11:  \"net/url\"",
          "",
          "[Added Lines]",
          "11:  \"net/http\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: }",
          "50:  repoPath := models.RepoPath(u.Name, opts.RepoName)",
          "52:  if u.IsOrganization() {",
          "",
          "[Removed Lines]",
          "49: func MigrateRepositoryGitData(ctx context.Context, u *models.User, repo *models.Repository, opts migration.MigrateOptions) (*models.Repository, error) {",
          "",
          "[Added Lines]",
          "49: func MigrateRepositoryGitData(ctx context.Context, u *models.User,",
          "50:  repo *models.Repository, opts migration.MigrateOptions,",
          "51:  httpTransport *http.Transport,",
          "52: ) (*models.Repository, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:   }",
          "143:   if opts.LFS {",
          "146:     log.Error(\"Failed to store missing LFS objects for repository: %v\", err)",
          "147:    }",
          "148:   }",
          "",
          "[Removed Lines]",
          "144:    ep := lfs.DetermineEndpoint(opts.CloneAddr, opts.LFSEndpoint)",
          "145:    if err = StoreMissingLfsObjectsInRepository(ctx, repo, gitRepo, ep, setting.Migrations.SkipTLSVerify); err != nil {",
          "",
          "[Added Lines]",
          "147:    endpoint := lfs.DetermineEndpoint(opts.CloneAddr, opts.LFSEndpoint)",
          "148:    lfsClient := lfs.NewClient(endpoint, httpTransport)",
          "149:    if err = StoreMissingLfsObjectsInRepository(ctx, repo, gitRepo, lfsClient); err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336: }",
          "341:  contentStore := lfs.NewContentStore()",
          "343:  pointerChan := make(chan lfs.PointerBlob)",
          "",
          "[Removed Lines]",
          "339: func StoreMissingLfsObjectsInRepository(ctx context.Context, repo *models.Repository, gitRepo *git.Repository, endpoint *url.URL, skipTLSVerify bool) error {",
          "340:  client := lfs.NewClient(endpoint, skipTLSVerify)",
          "",
          "[Added Lines]",
          "343: func StoreMissingLfsObjectsInRepository(ctx context.Context, repo *models.Repository, gitRepo *git.Repository, lfsClient lfs.Client) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:  go lfs.SearchPointerBlobs(ctx, gitRepo, pointerChan, errChan)",
          "347:  downloadObjects := func(pointers []lfs.Pointer) error {",
          "349:    if objectError != nil {",
          "350:     return objectError",
          "351:    }",
          "",
          "[Removed Lines]",
          "348:   err := client.Download(ctx, pointers, func(p lfs.Pointer, content io.ReadCloser, objectError error) error {",
          "",
          "[Added Lines]",
          "351:   err := lfsClient.Download(ctx, pointers, func(p lfs.Pointer, content io.ReadCloser, objectError error) error {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "411:    }",
          "413:    batch = append(batch, pointerBlob.Pointer)",
          "415:     if err := downloadObjects(batch); err != nil {",
          "416:      return err",
          "417:     }",
          "",
          "[Removed Lines]",
          "414:    if len(batch) >= client.BatchSize() {",
          "",
          "[Added Lines]",
          "417:    if len(batch) >= lfsClient.BatchSize() {",
          "",
          "---------------"
        ],
        "modules/setting/migrations.go||modules/setting/migrations.go": [
          "File: modules/setting/migrations.go -> modules/setting/migrations.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: package setting",
          "11: var (",
          "13:  Migrations = struct {",
          "14:   MaxAttempts        int",
          "15:   RetryBackoff       int",
          "18:   AllowLocalNetworks bool",
          "19:   SkipTLSVerify      bool",
          "20:  }{",
          "",
          "[Removed Lines]",
          "7: import (",
          "8:  \"strings\"",
          "9: )",
          "16:   AllowedDomains     []string",
          "17:   BlockedDomains     []string",
          "",
          "[Added Lines]",
          "12:   AllowedDomains     string",
          "13:   BlockedDomains     string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  Migrations.MaxAttempts = sec.Key(\"MAX_ATTEMPTS\").MustInt(Migrations.MaxAttempts)",
          "29:  Migrations.RetryBackoff = sec.Key(\"RETRY_BACKOFF\").MustInt(Migrations.RetryBackoff)",
          "40:  Migrations.AllowLocalNetworks = sec.Key(\"ALLOW_LOCALNETWORKS\").MustBool(false)",
          "41:  Migrations.SkipTLSVerify = sec.Key(\"SKIP_TLS_VERIFY\").MustBool(false)",
          "42: }",
          "",
          "[Removed Lines]",
          "31:  Migrations.AllowedDomains = sec.Key(\"ALLOWED_DOMAINS\").Strings(\",\")",
          "32:  for i := range Migrations.AllowedDomains {",
          "33:   Migrations.AllowedDomains[i] = strings.ToLower(Migrations.AllowedDomains[i])",
          "34:  }",
          "35:  Migrations.BlockedDomains = sec.Key(\"BLOCKED_DOMAINS\").Strings(\",\")",
          "36:  for i := range Migrations.BlockedDomains {",
          "37:   Migrations.BlockedDomains[i] = strings.ToLower(Migrations.BlockedDomains[i])",
          "38:  }",
          "",
          "[Added Lines]",
          "27:  Migrations.AllowedDomains = sec.Key(\"ALLOWED_DOMAINS\").MustString(\"\")",
          "28:  Migrations.BlockedDomains = sec.Key(\"BLOCKED_DOMAINS\").MustString(\"\")",
          "",
          "---------------"
        ],
        "modules/setting/webhook.go||modules/setting/webhook.go": [
          "File: modules/setting/webhook.go -> modules/setting/webhook.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"net/url\"",
          "11:  \"code.gitea.io/gitea/modules/log\"",
          "12: )",
          "",
          "[Removed Lines]",
          "10:  \"code.gitea.io/gitea/modules/hostmatcher\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   QueueLength     int",
          "18:   DeliverTimeout  int",
          "19:   SkipTLSVerify   bool",
          "21:   Types           []string",
          "22:   PagingNum       int",
          "23:   ProxyURL        string",
          "",
          "[Removed Lines]",
          "20:   AllowedHostList *hostmatcher.HostMatchList",
          "",
          "[Added Lines]",
          "19:   AllowedHostList string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:  Webhook.QueueLength = sec.Key(\"QUEUE_LENGTH\").MustInt(1000)",
          "39:  Webhook.DeliverTimeout = sec.Key(\"DELIVER_TIMEOUT\").MustInt(5)",
          "40:  Webhook.SkipTLSVerify = sec.Key(\"SKIP_TLS_VERIFY\").MustBool()",
          "42:  Webhook.Types = []string{\"gitea\", \"gogs\", \"slack\", \"discord\", \"dingtalk\", \"telegram\", \"msteams\", \"feishu\", \"matrix\", \"wechatwork\"}",
          "43:  Webhook.PagingNum = sec.Key(\"PAGING_NUM\").MustInt(10)",
          "44:  Webhook.ProxyURL = sec.Key(\"PROXY_URL\").MustString(\"\")",
          "",
          "[Removed Lines]",
          "41:  Webhook.AllowedHostList = hostmatcher.ParseHostMatchList(sec.Key(\"ALLOWED_HOST_LIST\").MustString(hostmatcher.MatchBuiltinExternal))",
          "",
          "[Added Lines]",
          "40:  Webhook.AllowedHostList = sec.Key(\"ALLOWED_HOST_LIST\").MustString(\"\")",
          "",
          "---------------"
        ],
        "routers/api/v1/repo/migrate.go||routers/api/v1/repo/migrate.go": [
          "File: routers/api/v1/repo/migrate.go -> routers/api/v1/repo/migrate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   case addrErr.IsPermissionDenied:",
          "254:    if addrErr.LocalPath {",
          "255:     ctx.Error(http.StatusUnprocessableEntity, \"\", \"You are not allowed to import local repositories.\")",
          "258:    } else {",
          "260:    }",
          "261:   case addrErr.IsInvalidPath:",
          "262:    ctx.Error(http.StatusUnprocessableEntity, \"\", \"Invalid local path, it does not exist or not a directory.\")",
          "",
          "[Removed Lines]",
          "256:    } else if len(addrErr.PrivateNet) == 0 {",
          "257:     ctx.Error(http.StatusUnprocessableEntity, \"\", \"You are not allowed to import from blocked hosts.\")",
          "259:     ctx.Error(http.StatusUnprocessableEntity, \"\", \"You are not allowed to import from private IPs.\")",
          "",
          "[Added Lines]",
          "257:     ctx.Error(http.StatusUnprocessableEntity, \"\", \"You can not import from disallowed hosts.\")",
          "",
          "---------------"
        ],
        "routers/web/repo/migrate.go||routers/web/repo/migrate.go": [
          "File: routers/web/repo/migrate.go -> routers/web/repo/migrate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   case addrErr.IsPermissionDenied:",
          "129:    if addrErr.LocalPath {",
          "130:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied\"), tpl, form)",
          "133:    } else {",
          "135:    }",
          "136:   case addrErr.IsInvalidPath:",
          "137:    ctx.RenderWithErr(ctx.Tr(\"repo.migrate.invalid_local_path\"), tpl, form)",
          "",
          "[Removed Lines]",
          "131:    } else if len(addrErr.PrivateNet) == 0 {",
          "132:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied_blocked\"), tpl, form)",
          "134:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied_private_ip\"), tpl, form)",
          "",
          "[Added Lines]",
          "132:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied_blocked\"), tpl, form)",
          "",
          "---------------"
        ],
        "routers/web/repo/setting.go||routers/web/repo/setting.go": [
          "File: routers/web/repo/setting.go -> routers/web/repo/setting.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "750:   case addrErr.IsPermissionDenied:",
          "751:    if addrErr.LocalPath {",
          "752:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied\"), tplSettingsOptions, form)",
          "755:    } else {",
          "757:    }",
          "758:   case addrErr.IsInvalidPath:",
          "759:    ctx.RenderWithErr(ctx.Tr(\"repo.migrate.invalid_local_path\"), tplSettingsOptions, form)",
          "",
          "[Removed Lines]",
          "753:    } else if len(addrErr.PrivateNet) == 0 {",
          "754:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied_blocked\"), tplSettingsOptions, form)",
          "756:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied_private_ip\"), tplSettingsOptions, form)",
          "",
          "[Added Lines]",
          "754:     ctx.RenderWithErr(ctx.Tr(\"repo.migrate.permission_denied_blocked\"), tplSettingsOptions, form)",
          "",
          "---------------"
        ],
        "services/migrations/gitea_downloader.go||services/migrations/gitea_downloader.go": [
          "File: services/migrations/gitea_downloader.go -> services/migrations/gitea_downloader.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"context\"",
          "10:  \"errors\"",
          "11:  \"fmt\"",
          "12:  \"io\"",
          "",
          "[Removed Lines]",
          "9:  \"crypto/tls\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:  admin_model \"code.gitea.io/gitea/models/admin\"",
          "19:  \"code.gitea.io/gitea/modules/log\"",
          "20:  base \"code.gitea.io/gitea/modules/migration\"",
          "23:  \"code.gitea.io/gitea/modules/structs\"",
          "25:  gitea_sdk \"code.gitea.io/sdk/gitea\"",
          "",
          "[Removed Lines]",
          "21:  \"code.gitea.io/gitea/modules/proxy\"",
          "22:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   gitea_sdk.SetToken(token),",
          "91:   gitea_sdk.SetBasicAuth(username, password),",
          "92:   gitea_sdk.SetContext(ctx),",
          "99:  )",
          "100:  if err != nil {",
          "101:   log.Error(fmt.Sprintf(\"Failed to create NewGiteaDownloader for: %s. Error: %v\", baseURL, err))",
          "",
          "[Removed Lines]",
          "93:   gitea_sdk.SetHTTPClient(&http.Client{",
          "94:    Transport: &http.Transport{",
          "95:     TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "96:     Proxy:           proxy.Proxy(),",
          "97:    },",
          "98:   }),",
          "",
          "[Added Lines]",
          "90:   gitea_sdk.SetHTTPClient(NewMigrationHTTPClient()),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:   Created:         rel.CreatedAt,",
          "276:  }",
          "285:  for _, asset := range rel.Attachments {",
          "286:   size := int(asset.Size)",
          "",
          "[Removed Lines]",
          "278:  httpClient := &http.Client{",
          "279:   Transport: &http.Transport{",
          "280:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "281:    Proxy:           proxy.Proxy(),",
          "282:   },",
          "283:  }",
          "",
          "[Added Lines]",
          "270:  httpClient := NewMigrationHTTPClient()",
          "",
          "---------------"
        ],
        "services/migrations/gitea_uploader.go||services/migrations/gitea_uploader.go": [
          "File: services/migrations/gitea_uploader.go -> services/migrations/gitea_uploader.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:   Wiki:           opts.Wiki,",
          "126:   Releases:       opts.Releases, // if didn't get releases, then sync them from tags",
          "127:   MirrorInterval: opts.MirrorInterval,",
          "130:  g.repo = r",
          "131:  if err != nil {",
          "",
          "[Removed Lines]",
          "128:  })",
          "",
          "[Added Lines]",
          "128:  }, NewMigrationHTTPTransport())",
          "",
          "---------------"
        ],
        "services/migrations/github.go||services/migrations/github.go": [
          "File: services/migrations/github.go -> services/migrations/github.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import (",
          "9:  \"context\"",
          "11:  \"fmt\"",
          "12:  \"io\"",
          "13:  \"net/http\"",
          "",
          "[Removed Lines]",
          "10:  \"crypto/tls\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  \"code.gitea.io/gitea/modules/log\"",
          "20:  base \"code.gitea.io/gitea/modules/migration\"",
          "21:  \"code.gitea.io/gitea/modules/proxy\"",
          "23:  \"code.gitea.io/gitea/modules/structs\"",
          "24:  \"code.gitea.io/gitea/modules/util\"",
          "",
          "[Removed Lines]",
          "22:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:    )",
          "101:    var client = &http.Client{",
          "102:     Transport: &oauth2.Transport{",
          "109:      Source: oauth2.ReuseTokenSource(nil, ts),",
          "110:     },",
          "111:    }",
          "",
          "[Removed Lines]",
          "103:      Base: &http.Transport{",
          "104:       TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "105:       Proxy: func(req *http.Request) (*url.URL, error) {",
          "106:        return proxy.Proxy()(req)",
          "107:       },",
          "108:      },",
          "",
          "[Added Lines]",
          "101:      Base:   NewMigrationHTTPTransport(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:    downloader.addClient(client, baseURL)",
          "114:   }",
          "115:  } else {",
          "116:   var client = &http.Client{",
          "124:   }",
          "125:   downloader.addClient(client, baseURL)",
          "126:  }",
          "",
          "[Removed Lines]",
          "117:    Transport: &http.Transport{",
          "118:     TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "119:     Proxy: func(req *http.Request) (*url.URL, error) {",
          "120:      req.SetBasicAuth(userName, password)",
          "121:      return proxy.Proxy()(req)",
          "122:     },",
          "123:    },",
          "",
          "[Added Lines]",
          "109:   var transport = NewMigrationHTTPTransport()",
          "110:   transport.Proxy = func(req *http.Request) (*url.URL, error) {",
          "111:    req.SetBasicAuth(userName, password)",
          "112:    return proxy.Proxy()(req)",
          "113:   }",
          "115:    Transport: transport,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "316:   r.Published = rel.PublishedAt.Time",
          "317:  }",
          "326:  for _, asset := range rel.Assets {",
          "327:   var assetID = *asset.ID // Don't optimize this, for closure we need a local variable",
          "",
          "[Removed Lines]",
          "319:  httpClient := &http.Client{",
          "320:   Transport: &http.Transport{",
          "321:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "322:    Proxy:           proxy.Proxy(),",
          "323:   },",
          "324:  }",
          "",
          "[Added Lines]",
          "311:  httpClient := NewMigrationHTTPClient()",
          "",
          "---------------"
        ],
        "services/migrations/gitlab.go||services/migrations/gitlab.go": [
          "File: services/migrations/gitlab.go -> services/migrations/gitlab.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"context\"",
          "10:  \"errors\"",
          "11:  \"fmt\"",
          "12:  \"io\"",
          "",
          "[Removed Lines]",
          "9:  \"crypto/tls\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  \"code.gitea.io/gitea/modules/log\"",
          "20:  base \"code.gitea.io/gitea/modules/migration\"",
          "23:  \"code.gitea.io/gitea/modules/structs\"",
          "25:  \"github.com/xanzy/go-gitlab\"",
          "",
          "[Removed Lines]",
          "21:  \"code.gitea.io/gitea/modules/proxy\"",
          "22:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79: func NewGitlabDownloader(ctx context.Context, baseURL, repoPath, username, password, token string) (*GitlabDownloader, error) {",
          "88:  if token == \"\" && password != \"\" {",
          "90:  }",
          "92:  if err != nil {",
          "",
          "[Removed Lines]",
          "80:  gitlabClient, err := gitlab.NewClient(token, gitlab.WithBaseURL(baseURL), gitlab.WithHTTPClient(&http.Client{",
          "81:   Transport: &http.Transport{",
          "82:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "83:    Proxy:           proxy.Proxy(),",
          "84:   },",
          "85:  }))",
          "89:   gitlabClient, err = gitlab.NewBasicAuthClient(username, password, gitlab.WithBaseURL(baseURL))",
          "",
          "[Added Lines]",
          "77:  gitlabClient, err := gitlab.NewClient(token, gitlab.WithBaseURL(baseURL), gitlab.WithHTTPClient(NewMigrationHTTPClient()))",
          "81:   gitlabClient, err = gitlab.NewBasicAuthClient(username, password, gitlab.WithBaseURL(baseURL), gitlab.WithHTTPClient(NewMigrationHTTPClient()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:   PublisherName:   rel.Author.Username,",
          "301:  }",
          "310:  for k, asset := range rel.Assets.Links {",
          "311:   r.Assets = append(r.Assets, &base.ReleaseAsset{",
          "",
          "[Removed Lines]",
          "303:  httpClient := &http.Client{",
          "304:   Transport: &http.Transport{",
          "305:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "306:    Proxy:           proxy.Proxy(),",
          "307:   },",
          "308:  }",
          "",
          "[Added Lines]",
          "295:  httpClient := NewMigrationHTTPClient()",
          "",
          "---------------"
        ],
        "services/migrations/gogs.go||services/migrations/gogs.go": [
          "File: services/migrations/gogs.go -> services/migrations/gogs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"context\"",
          "10:  \"fmt\"",
          "11:  \"net/http\"",
          "12:  \"net/url\"",
          "",
          "[Removed Lines]",
          "9:  \"crypto/tls\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:  \"code.gitea.io/gitea/modules/log\"",
          "17:  base \"code.gitea.io/gitea/modules/migration\"",
          "18:  \"code.gitea.io/gitea/modules/proxy\"",
          "20:  \"code.gitea.io/gitea/modules/structs\"",
          "22:  \"github.com/gogs/go-gogs-client\"",
          "",
          "[Removed Lines]",
          "19:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:   client = gogs.NewClient(baseURL, token)",
          "98:   downloader.userName = token",
          "99:  } else {",
          "106:   }",
          "108:   client = gogs.NewClient(baseURL, \"\")",
          "109:   client.SetHTTPClient(&http.Client{",
          "",
          "[Removed Lines]",
          "100:   downloader.transport = &http.Transport{",
          "101:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "102:    Proxy: func(req *http.Request) (*url.URL, error) {",
          "103:     req.SetBasicAuth(userName, password)",
          "104:     return proxy.Proxy()(req)",
          "105:    },",
          "",
          "[Added Lines]",
          "98:   var transport = NewMigrationHTTPTransport()",
          "99:   transport.Proxy = func(req *http.Request) (*url.URL, error) {",
          "100:    req.SetBasicAuth(userName, password)",
          "101:    return proxy.Proxy()(req)",
          "103:   downloader.transport = transport",
          "",
          "---------------"
        ],
        "services/migrations/http_client.go||services/migrations/http_client.go": [
          "File: services/migrations/http_client.go -> services/migrations/http_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package migrations",
          "7: import (",
          "8:  \"crypto/tls\"",
          "9:  \"net/http\"",
          "11:  \"code.gitea.io/gitea/modules/hostmatcher\"",
          "12:  \"code.gitea.io/gitea/modules/proxy\"",
          "13:  \"code.gitea.io/gitea/modules/setting\"",
          "14: )",
          "17: func NewMigrationHTTPClient() *http.Client {",
          "18:  return &http.Client{",
          "19:   Transport: NewMigrationHTTPTransport(),",
          "20:  }",
          "21: }",
          "24: func NewMigrationHTTPTransport() *http.Transport {",
          "25:  return &http.Transport{",
          "26:   TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Migrations.SkipTLSVerify},",
          "27:   Proxy:           proxy.Proxy(),",
          "28:   DialContext:     hostmatcher.NewDialContext(\"migration\", allowList, blockList),",
          "29:  }",
          "30: }",
          "",
          "---------------"
        ],
        "services/migrations/migrate.go||services/migrations/migrate.go": [
          "File: services/migrations/migrate.go -> services/migrations/migrate.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"code.gitea.io/gitea/models\"",
          "17:  admin_model \"code.gitea.io/gitea/models/admin\"",
          "18:  \"code.gitea.io/gitea/modules/log\"",
          "20:  base \"code.gitea.io/gitea/modules/migration\"",
          "21:  \"code.gitea.io/gitea/modules/setting\"",
          "22:  \"code.gitea.io/gitea/modules/util\"",
          "",
          "[Removed Lines]",
          "19:  \"code.gitea.io/gitea/modules/matchlist\"",
          "",
          "[Added Lines]",
          "18:  \"code.gitea.io/gitea/modules/hostmatcher\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: var (",
          "29:  factories []base.DownloaderFactory",
          "33: )",
          "",
          "[Removed Lines]",
          "31:  allowList *matchlist.Matchlist",
          "32:  blockList *matchlist.Matchlist",
          "",
          "[Added Lines]",
          "31:  allowList *hostmatcher.HostMatchList",
          "32:  blockList *hostmatcher.HostMatchList",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   return &models.ErrInvalidCloneAddr{Host: u.Host, IsProtocolInvalid: true, IsPermissionDenied: true, IsURLError: true}",
          "74:  }",
          "85:  }",
          "96:   }",
          "97:  }",
          "100: }",
          "",
          "[Removed Lines]",
          "76:  host := strings.ToLower(u.Host)",
          "77:  if len(setting.Migrations.AllowedDomains) > 0 {",
          "78:   if !allowList.Match(host) {",
          "79:    return &models.ErrInvalidCloneAddr{Host: u.Host, IsPermissionDenied: true}",
          "80:   }",
          "81:  } else {",
          "82:   if blockList.Match(host) {",
          "83:    return &models.ErrInvalidCloneAddr{Host: u.Host, IsPermissionDenied: true}",
          "84:   }",
          "87:  if !setting.Migrations.AllowLocalNetworks {",
          "88:   addrList, err := net.LookupIP(strings.Split(u.Host, \":\")[0])",
          "89:   if err != nil {",
          "90:    return &models.ErrInvalidCloneAddr{Host: u.Host, NotResolvedIP: true}",
          "91:   }",
          "92:   for _, addr := range addrList {",
          "93:    if util.IsIPPrivate(addr) || !addr.IsGlobalUnicast() {",
          "94:     return &models.ErrInvalidCloneAddr{Host: u.Host, PrivateNet: addr.String(), IsPermissionDenied: true}",
          "95:    }",
          "99:  return nil",
          "",
          "[Added Lines]",
          "76:  hostName, _, err := net.SplitHostPort(u.Host)",
          "77:  if err != nil {",
          "79:   err = nil //nolint",
          "80:   hostName = u.Host",
          "81:  }",
          "82:  addrList, err := net.LookupIP(hostName)",
          "83:  if err != nil {",
          "84:   return &models.ErrInvalidCloneAddr{Host: u.Host, NotResolvedIP: true}",
          "87:  var ipAllowed bool",
          "88:  var ipBlocked bool",
          "89:  for _, addr := range addrList {",
          "90:   ipAllowed = ipAllowed || allowList.MatchIPAddr(addr)",
          "91:   ipBlocked = ipBlocked || blockList.MatchIPAddr(addr)",
          "92:  }",
          "93:  var blockedError error",
          "94:  if blockList.MatchHostName(hostName) || ipBlocked {",
          "95:   blockedError = &models.ErrInvalidCloneAddr{Host: u.Host, IsPermissionDenied: true}",
          "96:  }",
          "98:  if !allowList.IsEmpty() {",
          "99:   if !allowList.MatchHostName(hostName) && !ipAllowed {",
          "100:    return &models.ErrInvalidCloneAddr{Host: u.Host, IsPermissionDenied: true}",
          "104:  return blockedError",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "464: func Init() error {",
          "476:  return nil",
          "477: }",
          "",
          "[Removed Lines]",
          "465:  var err error",
          "466:  allowList, err = matchlist.NewMatchlist(setting.Migrations.AllowedDomains...)",
          "467:  if err != nil {",
          "468:   return fmt.Errorf(\"init migration allowList domains failed: %v\", err)",
          "469:  }",
          "471:  blockList, err = matchlist.NewMatchlist(setting.Migrations.BlockedDomains...)",
          "472:  if err != nil {",
          "473:   return fmt.Errorf(\"init migration blockList domains failed: %v\", err)",
          "474:  }",
          "",
          "[Added Lines]",
          "472:  blockList = hostmatcher.ParseSimpleMatchList(\"migrations.BLOCKED_DOMAINS\", setting.Migrations.BlockedDomains)",
          "474:  allowList = hostmatcher.ParseSimpleMatchList(\"migrations.ALLOWED_DOMAINS/ALLOW_LOCALNETWORKS\", setting.Migrations.AllowedDomains)",
          "475:  if allowList.IsEmpty() {",
          "477:   allowList.AppendBuiltin(hostmatcher.MatchBuiltinExternal)",
          "478:  }",
          "479:  if setting.Migrations.AllowLocalNetworks {",
          "480:   allowList.AppendBuiltin(hostmatcher.MatchBuiltinPrivate)",
          "481:   allowList.AppendBuiltin(hostmatcher.MatchBuiltinLoopback)",
          "482:  }",
          "",
          "---------------"
        ],
        "services/migrations/migrate_test.go||services/migrations/migrate_test.go": [
          "File: services/migrations/migrate_test.go -> services/migrations/migrate_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  adminUser := unittest.AssertExistsAndLoadBean(t, &models.User{Name: \"user1\"}).(*models.User)",
          "22:  nonAdminUser := unittest.AssertExistsAndLoadBean(t, &models.User{Name: \"user2\"}).(*models.User)",
          "25:  assert.NoError(t, Init())",
          "27:  err := IsMigrateURLAllowed(\"https://gitlab.com/gitlab/gitlab.git\", nonAdminUser)",
          "",
          "[Removed Lines]",
          "24:  setting.Migrations.AllowedDomains = []string{\"github.com\"}",
          "",
          "[Added Lines]",
          "24:  setting.Migrations.AllowedDomains = \"github.com\"",
          "25:  setting.Migrations.AllowLocalNetworks = false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  err = IsMigrateURLAllowed(\"https://gITHUb.com/go-gitea/gitea.git\", nonAdminUser)",
          "34:  assert.NoError(t, err)",
          "38:  assert.NoError(t, Init())",
          "40:  err = IsMigrateURLAllowed(\"https://gitlab.com/gitlab/gitlab.git\", nonAdminUser)",
          "",
          "[Removed Lines]",
          "36:  setting.Migrations.AllowedDomains = []string{}",
          "37:  setting.Migrations.BlockedDomains = []string{\"github.com\"}",
          "",
          "[Added Lines]",
          "37:  setting.Migrations.AllowedDomains = \"\"",
          "38:  setting.Migrations.BlockedDomains = \"github.com\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:  assert.Error(t, err)",
          "49:  setting.Migrations.AllowLocalNetworks = true",
          "50:  err = IsMigrateURLAllowed(\"https://10.0.0.1/go-gitea/gitea.git\", nonAdminUser)",
          "51:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:  assert.NoError(t, Init())",
          "",
          "---------------"
        ],
        "services/mirror/mirror_pull.go||services/mirror/mirror_pull.go": [
          "File: services/mirror/mirror_pull.go -> services/mirror/mirror_pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:  if m.LFS && setting.LFS.StartServer {",
          "263:   log.Trace(\"SyncMirrors [repo: %-v]: syncing LFS objects...\", m.Repo)",
          "266:    log.Error(\"Failed to synchronize LFS objects for repository: %v\", err)",
          "267:   }",
          "268:  }",
          "",
          "[Removed Lines]",
          "264:   ep := lfs.DetermineEndpoint(remoteAddr.String(), m.LFSEndpoint)",
          "265:   if err = repo_module.StoreMissingLfsObjectsInRepository(ctx, m.Repo, gitRepo, ep, false); err != nil {",
          "",
          "[Added Lines]",
          "264:   endpoint := lfs.DetermineEndpoint(remoteAddr.String(), m.LFSEndpoint)",
          "265:   lfsClient := lfs.NewClient(endpoint, nil)",
          "266:   if err = repo_module.StoreMissingLfsObjectsInRepository(ctx, m.Repo, gitRepo, lfsClient); err != nil {",
          "",
          "---------------"
        ],
        "services/mirror/mirror_push.go||services/mirror/mirror_push.go": [
          "File: services/mirror/mirror_push.go -> services/mirror/mirror_push.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"context\"",
          "9:  \"errors\"",
          "10:  \"io\"",
          "12:  \"regexp\"",
          "13:  \"time\"",
          "",
          "[Removed Lines]",
          "11:  \"net/url\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:    }",
          "134:    defer gitRepo.Close()",
          "138:     return util.NewURLSanitizedError(err, remoteAddr, true)",
          "139:    }",
          "140:   }",
          "",
          "[Removed Lines]",
          "136:    ep := lfs.DetermineEndpoint(remoteAddr.String(), \"\")",
          "137:    if err := pushAllLFSObjects(ctx, gitRepo, ep, false); err != nil {",
          "",
          "[Added Lines]",
          "135:    endpoint := lfs.DetermineEndpoint(remoteAddr.String(), \"\")",
          "136:    lfsClient := lfs.NewClient(endpoint, nil)",
          "137:    if err := pushAllLFSObjects(ctx, gitRepo, lfsClient); err != nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:  return nil",
          "177: }",
          "181:  contentStore := lfs.NewContentStore()",
          "183:  pointerChan := make(chan lfs.PointerBlob)",
          "",
          "[Removed Lines]",
          "179: func pushAllLFSObjects(ctx context.Context, gitRepo *git.Repository, endpoint *url.URL, skipTLSVerify bool) error {",
          "180:  client := lfs.NewClient(endpoint, skipTLSVerify)",
          "",
          "[Added Lines]",
          "179: func pushAllLFSObjects(ctx context.Context, gitRepo *git.Repository, lfsClient lfs.Client) error {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:  go lfs.SearchPointerBlobs(ctx, gitRepo, pointerChan, errChan)",
          "187:  uploadObjects := func(pointers []lfs.Pointer) error {",
          "189:    if objectError != nil {",
          "190:     return nil, objectError",
          "191:    }",
          "",
          "[Removed Lines]",
          "188:   err := client.Upload(ctx, pointers, func(p lfs.Pointer, objectError error) (io.ReadCloser, error) {",
          "",
          "[Added Lines]",
          "187:   err := lfsClient.Upload(ctx, pointers, func(p lfs.Pointer, objectError error) (io.ReadCloser, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:   }",
          "221:   batch = append(batch, pointerBlob.Pointer)",
          "223:    if err := uploadObjects(batch); err != nil {",
          "224:     return err",
          "225:    }",
          "",
          "[Removed Lines]",
          "222:   if len(batch) >= client.BatchSize() {",
          "",
          "[Added Lines]",
          "221:   if len(batch) >= lfsClient.BatchSize() {",
          "",
          "---------------"
        ],
        "services/webhook/deliver.go||services/webhook/deliver.go": [
          "File: services/webhook/deliver.go -> services/webhook/deliver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"encoding/hex\"",
          "14:  \"fmt\"",
          "15:  \"io\"",
          "17:  \"net/http\"",
          "18:  \"net/url\"",
          "19:  \"strconv\"",
          "20:  \"strings\"",
          "21:  \"sync\"",
          "23:  \"time\"",
          "25:  webhook_model \"code.gitea.io/gitea/models/webhook\"",
          "26:  \"code.gitea.io/gitea/modules/graceful\"",
          "27:  \"code.gitea.io/gitea/modules/log\"",
          "28:  \"code.gitea.io/gitea/modules/proxy\"",
          "29:  \"code.gitea.io/gitea/modules/setting\"",
          "",
          "[Removed Lines]",
          "16:  \"net\"",
          "22:  \"syscall\"",
          "",
          "[Added Lines]",
          "25:  \"code.gitea.io/gitea/modules/hostmatcher\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:  \"github.com/gobwas/glob\"",
          "32: )",
          "37: func Deliver(t *webhook_model.HookTask) error {",
          "38:  w, err := webhook_model.GetWebhookByID(t.HookID)",
          "",
          "[Removed Lines]",
          "34: var contextKeyWebhookRequest interface{} = \"contextKeyWebhookRequest\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     return err",
          "99:    }",
          "100:   default:",
          "102:   }",
          "103:  default:",
          "105:  }",
          "107:  var signatureSHA1 string",
          "",
          "[Removed Lines]",
          "101:    return fmt.Errorf(\"Invalid http method for webhook: [%d] %v\", t.ID, w.HTTPMethod)",
          "104:   return fmt.Errorf(\"Invalid http method for webhook: [%d] %v\", t.ID, w.HTTPMethod)",
          "",
          "[Added Lines]",
          "98:    return fmt.Errorf(\"invalid http method for webhook: [%d] %v\", t.ID, w.HTTPMethod)",
          "101:   return fmt.Errorf(\"invalid http method for webhook: [%d] %v\", t.ID, w.HTTPMethod)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:  }()",
          "174:  if setting.DisableWebhooks {",
          "176:  }",
          "179:  if err != nil {",
          "180:   t.ResponseInfo.Body = fmt.Sprintf(\"Delivery: %v\", err)",
          "181:   return err",
          "",
          "[Removed Lines]",
          "175:   return fmt.Errorf(\"Webhook task skipped (webhooks disabled): [%d]\", t.ID)",
          "178:  resp, err := webhookHTTPClient.Do(req.WithContext(context.WithValue(req.Context(), contextKeyWebhookRequest, req)))",
          "",
          "[Added Lines]",
          "172:   return fmt.Errorf(\"webhook task skipped (webhooks disabled): [%d]\", t.ID)",
          "175:  resp, err := webhookHTTPClient.Do(req.WithContext(graceful.GetManager().ShutdownContext()))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296: func InitDeliverHooks() {",
          "297:  timeout := time.Duration(setting.Webhook.DeliverTimeout) * time.Second",
          "299:  webhookHTTPClient = &http.Client{",
          "300:   Timeout: timeout,",
          "301:   Transport: &http.Transport{",
          "302:    TLSClientConfig: &tls.Config{InsecureSkipVerify: setting.Webhook.SkipTLSVerify},",
          "303:    Proxy:           webhookProxy(),",
          "322:   },",
          "323:  }",
          "",
          "[Removed Lines]",
          "304:    DialContext: func(ctx context.Context, network, addrOrHost string) (net.Conn, error) {",
          "305:     dialer := net.Dialer{",
          "306:      Timeout: timeout,",
          "307:      Control: func(network, ipAddr string, c syscall.RawConn) error {",
          "309:       tcpAddr, err := net.ResolveTCPAddr(network, ipAddr)",
          "310:       req := ctx.Value(contextKeyWebhookRequest).(*http.Request)",
          "311:       if err != nil {",
          "312:        return fmt.Errorf(\"webhook can only call HTTP servers via TCP, deny '%s(%s:%s)', err=%v\", req.Host, network, ipAddr, err)",
          "313:       }",
          "314:       if !setting.Webhook.AllowedHostList.MatchesHostOrIP(req.Host, tcpAddr.IP) {",
          "315:        return fmt.Errorf(\"webhook can only call allowed HTTP servers (check your webhook.ALLOWED_HOST_LIST setting), deny '%s(%s)'\", req.Host, ipAddr)",
          "316:       }",
          "317:       return nil",
          "318:      },",
          "319:     }",
          "320:     return dialer.DialContext(ctx, network, addrOrHost)",
          "321:    },",
          "",
          "[Added Lines]",
          "296:  allowedHostListValue := setting.Webhook.AllowedHostList",
          "297:  if allowedHostListValue == \"\" {",
          "298:   allowedHostListValue = hostmatcher.MatchBuiltinExternal",
          "299:  }",
          "300:  allowedHostMatcher := hostmatcher.ParseHostMatchList(\"webhook.ALLOWED_HOST_LIST\", allowedHostListValue)",
          "307:    DialContext:     hostmatcher.NewDialContext(\"webhook\", allowedHostMatcher, nil),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed1d95c55dfa91d1c9a486bfb8e00375d4038e29",
      "candidate_info": {
        "commit_hash": "ed1d95c55dfa91d1c9a486bfb8e00375d4038e29",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/ed1d95c55dfa91d1c9a486bfb8e00375d4038e29",
        "files": [
          ".drone.yml",
          ".golangci.yml",
          "Dockerfile",
          "Dockerfile.rootless",
          "Makefile",
          "README.md",
          "docs/config.yaml",
          "go.mod",
          "modules/util/net.go",
          "modules/util/net_test.go"
        ],
        "message": "use go1.18 to build gitea (#19099)\n\n* use go1.18 to build gitea& update min go version to 1.17\n\n* bump in a few more places\n\n* add a few simple tests for isipprivate\n\n* update go.mod\n\n* update URL to https://go.dev/dl/\n\n* golangci-lint\n\n* attempt golangci-lint workaround\n\n* change version\n\n* bump fumpt version\n\n* skip strings.title test\n\n* go mod tidy\n\n* update tests as some aren't private??\n\n* update tests",
        "before_after_code_files": [
          "Dockerfile.rootless||Dockerfile.rootless",
          "go.mod||go.mod",
          "modules/util/net.go||modules/util/net.go",
          "modules/util/net_test.go||modules/util/net_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/util/net.go||modules/util/net.go"
          ],
          "candidate": [
            "modules/util/net.go||modules/util/net.go"
          ]
        }
      },
      "candidate_diff": {
        "Dockerfile.rootless||Dockerfile.rootless": [
          "File: Dockerfile.rootless -> Dockerfile.rootless",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #Build stage",
          "4: ARG GOPROXY",
          "5: ENV GOPROXY ${GOPROXY:-direct}",
          "",
          "[Removed Lines]",
          "2: FROM golang:1.17-alpine3.15 AS build-env",
          "",
          "[Added Lines]",
          "2: FROM golang:1.18-alpine3.15 AS build-env",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  gitea.com/go-chi/session v0.0.0-20211218221615-e3605d8b28b8",
          "12:  gitea.com/lunny/levelqueue v0.4.1",
          "13:  github.com/42wim/sshsig v0.0.0-20211121163825-841cf5bbc121",
          "16:  github.com/NYTimes/gziphandler v1.1.1",
          "18:  github.com/PuerkitoBio/goquery v1.8.0",
          "19:  github.com/alecthomas/chroma v0.10.0",
          "22:  github.com/blevesearch/bleve/v2 v2.3.1",
          "25:  github.com/caddyserver/certmagic v0.15.4",
          "26:  github.com/chi-middleware/proxy v1.1.1",
          "30:  github.com/denisenkom/go-mssqldb v0.12.0",
          "31:  github.com/djherbis/buffer v1.2.0",
          "32:  github.com/djherbis/nio/v3 v3.0.1",
          "",
          "[Removed Lines]",
          "14:  github.com/Azure/go-ntlmssp v0.0.0-20211209120228-48547f28849e // indirect",
          "15:  github.com/Microsoft/go-winio v0.5.2 // indirect",
          "17:  github.com/ProtonMail/go-crypto v0.0.0-20220113124808-70ae35bab23f // indirect",
          "20:  github.com/andybalholm/brotli v1.0.4 // indirect",
          "21:  github.com/bits-and-blooms/bitset v1.2.1 // indirect",
          "23:  github.com/boombuler/barcode v1.0.1 // indirect",
          "24:  github.com/bradfitz/gomemcache v0.0.0-20190913173617-a41fca850d0b // indirect",
          "27:  github.com/couchbase/go-couchbase v0.0.0-20210224140812-5740cd35f448 // indirect",
          "28:  github.com/couchbase/gomemcached v0.1.2 // indirect",
          "29:  github.com/couchbase/goutils v0.0.0-20210118111533-e33d3ffb5401 // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:  github.com/emirpasic/gods v1.12.0",
          "37:  github.com/ethantkoenig/rupture v1.0.1",
          "38:  github.com/gliderlabs/ssh v0.3.3",
          "40:  github.com/go-chi/chi/v5 v5.0.7",
          "41:  github.com/go-chi/cors v1.2.0",
          "42:  github.com/go-enry/go-enry/v2 v2.8.0",
          "",
          "[Removed Lines]",
          "39:  github.com/go-asn1-ber/asn1-ber v1.5.3 // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:  github.com/gogs/cron v0.0.0-20171120032916-9f6c956d3e14",
          "53:  github.com/gogs/go-gogs-client v0.0.0-20210131175652-1d7215cd8d85",
          "54:  github.com/golang-jwt/jwt/v4 v4.3.0",
          "57:  github.com/google/go-github/v39 v39.2.0",
          "58:  github.com/google/uuid v1.3.0",
          "59:  github.com/gorilla/feeds v1.1.1",
          "61:  github.com/gorilla/sessions v1.2.1",
          "63:  github.com/hashicorp/go-version v1.4.0",
          "64:  github.com/hashicorp/golang-lru v0.5.4",
          "65:  github.com/huandu/xstrings v1.3.2",
          "66:  github.com/jaytaylor/html2text v0.0.0-20211105163654-bc68cce691ba",
          "67:  github.com/json-iterator/go v1.1.12",
          "68:  github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51",
          "70:  github.com/keybase/go-crypto v0.0.0-20200123153347-de78d2cb44f4",
          "71:  github.com/klauspost/compress v1.15.0",
          "72:  github.com/klauspost/cpuid/v2 v2.0.11",
          "",
          "[Removed Lines]",
          "55:  github.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 // indirect",
          "56:  github.com/golang/snappy v0.0.4 // indirect",
          "60:  github.com/gorilla/mux v1.8.0 // indirect",
          "62:  github.com/hashicorp/go-retryablehttp v0.7.0 // indirect",
          "69:  github.com/kevinburke/ssh_config v1.1.0 // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:  github.com/lunny/dingtalk_webhook v0.0.0-20171025031554-e3534c89ef96",
          "75:  github.com/markbates/goth v1.69.0",
          "76:  github.com/mattn/go-isatty v0.0.14",
          "78:  github.com/mattn/go-sqlite3 v1.14.12",
          "80:  github.com/mholt/archiver/v3 v3.5.1",
          "81:  github.com/microcosm-cc/bluemonday v1.0.18",
          "84:  github.com/minio/minio-go/v7 v7.0.23",
          "87:  github.com/msteinert/pam v1.0.0",
          "88:  github.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646",
          "89:  github.com/niklasfasching/go-org v1.6.2",
          "91:  github.com/oliamb/cutter v0.2.2",
          "92:  github.com/olivere/elastic/v7 v7.0.31",
          "94:  github.com/pkg/errors v0.9.1",
          "95:  github.com/pquerna/otp v1.3.0",
          "96:  github.com/prometheus/client_golang v1.12.1",
          "97:  github.com/quasoft/websspi v1.1.2",
          "99:  github.com/santhosh-tekuri/jsonschema/v5 v5.0.0",
          "100:  github.com/sergi/go-diff v1.2.0",
          "102:  github.com/shurcooL/vfsgen v0.0.0-20200824052919-0d455de96546",
          "104:  github.com/stretchr/testify v1.7.0",
          "105:  github.com/syndtr/goleveldb v1.0.0",
          "106:  github.com/tstranex/u2f v1.0.0",
          "108:  github.com/unknwon/com v1.0.1",
          "109:  github.com/unknwon/i18n v0.0.0-20210904045753-ff3a8617e361",
          "110:  github.com/unknwon/paginater v0.0.0-20200328080006-042474bd0eae",
          "111:  github.com/unrolled/render v1.4.1",
          "112:  github.com/urfave/cli v1.22.5",
          "113:  github.com/xanzy/go-gitlab v0.58.0",
          "115:  github.com/yohcop/openid-go v1.0.0",
          "116:  github.com/yuin/goldmark v1.4.8",
          "117:  github.com/yuin/goldmark-highlighting v0.0.0-20220208100518-594be1970594",
          "118:  github.com/yuin/goldmark-meta v1.1.0",
          "120:  go.jolheiser.com/hcaptcha v0.0.4",
          "121:  go.jolheiser.com/pwn v0.0.3",
          "125:  golang.org/x/crypto v0.0.0-20220315160706-3147a52a75dd",
          "126:  golang.org/x/net v0.0.0-20220225172249-27dd8689420f",
          "127:  golang.org/x/oauth2 v0.0.0-20220223155221-ee480838109b",
          "128:  golang.org/x/sys v0.0.0-20220227234510-4e6760a101f9",
          "129:  golang.org/x/text v0.3.7",
          "131:  golang.org/x/tools v0.1.9",
          "133:  gopkg.in/gomail.v2 v2.0.0-20160411212932-81ebce5c23df",
          "134:  gopkg.in/ini.v1 v1.66.4",
          "135:  gopkg.in/yaml.v2 v2.4.0",
          "",
          "[Removed Lines]",
          "77:  github.com/mattn/go-runewidth v0.0.13 // indirect",
          "79:  github.com/mholt/acmez v1.0.2 // indirect",
          "82:  github.com/miekg/dns v1.1.46 // indirect",
          "83:  github.com/minio/md5-simd v1.1.2 // indirect",
          "85:  github.com/minio/sha256-simd v1.0.0 // indirect",
          "86:  github.com/mrjones/oauth v0.0.0-20190623134757-126b35219450 // indirect",
          "90:  github.com/nwaples/rardecode v1.1.3 // indirect",
          "93:  github.com/pierrec/lz4/v4 v4.1.14 // indirect",
          "98:  github.com/rs/xid v1.3.0 // indirect",
          "101:  github.com/shurcooL/httpfs v0.0.0-20190707220628-8d4bc4ba7749 // indirect",
          "103:  github.com/ssor/bom v0.0.0-20170718123548-6386211fdfcf // indirect",
          "107:  github.com/ulikunitz/xz v0.5.10 // indirect",
          "114:  github.com/xanzy/ssh-agent v0.3.1 // indirect",
          "119:  go.etcd.io/bbolt v1.3.6 // indirect",
          "122:  go.uber.org/atomic v1.9.0 // indirect",
          "123:  go.uber.org/multierr v1.8.0 // indirect",
          "124:  go.uber.org/zap v1.21.0 // indirect",
          "130:  golang.org/x/time v0.0.0-20220224211638-0e9765cccd65 // indirect",
          "132:  gopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:  xorm.io/xorm v1.2.5",
          "140: )",
          "142: replace github.com/hashicorp/go-version => github.com/6543/go-version v1.3.1",
          "144: replace github.com/markbates/goth v1.68.0 => github.com/zeripath/goth v1.68.1-0.20220109111530-754359885dce",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: require (",
          "108:  cloud.google.com/go v0.99.0 // indirect",
          "109:  github.com/Azure/go-ntlmssp v0.0.0-20211209120228-48547f28849e // indirect",
          "110:  github.com/Microsoft/go-winio v0.5.2 // indirect",
          "111:  github.com/ProtonMail/go-crypto v0.0.0-20220113124808-70ae35bab23f // indirect",
          "112:  github.com/PuerkitoBio/purell v1.1.1 // indirect",
          "113:  github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect",
          "114:  github.com/RoaringBitmap/roaring v0.9.4 // indirect",
          "115:  github.com/acomagu/bufpipe v1.0.3 // indirect",
          "116:  github.com/andybalholm/brotli v1.0.4 // indirect",
          "117:  github.com/andybalholm/cascadia v1.3.1 // indirect",
          "118:  github.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be // indirect",
          "119:  github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d // indirect",
          "120:  github.com/aymerick/douceur v0.2.0 // indirect",
          "121:  github.com/beorn7/perks v1.0.1 // indirect",
          "122:  github.com/bgentry/speakeasy v0.1.0 // indirect",
          "123:  github.com/bits-and-blooms/bitset v1.2.1 // indirect",
          "124:  github.com/blevesearch/bleve_index_api v1.0.1 // indirect",
          "125:  github.com/blevesearch/go-porterstemmer v1.0.3 // indirect",
          "126:  github.com/blevesearch/mmap-go v1.0.3 // indirect",
          "127:  github.com/blevesearch/scorch_segment_api/v2 v2.1.0 // indirect",
          "128:  github.com/blevesearch/segment v0.9.0 // indirect",
          "129:  github.com/blevesearch/snowballstem v0.9.0 // indirect",
          "130:  github.com/blevesearch/upsidedown_store_api v1.0.1 // indirect",
          "131:  github.com/blevesearch/vellum v1.0.7 // indirect",
          "132:  github.com/blevesearch/zapx/v11 v11.3.3 // indirect",
          "133:  github.com/blevesearch/zapx/v12 v12.3.3 // indirect",
          "134:  github.com/blevesearch/zapx/v13 v13.3.3 // indirect",
          "135:  github.com/blevesearch/zapx/v14 v14.3.3 // indirect",
          "136:  github.com/blevesearch/zapx/v15 v15.3.3 // indirect",
          "137:  github.com/boombuler/barcode v1.0.1 // indirect",
          "138:  github.com/bradfitz/gomemcache v0.0.0-20190913173617-a41fca850d0b // indirect",
          "139:  github.com/census-instrumentation/opencensus-proto v0.3.0 // indirect",
          "140:  github.com/cespare/xxhash/v2 v2.1.2 // indirect",
          "141:  github.com/cloudflare/cfssl v1.6.1 // indirect",
          "142:  github.com/cncf/udpa/go v0.0.0-20210930031921-04548b0d99d4 // indirect",
          "143:  github.com/cncf/xds/go v0.0.0-20211130200136-a8f946100490 // indirect",
          "144:  github.com/coreos/go-semver v0.3.0 // indirect",
          "145:  github.com/coreos/go-systemd/v22 v22.3.2 // indirect",
          "146:  github.com/couchbase/go-couchbase v0.0.0-20210224140812-5740cd35f448 // indirect",
          "147:  github.com/couchbase/gomemcached v0.1.2 // indirect",
          "148:  github.com/couchbase/goutils v0.0.0-20210118111533-e33d3ffb5401 // indirect",
          "149:  github.com/cpuguy83/go-md2man/v2 v2.0.1 // indirect",
          "150:  github.com/davecgh/go-spew v1.1.1 // indirect",
          "151:  github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect",
          "152:  github.com/dlclark/regexp2 v1.4.0 // indirect",
          "153:  github.com/dsnet/compress v0.0.2-0.20210315054119-f66993602bf5 // indirect",
          "154:  github.com/envoyproxy/go-control-plane v0.10.1 // indirect",
          "155:  github.com/envoyproxy/protoc-gen-validate v0.6.2 // indirect",
          "156:  github.com/felixge/httpsnoop v1.0.2 // indirect",
          "157:  github.com/form3tech-oss/jwt-go v3.2.3+incompatible // indirect",
          "158:  github.com/fsnotify/fsnotify v1.5.1 // indirect",
          "159:  github.com/fullstorydev/grpcurl v1.8.1 // indirect",
          "160:  github.com/fxamacker/cbor/v2 v2.4.0 // indirect",
          "161:  github.com/go-asn1-ber/asn1-ber v1.5.3 // indirect",
          "162:  github.com/go-enry/go-oniguruma v1.2.1 // indirect",
          "163:  github.com/go-git/gcfg v1.5.0 // indirect",
          "164:  github.com/go-openapi/analysis v0.21.2 // indirect",
          "165:  github.com/go-openapi/errors v0.20.2 // indirect",
          "166:  github.com/go-openapi/inflect v0.19.0 // indirect",
          "167:  github.com/go-openapi/jsonpointer v0.19.5 // indirect",
          "168:  github.com/go-openapi/jsonreference v0.19.6 // indirect",
          "169:  github.com/go-openapi/loads v0.21.0 // indirect",
          "170:  github.com/go-openapi/runtime v0.21.1 // indirect",
          "171:  github.com/go-openapi/spec v0.20.4 // indirect",
          "172:  github.com/go-openapi/strfmt v0.21.1 // indirect",
          "173:  github.com/go-openapi/swag v0.19.15 // indirect",
          "174:  github.com/go-openapi/validate v0.20.3 // indirect",
          "175:  github.com/go-stack/stack v1.8.1 // indirect",
          "176:  github.com/goccy/go-json v0.9.5 // indirect",
          "177:  github.com/gogo/protobuf v1.3.2 // indirect",
          "178:  github.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 // indirect",
          "179:  github.com/golang-sql/sqlexp v0.0.0-20170517235910-f1bb20e5a188 // indirect",
          "180:  github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect",
          "181:  github.com/golang/mock v1.6.0 // indirect",
          "182:  github.com/golang/protobuf v1.5.2 // indirect",
          "183:  github.com/golang/snappy v0.0.4 // indirect",
          "184:  github.com/google/btree v1.0.1 // indirect",
          "185:  github.com/google/certificate-transparency-go v1.1.2-0.20210511102531-373a877eec92 // indirect",
          "186:  github.com/google/go-querystring v1.1.0 // indirect",
          "187:  github.com/gorilla/css v1.0.0 // indirect",
          "188:  github.com/gorilla/handlers v1.5.1 // indirect",
          "189:  github.com/gorilla/mux v1.8.0 // indirect",
          "190:  github.com/gorilla/securecookie v1.1.1 // indirect",
          "191:  github.com/gorilla/websocket v1.4.2 // indirect",
          "192:  github.com/grpc-ecosystem/go-grpc-middleware v1.3.0 // indirect",
          "193:  github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 // indirect",
          "194:  github.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect",
          "195:  github.com/hashicorp/go-cleanhttp v0.5.2 // indirect",
          "196:  github.com/hashicorp/go-retryablehttp v0.7.0 // indirect",
          "197:  github.com/hashicorp/hcl v1.0.0 // indirect",
          "198:  github.com/imdario/mergo v0.3.12 // indirect",
          "199:  github.com/inconshreveable/mousetrap v1.0.0 // indirect",
          "200:  github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect",
          "201:  github.com/jessevdk/go-flags v1.5.0 // indirect",
          "202:  github.com/jhump/protoreflect v1.8.2 // indirect",
          "203:  github.com/jonboulle/clockwork v0.2.2 // indirect",
          "204:  github.com/josharian/intern v1.0.0 // indirect",
          "205:  github.com/kevinburke/ssh_config v1.1.0 // indirect",
          "206:  github.com/klauspost/pgzip v1.2.5 // indirect",
          "207:  github.com/kr/pretty v0.3.0 // indirect",
          "208:  github.com/kr/text v0.2.0 // indirect",
          "209:  github.com/libdns/libdns v0.2.1 // indirect",
          "210:  github.com/magiconair/properties v1.8.5 // indirect",
          "211:  github.com/mailru/easyjson v0.7.7 // indirect",
          "212:  github.com/markbates/going v1.0.0 // indirect",
          "213:  github.com/mattn/go-runewidth v0.0.13 // indirect",
          "214:  github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect",
          "215:  github.com/mholt/acmez v1.0.2 // indirect",
          "216:  github.com/miekg/dns v1.1.46 // indirect",
          "217:  github.com/minio/md5-simd v1.1.2 // indirect",
          "218:  github.com/minio/sha256-simd v1.0.0 // indirect",
          "219:  github.com/mitchellh/go-homedir v1.1.0 // indirect",
          "220:  github.com/mitchellh/mapstructure v1.4.3 // indirect",
          "221:  github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect",
          "222:  github.com/modern-go/reflect2 v1.0.2 // indirect",
          "223:  github.com/mrjones/oauth v0.0.0-20190623134757-126b35219450 // indirect",
          "224:  github.com/mschoch/smat v0.2.0 // indirect",
          "225:  github.com/nwaples/rardecode v1.1.3 // indirect",
          "226:  github.com/oklog/ulid v1.3.1 // indirect",
          "227:  github.com/olekukonko/tablewriter v0.0.5 // indirect",
          "228:  github.com/pelletier/go-toml v1.9.4 // indirect",
          "229:  github.com/pierrec/lz4/v4 v4.1.14 // indirect",
          "230:  github.com/pmezard/go-difflib v1.0.0 // indirect",
          "231:  github.com/prometheus/client_model v0.2.0 // indirect",
          "232:  github.com/prometheus/common v0.32.1 // indirect",
          "233:  github.com/prometheus/procfs v0.7.3 // indirect",
          "234:  github.com/rivo/uniseg v0.2.0 // indirect",
          "235:  github.com/rogpeppe/go-internal v1.8.1 // indirect",
          "236:  github.com/rs/xid v1.3.0 // indirect",
          "237:  github.com/russross/blackfriday/v2 v2.1.0 // indirect",
          "238:  github.com/shurcooL/httpfs v0.0.0-20190707220628-8d4bc4ba7749 // indirect",
          "239:  github.com/sirupsen/logrus v1.8.1 // indirect",
          "240:  github.com/soheilhy/cmux v0.1.5 // indirect",
          "241:  github.com/spf13/afero v1.8.0 // indirect",
          "242:  github.com/spf13/cast v1.4.1 // indirect",
          "243:  github.com/spf13/cobra v1.3.0 // indirect",
          "244:  github.com/spf13/jwalterweatherman v1.1.0 // indirect",
          "245:  github.com/spf13/pflag v1.0.5 // indirect",
          "246:  github.com/spf13/viper v1.10.1 // indirect",
          "247:  github.com/ssor/bom v0.0.0-20170718123548-6386211fdfcf // indirect",
          "248:  github.com/steveyen/gtreap v0.1.0 // indirect",
          "249:  github.com/subosito/gotenv v1.2.0 // indirect",
          "250:  github.com/tmc/grpc-websocket-proxy v0.0.0-20201229170055-e5319fda7802 // indirect",
          "251:  github.com/toqueteos/webbrowser v1.2.0 // indirect",
          "252:  github.com/ulikunitz/xz v0.5.10 // indirect",
          "253:  github.com/x448/float16 v0.8.4 // indirect",
          "254:  github.com/xanzy/ssh-agent v0.3.1 // indirect",
          "255:  github.com/xi2/xz v0.0.0-20171230120015-48954b6210f8 // indirect",
          "256:  github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2 // indirect",
          "257:  go.etcd.io/bbolt v1.3.6 // indirect",
          "258:  go.etcd.io/etcd/api/v3 v3.5.1 // indirect",
          "259:  go.etcd.io/etcd/client/pkg/v3 v3.5.1 // indirect",
          "260:  go.etcd.io/etcd/client/v2 v2.305.1 // indirect",
          "261:  go.etcd.io/etcd/client/v3 v3.5.0-alpha.0 // indirect",
          "262:  go.etcd.io/etcd/etcdctl/v3 v3.5.0-alpha.0 // indirect",
          "263:  go.etcd.io/etcd/pkg/v3 v3.5.0-alpha.0 // indirect",
          "264:  go.etcd.io/etcd/raft/v3 v3.5.0-alpha.0 // indirect",
          "265:  go.etcd.io/etcd/server/v3 v3.5.0-alpha.0 // indirect",
          "266:  go.etcd.io/etcd/tests/v3 v3.5.0-alpha.0 // indirect",
          "267:  go.etcd.io/etcd/v3 v3.5.0-alpha.0 // indirect",
          "268:  go.mongodb.org/mongo-driver v1.8.2 // indirect",
          "269:  go.uber.org/atomic v1.9.0 // indirect",
          "270:  go.uber.org/multierr v1.8.0 // indirect",
          "271:  go.uber.org/zap v1.21.0 // indirect",
          "272:  golang.org/x/mod v0.5.1 // indirect",
          "273:  golang.org/x/time v0.0.0-20220224211638-0e9765cccd65 // indirect",
          "274:  golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect",
          "275:  google.golang.org/appengine v1.6.7 // indirect",
          "276:  google.golang.org/genproto v0.0.0-20211208223120-3a66f561d7aa // indirect",
          "277:  google.golang.org/grpc v1.43.0 // indirect",
          "278:  google.golang.org/protobuf v1.27.1 // indirect",
          "279:  gopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc // indirect",
          "280:  gopkg.in/cheggaaa/pb.v1 v1.0.28 // indirect",
          "281:  gopkg.in/warnings.v0 v0.1.2 // indirect",
          "282:  gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect",
          "283:  sigs.k8s.io/yaml v1.2.0 // indirect",
          "284: )",
          "",
          "---------------"
        ],
        "modules/util/net.go||modules/util/net.go": [
          "File: modules/util/net.go -> modules/util/net.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"net\"",
          "9: )",
          "12: func IsIPPrivate(ip net.IP) bool {",
          "19: }",
          "",
          "[Removed Lines]",
          "13:  if ip4 := ip.To4(); ip4 != nil {",
          "14:   return ip4[0] == 10 ||",
          "15:    (ip4[0] == 172 && ip4[1]&0xf0 == 16) ||",
          "16:    (ip4[0] == 192 && ip4[1] == 168)",
          "17:  }",
          "18:  return len(ip) == net.IPv6len && ip[0]&0xfe == 0xfc",
          "",
          "[Added Lines]",
          "12:  return ip.IsPrivate()",
          "",
          "---------------"
        ],
        "modules/util/net_test.go||modules/util/net_test.go": [
          "File: modules/util/net_test.go -> modules/util/net_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package util",
          "7: import (",
          "8:  \"net\"",
          "9:  \"testing\"",
          "11:  \"github.com/stretchr/testify/assert\"",
          "12: )",
          "14: func TestIsIPPPrivate(t *testing.T) {",
          "15:  cases := []struct {",
          "16:   ip        string",
          "17:   isPrivate bool",
          "18:  }{",
          "20:   {",
          "21:    ip:        \"127.0.0.1\",",
          "22:    isPrivate: false, // TODO: according to go, this isn't private?",
          "23:   },",
          "25:   {",
          "26:    ip:        \"127.1.2.3\",",
          "27:    isPrivate: false, // TODO: according to go, this isn't private?",
          "28:   },",
          "30:   {",
          "31:    ip:        \"10.255.255.0\",",
          "32:    isPrivate: true,",
          "33:   },",
          "35:   {",
          "36:    ip:        \"8.8.8.8\",",
          "37:    isPrivate: false,",
          "38:   },",
          "40:   {",
          "41:    ip:        \"::1\",",
          "42:    isPrivate: false, // TODO: according to go, this isn't private?",
          "43:   },",
          "45:   {",
          "46:    ip:        \"2a12:7c40::f00d\",",
          "47:    isPrivate: false,",
          "48:   },",
          "49:  }",
          "51:  for n, c := range cases {",
          "52:   i := net.ParseIP(c.ip)",
          "53:   p := IsIPPrivate(i)",
          "54:   assert.Equal(t, c.isPrivate, p, \"case %d: should be equal\", n)",
          "55:  }",
          "56: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}