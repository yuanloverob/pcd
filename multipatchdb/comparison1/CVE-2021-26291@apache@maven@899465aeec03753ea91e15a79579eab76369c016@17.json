{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "899465aeec03753ea91e15a79579eab76369c016",
  "patch_info": {
    "commit_hash": "899465aeec03753ea91e15a79579eab76369c016",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/899465aeec03753ea91e15a79579eab76369c016",
    "files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/pom.xml",
      "maven-settings/src/main/mdo/settings.mdo"
    ],
    "message": "[MNG-7117] add support for blocked mirror",
    "before_after_code_files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
    ]
  },
  "patch_diff": {
    "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
      "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
      "178:         for ( Mirror mirror : request.getMirrors() )",
      "179:         {",
      "182:         }",
      "183:         session.setMirrorSelector( mirrorSelector );",
      "",
      "[Removed Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
      "181:                                 mirror.getMirrorOfLayouts() );",
      "",
      "[Added Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
      "181:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
      "",
      "---------------"
    ],
    "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
      "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
      "634:           </description>",
      "635:         </field>",
      "636:       </fields>",
      "637:       <codeSegments>",
      "638:         <codeSegment>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636:         <field>",
      "637:           <name>blocked</name>",
      "638:           <version>1.2.0+</version>",
      "639:           <type>boolean</type>",
      "640:           <defaultValue>false</defaultValue>",
      "641:           <description>",
      "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
      "643:           </description>",
      "644:         </field>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
      "649:         sb.append( \",url=\" ).append( this.url );",
      "650:         sb.append( \",name=\" ).append( this.name );",
      "651:         sb.append( \"]\" );",
      "652:         return sb.toString();",
      "653:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:         if ( isBlocked() )",
      "661:         {",
      "662:             sb.append( \",blocked\" );",
      "663:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1954d51ff2841045b4af8a515ad0719805269d8d",
      "candidate_info": {
        "commit_hash": "1954d51ff2841045b4af8a515ad0719805269d8d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/1954d51ff2841045b4af8a515ad0719805269d8d",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ],
        "message": "[MNG-7391] add execution strategy+runner required by Maven Build Cache",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java||maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java||maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java",
          "maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java",
          "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java||maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java",
          "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java||maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java -> maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: @Component( role = DefaultLifecycles.class )",
          "44: public class DefaultLifecycles",
          "45: {",
          "",
          "[Removed Lines]",
          "46:     public static final String[] STANDARD_LIFECYCLES = { \"default\", \"clean\", \"site\" };",
          "",
          "[Added Lines]",
          "46:     public static final String[] STANDARD_LIFECYCLES = { \"clean\", \"default\", \"site\" };",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.codehaus.plexus.util.StringUtils;",
          "36: import org.codehaus.plexus.util.xml.Xpp3Dom;",
          "41: import java.util.HashSet;",
          "42: import java.util.LinkedHashMap;",
          "43: import java.util.List;",
          "",
          "[Removed Lines]",
          "38: import java.util.ArrayList;",
          "39: import java.util.Collections;",
          "40: import java.util.Comparator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         Map<Plugin, Plugin> plugins = new LinkedHashMap<>();",
          "102:         {",
          "103:             org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration =",
          "104:                 lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() );",
          "",
          "[Removed Lines]",
          "101:         for ( Lifecycle lifecycle : getOrderedLifecycles() )",
          "",
          "[Added Lines]",
          "98:         for ( Lifecycle lifecycle : defaultLifeCycles.getLifeCycles() )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         return plugins.keySet();",
          "132:     }",
          "153:     private void parseLifecyclePhaseDefinitions( Map<Plugin, Plugin> plugins, String phase, LifecyclePhase goals )",
          "154:     {",
          "155:         String modelId = \"org.apache.maven:maven-core:\" + this.getClass().getPackage().getImplementationVersion()",
          "",
          "[Removed Lines]",
          "134:     private List<Lifecycle> getOrderedLifecycles()",
          "135:     {",
          "138:         List<Lifecycle> lifecycles = new ArrayList<>( defaultLifeCycles.getLifeCycles() );",
          "140:         Collections.sort( lifecycles, new Comparator<Lifecycle>()",
          "141:         {",
          "143:             public int compare( Lifecycle l1, Lifecycle l2 )",
          "144:             {",
          "145:                 return l1.getId().compareTo( l2.getId() );",
          "146:             }",
          "148:         } );",
          "150:         return lifecycles;",
          "151:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.maven.plugin.MavenPluginManager;",
          "31: import org.apache.maven.plugin.MojoExecution;",
          "32: import org.apache.maven.plugin.MojoExecutionException;",
          "33: import org.apache.maven.plugin.MojoFailureException;",
          "34: import org.apache.maven.plugin.PluginConfigurationException;",
          "35: import org.apache.maven.plugin.PluginIncompatibleException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.maven.plugin.MojoExecutionRunner;",
          "34: import org.apache.maven.plugin.MojosExecutionStrategy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     private final ReadWriteLock aggregatorLock = new ReentrantReadWriteLock();",
          "88:     public MojoExecutor()",
          "89:     {",
          "90:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:     @Requirement",
          "91:     private MojosExecutionStrategy mojosExecutionStrategy;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:         return Collections.unmodifiableCollection( scopes );",
          "145:     }",
          "148:         throws LifecycleExecutionException",
          "150:     {",
          "156:         {",
          "159:     }",
          "162:                          DependencyContext dependencyContext, PhaseRecorder phaseRecorder )",
          "163:         throws LifecycleExecutionException",
          "164:     {",
          "",
          "[Removed Lines]",
          "147:     public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )",
          "151:         DependencyContext dependencyContext = newDependencyContext( session, mojoExecutions );",
          "153:         PhaseRecorder phaseRecorder = new PhaseRecorder( session.getCurrentProject() );",
          "155:         for ( MojoExecution mojoExecution : mojoExecutions )",
          "157:             execute( session, mojoExecution, projectIndex, dependencyContext, phaseRecorder );",
          "158:         }",
          "161:     public void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "",
          "[Added Lines]",
          "152:     public void execute( final MavenSession session,",
          "153:                          final List<MojoExecution> mojoExecutions,",
          "154:                          final ProjectIndex projectIndex )",
          "158:         final DependencyContext dependencyContext = newDependencyContext( session, mojoExecutions );",
          "160:         final PhaseRecorder phaseRecorder = new PhaseRecorder( session.getCurrentProject() );",
          "162:         mojosExecutionStrategy.execute( mojoExecutions, session, new MojoExecutionRunner()",
          "164:             @Override",
          "165:             public void run( MojoExecution mojoExecution ) throws LifecycleExecutionException",
          "166:             {",
          "167:                 MojoExecutor.this.execute( session, mojoExecution, projectIndex, dependencyContext, phaseRecorder );",
          "168:             }",
          "169:         } );",
          "172:     private void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java -> maven-core/src/main/java/org/apache/maven/plugin/DefaultMojosExecutionStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.plugin;",
          "22: import org.apache.maven.execution.MavenSession;",
          "23: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "25: import javax.inject.Named;",
          "26: import javax.inject.Singleton;",
          "27: import java.util.List;",
          "32: @Named",
          "33: @Singleton",
          "34: public class DefaultMojosExecutionStrategy implements MojosExecutionStrategy",
          "35: {",
          "36:     @Override",
          "37:     public void execute( List<MojoExecution> mojos, MavenSession session, MojoExecutionRunner mojoRunner )",
          "38:             throws LifecycleExecutionException",
          "39:     {",
          "40:         for ( MojoExecution mojoExecution : mojos )",
          "41:         {",
          "42:             mojoRunner.run( mojoExecution );",
          "43:         }",
          "45:     }",
          "46: }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java||maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java -> maven-core/src/main/java/org/apache/maven/plugin/MojoExecutionRunner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.plugin;",
          "22: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "27: public interface MojoExecutionRunner",
          "28: {",
          "35:     void run( MojoExecution execution ) throws LifecycleExecutionException;",
          "36: }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java||maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java -> maven-core/src/main/java/org/apache/maven/plugin/MojosExecutionStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.plugin;",
          "22: import org.apache.maven.execution.MavenSession;",
          "23: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "25: import java.util.List;",
          "31: public interface MojosExecutionStrategy",
          "32: {",
          "42:     void execute( List<MojoExecution> mojos, MavenSession session, MojoExecutionRunner mojoExecutionRunner )",
          "43:             throws LifecycleExecutionException;",
          "45: }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java||maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java -> maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:         ClassRealm pluginRealm = pluginDescriptor.getClassRealm();",
          "501:         if ( logger.isDebugEnabled() )",
          "502:         {",
          "503:             logger.debug( \"Configuring mojo \" + mojoDescriptor.getId() + \" from plugin realm \" + pluginRealm );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:         if ( pluginRealm == null )",
          "502:         {",
          "503:             try",
          "504:             {",
          "505:                 setupPluginRealm( pluginDescriptor, session, null, null, null );",
          "506:             }",
          "507:             catch ( PluginResolutionException e )",
          "508:             {",
          "509:                 String msg = \"Cannot setup plugin realm [mojoDescriptor=\" + mojoDescriptor.getId()",
          "510:                         + \", pluginDescriptor=\" + pluginDescriptor.getId() + \"]\";",
          "511:                 throw new PluginConfigurationException( pluginDescriptor, msg, e );",
          "512:             }",
          "513:             pluginRealm = pluginDescriptor.getClassRealm();",
          "514:         }",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java||maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java -> maven-core/src/test/java/org/apache/maven/lifecycle/DefaultLifecyclesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     {",
          "51:         final List<Lifecycle> cycles = defaultLifeCycles.getLifeCycles();",
          "52:         assertNotNull( cycles );",
          "57:     }",
          "",
          "[Removed Lines]",
          "53:         final Lifecycle lifecycle = cycles.get( 0 );",
          "54:         assertEquals( \"default\", lifecycle.getId() );",
          "55:         assertEquals( 23, lifecycle.getPhases().size() );",
          "",
          "[Added Lines]",
          "53:         final Lifecycle lifecycle0 = cycles.get( 0 );",
          "54:         assertEquals( \"clean\", lifecycle0.getId() );",
          "55:         final Lifecycle lifecycle1 = cycles.get( 1 );",
          "56:         assertEquals( \"default\", lifecycle1.getId() );",
          "57:         assertEquals( 23, lifecycle1.getPhases().size() );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java||maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java": [
          "File: maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java -> maven-core/src/test/java/org/apache/maven/lifecycle/internal/stub/MojoExecutorStub.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import org.apache.maven.execution.MavenSession;",
          "19: import org.apache.maven.lifecycle.LifecycleExecutionException;",
          "21: import org.apache.maven.lifecycle.internal.MojoExecutor;",
          "23: import org.apache.maven.lifecycle.internal.ProjectIndex;",
          "24: import org.apache.maven.model.Plugin;",
          "25: import org.apache.maven.plugin.MojoExecution;",
          "26: import org.apache.maven.plugin.descriptor.MojoDescriptor;",
          "27: import org.apache.maven.plugin.descriptor.PluginDescriptor;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "20: import org.apache.maven.lifecycle.internal.DependencyContext;",
          "22: import org.apache.maven.lifecycle.internal.PhaseRecorder;",
          "",
          "[Added Lines]",
          "26: import org.apache.maven.project.MavenProject;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     public List<MojoExecution> executions = Collections.synchronizedList( new ArrayList<MojoExecution>() );",
          "42:     @Override",
          "45:         throws LifecycleExecutionException",
          "46:     {",
          "48:     }",
          "50:     @Override",
          "53:     {",
          "55:     }",
          "",
          "[Removed Lines]",
          "43:     public void execute( MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex,",
          "44:                          DependencyContext dependencyContext, PhaseRecorder phaseRecorder )",
          "47:         executions.add( mojoExecution );",
          "51:     public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )",
          "52:         throws LifecycleExecutionException",
          "54:         executions.addAll(mojoExecutions);",
          "",
          "[Added Lines]",
          "42:     public void execute( MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex )",
          "45:         executions.addAll( mojoExecutions );",
          "49:     public List<MavenProject> executeForkedExecutions( MojoExecution mojoExecution, MavenSession session, ProjectIndex projectIndex ) throws LifecycleExecutionException",
          "51:         return null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28b4ea92d38365d0f27a5bd044ac4927580147f8",
      "candidate_info": {
        "commit_hash": "28b4ea92d38365d0f27a5bd044ac4927580147f8",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/28b4ea92d38365d0f27a5bd044ac4927580147f8",
        "files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "maven-settings/pom.xml",
          "maven-settings/src/main/mdo/settings.mdo"
        ],
        "message": "[MNG-7117] add support for blocked mirror",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
            "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
          ],
          "candidate": [
            "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
            "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
          ]
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
          "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
          "189:         for ( Mirror mirror : request.getMirrors() )",
          "190:         {",
          "193:         }",
          "194:         session.setMirrorSelector( mirrorSelector );",
          "",
          "[Removed Lines]",
          "191:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
          "192:                                 mirror.getMirrorOfLayouts() );",
          "",
          "[Added Lines]",
          "191:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
          "192:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
          "",
          "---------------"
        ],
        "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
          "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
          "634:           </description>",
          "635:         </field>",
          "636:       </fields>",
          "637:       <codeSegments>",
          "638:         <codeSegment>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:         <field>",
          "637:           <name>blocked</name>",
          "638:           <version>1.2.0+</version>",
          "639:           <type>boolean</type>",
          "640:           <defaultValue>false</defaultValue>",
          "641:           <description>",
          "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
          "643:           </description>",
          "644:         </field>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
          "649:         sb.append( \",url=\" ).append( this.url );",
          "650:         sb.append( \",name=\" ).append( this.name );",
          "651:         sb.append( \"]\" );",
          "652:         return sb.toString();",
          "653:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:         if ( isBlocked() )",
          "661:         {",
          "662:             sb.append( \",blocked\" );",
          "663:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}