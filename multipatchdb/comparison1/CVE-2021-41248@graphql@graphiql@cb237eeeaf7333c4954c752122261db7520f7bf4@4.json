{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5268c9ad6cc84f416b41b9e53cc2f3620cf4088b",
      "candidate_info": {
        "commit_hash": "5268c9ad6cc84f416b41b9e53cc2f3620cf4088b",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/5268c9ad6cc84f416b41b9e53cc2f3620cf4088b",
        "files": [
          "packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/Argument.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldLink.tsx",
          "packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeLink.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts",
          "packages/graphiql/src/components/DocExplorer/types.ts"
        ],
        "message": "simplify doc explorer components (#2477)\n\n* simplify type link\n\n* refactor class components to function components\n\n* remove props and consume contexts\n\n* simplify field link\n\n* use type assertion functions from graphql-js\n\n* add back schema prop to DocExplorer",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/Argument.tsx||packages/graphiql/src/components/DocExplorer/Argument.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldDoc.tsx||packages/graphiql/src/components/DocExplorer/FieldDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/FieldLink.tsx||packages/graphiql/src/components/DocExplorer/FieldLink.tsx",
          "packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx||packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeDoc.tsx||packages/graphiql/src/components/DocExplorer/TypeDoc.tsx",
          "packages/graphiql/src/components/DocExplorer/TypeLink.tsx||packages/graphiql/src/components/DocExplorer/TypeLink.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts||packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts",
          "packages/graphiql/src/components/DocExplorer/types.ts||packages/graphiql/src/components/DocExplorer/types.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/completion.ts||packages/graphiql-react/src/editor/completion.ts": [
          "File: packages/graphiql-react/src/editor/completion.ts -> packages/graphiql-react/src/editor/completion.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { Editor, EditorChange } from 'codemirror';",
          "2: import escapeHTML from 'escape-html';",
          "10: import { ExplorerContextType } from '../explorer';",
          "11: import { markdown } from '../markdown';",
          "",
          "[Removed Lines]",
          "3: import {",
          "4:   GraphQLList,",
          "5:   GraphQLNonNull,",
          "6:   GraphQLSchema,",
          "7:   GraphQLType,",
          "8: } from 'graphql';",
          "",
          "[Added Lines]",
          "3: import { GraphQLSchema, GraphQLType, isListType, isNonNullType } from 'graphql';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: }",
          "119: function renderType(type: GraphQLType): string {",
          "121:     return `${renderType(type.ofType)}!`;",
          "122:   }",
          "124:     return `[${renderType(type.ofType)}]`;",
          "125:   }",
          "126:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
          "",
          "[Removed Lines]",
          "120:   if (type instanceof GraphQLNonNull) {",
          "123:   if (type instanceof GraphQLList) {",
          "",
          "[Added Lines]",
          "115:   if (isNonNullType(type)) {",
          "118:   if (isListType(type)) {",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React, { ReactNode } from 'react';",
          "16: import FieldDoc from './DocExplorer/FieldDoc';",
          "17: import SchemaDoc from './DocExplorer/SchemaDoc';",
          "",
          "[Removed Lines]",
          "9: import { isType, GraphQLNamedType } from 'graphql';",
          "10: import {",
          "11:   ExplorerFieldDef,",
          "12:   useExplorerContext,",
          "13:   useSchemaContext,",
          "14: } from '@graphiql/react';",
          "",
          "[Added Lines]",
          "9: import { GraphQLSchema, isType } from 'graphql';",
          "10: import { useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: type DocExplorerProps = {",
          "23:   onClose?(): void;",
          "24: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   schema?: GraphQLSchema | null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:   const {",
          "34:     fetchError,",
          "35:     isFetching,",
          "37:     validationErrors,",
          "38:   } = useSchemaContext({ nonNull: true });",
          "40:     nonNull: true,",
          "41:   });",
          "43:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "54:   if (fetchError) {",
          "55:     content = <div className=\"error-container\">Error fetching schema</div>;",
          "56:   } else if (validationErrors) {",
          "",
          "[Removed Lines]",
          "36:     schema,",
          "39:   const { explorerNavStack, hide, pop, push, showSearch } = useExplorerContext({",
          "45:   function handleClickType(type: GraphQLNamedType) {",
          "46:     push({ name: type.name, def: type });",
          "47:   }",
          "49:   function handleClickField(field: ExplorerFieldDef) {",
          "50:     push({ name: field.name, def: field });",
          "51:   }",
          "53:   let content: ReactNode;",
          "",
          "[Added Lines]",
          "40:     schema: schemaFromContext,",
          "43:   const { explorerNavStack, hide, pop, showSearch } = useExplorerContext({",
          "50:   const schema = props.schema === undefined ? schemaFromContext : props.schema;",
          "52:   let content: ReactNode = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:     content = <div className=\"error-container\">No Schema Available</div>;",
          "73:   } else if (navItem.search) {",
          "83:   } else if (explorerNavStack.length === 1) {",
          "85:   } else if (isType(navItem.def)) {",
          "96:   }",
          "98:   const shouldSearchBoxAppear =",
          "",
          "[Removed Lines]",
          "74:     content = (",
          "75:       <SearchResults",
          "76:         searchValue={navItem.search}",
          "77:         withinType={navItem.def as GraphQLNamedType}",
          "78:         schema={schema}",
          "79:         onClickType={handleClickType}",
          "80:         onClickField={handleClickField}",
          "81:       />",
          "82:     );",
          "84:     content = <SchemaDoc schema={schema} onClickType={handleClickType} />;",
          "86:     content = (",
          "87:       <TypeDoc",
          "88:         schema={schema}",
          "89:         type={navItem.def}",
          "90:         onClickType={handleClickType}",
          "91:         onClickField={handleClickField}",
          "92:       />",
          "93:     );",
          "94:   } else {",
          "95:     content = <FieldDoc field={navItem.def} onClickType={handleClickType} />;",
          "",
          "[Added Lines]",
          "73:     content = <SearchResults />;",
          "75:     content = <SchemaDoc />;",
          "77:     content = <TypeDoc />;",
          "78:   } else if (navItem.def) {",
          "79:     content = <FieldDoc />;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/Argument.tsx||packages/graphiql/src/components/DocExplorer/Argument.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/Argument.tsx -> packages/graphiql/src/components/DocExplorer/Argument.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLArgument } from 'graphql';",
          "10: import TypeLink from './TypeLink';",
          "11: import DefaultValue from './DefaultValue';",
          "14: type ArgumentProps = {",
          "15:   arg: GraphQLArgument;",
          "17:   showDefaultValue?: boolean;",
          "18: };",
          "25:   return (",
          "26:     <span className=\"arg\">",
          "27:       <span className=\"arg-name\">{arg.name}</span>",
          "28:       {': '}",
          "30:       {showDefaultValue !== false && <DefaultValue field={arg} />}",
          "31:     </span>",
          "32:   );",
          "",
          "[Removed Lines]",
          "12: import { OnClickTypeFunction } from './types';",
          "16:   onClickType: OnClickTypeFunction;",
          "20: export default function Argument({",
          "21:   arg,",
          "22:   onClickType,",
          "23:   showDefaultValue,",
          "24: }: ArgumentProps) {",
          "29:       <TypeLink type={arg.type} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "18: export default function Argument({ arg, showDefaultValue }: ArgumentProps) {",
          "23:       <TypeLink type={arg.type} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/FieldDoc.tsx||packages/graphiql/src/components/DocExplorer/FieldDoc.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/FieldDoc.tsx -> packages/graphiql/src/components/DocExplorer/FieldDoc.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "12: import Argument from './Argument';",
          "13: import Directive from './Directive';",
          "14: import MarkdownContent from './MarkdownContent';",
          "15: import TypeLink from './TypeLink';",
          "24:   const [showDeprecated, handleShowDeprecated] = React.useState(false);",
          "25:   let argsDef;",
          "26:   let deprecatedArgsDef;",
          "27:   if (field && 'args' in field && field.args.length > 0) {",
          "",
          "[Removed Lines]",
          "9: import { GraphQLArgument, DirectiveNode } from 'graphql';",
          "10: import { ExplorerFieldDef } from '@graphiql/react';",
          "16: import { OnClickTypeFunction } from './types';",
          "18: type FieldDocProps = {",
          "19:   field?: ExplorerFieldDef;",
          "20:   onClickType: OnClickTypeFunction;",
          "21: };",
          "23: export default function FieldDoc({ field, onClickType }: FieldDocProps) {",
          "",
          "[Added Lines]",
          "9: import { GraphQLArgument, DirectiveNode, isType } from 'graphql';",
          "10: import { useExplorerContext } from '@graphiql/react';",
          "17: export default function FieldDoc() {",
          "18:   const { explorerNavStack } = useExplorerContext({ nonNull: true });",
          "21:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "22:   const field = navItem.def;",
          "23:   if (!field || isType(field)) {",
          "24:     return null;",
          "25:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:           .map((arg: GraphQLArgument) => (",
          "34:             <div key={arg.name} className=\"doc-category-item\">",
          "35:               <div>",
          "37:               </div>",
          "38:               <MarkdownContent",
          "39:                 className=\"doc-value-description\"",
          "",
          "[Removed Lines]",
          "36:                 <Argument arg={arg} onClickType={onClickType} />",
          "",
          "[Added Lines]",
          "38:                 <Argument arg={arg} />",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:             deprecatedArgs.map((arg, i) => (",
          "67:               <div key={i}>",
          "68:                 <div>",
          "70:                 </div>",
          "71:                 <MarkdownContent",
          "72:                   className=\"doc-value-description\"",
          "",
          "[Removed Lines]",
          "69:                   <Argument arg={arg} onClickType={onClickType} />",
          "",
          "[Added Lines]",
          "71:                   <Argument arg={arg} />",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     <div>",
          "107:       <MarkdownContent",
          "108:         className=\"doc-type-description\"",
          "110:       />",
          "111:       {field && 'deprecationReason' in field && (",
          "112:         <MarkdownContent",
          "113:           className=\"doc-deprecation\"",
          "115:         />",
          "116:       )}",
          "117:       <div className=\"doc-category\">",
          "118:         <div className=\"doc-category-title\">type</div>",
          "120:       </div>",
          "121:       {argsDef}",
          "122:       {directivesDef}",
          "",
          "[Removed Lines]",
          "109:         markdown={field?.description || 'No Description'}",
          "114:           markdown={field?.deprecationReason}",
          "119:         <TypeLink type={field?.type} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "111:         markdown={field.description || 'No Description'}",
          "116:           markdown={field.deprecationReason}",
          "121:         <TypeLink type={field.type} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/FieldLink.tsx||packages/graphiql/src/components/DocExplorer/FieldLink.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/FieldLink.tsx -> packages/graphiql/src/components/DocExplorer/FieldLink.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import React from 'react';",
          "10: import { ExplorerFieldDef, useExplorerContext } from '@graphiql/react';",
          "12: type FieldLinkProps = {",
          "13:   field: ExplorerFieldDef;",
          "14: };",
          "16: export default function FieldLink(props: FieldLinkProps) {",
          "17:   const { push } = useExplorerContext({ nonNull: true });",
          "19:   return (",
          "20:     <a",
          "21:       className=\"field-name\"",
          "22:       onClick={event => {",
          "23:         event.preventDefault();",
          "24:         push({ name: props.field.name, def: props.field });",
          "25:       }}",
          "26:       href=\"#\">",
          "27:       {props.field.name}",
          "28:     </a>",
          "29:   );",
          "30: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx||packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx -> packages/graphiql/src/components/DocExplorer/SchemaDoc.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "9: import TypeLink from './TypeLink';",
          "10: import MarkdownContent from './MarkdownContent';",
          "21:   const queryType = schema.getQueryType();",
          "22:   const mutationType = schema.getMutationType?.();",
          "23:   const subscriptionType = schema.getSubscriptionType?.();",
          "",
          "[Removed Lines]",
          "11: import { GraphQLSchema } from 'graphql';",
          "12: import { OnClickTypeFunction } from './types';",
          "14: type SchemaDocProps = {",
          "15:   schema: GraphQLSchema;",
          "16:   onClickType: OnClickTypeFunction;",
          "17: };",
          "20: export default function SchemaDoc({ schema, onClickType }: SchemaDocProps) {",
          "",
          "[Added Lines]",
          "11: import { useSchemaContext } from '@graphiql/react';",
          "14: export default function SchemaDoc() {",
          "15:   const { schema } = useSchemaContext({ nonNull: true });",
          "17:   if (!schema) {",
          "18:     return null;",
          "19:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:       />",
          "34:       <div className=\"doc-category\">",
          "35:         <div className=\"doc-category-title\">root types</div>",
          "41:         {mutationType && (",
          "42:           <div className=\"doc-category-item\">",
          "43:             <span className=\"keyword\">mutation</span>",
          "44:             {': '}",
          "46:           </div>",
          "47:         )}",
          "48:         {subscriptionType && (",
          "49:           <div className=\"doc-category-item\">",
          "50:             <span className=\"keyword\">subscription</span>",
          "51:             {': '}",
          "53:           </div>",
          "54:         )}",
          "55:       </div>",
          "",
          "[Removed Lines]",
          "36:         <div className=\"doc-category-item\">",
          "37:           <span className=\"keyword\">query</span>",
          "38:           {': '}",
          "39:           <TypeLink type={queryType} onClick={onClickType} />",
          "40:         </div>",
          "45:             <TypeLink type={mutationType} onClick={onClickType} />",
          "52:             <TypeLink type={subscriptionType} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "36:         {queryType ? (",
          "37:           <div className=\"doc-category-item\">",
          "38:             <span className=\"keyword\">query</span>",
          "39:             {': '}",
          "40:             <TypeLink type={queryType} />",
          "41:           </div>",
          "42:         ) : null}",
          "47:             <TypeLink type={mutationType} />",
          "54:             <TypeLink type={subscriptionType} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/SearchResults.tsx||packages/graphiql/src/components/DocExplorer/SearchResults.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/SearchResults.tsx -> packages/graphiql/src/components/DocExplorer/SearchResults.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React, { ReactNode } from 'react';",
          "11: import Argument from './Argument';",
          "12: import TypeLink from './TypeLink';",
          "32:   }",
          "52:     }",
          "86:               return;",
          "87:             }",
          "120:           } else {",
          "122:           }",
          "132:     }",
          "147:     return (",
          "149:         {matchedWithin}",
          "152:       </div>",
          "153:     );",
          "154:   }",
          "155: }",
          "157: function isMatch(sourceText: string, searchValue: string) {",
          "",
          "[Removed Lines]",
          "9: import { GraphQLSchema, GraphQLNamedType } from 'graphql';",
          "13: import { OnClickFieldFunction, OnClickTypeFunction } from './types';",
          "15: type SearchResultsProps = {",
          "16:   schema: GraphQLSchema;",
          "17:   withinType?: GraphQLNamedType;",
          "18:   searchValue: string;",
          "19:   onClickType: OnClickTypeFunction;",
          "20:   onClickField: OnClickFieldFunction;",
          "21: };",
          "23: export default class SearchResults extends React.Component<",
          "24:   SearchResultsProps,",
          "25:   {}",
          "26: > {",
          "27:   shouldComponentUpdate(nextProps: SearchResultsProps) {",
          "28:     return (",
          "29:       this.props.schema !== nextProps.schema ||",
          "30:       this.props.searchValue !== nextProps.searchValue",
          "31:     );",
          "34:   render() {",
          "35:     const searchValue = this.props.searchValue;",
          "36:     const withinType = this.props.withinType;",
          "37:     const schema = this.props.schema;",
          "38:     const onClickType = this.props.onClickType;",
          "39:     const onClickField = this.props.onClickField;",
          "41:     const matchedWithin: ReactNode[] = [];",
          "42:     const matchedTypes: ReactNode[] = [];",
          "43:     const matchedFields: ReactNode[] = [];",
          "45:     const typeMap = schema.getTypeMap();",
          "46:     let typeNames = Object.keys(typeMap);",
          "49:     if (withinType) {",
          "50:       typeNames = typeNames.filter(n => n !== withinType.name);",
          "51:       typeNames.unshift(withinType.name);",
          "54:     for (const typeName of typeNames) {",
          "55:       if (",
          "56:         matchedWithin.length + matchedTypes.length + matchedFields.length >=",
          "57:         100",
          "58:       ) {",
          "59:         break;",
          "60:       }",
          "62:       const type = typeMap[typeName];",
          "63:       if (withinType !== type && isMatch(typeName, searchValue)) {",
          "64:         matchedTypes.push(",
          "65:           <div className=\"doc-category-item\" key={typeName}>",
          "66:             <TypeLink type={type} onClick={onClickType} />",
          "67:           </div>,",
          "68:         );",
          "69:       }",
          "71:       if (type && 'getFields' in type) {",
          "72:         const fields = type.getFields();",
          "73:         Object.keys(fields).forEach(fieldName => {",
          "74:           const field = fields[fieldName];",
          "75:           let matchingArgs;",
          "77:           if (!isMatch(fieldName, searchValue)) {",
          "78:             if ('args' in field && field.args.length) {",
          "79:               matchingArgs = field.args.filter(arg =>",
          "80:                 isMatch(arg.name, searchValue),",
          "81:               );",
          "82:               if (matchingArgs.length === 0) {",
          "83:                 return;",
          "84:               }",
          "85:             } else {",
          "88:           }",
          "90:           const match = (",
          "91:             <div className=\"doc-category-item\" key={typeName + '.' + fieldName}>",
          "92:               {withinType !== type && [",
          "93:                 <TypeLink key=\"type\" type={type} onClick={onClickType} />,",
          "94:                 '.',",
          "95:               ]}",
          "96:               <a",
          "97:                 className=\"field-name\"",
          "98:                 onClick={event => onClickField(field, type, event)}>",
          "99:                 {field.name}",
          "100:               </a>",
          "101:               {matchingArgs && [",
          "102:                 '(',",
          "103:                 <span key=\"args\">",
          "104:                   {matchingArgs.map(arg => (",
          "105:                     <Argument",
          "106:                       key={arg.name}",
          "107:                       arg={arg}",
          "108:                       onClickType={onClickType}",
          "109:                       showDefaultValue={false}",
          "110:                     />",
          "111:                   ))}",
          "112:                 </span>,",
          "113:                 ')',",
          "114:               ]}",
          "115:             </div>",
          "116:           );",
          "118:           if (withinType === type) {",
          "119:             matchedWithin.push(match);",
          "121:             matchedFields.push(match);",
          "123:         });",
          "124:       }",
          "125:     }",
          "127:     if (",
          "128:       matchedWithin.length + matchedTypes.length + matchedFields.length ===",
          "129:       0",
          "130:     ) {",
          "131:       return <span className=\"doc-alert-text\">No results found.</span>;",
          "134:     if (withinType && matchedTypes.length + matchedFields.length > 0) {",
          "135:       return (",
          "136:         <div>",
          "137:           {matchedWithin}",
          "138:           <div className=\"doc-category\">",
          "139:             <div className=\"doc-category-title\">other results</div>",
          "140:             {matchedTypes}",
          "141:             {matchedFields}",
          "142:           </div>",
          "143:         </div>",
          "144:       );",
          "145:     }",
          "148:       <div className=\"doc-search-items\">",
          "150:         {matchedTypes}",
          "151:         {matchedFields}",
          "",
          "[Added Lines]",
          "12: import { useExplorerContext, useSchemaContext } from '@graphiql/react';",
          "13: import FieldLink from './FieldLink';",
          "15: export default function SearchResults() {",
          "16:   const { explorerNavStack } = useExplorerContext({ nonNull: true });",
          "17:   const { schema } = useSchemaContext({ nonNull: true });",
          "19:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "21:   if (!schema || !navItem.search) {",
          "22:     return null;",
          "25:   const searchValue = navItem.search;",
          "26:   const withinType = navItem.def;",
          "28:   const matchedWithin: ReactNode[] = [];",
          "29:   const matchedTypes: ReactNode[] = [];",
          "30:   const matchedFields: ReactNode[] = [];",
          "32:   const typeMap = schema.getTypeMap();",
          "33:   let typeNames = Object.keys(typeMap);",
          "36:   if (withinType) {",
          "37:     typeNames = typeNames.filter(n => n !== withinType.name);",
          "38:     typeNames.unshift(withinType.name);",
          "39:   }",
          "41:   for (const typeName of typeNames) {",
          "42:     if (",
          "43:       matchedWithin.length + matchedTypes.length + matchedFields.length >=",
          "44:       100",
          "45:     ) {",
          "46:       break;",
          "47:     }",
          "49:     const type = typeMap[typeName];",
          "50:     if (withinType !== type && isMatch(typeName, searchValue)) {",
          "51:       matchedTypes.push(",
          "52:         <div className=\"doc-category-item\" key={typeName}>",
          "53:           <TypeLink type={type} />",
          "54:         </div>,",
          "55:       );",
          "58:     if (type && 'getFields' in type) {",
          "59:       const fields = type.getFields();",
          "60:       Object.keys(fields).forEach(fieldName => {",
          "61:         const field = fields[fieldName];",
          "62:         let matchingArgs;",
          "64:         if (!isMatch(fieldName, searchValue)) {",
          "65:           if ('args' in field && field.args.length) {",
          "66:             matchingArgs = field.args.filter(arg =>",
          "67:               isMatch(arg.name, searchValue),",
          "68:             );",
          "69:             if (matchingArgs.length === 0) {",
          "73:             return;",
          "75:         }",
          "77:         const match = (",
          "78:           <div className=\"doc-category-item\" key={typeName + '.' + fieldName}>",
          "79:             {withinType !== type && [<TypeLink key=\"type\" type={type} />, '.']}",
          "80:             <FieldLink field={field} />",
          "81:             {matchingArgs && [",
          "82:               '(',",
          "83:               <span key=\"args\">",
          "84:                 {matchingArgs.map(arg => (",
          "85:                   <Argument key={arg.name} arg={arg} showDefaultValue={false} />",
          "86:                 ))}",
          "87:               </span>,",
          "88:               ')',",
          "89:             ]}",
          "90:           </div>",
          "91:         );",
          "93:         if (withinType === type) {",
          "94:           matchedWithin.push(match);",
          "95:         } else {",
          "96:           matchedFields.push(match);",
          "97:         }",
          "98:       });",
          "100:   }",
          "102:   if (matchedWithin.length + matchedTypes.length + matchedFields.length === 0) {",
          "103:     return <span className=\"doc-alert-text\">No results found.</span>;",
          "104:   }",
          "106:   if (withinType && matchedTypes.length + matchedFields.length > 0) {",
          "108:       <div>",
          "110:         <div className=\"doc-category\">",
          "111:           <div className=\"doc-category-title\">other results</div>",
          "112:           {matchedTypes}",
          "113:           {matchedFields}",
          "114:         </div>",
          "119:   return (",
          "120:     <div className=\"doc-search-items\">",
          "121:       {matchedWithin}",
          "122:       {matchedTypes}",
          "123:       {matchedFields}",
          "124:     </div>",
          "125:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/TypeDoc.tsx||packages/graphiql/src/components/DocExplorer/TypeDoc.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/TypeDoc.tsx -> packages/graphiql/src/components/DocExplorer/TypeDoc.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import {",
          "16:   GraphQLEnumValue,",
          "17: } from 'graphql';",
          "20: import Argument from './Argument';",
          "21: import MarkdownContent from './MarkdownContent';",
          "22: import TypeLink from './TypeLink';",
          "44:   }",
          "52:   }",
          "82:           ))}",
          "107:         </div>",
          "108:       );",
          "135:     }",
          "142:         <div className=\"doc-category\">",
          "147:               <EnumValue key={value.name} value={value} />",
          "149:         </div>",
          "150:       );",
          "171:     }",
          "189:   }",
          "192: }",
          "194: type FieldProps = {",
          "196:   field: ExplorerFieldDef;",
          "199: };",
          "202:   return (",
          "203:     <div className=\"doc-category-item\">",
          "209:       {'args' in field &&",
          "210:         field.args &&",
          "211:         field.args.length > 0 && [",
          "",
          "[Removed Lines]",
          "8: import React, { ReactNode } from 'react';",
          "10:   GraphQLSchema,",
          "11:   GraphQLObjectType,",
          "12:   GraphQLInterfaceType,",
          "13:   GraphQLUnionType,",
          "14:   GraphQLEnumType,",
          "15:   GraphQLType,",
          "18: import { ExplorerFieldDef } from '@graphiql/react';",
          "23: import DefaultValue from './DefaultValue';",
          "24: import { OnClickTypeFunction, OnClickFieldFunction } from './types';",
          "26: type TypeDocProps = {",
          "27:   schema: GraphQLSchema;",
          "28:   type: GraphQLType;",
          "29:   onClickType: OnClickTypeFunction;",
          "30:   onClickField: OnClickFieldFunction;",
          "31: };",
          "33: type TypeDocState = {",
          "34:   showDeprecated: boolean;",
          "35: };",
          "37: export default class TypeDoc extends React.Component<",
          "38:   TypeDocProps,",
          "39:   TypeDocState",
          "40: > {",
          "41:   constructor(props: TypeDocProps) {",
          "42:     super(props);",
          "43:     this.state = { showDeprecated: false };",
          "46:   shouldComponentUpdate(nextProps: TypeDocProps, nextState: TypeDocState) {",
          "47:     return (",
          "48:       this.props.type !== nextProps.type ||",
          "49:       this.props.schema !== nextProps.schema ||",
          "50:       this.state.showDeprecated !== nextState.showDeprecated",
          "51:     );",
          "54:   render() {",
          "55:     const schema = this.props.schema;",
          "56:     const type = this.props.type;",
          "57:     const onClickType = this.props.onClickType;",
          "58:     const onClickField = this.props.onClickField;",
          "60:     let typesTitle: string | null = null;",
          "61:     let types: readonly (GraphQLObjectType | GraphQLInterfaceType)[] = [];",
          "62:     if (type instanceof GraphQLUnionType) {",
          "63:       typesTitle = 'possible types';",
          "64:       types = schema.getPossibleTypes(type);",
          "65:     } else if (type instanceof GraphQLInterfaceType) {",
          "66:       typesTitle = 'implementations';",
          "67:       types = schema.getPossibleTypes(type);",
          "68:     } else if (type instanceof GraphQLObjectType) {",
          "69:       typesTitle = 'implements';",
          "70:       types = type.getInterfaces();",
          "71:     }",
          "73:     let typesDef;",
          "74:     if (types && types.length > 0) {",
          "75:       typesDef = (",
          "76:         <div id=\"doc-types\" className=\"doc-category\">",
          "77:           <div className=\"doc-category-title\">{typesTitle}</div>",
          "78:           {types.map(subtype => (",
          "79:             <div key={subtype.name} className=\"doc-category-item\">",
          "80:               <TypeLink type={subtype} onClick={onClickType} />",
          "81:             </div>",
          "83:         </div>",
          "84:       );",
          "85:     }",
          "88:     let fieldsDef;",
          "89:     let deprecatedFieldsDef;",
          "90:     if (type && 'getFields' in type) {",
          "91:       const fieldMap = type.getFields();",
          "92:       const fields = Object.keys(fieldMap).map(name => fieldMap[name]);",
          "93:       fieldsDef = (",
          "94:         <div id=\"doc-fields\" className=\"doc-category\">",
          "95:           <div className=\"doc-category-title\">fields</div>",
          "96:           {fields",
          "97:             .filter(field => !field.deprecationReason)",
          "98:             .map(field => (",
          "99:               <Field",
          "100:                 key={field.name}",
          "101:                 type={type}",
          "102:                 field={field}",
          "103:                 onClickType={onClickType}",
          "104:                 onClickField={onClickField}",
          "105:               />",
          "106:             ))}",
          "110:       const deprecatedFields = fields.filter(field =>",
          "111:         Boolean(field.deprecationReason),",
          "112:       );",
          "113:       if (deprecatedFields.length > 0) {",
          "114:         deprecatedFieldsDef = (",
          "115:           <div id=\"doc-deprecated-fields\" className=\"doc-category\">",
          "116:             <div className=\"doc-category-title\">deprecated fields</div>",
          "117:             {!this.state.showDeprecated ? (",
          "118:               <button className=\"show-btn\" onClick={this.handleShowDeprecated}>",
          "119:                 Show deprecated fields...",
          "120:               </button>",
          "121:             ) : (",
          "122:               deprecatedFields.map(field => (",
          "123:                 <Field",
          "124:                   key={field.name}",
          "125:                   type={type}",
          "126:                   field={field}",
          "127:                   onClickType={onClickType}",
          "128:                   onClickField={onClickField}",
          "129:                 />",
          "130:               ))",
          "131:             )}",
          "132:           </div>",
          "133:         );",
          "134:       }",
          "137:     let valuesDef: ReactNode;",
          "138:     let deprecatedValuesDef: ReactNode;",
          "139:     if (type instanceof GraphQLEnumType) {",
          "140:       const values = type.getValues();",
          "141:       valuesDef = (",
          "143:           <div className=\"doc-category-title\">values</div>",
          "144:           {values",
          "145:             .filter(value => Boolean(!value.deprecationReason))",
          "146:             .map(value => (",
          "148:             ))}",
          "152:       const deprecatedValues = values.filter(value =>",
          "153:         Boolean(value.deprecationReason),",
          "154:       );",
          "155:       if (deprecatedValues.length > 0) {",
          "156:         deprecatedValuesDef = (",
          "157:           <div className=\"doc-category\">",
          "158:             <div className=\"doc-category-title\">deprecated values</div>",
          "159:             {!this.state.showDeprecated ? (",
          "160:               <button className=\"show-btn\" onClick={this.handleShowDeprecated}>",
          "161:                 Show deprecated values...",
          "162:               </button>",
          "163:             ) : (",
          "164:               deprecatedValues.map(value => (",
          "165:                 <EnumValue key={value.name} value={value} />",
          "166:               ))",
          "167:             )}",
          "168:           </div>",
          "169:         );",
          "170:       }",
          "173:     return (",
          "174:       <div>",
          "175:         <MarkdownContent",
          "176:           className=\"doc-type-description\"",
          "177:           markdown={",
          "178:             ('description' in type && type.description) || 'No Description'",
          "179:           }",
          "180:         />",
          "181:         {type instanceof GraphQLObjectType && typesDef}",
          "182:         {fieldsDef}",
          "183:         {deprecatedFieldsDef}",
          "184:         {valuesDef}",
          "185:         {deprecatedValuesDef}",
          "186:         {!(type instanceof GraphQLObjectType) && typesDef}",
          "187:       </div>",
          "188:     );",
          "191:   handleShowDeprecated = () => this.setState({ showDeprecated: true });",
          "195:   type: GraphQLType;",
          "197:   onClickType: OnClickTypeFunction;",
          "198:   onClickField: OnClickFieldFunction;",
          "201: function Field({ type, field, onClickType, onClickField }: FieldProps) {",
          "204:       <a",
          "205:         className=\"field-name\"",
          "206:         onClick={event => onClickField(field, type, event)}>",
          "207:         {field.name}",
          "208:       </a>",
          "",
          "[Added Lines]",
          "9:   ExplorerFieldDef,",
          "10:   useExplorerContext,",
          "11:   useSchemaContext,",
          "12: } from '@graphiql/react';",
          "13: import {",
          "15:   GraphQLInterfaceType,",
          "16:   GraphQLNamedType,",
          "17:   GraphQLObjectType,",
          "18:   isEnumType,",
          "19:   isInterfaceType,",
          "20:   isNamedType,",
          "21:   isObjectType,",
          "22:   isUnionType,",
          "24: import React, { ReactNode, useState } from 'react';",
          "27: import DefaultValue from './DefaultValue';",
          "28: import FieldLink from './FieldLink';",
          "32: export default function TypeDoc() {",
          "33:   const { schema } = useSchemaContext({ nonNull: true });",
          "34:   const { explorerNavStack } = useExplorerContext({ nonNull: true });",
          "35:   const [showDeprecated, setShowDeprecated] = useState(false);",
          "37:   const navItem = explorerNavStack[explorerNavStack.length - 1];",
          "38:   const type = navItem.def;",
          "40:   if (!schema || !isNamedType(type)) {",
          "41:     return null;",
          "44:   let typesTitle: string | null = null;",
          "45:   let types: readonly (GraphQLObjectType | GraphQLInterfaceType)[] = [];",
          "46:   if (isUnionType(type)) {",
          "47:     typesTitle = 'possible types';",
          "48:     types = schema.getPossibleTypes(type);",
          "49:   } else if (isInterfaceType(type)) {",
          "50:     typesTitle = 'implementations';",
          "51:     types = schema.getPossibleTypes(type);",
          "52:   } else if (isObjectType(type)) {",
          "53:     typesTitle = 'implements';",
          "54:     types = type.getInterfaces();",
          "57:   let typesDef;",
          "58:   if (types && types.length > 0) {",
          "59:     typesDef = (",
          "60:       <div id=\"doc-types\" className=\"doc-category\">",
          "61:         <div className=\"doc-category-title\">{typesTitle}</div>",
          "62:         {types.map(subtype => (",
          "63:           <div key={subtype.name} className=\"doc-category-item\">",
          "64:             <TypeLink type={subtype} />",
          "65:           </div>",
          "66:         ))}",
          "67:       </div>",
          "68:     );",
          "69:   }",
          "72:   let fieldsDef;",
          "73:   let deprecatedFieldsDef;",
          "74:   if (type && 'getFields' in type) {",
          "75:     const fieldMap = type.getFields();",
          "76:     const fields = Object.keys(fieldMap).map(name => fieldMap[name]);",
          "77:     fieldsDef = (",
          "78:       <div id=\"doc-fields\" className=\"doc-category\">",
          "79:         <div className=\"doc-category-title\">fields</div>",
          "80:         {fields",
          "81:           .filter(field => !field.deprecationReason)",
          "82:           .map(field => (",
          "83:             <Field key={field.name} type={type} field={field} />",
          "85:       </div>",
          "86:     );",
          "88:     const deprecatedFields = fields.filter(field =>",
          "89:       Boolean(field.deprecationReason),",
          "90:     );",
          "91:     if (deprecatedFields.length > 0) {",
          "92:       deprecatedFieldsDef = (",
          "93:         <div id=\"doc-deprecated-fields\" className=\"doc-category\">",
          "94:           <div className=\"doc-category-title\">deprecated fields</div>",
          "95:           {!showDeprecated ? (",
          "96:             <button",
          "97:               className=\"show-btn\"",
          "98:               onClick={() => {",
          "99:                 setShowDeprecated(true);",
          "100:               }}>",
          "101:               Show deprecated fields...",
          "102:             </button>",
          "103:           ) : (",
          "104:             deprecatedFields.map(field => (",
          "105:               <Field key={field.name} type={type} field={field} />",
          "106:             ))",
          "107:           )}",
          "111:   }",
          "113:   let valuesDef: ReactNode;",
          "114:   let deprecatedValuesDef: ReactNode;",
          "115:   if (isEnumType(type)) {",
          "116:     const values = type.getValues();",
          "117:     valuesDef = (",
          "118:       <div className=\"doc-category\">",
          "119:         <div className=\"doc-category-title\">values</div>",
          "120:         {values",
          "121:           .filter(value => Boolean(!value.deprecationReason))",
          "122:           .map(value => (",
          "123:             <EnumValue key={value.name} value={value} />",
          "124:           ))}",
          "125:       </div>",
          "126:     );",
          "128:     const deprecatedValues = values.filter(value =>",
          "129:       Boolean(value.deprecationReason),",
          "130:     );",
          "131:     if (deprecatedValues.length > 0) {",
          "132:       deprecatedValuesDef = (",
          "134:           <div className=\"doc-category-title\">deprecated values</div>",
          "135:           {!showDeprecated ? (",
          "136:             <button",
          "137:               className=\"show-btn\"",
          "138:               onClick={() => {",
          "139:                 setShowDeprecated(true);",
          "140:               }}>",
          "141:               Show deprecated values...",
          "142:             </button>",
          "143:           ) : (",
          "144:             deprecatedValues.map(value => (",
          "146:             ))",
          "147:           )}",
          "153:   return (",
          "154:     <div>",
          "155:       <MarkdownContent",
          "156:         className=\"doc-type-description\"",
          "157:         markdown={",
          "158:           ('description' in type && type.description) || 'No Description'",
          "159:         }",
          "160:       />",
          "161:       {isObjectType(type) && typesDef}",
          "162:       {fieldsDef}",
          "163:       {deprecatedFieldsDef}",
          "164:       {valuesDef}",
          "165:       {deprecatedValuesDef}",
          "166:       {!isObjectType(type) && typesDef}",
          "167:     </div>",
          "168:   );",
          "172:   type: GraphQLNamedType;",
          "176: function Field({ field }: FieldProps) {",
          "179:       <FieldLink field={field} />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:             {field.args",
          "215:               .filter(arg => !arg.deprecationReason)",
          "216:               .map(arg => (",
          "218:               ))}",
          "219:           </span>,",
          "220:           ')',",
          "221:         ]}",
          "222:       {': '}",
          "224:       <DefaultValue field={field} />",
          "225:       {field.description && (",
          "226:         <MarkdownContent",
          "",
          "[Removed Lines]",
          "217:                 <Argument key={arg.name} arg={arg} onClickType={onClickType} />",
          "223:       <TypeLink type={field.type} onClick={onClickType} />",
          "",
          "[Added Lines]",
          "188:                 <Argument key={arg.name} arg={arg} />",
          "194:       <TypeLink type={field.type} />",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/TypeLink.tsx||packages/graphiql/src/components/DocExplorer/TypeLink.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/TypeLink.tsx -> packages/graphiql/src/components/DocExplorer/TypeLink.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "19: type TypeLinkProps = {",
          "22: };",
          "24: export default function TypeLink(props: TypeLinkProps) {",
          "32:   }",
          "35:   }",
          "36:   return (",
          "37:     <a",
          "38:       className=\"type-name\"",
          "39:       onClick={event => {",
          "40:         event.preventDefault();",
          "42:       }}",
          "43:       href=\"#\">",
          "45:     </a>",
          "46:   );",
          "47: }",
          "",
          "[Removed Lines]",
          "9: import {",
          "10:   GraphQLList,",
          "11:   GraphQLNonNull,",
          "12:   GraphQLType,",
          "13:   GraphQLNamedType,",
          "14: } from 'graphql';",
          "15: import { OnClickTypeFunction } from './types';",
          "17: import { Maybe } from '../../types';",
          "20:   type?: Maybe<GraphQLType>;",
          "21:   onClick?: OnClickTypeFunction;",
          "25:   const onClick = props.onClick ? props.onClick : () => null;",
          "26:   return renderType(props.type, onClick);",
          "27: }",
          "29: function renderType(type: Maybe<GraphQLType>, onClick: OnClickTypeFunction) {",
          "30:   if (type instanceof GraphQLNonNull) {",
          "31:     return <span>{renderType(type.ofType, onClick)}!</span>;",
          "33:   if (type instanceof GraphQLList) {",
          "34:     return <span>[{renderType(type.ofType, onClick)}]</span>;",
          "41:         onClick(type as GraphQLNamedType, event);",
          "44:       {type?.name}",
          "",
          "[Added Lines]",
          "8: import { useExplorerContext } from '@graphiql/react';",
          "9: import { GraphQLType, isListType, isNonNullType } from 'graphql';",
          "13:   type: GraphQLType;",
          "17:   const { push } = useExplorerContext({ nonNull: true, caller: TypeLink });",
          "19:   if (!props.type) {",
          "20:     return null;",
          "21:   }",
          "23:   const type = props.type;",
          "24:   if (isNonNullType(type)) {",
          "25:     return (",
          "26:       <>",
          "27:         <TypeLink type={type.ofType} />!",
          "28:       </>",
          "29:     );",
          "31:   if (isListType(type)) {",
          "32:     return (",
          "33:       <>",
          "34:         [<TypeLink type={type.ofType} />]",
          "35:       </>",
          "36:     );",
          "43:         push({ name: type.name, def: type });",
          "46:       {type.name}",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/FieldDoc.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "11: import FieldDoc from '../FieldDoc';",
          "15: const exampleObject = new GraphQLObjectType({",
          "16:   name: 'Query',",
          "17:   fields: {",
          "18:     string: {",
          "20:       type: GraphQLString,",
          "21:     },",
          "22:     stringWithArgs: {",
          "24:       type: GraphQLString,",
          "25:       description: 'Example String field with arguments',",
          "26:       args: {",
          "27:         stringArg: {",
          "29:           type: GraphQLString,",
          "30:         },",
          "31:         deprecatedStringArg: {",
          "33:           type: GraphQLString,",
          "34:           deprecationReason: 'no longer used',",
          "35:         },",
          "36:       },",
          "37:     },",
          "38:     stringWithDirective: {",
          "40:       type: GraphQLString,",
          "41:       astNode: {",
          "43:         name: {",
          "45:           value: 'stringWithDirective',",
          "46:         },",
          "47:         type: {",
          "49:           name: {",
          "51:             value: 'GraphQLString',",
          "52:           },",
          "53:         },",
          "54:         directives: [",
          "55:           {",
          "57:             name: {",
          "59:               value: 'development',",
          "60:             },",
          "61:           },",
          "",
          "[Removed Lines]",
          "9: import { render, fireEvent } from '@testing-library/react';",
          "13: import { GraphQLString, GraphQLObjectType } from 'graphql';",
          "19:       name: 'simpleStringField',",
          "23:       name: 'stringWithArgs',",
          "28:           name: 'stringArg',",
          "32:           name: 'deprecatedStringArg',",
          "39:       name: 'stringWithDirective',",
          "42:         kind: 'FieldDefinition',",
          "44:           kind: 'Name',",
          "48:           kind: 'NamedType',",
          "50:             kind: 'Name',",
          "56:             kind: 'Directive',",
          "58:               kind: 'Name',",
          "",
          "[Added Lines]",
          "8: import { ExplorerContext, ExplorerFieldDef } from '@graphiql/react';",
          "9: import {",
          "11:   fireEvent,",
          "12:   render,",
          "13: } from '@testing-library/react';",
          "14: import { GraphQLString, GraphQLObjectType, Kind } from 'graphql';",
          "18: import { mockExplorerContextValue } from './test-utils';",
          "42:         kind: Kind.FIELD_DEFINITION,",
          "44:           kind: Kind.NAME,",
          "48:           kind: Kind.NAMED_TYPE,",
          "50:             kind: Kind.NAME,",
          "56:             kind: Kind.DIRECTIVE,",
          "58:               kind: Kind.NAME,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   },",
          "66: });",
          "68: describe('FieldDoc', () => {",
          "69:   it('should render a simple string field', () => {",
          "70:     const { container } = render(",
          "75:     );",
          "76:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "77:       'No Description',",
          "",
          "[Removed Lines]",
          "71:       <FieldDoc",
          "72:         field={exampleObject.getFields().string}",
          "73:         onClickType={jest.fn()}",
          "74:       />,",
          "",
          "[Added Lines]",
          "68: function FieldDocWithContext(props: { field: ExplorerFieldDef }) {",
          "69:   return (",
          "70:     <ExplorerContext.Provider",
          "71:       value={mockExplorerContextValue({",
          "72:         name: props.field.name,",
          "73:         def: props.field,",
          "74:       })}>",
          "75:       <FieldDoc />",
          "76:     </ExplorerContext.Provider>",
          "77:   );",
          "78: }",
          "83:       <FieldDocWithContext field={exampleObject.getFields().string} />,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   it('should re-render on field change', () => {",
          "84:     const { container, rerender } = render(",
          "89:     );",
          "90:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "91:       'No Description',",
          "",
          "[Removed Lines]",
          "85:       <FieldDoc",
          "86:         field={exampleObject.getFields().string}",
          "87:         onClickType={jest.fn()}",
          "88:       />,",
          "",
          "[Added Lines]",
          "94:       <FieldDocWithContext field={exampleObject.getFields().string} />,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     expect(container.querySelector('.arg')).not.toBeInTheDocument();",
          "96:     rerender(",
          "101:     );",
          "102:     expect(container.querySelector('.type-name')).toHaveTextContent('String');",
          "103:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "",
          "[Removed Lines]",
          "97:       <FieldDoc",
          "98:         field={exampleObject.getFields().stringWithArgs}",
          "99:         onClickType={jest.fn()}",
          "100:       />,",
          "",
          "[Added Lines]",
          "103:       <FieldDocWithContext field={exampleObject.getFields().stringWithArgs} />,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:   it('should render a string field with arguments', () => {",
          "109:     const { container } = render(",
          "114:     );",
          "115:     expect(container.querySelector('.type-name')).toHaveTextContent('String');",
          "116:     expect(container.querySelector('.doc-type-description')).toHaveTextContent(",
          "",
          "[Removed Lines]",
          "110:       <FieldDoc",
          "111:         field={exampleObject.getFields().stringWithArgs}",
          "112:         onClickType={jest.fn()}",
          "113:       />,",
          "",
          "[Added Lines]",
          "113:       <FieldDocWithContext field={exampleObject.getFields().stringWithArgs} />,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:   it('should render a string field with directives', () => {",
          "133:     const { container } = render(",
          "135:         field={exampleObject.getFields().stringWithDirective}",
          "137:       />,",
          "138:     );",
          "139:     expect(container.querySelector('.type-name')).toHaveTextContent('String');",
          "",
          "[Removed Lines]",
          "134:       <FieldDoc",
          "136:         onClickType={jest.fn()}",
          "",
          "[Added Lines]",
          "134:       <FieldDocWithContext",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React from 'react';",
          "15: import {",
          "16:   ExampleSchema,",
          "",
          "[Removed Lines]",
          "9: import { render, fireEvent } from '@testing-library/react';",
          "11: import { GraphQLString } from 'graphql';",
          "13: import TypeDoc from '../TypeDoc';",
          "",
          "[Added Lines]",
          "8: import { ExplorerContext, SchemaContext } from '@graphiql/react';",
          "9: import {",
          "11:   fireEvent,",
          "12:   render,",
          "13: } from '@testing-library/react';",
          "14: import { GraphQLNamedType } from 'graphql';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   ExampleUnion,",
          "19:   ExampleEnum,",
          "20: } from '../../__tests__/ExampleSchema';",
          "22: describe('TypeDoc', () => {",
          "23:   it('renders a top-level query object type', () => {",
          "32:     const description = container.querySelectorAll('.doc-type-description');",
          "33:     expect(description).toHaveLength(1);",
          "34:     expect(description[0]).toHaveTextContent('Query description\\nSecond line', {",
          "",
          "[Removed Lines]",
          "24:     const { container } = render(",
          "26:       <TypeDoc",
          "27:         schema={ExampleSchema}",
          "28:         type={ExampleQuery}",
          "29:         onClickType={jest.fn()}",
          "30:       />,",
          "31:     );",
          "",
          "[Added Lines]",
          "23: import TypeDoc from '../TypeDoc';",
          "24: import { mockExplorerContextValue, unwrapType } from './test-utils';",
          "26: function TypeDocWithContext(props: { type: GraphQLNamedType }) {",
          "27:   return (",
          "28:     <SchemaContext.Provider",
          "29:       value={{",
          "30:         fetchError: null,",
          "31:         isFetching: false,",
          "32:         schema: ExampleSchema,",
          "33:         setFetchError() {},",
          "34:         setSchema() {},",
          "35:         validationErrors: null,",
          "36:       }}>",
          "37:       <ExplorerContext.Provider",
          "38:         value={mockExplorerContextValue({",
          "39:           name: unwrapType(props.type).name,",
          "40:           def: props.type,",
          "41:         })}>",
          "42:         <TypeDoc />",
          "43:       </ExplorerContext.Provider>",
          "44:     </SchemaContext.Provider>",
          "45:   );",
          "46: }",
          "50:     const { container } = render(<TypeDocWithContext type={ExampleQuery} />);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     );",
          "44:   });",
          "68:   it('renders deprecated fields when you click to see them', () => {",
          "77:     let cats = container.querySelectorAll('.doc-category-item');",
          "78:     expect(cats).toHaveLength(3);",
          "",
          "[Removed Lines]",
          "46:   it('handles onClickField and onClickType', () => {",
          "47:     const onClickType = jest.fn();",
          "48:     const onClickField = jest.fn();",
          "49:     const { container } = render(",
          "50:       <TypeDoc",
          "51:         schema={ExampleSchema}",
          "52:         type={ExampleQuery}",
          "53:         onClickType={onClickType}",
          "54:         onClickField={onClickField}",
          "55:       />,",
          "56:     );",
          "57:     fireEvent.click(container.querySelector('.type-name')!);",
          "58:     expect(onClickType.mock.calls.length).toEqual(1);",
          "59:     expect(onClickType.mock.calls[0][0]).toEqual(GraphQLString);",
          "61:     fireEvent.click(container.querySelector('.field-name')!);",
          "62:     expect(onClickField.mock.calls.length).toEqual(1);",
          "63:     expect(onClickField.mock.calls[0][0].name).toEqual('string');",
          "64:     expect(onClickField.mock.calls[0][0].type).toEqual(GraphQLString);",
          "65:     expect(onClickField.mock.calls[0][1]).toEqual(ExampleQuery);",
          "66:   });",
          "69:     const { container } = render(",
          "71:       <TypeDoc",
          "72:         schema={ExampleSchema}",
          "73:         type={ExampleQuery}",
          "74:         onClickType={jest.fn()}",
          "75:       />,",
          "76:     );",
          "",
          "[Added Lines]",
          "66:     const { container } = render(<TypeDocWithContext type={ExampleQuery} />);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:   });",
          "92:   it('renders a Union type', () => {",
          "97:     expect(container.querySelector('.doc-category-title')).toHaveTextContent(",
          "98:       'possible types',",
          "99:     );",
          "100:   });",
          "102:   it('renders an Enum type', () => {",
          "107:     expect(container.querySelector('.doc-category-title')).toHaveTextContent(",
          "108:       'values',",
          "109:     );",
          "",
          "[Removed Lines]",
          "93:     const { container } = render(",
          "95:       <TypeDoc schema={ExampleSchema} type={ExampleUnion} />,",
          "96:     );",
          "103:     const { container } = render(",
          "105:       <TypeDoc schema={ExampleSchema} type={ExampleEnum} />,",
          "106:     );",
          "",
          "[Added Lines]",
          "83:     const { container } = render(<TypeDocWithContext type={ExampleUnion} />);",
          "90:     const { container } = render(<TypeDocWithContext type={ExampleEnum} />);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:   it('shows deprecated enum values on click', () => {",
          "116:     const { getByText, container } = render(",
          "119:     );",
          "120:     const showBtn = getByText('Show deprecated values...');",
          "121:     expect(showBtn).toBeInTheDocument();",
          "",
          "[Removed Lines]",
          "118:       <TypeDoc schema={ExampleSchema} type={ExampleEnum} />,",
          "",
          "[Added Lines]",
          "101:       <TypeDocWithContext type={ExampleEnum} />,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/TypeLink.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import TypeLink from '../TypeLink';",
          "15: const nonNullType = new GraphQLNonNull(GraphQLString);",
          "16: const listType = new GraphQLList(GraphQLString);",
          "18: describe('TypeLink', () => {",
          "19:   it('should render a string', () => {",
          "21:     expect(container).toHaveTextContent('String');",
          "22:     expect(container.querySelectorAll('a')).toHaveLength(1);",
          "23:     expect(container.querySelector('a')).toHaveClass('type-name');",
          "24:   });",
          "25:   it('should render a nonnull type', () => {",
          "27:     expect(container).toHaveTextContent('String!');",
          "28:     expect(container.querySelectorAll('span')).toHaveLength(1);",
          "29:   });",
          "30:   it('should render a list type', () => {",
          "32:     expect(container).toHaveTextContent('[String]');",
          "33:     expect(container.querySelectorAll('span')).toHaveLength(1);",
          "34:   });",
          "38:     fireEvent.click(container.querySelector('a')!);",
          "41:   });",
          "42:   it('should re-render on type change', () => {",
          "44:     expect(container).toHaveTextContent('[String]');",
          "46:     expect(container).toHaveTextContent('String');",
          "47:   });",
          "48: });",
          "",
          "[Removed Lines]",
          "8: import React from 'react';",
          "9: import { render, fireEvent } from '@testing-library/react';",
          "13: import { GraphQLNonNull, GraphQLList, GraphQLString } from 'graphql';",
          "20:     const { container } = render(<TypeLink type={GraphQLString} />);",
          "26:     const { container } = render(<TypeLink type={nonNullType} />);",
          "31:     const { container } = render(<TypeLink type={listType} />);",
          "35:   it('should handle a click event', () => {",
          "36:     const op = jest.fn();",
          "37:     const { container } = render(<TypeLink type={listType} onClick={op} />);",
          "39:     expect(op.mock.calls.length).toEqual(1);",
          "40:     expect(op.mock.calls[0][0]).toEqual(GraphQLString);",
          "43:     const { container, rerender } = render(<TypeLink type={listType} />);",
          "45:     rerender(<TypeLink type={GraphQLString} />);",
          "",
          "[Added Lines]",
          "8: import { ExplorerContext } from '@graphiql/react';",
          "9: import {",
          "11:   fireEvent,",
          "12:   render,",
          "13: } from '@testing-library/react';",
          "14: import { GraphQLNonNull, GraphQLList, GraphQLString } from 'graphql';",
          "15: import React, { ComponentProps } from 'react';",
          "18: import { mockExplorerContextValue, unwrapType } from './test-utils';",
          "23: function TypeLinkWithContext(props: ComponentProps<typeof TypeLink>) {",
          "24:   return (",
          "25:     <ExplorerContext.Provider",
          "26:       value={mockExplorerContextValue({",
          "27:         name: unwrapType(props.type).name,",
          "28:         def: unwrapType(props.type),",
          "29:       })}>",
          "30:       <TypeLink {...props} />",
          "31:       {/* Print the top of the current nav stack for test assertions */}",
          "32:       <ExplorerContext.Consumer>",
          "33:         {({ explorerNavStack }) => (",
          "34:           <span data-testid=\"nav-stack\">",
          "35:             {JSON.stringify(explorerNavStack[explorerNavStack.length + 1])}",
          "36:           </span>",
          "37:         )}",
          "38:       </ExplorerContext.Consumer>",
          "39:     </ExplorerContext.Provider>",
          "40:   );",
          "41: }",
          "45:     const { container } = render(<TypeLinkWithContext type={GraphQLString} />);",
          "51:     const { container } = render(<TypeLinkWithContext type={nonNullType} />);",
          "56:     const { container } = render(<TypeLinkWithContext type={listType} />);",
          "60:   it('should push to the nav stack on click', () => {",
          "61:     const { container, getByTestId } = render(",
          "62:       <TypeLinkWithContext type={listType} />,",
          "63:     );",
          "65:     expect(getByTestId('nav-stack')).toHaveTextContent('');",
          "68:     const { container, rerender } = render(",
          "69:       <TypeLinkWithContext type={listType} />,",
          "70:     );",
          "72:     rerender(<TypeLinkWithContext type={GraphQLString} />);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts||packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts -> packages/graphiql/src/components/DocExplorer/__tests__/test-utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { ExplorerContextType, ExplorerNavStackItem } from '@graphiql/react';",
          "2: import { GraphQLNamedType, GraphQLType } from 'graphql';",
          "4: export function mockExplorerContextValue(",
          "5:   navStackItem: ExplorerNavStackItem,",
          "6: ): ExplorerContextType {",
          "7:   return {",
          "8:     explorerNavStack: [navStackItem],",
          "9:     hide() {},",
          "10:     isVisible: true,",
          "11:     pop() {},",
          "12:     push() {},",
          "13:     reset() {},",
          "14:     show() {},",
          "15:     showSearch() {},",
          "16:   };",
          "17: }",
          "19: export function unwrapType(type: GraphQLType): GraphQLNamedType {",
          "20:   return 'ofType' in type ? unwrapType(type.ofType) : type;",
          "21: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/types.ts||packages/graphiql/src/components/DocExplorer/types.ts": [
          "File: packages/graphiql/src/components/DocExplorer/types.ts -> packages/graphiql/src/components/DocExplorer/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad4486934ba69247efd33ee500e30f8236ecd079",
      "candidate_info": {
        "commit_hash": "ad4486934ba69247efd33ee500e30f8236ecd079",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/ad4486934ba69247efd33ee500e30f8236ecd079",
        "files": [
          ".changeset/olive-seals-shake.md",
          "packages/graphiql-react/src/editor/__tests__/common.spec.ts",
          "packages/graphiql-react/src/editor/components/image-preview.tsx",
          "packages/graphiql-react/src/editor/components/index.ts",
          "packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/ImagePreview.tsx",
          "packages/graphiql/src/components/ResultViewer.tsx",
          "packages/graphiql/src/types.ts",
          "packages/graphiql/src/utility/CodeMirrorSizer.ts",
          "packages/graphiql/src/utility/commonKeys.ts",
          "packages/graphiql/src/utility/importCodeMirror.ts"
        ],
        "message": "add `useResponseEditor` hook to `@graphiql/react` (#2411)\n\n* refactor image preview\n\n* move ImagePreview to @graphiql/react\n\n* add useResultEditor to @graphiql/react\n\n* rename result-editor to response-editor\n\n* add changeset\n\n* mock useResponseEditor in tests\n\n* move test file to @graphiql/react\n\n* clean up image preview state\n\n* avoid using refs in e2e tests",
        "before_after_code_files": [
          "packages/graphiql/src/utility/__tests__/importCodeMirror.spec.ts||packages/graphiql-react/src/editor/__tests__/common.spec.ts",
          "packages/graphiql-react/src/editor/components/image-preview.tsx||packages/graphiql-react/src/editor/components/image-preview.tsx",
          "packages/graphiql-react/src/editor/components/index.ts||packages/graphiql-react/src/editor/components/index.ts",
          "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/ImagePreview.tsx||packages/graphiql/src/components/ImagePreview.tsx",
          "packages/graphiql/src/components/ResultViewer.tsx||packages/graphiql/src/components/ResultViewer.tsx",
          "packages/graphiql/src/types.ts||packages/graphiql/src/types.ts",
          "packages/graphiql/src/utility/CodeMirrorSizer.ts||packages/graphiql/src/utility/CodeMirrorSizer.ts",
          "packages/graphiql/src/utility/commonKeys.ts||packages/graphiql/src/utility/commonKeys.ts",
          "packages/graphiql/src/utility/importCodeMirror.ts||packages/graphiql/src/utility/importCodeMirror.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/utility/__tests__/importCodeMirror.spec.ts||packages/graphiql-react/src/editor/__tests__/common.spec.ts": [
          "File: packages/graphiql/src/utility/__tests__/importCodeMirror.spec.ts -> packages/graphiql-react/src/editor/__tests__/common.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: describe('importCodeMirror', () => {",
          "4:   it('should dynamically load codemirror module', async () => {",
          "",
          "[Removed Lines]",
          "1: import { importCodeMirror } from '../importCodeMirror';",
          "",
          "[Added Lines]",
          "1: import { importCodeMirror } from '../common';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/components/image-preview.tsx||packages/graphiql-react/src/editor/components/image-preview.tsx": [
          "File: packages/graphiql-react/src/editor/components/image-preview.tsx -> packages/graphiql-react/src/editor/components/image-preview.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Token } from 'codemirror';",
          "2: import { useEffect, useRef, useState } from 'react';",
          "4: type ImagePreviewProps = { token: Token };",
          "6: type Dimensions = {",
          "7:   width: number | null;",
          "8:   height: number | null;",
          "9: };",
          "11: export function ImagePreview(props: ImagePreviewProps) {",
          "12:   const [dimensions, setDimensions] = useState<Dimensions>({",
          "13:     width: null,",
          "14:     height: null,",
          "15:   });",
          "16:   const [mime, setMime] = useState<string | null>(null);",
          "18:   const ref = useRef<HTMLImageElement>(null);",
          "20:   const src = tokenToURL(props.token)?.href;",
          "22:   useEffect(() => {",
          "23:     if (!ref.current) {",
          "24:       return;",
          "25:     }",
          "26:     if (!src) {",
          "27:       setDimensions({ width: null, height: null });",
          "28:       setMime(null);",
          "29:       return;",
          "30:     }",
          "32:     fetch(src, { method: 'HEAD' })",
          "33:       .then(response => {",
          "34:         setMime(response.headers.get('Content-Type'));",
          "35:       })",
          "36:       .catch(() => {",
          "37:         setMime(null);",
          "38:       });",
          "39:   }, [src]);",
          "41:   const dims =",
          "42:     dimensions.width !== null && dimensions.height !== null ? (",
          "43:       <div>",
          "44:         {dimensions.width}x{dimensions.height}",
          "45:         {mime !== null ? ' ' + mime : null}",
          "46:       </div>",
          "47:     ) : null;",
          "49:   return (",
          "50:     <div>",
          "51:       <img",
          "52:         onLoad={() => {",
          "53:           setDimensions({",
          "54:             width: ref.current?.naturalWidth ?? null,",
          "55:             height: ref.current?.naturalHeight ?? null,",
          "56:           });",
          "57:         }}",
          "58:         ref={ref}",
          "59:         src={src}",
          "60:       />",
          "61:       {dims}",
          "62:     </div>",
          "63:   );",
          "64: }",
          "66: ImagePreview.shouldRender = function shouldRender(token: Token) {",
          "67:   const url = tokenToURL(token);",
          "68:   return url ? isImageURL(url) : false;",
          "69: };",
          "71: function tokenToURL(token: Token) {",
          "72:   if (token.type !== 'string') {",
          "73:     return;",
          "74:   }",
          "76:   const value = token.string.slice(1).slice(0, -1).trim();",
          "78:   try {",
          "79:     const location = window.location;",
          "80:     return new URL(value, location.protocol + '//' + location.host);",
          "81:   } catch (err) {",
          "82:     return;",
          "83:   }",
          "84: }",
          "86: function isImageURL(url: URL) {",
          "87:   return /(bmp|gif|jpeg|jpg|png|svg)$/.test(url.pathname);",
          "88: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/components/index.ts||packages/graphiql-react/src/editor/components/index.ts": [
          "File: packages/graphiql-react/src/editor/components/index.ts -> packages/graphiql-react/src/editor/components/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { ImagePreview } from './image-preview';",
          "3: export { ImagePreview };",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx": [
          "File: packages/graphiql-react/src/editor/context.tsx -> packages/graphiql-react/src/editor/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export type EditorContextType = {",
          "6:   headerEditor: CodeMirrorEditor | null;",
          "7:   queryEditor: CodeMirrorEditor | null;",
          "8:   variableEditor: CodeMirrorEditor | null;",
          "9:   setHeaderEditor(newEditor: CodeMirrorEditor): void;",
          "10:   setQueryEditor(newEditor: CodeMirrorEditor): void;",
          "11:   setVariableEditor(newEditor: CodeMirrorEditor): void;",
          "12: };",
          "14: export const EditorContext = createContext<EditorContextType>({",
          "15:   headerEditor: null,",
          "16:   queryEditor: null,",
          "17:   variableEditor: null,",
          "18:   setHeaderEditor() {},",
          "19:   setQueryEditor() {},",
          "20:   setVariableEditor() {},",
          "21: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   responseEditor: CodeMirrorEditor | null;",
          "12:   setResponseEditor(newEditor: CodeMirrorEditor): void;",
          "19:   responseEditor: null,",
          "23:   setResponseEditor() {},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     null,",
          "29:   );",
          "30:   const [queryEditor, setQueryEditor] = useState<CodeMirrorEditor | null>(null);",
          "31:   const [variableEditor, setVariableEditor] = useState<CodeMirrorEditor | null>(",
          "32:     null,",
          "33:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   const [responseEditor, setResponseEditor] = useState<CodeMirrorEditor | null>(",
          "36:     null,",
          "37:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:       value={{",
          "37:         headerEditor,",
          "38:         queryEditor,",
          "39:         variableEditor,",
          "40:         setHeaderEditor,",
          "41:         setQueryEditor,",
          "42:         setVariableEditor,",
          "43:       }}>",
          "44:       {props.children}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         responseEditor,",
          "50:         setResponseEditor,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts": [
          "File: packages/graphiql-react/src/editor/index.ts -> packages/graphiql-react/src/editor/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { onHasCompletion } from './completion';",
          "2: import { EditorContext, EditorContextProvider } from './context';",
          "3: import { useHeaderEditor } from './header-editor';",
          "4: import { useQueryEditor } from './query-editor';",
          "5: import { useVariableEditor } from './variable-editor';",
          "7: import type { EditorContextType } from './context';",
          "8: import type { UseHeaderEditorArgs } from './header-editor';",
          "9: import type { UseQueryEditorArgs } from './query-editor';",
          "10: import type { UseVariableEditorArgs } from './variable-editor';",
          "12: export {",
          "13:   onHasCompletion,",
          "14:   EditorContext,",
          "15:   EditorContextProvider,",
          "16:   useHeaderEditor,",
          "17:   useQueryEditor,",
          "18:   useVariableEditor,",
          "19: };",
          "21: export type {",
          "22:   EditorContextType,",
          "23:   UseHeaderEditorArgs,",
          "24:   UseQueryEditorArgs,",
          "25:   UseVariableEditorArgs,",
          "26: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { ImagePreview } from './components';",
          "6: import { useResponseEditor } from './response-editor';",
          "12: import type {",
          "13:   ResponseTooltipType,",
          "14:   UseResponseEditorArgs,",
          "15: } from './response-editor';",
          "20:   ImagePreview,",
          "25:   useResponseEditor,",
          "31:   ResponseTooltipType,",
          "34:   UseResponseEditorArgs,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { Position, Token } from 'codemirror';",
          "2: import { ComponentType, useContext, useEffect, useRef } from 'react';",
          "3: import ReactDOM from 'react-dom';",
          "5: import { commonKeys, importCodeMirror } from './common';",
          "6: import { ImagePreview } from './components';",
          "7: import { EditorContext } from './context';",
          "8: import { useResizeEditor, useSynchronizeValue } from './hooks';",
          "9: import { CodeMirrorEditor } from './types';",
          "11: export type ResponseTooltipType = ComponentType<{ pos: Position }>;",
          "13: export type UseResponseEditorArgs = {",
          "14:   ResponseTooltip?: ResponseTooltipType;",
          "15:   editorTheme?: string;",
          "16:   value?: string;",
          "17: };",
          "19: export function useResponseEditor({",
          "20:   ResponseTooltip,",
          "21:   editorTheme = 'graphiql',",
          "22:   value,",
          "23: }: UseResponseEditorArgs = {}) {",
          "24:   const context = useContext(EditorContext);",
          "25:   const ref = useRef<HTMLDivElement>(null);",
          "27:   const responseTooltipRef = useRef<ResponseTooltipType | undefined>(",
          "28:     ResponseTooltip,",
          "29:   );",
          "30:   useEffect(() => {",
          "31:     responseTooltipRef.current = ResponseTooltip;",
          "32:   }, [ResponseTooltip]);",
          "34:   if (!context) {",
          "35:     throw new Error(",
          "36:       'Tried to call the `useResponseEditor` hook without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "37:     );",
          "38:   }",
          "40:   const { responseEditor, setResponseEditor } = context;",
          "42:   useEffect(() => {",
          "43:     let isActive = true;",
          "44:     importCodeMirror(",
          "45:       [",
          "46:         import('codemirror/addon/fold/foldgutter'),",
          "47:         import('codemirror/addon/fold/brace-fold'),",
          "48:         import('codemirror/addon/dialog/dialog'),",
          "49:         import('codemirror/addon/search/search'),",
          "50:         import('codemirror/addon/search/searchcursor'),",
          "51:         import('codemirror/addon/search/jump-to-line'),",
          "53:         import('codemirror/keymap/sublime'),",
          "54:         import('codemirror-graphql/esm/results/mode'),",
          "55:         import('codemirror-graphql/esm/utils/info-addon'),",
          "56:       ],",
          "57:       { useCommonAddons: false },",
          "58:     ).then(CodeMirror => {",
          "60:       if (!isActive) {",
          "61:         return;",
          "62:       }",
          "65:       const tooltipDiv = document.createElement('div');",
          "66:       CodeMirror.registerHelper(",
          "67:         'info',",
          "68:         'graphql-results',",
          "69:         (token: Token, _options: any, _cm: CodeMirrorEditor, pos: Position) => {",
          "70:           const infoElements: JSX.Element[] = [];",
          "72:           const ResponseTooltipComponent = responseTooltipRef.current;",
          "73:           if (ResponseTooltipComponent) {",
          "74:             infoElements.push(<ResponseTooltipComponent pos={pos} />);",
          "75:           }",
          "77:           if (ImagePreview.shouldRender(token)) {",
          "78:             infoElements.push(",
          "79:               <ImagePreview key=\"image-preview\" token={token} />,",
          "80:             );",
          "81:           }",
          "83:           if (!infoElements.length) {",
          "84:             ReactDOM.unmountComponentAtNode(tooltipDiv);",
          "85:             return null;",
          "86:           }",
          "87:           ReactDOM.render(infoElements, tooltipDiv);",
          "88:           return tooltipDiv;",
          "89:         },",
          "90:       );",
          "92:       const container = ref.current;",
          "93:       if (!container) {",
          "94:         return;",
          "95:       }",
          "97:       const newEditor = CodeMirror(container, {",
          "98:         lineWrapping: true,",
          "99:         readOnly: true,",
          "100:         theme: editorTheme,",
          "101:         mode: 'graphql-results',",
          "102:         keyMap: 'sublime',",
          "103:         foldGutter: true,",
          "104:         gutters: ['CodeMirror-foldgutter'],",
          "106:         info: true,",
          "107:         extraKeys: commonKeys,",
          "108:       });",
          "110:       setResponseEditor(newEditor);",
          "111:     });",
          "113:     return () => {",
          "114:       isActive = false;",
          "115:     };",
          "116:   }, [editorTheme, setResponseEditor]);",
          "118:   useSynchronizeValue(responseEditor, value);",
          "120:   useResizeEditor(responseEditor, ref);",
          "122:   return ref;",
          "123: }",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "2:   EditorContext,",
          "3:   EditorContextProvider,",
          "4:   onHasCompletion,",
          "5:   useHeaderEditor,",
          "6:   useQueryEditor,",
          "7:   useVariableEditor,",
          "8: } from './editor';",
          "9: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:   ImagePreview,",
          "8:   useResponseEditor,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: import type {",
          "16:   EditorContextType,",
          "17:   UseHeaderEditorArgs,",
          "18:   UseQueryEditorArgs,",
          "19:   UseVariableEditorArgs,",
          "20: } from './editor';",
          "21: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   ResponseTooltipType,",
          "22:   UseResponseEditorArgs,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30:   EditorContext,",
          "31:   EditorContextProvider,",
          "32:   onHasCompletion,",
          "33:   useHeaderEditor,",
          "34:   useQueryEditor,",
          "35:   useVariableEditor,",
          "37:   ExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   ImagePreview,",
          "40:   useResponseEditor,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42: export type {",
          "44:   EditorContextType,",
          "45:   UseHeaderEditorArgs,",
          "46:   UseQueryEditorArgs,",
          "47:   UseVariableEditorArgs,",
          "49:   ExplorerContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   ResponseTooltipType,",
          "54:   UseResponseEditorArgs,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   useExplorerNavStack,",
          "7:   useHeaderEditor as _useHeaderEditor,",
          "8:   useQueryEditor as _useQueryEditor,",
          "9:   useVariableEditor as _useVariableEditor,",
          "10: } from '@graphiql/react';",
          "11: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:   useResponseEditor as _useResponseEditor,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:   return useMockedEditor('query', value, onEdit);",
          "140: };",
          "142: export const useVariableEditor: typeof _useVariableEditor = function useVariableEditor({",
          "143:   onEdit,",
          "144:   value,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: export const useResponseEditor: typeof _useResponseEditor = function useResponseEditor({",
          "144:   value,",
          "145: }) {",
          "146:   return useMockedEditor('query', value);",
          "147: };",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
          "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   it('Shows the expected error when the schema is invalid', () => {",
          "49:     cy.visit(`/?bad=true`);",
          "50:     cy.wait(200);",
          "56:     });",
          "57:   });",
          "58: });",
          "",
          "[Removed Lines]",
          "51:     cy.window().then(w => {",
          "53:       const value = w.g.resultComponent.viewer.getValue();",
          "55:       expect(value).to.contain('Names must');",
          "",
          "[Added Lines]",
          "51:     cy.get('section#graphiql-result-viewer').should(element => {",
          "52:       expect(element.get(0).innerText).to.contain('Names must');",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
          "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     visitWithOp(op: Op): Chainable<Element>;",
          "33:     clickPrettify(): Chainable<Element>;",
          "34:     assertHasValues(op: Op): Chainable<Element>;",
          "36:     assertQueryResult(",
          "37:       op: Op,",
          "38:       expectedResult: MockResult,",
          "",
          "[Removed Lines]",
          "35:     assertResult(result: MockResult): Chainable<Element>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   cy.visitWithOp(op);",
          "91:   cy.clickExecuteQuery();",
          "92:   cy.wait(timeout);",
          "106:   });",
          "107: });",
          "",
          "[Removed Lines]",
          "93:   cy.window().then(w => {",
          "95:     const value = w.g.resultComponent.viewer.getValue();",
          "96:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
          "97:   });",
          "98: });",
          "100: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
          "101:   cy.wait(timeout);",
          "102:   cy.window().then(w => {",
          "104:     const value = w.g.resultComponent.viewer.getValue();",
          "105:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
          "",
          "[Added Lines]",
          "92:   cy.get('section#graphiql-result-viewer').should(element => {",
          "94:     const response = element.get(0).innerText.replace(/[\\u00a0]/g, ' ');",
          "95:     expect(response).to.equal(JSON.stringify(mockSuccess, null, 2));",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   ComponentType,",
          "10:   PropsWithChildren,",
          "11:   MouseEventHandler,",
          "14:   ReactNode,",
          "15: } from 'react';",
          "16: import {",
          "",
          "[Removed Lines]",
          "12:   Component,",
          "13:   FunctionComponent,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   EditorContextType,",
          "47:   ExplorerContextType,",
          "48:   ExplorerFieldDef,",
          "49: } from '@graphiql/react';",
          "51: import { ExecuteButton } from './ExecuteButton';",
          "53: import { ToolbarButton } from './ToolbarButton';",
          "54: import { ToolbarGroup } from './ToolbarGroup';",
          "55: import { ToolbarMenu, ToolbarMenuItem } from './ToolbarMenu';",
          "56: import { QueryEditor } from './QueryEditor';",
          "57: import { VariableEditor } from './VariableEditor';",
          "58: import { HeaderEditor } from './HeaderEditor';",
          "60: import { DocExplorer } from './DocExplorer';",
          "61: import { QueryHistory } from './QueryHistory';",
          "63: import StorageAPI, { Storage } from '../utility/StorageAPI';",
          "64: import getSelectedOperationName from '../utility/getSelectedOperationName';",
          "65: import debounce from '../utility/debounce';",
          "",
          "[Removed Lines]",
          "52: import { ImagePreview } from './ImagePreview';",
          "59: import { ResultViewer } from './ResultViewer';",
          "62: import CodeMirrorSizer from '../utility/CodeMirrorSizer';",
          "",
          "[Added Lines]",
          "47:   ResponseTooltipType,",
          "57: import { ResultViewer, RESULT_VIEWER_ID } from './ResultViewer';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "253:   ResultsTooltip?: typeof Component | FunctionComponent;",
          "",
          "[Added Lines]",
          "250:   ResultsTooltip?: ResponseTooltipType;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "447:   _introspectionQueryName: string;",
          "448:   _introspectionQuerySansSubscriptions: string;",
          "452:   componentIsMounted: boolean;",
          "455:   graphiqlContainer: Maybe<HTMLDivElement>;",
          "457:   _queryHistory: Maybe<QueryHistory>;",
          "458:   _historyStore: Maybe<HistoryStore>;",
          "459:   editorBarComponent: Maybe<HTMLDivElement>;",
          "462:   constructor(props: GraphiQLWithContextProps) {",
          "463:     super(props);",
          "",
          "[Removed Lines]",
          "450:   codeMirrorSizer!: CodeMirrorSizer;",
          "456:   resultComponent: Maybe<ResultViewer>;",
          "460:   resultViewerElement: Maybe<HTMLElement>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "673:       this.fetchSchema();",
          "674:     }",
          "679:     if (typeof window !== 'undefined') {",
          "680:       window.g = this;",
          "681:     }",
          "",
          "[Removed Lines]",
          "677:     this.codeMirrorSizer = new CodeMirrorSizer();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "759:     );",
          "760:   }",
          "770:   safeSetState = (nextState: any, callback?: any): void => {",
          "",
          "[Removed Lines]",
          "762:   componentDidUpdate() {",
          "765:     this.codeMirrorSizer.updateSizes([this.resultComponent]);",
          "766:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1052:                 </div>",
          "1053:               )}",
          "1054:               <ResultViewer",
          "1061:                 value={this.state.response}",
          "1062:                 editorTheme={this.props.editorTheme}",
          "1065:               />",
          "1066:               {footer}",
          "1067:             </div>",
          "",
          "[Removed Lines]",
          "1055:                 registerRef={n => {",
          "1056:                   this.resultViewerElement = n;",
          "1057:                 }}",
          "1058:                 ref={c => {",
          "1059:                   this.resultComponent = c;",
          "1060:                 }}",
          "1063:                 ResultsTooltip={this.props.ResultsTooltip}",
          "1064:                 ImagePreview={ImagePreview}",
          "",
          "[Added Lines]",
          "1042:                 ResponseTooltip={this.props.ResultsTooltip}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1126:     this.props.editorContext?.queryEditor?.refresh();",
          "1127:     this.props.editorContext?.variableEditor?.refresh();",
          "1128:     this.props.editorContext?.headerEditor?.refresh();",
          "1132:   }",
          "",
          "[Removed Lines]",
          "1129:     if (this.resultComponent) {",
          "1130:       this.resultComponent.getCodeMirror().refresh();",
          "1131:     }",
          "",
          "[Added Lines]",
          "1107:     this.props.editorContext?.responseEditor?.refresh();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1936:     if (event.button !== 0 || event.ctrlKey) {",
          "1937:       return false;",
          "1938:     }",
          "1941:     if (target.className.indexOf('CodeMirror-gutter') !== 0) {",
          "1942:       return false;",
          "1943:     }",
          "1953:   }",
          "1955:   private handleDocsResizeStart: MouseEventHandler<",
          "",
          "[Removed Lines]",
          "1939:     let target = event.target as Element;",
          "1945:     const resultWindow = this.resultViewerElement;",
          "1946:     while (target) {",
          "1947:       if (target === resultWindow) {",
          "1948:         return true;",
          "1949:       }",
          "1950:       target = target.parentNode as Element;",
          "1951:     }",
          "1952:     return false;",
          "",
          "[Added Lines]",
          "1915:     const target = event.target;",
          "1916:     if (!(target instanceof Element)) {",
          "1917:       return false;",
          "1918:     }",
          "1924:     const resultWindow = target.closest('section');",
          "1925:     return resultWindow ? resultWindow.id === RESULT_VIEWER_ID : false;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ImagePreview.tsx||packages/graphiql/src/components/ImagePreview.tsx": [
          "File: packages/graphiql/src/components/ImagePreview.tsx -> packages/graphiql/src/components/ImagePreview.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ResultViewer.tsx||packages/graphiql/src/components/ResultViewer.tsx": [
          "File: packages/graphiql/src/components/ResultViewer.tsx -> packages/graphiql/src/components/ResultViewer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: }",
          "",
          "[Removed Lines]",
          "8: import React, { Component, FunctionComponent } from 'react';",
          "9: import type * as CM from 'codemirror';",
          "10: import ReactDOM from 'react-dom';",
          "11: import commonKeys from '../utility/commonKeys';",
          "12: import { SizerComponent } from '../utility/CodeMirrorSizer';",
          "13: import { ImagePreview as ImagePreviewComponent } from './ImagePreview';",
          "14: import { importCodeMirror } from '../utility/importCodeMirror';",
          "15: import { CodeMirrorEditor } from '../types';",
          "17: type ResultViewerProps = {",
          "18:   value?: string;",
          "19:   editorTheme?: string;",
          "20:   ResultsTooltip?: typeof Component | FunctionComponent;",
          "21:   ImagePreview: typeof ImagePreviewComponent;",
          "22:   registerRef: (node: HTMLElement) => void;",
          "23: };",
          "35: export class ResultViewer extends React.Component<ResultViewerProps, {}>",
          "36:   implements SizerComponent {",
          "37:   viewer: CodeMirrorEditor | null = null;",
          "38:   _node: HTMLElement | null = null;",
          "40:   componentDidMount() {",
          "41:     this.initializeEditor();",
          "42:   }",
          "44:   shouldComponentUpdate(nextProps: ResultViewerProps) {",
          "45:     return this.props.value !== nextProps.value;",
          "46:   }",
          "48:   componentDidUpdate() {",
          "49:     if (this.viewer) {",
          "50:       this.viewer.setValue(this.props.value || '');",
          "51:     }",
          "52:   }",
          "54:   componentWillUnmount() {",
          "55:     this.viewer = null;",
          "56:   }",
          "58:   render() {",
          "59:     return (",
          "60:       <section",
          "61:         className=\"result-window\"",
          "62:         aria-label=\"Result Window\"",
          "63:         aria-live=\"polite\"",
          "64:         aria-atomic=\"true\"",
          "65:         ref={node => {",
          "66:           if (node) {",
          "67:             this.props.registerRef(node);",
          "68:             this._node = node;",
          "69:           }",
          "70:         }}",
          "71:       />",
          "72:     );",
          "73:   }",
          "75:   allAddons = () => [",
          "76:     import('codemirror/addon/fold/foldgutter'),",
          "77:     import('codemirror/addon/fold/brace-fold'),",
          "78:     import('codemirror/addon/dialog/dialog'),",
          "79:     import('codemirror/addon/search/search'),",
          "80:     import('codemirror/addon/search/searchcursor'),",
          "81:     import('codemirror/addon/search/jump-to-line'),",
          "83:     import('codemirror/keymap/sublime'),",
          "84:     import('codemirror-graphql/results/mode'),",
          "85:   ];",
          "87:   async initializeEditor() {",
          "90:     const CodeMirror = await importCodeMirror(this.allAddons(), {",
          "91:       useCommonAddons: false,",
          "92:     });",
          "93:     const Tooltip = this.props.ResultsTooltip;",
          "94:     const ImagePreview = this.props.ImagePreview;",
          "96:     if (Tooltip || ImagePreview) {",
          "97:       await import('codemirror-graphql/utils/info-addon');",
          "98:       const tooltipDiv = document.createElement('div');",
          "99:       CodeMirror.registerHelper(",
          "100:         'info',",
          "101:         'graphql-results',",
          "102:         (token: any, _options: any, _cm: CodeMirror.Editor, pos: any) => {",
          "103:           const infoElements: JSX.Element[] = [];",
          "104:           if (Tooltip) {",
          "105:             infoElements.push(<Tooltip pos={pos} />);",
          "106:           }",
          "108:           if (",
          "109:             ImagePreview &&",
          "110:             typeof ImagePreview.shouldRender === 'function' &&",
          "111:             ImagePreview.shouldRender(token)",
          "112:           ) {",
          "113:             infoElements.push(<ImagePreview token={token} />);",
          "114:           }",
          "116:           if (!infoElements.length) {",
          "117:             ReactDOM.unmountComponentAtNode(tooltipDiv);",
          "118:             return null;",
          "119:           }",
          "120:           ReactDOM.render(<div>{infoElements}</div>, tooltipDiv);",
          "121:           return tooltipDiv;",
          "122:         },",
          "123:       );",
          "124:     }",
          "126:     this.viewer = CodeMirror(this._node!, {",
          "127:       lineWrapping: true,",
          "128:       value: this.props.value || '',",
          "129:       readOnly: true,",
          "130:       theme: this.props.editorTheme || 'graphiql',",
          "131:       mode: 'graphql-results',",
          "132:       keyMap: 'sublime',",
          "133:       foldGutter: {",
          "135:         minFoldSize: 4,",
          "136:       },",
          "137:       gutters: ['CodeMirror-foldgutter'],",
          "138:       info: Boolean(this.props.ResultsTooltip || this.props.ImagePreview),",
          "139:       extraKeys: commonKeys,",
          "140:     }) as CodeMirrorEditor;",
          "141:   }",
          "147:   getCodeMirror() {",
          "148:     return this.viewer as CM.Editor;",
          "149:   }",
          "154:   getClientHeight() {",
          "155:     return this._node && this._node.clientHeight;",
          "156:   }",
          "",
          "[Added Lines]",
          "8: import { useResponseEditor, UseResponseEditorArgs } from '@graphiql/react';",
          "9: import React from 'react';",
          "11: export const RESULT_VIEWER_ID = 'graphiql-result-viewer';",
          "19: export function ResultViewer(props: UseResponseEditorArgs) {",
          "20:   const ref = useResponseEditor(props);",
          "21:   return (",
          "22:     <section",
          "23:       id={RESULT_VIEWER_ID}",
          "24:       className=\"result-window\"",
          "25:       aria-label=\"Result Window\"",
          "26:       aria-live=\"polite\"",
          "27:       aria-atomic=\"true\"",
          "28:       ref={ref}",
          "29:     />",
          "30:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/types.ts||packages/graphiql/src/types.ts": [
          "File: packages/graphiql/src/types.ts -> packages/graphiql/src/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: export type Maybe<T> = T | null | undefined;",
          "5: export type ReactComponentLike =",
          "",
          "[Removed Lines]",
          "1: import CM from 'codemirror';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   | boolean",
          "23:   | null",
          "24:   | undefined;",
          "",
          "[Removed Lines]",
          "26: export type CodeMirrorEditor = CM.Editor & { options?: any };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/CodeMirrorSizer.ts||packages/graphiql/src/utility/CodeMirrorSizer.ts": [
          "File: packages/graphiql/src/utility/CodeMirrorSizer.ts -> packages/graphiql/src/utility/CodeMirrorSizer.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/commonKeys.ts||packages/graphiql/src/utility/commonKeys.ts": [
          "File: packages/graphiql/src/utility/commonKeys.ts -> packages/graphiql/src/utility/commonKeys.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/importCodeMirror.ts||packages/graphiql/src/utility/importCodeMirror.ts": [
          "File: packages/graphiql/src/utility/importCodeMirror.ts -> packages/graphiql/src/utility/importCodeMirror.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdcd9054483404bcae4a464ac7212e0d35f49abd",
      "candidate_info": {
        "commit_hash": "fdcd9054483404bcae4a464ac7212e0d35f49abd",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/fdcd9054483404bcae4a464ac7212e0d35f49abd",
        "files": [
          ".changeset/green-mayflies-notice.md",
          "packages/graphiql-react/src/style/root.css",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css"
        ],
        "message": "add a dialog that shows all available shortkeys (#2601)\n\n* add a dialog that shows all available shortkeys\n\n* use table in short key dialog\n\n* add shortkey for introspection\n\n* add link to codemirror keymaps",
        "before_after_code_files": [
          "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css||packages/graphiql/src/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css": [
          "File: packages/graphiql-react/src/style/root.css -> packages/graphiql-react/src/style/root.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: .graphiql-container,",
          "112: .CodeMirror-info,",
          "113: .CodeMirror-lint-tooltip,",
          "131: }",
          "",
          "[Removed Lines]",
          "114: reach-portal,",
          "115: .graphiql-container:is(button) {",
          "116:   color: var(--color-neutral-100);",
          "117:   font-family: var(--font-family);",
          "118:   font-size: var(--font-size-body);",
          "119:   font-weight: var(----font-weight-regular);",
          "120:   line-height: var(--line-height);",
          "121: }",
          "123: .graphiql-container input {",
          "124:   color: var(--color-neutral-100);",
          "125:   font-family: var(--font-family);",
          "126:   font-size: var(--font-size-caption);",
          "127: }",
          "129: .graphiql-container input::placeholder {",
          "130:   color: var(--color-neutral-60);",
          "",
          "[Added Lines]",
          "114: reach-portal {",
          "115:   &,",
          "116:   &:is(button) {",
          "117:     color: var(--color-neutral-100);",
          "118:     font-family: var(--font-family);",
          "119:     font-size: var(--font-size-body);",
          "120:     font-weight: var(----font-weight-regular);",
          "121:     line-height: var(--line-height);",
          "122:   }",
          "124:   & input {",
          "125:     color: var(--color-neutral-100);",
          "126:     font-family: var(--font-family);",
          "127:     font-size: var(--font-size-caption);",
          "129:     &::placeholder {",
          "130:       color: var(--color-neutral-60);",
          "131:     }",
          "132:   }",
          "134:   & a {",
          "135:     color: var(--color-pink);",
          "137:     &:visited {",
          "138:       color: var(--color-pink-dark);",
          "139:     }",
          "140:   }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   );",
          "97: }",
          "103: export type GraphiQLToolbarConfig = {",
          "104:   additionalContent?: React.ReactNode;",
          "105: };",
          "",
          "[Removed Lines]",
          "99: declare namespace window {",
          "100:   export let g: GraphiQL;",
          "101: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     super(props);",
          "319:   }",
          "327:   render() {",
          "328:     return (",
          "329:       <GraphiQLProviders",
          "",
          "[Removed Lines]",
          "321:   componentDidMount() {",
          "322:     if (typeof window !== 'undefined') {",
          "323:       window.g = this;",
          "324:     }",
          "325:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646: export type GraphiQLState = {",
          "647:   activeSecondaryEditor: 'variable' | 'header';",
          "648:   showSettings: boolean;",
          "649:   clearStorageStatus: 'success' | 'error' | null;",
          "650: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:   showShortKeys: boolean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "660:     this.state = {",
          "661:       activeSecondaryEditor: 'variable',",
          "662:       showSettings: false,",
          "663:       clearStorageStatus: null,",
          "664:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653:       showShortKeys: false,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "720:       }",
          "721:     };",
          "723:     return (",
          "724:       <div data-testid=\"graphiql-container\" className=\"graphiql-container\">",
          "725:         <div className=\"graphiql-sidebar\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:     const modifier =",
          "716:       window.navigator.platform.toLowerCase().indexOf('mac') === 0 ? (",
          "717:         <code className=\"graphiql-key\">Cmd</code>",
          "718:       ) : (",
          "719:         <code className=\"graphiql-key\">Ctrl</code>",
          "720:       );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "789:                 }",
          "790:               />",
          "791:             </UnStyledButton>",
          "793:               <KeyboardShortcutIcon />",
          "794:             </UnStyledButton>",
          "795:             <UnStyledButton",
          "",
          "[Removed Lines]",
          "792:             <UnStyledButton type=\"button\">",
          "",
          "[Added Lines]",
          "791:             <UnStyledButton",
          "792:               type=\"button\"",
          "793:               onClick={() => {",
          "794:                 this.setState({ showShortKeys: true });",
          "795:               }}",
          "796:             >",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1051:             </div>",
          "1052:           </div>",
          "1053:         </div>",
          "1054:         <Dialog",
          "1055:           isOpen={this.state.showSettings}",
          "1056:           onDismiss={() => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:         <Dialog",
          "1059:           isOpen={this.state.showShortKeys}",
          "1060:           onDismiss={() => {",
          "1061:             this.setState({ showShortKeys: false });",
          "1062:           }}",
          "1063:         >",
          "1064:           <div className=\"graphiql-dialog-header\">",
          "1065:             <div className=\"graphiql-dialog-title\">Short Keys</div>",
          "1066:             <Dialog.Close",
          "1067:               onClick={() => {",
          "1068:                 this.setState({ showShortKeys: false });",
          "1069:               }}",
          "1070:             />",
          "1071:           </div>",
          "1072:           <div className=\"graphiql-dialog-section\">",
          "1073:             <div>",
          "1074:               <table className=\"graphiql-table\">",
          "1075:                 <thead>",
          "1076:                   <tr>",
          "1077:                     <th>Short key</th>",
          "1078:                     <th>Function</th>",
          "1079:                   </tr>",
          "1080:                 </thead>",
          "1081:                 <tbody>",
          "1082:                   <tr>",
          "1083:                     <td>",
          "1084:                       {modifier}",
          "1085:                       {' + '}",
          "1086:                       <code className=\"graphiql-key\">F</code>",
          "1087:                     </td>",
          "1088:                     <td>Search in editor</td>",
          "1089:                   </tr>",
          "1090:                   <tr>",
          "1091:                     <td>",
          "1092:                       {modifier}",
          "1093:                       {' + '}",
          "1094:                       <code className=\"graphiql-key\">K</code>",
          "1095:                     </td>",
          "1096:                     <td>Search in documentation</td>",
          "1097:                   </tr>",
          "1098:                   <tr>",
          "1099:                     <td>",
          "1100:                       {modifier}",
          "1101:                       {' + '}",
          "1102:                       <code className=\"graphiql-key\">Enter</code>",
          "1103:                     </td>",
          "1104:                     <td>Execute query</td>",
          "1105:                   </tr>",
          "1106:                   <tr>",
          "1107:                     <td>",
          "1108:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1109:                       {' + '}",
          "1110:                       <code className=\"graphiql-key\">Shift</code>",
          "1111:                       {' + '}",
          "1112:                       <code className=\"graphiql-key\">P</code>",
          "1113:                     </td>",
          "1114:                     <td>Prettify editors</td>",
          "1115:                   </tr>",
          "1116:                   <tr>",
          "1117:                     <td>",
          "1118:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1119:                       {' + '}",
          "1120:                       <code className=\"graphiql-key\">Shift</code>",
          "1121:                       {' + '}",
          "1122:                       <code className=\"graphiql-key\">M</code>",
          "1123:                     </td>",
          "1124:                     <td>",
          "1125:                       Merge fragments definitions into operation definition",
          "1126:                     </td>",
          "1127:                   </tr>",
          "1128:                   <tr>",
          "1129:                     <td>",
          "1130:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1131:                       {' + '}",
          "1132:                       <code className=\"graphiql-key\">Shift</code>",
          "1133:                       {' + '}",
          "1134:                       <code className=\"graphiql-key\">C</code>",
          "1135:                     </td>",
          "1136:                     <td>Copy query</td>",
          "1137:                   </tr>",
          "1138:                   <tr>",
          "1139:                     <td>",
          "1140:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1141:                       {' + '}",
          "1142:                       <code className=\"graphiql-key\">Shift</code>",
          "1143:                       {' + '}",
          "1144:                       <code className=\"graphiql-key\">R</code>",
          "1145:                     </td>",
          "1146:                     <td>Re-fetch schema using introspection</td>",
          "1147:                   </tr>",
          "1148:                 </tbody>",
          "1149:               </table>",
          "1150:               <p>",
          "1151:                 The editors use{' '}",
          "1152:                 <a",
          "1153:                   href=\"https://codemirror.net/5/doc/manual.html#keymaps\"",
          "1154:                   target=\"_blank\"",
          "1155:                   rel=\"noopener noreferrer\"",
          "1156:                 >",
          "1157:                   CodeMirror Key Maps",
          "1158:                 </a>{' '}",
          "1159:                 that add more short keys. This instance of Graph<em>i</em>QL",
          "1160:                 uses <code>{this.props.keyMap || 'sublime'}</code>.",
          "1161:               </p>",
          "1162:             </div>",
          "1163:           </div>",
          "1164:         </Dialog>",
          "",
          "---------------"
        ],
        "packages/graphiql/src/style.css||packages/graphiql/src/style.css": [
          "File: packages/graphiql/src/style.css -> packages/graphiql/src/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "269: reach-portal .graphiql-dialog-section-caption {",
          "270:   color: var(--color-neutral-60);",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: reach-portal .graphiql-table {",
          "274:   border-collapse: collapse;",
          "275:   width: 100%;",
          "276: }",
          "277: reach-portal .graphiql-table :is(th, td) {",
          "278:   border: 1px solid var(--color-neutral-15);",
          "279:   padding: var(--px-8) var(--px-12);",
          "280: }",
          "283: reach-portal .graphiql-key {",
          "284:   background-color: var(--color-neutral-10);",
          "285:   border-radius: var(--border-radius-4);",
          "286:   padding: var(--px-4);",
          "287: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0caf6d3c07e80d7d68851b479c65bbf7097b9b2b",
      "candidate_info": {
        "commit_hash": "0caf6d3c07e80d7d68851b479c65bbf7097b9b2b",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/0caf6d3c07e80d7d68851b479c65bbf7097b9b2b",
        "files": [
          ".vscode/extensions.json",
          "cspell.json",
          "examples/monaco-graphql-react-vite/package.json",
          "examples/monaco-graphql-webpack/package.json",
          "package.json",
          "packages/codemirror-graphql/CHANGELOG.md",
          "packages/codemirror-graphql/package.json",
          "packages/graphiql-2-rfc-context/package.json",
          "packages/graphiql/package.json",
          "packages/graphiql/src/css/codemirror.css",
          "packages/graphql-language-service-cli/CHANGELOG.md",
          "packages/graphql-language-service-cli/package.json",
          "packages/graphql-language-service-server/CHANGELOG.md",
          "packages/graphql-language-service-server/package.json",
          "packages/graphql-language-service/CHANGELOG.md",
          "packages/graphql-language-service/README.md",
          "packages/graphql-language-service/package.json",
          "packages/monaco-graphql/CHANGELOG.md",
          "packages/monaco-graphql/package.json",
          "resources/custom-words.txt",
          "yarn.lock"
        ],
        "message": "fix: exclude css files from cspell check",
        "before_after_code_files": [
          "packages/graphiql/src/css/codemirror.css||packages/graphiql/src/css/codemirror.css",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/css/codemirror.css||packages/graphiql/src/css/codemirror.css": [
          "File: packages/graphiql/src/css/codemirror.css -> packages/graphiql/src/css/codemirror.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   margin-bottom: -30px;",
          "278:   vertical-align: top;",
          "279:   white-space: normal;",
          "286: }",
          "287: .CodeMirror-gutter-wrapper {",
          "288:   background: none !important;",
          "",
          "[Removed Lines]",
          "280: <<<<<<< HEAD",
          "281: =======",
          "285: >>>>>>> ac1dede1 (Merge branch 'main' into feat/add_cspell)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:   background: rgba(255, 255, 0, 0.4);",
          "418: }",
          "429: .cm-force-border {",
          "430:   padding-right: 0.1px;",
          "",
          "[Removed Lines]",
          "420: <<<<<<< HEAD",
          "421: =======",
          "423: .CodeMirror span {",
          "425: }",
          "427: >>>>>>> ac1dede1 (Merge branch 'main' into feat/add_cspell)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11674:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "11676: \"graphiql@file:packages/graphiql\":",
          "11682:   dependencies:",
          "11683:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11684:     codemirror \"^5.58.2\"",
          "11686:     copy-to-clipboard \"^3.2.0\"",
          "11687:     dset \"^3.1.0\"",
          "11688:     entities \"^2.0.0\"",
          "11689:     escape-html \"^1.0.3\"",
          "11691:     markdown-it \"^12.2.0\"",
          "11693: graphql-config@^4.1.0:",
          "",
          "[Removed Lines]",
          "11677: <<<<<<< HEAD",
          "11678:   version \"1.6.0\"",
          "11679: =======",
          "11680:   version \"1.5.19\"",
          "11681: >>>>>>> ac1dede1 (Merge branch 'main' into feat/add_cspell)",
          "11685:     codemirror-graphql \"^1.2.12\"",
          "11690:     graphql-language-service \"^4.1.5\"",
          "",
          "[Added Lines]",
          "11677:   version \"1.7.1\"",
          "11681:     codemirror-graphql \"^1.2.13\"",
          "11686:     graphql-language-service \"^5.0.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11707:     minimatch \"3.0.4\"",
          "11708:     string-env-interpolation \"1.0.1\"",
          "11710: graphql-sse@^1.0.1:",
          "11711:   version \"1.0.6\"",
          "11712:   resolved \"https://registry.yarnpkg.com/graphql-sse/-/graphql-sse-1.0.6.tgz#4f98e0a06f2020542ed054399116108491263224\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11706: graphql-language-service-types@^1.8.7:",
          "11707:   version \"1.8.7\"",
          "11708:   resolved \"https://registry.yarnpkg.com/graphql-language-service-types/-/graphql-language-service-types-1.8.7.tgz#f5e909e6d9334ea2d8d1f7281b695b6f5602c07f\"",
          "11709:   integrity sha512-LP/Mx0nFBshYEyD0Ny6EVGfacJAGVx+qXtlJP4hLzUdBNOGimfDNtMVIdZANBXHXcM41MDgMHTnyEx2g6/Ttbw==",
          "11710:   dependencies:",
          "11711:     graphql-config \"^4.1.0\"",
          "11712:     vscode-languageserver-types \"^3.15.1\"",
          "11714: graphql-language-service-utils@^2.7.1:",
          "11715:   version \"2.7.1\"",
          "11716:   resolved \"https://registry.yarnpkg.com/graphql-language-service-utils/-/graphql-language-service-utils-2.7.1.tgz#c97c8d744a761480aba7e03e4a42adf28b6fce39\"",
          "11717:   integrity sha512-Wci5MbrQj+6d7rfvbORrA9uDlfMysBWYaG49ST5TKylNaXYFf3ixFOa74iM1KtM9eidosUbI3E1JlWi0JaidJA==",
          "11718:   dependencies:",
          "11719:     \"@types/json-schema\" \"7.0.9\"",
          "11720:     graphql-language-service-types \"^1.8.7\"",
          "11721:     nullthrows \"^1.0.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20760fbd95c13d6d549cba3faa15a59aee9a2c0",
      "candidate_info": {
        "commit_hash": "e20760fbd95c13d6d549cba3faa15a59aee9a2c0",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/e20760fbd95c13d6d549cba3faa15a59aee9a2c0",
        "files": [
          ".changeset/short-toes-whisper.md",
          "packages/graphql-language-service/package.json",
          "yarn.lock"
        ],
        "message": "use temporary fork of picomatch based on browser support PR (#2101)",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "11047:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "11049: \"graphiql@file:packages/graphiql\":",
          "11051:   dependencies:",
          "11052:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11053:     codemirror \"^5.58.2\"",
          "11055:     copy-to-clipboard \"^3.2.0\"",
          "11056:     dset \"^3.1.0\"",
          "11057:     entities \"^2.0.0\"",
          "11058:     escape-html \"^1.0.3\"",
          "11060:     markdown-it \"^12.2.0\"",
          "11062: graphql-config@^4.1.0:",
          "",
          "[Removed Lines]",
          "11050:   version \"1.5.11\"",
          "11054:     codemirror-graphql \"^1.2.7\"",
          "11059:     graphql-language-service \"^4.1.0\"",
          "",
          "[Added Lines]",
          "11050:   version \"1.5.13\"",
          "11054:     codemirror-graphql \"^1.2.8\"",
          "11059:     graphql-language-service \"^4.1.1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15753:   resolved \"https://registry.yarnpkg.com/picocolors/-/picocolors-1.0.0.tgz#cb5bdc74ff3f51892236eaf79d68bc44564ab81c\"",
          "15754:   integrity sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
          "15756: picomatch@^2.0.4, picomatch@^2.0.5, picomatch@^2.2.1:",
          "15757:   version \"2.2.2\"",
          "15758:   resolved \"https://registry.yarnpkg.com/picomatch/-/picomatch-2.2.2.tgz#21f333e9b6b8eaff02468f5146ea406d345f4dad\"",
          "15759:   integrity sha512-q0M/9eZHzmr0AulXyPwNfZjtwZ/RBZlbN3K3CErVrk50T2ASYI7Bye0EvekFY3IP1Nt2DHu0re+V2ZHIpMkuWg==",
          "15762:   version \"2.3.0\"",
          "15763:   resolved \"https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.0.tgz#f1f061de8f6a4bf022892e2d128234fb98302972\"",
          "15764:   integrity sha512-lY1Q/PiJGC2zOv/z391WOTD+Z02bCgsFfvxoXXf6h7kv9o+WmsmzYqrAwY63sNgOxE4xEdq0WyUnXfKeBrSvYw==",
          "",
          "[Removed Lines]",
          "15761: picomatch@^2.2.3, picomatch@^2.3.0:",
          "",
          "[Added Lines]",
          "15756: picomatch-browser@^2.2.5:",
          "15757:   version \"2.2.5\"",
          "15758:   resolved \"https://registry.yarnpkg.com/picomatch-browser/-/picomatch-browser-2.2.5.tgz#dde032340731d069289e86164e0e143c7249ff78\"",
          "15759:   integrity sha512-Da/xnHhOtbSVhkayCPL9jcQ1nZBAm0Ylu5KAChEIr3xV/3jqQIAHoIqIEbEB9TKmgbLbV3PsRQ8VC6m74YVoEw==",
          "15766: picomatch@^2.2.3:",
          "",
          "---------------"
        ]
      }
    }
  ]
}