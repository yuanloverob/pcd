{
  "cve_id": "CVE-2021-40331",
  "cve_desc": "An Incorrect Permission Assignment for Critical Resource vulnerability was found in the Apache Ranger Hive Plugin. Any user with SELECT privilege on a database can alter the ownership of the table in Hive when Apache Ranger Hive Plugin is enabled\nThis issue affects Apache Ranger Hive Plugin: from 2.0.0 through 2.3.0. Users are recommended to upgrade to version 2.4.0 or later.\n\n\n",
  "repo": "apache/ranger",
  "patch_hash": "7dec3015ec82b69ba8f724410f12dfce2480cccd",
  "patch_info": {
    "commit_hash": "7dec3015ec82b69ba8f724410f12dfce2480cccd",
    "repo": "apache/ranger",
    "commit_url": "https://github.com/apache/ranger/commit/7dec3015ec82b69ba8f724410f12dfce2480cccd",
    "files": [
      "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
    ],
    "message": "RANGER-3474:RangerHivePlugin enhancement to handle new Hive commands",
    "before_after_code_files": [
      "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
    ]
  },
  "patch_diff": {
    "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java": [
      "File: hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java -> hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "906:      RangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, roles, hiveOpType.name(), HiveAccessType.REPLADMIN, context, sessionContext);",
      "907:      requests.add(request);",
      "908:     } else {",
      "909:      if (LOG.isDebugEnabled()) {",
      "910:       LOG.debug(\"RangerHiveAuthorizer.checkPrivileges: Unexpected operation type[\" + hiveOpType + \"] received with empty input objects list!\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "908:     } else if (hiveOpType.equals(HiveOperationType.ALTERTABLE_OWNER)) {",
      "909:      RangerHiveAccessRequest request = buildRequestForAlterTableSetOwnerFromCommandString(user, groups, roles, hiveOpType.name(), context, sessionContext);",
      "910:      if (request != null) {",
      "911:       requests.add(request);",
      "912:      } else {",
      "913:       throw new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have privilege for [%s] command\",",
      "914:         user, hiveOpType.name()));",
      "915:      }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3079:   }",
      "3080:   return ret;",
      "3081:  }",
      "3082: }",
      "3084: enum HiveObjectType { NONE, DATABASE, TABLE, VIEW, PARTITION, INDEX, COLUMN, FUNCTION, URI, SERVICE_NAME, GLOBAL };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3091:  private RangerHiveAccessRequest buildRequestForAlterTableSetOwnerFromCommandString(String                  user,",
      "3092:                         Set<String>             userGroups,",
      "3093:                         Set<String>             userRoles,",
      "3094:                         String                  hiveOpTypeName,",
      "3095:                         HiveAuthzContext        context,",
      "3096:                         HiveAuthzSessionContext sessionContext) {",
      "3097:   RangerHiveResource      resource  = null;",
      "3098:   RangerHiveAccessRequest request   = null;",
      "3099:   HiveObj hiveObj  = new HiveObj();",
      "3100:   hiveObj.fetchHiveObjForAlterTable(context);",
      "3101:   String dbName    = hiveObj.getDatabaseName();",
      "3102:   String tableName = hiveObj.getTableName();",
      "3103:   if (LOG.isDebugEnabled()) {",
      "3104:    LOG.debug(\"Database: \" + dbName + \" Table: \" + tableName);",
      "3105:   }",
      "3106:   if (dbName != null && tableName != null) {",
      "3107:    resource = new RangerHiveResource(HiveObjectType.TABLE, dbName, tableName);",
      "3108:    request  = new RangerHiveAccessRequest(resource, user, userGroups, userRoles, hiveOpTypeName, HiveAccessType.ALTER, context, sessionContext);",
      "3109:   }",
      "3110:   return request;",
      "3111:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3088:  String databaseName;",
      "3089:  String tableName;",
      "3091:  HiveObj(HiveAuthzContext context) {",
      "3092:   fetchHiveObj(context);",
      "3093:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3121:  HiveObj() {}",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3120:   }",
      "3121:  }",
      "3123:  private String[] splitDBName(String dbName) {",
      "3124:   String[] ret = null;",
      "3125:   ret = dbName.split(\"\\\\.\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3155:  public void fetchHiveObjForAlterTable(HiveAuthzContext context) {",
      "3157:   if (context != null) {",
      "3158:    String cmdString = context.getCommandString();",
      "3159:    if (cmdString != null) {",
      "3160:     String[] cmd = cmdString.trim().split(\"\\\\s+\");",
      "3161:     if (!ArrayUtils.isEmpty(cmd) && cmd.length > 2) {",
      "3162:      tableName = cmd[2];",
      "3163:      if (tableName.contains(\".\")) {",
      "3164:       String[] result = splitDBName(tableName);",
      "3165:       databaseName = result[0];",
      "3166:       tableName = result[1];",
      "3167:      } else {",
      "3168:       SessionState sessionState = SessionState.get();",
      "3169:       if (sessionState != null) {",
      "3170:        databaseName = sessionState.getCurrentDatabase();",
      "3171:       }",
      "3172:      }",
      "3173:     }",
      "3174:    }",
      "3175:   }",
      "3176:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c3cc47da40f0f7504a3ed6ba7ecc363bc3afb248",
      "candidate_info": {
        "commit_hash": "c3cc47da40f0f7504a3ed6ba7ecc363bc3afb248",
        "repo": "apache/ranger",
        "commit_url": "https://github.com/apache/ranger/commit/c3cc47da40f0f7504a3ed6ba7ecc363bc3afb248",
        "files": [
          "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
        ],
        "message": "RANGER-3474:RangerHivePlugin enhancement to handle new Hive commands",
        "before_after_code_files": [
          "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
          ],
          "candidate": [
            "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
          ]
        }
      },
      "candidate_diff": {
        "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java": [
          "File: hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java -> hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "906:      RangerHiveAccessRequest request = new RangerHiveAccessRequest(resource, user, groups, roles, hiveOpType.name(), HiveAccessType.REPLADMIN, context, sessionContext);",
          "907:      requests.add(request);",
          "908:     } else {",
          "909:      if (LOG.isDebugEnabled()) {",
          "910:       LOG.debug(\"RangerHiveAuthorizer.checkPrivileges: Unexpected operation type[\" + hiveOpType + \"] received with empty input objects list!\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:     } else if (hiveOpType.equals(HiveOperationType.ALTERTABLE_OWNER)) {",
          "909:      RangerHiveAccessRequest request = buildRequestForAlterTableSetOwnerFromCommandString(user, groups, roles, hiveOpType.name(), context, sessionContext);",
          "910:      if (request != null) {",
          "911:       requests.add(request);",
          "912:      } else {",
          "913:       throw new HiveAccessControlException(String.format(\"Permission denied: user [%s] does not have privilege for [%s] command\",",
          "914:         user, hiveOpType.name()));",
          "915:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3079:   }",
          "3080:   return ret;",
          "3081:  }",
          "3082: }",
          "3084: enum HiveObjectType { NONE, DATABASE, TABLE, VIEW, PARTITION, INDEX, COLUMN, FUNCTION, URI, SERVICE_NAME, GLOBAL };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3091:  private RangerHiveAccessRequest buildRequestForAlterTableSetOwnerFromCommandString(String                  user,",
          "3092:                         Set<String>             userGroups,",
          "3093:                         Set<String>             userRoles,",
          "3094:                         String                  hiveOpTypeName,",
          "3095:                         HiveAuthzContext        context,",
          "3096:                         HiveAuthzSessionContext sessionContext) {",
          "3097:   RangerHiveResource      resource  = null;",
          "3098:   RangerHiveAccessRequest request   = null;",
          "3099:   HiveObj hiveObj  = new HiveObj();",
          "3100:   hiveObj.fetchHiveObjForAlterTable(context);",
          "3101:   String dbName    = hiveObj.getDatabaseName();",
          "3102:   String tableName = hiveObj.getTableName();",
          "3103:   if (LOG.isDebugEnabled()) {",
          "3104:    LOG.debug(\"Database: \" + dbName + \" Table: \" + tableName);",
          "3105:   }",
          "3106:   if (dbName != null && tableName != null) {",
          "3107:    resource = new RangerHiveResource(HiveObjectType.TABLE, dbName, tableName);",
          "3108:    request  = new RangerHiveAccessRequest(resource, user, userGroups, userRoles, hiveOpTypeName, HiveAccessType.ALTER, context, sessionContext);",
          "3109:   }",
          "3110:   return request;",
          "3111:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3088:  String databaseName;",
          "3089:  String tableName;",
          "3091:  HiveObj(HiveAuthzContext context) {",
          "3092:   fetchHiveObj(context);",
          "3093:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3121:  HiveObj() {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3120:   }",
          "3121:  }",
          "3123:  private String[] splitDBName(String dbName) {",
          "3124:   String[] ret = null;",
          "3125:   ret = dbName.split(\"\\\\.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3155:  public void fetchHiveObjForAlterTable(HiveAuthzContext context) {",
          "3157:   if (context != null) {",
          "3158:    String cmdString = context.getCommandString();",
          "3159:    if (cmdString != null) {",
          "3160:     String[] cmd = cmdString.trim().split(\"\\\\s+\");",
          "3161:     if (!ArrayUtils.isEmpty(cmd) && cmd.length > 2) {",
          "3162:      tableName = cmd[2];",
          "3163:      if (tableName.contains(\".\")) {",
          "3164:       String[] result = splitDBName(tableName);",
          "3165:       databaseName = result[0];",
          "3166:       tableName = result[1];",
          "3167:      } else {",
          "3168:       SessionState sessionState = SessionState.get();",
          "3169:       if (sessionState != null) {",
          "3170:        databaseName = sessionState.getCurrentDatabase();",
          "3171:       }",
          "3172:      }",
          "3173:     }",
          "3174:    }",
          "3175:   }",
          "3176:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f9a46a22ff404214e03e767dd199d8c10ea7449",
      "candidate_info": {
        "commit_hash": "7f9a46a22ff404214e03e767dd199d8c10ea7449",
        "repo": "apache/ranger",
        "commit_url": "https://github.com/apache/ranger/commit/7f9a46a22ff404214e03e767dd199d8c10ea7449",
        "files": [
          "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
        ],
        "message": "RANGER-3407:Handle authorization of Hive Drop database / table if exists in RangerHiveAuthorizer when database / table doesn't exist",
        "before_after_code_files": [
          "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
          ],
          "candidate": [
            "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java"
          ]
        }
      },
      "candidate_diff": {
        "hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java||hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java": [
          "File: hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java -> hive-agent/src/main/java/org/apache/ranger/authorization/hive/authorizer/RangerHiveAuthorizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     }",
          "996:    }",
          "1001:    }",
          "1003:    buildRequestContextWithAllAccessedResources(requests);",
          "",
          "[Removed Lines]",
          "998:    if (CollectionUtils.isEmpty(requests) && !IsCommandInExceptionList(hiveOpType)) {",
          "999:     String commandString = context == null ? \"\" : context.getCommandString();",
          "1000:     throw new HiveAccessControlException(String.format(\"Unable to authorize command: [%s] , HivePrivilegeObjects are not available to authorize this command!\", commandString));",
          "",
          "[Added Lines]",
          "998:    if (CollectionUtils.isEmpty(inputHObjs) && CollectionUtils.isEmpty(outputHObjs) && !IsCommandInExceptionList(hiveOpType)",
          "999:      && (hiveOpType.equals(HiveOperationType.DROPDATABASE) || hiveOpType.equals(HiveOperationType.DROPTABLE)))  {",
          "1001:      RangerHiveAccessRequest request = buildRequestForDropIfExistsCommands(hiveOpType, user, groups, roles, hiveOpType.name(), context, sessionContext);",
          "1002:      if (request != null) {",
          "1003:       requests.add(request);",
          "1004:      }",
          "1005:     } else {",
          "1006:      String commandString = context == null ? \"\" : context.getCommandString();",
          "1007:      throw new HiveAccessControlException(String.format(\"Unable to authorize command: [%s] , HivePrivilegeObjects are not available to authorize this command!\", commandString));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2548:   return requestedResources;",
          "2549:  }",
          "2551:  private boolean isBlockAccessIfRowfilterColumnMaskSpecified(HiveOperationType hiveOpType, RangerHiveAccessRequest request) {",
          "2552:   boolean            ret      = false;",
          "2553:   RangerHiveResource resource = (RangerHiveResource)request.getResource();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2558:  private RangerHiveAccessRequest  buildRequestForDropIfExistsCommands(HiveOperationType       hiveOpType,",
          "2559:                    String                  user,",
          "2560:                    Set<String>             userGroups,",
          "2561:                    Set<String>             userRoles,",
          "2562:                    String                  hiveOpTypeName,",
          "2563:                    HiveAuthzContext        context,",
          "2564:                    HiveAuthzSessionContext sessionContext) {",
          "2565:   RangerHiveAccessRequest request = null;",
          "2567:   switch (hiveOpType) {",
          "2568:    case DROPDATABASE:",
          "2569:     request = buildRequestForDropDatabaseIfExistsCommands(user,userGroups,userRoles,hiveOpTypeName,context,sessionContext);",
          "2570:     break;",
          "2572:    case DROPTABLE:",
          "2573:     request = buildRequestForDropTableIfExistsCommands(user,userGroups,userRoles,hiveOpTypeName,context,sessionContext);",
          "2574:     break;",
          "2575:   }",
          "2577:   return request;",
          "2578:  }",
          "2580:  private RangerHiveAccessRequest buildRequestForDropDatabaseIfExistsCommands(String                  user,",
          "2581:                     Set<String>             userGroups,",
          "2582:                     Set<String>             userRoles,",
          "2583:                     String                  hiveOpTypeName,",
          "2584:                     HiveAuthzContext        context,",
          "2585:                     HiveAuthzSessionContext sessionContext) {",
          "2586:   RangerHiveResource  resource  = null;",
          "2587:   RangerHiveAccessRequest request   = null;",
          "2588:   HiveObj hiveObj  = new HiveObj();",
          "2589:   hiveObj.fetchHiveObjForDropDatabase(context);",
          "2590:   String dbName    = hiveObj.getDatabaseName();",
          "2591:   if (LOG.isDebugEnabled()) {",
          "2592:    LOG.debug(\"Database: \" + dbName);",
          "2593:   }",
          "2594:   if (dbName != null) {",
          "2595:    resource = new RangerHiveResource(HiveObjectType.DATABASE, dbName, null);",
          "2596:    request = new RangerHiveAccessRequest(resource, user, userGroups, userRoles, hiveOpTypeName, HiveAccessType.DROP, context, sessionContext);",
          "2597:   }",
          "2598:   return request;",
          "2599:  }",
          "2602:  private RangerHiveAccessRequest buildRequestForDropTableIfExistsCommands(String                  user,",
          "2603:                     Set<String>             userGroups,",
          "2604:                     Set<String>             userRoles,",
          "2605:                     String                  hiveOpTypeName,",
          "2606:                     HiveAuthzContext        context,",
          "2607:                     HiveAuthzSessionContext sessionContext) {",
          "2608:   RangerHiveResource   resource  = null;",
          "2609:   RangerHiveAccessRequest request   = null;",
          "2610:   HiveObj hiveObj  = new HiveObj();",
          "2611:   hiveObj.fetchHiveObjForDropTable(context);",
          "2612:   String dbName    = hiveObj.getDatabaseName();",
          "2613:   String tableName = hiveObj.getTableName();",
          "2614:   if (LOG.isDebugEnabled()) {",
          "2615:    LOG.debug(\"Database: \" + dbName + \" Table: \" + tableName);",
          "2616:   }",
          "2617:   if (dbName != null && tableName != null) {",
          "2618:    resource = new RangerHiveResource(HiveObjectType.TABLE, dbName, tableName);",
          "2619:    request  = new RangerHiveAccessRequest(resource, user, userGroups, userRoles, hiveOpTypeName, HiveAccessType.DROP, context, sessionContext);",
          "2620:   }",
          "2621:   return request;",
          "2622:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3205:  String databaseName;",
          "3206:  String tableName;",
          "3208:  HiveObj(HiveAuthzContext context) {",
          "3209:   fetchHiveObj(context);",
          "3210:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3281:  HiveObj() {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3237:   }",
          "3238:  }",
          "3240:  private String[] splitDBName(String dbName) {",
          "3241:   String[] ret = null;",
          "3242:   ret = dbName.split(\"\\\\.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3315:  public void fetchHiveObjForDropDatabase(HiveAuthzContext context) {",
          "3317:   if (context != null) {",
          "3318:    String cmdString = context.getCommandString();",
          "3319:    if (cmdString != null) {",
          "3320:     String[] cmd = cmdString.trim().split(\"\\\\s+\");",
          "3321:     if (!ArrayUtils.isEmpty(cmd) && cmd.length > 3) {",
          "3322:      databaseName = cmd[4];",
          "3323:     }",
          "3324:    }",
          "3325:   }",
          "3326:  }",
          "3328:  public void fetchHiveObjForDropTable(HiveAuthzContext context) {",
          "3330:   if (context != null) {",
          "3331:    String cmdString = context.getCommandString();",
          "3332:    if (cmdString != null) {",
          "3333:     String[] cmd = cmdString.trim().split(\"\\\\s+\");",
          "3334:     if (!ArrayUtils.isEmpty(cmd) && cmd.length > 3) {",
          "3335:      tableName = cmd[4];",
          "3336:      if (tableName.contains(\".\")) {",
          "3337:       String[] result = splitDBName(tableName);",
          "3338:       databaseName = result[0];",
          "3339:       tableName = result[1];",
          "3340:      }",
          "3341:     }",
          "3342:    }",
          "3343:   }",
          "3344:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}