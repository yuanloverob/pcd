{
  "cve_id": "CVE-2022-24348",
  "cve_desc": "Argo CD before 2.1.9 and 2.2.x before 2.2.4 allows directory traversal related to Helm charts because of an error in helmTemplate in repository.go. For example, an attacker may be able to discover credentials stored in a YAML file.",
  "repo": "argoproj/argo-cd",
  "patch_hash": "78c2084f0febd159039ff785ddc2bd4ba1cecf88",
  "patch_info": {
    "commit_hash": "78c2084f0febd159039ff785ddc2bd4ba1cecf88",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/78c2084f0febd159039ff785ddc2bd4ba1cecf88",
    "files": [
      "reposerver/repository/repository.go",
      "reposerver/repository/repository_test.go",
      "reposerver/repository/testdata/symlinks/bam",
      "reposerver/repository/testdata/symlinks/bar",
      "reposerver/repository/testdata/symlinks/baz",
      "reposerver/repository/testdata/symlinks/foo"
    ],
    "message": "Merge pull request from GHSA-63qx-x74g-jcr7\n\nSigned-off-by: jannfis <jann@mistrust.net>",
    "before_after_code_files": [
      "reposerver/repository/repository.go||reposerver/repository/repository.go",
      "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
    ]
  },
  "patch_diff": {
    "reposerver/repository/repository.go||reposerver/repository/repository.go": [
      "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:  \"github.com/argoproj/argo-cd/v2/util/io\"",
      "53:  \"github.com/argoproj/argo-cd/v2/util/ksonnet\"",
      "54:  \"github.com/argoproj/argo-cd/v2/util/kustomize\"",
      "56:  \"github.com/argoproj/argo-cd/v2/util/text\"",
      "57: )",
      "",
      "[Removed Lines]",
      "55:  \"github.com/argoproj/argo-cd/v2/util/security\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:  ociPrefix                      = \"oci://\"",
      "67: )",
      "70: type Service struct {",
      "71:  repoLock                  *repositoryLock",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: var allowedHelmRemoteProtocols = []string{\"http\", \"https\"}",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "554:  return ioutil.WriteFile(markerFile, []byte(\"marker\"), 0644)",
      "555: }",
      "557: func helmTemplate(appPath string, repoRoot string, env *v1alpha1.Env, q *apiclient.ManifestRequest, isLocal bool) ([]*unstructured.Unstructured, error) {",
      "558:  concurrencyAllowed := isConcurrencyAllowed(appPath)",
      "559:  if !concurrencyAllowed {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562: func resolveSymbolicLinkRecursive(path string, maxDepth int) (string, error) {",
      "563:  resolved, err := os.Readlink(path)",
      "564:  if err != nil {",
      "566:   _, ok := err.(*os.PathError)",
      "567:   if ok {",
      "568:    return path, nil",
      "569:   }",
      "571:   return \"\", err",
      "572:  }",
      "574:  if maxDepth == 0 {",
      "575:   return \"\", fmt.Errorf(\"maximum nesting level reached\")",
      "576:  }",
      "578:  return resolveSymbolicLinkRecursive(resolved, maxDepth-1)",
      "579: }",
      "583: func isURLSchemeAllowed(scheme string, allowed []string) bool {",
      "584:  isAllowed := false",
      "585:  if len(allowed) > 0 {",
      "586:   for _, s := range allowed {",
      "587:    if strings.EqualFold(scheme, s) {",
      "588:     isAllowed = true",
      "589:     break",
      "590:    }",
      "591:   }",
      "592:  }",
      "595:  return isAllowed && scheme != \"\"",
      "596: }",
      "627: func resolveHelmValueFilePath(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath string, isRemote bool, err error) {",
      "632:  resolveFailure := func(path string, err error) error {",
      "633:   log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
      "634:   return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
      "635:  }",
      "639:  url, err := url.Parse(valueFile)",
      "640:  if err == nil {",
      "642:   if url.Scheme != \"\" {",
      "643:    if isURLSchemeAllowed(url.Scheme, allowedURLSchemes) {",
      "644:     return valueFile, true, nil",
      "645:    } else {",
      "646:     return \"\", false, fmt.Errorf(\"the URL scheme '%s' is not allowed\", url.Scheme)",
      "647:    }",
      "648:   }",
      "649:  }",
      "652:  absRepoPath, err := filepath.Abs(repoRoot)",
      "653:  if err != nil {",
      "654:   return \"\", false, resolveFailure(repoRoot, err)",
      "655:  }",
      "659:  path := valueFile",
      "660:  if !filepath.IsAbs(path) {",
      "661:   absWorkDir, err := filepath.Abs(appPath)",
      "662:   if err != nil {",
      "663:    return \"\", false, resolveFailure(repoRoot, err)",
      "664:   }",
      "665:   path = filepath.Join(absWorkDir, path)",
      "666:  } else {",
      "667:   path = filepath.Join(absRepoPath, path)",
      "668:  }",
      "671:  delinkedPath, err := resolveSymbolicLinkRecursive(path, 10)",
      "672:  if err != nil {",
      "673:   return \"\", false, resolveFailure(path, err)",
      "674:  }",
      "675:  path = delinkedPath",
      "678:  path, err = filepath.Abs(path)",
      "679:  if err != nil {",
      "680:   return \"\", false, resolveFailure(path, err)",
      "681:  }",
      "685:  requiredRootPath := absRepoPath",
      "686:  if !strings.HasSuffix(requiredRootPath, \"/\") {",
      "687:   requiredRootPath += \"/\"",
      "688:  }",
      "691:  if !strings.HasPrefix(path, requiredRootPath) {",
      "692:   return \"\", false, fmt.Errorf(\"value file '%s' resolved to outside repository root\", valueFile)",
      "693:  }",
      "695:  return path, false, nil",
      "697: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "583:   }",
      "585:   for _, val := range appHelm.ValueFiles {",
      "611:     _, err = os.Stat(path)",
      "612:     if os.IsNotExist(err) {",
      "613:      if appHelm.IgnoreMissingValueFiles {",
      "",
      "[Removed Lines]",
      "588:    if _, err := url.ParseRequestURI(val); err != nil {",
      "591:     absRepoPath, err := filepath.Abs(repoRoot)",
      "592:     if err != nil {",
      "593:      return nil, err",
      "594:     }",
      "597:     path := val",
      "598:     if !filepath.IsAbs(path) {",
      "599:      absWorkDir, err := filepath.Abs(appPath)",
      "600:      if err != nil {",
      "601:       return nil, err",
      "602:      }",
      "603:      path = filepath.Join(absWorkDir, path)",
      "604:     }",
      "606:     _, err = security.EnforceToCurrentRoot(absRepoPath, path)",
      "607:     if err != nil {",
      "608:      return nil, err",
      "609:     }",
      "",
      "[Added Lines]",
      "730:    path, isRemote, err := resolveHelmValueFilePath(appPath, repoRoot, val, allowedHelmRemoteProtocols)",
      "731:    if err != nil {",
      "732:     return nil, err",
      "733:    }",
      "735:    if !isRemote {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "616:      }",
      "617:     }",
      "618:    }",
      "620:   }",
      "622:   if appHelm.Values != \"\" {",
      "",
      "[Removed Lines]",
      "619:    templateOpts.Values = append(templateOpts.Values, val)",
      "",
      "[Added Lines]",
      "745:    templateOpts.Values = append(templateOpts.Values, path)",
      "",
      "---------------"
    ],
    "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
      "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "754:  }",
      "755:  request := &apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: source, NoCache: true}",
      "756:  _, err := service.GenerateManifest(context.Background(), request)",
      "758: }",
      "760: func TestGenerateHelmWithURL(t *testing.T) {",
      "",
      "[Removed Lines]",
      "757:  assert.Error(t, err, \"should be on or under current directory\")",
      "",
      "[Added Lines]",
      "757:  assert.Error(t, err)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "779: func TestGenerateHelmWithValuesDirectoryTraversalOutsideRepo(t *testing.T) {",
      "789:    },",
      "791:  })",
      "803:    },",
      "805:  })",
      "807: }",
      "",
      "[Removed Lines]",
      "780:  service := newService(\"../..\")",
      "781:  _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "782:   Repo:    &argoappv1.Repository{},",
      "783:   AppName: \"test\",",
      "784:   ApplicationSource: &argoappv1.ApplicationSource{",
      "785:    Path: \"./util/helm/testdata/redis\",",
      "786:    Helm: &argoappv1.ApplicationSourceHelm{",
      "787:     ValueFiles: []string{\"../../../../../minio/values.yaml\"},",
      "788:     Values:     `cluster: {slaveCount: 2}`,",
      "790:   },",
      "792:  assert.Error(t, err, \"should be on or under current directory\")",
      "794:  service = newService(\"./testdata/my-chart\")",
      "795:  _, err = service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "796:   Repo:    &argoappv1.Repository{},",
      "797:   AppName: \"test\",",
      "798:   ApplicationSource: &argoappv1.ApplicationSource{",
      "799:    Path: \".\",",
      "800:    Helm: &argoappv1.ApplicationSourceHelm{",
      "801:     ValueFiles: []string{\"../my-chart-2/values.yaml\"},",
      "802:     Values:     `cluster: {slaveCount: 2}`,",
      "804:   },",
      "806:  assert.Error(t, err, \"should be on or under current directory\")",
      "",
      "[Added Lines]",
      "780:  t.Run(\"Values file with relative path pointing outside repo root\", func(t *testing.T) {",
      "781:   service := newService(\"../..\")",
      "782:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "783:    Repo:    &argoappv1.Repository{},",
      "784:    AppName: \"test\",",
      "785:    ApplicationSource: &argoappv1.ApplicationSource{",
      "786:     Path: \"./util/helm/testdata/redis\",",
      "787:     Helm: &argoappv1.ApplicationSourceHelm{",
      "788:      ValueFiles: []string{\"../../../../../minio/values.yaml\"},",
      "789:      Values:     `cluster: {slaveCount: 2}`,",
      "790:     },",
      "792:   })",
      "793:   assert.Error(t, err)",
      "794:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "797:  t.Run(\"Values file with relative path pointing inside repo root\", func(t *testing.T) {",
      "798:   service := newService(\"./testdata/my-chart\")",
      "799:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "800:    Repo:    &argoappv1.Repository{},",
      "801:    AppName: \"test\",",
      "802:    ApplicationSource: &argoappv1.ApplicationSource{",
      "803:     Path: \".\",",
      "804:     Helm: &argoappv1.ApplicationSourceHelm{",
      "805:      ValueFiles: []string{\"../my-chart/my-chart-values.yaml\"},",
      "806:      Values:     `cluster: {slaveCount: 2}`,",
      "807:     },",
      "809:   })",
      "810:   assert.NoError(t, err)",
      "811:  })",
      "813:  t.Run(\"Values file with absolute path stays within repo root\", func(t *testing.T) {",
      "814:   service := newService(\"./testdata/my-chart\")",
      "815:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "816:    Repo:    &argoappv1.Repository{},",
      "817:    AppName: \"test\",",
      "818:    ApplicationSource: &argoappv1.ApplicationSource{",
      "819:     Path: \".\",",
      "820:     Helm: &argoappv1.ApplicationSourceHelm{",
      "821:      ValueFiles: []string{\"/my-chart-values.yaml\"},",
      "822:      Values:     `cluster: {slaveCount: 2}`,",
      "823:     },",
      "824:    },",
      "825:   })",
      "826:   assert.NoError(t, err)",
      "827:  })",
      "829:  t.Run(\"Values file with absolute path using back-references outside repo root\", func(t *testing.T) {",
      "830:   service := newService(\"./testdata/my-chart\")",
      "831:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "832:    Repo:    &argoappv1.Repository{},",
      "833:    AppName: \"test\",",
      "834:    ApplicationSource: &argoappv1.ApplicationSource{",
      "835:     Path: \".\",",
      "836:     Helm: &argoappv1.ApplicationSourceHelm{",
      "837:      ValueFiles: []string{\"/../../../my-chart-values.yaml\"},",
      "838:      Values:     `cluster: {slaveCount: 2}`,",
      "839:     },",
      "840:    },",
      "841:   })",
      "842:   assert.Error(t, err)",
      "843:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "844:  })",
      "846:  t.Run(\"Remote values file from forbidden protocol\", func(t *testing.T) {",
      "847:   service := newService(\"./testdata/my-chart\")",
      "848:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
      "849:    Repo:    &argoappv1.Repository{},",
      "850:    AppName: \"test\",",
      "851:    ApplicationSource: &argoappv1.ApplicationSource{",
      "852:     Path: \".\",",
      "853:     Helm: &argoappv1.ApplicationSourceHelm{",
      "854:      ValueFiles: []string{\"file://../../../../my-chart-values.yaml\"},",
      "855:      Values:     `cluster: {slaveCount: 2}`,",
      "856:     },",
      "857:    },",
      "858:   })",
      "859:   assert.Error(t, err)",
      "860:   assert.Contains(t, err.Error(), \"is not allowed\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1631:  assert.Equal(t, expectedResolveRevisionResponse, resolveRevisionResponse)",
      "1633: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1690: func Test_resolveSymlinkRecursive(t *testing.T) {",
      "1691:  cwd, err := os.Getwd()",
      "1692:  require.NoError(t, err)",
      "1693:  err = os.Chdir(\"testdata/symlinks\")",
      "1694:  require.NoError(t, err)",
      "1695:  defer func() {",
      "1696:   err := os.Chdir(cwd)",
      "1697:   if err != nil {",
      "1698:    panic(err)",
      "1699:   }",
      "1700:  }()",
      "1701:  t.Run(\"Resolve non-symlink\", func(t *testing.T) {",
      "1702:   r, err := resolveSymbolicLinkRecursive(\"foo\", 2)",
      "1703:   assert.NoError(t, err)",
      "1704:   assert.Equal(t, \"foo\", r)",
      "1705:  })",
      "1706:  t.Run(\"Successfully resolve symlink\", func(t *testing.T) {",
      "1707:   r, err := resolveSymbolicLinkRecursive(\"bar\", 2)",
      "1708:   assert.NoError(t, err)",
      "1709:   assert.Equal(t, \"foo\", r)",
      "1710:  })",
      "1711:  t.Run(\"Do not allow symlink at all\", func(t *testing.T) {",
      "1712:   r, err := resolveSymbolicLinkRecursive(\"bar\", 0)",
      "1713:   assert.Error(t, err)",
      "1714:   assert.Equal(t, \"\", r)",
      "1715:  })",
      "1716:  t.Run(\"Error because too nested symlink\", func(t *testing.T) {",
      "1717:   r, err := resolveSymbolicLinkRecursive(\"bam\", 2)",
      "1718:   assert.Error(t, err)",
      "1719:   assert.Equal(t, \"\", r)",
      "1720:  })",
      "1721:  t.Run(\"No such file or directory\", func(t *testing.T) {",
      "1722:   r, err := resolveSymbolicLinkRecursive(\"foobar\", 2)",
      "1723:   assert.NoError(t, err)",
      "1724:   assert.Equal(t, \"foobar\", r)",
      "1725:  })",
      "1726: }",
      "1728: func Test_isURLSchemeAllowed(t *testing.T) {",
      "1729:  type testdata struct {",
      "1730:   name     string",
      "1731:   scheme   string",
      "1732:   allowed  []string",
      "1733:   expected bool",
      "1734:  }",
      "1735:  var tts []testdata = []testdata{",
      "1736:   {",
      "1737:    name:     \"Allowed scheme matches\",",
      "1738:    scheme:   \"http\",",
      "1739:    allowed:  []string{\"http\", \"https\"},",
      "1740:    expected: true,",
      "1741:   },",
      "1742:   {",
      "1743:    name:     \"Allowed scheme matches only partially\",",
      "1744:    scheme:   \"http\",",
      "1745:    allowed:  []string{\"https\"},",
      "1746:    expected: false,",
      "1747:   },",
      "1748:   {",
      "1749:    name:     \"Scheme is not allowed\",",
      "1750:    scheme:   \"file\",",
      "1751:    allowed:  []string{\"http\", \"https\"},",
      "1752:    expected: false,",
      "1753:   },",
      "1754:   {",
      "1755:    name:     \"Empty scheme with valid allowances is forbidden\",",
      "1756:    scheme:   \"\",",
      "1757:    allowed:  []string{\"http\", \"https\"},",
      "1758:    expected: false,",
      "1759:   },",
      "1760:   {",
      "1761:    name:     \"Empty scheme with empty allowances is forbidden\",",
      "1762:    scheme:   \"\",",
      "1763:    allowed:  []string{},",
      "1764:    expected: false,",
      "1765:   },",
      "1766:   {",
      "1767:    name:     \"Some scheme with empty allowances is forbidden\",",
      "1768:    scheme:   \"file\",",
      "1769:    allowed:  []string{},",
      "1770:    expected: false,",
      "1771:   },",
      "1772:  }",
      "1773:  for _, tt := range tts {",
      "1774:   t.Run(tt.name, func(t *testing.T) {",
      "1775:    r := isURLSchemeAllowed(tt.scheme, tt.allowed)",
      "1776:    assert.Equal(t, tt.expected, r)",
      "1777:   })",
      "1778:  }",
      "1779: }",
      "1781: func Test_resolveHelmValueFilePath(t *testing.T) {",
      "1782:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
      "1783:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedHelmRemoteProtocols)",
      "1784:   assert.NoError(t, err)",
      "1785:   assert.False(t, remote)",
      "1786:   assert.Equal(t, \"/foo/bar/baz/bim.yaml\", p)",
      "1787:  })",
      "1788:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
      "1789:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedHelmRemoteProtocols)",
      "1790:   assert.NoError(t, err)",
      "1791:   assert.False(t, remote)",
      "1792:   assert.Equal(t, \"/foo/bim.yaml\", p)",
      "1793:  })",
      "1794:  t.Run(\"Error on path resolving outside repository root\", func(t *testing.T) {",
      "1795:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedHelmRemoteProtocols)",
      "1796:   assert.Error(t, err)",
      "1797:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "1798:   assert.False(t, remote)",
      "1799:   assert.Equal(t, \"\", p)",
      "1800:  })",
      "1801:  t.Run(\"Return verbatim URL\", func(t *testing.T) {",
      "1802:   url := \"https://some.where/foo,yaml\"",
      "1803:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", url, allowedHelmRemoteProtocols)",
      "1804:   assert.NoError(t, err)",
      "1805:   assert.True(t, remote)",
      "1806:   assert.Equal(t, url, p)",
      "1807:  })",
      "1808:  t.Run(\"URL scheme not allowed\", func(t *testing.T) {",
      "1809:   url := \"file:///some.where/foo,yaml\"",
      "1810:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", url, allowedHelmRemoteProtocols)",
      "1811:   assert.Error(t, err)",
      "1812:   assert.False(t, remote)",
      "1813:   assert.Equal(t, \"\", p)",
      "1814:  })",
      "1815:  t.Run(\"Implicit URL by absolute path\", func(t *testing.T) {",
      "1816:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedHelmRemoteProtocols)",
      "1817:   assert.NoError(t, err)",
      "1818:   assert.False(t, remote)",
      "1819:   assert.Equal(t, \"/foo/baz.yaml\", p)",
      "1820:  })",
      "1821:  t.Run(\"Relative app path\", func(t *testing.T) {",
      "1822:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo\", \"/baz.yaml\", allowedHelmRemoteProtocols)",
      "1823:   assert.NoError(t, err)",
      "1824:   assert.False(t, remote)",
      "1825:   assert.Equal(t, \"/foo/baz.yaml\", p)",
      "1826:  })",
      "1827:  t.Run(\"Relative repo path\", func(t *testing.T) {",
      "1828:   c, err := os.Getwd()",
      "1829:   require.NoError(t, err)",
      "1830:   p, remote, err := resolveHelmValueFilePath(\".\", \".\", \"baz.yaml\", allowedHelmRemoteProtocols)",
      "1831:   assert.NoError(t, err)",
      "1832:   assert.False(t, remote)",
      "1833:   assert.Equal(t, c+\"/baz.yaml\", p)",
      "1834:  })",
      "1835:  t.Run(\"Overlapping root prefix without trailing slash\", func(t *testing.T) {",
      "1836:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedHelmRemoteProtocols)",
      "1837:   assert.Error(t, err)",
      "1838:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "1839:   assert.False(t, remote)",
      "1840:   assert.Equal(t, \"\", p)",
      "1841:  })",
      "1842:  t.Run(\"Overlapping root prefix with trailing slash\", func(t *testing.T) {",
      "1843:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedHelmRemoteProtocols)",
      "1844:   assert.Error(t, err)",
      "1845:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "1846:   assert.False(t, remote)",
      "1847:   assert.Equal(t, \"\", p)",
      "1848:  })",
      "1849:  t.Run(\"Garbage input as values file\", func(t *testing.T) {",
      "1850:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedHelmRemoteProtocols)",
      "1851:   assert.Error(t, err)",
      "1852:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "1853:   assert.False(t, remote)",
      "1854:   assert.Equal(t, \"\", p)",
      "1855:  })",
      "1856:  t.Run(\"NUL-byte path input as values file\", func(t *testing.T) {",
      "1857:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo/\", \"\\000\", allowedHelmRemoteProtocols)",
      "1858:   assert.Error(t, err)",
      "1859:   assert.Contains(t, err.Error(), \"outside repository root\")",
      "1860:   assert.False(t, remote)",
      "1861:   assert.Equal(t, \"\", p)",
      "1862:  })",
      "1863: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4328bfc1ffae9b4fa4d9abf3fc76329b13320db9",
      "candidate_info": {
        "commit_hash": "4328bfc1ffae9b4fa4d9abf3fc76329b13320db9",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/4328bfc1ffae9b4fa4d9abf3fc76329b13320db9",
        "files": [
          "reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go",
          "reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet",
          "reposerver/repository/testdata/jsonnet-1/params.libsonnet",
          "reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet",
          "util/helm/helm.go",
          "util/helm/helm_test.go",
          "util/io/path/resolved.go",
          "util/io/path/resolved_test.go"
        ],
        "message": "fix: allow resolving repo root as jsonnet lib path (#11119)\n\nSigned-off-by: shuai-zh <shuaiz8023@gmail.com>\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\nCo-authored-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet||reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet",
          "reposerver/repository/testdata/jsonnet-1/params.libsonnet||reposerver/repository/testdata/jsonnet-1/params.libsonnet",
          "reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet||reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet",
          "util/helm/helm.go||util/helm/helm.go",
          "util/helm/helm_test.go||util/helm/helm_test.go",
          "util/io/path/resolved.go||util/io/path/resolved.go",
          "util/io/path/resolved_test.go||util/io/path/resolved_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ]
        }
      },
      "candidate_diff": {
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:   for _, val := range appHelm.ValueFiles {",
          "860:    if err != nil {",
          "861:     return nil, err",
          "862:    }",
          "",
          "[Removed Lines]",
          "859:    path, isRemote, err := pathutil.ResolveFilePath(appPath, repoRoot, env.Envsubst(val), q.GetValuesFileSchemes())",
          "",
          "[Added Lines]",
          "859:    path, isRemote, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, env.Envsubst(val), q.GetValuesFileSchemes())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:    }",
          "897:   }",
          "898:   for _, p := range appHelm.FileParameters {",
          "900:    if err != nil {",
          "901:     return nil, err",
          "902:    }",
          "",
          "[Removed Lines]",
          "899:    resolvedPath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, env.Envsubst(p.Path), q.GetValuesFileSchemes())",
          "",
          "[Added Lines]",
          "899:    resolvedPath, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, env.Envsubst(p.Path), q.GetValuesFileSchemes())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1504:  jpaths := []string{appPath}",
          "1505:  for _, p := range sourceJsonnet.Libs {",
          "1508:   if err != nil {",
          "1509:    return nil, err",
          "1510:   }",
          "",
          "[Removed Lines]",
          "1507:   jpath, _, err := pathutil.ResolveFilePath(repoRoot, repoRoot, p, nil)",
          "",
          "[Added Lines]",
          "1507:   jpath, err := pathutil.ResolveFileOrDirectoryPath(repoRoot, repoRoot, p)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1752:   return err",
          "1753:  }",
          "1756:   if err := loadFileIntoIfExists(resolvedValuesPath, &res.Helm.Values); err != nil {",
          "1757:    return err",
          "1758:   }",
          "",
          "[Removed Lines]",
          "1755:  if resolvedValuesPath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "[Added Lines]",
          "1755:  if resolvedValuesPath, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1762:  var resolvedSelectedValueFiles []pathutil.ResolvedFilePath",
          "1764:  for _, file := range selectedValueFiles {",
          "1766:    resolvedSelectedValueFiles = append(resolvedSelectedValueFiles, resolvedFile)",
          "1767:   } else {",
          "1768:    log.Warnf(\"Values file %s is not allowed: %v\", file, err)",
          "",
          "[Removed Lines]",
          "1765:   if resolvedFile, _, err := pathutil.ResolveFilePath(appPath, repoRoot, file, q.GetValuesFileSchemes()); err == nil {",
          "",
          "[Added Lines]",
          "1765:   if resolvedFile, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, file, q.GetValuesFileSchemes()); err == nil {",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:  assert.Equal(t, 2, len(res1.Manifests))",
          "343: }",
          "345: func TestGenerateJsonnetLibOutside(t *testing.T) {",
          "346:  service := newService(\".\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: func TestGenerateJsonnetManifestInRootDir(t *testing.T) {",
          "346:  service := newService(\"testdata/jsonnet-1\")",
          "348:  q := apiclient.ManifestRequest{",
          "349:   Repo: &argoappv1.Repository{},",
          "350:   ApplicationSource: &argoappv1.ApplicationSource{",
          "351:    Path: \".\",",
          "352:    Directory: &argoappv1.ApplicationSourceDirectory{",
          "353:     Jsonnet: argoappv1.ApplicationSourceJsonnet{",
          "354:      ExtVars: []argoappv1.JsonnetVar{{Name: \"extVarString\", Value: \"extVarString\"}, {Name: \"extVarCode\", Value: \"\\\"extVarCode\\\"\", Code: true}},",
          "355:      TLAs:    []argoappv1.JsonnetVar{{Name: \"tlaString\", Value: \"tlaString\"}, {Name: \"tlaCode\", Value: \"\\\"tlaCode\\\"\", Code: true}},",
          "356:      Libs:    []string{\".\"},",
          "357:     },",
          "358:    },",
          "359:   },",
          "360:  }",
          "361:  res1, err := service.GenerateManifest(context.Background(), &q)",
          "362:  assert.Nil(t, err)",
          "363:  assert.Equal(t, 2, len(res1.Manifests))",
          "364: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:  }",
          "359:  _, err := service.GenerateManifest(context.Background(), &q)",
          "360:  require.Error(t, err)",
          "362: }",
          "364: func TestManifestGenErrorCacheByNumRequests(t *testing.T) {",
          "",
          "[Removed Lines]",
          "361:  require.Contains(t, err.Error(), \"value file '../../../testdata/jsonnet/vendor' resolved to outside repository root\")",
          "",
          "[Added Lines]",
          "382:  require.Contains(t, err.Error(), \"file '../../../testdata/jsonnet/vendor' resolved to outside repository root\")",
          "",
          "---------------"
        ],
        "reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet||reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet": [
          "File: reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet -> reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local service = import 'vendor/nested/service.libsonnet';",
          "2: local params = import 'params.libsonnet';",
          "4: function(tlaString, tlaCode)",
          "5:   [",
          "6:     service.new(params),",
          "7:     {",
          "8:       apiVersion: 'apps/v1beta2',",
          "9:       kind: 'Deployment',",
          "10:       metadata: {",
          "11:         name: params.name,",
          "12:       },",
          "13:       spec: {",
          "14:         replicas: params.replicas,",
          "15:         selector: {",
          "16:           matchLabels: {",
          "17:             app: params.name,",
          "18:           },",
          "19:         },",
          "20:         template: {",
          "21:           metadata: {",
          "22:             labels: {",
          "23:               app: params.name,",
          "24:               tlaString: tlaString,",
          "25:               tlaCode: tlaCode,",
          "26:               extVarString: std.extVar('extVarString'),",
          "27:               extVarCode: std.extVar('extVarCode'),",
          "28:             },",
          "29:           },",
          "30:           spec: {",
          "31:             containers: [",
          "32:               {",
          "33:                 image: params.image,",
          "34:                 name: params.name,",
          "35:                 ports: [",
          "36:                   {",
          "37:                     containerPort: params.containerPort,",
          "38:                   },",
          "39:                 ],",
          "40:               },",
          "41:             ],",
          "42:           },",
          "43:         },",
          "44:       },",
          "45:     },",
          "46:     null,",
          "47:   ]",
          "",
          "---------------"
        ],
        "reposerver/repository/testdata/jsonnet-1/params.libsonnet||reposerver/repository/testdata/jsonnet-1/params.libsonnet": [
          "File: reposerver/repository/testdata/jsonnet-1/params.libsonnet -> reposerver/repository/testdata/jsonnet-1/params.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {",
          "2:   containerPort: 80,",
          "3:   image: \"gcr.io/heptio-images/ks-guestbook-demo:0.2\",",
          "4:   name: \"guestbook-ui\",",
          "5:   replicas: 1,",
          "6:   servicePort: 80,",
          "7:   type: \"ClusterIP\",",
          "8: }",
          "",
          "---------------"
        ],
        "reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet||reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet": [
          "File: reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet -> reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local new(params) = {",
          "2:   apiVersion: 'v1',",
          "3:   kind: 'Service',",
          "4:   metadata: {",
          "5:     name: params.name,",
          "6:   },",
          "7:   spec: {",
          "8:     ports: [",
          "9:       {",
          "10:         port: params.servicePort,",
          "11:         targetPort: params.containerPort,",
          "12:       },",
          "13:     ],",
          "14:     selector: {",
          "15:       app: params.name,",
          "16:     },",
          "17:     type: params.type,",
          "18:   },",
          "19: };",
          "21: {",
          "22:   new:: new,",
          "23: }",
          "",
          "---------------"
        ],
        "util/helm/helm.go||util/helm/helm.go": [
          "File: util/helm/helm.go -> util/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: func (h *helm) GetParameters(valuesFiles []pathutil.ResolvedFilePath, appPath, repoRoot string) (map[string]string, error) {",
          "134:  var values []string",
          "137:   out, err := h.cmd.inspectValues(\".\")",
          "138:   if err != nil {",
          "139:    return nil, err",
          "",
          "[Removed Lines]",
          "136:  if _, _, err := pathutil.ResolveFilePath(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "[Added Lines]",
          "136:  if _, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "---------------"
        ],
        "util/helm/helm_test.go||util/helm/helm_test.go": [
          "File: util/helm/helm_test.go -> util/helm/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  require.NoError(t, err)",
          "60:  h, err := NewHelmApp(repoRootAbs, []HelmRepository{}, false, \"\", \"\", false)",
          "61:  assert.NoError(t, err)",
          "63:  require.NoError(t, err)",
          "64:  opts := TemplateOpts{",
          "65:   Name:   \"test\",",
          "",
          "[Removed Lines]",
          "62:  valuesPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "[Added Lines]",
          "62:  valuesPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  require.NoError(t, err)",
          "99:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "100:  assert.NoError(t, err)",
          "102:  require.NoError(t, err)",
          "103:  params, err := h.GetParameters([]path.ResolvedFilePath{valuesPath}, repoRootAbs, repoRootAbs)",
          "104:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "101:  valuesPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "[Added Lines]",
          "101:  valuesPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  require.NoError(t, err)",
          "114:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "115:  assert.NoError(t, err)",
          "117:  require.NoError(t, err)",
          "119:  require.NoError(t, err)",
          "120:  params, err := h.GetParameters([]path.ResolvedFilePath{valuesMissingPath, valuesProductionPath}, repoRootAbs, repoRootAbs)",
          "121:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "116:  valuesMissingPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-missing.yaml\", nil)",
          "118:  valuesProductionPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "[Added Lines]",
          "116:  valuesMissingPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-missing.yaml\", nil)",
          "118:  valuesProductionPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "---------------"
        ],
        "util/io/path/resolved.go||util/io/path/resolved.go": [
          "File: util/io/path/resolved.go -> util/io/path/resolved.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  log \"github.com/sirupsen/logrus\"",
          "11: )",
          "15: type ResolvedFilePath string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: type ResolvedFileOrDirectoryPath string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  return isAllowed && scheme != \"\"",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: func resolveFailure(path string, err error) error {",
          "71:  log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
          "72:  return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
          "73: }",
          "75: func ResolveFileOrDirectoryPath(appPath, repoRoot, dir string) (ResolvedFileOrDirectoryPath, error) {",
          "76:  path, err := resolveFileOrDirectory(appPath, repoRoot, dir, true)",
          "77:  if err != nil {",
          "78:   return \"\", err",
          "79:  }",
          "81:  return ResolvedFileOrDirectoryPath(path), nil",
          "82: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:  url, err := url.Parse(valueFile)",
          "",
          "[Removed Lines]",
          "91: func ResolveFilePath(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath ResolvedFilePath, isRemote bool, err error) {",
          "95:  resolveFailure := func(path string, err error) error {",
          "96:   log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
          "97:   return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
          "98:  }",
          "",
          "[Added Lines]",
          "112: func ResolveValueFilePathOrUrl(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath ResolvedFilePath, isRemote bool, err error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   }",
          "112:  }",
          "115:  absRepoPath, err := filepath.Abs(repoRoot)",
          "116:  if err != nil {",
          "118:  }",
          "123:  if !filepath.IsAbs(path) {",
          "124:   absWorkDir, err := filepath.Abs(appPath)",
          "125:   if err != nil {",
          "127:   }",
          "128:   path = filepath.Join(absWorkDir, path)",
          "129:  } else {",
          "130:   path = filepath.Join(absRepoPath, path)",
          "131:  }",
          "134:  delinkedPath, err := resolveSymbolicLinkRecursive(path, 10)",
          "135:  if err != nil {",
          "137:  }",
          "138:  path = delinkedPath",
          "141:  path, err = filepath.Abs(path)",
          "142:  if err != nil {",
          "144:  }",
          "",
          "[Removed Lines]",
          "117:   return \"\", false, resolveFailure(repoRoot, err)",
          "122:  path := valueFile",
          "126:    return \"\", false, resolveFailure(repoRoot, err)",
          "136:   return \"\", false, resolveFailure(path, err)",
          "143:   return \"\", false, resolveFailure(path, err)",
          "",
          "[Added Lines]",
          "127:  path, err := resolveFileOrDirectory(appPath, repoRoot, valueFile, false)",
          "128:  if err != nil {",
          "129:   return \"\", false, err",
          "130:  }",
          "132:  return ResolvedFilePath(path), false, nil",
          "133: }",
          "135: func resolveFileOrDirectory(appPath string, repoRoot string, fileOrDirectory string, allowResolveToRoot bool) (string, error) {",
          "139:   return \"\", resolveFailure(repoRoot, err)",
          "144:  path := fileOrDirectory",
          "148:    return \"\", resolveFailure(repoRoot, err)",
          "158:   return \"\", resolveFailure(repoRoot, err)",
          "165:   return \"\", resolveFailure(repoRoot, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:   requiredRootPath += string(os.PathSeparator)",
          "151:  }",
          "156:  }",
          "159: }",
          "",
          "[Removed Lines]",
          "154:  if !strings.HasPrefix(path, requiredRootPath) {",
          "155:   return \"\", false, fmt.Errorf(\"value file '%s' resolved to outside repository root\", valueFile)",
          "158:  return ResolvedFilePath(path), false, nil",
          "",
          "[Added Lines]",
          "175:  resolvedToRoot := path+string(os.PathSeparator) == requiredRootPath",
          "176:  if resolvedToRoot {",
          "177:   if !allowResolveToRoot {",
          "178:    return \"\", resolveFailure(path, fmt.Errorf(\"path resolved to repository root, which is not allowed\"))",
          "179:   }",
          "180:  } else {",
          "182:   if !strings.HasPrefix(path, requiredRootPath) {",
          "183:    return \"\", fmt.Errorf(\"file '%s' resolved to outside repository root\", fileOrDirectory)",
          "184:   }",
          "187:  return path, nil",
          "",
          "---------------"
        ],
        "util/io/path/resolved_test.go||util/io/path/resolved_test.go": [
          "File: util/io/path/resolved_test.go -> util/io/path/resolved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: func Test_resolveFilePath(t *testing.T) {",
          "100:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "102:   assert.NoError(t, err)",
          "103:   assert.False(t, remote)",
          "104:   assert.Equal(t, \"/foo/bar/baz/bim.yaml\", string(p))",
          "105:  })",
          "106:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "108:   assert.NoError(t, err)",
          "109:   assert.False(t, remote)",
          "110:   assert.Equal(t, \"/foo/bim.yaml\", string(p))",
          "111:  })",
          "112:  t.Run(\"Error on path resolving outside repository root\", func(t *testing.T) {",
          "114:   assert.Error(t, err)",
          "115:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "116:   assert.False(t, remote)",
          "",
          "[Removed Lines]",
          "101:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedRemoteProtocols)",
          "107:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedRemoteProtocols)",
          "113:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedRemoteProtocols)",
          "",
          "[Added Lines]",
          "101:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedRemoteProtocols)",
          "107:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedRemoteProtocols)",
          "113:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedRemoteProtocols)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  })",
          "119:  t.Run(\"Return verbatim URL\", func(t *testing.T) {",
          "120:   url := \"https://some.where/foo,yaml\"",
          "122:   assert.NoError(t, err)",
          "123:   assert.True(t, remote)",
          "124:   assert.Equal(t, url, string(p))",
          "125:  })",
          "126:  t.Run(\"URL scheme not allowed\", func(t *testing.T) {",
          "127:   url := \"file:///some.where/foo,yaml\"",
          "129:   assert.Error(t, err)",
          "130:   assert.False(t, remote)",
          "131:   assert.Equal(t, \"\", string(p))",
          "132:  })",
          "133:  t.Run(\"Implicit URL by absolute path\", func(t *testing.T) {",
          "135:   assert.NoError(t, err)",
          "136:   assert.False(t, remote)",
          "137:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "138:  })",
          "139:  t.Run(\"Relative app path\", func(t *testing.T) {",
          "141:   assert.NoError(t, err)",
          "142:   assert.False(t, remote)",
          "143:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "",
          "[Removed Lines]",
          "121:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "128:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "134:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "140:   p, remote, err := ResolveFilePath(\".\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "",
          "[Added Lines]",
          "121:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "128:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "134:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "140:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:  t.Run(\"Relative repo path\", func(t *testing.T) {",
          "146:   c, err := os.Getwd()",
          "147:   require.NoError(t, err)",
          "149:   assert.NoError(t, err)",
          "150:   assert.False(t, remote)",
          "151:   assert.Equal(t, c+\"/baz.yaml\", string(p))",
          "152:  })",
          "153:  t.Run(\"Overlapping root prefix without trailing slash\", func(t *testing.T) {",
          "155:   assert.Error(t, err)",
          "156:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "157:   assert.False(t, remote)",
          "158:   assert.Equal(t, \"\", string(p))",
          "159:  })",
          "160:  t.Run(\"Overlapping root prefix with trailing slash\", func(t *testing.T) {",
          "162:   assert.Error(t, err)",
          "163:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "164:   assert.False(t, remote)",
          "165:   assert.Equal(t, \"\", string(p))",
          "166:  })",
          "167:  t.Run(\"Garbage input as values file\", func(t *testing.T) {",
          "169:   assert.Error(t, err)",
          "170:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "171:   assert.False(t, remote)",
          "172:   assert.Equal(t, \"\", string(p))",
          "173:  })",
          "174:  t.Run(\"NUL-byte path input as values file\", func(t *testing.T) {",
          "176:   assert.Error(t, err)",
          "177:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "178:   assert.False(t, remote)",
          "179:   assert.Equal(t, \"\", string(p))",
          "180:  })",
          "181: }",
          "",
          "[Removed Lines]",
          "148:   p, remote, err := ResolveFilePath(\".\", \".\", \"baz.yaml\", allowedRemoteProtocols)",
          "154:   p, remote, err := ResolveFilePath(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "161:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "168:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedRemoteProtocols)",
          "175:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"\\000\", allowedRemoteProtocols)",
          "",
          "[Added Lines]",
          "148:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \".\", \"baz.yaml\", allowedRemoteProtocols)",
          "154:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "161:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "168:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedRemoteProtocols)",
          "175:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"\\000\", allowedRemoteProtocols)",
          "181:  t.Run(\"Resolve root path into absolute path - jsonnet library path\", func(t *testing.T) {",
          "182:   p, err := ResolveFileOrDirectoryPath(\"/foo\", \"/foo\", \"./\")",
          "183:   assert.NoError(t, err)",
          "184:   assert.Equal(t, \"/foo\", string(p))",
          "185:  })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "179d1e0e8a8859e8cc865c2adc4a8038fca84299",
      "candidate_info": {
        "commit_hash": "179d1e0e8a8859e8cc865c2adc4a8038fca84299",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/179d1e0e8a8859e8cc865c2adc4a8038fca84299",
        "files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "docs/operator-manual/argocd-cmd-params-cm.yaml",
          "docs/operator-manual/server-commands/argocd-repo-server.md",
          "docs/operator-manual/upgrading/2.4-2.5.md",
          "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
          "manifests/core-install.yaml",
          "manifests/ha/install.yaml",
          "manifests/ha/namespace-install.yaml",
          "manifests/install.yaml",
          "manifests/namespace-install.yaml",
          "reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go",
          "reposerver/repository/testdata/my-chart/my-chart-outside-link.yaml",
          "reposerver/repository/testdata2/out-of-bounds-chart/Chart.yaml",
          "reposerver/repository/testdata2/out-of-bounds-chart/link",
          "util/app/path/path.go",
          "util/app/path/path_test.go",
          "util/app/path/testdata/abslink/abslink",
          "util/app/path/testdata/badlink/badlink",
          "util/app/path/testdata/badlink2/badlink",
          "util/app/path/testdata/badlink3/badlink",
          "util/app/path/testdata/badlink3/test.txt",
          "util/app/path/testdata/goodlink/file.txt",
          "util/app/path/testdata/goodlink/goodlink",
          "util/app/path/testdata/goodlink/goodlink2",
          "util/app/path/testdata/goodlink/goodlink3",
          "util/app/path/testdata/goodlink/subdir/..file.txt",
          "util/app/path/testdata/goodlink/subdir/file.txt",
          "util/app/path/testdata/goodlink/subdir/goodlink"
        ],
        "message": "block out of bounds symlinks (#9738) (#9843)\n\nSigned-off-by: notfromstatefarm <86763948+notfromstatefarm@users.noreply.github.com>",
        "before_after_code_files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "util/app/path/path.go||util/app/path/path.go",
          "util/app/path/path_test.go||util/app/path/path_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
          "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   disableTLS                        bool",
          "82:   maxCombinedDirectoryManifestsSize string",
          "83:   cmpTarExcludedGlobs               []string",
          "84:  )",
          "85:  var command = cobra.Command{",
          "86:   Use:               cliName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   allowOutOfBoundsSymlinks          bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     SubmoduleEnabled:                             getSubmoduleEnabled(),",
          "125:     MaxCombinedDirectoryManifestsSize:            maxCombinedDirectoryManifestsQuantity,",
          "126:     CMPTarExcludedGlobs:                          cmpTarExcludedGlobs,",
          "127:    }, askPassServer)",
          "128:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  command.Flags().BoolVar(&disableTLS, \"disable-tls\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_TLS\", false), \"Disable TLS on the gRPC endpoint\")",
          "202:  command.Flags().StringVar(&maxCombinedDirectoryManifestsSize, \"max-combined-directory-manifests-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE\", \"10M\"), \"Max combined size of manifest files in a directory-type Application\")",
          "203:  command.Flags().StringArrayVar(&cmpTarExcludedGlobs, \"plugin-tar-exclude\", env.StringsFromEnv(\"ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS\", []string{}, \";\"), \"Globs to filter when sending tarballs to plugins.\")",
          "205:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
          "206:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  SubmoduleEnabled                             bool",
          "105:  MaxCombinedDirectoryManifestsSize            resource.Quantity",
          "106:  CMPTarExcludedGlobs                          []string",
          "107: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:  AllowOutOfBoundsSymlinks                     bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:    return err",
          "319:   }",
          "320:   defer io.Close(closer)",
          "321:   return operation(chartPath, revision, revision, func() (*operationContext, error) {",
          "322:    return &operationContext{chartPath, \"\"}, nil",
          "323:   })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:   if !s.initConstants.AllowOutOfBoundsSymlinks {",
          "323:    err := argopath.CheckOutOfBoundsSymlinks(chartPath)",
          "324:    if err != nil {",
          "325:     oobError := &argopath.OutOfBoundsSymlinkError{}",
          "326:     if errors.As(err, &oobError) {",
          "327:      log.WithFields(log.Fields{",
          "328:       \"chart\":    source.Chart,",
          "329:       \"revision\": revision,",
          "330:       \"file\":     oobError.File,",
          "331:      }).Warn(\"chart contains out-of-bounds symlink\")",
          "332:      return fmt.Errorf(\"chart contains out-of-bounds symlinks. file: %s\", oobError.File)",
          "333:     } else {",
          "334:      return err",
          "335:     }",
          "336:    }",
          "337:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:   defer io.Close(closer)",
          "335:   commitSHA, err := gitClient.CommitSHA()",
          "336:   if err != nil {",
          "337:    return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   if !s.initConstants.AllowOutOfBoundsSymlinks {",
          "353:    err := argopath.CheckOutOfBoundsSymlinks(gitClient.Root())",
          "354:    if err != nil {",
          "355:     oobError := &argopath.OutOfBoundsSymlinkError{}",
          "356:     if errors.As(err, &oobError) {",
          "357:      log.WithFields(log.Fields{",
          "358:       \"repo\":     repo.Repo,",
          "359:       \"revision\": revision,",
          "360:       \"file\":     oobError.File,",
          "361:      }).Warn(\"repository contains out-of-bounds symlink\")",
          "362:      return fmt.Errorf(\"repository contains out-of-bounds symlinks. file: %s\", oobError.File)",
          "363:     } else {",
          "364:      return err",
          "365:     }",
          "366:    }",
          "367:   }",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"path\"",
          "14:  \"path/filepath\"",
          "15:  \"regexp\"",
          "16:  \"strings\"",
          "17:  \"testing\"",
          "18:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"sort\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   } else {",
          "67:    gitClient.On(\"VerifyCommitSignature\", mock.Anything).Return(\"\", nil)",
          "68:   }",
          "70: }",
          "73:  helmClient := &helmmocks.Client{}",
          "74:  gitClient := &gitmocks.Client{}",
          "75:  cf(gitClient)",
          "",
          "[Removed Lines]",
          "69:  })",
          "72: func newServiceWithOpt(cf clientFunc) (*Service, *gitmocks.Client) {",
          "",
          "[Added Lines]",
          "70:  }, root)",
          "73: func newServiceWithOpt(cf clientFunc, root string) (*Service, *gitmocks.Client) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:   cacheutil.NewCache(cacheutil.NewInMemoryCache(1*time.Minute)),",
          "78:   1*time.Minute,",
          "79:   1*time.Minute,",
          "82:  chart := \"my-chart\"",
          "83:  version := \"1.1.0\"",
          "84:  helmClient.On(\"GetIndex\", true).Return(&helm.Index{Entries: map[string]helm.Entries{",
          "86:  }}, nil)",
          "87:  helmClient.On(\"ExtractChart\", chart, version).Return(\"./testdata/my-chart\", io.NopCloser, nil)",
          "88:  helmClient.On(\"CleanChartCache\", chart, version).Return(nil)",
          "90:  service.newGitClient = func(rawRepoURL string, root string, creds git.Creds, insecure bool, enableLfs bool, prosy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "91:   return gitClient, nil",
          "",
          "[Removed Lines]",
          "80:  ), RepoServerInitConstants{ParallelismLimit: 1}, argo.NewResourceTracking(), &git.NoopCredsStore{}, os.TempDir())",
          "85:   chart: {{Version: \"1.0.0\"}, {Version: version}},",
          "",
          "[Added Lines]",
          "81:  ), RepoServerInitConstants{ParallelismLimit: 1}, argo.NewResourceTracking(), &git.NoopCredsStore{}, root)",
          "84:  oobChart := \"out-of-bounds-chart\"",
          "87:   chart:    {{Version: \"1.0.0\"}, {Version: version}},",
          "88:   oobChart: {{Version: \"1.0.0\"}, {Version: version}},",
          "91:  helmClient.On(\"ExtractChart\", oobChart, version).Return(\"./testdata2/out-of-bounds-chart\", io.NopCloser, nil)",
          "93:  helmClient.On(\"CleanChartCache\", oobChart, version).Return(nil)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:   gitClient.On(\"LsRemote\", revision).Return(revision, revisionErr)",
          "125:   gitClient.On(\"CommitSHA\").Return(\"632039659e542ed7de0c170a4fcc1c571b288fc0\", nil)",
          "126:   gitClient.On(\"Root\").Return(root)",
          "129:  service.newGitClient = func(rawRepoURL string, root string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "130:   return gitClient, nil",
          "",
          "[Removed Lines]",
          "127:  })",
          "",
          "[Added Lines]",
          "132:  }, root)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159: }",
          "161: func TestGenerateYamlManifestInDir(t *testing.T) {",
          "165:  q := apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: &src}",
          "",
          "[Removed Lines]",
          "162:  service := newService(\"../..\")",
          "164:  src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "167:  service := newService(\"../../manifests/base\")",
          "169:  src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "249: }",
          "251: func TestGenerateManifests_K8SAPIResetCache(t *testing.T) {",
          "255:  q := apiclient.ManifestRequest{",
          "256:   KubeVersion: \"v1.16.0\",",
          "257:   Repo:        &argoappv1.Repository{}, ApplicationSource: &src,",
          "",
          "[Removed Lines]",
          "252:  service := newService(\"../..\")",
          "254:  src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "257:  service := newService(\"../../manifests/base\")",
          "259:  src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "274: }",
          "276: func TestGenerateManifests_EmptyCache(t *testing.T) {",
          "280:  q := apiclient.ManifestRequest{",
          "281:   Repo: &argoappv1.Repository{}, ApplicationSource: &src,",
          "282:  }",
          "",
          "[Removed Lines]",
          "277:  service := newService(\"../..\")",
          "279:  src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "282:  service := newService(\"../../manifests/base\")",
          "284:  src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "706: }",
          "708: func TestGenerateHelmWithValues(t *testing.T) {",
          "711:  res, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "712:   Repo:    &argoappv1.Repository{},",
          "713:   AppName: \"test\",",
          "714:   ApplicationSource: &argoappv1.ApplicationSource{",
          "716:    Helm: &argoappv1.ApplicationSourceHelm{",
          "717:     ValueFiles: []string{\"values-production.yaml\"},",
          "718:     Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "709:  service := newService(\"../..\")",
          "715:    Path: \"./util/helm/testdata/redis\",",
          "",
          "[Added Lines]",
          "714:  service := newService(\"../../util/helm/testdata/redis\")",
          "720:    Path: \".\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "741: }",
          "743: func TestHelmWithMissingValueFiles(t *testing.T) {",
          "745:  missingValuesFile := \"values-prod-overrides.yaml\"",
          "747:  req := &apiclient.ManifestRequest{",
          "748:   Repo:    &argoappv1.Repository{},",
          "749:   AppName: \"test\",",
          "750:   ApplicationSource: &argoappv1.ApplicationSource{",
          "752:    Helm: &argoappv1.ApplicationSourceHelm{",
          "753:     ValueFiles: []string{\"values-production.yaml\", missingValuesFile},",
          "754:    },",
          "",
          "[Removed Lines]",
          "744:  service := newService(\"../..\")",
          "751:    Path: \"./util/helm/testdata/redis\",",
          "",
          "[Added Lines]",
          "749:  service := newService(\"../../util/helm/testdata/redis\")",
          "756:    Path: \".\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "771: func TestGenerateHelmWithValuesDirectoryTraversal(t *testing.T) {",
          "773:  _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "774:   Repo:    &argoappv1.Repository{},",
          "775:   AppName: \"test\",",
          "776:   ApplicationSource: &argoappv1.ApplicationSource{",
          "778:    Helm: &argoappv1.ApplicationSourceHelm{",
          "779:     ValueFiles: []string{\"../minio/values.yaml\"},",
          "780:     Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "772:  service := newService(\"../..\")",
          "777:    Path: \"./util/helm/testdata/redis\",",
          "",
          "[Added Lines]",
          "777:  service := newService(\"../../util/helm/testdata\")",
          "782:    Path: \"./redis\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "784:  assert.NoError(t, err)",
          "788:  _, err = service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "789:   Repo:    &argoappv1.Repository{},",
          "790:   AppName: \"test\",",
          "791:   ApplicationSource: &argoappv1.ApplicationSource{",
          "793:   },",
          "794:  })",
          "795:  assert.NoError(t, err)",
          "796: }",
          "800: func TestHelmManifestFromChartRepoWithValueFile(t *testing.T) {",
          "",
          "[Removed Lines]",
          "787:  service = newService(\"./testdata/my-chart\")",
          "792:    Path: \".\",",
          "",
          "[Added Lines]",
          "792:  service = newService(\"./testdata\")",
          "797:    Path: \"./my-chart\",",
          "803: func TestChartRepoWithOutOfBoundsSymlink(t *testing.T) {",
          "804:  service := newService(\".\")",
          "805:  source := &argoappv1.ApplicationSource{Chart: \"out-of-bounds-chart\", TargetRevision: \">= 1.0.0\"}",
          "806:  request := &apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: source, NoCache: true}",
          "807:  _, err := service.GenerateManifest(context.Background(), request)",
          "808:  assert.ErrorContains(t, err, \"chart contains out-of-bounds symlinks\")",
          "809: }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "838: func TestHelmManifestFromChartRepoWithValueFileLinks(t *testing.T) {",
          "839:  t.Run(\"Valid symlink\", func(t *testing.T) {",
          "841:   source := &argoappv1.ApplicationSource{",
          "842:    Chart:          \"my-chart\",",
          "843:    TargetRevision: \">= 1.0.0\",",
          "",
          "[Removed Lines]",
          "840:   service := newService(\"../..\")",
          "",
          "[Added Lines]",
          "853:   service := newService(\".\")",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "849:   _, err := service.GenerateManifest(context.Background(), request)",
          "850:   assert.NoError(t, err)",
          "851:  })",
          "866: }",
          "868: func TestGenerateHelmWithURL(t *testing.T) {",
          "871:  _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "872:   Repo:    &argoappv1.Repository{},",
          "873:   AppName: \"test\",",
          "874:   ApplicationSource: &argoappv1.ApplicationSource{",
          "876:    Helm: &argoappv1.ApplicationSourceHelm{",
          "877:     ValueFiles: []string{\"https://raw.githubusercontent.com/argoproj/argocd-example-apps/master/helm-guestbook/values.yaml\"},",
          "878:     Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "852:  t.Run(\"Symlink pointing to outside\", func(t *testing.T) {",
          "853:   service := newService(\"../..\")",
          "854:   source := &argoappv1.ApplicationSource{",
          "855:    Chart:          \"my-chart\",",
          "856:    TargetRevision: \">= 1.0.0\",",
          "857:    Helm: &argoappv1.ApplicationSourceHelm{",
          "858:     ValueFiles: []string{\"my-chart-outside-link.yaml\"},",
          "859:    },",
          "860:   }",
          "861:   request := &apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: source, NoCache: true}",
          "862:   _, err := service.GenerateManifest(context.Background(), request)",
          "863:   assert.Error(t, err)",
          "864:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "865:  })",
          "869:  service := newService(\"../..\")",
          "875:    Path: \"./util/helm/testdata/redis\",",
          "",
          "[Added Lines]",
          "868:  service := newService(\"../../util/helm/testdata/redis\")",
          "874:    Path: \".\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "883:  assert.NoError(t, err)",
          "884: }",
          "888: func TestGenerateHelmWithValuesDirectoryTraversalOutsideRepo(t *testing.T) {",
          "889:  t.Run(\"Values file with relative path pointing outside repo root\", func(t *testing.T) {",
          "891:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "892:    Repo:    &argoappv1.Repository{},",
          "893:    AppName: \"test\",",
          "894:    ApplicationSource: &argoappv1.ApplicationSource{",
          "896:     Helm: &argoappv1.ApplicationSourceHelm{",
          "898:      Values:     `cluster: {slaveCount: 2}`,",
          "899:     },",
          "900:    },",
          "",
          "[Removed Lines]",
          "890:   service := newService(\"../..\")",
          "895:     Path: \"./util/helm/testdata/redis\",",
          "897:      ValueFiles: []string{\"../../../../../minio/values.yaml\"},",
          "",
          "[Added Lines]",
          "889:   service := newService(\"../../util/helm/testdata/redis\")",
          "894:     Path: \".\",",
          "896:      ValueFiles: []string{\"../minio/values.yaml\"},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "904:  })",
          "906:  t.Run(\"Values file with relative path pointing inside repo root\", func(t *testing.T) {",
          "908:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "909:    Repo:    &argoappv1.Repository{},",
          "910:    AppName: \"test\",",
          "911:    ApplicationSource: &argoappv1.ApplicationSource{",
          "913:     Helm: &argoappv1.ApplicationSourceHelm{",
          "914:      ValueFiles: []string{\"../my-chart/my-chart-values.yaml\"},",
          "915:      Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "907:   service := newService(\"./testdata/my-chart\")",
          "912:     Path: \".\",",
          "",
          "[Added Lines]",
          "906:   service := newService(\"./testdata\")",
          "911:     Path: \"./my-chart\",",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "920:  })",
          "922:  t.Run(\"Values file with absolute path stays within repo root\", func(t *testing.T) {",
          "924:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "925:    Repo:    &argoappv1.Repository{},",
          "926:    AppName: \"test\",",
          "927:    ApplicationSource: &argoappv1.ApplicationSource{",
          "929:     Helm: &argoappv1.ApplicationSourceHelm{",
          "931:      Values:     `cluster: {slaveCount: 2}`,",
          "932:     },",
          "933:    },",
          "",
          "[Removed Lines]",
          "923:   service := newService(\"./testdata/my-chart\")",
          "928:     Path: \".\",",
          "930:      ValueFiles: []string{\"/my-chart-values.yaml\"},",
          "",
          "[Added Lines]",
          "922:   service := newService(\"./testdata\")",
          "927:     Path: \"./my-chart\",",
          "929:      ValueFiles: []string{\"/my-chart/my-chart-values.yaml\"},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "936:  })",
          "938:  t.Run(\"Values file with absolute path using back-references outside repo root\", func(t *testing.T) {",
          "940:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "941:    Repo:    &argoappv1.Repository{},",
          "942:    AppName: \"test\",",
          "943:    ApplicationSource: &argoappv1.ApplicationSource{",
          "945:     Helm: &argoappv1.ApplicationSourceHelm{",
          "946:      ValueFiles: []string{\"/../../../my-chart-values.yaml\"},",
          "947:      Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "939:   service := newService(\"./testdata/my-chart\")",
          "944:     Path: \".\",",
          "",
          "[Added Lines]",
          "938:   service := newService(\"./testdata\")",
          "943:     Path: \"./my-chart\",",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "953:  })",
          "955:  t.Run(\"Remote values file from forbidden protocol\", func(t *testing.T) {",
          "957:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "958:    Repo:    &argoappv1.Repository{},",
          "959:    AppName: \"test\",",
          "960:    ApplicationSource: &argoappv1.ApplicationSource{",
          "962:     Helm: &argoappv1.ApplicationSourceHelm{",
          "963:      ValueFiles: []string{\"file://../../../../my-chart-values.yaml\"},",
          "964:      Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "956:   service := newService(\"./testdata/my-chart\")",
          "961:     Path: \".\",",
          "",
          "[Added Lines]",
          "955:   service := newService(\"./testdata\")",
          "960:     Path: \"./my-chart\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "970:  })",
          "972:  t.Run(\"Remote values file from custom allowed protocol\", func(t *testing.T) {",
          "974:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "975:    Repo:    &argoappv1.Repository{},",
          "976:    AppName: \"test\",",
          "977:    ApplicationSource: &argoappv1.ApplicationSource{",
          "979:     Helm: &argoappv1.ApplicationSourceHelm{",
          "980:      ValueFiles: []string{\"s3://my-bucket/my-chart-values.yaml\"},",
          "981:     },",
          "",
          "[Removed Lines]",
          "973:   service := newService(\"./testdata/my-chart\")",
          "978:     Path: \".\",",
          "",
          "[Added Lines]",
          "972:   service := newService(\"./testdata\")",
          "977:     Path: \"./my-chart\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1026: func TestGenerateHelmWithFileParameter(t *testing.T) {",
          "1029:  _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "1030:   Repo:    &argoappv1.Repository{},",
          "1031:   AppName: \"test\",",
          "1032:   ApplicationSource: &argoappv1.ApplicationSource{",
          "1034:    Helm: &argoappv1.ApplicationSourceHelm{",
          "1035:     ValueFiles: []string{\"values-production.yaml\"},",
          "1036:     Values:     `cluster: {slaveCount: 2}`,",
          "",
          "[Removed Lines]",
          "1027:  service := newService(\"../..\")",
          "1033:    Path: \"./util/helm/testdata/redis\",",
          "",
          "[Added Lines]",
          "1026:  service := newService(\"../../util/helm/testdata\")",
          "1032:    Path: \"./redis\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1166: }",
          "1168: func TestGetAppDetailsHelm(t *testing.T) {",
          "1171:  res, err := service.GetAppDetails(context.Background(), &apiclient.RepoServerAppDetailsQuery{",
          "1172:   Repo: &argoappv1.Repository{},",
          "1173:   Source: &argoappv1.ApplicationSource{",
          "1175:   },",
          "1176:  })",
          "",
          "[Removed Lines]",
          "1169:  service := newService(\"../..\")",
          "1174:    Path: \"./util/helm/testdata/dependency\",",
          "",
          "[Added Lines]",
          "1168:  service := newService(\"../../util/helm/testdata/dependency\")",
          "1173:    Path: \".\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1182:  assert.EqualValues(t, []string{\"values-production.yaml\", \"values.yaml\"}, res.Helm.ValueFiles)",
          "1183: }",
          "1184: func TestGetAppDetailsHelm_WithNoValuesFile(t *testing.T) {",
          "1187:  res, err := service.GetAppDetails(context.Background(), &apiclient.RepoServerAppDetailsQuery{",
          "1188:   Repo: &argoappv1.Repository{},",
          "1189:   Source: &argoappv1.ApplicationSource{",
          "1191:   },",
          "1192:  })",
          "",
          "[Removed Lines]",
          "1185:  service := newService(\"../..\")",
          "1190:    Path: \"./util/helm/testdata/api-versions\",",
          "",
          "[Added Lines]",
          "1184:  service := newService(\"../../util/helm/testdata/api-versions\")",
          "1189:    Path: \".\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1200: }",
          "1202: func TestGetAppDetailsKustomize(t *testing.T) {",
          "1205:  res, err := service.GetAppDetails(context.Background(), &apiclient.RepoServerAppDetailsQuery{",
          "1206:   Repo: &argoappv1.Repository{},",
          "1207:   Source: &argoappv1.ApplicationSource{",
          "1209:   },",
          "1210:  })",
          "",
          "[Removed Lines]",
          "1203:  service := newService(\"../..\")",
          "1208:    Path: \"./util/kustomize/testdata/kustomization_yaml\",",
          "",
          "[Added Lines]",
          "1202:  service := newService(\"../../util/kustomize/testdata/kustomization_yaml\")",
          "1207:    Path: \".\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1219: func TestGetHelmCharts(t *testing.T) {",
          "1220:  service := newService(\"../..\")",
          "1221:  res, err := service.GetHelmCharts(context.Background(), &apiclient.HelmChartsRequest{Repo: &argoappv1.Repository{}})",
          "1222:  assert.NoError(t, err)",
          "1225:  item := res.Items[0]",
          "1226:  assert.Equal(t, \"my-chart\", item.Name)",
          "1227:  assert.EqualValues(t, []string{\"1.0.0\", \"1.1.0\"}, item.Versions)",
          "1228: }",
          "1230: func TestGetRevisionMetadata(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1223:  assert.Len(t, res.Items, 1)",
          "",
          "[Added Lines]",
          "1223:  sort.Slice(res.Items, func(i, j int) bool {",
          "1224:   return res.Items[i].Name < res.Items[j].Name",
          "1225:  })",
          "1228:  assert.Len(t, res.Items, 2)",
          "1234:  item2 := res.Items[1]",
          "1235:  assert.Equal(t, \"out-of-bounds-chart\", item2.Name)",
          "1236:  assert.EqualValues(t, []string{\"1.0.0\", \"1.1.0\"}, item2.Versions)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1296: func TestGetSignatureVerificationResult(t *testing.T) {",
          "1298:  {",
          "1302:   q := apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: &src, VerifySignature: true}",
          "1304:   res, err := service.GenerateManifest(context.Background(), &q)",
          "",
          "[Removed Lines]",
          "1299:   service := newServiceWithSignature(\"../..\")",
          "1301:   src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "1308:   service := newServiceWithSignature(\"../../manifests/base\")",
          "1310:   src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1307:  }",
          "1309:  {",
          "1313:   q := apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: &src}",
          "1315:   res, err := service.GenerateManifest(context.Background(), &q)",
          "",
          "[Removed Lines]",
          "1310:   service := newServiceWithSignature(\"../..\")",
          "1312:   src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "1319:   service := newServiceWithSignature(\"../../manifests/base\")",
          "1321:   src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1318:  }",
          "1320:  {",
          "1324:   q := apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: &src, VerifySignature: true}",
          "1326:   res, err := service.GenerateManifest(context.Background(), &q)",
          "",
          "[Removed Lines]",
          "1321:   service := newService(\"../..\")",
          "1323:   src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "1330:   service := newService(\"../../manifests/base\")",
          "1332:   src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1329:  }",
          "1331:  {",
          "1335:   q := apiclient.ManifestRequest{Repo: &argoappv1.Repository{}, ApplicationSource: &src, VerifySignature: true}",
          "1337:   res, err := service.GenerateManifest(context.Background(), &q)",
          "",
          "[Removed Lines]",
          "1332:   service := newService(\"../..\")",
          "1334:   src := argoappv1.ApplicationSource{Path: \"manifests/base\"}",
          "",
          "[Added Lines]",
          "1341:   service := newService(\"../../manifests/base\")",
          "1343:   src := argoappv1.ApplicationSource{Path: \".\"}",
          "",
          "---------------"
        ],
        "util/app/path/path.go||util/app/path/path.go": [
          "File: util/app/path/path.go -> util/app/path/path.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"os\"",
          "6:  \"path/filepath\"",
          "7:  \"strings\"",
          "8: )",
          "10: func Path(root, path string) (string, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:  }",
          "28:  return appPath, nil",
          "29: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: type OutOfBoundsSymlinkError struct {",
          "34:  File string",
          "35:  Err  error",
          "36: }",
          "38: func (e *OutOfBoundsSymlinkError) Error() string {",
          "39:  return \"out of bounds symlink found\"",
          "40: }",
          "45: func CheckOutOfBoundsSymlinks(basePath string) error {",
          "46:  absBasePath, err := filepath.Abs(basePath)",
          "47:  if err != nil {",
          "48:   return fmt.Errorf(\"failed to get absolute path: %v\", err)",
          "49:  }",
          "50:  return filepath.Walk(absBasePath, func(path string, info os.FileInfo, err error) error {",
          "51:   if err != nil {",
          "52:    return fmt.Errorf(\"failed to walk for symlinks in %s: %v\", absBasePath, err)",
          "53:   }",
          "54:   if files.IsSymlink(info) {",
          "57:    linkTarget, err := os.Readlink(path)",
          "58:    if err != nil {",
          "59:     return fmt.Errorf(\"failed to read link %s: %v\", path, err)",
          "60:    }",
          "62:    linkRelPath, err := filepath.Rel(absBasePath, path)",
          "63:    if err != nil {",
          "64:     return fmt.Errorf(\"failed to get relative path for symlink: %v\", err)",
          "65:    }",
          "67:    if filepath.IsAbs(linkTarget) {",
          "68:     return &OutOfBoundsSymlinkError{File: linkRelPath}",
          "69:    }",
          "71:    currentDir := filepath.Dir(path)",
          "74:    parts := strings.Split(linkTarget, string(os.PathSeparator))",
          "75:    for _, part := range parts {",
          "76:     newDir := filepath.Join(currentDir, part)",
          "77:     rel, err := filepath.Rel(absBasePath, newDir)",
          "78:     if err != nil {",
          "79:      return fmt.Errorf(\"failed to get relative path for symlink target: %v\", err)",
          "80:     }",
          "81:     if rel == \"..\" || strings.HasPrefix(rel, \"..\"+string(os.PathSeparator)) {",
          "83:      return &OutOfBoundsSymlinkError{File: linkRelPath}",
          "84:     }",
          "85:     currentDir = newDir",
          "86:    }",
          "87:   }",
          "88:   return nil",
          "89:  })",
          "90: }",
          "",
          "---------------"
        ],
        "util/app/path/path_test.go||util/app/path/path_test.go": [
          "File: util/app/path/path_test.go -> util/app/path/path_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  _, err := Path(\"./testdata\", \"file.txt\")",
          "46:  assert.EqualError(t, err, \"file.txt: app path is not a directory\")",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: func TestGoodSymlinks(t *testing.T) {",
          "50:  err := CheckOutOfBoundsSymlinks(\"./testdata/goodlink\")",
          "51:  assert.NoError(t, err)",
          "52: }",
          "55: func TestBadSymlinks(t *testing.T) {",
          "56:  err := CheckOutOfBoundsSymlinks(\"./testdata/badlink\")",
          "57:  oobError := &OutOfBoundsSymlinkError{}",
          "58:  assert.ErrorAs(t, err, &oobError)",
          "59:  assert.Equal(t, oobError.File, \"badlink\")",
          "60: }",
          "63: func TestBadSymlinks2(t *testing.T) {",
          "64:  err := CheckOutOfBoundsSymlinks(\"./testdata/badlink2\")",
          "65:  oobError := &OutOfBoundsSymlinkError{}",
          "66:  assert.ErrorAs(t, err, &oobError)",
          "67:  assert.Equal(t, oobError.File, \"badlink\")",
          "68: }",
          "71: func TestBadSymlinks3(t *testing.T) {",
          "72:  err := CheckOutOfBoundsSymlinks(\"./testdata/badlink3\")",
          "73:  oobError := &OutOfBoundsSymlinkError{}",
          "74:  assert.ErrorAs(t, err, &oobError)",
          "75:  assert.Equal(t, oobError.File, \"badlink\")",
          "76: }",
          "79: func TestAbsSymlink(t *testing.T) {",
          "80:  err := CheckOutOfBoundsSymlinks(\"./testdata/abslink\")",
          "81:  oobError := &OutOfBoundsSymlinkError{}",
          "82:  assert.ErrorAs(t, err, &oobError)",
          "83:  assert.Equal(t, oobError.File, \"abslink\")",
          "84: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76eddafd1c84db673d91577b8a15524702b88a34",
      "candidate_info": {
        "commit_hash": "76eddafd1c84db673d91577b8a15524702b88a34",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/76eddafd1c84db673d91577b8a15524702b88a34",
        "files": [
          "reposerver/apiclient/repository.go",
          "reposerver/apiclient/repository.pb.go",
          "reposerver/repository/repository.go",
          "reposerver/repository/repository.proto",
          "reposerver/repository/repository_test.go",
          "server/application/application.go",
          "server/repository/repository.go",
          "util/argo/argo.go",
          "util/argo/argo_test.go",
          "util/helm/cmd.go",
          "util/helm/helm.go",
          "util/helm/helm_test.go",
          "util/io/path/resolved.go",
          "util/io/path/resolved_test.go",
          "util/io/path/testdata/bam",
          "util/io/path/testdata/bar",
          "util/io/path/testdata/baz",
          "util/io/path/testdata/foo",
          "util/notification/argocd/service.go"
        ],
        "message": "fix: prevent file traversal using helm file values param and application details api (#8606)\n\n* fix: prevent file traversal using helm file values param and application details api\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\n\n* apply reviewer notes: move resolve.go into separate package; use uuid to generate random file\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>",
        "before_after_code_files": [
          "reposerver/apiclient/repository.go||reposerver/apiclient/repository.go",
          "reposerver/apiclient/repository.pb.go||reposerver/apiclient/repository.pb.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository.proto||reposerver/repository/repository.proto",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "server/application/application.go||server/application/application.go",
          "server/repository/repository.go||server/repository/repository.go",
          "util/argo/argo.go||util/argo/argo.go",
          "util/argo/argo_test.go||util/argo/argo_test.go",
          "util/helm/cmd.go||util/helm/cmd.go",
          "util/helm/helm.go||util/helm/helm.go",
          "util/helm/helm_test.go||util/helm/helm_test.go",
          "util/io/path/resolved.go||util/io/path/resolved.go",
          "util/io/path/resolved_test.go||util/io/path/resolved_test.go",
          "util/notification/argocd/service.go||util/notification/argocd/service.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ]
        }
      },
      "candidate_diff": {
        "reposerver/apiclient/repository.go||reposerver/apiclient/repository.go": [
          "File: reposerver/apiclient/repository.go -> reposerver/apiclient/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package apiclient",
          "3: func (q *ManifestRequest) GetValuesFileSchemes() []string {",
          "4:  if q.HelmOptions == nil {",
          "5:   return nil",
          "6:  }",
          "7:  return q.HelmOptions.ValuesFileSchemes",
          "8: }",
          "10: func (q *RepoServerAppDetailsQuery) GetValuesFileSchemes() []string {",
          "11:  if q.HelmOptions == nil {",
          "12:   return nil",
          "13:  }",
          "14:  return q.HelmOptions.ValuesFileSchemes",
          "15: }",
          "",
          "---------------"
        ],
        "reposerver/apiclient/repository.pb.go||reposerver/apiclient/repository.pb.go": [
          "File: reposerver/apiclient/repository.pb.go -> reposerver/apiclient/repository.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "750:  NoRevisionCache      bool                        `protobuf:\"varint,7,opt,name=noRevisionCache,proto3\" json:\"noRevisionCache,omitempty\"`",
          "751:  TrackingMethod       string                      `protobuf:\"bytes,8,opt,name=trackingMethod,proto3\" json:\"trackingMethod,omitempty\"`",
          "752:  EnabledSourceTypes   map[string]bool             `protobuf:\"bytes,9,rep,name=enabledSourceTypes,proto3\" json:\"enabledSourceTypes,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"varint,2,opt,name=value,proto3\"`",
          "753:  XXX_NoUnkeyedLiteral struct{}                    `json:\"-\"`",
          "754:  XXX_unrecognized     []byte                      `json:\"-\"`",
          "755:  XXX_sizecache        int32                       `json:\"-\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:  HelmOptions          *v1alpha1.HelmOptions       `protobuf:\"bytes,10,opt,name=helmOptions,proto3\" json:\"helmOptions,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:  return nil",
          "852: }",
          "855: type RepoAppDetailsResponse struct {",
          "856:  Type                 string            `protobuf:\"bytes,1,opt,name=type,proto3\" json:\"type,omitempty\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855: func (m *RepoServerAppDetailsQuery) GetHelmOptions() *v1alpha1.HelmOptions {",
          "856:  if m != nil {",
          "857:   return m.HelmOptions",
          "858:  }",
          "859:  return nil",
          "860: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1541: }",
          "1543: var fileDescriptor_dd8723cfcc820480 = []byte{",
          "1645: }",
          "",
          "[Removed Lines]",
          "1545:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6f, 0xdb, 0xb6,",
          "1546:  0x16, 0x8f, 0x6c, 0x27, 0xb1, 0x8f, 0xdb, 0xc4, 0x61, 0xbf, 0x74, 0x75, 0xd3, 0x20, 0xd5, 0xc5,",
          "1547:  0x2d, 0x72, 0x6f, 0x5b, 0x19, 0x4d, 0x8b, 0xad, 0x68, 0xb1, 0x01, 0x59, 0x9a, 0xa6, 0x43, 0x9a,",
          "1548:  0x26, 0x53, 0xba, 0x01, 0xdb, 0x8a, 0x15, 0x8c, 0xcc, 0xc8, 0x9c, 0x6d, 0x89, 0x15, 0x65, 0x0f,",
          "1549:  0x2e, 0xb0, 0x87, 0x3d, 0xed, 0x7d, 0xc0, 0xf6, 0xaf, 0xec, 0x71, 0x4f, 0xfb, 0x78, 0xdc, 0x9f,",
          "1550:  0x30, 0x74, 0xff, 0xc5, 0x9e, 0x06, 0x52, 0x5f, 0xb4, 0x2c, 0xa7, 0x1d, 0x9c, 0xa6, 0x2f, 0x36,",
          "1551:  0x79, 0x78, 0xbe, 0x79, 0x78, 0xf8, 0xa3, 0xe0, 0x6a, 0x40, 0x98, 0xcf, 0x49, 0x30, 0x20, 0x41,",
          "1552:  0x53, 0x0e, 0x69, 0xe8, 0x07, 0x43, 0x65, 0x68, 0xb1, 0xc0, 0x0f, 0x7d, 0x04, 0x19, 0xc5, 0x38,",
          "1553:  0xef, 0xfa, 0xae, 0x2f, 0xc9, 0x4d, 0x31, 0x8a, 0x38, 0x8c, 0x65, 0xd7, 0xf7, 0xdd, 0x2e, 0x69,",
          "1554:  0x62, 0x46, 0x9b, 0xd8, 0xf3, 0xfc, 0x10, 0x87, 0xd4, 0xf7, 0x78, 0xbc, 0x6a, 0x76, 0xee, 0x70,",
          "1555:  0x8b, 0xfa, 0x72, 0xd5, 0xf1, 0x03, 0xd2, 0x1c, 0xdc, 0x6c, 0xba, 0xc4, 0x23, 0x01, 0x0e, 0x49,",
          "1556:  0x2b, 0xe6, 0x79, 0xe4, 0xd2, 0xb0, 0xdd, 0x3f, 0xb4, 0x1c, 0xbf, 0xd7, 0xc4, 0x81, 0x34, 0xf1,",
          "1557:  0xa5, 0x1c, 0xdc, 0x70, 0x5a, 0xcd, 0xc1, 0x7a, 0x93, 0x75, 0x5c, 0x21, 0xcf, 0x9b, 0x98, 0xb1,",
          "1558:  0x2e, 0x75, 0xa4, 0xfe, 0xe6, 0xe0, 0x26, 0xee, 0xb2, 0x36, 0x1e, 0xd3, 0x66, 0x7e, 0x07, 0xb0,",
          "1559:  0xb8, 0x8b, 0x3d, 0x7a, 0x44, 0x78, 0x68, 0x93, 0xe7, 0x7d, 0xc2, 0x43, 0xf4, 0x14, 0x2a, 0x22,",
          "1560:  0x0e, 0x5d, 0x5b, 0xd5, 0xd6, 0xea, 0xeb, 0x0f, 0xad, 0xcc, 0xa0, 0x95, 0x18, 0x94, 0x83, 0x67,",
          "1561:  0x4e, 0xcb, 0x1a, 0xac, 0x5b, 0xac, 0xe3, 0x5a, 0xc2, 0xa0, 0xa5, 0x18, 0xb4, 0x12, 0x83, 0x96,",
          "1562:  0x9d, 0x66, 0xc4, 0x96, 0x5a, 0x91, 0x01, 0xd5, 0x80, 0x0c, 0x28, 0xa7, 0xbe, 0xa7, 0x97, 0x56,",
          "1563:  0xb5, 0xb5, 0x9a, 0x9d, 0xce, 0x91, 0x0e, 0xf3, 0x9e, 0xbf, 0x89, 0x9d, 0x36, 0xd1, 0xcb, 0xab,",
          "1564:  0xda, 0x5a, 0xd5, 0x4e, 0xa6, 0x68, 0x15, 0xea, 0x98, 0xb1, 0x47, 0xf8, 0x90, 0x74, 0x77, 0xc8,",
          "1565:  0x50, 0xaf, 0x48, 0x41, 0x95, 0x24, 0x64, 0x31, 0x63, 0x8f, 0x71, 0x8f, 0xe8, 0xb3, 0x72, 0x35,",
          "1566:  0x99, 0xa2, 0x65, 0xa8, 0x79, 0xb8, 0x47, 0x38, 0xc3, 0x0e, 0xd1, 0xab, 0x72, 0x2d, 0x23, 0xa0,",
          "1567:  0xaf, 0x61, 0x49, 0x71, 0xfc, 0xc0, 0xef, 0x07, 0x0e, 0xd1, 0x41, 0x86, 0xbe, 0x37, 0x5d, 0xe8,",
          "1568:  0x1b, 0x79, 0xb5, 0xf6, 0xb8, 0x25, 0xf4, 0x05, 0xcc, 0xca, 0xa2, 0xd1, 0xeb, 0xab, 0xe5, 0x13,",
          "1569:  0xcd, 0x76, 0xa4, 0x16, 0x79, 0x30, 0xcf, 0xba, 0x7d, 0x97, 0x7a, 0x5c, 0x3f, 0x23, 0x2d, 0x3c,",
          "1570:  0x99, 0xce, 0xc2, 0xa6, 0xef, 0x1d, 0x51, 0x77, 0x17, 0x7b, 0xd8, 0x25, 0x3d, 0xe2, 0x85, 0xfb,",
          "1571:  0x52, 0xb9, 0x9d, 0x18, 0x41, 0x2f, 0xa0, 0xd1, 0xe9, 0xf3, 0xd0, 0xef, 0xd1, 0x17, 0x64, 0x8f,",
          "1572:  0xc9, 0xe2, 0xd6, 0xcf, 0xca, 0x6c, 0x3e, 0x9e, 0xce, 0xf0, 0x4e, 0x4e, 0xab, 0x3d, 0x66, 0x47,",
          "1573:  0x14, 0x49, 0xa7, 0x7f, 0x48, 0x3e, 0x21, 0x81, 0xac, 0xae, 0x85, 0xa8, 0x48, 0x14, 0x52, 0x54,",
          "1574:  0x46, 0x34, 0x9e, 0x71, 0x7d, 0x71, 0xb5, 0x1c, 0x95, 0x51, 0x4a, 0x42, 0x6b, 0xb0, 0x38, 0x20,",
          "1575:  0x01, 0x3d, 0x1a, 0x1e, 0x50, 0xd7, 0xc3, 0x61, 0x3f, 0x20, 0x7a, 0x43, 0x96, 0x62, 0x9e, 0x8c,",
          "1576:  0x7a, 0x70, 0xb6, 0x4d, 0xba, 0x3d, 0x91, 0xf2, 0xcd, 0x80, 0xb4, 0xb8, 0xbe, 0x24, 0xf3, 0xbb,",
          "1577:  0x3d, 0xfd, 0x0e, 0x4a, 0x75, 0xf6, 0xa8, 0x76, 0xe1, 0x98, 0xe7, 0xdb, 0xf1, 0x49, 0x89, 0xce,",
          "1578:  0x08, 0x8a, 0x1c, 0xcb, 0x91, 0xd1, 0x55, 0x58, 0x08, 0x03, 0xec, 0x74, 0xa8, 0xe7, 0xee, 0x92,",
          "1579:  0xb0, 0xed, 0xb7, 0xf4, 0x73, 0x32, 0x13, 0x39, 0x2a, 0x72, 0x00, 0x11, 0x0f, 0x1f, 0x76, 0x49,",
          "1580:  0x2b, 0xaa, 0xc5, 0x27, 0x43, 0x46, 0xb8, 0x7e, 0x5e, 0x46, 0x71, 0xcb, 0x52, 0x9a, 0x5b, 0xae,",
          "1581:  0x41, 0x58, 0x5b, 0x63, 0x52, 0x5b, 0x5e, 0x18, 0x0c, 0xed, 0x02, 0x75, 0xa8, 0x03, 0x75, 0x11,",
          "1582:  0x47, 0x52, 0x0a, 0x17, 0x64, 0x29, 0x7c, 0x38, 0x5d, 0x8e, 0x1e, 0x66, 0x0a, 0x6d, 0x55, 0xbb,",
          "1583:  0xb1, 0x05, 0x97, 0x26, 0xf8, 0x86, 0x1a, 0x50, 0xee, 0x90, 0xa1, 0xec, 0x69, 0x35, 0x5b, 0x0c,",
          "1584:  0xd1, 0x79, 0x98, 0x1d, 0xe0, 0x6e, 0x9f, 0xc8, 0x2e, 0x54, 0xb5, 0xa3, 0xc9, 0xdd, 0xd2, 0x1d,",
          "1585:  0xcd, 0xec, 0xc3, 0x85, 0x27, 0x32, 0xdc, 0xf4, 0x30, 0x9d, 0x46, 0x67, 0x34, 0x1f, 0xc2, 0xc5,",
          "1586:  0xbc, 0x59, 0xce, 0x7c, 0x8f, 0x13, 0x64, 0x01, 0x92, 0xd5, 0x47, 0x49, 0x2b, 0x5b, 0x95, 0x5e,",
          "1587:  0x54, 0xed, 0x82, 0x15, 0xf3, 0x9b, 0x12, 0x5c, 0xb4, 0x09, 0xf7, 0xbb, 0x03, 0x92, 0x94, 0xc6,",
          "1588:  0xe9, 0x34, 0xf7, 0xcf, 0xa1, 0x8c, 0x19, 0x93, 0x19, 0x9d, 0x7a, 0x97, 0x95, 0xf6, 0x69, 0x0b,",
          "1589:  0xad, 0xe8, 0x3a, 0x2c, 0xe1, 0xde, 0x21, 0x75, 0xfb, 0x7e, 0x9f, 0x27, 0x61, 0xc9, 0x7b, 0xa2,",
          "1590:  0x66, 0x8f, 0x2f, 0x98, 0x0e, 0x5c, 0x1a, 0x4b, 0x41, 0x9c, 0x4e, 0xf5, 0x0a, 0xd2, 0x72, 0x57,",
          "1591:  0x50, 0xa1, 0x91, 0xd2, 0x24, 0x23, 0xbf, 0x68, 0xd0, 0xc8, 0x4e, 0x47, 0xac, 0x7e, 0x19, 0x6a,",
          "1592:  0xbd, 0x98, 0xc6, 0x75, 0x4d, 0xb6, 0x98, 0x8c, 0x30, 0x7a, 0x1b, 0x95, 0xf2, 0xb7, 0xd1, 0x45,",
          "1593:  0x98, 0x8b, 0x70, 0x46, 0x1c, 0x58, 0x3c, 0x1b, 0x71, 0xb9, 0x92, 0x73, 0x79, 0x05, 0x80, 0xa7,",
          "1594:  0xe5, 0xae, 0xcf, 0xc9, 0x55, 0x85, 0x82, 0x4c, 0x38, 0x13, 0xf5, 0x2e, 0x9b, 0xf0, 0x7e, 0x37,",
          "1595:  0xd4, 0xe7, 0x25, 0xc7, 0x08, 0xcd, 0xf4, 0x61, 0xf1, 0x11, 0x15, 0x31, 0x1c, 0xf1, 0xd3, 0x29,",
          "1596:  0xf6, 0x77, 0xa0, 0x22, 0x8c, 0x89, 0xc0, 0x0e, 0x03, 0xec, 0x39, 0x6d, 0x92, 0xe4, 0x2a, 0x9d,",
          "1597:  0x23, 0x04, 0x95, 0x10, 0xbb, 0x5c, 0x2f, 0x49, 0xba, 0x1c, 0x9b, 0x3f, 0x96, 0x22, 0x4f, 0x37,",
          "1598:  0x18, 0xe3, 0x6f, 0x1f, 0xb0, 0x14, 0xb7, 0xd0, 0xf2, 0x78, 0x0b, 0xcd, 0xb9, 0xfc, 0x4f, 0x5a,",
          "1599:  0xe8, 0xc9, 0x75, 0xb5, 0xf9, 0x0d, 0xc6, 0x84, 0x23, 0xe8, 0x26, 0x54, 0x30, 0x63, 0x51, 0xc2,",
          "1600:  0xeb, 0xeb, 0x97, 0x55, 0x47, 0x63, 0x16, 0xf1, 0x1f, 0xbb, 0x24, 0x59, 0x8d, 0x77, 0xa1, 0x96,",
          "1601:  0x92, 0x5e, 0x65, 0xb6, 0xa6, 0x9a, 0xfd, 0x6b, 0x16, 0xfe, 0x25, 0x72, 0x7a, 0x20, 0x0b, 0x79,",
          "1602:  0x83, 0xb1, 0xfb, 0x24, 0xc4, 0xb4, 0xcb, 0x3f, 0xea, 0x93, 0x60, 0xf8, 0x86, 0xb7, 0xce, 0x85,",
          "1603:  0xb9, 0xe8, 0x1c, 0xc4, 0x1d, 0xe9, 0xc4, 0x01, 0x5d, 0xac, 0x3e, 0x43, 0x71, 0xe5, 0x37, 0x83,",
          "1604:  0xe2, 0x8a, 0x50, 0x55, 0xe5, 0x94, 0x50, 0xd5, 0x64, 0x60, 0xad, 0xc0, 0xf5, 0xb9, 0x51, 0xb8,",
          "1605:  0x5e, 0x00, 0x56, 0xe6, 0x5f, 0x17, 0xac, 0x54, 0x0b, 0xc1, 0x4a, 0xaf, 0xf0, 0xa4, 0xd5, 0x64,",
          "1606:  0xba, 0xdf, 0x53, 0x0b, 0x78, 0x62, 0xad, 0xbd, 0x8d, 0x33, 0xf7, 0xad, 0xbc, 0x88, 0x99, 0x9f,",
          "1607:  0xb9, 0x92, 0xde, 0x12, 0xa2, 0xb9, 0x89, 0x7e, 0x1d, 0xe9, 0x91, 0x63, 0x74, 0x1b, 0xe6, 0x3b,",
          "1608:  0xdc, 0xf7, 0x3c, 0x12, 0xc6, 0x05, 0x6b, 0xa8, 0x91, 0xed, 0x44, 0x4b, 0x1b, 0x8c, 0x1d, 0x30,",
          "1609:  0xe2, 0xd8, 0x09, 0x2b, 0xba, 0x06, 0x15, 0x01, 0x82, 0xe4, 0x8d, 0x51, 0x5f, 0xbf, 0xa4, 0x8a,",
          "1610:  0x08, 0xa4, 0x94, 0xf0, 0x4b, 0x26, 0x74, 0x17, 0x6a, 0xe9, 0x0e, 0xc7, 0x25, 0xb4, 0x3c, 0x62,",
          "1611:  0x24, 0x59, 0x4c, 0xc4, 0x32, 0x76, 0x21, 0xdb, 0xa2, 0x01, 0x71, 0x24, 0xfa, 0x98, 0x1d, 0x97,",
          "1612:  0xbd, 0x9f, 0x2c, 0xa6, 0xb2, 0x29, 0xbb, 0xf9, 0xb3, 0x06, 0x57, 0xb2, 0xad, 0x49, 0x6a, 0x60,",
          "1613:  0x97, 0x84, 0xb8, 0x85, 0x43, 0xfc, 0xf6, 0x3b, 0xf9, 0x55, 0x58, 0x70, 0xda, 0xc4, 0xe9, 0x64,",
          "1614:  0xb0, 0x3f, 0x7a, 0x81, 0xe6, 0xa8, 0xe6, 0xaf, 0x25, 0x58, 0x18, 0xdd, 0x08, 0xb1, 0x93, 0xe2,",
          "1615:  0x02, 0x4f, 0x76, 0x52, 0x8c, 0xd1, 0x3e, 0x9c, 0x21, 0xde, 0x80, 0x06, 0xbe, 0x27, 0x1e, 0x49,",
          "1616:  0x49, 0x5f, 0xb8, 0x3e, 0x79, 0x3b, 0xad, 0x2d, 0x85, 0x3d, 0xaa, 0xcb, 0x11, 0x0d, 0xc8, 0x03,",
          "1617:  0x60, 0x38, 0xc0, 0x3d, 0x12, 0x92, 0x40, 0x1c, 0xfe, 0xf2, 0x09, 0x1c, 0xfe, 0xc8, 0x83, 0xfd,",
          "1618:  0x44, 0xad, 0xad, 0x58, 0x30, 0x9e, 0xc1, 0xd2, 0x98, 0x4b, 0x05, 0xb5, 0x7f, 0x5b, 0xad, 0xfd,",
          "1619:  0xfa, 0xfa, 0x4a, 0x41, 0x84, 0x8a, 0x1a, 0xf5, 0x6c, 0xfc, 0x54, 0x82, 0xba, 0x52, 0x9f, 0x85,",
          "1620:  0x69, 0x5c, 0x01, 0x90, 0x02, 0x0f, 0x68, 0x37, 0xbe, 0x57, 0x6b, 0xb6, 0x42, 0x41, 0x9d, 0x82,",
          "1621:  0xa4, 0xec, 0x4c, 0xff, 0xb8, 0x28, 0xcc, 0x88, 0xc0, 0x66, 0xd2, 0x34, 0x8f, 0xfb, 0x60, 0x3c,",
          "1622:  0x43, 0x5f, 0xc1, 0xc2, 0x11, 0xed, 0x92, 0xfd, 0xcc, 0x91, 0x39, 0xe9, 0xc8, 0xde, 0xf4, 0x8e,",
          "1623:  0x3c, 0x50, 0xf5, 0xda, 0x39, 0x33, 0xe6, 0xff, 0xa1, 0x91, 0x3f, 0xae, 0xc2, 0x49, 0xda, 0xc3,",
          "1624:  0x6e, 0x9a, 0xad, 0x78, 0x66, 0x7e, 0xaf, 0x01, 0x1a, 0xdf, 0x8f, 0x49, 0x49, 0xef, 0xdc, 0xe1,",
          "1625:  0xc9, 0x2b, 0x3a, 0x3a, 0x28, 0x0a, 0x05, 0xed, 0x40, 0xbd, 0x45, 0x78, 0x48, 0x3d, 0xe9, 0x70,",
          "1626:  0xdc, 0x44, 0xfe, 0x77, 0xfc, 0xc6, 0xdf, 0xcf, 0x04, 0x6c, 0x55, 0xda, 0xfc, 0x18, 0x2e, 0x1f,",
          "1627:  0xcb, 0xad, 0x20, 0x62, 0x6d, 0x04, 0x11, 0x1f, 0x8b, 0xa3, 0x4d, 0x04, 0x8d, 0x7c, 0x37, 0x32,",
          "1628:  0x9f, 0xc3, 0x92, 0xc8, 0xe9, 0x66, 0x1b, 0x07, 0xe1, 0x29, 0xa1, 0xdc, 0x7b, 0x50, 0x4b, 0x4d,",
          "1629:  0x16, 0xe6, 0xda, 0x80, 0xea, 0x20, 0xf9, 0x1a, 0x11, 0xc1, 0xdc, 0x74, 0x6e, 0x6e, 0x00, 0x52,",
          "1630:  0xfd, 0x8d, 0xef, 0x8d, 0x6b, 0x30, 0x4b, 0x43, 0xd2, 0x4b, 0xc0, 0xdb, 0x85, 0x7c, 0xbb, 0x97,",
          "1631:  0xec, 0x76, 0xc4, 0xb3, 0xfe, 0xe7, 0x2c, 0x2c, 0x65, 0x5d, 0x57, 0xfc, 0x52, 0x87, 0xa0, 0x3d,",
          "1632:  0x68, 0x6c, 0xc7, 0xdf, 0x01, 0x93, 0xc7, 0x0b, 0xfa, 0xf7, 0x31, 0x0f, 0x7e, 0x63, 0xb9, 0x78,",
          "1633:  0x31, 0xf2, 0xc8, 0x9c, 0x41, 0x9f, 0xc2, 0xc2, 0xe8, 0xcb, 0x15, 0x5d, 0x51, 0x25, 0x0a, 0x1f,",
          "1634:  0xd3, 0x86, 0x79, 0x1c, 0x4b, 0xaa, 0xfa, 0x29, 0x2c, 0xe6, 0x9e, 0x71, 0xc8, 0x1c, 0xbd, 0xee,",
          "1635:  0x8b, 0x9e, 0xb9, 0xc6, 0x7f, 0x8e, 0xe5, 0x49, 0xb5, 0xdf, 0x83, 0x6a, 0xf2, 0xec, 0x19, 0xcd,",
          "1636:  0x40, 0xee, 0x31, 0x64, 0x34, 0x46, 0xf5, 0x1d, 0x71, 0x73, 0x06, 0xbd, 0x1f, 0x09, 0x0b, 0x58,",
          "1637:  0x3c, 0x2e, 0xac, 0x80, 0x7d, 0xe3, 0x5c, 0x01, 0xc0, 0x96, 0xa1, 0x9d, 0xdd, 0x96, 0xfd, 0x3f,",
          "1638:  0x86, 0x06, 0xe8, 0xbf, 0xaf, 0x85, 0x63, 0x0c, 0x33, 0xcf, 0x36, 0x8e, 0x2e, 0xcc, 0x19, 0xf4,",
          "1639:  0x83, 0x06, 0xe7, 0xb6, 0x49, 0x98, 0xbf, 0x69, 0xd1, 0x8d, 0x62, 0x23, 0x13, 0x6e, 0x64, 0xe3,",
          "1640:  0xf1, 0xb4, 0x27, 0x62, 0x54, 0xad, 0x39, 0x83, 0xf6, 0x65, 0xd8, 0x59, 0x65, 0xa3, 0xcb, 0x85,",
          "1641:  0x25, 0x9c, 0x66, 0x6f, 0x65, 0xd2, 0x72, 0x12, 0xea, 0x07, 0x1b, 0xbf, 0xbd, 0x5c, 0xd1, 0x7e,",
          "1642:  0x7f, 0xb9, 0xa2, 0xfd, 0xf1, 0x72, 0x45, 0xfb, 0xec, 0xd6, 0x2b, 0x3e, 0x90, 0x2b, 0xdf, 0xf2,",
          "1643:  0x31, 0xa3, 0x4e, 0x97, 0x12, 0x2f, 0x3c, 0x9c, 0x93, 0x9f, 0xc3, 0x6f, 0xfd, 0x1d, 0x00, 0x00,",
          "1644:  0xff, 0xff, 0x01, 0x70, 0xee, 0x21, 0xea, 0x17, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "1553:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0x1b, 0x45,",
          "1554:  0x14, 0xcf, 0xda, 0x4e, 0x62, 0x3f, 0xb7, 0x89, 0x33, 0xfd, 0x5a, 0x96, 0x34, 0x4a, 0x17, 0x51,",
          "1555:  0x05, 0xda, 0xae, 0xd5, 0xb4, 0x82, 0xaa, 0x15, 0x48, 0x21, 0x4d, 0x53, 0x94, 0xa6, 0x09, 0x9b,",
          "1556:  0x82, 0x04, 0x54, 0x54, 0x93, 0xf5, 0x64, 0x3d, 0xd8, 0xde, 0x9d, 0xee, 0xac, 0x8d, 0x52, 0x89,",
          "1557:  0x03, 0x27, 0xee, 0x48, 0xf0, 0xaf, 0x70, 0xe4, 0xc4, 0xc7, 0x91, 0x3f, 0x01, 0x95, 0x03, 0xff,",
          "1558:  0x06, 0x9a, 0xd9, 0xaf, 0xf1, 0x7a, 0x9d, 0x16, 0x39, 0x4d, 0xc5, 0x25, 0x99, 0x79, 0xf3, 0xbe,",
          "1559:  0xe7, 0xcd, 0x9b, 0xdf, 0xac, 0xe1, 0x72, 0x40, 0x98, 0xcf, 0x49, 0x30, 0x20, 0x41, 0x53, 0x0e,",
          "1560:  0x69, 0xe8, 0x07, 0x87, 0xca, 0xd0, 0x62, 0x81, 0x1f, 0xfa, 0x08, 0x32, 0x8a, 0x71, 0xd6, 0xf5,",
          "1561:  0x5d, 0x5f, 0x92, 0x9b, 0x62, 0x14, 0x71, 0x18, 0x8b, 0xae, 0xef, 0xbb, 0x5d, 0xd2, 0xc4, 0x8c,",
          "1562:  0x36, 0xb1, 0xe7, 0xf9, 0x21, 0x0e, 0xa9, 0xef, 0xf1, 0x78, 0xd5, 0xec, 0xdc, 0xe2, 0x16, 0xf5,",
          "1563:  0xe5, 0xaa, 0xe3, 0x07, 0xa4, 0x39, 0xb8, 0xde, 0x74, 0x89, 0x47, 0x02, 0x1c, 0x92, 0x56, 0xcc,",
          "1564:  0xf3, 0xc0, 0xa5, 0x61, 0xbb, 0xbf, 0x6f, 0x39, 0x7e, 0xaf, 0x89, 0x03, 0x69, 0xe2, 0x6b, 0x39,",
          "1565:  0xb8, 0xe6, 0xb4, 0x9a, 0x83, 0xd5, 0x26, 0xeb, 0xb8, 0x42, 0x9e, 0x37, 0x31, 0x63, 0x5d, 0xea,",
          "1566:  0x48, 0xfd, 0xcd, 0xc1, 0x75, 0xdc, 0x65, 0x6d, 0x3c, 0xa2, 0xcd, 0xfc, 0x01, 0x60, 0x7e, 0x1b,",
          "1567:  0x7b, 0xf4, 0x80, 0xf0, 0xd0, 0x26, 0x4f, 0xfb, 0x84, 0x87, 0xe8, 0x31, 0x54, 0x44, 0x1c, 0xba,",
          "1568:  0xb6, 0xac, 0xad, 0xd4, 0x57, 0xef, 0x5b, 0x99, 0x41, 0x2b, 0x31, 0x28, 0x07, 0x4f, 0x9c, 0x96,",
          "1569:  0x35, 0x58, 0xb5, 0x58, 0xc7, 0xb5, 0x84, 0x41, 0x4b, 0x31, 0x68, 0x25, 0x06, 0x2d, 0x3b, 0xcd,",
          "1570:  0x88, 0x2d, 0xb5, 0x22, 0x03, 0xaa, 0x01, 0x19, 0x50, 0x4e, 0x7d, 0x4f, 0x2f, 0x2d, 0x6b, 0x2b,",
          "1571:  0x35, 0x3b, 0x9d, 0x23, 0x1d, 0x66, 0x3d, 0x7f, 0x1d, 0x3b, 0x6d, 0xa2, 0x97, 0x97, 0xb5, 0x95,",
          "1572:  0xaa, 0x9d, 0x4c, 0xd1, 0x32, 0xd4, 0x31, 0x63, 0x0f, 0xf0, 0x3e, 0xe9, 0x6e, 0x91, 0x43, 0xbd,",
          "1573:  0x22, 0x05, 0x55, 0x92, 0x90, 0xc5, 0x8c, 0x3d, 0xc4, 0x3d, 0xa2, 0x4f, 0xcb, 0xd5, 0x64, 0x8a,",
          "1574:  0x16, 0xa1, 0xe6, 0xe1, 0x1e, 0xe1, 0x0c, 0x3b, 0x44, 0xaf, 0xca, 0xb5, 0x8c, 0x80, 0xbe, 0x85,",
          "1575:  0x05, 0xc5, 0xf1, 0x3d, 0xbf, 0x1f, 0x38, 0x44, 0x07, 0x19, 0xfa, 0xce, 0x64, 0xa1, 0xaf, 0xe5,",
          "1576:  0xd5, 0xda, 0xa3, 0x96, 0xd0, 0x57, 0x30, 0x2d, 0x8b, 0x46, 0xaf, 0x2f, 0x97, 0x8f, 0x35, 0xdb,",
          "1577:  0x91, 0x5a, 0xe4, 0xc1, 0x2c, 0xeb, 0xf6, 0x5d, 0xea, 0x71, 0xfd, 0x94, 0xb4, 0xf0, 0x68, 0x32,",
          "1578:  0x0b, 0xeb, 0xbe, 0x77, 0x40, 0xdd, 0x6d, 0xec, 0x61, 0x97, 0xf4, 0x88, 0x17, 0xee, 0x4a, 0xe5,",
          "1579:  0x76, 0x62, 0x04, 0x3d, 0x83, 0x46, 0xa7, 0xcf, 0x43, 0xbf, 0x47, 0x9f, 0x91, 0x1d, 0x26, 0x8b,",
          "1580:  0x5b, 0x3f, 0x2d, 0xb3, 0xf9, 0x70, 0x32, 0xc3, 0x5b, 0x39, 0xad, 0xf6, 0x88, 0x1d, 0x51, 0x24,",
          "1581:  0x9d, 0xfe, 0x3e, 0xf9, 0x8c, 0x04, 0xb2, 0xba, 0xe6, 0xa2, 0x22, 0x51, 0x48, 0x51, 0x19, 0xd1,",
          "1582:  0x78, 0xc6, 0xf5, 0xf9, 0xe5, 0x72, 0x54, 0x46, 0x29, 0x09, 0xad, 0xc0, 0xfc, 0x80, 0x04, 0xf4,",
          "1583:  0xe0, 0x70, 0x8f, 0xba, 0x1e, 0x0e, 0xfb, 0x01, 0xd1, 0x1b, 0xb2, 0x14, 0xf3, 0x64, 0xd4, 0x83,",
          "1584:  0xd3, 0x6d, 0xd2, 0xed, 0x89, 0x94, 0xaf, 0x07, 0xa4, 0xc5, 0xf5, 0x05, 0x99, 0xdf, 0xcd, 0xc9,",
          "1585:  0x77, 0x50, 0xaa, 0xb3, 0x87, 0xb5, 0x0b, 0xc7, 0x3c, 0xdf, 0x8e, 0x4f, 0x4a, 0x74, 0x46, 0x50,",
          "1586:  0xe4, 0x58, 0x8e, 0x8c, 0x2e, 0xc3, 0x5c, 0x18, 0x60, 0xa7, 0x43, 0x3d, 0x77, 0x9b, 0x84, 0x6d,",
          "1587:  0xbf, 0xa5, 0x9f, 0x91, 0x99, 0xc8, 0x51, 0x91, 0x03, 0x88, 0x78, 0x78, 0xbf, 0x4b, 0x5a, 0x51,",
          "1588:  0x2d, 0x3e, 0x3a, 0x64, 0x84, 0xeb, 0x67, 0x65, 0x14, 0x37, 0x2c, 0xa5, 0xb9, 0xe5, 0x1a, 0x84,",
          "1589:  0xb5, 0x31, 0x22, 0xb5, 0xe1, 0x85, 0xc1, 0xa1, 0x5d, 0xa0, 0x0e, 0x75, 0xa0, 0x2e, 0xe2, 0x48,",
          "1590:  0x4a, 0xe1, 0x9c, 0x2c, 0x85, 0x8f, 0x27, 0xcb, 0xd1, 0xfd, 0x4c, 0xa1, 0xad, 0x6a, 0x37, 0x36,",
          "1591:  0xe0, 0xc2, 0x18, 0xdf, 0x50, 0x03, 0xca, 0x1d, 0x72, 0x28, 0x7b, 0x5a, 0xcd, 0x16, 0x43, 0x74,",
          "1592:  0x16, 0xa6, 0x07, 0xb8, 0xdb, 0x27, 0xb2, 0x0b, 0x55, 0xed, 0x68, 0x72, 0xbb, 0x74, 0x4b, 0x33,",
          "1593:  0xfb, 0x70, 0xee, 0x91, 0x0c, 0x37, 0x3d, 0x4c, 0x27, 0xd1, 0x19, 0xcd, 0xfb, 0x70, 0x3e, 0x6f,",
          "1594:  0x96, 0x33, 0xdf, 0xe3, 0x04, 0x59, 0x80, 0x64, 0xf5, 0x51, 0xd2, 0xca, 0x56, 0xa5, 0x17, 0x55,",
          "1595:  0xbb, 0x60, 0xc5, 0xfc, 0xae, 0x04, 0xe7, 0x6d, 0xc2, 0xfd, 0xee, 0x80, 0x24, 0xa5, 0x71, 0x32,",
          "1596:  0xcd, 0xfd, 0x4b, 0x28, 0x63, 0xc6, 0x64, 0x46, 0x27, 0xde, 0x65, 0xa5, 0x7d, 0xda, 0x42, 0x2b,",
          "1597:  0xba, 0x0a, 0x0b, 0xb8, 0xb7, 0x4f, 0xdd, 0xbe, 0xdf, 0xe7, 0x49, 0x58, 0xf2, 0x9e, 0xa8, 0xd9,",
          "1598:  0xa3, 0x0b, 0xa6, 0x03, 0x17, 0x46, 0x52, 0x10, 0xa7, 0x53, 0xbd, 0x82, 0xb4, 0xdc, 0x15, 0x54,",
          "1599:  0x68, 0xa4, 0x34, 0xce, 0xc8, 0x6f, 0x1a, 0x34, 0xb2, 0xd3, 0x11, 0xab, 0x5f, 0x84, 0x5a, 0x2f,",
          "1600:  0xa6, 0x71, 0x5d, 0x93, 0x2d, 0x26, 0x23, 0x0c, 0xdf, 0x46, 0xa5, 0xfc, 0x6d, 0x74, 0x1e, 0x66,",
          "1601:  0x22, 0x9c, 0x11, 0x07, 0x16, 0xcf, 0x86, 0x5c, 0xae, 0xe4, 0x5c, 0x5e, 0x02, 0xe0, 0x69, 0xb9,",
          "1602:  0xeb, 0x33, 0x72, 0x55, 0xa1, 0x20, 0x13, 0x4e, 0x45, 0xbd, 0xcb, 0x26, 0xbc, 0xdf, 0x0d, 0xf5,",
          "1603:  0x59, 0xc9, 0x31, 0x44, 0x33, 0x7d, 0x98, 0x7f, 0x40, 0x45, 0x0c, 0x07, 0xfc, 0x64, 0x8a, 0xfd,",
          "1604:  0x3d, 0xa8, 0x08, 0x63, 0x22, 0xb0, 0xfd, 0x00, 0x7b, 0x4e, 0x9b, 0x24, 0xb9, 0x4a, 0xe7, 0x08,",
          "1605:  0x41, 0x25, 0xc4, 0x2e, 0xd7, 0x4b, 0x92, 0x2e, 0xc7, 0xe6, 0xcf, 0xa5, 0xc8, 0xd3, 0x35, 0xc6,",
          "1606:  0xf8, 0xeb, 0x07, 0x2c, 0xc5, 0x2d, 0xb4, 0x3c, 0xda, 0x42, 0x73, 0x2e, 0xff, 0x97, 0x16, 0x7a,",
          "1607:  0x7c, 0x5d, 0x6d, 0x76, 0x8d, 0x31, 0xe1, 0x08, 0xba, 0x0e, 0x15, 0xcc, 0x58, 0x94, 0xf0, 0xfa,",
          "1608:  0xea, 0x45, 0xd5, 0xd1, 0x98, 0x45, 0xfc, 0x8f, 0x5d, 0x92, 0xac, 0xc6, 0xfb, 0x50, 0x4b, 0x49,",
          "1609:  0x2f, 0x32, 0x5b, 0x53, 0xcd, 0xfe, 0x33, 0x03, 0x6f, 0x88, 0x9c, 0xee, 0xc9, 0x42, 0x5e, 0x63,",
          "1610:  0xec, 0x2e, 0x09, 0x31, 0xed, 0xf2, 0x4f, 0xfa, 0x24, 0x38, 0x7c, 0xc5, 0x5b, 0xe7, 0xc2, 0x4c,",
          "1611:  0x74, 0x0e, 0xe2, 0x8e, 0x74, 0xec, 0x80, 0x2e, 0x56, 0x9f, 0xa1, 0xb8, 0xf2, 0xab, 0x41, 0x71,",
          "1612:  0x45, 0xa8, 0xaa, 0x72, 0x42, 0xa8, 0x6a, 0x3c, 0xb0, 0x56, 0xe0, 0xfa, 0xcc, 0x30, 0x5c, 0x2f,",
          "1613:  0x00, 0x2b, 0xb3, 0x2f, 0x0b, 0x56, 0xaa, 0x85, 0x60, 0xa5, 0x57, 0x78, 0xd2, 0x6a, 0x32, 0xdd,",
          "1614:  0x1f, 0xa8, 0x05, 0x3c, 0xb6, 0xd6, 0x26, 0x81, 0x2d, 0xf0, 0x7f, 0x80, 0x2d, 0xdf, 0xcb, 0x5b,",
          "1615:  0x9f, 0xf9, 0x59, 0xdc, 0xe9, 0x95, 0x24, 0x3a, 0xa9, 0xb8, 0x1c, 0x22, 0x3d, 0x72, 0x8c, 0x6e,",
          "1616:  0xc2, 0x6c, 0x87, 0xfb, 0x9e, 0x47, 0xc2, 0xf8, 0x74, 0x18, 0x6a, 0x1a, 0xb7, 0xa2, 0xa5, 0x35,",
          "1617:  0xc6, 0xf6, 0x18, 0x71, 0xec, 0x84, 0x15, 0x5d, 0x81, 0x8a, 0x70, 0x5d, 0x5e, 0x4f, 0xf5, 0xd5,",
          "1618:  0x0b, 0xaa, 0x88, 0x88, 0x2f, 0xe1, 0x97, 0x4c, 0xe8, 0x36, 0xd4, 0xd2, 0x72, 0x8a, 0xeb, 0x75,",
          "1619:  0x71, 0xc8, 0x48, 0xb2, 0x98, 0x88, 0x65, 0xec, 0x42, 0xb6, 0x45, 0x03, 0xe2, 0x48, 0xa8, 0x33,",
          "1620:  0x3d, 0x2a, 0x7b, 0x37, 0x59, 0x4c, 0x65, 0x53, 0x76, 0xf3, 0x57, 0x0d, 0x2e, 0x65, 0x75, 0x90,",
          "1621:  0x14, 0xdc, 0x36, 0x09, 0x71, 0x0b, 0x87, 0xf8, 0xf5, 0x5f, 0x1b, 0x97, 0x61, 0xce, 0x69, 0x13,",
          "1622:  0xa7, 0x93, 0xbd, 0x31, 0xa2, 0xe7, 0x6e, 0x8e, 0x6a, 0xfe, 0x5e, 0x82, 0xb9, 0xe1, 0x8d, 0x10,",
          "1623:  0x3b, 0x29, 0xd0, 0x42, 0xb2, 0x93, 0x62, 0x8c, 0x76, 0xe1, 0x14, 0xf1, 0x06, 0x34, 0xf0, 0x3d,",
          "1624:  0xf1, 0x22, 0x4b, 0x9a, 0xd0, 0xd5, 0xf1, 0xdb, 0x69, 0x6d, 0x28, 0xec, 0xd1, 0x21, 0x18, 0xd2,",
          "1625:  0x80, 0x3c, 0x00, 0x86, 0x03, 0xdc, 0x23, 0x21, 0x09, 0x44, 0xa7, 0x29, 0x1f, 0x43, 0xa7, 0x89,",
          "1626:  0x3c, 0xd8, 0x4d, 0xd4, 0xda, 0x8a, 0x05, 0xe3, 0x09, 0x2c, 0x8c, 0xb8, 0x54, 0x50, 0xfb, 0x37,",
          "1627:  0xd5, 0xda, 0xaf, 0xaf, 0x2e, 0x15, 0x44, 0xa8, 0xa8, 0x51, 0xcf, 0xc6, 0x2f, 0x25, 0xa8, 0x2b,",
          "1628:  0xf5, 0x59, 0x98, 0xc6, 0x25, 0x00, 0x29, 0x70, 0x8f, 0x76, 0xe3, 0x4b, 0xbc, 0x66, 0x2b, 0x14,",
          "1629:  0xd4, 0x29, 0x48, 0xca, 0xd6, 0xe4, 0x2d, 0xa1, 0x30, 0x23, 0x02, 0x08, 0x4a, 0xd3, 0x3c, 0x6e,",
          "1630:  0xba, 0xf1, 0x0c, 0x7d, 0x03, 0x73, 0x07, 0xb4, 0x4b, 0x76, 0x33, 0x47, 0x66, 0xa4, 0x23, 0x3b,",
          "1631:  0x93, 0x3b, 0x72, 0x4f, 0xd5, 0x6b, 0xe7, 0xcc, 0x98, 0xef, 0x42, 0x23, 0x7f, 0x5c, 0x85, 0x93,",
          "1632:  0xb4, 0x87, 0xdd, 0x34, 0x5b, 0xf1, 0xcc, 0xfc, 0x51, 0x03, 0x34, 0xba, 0x1f, 0xe3, 0x92, 0xde,",
          "1633:  0xb9, 0xc5, 0x93, 0x27, 0x7b, 0x74, 0x50, 0x14, 0x0a, 0xda, 0x82, 0x7a, 0x8b, 0xf0, 0x90, 0x7a,",
          "1634:  0xd2, 0xe1, 0xb8, 0x89, 0xbc, 0x73, 0xf4, 0xc6, 0xdf, 0xcd, 0x04, 0x6c, 0x55, 0xda, 0xfc, 0x14,",
          "1635:  0x2e, 0x1e, 0xc9, 0xad, 0xc0, 0x6f, 0x6d, 0x08, 0x7e, 0x1f, 0x09, 0xda, 0x4d, 0x04, 0x8d, 0x7c,",
          "1636:  0x37, 0x32, 0x9f, 0xc2, 0x82, 0xc8, 0xe9, 0x7a, 0x1b, 0x07, 0xe1, 0x09, 0x41, 0xea, 0x3b, 0x50,",
          "1637:  0x4b, 0x4d, 0x16, 0xe6, 0xda, 0x80, 0xea, 0x20, 0xf9, 0xf4, 0x11, 0x61, 0xea, 0x74, 0x6e, 0xae,",
          "1638:  0x01, 0x52, 0xfd, 0x8d, 0xef, 0x8d, 0x2b, 0x30, 0x4d, 0x43, 0xd2, 0x4b, 0x90, 0xe2, 0xb9, 0x7c,",
          "1639:  0xbb, 0x97, 0xec, 0x76, 0xc4, 0xb3, 0xfa, 0xf7, 0x34, 0x2c, 0x64, 0x5d, 0x57, 0xfc, 0xa5, 0x0e,",
          "1640:  0x41, 0x3b, 0xd0, 0xd8, 0x8c, 0x3f, 0x3a, 0x26, 0x2f, 0x25, 0xf4, 0xe6, 0x11, 0x5f, 0x17, 0x8c,",
          "1641:  0xc5, 0xe2, 0xc5, 0xc8, 0x23, 0x73, 0x0a, 0x7d, 0x0e, 0x73, 0xc3, 0xcf, 0x64, 0x74, 0x49, 0x95,",
          "1642:  0x28, 0x7c, 0xb9, 0x1b, 0xe6, 0x51, 0x2c, 0xa9, 0xea, 0xc7, 0x30, 0x9f, 0x7b, 0x33, 0x22, 0x73,",
          "1643:  0x18, 0x5b, 0x14, 0xbd, 0xa9, 0x8d, 0xb7, 0x8e, 0xe4, 0x49, 0xb5, 0xdf, 0x81, 0x6a, 0xf2, 0xc6,",
          "1644:  0x1a, 0xce, 0x40, 0xee, 0xe5, 0x65, 0x34, 0x86, 0xf5, 0x1d, 0x70, 0x73, 0x0a, 0x7d, 0x18, 0x09,",
          "1645:  0x0b, 0x0c, 0x3e, 0x2a, 0xac, 0xbc, 0x2c, 0x8c, 0x33, 0x05, 0x68, 0x5e, 0x86, 0x76, 0x7a, 0x53,",
          "1646:  0xf6, 0xff, 0x18, 0x1a, 0xa0, 0xb7, 0x5f, 0x0a, 0x34, 0x19, 0x66, 0x9e, 0x6d, 0x14, 0x5d, 0x98,",
          "1647:  0x53, 0xe8, 0x27, 0x0d, 0xce, 0x6c, 0x92, 0x30, 0x7f, 0xd3, 0xa2, 0x6b, 0xc5, 0x46, 0xc6, 0xdc,",
          "1648:  0xc8, 0xc6, 0xc3, 0x49, 0x4f, 0xc4, 0xb0, 0x5a, 0x73, 0x0a, 0xed, 0xca, 0xb0, 0xb3, 0xca, 0x46,",
          "1649:  0x17, 0x0b, 0x4b, 0x38, 0xcd, 0xde, 0xd2, 0xb8, 0xe5, 0x24, 0xd4, 0x8f, 0xd6, 0xfe, 0x78, 0xbe,",
          "1650:  0xa4, 0xfd, 0xf9, 0x7c, 0x49, 0xfb, 0xeb, 0xf9, 0x92, 0xf6, 0xc5, 0x8d, 0x17, 0x7c, 0x8d, 0x57,",
          "1651:  0x7e, 0x38, 0xc0, 0x8c, 0x3a, 0x5d, 0x4a, 0xbc, 0x70, 0x7f, 0x46, 0x7e, 0x7b, 0xbf, 0xf1, 0x6f,",
          "1652:  0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x2a, 0x03, 0x20, 0x57, 0x18, 0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2692:   i -= len(m.XXX_unrecognized)",
          "2693:   copy(dAtA[i:], m.XXX_unrecognized)",
          "2694:  }",
          "2695:  if len(m.EnabledSourceTypes) > 0 {",
          "2696:   for k := range m.EnabledSourceTypes {",
          "2697:    v := m.EnabledSourceTypes[k]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2703:  if m.HelmOptions != nil {",
          "2704:   {",
          "2705:    size, err := m.HelmOptions.MarshalToSizedBuffer(dAtA[:i])",
          "2706:    if err != nil {",
          "2707:     return 0, err",
          "2708:    }",
          "2709:    i -= size",
          "2710:    i = encodeVarintRepository(dAtA, i, uint64(size))",
          "2711:   }",
          "2712:   i--",
          "2713:   dAtA[i] = 0x52",
          "2714:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3722:    n += mapEntrySize + 1 + sovRepository(uint64(mapEntrySize))",
          "3723:   }",
          "3724:  }",
          "3725:  if m.XXX_unrecognized != nil {",
          "3726:   n += len(m.XXX_unrecognized)",
          "3727:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3745:  if m.HelmOptions != nil {",
          "3746:   l = m.HelmOptions.Size()",
          "3747:   n += 1 + l + sovRepository(uint64(l))",
          "3748:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6363:    }",
          "6364:    m.EnabledSourceTypes[mapkey] = mapvalue",
          "6365:    iNdEx = postIndex",
          "6366:   default:",
          "6367:    iNdEx = preIndex",
          "6368:    skippy, err := skipRepository(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6390:   case 10:",
          "6391:    if wireType != 2 {",
          "6392:     return fmt.Errorf(\"proto: wrong wireType = %d for field HelmOptions\", wireType)",
          "6393:    }",
          "6394:    var msglen int",
          "6395:    for shift := uint(0); ; shift += 7 {",
          "6396:     if shift >= 64 {",
          "6397:      return ErrIntOverflowRepository",
          "6398:     }",
          "6399:     if iNdEx >= l {",
          "6400:      return io.ErrUnexpectedEOF",
          "6401:     }",
          "6402:     b := dAtA[iNdEx]",
          "6403:     iNdEx++",
          "6404:     msglen |= int(b&0x7F) << shift",
          "6405:     if b < 0x80 {",
          "6406:      break",
          "6407:     }",
          "6408:    }",
          "6409:    if msglen < 0 {",
          "6410:     return ErrInvalidLengthRepository",
          "6411:    }",
          "6412:    postIndex := iNdEx + msglen",
          "6413:    if postIndex < 0 {",
          "6414:     return ErrInvalidLengthRepository",
          "6415:    }",
          "6416:    if postIndex > l {",
          "6417:     return io.ErrUnexpectedEOF",
          "6418:    }",
          "6419:    if m.HelmOptions == nil {",
          "6420:     m.HelmOptions = &v1alpha1.HelmOptions{}",
          "6421:    }",
          "6422:    if err := m.HelmOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
          "6423:     return err",
          "6424:    }",
          "6425:    iNdEx = postIndex",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  \"github.com/ghodss/yaml\"",
          "28:  gogit \"github.com/go-git/go-git/v5\"",
          "29:  \"github.com/google/go-jsonnet\"",
          "30:  log \"github.com/sirupsen/logrus\"",
          "31:  \"golang.org/x/sync/semaphore\"",
          "32:  \"google.golang.org/grpc/codes\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:  \"github.com/google/uuid\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  \"github.com/argoproj/argo-cd/v2/util/grpc\"",
          "53:  \"github.com/argoproj/argo-cd/v2/util/helm\"",
          "54:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "55:  \"github.com/argoproj/argo-cd/v2/util/ksonnet\"",
          "56:  \"github.com/argoproj/argo-cd/v2/util/kustomize\"",
          "57:  \"github.com/argoproj/argo-cd/v2/util/text\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:  pathutil \"github.com/argoproj/argo-cd/v2/util/io/path\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "606:  return ioutil.WriteFile(markerFile, []byte(\"marker\"), 0644)",
          "607: }",
          "756: func helmTemplate(appPath string, repoRoot string, env *v1alpha1.Env, q *apiclient.ManifestRequest, isLocal bool) ([]*unstructured.Unstructured, error) {",
          "757:  concurrencyAllowed := isConcurrencyAllowed(appPath)",
          "758:  if !concurrencyAllowed {",
          "",
          "[Removed Lines]",
          "612: func resolveSymbolicLinkRecursive(path string, maxDepth int) (string, error) {",
          "613:  resolved, err := os.Readlink(path)",
          "614:  if err != nil {",
          "616:   _, ok := err.(*os.PathError)",
          "617:   if ok {",
          "618:    return path, nil",
          "619:   }",
          "621:   return \"\", err",
          "622:  }",
          "624:  if maxDepth == 0 {",
          "625:   return \"\", fmt.Errorf(\"maximum nesting level reached\")",
          "626:  }",
          "630:  if !strings.HasPrefix(resolved, \"/\") {",
          "631:   basePath := filepath.Dir(path)",
          "632:   resolved = filepath.Join(basePath, resolved)",
          "633:  }",
          "635:  return resolveSymbolicLinkRecursive(resolved, maxDepth-1)",
          "636: }",
          "640: func isURLSchemeAllowed(scheme string, allowed []string) bool {",
          "641:  isAllowed := false",
          "642:  if len(allowed) > 0 {",
          "643:   for _, s := range allowed {",
          "644:    if strings.EqualFold(scheme, s) {",
          "645:     isAllowed = true",
          "646:     break",
          "647:    }",
          "648:   }",
          "649:  }",
          "652:  return isAllowed && scheme != \"\"",
          "653: }",
          "684: func resolveHelmValueFilePath(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath string, isRemote bool, err error) {",
          "689:  resolveFailure := func(path string, err error) error {",
          "690:   log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
          "691:   return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
          "692:  }",
          "696:  url, err := url.Parse(valueFile)",
          "697:  if err == nil {",
          "699:   if url.Scheme != \"\" {",
          "700:    if isURLSchemeAllowed(url.Scheme, allowedURLSchemes) {",
          "701:     return valueFile, true, nil",
          "702:    } else {",
          "703:     return \"\", false, fmt.Errorf(\"the URL scheme '%s' is not allowed\", url.Scheme)",
          "704:    }",
          "705:   }",
          "706:  }",
          "709:  absRepoPath, err := filepath.Abs(repoRoot)",
          "710:  if err != nil {",
          "711:   return \"\", false, resolveFailure(repoRoot, err)",
          "712:  }",
          "716:  path := valueFile",
          "717:  if !filepath.IsAbs(path) {",
          "718:   absWorkDir, err := filepath.Abs(appPath)",
          "719:   if err != nil {",
          "720:    return \"\", false, resolveFailure(repoRoot, err)",
          "721:   }",
          "722:   path = filepath.Join(absWorkDir, path)",
          "723:  } else {",
          "724:   path = filepath.Join(absRepoPath, path)",
          "725:  }",
          "728:  delinkedPath, err := resolveSymbolicLinkRecursive(path, 10)",
          "729:  if err != nil {",
          "730:   return \"\", false, resolveFailure(path, err)",
          "731:  }",
          "732:  path = delinkedPath",
          "735:  path, err = filepath.Abs(path)",
          "736:  if err != nil {",
          "737:   return \"\", false, resolveFailure(path, err)",
          "738:  }",
          "742:  requiredRootPath := absRepoPath",
          "743:  if !strings.HasSuffix(requiredRootPath, \"/\") {",
          "744:   requiredRootPath += \"/\"",
          "745:  }",
          "748:  if !strings.HasPrefix(path, requiredRootPath) {",
          "749:   return \"\", false, fmt.Errorf(\"value file '%s' resolved to outside repository root\", valueFile)",
          "750:  }",
          "752:  return path, false, nil",
          "754: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "767:   APIVersions: q.ApiVersions,",
          "768:   Set:         map[string]string{},",
          "769:   SetString:   map[string]string{},",
          "771:  }",
          "773:  appHelm := q.ApplicationSource.Helm",
          "",
          "[Removed Lines]",
          "770:   SetFile:     map[string]string{},",
          "",
          "[Added Lines]",
          "625:   SetFile:     map[string]pathutil.ResolvedFilePath{},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "784:   for _, val := range appHelm.ValueFiles {",
          "792:    if err != nil {",
          "793:     return nil, err",
          "794:    }",
          "796:    if !isRemote {",
          "798:     if os.IsNotExist(err) {",
          "799:      if appHelm.IgnoreMissingValueFiles {",
          "800:       log.Debugf(\" %s values file does not exist\", path)",
          "",
          "[Removed Lines]",
          "787:    var protocols []string",
          "788:    if q.HelmOptions != nil {",
          "789:     protocols = q.HelmOptions.ValuesFileSchemes",
          "790:    }",
          "791:    path, isRemote, err := resolveHelmValueFilePath(appPath, repoRoot, val, protocols)",
          "797:     _, err = os.Stat(path)",
          "",
          "[Added Lines]",
          "642:    path, isRemote, err := pathutil.ResolveFilePath(appPath, repoRoot, val, q.GetValuesFileSchemes())",
          "648:     _, err = os.Stat(string(path))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "807:   }",
          "809:   if appHelm.Values != \"\" {",
          "811:    if err != nil {",
          "812:     return nil, err",
          "813:    }",
          "815:    defer func() { _ = os.RemoveAll(p) }()",
          "816:    err = ioutil.WriteFile(p, []byte(appHelm.Values), 0644)",
          "817:    if err != nil {",
          "818:     return nil, err",
          "819:    }",
          "822:   }",
          "824:   for _, p := range appHelm.Parameters {",
          "",
          "[Removed Lines]",
          "810:    file, err := ioutil.TempFile(\"\", \"values-*.yaml\")",
          "814:    p := file.Name()",
          "820:    defer file.Close()",
          "821:    templateOpts.Values = append(templateOpts.Values, p)",
          "",
          "[Added Lines]",
          "661:    rand, err := uuid.NewRandom()",
          "665:    p := path.Join(os.TempDir(), rand.String())",
          "671:    templateOpts.Values = append(templateOpts.Values, pathutil.ResolvedFilePath(p))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "829:    }",
          "830:   }",
          "831:   for _, p := range appHelm.FileParameters {",
          "833:   }",
          "834:   passCredentials = appHelm.PassCredentials",
          "835:   templateOpts.SkipCrds = appHelm.SkipCrds",
          "",
          "[Removed Lines]",
          "832:    templateOpts.SetFile[p.Name] = p.Path",
          "",
          "[Added Lines]",
          "682:    resolvedPath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, env.Envsubst(p.Path), q.GetValuesFileSchemes())",
          "683:    if err != nil {",
          "684:     return nil, err",
          "685:    }",
          "686:    templateOpts.SetFile[p.Name] = resolvedPath",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "843:  for i, j := range templateOpts.SetString {",
          "844:   templateOpts.SetString[i] = env.Envsubst(j)",
          "845:  }",
          "850:  repos, err := getHelmDependencyRepos(appPath)",
          "851:  if err != nil {",
          "",
          "[Removed Lines]",
          "846:  for i, j := range templateOpts.SetFile {",
          "847:   templateOpts.SetFile[i] = env.Envsubst(j)",
          "848:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1286:  jpaths := []string{appPath}",
          "1287:  for _, p := range sourceJsonnet.Libs {",
          "1291:   }",
          "1293:  }",
          "1295:  vm.Importer(&jsonnet.FileImporter{",
          "",
          "[Removed Lines]",
          "1288:   jpath := path.Join(repoRoot, p)",
          "1289:   if !strings.HasPrefix(jpath, repoRoot) {",
          "1290:    return nil, status.Errorf(codes.FailedPrecondition, \"%s: referenced library points outside the repository\", p)",
          "1292:   jpaths = append(jpaths, jpath)",
          "",
          "[Added Lines]",
          "1139:   jpath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, p, nil)",
          "1140:   if err != nil {",
          "1141:    return nil, err",
          "1143:   jpaths = append(jpaths, string(jpath))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1467:     return err",
          "1468:    }",
          "1469:   case v1alpha1.ApplicationSourceTypeHelm:",
          "1471:     return err",
          "1472:    }",
          "1473:   case v1alpha1.ApplicationSourceTypeKustomize:",
          "",
          "[Removed Lines]",
          "1470:    if err := populateHelmAppDetails(res, opContext.appPath, q); err != nil {",
          "",
          "[Added Lines]",
          "1321:    if err := populateHelmAppDetails(res, opContext.appPath, repoRoot, q); err != nil {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1529:  return nil",
          "1530: }",
          "1533:  var selectedValueFiles []string",
          "1535:  if q.Source.Helm != nil {",
          "",
          "[Removed Lines]",
          "1532: func populateHelmAppDetails(res *apiclient.RepoAppDetailsResponse, appPath string, q *apiclient.RepoServerAppDetailsQuery) error {",
          "",
          "[Added Lines]",
          "1383: func populateHelmAppDetails(res *apiclient.RepoAppDetailsResponse, appPath string, repoRoot string, q *apiclient.RepoServerAppDetailsQuery) error {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1563:  if err := loadFileIntoIfExists(filepath.Join(appPath, \"values.yaml\"), &res.Helm.Values); err != nil {",
          "1564:   return err",
          "1565:  }",
          "1567:  if err != nil {",
          "1568:   return err",
          "1569:  }",
          "",
          "[Removed Lines]",
          "1566:  params, err := h.GetParameters(selectedValueFiles)",
          "",
          "[Added Lines]",
          "1417:  var resolvedSelectedValueFiles []pathutil.ResolvedFilePath",
          "1419:  for _, file := range selectedValueFiles {",
          "1420:   if resolvedFile, _, err := pathutil.ResolveFilePath(appPath, repoRoot, file, q.GetValuesFileSchemes()); err == nil {",
          "1421:    resolvedSelectedValueFiles = append(resolvedSelectedValueFiles, resolvedFile)",
          "1422:   } else {",
          "1423:    log.Debugf(\"Values file %s is not allowed: %v\", file, err)",
          "1424:   }",
          "1425:  }",
          "1426:  params, err := h.GetParameters(resolvedSelectedValueFiles)",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.proto||reposerver/repository/repository.proto": [
          "File: reposerver/repository/repository.proto -> reposerver/repository/repository.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     bool noRevisionCache = 7;",
          "103:     string trackingMethod = 8;",
          "104:     map<string, bool> enabledSourceTypes = 9;",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HelmOptions helmOptions = 10;",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     Jsonnet: argoappv1.ApplicationSourceJsonnet{",
          "255:      ExtVars: []argoappv1.JsonnetVar{{Name: \"extVarString\", Value: \"extVarString\"}, {Name: \"extVarCode\", Value: \"\\\"extVarCode\\\"\", Code: true}},",
          "256:      TLAs:    []argoappv1.JsonnetVar{{Name: \"tlaString\", Value: \"tlaString\"}, {Name: \"tlaCode\", Value: \"\\\"tlaCode\\\"\", Code: true}},",
          "258:     },",
          "259:    },",
          "260:   },",
          "",
          "[Removed Lines]",
          "257:      Libs:    []string{\"testdata/jsonnet/vendor\"},",
          "",
          "[Added Lines]",
          "257:      Libs:    []string{\"./vendor\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:  assert.Equal(t, 2, len(res1.Manifests))",
          "265: }",
          "267: func TestGenerateKsonnetManifest(t *testing.T) {",
          "268:  service := newService(\"../..\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267: func TestGenerateJsonnetLibOutside(t *testing.T) {",
          "268:  service := newService(\".\")",
          "270:  q := apiclient.ManifestRequest{",
          "271:   Repo: &argoappv1.Repository{},",
          "272:   ApplicationSource: &argoappv1.ApplicationSource{",
          "273:    Path: \"./testdata/jsonnet\",",
          "274:    Directory: &argoappv1.ApplicationSourceDirectory{",
          "275:     Jsonnet: argoappv1.ApplicationSourceJsonnet{",
          "276:      Libs: []string{\"../../../testdata/jsonnet/vendor\"},",
          "277:     },",
          "278:    },",
          "279:   },",
          "280:  }",
          "281:  _, err := service.GenerateManifest(context.Background(), &q)",
          "282:  require.Error(t, err)",
          "283:  require.Contains(t, err.Error(), \"value file '../../../testdata/jsonnet/vendor' resolved to outside repository root\")",
          "284: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "937:    Helm: &argoappv1.ApplicationSourceHelm{",
          "938:     ValueFiles: []string{\"values-production.yaml\"},",
          "939:     Values:     `cluster: {slaveCount: 2}`,",
          "946:    },",
          "947:   },",
          "948:  })",
          "950: }",
          "",
          "[Removed Lines]",
          "940:     FileParameters: []argoappv1.HelmFileParameter{",
          "941:      argoappv1.HelmFileParameter{",
          "942:       Name: \"passwordContent\",",
          "943:       Path: externalSecretPath,",
          "944:      },",
          "945:     },",
          "949:  assert.NoError(t, err)",
          "",
          "[Added Lines]",
          "957:     FileParameters: []argoappv1.HelmFileParameter{{",
          "958:      Name: \"passwordContent\",",
          "959:      Path: externalSecretPath,",
          "960:     }},",
          "964:  assert.Error(t, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1739: }",
          "1912: func TestDirectoryPermissionInitializer(t *testing.T) {",
          "1913:  dir, err := ioutil.TempDir(\"\", \"\")",
          "1914:  require.NoError(t, err)",
          "",
          "[Removed Lines]",
          "1741: func Test_resolveSymlinkRecursive(t *testing.T) {",
          "1742:  testsDir, err := filepath.Abs(\"./testdata/symlinks\")",
          "1743:  if err != nil {",
          "1744:   panic(err)",
          "1745:  }",
          "1746:  t.Run(\"Resolve non-symlink\", func(t *testing.T) {",
          "1747:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/foo\", 2)",
          "1748:   assert.NoError(t, err)",
          "1749:   assert.Equal(t, testsDir+\"/foo\", r)",
          "1750:  })",
          "1751:  t.Run(\"Successfully resolve symlink\", func(t *testing.T) {",
          "1752:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bar\", 2)",
          "1753:   assert.NoError(t, err)",
          "1754:   assert.Equal(t, testsDir+\"/foo\", r)",
          "1755:  })",
          "1756:  t.Run(\"Do not allow symlink at all\", func(t *testing.T) {",
          "1757:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bar\", 0)",
          "1758:   assert.Error(t, err)",
          "1759:   assert.Equal(t, \"\", r)",
          "1760:  })",
          "1761:  t.Run(\"Error because too nested symlink\", func(t *testing.T) {",
          "1762:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bam\", 2)",
          "1763:   assert.Error(t, err)",
          "1764:   assert.Equal(t, \"\", r)",
          "1765:  })",
          "1766:  t.Run(\"No such file or directory\", func(t *testing.T) {",
          "1767:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/foobar\", 2)",
          "1768:   assert.NoError(t, err)",
          "1769:   assert.Equal(t, testsDir+\"/foobar\", r)",
          "1770:  })",
          "1771: }",
          "1773: func Test_isURLSchemeAllowed(t *testing.T) {",
          "1774:  type testdata struct {",
          "1775:   name     string",
          "1776:   scheme   string",
          "1777:   allowed  []string",
          "1778:   expected bool",
          "1779:  }",
          "1780:  var tts []testdata = []testdata{",
          "1781:   {",
          "1782:    name:     \"Allowed scheme matches\",",
          "1783:    scheme:   \"http\",",
          "1784:    allowed:  []string{\"http\", \"https\"},",
          "1785:    expected: true,",
          "1786:   },",
          "1787:   {",
          "1788:    name:     \"Allowed scheme matches only partially\",",
          "1789:    scheme:   \"http\",",
          "1790:    allowed:  []string{\"https\"},",
          "1791:    expected: false,",
          "1792:   },",
          "1793:   {",
          "1794:    name:     \"Scheme is not allowed\",",
          "1795:    scheme:   \"file\",",
          "1796:    allowed:  []string{\"http\", \"https\"},",
          "1797:    expected: false,",
          "1798:   },",
          "1799:   {",
          "1800:    name:     \"Empty scheme with valid allowances is forbidden\",",
          "1801:    scheme:   \"\",",
          "1802:    allowed:  []string{\"http\", \"https\"},",
          "1803:    expected: false,",
          "1804:   },",
          "1805:   {",
          "1806:    name:     \"Empty scheme with empty allowances is forbidden\",",
          "1807:    scheme:   \"\",",
          "1808:    allowed:  []string{},",
          "1809:    expected: false,",
          "1810:   },",
          "1811:   {",
          "1812:    name:     \"Some scheme with empty allowances is forbidden\",",
          "1813:    scheme:   \"file\",",
          "1814:    allowed:  []string{},",
          "1815:    expected: false,",
          "1816:   },",
          "1817:  }",
          "1818:  for _, tt := range tts {",
          "1819:   t.Run(tt.name, func(t *testing.T) {",
          "1820:    r := isURLSchemeAllowed(tt.scheme, tt.allowed)",
          "1821:    assert.Equal(t, tt.expected, r)",
          "1822:   })",
          "1823:  }",
          "1824: }",
          "1826: var allowedHelmRemoteProtocols = []string{\"http\", \"https\"}",
          "1828: func Test_resolveHelmValueFilePath(t *testing.T) {",
          "1829:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "1830:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedHelmRemoteProtocols)",
          "1831:   assert.NoError(t, err)",
          "1832:   assert.False(t, remote)",
          "1833:   assert.Equal(t, \"/foo/bar/baz/bim.yaml\", p)",
          "1834:  })",
          "1835:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "1836:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedHelmRemoteProtocols)",
          "1837:   assert.NoError(t, err)",
          "1838:   assert.False(t, remote)",
          "1839:   assert.Equal(t, \"/foo/bim.yaml\", p)",
          "1840:  })",
          "1841:  t.Run(\"Error on path resolving outside repository root\", func(t *testing.T) {",
          "1842:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedHelmRemoteProtocols)",
          "1843:   assert.Error(t, err)",
          "1844:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "1845:   assert.False(t, remote)",
          "1846:   assert.Equal(t, \"\", p)",
          "1847:  })",
          "1848:  t.Run(\"Return verbatim URL\", func(t *testing.T) {",
          "1849:   url := \"https://some.where/foo,yaml\"",
          "1850:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", url, allowedHelmRemoteProtocols)",
          "1851:   assert.NoError(t, err)",
          "1852:   assert.True(t, remote)",
          "1853:   assert.Equal(t, url, p)",
          "1854:  })",
          "1855:  t.Run(\"URL scheme not allowed\", func(t *testing.T) {",
          "1856:   url := \"file:///some.where/foo,yaml\"",
          "1857:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", url, allowedHelmRemoteProtocols)",
          "1858:   assert.Error(t, err)",
          "1859:   assert.False(t, remote)",
          "1860:   assert.Equal(t, \"\", p)",
          "1861:  })",
          "1862:  t.Run(\"Implicit URL by absolute path\", func(t *testing.T) {",
          "1863:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedHelmRemoteProtocols)",
          "1864:   assert.NoError(t, err)",
          "1865:   assert.False(t, remote)",
          "1866:   assert.Equal(t, \"/foo/baz.yaml\", p)",
          "1867:  })",
          "1868:  t.Run(\"Relative app path\", func(t *testing.T) {",
          "1869:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo\", \"/baz.yaml\", allowedHelmRemoteProtocols)",
          "1870:   assert.NoError(t, err)",
          "1871:   assert.False(t, remote)",
          "1872:   assert.Equal(t, \"/foo/baz.yaml\", p)",
          "1873:  })",
          "1874:  t.Run(\"Relative repo path\", func(t *testing.T) {",
          "1875:   c, err := os.Getwd()",
          "1876:   require.NoError(t, err)",
          "1877:   p, remote, err := resolveHelmValueFilePath(\".\", \".\", \"baz.yaml\", allowedHelmRemoteProtocols)",
          "1878:   assert.NoError(t, err)",
          "1879:   assert.False(t, remote)",
          "1880:   assert.Equal(t, c+\"/baz.yaml\", p)",
          "1881:  })",
          "1882:  t.Run(\"Overlapping root prefix without trailing slash\", func(t *testing.T) {",
          "1883:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedHelmRemoteProtocols)",
          "1884:   assert.Error(t, err)",
          "1885:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "1886:   assert.False(t, remote)",
          "1887:   assert.Equal(t, \"\", p)",
          "1888:  })",
          "1889:  t.Run(\"Overlapping root prefix with trailing slash\", func(t *testing.T) {",
          "1890:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedHelmRemoteProtocols)",
          "1891:   assert.Error(t, err)",
          "1892:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "1893:   assert.False(t, remote)",
          "1894:   assert.Equal(t, \"\", p)",
          "1895:  })",
          "1896:  t.Run(\"Garbage input as values file\", func(t *testing.T) {",
          "1897:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedHelmRemoteProtocols)",
          "1898:   assert.Error(t, err)",
          "1899:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "1900:   assert.False(t, remote)",
          "1901:   assert.Equal(t, \"\", p)",
          "1902:  })",
          "1903:  t.Run(\"NUL-byte path input as values file\", func(t *testing.T) {",
          "1904:   p, remote, err := resolveHelmValueFilePath(\".\", \"/foo/\", \"\\000\", allowedHelmRemoteProtocols)",
          "1905:   assert.Error(t, err)",
          "1906:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "1907:   assert.False(t, remote)",
          "1908:   assert.Equal(t, \"\", p)",
          "1909:  })",
          "1910: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:     NoCache:            true,",
          "432:     TrackingMethod:     string(argoutil.GetTrackingMethod(s.settingsMgr)),",
          "433:     EnabledSourceTypes: enabledSourceTypes,",
          "434:    })",
          "435:    return err",
          "436:   }); err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434:     HelmOptions:        helmOptions,",
          "",
          "---------------"
        ],
        "server/repository/repository.go||server/repository/repository.go": [
          "File: server/repository/repository.go -> server/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:  if err != nil {",
          "333:   return nil, err",
          "334:  }",
          "335:  return repoClient.GetAppDetails(ctx, &apiclient.RepoServerAppDetailsQuery{",
          "336:   Repo:             repo,",
          "337:   Source:           q.Source,",
          "338:   Repos:            helmRepos,",
          "339:   KustomizeOptions: kustomizeOptions,",
          "340:   AppName:          q.AppName,",
          "341:  })",
          "342: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:  helmOptions, err := s.settings.GetHelmSettings()",
          "336:  if err != nil {",
          "337:   return nil, err",
          "338:  }",
          "344:   HelmOptions:      helmOptions,",
          "",
          "---------------"
        ],
        "util/argo/argo.go||util/argo/argo.go": [
          "File: util/argo/argo.go -> util/argo/argo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   NoRevisionCache: true,",
          "254:   TrackingMethod:  string(GetTrackingMethod(settingsMgr)),",
          "255:  })",
          "256:  if err != nil {",
          "257:   conditions = append(conditions, argoappv1.ApplicationCondition{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:   HelmOptions:     helmOptions,",
          "",
          "---------------"
        ],
        "util/argo/argo_test.go||util/argo/argo_test.go": [
          "File: util/argo/argo_test.go -> util/argo/argo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:   Source:           &app.Spec.Source,",
          "269:   Repos:            helmRepos,",
          "270:   KustomizeOptions: kustomizeOptions,",
          "271:   NoRevisionCache:  true,",
          "272:  }).Return(&apiclient.RepoAppDetailsResponse{}, nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   HelmOptions:      &argoappv1.HelmOptions{ValuesFileSchemes: []string{\"https\", \"http\"}},",
          "",
          "---------------"
        ],
        "util/helm/cmd.go||util/helm/cmd.go": [
          "File: util/helm/cmd.go -> util/helm/cmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "13:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "14:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "15: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  pathutil \"github.com/argoproj/argo-cd/v2/util/io/path\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:  APIVersions []string",
          "287:  Set         map[string]string",
          "288:  SetString   map[string]string",
          "291:  SkipCrds    bool",
          "292: }",
          "",
          "[Removed Lines]",
          "289:  SetFile     map[string]string",
          "290:  Values      []string",
          "",
          "[Added Lines]",
          "290:  SetFile     map[string]pathutil.ResolvedFilePath",
          "291:  Values      []pathutil.ResolvedFilePath",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:   args = append(args, \"--set-string\", key+\"=\"+cleanSetParameters(val))",
          "324:  }",
          "325:  for key, val := range opts.SetFile {",
          "327:  }",
          "328:  for _, val := range opts.Values {",
          "330:  }",
          "331:  for _, v := range opts.APIVersions {",
          "332:   args = append(args, \"--api-versions\", v)",
          "",
          "[Removed Lines]",
          "326:   args = append(args, \"--set-file\", key+\"=\"+cleanSetParameters(val))",
          "329:   args = append(args, \"--values\", val)",
          "",
          "[Added Lines]",
          "327:   args = append(args, \"--set-file\", key+\"=\"+cleanSetParameters(string(val)))",
          "330:   args = append(args, \"--values\", string(val))",
          "",
          "---------------"
        ],
        "util/helm/helm.go||util/helm/helm.go": [
          "File: util/helm/helm.go -> util/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  \"github.com/argoproj/argo-cd/v2/util/config\"",
          "15:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "16: )",
          "18: type HelmRepository struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  pathutil \"github.com/argoproj/argo-cd/v2/util/io/path\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  Template(opts *TemplateOpts) (string, error)",
          "32:  DependencyBuild() error",
          "",
          "[Removed Lines]",
          "30:  GetParameters(valuesFiles []string) (map[string]string, error)",
          "",
          "[Added Lines]",
          "31:  GetParameters(valuesFiles []pathutil.ResolvedFilePath) (map[string]string, error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:  return strings.TrimSpace(version), nil",
          "130: }",
          "133:  out, err := h.cmd.inspectValues(\".\")",
          "134:  if err != nil {",
          "135:   return nil, err",
          "136:  }",
          "137:  values := []string{out}",
          "139:   var fileValues []byte",
          "140:   parsedURL, err := url.ParseRequestURI(file)",
          "141:   if err == nil && (parsedURL.Scheme == \"http\" || parsedURL.Scheme == \"https\") {",
          "",
          "[Removed Lines]",
          "132: func (h *helm) GetParameters(valuesFiles []string) (map[string]string, error) {",
          "138:  for _, file := range valuesFiles {",
          "",
          "[Added Lines]",
          "133: func (h *helm) GetParameters(valuesFiles []pathutil.ResolvedFilePath) (map[string]string, error) {",
          "139:  for i := range valuesFiles {",
          "140:   file := string(valuesFiles[i])",
          "",
          "---------------"
        ],
        "util/helm/helm_test.go||util/helm/helm_test.go": [
          "File: util/helm/helm_test.go -> util/helm/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"os\"",
          "6:  \"testing\"",
          "10:  \"github.com/stretchr/testify/assert\"",
          "11:  appsv1 \"k8s.io/api/apps/v1\"",
          "12:  apiv1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "8:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "",
          "[Added Lines]",
          "8:  \"github.com/argoproj/argo-cd/v2/util/io/path\"",
          "10:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  assert.NoError(t, err)",
          "57:  opts := TemplateOpts{",
          "58:   Name:   \"test\",",
          "60:  }",
          "61:  objs, err := template(h, &opts)",
          "62:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "59:   Values: []string{\"values-production.yaml\"},",
          "",
          "[Added Lines]",
          "60:   Values: []path.ResolvedFilePath{\"values-production.yaml\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75: func TestHelmGetParams(t *testing.T) {",
          "76:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "77:  assert.NoError(t, err)",
          "79:  assert.Nil(t, err)",
          "81:  slaveCountParam := params[\"cluster.slaveCount\"]",
          "",
          "[Removed Lines]",
          "78:  params, err := h.GetParameters([]string{})",
          "",
          "[Added Lines]",
          "79:  params, err := h.GetParameters(nil)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85: func TestHelmGetParamsValueFiles(t *testing.T) {",
          "86:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "87:  assert.NoError(t, err)",
          "89:  assert.Nil(t, err)",
          "91:  slaveCountParam := params[\"cluster.slaveCount\"]",
          "",
          "[Removed Lines]",
          "88:  params, err := h.GetParameters([]string{\"values-production.yaml\"})",
          "",
          "[Added Lines]",
          "89:  params, err := h.GetParameters([]path.ResolvedFilePath{\"values-production.yaml\"})",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95: func TestHelmGetParamsValueFilesThatExist(t *testing.T) {",
          "96:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "97:  assert.NoError(t, err)",
          "99:  assert.Nil(t, err)",
          "101:  slaveCountParam := params[\"cluster.slaveCount\"]",
          "",
          "[Removed Lines]",
          "98:  params, err := h.GetParameters([]string{\"values-missing.yaml\", \"values-production.yaml\"})",
          "",
          "[Added Lines]",
          "99:  params, err := h.GetParameters([]path.ResolvedFilePath{\"values-missing.yaml\", \"values-production.yaml\"})",
          "",
          "---------------"
        ],
        "util/io/path/resolved.go||util/io/path/resolved.go": [
          "File: util/io/path/resolved.go -> util/io/path/resolved.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package path",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"net/url\"",
          "6:  \"os\"",
          "7:  \"path/filepath\"",
          "8:  \"strings\"",
          "10:  log \"github.com/sirupsen/logrus\"",
          "11: )",
          "14: type ResolvedFilePath string",
          "19: func resolveSymbolicLinkRecursive(path string, maxDepth int) (string, error) {",
          "20:  resolved, err := os.Readlink(path)",
          "21:  if err != nil {",
          "23:   _, ok := err.(*os.PathError)",
          "24:   if ok {",
          "25:    return path, nil",
          "26:   }",
          "28:   return \"\", err",
          "29:  }",
          "31:  if maxDepth == 0 {",
          "32:   return \"\", fmt.Errorf(\"maximum nesting level reached\")",
          "33:  }",
          "37:  if !strings.HasPrefix(resolved, \"/\") {",
          "38:   basePath := filepath.Dir(path)",
          "39:   resolved = filepath.Join(basePath, resolved)",
          "40:  }",
          "42:  return resolveSymbolicLinkRecursive(resolved, maxDepth-1)",
          "43: }",
          "47: func isURLSchemeAllowed(scheme string, allowed []string) bool {",
          "48:  isAllowed := false",
          "49:  if len(allowed) > 0 {",
          "50:   for _, s := range allowed {",
          "51:    if strings.EqualFold(scheme, s) {",
          "52:     isAllowed = true",
          "53:     break",
          "54:    }",
          "55:   }",
          "56:  }",
          "59:  return isAllowed && scheme != \"\"",
          "60: }",
          "90: func ResolveFilePath(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath ResolvedFilePath, isRemote bool, err error) {",
          "94:  resolveFailure := func(path string, err error) error {",
          "95:   log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
          "96:   return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
          "97:  }",
          "101:  url, err := url.Parse(valueFile)",
          "102:  if err == nil {",
          "104:   if url.Scheme != \"\" {",
          "105:    if isURLSchemeAllowed(url.Scheme, allowedURLSchemes) {",
          "106:     return ResolvedFilePath(valueFile), true, nil",
          "107:    } else {",
          "108:     return \"\", false, fmt.Errorf(\"the URL scheme '%s' is not allowed\", url.Scheme)",
          "109:    }",
          "110:   }",
          "111:  }",
          "114:  absRepoPath, err := filepath.Abs(repoRoot)",
          "115:  if err != nil {",
          "116:   return \"\", false, resolveFailure(repoRoot, err)",
          "117:  }",
          "121:  path := valueFile",
          "122:  if !filepath.IsAbs(path) {",
          "123:   absWorkDir, err := filepath.Abs(appPath)",
          "124:   if err != nil {",
          "125:    return \"\", false, resolveFailure(repoRoot, err)",
          "126:   }",
          "127:   path = filepath.Join(absWorkDir, path)",
          "128:  } else {",
          "129:   path = filepath.Join(absRepoPath, path)",
          "130:  }",
          "133:  delinkedPath, err := resolveSymbolicLinkRecursive(path, 10)",
          "134:  if err != nil {",
          "135:   return \"\", false, resolveFailure(path, err)",
          "136:  }",
          "137:  path = delinkedPath",
          "140:  path, err = filepath.Abs(path)",
          "141:  if err != nil {",
          "142:   return \"\", false, resolveFailure(path, err)",
          "143:  }",
          "147:  requiredRootPath := absRepoPath",
          "148:  if !strings.HasSuffix(requiredRootPath, \"/\") {",
          "149:   requiredRootPath += \"/\"",
          "150:  }",
          "153:  if !strings.HasPrefix(path, requiredRootPath) {",
          "154:   return \"\", false, fmt.Errorf(\"value file '%s' resolved to outside repository root\", valueFile)",
          "155:  }",
          "157:  return ResolvedFilePath(path), false, nil",
          "158: }",
          "",
          "---------------"
        ],
        "util/io/path/resolved_test.go||util/io/path/resolved_test.go": [
          "File: util/io/path/resolved_test.go -> util/io/path/resolved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package path",
          "3: import (",
          "4:  \"os\"",
          "5:  \"path/filepath\"",
          "6:  \"testing\"",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9:  \"github.com/stretchr/testify/require\"",
          "10: )",
          "12: func Test_resolveSymlinkRecursive(t *testing.T) {",
          "13:  testsDir, err := filepath.Abs(\"./testdata\")",
          "14:  if err != nil {",
          "15:   panic(err)",
          "16:  }",
          "17:  t.Run(\"Resolve non-symlink\", func(t *testing.T) {",
          "18:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/foo\", 2)",
          "19:   assert.NoError(t, err)",
          "20:   assert.Equal(t, testsDir+\"/foo\", r)",
          "21:  })",
          "22:  t.Run(\"Successfully resolve symlink\", func(t *testing.T) {",
          "23:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bar\", 2)",
          "24:   assert.NoError(t, err)",
          "25:   assert.Equal(t, testsDir+\"/foo\", r)",
          "26:  })",
          "27:  t.Run(\"Do not allow symlink at all\", func(t *testing.T) {",
          "28:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bar\", 0)",
          "29:   assert.Error(t, err)",
          "30:   assert.Equal(t, \"\", r)",
          "31:  })",
          "32:  t.Run(\"Error because too nested symlink\", func(t *testing.T) {",
          "33:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/bam\", 2)",
          "34:   assert.Error(t, err)",
          "35:   assert.Equal(t, \"\", r)",
          "36:  })",
          "37:  t.Run(\"No such file or directory\", func(t *testing.T) {",
          "38:   r, err := resolveSymbolicLinkRecursive(testsDir+\"/foobar\", 2)",
          "39:   assert.NoError(t, err)",
          "40:   assert.Equal(t, testsDir+\"/foobar\", r)",
          "41:  })",
          "42: }",
          "44: func Test_isURLSchemeAllowed(t *testing.T) {",
          "45:  type testdata struct {",
          "46:   name     string",
          "47:   scheme   string",
          "48:   allowed  []string",
          "49:   expected bool",
          "50:  }",
          "51:  var tts []testdata = []testdata{",
          "52:   {",
          "53:    name:     \"Allowed scheme matches\",",
          "54:    scheme:   \"http\",",
          "55:    allowed:  []string{\"http\", \"https\"},",
          "56:    expected: true,",
          "57:   },",
          "58:   {",
          "59:    name:     \"Allowed scheme matches only partially\",",
          "60:    scheme:   \"http\",",
          "61:    allowed:  []string{\"https\"},",
          "62:    expected: false,",
          "63:   },",
          "64:   {",
          "65:    name:     \"Scheme is not allowed\",",
          "66:    scheme:   \"file\",",
          "67:    allowed:  []string{\"http\", \"https\"},",
          "68:    expected: false,",
          "69:   },",
          "70:   {",
          "71:    name:     \"Empty scheme with valid allowances is forbidden\",",
          "72:    scheme:   \"\",",
          "73:    allowed:  []string{\"http\", \"https\"},",
          "74:    expected: false,",
          "75:   },",
          "76:   {",
          "77:    name:     \"Empty scheme with empty allowances is forbidden\",",
          "78:    scheme:   \"\",",
          "79:    allowed:  []string{},",
          "80:    expected: false,",
          "81:   },",
          "82:   {",
          "83:    name:     \"Some scheme with empty allowances is forbidden\",",
          "84:    scheme:   \"file\",",
          "85:    allowed:  []string{},",
          "86:    expected: false,",
          "87:   },",
          "88:  }",
          "89:  for _, tt := range tts {",
          "90:   t.Run(tt.name, func(t *testing.T) {",
          "91:    r := isURLSchemeAllowed(tt.scheme, tt.allowed)",
          "92:    assert.Equal(t, tt.expected, r)",
          "93:   })",
          "94:  }",
          "95: }",
          "97: var allowedRemoteProtocols = []string{\"http\", \"https\"}",
          "99: func Test_resolveFilePath(t *testing.T) {",
          "100:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "101:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedRemoteProtocols)",
          "102:   assert.NoError(t, err)",
          "103:   assert.False(t, remote)",
          "104:   assert.Equal(t, \"/foo/bar/baz/bim.yaml\", string(p))",
          "105:  })",
          "106:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "107:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedRemoteProtocols)",
          "108:   assert.NoError(t, err)",
          "109:   assert.False(t, remote)",
          "110:   assert.Equal(t, \"/foo/bim.yaml\", string(p))",
          "111:  })",
          "112:  t.Run(\"Error on path resolving outside repository root\", func(t *testing.T) {",
          "113:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedRemoteProtocols)",
          "114:   assert.Error(t, err)",
          "115:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "116:   assert.False(t, remote)",
          "117:   assert.Equal(t, \"\", string(p))",
          "118:  })",
          "119:  t.Run(\"Return verbatim URL\", func(t *testing.T) {",
          "120:   url := \"https://some.where/foo,yaml\"",
          "121:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "122:   assert.NoError(t, err)",
          "123:   assert.True(t, remote)",
          "124:   assert.Equal(t, url, string(p))",
          "125:  })",
          "126:  t.Run(\"URL scheme not allowed\", func(t *testing.T) {",
          "127:   url := \"file:///some.where/foo,yaml\"",
          "128:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "129:   assert.Error(t, err)",
          "130:   assert.False(t, remote)",
          "131:   assert.Equal(t, \"\", string(p))",
          "132:  })",
          "133:  t.Run(\"Implicit URL by absolute path\", func(t *testing.T) {",
          "134:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "135:   assert.NoError(t, err)",
          "136:   assert.False(t, remote)",
          "137:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "138:  })",
          "139:  t.Run(\"Relative app path\", func(t *testing.T) {",
          "140:   p, remote, err := ResolveFilePath(\".\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "141:   assert.NoError(t, err)",
          "142:   assert.False(t, remote)",
          "143:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "144:  })",
          "145:  t.Run(\"Relative repo path\", func(t *testing.T) {",
          "146:   c, err := os.Getwd()",
          "147:   require.NoError(t, err)",
          "148:   p, remote, err := ResolveFilePath(\".\", \".\", \"baz.yaml\", allowedRemoteProtocols)",
          "149:   assert.NoError(t, err)",
          "150:   assert.False(t, remote)",
          "151:   assert.Equal(t, c+\"/baz.yaml\", string(p))",
          "152:  })",
          "153:  t.Run(\"Overlapping root prefix without trailing slash\", func(t *testing.T) {",
          "154:   p, remote, err := ResolveFilePath(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "155:   assert.Error(t, err)",
          "156:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "157:   assert.False(t, remote)",
          "158:   assert.Equal(t, \"\", string(p))",
          "159:  })",
          "160:  t.Run(\"Overlapping root prefix with trailing slash\", func(t *testing.T) {",
          "161:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "162:   assert.Error(t, err)",
          "163:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "164:   assert.False(t, remote)",
          "165:   assert.Equal(t, \"\", string(p))",
          "166:  })",
          "167:  t.Run(\"Garbage input as values file\", func(t *testing.T) {",
          "168:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedRemoteProtocols)",
          "169:   assert.Error(t, err)",
          "170:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "171:   assert.False(t, remote)",
          "172:   assert.Equal(t, \"\", string(p))",
          "173:  })",
          "174:  t.Run(\"NUL-byte path input as values file\", func(t *testing.T) {",
          "175:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"\\000\", allowedRemoteProtocols)",
          "176:   assert.Error(t, err)",
          "177:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "178:   assert.False(t, remote)",
          "179:   assert.Equal(t, \"\", string(p))",
          "180:  })",
          "181: }",
          "",
          "---------------"
        ],
        "util/notification/argocd/service.go||util/notification/argocd/service.go": [
          "File: util/notification/argocd/service.go -> util/notification/argocd/service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:  if err != nil {",
          "111:   return nil, err",
          "112:  }",
          "113:  appDetail, err := svc.repoServerClient.GetAppDetails(ctx, &apiclient.RepoServerAppDetailsQuery{",
          "114:   Repo:             repo,",
          "115:   Source:           appSource,",
          "116:   Repos:            helmRepos,",
          "117:   KustomizeOptions: kustomizeOptions,",
          "118:  })",
          "119:  if err != nil {",
          "120:   return nil, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:  helmOptions, err := svc.settingsMgr.GetHelmSettings()",
          "114:  if err != nil {",
          "115:   return nil, err",
          "116:  }",
          "122:   HelmOptions:      helmOptions,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41a2505bf8709d550c62f8e8693e48648f80f856",
      "candidate_info": {
        "commit_hash": "41a2505bf8709d550c62f8e8693e48648f80f856",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/41a2505bf8709d550c62f8e8693e48648f80f856",
        "files": [
          "reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go",
          "reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet",
          "reposerver/repository/testdata/jsonnet-1/params.libsonnet",
          "reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet",
          "util/helm/helm.go",
          "util/helm/helm_test.go",
          "util/io/path/resolved.go",
          "util/io/path/resolved_test.go"
        ],
        "message": "fix: allow resolving repo root as jsonnet lib path (#11119)\n\nSigned-off-by: shuai-zh <shuaiz8023@gmail.com>\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\nCo-authored-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet||reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet",
          "reposerver/repository/testdata/jsonnet-1/params.libsonnet||reposerver/repository/testdata/jsonnet-1/params.libsonnet",
          "reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet||reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet",
          "util/helm/helm.go||util/helm/helm.go",
          "util/helm/helm_test.go||util/helm/helm_test.go",
          "util/io/path/resolved.go||util/io/path/resolved.go",
          "util/io/path/resolved_test.go||util/io/path/resolved_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ]
        }
      },
      "candidate_diff": {
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "728:   for _, val := range appHelm.ValueFiles {",
          "732:    if err != nil {",
          "733:     return nil, err",
          "734:    }",
          "",
          "[Removed Lines]",
          "731:    path, isRemote, err := pathutil.ResolveFilePath(appPath, repoRoot, val, q.GetValuesFileSchemes())",
          "",
          "[Added Lines]",
          "731:    path, isRemote, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, val, q.GetValuesFileSchemes())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "768:    }",
          "769:   }",
          "770:   for _, p := range appHelm.FileParameters {",
          "772:    if err != nil {",
          "773:     return nil, err",
          "774:    }",
          "",
          "[Removed Lines]",
          "771:    resolvedPath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, env.Envsubst(p.Path), q.GetValuesFileSchemes())",
          "",
          "[Added Lines]",
          "771:    resolvedPath, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, env.Envsubst(p.Path), q.GetValuesFileSchemes())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1371:  jpaths := []string{appPath}",
          "1372:  for _, p := range sourceJsonnet.Libs {",
          "1375:   if err != nil {",
          "1376:    return nil, err",
          "1377:   }",
          "",
          "[Removed Lines]",
          "1374:   jpath, _, err := pathutil.ResolveFilePath(repoRoot, repoRoot, p, nil)",
          "",
          "[Added Lines]",
          "1374:   jpath, err := pathutil.ResolveFileOrDirectoryPath(repoRoot, repoRoot, p)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1613:   return err",
          "1614:  }",
          "1617:   if err := loadFileIntoIfExists(resolvedValuesPath, &res.Helm.Values); err != nil {",
          "1618:    return err",
          "1619:   }",
          "",
          "[Removed Lines]",
          "1616:  if resolvedValuesPath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "[Added Lines]",
          "1616:  if resolvedValuesPath, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1623:  var resolvedSelectedValueFiles []pathutil.ResolvedFilePath",
          "1625:  for _, file := range selectedValueFiles {",
          "1627:    resolvedSelectedValueFiles = append(resolvedSelectedValueFiles, resolvedFile)",
          "1628:   } else {",
          "1629:    log.Warnf(\"Values file %s is not allowed: %v\", file, err)",
          "",
          "[Removed Lines]",
          "1626:   if resolvedFile, _, err := pathutil.ResolveFilePath(appPath, repoRoot, file, q.GetValuesFileSchemes()); err == nil {",
          "",
          "[Added Lines]",
          "1626:   if resolvedFile, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, file, q.GetValuesFileSchemes()); err == nil {",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:  assert.Equal(t, 2, len(res1.Manifests))",
          "364: }",
          "366: func TestGenerateJsonnetLibOutside(t *testing.T) {",
          "367:  service := newService(\".\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366: func TestGenerateJsonnetManifestInRootDir(t *testing.T) {",
          "367:  service := newService(\"testdata/jsonnet-1\")",
          "369:  q := apiclient.ManifestRequest{",
          "370:   Repo: &argoappv1.Repository{},",
          "371:   ApplicationSource: &argoappv1.ApplicationSource{",
          "372:    Path: \".\",",
          "373:    Directory: &argoappv1.ApplicationSourceDirectory{",
          "374:     Jsonnet: argoappv1.ApplicationSourceJsonnet{",
          "375:      ExtVars: []argoappv1.JsonnetVar{{Name: \"extVarString\", Value: \"extVarString\"}, {Name: \"extVarCode\", Value: \"\\\"extVarCode\\\"\", Code: true}},",
          "376:      TLAs:    []argoappv1.JsonnetVar{{Name: \"tlaString\", Value: \"tlaString\"}, {Name: \"tlaCode\", Value: \"\\\"tlaCode\\\"\", Code: true}},",
          "377:      Libs:    []string{\".\"},",
          "378:     },",
          "379:    },",
          "380:   },",
          "381:  }",
          "382:  res1, err := service.GenerateManifest(context.Background(), &q)",
          "383:  assert.Nil(t, err)",
          "384:  assert.Equal(t, 2, len(res1.Manifests))",
          "385: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:  }",
          "380:  _, err := service.GenerateManifest(context.Background(), &q)",
          "381:  require.Error(t, err)",
          "383: }",
          "385: func TestManifestGenErrorCacheByNumRequests(t *testing.T) {",
          "",
          "[Removed Lines]",
          "382:  require.Contains(t, err.Error(), \"value file '../../../testdata/jsonnet/vendor' resolved to outside repository root\")",
          "",
          "[Added Lines]",
          "403:  require.Contains(t, err.Error(), \"file '../../../testdata/jsonnet/vendor' resolved to outside repository root\")",
          "",
          "---------------"
        ],
        "reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet||reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet": [
          "File: reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet -> reposerver/repository/testdata/jsonnet-1/guestbook-ui.jsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local service = import 'vendor/nested/service.libsonnet';",
          "2: local params = import 'params.libsonnet';",
          "4: function(tlaString, tlaCode)",
          "5:   [",
          "6:     service.new(params),",
          "7:     {",
          "8:       apiVersion: 'apps/v1beta2',",
          "9:       kind: 'Deployment',",
          "10:       metadata: {",
          "11:         name: params.name,",
          "12:       },",
          "13:       spec: {",
          "14:         replicas: params.replicas,",
          "15:         selector: {",
          "16:           matchLabels: {",
          "17:             app: params.name,",
          "18:           },",
          "19:         },",
          "20:         template: {",
          "21:           metadata: {",
          "22:             labels: {",
          "23:               app: params.name,",
          "24:               tlaString: tlaString,",
          "25:               tlaCode: tlaCode,",
          "26:               extVarString: std.extVar('extVarString'),",
          "27:               extVarCode: std.extVar('extVarCode'),",
          "28:             },",
          "29:           },",
          "30:           spec: {",
          "31:             containers: [",
          "32:               {",
          "33:                 image: params.image,",
          "34:                 name: params.name,",
          "35:                 ports: [",
          "36:                   {",
          "37:                     containerPort: params.containerPort,",
          "38:                   },",
          "39:                 ],",
          "40:               },",
          "41:             ],",
          "42:           },",
          "43:         },",
          "44:       },",
          "45:     },",
          "46:     null,",
          "47:   ]",
          "",
          "---------------"
        ],
        "reposerver/repository/testdata/jsonnet-1/params.libsonnet||reposerver/repository/testdata/jsonnet-1/params.libsonnet": [
          "File: reposerver/repository/testdata/jsonnet-1/params.libsonnet -> reposerver/repository/testdata/jsonnet-1/params.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {",
          "2:   containerPort: 80,",
          "3:   image: \"gcr.io/heptio-images/ks-guestbook-demo:0.2\",",
          "4:   name: \"guestbook-ui\",",
          "5:   replicas: 1,",
          "6:   servicePort: 80,",
          "7:   type: \"ClusterIP\",",
          "8: }",
          "",
          "---------------"
        ],
        "reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet||reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet": [
          "File: reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet -> reposerver/repository/testdata/jsonnet-1/vendor/nested/service.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: local new(params) = {",
          "2:   apiVersion: 'v1',",
          "3:   kind: 'Service',",
          "4:   metadata: {",
          "5:     name: params.name,",
          "6:   },",
          "7:   spec: {",
          "8:     ports: [",
          "9:       {",
          "10:         port: params.servicePort,",
          "11:         targetPort: params.containerPort,",
          "12:       },",
          "13:     ],",
          "14:     selector: {",
          "15:       app: params.name,",
          "16:     },",
          "17:     type: params.type,",
          "18:   },",
          "19: };",
          "21: {",
          "22:   new:: new,",
          "23: }",
          "",
          "---------------"
        ],
        "util/helm/helm.go||util/helm/helm.go": [
          "File: util/helm/helm.go -> util/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: func (h *helm) GetParameters(valuesFiles []pathutil.ResolvedFilePath, appPath, repoRoot string) (map[string]string, error) {",
          "135:  var values []string",
          "139:   out, err := h.cmd.inspectValues(\".\")",
          "140:   if err != nil {",
          "141:    return nil, err",
          "",
          "[Removed Lines]",
          "137:  if resolved, _, err := pathutil.ResolveFilePath(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "138:   fmt.Println(resolved)",
          "",
          "[Added Lines]",
          "137:  if _, _, err := pathutil.ResolveValueFilePathOrUrl(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {",
          "",
          "---------------"
        ],
        "util/helm/helm_test.go||util/helm/helm_test.go": [
          "File: util/helm/helm_test.go -> util/helm/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  require.NoError(t, err)",
          "60:  h, err := NewHelmApp(repoRootAbs, []HelmRepository{}, false, \"\", \"\", false)",
          "61:  assert.NoError(t, err)",
          "63:  require.NoError(t, err)",
          "64:  opts := TemplateOpts{",
          "65:   Name:   \"test\",",
          "",
          "[Removed Lines]",
          "62:  valuesPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "[Added Lines]",
          "62:  valuesPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  require.NoError(t, err)",
          "99:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "100:  assert.NoError(t, err)",
          "102:  require.NoError(t, err)",
          "103:  params, err := h.GetParameters([]path.ResolvedFilePath{valuesPath}, repoRootAbs, repoRootAbs)",
          "104:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "101:  valuesPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "[Added Lines]",
          "101:  valuesPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:  require.NoError(t, err)",
          "114:  h, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)",
          "115:  assert.NoError(t, err)",
          "117:  require.NoError(t, err)",
          "119:  require.NoError(t, err)",
          "120:  params, err := h.GetParameters([]path.ResolvedFilePath{valuesMissingPath, valuesProductionPath}, repoRootAbs, repoRootAbs)",
          "121:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "116:  valuesMissingPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-missing.yaml\", nil)",
          "118:  valuesProductionPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "[Added Lines]",
          "116:  valuesMissingPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-missing.yaml\", nil)",
          "118:  valuesProductionPath, _, err := path.ResolveValueFilePathOrUrl(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)",
          "",
          "---------------"
        ],
        "util/io/path/resolved.go||util/io/path/resolved.go": [
          "File: util/io/path/resolved.go -> util/io/path/resolved.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  log \"github.com/sirupsen/logrus\"",
          "11: )",
          "15: type ResolvedFilePath string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: type ResolvedFileOrDirectoryPath string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  return isAllowed && scheme != \"\"",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: func resolveFailure(path string, err error) error {",
          "71:  log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
          "72:  return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
          "73: }",
          "75: func ResolveFileOrDirectoryPath(appPath, repoRoot, dir string) (ResolvedFileOrDirectoryPath, error) {",
          "76:  path, err := resolveFileOrDirectory(appPath, repoRoot, dir, true)",
          "77:  if err != nil {",
          "78:   return \"\", err",
          "79:  }",
          "81:  return ResolvedFileOrDirectoryPath(path), nil",
          "82: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:  url, err := url.Parse(valueFile)",
          "",
          "[Removed Lines]",
          "91: func ResolveFilePath(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath ResolvedFilePath, isRemote bool, err error) {",
          "95:  resolveFailure := func(path string, err error) error {",
          "96:   log.Errorf(\"failed to resolve path '%s': %v\", path, err)",
          "97:   return fmt.Errorf(\"internal error: failed to resolve path. Check logs for more details\")",
          "98:  }",
          "",
          "[Added Lines]",
          "112: func ResolveValueFilePathOrUrl(appPath, repoRoot, valueFile string, allowedURLSchemes []string) (resolvedPath ResolvedFilePath, isRemote bool, err error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   }",
          "112:  }",
          "115:  absRepoPath, err := filepath.Abs(repoRoot)",
          "116:  if err != nil {",
          "118:  }",
          "123:  if !filepath.IsAbs(path) {",
          "124:   absWorkDir, err := filepath.Abs(appPath)",
          "125:   if err != nil {",
          "127:   }",
          "128:   path = filepath.Join(absWorkDir, path)",
          "129:  } else {",
          "130:   path = filepath.Join(absRepoPath, path)",
          "131:  }",
          "134:  delinkedPath, err := resolveSymbolicLinkRecursive(path, 10)",
          "135:  if err != nil {",
          "137:  }",
          "138:  path = delinkedPath",
          "141:  path, err = filepath.Abs(path)",
          "142:  if err != nil {",
          "144:  }",
          "",
          "[Removed Lines]",
          "117:   return \"\", false, resolveFailure(repoRoot, err)",
          "122:  path := valueFile",
          "126:    return \"\", false, resolveFailure(repoRoot, err)",
          "136:   return \"\", false, resolveFailure(path, err)",
          "143:   return \"\", false, resolveFailure(path, err)",
          "",
          "[Added Lines]",
          "127:  path, err := resolveFileOrDirectory(appPath, repoRoot, valueFile, false)",
          "128:  if err != nil {",
          "129:   return \"\", false, err",
          "130:  }",
          "132:  return ResolvedFilePath(path), false, nil",
          "133: }",
          "135: func resolveFileOrDirectory(appPath string, repoRoot string, fileOrDirectory string, allowResolveToRoot bool) (string, error) {",
          "139:   return \"\", resolveFailure(repoRoot, err)",
          "144:  path := fileOrDirectory",
          "148:    return \"\", resolveFailure(repoRoot, err)",
          "158:   return \"\", resolveFailure(repoRoot, err)",
          "165:   return \"\", resolveFailure(repoRoot, err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:   requiredRootPath += string(os.PathSeparator)",
          "151:  }",
          "156:  }",
          "159: }",
          "",
          "[Removed Lines]",
          "154:  if !strings.HasPrefix(path, requiredRootPath) {",
          "155:   return \"\", false, fmt.Errorf(\"value file '%s' resolved to outside repository root\", valueFile)",
          "158:  return ResolvedFilePath(path), false, nil",
          "",
          "[Added Lines]",
          "175:  resolvedToRoot := path+string(os.PathSeparator) == requiredRootPath",
          "176:  if resolvedToRoot {",
          "177:   if !allowResolveToRoot {",
          "178:    return \"\", resolveFailure(path, fmt.Errorf(\"path resolved to repository root, which is not allowed\"))",
          "179:   }",
          "180:  } else {",
          "182:   if !strings.HasPrefix(path, requiredRootPath) {",
          "183:    return \"\", fmt.Errorf(\"file '%s' resolved to outside repository root\", fileOrDirectory)",
          "184:   }",
          "187:  return path, nil",
          "",
          "---------------"
        ],
        "util/io/path/resolved_test.go||util/io/path/resolved_test.go": [
          "File: util/io/path/resolved_test.go -> util/io/path/resolved_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: func Test_resolveFilePath(t *testing.T) {",
          "100:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "102:   assert.NoError(t, err)",
          "103:   assert.False(t, remote)",
          "104:   assert.Equal(t, \"/foo/bar/baz/bim.yaml\", string(p))",
          "105:  })",
          "106:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "108:   assert.NoError(t, err)",
          "109:   assert.False(t, remote)",
          "110:   assert.Equal(t, \"/foo/bim.yaml\", string(p))",
          "111:  })",
          "112:  t.Run(\"Error on path resolving outside repository root\", func(t *testing.T) {",
          "114:   assert.Error(t, err)",
          "115:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "116:   assert.False(t, remote)",
          "",
          "[Removed Lines]",
          "101:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedRemoteProtocols)",
          "107:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedRemoteProtocols)",
          "113:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedRemoteProtocols)",
          "",
          "[Added Lines]",
          "101:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedRemoteProtocols)",
          "107:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/../../bim.yaml\", allowedRemoteProtocols)",
          "113:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"baz/../../../bim.yaml\", allowedRemoteProtocols)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  })",
          "119:  t.Run(\"Return verbatim URL\", func(t *testing.T) {",
          "120:   url := \"https://some.where/foo,yaml\"",
          "122:   assert.NoError(t, err)",
          "123:   assert.True(t, remote)",
          "124:   assert.Equal(t, url, string(p))",
          "125:  })",
          "126:  t.Run(\"URL scheme not allowed\", func(t *testing.T) {",
          "127:   url := \"file:///some.where/foo,yaml\"",
          "129:   assert.Error(t, err)",
          "130:   assert.False(t, remote)",
          "131:   assert.Equal(t, \"\", string(p))",
          "132:  })",
          "133:  t.Run(\"Implicit URL by absolute path\", func(t *testing.T) {",
          "135:   assert.NoError(t, err)",
          "136:   assert.False(t, remote)",
          "137:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "138:  })",
          "139:  t.Run(\"Relative app path\", func(t *testing.T) {",
          "141:   assert.NoError(t, err)",
          "142:   assert.False(t, remote)",
          "143:   assert.Equal(t, \"/foo/baz.yaml\", string(p))",
          "",
          "[Removed Lines]",
          "121:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "128:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "134:   p, remote, err := ResolveFilePath(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "140:   p, remote, err := ResolveFilePath(\".\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "",
          "[Added Lines]",
          "121:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "128:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", url, allowedRemoteProtocols)",
          "134:   p, remote, err := ResolveValueFilePathOrUrl(\"/foo/bar\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "140:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo\", \"/baz.yaml\", allowedRemoteProtocols)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:  t.Run(\"Relative repo path\", func(t *testing.T) {",
          "146:   c, err := os.Getwd()",
          "147:   require.NoError(t, err)",
          "149:   assert.NoError(t, err)",
          "150:   assert.False(t, remote)",
          "151:   assert.Equal(t, c+\"/baz.yaml\", string(p))",
          "152:  })",
          "153:  t.Run(\"Overlapping root prefix without trailing slash\", func(t *testing.T) {",
          "155:   assert.Error(t, err)",
          "156:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "157:   assert.False(t, remote)",
          "158:   assert.Equal(t, \"\", string(p))",
          "159:  })",
          "160:  t.Run(\"Overlapping root prefix with trailing slash\", func(t *testing.T) {",
          "162:   assert.Error(t, err)",
          "163:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "164:   assert.False(t, remote)",
          "165:   assert.Equal(t, \"\", string(p))",
          "166:  })",
          "167:  t.Run(\"Garbage input as values file\", func(t *testing.T) {",
          "169:   assert.Error(t, err)",
          "170:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "171:   assert.False(t, remote)",
          "172:   assert.Equal(t, \"\", string(p))",
          "173:  })",
          "174:  t.Run(\"NUL-byte path input as values file\", func(t *testing.T) {",
          "176:   assert.Error(t, err)",
          "177:   assert.Contains(t, err.Error(), \"outside repository root\")",
          "178:   assert.False(t, remote)",
          "179:   assert.Equal(t, \"\", string(p))",
          "180:  })",
          "181: }",
          "",
          "[Removed Lines]",
          "148:   p, remote, err := ResolveFilePath(\".\", \".\", \"baz.yaml\", allowedRemoteProtocols)",
          "154:   p, remote, err := ResolveFilePath(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "161:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "168:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedRemoteProtocols)",
          "175:   p, remote, err := ResolveFilePath(\".\", \"/foo/\", \"\\000\", allowedRemoteProtocols)",
          "",
          "[Added Lines]",
          "148:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \".\", \"baz.yaml\", allowedRemoteProtocols)",
          "154:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "161:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"../foo2/baz.yaml\", allowedRemoteProtocols)",
          "168:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"kfdj\\\\ks&&&321209.,---e32908923%$\u00a7!\\\"\", allowedRemoteProtocols)",
          "175:   p, remote, err := ResolveValueFilePathOrUrl(\".\", \"/foo/\", \"\\000\", allowedRemoteProtocols)",
          "181:  t.Run(\"Resolve root path into absolute path - jsonnet library path\", func(t *testing.T) {",
          "182:   p, err := ResolveFileOrDirectoryPath(\"/foo\", \"/foo\", \"./\")",
          "183:   assert.NoError(t, err)",
          "184:   assert.Equal(t, \"/foo\", string(p))",
          "185:  })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "902b6aa9bba108a9abd6cfbb27015e7b4d286322",
      "candidate_info": {
        "commit_hash": "902b6aa9bba108a9abd6cfbb27015e7b4d286322",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/902b6aa9bba108a9abd6cfbb27015e7b4d286322",
        "files": [
          "controller/state.go",
          "docs/operator-manual/argocd-cm.yaml",
          "pkg/apis/api-rules/violation_exceptions.list",
          "pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/types.go",
          "pkg/apis/application/v1alpha1/zz_generated.deepcopy.go",
          "reposerver/apiclient/repository.pb.go",
          "reposerver/repository/repository.go",
          "reposerver/repository/repository.proto",
          "reposerver/repository/repository_test.go",
          "server/application/application.go",
          "util/argo/argo.go",
          "util/settings/settings.go",
          "util/settings/settings_test.go"
        ],
        "message": "feat: support custom helm values file schemes (#8535)\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>",
        "before_after_code_files": [
          "controller/state.go||controller/state.go",
          "pkg/apis/api-rules/violation_exceptions.list||pkg/apis/api-rules/violation_exceptions.list",
          "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/types.go||pkg/apis/application/v1alpha1/types.go",
          "pkg/apis/application/v1alpha1/zz_generated.deepcopy.go||pkg/apis/application/v1alpha1/zz_generated.deepcopy.go",
          "reposerver/apiclient/repository.pb.go||reposerver/apiclient/repository.pb.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository.proto||reposerver/repository/repository.proto",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "server/application/application.go||server/application/application.go",
          "util/argo/argo.go||util/argo/argo.go",
          "util/settings/settings.go||util/settings/settings.go",
          "util/settings/settings_test.go||util/settings/settings_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go"
          ]
        }
      },
      "candidate_diff": {
        "controller/state.go||controller/state.go": [
          "File: controller/state.go -> controller/state.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:  if err != nil {",
          "160:   return nil, nil, err",
          "161:  }",
          "162:  ts.AddCheckpoint(\"build_options_ms\")",
          "163:  serverVersion, apiResources, err := m.liveStateCache.GetVersionsInfo(app.Spec.Destination.Server)",
          "164:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:  helmOptions, err := m.settingsMgr.GetHelmSettings()",
          "164:  if err != nil {",
          "165:   return nil, nil, err",
          "166:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   HelmRepoCreds:      permittedHelmCredentials,",
          "184:   TrackingMethod:     string(argo.GetTrackingMethod(m.settingsMgr)),",
          "185:   EnabledSourceTypes: enabledSourceTypes,",
          "186:  })",
          "187:  if err != nil {",
          "188:   return nil, nil, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:   HelmOptions:        helmOptions,",
          "",
          "---------------"
        ],
        "pkg/apis/api-rules/violation_exceptions.list||pkg/apis/api-rules/violation_exceptions.list": [
          "File: pkg/apis/api-rules/violation_exceptions.list -> pkg/apis/api-rules/violation_exceptions.list",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,Command,Args",
          "28: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,Command,Command",
          "29: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,ExecProviderConfig,Args",
          "30: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,HostInfo,ResourcesInfo",
          "31: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,JWTTokens,Items",
          "32: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,Operation,Info",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: API rule violation: list_type_missing,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,HelmOptions,ValuesFileSchemes",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,ApplicationSourceJsonnet,TLAs",
          "64: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,ClusterCacheInfo,APIsCount",
          "65: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,ConnectionState,ModifiedAt",
          "66: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,JWTToken,ExpiresAt",
          "67: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,JWTToken,IssuedAt",
          "68: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,KustomizeOptions,BinaryPath",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: API rule violation: names_match,github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1,HelmOptions,ValuesFileSchemes",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go": [
          "File: pkg/apis/application/v1alpha1/generated.pb.go -> pkg/apis/application/v1alpha1/generated.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101: var xxx_messageInfo_HelmFileParameter proto.InternalMessageInfo",
          "1103: func (m *HelmParameter) Reset()      { *m = HelmParameter{} }",
          "1104: func (*HelmParameter) ProtoMessage() {}",
          "1105: func (*HelmParameter) Descriptor() ([]byte, []int) {",
          "1107: }",
          "1108: func (m *HelmParameter) XXX_Unmarshal(b []byte) error {",
          "1109:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1106:  return fileDescriptor_030104ce3b95bcac, []int{38}",
          "",
          "[Added Lines]",
          "1103: func (m *HelmOptions) Reset()      { *m = HelmOptions{} }",
          "1104: func (*HelmOptions) ProtoMessage() {}",
          "1105: func (*HelmOptions) Descriptor() ([]byte, []int) {",
          "1106:  return fileDescriptor_030104ce3b95bcac, []int{38}",
          "1107: }",
          "1108: func (m *HelmOptions) XXX_Unmarshal(b []byte) error {",
          "1109:  return m.Unmarshal(b)",
          "1110: }",
          "1111: func (m *HelmOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {",
          "1112:  b = b[:cap(b)]",
          "1113:  n, err := m.MarshalToSizedBuffer(b)",
          "1114:  if err != nil {",
          "1115:   return nil, err",
          "1116:  }",
          "1117:  return b[:n], nil",
          "1118: }",
          "1119: func (m *HelmOptions) XXX_Merge(src proto.Message) {",
          "1120:  xxx_messageInfo_HelmOptions.Merge(m, src)",
          "1121: }",
          "1122: func (m *HelmOptions) XXX_Size() int {",
          "1123:  return m.Size()",
          "1124: }",
          "1125: func (m *HelmOptions) XXX_DiscardUnknown() {",
          "1126:  xxx_messageInfo_HelmOptions.DiscardUnknown(m)",
          "1127: }",
          "1129: var xxx_messageInfo_HelmOptions proto.InternalMessageInfo",
          "1134:  return fileDescriptor_030104ce3b95bcac, []int{39}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1131: func (m *HostInfo) Reset()      { *m = HostInfo{} }",
          "1132: func (*HostInfo) ProtoMessage() {}",
          "1133: func (*HostInfo) Descriptor() ([]byte, []int) {",
          "1135: }",
          "1136: func (m *HostInfo) XXX_Unmarshal(b []byte) error {",
          "1137:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1134:  return fileDescriptor_030104ce3b95bcac, []int{39}",
          "",
          "[Added Lines]",
          "1162:  return fileDescriptor_030104ce3b95bcac, []int{40}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1159: func (m *HostResourceInfo) Reset()      { *m = HostResourceInfo{} }",
          "1160: func (*HostResourceInfo) ProtoMessage() {}",
          "1161: func (*HostResourceInfo) Descriptor() ([]byte, []int) {",
          "1163: }",
          "1164: func (m *HostResourceInfo) XXX_Unmarshal(b []byte) error {",
          "1165:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1162:  return fileDescriptor_030104ce3b95bcac, []int{40}",
          "",
          "[Added Lines]",
          "1190:  return fileDescriptor_030104ce3b95bcac, []int{41}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1187: func (m *Info) Reset()      { *m = Info{} }",
          "1188: func (*Info) ProtoMessage() {}",
          "1189: func (*Info) Descriptor() ([]byte, []int) {",
          "1191: }",
          "1192: func (m *Info) XXX_Unmarshal(b []byte) error {",
          "1193:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1190:  return fileDescriptor_030104ce3b95bcac, []int{41}",
          "",
          "[Added Lines]",
          "1218:  return fileDescriptor_030104ce3b95bcac, []int{42}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1215: func (m *InfoItem) Reset()      { *m = InfoItem{} }",
          "1216: func (*InfoItem) ProtoMessage() {}",
          "1217: func (*InfoItem) Descriptor() ([]byte, []int) {",
          "1219: }",
          "1220: func (m *InfoItem) XXX_Unmarshal(b []byte) error {",
          "1221:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1218:  return fileDescriptor_030104ce3b95bcac, []int{42}",
          "",
          "[Added Lines]",
          "1246:  return fileDescriptor_030104ce3b95bcac, []int{43}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1243: func (m *JWTToken) Reset()      { *m = JWTToken{} }",
          "1244: func (*JWTToken) ProtoMessage() {}",
          "1245: func (*JWTToken) Descriptor() ([]byte, []int) {",
          "1247: }",
          "1248: func (m *JWTToken) XXX_Unmarshal(b []byte) error {",
          "1249:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1246:  return fileDescriptor_030104ce3b95bcac, []int{43}",
          "",
          "[Added Lines]",
          "1274:  return fileDescriptor_030104ce3b95bcac, []int{44}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1271: func (m *JWTTokens) Reset()      { *m = JWTTokens{} }",
          "1272: func (*JWTTokens) ProtoMessage() {}",
          "1273: func (*JWTTokens) Descriptor() ([]byte, []int) {",
          "1275: }",
          "1276: func (m *JWTTokens) XXX_Unmarshal(b []byte) error {",
          "1277:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1274:  return fileDescriptor_030104ce3b95bcac, []int{44}",
          "",
          "[Added Lines]",
          "1302:  return fileDescriptor_030104ce3b95bcac, []int{45}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1299: func (m *JsonnetVar) Reset()      { *m = JsonnetVar{} }",
          "1300: func (*JsonnetVar) ProtoMessage() {}",
          "1301: func (*JsonnetVar) Descriptor() ([]byte, []int) {",
          "1303: }",
          "1304: func (m *JsonnetVar) XXX_Unmarshal(b []byte) error {",
          "1305:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1302:  return fileDescriptor_030104ce3b95bcac, []int{45}",
          "",
          "[Added Lines]",
          "1330:  return fileDescriptor_030104ce3b95bcac, []int{46}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1327: func (m *KnownTypeField) Reset()      { *m = KnownTypeField{} }",
          "1328: func (*KnownTypeField) ProtoMessage() {}",
          "1329: func (*KnownTypeField) Descriptor() ([]byte, []int) {",
          "1331: }",
          "1332: func (m *KnownTypeField) XXX_Unmarshal(b []byte) error {",
          "1333:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1330:  return fileDescriptor_030104ce3b95bcac, []int{46}",
          "",
          "[Added Lines]",
          "1358:  return fileDescriptor_030104ce3b95bcac, []int{47}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1355: func (m *KsonnetParameter) Reset()      { *m = KsonnetParameter{} }",
          "1356: func (*KsonnetParameter) ProtoMessage() {}",
          "1357: func (*KsonnetParameter) Descriptor() ([]byte, []int) {",
          "1359: }",
          "1360: func (m *KsonnetParameter) XXX_Unmarshal(b []byte) error {",
          "1361:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1358:  return fileDescriptor_030104ce3b95bcac, []int{47}",
          "",
          "[Added Lines]",
          "1386:  return fileDescriptor_030104ce3b95bcac, []int{48}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1383: func (m *KustomizeOptions) Reset()      { *m = KustomizeOptions{} }",
          "1384: func (*KustomizeOptions) ProtoMessage() {}",
          "1385: func (*KustomizeOptions) Descriptor() ([]byte, []int) {",
          "1387: }",
          "1388: func (m *KustomizeOptions) XXX_Unmarshal(b []byte) error {",
          "1389:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1386:  return fileDescriptor_030104ce3b95bcac, []int{48}",
          "",
          "[Added Lines]",
          "1414:  return fileDescriptor_030104ce3b95bcac, []int{49}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1411: func (m *Operation) Reset()      { *m = Operation{} }",
          "1412: func (*Operation) ProtoMessage() {}",
          "1413: func (*Operation) Descriptor() ([]byte, []int) {",
          "1415: }",
          "1416: func (m *Operation) XXX_Unmarshal(b []byte) error {",
          "1417:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1414:  return fileDescriptor_030104ce3b95bcac, []int{49}",
          "",
          "[Added Lines]",
          "1442:  return fileDescriptor_030104ce3b95bcac, []int{50}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1439: func (m *OperationInitiator) Reset()      { *m = OperationInitiator{} }",
          "1440: func (*OperationInitiator) ProtoMessage() {}",
          "1441: func (*OperationInitiator) Descriptor() ([]byte, []int) {",
          "1443: }",
          "1444: func (m *OperationInitiator) XXX_Unmarshal(b []byte) error {",
          "1445:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1442:  return fileDescriptor_030104ce3b95bcac, []int{50}",
          "",
          "[Added Lines]",
          "1470:  return fileDescriptor_030104ce3b95bcac, []int{51}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1467: func (m *OperationState) Reset()      { *m = OperationState{} }",
          "1468: func (*OperationState) ProtoMessage() {}",
          "1469: func (*OperationState) Descriptor() ([]byte, []int) {",
          "1471: }",
          "1472: func (m *OperationState) XXX_Unmarshal(b []byte) error {",
          "1473:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1470:  return fileDescriptor_030104ce3b95bcac, []int{51}",
          "",
          "[Added Lines]",
          "1498:  return fileDescriptor_030104ce3b95bcac, []int{52}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1495: func (m *OrphanedResourceKey) Reset()      { *m = OrphanedResourceKey{} }",
          "1496: func (*OrphanedResourceKey) ProtoMessage() {}",
          "1497: func (*OrphanedResourceKey) Descriptor() ([]byte, []int) {",
          "1499: }",
          "1500: func (m *OrphanedResourceKey) XXX_Unmarshal(b []byte) error {",
          "1501:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1498:  return fileDescriptor_030104ce3b95bcac, []int{52}",
          "",
          "[Added Lines]",
          "1526:  return fileDescriptor_030104ce3b95bcac, []int{53}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1523: func (m *OrphanedResourcesMonitorSettings) Reset()      { *m = OrphanedResourcesMonitorSettings{} }",
          "1524: func (*OrphanedResourcesMonitorSettings) ProtoMessage() {}",
          "1525: func (*OrphanedResourcesMonitorSettings) Descriptor() ([]byte, []int) {",
          "1527: }",
          "1528: func (m *OrphanedResourcesMonitorSettings) XXX_Unmarshal(b []byte) error {",
          "1529:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1526:  return fileDescriptor_030104ce3b95bcac, []int{53}",
          "",
          "[Added Lines]",
          "1554:  return fileDescriptor_030104ce3b95bcac, []int{54}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1551: func (m *OverrideIgnoreDiff) Reset()      { *m = OverrideIgnoreDiff{} }",
          "1552: func (*OverrideIgnoreDiff) ProtoMessage() {}",
          "1553: func (*OverrideIgnoreDiff) Descriptor() ([]byte, []int) {",
          "1555: }",
          "1556: func (m *OverrideIgnoreDiff) XXX_Unmarshal(b []byte) error {",
          "1557:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1554:  return fileDescriptor_030104ce3b95bcac, []int{54}",
          "",
          "[Added Lines]",
          "1582:  return fileDescriptor_030104ce3b95bcac, []int{55}",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1579: func (m *ProjectRole) Reset()      { *m = ProjectRole{} }",
          "1580: func (*ProjectRole) ProtoMessage() {}",
          "1581: func (*ProjectRole) Descriptor() ([]byte, []int) {",
          "1583: }",
          "1584: func (m *ProjectRole) XXX_Unmarshal(b []byte) error {",
          "1585:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1582:  return fileDescriptor_030104ce3b95bcac, []int{55}",
          "",
          "[Added Lines]",
          "1610:  return fileDescriptor_030104ce3b95bcac, []int{56}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1607: func (m *RepoCreds) Reset()      { *m = RepoCreds{} }",
          "1608: func (*RepoCreds) ProtoMessage() {}",
          "1609: func (*RepoCreds) Descriptor() ([]byte, []int) {",
          "1611: }",
          "1612: func (m *RepoCreds) XXX_Unmarshal(b []byte) error {",
          "1613:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1610:  return fileDescriptor_030104ce3b95bcac, []int{56}",
          "",
          "[Added Lines]",
          "1638:  return fileDescriptor_030104ce3b95bcac, []int{57}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1635: func (m *RepoCredsList) Reset()      { *m = RepoCredsList{} }",
          "1636: func (*RepoCredsList) ProtoMessage() {}",
          "1637: func (*RepoCredsList) Descriptor() ([]byte, []int) {",
          "1639: }",
          "1640: func (m *RepoCredsList) XXX_Unmarshal(b []byte) error {",
          "1641:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1638:  return fileDescriptor_030104ce3b95bcac, []int{57}",
          "",
          "[Added Lines]",
          "1666:  return fileDescriptor_030104ce3b95bcac, []int{58}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1663: func (m *Repository) Reset()      { *m = Repository{} }",
          "1664: func (*Repository) ProtoMessage() {}",
          "1665: func (*Repository) Descriptor() ([]byte, []int) {",
          "1667: }",
          "1668: func (m *Repository) XXX_Unmarshal(b []byte) error {",
          "1669:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1666:  return fileDescriptor_030104ce3b95bcac, []int{58}",
          "",
          "[Added Lines]",
          "1694:  return fileDescriptor_030104ce3b95bcac, []int{59}",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1691: func (m *RepositoryCertificate) Reset()      { *m = RepositoryCertificate{} }",
          "1692: func (*RepositoryCertificate) ProtoMessage() {}",
          "1693: func (*RepositoryCertificate) Descriptor() ([]byte, []int) {",
          "1695: }",
          "1696: func (m *RepositoryCertificate) XXX_Unmarshal(b []byte) error {",
          "1697:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1694:  return fileDescriptor_030104ce3b95bcac, []int{59}",
          "",
          "[Added Lines]",
          "1722:  return fileDescriptor_030104ce3b95bcac, []int{60}",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1719: func (m *RepositoryCertificateList) Reset()      { *m = RepositoryCertificateList{} }",
          "1720: func (*RepositoryCertificateList) ProtoMessage() {}",
          "1721: func (*RepositoryCertificateList) Descriptor() ([]byte, []int) {",
          "1723: }",
          "1724: func (m *RepositoryCertificateList) XXX_Unmarshal(b []byte) error {",
          "1725:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1722:  return fileDescriptor_030104ce3b95bcac, []int{60}",
          "",
          "[Added Lines]",
          "1750:  return fileDescriptor_030104ce3b95bcac, []int{61}",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1747: func (m *RepositoryList) Reset()      { *m = RepositoryList{} }",
          "1748: func (*RepositoryList) ProtoMessage() {}",
          "1749: func (*RepositoryList) Descriptor() ([]byte, []int) {",
          "1751: }",
          "1752: func (m *RepositoryList) XXX_Unmarshal(b []byte) error {",
          "1753:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1750:  return fileDescriptor_030104ce3b95bcac, []int{61}",
          "",
          "[Added Lines]",
          "1778:  return fileDescriptor_030104ce3b95bcac, []int{62}",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1775: func (m *ResourceAction) Reset()      { *m = ResourceAction{} }",
          "1776: func (*ResourceAction) ProtoMessage() {}",
          "1777: func (*ResourceAction) Descriptor() ([]byte, []int) {",
          "1779: }",
          "1780: func (m *ResourceAction) XXX_Unmarshal(b []byte) error {",
          "1781:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1778:  return fileDescriptor_030104ce3b95bcac, []int{62}",
          "",
          "[Added Lines]",
          "1806:  return fileDescriptor_030104ce3b95bcac, []int{63}",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1803: func (m *ResourceActionDefinition) Reset()      { *m = ResourceActionDefinition{} }",
          "1804: func (*ResourceActionDefinition) ProtoMessage() {}",
          "1805: func (*ResourceActionDefinition) Descriptor() ([]byte, []int) {",
          "1807: }",
          "1808: func (m *ResourceActionDefinition) XXX_Unmarshal(b []byte) error {",
          "1809:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1806:  return fileDescriptor_030104ce3b95bcac, []int{63}",
          "",
          "[Added Lines]",
          "1834:  return fileDescriptor_030104ce3b95bcac, []int{64}",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1831: func (m *ResourceActionParam) Reset()      { *m = ResourceActionParam{} }",
          "1832: func (*ResourceActionParam) ProtoMessage() {}",
          "1833: func (*ResourceActionParam) Descriptor() ([]byte, []int) {",
          "1835: }",
          "1836: func (m *ResourceActionParam) XXX_Unmarshal(b []byte) error {",
          "1837:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1834:  return fileDescriptor_030104ce3b95bcac, []int{64}",
          "",
          "[Added Lines]",
          "1862:  return fileDescriptor_030104ce3b95bcac, []int{65}",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1859: func (m *ResourceActions) Reset()      { *m = ResourceActions{} }",
          "1860: func (*ResourceActions) ProtoMessage() {}",
          "1861: func (*ResourceActions) Descriptor() ([]byte, []int) {",
          "1863: }",
          "1864: func (m *ResourceActions) XXX_Unmarshal(b []byte) error {",
          "1865:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1862:  return fileDescriptor_030104ce3b95bcac, []int{65}",
          "",
          "[Added Lines]",
          "1890:  return fileDescriptor_030104ce3b95bcac, []int{66}",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1887: func (m *ResourceDiff) Reset()      { *m = ResourceDiff{} }",
          "1888: func (*ResourceDiff) ProtoMessage() {}",
          "1889: func (*ResourceDiff) Descriptor() ([]byte, []int) {",
          "1891: }",
          "1892: func (m *ResourceDiff) XXX_Unmarshal(b []byte) error {",
          "1893:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1890:  return fileDescriptor_030104ce3b95bcac, []int{66}",
          "",
          "[Added Lines]",
          "1918:  return fileDescriptor_030104ce3b95bcac, []int{67}",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1915: func (m *ResourceIgnoreDifferences) Reset()      { *m = ResourceIgnoreDifferences{} }",
          "1916: func (*ResourceIgnoreDifferences) ProtoMessage() {}",
          "1917: func (*ResourceIgnoreDifferences) Descriptor() ([]byte, []int) {",
          "1919: }",
          "1920: func (m *ResourceIgnoreDifferences) XXX_Unmarshal(b []byte) error {",
          "1921:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1918:  return fileDescriptor_030104ce3b95bcac, []int{67}",
          "",
          "[Added Lines]",
          "1946:  return fileDescriptor_030104ce3b95bcac, []int{68}",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1943: func (m *ResourceNetworkingInfo) Reset()      { *m = ResourceNetworkingInfo{} }",
          "1944: func (*ResourceNetworkingInfo) ProtoMessage() {}",
          "1945: func (*ResourceNetworkingInfo) Descriptor() ([]byte, []int) {",
          "1947: }",
          "1948: func (m *ResourceNetworkingInfo) XXX_Unmarshal(b []byte) error {",
          "1949:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1946:  return fileDescriptor_030104ce3b95bcac, []int{68}",
          "",
          "[Added Lines]",
          "1974:  return fileDescriptor_030104ce3b95bcac, []int{69}",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1971: func (m *ResourceNode) Reset()      { *m = ResourceNode{} }",
          "1972: func (*ResourceNode) ProtoMessage() {}",
          "1973: func (*ResourceNode) Descriptor() ([]byte, []int) {",
          "1975: }",
          "1976: func (m *ResourceNode) XXX_Unmarshal(b []byte) error {",
          "1977:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "1974:  return fileDescriptor_030104ce3b95bcac, []int{69}",
          "",
          "[Added Lines]",
          "2002:  return fileDescriptor_030104ce3b95bcac, []int{70}",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1999: func (m *ResourceOverride) Reset()      { *m = ResourceOverride{} }",
          "2000: func (*ResourceOverride) ProtoMessage() {}",
          "2001: func (*ResourceOverride) Descriptor() ([]byte, []int) {",
          "2003: }",
          "2004: func (m *ResourceOverride) XXX_Unmarshal(b []byte) error {",
          "2005:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2002:  return fileDescriptor_030104ce3b95bcac, []int{70}",
          "",
          "[Added Lines]",
          "2030:  return fileDescriptor_030104ce3b95bcac, []int{71}",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2027: func (m *ResourceRef) Reset()      { *m = ResourceRef{} }",
          "2028: func (*ResourceRef) ProtoMessage() {}",
          "2029: func (*ResourceRef) Descriptor() ([]byte, []int) {",
          "2031: }",
          "2032: func (m *ResourceRef) XXX_Unmarshal(b []byte) error {",
          "2033:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2030:  return fileDescriptor_030104ce3b95bcac, []int{71}",
          "",
          "[Added Lines]",
          "2058:  return fileDescriptor_030104ce3b95bcac, []int{72}",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2055: func (m *ResourceResult) Reset()      { *m = ResourceResult{} }",
          "2056: func (*ResourceResult) ProtoMessage() {}",
          "2057: func (*ResourceResult) Descriptor() ([]byte, []int) {",
          "2059: }",
          "2060: func (m *ResourceResult) XXX_Unmarshal(b []byte) error {",
          "2061:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2058:  return fileDescriptor_030104ce3b95bcac, []int{72}",
          "",
          "[Added Lines]",
          "2086:  return fileDescriptor_030104ce3b95bcac, []int{73}",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2083: func (m *ResourceStatus) Reset()      { *m = ResourceStatus{} }",
          "2084: func (*ResourceStatus) ProtoMessage() {}",
          "2085: func (*ResourceStatus) Descriptor() ([]byte, []int) {",
          "2087: }",
          "2088: func (m *ResourceStatus) XXX_Unmarshal(b []byte) error {",
          "2089:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2086:  return fileDescriptor_030104ce3b95bcac, []int{73}",
          "",
          "[Added Lines]",
          "2114:  return fileDescriptor_030104ce3b95bcac, []int{74}",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2111: func (m *RetryStrategy) Reset()      { *m = RetryStrategy{} }",
          "2112: func (*RetryStrategy) ProtoMessage() {}",
          "2113: func (*RetryStrategy) Descriptor() ([]byte, []int) {",
          "2115: }",
          "2116: func (m *RetryStrategy) XXX_Unmarshal(b []byte) error {",
          "2117:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2114:  return fileDescriptor_030104ce3b95bcac, []int{74}",
          "",
          "[Added Lines]",
          "2142:  return fileDescriptor_030104ce3b95bcac, []int{75}",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2139: func (m *RevisionHistory) Reset()      { *m = RevisionHistory{} }",
          "2140: func (*RevisionHistory) ProtoMessage() {}",
          "2141: func (*RevisionHistory) Descriptor() ([]byte, []int) {",
          "2143: }",
          "2144: func (m *RevisionHistory) XXX_Unmarshal(b []byte) error {",
          "2145:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2142:  return fileDescriptor_030104ce3b95bcac, []int{75}",
          "",
          "[Added Lines]",
          "2170:  return fileDescriptor_030104ce3b95bcac, []int{76}",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2167: func (m *RevisionMetadata) Reset()      { *m = RevisionMetadata{} }",
          "2168: func (*RevisionMetadata) ProtoMessage() {}",
          "2169: func (*RevisionMetadata) Descriptor() ([]byte, []int) {",
          "2171: }",
          "2172: func (m *RevisionMetadata) XXX_Unmarshal(b []byte) error {",
          "2173:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2170:  return fileDescriptor_030104ce3b95bcac, []int{76}",
          "",
          "[Added Lines]",
          "2198:  return fileDescriptor_030104ce3b95bcac, []int{77}",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2195: func (m *SignatureKey) Reset()      { *m = SignatureKey{} }",
          "2196: func (*SignatureKey) ProtoMessage() {}",
          "2197: func (*SignatureKey) Descriptor() ([]byte, []int) {",
          "2199: }",
          "2200: func (m *SignatureKey) XXX_Unmarshal(b []byte) error {",
          "2201:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2198:  return fileDescriptor_030104ce3b95bcac, []int{77}",
          "",
          "[Added Lines]",
          "2226:  return fileDescriptor_030104ce3b95bcac, []int{78}",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2223: func (m *SyncOperation) Reset()      { *m = SyncOperation{} }",
          "2224: func (*SyncOperation) ProtoMessage() {}",
          "2225: func (*SyncOperation) Descriptor() ([]byte, []int) {",
          "2227: }",
          "2228: func (m *SyncOperation) XXX_Unmarshal(b []byte) error {",
          "2229:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2226:  return fileDescriptor_030104ce3b95bcac, []int{78}",
          "",
          "[Added Lines]",
          "2254:  return fileDescriptor_030104ce3b95bcac, []int{79}",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2251: func (m *SyncOperationResource) Reset()      { *m = SyncOperationResource{} }",
          "2252: func (*SyncOperationResource) ProtoMessage() {}",
          "2253: func (*SyncOperationResource) Descriptor() ([]byte, []int) {",
          "2255: }",
          "2256: func (m *SyncOperationResource) XXX_Unmarshal(b []byte) error {",
          "2257:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2254:  return fileDescriptor_030104ce3b95bcac, []int{79}",
          "",
          "[Added Lines]",
          "2282:  return fileDescriptor_030104ce3b95bcac, []int{80}",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2279: func (m *SyncOperationResult) Reset()      { *m = SyncOperationResult{} }",
          "2280: func (*SyncOperationResult) ProtoMessage() {}",
          "2281: func (*SyncOperationResult) Descriptor() ([]byte, []int) {",
          "2283: }",
          "2284: func (m *SyncOperationResult) XXX_Unmarshal(b []byte) error {",
          "2285:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2282:  return fileDescriptor_030104ce3b95bcac, []int{80}",
          "",
          "[Added Lines]",
          "2310:  return fileDescriptor_030104ce3b95bcac, []int{81}",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2307: func (m *SyncPolicy) Reset()      { *m = SyncPolicy{} }",
          "2308: func (*SyncPolicy) ProtoMessage() {}",
          "2309: func (*SyncPolicy) Descriptor() ([]byte, []int) {",
          "2311: }",
          "2312: func (m *SyncPolicy) XXX_Unmarshal(b []byte) error {",
          "2313:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2310:  return fileDescriptor_030104ce3b95bcac, []int{81}",
          "",
          "[Added Lines]",
          "2338:  return fileDescriptor_030104ce3b95bcac, []int{82}",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2335: func (m *SyncPolicyAutomated) Reset()      { *m = SyncPolicyAutomated{} }",
          "2336: func (*SyncPolicyAutomated) ProtoMessage() {}",
          "2337: func (*SyncPolicyAutomated) Descriptor() ([]byte, []int) {",
          "2339: }",
          "2340: func (m *SyncPolicyAutomated) XXX_Unmarshal(b []byte) error {",
          "2341:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2338:  return fileDescriptor_030104ce3b95bcac, []int{82}",
          "",
          "[Added Lines]",
          "2366:  return fileDescriptor_030104ce3b95bcac, []int{83}",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2363: func (m *SyncStatus) Reset()      { *m = SyncStatus{} }",
          "2364: func (*SyncStatus) ProtoMessage() {}",
          "2365: func (*SyncStatus) Descriptor() ([]byte, []int) {",
          "2367: }",
          "2368: func (m *SyncStatus) XXX_Unmarshal(b []byte) error {",
          "2369:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2366:  return fileDescriptor_030104ce3b95bcac, []int{83}",
          "",
          "[Added Lines]",
          "2394:  return fileDescriptor_030104ce3b95bcac, []int{84}",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2391: func (m *SyncStrategy) Reset()      { *m = SyncStrategy{} }",
          "2392: func (*SyncStrategy) ProtoMessage() {}",
          "2393: func (*SyncStrategy) Descriptor() ([]byte, []int) {",
          "2395: }",
          "2396: func (m *SyncStrategy) XXX_Unmarshal(b []byte) error {",
          "2397:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2394:  return fileDescriptor_030104ce3b95bcac, []int{84}",
          "",
          "[Added Lines]",
          "2422:  return fileDescriptor_030104ce3b95bcac, []int{85}",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2419: func (m *SyncStrategyApply) Reset()      { *m = SyncStrategyApply{} }",
          "2420: func (*SyncStrategyApply) ProtoMessage() {}",
          "2421: func (*SyncStrategyApply) Descriptor() ([]byte, []int) {",
          "2423: }",
          "2424: func (m *SyncStrategyApply) XXX_Unmarshal(b []byte) error {",
          "2425:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2422:  return fileDescriptor_030104ce3b95bcac, []int{85}",
          "",
          "[Added Lines]",
          "2450:  return fileDescriptor_030104ce3b95bcac, []int{86}",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2447: func (m *SyncStrategyHook) Reset()      { *m = SyncStrategyHook{} }",
          "2448: func (*SyncStrategyHook) ProtoMessage() {}",
          "2449: func (*SyncStrategyHook) Descriptor() ([]byte, []int) {",
          "2451: }",
          "2452: func (m *SyncStrategyHook) XXX_Unmarshal(b []byte) error {",
          "2453:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2450:  return fileDescriptor_030104ce3b95bcac, []int{86}",
          "",
          "[Added Lines]",
          "2478:  return fileDescriptor_030104ce3b95bcac, []int{87}",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2475: func (m *SyncWindow) Reset()      { *m = SyncWindow{} }",
          "2476: func (*SyncWindow) ProtoMessage() {}",
          "2477: func (*SyncWindow) Descriptor() ([]byte, []int) {",
          "2479: }",
          "2480: func (m *SyncWindow) XXX_Unmarshal(b []byte) error {",
          "2481:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2478:  return fileDescriptor_030104ce3b95bcac, []int{87}",
          "",
          "[Added Lines]",
          "2506:  return fileDescriptor_030104ce3b95bcac, []int{88}",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2503: func (m *TLSClientConfig) Reset()      { *m = TLSClientConfig{} }",
          "2504: func (*TLSClientConfig) ProtoMessage() {}",
          "2505: func (*TLSClientConfig) Descriptor() ([]byte, []int) {",
          "2507: }",
          "2508: func (m *TLSClientConfig) XXX_Unmarshal(b []byte) error {",
          "2509:  return m.Unmarshal(b)",
          "",
          "[Removed Lines]",
          "2506:  return fileDescriptor_030104ce3b95bcac, []int{88}",
          "",
          "[Added Lines]",
          "2534:  return fileDescriptor_030104ce3b95bcac, []int{89}",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2573:  proto.RegisterType((*GnuPGPublicKeyList)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKeyList\")",
          "2574:  proto.RegisterType((*HealthStatus)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HealthStatus\")",
          "2575:  proto.RegisterType((*HelmFileParameter)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HelmFileParameter\")",
          "2576:  proto.RegisterType((*HelmParameter)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HelmParameter\")",
          "2577:  proto.RegisterType((*HostInfo)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HostInfo\")",
          "2578:  proto.RegisterType((*HostResourceInfo)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HostResourceInfo\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2604:  proto.RegisterType((*HelmOptions)(nil), \"github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HelmOptions\")",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2633: }",
          "2635: var fileDescriptor_030104ce3b95bcac = []byte{",
          "2650:  0x7e, 0xce, 0xaf, 0xcf, 0xef, 0x9c, 0x9f, 0xef, 0x6c, 0x37, 0xe7, 0x39, 0xb7, 0x79, 0x8b, 0xdb,",
          "2651:  0x7c, 0xca, 0xed, 0xcc, 0x5b, 0x2d, 0x5d, 0x9a, 0x51, 0x33, 0x5a, 0x10, 0x4c, 0x37, 0xbb, 0x0d,",
          "3066: }",
          "3068: func (m *AWSAuthConfig) Marshal() (dAtA []byte, err error) {",
          "",
          "[Removed Lines]",
          "2637:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3d, 0x5b, 0x8c, 0x24, 0xc9,",
          "2638:  0x51, 0x57, 0xdd, 0xf3, 0xe8, 0x8e, 0x79, 0xec, 0x4e, 0xee, 0xe3, 0xc6, 0xcb, 0x79, 0x67, 0x55,",
          "2639:  0x27, 0xdb, 0x07, 0xb6, 0x67, 0xb8, 0xe5, 0x30, 0x87, 0xcf, 0x9c, 0x99, 0x9e, 0xd9, 0xc7, 0xec,",
          "2640:  0xce, 0xee, 0xce, 0xc5, 0xcc, 0xee, 0xe2, 0xb3, 0x31, 0x57, 0x53, 0x9d, 0xdd, 0x53, 0x3b, 0xdd,",
          "2641:  0x55, 0x7d, 0x95, 0xd5, 0xb3, 0xd3, 0x36, 0x7e, 0x21, 0x83, 0x4f, 0xf8, 0x29, 0x9b, 0x0f, 0x5b,",
          "2642:  0x42, 0x60, 0x1e, 0x42, 0xe2, 0xc3, 0x02, 0xbe, 0x00, 0x21, 0x3e, 0xf0, 0x97, 0x11, 0x1f, 0x58,",
          "2643:  0x02, 0xd9, 0x06, 0x8b, 0xc1, 0x5e, 0x40, 0x06, 0x24, 0x40, 0x80, 0x7f, 0x58, 0xf1, 0x81, 0xf2,",
          "2644:  0x51, 0x99, 0x59, 0xd5, 0xdd, 0x3b, 0x33, 0x3b, 0xb5, 0x6b, 0xcb, 0xe2, 0xaf, 0x2b, 0x22, 0x32,",
          "2645:  0x22, 0xf2, 0x15, 0x19, 0x19, 0x19, 0x99, 0x0d, 0xab, 0xcd, 0x20, 0xd9, 0xea, 0x6e, 0xce, 0xfb,",
          "2646:  0x51, 0x7b, 0xc1, 0x8b, 0x9b, 0x51, 0x27, 0x8e, 0xee, 0x88, 0x1f, 0x6f, 0xf5, 0xeb, 0x0b, 0x3b,",
          "2647:  0xe7, 0x17, 0x3a, 0xdb, 0xcd, 0x05, 0xaf, 0x13, 0xb0, 0x05, 0xaf, 0xd3, 0x69, 0x05, 0xbe, 0x97,",
          "2648:  0x04, 0x51, 0xb8, 0xb0, 0xf3, 0xac, 0xd7, 0xea, 0x6c, 0x79, 0xcf, 0x2e, 0x34, 0x69, 0x48, 0x63,",
          "2649:  0x2f, 0xa1, 0xf5, 0xf9, 0x4e, 0x1c, 0x25, 0x11, 0x79, 0x87, 0xe1, 0x36, 0x9f, 0x72, 0x13, 0x3f,",
          "2652:  0xf1, 0x25, 0x3e, 0xc4, 0x2f, 0x29, 0xec, 0x8c, 0xbb, 0xfd, 0x3c, 0x9b, 0x0f, 0x22, 0xae, 0xde,",
          "2653:  0x82, 0x1f, 0xc5, 0x74, 0x61, 0xa7, 0x4f, 0xa1, 0x33, 0xcf, 0x19, 0x9a, 0xb6, 0xe7, 0x6f, 0x05,",
          "2654:  0x21, 0x8d, 0x7b, 0xa6, 0x4e, 0x6d, 0x9a, 0x78, 0x83, 0x4a, 0x2d, 0x0c, 0x2b, 0x15, 0x77, 0xc3,",
          "2655:  0x24, 0x68, 0xd3, 0xbe, 0x02, 0x6f, 0xdb, 0xaf, 0x00, 0xf3, 0xb7, 0x68, 0xdb, 0xcb, 0x97, 0x73,",
          "2656:  0x5f, 0x85, 0xa9, 0xc5, 0xdb, 0xeb, 0x8b, 0xdd, 0x64, 0x6b, 0x29, 0x0a, 0x1b, 0x41, 0x93, 0xfc,",
          "2657:  0x38, 0x4c, 0xf8, 0xad, 0x2e, 0x4b, 0x68, 0x7c, 0xdd, 0x6b, 0xd3, 0x59, 0xe7, 0x9c, 0xf3, 0x4c,",
          "2658:  0xb5, 0x76, 0xe2, 0x2b, 0x7b, 0x73, 0x4f, 0xdc, 0xdb, 0x9b, 0x9b, 0x58, 0x32, 0x28, 0xb4, 0xe9,",
          "2659:  0xc8, 0x0f, 0xc3, 0x78, 0x1c, 0xb5, 0xe8, 0x22, 0x5e, 0x9f, 0x2d, 0x89, 0x22, 0xc7, 0x54, 0x91,",
          "2660:  0x71, 0x94, 0x60, 0x4c, 0xf1, 0xee, 0xd7, 0x4a, 0x00, 0x8b, 0x9d, 0xce, 0x5a, 0x1c, 0xdd, 0xa1,",
          "2661:  0x7e, 0x42, 0x5e, 0x81, 0x0a, 0x6f, 0x85, 0xba, 0x97, 0x78, 0x42, 0xda, 0xc4, 0xf9, 0x1f, 0x9d,",
          "2662:  0x97, 0x95, 0x99, 0xb7, 0x2b, 0x63, 0x7a, 0x8e, 0x53, 0xcf, 0xef, 0x3c, 0x3b, 0x7f, 0x63, 0x93,",
          "2663:  0x97, 0xbf, 0x46, 0x13, 0xaf, 0x46, 0x94, 0x30, 0x30, 0x30, 0xd4, 0x5c, 0x49, 0x08, 0x23, 0xac,",
          "2664:  0x43, 0x7d, 0xa1, 0xd8, 0xc4, 0xf9, 0xd5, 0xf9, 0xa3, 0x0c, 0x91, 0x79, 0xa3, 0xf9, 0x7a, 0x87,",
          "2665:  0xfa, 0xb5, 0x49, 0x25, 0x79, 0x84, 0x7f, 0xa1, 0x90, 0x43, 0x76, 0x60, 0x8c, 0x25, 0x5e, 0xd2,",
          "2666:  0x65, 0xb3, 0x65, 0x21, 0xf1, 0x7a, 0x61, 0x12, 0x05, 0xd7, 0xda, 0xb4, 0x92, 0x39, 0x26, 0xbf,",
          "2667:  0x51, 0x49, 0x73, 0xff, 0xce, 0x81, 0x69, 0x43, 0xbc, 0x1a, 0xb0, 0x84, 0xbc, 0xa7, 0xaf, 0x71,",
          "2668:  0xe7, 0x0f, 0xd6, 0xb8, 0xbc, 0xb4, 0x68, 0xda, 0xe3, 0x4a, 0x58, 0x25, 0x85, 0x58, 0x0d, 0xdb,",
          "2669:  0x86, 0xd1, 0x20, 0xa1, 0x6d, 0x36, 0x5b, 0x3a, 0x57, 0x7e, 0x66, 0xe2, 0xfc, 0xe5, 0xa2, 0xea,",
          "2670:  0x59, 0x9b, 0x52, 0x42, 0x47, 0x57, 0x38, 0x7b, 0x94, 0x52, 0xdc, 0xef, 0x82, 0x5d, 0x3f, 0xde,",
          "2671:  0xe0, 0xe4, 0x59, 0x98, 0x60, 0x51, 0x37, 0xf6, 0x29, 0xd2, 0x4e, 0xc4, 0x66, 0x9d, 0x73, 0x65,",
          "2672:  0x3e, 0xf4, 0xf8, 0x48, 0x5d, 0x37, 0x60, 0xb4, 0x69, 0xc8, 0xa7, 0x1c, 0x98, 0xac, 0x53, 0x96,",
          "2673:  0x04, 0xa1, 0x90, 0x9f, 0x2a, 0xbf, 0x71, 0x64, 0xe5, 0x53, 0xe0, 0xb2, 0x61, 0x5e, 0x3b, 0xa9,",
          "2674:  0x2a, 0x32, 0x69, 0x01, 0x19, 0x66, 0xe4, 0xf3, 0x19, 0x57, 0xa7, 0xcc, 0x8f, 0x83, 0x0e, 0xff,",
          "2675:  0x16, 0x63, 0xc6, 0x9a, 0x71, 0xcb, 0x06, 0x85, 0x36, 0x1d, 0x09, 0x61, 0x94, 0xcf, 0x28, 0x36,",
          "2676:  0x3b, 0x22, 0xf4, 0x5f, 0x39, 0x9a, 0xfe, 0xaa, 0x51, 0xf9, 0x64, 0x35, 0xad, 0xcf, 0xbf, 0x18,",
          "2677:  0x4a, 0x31, 0xe4, 0x93, 0x0e, 0xcc, 0xaa, 0x19, 0x8f, 0x54, 0x36, 0xe8, 0xed, 0xad, 0x20, 0xa1,",
          "2678:  0xad, 0x80, 0x25, 0xb3, 0xa3, 0x42, 0x87, 0x85, 0x83, 0x8d, 0xad, 0x4b, 0x71, 0xd4, 0xed, 0x5c,",
          "2679:  0x0d, 0xc2, 0x7a, 0xed, 0x9c, 0x92, 0x34, 0xbb, 0x34, 0x84, 0x31, 0x0e, 0x15, 0x49, 0x3e, 0xe7,",
          "2680:  0xc0, 0x99, 0xd0, 0x6b, 0x53, 0xd6, 0xf1, 0x78, 0xd7, 0x4a, 0x74, 0xad, 0xe5, 0xf9, 0xdb, 0x42,",
          "2681:  0xa3, 0xb1, 0x87, 0xd3, 0xc8, 0x55, 0x1a, 0x9d, 0xb9, 0x3e, 0x94, 0x35, 0x3e, 0x40, 0x2c, 0xf9,",
          "2682:  0x2d, 0x07, 0x66, 0xa2, 0xb8, 0xb3, 0xe5, 0x85, 0xb4, 0x9e, 0x62, 0xd9, 0xec, 0xb8, 0x98, 0x7a,",
          "2683:  0xef, 0x3d, 0x5a, 0x17, 0xdd, 0xc8, 0xb3, 0xbd, 0x16, 0x85, 0x41, 0x12, 0xc5, 0xeb, 0x34, 0x49,",
          "2684:  0x82, 0xb0, 0xc9, 0x6a, 0xa7, 0xee, 0xed, 0xcd, 0xcd, 0xf4, 0x51, 0x61, 0xbf, 0x3e, 0xe4, 0xfd,",
          "2685:  0x30, 0xc1, 0x7a, 0xa1, 0x7f, 0x3b, 0x08, 0xeb, 0xd1, 0x5d, 0x36, 0x5b, 0x29, 0x62, 0xfa, 0xae,",
          "2686:  0x6b, 0x86, 0x6a, 0x02, 0x1a, 0x01, 0x68, 0x4b, 0x1b, 0xdc, 0x71, 0x66, 0x28, 0x55, 0x8b, 0xee,",
          "2687:  0x38, 0x33, 0x98, 0x1e, 0x20, 0x96, 0x7c, 0xcc, 0x81, 0x29, 0x16, 0x34, 0x43, 0x2f, 0xe9, 0xc6,",
          "2688:  0xf4, 0x2a, 0xed, 0xb1, 0x59, 0x10, 0x8a, 0x5c, 0x39, 0x62, 0xab, 0x58, 0x2c, 0x6b, 0xa7, 0x94,",
          "2689:  0x8e, 0x53, 0x36, 0x94, 0x61, 0x56, 0xee, 0xa0, 0x89, 0x66, 0x86, 0xf5, 0x44, 0xb1, 0x13, 0xcd,",
          "2690:  0x0c, 0xea, 0xa1, 0x22, 0xdd, 0x3f, 0x2f, 0xc1, 0xf1, 0xfc, 0x1a, 0x44, 0x7e, 0xc7, 0x81, 0x63,",
          "2691:  0x77, 0xee, 0x26, 0x1b, 0xd1, 0x36, 0x0d, 0x59, 0xad, 0xc7, 0x2d, 0x85, 0xb0, 0xbe, 0x13, 0xe7,",
          "2692:  0xfd, 0x62, 0x57, 0xbb, 0xf9, 0x2b, 0x59, 0x29, 0x17, 0xc2, 0x24, 0xee, 0xd5, 0x9e, 0x54, 0xf5,",
          "2693:  0x39, 0x76, 0xe5, 0xf6, 0x86, 0x8d, 0xc5, 0xbc, 0x52, 0x67, 0x3e, 0xee, 0xc0, 0xc9, 0x41, 0x2c,",
          "2694:  0xc8, 0x71, 0x28, 0x6f, 0xd3, 0x9e, 0x74, 0x70, 0x90, 0xff, 0x24, 0x3f, 0x0b, 0xa3, 0x3b, 0x5e,",
          "2695:  0xab, 0x4b, 0x95, 0xa3, 0x70, 0xe9, 0x68, 0x15, 0xd1, 0x9a, 0xa1, 0xe4, 0xfa, 0xf6, 0xd2, 0xf3,",
          "2696:  0x8e, 0xfb, 0x97, 0x65, 0x98, 0xb0, 0x96, 0x8a, 0xc7, 0xe0, 0xfc, 0x44, 0x19, 0xe7, 0xe7, 0x5a,",
          "2697:  0x61, 0xab, 0xdc, 0x50, 0xef, 0xe7, 0x6e, 0xce, 0xfb, 0xb9, 0x51, 0x9c, 0xc8, 0x07, 0xba, 0x3f,",
          "2698:  0x24, 0x81, 0x6a, 0xd4, 0xe1, 0xce, 0x2d, 0x5f, 0x45, 0x47, 0x8a, 0xe8, 0xc2, 0x1b, 0x29, 0xbb,",
          "2699:  0xda, 0xd4, 0xbd, 0xbd, 0xb9, 0xaa, 0xfe, 0x44, 0x23, 0xc8, 0xfd, 0xba, 0x03, 0x27, 0x2d, 0x1d,",
          "2700:  0x97, 0xa2, 0xb0, 0x1e, 0x88, 0xae, 0x3d, 0x07, 0x23, 0x49, 0xaf, 0x93, 0x7a, 0xd0, 0xba, 0xa5,",
          "2701:  0x36, 0x7a, 0x1d, 0x8a, 0x02, 0xc3, 0x7d, 0xe6, 0x36, 0x65, 0xcc, 0x6b, 0xd2, 0xbc, 0xcf, 0x7c,",
          "2702:  0x4d, 0x82, 0x31, 0xc5, 0x93, 0x18, 0x48, 0xcb, 0x63, 0xc9, 0x46, 0xec, 0x85, 0x4c, 0xb0, 0xdf,",
          "2703:  0x08, 0xda, 0x54, 0x35, 0xf0, 0x8f, 0x1c, 0x6c, 0xc4, 0xf0, 0x12, 0xb5, 0xd3, 0xf7, 0xf6, 0xe6,",
          "2704:  0xc8, 0x6a, 0x1f, 0x27, 0x1c, 0xc0, 0xdd, 0xfd, 0x9c, 0x03, 0xa7, 0x07, 0xbb, 0x35, 0xe4, 0x8d,",
          "2705:  0x30, 0xc6, 0x68, 0xbc, 0x43, 0x63, 0x55, 0x3b, 0xd3, 0x25, 0x02, 0x8a, 0x0a, 0x4b, 0x16, 0xa0,",
          "2706:  0xaa, 0x4d, 0xae, 0xaa, 0xe3, 0x8c, 0x22, 0xad, 0x1a, 0x3b, 0x6d, 0x68, 0x78, 0xa3, 0xf1, 0x0f,",
          "2707:  0xe5, 0x04, 0xe9, 0x46, 0x13, 0xfb, 0x0d, 0x81, 0x71, 0xff, 0xde, 0x81, 0x63, 0x96, 0x56, 0x8f,",
          "2708:  0xc1, 0xcb, 0x0d, 0xb3, 0x5e, 0xee, 0x4a, 0x61, 0xe3, 0x79, 0x88, 0x9b, 0xfb, 0xe5, 0x31, 0x98,",
          "2709:  0xb1, 0x47, 0xbd, 0x30, 0xc7, 0x62, 0x83, 0x45, 0x3b, 0xd1, 0x4d, 0x5c, 0x55, 0x6d, 0x6e, 0x36,",
          "2710:  0x58, 0x12, 0x8c, 0x29, 0x9e, 0x37, 0x62, 0xc7, 0x4b, 0xb6, 0x54, 0x83, 0xeb, 0x46, 0x5c, 0xf3,",
          "2711:  0x92, 0x2d, 0x14, 0x18, 0xf2, 0x22, 0x4c, 0x27, 0x5e, 0xdc, 0xa4, 0x09, 0xd2, 0x9d, 0x80, 0xa5,",
          "2712:  0xf3, 0xa5, 0x5a, 0x3b, 0xad, 0x68, 0xa7, 0x37, 0x32, 0x58, 0xcc, 0x51, 0x93, 0x57, 0x61, 0x64,",
          "2713:  0x8b, 0xb6, 0xda, 0xca, 0xaf, 0x59, 0x2f, 0x6e, 0x86, 0x8b, 0xba, 0x5e, 0xa6, 0xad, 0x76, 0xad,",
          "2714:  0xc2, 0x55, 0xe6, 0xbf, 0x50, 0x88, 0x22, 0xbf, 0xe8, 0x40, 0x75, 0xbb, 0xcb, 0x92, 0xa8, 0x1d,",
          "2715:  0xbc, 0x8f, 0xce, 0x56, 0x84, 0xe0, 0x9f, 0x29, 0x58, 0xf0, 0xd5, 0x94, 0xbf, 0x9c, 0xef, 0xfa,",
          "2716:  0x13, 0x8d, 0x64, 0xf2, 0x01, 0x18, 0xdf, 0x66, 0x51, 0x18, 0x52, 0xee, 0xa9, 0x70, 0x25, 0x6e,",
          "2717:  0x15, 0xad, 0x84, 0xe4, 0x5e, 0x9b, 0xe0, 0x7d, 0xab, 0x3e, 0x30, 0x95, 0x29, 0x9a, 0xa1, 0x1e,",
          "2718:  0xc4, 0xd4, 0x4f, 0xa2, 0xb8, 0x37, 0x0b, 0x8f, 0xa4, 0x19, 0x96, 0x53, 0xfe, 0xb2, 0x19, 0xf4,",
          "2719:  0x27, 0x1a, 0xc9, 0xa4, 0x07, 0x63, 0x9d, 0x56, 0xb7, 0x19, 0x84, 0xb3, 0x13, 0x42, 0x87, 0x9b,",
          "2720:  0x05, 0xeb, 0xb0, 0x26, 0x98, 0xd7, 0x80, 0x1b, 0x15, 0xf9, 0x1b, 0x95, 0x40, 0xf2, 0x34, 0x8c,",
          "2721:  0xfa, 0x5b, 0x5e, 0x9c, 0xcc, 0x4e, 0x8a, 0x31, 0xab, 0x27, 0xd1, 0x12, 0x07, 0xa2, 0xc4, 0xb9,",
          "2722:  0xbf, 0x51, 0x82, 0x33, 0xc3, 0x2b, 0x26, 0x67, 0x93, 0xdf, 0x8d, 0x99, 0xb4, 0xcf, 0x15, 0x7b,",
          "2723:  0x36, 0x09, 0x30, 0xa6, 0x78, 0xf2, 0x11, 0x07, 0xc6, 0xef, 0xa8, 0x1e, 0x2f, 0x3d, 0x92, 0x1e,",
          "2724:  0xbf, 0xa2, 0x7a, 0x5c, 0xeb, 0x70, 0x25, 0xed, 0x75, 0x25, 0x97, 0xab, 0x4b, 0x77, 0xfd, 0x56,",
          "2725:  0xb7, 0x9e, 0x5a, 0x46, 0x4d, 0x7a, 0x41, 0x82, 0x31, 0xc5, 0x73, 0xd2, 0x20, 0x94, 0xa4, 0x23,",
          "2726:  0x59, 0xd2, 0x95, 0x50, 0x91, 0x2a, 0xbc, 0xfb, 0xfb, 0xa3, 0x70, 0x6a, 0xe0, 0xe4, 0x23, 0xf3,",
          "2727:  0x00, 0xc2, 0x67, 0xb9, 0x18, 0xf0, 0x0d, 0xa6, 0xdc, 0x55, 0x4f, 0x73, 0x17, 0xe3, 0x96, 0x86,",
          "2728:  0xa2, 0x45, 0x41, 0x3e, 0x04, 0xd0, 0xf1, 0x62, 0xaf, 0x4d, 0x13, 0x1a, 0xa7, 0x76, 0xf2, 0xea,",
          "2729:  0xd1, 0x5a, 0x89, 0xeb, 0xb1, 0x96, 0xf2, 0x34, 0x3e, 0x8e, 0x06, 0x31, 0xb4, 0x44, 0xf2, 0x3d,",
          "2730:  0x74, 0x4c, 0x5b, 0xd4, 0x63, 0xf4, 0xba, 0x59, 0x3e, 0xf4, 0x1e, 0x1a, 0x0d, 0x0a, 0x6d, 0x3a,",
          "2731:  0xbe, 0x8e, 0x89, 0x5a, 0x30, 0xd5, 0x56, 0x7a, 0x1d, 0x13, 0xf5, 0x64, 0xa8, 0xb0, 0xe4, 0xd3,",
          "2732:  0x0e, 0x4c, 0x37, 0x82, 0x16, 0x35, 0xd2, 0xd5, 0x8e, 0xf7, 0xc6, 0xd1, 0x2b, 0x79, 0xd1, 0xe6,",
          "2733:  0x6b, 0x2c, 0x70, 0x06, 0xcc, 0x30, 0x27, 0x9e, 0x77, 0xf3, 0x0e, 0x8d, 0x85, 0xe9, 0x1e, 0xcb,",
          "2734:  0x76, 0xf3, 0x2d, 0x09, 0xc6, 0x14, 0x4f, 0x16, 0xe1, 0x58, 0xc7, 0x63, 0x6c, 0x29, 0xa6, 0x75,",
          "2735:  0x1a, 0x26, 0x81, 0xd7, 0x92, 0xfb, 0xd1, 0x8a, 0x71, 0xa2, 0xd7, 0xb2, 0x68, 0xcc, 0xd3, 0x93,",
          "2736:  0x77, 0xc1, 0x93, 0x41, 0x33, 0x8c, 0x62, 0x7a, 0x2d, 0x60, 0x2c, 0x08, 0x9b, 0x66, 0x18, 0x08,",
          "2737:  0x4b, 0x5c, 0xa9, 0xcd, 0x29, 0x56, 0x4f, 0xae, 0x0c, 0x26, 0xc3, 0x61, 0xe5, 0xc9, 0x5b, 0xa0,",
          "2738:  0xc2, 0xb6, 0x83, 0xce, 0x52, 0x5c, 0x67, 0xc2, 0xa0, 0x56, 0xcc, 0x5a, 0xbc, 0xae, 0xe0, 0xa8,",
          "2739:  0x29, 0xdc, 0x2f, 0x94, 0x60, 0x76, 0xd8, 0xfc, 0x21, 0x8c, 0xcf, 0x92, 0xe4, 0x96, 0x17, 0x33,",
          "2740:  0xb5, 0x15, 0x39, 0xe2, 0x8e, 0x56, 0xf1, 0xbd, 0xe5, 0xc5, 0xf6, 0x7c, 0x13, 0x02, 0x30, 0x95,",
          "2741:  0x44, 0xee, 0xc0, 0x48, 0xd2, 0xf2, 0x0a, 0x0a, 0x81, 0x59, 0x12, 0x8d, 0xc3, 0xb8, 0xba, 0xc8,",
          "2742:  0x50, 0xc8, 0x20, 0x4f, 0xc1, 0x48, 0x2b, 0xd8, 0xe4, 0x8e, 0x35, 0x9f, 0x90, 0x62, 0x85, 0x5c,",
          "2743:  0x0d, 0x36, 0x19, 0x0a, 0xa8, 0xfb, 0x35, 0x67, 0x40, 0xdb, 0xa8, 0x05, 0x84, 0x4f, 0x10, 0x1a,",
          "2744:  0xee, 0x04, 0x71, 0x14, 0xb6, 0x69, 0x98, 0xe4, 0xc3, 0xba, 0x17, 0x0c, 0x0a, 0x6d, 0x3a, 0xf2,",
          "2745:  0x0b, 0xce, 0x80, 0x99, 0x7d, 0xc4, 0x78, 0xa6, 0x52, 0xe9, 0xc0, 0x93, 0xdb, 0xfd, 0x8f, 0xb1,",
          "2746:  0x01, 0xb6, 0x5c, 0x2f, 0xce, 0xe4, 0x3c, 0x00, 0xf7, 0x0c, 0xd7, 0x62, 0xda, 0x08, 0x76, 0x55,",
          "2747:  0xcd, 0x34, 0xcb, 0xeb, 0x1a, 0x83, 0x16, 0x55, 0x5a, 0x66, 0xbd, 0xdb, 0xe0, 0x65, 0x4a, 0xfd,",
          "2748:  0x65, 0x24, 0x06, 0x2d, 0x2a, 0xf2, 0x1c, 0x8c, 0x05, 0x6d, 0xaf, 0x49, 0xd3, 0xf6, 0x7f, 0x8a,",
          "2749:  0x1b, 0x8a, 0x15, 0x01, 0xb9, 0xbf, 0x37, 0x37, 0xad, 0x15, 0x12, 0x20, 0x54, 0xb4, 0xe4, 0xb7,",
          "2750:  0x1d, 0x98, 0xf4, 0xa3, 0x76, 0x3b, 0x0a, 0x57, 0xbd, 0x4d, 0xda, 0x4a, 0xc3, 0x75, 0x77, 0x1e,",
          "2751:  0x95, 0xeb, 0x32, 0xbf, 0x64, 0x09, 0x93, 0x9b, 0x65, 0x1d, 0x84, 0xb4, 0x51, 0x98, 0xd1, 0xca,",
          "2752:  0xb6, 0x27, 0xa3, 0xfb, 0xd8, 0x93, 0x3f, 0x72, 0x60, 0x46, 0x96, 0x5d, 0x0c, 0xc3, 0x28, 0x51,",
          "2753:  0x51, 0x54, 0x19, 0x6f, 0x8b, 0x1e, 0x71, 0xb5, 0x2c, 0x89, 0xb2, 0x6e, 0xaf, 0x53, 0x6a, 0xce,",
          "2754:  0xf4, 0xe1, 0xb1, 0x5f, 0x49, 0x72, 0x09, 0x66, 0x1a, 0x51, 0xec, 0x53, 0xbb, 0x21, 0x94, 0x31,",
          "2755:  0xd4, 0x8c, 0x2e, 0xe6, 0x09, 0xb0, 0xbf, 0x0c, 0xb9, 0x05, 0xa7, 0x2d, 0xa0, 0xdd, 0x0e, 0xd2,",
          "2756:  0x1e, 0x9e, 0x55, 0xdc, 0x4e, 0x5f, 0x1c, 0x48, 0x85, 0x43, 0x4a, 0x9f, 0x79, 0x27, 0xcc, 0xf4,",
          "2757:  0xf5, 0xdf, 0x80, 0x48, 0xc5, 0x49, 0x3b, 0x52, 0x51, 0xb5, 0x02, 0x0c, 0x67, 0x96, 0xe1, 0xf4,",
          "2758:  0xe0, 0x96, 0x3a, 0x0c, 0x17, 0xf7, 0xd7, 0x1c, 0x78, 0x72, 0x88, 0x4b, 0xa6, 0xb7, 0x68, 0xce,",
          "2759:  0xb0, 0x2d, 0x1a, 0xf1, 0xa0, 0x4c, 0xc3, 0x1d, 0x65, 0x2c, 0x2e, 0x1e, 0x6d, 0x44, 0x5c, 0x08,",
          "2760:  0x77, 0x64, 0x47, 0x8f, 0xdf, 0xdb, 0x9b, 0x2b, 0x5f, 0x08, 0x77, 0x90, 0xf3, 0x76, 0x7f, 0x65,",
          "2761:  0x2c, 0xb3, 0x0b, 0x5c, 0x4f, 0x03, 0x0f, 0x42, 0x51, 0xb5, 0x07, 0xbc, 0x51, 0xf0, 0x58, 0xb4,",
          "2762:  0x76, 0xb9, 0xf2, 0x38, 0x41, 0x89, 0x23, 0x1f, 0x77, 0x44, 0x04, 0x3f, 0xdd, 0x1d, 0x2b, 0x2f,",
          "2763:  0xf1, 0xd1, 0x1c, 0x28, 0xd8, 0xe7, 0x02, 0x29, 0x10, 0x6d, 0xe9, 0x7c, 0x26, 0x77, 0x64, 0x00,",
          "2764:  0x2d, 0xef, 0x2b, 0xa6, 0x31, 0xfe, 0x14, 0x4f, 0x76, 0x01, 0x58, 0x2f, 0xf4, 0xd7, 0xa2, 0x56,",
          "2765:  0xe0, 0xf7, 0x54, 0xc8, 0xa4, 0x80, 0x28, 0xb0, 0xe4, 0x27, 0x1d, 0x46, 0xf3, 0x8d, 0x96, 0x2c,",
          "2766:  0xf2, 0x45, 0x07, 0x66, 0xa4, 0x47, 0xb0, 0x1c, 0x34, 0x1a, 0x34, 0xa6, 0xa1, 0x4f, 0x53, 0x9f,",
          "2767:  0xea, 0xf6, 0xd1, 0x34, 0x48, 0x03, 0x98, 0x2b, 0x79, 0xf6, 0x66, 0x8a, 0xf7, 0xa1, 0xb0, 0x5f,",
          "2768:  0x19, 0x52, 0x87, 0x91, 0x20, 0x6c, 0x44, 0xca, 0xb0, 0xd5, 0x8e, 0xa6, 0xd4, 0x4a, 0xd8, 0x88,",
          "2769:  0xcc, 0x5c, 0xe1, 0x5f, 0x28, 0xb8, 0x93, 0x55, 0x38, 0x19, 0xab, 0x5d, 0xf5, 0xe5, 0x80, 0xf1,",
          "2770:  0xbd, 0xc9, 0x6a, 0xd0, 0x0e, 0x12, 0x61, 0x94, 0xca, 0xb5, 0xd9, 0x7b, 0x7b, 0x73, 0x27, 0x71,",
          "2771:  0x00, 0x1e, 0x07, 0x96, 0x72, 0x5f, 0xab, 0x66, 0x43, 0x07, 0x32, 0x30, 0xf6, 0x01, 0xa8, 0xc6,",
          "2772:  0xfa, 0x28, 0x42, 0x7a, 0x46, 0xab, 0xc5, 0xb4, 0xb1, 0x8a, 0xc8, 0xe9, 0x98, 0x8e, 0x39, 0x74,",
          "2773:  0x30, 0x12, 0xb9, 0x87, 0xc4, 0x7b, 0x5e, 0x4d, 0x8b, 0x02, 0xc6, 0x97, 0x92, 0x6a, 0x82, 0x8f,",
          "2774:  0xbd, 0xd0, 0x47, 0x21, 0x83, 0xc4, 0x30, 0xb6, 0x45, 0xbd, 0x56, 0xb2, 0xa5, 0x62, 0x63, 0x57,",
          "2775:  0x8e, 0xea, 0x9f, 0x73, 0x5e, 0xf9, 0xb8, 0xa3, 0x84, 0xa2, 0x92, 0x44, 0x76, 0x61, 0x7c, 0x4b,",
          "2776:  0x76, 0x82, 0x5a, 0xdb, 0xaf, 0x1d, 0xb5, 0x71, 0x33, 0x3d, 0x6b, 0xe6, 0xaf, 0x02, 0x60, 0x2a,",
          "2777:  0x8e, 0xfc, 0x92, 0x03, 0xe0, 0xa7, 0x01, 0xc7, 0x74, 0xfa, 0x60, 0x61, 0x76, 0x47, 0xc7, 0x32,",
          "2778:  0x8d, 0x6b, 0xa4, 0x41, 0x0c, 0x2d, 0xc9, 0xe4, 0x15, 0x98, 0x8c, 0xa9, 0x1f, 0x85, 0x7e, 0xd0,",
          "2779:  0xa2, 0xf5, 0xc5, 0x44, 0x6c, 0x49, 0x0e, 0x17, 0x98, 0x3c, 0xce, 0xfd, 0x13, 0xb4, 0x78, 0x60,",
          "2780:  0x86, 0x23, 0x79, 0xcd, 0x81, 0x69, 0x1d, 0x74, 0xe5, 0x1d, 0x42, 0x55, 0xf0, 0x69, 0xb5, 0xa0,",
          "2781:  0x10, 0xaf, 0xe0, 0x59, 0x23, 0x7c, 0xeb, 0x95, 0x85, 0x61, 0x4e, 0x2e, 0x79, 0x19, 0x20, 0xda,",
          "2782:  0x14, 0x01, 0x4e, 0x5e, 0xd5, 0xca, 0xa1, 0xab, 0x3a, 0x2d, 0x63, 0xf5, 0x29, 0x07, 0xb4, 0xb8,",
          "2783:  0x91, 0xab, 0x00, 0x72, 0xda, 0x6c, 0xf4, 0x3a, 0x54, 0xec, 0x87, 0xaa, 0xb5, 0x37, 0xa7, 0x8d,",
          "2784:  0xbf, 0xae, 0x31, 0xf7, 0xf7, 0xe6, 0xfa, 0x77, 0xee, 0x22, 0xb2, 0x6c, 0x15, 0x27, 0xef, 0x87,",
          "2785:  0x71, 0xd6, 0x6d, 0xb7, 0x3d, 0x1d, 0x28, 0x5a, 0x2b, 0x6e, 0x45, 0x94, 0x7c, 0xcd, 0xd8, 0x54,",
          "2786:  0x00, 0x4c, 0x25, 0xba, 0x21, 0x90, 0x7e, 0x7a, 0xf2, 0x1c, 0x4c, 0xd2, 0xdd, 0x84, 0xc6, 0xa1,",
          "2787:  0xd7, 0xba, 0x89, 0xab, 0x69, 0x68, 0x41, 0x74, 0xfe, 0x05, 0x0b, 0x8e, 0x19, 0x2a, 0xe2, 0x6a,",
          "2788:  0xcf, 0xbb, 0x24, 0xe8, 0xc1, 0x78, 0xde, 0xa9, 0x9f, 0xed, 0xfe, 0x4f, 0x29, 0xe3, 0x11, 0x6c,",
          "2789:  0xc4, 0x94, 0x92, 0x08, 0x46, 0xc3, 0xa8, 0xae, 0x8d, 0xde, 0x95, 0x62, 0x8c, 0xde, 0xf5, 0xa8,",
          "2790:  0x6e, 0x9d, 0x91, 0xf3, 0x2f, 0x86, 0x52, 0x8e, 0x38, 0x44, 0x4c, 0x4f, 0x5b, 0x05, 0x42, 0x39,",
          "2791:  0x41, 0x45, 0x4a, 0xd6, 0x87, 0x88, 0x37, 0x6c, 0x41, 0x98, 0x95, 0x4b, 0xb6, 0x61, 0x74, 0x2b,",
          "2792:  0x62, 0x89, 0xdc, 0xab, 0x1c, 0xd9, 0x0b, 0xbb, 0x1c, 0xb1, 0x44, 0x2c, 0x61, 0xba, 0xda, 0x1c,",
          "2793:  0xc2, 0x50, 0xca, 0x70, 0xbf, 0xe3, 0x64, 0x02, 0x49, 0xb7, 0xbd, 0xc4, 0xdf, 0xba, 0xb0, 0xc3,",
          "2794:  0xf7, 0x8f, 0x57, 0x33, 0x87, 0x20, 0x3f, 0x61, 0x1f, 0x82, 0xdc, 0xdf, 0x9b, 0x7b, 0xd3, 0xb0,",
          "2795:  0xa4, 0xa5, 0xbb, 0x9c, 0xc3, 0xbc, 0x60, 0x61, 0x9d, 0x97, 0x7c, 0xd8, 0x81, 0x09, 0x4b, 0x3d,",
          "2796:  0xb5, 0xa0, 0x14, 0x18, 0x8f, 0xd7, 0xce, 0x95, 0x05, 0x44, 0x5b, 0xa4, 0xfb, 0x59, 0x07, 0xc6,",
          "2797:  0x6b, 0x9e, 0xbf, 0x1d, 0x35, 0x1a, 0xe4, 0x2d, 0x50, 0xa9, 0x77, 0xd5, 0x71, 0x93, 0xac, 0x9f,",
          "2798:  0x8e, 0x5c, 0x2c, 0x2b, 0x38, 0x6a, 0x0a, 0x3e, 0x86, 0x1b, 0x9e, 0x9f, 0x44, 0xb1, 0x50, 0xbb,",
          "2799:  0x2c, 0xc7, 0xf0, 0x45, 0x01, 0x41, 0x85, 0xe1, 0x9b, 0xf4, 0xb6, 0xb7, 0x9b, 0x16, 0xce, 0x47,",
          "2800:  0xb1, 0xae, 0x19, 0x14, 0xda, 0x74, 0xee, 0x9f, 0x55, 0x61, 0x5c, 0x9d, 0xeb, 0x1e, 0xf8, 0x64,",
          "2801:  0x26, 0xf5, 0xe2, 0x4b, 0x43, 0xbd, 0x78, 0x06, 0x63, 0xbe, 0x48, 0x09, 0x53, 0x4b, 0xe9, 0x11,",
          "2802:  0xe3, 0x79, 0x4a, 0x41, 0x99, 0x65, 0x66, 0xd4, 0x92, 0xdf, 0xa8, 0x44, 0x91, 0xcf, 0x38, 0x70,",
          "2803:  0xcc, 0x8f, 0xc2, 0x90, 0xfa, 0xc6, 0xce, 0x8f, 0x14, 0x71, 0x72, 0xb9, 0x94, 0x65, 0x6a, 0x62,",
          "2804:  0x5f, 0x39, 0x04, 0xe6, 0xc5, 0x93, 0x17, 0x60, 0x4a, 0xb6, 0xd9, 0xad, 0xcc, 0xfe, 0xd8, 0x9c,",
          "2805:  0xe5, 0xdb, 0x48, 0xcc, 0xd2, 0x92, 0x79, 0x19, 0x67, 0x10, 0x87, 0x5b, 0x72, 0x8f, 0xac, 0x02,",
          "2806:  0xa9, 0xfa, 0xf4, 0x8b, 0xa1, 0x45, 0x41, 0x62, 0x20, 0x31, 0x6d, 0xc4, 0x94, 0x6d, 0x21, 0x7d,",
          "2807:  0xb5, 0x4b, 0x59, 0x22, 0xd6, 0x98, 0xf1, 0x87, 0x3b, 0xe7, 0xc3, 0x3e, 0x4e, 0x38, 0x80, 0x3b,",
          "2808:  0xd9, 0x56, 0x8e, 0x6e, 0xa5, 0x88, 0xe9, 0xa4, 0xba, 0x79, 0xa8, 0xbf, 0x3b, 0x07, 0xa3, 0x6c,",
          "2809:  0xcb, 0x8b, 0xeb, 0x62, 0x6d, 0x2b, 0xd7, 0xaa, 0xdc, 0x96, 0xac, 0x73, 0x00, 0x4a, 0x38, 0x59,",
          "2810:  0x86, 0xe3, 0xb9, 0x4c, 0x04, 0x26, 0x56, 0xaf, 0x4a, 0x6d, 0x56, 0xb1, 0x3b, 0x9e, 0xcb, 0x61,",
          "2811:  0x60, 0xd8, 0x57, 0xc2, 0xde, 0x04, 0x4d, 0xec, 0xb3, 0x09, 0xea, 0xc1, 0x58, 0x4b, 0x06, 0x02,",
          "2812:  0x26, 0x85, 0xa9, 0x7c, 0xa9, 0x90, 0x06, 0x98, 0xb7, 0x03, 0x30, 0x7a, 0xb4, 0xab, 0x80, 0x82,",
          "2813:  0x12, 0x48, 0x3e, 0xc9, 0x0d, 0x9a, 0x15, 0x3b, 0x98, 0x12, 0x0a, 0xdc, 0x2a, 0x46, 0x81, 0xbe,",
          "2814:  0x50, 0x89, 0xb1, 0x6e, 0x56, 0x20, 0xc2, 0x96, 0x7f, 0xe6, 0x27, 0x61, 0xe2, 0x61, 0xe3, 0x0e,",
          "2815:  0x2f, 0xc2, 0xf1, 0x23, 0x45, 0x1c, 0xbe, 0xeb, 0x40, 0xda, 0xaf, 0x4b, 0x9e, 0xbf, 0x45, 0xf9,",
          "2816:  0x90, 0x21, 0x2f, 0xc2, 0xb4, 0xde, 0x46, 0x2c, 0x45, 0x5d, 0x15, 0xb7, 0x2c, 0x9b, 0x20, 0x39,",
          "2817:  0x66, 0xb0, 0x98, 0xa3, 0x26, 0x0b, 0x50, 0xe5, 0xed, 0x24, 0x8b, 0x4a, 0xb3, 0xab, 0xb7, 0x2a,",
          "2818:  0x8b, 0x6b, 0x2b, 0xaa, 0x94, 0xa1, 0x21, 0x11, 0xcc, 0xb4, 0x3c, 0x96, 0x08, 0x0d, 0xf8, 0xae,",
          "2819:  0xe2, 0x21, 0x4f, 0xd9, 0x45, 0x22, 0xd6, 0x6a, 0x9e, 0x11, 0xf6, 0xf3, 0x76, 0xbf, 0x3e, 0x02,",
          "2820:  0x53, 0x19, 0xcb, 0xc8, 0x57, 0x95, 0x2e, 0xe3, 0xae, 0x8f, 0x0e, 0xb1, 0xe8, 0x55, 0xe5, 0xa6,",
          "2821:  0x82, 0xa3, 0xa6, 0xe0, 0xd4, 0x1d, 0x8f, 0xb1, 0xbb, 0x51, 0x5c, 0x57, 0xa6, 0x5c, 0x53, 0xaf,",
          "2822:  0x29, 0x38, 0x6a, 0x0a, 0xbe, 0xbe, 0x6c, 0x52, 0x2f, 0xa6, 0xb1, 0x48, 0x4c, 0xc9, 0xaf, 0x2f,",
          "2823:  0x35, 0x83, 0x42, 0x9b, 0x4e, 0x18, 0xe5, 0xa4, 0xc5, 0x96, 0x5a, 0x01, 0x0d, 0x13, 0xa9, 0x66,",
          "2824:  0x31, 0x46, 0x79, 0x63, 0x75, 0xdd, 0x66, 0x6a, 0x8c, 0x72, 0x0e, 0x81, 0x79, 0xf1, 0xe4, 0xa3,",
          "2825:  0x0e, 0x4c, 0x79, 0x77, 0x99, 0xc9, 0x5b, 0x16, 0x56, 0xf9, 0xc8, 0x8b, 0x54, 0x26, 0x15, 0xba,",
          "2826:  0x36, 0xc3, 0xcd, 0x7b, 0x06, 0x84, 0x59, 0xa1, 0xe4, 0xf3, 0x0e, 0x10, 0xba, 0x4b, 0xfd, 0xb5,",
          "2827:  0x38, 0xda, 0x09, 0xea, 0x69, 0x1f, 0xaa, 0xed, 0xcf, 0x11, 0xbd, 0xed, 0x0b, 0x7d, 0x7c, 0xa5,",
          "2828:  0x55, 0xef, 0x87, 0xe3, 0x00, 0x1d, 0xdc, 0xbf, 0x2d, 0xc3, 0x84, 0x65, 0x8c, 0x07, 0xae, 0xac,",
          "2829:  0xce, 0xf7, 0xd9, 0xca, 0x5a, 0x3a, 0xc4, 0xca, 0xfa, 0x21, 0xa8, 0xfa, 0xa9, 0xa1, 0x28, 0x26,",
          "2830:  0xcf, 0x3a, 0x6f, 0x7e, 0x8c, 0xad, 0xd0, 0x20, 0x34, 0x32, 0xc9, 0x25, 0x98, 0xb1, 0xd8, 0x28,",
          "2831:  0x23, 0x33, 0x22, 0x8c, 0x8c, 0x0e, 0x34, 0x2d, 0xe6, 0x09, 0xb0, 0xbf, 0x0c, 0x79, 0x96, 0x7b,",
          "2832:  0xb5, 0x81, 0xaa, 0x97, 0xdc, 0xc5, 0xab, 0x1c, 0xe6, 0xc5, 0xb5, 0x95, 0x14, 0x8c, 0x36, 0x8d,",
          "2833:  0xfb, 0x75, 0x47, 0x77, 0xee, 0x63, 0x48, 0x80, 0xb9, 0x93, 0x4d, 0x80, 0xb9, 0x50, 0x48, 0x33,",
          "2834:  0x0f, 0x49, 0x7e, 0xb9, 0x0e, 0xe3, 0x4b, 0x51, 0xbb, 0xed, 0x85, 0x75, 0xf2, 0x06, 0x18, 0xf7,",
          "2835:  0xe5, 0x4f, 0xb5, 0x4d, 0x14, 0x19, 0x11, 0x0a, 0x8b, 0x29, 0x8e, 0x3c, 0x05, 0x23, 0x5e, 0xdc,",
          "2836:  0x4c, 0xb7, 0x86, 0xe2, 0x50, 0x6c, 0x31, 0x6e, 0x32, 0x14, 0x50, 0xf7, 0x73, 0x25, 0x80, 0xa5,",
          "2837:  0xa8, 0xdd, 0xf1, 0x62, 0x5a, 0xdf, 0x88, 0xfe, 0x3f, 0x46, 0x2c, 0x77, 0x0c, 0x9f, 0x70, 0x80,",
          "2838:  0xf0, 0x56, 0x89, 0x42, 0x1a, 0x9a, 0x83, 0x38, 0xbe, 0x5e, 0xfa, 0x29, 0x54, 0x2d, 0x3e, 0x66,",
          "2839:  0x0e, 0xa4, 0x08, 0x34, 0x34, 0x07, 0xd8, 0x45, 0x3c, 0x9d, 0xae, 0xf8, 0xe5, 0x6c, 0xb2, 0x86,",
          "2840:  0x38, 0x01, 0x56, 0x0e, 0x80, 0xfb, 0xe5, 0x12, 0x9c, 0x96, 0x66, 0xeb, 0x9a, 0x17, 0x7a, 0x4d,",
          "2841:  0xda, 0xe6, 0x5a, 0x1d, 0xf4, 0xb4, 0xc1, 0xe7, 0xee, 0x6b, 0x90, 0xe6, 0x66, 0x1c, 0x75, 0x70,",
          "2842:  0xca, 0x41, 0x25, 0x87, 0xd1, 0x4a, 0x18, 0x24, 0x28, 0x98, 0x13, 0x06, 0x95, 0xf4, 0xe6, 0x8c,",
          "2843:  0x32, 0x36, 0x05, 0x09, 0xd2, 0xf3, 0xee, 0x92, 0x62, 0x8f, 0x5a, 0x10, 0x5f, 0xdc, 0x5b, 0x91,",
          "2844:  0xbf, 0x8d, 0xb4, 0x13, 0x09, 0xc3, 0x62, 0x1d, 0x8d, 0xaf, 0x2a, 0x38, 0x6a, 0x0a, 0xf7, 0xcb,",
          "2845:  0x0e, 0xe4, 0x4d, 0xae, 0xd8, 0x0d, 0xca, 0x5c, 0xcc, 0xfc, 0x6e, 0x30, 0x9b, 0x3a, 0x79, 0x88,",
          "2846:  0x4c, 0xc4, 0xf7, 0xc0, 0x84, 0x97, 0x24, 0xb4, 0xdd, 0x91, 0x5b, 0x93, 0xf2, 0xc3, 0x85, 0xbf,",
          "2847:  0xae, 0x45, 0xf5, 0xa0, 0x11, 0x88, 0x2d, 0x89, 0xcd, 0xce, 0x7d, 0x09, 0x2a, 0xe9, 0x89, 0xcf,",
          "2848:  0x01, 0xba, 0xfe, 0xe9, 0x8c, 0x3b, 0x39, 0x64, 0x70, 0xdd, 0x2f, 0xc1, 0x80, 0x35, 0x93, 0x57,",
          "2849:  0xd9, 0x58, 0x97, 0x4c, 0x95, 0x0f, 0x67, 0x61, 0xc8, 0xae, 0x3c, 0xed, 0x92, 0x71, 0x96, 0x77,",
          "2850:  0x15, 0xbd, 0xe6, 0x9b, 0x03, 0xb0, 0x09, 0xa5, 0x9f, 0x3e, 0x04, 0x23, 0xe7, 0x01, 0xcc, 0xa2,",
          "2851:  0xa0, 0x32, 0x58, 0x74, 0xa4, 0xd6, 0xac, 0x1d, 0x68, 0x51, 0x71, 0x17, 0x30, 0x08, 0x59, 0xe2,",
          "2852:  0xb5, 0x5a, 0x97, 0x83, 0x30, 0x51, 0x7b, 0x59, 0x6d, 0x30, 0x56, 0x0c, 0x0a, 0x6d, 0xba, 0x33,",
          "2853:  0x6f, 0xb3, 0xfa, 0xe5, 0x30, 0x6e, 0xfd, 0x27, 0x4a, 0x30, 0x7d, 0x29, 0xec, 0xae, 0x5d, 0x5a,",
          "2854:  0xeb, 0x6e, 0xb6, 0x02, 0xff, 0x2a, 0xed, 0xf1, 0x4e, 0xdb, 0xa6, 0xbd, 0x95, 0x65, 0xd5, 0xec,",
          "2855:  0xba, 0xd3, 0xae, 0x72, 0x20, 0x4a, 0x1c, 0x57, 0xb3, 0x11, 0x84, 0x4d, 0x1a, 0x77, 0xe2, 0x40,",
          "2856:  0xf9, 0xee, 0x96, 0x9a, 0x17, 0x0d, 0x0a, 0x6d, 0x3a, 0xce, 0x3b, 0xba, 0x1b, 0xd2, 0x38, 0x6f,",
          "2857:  0x6d, 0x6e, 0x70, 0x20, 0x4a, 0x1c, 0x27, 0x4a, 0xe2, 0x2e, 0x4b, 0x54, 0x8b, 0x69, 0xa2, 0x0d,",
          "2858:  0x0e, 0x44, 0x89, 0xe3, 0xc3, 0x83, 0x75, 0x37, 0x45, 0x14, 0x36, 0x77, 0x1e, 0xbe, 0x2e, 0xc1,",
          "2859:  0x98, 0xe2, 0x39, 0xe9, 0x36, 0xed, 0x2d, 0xf3, 0xb5, 0x37, 0x97, 0x8a, 0x73, 0x55, 0x82, 0x31,",
          "2860:  0xc5, 0xbb, 0xff, 0xe4, 0x00, 0xc9, 0x36, 0xc7, 0x63, 0x58, 0xbe, 0x5f, 0xcd, 0x2e, 0xdf, 0x47,",
          "2861:  0x0c, 0x98, 0x67, 0xd5, 0x1f, 0xb2, 0x8a, 0xff, 0xa6, 0x03, 0x93, 0xf6, 0xd9, 0x09, 0x69, 0xe6,",
          "2862:  0x0c, 0xd1, 0x8d, 0xac, 0x21, 0xba, 0xbf, 0x37, 0xf7, 0x53, 0x83, 0xae, 0x81, 0x36, 0x83, 0x24,",
          "2863:  0xea, 0xb0, 0xb7, 0xd2, 0xb0, 0x19, 0x84, 0x54, 0x44, 0x06, 0xe5, 0x99, 0x4b, 0xe6, 0x60, 0x66,",
          "2864:  0x29, 0xaa, 0xd3, 0x87, 0xb0, 0x64, 0xee, 0x6d, 0x98, 0xe9, 0xcb, 0xbf, 0x3a, 0x80, 0xd1, 0xd9,",
          "2865:  0x37, 0xbb, 0xd6, 0xfd, 0xa4, 0x03, 0x53, 0x99, 0xf4, 0xb5, 0x82, 0x4c, 0x99, 0x98, 0x15, 0x91,",
          "2866:  0x38, 0x76, 0x8b, 0x83, 0x50, 0xc6, 0xe5, 0x2a, 0xd6, 0xac, 0x30, 0x28, 0xb4, 0xe9, 0xdc, 0xcf,",
          "2867:  0x96, 0xa0, 0x92, 0x46, 0x70, 0x0f, 0xa0, 0xca, 0xc7, 0x1d, 0x98, 0xd2, 0x1b, 0x69, 0xe1, 0x5e,",
          "2868:  0x17, 0x92, 0xf6, 0xc3, 0x35, 0xd0, 0x67, 0xb3, 0xdc, 0xbd, 0xd6, 0x7e, 0x3e, 0xda, 0xc2, 0x30,",
          "2869:  0x2b, 0x9b, 0xdc, 0x02, 0x60, 0x3d, 0x96, 0xd0, 0xb6, 0xe5, 0xe8, 0xbb, 0xd6, 0xec, 0x98, 0xf7,",
          "2870:  0xa3, 0x98, 0xf2, 0xb9, 0x70, 0x3d, 0xaa, 0xd3, 0x75, 0x4d, 0x69, 0x0c, 0xa1, 0x81, 0xa1, 0xc5,",
          "2871:  0xc9, 0xfd, 0xbd, 0x12, 0x1c, 0xcf, 0xab, 0x44, 0xde, 0x0d, 0x93, 0xa9, 0x74, 0xeb, 0xf6, 0x6b,",
          "2872:  0x1a, 0xb6, 0x9e, 0x44, 0x0b, 0x77, 0x7f, 0x6f, 0x6e, 0xae, 0xff, 0xfa, 0xef, 0xbc, 0x4d, 0x82,",
          "2873:  0x19, 0x66, 0x32, 0x9a, 0xa1, 0xc2, 0x6e, 0xb5, 0xde, 0x62, 0xa7, 0xa3, 0x42, 0x12, 0x56, 0x34,",
          "2874:  0xc3, 0xc6, 0x62, 0x8e, 0x9a, 0xac, 0xc1, 0x49, 0x0b, 0x72, 0x9d, 0x06, 0xcd, 0xad, 0xcd, 0x28,",
          "2875:  0x96, 0xd7, 0x2c, 0xca, 0xb5, 0xa7, 0x14, 0x97, 0x93, 0x38, 0x80, 0x06, 0x07, 0x96, 0xe4, 0x0e,",
          "2876:  0x86, 0xef, 0x75, 0x3c, 0x3f, 0x48, 0x7a, 0x6a, 0xe7, 0xa2, 0xed, 0xc8, 0x92, 0x82, 0xa3, 0xa6,",
          "2877:  0x70, 0xaf, 0xc1, 0xc8, 0x01, 0x47, 0xd0, 0x81, 0xd6, 0xe5, 0x97, 0xa0, 0xc2, 0xd9, 0x71, 0xbb,",
          "2878:  0x51, 0x14, 0xcb, 0x08, 0x2a, 0xe9, 0xad, 0x1b, 0xe2, 0x42, 0x39, 0xf0, 0xd2, 0x80, 0x91, 0xae,",
          "2879:  0xd6, 0x0a, 0x63, 0x5d, 0xe1, 0x75, 0x70, 0x24, 0x79, 0x1a, 0xca, 0x74, 0xb7, 0x93, 0x8f, 0x0c,",
          "2880:  0x5d, 0xd8, 0xed, 0x04, 0x31, 0x65, 0x9c, 0x88, 0xee, 0x76, 0xc8, 0x19, 0x28, 0x05, 0x75, 0xb5,",
          "2881:  0xa0, 0x80, 0xa2, 0x29, 0xad, 0x2c, 0x63, 0x29, 0xa8, 0xbb, 0xbb, 0x50, 0xd5, 0xd7, 0x7c, 0xc8,",
          "2882:  0x76, 0x6a, 0x67, 0x9d, 0x22, 0x8e, 0x5c, 0x52, 0xbe, 0x43, 0x2c, 0x6c, 0x17, 0xc0, 0x24, 0x0b,",
          "2883:  0x16, 0x65, 0x5f, 0xce, 0xc1, 0x88, 0x1f, 0xa9, 0x1c, 0xe3, 0x8a, 0x61, 0x23, 0x0c, 0xac, 0xc0,",
          "2884:  0xb8, 0xb7, 0x61, 0xfa, 0x6a, 0x18, 0xdd, 0x0d, 0xf9, 0xc2, 0x77, 0x31, 0xa0, 0xad, 0x3a, 0x67,",
          "2885:  0xdc, 0xe0, 0x3f, 0xf2, 0xcb, 0xb9, 0xc0, 0xa2, 0xc4, 0xe9, 0xbb, 0x30, 0xa5, 0x61, 0x77, 0x61,",
          "2886:  0xdc, 0x5f, 0x76, 0xe0, 0x78, 0x3e, 0x31, 0xf0, 0x7b, 0xb6, 0x1f, 0xf9, 0x30, 0x57, 0x26, 0xcd,",
          "2887:  0x3c, 0xbb, 0xd1, 0x91, 0x67, 0xdc, 0xcf, 0xc3, 0xe4, 0x66, 0x37, 0x68, 0xd5, 0xd5, 0xb7, 0xd2,",
          "2888:  0x47, 0xe7, 0xd6, 0xd5, 0x2c, 0x1c, 0x66, 0x28, 0xb9, 0x9f, 0xb6, 0x19, 0x84, 0x5e, 0xdc, 0x5b,",
          "2889:  0x33, 0xeb, 0x86, 0x36, 0x4f, 0x35, 0x8d, 0x41, 0x8b, 0xca, 0xfd, 0xeb, 0x32, 0x98, 0xfb, 0x46,",
          "2890:  0x24, 0x50, 0x29, 0x14, 0x4e, 0x11, 0x41, 0xae, 0xf5, 0x5e, 0xe8, 0x9b, 0x9b, 0x4d, 0x95, 0x5c,",
          "2891:  0x06, 0xc5, 0xc7, 0x1c, 0xee, 0x21, 0x06, 0x49, 0xe0, 0x09, 0x63, 0xa1, 0xb6, 0x55, 0x6b, 0x05,",
          "2892:  0x9d, 0xb2, 0xaf, 0x48, 0xce, 0x51, 0x6c, 0xfb, 0x9c, 0x5a, 0x18, 0xda, 0x92, 0xc9, 0x2b, 0xea,",
          "2893:  0x5c, 0xa2, 0x5c, 0x58, 0x02, 0x4e, 0x25, 0x77, 0x18, 0xd1, 0x81, 0xd1, 0x98, 0x26, 0x71, 0x9a,",
          "2894:  0xfa, 0x74, 0xf5, 0xa8, 0xa7, 0xb4, 0x49, 0xdc, 0x5b, 0x4f, 0xf8, 0xd6, 0xad, 0x69, 0x39, 0x46,",
          "2895:  0x02, 0x8c, 0x52, 0x90, 0xcb, 0x80, 0xf4, 0xb7, 0xc5, 0x21, 0x63, 0xbe, 0x0b, 0x50, 0xf5, 0xba,",
          "2896:  0x49, 0xd4, 0xe6, 0xcd, 0x24, 0xba, 0xa7, 0x62, 0x45, 0xb5, 0x53, 0x04, 0x1a, 0x1a, 0xf7, 0xd3,",
          "2897:  0xa3, 0x90, 0xcb, 0x69, 0x20, 0xbb, 0xf6, 0x5d, 0x39, 0xa7, 0xd8, 0xbb, 0x72, 0x5a, 0x99, 0x41,",
          "2898:  0xf7, 0xe5, 0x48, 0x13, 0x46, 0x3b, 0x5b, 0x1e, 0x4b, 0xe7, 0xe8, 0x4b, 0x69, 0x33, 0xad, 0x71,",
          "2899:  0xe0, 0xfd, 0xbd, 0xb9, 0x9f, 0x3e, 0x98, 0x1f, 0xc8, 0xc7, 0xea, 0x82, 0x4c, 0xf0, 0x34, 0xa2,",
          "2900:  0x05, 0x0f, 0x94, 0xfc, 0x6d, 0x4f, 0xb0, 0xbc, 0xcf, 0x9e, 0xf6, 0x23, 0x8e, 0x4c, 0x84, 0x43,",
          "2901:  0xca, 0xba, 0xad, 0x44, 0x8d, 0x86, 0x97, 0x0a, 0x9c, 0x65, 0x92, 0xb1, 0xc9, 0x88, 0x93, 0xdf,",
          "2902:  0x68, 0x09, 0x25, 0xef, 0x86, 0x2a, 0x4b, 0xbc, 0x38, 0x79, 0xc8, 0xfc, 0x19, 0xdd, 0xe8, 0xeb,",
          "2903:  0x29, 0x13, 0x34, 0xfc, 0xc8, 0xcb, 0x00, 0x8d, 0x20, 0x0c, 0xd8, 0xd6, 0x43, 0x1e, 0x27, 0x0a,",
          "2904:  0xc5, 0x2f, 0x6a, 0x0e, 0x68, 0x71, 0xe3, 0xd6, 0x4d, 0x8c, 0x6d, 0x19, 0x00, 0xad, 0x88, 0xb5,",
          "2905:  0x54, 0x5b, 0x37, 0xd4, 0x18, 0xb4, 0xa8, 0xdc, 0x0f, 0xc2, 0x89, 0xfc, 0x3d, 0x75, 0xb5, 0x35,",
          "2906:  0x6c, 0xc6, 0x51, 0xb7, 0x93, 0x5f, 0x4b, 0xc4, 0x3d, 0x66, 0x94, 0x38, 0x6e, 0xe3, 0xb7, 0x83,",
          "2907:  0xb0, 0x9e, 0xb7, 0xf1, 0x57, 0x83, 0xb0, 0x8e, 0x02, 0x73, 0x80, 0x4b, 0x84, 0x7f, 0xe2, 0xc0,",
          "2908:  0xb9, 0xfd, 0xae, 0xd3, 0xf3, 0x6d, 0xff, 0x5d, 0x2f, 0x0e, 0xd5, 0x05, 0x21, 0x61, 0x3b, 0x6e,",
          "2909:  0x7b, 0x71, 0x88, 0x02, 0x4a, 0x7a, 0x30, 0x26, 0x73, 0x06, 0x95, 0x77, 0xfc, 0x52, 0xb1, 0x97,",
          "2910:  0xfb, 0xf9, 0xde, 0x4a, 0x47, 0x6b, 0x64, 0xbe, 0x22, 0x2a, 0x81, 0xee, 0xb7, 0x1c, 0x20, 0x37,",
          "2911:  0x76, 0x68, 0x1c, 0x07, 0x75, 0x2b, 0xcb, 0x91, 0x3c, 0x07, 0x93, 0x77, 0xd6, 0x6f, 0x5c, 0x5f,",
          "2912:  0x8b, 0x82, 0x50, 0x24, 0xeb, 0x5b, 0xb9, 0x35, 0x57, 0x2c, 0x38, 0x66, 0xa8, 0xc8, 0x12, 0xcc,",
          "2913:  0xdc, 0x79, 0x95, 0x2f, 0x39, 0x17, 0x76, 0x3b, 0x31, 0x65, 0x4c, 0x3f, 0x89, 0x51, 0x95, 0xc7,",
          "2914:  0x58, 0x57, 0x5e, 0xca, 0x21, 0xb1, 0x9f, 0x9e, 0xdc, 0x80, 0x53, 0x6d, 0x11, 0xb9, 0xab, 0x8b,",
          "2915:  0x65, 0x9f, 0xc9, 0x30, 0x5e, 0x9c, 0x66, 0xca, 0xbf, 0xee, 0xde, 0xde, 0xdc, 0xa9, 0x6b, 0x83,",
          "2916:  0x08, 0x70, 0x70, 0x39, 0xf7, 0x4b, 0x25, 0x98, 0xb0, 0x9e, 0xa4, 0x38, 0x80, 0x83, 0x93, 0x7b,",
          "2917:  0x45, 0xa3, 0x74, 0xc0, 0x57, 0x34, 0x9e, 0x81, 0x4a, 0x27, 0x6a, 0x05, 0x7e, 0xa0, 0xd3, 0xfa,",
          "2918:  0x27, 0xc5, 0xe1, 0x99, 0x82, 0xa1, 0xc6, 0x92, 0xbb, 0x50, 0xd5, 0x77, 0xcb, 0x55, 0xa2, 0x5f,",
          "2919:  0x51, 0x2e, 0x9e, 0x9e, 0xbc, 0xe6, 0xce, 0xb8, 0x91, 0x45, 0x5c, 0x18, 0x13, 0x23, 0x3f, 0x3d,",
          "2920:  0x1a, 0x10, 0x99, 0x23, 0x62, 0x4a, 0x30, 0x54, 0x18, 0xf7, 0x5f, 0x47, 0xa1, 0x8a, 0xb4, 0x13,",
          "2921:  0x2d, 0xc5, 0xb4, 0xce, 0xc8, 0xeb, 0xa1, 0xdc, 0x8d, 0x5b, 0xaa, 0xb1, 0x74, 0xdc, 0xe8, 0x26,",
          "2922:  0xae, 0x22, 0x87, 0x67, 0x96, 0x9b, 0xd2, 0xa1, 0x8e, 0x18, 0xcb, 0xfb, 0x1e, 0x31, 0xbe, 0x00,",
          "2923:  0x53, 0x8c, 0x6d, 0xad, 0xc5, 0xc1, 0x8e, 0x97, 0xf0, 0x41, 0xac, 0x82, 0x2c, 0xe6, 0x4c, 0x67,",
          "2924:  0xfd, 0xb2, 0x41, 0x62, 0x96, 0x96, 0x5c, 0x82, 0x19, 0x73, 0xd0, 0x47, 0xe3, 0x44, 0xc4, 0x54,",
          "2925:  0x64, 0xf8, 0x45, 0x1f, 0xa9, 0x98, 0xa3, 0x41, 0x45, 0x80, 0xfd, 0x65, 0xc8, 0x32, 0x1c, 0xcf,",
          "2926:  0x00, 0xb9, 0x22, 0x32, 0x36, 0xa3, 0x93, 0x08, 0x32, 0x7c, 0xb8, 0x2e, 0x7d, 0x25, 0xc8, 0x35,",
          "2927:  0x38, 0x21, 0xfb, 0x57, 0xbc, 0x49, 0xa0, 0x6b, 0x34, 0x2e, 0x18, 0xfd, 0x90, 0x62, 0x74, 0xe2,",
          "2928:  0x52, 0x3f, 0x09, 0x0e, 0x2a, 0xc7, 0x47, 0xa8, 0x06, 0xaf, 0x2c, 0x2b, 0x4b, 0xa9, 0x47, 0xa8,",
          "2929:  0x66, 0xb3, 0x52, 0x47, 0x9b, 0x8e, 0xbc, 0x0b, 0x9e, 0x34, 0x9f, 0x32, 0x24, 0x27, 0xdd, 0x87,",
          "2930:  0x65, 0x95, 0x43, 0xa1, 0xef, 0x5e, 0x5d, 0x1a, 0x48, 0x56, 0xc7, 0x61, 0xe5, 0xc9, 0x26, 0x9c,",
          "2931:  0xd1, 0xa8, 0x0b, 0xdc, 0x1c, 0x74, 0xe2, 0x80, 0xd1, 0x9a, 0xc7, 0xe8, 0xcd, 0xb8, 0x25, 0xb2,",
          "2932:  0x2e, 0xaa, 0xe6, 0x5d, 0x8d, 0x4b, 0x41, 0x72, 0x79, 0x10, 0x25, 0xae, 0xe2, 0x03, 0xb8, 0x70,",
          "2933:  0x6f, 0x85, 0x86, 0xde, 0x66, 0x8b, 0xde, 0x58, 0x5a, 0x11, 0xb9, 0x18, 0x96, 0xb7, 0x72, 0x21,",
          "2934:  0x45, 0xa0, 0xa1, 0xd1, 0x7b, 0x85, 0xc9, 0xa1, 0x7b, 0x85, 0x6f, 0x3a, 0x30, 0xa5, 0x07, 0xfb,",
          "2935:  0x63, 0x08, 0xa0, 0xb5, 0xb2, 0x01, 0xb4, 0x4b, 0x47, 0x75, 0x13, 0x95, 0xe6, 0x43, 0x76, 0x76,",
          "2936:  0xdf, 0xa9, 0x02, 0x88, 0x97, 0x8a, 0x02, 0x91, 0xe3, 0x7b, 0x0e, 0x46, 0x62, 0xda, 0x89, 0xf2,",
          "2937:  0x96, 0x4f, 0x04, 0xff, 0x05, 0xe6, 0xfb, 0x77, 0x3a, 0x0f, 0x3a, 0x72, 0x1e, 0xfd, 0xde, 0x1e,",
          "2938:  0x39, 0xaf, 0xc3, 0xa9, 0x20, 0x64, 0xd4, 0xef, 0xc6, 0x6a, 0xe5, 0xbc, 0x1c, 0x31, 0x6d, 0x1d,",
          "2939:  0x2a, 0xb5, 0xd7, 0x2b, 0x46, 0xa7, 0x56, 0x06, 0x11, 0xe1, 0xe0, 0xb2, 0xbc, 0x49, 0x53, 0x84,",
          "2940:  0xba, 0x4c, 0x64, 0xe2, 0x0d, 0x0a, 0x8e, 0x9a, 0xc2, 0x4c, 0x88, 0xd5, 0x46, 0x7a, 0x5b, 0x28,",
          "2941:  0x37, 0x21, 0x56, 0x2f, 0xae, 0xa3, 0xa1, 0x19, 0x6c, 0x15, 0xab, 0x05, 0x59, 0x45, 0x38, 0xb4,",
          "2942:  0x55, 0x4c, 0xe7, 0xe7, 0xc4, 0xd0, 0x77, 0x2d, 0xd2, 0xc5, 0x7a, 0x72, 0xe8, 0x62, 0xfd, 0x22,",
          "2943:  0x4c, 0x07, 0xe1, 0x16, 0x8d, 0x83, 0x84, 0xd6, 0xc5, 0x5c, 0x98, 0x9d, 0x12, 0x0d, 0xa1, 0x43,",
          "2944:  0x61, 0x2b, 0x19, 0x2c, 0xe6, 0xa8, 0xb3, 0x46, 0x65, 0xfa, 0x00, 0x46, 0x65, 0x88, 0x29, 0x3f,",
          "2945:  0x56, 0x8c, 0x29, 0x3f, 0x7e, 0x74, 0x53, 0x3e, 0xf3, 0x48, 0x4d, 0x39, 0x29, 0xc4, 0x94, 0x3f,",
          "2946:  0x0d, 0xa3, 0x9d, 0x38, 0xda, 0xed, 0xcd, 0x9e, 0xc8, 0xba, 0xe7, 0x6b, 0x1c, 0x88, 0x12, 0x67,",
          "2947:  0x67, 0xde, 0x9d, 0x7c, 0x70, 0xe6, 0x9d, 0xfb, 0x5a, 0x09, 0x4e, 0x19, 0x4b, 0xc7, 0xc7, 0x57,",
          "2948:  0xd0, 0xe0, 0x73, 0x5d, 0x5c, 0xe9, 0x94, 0xd9, 0x1e, 0x56, 0x14, 0xd6, 0x04, 0x74, 0x35, 0x06,",
          "2949:  0x2d, 0x2a, 0x11, 0xcc, 0xa4, 0xb1, 0xc8, 0x17, 0xce, 0x9b, 0xc1, 0x25, 0x05, 0x47, 0x4d, 0x21,",
          "2950:  0x9e, 0x39, 0xa4, 0x71, 0xa2, 0x0e, 0x73, 0xf2, 0xa9, 0x50, 0x4b, 0x06, 0x85, 0x36, 0x1d, 0x77,",
          "2951:  0x17, 0xfd, 0x74, 0x0a, 0x72, 0x53, 0x38, 0x29, 0xdd, 0x45, 0x3d, 0xeb, 0x34, 0x36, 0x55, 0x47,",
          "2952:  0x44, 0xad, 0x47, 0xfb, 0xd5, 0x11, 0x51, 0x08, 0x4d, 0xe1, 0xfe, 0xb7, 0x03, 0xaf, 0x1b, 0xd8,",
          "2953:  0x14, 0x8f, 0x61, 0x79, 0xdb, 0xcd, 0x2e, 0x6f, 0xeb, 0x47, 0x5f, 0xde, 0xfa, 0x6a, 0x31, 0x64,",
          "2954:  0xa9, 0xfb, 0x1b, 0x07, 0xa6, 0x0d, 0xfd, 0x63, 0xa8, 0x6a, 0x50, 0xe8, 0x83, 0x85, 0x46, 0x75,",
          "2955:  0x99, 0xc7, 0x9a, 0xa9, 0xdb, 0x37, 0x45, 0xdd, 0xe4, 0x66, 0x6e, 0xd1, 0x4f, 0x5f, 0x04, 0xda,",
          "2956:  0x67, 0x13, 0xd3, 0x83, 0x31, 0x71, 0xef, 0x99, 0x15, 0xb3, 0xa9, 0xcc, 0xca, 0x17, 0x71, 0x55,",
          "2957:  0xb3, 0xa9, 0x14, 0x9f, 0x0c, 0x95, 0x40, 0x91, 0xcd, 0x1e, 0x30, 0x6e, 0x2f, 0xeb, 0x2a, 0xfe,",
          "2958:  0x6b, 0xb2, 0xd9, 0x15, 0x1c, 0x35, 0x85, 0xdb, 0x86, 0xd9, 0x2c, 0xf3, 0x65, 0xda, 0x10, 0xb1,",
          "2959:  0xbb, 0x03, 0x55, 0x73, 0x01, 0xaa, 0x9e, 0x28, 0xb5, 0xda, 0xf5, 0xf2, 0xcf, 0x02, 0x2d, 0xa6,",
          "2960:  0x08, 0x34, 0x34, 0xee, 0xef, 0x3a, 0x70, 0x62, 0x40, 0x65, 0x0a, 0x8c, 0x7b, 0x27, 0xc6, 0x0a,",
          "2961:  0x0c, 0x79, 0xaa, 0xa9, 0x4e, 0x1b, 0x5e, 0x1a, 0x1d, 0xb2, 0xac, 0xda, 0xb2, 0x04, 0x63, 0x8a,",
          "2962:  0x77, 0xff, 0xcd, 0x81, 0x63, 0x59, 0x5d, 0x19, 0xb9, 0x02, 0x44, 0x56, 0x66, 0x39, 0x60, 0x7e,",
          "2963:  0xb4, 0x43, 0xe3, 0x1e, 0xaf, 0xb9, 0xd4, 0xfa, 0x8c, 0xe2, 0x44, 0x16, 0xfb, 0x28, 0x70, 0x40,",
          "2964:  0x29, 0x91, 0x34, 0x5c, 0xd7, 0xad, 0x9d, 0x8e, 0x94, 0x5b, 0x45, 0x8e, 0x14, 0xd3, 0x99, 0xf6,",
          "2965:  0x0e, 0x5a, 0x8b, 0x44, 0x5b, 0xbe, 0xfb, 0xad, 0x11, 0xd0, 0x07, 0x63, 0x22, 0x0e, 0x51, 0x50,",
          "2966:  0x14, 0x27, 0xf3, 0x76, 0x54, 0xf9, 0x10, 0x6f, 0x47, 0x8d, 0x3c, 0x28, 0x46, 0x20, 0x1f, 0x32,",
          "2967:  0x32, 0xbe, 0xa8, 0x65, 0xf4, 0x37, 0x0c, 0x0a, 0x6d, 0x3a, 0xae, 0x49, 0x2b, 0xd8, 0xa1, 0xb2,",
          "2968:  0xd0, 0x58, 0x56, 0x93, 0xd5, 0x14, 0x81, 0x86, 0x86, 0x6b, 0x52, 0x0f, 0x1a, 0x0d, 0xb5, 0x53,",
          "2969:  0xd4, 0x9a, 0xf0, 0xd6, 0x41, 0x81, 0xe1, 0x14, 0x5b, 0x51, 0xb4, 0xad, 0xfc, 0x3f, 0x4d, 0x71,",
          "2970:  0x39, 0x8a, 0xb6, 0x51, 0x60, 0xb8, 0xc7, 0x12, 0x46, 0x71, 0xdb, 0x6b, 0x05, 0xef, 0xa3, 0x75,",
          "2971:  0x2d, 0x45, 0xf9, 0x7d, 0xda, 0x63, 0xb9, 0xde, 0x4f, 0x82, 0x83, 0xca, 0xf1, 0x11, 0xd8, 0x89,",
          "2972:  0x69, 0x3d, 0xf0, 0x13, 0x9b, 0x1b, 0x64, 0x47, 0xe0, 0x5a, 0x1f, 0x05, 0x0e, 0x28, 0x45, 0x16,",
          "2973:  0xe1, 0x58, 0x7a, 0xb0, 0x99, 0x26, 0x9f, 0x48, 0x67, 0x50, 0xfb, 0xe1, 0x98, 0x45, 0x63, 0x9e,",
          "2974:  0x9e, 0x5b, 0x9b, 0xb6, 0x4a, 0x01, 0x12, 0x6e, 0xa2, 0x65, 0x6d, 0xd2, 0xd4, 0x20, 0xd4, 0x14,",
          "2975:  0xee, 0x47, 0xca, 0x7c, 0x75, 0x1c, 0x72, 0xad, 0xf7, 0xb1, 0x45, 0x0d, 0xb3, 0x23, 0x72, 0xe4,",
          "2976:  0x00, 0x23, 0xf2, 0x39, 0x98, 0xbc, 0xc3, 0xa2, 0x50, 0x47, 0xe4, 0x46, 0x87, 0x46, 0xe4, 0x2c,",
          "2977:  0xaa, 0xc1, 0x11, 0xb9, 0xb1, 0xa2, 0x22, 0x72, 0xe3, 0x0f, 0x19, 0x91, 0xfb, 0x8b, 0x51, 0x38,",
          "2978:  0xad, 0x0f, 0xb7, 0x69, 0x72, 0x37, 0x8a, 0xb7, 0x83, 0xb0, 0x29, 0x0e, 0x84, 0xbf, 0xe8, 0xc0,",
          "2979:  0xa4, 0x9c, 0x2f, 0xea, 0x45, 0x05, 0x79, 0x00, 0xda, 0x28, 0xe8, 0xd2, 0x5b, 0x46, 0xd8, 0xfc,",
          "2980:  0x86, 0x25, 0x28, 0xf7, 0xbc, 0x85, 0x8d, 0xc2, 0x8c, 0x46, 0xe4, 0x03, 0x00, 0xe9, 0x13, 0x66,",
          "2981:  0x8d, 0x82, 0x1e, 0x72, 0x4b, 0xf5, 0x43, 0xda, 0x30, 0xbe, 0xe9, 0x86, 0x16, 0x82, 0x96, 0x40,",
          "2982:  0xf2, 0x9a, 0xa3, 0x2f, 0x99, 0xc8, 0xd3, 0xac, 0x57, 0x1e, 0x49, 0xdb, 0x1c, 0xe4, 0xce, 0x09,",
          "2983:  0xc2, 0x78, 0x10, 0x36, 0xf9, 0x38, 0x51, 0x41, 0xcc, 0x37, 0x0d, 0x4a, 0xa6, 0x58, 0x8d, 0xbc,",
          "2984:  0x7a, 0xcd, 0x6b, 0x79, 0xa1, 0x4f, 0xe3, 0x15, 0x49, 0x6e, 0x3f, 0x24, 0x25, 0x00, 0x98, 0x32,",
          "2985:  0xea, 0xbb, 0xd5, 0x39, 0x7a, 0x90, 0x5b, 0x9d, 0x67, 0xde, 0x09, 0x33, 0x7d, 0x9d, 0x79, 0xa8,",
          "2986:  0x3b, 0x27, 0x0f, 0x7f, 0x5d, 0xc5, 0xfd, 0xd3, 0x31, 0xb3, 0x68, 0x5d, 0x8f, 0xea, 0xf2, 0x6e,",
          "2987:  0x61, 0x6c, 0x7a, 0x54, 0xf9, 0x9e, 0x05, 0x0e, 0x11, 0xeb, 0x31, 0x2a, 0x0d, 0x44, 0x5b, 0x24,",
          "2988:  0x1f, 0xa3, 0x1d, 0x2f, 0xa6, 0xe1, 0xa3, 0x1e, 0xa3, 0x6b, 0x5a, 0x08, 0x5a, 0x02, 0xc9, 0x56,",
          "2989:  0xe6, 0xb8, 0xf5, 0xe2, 0xd1, 0x8f, 0x5b, 0xb9, 0x3b, 0x3c, 0xf0, 0x0e, 0xd8, 0x67, 0x1c, 0x98,",
          "2990:  0x0e, 0x33, 0x23, 0x57, 0x1d, 0xb9, 0x6d, 0x3c, 0x8a, 0x59, 0x21, 0xef, 0x74, 0x67, 0x61, 0x98,",
          "2991:  0x93, 0x3f, 0x68, 0x49, 0x1b, 0x3d, 0xe4, 0x92, 0x66, 0x2e, 0x29, 0x8f, 0x0d, 0xbb, 0xa4, 0x4c,",
          "2992:  0x42, 0xfd, 0x3c, 0xc1, 0x78, 0xe1, 0xcf, 0x13, 0xc0, 0x80, 0xa7, 0x09, 0x6e, 0x43, 0xd5, 0x8f,",
          "2993:  0xa9, 0x97, 0x3c, 0xe4, 0x4d, 0x75, 0xf1, 0xfc, 0xdf, 0x52, 0xca, 0x00, 0x0d, 0x2f, 0xf7, 0xaf,",
          "2994:  0xca, 0x70, 0x3c, 0x6d, 0x91, 0xf4, 0x28, 0x8a, 0xaf, 0x8f, 0x52, 0xae, 0x71, 0x6e, 0xf5, 0xfa,",
          "2995:  0x78, 0x39, 0x45, 0xa0, 0xa1, 0xe1, 0xfe, 0x58, 0x97, 0xd1, 0x1b, 0x1d, 0x1a, 0xae, 0x06, 0x9b,",
          "2996:  0x4c, 0xb4, 0xb8, 0x95, 0xcf, 0x76, 0xd3, 0xa0, 0xd0, 0xa6, 0xe3, 0xce, 0xb8, 0xf4, 0x8b, 0x59,",
          "2997:  0xfe, 0x64, 0x57, 0xf9, 0xdb, 0x98, 0xe2, 0xc9, 0x17, 0x06, 0xbe, 0x33, 0x52, 0x4c, 0x4e, 0x43,",
          "2998:  0xdf, 0x09, 0xdc, 0x21, 0x1f, 0x18, 0xf9, 0xb4, 0x03, 0xc7, 0xb6, 0x33, 0xc9, 0x34, 0xa9, 0x49,",
          "2999:  0x3e, 0x62, 0x8a, 0x66, 0x36, 0x43, 0xc7, 0x0c, 0xe1, 0x2c, 0x9c, 0x61, 0x5e, 0xba, 0xfb, 0x9f,",
          "3000:  0x0e, 0xd8, 0xe6, 0xe9, 0x60, 0x9e, 0x95, 0xf5, 0x72, 0x54, 0x69, 0x9f, 0x97, 0xa3, 0x52, 0x27,",
          "3001:  0xac, 0x7c, 0x30, 0xa7, 0x7f, 0xe4, 0x10, 0x4e, 0xff, 0xe8, 0x50, 0xaf, 0xed, 0xf5, 0x50, 0xee,",
          "3002:  0x06, 0x75, 0xe5, 0xb7, 0x9b, 0xc3, 0xb0, 0x95, 0x65, 0xe4, 0x70, 0xf7, 0x8f, 0x47, 0xcd, 0x3e,",
          "3003:  0x5d, 0x1d, 0xc5, 0xff, 0x40, 0x54, 0xbb, 0xa1, 0x33, 0x6e, 0x65, 0xcd, 0xaf, 0xf7, 0x65, 0xdc,",
          "3004:  0xbe, 0xe3, 0xf0, 0x99, 0x16, 0xb2, 0x81, 0x86, 0x25, 0xdc, 0x8e, 0xef, 0x93, 0x66, 0x71, 0x07,",
          "3005:  0x2a, 0x7c, 0x6b, 0x23, 0x02, 0x6e, 0x95, 0x8c, 0x52, 0x95, 0xcb, 0x0a, 0x7e, 0x7f, 0x6f, 0xee,",
          "3006:  0xed, 0x87, 0x57, 0x2b, 0x2d, 0x8d, 0x9a, 0x3f, 0x61, 0x50, 0xe5, 0xbf, 0x45, 0x46, 0x88, 0xda,",
          "3007:  0x34, 0xdd, 0xd4, 0xb6, 0x28, 0x45, 0x14, 0x92, 0x6e, 0x62, 0xe4, 0x90, 0x10, 0xaa, 0xe2, 0x8d,",
          "3008:  0x23, 0x21, 0x54, 0xee, 0xad, 0xd6, 0x74, 0x5e, 0x46, 0x8a, 0xb8, 0xbf, 0x37, 0xf7, 0xc2, 0xe1,",
          "3009:  0x85, 0xea, 0xe2, 0x68, 0x44, 0xb8, 0xff, 0x58, 0x36, 0x63, 0x57, 0x25, 0x5a, 0xff, 0x40, 0x8c,",
          "3010:  0xdd, 0xe7, 0x73, 0x63, 0xf7, 0x5c, 0xdf, 0xd8, 0x9d, 0x36, 0xef, 0x00, 0x65, 0x46, 0xe3, 0xe3,",
          "3011:  0x5e, 0x60, 0xf7, 0xdf, 0xc7, 0x0b, 0xcf, 0xe2, 0xd5, 0x6e, 0x10, 0x53, 0xb6, 0x16, 0x77, 0xc3,",
          "3012:  0x20, 0x6c, 0xaa, 0x67, 0x2e, 0x2d, 0xcf, 0x22, 0x83, 0xc6, 0x3c, 0xbd, 0xfb, 0x25, 0x71, 0xde,",
          "3013:  0x69, 0x25, 0x97, 0xf1, 0x5e, 0x6e, 0x89, 0x67, 0xa2, 0x64, 0x7a, 0xab, 0xee, 0x65, 0xf9, 0x36,",
          "3014:  0x94, 0xc4, 0x91, 0xbb, 0x30, 0xbe, 0x29, 0x9f, 0xaa, 0x28, 0xe6, 0x6e, 0x94, 0x7a, 0xf7, 0x42,",
          "3015:  0xdc, 0x42, 0x4d, 0x1f, 0xc1, 0xb8, 0x6f, 0x7e, 0x62, 0x2a, 0xcd, 0xfd, 0xf5, 0x32, 0x1c, 0xcb,",
          "3016:  0x3d, 0x62, 0xc4, 0x37, 0xfc, 0xe9, 0x8b, 0x55, 0xf9, 0xe8, 0xbc, 0x7e, 0x65, 0x5a, 0x53, 0x90,",
          "3017:  0xf7, 0x02, 0xd4, 0x69, 0xa7, 0x15, 0xf5, 0x84, 0xe3, 0x32, 0x72, 0x68, 0xc7, 0x45, 0xfb, 0xba,",
          "3018:  0xcb, 0x9a, 0x0b, 0x5a, 0x1c, 0x55, 0x4e, 0xef, 0xa8, 0x7c, 0x88, 0x23, 0x9b, 0xd3, 0x6b, 0x5d,",
          "3019:  0x11, 0x1c, 0x7b, 0xbc, 0x57, 0x04, 0x03, 0x38, 0x26, 0x55, 0xd4, 0x29, 0x5c, 0x0f, 0x91, 0xa9,",
          "3020:  0x75, 0x82, 0x8f, 0xa8, 0xe5, 0x2c, 0x1b, 0xcc, 0xf3, 0x75, 0x3f, 0x55, 0xe2, 0xee, 0x9b, 0x6c,",
          "3021:  0xec, 0x6b, 0x69, 0x70, 0xfc, 0x8d, 0x30, 0xe6, 0x75, 0x93, 0xad, 0xa8, 0xef, 0xe9, 0x90, 0x45,",
          "3022:  0x01, 0x45, 0x85, 0x25, 0xab, 0x30, 0x52, 0xf7, 0x92, 0xf4, 0x5f, 0x12, 0x0e, 0xa3, 0x9c, 0x89,",
          "3023:  0x84, 0x79, 0x09, 0x45, 0xc1, 0x85, 0x3c, 0x05, 0x23, 0x89, 0xd7, 0xcc, 0xbc, 0x69, 0xba, 0xe1,",
          "3024:  0x35, 0x19, 0x0a, 0xa8, 0xbd, 0xba, 0x8c, 0xec, 0xb3, 0xba, 0xbc, 0x60, 0xfd, 0x7f, 0x87, 0x75,",
          "3025:  0xea, 0xd2, 0xff, 0x9f, 0x1b, 0xf2, 0x96, 0x41, 0x86, 0xd6, 0xfd, 0x31, 0x98, 0xb4, 0xff, 0x93,",
          "3026:  0xe3, 0x40, 0x97, 0x94, 0xdc, 0x7f, 0x19, 0x81, 0xa9, 0x4c, 0x9a, 0x5f, 0x66, 0x94, 0x3b, 0xfb,",
          "3027:  0x8e, 0x72, 0x71, 0x9e, 0xd6, 0x0d, 0xa9, 0x4a, 0xe2, 0xb4, 0xce, 0xd3, 0xba, 0x21, 0x45, 0x89,",
          "3028:  0xe3, 0xbd, 0x52, 0x8f, 0x7b, 0xd8, 0x0d, 0x55, 0x54, 0x5e, 0xf7, 0xca, 0xb2, 0x80, 0xa2, 0xc2,",
          "3029:  0xf2, 0x0d, 0xec, 0x24, 0x13, 0x46, 0x51, 0xda, 0x08, 0x35, 0x6b, 0xae, 0x14, 0xf1, 0xdc, 0x9a,",
          "3030:  0x4a, 0x69, 0x15, 0x1b, 0x7a, 0x1b, 0x82, 0x19, 0x89, 0xe4, 0xa3, 0x8e, 0xfd, 0xd0, 0xdc, 0x58,",
          "3031:  0x11, 0xa7, 0x49, 0xf9, 0x2c, 0x4a, 0x39, 0x83, 0x1e, 0xfc, 0xde, 0x1c, 0xd3, 0x13, 0x78, 0xfc,",
          "3032:  0xd1, 0x4c, 0x60, 0x18, 0x30, 0x79, 0xdf, 0x0c, 0xd5, 0xb6, 0x17, 0x06, 0x0d, 0xca, 0x12, 0xf9,",
          "3033:  0x7f, 0x3a, 0x55, 0xb9, 0x7b, 0xba, 0x96, 0x02, 0xd1, 0xe0, 0xc5, 0xbf, 0x56, 0x89, 0x8a, 0xc9,",
          "3034:  0x4d, 0x4c, 0xd5, 0xfa, 0xd7, 0x2a, 0x03, 0x46, 0x9b, 0xc6, 0xfd, 0x03, 0x07, 0x4e, 0x0d, 0x6c,",
          "3035:  0x8c, 0xef, 0xdf, 0xf0, 0xa7, 0xfb, 0x87, 0x25, 0x38, 0x31, 0x20, 0x0d, 0x96, 0xf4, 0x1e, 0xd9,",
          "3036:  0x7b, 0x84, 0x2a, 0xcf, 0x76, 0x6a, 0xe8, 0xd8, 0x38, 0xdc, 0x32, 0x64, 0x96, 0x82, 0xf2, 0x63,",
          "3037:  0x5d, 0x0a, 0xdc, 0x2f, 0x95, 0xc0, 0x7a, 0x39, 0x93, 0x7c, 0xd0, 0xce, 0xf8, 0x76, 0x8a, 0xca,",
          "3038:  0x4e, 0x96, 0xcc, 0x75, 0xc6, 0xb8, 0x6c, 0xb5, 0x41, 0x09, 0xe4, 0xf9, 0xf1, 0x5a, 0xda, 0x7f,",
          "3039:  0xbc, 0x92, 0x56, 0x9a, 0x5a, 0x5f, 0x2e, 0x3e, 0xb5, 0xbe, 0xda, 0x97, 0x56, 0xff, 0xab, 0x8e,",
          "3040:  0x1c, 0x69, 0xb9, 0x2a, 0x19, 0x0b, 0xeb, 0x3c, 0xc0, 0xc2, 0xbe, 0x05, 0x2a, 0x8c, 0xb6, 0x1a,",
          "3041:  0xdc, 0xb3, 0x53, 0x96, 0xd8, 0xbc, 0x40, 0xae, 0xe0, 0xa8, 0x29, 0xc4, 0xa5, 0xdb, 0x56, 0x2b,",
          "3042:  0xba, 0x7b, 0xa1, 0xdd, 0x49, 0x7a, 0xca, 0x26, 0x9b, 0x4b, 0xb7, 0x1a, 0x83, 0x16, 0x95, 0xfb,",
          "3043:  0x5f, 0x8e, 0xec, 0x4e, 0xe5, 0xa3, 0x3f, 0x9f, 0xbb, 0x0c, 0x79, 0x70, 0xf7, 0xf6, 0xe7, 0x01,",
          "3044:  0x7c, 0xfd, 0x98, 0x41, 0x31, 0x0f, 0x6a, 0x9a, 0xc7, 0x11, 0xec, 0x57, 0x1e, 0x53, 0x18, 0x5a,",
          "3045:  0xf2, 0x32, 0x93, 0xa7, 0xbc, 0xdf, 0xe4, 0x71, 0xff, 0xdd, 0x81, 0xcc, 0x62, 0x41, 0x3a, 0x30,",
          "3046:  0xca, 0x35, 0xe8, 0x15, 0xf3, 0xf4, 0x82, 0xcd, 0x9a, 0x4f, 0x2c, 0x35, 0x2c, 0xc4, 0x4f, 0x94,",
          "3047:  0x82, 0x48, 0x4b, 0x79, 0xe7, 0xa5, 0x22, 0x9e, 0x07, 0xb1, 0x05, 0x72, 0xff, 0x5e, 0xfd, 0x43,",
          "3048:  0x89, 0xf6, 0xf4, 0xdd, 0xe7, 0x61, 0xa6, 0x4f, 0x29, 0x71, 0x3d, 0x2a, 0x4a, 0xdf, 0x9b, 0xb0,",
          "3049:  0x46, 0xa0, 0xb8, 0xac, 0x89, 0x12, 0xc7, 0x1d, 0xfc, 0xe3, 0x79, 0xf6, 0xe4, 0xf3, 0x0e, 0xcc,",
          "3050:  0xb0, 0x3c, 0xbf, 0x47, 0xd5, 0x76, 0x3a, 0x72, 0xd5, 0x87, 0xc2, 0x7e, 0x25, 0xdc, 0xff, 0x55,",
          "3051:  0xe6, 0x49, 0xfe, 0xa3, 0x9b, 0x5e, 0x5c, 0x9c, 0xa1, 0x8b, 0x0b, 0x9f, 0x62, 0xfe, 0x16, 0xad,",
          "3052:  0x77, 0x5b, 0x7d, 0xb9, 0x39, 0xeb, 0x0a, 0x8e, 0x9a, 0x22, 0xf3, 0xb0, 0x5e, 0x79, 0xdf, 0x87,",
          "3053:  0xf5, 0x9e, 0x83, 0x49, 0xfb, 0x4d, 0x15, 0x11, 0x42, 0x53, 0x87, 0x0f, 0xf6, 0xf3, 0x2b, 0x98,",
          "3054:  0xa1, 0xca, 0x3d, 0xcc, 0x36, 0xba, 0xef, 0xc3, 0x6c, 0xcf, 0x40, 0x45, 0x3d, 0x32, 0x96, 0xc6,",
          "3055:  0x77, 0x65, 0xe2, 0x8f, 0x82, 0xa1, 0xc6, 0x72, 0x03, 0xd1, 0xf6, 0xc2, 0xae, 0xd7, 0xe2, 0x2d,",
          "3056:  0xa4, 0xf2, 0x01, 0xf5, 0xcc, 0xba, 0xa6, 0x31, 0x68, 0x51, 0xf1, 0x1a, 0x27, 0x41, 0x9b, 0xbe,",
          "3057:  0x1c, 0x85, 0x69, 0x64, 0x44, 0xd7, 0x78, 0x43, 0xc1, 0x51, 0x53, 0xb8, 0xff, 0xec, 0x40, 0xfe,",
          "3058:  0x85, 0xa4, 0x4c, 0x0e, 0xa2, 0xb3, 0x6f, 0x0e, 0x62, 0x36, 0xbf, 0xaa, 0x74, 0xa0, 0xfc, 0x2a,",
          "3059:  0x3b, 0xf5, 0xa9, 0xfc, 0xc0, 0xd4, 0xa7, 0x37, 0x98, 0x0b, 0xf1, 0x32, 0x47, 0x6a, 0x62, 0xd0,",
          "3060:  0x65, 0x78, 0xe2, 0xc2, 0x98, 0xef, 0xe9, 0x14, 0xef, 0x49, 0xe9, 0x56, 0x2d, 0x2d, 0x0a, 0x22,",
          "3061:  0x85, 0xa9, 0xcd, 0x7f, 0xe5, 0xdb, 0x67, 0x9f, 0xf8, 0xea, 0xb7, 0xcf, 0x3e, 0xf1, 0x8d, 0x6f,",
          "3062:  0x9f, 0x7d, 0xe2, 0xc3, 0xf7, 0xce, 0x3a, 0x5f, 0xb9, 0x77, 0xd6, 0xf9, 0xea, 0xbd, 0xb3, 0xce,",
          "3063:  0x37, 0xee, 0x9d, 0x75, 0xbe, 0x75, 0xef, 0xac, 0xf3, 0x99, 0x7f, 0x38, 0xfb, 0xc4, 0xcb, 0x95,",
          "3064:  0x74, 0x64, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xef, 0x41, 0x0e, 0x4d, 0x78, 0x00,",
          "3065:  0x00,",
          "",
          "[Added Lines]",
          "2666:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3d, 0x5b, 0x6c, 0x24, 0xd9,",
          "2667:  0x55, 0x5b, 0xdd, 0x7e, 0x74, 0x1f, 0x3f, 0x66, 0x7c, 0xe7, 0xb1, 0xce, 0xb0, 0x19, 0x8f, 0x6a,",
          "2668:  0x95, 0x64, 0x21, 0x89, 0xcd, 0x0e, 0x4b, 0x58, 0xb2, 0x61, 0x83, 0xdb, 0x9e, 0x87, 0x67, 0x3c,",
          "2669:  0x33, 0xde, 0x63, 0xcf, 0x0c, 0xd9, 0x84, 0xb0, 0xe5, 0xea, 0xdb, 0xed, 0x1a, 0x77, 0x57, 0xf5,",
          "2670:  0xd6, 0xad, 0xf6, 0xb8, 0x13, 0xf2, 0x42, 0x81, 0xac, 0xc8, 0x53, 0x09, 0x1f, 0x89, 0x84, 0x20,",
          "2671:  0x3c, 0x84, 0xc4, 0x47, 0x04, 0x7c, 0x01, 0x42, 0x7c, 0x90, 0xaf, 0x20, 0x3e, 0x88, 0x04, 0x4a,",
          "2672:  0x02, 0x11, 0x26, 0x19, 0x40, 0x01, 0x24, 0x40, 0x40, 0x7e, 0x18, 0xf1, 0x81, 0xee, 0xa3, 0xee,",
          "2673:  0xbd, 0x55, 0xdd, 0x3d, 0xb6, 0xc7, 0x35, 0x93, 0x28, 0xe2, 0xcf, 0x7d, 0xce, 0xa9, 0x73, 0xce,",
          "2674:  0x7d, 0x9d, 0x7b, 0xce, 0xb9, 0xe7, 0x5e, 0xc3, 0x6a, 0x33, 0x48, 0xb6, 0xba, 0x9b, 0xf3, 0x7e,",
          "2675:  0xd4, 0x5e, 0xf0, 0xe2, 0x66, 0xd4, 0x89, 0xa3, 0x3b, 0xe2, 0x8f, 0xb7, 0xfa, 0xf5, 0x85, 0x9d,",
          "2676:  0xf3, 0x0b, 0x9d, 0xed, 0xe6, 0x82, 0xd7, 0x09, 0xd8, 0x82, 0xd7, 0xe9, 0xb4, 0x02, 0xdf, 0x4b,",
          "2677:  0x82, 0x28, 0x5c, 0xd8, 0x79, 0xd6, 0x6b, 0x75, 0xb6, 0xbc, 0x67, 0x17, 0x9a, 0x34, 0xa4, 0xb1,",
          "2678:  0x97, 0xd0, 0xfa, 0x7c, 0x27, 0x8e, 0x92, 0x88, 0xbc, 0xc3, 0x70, 0x9b, 0x4f, 0xb9, 0x89, 0x3f,",
          "2681:  0xf1, 0x4b, 0xfc, 0x10, 0x7f, 0x49, 0x61, 0x67, 0xdc, 0xed, 0xe7, 0xd9, 0x7c, 0x10, 0x71, 0xf5,",
          "2682:  0x16, 0xfc, 0x28, 0xa6, 0x0b, 0x3b, 0x7d, 0x0a, 0x9d, 0x79, 0xce, 0xd0, 0xb4, 0x3d, 0x7f, 0x2b,",
          "2683:  0x08, 0x69, 0xdc, 0x33, 0x6d, 0x6a, 0xd3, 0xc4, 0x1b, 0xf4, 0xd5, 0xc2, 0xb0, 0xaf, 0xe2, 0x6e,",
          "2684:  0x98, 0x04, 0x6d, 0xda, 0xf7, 0xc1, 0xdb, 0xf6, 0xfb, 0x80, 0xf9, 0x5b, 0xb4, 0xed, 0xe5, 0xbf,",
          "2685:  0x73, 0x5f, 0x85, 0xa9, 0xc5, 0xdb, 0xeb, 0x8b, 0xdd, 0x64, 0x6b, 0x29, 0x0a, 0x1b, 0x41, 0x93,",
          "2686:  0xfc, 0x38, 0x4c, 0xf8, 0xad, 0x2e, 0x4b, 0x68, 0x7c, 0xdd, 0x6b, 0xd3, 0x59, 0xe7, 0x9c, 0xf3,",
          "2687:  0x4c, 0xb5, 0x76, 0xe2, 0x2b, 0x7b, 0x73, 0x4f, 0xdc, 0xdb, 0x9b, 0x9b, 0x58, 0x32, 0x28, 0xb4,",
          "2688:  0xe9, 0xc8, 0x0f, 0xc3, 0x78, 0x1c, 0xb5, 0xe8, 0x22, 0x5e, 0x9f, 0x2d, 0x89, 0x4f, 0x8e, 0xa9,",
          "2689:  0x4f, 0xc6, 0x51, 0x82, 0x31, 0xc5, 0xbb, 0x5f, 0x2b, 0x01, 0x2c, 0x76, 0x3a, 0x6b, 0x71, 0x74,",
          "2690:  0x87, 0xfa, 0x09, 0x79, 0x05, 0x2a, 0xbc, 0x17, 0xea, 0x5e, 0xe2, 0x09, 0x69, 0x13, 0xe7, 0x7f,",
          "2691:  0x74, 0x5e, 0x36, 0x66, 0xde, 0x6e, 0x8c, 0x19, 0x39, 0x4e, 0x3d, 0xbf, 0xf3, 0xec, 0xfc, 0x8d,",
          "2692:  0x4d, 0xfe, 0xfd, 0x35, 0x9a, 0x78, 0x35, 0xa2, 0x84, 0x81, 0x81, 0xa1, 0xe6, 0x4a, 0x42, 0x18,",
          "2693:  0x61, 0x1d, 0xea, 0x0b, 0xc5, 0x26, 0xce, 0xaf, 0xce, 0x1f, 0x65, 0x8a, 0xcc, 0x1b, 0xcd, 0xd7,",
          "2694:  0x3b, 0xd4, 0xaf, 0x4d, 0x2a, 0xc9, 0x23, 0xfc, 0x17, 0x0a, 0x39, 0x64, 0x07, 0xc6, 0x58, 0xe2,",
          "2695:  0x25, 0x5d, 0x36, 0x5b, 0x16, 0x12, 0xaf, 0x17, 0x26, 0x51, 0x70, 0xad, 0x4d, 0x2b, 0x99, 0x63,",
          "2696:  0xf2, 0x37, 0x2a, 0x69, 0xee, 0xdf, 0x39, 0x30, 0x6d, 0x88, 0x57, 0x03, 0x96, 0x90, 0xf7, 0xf4,",
          "2697:  0x75, 0xee, 0xfc, 0xc1, 0x3a, 0x97, 0x7f, 0x2d, 0xba, 0xf6, 0xb8, 0x12, 0x56, 0x49, 0x21, 0x56,",
          "2698:  0xc7, 0xb6, 0x61, 0x34, 0x48, 0x68, 0x9b, 0xcd, 0x96, 0xce, 0x95, 0x9f, 0x99, 0x38, 0x7f, 0xb9,",
          "2699:  0xa8, 0x76, 0xd6, 0xa6, 0x94, 0xd0, 0xd1, 0x15, 0xce, 0x1e, 0xa5, 0x14, 0xf7, 0xbb, 0x60, 0xb7,",
          "2700:  0x8f, 0x77, 0x38, 0x79, 0x16, 0x26, 0x58, 0xd4, 0x8d, 0x7d, 0x8a, 0xb4, 0x13, 0xb1, 0x59, 0xe7,",
          "2701:  0x5c, 0x99, 0x4f, 0x3d, 0x3e, 0x53, 0xd7, 0x0d, 0x18, 0x6d, 0x1a, 0xf2, 0x29, 0x07, 0x26, 0xeb,",
          "2702:  0x94, 0x25, 0x41, 0x28, 0xe4, 0xa7, 0xca, 0x6f, 0x1c, 0x59, 0xf9, 0x14, 0xb8, 0x6c, 0x98, 0xd7,",
          "2703:  0x4e, 0xaa, 0x86, 0x4c, 0x5a, 0x40, 0x86, 0x19, 0xf9, 0x7c, 0xc5, 0xd5, 0x29, 0xf3, 0xe3, 0xa0,",
          "2704:  0xc3, 0x7f, 0x8b, 0x39, 0x63, 0xad, 0xb8, 0x65, 0x83, 0x42, 0x9b, 0x8e, 0x84, 0x30, 0xca, 0x57,",
          "2705:  0x14, 0x9b, 0x1d, 0x11, 0xfa, 0xaf, 0x1c, 0x4d, 0x7f, 0xd5, 0xa9, 0x7c, 0xb1, 0x9a, 0xde, 0xe7,",
          "2706:  0xbf, 0x18, 0x4a, 0x31, 0xe4, 0x93, 0x0e, 0xcc, 0xaa, 0x15, 0x8f, 0x54, 0x76, 0xe8, 0xed, 0xad,",
          "2707:  0x20, 0xa1, 0xad, 0x80, 0x25, 0xb3, 0xa3, 0x42, 0x87, 0x85, 0x83, 0xcd, 0xad, 0x4b, 0x71, 0xd4,",
          "2708:  0xed, 0x5c, 0x0d, 0xc2, 0x7a, 0xed, 0x9c, 0x92, 0x34, 0xbb, 0x34, 0x84, 0x31, 0x0e, 0x15, 0x49,",
          "2709:  0x3e, 0xe7, 0xc0, 0x99, 0xd0, 0x6b, 0x53, 0xd6, 0xf1, 0xf8, 0xd0, 0x4a, 0x74, 0xad, 0xe5, 0xf9,",
          "2710:  0xdb, 0x42, 0xa3, 0xb1, 0x87, 0xd3, 0xc8, 0x55, 0x1a, 0x9d, 0xb9, 0x3e, 0x94, 0x35, 0x3e, 0x40,",
          "2711:  0x2c, 0xf9, 0x2d, 0x07, 0x66, 0xa2, 0xb8, 0xb3, 0xe5, 0x85, 0xb4, 0x9e, 0x62, 0xd9, 0xec, 0xb8,",
          "2712:  0x58, 0x7a, 0xef, 0x3d, 0xda, 0x10, 0xdd, 0xc8, 0xb3, 0xbd, 0x16, 0x85, 0x41, 0x12, 0xc5, 0xeb,",
          "2713:  0x34, 0x49, 0x82, 0xb0, 0xc9, 0x6a, 0xa7, 0xee, 0xed, 0xcd, 0xcd, 0xf4, 0x51, 0x61, 0xbf, 0x3e,",
          "2714:  0xe4, 0xfd, 0x30, 0xc1, 0x7a, 0xa1, 0x7f, 0x3b, 0x08, 0xeb, 0xd1, 0x5d, 0x36, 0x5b, 0x29, 0x62,",
          "2715:  0xf9, 0xae, 0x6b, 0x86, 0x6a, 0x01, 0x1a, 0x01, 0x68, 0x4b, 0x1b, 0x3c, 0x70, 0x66, 0x2a, 0x55,",
          "2716:  0x8b, 0x1e, 0x38, 0x33, 0x99, 0x1e, 0x20, 0x96, 0x7c, 0xcc, 0x81, 0x29, 0x16, 0x34, 0x43, 0x2f,",
          "2717:  0xe9, 0xc6, 0xf4, 0x2a, 0xed, 0xb1, 0x59, 0x10, 0x8a, 0x5c, 0x39, 0x62, 0xaf, 0x58, 0x2c, 0x6b,",
          "2718:  0xa7, 0x94, 0x8e, 0x53, 0x36, 0x94, 0x61, 0x56, 0xee, 0xa0, 0x85, 0x66, 0xa6, 0xf5, 0x44, 0xb1,",
          "2719:  0x0b, 0xcd, 0x4c, 0xea, 0xa1, 0x22, 0xdd, 0x3f, 0x2f, 0xc1, 0xf1, 0xfc, 0x1e, 0x44, 0x7e, 0xc7,",
          "2720:  0x81, 0x63, 0x77, 0xee, 0x26, 0x1b, 0xd1, 0x36, 0x0d, 0x59, 0xad, 0xc7, 0x2d, 0x85, 0xb0, 0xbe,",
          "2721:  0x13, 0xe7, 0xfd, 0x62, 0x77, 0xbb, 0xf9, 0x2b, 0x59, 0x29, 0x17, 0xc2, 0x24, 0xee, 0xd5, 0x9e,",
          "2722:  0x54, 0xed, 0x39, 0x76, 0xe5, 0xf6, 0x86, 0x8d, 0xc5, 0xbc, 0x52, 0x67, 0x3e, 0xee, 0xc0, 0xc9,",
          "2723:  0x41, 0x2c, 0xc8, 0x71, 0x28, 0x6f, 0xd3, 0x9e, 0x74, 0x70, 0x90, 0xff, 0x49, 0x7e, 0x16, 0x46,",
          "2724:  0x77, 0xbc, 0x56, 0x97, 0x2a, 0x47, 0xe1, 0xd2, 0xd1, 0x1a, 0xa2, 0x35, 0x43, 0xc9, 0xf5, 0xed,",
          "2725:  0xa5, 0xe7, 0x1d, 0xf7, 0x2f, 0xcb, 0x30, 0x61, 0x6d, 0x15, 0x8f, 0xc1, 0xf9, 0x89, 0x32, 0xce,",
          "2726:  0xcf, 0xb5, 0xc2, 0x76, 0xb9, 0xa1, 0xde, 0xcf, 0xdd, 0x9c, 0xf7, 0x73, 0xa3, 0x38, 0x91, 0x0f,",
          "2727:  0x74, 0x7f, 0x48, 0x02, 0xd5, 0xa8, 0xc3, 0x9d, 0x5b, 0xbe, 0x8b, 0x8e, 0x14, 0x31, 0x84, 0x37,",
          "2728:  0x52, 0x76, 0xb5, 0xa9, 0x7b, 0x7b, 0x73, 0x55, 0xfd, 0x13, 0x8d, 0x20, 0xf7, 0xeb, 0x0e, 0x9c,",
          "2729:  0xb4, 0x74, 0x5c, 0x8a, 0xc2, 0x7a, 0x20, 0x86, 0xf6, 0x1c, 0x8c, 0x24, 0xbd, 0x4e, 0xea, 0x41,",
          "2730:  0xeb, 0x9e, 0xda, 0xe8, 0x75, 0x28, 0x0a, 0x0c, 0xf7, 0x99, 0xdb, 0x94, 0x31, 0xaf, 0x49, 0xf3,",
          "2731:  0x3e, 0xf3, 0x35, 0x09, 0xc6, 0x14, 0x4f, 0x62, 0x20, 0x2d, 0x8f, 0x25, 0x1b, 0xb1, 0x17, 0x32,",
          "2732:  0xc1, 0x7e, 0x23, 0x68, 0x53, 0xd5, 0xc1, 0x3f, 0x72, 0xb0, 0x19, 0xc3, 0xbf, 0xa8, 0x9d, 0xbe,",
          "2733:  0xb7, 0x37, 0x47, 0x56, 0xfb, 0x38, 0xe1, 0x00, 0xee, 0xee, 0xe7, 0x1c, 0x38, 0x3d, 0xd8, 0xad,",
          "2734:  0x21, 0x6f, 0x84, 0x31, 0x46, 0xe3, 0x1d, 0x1a, 0xab, 0xd6, 0x99, 0x21, 0x11, 0x50, 0x54, 0x58,",
          "2735:  0xb2, 0x00, 0x55, 0x6d, 0x72, 0x55, 0x1b, 0x67, 0x14, 0x69, 0xd5, 0xd8, 0x69, 0x43, 0xc3, 0x3b,",
          "2736:  0x8d, 0xff, 0x50, 0x4e, 0x90, 0xee, 0x34, 0x11, 0x6f, 0x08, 0x8c, 0xfb, 0xf7, 0x0e, 0x1c, 0xb3,",
          "2737:  0xb4, 0x7a, 0x0c, 0x5e, 0x6e, 0x98, 0xf5, 0x72, 0x57, 0x0a, 0x9b, 0xcf, 0x43, 0xdc, 0xdc, 0x2f,",
          "2738:  0x8f, 0xc1, 0x8c, 0x3d, 0xeb, 0x85, 0x39, 0x16, 0x01, 0x16, 0xed, 0x44, 0x37, 0x71, 0x55, 0xf5,",
          "2739:  0xb9, 0x09, 0xb0, 0x24, 0x18, 0x53, 0x3c, 0xef, 0xc4, 0x8e, 0x97, 0x6c, 0xa9, 0x0e, 0xd7, 0x9d,",
          "2740:  0xb8, 0xe6, 0x25, 0x5b, 0x28, 0x30, 0xe4, 0x45, 0x98, 0x4e, 0xbc, 0xb8, 0x49, 0x13, 0xa4, 0x3b,",
          "2741:  0x01, 0x4b, 0xd7, 0x4b, 0xb5, 0x76, 0x5a, 0xd1, 0x4e, 0x6f, 0x64, 0xb0, 0x98, 0xa3, 0x26, 0xaf,",
          "2742:  0xc2, 0xc8, 0x16, 0x6d, 0xb5, 0x95, 0x5f, 0xb3, 0x5e, 0xdc, 0x0a, 0x17, 0x6d, 0xbd, 0x4c, 0x5b,",
          "2743:  0xed, 0x5a, 0x85, 0xab, 0xcc, 0xff, 0x42, 0x21, 0x8a, 0xfc, 0xa2, 0x03, 0xd5, 0xed, 0x2e, 0x4b,",
          "2744:  0xa2, 0x76, 0xf0, 0x3e, 0x3a, 0x5b, 0x11, 0x82, 0x7f, 0xa6, 0x60, 0xc1, 0x57, 0x53, 0xfe, 0x72,",
          "2745:  0xbd, 0xeb, 0x9f, 0x68, 0x24, 0x93, 0x0f, 0xc0, 0xf8, 0x36, 0x8b, 0xc2, 0x90, 0x72, 0x4f, 0x85,",
          "2746:  0x2b, 0x71, 0xab, 0x68, 0x25, 0x24, 0xf7, 0xda, 0x04, 0x1f, 0x5b, 0xf5, 0x03, 0x53, 0x99, 0xa2,",
          "2747:  0x1b, 0xea, 0x41, 0x4c, 0xfd, 0x24, 0x8a, 0x7b, 0xb3, 0xf0, 0x48, 0xba, 0x61, 0x39, 0xe5, 0x2f,",
          "2748:  0xbb, 0x41, 0xff, 0x44, 0x23, 0x99, 0xf4, 0x60, 0xac, 0xd3, 0xea, 0x36, 0x83, 0x70, 0x76, 0x42,",
          "2749:  0xe8, 0x70, 0xb3, 0x60, 0x1d, 0xd6, 0x04, 0xf3, 0x1a, 0x70, 0xa3, 0x22, 0xff, 0x46, 0x25, 0x90,",
          "2750:  0x3c, 0x0d, 0xa3, 0xfe, 0x96, 0x17, 0x27, 0xb3, 0x93, 0x62, 0xce, 0xea, 0x45, 0xb4, 0xc4, 0x81,",
          "2751:  0x28, 0x71, 0xee, 0x6f, 0x94, 0xe0, 0xcc, 0xf0, 0x86, 0xc9, 0xd5, 0xe4, 0x77, 0x63, 0x26, 0xed,",
          "2752:  0x73, 0xc5, 0x5e, 0x4d, 0x02, 0x8c, 0x29, 0x9e, 0x7c, 0xc4, 0x81, 0xf1, 0x3b, 0x6a, 0xc4, 0x4b,",
          "2753:  0x8f, 0x64, 0xc4, 0xaf, 0xa8, 0x11, 0xd7, 0x3a, 0x5c, 0x49, 0x47, 0x5d, 0xc9, 0xe5, 0xea, 0xd2,",
          "2754:  0x5d, 0xbf, 0xd5, 0xad, 0xa7, 0x96, 0x51, 0x93, 0x5e, 0x90, 0x60, 0x4c, 0xf1, 0x9c, 0x34, 0x08,",
          "2755:  0x25, 0xe9, 0x48, 0x96, 0x74, 0x25, 0x54, 0xa4, 0x0a, 0xef, 0xfe, 0xfe, 0x28, 0x9c, 0x1a, 0xb8,",
          "2756:  0xf8, 0xc8, 0x3c, 0x80, 0xf0, 0x59, 0x2e, 0x06, 0x3c, 0xc0, 0x94, 0x51, 0xf5, 0x34, 0x77, 0x31,",
          "2757:  0x6e, 0x69, 0x28, 0x5a, 0x14, 0xe4, 0x43, 0x00, 0x1d, 0x2f, 0xf6, 0xda, 0x34, 0xa1, 0x71, 0x6a,",
          "2758:  0x27, 0xaf, 0x1e, 0xad, 0x97, 0xb8, 0x1e, 0x6b, 0x29, 0x4f, 0xe3, 0xe3, 0x68, 0x10, 0x43, 0x4b,",
          "2759:  0x24, 0x8f, 0xa1, 0x63, 0xda, 0xa2, 0x1e, 0xa3, 0xd7, 0xcd, 0xf6, 0xa1, 0x63, 0x68, 0x34, 0x28,",
          "2760:  0xb4, 0xe9, 0xf8, 0x3e, 0x26, 0x5a, 0xc1, 0x54, 0x5f, 0xe9, 0x7d, 0x4c, 0xb4, 0x93, 0xa1, 0xc2,",
          "2761:  0x92, 0x4f, 0x3b, 0x30, 0xdd, 0x08, 0x5a, 0xd4, 0x48, 0x57, 0x11, 0xef, 0x8d, 0xa3, 0x37, 0xf2,",
          "2762:  0xa2, 0xcd, 0xd7, 0x58, 0xe0, 0x0c, 0x98, 0x61, 0x4e, 0x3c, 0x1f, 0xe6, 0x1d, 0x1a, 0x0b, 0xd3,",
          "2763:  0x3d, 0x96, 0x1d, 0xe6, 0x5b, 0x12, 0x8c, 0x29, 0x9e, 0x2c, 0xc2, 0xb1, 0x8e, 0xc7, 0xd8, 0x52,",
          "2764:  0x4c, 0xeb, 0x34, 0x4c, 0x02, 0xaf, 0x25, 0xe3, 0xd1, 0x8a, 0x71, 0xa2, 0xd7, 0xb2, 0x68, 0xcc,",
          "2765:  0xd3, 0x93, 0x77, 0xc1, 0x93, 0x41, 0x33, 0x8c, 0x62, 0x7a, 0x2d, 0x60, 0x2c, 0x08, 0x9b, 0x66,",
          "2766:  0x1a, 0x08, 0x4b, 0x5c, 0xa9, 0xcd, 0x29, 0x56, 0x4f, 0xae, 0x0c, 0x26, 0xc3, 0x61, 0xdf, 0x93,",
          "2767:  0xb7, 0x40, 0x85, 0x6d, 0x07, 0x9d, 0xa5, 0xb8, 0xce, 0x84, 0x41, 0xad, 0x98, 0xbd, 0x78, 0x5d,",
          "2768:  0xc1, 0x51, 0x53, 0xb8, 0x5f, 0x28, 0xc1, 0xec, 0xb0, 0xf5, 0x43, 0x18, 0x5f, 0x25, 0xc9, 0x2d,",
          "2769:  0x2f, 0x66, 0x2a, 0x14, 0x39, 0x62, 0x44, 0xab, 0xf8, 0xde, 0xf2, 0x62, 0x7b, 0xbd, 0x09, 0x01,",
          "2770:  0x98, 0x4a, 0x22, 0x77, 0x60, 0x24, 0x69, 0x79, 0x05, 0xa5, 0xc0, 0x2c, 0x89, 0xc6, 0x61, 0x5c,",
          "2771:  0x5d, 0x64, 0x28, 0x64, 0x90, 0xa7, 0x60, 0xa4, 0x15, 0x6c, 0x72, 0xc7, 0x9a, 0x2f, 0x48, 0xb1,",
          "2772:  0x43, 0xae, 0x06, 0x9b, 0x0c, 0x05, 0xd4, 0xfd, 0x9a, 0x33, 0xa0, 0x6f, 0xd4, 0x06, 0xc2, 0x17,",
          "2773:  0x08, 0x0d, 0x77, 0x82, 0x38, 0x0a, 0xdb, 0x34, 0x4c, 0xf2, 0x69, 0xdd, 0x0b, 0x06, 0x85, 0x36,",
          "2774:  0x1d, 0xf9, 0x05, 0x67, 0xc0, 0xca, 0x3e, 0x62, 0x3e, 0x53, 0xa9, 0x74, 0xe0, 0xc5, 0xed, 0xfe,",
          "2775:  0xc7, 0xd8, 0x00, 0x5b, 0xae, 0x37, 0x67, 0x72, 0x1e, 0x80, 0x7b, 0x86, 0x6b, 0x31, 0x6d, 0x04,",
          "2776:  0xbb, 0xaa, 0x65, 0x9a, 0xe5, 0x75, 0x8d, 0x41, 0x8b, 0x2a, 0xfd, 0x66, 0xbd, 0xdb, 0xe0, 0xdf,",
          "2777:  0x94, 0xfa, 0xbf, 0x91, 0x18, 0xb4, 0xa8, 0xc8, 0x73, 0x30, 0x16, 0xb4, 0xbd, 0x26, 0x4d, 0xfb,",
          "2778:  0xff, 0x29, 0x6e, 0x28, 0x56, 0x04, 0xe4, 0xfe, 0xde, 0xdc, 0xb4, 0x56, 0x48, 0x80, 0x50, 0xd1,",
          "2779:  0x92, 0xdf, 0x76, 0x60, 0xd2, 0x8f, 0xda, 0xed, 0x28, 0x5c, 0xf5, 0x36, 0x69, 0x2b, 0x4d, 0xd7,",
          "2780:  0xdd, 0x79, 0x54, 0xae, 0xcb, 0xfc, 0x92, 0x25, 0x4c, 0x06, 0xcb, 0x3a, 0x09, 0x69, 0xa3, 0x30,",
          "2781:  0xa3, 0x95, 0x6d, 0x4f, 0x46, 0xf7, 0xb1, 0x27, 0x7f, 0xe4, 0xc0, 0x8c, 0xfc, 0x76, 0x31, 0x0c,",
          "2782:  0xa3, 0x44, 0x65, 0x51, 0x65, 0xbe, 0x2d, 0x7a, 0xc4, 0xcd, 0xb2, 0x24, 0xca, 0xb6, 0xbd, 0x4e,",
          "2783:  0xa9, 0x39, 0xd3, 0x87, 0xc7, 0x7e, 0x25, 0xc9, 0x25, 0x98, 0x69, 0x44, 0xb1, 0x4f, 0xed, 0x8e,",
          "2784:  0x50, 0xc6, 0x50, 0x33, 0xba, 0x98, 0x27, 0xc0, 0xfe, 0x6f, 0xc8, 0x2d, 0x38, 0x6d, 0x01, 0xed,",
          "2785:  0x7e, 0x90, 0xf6, 0xf0, 0xac, 0xe2, 0x76, 0xfa, 0xe2, 0x40, 0x2a, 0x1c, 0xf2, 0xf5, 0x99, 0x77,",
          "2786:  0xc2, 0x4c, 0xdf, 0xf8, 0x0d, 0xc8, 0x54, 0x9c, 0xb4, 0x33, 0x15, 0x55, 0x2b, 0xc1, 0x70, 0x66,",
          "2787:  0x19, 0x4e, 0x0f, 0xee, 0xa9, 0xc3, 0x70, 0x71, 0x7f, 0xcd, 0x81, 0x27, 0x87, 0xb8, 0x64, 0x3a,",
          "2788:  0x44, 0x73, 0x86, 0x85, 0x68, 0xc4, 0x83, 0x32, 0x0d, 0x77, 0x94, 0xb1, 0xb8, 0x78, 0xb4, 0x19,",
          "2789:  0x71, 0x21, 0xdc, 0x91, 0x03, 0x3d, 0x7e, 0x6f, 0x6f, 0xae, 0x7c, 0x21, 0xdc, 0x41, 0xce, 0xdb,",
          "2790:  0xfd, 0x95, 0xb1, 0x4c, 0x14, 0xb8, 0x9e, 0x26, 0x1e, 0x84, 0xa2, 0x2a, 0x06, 0xbc, 0x51, 0xf0,",
          "2791:  0x5c, 0xb4, 0xa2, 0x5c, 0x79, 0x9c, 0xa0, 0xc4, 0x91, 0x8f, 0x3b, 0x22, 0x83, 0x9f, 0x46, 0xc7,",
          "2792:  0xca, 0x4b, 0x7c, 0x34, 0x07, 0x0a, 0xf6, 0xb9, 0x40, 0x0a, 0x44, 0x5b, 0x3a, 0x5f, 0xc9, 0x1d,",
          "2793:  0x99, 0x40, 0xcb, 0xfb, 0x8a, 0x69, 0x8e, 0x3f, 0xc5, 0x93, 0x5d, 0x00, 0xd6, 0x0b, 0xfd, 0xb5,",
          "2794:  0xa8, 0x15, 0xf8, 0x3d, 0x95, 0x32, 0x29, 0x20, 0x0b, 0x2c, 0xf9, 0x49, 0x87, 0xd1, 0xfc, 0x46,",
          "2795:  0x4b, 0x16, 0xf9, 0xa2, 0x03, 0x33, 0xd2, 0x23, 0x58, 0x0e, 0x1a, 0x0d, 0x1a, 0xd3, 0xd0, 0xa7,",
          "2796:  0xa9, 0x4f, 0x75, 0xfb, 0x68, 0x1a, 0xa4, 0x09, 0xcc, 0x95, 0x3c, 0x7b, 0xb3, 0xc4, 0xfb, 0x50,",
          "2797:  0xd8, 0xaf, 0x0c, 0xa9, 0xc3, 0x48, 0x10, 0x36, 0x22, 0x65, 0xd8, 0x6a, 0x47, 0x53, 0x6a, 0x25,",
          "2798:  0x6c, 0x44, 0x66, 0xad, 0xf0, 0x5f, 0x28, 0xb8, 0x93, 0x55, 0x38, 0x19, 0xab, 0xa8, 0xfa, 0x72,",
          "2799:  0xc0, 0x78, 0x6c, 0xb2, 0x1a, 0xb4, 0x83, 0x44, 0x18, 0xa5, 0x72, 0x6d, 0xf6, 0xde, 0xde, 0xdc,",
          "2800:  0x49, 0x1c, 0x80, 0xc7, 0x81, 0x5f, 0xb9, 0xaf, 0x55, 0xb3, 0xa9, 0x03, 0x99, 0x18, 0xfb, 0x00,",
          "2801:  0x54, 0x63, 0x7d, 0x14, 0x21, 0x3d, 0xa3, 0xd5, 0x62, 0xfa, 0x58, 0x65, 0xe4, 0x74, 0x4e, 0xc7,",
          "2802:  0x1c, 0x3a, 0x18, 0x89, 0xdc, 0x43, 0xe2, 0x23, 0xaf, 0x96, 0x45, 0x01, 0xf3, 0x4b, 0x49, 0x35,",
          "2803:  0xc9, 0xc7, 0x5e, 0xe8, 0xa3, 0x90, 0x41, 0x62, 0x18, 0xdb, 0xa2, 0x5e, 0x2b, 0xd9, 0x52, 0xb9,",
          "2804:  0xb1, 0x2b, 0x47, 0xf5, 0xcf, 0x39, 0xaf, 0x7c, 0xde, 0x51, 0x42, 0x51, 0x49, 0x22, 0xbb, 0x30,",
          "2805:  0xbe, 0x25, 0x07, 0x41, 0xed, 0xed, 0xd7, 0x8e, 0xda, 0xb9, 0x99, 0x91, 0x35, 0xeb, 0x57, 0x01,",
          "2806:  0x30, 0x15, 0x47, 0x7e, 0xc9, 0x01, 0xf0, 0xd3, 0x84, 0x63, 0xba, 0x7c, 0xb0, 0x30, 0xbb, 0xa3,",
          "2807:  0x73, 0x99, 0xc6, 0x35, 0xd2, 0x20, 0x86, 0x96, 0x64, 0xf2, 0x0a, 0x4c, 0xc6, 0xd4, 0x8f, 0x42,",
          "2808:  0x3f, 0x68, 0xd1, 0xfa, 0x62, 0x22, 0x42, 0x92, 0xc3, 0x25, 0x26, 0x8f, 0x73, 0xff, 0x04, 0x2d,",
          "2809:  0x1e, 0x98, 0xe1, 0x48, 0x5e, 0x73, 0x60, 0x5a, 0x27, 0x5d, 0xf9, 0x80, 0x50, 0x95, 0x7c, 0x5a,",
          "2810:  0x2d, 0x28, 0xc5, 0x2b, 0x78, 0xd6, 0x08, 0x0f, 0xbd, 0xb2, 0x30, 0xcc, 0xc9, 0x25, 0x2f, 0x03,",
          "2811:  0x44, 0x9b, 0x22, 0xc1, 0xc9, 0x9b, 0x5a, 0x39, 0x74, 0x53, 0xa7, 0x65, 0xae, 0x3e, 0xe5, 0x80,",
          "2812:  0x16, 0x37, 0x72, 0x15, 0x40, 0x2e, 0x9b, 0x8d, 0x5e, 0x87, 0x8a, 0x78, 0xa8, 0x5a, 0x7b, 0x73,",
          "2813:  0xda, 0xf9, 0xeb, 0x1a, 0x73, 0x7f, 0x6f, 0xae, 0x3f, 0x72, 0x17, 0x99, 0x65, 0xeb, 0x73, 0xf2,",
          "2814:  0x7e, 0x18, 0x67, 0xdd, 0x76, 0xdb, 0xd3, 0x89, 0xa2, 0xb5, 0xe2, 0x76, 0x44, 0xc9, 0xd7, 0xcc,",
          "2815:  0x4d, 0x05, 0xc0, 0x54, 0xa2, 0x1b, 0x02, 0xe9, 0xa7, 0x27, 0xcf, 0xc1, 0x24, 0xdd, 0x4d, 0x68,",
          "2816:  0x1c, 0x7a, 0xad, 0x9b, 0xb8, 0x9a, 0xa6, 0x16, 0xc4, 0xe0, 0x5f, 0xb0, 0xe0, 0x98, 0xa1, 0x22,",
          "2817:  0xae, 0xf6, 0xbc, 0x4b, 0x82, 0x1e, 0x8c, 0xe7, 0x9d, 0xfa, 0xd9, 0xee, 0xff, 0x94, 0x32, 0x1e,",
          "2818:  0xc1, 0x46, 0x4c, 0x29, 0x89, 0x60, 0x34, 0x8c, 0xea, 0xda, 0xe8, 0x5d, 0x29, 0xc6, 0xe8, 0x5d,",
          "2819:  0x8f, 0xea, 0xd6, 0x19, 0x39, 0xff, 0xc5, 0x50, 0xca, 0x11, 0x87, 0x88, 0xe9, 0x69, 0xab, 0x40,",
          "2820:  0x28, 0x27, 0xa8, 0x48, 0xc9, 0xfa, 0x10, 0xf1, 0x86, 0x2d, 0x08, 0xb3, 0x72, 0xc9, 0x36, 0x8c,",
          "2821:  0x6e, 0x45, 0x2c, 0x91, 0xb1, 0xca, 0x91, 0xbd, 0xb0, 0xcb, 0x11, 0x4b, 0xc4, 0x16, 0xa6, 0x9b,",
          "2822:  0xcd, 0x21, 0x0c, 0xa5, 0x0c, 0xf7, 0x3b, 0x4e, 0x26, 0x91, 0x74, 0xdb, 0x4b, 0xfc, 0xad, 0x0b,",
          "2823:  0x3b, 0x3c, 0x7e, 0xbc, 0x9a, 0x39, 0x04, 0xf9, 0x09, 0xfb, 0x10, 0xe4, 0xfe, 0xde, 0xdc, 0x9b,",
          "2824:  0x86, 0x15, 0x2d, 0xdd, 0xe5, 0x1c, 0xe6, 0x05, 0x0b, 0xeb, 0xbc, 0xe4, 0xc3, 0x0e, 0x4c, 0x58,",
          "2825:  0xea, 0xa9, 0x0d, 0xa5, 0xc0, 0x7c, 0xbc, 0x76, 0xae, 0x2c, 0x20, 0xda, 0x22, 0xdd, 0xcf, 0x3a,",
          "2826:  0x30, 0x5e, 0xf3, 0xfc, 0xed, 0xa8, 0xd1, 0x20, 0x6f, 0x81, 0x4a, 0xbd, 0xab, 0x8e, 0x9b, 0x64,",
          "2827:  0xfb, 0x74, 0xe6, 0x62, 0x59, 0xc1, 0x51, 0x53, 0xf0, 0x39, 0xdc, 0xf0, 0xfc, 0x24, 0x8a, 0x85,",
          "2828:  0xda, 0x65, 0x39, 0x87, 0x2f, 0x0a, 0x08, 0x2a, 0x0c, 0x0f, 0xd2, 0xdb, 0xde, 0x6e, 0xfa, 0x71,",
          "2829:  0x3e, 0x8b, 0x75, 0xcd, 0xa0, 0xd0, 0xa6, 0x73, 0xff, 0xac, 0x0a, 0xe3, 0xea, 0x5c, 0xf7, 0xc0,",
          "2830:  0x27, 0x33, 0xa9, 0x17, 0x5f, 0x1a, 0xea, 0xc5, 0x33, 0x18, 0xf3, 0x45, 0x49, 0x98, 0xda, 0x4a,",
          "2831:  0x8f, 0x98, 0xcf, 0x53, 0x0a, 0xca, 0x2a, 0x33, 0xa3, 0x96, 0xfc, 0x8d, 0x4a, 0x14, 0xf9, 0x8c,",
          "2832:  0x03, 0xc7, 0xfc, 0x28, 0x0c, 0xa9, 0x6f, 0xec, 0xfc, 0x48, 0x11, 0x27, 0x97, 0x4b, 0x59, 0xa6,",
          "2833:  0x26, 0xf7, 0x95, 0x43, 0x60, 0x5e, 0x3c, 0x79, 0x01, 0xa6, 0x64, 0x9f, 0xdd, 0xca, 0xc4, 0xc7,",
          "2834:  0xe6, 0x2c, 0xdf, 0x46, 0x62, 0x96, 0x96, 0xcc, 0xcb, 0x3c, 0x83, 0x38, 0xdc, 0x92, 0x31, 0xb2,",
          "2835:  0x4a, 0xa4, 0xea, 0xd3, 0x2f, 0x86, 0x16, 0x05, 0x89, 0x81, 0xc4, 0xb4, 0x11, 0x53, 0xb6, 0x85,",
          "2836:  0xf4, 0xd5, 0x2e, 0x65, 0x89, 0xd8, 0x63, 0xc6, 0x1f, 0xee, 0x9c, 0x0f, 0xfb, 0x38, 0xe1, 0x00,",
          "2837:  0xee, 0x64, 0x5b, 0x39, 0xba, 0x95, 0x22, 0x96, 0x93, 0x1a, 0xe6, 0xa1, 0xfe, 0xee, 0x1c, 0x8c,",
          "2838:  0xb2, 0x2d, 0x2f, 0xae, 0x8b, 0xbd, 0xad, 0x5c, 0xab, 0x72, 0x5b, 0xb2, 0xce, 0x01, 0x28, 0xe1,",
          "2839:  0x64, 0x19, 0x8e, 0xe7, 0x2a, 0x11, 0x98, 0xd8, 0xbd, 0x2a, 0xb5, 0x59, 0xc5, 0xee, 0x78, 0xae,",
          "2840:  0x86, 0x81, 0x61, 0xdf, 0x17, 0x76, 0x10, 0x34, 0xb1, 0x4f, 0x10, 0xd4, 0x83, 0xb1, 0x96, 0x4c,",
          "2841:  0x04, 0x4c, 0x0a, 0x53, 0xf9, 0x52, 0x21, 0x1d, 0x30, 0x6f, 0x27, 0x60, 0xf4, 0x6c, 0x57, 0x09,",
          "2842:  0x05, 0x25, 0x90, 0x7c, 0x92, 0x1b, 0x34, 0x2b, 0x77, 0x30, 0x25, 0x14, 0xb8, 0x55, 0x8c, 0x02,",
          "2843:  0x7d, 0xa9, 0x12, 0x63, 0xdd, 0xac, 0x44, 0x84, 0x2d, 0xff, 0xcc, 0x4f, 0xc2, 0xc4, 0xc3, 0xe6,",
          "2844:  0x1d, 0x5e, 0x84, 0xe3, 0x47, 0xca, 0x38, 0x7c, 0xd7, 0x81, 0x74, 0x5c, 0x97, 0x3c, 0x7f, 0x8b,",
          "2845:  0xf2, 0x29, 0x43, 0x5e, 0x84, 0x69, 0x1d, 0x46, 0x2c, 0x45, 0x5d, 0x95, 0xb7, 0x2c, 0x9b, 0x24,",
          "2846:  0x39, 0x66, 0xb0, 0x98, 0xa3, 0x26, 0x0b, 0x50, 0xe5, 0xfd, 0x24, 0x3f, 0x95, 0x66, 0x57, 0x87,",
          "2847:  0x2a, 0x8b, 0x6b, 0x2b, 0xea, 0x2b, 0x43, 0x43, 0x22, 0x98, 0x69, 0x79, 0x2c, 0x11, 0x1a, 0xf0,",
          "2848:  0xa8, 0xe2, 0x21, 0x4f, 0xd9, 0x45, 0x21, 0xd6, 0x6a, 0x9e, 0x11, 0xf6, 0xf3, 0x76, 0xbf, 0x3e,",
          "2849:  0x02, 0x53, 0x19, 0xcb, 0xc8, 0x77, 0x95, 0x2e, 0xe3, 0xae, 0x8f, 0x4e, 0xb1, 0xe8, 0x5d, 0xe5,",
          "2850:  0xa6, 0x82, 0xa3, 0xa6, 0xe0, 0xd4, 0x1d, 0x8f, 0xb1, 0xbb, 0x51, 0x5c, 0x57, 0xa6, 0x5c, 0x53,",
          "2851:  0xaf, 0x29, 0x38, 0x6a, 0x0a, 0xbe, 0xbf, 0x6c, 0x52, 0x2f, 0xa6, 0xb1, 0x28, 0x4c, 0xc9, 0xef,",
          "2852:  0x2f, 0x35, 0x83, 0x42, 0x9b, 0x4e, 0x18, 0xe5, 0xa4, 0xc5, 0x96, 0x5a, 0x01, 0x0d, 0x13, 0xa9,",
          "2853:  0x66, 0x31, 0x46, 0x79, 0x63, 0x75, 0xdd, 0x66, 0x6a, 0x8c, 0x72, 0x0e, 0x81, 0x79, 0xf1, 0xe4,",
          "2854:  0xa3, 0x0e, 0x4c, 0x79, 0x77, 0x99, 0xa9, 0x5b, 0x16, 0x56, 0xf9, 0xc8, 0x9b, 0x54, 0xa6, 0x14,",
          "2855:  0xba, 0x36, 0xc3, 0xcd, 0x7b, 0x06, 0x84, 0x59, 0xa1, 0xe4, 0xf3, 0x0e, 0x10, 0xba, 0x4b, 0xfd,",
          "2856:  0xb5, 0x38, 0xda, 0x09, 0xea, 0xe9, 0x18, 0xaa, 0xf0, 0xe7, 0x88, 0xde, 0xf6, 0x85, 0x3e, 0xbe,",
          "2857:  0xd2, 0xaa, 0xf7, 0xc3, 0x71, 0x80, 0x0e, 0xee, 0xdf, 0x96, 0x61, 0xc2, 0x32, 0xc6, 0x03, 0x77,",
          "2858:  0x56, 0xe7, 0xfb, 0x6c, 0x67, 0x2d, 0x1d, 0x62, 0x67, 0xfd, 0x10, 0x54, 0xfd, 0xd4, 0x50, 0x14,",
          "2859:  0x53, 0x67, 0x9d, 0x37, 0x3f, 0xc6, 0x56, 0x68, 0x10, 0x1a, 0x99, 0xe4, 0x12, 0xcc, 0x58, 0x6c,",
          "2860:  0x94, 0x91, 0x19, 0x11, 0x46, 0x46, 0x27, 0x9a, 0x16, 0xf3, 0x04, 0xd8, 0xff, 0x0d, 0x79, 0x96,",
          "2861:  0x7b, 0xb5, 0x81, 0x6a, 0x97, 0x8c, 0xe2, 0x55, 0x0d, 0xf3, 0xe2, 0xda, 0x4a, 0x0a, 0x46, 0x9b,",
          "2862:  0xc6, 0xfd, 0xba, 0xa3, 0x07, 0xf7, 0x31, 0x14, 0xc0, 0xdc, 0xc9, 0x16, 0xc0, 0x5c, 0x28, 0xa4,",
          "2863:  0x9b, 0x87, 0x14, 0xbf, 0x5c, 0x87, 0xf1, 0xa5, 0xa8, 0xdd, 0xf6, 0xc2, 0x3a, 0x79, 0x03, 0x8c,",
          "2864:  0xfb, 0xf2, 0x4f, 0x15, 0x26, 0x8a, 0x8a, 0x08, 0x85, 0xc5, 0x14, 0x47, 0x9e, 0x82, 0x11, 0x2f,",
          "2865:  0x6e, 0xa6, 0xa1, 0xa1, 0x38, 0x14, 0x5b, 0x8c, 0x9b, 0x0c, 0x05, 0xd4, 0xfd, 0x5c, 0x09, 0x60,",
          "2866:  0x29, 0x6a, 0x77, 0xbc, 0x98, 0xd6, 0x37, 0xa2, 0xff, 0xcf, 0x11, 0xcb, 0x88, 0xe1, 0x13, 0x0e,",
          "2867:  0x10, 0xde, 0x2b, 0x51, 0x48, 0x43, 0x73, 0x10, 0xc7, 0xf7, 0x4b, 0x3f, 0x85, 0xaa, 0xcd, 0xc7,",
          "2868:  0xac, 0x81, 0x14, 0x81, 0x86, 0xe6, 0x00, 0x51, 0xc4, 0xd3, 0xe9, 0x8e, 0x5f, 0xce, 0x16, 0x6b,",
          "2869:  0x88, 0x13, 0x60, 0xe5, 0x00, 0xb8, 0x5f, 0x2e, 0xc1, 0x69, 0x69, 0xb6, 0xae, 0x79, 0xa1, 0xd7,",
          "2870:  0xa4, 0x6d, 0xae, 0xd5, 0x41, 0x4f, 0x1b, 0x7c, 0xee, 0xbe, 0x06, 0x69, 0x6d, 0xc6, 0x51, 0x27,",
          "2871:  0xa7, 0x9c, 0x54, 0x72, 0x1a, 0xad, 0x84, 0x41, 0x82, 0x82, 0x39, 0x61, 0x50, 0x49, 0x6f, 0xce,",
          "2872:  0x28, 0x63, 0x53, 0x90, 0x20, 0xbd, 0xee, 0x2e, 0x29, 0xf6, 0xa8, 0x05, 0xf1, 0xcd, 0xbd, 0x15,",
          "2873:  0xf9, 0xdb, 0x48, 0x3b, 0x91, 0x30, 0x2c, 0xd6, 0xd1, 0xf8, 0xaa, 0x82, 0xa3, 0xa6, 0x70, 0xbf,",
          "2874:  0xec, 0x40, 0xde, 0xe4, 0x8a, 0x68, 0x50, 0xd6, 0x62, 0xe6, 0xa3, 0xc1, 0x6c, 0xe9, 0xe4, 0x21,",
          "2875:  0x2a, 0x11, 0xdf, 0x03, 0x13, 0x5e, 0x92, 0xd0, 0x76, 0x47, 0x86, 0x26, 0xe5, 0x87, 0x4b, 0x7f,",
          "2876:  0x5d, 0x8b, 0xea, 0x41, 0x23, 0x10, 0x21, 0x89, 0xcd, 0xce, 0x7d, 0x09, 0x2a, 0xe9, 0x89, 0xcf,",
          "2877:  0x01, 0x86, 0xfe, 0xe9, 0x8c, 0x3b, 0x39, 0x64, 0x72, 0xdd, 0x2f, 0xc1, 0x80, 0x3d, 0x93, 0x37,",
          "2878:  0xd9, 0x58, 0x97, 0x4c, 0x93, 0x0f, 0x67, 0x61, 0xc8, 0xae, 0x3c, 0xed, 0x92, 0x79, 0x96, 0x77,",
          "2879:  0x15, 0xbd, 0xe7, 0x9b, 0x03, 0xb0, 0x09, 0xa5, 0x9f, 0x3e, 0x04, 0x23, 0xe7, 0x01, 0xcc, 0xa6,",
          "2880:  0xa0, 0x2a, 0x58, 0x74, 0xa6, 0xd6, 0xec, 0x1d, 0x68, 0x51, 0x71, 0x17, 0x30, 0x08, 0x59, 0xe2,",
          "2881:  0xb5, 0x5a, 0x97, 0x83, 0x30, 0x51, 0xb1, 0xac, 0x36, 0x18, 0x2b, 0x06, 0x85, 0x36, 0xdd, 0x99,",
          "2882:  0xb7, 0x59, 0xe3, 0x72, 0x18, 0xb7, 0xfe, 0x13, 0x25, 0x98, 0xbe, 0x14, 0x76, 0xd7, 0x2e, 0xad,",
          "2883:  0x75, 0x37, 0x5b, 0x81, 0x7f, 0x95, 0xf6, 0xf8, 0xa0, 0x6d, 0xd3, 0xde, 0xca, 0xb2, 0xea, 0x76,",
          "2884:  0x3d, 0x68, 0x57, 0x39, 0x10, 0x25, 0x8e, 0xab, 0xd9, 0x08, 0xc2, 0x26, 0x8d, 0x3b, 0x71, 0xa0,",
          "2885:  0x7c, 0x77, 0x4b, 0xcd, 0x8b, 0x06, 0x85, 0x36, 0x1d, 0xe7, 0x1d, 0xdd, 0x0d, 0x69, 0x9c, 0xb7,",
          "2886:  0x36, 0x37, 0x38, 0x10, 0x25, 0x8e, 0x13, 0x25, 0x71, 0x97, 0x25, 0xaa, 0xc7, 0x34, 0xd1, 0x06,",
          "2887:  0x07, 0xa2, 0xc4, 0xf1, 0xe9, 0xc1, 0xba, 0x9b, 0x22, 0x0b, 0x9b, 0x3b, 0x0f, 0x5f, 0x97, 0x60,",
          "2888:  0x4c, 0xf1, 0x9c, 0x74, 0x9b, 0xf6, 0x96, 0xf9, 0xde, 0x9b, 0x2b, 0xc5, 0xb9, 0x2a, 0xc1, 0x98,",
          "2889:  0xe2, 0xdd, 0x7f, 0x72, 0x80, 0x64, 0xbb, 0xe3, 0x31, 0x6c, 0xdf, 0xaf, 0x66, 0xb7, 0xef, 0x23,",
          "2890:  0x26, 0xcc, 0xb3, 0xea, 0x0f, 0xd9, 0xc5, 0x7f, 0xd3, 0x81, 0x49, 0xfb, 0xec, 0x84, 0x34, 0x73,",
          "2891:  0x86, 0xe8, 0x46, 0xd6, 0x10, 0xdd, 0xdf, 0x9b, 0xfb, 0xa9, 0x41, 0xd7, 0x40, 0x9b, 0x41, 0x12,",
          "2892:  0x75, 0xd8, 0x5b, 0x69, 0xd8, 0x0c, 0x42, 0x2a, 0x32, 0x83, 0xf2, 0xcc, 0x25, 0x73, 0x30, 0xb3,",
          "2893:  0x14, 0xd5, 0xe9, 0x43, 0x58, 0x32, 0xf7, 0x36, 0xcc, 0xf4, 0xd5, 0x5f, 0x1d, 0xc0, 0xe8, 0xec,",
          "2894:  0x5b, 0x5d, 0xeb, 0x22, 0x4c, 0x70, 0xc6, 0x37, 0x3a, 0xf2, 0x70, 0x64, 0x09, 0x66, 0x64, 0x19,",
          "2895:  0x19, 0x97, 0xb4, 0xee, 0x6f, 0xd1, 0xb6, 0xae, 0xa9, 0x13, 0x81, 0xe2, 0xad, 0x3c, 0x12, 0xfb,",
          "2896:  0xe9, 0xdd, 0x4f, 0x3a, 0x30, 0x95, 0x29, 0x89, 0x2b, 0xc8, 0x3c, 0x8a, 0x95, 0x16, 0x89, 0xa3,",
          "2897:  0xbc, 0x38, 0x08, 0x65, 0xae, 0xaf, 0x62, 0xad, 0x34, 0x83, 0x42, 0x9b, 0xce, 0xfd, 0x6c, 0x09,",
          "2898:  0x2a, 0x69, 0x56, 0xf8, 0x00, 0xaa, 0x7c, 0xdc, 0x81, 0x29, 0x1d, 0x9c, 0x0b, 0x97, 0xbd, 0x90,",
          "2899:  0x52, 0x22, 0xae, 0x81, 0x3e, 0xef, 0xe5, 0x2e, 0xbb, 0x8e, 0x1d, 0xd0, 0x16, 0x86, 0x59, 0xd9,",
          "2900:  0xe4, 0x16, 0x00, 0xeb, 0xb1, 0x84, 0xb6, 0xad, 0xe0, 0xc1, 0xb5, 0x56, 0xdc, 0xbc, 0x1f, 0xc5,",
          "2901:  0x94, 0xaf, 0xaf, 0xeb, 0x51, 0x9d, 0xae, 0x6b, 0x4a, 0x63, 0x5c, 0x0d, 0x0c, 0x2d, 0x4e, 0xee,",
          "2902:  0xef, 0x95, 0xe0, 0x78, 0x5e, 0x25, 0xf2, 0x6e, 0x98, 0x4c, 0xa5, 0x5b, 0x37, 0x6a, 0xd3, 0x54,",
          "2903:  0xf8, 0x24, 0x5a, 0xb8, 0xfb, 0x7b, 0x73, 0x73, 0xfd, 0x57, 0x8a, 0xe7, 0x6d, 0x12, 0xcc, 0x30,",
          "2904:  0x93, 0x19, 0x12, 0x95, 0xca, 0xab, 0xf5, 0x16, 0x3b, 0x1d, 0x95, 0xe6, 0xb0, 0x32, 0x24, 0x36,",
          "2905:  0x16, 0x73, 0xd4, 0x64, 0x0d, 0x4e, 0x5a, 0x90, 0xeb, 0x34, 0x68, 0x6e, 0x6d, 0x46, 0xb1, 0xbc,",
          "2906:  0xba, 0x51, 0xae, 0x3d, 0xa5, 0xb8, 0x9c, 0xc4, 0x01, 0x34, 0x38, 0xf0, 0x4b, 0xee, 0xb4, 0xf8,",
          "2907:  0x5e, 0xc7, 0xf3, 0x83, 0xa4, 0xa7, 0xa2, 0x21, 0x6d, 0x9b, 0x96, 0x14, 0x1c, 0x35, 0x85, 0x7b,",
          "2908:  0x0d, 0x46, 0x0e, 0x38, 0x83, 0x0e, 0xb4, 0xd7, 0xbf, 0x04, 0x15, 0xce, 0x8e, 0xdb, 0xa2, 0xa2,",
          "2909:  0x58, 0x46, 0x50, 0x49, 0x6f, 0xf2, 0x10, 0x17, 0xca, 0x81, 0x97, 0x26, 0xa1, 0x74, 0xb3, 0x56,",
          "2910:  0x18, 0xeb, 0x0a, 0x4f, 0x86, 0x23, 0xc9, 0xd3, 0x50, 0xa6, 0xbb, 0x9d, 0x7c, 0xb6, 0xe9, 0xc2,",
          "2911:  0x6e, 0x27, 0x88, 0x29, 0xe3, 0x44, 0x74, 0xb7, 0x43, 0xce, 0x40, 0x29, 0xa8, 0xab, 0x4d, 0x0a,",
          "2912:  0x14, 0x4d, 0x69, 0x65, 0x19, 0x4b, 0x41, 0xdd, 0xdd, 0x85, 0xaa, 0xbe, 0x3a, 0x44, 0xb6, 0x53,",
          "2913:  0xdb, 0xed, 0x14, 0x71, 0x8c, 0x93, 0xf2, 0x1d, 0x62, 0xb5, 0xbb, 0x00, 0xa6, 0x00, 0xb1, 0x28,",
          "2914:  0xfb, 0x72, 0x0e, 0x46, 0xfc, 0x48, 0xd5, 0x2d, 0x57, 0x0c, 0x1b, 0x61, 0xb4, 0x05, 0xc6, 0xbd,",
          "2915:  0x0d, 0xd3, 0x57, 0xc3, 0xe8, 0x6e, 0xc8, 0x37, 0xd3, 0x8b, 0x01, 0x6d, 0xd5, 0x39, 0xe3, 0x06,",
          "2916:  0xff, 0x23, 0xef, 0x22, 0x08, 0x2c, 0x4a, 0x9c, 0xbe, 0x5f, 0x53, 0x1a, 0x76, 0xbf, 0xc6, 0xfd,",
          "2917:  0x65, 0x07, 0x8e, 0xe7, 0x8b, 0x0d, 0xbf, 0x67, 0x31, 0xce, 0x87, 0xb9, 0x32, 0x69, 0x35, 0x5b,",
          "2918:  0xba, 0x35, 0x3c, 0x0f, 0x93, 0x9b, 0xdd, 0xa0, 0x55, 0x57, 0xbf, 0x95, 0x3e, 0xba, 0x5e, 0xaf,",
          "2919:  0x66, 0xe1, 0x30, 0x43, 0xc9, 0x7d, 0xbf, 0xcd, 0x20, 0xf4, 0xe2, 0xde, 0x9a, 0xd9, 0x8b, 0xb4,",
          "2920:  0x79, 0xaa, 0x69, 0x0c, 0x5a, 0x54, 0xee, 0x5f, 0x97, 0xc1, 0xdc, 0x61, 0x22, 0x81, 0x2a, 0xcb,",
          "2921:  0x70, 0x8a, 0x48, 0x9c, 0xad, 0xf7, 0x42, 0xdf, 0xdc, 0x96, 0xaa, 0xe4, 0xaa, 0x32, 0x3e, 0xe6,",
          "2922:  0x70, 0xaf, 0x33, 0x48, 0x02, 0x4f, 0x18, 0x0b, 0x15, 0xaa, 0xad, 0x15, 0x74, 0x72, 0xbf, 0x22,",
          "2923:  0x39, 0x47, 0xb1, 0xed, 0xc7, 0x6a, 0x61, 0x68, 0x4b, 0x26, 0xaf, 0xa8, 0xb3, 0x8e, 0x72, 0x61,",
          "2924:  0x45, 0x3d, 0x95, 0xdc, 0x01, 0x47, 0x07, 0x46, 0x63, 0x9a, 0xc4, 0x69, 0x39, 0xd5, 0xd5, 0xa3,",
          "2925:  0x9e, 0xfc, 0x26, 0x71, 0x6f, 0x3d, 0xe1, 0xe1, 0x60, 0xd3, 0x72, 0xb6, 0x04, 0x18, 0xa5, 0x20,",
          "2926:  0x97, 0x01, 0xe9, 0xef, 0x8b, 0x43, 0xe6, 0x91, 0x17, 0xa0, 0xea, 0x75, 0x93, 0xa8, 0xcd, 0xbb,",
          "2927:  0x49, 0x0c, 0x4f, 0xc5, 0xca, 0x94, 0xa7, 0x08, 0x34, 0x34, 0xee, 0xa7, 0x47, 0x21, 0x57, 0x27,",
          "2928:  0x41, 0x76, 0xed, 0xfb, 0x77, 0x4e, 0xb1, 0xf7, 0xef, 0xb4, 0x32, 0x83, 0xee, 0xe0, 0x91, 0x26,",
          "2929:  0x8c, 0x76, 0xb6, 0x3c, 0x96, 0xae, 0xd1, 0x97, 0xd2, 0x6e, 0x5a, 0xe3, 0xc0, 0xfb, 0x7b, 0x73,",
          "2930:  0x3f, 0x7d, 0x30, 0xdf, 0x92, 0xcf, 0xd5, 0x05, 0x59, 0x34, 0x6a, 0x44, 0x0b, 0x1e, 0x28, 0xf9,",
          "2931:  0xdb, 0xde, 0x65, 0x79, 0x9f, 0x38, 0xf9, 0x23, 0x8e, 0x2c, 0xae, 0x43, 0xca, 0xba, 0xad, 0x44,",
          "2932:  0xcd, 0x86, 0x97, 0x0a, 0x5c, 0x65, 0x92, 0xb1, 0xa9, 0xb2, 0x93, 0xbf, 0xd1, 0x12, 0x4a, 0xde,",
          "2933:  0x0d, 0x55, 0x96, 0x78, 0x71, 0xf2, 0x90, 0x35, 0x39, 0xba, 0xd3, 0xd7, 0x53, 0x26, 0x68, 0xf8,",
          "2934:  0x91, 0x97, 0x01, 0x1a, 0x41, 0x18, 0xb0, 0xad, 0x87, 0x3c, 0xa2, 0x14, 0x8a, 0x5f, 0xd4, 0x1c,",
          "2935:  0xd0, 0xe2, 0xc6, 0xad, 0x9b, 0x98, 0xdb, 0x32, 0xa9, 0x5a, 0x11, 0x7b, 0xa9, 0xb6, 0x6e, 0xa8,",
          "2936:  0x31, 0x68, 0x51, 0xb9, 0x1f, 0x84, 0x13, 0xf9, 0xbb, 0xef, 0x2a, 0xdc, 0x6c, 0xc6, 0x51, 0xb7,",
          "2937:  0x93, 0xdf, 0x4b, 0xc4, 0xdd, 0x68, 0x94, 0x38, 0x6e, 0xe3, 0xb7, 0x83, 0xb0, 0x9e, 0xb7, 0xf1,",
          "2938:  0x57, 0x83, 0xb0, 0x8e, 0x02, 0x73, 0x80, 0x8b, 0x89, 0x7f, 0xe2, 0xc0, 0xb9, 0xfd, 0xae, 0xe8,",
          "2939:  0x93, 0xa7, 0x60, 0xe4, 0xae, 0x17, 0x87, 0xea, 0xd2, 0x91, 0xb0, 0x1d, 0xb7, 0xbd, 0x38, 0x44,",
          "2940:  0x01, 0x25, 0x3d, 0x18, 0x93, 0x75, 0x88, 0xca, 0x3b, 0x7e, 0xa9, 0xd8, 0x07, 0x03, 0x78, 0xbc,",
          "2941:  0xa6, 0x33, 0x40, 0xb2, 0x06, 0x12, 0x95, 0x40, 0xf7, 0x5b, 0x0e, 0x90, 0x1b, 0x3b, 0x34, 0x8e,",
          "2942:  0x83, 0xba, 0x55, 0x39, 0x49, 0x9e, 0x83, 0xc9, 0x3b, 0xeb, 0x37, 0xae, 0xaf, 0x45, 0x41, 0x28,",
          "2943:  0x2e, 0x00, 0x58, 0xf5, 0x3a, 0x57, 0x2c, 0x38, 0x66, 0xa8, 0x78, 0xc4, 0x73, 0xe7, 0x55, 0xbe,",
          "2944:  0xe5, 0x5c, 0xd8, 0xed, 0xc4, 0x94, 0x31, 0xfd, 0xcc, 0x86, 0x8a, 0x78, 0xae, 0xbc, 0x94, 0x43,",
          "2945:  0x62, 0x3f, 0x3d, 0xb9, 0x01, 0xa7, 0xda, 0x22, 0x1b, 0x58, 0x17, 0xdb, 0x3e, 0x93, 0xa9, 0xc1,",
          "2946:  0x38, 0xad, 0xbe, 0x7f, 0xdd, 0xbd, 0xbd, 0xb9, 0x53, 0xd7, 0x06, 0x11, 0xe0, 0xe0, 0xef, 0xdc,",
          "2947:  0x2f, 0x95, 0x60, 0xc2, 0x7a, 0xe6, 0xe2, 0x00, 0x0e, 0x4e, 0xee, 0x65, 0x8e, 0xd2, 0x01, 0x5f,",
          "2948:  0xe6, 0x78, 0x06, 0x2a, 0x9d, 0xa8, 0x15, 0xf8, 0x81, 0xbe, 0x2a, 0x30, 0x29, 0x0e, 0xe4, 0x14,",
          "2949:  0x0c, 0x35, 0x96, 0xdc, 0x85, 0xaa, 0xbe, 0xaf, 0xae, 0x8a, 0x07, 0x8b, 0x72, 0xf1, 0xf4, 0xe2,",
          "2950:  0x35, 0xf7, 0xd0, 0x8d, 0x2c, 0xe2, 0xc2, 0x98, 0x98, 0xf9, 0xe9, 0x71, 0x83, 0xa8, 0x46, 0x11,",
          "2951:  0x4b, 0x82, 0xa1, 0xc2, 0xb8, 0xff, 0x3a, 0x0a, 0x55, 0xa4, 0x9d, 0x68, 0x29, 0xa6, 0x75, 0x46,",
          "2952:  0x5e, 0x0f, 0xe5, 0x6e, 0xdc, 0x52, 0x9d, 0xa5, 0x73, 0x51, 0x37, 0x71, 0x15, 0x39, 0x3c, 0xb3,",
          "2953:  0xdd, 0x94, 0x0e, 0x75, 0x6c, 0x59, 0xde, 0xf7, 0xd8, 0xf2, 0x05, 0x98, 0x62, 0x6c, 0x6b, 0x2d,",
          "2954:  0x0e, 0x76, 0xbc, 0x84, 0x4f, 0x62, 0x95, 0xb8, 0x31, 0xe7, 0x44, 0xeb, 0x97, 0x0d, 0x12, 0xb3,",
          "2955:  0xb4, 0xe4, 0x12, 0xcc, 0x98, 0xc3, 0x43, 0x1a, 0x27, 0x22, 0x4f, 0x23, 0x53, 0x3a, 0xfa, 0x98,",
          "2956:  0xc6, 0x1c, 0x37, 0x2a, 0x02, 0xec, 0xff, 0x86, 0x2c, 0xc3, 0xf1, 0x0c, 0x90, 0x2b, 0x22, 0xf3,",
          "2957:  0x3d, 0xba, 0x30, 0x21, 0xc3, 0x87, 0xeb, 0xd2, 0xf7, 0x05, 0xb9, 0x06, 0x27, 0xe4, 0xf8, 0x8a,",
          "2958:  0x77, 0x0e, 0x74, 0x8b, 0xc6, 0x05, 0xa3, 0x1f, 0x52, 0x8c, 0x4e, 0x5c, 0xea, 0x27, 0xc1, 0x41,",
          "2959:  0xdf, 0xf1, 0x19, 0xaa, 0xc1, 0x2b, 0xcb, 0xca, 0x52, 0xea, 0x19, 0xaa, 0xd9, 0xac, 0xd4, 0xd1,",
          "2960:  0xa6, 0x23, 0xef, 0x82, 0x27, 0xcd, 0x4f, 0x99, 0xe6, 0x93, 0xee, 0xc3, 0xb2, 0xaa, 0xcb, 0xd0,",
          "2961:  0xf7, 0xb9, 0x2e, 0x0d, 0x24, 0xab, 0xe3, 0xb0, 0xef, 0xc9, 0x26, 0x9c, 0xd1, 0xa8, 0x0b, 0xdc,",
          "2962:  0x1c, 0x74, 0xe2, 0x80, 0xd1, 0x9a, 0xc7, 0xe8, 0xcd, 0xb8, 0x25, 0x2a, 0x39, 0xaa, 0xe6, 0xad,",
          "2963:  0x8e, 0x4b, 0x41, 0x72, 0x79, 0x10, 0x25, 0xae, 0xe2, 0x03, 0xb8, 0x70, 0x6f, 0x85, 0x86, 0xde,",
          "2964:  0x66, 0x8b, 0xde, 0x58, 0x5a, 0x11, 0xf5, 0x1d, 0x96, 0xb7, 0x72, 0x21, 0x45, 0xa0, 0xa1, 0xd1,",
          "2965:  0xb1, 0xc2, 0xe4, 0xd0, 0x58, 0xe1, 0x9b, 0x0e, 0x4c, 0xe9, 0xc9, 0xfe, 0x18, 0x92, 0x72, 0xad,",
          "2966:  0x6c, 0x52, 0xee, 0xd2, 0x51, 0xdd, 0x44, 0xa5, 0xf9, 0x90, 0xc8, 0xee, 0x3b, 0x55, 0x00, 0xf1,",
          "2967:  0xfa, 0x51, 0x20, 0xea, 0x86, 0xcf, 0xc1, 0x48, 0x4c, 0x3b, 0x51, 0xde, 0xf2, 0x89, 0x03, 0x05,",
          "2968:  0x81, 0xf9, 0xfe, 0x5d, 0xce, 0x83, 0x8e, 0xb1, 0x47, 0xbf, 0xb7, 0xc7, 0xd8, 0xeb, 0x70, 0x2a,",
          "2969:  0x08, 0x19, 0xf5, 0xbb, 0xb1, 0xda, 0x39, 0x2f, 0x47, 0x4c, 0x5b, 0x87, 0x4a, 0xed, 0xf5, 0x8a,",
          "2970:  0xd1, 0xa9, 0x95, 0x41, 0x44, 0x38, 0xf8, 0x5b, 0xde, 0xa5, 0x29, 0x42, 0x5d, 0x50, 0x32, 0xf9,",
          "2971:  0x06, 0x05, 0x47, 0x4d, 0x61, 0x16, 0xc4, 0x6a, 0x23, 0xbd, 0x81, 0x94, 0x5b, 0x10, 0xab, 0x17,",
          "2972:  0xd7, 0xd1, 0xd0, 0x0c, 0xb6, 0x8a, 0xd5, 0x82, 0xac, 0x22, 0x1c, 0xda, 0x2a, 0xa6, 0xeb, 0x73,",
          "2973:  0x62, 0xe8, 0x5b, 0x19, 0xe9, 0x66, 0x3d, 0x39, 0x74, 0xb3, 0x7e, 0x11, 0xa6, 0x83, 0x70, 0x8b,",
          "2974:  0xc6, 0x41, 0x42, 0xeb, 0x62, 0x2d, 0xcc, 0x4e, 0x89, 0x8e, 0xd0, 0xa9, 0xb0, 0x95, 0x0c, 0x16,",
          "2975:  0x73, 0xd4, 0x59, 0xa3, 0x32, 0x7d, 0x00, 0xa3, 0x32, 0xc4, 0x94, 0x1f, 0x2b, 0xc6, 0x94, 0x1f,",
          "2976:  0x3f, 0xba, 0x29, 0x9f, 0x79, 0xa4, 0xa6, 0x9c, 0x14, 0x62, 0xca, 0x9f, 0x86, 0xd1, 0x4e, 0x1c,",
          "2977:  0xed, 0xf6, 0x66, 0x4f, 0x64, 0xdd, 0xf3, 0x35, 0x0e, 0x44, 0x89, 0xb3, 0xab, 0xf9, 0x4e, 0x3e,",
          "2978:  0xb8, 0x9a, 0xcf, 0x7d, 0xad, 0x04, 0xa7, 0x8c, 0xa5, 0xe3, 0xf3, 0x2b, 0x68, 0xf0, 0xb5, 0x2e,",
          "2979:  0xae, 0x89, 0xca, 0x0a, 0x12, 0x2b, 0x0b, 0x6b, 0x12, 0xba, 0x1a, 0x83, 0x16, 0x95, 0x48, 0x66,",
          "2980:  0xd2, 0x58, 0xd4, 0x20, 0xe7, 0xcd, 0xe0, 0x92, 0x82, 0xa3, 0xa6, 0x10, 0x4f, 0x27, 0xd2, 0x38,",
          "2981:  0x51, 0x07, 0x44, 0xf9, 0xf2, 0xaa, 0x25, 0x83, 0x42, 0x9b, 0x8e, 0xbb, 0x8b, 0x7e, 0xba, 0x04,",
          "2982:  0xb9, 0x29, 0x9c, 0x94, 0xee, 0xa2, 0x5e, 0x75, 0x1a, 0x9b, 0xaa, 0x23, 0xb2, 0xd6, 0xa3, 0xfd,",
          "2983:  0xea, 0x88, 0x2c, 0x84, 0xa6, 0x70, 0xff, 0xdb, 0x81, 0xd7, 0x0d, 0xec, 0x8a, 0xc7, 0xb0, 0xbd,",
          "2984:  0xed, 0x66, 0xb7, 0xb7, 0xf5, 0xa3, 0x6f, 0x6f, 0x7d, 0xad, 0x18, 0xb2, 0xd5, 0xfd, 0x8d, 0x03,",
          "2985:  0xd3, 0x86, 0xfe, 0x31, 0x34, 0x35, 0x28, 0xf4, 0x11, 0x44, 0xa3, 0xba, 0xac, 0x8d, 0xcd, 0xb4,",
          "2986:  0xed, 0x9b, 0xa2, 0x6d, 0x32, 0x98, 0x5b, 0xf4, 0xd3, 0x57, 0x86, 0xf6, 0x09, 0x62, 0x7a, 0x30,",
          "2987:  0x26, 0xee, 0x52, 0xb3, 0x62, 0x82, 0xca, 0xac, 0x7c, 0x91, 0x57, 0x35, 0x41, 0xa5, 0xf8, 0xc9,",
          "2988:  0x50, 0x09, 0x14, 0x15, 0xf2, 0x01, 0xe3, 0xf6, 0xb2, 0xae, 0xf2, 0xbf, 0xa6, 0x42, 0x5e, 0xc1,",
          "2989:  0x51, 0x53, 0xb8, 0x6d, 0x98, 0xcd, 0x32, 0x5f, 0xa6, 0x0d, 0x91, 0xbb, 0x3b, 0x50, 0x33, 0x17,",
          "2990:  0xa0, 0xea, 0x89, 0xaf, 0x56, 0xbb, 0x5e, 0xfe, 0xa9, 0xa1, 0xc5, 0x14, 0x81, 0x86, 0xc6, 0xfd,",
          "2991:  0x5d, 0x07, 0x4e, 0x0c, 0x68, 0x4c, 0x81, 0x79, 0xef, 0xc4, 0x58, 0x81, 0x21, 0xcf, 0x3f, 0xd5,",
          "2992:  0x69, 0xc3, 0x4b, 0xb3, 0x43, 0x96, 0x55, 0x5b, 0x96, 0x60, 0x4c, 0xf1, 0xee, 0xbf, 0x39, 0x70,",
          "2993:  0x2c, 0xab, 0x2b, 0x23, 0x57, 0x80, 0xc8, 0xc6, 0x2c, 0x07, 0xcc, 0x8f, 0x76, 0x68, 0xdc, 0xe3,",
          "2994:  0x2d, 0x97, 0x5a, 0x9f, 0x51, 0x9c, 0xc8, 0x62, 0x1f, 0x05, 0x0e, 0xf8, 0x4a, 0x14, 0x22, 0xd7,",
          "2995:  0x75, 0x6f, 0xa7, 0x33, 0xe5, 0x56, 0x91, 0x33, 0xc5, 0x0c, 0xa6, 0x1d, 0x41, 0x6b, 0x91, 0x68,",
          "2996:  0xcb, 0x77, 0xbf, 0x35, 0x02, 0xfa, 0x60, 0x4c, 0xe4, 0x21, 0x0a, 0xca, 0xe2, 0x64, 0xde, 0xa3,",
          "2997:  0x2a, 0x1f, 0xe2, 0x3d, 0xaa, 0x91, 0x07, 0xe5, 0x08, 0xe4, 0xe3, 0x48, 0xc6, 0x17, 0xb5, 0x8c,",
          "2998:  0xfe, 0x86, 0x41, 0xa1, 0x4d, 0xc7, 0x35, 0x69, 0x05, 0x3b, 0x54, 0x7e, 0x34, 0x96, 0xd5, 0x64,",
          "2999:  0x35, 0x45, 0xa0, 0xa1, 0xe1, 0x9a, 0xd4, 0x83, 0x46, 0x43, 0x45, 0x8a, 0x5a, 0x13, 0xde, 0x3b,",
          "3000:  0x28, 0x30, 0x9c, 0x62, 0x2b, 0x8a, 0xb6, 0x95, 0xff, 0xa7, 0x29, 0x2e, 0x47, 0xd1, 0x36, 0x0a,",
          "3001:  0x0c, 0xf7, 0x58, 0xc2, 0x28, 0x6e, 0x7b, 0xad, 0xe0, 0x7d, 0xb4, 0xae, 0xa5, 0x28, 0xbf, 0x4f,",
          "3002:  0x7b, 0x2c, 0xd7, 0xfb, 0x49, 0x70, 0xd0, 0x77, 0x7c, 0x06, 0x76, 0x62, 0x5a, 0x0f, 0xfc, 0xc4,",
          "3003:  0xe6, 0x06, 0xd9, 0x19, 0xb8, 0xd6, 0x47, 0x81, 0x03, 0xbe, 0x22, 0x8b, 0x70, 0x2c, 0x3d, 0xd8,",
          "3004:  0x4c, 0x0b, 0x5a, 0xa4, 0x33, 0xa8, 0xfd, 0x70, 0xcc, 0xa2, 0x31, 0x4f, 0xcf, 0xad, 0x4d, 0x5b,",
          "3005:  0x95, 0x15, 0x09, 0x37, 0xd1, 0xb2, 0x36, 0x69, 0xb9, 0x11, 0x6a, 0x0a, 0xf7, 0x23, 0x65, 0xbe,",
          "3006:  0x3b, 0x0e, 0xb9, 0x2a, 0xfc, 0xd8, 0xb2, 0x86, 0xd9, 0x19, 0x39, 0x72, 0x80, 0x19, 0xf9, 0x1c,",
          "3007:  0x4c, 0xde, 0x61, 0x51, 0xa8, 0x33, 0x72, 0xa3, 0x43, 0x33, 0x72, 0x16, 0xd5, 0xe0, 0x8c, 0xdc,",
          "3008:  0x58, 0x51, 0x19, 0xb9, 0xf1, 0x87, 0xcc, 0xc8, 0xfd, 0xc5, 0x28, 0x9c, 0xd6, 0x87, 0xdb, 0x34,",
          "3009:  0xb9, 0x1b, 0xc5, 0xdb, 0x41, 0xd8, 0x14, 0x07, 0xc2, 0x5f, 0x74, 0x60, 0x52, 0xae, 0x17, 0xf5,",
          "3010:  0x4a, 0x83, 0x3c, 0x00, 0x6d, 0x14, 0x74, 0x91, 0x2e, 0x23, 0x6c, 0x7e, 0xc3, 0x12, 0x94, 0x7b,",
          "3011:  0x32, 0xc3, 0x46, 0x61, 0x46, 0x23, 0xf2, 0x01, 0x80, 0xf4, 0x59, 0xb4, 0x46, 0x41, 0x8f, 0xc3,",
          "3012:  0xa5, 0xfa, 0x21, 0x6d, 0x18, 0xdf, 0x74, 0x43, 0x0b, 0x41, 0x4b, 0x20, 0x79, 0xcd, 0xd1, 0x17,",
          "3013:  0x57, 0xe4, 0x69, 0xd6, 0x2b, 0x8f, 0xa4, 0x6f, 0x0e, 0x72, 0x8f, 0x05, 0x61, 0x3c, 0x08, 0x9b,",
          "3014:  0x7c, 0x9e, 0xa8, 0x24, 0xe6, 0x9b, 0x06, 0x15, 0x53, 0xac, 0x46, 0x5e, 0xbd, 0xe6, 0xb5, 0xbc,",
          "3015:  0xd0, 0xa7, 0xf1, 0x8a, 0x24, 0xb7, 0x1f, 0xa7, 0x12, 0x00, 0x4c, 0x19, 0xf5, 0xdd, 0x14, 0x1d,",
          "3016:  0x3d, 0xc8, 0x4d, 0xd1, 0x33, 0xef, 0x84, 0x99, 0xbe, 0xc1, 0x3c, 0xd4, 0x3d, 0x96, 0x87, 0xbf,",
          "3017:  0x02, 0xe3, 0xfe, 0xe9, 0x98, 0xd9, 0xb4, 0xae, 0x47, 0x75, 0x79, 0x5f, 0x31, 0x36, 0x23, 0xaa,",
          "3018:  0x7c, 0xcf, 0x02, 0xa7, 0x88, 0xf5, 0xc0, 0x95, 0x06, 0xa2, 0x2d, 0x92, 0xcf, 0xd1, 0x8e, 0x17,",
          "3019:  0xd3, 0xf0, 0x51, 0xcf, 0xd1, 0x35, 0x2d, 0x04, 0x2d, 0x81, 0x64, 0x2b, 0x73, 0xdc, 0x7a, 0xf1,",
          "3020:  0xe8, 0xc7, 0xad, 0xdc, 0x1d, 0x1e, 0x78, 0xaf, 0xec, 0x33, 0x0e, 0x4c, 0x87, 0x99, 0x99, 0xab,",
          "3021:  0x8e, 0xdc, 0x36, 0x1e, 0xc5, 0xaa, 0x90, 0xf7, 0xc4, 0xb3, 0x30, 0xcc, 0xc9, 0x1f, 0xb4, 0xa5,",
          "3022:  0x8d, 0x1e, 0x72, 0x4b, 0x33, 0x17, 0x9f, 0xc7, 0x86, 0x5d, 0x7c, 0x26, 0xa1, 0x7e, 0xf2, 0x60,",
          "3023:  0xbc, 0xf0, 0x27, 0x0f, 0x60, 0xc0, 0x73, 0x07, 0xb7, 0xa1, 0xea, 0xc7, 0xd4, 0x4b, 0x1e, 0xf2,",
          "3024:  0xf6, 0xbb, 0x78, 0x52, 0x70, 0x29, 0x65, 0x80, 0x86, 0x97, 0xfb, 0x57, 0x65, 0x38, 0x9e, 0xf6,",
          "3025:  0x48, 0x7a, 0x14, 0xc5, 0xf7, 0x47, 0x29, 0xd7, 0x38, 0xb7, 0x7a, 0x7f, 0xbc, 0x9c, 0x22, 0xd0,",
          "3026:  0xd0, 0x70, 0x7f, 0xac, 0xcb, 0xe8, 0x8d, 0x0e, 0x0d, 0x57, 0x83, 0x4d, 0x26, 0x7a, 0xdc, 0xaa,",
          "3027:  0x67, 0xbb, 0x69, 0x50, 0x68, 0xd3, 0x71, 0x67, 0x5c, 0xfa, 0xc5, 0x2c, 0x7f, 0xb2, 0xab, 0xfc,",
          "3028:  0x6d, 0x4c, 0xf1, 0xe4, 0x0b, 0x03, 0xdf, 0x2e, 0x29, 0xa6, 0xa6, 0xa1, 0xef, 0x04, 0xee, 0x90,",
          "3029:  0x8f, 0x96, 0x7c, 0xda, 0x81, 0x63, 0xdb, 0x99, 0x62, 0x9a, 0xd4, 0x24, 0x1f, 0xb1, 0xec, 0x33,",
          "3030:  0x5b, 0xa1, 0x63, 0xa6, 0x70, 0x16, 0xce, 0x30, 0x2f, 0xdd, 0xfd, 0x4f, 0x07, 0x6c, 0xf3, 0x74,",
          "3031:  0x30, 0xcf, 0xca, 0x7a, 0x8d, 0xaa, 0xb4, 0xcf, 0x6b, 0x54, 0xa9, 0x13, 0x56, 0x3e, 0x98, 0xd3,",
          "3032:  0x3f, 0x72, 0x08, 0xa7, 0x7f, 0x74, 0xa8, 0xd7, 0xf6, 0x7a, 0x28, 0x77, 0x83, 0xba, 0xf2, 0xdb,",
          "3033:  0xcd, 0x61, 0xd8, 0xca, 0x32, 0x72, 0xb8, 0xfb, 0xc7, 0xa3, 0x26, 0x4e, 0x57, 0x47, 0xf1, 0x3f,",
          "3034:  0x10, 0xcd, 0x6e, 0xe8, 0x2a, 0x5e, 0xd9, 0xf2, 0xeb, 0x7d, 0x55, 0xbc, 0xef, 0x38, 0x7c, 0xa5,",
          "3035:  0x85, 0xec, 0xa0, 0x61, 0x45, 0xbc, 0xe3, 0xfb, 0x94, 0x59, 0xdc, 0x81, 0x0a, 0x0f, 0x6d, 0x44,",
          "3036:  0xc2, 0xad, 0x92, 0x51, 0xaa, 0x72, 0x59, 0xc1, 0xef, 0xef, 0xcd, 0xbd, 0xfd, 0xf0, 0x6a, 0xa5,",
          "3037:  0x5f, 0xa3, 0xe6, 0x4f, 0x18, 0x54, 0xf9, 0xdf, 0xa2, 0x22, 0x44, 0x05, 0x4d, 0x37, 0xb5, 0x2d,",
          "3038:  0x4a, 0x11, 0x85, 0x94, 0x9b, 0x18, 0x39, 0x24, 0x84, 0xaa, 0x78, 0x37, 0x49, 0x08, 0x95, 0xb1,",
          "3039:  0xd5, 0x9a, 0xae, 0xcb, 0x48, 0x11, 0xf7, 0xf7, 0xe6, 0x5e, 0x38, 0xbc, 0x50, 0xfd, 0x39, 0x1a,",
          "3040:  0x11, 0xee, 0x3f, 0x96, 0xcd, 0xdc, 0x55, 0xc5, 0xdb, 0x3f, 0x10, 0x73, 0xf7, 0xf9, 0xdc, 0xdc,",
          "3041:  0x3d, 0xd7, 0x37, 0x77, 0xa7, 0xcd, 0xdb, 0x42, 0x99, 0xd9, 0xf8, 0xb8, 0x37, 0xd8, 0xfd, 0xe3,",
          "3042:  0x78, 0xe1, 0x59, 0xbc, 0xda, 0x0d, 0x62, 0xca, 0xd6, 0xe2, 0x6e, 0x18, 0x84, 0x4d, 0xf5, 0x74,",
          "3043:  0xa6, 0xe5, 0x59, 0x64, 0xd0, 0x98, 0xa7, 0x77, 0xbf, 0x24, 0xce, 0x3b, 0xad, 0xe2, 0x32, 0x3e,",
          "3044:  0xca, 0x2d, 0xf1, 0xf4, 0x94, 0x2c, 0x6f, 0xd5, 0xa3, 0x2c, 0xdf, 0x9b, 0x92, 0x38, 0x72, 0x17,",
          "3045:  0xc6, 0x37, 0xe5, 0xf3, 0x17, 0xc5, 0xdc, 0xb7, 0x52, 0x6f, 0x69, 0x88, 0x9b, 0xad, 0xe9, 0xc3,",
          "3046:  0x1a, 0xf7, 0xcd, 0x9f, 0x98, 0x4a, 0x73, 0x7f, 0xbd, 0x0c, 0xc7, 0x72, 0x0f, 0x23, 0xf1, 0x80,",
          "3047:  0x3f, 0x7d, 0x05, 0x2b, 0x9f, 0x9d, 0xd7, 0x2f, 0x57, 0x6b, 0x0a, 0xf2, 0x5e, 0x80, 0x3a, 0xed,",
          "3048:  0xb4, 0xa2, 0x9e, 0x70, 0x5c, 0x46, 0x0e, 0xed, 0xb8, 0x68, 0x5f, 0x77, 0x59, 0x73, 0x41, 0x8b,",
          "3049:  0xa3, 0xaa, 0xe9, 0x1d, 0x95, 0x8f, 0x7b, 0x64, 0x6b, 0x7a, 0xad, 0x6b, 0x87, 0x63, 0x8f, 0xf7,",
          "3050:  0xda, 0x61, 0x00, 0xc7, 0xa4, 0x8a, 0xba, 0x84, 0xeb, 0x21, 0x2a, 0xb5, 0x4e, 0xf0, 0x19, 0xb5,",
          "3051:  0x9c, 0x65, 0x83, 0x79, 0xbe, 0xee, 0xa7, 0x4a, 0xdc, 0x7d, 0x93, 0x9d, 0x7d, 0x2d, 0x4d, 0x8e,",
          "3052:  0xbf, 0x11, 0xc6, 0xbc, 0x6e, 0xb2, 0x15, 0xf5, 0x3d, 0x47, 0xb2, 0x28, 0xa0, 0xa8, 0xb0, 0x64,",
          "3053:  0x15, 0x46, 0xea, 0x5e, 0x92, 0xfe, 0xe7, 0x85, 0xc3, 0x28, 0x67, 0x32, 0x61, 0x5e, 0x42, 0x51,",
          "3054:  0x70, 0x21, 0x4f, 0xc1, 0x48, 0xe2, 0x35, 0x33, 0xef, 0xa4, 0x6e, 0x78, 0x4d, 0x86, 0x02, 0x6a,",
          "3055:  0xef, 0x2e, 0x23, 0xfb, 0xec, 0x2e, 0x2f, 0x58, 0xff, 0x13, 0xc4, 0x3a, 0x75, 0xe9, 0xff, 0x3f,",
          "3056:  0x1e, 0xf2, 0x96, 0x41, 0x86, 0xd6, 0xfd, 0x31, 0x98, 0xb4, 0xff, 0xcf, 0xc7, 0x81, 0x2e, 0x3e,",
          "3057:  0xb9, 0xff, 0x32, 0x02, 0x53, 0x99, 0x32, 0xbf, 0xcc, 0x2c, 0x77, 0xf6, 0x9d, 0xe5, 0xe2, 0x3c,",
          "3058:  0xad, 0x1b, 0x52, 0x55, 0xc4, 0x69, 0x9d, 0xa7, 0x75, 0x43, 0x8a, 0x12, 0xc7, 0x47, 0xa5, 0x1e,",
          "3059:  0xf7, 0xb0, 0x1b, 0xaa, 0xac, 0xbc, 0x1e, 0x95, 0x65, 0x01, 0x45, 0x85, 0xe5, 0x01, 0xec, 0x24,",
          "3060:  0x13, 0x46, 0x51, 0xda, 0x08, 0xb5, 0x6a, 0xae, 0x14, 0xf1, 0x84, 0x9b, 0x2a, 0x69, 0x15, 0x01,",
          "3061:  0xbd, 0x0d, 0xc1, 0x8c, 0x44, 0xf2, 0x51, 0xc7, 0x7e, 0xbc, 0x6e, 0xac, 0x88, 0xd3, 0xa4, 0x7c,",
          "3062:  0x15, 0xa5, 0x5c, 0x41, 0x0f, 0x7e, 0xc3, 0x8e, 0xe9, 0x05, 0x3c, 0xfe, 0x68, 0x16, 0x30, 0x0c,",
          "3063:  0x58, 0xbc, 0x6f, 0x86, 0x6a, 0xdb, 0x0b, 0x83, 0x06, 0x65, 0x89, 0xfc, 0x1f, 0x3d, 0x55, 0x19,",
          "3064:  0x3d, 0x5d, 0x4b, 0x81, 0x68, 0xf0, 0xe2, 0x3f, 0x61, 0x89, 0x86, 0xc9, 0x20, 0xa6, 0x6a, 0xfd,",
          "3065:  0x27, 0x2c, 0x03, 0x46, 0x9b, 0xc6, 0xfd, 0x03, 0x07, 0x4e, 0x0d, 0xec, 0x8c, 0xef, 0xdf, 0xf4,",
          "3066:  0xa7, 0xfb, 0x87, 0x25, 0x38, 0x31, 0xa0, 0x0c, 0x96, 0xf4, 0x1e, 0xd9, 0x1b, 0x87, 0xaa, 0xce,",
          "3067:  0x76, 0x6a, 0xe8, 0xdc, 0x38, 0xdc, 0x36, 0x64, 0xb6, 0x82, 0xf2, 0x63, 0xdd, 0x0a, 0xdc, 0x2f,",
          "3068:  0x95, 0xc0, 0x7a, 0x8d, 0x93, 0x7c, 0xd0, 0xae, 0xf8, 0x76, 0x8a, 0xaa, 0x4e, 0x96, 0xcc, 0x75,",
          "3069:  0xc5, 0xb8, 0xec, 0xb5, 0x41, 0x05, 0xe4, 0xf9, 0xf9, 0x5a, 0xda, 0x7f, 0xbe, 0x92, 0x56, 0x5a,",
          "3070:  0x5a, 0x5f, 0x2e, 0xbe, 0xb4, 0xbe, 0xda, 0x57, 0x56, 0xff, 0xab, 0x8e, 0x9c, 0x69, 0xb9, 0x26,",
          "3071:  0x19, 0x0b, 0xeb, 0x3c, 0xc0, 0xc2, 0xbe, 0x05, 0x2a, 0x8c, 0xb6, 0x1a, 0xdc, 0xb3, 0x53, 0x96,",
          "3072:  0xd8, 0xbc, 0x6a, 0xae, 0xe0, 0xa8, 0x29, 0xc4, 0x45, 0xde, 0x56, 0x2b, 0xba, 0x7b, 0xa1, 0xdd,",
          "3073:  0x49, 0x7a, 0xca, 0x26, 0x9b, 0x8b, 0xbc, 0x1a, 0x83, 0x16, 0x95, 0xfb, 0x5f, 0x8e, 0x1c, 0x4e,",
          "3074:  0xe5, 0xa3, 0x3f, 0x9f, 0xbb, 0x60, 0x79, 0x70, 0xf7, 0xf6, 0xe7, 0x01, 0x7c, 0xfd, 0x40, 0x42,",
          "3075:  0x31, 0x8f, 0x74, 0x9a, 0x07, 0x17, 0xec, 0x97, 0x23, 0x53, 0x18, 0x5a, 0xf2, 0x32, 0x8b, 0xa7,",
          "3076:  0xbc, 0xdf, 0xe2, 0x71, 0xff, 0xdd, 0x81, 0xcc, 0x66, 0x41, 0x3a, 0x30, 0xca, 0x35, 0xe8, 0x15,",
          "3077:  0xf3, 0x9c, 0x83, 0xcd, 0x9a, 0x2f, 0x2c, 0x35, 0x2d, 0xc4, 0x9f, 0x28, 0x05, 0x91, 0x96, 0xf2,",
          "3078:  0xce, 0x4b, 0x45, 0x3c, 0x39, 0x62, 0x0b, 0xe4, 0xfe, 0xbd, 0xfa, 0xaf, 0x27, 0xda, 0xd3, 0x77,",
          "3079:  0x9f, 0x87, 0x99, 0x3e, 0xa5, 0xc4, 0xf5, 0xa8, 0x28, 0x7d, 0xc3, 0xc2, 0x9a, 0x81, 0xe2, 0xb2,",
          "3080:  0x26, 0x4a, 0x1c, 0x77, 0xf0, 0x8f, 0xe7, 0xd9, 0x93, 0xcf, 0x3b, 0x30, 0xc3, 0xf2, 0xfc, 0x1e,",
          "3081:  0x55, 0xdf, 0xe9, 0xcc, 0x55, 0x1f, 0x0a, 0xfb, 0x95, 0x70, 0xff, 0x57, 0x99, 0x27, 0xf9, 0x5f,",
          "3082:  0xe2, 0xf4, 0xe6, 0xe2, 0x0c, 0xdd, 0x5c, 0xf8, 0x12, 0xf3, 0xb7, 0x68, 0xbd, 0xdb, 0xea, 0xab,",
          "3083:  0xcd, 0x59, 0x57, 0x70, 0xd4, 0x14, 0x99, 0xc7, 0xfa, 0xca, 0xfb, 0x3e, 0xd6, 0xf7, 0x1c, 0x4c,",
          "3084:  0xda, 0xef, 0xb4, 0x88, 0x14, 0x9a, 0x3a, 0x7c, 0xb0, 0x9f, 0x74, 0xc1, 0x0c, 0x55, 0xee, 0xb1,",
          "3085:  0xb7, 0xd1, 0x7d, 0x1f, 0x7b, 0x7b, 0x06, 0x2a, 0xea, 0xe1, 0xb2, 0x34, 0xbf, 0x2b, 0x0b, 0x7f,",
          "3086:  0x14, 0x0c, 0x35, 0x96, 0x1b, 0x88, 0xb6, 0x17, 0x76, 0xbd, 0x16, 0xef, 0x21, 0x55, 0x0f, 0xa8,",
          "3087:  0x57, 0xd6, 0x35, 0x8d, 0x41, 0x8b, 0x8a, 0xb7, 0x38, 0x09, 0xda, 0xf4, 0xe5, 0x28, 0x4c, 0x33,",
          "3088:  0x23, 0xba, 0xc5, 0x1b, 0x0a, 0x8e, 0x9a, 0xc2, 0xfd, 0x67, 0x07, 0xf2, 0xaf, 0x2e, 0x65, 0x6a,",
          "3089:  0x10, 0x9d, 0x7d, 0x6b, 0x10, 0xb3, 0xf5, 0x55, 0xa5, 0x03, 0xd5, 0x57, 0xd9, 0xa5, 0x4f, 0xe5,",
          "3090:  0x07, 0x96, 0x3e, 0xbd, 0xc1, 0x5c, 0xb2, 0x97, 0x35, 0x52, 0x13, 0x83, 0x2e, 0xd8, 0x13, 0x17,",
          "3091:  0xc6, 0x7c, 0x4f, 0x97, 0x78, 0x4f, 0x4a, 0xb7, 0x6a, 0x69, 0x51, 0x10, 0x29, 0x4c, 0x6d, 0xfe,",
          "3092:  0x2b, 0xdf, 0x3e, 0xfb, 0xc4, 0x57, 0xbf, 0x7d, 0xf6, 0x89, 0x6f, 0x7c, 0xfb, 0xec, 0x13, 0x1f,",
          "3093:  0xbe, 0x77, 0xd6, 0xf9, 0xca, 0xbd, 0xb3, 0xce, 0x57, 0xef, 0x9d, 0x75, 0xbe, 0x71, 0xef, 0xac,",
          "3094:  0xf3, 0xad, 0x7b, 0x67, 0x9d, 0xcf, 0xfc, 0xc3, 0xd9, 0x27, 0x5e, 0xae, 0xa4, 0x33, 0xfb, 0xff,",
          "3095:  0x02, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x5b, 0xab, 0x8b, 0xa1, 0x78, 0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "5395:  return len(dAtA) - i, nil",
          "5396: }",
          "5398: func (m *HelmParameter) Marshal() (dAtA []byte, err error) {",
          "5399:  size := m.Size()",
          "5400:  dAtA = make([]byte, size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5428: func (m *HelmOptions) Marshal() (dAtA []byte, err error) {",
          "5429:  size := m.Size()",
          "5430:  dAtA = make([]byte, size)",
          "5431:  n, err := m.MarshalToSizedBuffer(dAtA[:size])",
          "5432:  if err != nil {",
          "5433:   return nil, err",
          "5434:  }",
          "5435:  return dAtA[:n], nil",
          "5436: }",
          "5438: func (m *HelmOptions) MarshalTo(dAtA []byte) (int, error) {",
          "5439:  size := m.Size()",
          "5440:  return m.MarshalToSizedBuffer(dAtA[:size])",
          "5441: }",
          "5443: func (m *HelmOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {",
          "5444:  i := len(dAtA)",
          "5445:  _ = i",
          "5446:  var l int",
          "5447:  _ = l",
          "5448:  if len(m.ValuesFileSchemes) > 0 {",
          "5449:   for iNdEx := len(m.ValuesFileSchemes) - 1; iNdEx >= 0; iNdEx-- {",
          "5450:    i -= len(m.ValuesFileSchemes[iNdEx])",
          "5451:    copy(dAtA[i:], m.ValuesFileSchemes[iNdEx])",
          "5452:    i = encodeVarintGenerated(dAtA, i, uint64(len(m.ValuesFileSchemes[iNdEx])))",
          "5453:    i--",
          "5454:    dAtA[i] = 0xa",
          "5455:   }",
          "5456:  }",
          "5457:  return len(dAtA) - i, nil",
          "5458: }",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "9085:  return n",
          "9086: }",
          "9088: func (m *HelmParameter) Size() (n int) {",
          "9089:  if m == nil {",
          "9090:   return 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9150: func (m *HelmOptions) Size() (n int) {",
          "9151:  if m == nil {",
          "9152:   return 0",
          "9153:  }",
          "9154:  var l int",
          "9155:  _ = l",
          "9156:  if len(m.ValuesFileSchemes) > 0 {",
          "9157:   for _, s := range m.ValuesFileSchemes {",
          "9158:    l = len(s)",
          "9159:    n += 1 + l + sovGenerated(uint64(l))",
          "9160:   }",
          "9161:  }",
          "9162:  return n",
          "9163: }",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "10839:  }, \"\")",
          "10840:  return s",
          "10841: }",
          "10842: func (this *HelmParameter) String() string {",
          "10843:  if this == nil {",
          "10844:   return \"nil\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10919: func (this *HelmOptions) String() string {",
          "10920:  if this == nil {",
          "10921:   return \"nil\"",
          "10922:  }",
          "10923:  s := strings.Join([]string{`&HelmOptions{`,",
          "10924:   `ValuesFileSchemes:` + fmt.Sprintf(\"%v\", this.ValuesFileSchemes) + `,`,",
          "10925:   `}`,",
          "10926:  }, \"\")",
          "10927:  return s",
          "10928: }",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "19110:  }",
          "19111:  return nil",
          "19112: }",
          "19113: func (m *HelmParameter) Unmarshal(dAtA []byte) error {",
          "19114:  l := len(dAtA)",
          "19115:  iNdEx := 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19197:  }",
          "19198:  return nil",
          "19199: }",
          "19200: func (m *HelmOptions) Unmarshal(dAtA []byte) error {",
          "19201:  l := len(dAtA)",
          "19202:  iNdEx := 0",
          "19203:  for iNdEx < l {",
          "19204:   preIndex := iNdEx",
          "19205:   var wire uint64",
          "19206:   for shift := uint(0); ; shift += 7 {",
          "19207:    if shift >= 64 {",
          "19208:     return ErrIntOverflowGenerated",
          "19209:    }",
          "19210:    if iNdEx >= l {",
          "19211:     return io.ErrUnexpectedEOF",
          "19212:    }",
          "19213:    b := dAtA[iNdEx]",
          "19214:    iNdEx++",
          "19215:    wire |= uint64(b&0x7F) << shift",
          "19216:    if b < 0x80 {",
          "19217:     break",
          "19218:    }",
          "19219:   }",
          "19220:   fieldNum := int32(wire >> 3)",
          "19221:   wireType := int(wire & 0x7)",
          "19222:   if wireType == 4 {",
          "19223:    return fmt.Errorf(\"proto: HelmOptions: wiretype end group for non-group\")",
          "19224:   }",
          "19225:   if fieldNum <= 0 {",
          "19226:    return fmt.Errorf(\"proto: HelmOptions: illegal tag %d (wire type %d)\", fieldNum, wire)",
          "19227:   }",
          "19228:   switch fieldNum {",
          "19229:   case 1:",
          "19230:    if wireType != 2 {",
          "19231:     return fmt.Errorf(\"proto: wrong wireType = %d for field ValuesFileSchemes\", wireType)",
          "19232:    }",
          "19233:    var stringLen uint64",
          "19234:    for shift := uint(0); ; shift += 7 {",
          "19235:     if shift >= 64 {",
          "19236:      return ErrIntOverflowGenerated",
          "19237:     }",
          "19238:     if iNdEx >= l {",
          "19239:      return io.ErrUnexpectedEOF",
          "19240:     }",
          "19241:     b := dAtA[iNdEx]",
          "19242:     iNdEx++",
          "19243:     stringLen |= uint64(b&0x7F) << shift",
          "19244:     if b < 0x80 {",
          "19245:      break",
          "19246:     }",
          "19247:    }",
          "19248:    intStringLen := int(stringLen)",
          "19249:    if intStringLen < 0 {",
          "19250:     return ErrInvalidLengthGenerated",
          "19251:    }",
          "19252:    postIndex := iNdEx + intStringLen",
          "19253:    if postIndex < 0 {",
          "19254:     return ErrInvalidLengthGenerated",
          "19255:    }",
          "19256:    if postIndex > l {",
          "19257:     return io.ErrUnexpectedEOF",
          "19258:    }",
          "19259:    m.ValuesFileSchemes = append(m.ValuesFileSchemes, string(dAtA[iNdEx:postIndex]))",
          "19260:    iNdEx = postIndex",
          "19261:   default:",
          "19262:    iNdEx = preIndex",
          "19263:    skippy, err := skipGenerated(dAtA[iNdEx:])",
          "19264:    if err != nil {",
          "19265:     return err",
          "19266:    }",
          "19267:    if (skippy < 0) || (iNdEx+skippy) < 0 {",
          "19268:     return ErrInvalidLengthGenerated",
          "19269:    }",
          "19270:    if (iNdEx + skippy) > l {",
          "19271:     return io.ErrUnexpectedEOF",
          "19272:    }",
          "19273:    iNdEx += skippy",
          "19274:   }",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto": [
          "File: pkg/apis/application/v1alpha1/generated.proto -> pkg/apis/application/v1alpha1/generated.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:   optional string path = 2;",
          "609: }",
          "612: message HelmParameter {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612: message HelmOptions {",
          "613:   repeated string valuesFileSchemes = 1;",
          "614: }",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go": [
          "File: pkg/apis/application/v1alpha1/openapi_generated.go -> pkg/apis/application/v1alpha1/openapi_generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.GnuPGPublicKeyList\":               schema_pkg_apis_application_v1alpha1_GnuPGPublicKeyList(ref),",
          "53:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.HealthStatus\":                     schema_pkg_apis_application_v1alpha1_HealthStatus(ref),",
          "54:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.HelmFileParameter\":                schema_pkg_apis_application_v1alpha1_HelmFileParameter(ref),",
          "55:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.HelmParameter\":                    schema_pkg_apis_application_v1alpha1_HelmParameter(ref),",
          "56:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.HostInfo\":                         schema_pkg_apis_application_v1alpha1_HostInfo(ref),",
          "57:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.HostResourceInfo\":                 schema_pkg_apis_application_v1alpha1_HostResourceInfo(ref),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:   \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1.HelmOptions\":                      schema_pkg_apis_application_v1alpha1_HelmOptions(ref),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2119:  }",
          "2120: }",
          "2122: func schema_pkg_apis_application_v1alpha1_HelmParameter(ref common.ReferenceCallback) common.OpenAPIDefinition {",
          "2123:  return common.OpenAPIDefinition{",
          "2124:   Schema: spec.Schema{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2123: func schema_pkg_apis_application_v1alpha1_HelmOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {",
          "2124:  return common.OpenAPIDefinition{",
          "2125:   Schema: spec.Schema{",
          "2126:    SchemaProps: spec.SchemaProps{",
          "2127:     Description: \"HelmOptions holds helm options\",",
          "2128:     Type:        []string{\"object\"},",
          "2129:     Properties: map[string]spec.Schema{",
          "2130:      \"ValuesFileSchemes\": {",
          "2131:       SchemaProps: spec.SchemaProps{",
          "2132:        Type: []string{\"array\"},",
          "2133:        Items: &spec.SchemaOrArray{",
          "2134:         Schema: &spec.Schema{",
          "2135:          SchemaProps: spec.SchemaProps{",
          "2136:           Default: \"\",",
          "2137:           Type:    []string{\"string\"},",
          "2138:           Format:  \"\",",
          "2139:          },",
          "2140:         },",
          "2141:        },",
          "2142:       },",
          "2143:      },",
          "2144:     },",
          "2145:     Required: []string{\"ValuesFileSchemes\"},",
          "2146:    },",
          "2147:   },",
          "2148:  }",
          "2149: }",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/types.go||pkg/apis/application/v1alpha1/types.go": [
          "File: pkg/apis/application/v1alpha1/types.go -> pkg/apis/application/v1alpha1/types.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2088:  LockRepo bool     `json:\"lockRepo,omitempty\" protobuf:\"bytes,4,name=lockRepo\"`",
          "2089: }",
          "2092: type KustomizeOptions struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2092: type HelmOptions struct {",
          "2093:  ValuesFileSchemes []string `protobuf:\"bytes,1,opt,name=valuesFileSchemes\"`",
          "2094: }",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/zz_generated.deepcopy.go||pkg/apis/application/v1alpha1/zz_generated.deepcopy.go": [
          "File: pkg/apis/application/v1alpha1/zz_generated.deepcopy.go -> pkg/apis/application/v1alpha1/zz_generated.deepcopy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:  return out",
          "1068: }",
          "1071: func (in *HelmParameter) DeepCopyInto(out *HelmParameter) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1071: func (in *HelmOptions) DeepCopyInto(out *HelmOptions) {",
          "1073:  if in.ValuesFileSchemes != nil {",
          "1074:   in, out := &in.ValuesFileSchemes, &out.ValuesFileSchemes",
          "1076:   copy(*out, *in)",
          "1077:  }",
          "1078:  return",
          "1079: }",
          "1082: func (in *HelmOptions) DeepCopy() *HelmOptions {",
          "1083:  if in == nil {",
          "1084:   return nil",
          "1085:  }",
          "1086:  out := new(HelmOptions)",
          "1087:  in.DeepCopyInto(out)",
          "1088:  return out",
          "1089: }",
          "",
          "---------------"
        ],
        "reposerver/apiclient/repository.pb.go||reposerver/apiclient/repository.pb.go": [
          "File: reposerver/apiclient/repository.pb.go -> reposerver/apiclient/repository.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  NoRevisionCache      bool                  `protobuf:\"varint,18,opt,name=noRevisionCache,proto3\" json:\"noRevisionCache,omitempty\"`",
          "53:  TrackingMethod       string                `protobuf:\"bytes,19,opt,name=trackingMethod,proto3\" json:\"trackingMethod,omitempty\"`",
          "54:  EnabledSourceTypes   map[string]bool       `protobuf:\"bytes,20,rep,name=enabledSourceTypes,proto3\" json:\"enabledSourceTypes,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"varint,2,opt,name=value,proto3\"`",
          "55:  XXX_NoUnkeyedLiteral struct{}              `json:\"-\"`",
          "56:  XXX_unrecognized     []byte                `json:\"-\"`",
          "57:  XXX_sizecache        int32                 `json:\"-\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:  HelmOptions          *v1alpha1.HelmOptions `protobuf:\"bytes,21,opt,name=helmOptions,proto3\" json:\"helmOptions,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:  return nil",
          "210: }",
          "213: type TestRepositoryRequest struct {",
          "214:  Repo                 *v1alpha1.Repository `protobuf:\"bytes,1,opt,name=repo,proto3\" json:\"repo,omitempty\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: func (m *ManifestRequest) GetHelmOptions() *v1alpha1.HelmOptions {",
          "214:  if m != nil {",
          "215:   return m.HelmOptions",
          "216:  }",
          "217:  return nil",
          "218: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1533: }",
          "1535: var fileDescriptor_dd8723cfcc820480 = []byte{",
          "1636: }",
          "",
          "[Removed Lines]",
          "1537:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6e, 0x1b, 0x45,",
          "1538:  0x14, 0x8e, 0x7f, 0x92, 0xd8, 0xc7, 0x6d, 0xe2, 0x4c, 0xff, 0x96, 0x25, 0x8d, 0xd2, 0x45, 0x54,",
          "1539:  0x81, 0xb6, 0x6b, 0xd5, 0xad, 0xa0, 0x6a, 0x05, 0x52, 0x48, 0xd3, 0x14, 0xa5, 0x69, 0xc2, 0xa6,",
          "1540:  0x20, 0x01, 0x15, 0xd5, 0x64, 0x3d, 0x59, 0x0f, 0x5e, 0xef, 0x4e, 0x77, 0xd6, 0x46, 0xa9, 0xc4,",
          "1541:  0x05, 0x57, 0x3c, 0x01, 0xbc, 0x01, 0xcf, 0xc0, 0x25, 0x57, 0xfc, 0x5c, 0xf2, 0x08, 0xa8, 0xbc,",
          "1542:  0x05, 0x57, 0x68, 0x66, 0xff, 0xc6, 0xeb, 0x75, 0x5a, 0x29, 0x69, 0x72, 0x63, 0xcf, 0x9c, 0x39,",
          "1543:  0x7f, 0x73, 0xe6, 0xcc, 0x39, 0xdf, 0x2c, 0x5c, 0x0d, 0x08, 0xf3, 0x39, 0x09, 0x86, 0x24, 0x68,",
          "1544:  0xc9, 0x21, 0x0d, 0xfd, 0xe0, 0x40, 0x19, 0x9a, 0x2c, 0xf0, 0x43, 0x1f, 0x41, 0x46, 0xd1, 0xcf,",
          "1545:  0x3b, 0xbe, 0xe3, 0x4b, 0x72, 0x4b, 0x8c, 0x22, 0x0e, 0x7d, 0xd1, 0xf1, 0x7d, 0xc7, 0x25, 0x2d,",
          "1546:  0xcc, 0x68, 0x0b, 0x7b, 0x9e, 0x1f, 0xe2, 0x90, 0xfa, 0x1e, 0x8f, 0x57, 0x8d, 0xde, 0x1d, 0x6e,",
          "1547:  0x52, 0x5f, 0xae, 0xda, 0x7e, 0x40, 0x5a, 0xc3, 0x9b, 0x2d, 0x87, 0x78, 0x24, 0xc0, 0x21, 0xe9,",
          "1548:  0xc4, 0x3c, 0x8f, 0x1c, 0x1a, 0x76, 0x07, 0x7b, 0xa6, 0xed, 0xf7, 0x5b, 0x38, 0x90, 0x26, 0xbe,",
          "1549:  0x95, 0x83, 0x1b, 0x76, 0xa7, 0x35, 0x6c, 0xb7, 0x58, 0xcf, 0x11, 0xf2, 0xbc, 0x85, 0x19, 0x73,",
          "1550:  0xa9, 0x2d, 0xf5, 0xb7, 0x86, 0x37, 0xb1, 0xcb, 0xba, 0x78, 0x4c, 0x9b, 0xf1, 0x4b, 0x1d, 0xe6,",
          "1551:  0xb7, 0xb0, 0x47, 0xf7, 0x09, 0x0f, 0x2d, 0xf2, 0x7c, 0x40, 0x78, 0x88, 0x9e, 0x42, 0x55, 0xec,",
          "1552:  0x43, 0x2b, 0x2d, 0x97, 0x56, 0x1a, 0xed, 0x87, 0x66, 0x66, 0xd0, 0x4c, 0x0c, 0xca, 0xc1, 0x33,",
          "1553:  0xbb, 0x63, 0x0e, 0xdb, 0x26, 0xeb, 0x39, 0xa6, 0x30, 0x68, 0x2a, 0x06, 0xcd, 0xc4, 0xa0, 0x69,",
          "1554:  0xa5, 0x11, 0xb1, 0xa4, 0x56, 0xa4, 0x43, 0x2d, 0x20, 0x43, 0xca, 0xa9, 0xef, 0x69, 0xe5, 0xe5,",
          "1555:  0xd2, 0x4a, 0xdd, 0x4a, 0xe7, 0x48, 0x83, 0x59, 0xcf, 0x5f, 0xc3, 0x76, 0x97, 0x68, 0x95, 0xe5,",
          "1556:  0xd2, 0x4a, 0xcd, 0x4a, 0xa6, 0x68, 0x19, 0x1a, 0x98, 0xb1, 0x47, 0x78, 0x8f, 0xb8, 0x9b, 0xe4,",
          "1557:  0x40, 0xab, 0x4a, 0x41, 0x95, 0x24, 0x64, 0x31, 0x63, 0x8f, 0x71, 0x9f, 0x68, 0xd3, 0x72, 0x35,",
          "1558:  0x99, 0xa2, 0x45, 0xa8, 0x7b, 0xb8, 0x4f, 0x38, 0xc3, 0x36, 0xd1, 0x6a, 0x72, 0x2d, 0x23, 0xa0,",
          "1559:  0xef, 0x61, 0x41, 0x71, 0x7c, 0xd7, 0x1f, 0x04, 0x36, 0xd1, 0x40, 0x6e, 0x7d, 0xfb, 0x68, 0x5b,",
          "1560:  0x5f, 0xcd, 0xab, 0xb5, 0xc6, 0x2d, 0xa1, 0x6f, 0x60, 0x5a, 0x26, 0x8d, 0xd6, 0x58, 0xae, 0x1c,",
          "1561:  0x6b, 0xb4, 0x23, 0xb5, 0xc8, 0x83, 0x59, 0xe6, 0x0e, 0x1c, 0xea, 0x71, 0xed, 0x8c, 0xb4, 0xf0,",
          "1562:  0xe4, 0x68, 0x16, 0xd6, 0x7c, 0x6f, 0x9f, 0x3a, 0x5b, 0xd8, 0xc3, 0x0e, 0xe9, 0x13, 0x2f, 0xdc,",
          "1563:  0x91, 0xca, 0xad, 0xc4, 0x08, 0x7a, 0x01, 0xcd, 0xde, 0x80, 0x87, 0x7e, 0x9f, 0xbe, 0x20, 0xdb,",
          "1564:  0x4c, 0x26, 0xb7, 0x76, 0x56, 0x46, 0xf3, 0xf1, 0xd1, 0x0c, 0x6f, 0xe6, 0xb4, 0x5a, 0x63, 0x76,",
          "1565:  0x44, 0x92, 0xf4, 0x06, 0x7b, 0xe4, 0x0b, 0x12, 0xc8, 0xec, 0x9a, 0x8b, 0x92, 0x44, 0x21, 0x45,",
          "1566:  0x69, 0x44, 0xe3, 0x19, 0xd7, 0xe6, 0x97, 0x2b, 0x51, 0x1a, 0xa5, 0x24, 0xb4, 0x02, 0xf3, 0x43,",
          "1567:  0x12, 0xd0, 0xfd, 0x83, 0x5d, 0xea, 0x78, 0x38, 0x1c, 0x04, 0x44, 0x6b, 0xca, 0x54, 0xcc, 0x93,",
          "1568:  0x51, 0x1f, 0xce, 0x76, 0x89, 0xdb, 0x17, 0x21, 0x5f, 0x0b, 0x48, 0x87, 0x6b, 0x0b, 0x32, 0xbe,",
          "1569:  0x1b, 0x47, 0x3f, 0x41, 0xa9, 0xce, 0x1a, 0xd5, 0x2e, 0x1c, 0xf3, 0x7c, 0x2b, 0xbe, 0x29, 0xd1,",
          "1570:  0x1d, 0x41, 0x91, 0x63, 0x39, 0x32, 0xba, 0x0a, 0x73, 0x61, 0x80, 0xed, 0x1e, 0xf5, 0x9c, 0x2d,",
          "1571:  0x12, 0x76, 0xfd, 0x8e, 0x76, 0x4e, 0x46, 0x22, 0x47, 0x45, 0x36, 0x20, 0xe2, 0xe1, 0x3d, 0x97,",
          "1572:  0x74, 0xa2, 0x5c, 0x7c, 0x72, 0xc0, 0x08, 0xd7, 0xce, 0xcb, 0x5d, 0xdc, 0x32, 0x95, 0xe2, 0x96,",
          "1573:  0x2b, 0x10, 0xe6, 0xfa, 0x98, 0xd4, 0xba, 0x17, 0x06, 0x07, 0x56, 0x81, 0x3a, 0x7d, 0x1d, 0x2e,",
          "1574:  0x4d, 0x60, 0x47, 0x4d, 0xa8, 0xf4, 0xc8, 0x81, 0x2c, 0x33, 0x75, 0x4b, 0x0c, 0xd1, 0x79, 0x98,",
          "1575:  0x1e, 0x62, 0x77, 0x40, 0x64, 0x61, 0xa8, 0x59, 0xd1, 0xe4, 0x6e, 0xf9, 0x4e, 0xc9, 0x18, 0xc0,",
          "1576:  0x85, 0x27, 0xd2, 0x83, 0x34, 0xbf, 0x4f, 0xa2, 0x58, 0x19, 0x0f, 0xe1, 0x62, 0xde, 0x2c, 0x67,",
          "1577:  0xbe, 0xc7, 0x09, 0x32, 0x01, 0xc9, 0x84, 0xa0, 0xa4, 0x93, 0xad, 0x4a, 0x2f, 0x6a, 0x56, 0xc1,",
          "1578:  0x8a, 0xf1, 0x43, 0x19, 0x2e, 0x5a, 0x84, 0xfb, 0xee, 0x90, 0x24, 0xa7, 0x75, 0x32, 0xf5, 0xf6,",
          "1579:  0x6b, 0xa8, 0x60, 0xc6, 0x64, 0x44, 0x1b, 0xed, 0x4f, 0x8f, 0xad, 0xa2, 0x59, 0x42, 0x2b, 0xba,",
          "1580:  0x0e, 0x0b, 0xb8, 0xbf, 0x47, 0x9d, 0x81, 0x3f, 0xe0, 0xc9, 0xb6, 0x64, 0xe9, 0xae, 0x5b, 0xe3,",
          "1581:  0x0b, 0x86, 0x0d, 0x97, 0xc6, 0x42, 0x10, 0x87, 0x53, 0xed, 0x0a, 0xa5, 0x5c, 0x57, 0x28, 0x34,",
          "1582:  0x52, 0x9e, 0x64, 0xe4, 0x8f, 0x12, 0x34, 0xb3, 0x84, 0x8d, 0xd5, 0x2f, 0x42, 0xbd, 0x1f, 0xd3,",
          "1583:  0xb8, 0x56, 0x92, 0xb7, 0x3e, 0x23, 0x8c, 0x36, 0x88, 0x72, 0xbe, 0x41, 0x5c, 0x84, 0x99, 0xa8,",
          "1584:  0xf5, 0xc7, 0x1b, 0x8b, 0x67, 0x23, 0x2e, 0x57, 0x73, 0x2e, 0x2f, 0x01, 0xf0, 0x34, 0xdd, 0xb5,",
          "1585:  0x19, 0xb9, 0xaa, 0x50, 0x90, 0x01, 0x67, 0xa2, 0x72, 0x62, 0x11, 0x3e, 0x70, 0x43, 0x6d, 0x56,",
          "1586:  0x72, 0x8c, 0xd0, 0x0c, 0x1f, 0xe6, 0x1f, 0x51, 0xb1, 0x87, 0x7d, 0x7e, 0x32, 0xc9, 0xfe, 0x01,",
          "1587:  0x54, 0x85, 0x31, 0xb1, 0xb1, 0xbd, 0x00, 0x7b, 0x76, 0x97, 0x24, 0xb1, 0x4a, 0xe7, 0x08, 0x41,",
          "1588:  0x35, 0xc4, 0x0e, 0xd7, 0xca, 0x92, 0x2e, 0xc7, 0xc6, 0xaf, 0xe5, 0xc8, 0xd3, 0x55, 0xc6, 0xf8,",
          "1589:  0xe9, 0x63, 0x88, 0xe2, 0xaa, 0x56, 0x19, 0xaf, 0x6a, 0x39, 0x97, 0x4f, 0xa7, 0xaa, 0xcd, 0xae,",
          "1590:  0x32, 0x26, 0x1c, 0x41, 0x37, 0xa1, 0x8a, 0x19, 0x8b, 0x02, 0xde, 0x68, 0x5f, 0x56, 0x1d, 0x8d,",
          "1591:  0x59, 0xc4, 0x7f, 0xec, 0x92, 0x64, 0xd5, 0x3f, 0x84, 0x7a, 0x4a, 0x7a, 0x95, 0xd9, 0xba, 0x6a,",
          "1592:  0xf6, 0xbf, 0x69, 0x78, 0x4b, 0xc4, 0x74, 0x57, 0x26, 0xf2, 0x2a, 0x63, 0xf7, 0x49, 0x88, 0xa9,",
          "1593:  0xcb, 0x3f, 0x1b, 0x90, 0xe0, 0xe0, 0x0d, 0x1f, 0x9d, 0x03, 0x33, 0xd1, 0x3d, 0x88, 0x2b, 0xd2,",
          "1594:  0xb1, 0x63, 0xac, 0x58, 0x7d, 0x06, 0xac, 0x2a, 0x6f, 0x06, 0x58, 0x15, 0x01, 0x9d, 0xea, 0x09,",
          "1595:  0x01, 0x9d, 0xc9, 0x58, 0x57, 0x41, 0xd0, 0x33, 0xa3, 0x08, 0xba, 0x00, 0x3f, 0xcc, 0xbe, 0x2e,",
          "1596:  0x7e, 0xa8, 0x15, 0xe2, 0x87, 0x7e, 0xe1, 0x4d, 0xab, 0xcb, 0x70, 0x7f, 0xa4, 0x26, 0xf0, 0xc4,",
          "1597:  0x5c, 0x3b, 0x8d, 0x3b, 0xf7, 0xa3, 0x6c, 0xc4, 0xcc, 0xcf, 0x5c, 0x49, 0xbb, 0x84, 0x28, 0x6e,",
          "1598:  0xa2, 0x5e, 0x47, 0x7a, 0xe4, 0x18, 0xdd, 0x86, 0xd9, 0x1e, 0xf7, 0x3d, 0x8f, 0x84, 0x71, 0xc2,",
          "1599:  0xea, 0xea, 0xce, 0x36, 0xa3, 0xa5, 0x55, 0xc6, 0x76, 0x19, 0xb1, 0xad, 0x84, 0x15, 0x5d, 0x83,",
          "1600:  0xaa, 0x40, 0x6f, 0xb2, 0x63, 0x34, 0xda, 0x97, 0x54, 0x91, 0x87, 0xc4, 0xed, 0x27, 0xfc, 0x92,",
          "1601:  0x09, 0xdd, 0x85, 0x7a, 0x7a, 0xc2, 0x71, 0x0a, 0x2d, 0x8e, 0x18, 0x49, 0x16, 0x13, 0xb1, 0x8c,",
          "1602:  0x5d, 0xc8, 0x76, 0x68, 0x40, 0x6c, 0x89, 0x3e, 0xa6, 0xc7, 0x65, 0xef, 0x27, 0x8b, 0xa9, 0x6c,",
          "1603:  0xca, 0x6e, 0xfc, 0x5e, 0x82, 0x2b, 0xd9, 0xd1, 0x24, 0x39, 0xb0, 0x45, 0x42, 0xdc, 0xc1, 0x21,",
          "1604:  0x3e, 0xfd, 0x4a, 0x7e, 0x15, 0xe6, 0xec, 0x2e, 0xb1, 0x7b, 0x19, 0x12, 0x8f, 0x1e, 0x85, 0x39,",
          "1605:  0xaa, 0xf1, 0x67, 0x19, 0xe6, 0x46, 0x0f, 0x42, 0x9c, 0xa4, 0x68, 0xe0, 0xc9, 0x49, 0x8a, 0x31,",
          "1606:  0xda, 0x81, 0x33, 0xc4, 0x1b, 0xd2, 0xc0, 0xf7, 0xc4, 0xbb, 0x25, 0xa9, 0x0b, 0xd7, 0x27, 0x1f,",
          "1607:  0xa7, 0xb9, 0xae, 0xb0, 0x47, 0x79, 0x39, 0xa2, 0x01, 0x79, 0x00, 0x0c, 0x07, 0xb8, 0x4f, 0x42,",
          "1608:  0x12, 0x88, 0xcb, 0x5f, 0x39, 0x86, 0xcb, 0x1f, 0x79, 0xb0, 0x93, 0xa8, 0xb5, 0x14, 0x0b, 0xfa,",
          "1609:  0x33, 0x58, 0x18, 0x73, 0xa9, 0x20, 0xf7, 0x6f, 0xab, 0xb9, 0xdf, 0x68, 0x2f, 0x15, 0xec, 0x50,",
          "1610:  0x51, 0xa3, 0xde, 0x8d, 0xdf, 0xca, 0xd0, 0x50, 0xf2, 0xb3, 0x30, 0x8c, 0x4b, 0x00, 0x52, 0xe0,",
          "1611:  0x01, 0x75, 0xe3, 0xbe, 0x5a, 0xb7, 0x14, 0x0a, 0xea, 0x15, 0x04, 0x65, 0xf3, 0x68, 0x41, 0x11,",
          "1612:  0x2e, 0x15, 0x46, 0x44, 0x60, 0x33, 0x69, 0x9a, 0xc7, 0x75, 0x30, 0x9e, 0xa1, 0xef, 0x60, 0x6e,",
          "1613:  0x9f, 0xba, 0x64, 0x27, 0x73, 0x64, 0x46, 0x3a, 0xb2, 0x7d, 0x74, 0x47, 0x1e, 0xa8, 0x7a, 0xad,",
          "1614:  0x9c, 0x19, 0xe3, 0x7d, 0x68, 0xe6, 0xaf, 0xab, 0x70, 0x92, 0xf6, 0xb1, 0x93, 0x46, 0x2b, 0x9e,",
          "1615:  0x19, 0x3f, 0x95, 0x00, 0x8d, 0x9f, 0xc7, 0xa4, 0xa0, 0xf7, 0xee, 0xf0, 0xe4, 0x61, 0x1b, 0x5d,",
          "1616:  0x14, 0x85, 0x82, 0x36, 0xa1, 0xd1, 0x21, 0x3c, 0xa4, 0x9e, 0x74, 0x38, 0x2e, 0x22, 0xef, 0x1d,",
          "1617:  0x7e, 0xf0, 0xf7, 0x33, 0x01, 0x4b, 0x95, 0x36, 0x3e, 0x87, 0xcb, 0x87, 0x72, 0x2b, 0x88, 0xb8,",
          "1618:  0x34, 0x82, 0x88, 0x0f, 0xc5, 0xd1, 0x06, 0x82, 0x66, 0xbe, 0x1a, 0x19, 0xcf, 0x61, 0x41, 0xc4,",
          "1619:  0x74, 0xad, 0x8b, 0x83, 0xf0, 0x84, 0x50, 0xee, 0x3d, 0xa8, 0xa7, 0x26, 0x0b, 0x63, 0xad, 0x43,",
          "1620:  0x6d, 0x98, 0x7c, 0x20, 0x88, 0x60, 0x6e, 0x3a, 0x37, 0x56, 0x01, 0xa9, 0xfe, 0xc6, 0x7d, 0xe3,",
          "1621:  0x1a, 0x4c, 0xd3, 0x90, 0xf4, 0x13, 0xf0, 0x76, 0x21, 0x5f, 0xee, 0x25, 0xbb, 0x15, 0xf1, 0xb4,",
          "1622:  0xff, 0x9d, 0x86, 0x85, 0xac, 0xea, 0x8a, 0x5f, 0x6a, 0x13, 0xb4, 0x0d, 0xcd, 0x8d, 0xf8, 0xd3,",
          "1623:  0x5c, 0xf2, 0x78, 0x41, 0x6f, 0x1f, 0xf2, 0x06, 0xd7, 0x17, 0x8b, 0x17, 0x23, 0x8f, 0x8c, 0x29,",
          "1624:  0xf4, 0x25, 0xcc, 0x8d, 0xbe, 0x5c, 0xd1, 0x15, 0x55, 0xa2, 0xf0, 0x31, 0xad, 0x1b, 0x87, 0xb1,",
          "1625:  0xa4, 0xaa, 0x9f, 0xc2, 0x7c, 0xee, 0x19, 0x87, 0x8c, 0xd1, 0x76, 0x5f, 0xf4, 0xcc, 0xd5, 0xdf,",
          "1626:  0x39, 0x94, 0x27, 0xd5, 0x7e, 0x0f, 0x6a, 0xc9, 0xb3, 0x67, 0x34, 0x02, 0xb9, 0xc7, 0x90, 0xde,",
          "1627:  0x1c, 0xd5, 0xb7, 0xcf, 0x8d, 0x29, 0xf4, 0x71, 0x24, 0x2c, 0x60, 0xf1, 0xb8, 0xb0, 0x02, 0xf6,",
          "1628:  0xf5, 0x73, 0x05, 0x00, 0x5b, 0x6e, 0xed, 0xec, 0x86, 0xac, 0xff, 0x31, 0x34, 0x40, 0xef, 0xbe,",
          "1629:  0x16, 0x8e, 0xd1, 0x8d, 0x3c, 0xdb, 0x38, 0xba, 0x30, 0xa6, 0xd0, 0xcf, 0x25, 0x38, 0xb7, 0x41,",
          "1630:  0xc2, 0x7c, 0xa7, 0x45, 0x37, 0x8a, 0x8d, 0x4c, 0xe8, 0xc8, 0xfa, 0xe3, 0xa3, 0xde, 0x88, 0x51,",
          "1631:  0xb5, 0xc6, 0x14, 0xda, 0x91, 0xdb, 0xce, 0x32, 0x1b, 0x5d, 0x2e, 0x4c, 0xe1, 0x34, 0x7a, 0x4b,",
          "1632:  0x93, 0x96, 0x93, 0xad, 0x7e, 0xb2, 0xfa, 0xd7, 0xcb, 0xa5, 0xd2, 0xdf, 0x2f, 0x97, 0x4a, 0xff,",
          "1633:  0xbc, 0x5c, 0x2a, 0x7d, 0x75, 0xeb, 0x15, 0xdf, 0xac, 0x95, 0xcf, 0xeb, 0x98, 0x51, 0xdb, 0xa5,",
          "1634:  0xc4, 0x0b, 0xf7, 0x66, 0xe4, 0x17, 0xea, 0x5b, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x33, 0x5f,",
          "1635:  0x15, 0x9a, 0x7d, 0x17, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "1545:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6f, 0xdb, 0xb6,",
          "1546:  0x16, 0x8f, 0x6c, 0x27, 0xb1, 0x8f, 0xdb, 0xc4, 0x61, 0xbf, 0x74, 0x75, 0xd3, 0x20, 0xd5, 0xc5,",
          "1547:  0x2d, 0x72, 0x6f, 0x5b, 0x19, 0x4d, 0x8b, 0xad, 0x68, 0xb1, 0x01, 0x59, 0x9a, 0xa6, 0x43, 0x9a,",
          "1548:  0x26, 0x53, 0xba, 0x01, 0xdb, 0x8a, 0x15, 0x8c, 0xcc, 0xc8, 0x9c, 0x6d, 0x89, 0x15, 0x65, 0x0f,",
          "1549:  0x2e, 0xb0, 0x87, 0x3d, 0xed, 0x7d, 0xc0, 0xf6, 0xaf, 0xec, 0x71, 0x4f, 0xfb, 0x78, 0xdc, 0x9f,",
          "1550:  0x30, 0x74, 0xff, 0xc5, 0x9e, 0x06, 0x52, 0x5f, 0xb4, 0x2c, 0xa7, 0x1d, 0x9c, 0xa6, 0x2f, 0x36,",
          "1551:  0x79, 0x78, 0xbe, 0x79, 0x78, 0xf8, 0xa3, 0xe0, 0x6a, 0x40, 0x98, 0xcf, 0x49, 0x30, 0x20, 0x41,",
          "1552:  0x53, 0x0e, 0x69, 0xe8, 0x07, 0x43, 0x65, 0x68, 0xb1, 0xc0, 0x0f, 0x7d, 0x04, 0x19, 0xc5, 0x38,",
          "1553:  0xef, 0xfa, 0xae, 0x2f, 0xc9, 0x4d, 0x31, 0x8a, 0x38, 0x8c, 0x65, 0xd7, 0xf7, 0xdd, 0x2e, 0x69,",
          "1554:  0x62, 0x46, 0x9b, 0xd8, 0xf3, 0xfc, 0x10, 0x87, 0xd4, 0xf7, 0x78, 0xbc, 0x6a, 0x76, 0xee, 0x70,",
          "1555:  0x8b, 0xfa, 0x72, 0xd5, 0xf1, 0x03, 0xd2, 0x1c, 0xdc, 0x6c, 0xba, 0xc4, 0x23, 0x01, 0x0e, 0x49,",
          "1556:  0x2b, 0xe6, 0x79, 0xe4, 0xd2, 0xb0, 0xdd, 0x3f, 0xb4, 0x1c, 0xbf, 0xd7, 0xc4, 0x81, 0x34, 0xf1,",
          "1557:  0xa5, 0x1c, 0xdc, 0x70, 0x5a, 0xcd, 0xc1, 0x7a, 0x93, 0x75, 0x5c, 0x21, 0xcf, 0x9b, 0x98, 0xb1,",
          "1558:  0x2e, 0x75, 0xa4, 0xfe, 0xe6, 0xe0, 0x26, 0xee, 0xb2, 0x36, 0x1e, 0xd3, 0x66, 0x7e, 0x07, 0xb0,",
          "1559:  0xb8, 0x8b, 0x3d, 0x7a, 0x44, 0x78, 0x68, 0x93, 0xe7, 0x7d, 0xc2, 0x43, 0xf4, 0x14, 0x2a, 0x22,",
          "1560:  0x0e, 0x5d, 0x5b, 0xd5, 0xd6, 0xea, 0xeb, 0x0f, 0xad, 0xcc, 0xa0, 0x95, 0x18, 0x94, 0x83, 0x67,",
          "1561:  0x4e, 0xcb, 0x1a, 0xac, 0x5b, 0xac, 0xe3, 0x5a, 0xc2, 0xa0, 0xa5, 0x18, 0xb4, 0x12, 0x83, 0x96,",
          "1562:  0x9d, 0x66, 0xc4, 0x96, 0x5a, 0x91, 0x01, 0xd5, 0x80, 0x0c, 0x28, 0xa7, 0xbe, 0xa7, 0x97, 0x56,",
          "1563:  0xb5, 0xb5, 0x9a, 0x9d, 0xce, 0x91, 0x0e, 0xf3, 0x9e, 0xbf, 0x89, 0x9d, 0x36, 0xd1, 0xcb, 0xab,",
          "1564:  0xda, 0x5a, 0xd5, 0x4e, 0xa6, 0x68, 0x15, 0xea, 0x98, 0xb1, 0x47, 0xf8, 0x90, 0x74, 0x77, 0xc8,",
          "1565:  0x50, 0xaf, 0x48, 0x41, 0x95, 0x24, 0x64, 0x31, 0x63, 0x8f, 0x71, 0x8f, 0xe8, 0xb3, 0x72, 0x35,",
          "1566:  0x99, 0xa2, 0x65, 0xa8, 0x79, 0xb8, 0x47, 0x38, 0xc3, 0x0e, 0xd1, 0xab, 0x72, 0x2d, 0x23, 0xa0,",
          "1567:  0xaf, 0x61, 0x49, 0x71, 0xfc, 0xc0, 0xef, 0x07, 0x0e, 0xd1, 0x41, 0x86, 0xbe, 0x37, 0x5d, 0xe8,",
          "1568:  0x1b, 0x79, 0xb5, 0xf6, 0xb8, 0x25, 0xf4, 0x05, 0xcc, 0xca, 0xa2, 0xd1, 0xeb, 0xab, 0xe5, 0x13,",
          "1569:  0xcd, 0x76, 0xa4, 0x16, 0x79, 0x30, 0xcf, 0xba, 0x7d, 0x97, 0x7a, 0x5c, 0x3f, 0x23, 0x2d, 0x3c,",
          "1570:  0x99, 0xce, 0xc2, 0xa6, 0xef, 0x1d, 0x51, 0x77, 0x17, 0x7b, 0xd8, 0x25, 0x3d, 0xe2, 0x85, 0xfb,",
          "1571:  0x52, 0xb9, 0x9d, 0x18, 0x41, 0x2f, 0xa0, 0xd1, 0xe9, 0xf3, 0xd0, 0xef, 0xd1, 0x17, 0x64, 0x8f,",
          "1572:  0xc9, 0xe2, 0xd6, 0xcf, 0xca, 0x6c, 0x3e, 0x9e, 0xce, 0xf0, 0x4e, 0x4e, 0xab, 0x3d, 0x66, 0x47,",
          "1573:  0x14, 0x49, 0xa7, 0x7f, 0x48, 0x3e, 0x21, 0x81, 0xac, 0xae, 0x85, 0xa8, 0x48, 0x14, 0x52, 0x54,",
          "1574:  0x46, 0x34, 0x9e, 0x71, 0x7d, 0x71, 0xb5, 0x1c, 0x95, 0x51, 0x4a, 0x42, 0x6b, 0xb0, 0x38, 0x20,",
          "1575:  0x01, 0x3d, 0x1a, 0x1e, 0x50, 0xd7, 0xc3, 0x61, 0x3f, 0x20, 0x7a, 0x43, 0x96, 0x62, 0x9e, 0x8c,",
          "1576:  0x7a, 0x70, 0xb6, 0x4d, 0xba, 0x3d, 0x91, 0xf2, 0xcd, 0x80, 0xb4, 0xb8, 0xbe, 0x24, 0xf3, 0xbb,",
          "1577:  0x3d, 0xfd, 0x0e, 0x4a, 0x75, 0xf6, 0xa8, 0x76, 0xe1, 0x98, 0xe7, 0xdb, 0xf1, 0x49, 0x89, 0xce,",
          "1578:  0x08, 0x8a, 0x1c, 0xcb, 0x91, 0xd1, 0x55, 0x58, 0x08, 0x03, 0xec, 0x74, 0xa8, 0xe7, 0xee, 0x92,",
          "1579:  0xb0, 0xed, 0xb7, 0xf4, 0x73, 0x32, 0x13, 0x39, 0x2a, 0x72, 0x00, 0x11, 0x0f, 0x1f, 0x76, 0x49,",
          "1580:  0x2b, 0xaa, 0xc5, 0x27, 0x43, 0x46, 0xb8, 0x7e, 0x5e, 0x46, 0x71, 0xcb, 0x52, 0x9a, 0x5b, 0xae,",
          "1581:  0x41, 0x58, 0x5b, 0x63, 0x52, 0x5b, 0x5e, 0x18, 0x0c, 0xed, 0x02, 0x75, 0xa8, 0x03, 0x75, 0x11,",
          "1582:  0x47, 0x52, 0x0a, 0x17, 0x64, 0x29, 0x7c, 0x38, 0x5d, 0x8e, 0x1e, 0x66, 0x0a, 0x6d, 0x55, 0xbb,",
          "1583:  0xb1, 0x05, 0x97, 0x26, 0xf8, 0x86, 0x1a, 0x50, 0xee, 0x90, 0xa1, 0xec, 0x69, 0x35, 0x5b, 0x0c,",
          "1584:  0xd1, 0x79, 0x98, 0x1d, 0xe0, 0x6e, 0x9f, 0xc8, 0x2e, 0x54, 0xb5, 0xa3, 0xc9, 0xdd, 0xd2, 0x1d,",
          "1585:  0xcd, 0xec, 0xc3, 0x85, 0x27, 0x32, 0xdc, 0xf4, 0x30, 0x9d, 0x46, 0x67, 0x34, 0x1f, 0xc2, 0xc5,",
          "1586:  0xbc, 0x59, 0xce, 0x7c, 0x8f, 0x13, 0x64, 0x01, 0x92, 0xd5, 0x47, 0x49, 0x2b, 0x5b, 0x95, 0x5e,",
          "1587:  0x54, 0xed, 0x82, 0x15, 0xf3, 0x9b, 0x12, 0x5c, 0xb4, 0x09, 0xf7, 0xbb, 0x03, 0x92, 0x94, 0xc6,",
          "1588:  0xe9, 0x34, 0xf7, 0xcf, 0xa1, 0x8c, 0x19, 0x93, 0x19, 0x9d, 0x7a, 0x97, 0x95, 0xf6, 0x69, 0x0b,",
          "1589:  0xad, 0xe8, 0x3a, 0x2c, 0xe1, 0xde, 0x21, 0x75, 0xfb, 0x7e, 0x9f, 0x27, 0x61, 0xc9, 0x7b, 0xa2,",
          "1590:  0x66, 0x8f, 0x2f, 0x98, 0x0e, 0x5c, 0x1a, 0x4b, 0x41, 0x9c, 0x4e, 0xf5, 0x0a, 0xd2, 0x72, 0x57,",
          "1591:  0x50, 0xa1, 0x91, 0xd2, 0x24, 0x23, 0xbf, 0x68, 0xd0, 0xc8, 0x4e, 0x47, 0xac, 0x7e, 0x19, 0x6a,",
          "1592:  0xbd, 0x98, 0xc6, 0x75, 0x4d, 0xb6, 0x98, 0x8c, 0x30, 0x7a, 0x1b, 0x95, 0xf2, 0xb7, 0xd1, 0x45,",
          "1593:  0x98, 0x8b, 0x70, 0x46, 0x1c, 0x58, 0x3c, 0x1b, 0x71, 0xb9, 0x92, 0x73, 0x79, 0x05, 0x80, 0xa7,",
          "1594:  0xe5, 0xae, 0xcf, 0xc9, 0x55, 0x85, 0x82, 0x4c, 0x38, 0x13, 0xf5, 0x2e, 0x9b, 0xf0, 0x7e, 0x37,",
          "1595:  0xd4, 0xe7, 0x25, 0xc7, 0x08, 0xcd, 0xf4, 0x61, 0xf1, 0x11, 0x15, 0x31, 0x1c, 0xf1, 0xd3, 0x29,",
          "1596:  0xf6, 0x77, 0xa0, 0x22, 0x8c, 0x89, 0xc0, 0x0e, 0x03, 0xec, 0x39, 0x6d, 0x92, 0xe4, 0x2a, 0x9d,",
          "1597:  0x23, 0x04, 0x95, 0x10, 0xbb, 0x5c, 0x2f, 0x49, 0xba, 0x1c, 0x9b, 0x3f, 0x96, 0x22, 0x4f, 0x37,",
          "1598:  0x18, 0xe3, 0x6f, 0x1f, 0xb0, 0x14, 0xb7, 0xd0, 0xf2, 0x78, 0x0b, 0xcd, 0xb9, 0xfc, 0x4f, 0x5a,",
          "1599:  0xe8, 0xc9, 0x75, 0xb5, 0xf9, 0x0d, 0xc6, 0x84, 0x23, 0xe8, 0x26, 0x54, 0x30, 0x63, 0x51, 0xc2,",
          "1600:  0xeb, 0xeb, 0x97, 0x55, 0x47, 0x63, 0x16, 0xf1, 0x1f, 0xbb, 0x24, 0x59, 0x8d, 0x77, 0xa1, 0x96,",
          "1601:  0x92, 0x5e, 0x65, 0xb6, 0xa6, 0x9a, 0xfd, 0x6b, 0x16, 0xfe, 0x25, 0x72, 0x7a, 0x20, 0x0b, 0x79,",
          "1602:  0x83, 0xb1, 0xfb, 0x24, 0xc4, 0xb4, 0xcb, 0x3f, 0xea, 0x93, 0x60, 0xf8, 0x86, 0xb7, 0xce, 0x85,",
          "1603:  0xb9, 0xe8, 0x1c, 0xc4, 0x1d, 0xe9, 0xc4, 0x01, 0x5d, 0xac, 0x3e, 0x43, 0x71, 0xe5, 0x37, 0x83,",
          "1604:  0xe2, 0x8a, 0x50, 0x55, 0xe5, 0x94, 0x50, 0xd5, 0x64, 0x60, 0xad, 0xc0, 0xf5, 0xb9, 0x51, 0xb8,",
          "1605:  0x5e, 0x00, 0x56, 0xe6, 0x5f, 0x17, 0xac, 0x54, 0x0b, 0xc1, 0x4a, 0xaf, 0xf0, 0xa4, 0xd5, 0x64,",
          "1606:  0xba, 0xdf, 0x53, 0x0b, 0x78, 0x62, 0xad, 0xbd, 0x8d, 0x33, 0xf7, 0xad, 0xbc, 0x88, 0x99, 0x9f,",
          "1607:  0xb9, 0x92, 0xde, 0x12, 0xa2, 0xb9, 0x89, 0x7e, 0x1d, 0xe9, 0x91, 0x63, 0x74, 0x1b, 0xe6, 0x3b,",
          "1608:  0xdc, 0xf7, 0x3c, 0x12, 0xc6, 0x05, 0x6b, 0xa8, 0x91, 0xed, 0x44, 0x4b, 0x1b, 0x8c, 0x1d, 0x30,",
          "1609:  0xe2, 0xd8, 0x09, 0x2b, 0xba, 0x06, 0x15, 0x01, 0x82, 0xe4, 0x8d, 0x51, 0x5f, 0xbf, 0xa4, 0x8a,",
          "1610:  0x08, 0xa4, 0x94, 0xf0, 0x4b, 0x26, 0x74, 0x17, 0x6a, 0xe9, 0x0e, 0xc7, 0x25, 0xb4, 0x3c, 0x62,",
          "1611:  0x24, 0x59, 0x4c, 0xc4, 0x32, 0x76, 0x21, 0xdb, 0xa2, 0x01, 0x71, 0x24, 0xfa, 0x98, 0x1d, 0x97,",
          "1612:  0xbd, 0x9f, 0x2c, 0xa6, 0xb2, 0x29, 0xbb, 0xf9, 0xb3, 0x06, 0x57, 0xb2, 0xad, 0x49, 0x6a, 0x60,",
          "1613:  0x97, 0x84, 0xb8, 0x85, 0x43, 0xfc, 0xf6, 0x3b, 0xf9, 0x55, 0x58, 0x70, 0xda, 0xc4, 0xe9, 0x64,",
          "1614:  0xb0, 0x3f, 0x7a, 0x81, 0xe6, 0xa8, 0xe6, 0xaf, 0x25, 0x58, 0x18, 0xdd, 0x08, 0xb1, 0x93, 0xe2,",
          "1615:  0x02, 0x4f, 0x76, 0x52, 0x8c, 0xd1, 0x3e, 0x9c, 0x21, 0xde, 0x80, 0x06, 0xbe, 0x27, 0x1e, 0x49,",
          "1616:  0x49, 0x5f, 0xb8, 0x3e, 0x79, 0x3b, 0xad, 0x2d, 0x85, 0x3d, 0xaa, 0xcb, 0x11, 0x0d, 0xc8, 0x03,",
          "1617:  0x60, 0x38, 0xc0, 0x3d, 0x12, 0x92, 0x40, 0x1c, 0xfe, 0xf2, 0x09, 0x1c, 0xfe, 0xc8, 0x83, 0xfd,",
          "1618:  0x44, 0xad, 0xad, 0x58, 0x30, 0x9e, 0xc1, 0xd2, 0x98, 0x4b, 0x05, 0xb5, 0x7f, 0x5b, 0xad, 0xfd,",
          "1619:  0xfa, 0xfa, 0x4a, 0x41, 0x84, 0x8a, 0x1a, 0xf5, 0x6c, 0xfc, 0x54, 0x82, 0xba, 0x52, 0x9f, 0x85,",
          "1620:  0x69, 0x5c, 0x01, 0x90, 0x02, 0x0f, 0x68, 0x37, 0xbe, 0x57, 0x6b, 0xb6, 0x42, 0x41, 0x9d, 0x82,",
          "1621:  0xa4, 0xec, 0x4c, 0xff, 0xb8, 0x28, 0xcc, 0x88, 0xc0, 0x66, 0xd2, 0x34, 0x8f, 0xfb, 0x60, 0x3c,",
          "1622:  0x43, 0x5f, 0xc1, 0xc2, 0x11, 0xed, 0x92, 0xfd, 0xcc, 0x91, 0x39, 0xe9, 0xc8, 0xde, 0xf4, 0x8e,",
          "1623:  0x3c, 0x50, 0xf5, 0xda, 0x39, 0x33, 0xe6, 0xff, 0xa1, 0x91, 0x3f, 0xae, 0xc2, 0x49, 0xda, 0xc3,",
          "1624:  0x6e, 0x9a, 0xad, 0x78, 0x66, 0x7e, 0xaf, 0x01, 0x1a, 0xdf, 0x8f, 0x49, 0x49, 0xef, 0xdc, 0xe1,",
          "1625:  0xc9, 0x2b, 0x3a, 0x3a, 0x28, 0x0a, 0x05, 0xed, 0x40, 0xbd, 0x45, 0x78, 0x48, 0x3d, 0xe9, 0x70,",
          "1626:  0xdc, 0x44, 0xfe, 0x77, 0xfc, 0xc6, 0xdf, 0xcf, 0x04, 0x6c, 0x55, 0xda, 0xfc, 0x18, 0x2e, 0x1f,",
          "1627:  0xcb, 0xad, 0x20, 0x62, 0x6d, 0x04, 0x11, 0x1f, 0x8b, 0xa3, 0x4d, 0x04, 0x8d, 0x7c, 0x37, 0x32,",
          "1628:  0x9f, 0xc3, 0x92, 0xc8, 0xe9, 0x66, 0x1b, 0x07, 0xe1, 0x29, 0xa1, 0xdc, 0x7b, 0x50, 0x4b, 0x4d,",
          "1629:  0x16, 0xe6, 0xda, 0x80, 0xea, 0x20, 0xf9, 0x1a, 0x11, 0xc1, 0xdc, 0x74, 0x6e, 0x6e, 0x00, 0x52,",
          "1630:  0xfd, 0x8d, 0xef, 0x8d, 0x6b, 0x30, 0x4b, 0x43, 0xd2, 0x4b, 0xc0, 0xdb, 0x85, 0x7c, 0xbb, 0x97,",
          "1631:  0xec, 0x76, 0xc4, 0xb3, 0xfe, 0xe7, 0x2c, 0x2c, 0x65, 0x5d, 0x57, 0xfc, 0x52, 0x87, 0xa0, 0x3d,",
          "1632:  0x68, 0x6c, 0xc7, 0xdf, 0x01, 0x93, 0xc7, 0x0b, 0xfa, 0xf7, 0x31, 0x0f, 0x7e, 0x63, 0xb9, 0x78,",
          "1633:  0x31, 0xf2, 0xc8, 0x9c, 0x41, 0x9f, 0xc2, 0xc2, 0xe8, 0xcb, 0x15, 0x5d, 0x51, 0x25, 0x0a, 0x1f,",
          "1634:  0xd3, 0x86, 0x79, 0x1c, 0x4b, 0xaa, 0xfa, 0x29, 0x2c, 0xe6, 0x9e, 0x71, 0xc8, 0x1c, 0xbd, 0xee,",
          "1635:  0x8b, 0x9e, 0xb9, 0xc6, 0x7f, 0x8e, 0xe5, 0x49, 0xb5, 0xdf, 0x83, 0x6a, 0xf2, 0xec, 0x19, 0xcd,",
          "1636:  0x40, 0xee, 0x31, 0x64, 0x34, 0x46, 0xf5, 0x1d, 0x71, 0x73, 0x06, 0xbd, 0x1f, 0x09, 0x0b, 0x58,",
          "1637:  0x3c, 0x2e, 0xac, 0x80, 0x7d, 0xe3, 0x5c, 0x01, 0xc0, 0x96, 0xa1, 0x9d, 0xdd, 0x96, 0xfd, 0x3f,",
          "1638:  0x86, 0x06, 0xe8, 0xbf, 0xaf, 0x85, 0x63, 0x0c, 0x33, 0xcf, 0x36, 0x8e, 0x2e, 0xcc, 0x19, 0xf4,",
          "1639:  0x83, 0x06, 0xe7, 0xb6, 0x49, 0x98, 0xbf, 0x69, 0xd1, 0x8d, 0x62, 0x23, 0x13, 0x6e, 0x64, 0xe3,",
          "1640:  0xf1, 0xb4, 0x27, 0x62, 0x54, 0xad, 0x39, 0x83, 0xf6, 0x65, 0xd8, 0x59, 0x65, 0xa3, 0xcb, 0x85,",
          "1641:  0x25, 0x9c, 0x66, 0x6f, 0x65, 0xd2, 0x72, 0x12, 0xea, 0x07, 0x1b, 0xbf, 0xbd, 0x5c, 0xd1, 0x7e,",
          "1642:  0x7f, 0xb9, 0xa2, 0xfd, 0xf1, 0x72, 0x45, 0xfb, 0xec, 0xd6, 0x2b, 0x3e, 0x90, 0x2b, 0xdf, 0xf2,",
          "1643:  0x31, 0xa3, 0x4e, 0x97, 0x12, 0x2f, 0x3c, 0x9c, 0x93, 0x9f, 0xc3, 0x6f, 0xfd, 0x1d, 0x00, 0x00,",
          "1644:  0xff, 0xff, 0x01, 0x70, 0xee, 0x21, 0xea, 0x17, 0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2007:   i -= len(m.XXX_unrecognized)",
          "2008:   copy(dAtA[i:], m.XXX_unrecognized)",
          "2009:  }",
          "2010:  if len(m.EnabledSourceTypes) > 0 {",
          "2011:   for k := range m.EnabledSourceTypes {",
          "2012:    v := m.EnabledSourceTypes[k]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2019:  if m.HelmOptions != nil {",
          "2020:   {",
          "2021:    size, err := m.HelmOptions.MarshalToSizedBuffer(dAtA[:i])",
          "2022:    if err != nil {",
          "2023:     return 0, err",
          "2024:    }",
          "2025:    i -= size",
          "2026:    i = encodeVarintRepository(dAtA, i, uint64(size))",
          "2027:   }",
          "2028:   i--",
          "2029:   dAtA[i] = 0x1",
          "2030:   i--",
          "2031:   dAtA[i] = 0xaa",
          "2032:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3442:    n += mapEntrySize + 2 + sovRepository(uint64(mapEntrySize))",
          "3443:   }",
          "3444:  }",
          "3445:  if m.XXX_unrecognized != nil {",
          "3446:   n += len(m.XXX_unrecognized)",
          "3447:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3468:  if m.HelmOptions != nil {",
          "3469:   l = m.HelmOptions.Size()",
          "3470:   n += 2 + l + sovRepository(uint64(l))",
          "3471:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4603:    }",
          "4604:    m.EnabledSourceTypes[mapkey] = mapvalue",
          "4605:    iNdEx = postIndex",
          "4606:   default:",
          "4607:    iNdEx = preIndex",
          "4608:    skippy, err := skipRepository(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4633:   case 21:",
          "4634:    if wireType != 2 {",
          "4635:     return fmt.Errorf(\"proto: wrong wireType = %d for field HelmOptions\", wireType)",
          "4636:    }",
          "4637:    var msglen int",
          "4638:    for shift := uint(0); ; shift += 7 {",
          "4639:     if shift >= 64 {",
          "4640:      return ErrIntOverflowRepository",
          "4641:     }",
          "4642:     if iNdEx >= l {",
          "4643:      return io.ErrUnexpectedEOF",
          "4644:     }",
          "4645:     b := dAtA[iNdEx]",
          "4646:     iNdEx++",
          "4647:     msglen |= int(b&0x7F) << shift",
          "4648:     if b < 0x80 {",
          "4649:      break",
          "4650:     }",
          "4651:    }",
          "4652:    if msglen < 0 {",
          "4653:     return ErrInvalidLengthRepository",
          "4654:    }",
          "4655:    postIndex := iNdEx + msglen",
          "4656:    if postIndex < 0 {",
          "4657:     return ErrInvalidLengthRepository",
          "4658:    }",
          "4659:    if postIndex > l {",
          "4660:     return io.ErrUnexpectedEOF",
          "4661:    }",
          "4662:    if m.HelmOptions == nil {",
          "4663:     m.HelmOptions = &v1alpha1.HelmOptions{}",
          "4664:    }",
          "4665:    if err := m.HelmOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {",
          "4666:     return err",
          "4667:    }",
          "4668:    iNdEx = postIndex",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  ociPrefix                      = \"oci://\"",
          "66: )",
          "72: type Service struct {",
          "73:  repoLock                  *repositoryLock",
          "",
          "[Removed Lines]",
          "69: var allowedHelmRemoteProtocols = []string{\"http\", \"https\"}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:   for _, val := range appHelm.ValueFiles {",
          "739:    if err != nil {",
          "740:     return nil, err",
          "741:    }",
          "",
          "[Removed Lines]",
          "738:    path, isRemote, err := resolveHelmValueFilePath(appPath, repoRoot, val, allowedHelmRemoteProtocols)",
          "",
          "[Added Lines]",
          "735:    var protocols []string",
          "736:    if q.HelmOptions != nil {",
          "737:     protocols = q.HelmOptions.ValuesFileSchemes",
          "738:    }",
          "739:    path, isRemote, err := resolveHelmValueFilePath(appPath, repoRoot, val, protocols)",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.proto||reposerver/repository/repository.proto": [
          "File: reposerver/repository/repository.proto -> reposerver/repository/repository.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     bool noRevisionCache = 18;",
          "31:     string trackingMethod = 19;",
          "32:     map<string, bool> enabledSourceTypes = 20;",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:     github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.HelmOptions helmOptions = 21;",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "800:     Values:     `cluster: {slaveCount: 2}`,",
          "801:    },",
          "802:   },",
          "803:  })",
          "804:  assert.NoError(t, err)",
          "805: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:   HelmOptions: &argoappv1.HelmOptions{ValuesFileSchemes: []string{\"https\"}},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889:   assert.Error(t, err)",
          "890:   assert.Contains(t, err.Error(), \"is not allowed\")",
          "891:  })",
          "892: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:  t.Run(\"Remote values file from custom allowed protocol\", func(t *testing.T) {",
          "895:   service := newService(\"./testdata/my-chart\")",
          "896:   _, err := service.GenerateManifest(context.Background(), &apiclient.ManifestRequest{",
          "897:    Repo:    &argoappv1.Repository{},",
          "898:    AppName: \"test\",",
          "899:    ApplicationSource: &argoappv1.ApplicationSource{",
          "900:     Path: \".\",",
          "901:     Helm: &argoappv1.ApplicationSourceHelm{",
          "902:      ValueFiles: []string{\"s3://my-bucket/my-chart-values.yaml\"},",
          "903:     },",
          "904:    },",
          "905:    HelmOptions: &argoappv1.HelmOptions{ValuesFileSchemes: []string{\"s3\"}},",
          "906:   })",
          "907:   assert.Error(t, err)",
          "908:   assert.Contains(t, err.Error(), \"s3://my-bucket/my-chart-values.yaml: no such file or directory\")",
          "909:  })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1802:  }",
          "1803: }",
          "1805: func Test_resolveHelmValueFilePath(t *testing.T) {",
          "1806:  t.Run(\"Resolve normal relative path into absolute path\", func(t *testing.T) {",
          "1807:   p, remote, err := resolveHelmValueFilePath(\"/foo/bar\", \"/foo\", \"baz/bim.yaml\", allowedHelmRemoteProtocols)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1823: var allowedHelmRemoteProtocols = []string{\"http\", \"https\"}",
          "",
          "---------------"
        ],
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:  repo *appv1.Repository,",
          "230:  helmRepos []*appv1.Repository,",
          "231:  helmCreds []*v1alpha1.RepoCreds,",
          "232:  kustomizeOptions *v1alpha1.KustomizeOptions,",
          "233:  enabledSourceTypes map[string]bool,",
          "234: ) error) error {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:  helmOptions *v1alpha1.HelmOptions,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:  if err != nil {",
          "272:   return err",
          "273:  }",
          "274:  permittedHelmCredentials, err := argo.GetPermittedReposCredentials(proj, helmRepositoryCredentials)",
          "275:  if err != nil {",
          "276:   return err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:  helmOptions, err := s.settingsMgr.GetHelmSettings()",
          "276:  if err != nil {",
          "277:   return err",
          "278:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "279:  if err != nil {",
          "280:   return err",
          "281:  }",
          "283: }",
          "",
          "[Removed Lines]",
          "282:  return action(client, repo, permittedHelmRepos, permittedHelmCredentials, kustomizeOptions, enabledSourceTypes)",
          "",
          "[Added Lines]",
          "287:  return action(client, repo, permittedHelmRepos, permittedHelmCredentials, helmOptions, kustomizeOptions, enabledSourceTypes)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295:  var manifestInfo *apiclient.ManifestResponse",
          "296:  err = s.queryRepoServer(ctx, a, func(",
          "298:   revision := a.Spec.Source.TargetRevision",
          "299:   if q.Revision != \"\" {",
          "300:    revision = q.Revision",
          "",
          "[Removed Lines]",
          "297:   client apiclient.RepoServerServiceClient, repo *appv1.Repository, helmRepos []*appv1.Repository, helmCreds []*appv1.RepoCreds, kustomizeOptions *appv1.KustomizeOptions, enableGenerateManifests map[string]bool) error {",
          "",
          "[Added Lines]",
          "302:   client apiclient.RepoServerServiceClient, repo *appv1.Repository, helmRepos []*appv1.Repository, helmCreds []*appv1.RepoCreds, helmOptions *appv1.HelmOptions, kustomizeOptions *appv1.KustomizeOptions, enableGenerateManifests map[string]bool) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "336:    KubeVersion:        serverVersion,",
          "337:    ApiVersions:        argo.APIResourcesToStrings(apiResources, true),",
          "338:    HelmRepoCreds:      helmCreds,",
          "339:    TrackingMethod:     string(argoutil.GetTrackingMethod(s.settingsMgr)),",
          "340:    EnabledSourceTypes: enableGenerateManifests,",
          "341:   })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:    HelmOptions:        helmOptions,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "412:    repo *appv1.Repository,",
          "413:    helmRepos []*appv1.Repository,",
          "414:    _ []*appv1.RepoCreds,",
          "415:    kustomizeOptions *appv1.KustomizeOptions,",
          "416:    enabledSourceTypes map[string]bool,",
          "417:   ) error {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:    helmOptions *appv1.HelmOptions,",
          "",
          "---------------"
        ],
        "util/argo/argo.go||util/argo/argo.go": [
          "File: util/argo/argo.go -> util/argo/argo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   return conditions, nil",
          "223:  }",
          "225:  helmRepos, err := db.ListHelmRepositories(ctx)",
          "226:  if err != nil {",
          "227:   return nil, err",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:  helmOptions, err := settingsMgr.GetHelmSettings()",
          "226:  if err != nil {",
          "227:   return nil, err",
          "228:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:   return nil, err",
          "281:  }",
          "282:  conditions = append(conditions, verifyGenerateManifests(",
          "285:  return conditions, nil",
          "286: }",
          "",
          "[Removed Lines]",
          "283:   ctx, repo, permittedHelmRepos, app, repoClient, kustomizeOptions, plugins, cluster.ServerVersion, APIResourcesToStrings(apiGroups, true), permittedHelmCredentials, enabledSourceTypes, settingsMgr)...)",
          "",
          "[Added Lines]",
          "288:   ctx,",
          "289:   repo,",
          "290:   permittedHelmRepos,",
          "291:   helmOptions,",
          "292:   app,",
          "293:   repoClient,",
          "294:   kustomizeOptions,",
          "295:   plugins,",
          "296:   cluster.ServerVersion,",
          "297:   APIResourcesToStrings(apiGroups, true),",
          "298:   permittedHelmCredentials,",
          "299:   enabledSourceTypes,",
          "300:   settingsMgr)...)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "470: }",
          "474:  spec := &app.Spec",
          "475:  var conditions []argoappv1.ApplicationCondition",
          "476:  if spec.Destination.Server == \"\" {",
          "",
          "[Removed Lines]",
          "473: func verifyGenerateManifests(ctx context.Context, repoRes *argoappv1.Repository, helmRepos argoappv1.Repositories, app *argoappv1.Application, repoClient apiclient.RepoServerServiceClient, kustomizeOptions *argoappv1.KustomizeOptions, plugins []*argoappv1.ConfigManagementPlugin, kubeVersion string, apiVersions []string, repositoryCredentials []*argoappv1.RepoCreds, enableGenerateManifests map[string]bool, settingsMgr *settings.SettingsManager) []argoappv1.ApplicationCondition {",
          "",
          "[Added Lines]",
          "490: func verifyGenerateManifests(ctx context.Context, repoRes *argoappv1.Repository, helmRepos argoappv1.Repositories, helmOptions *argoappv1.HelmOptions, app *argoappv1.Application, repoClient apiclient.RepoServerServiceClient, kustomizeOptions *argoappv1.KustomizeOptions, plugins []*argoappv1.ConfigManagementPlugin, kubeVersion string, apiVersions []string, repositoryCredentials []*argoappv1.RepoCreds, enableGenerateManifests map[string]bool, settingsMgr *settings.SettingsManager) []argoappv1.ApplicationCondition {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "496:   KustomizeOptions:   kustomizeOptions,",
          "497:   KubeVersion:        kubeVersion,",
          "498:   ApiVersions:        apiVersions,",
          "499:   HelmRepoCreds:      repositoryCredentials,",
          "500:   TrackingMethod:     string(GetTrackingMethod(settingsMgr)),",
          "501:   EnabledSourceTypes: enableGenerateManifests,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516:   HelmOptions:        helmOptions,",
          "",
          "---------------"
        ],
        "util/settings/settings.go||util/settings/settings.go": [
          "File: util/settings/settings.go -> util/settings/settings.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:  settingsPasswordPatternKey = \"passwordPattern\"",
          "398:  inClusterEnabledKey = \"cluster.inClusterEnabled\"",
          "399: )",
          "401: var (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:  helmValuesFileSchemesKey = \"helm.valuesFileSchemes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:  return diffOptions, nil",
          "852: }",
          "855: func (mgr *SettingsManager) GetKustomizeSettings() (*KustomizeSettings, error) {",
          "856:  argoCDCM, err := mgr.getConfigMap()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857: func (mgr *SettingsManager) GetHelmSettings() (*v1alpha1.HelmOptions, error) {",
          "858:  argoCDCM, err := mgr.getConfigMap()",
          "859:  if err != nil {",
          "860:   return nil, err",
          "861:  }",
          "862:  helmOptions := &v1alpha1.HelmOptions{}",
          "863:  if value, ok := argoCDCM.Data[helmValuesFileSchemesKey]; ok {",
          "864:   for _, item := range strings.Split(value, \",\") {",
          "865:    if item := strings.TrimSpace(item); item != \"\" {",
          "866:     helmOptions.ValuesFileSchemes = append(helmOptions.ValuesFileSchemes, item)",
          "867:    }",
          "868:   }",
          "869:  } else {",
          "870:   helmOptions.ValuesFileSchemes = []string{\"https\", \"http\"}",
          "871:  }",
          "872:  return helmOptions, nil",
          "873: }",
          "",
          "---------------"
        ],
        "util/settings/settings_test.go||util/settings/settings_test.go": [
          "File: util/settings/settings_test.go -> util/settings/settings_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1084:   })",
          "1085:  }",
          "1086: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088: func TestGetHelmSettings(t *testing.T) {",
          "1089:  testCases := []struct {",
          "1090:   name     string",
          "1091:   data     map[string]string",
          "1092:   expected []string",
          "1093:  }{{",
          "1094:   name:     \"Default\",",
          "1095:   data:     map[string]string{},",
          "1096:   expected: []string{\"http\", \"https\"},",
          "1097:  }, {",
          "1098:   name: \"Configured Not Empty\",",
          "1099:   data: map[string]string{",
          "1100:    \"helm.valuesFileSchemes\": \"s3, git\",",
          "1101:   },",
          "1102:   expected: []string{\"s3\", \"git\"},",
          "1103:  }, {",
          "1104:   name: \"Configured Empty\",",
          "1105:   data: map[string]string{",
          "1106:    \"helm.valuesFileSchemes\": \"\",",
          "1107:   },",
          "1108:   expected: nil,",
          "1109:  }}",
          "1111:  for i := range testCases {",
          "1112:   tc := testCases[i]",
          "1113:   t.Run(tc.name, func(t *testing.T) {",
          "1114:    cm := &v1.ConfigMap{",
          "1115:     ObjectMeta: metav1.ObjectMeta{",
          "1116:      Name:      common.ArgoCDConfigMapName,",
          "1117:      Namespace: \"default\",",
          "1118:      Labels: map[string]string{",
          "1119:       \"app.kubernetes.io/part-of\": \"argocd\",",
          "1120:      },",
          "1121:     },",
          "1122:     Data: tc.data,",
          "1123:    }",
          "1124:    argocdSecret := &v1.Secret{",
          "1125:     ObjectMeta: metav1.ObjectMeta{",
          "1126:      Name:      common.ArgoCDSecretName,",
          "1127:      Namespace: \"default\",",
          "1128:     },",
          "1129:     Data: map[string][]byte{",
          "1130:      \"admin.password\":   nil,",
          "1131:      \"server.secretkey\": nil,",
          "1132:     },",
          "1133:    }",
          "1134:    secret := &v1.Secret{",
          "1135:     ObjectMeta: metav1.ObjectMeta{",
          "1136:      Name:      \"acme\",",
          "1137:      Namespace: \"default\",",
          "1138:      Labels: map[string]string{",
          "1139:       \"app.kubernetes.io/part-of\": \"argocd\",",
          "1140:      },",
          "1141:     },",
          "1142:     Data: map[string][]byte{",
          "1143:      \"clientSecret\": []byte(\"deadbeef\"),",
          "1144:     },",
          "1145:    }",
          "1146:    kubeClient := fake.NewSimpleClientset(cm, secret, argocdSecret)",
          "1147:    settingsManager := NewSettingsManager(context.Background(), kubeClient, \"default\")",
          "1149:    helmSettings, err := settingsManager.GetHelmSettings()",
          "1150:    assert.NoError(t, err)",
          "1152:    assert.ElementsMatch(t, tc.expected, helmSettings.ValuesFileSchemes)",
          "1153:   })",
          "1154:  }",
          "1155: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}